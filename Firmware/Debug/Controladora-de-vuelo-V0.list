
Controladora-de-vuelo-V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019940  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d90  08019bf0  08019bf0  0001abf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801a980  0801a980  0001b980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801a988  0801a988  0001b988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801a98c  0801a98c  0001b98c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000290  24000000  0801a990  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000066c8  24000290  0801ac20  0001c290  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24006958  0801ac20  0001c958  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001c290  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003555e  00000000  00000000  0001c2be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007c1d  00000000  00000000  0005181c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002938  00000000  00000000  00059440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001fbe  00000000  00000000  0005bd78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d7e8  00000000  00000000  0005dd36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000416be  00000000  00000000  0009b51e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00161691  00000000  00000000  000dcbdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0023e26d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000bb88  00000000  00000000  0023e2b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006a  00000000  00000000  00249e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000290 	.word	0x24000290
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08019bd8 	.word	0x08019bd8

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000294 	.word	0x24000294
 80002ec:	08019bd8 	.word	0x08019bd8

080002f0 <strcmp>:
 80002f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002f8:	2a01      	cmp	r2, #1
 80002fa:	bf28      	it	cs
 80002fc:	429a      	cmpcs	r2, r3
 80002fe:	d0f7      	beq.n	80002f0 <strcmp>
 8000300:	1ad0      	subs	r0, r2, r3
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_ldivmod>:
 8000728:	b97b      	cbnz	r3, 800074a <__aeabi_ldivmod+0x22>
 800072a:	b972      	cbnz	r2, 800074a <__aeabi_ldivmod+0x22>
 800072c:	2900      	cmp	r1, #0
 800072e:	bfbe      	ittt	lt
 8000730:	2000      	movlt	r0, #0
 8000732:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000736:	e006      	blt.n	8000746 <__aeabi_ldivmod+0x1e>
 8000738:	bf08      	it	eq
 800073a:	2800      	cmpeq	r0, #0
 800073c:	bf1c      	itt	ne
 800073e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000742:	f04f 30ff 	movne.w	r0, #4294967295
 8000746:	f000 b9ed 	b.w	8000b24 <__aeabi_idiv0>
 800074a:	f1ad 0c08 	sub.w	ip, sp, #8
 800074e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000752:	2900      	cmp	r1, #0
 8000754:	db09      	blt.n	800076a <__aeabi_ldivmod+0x42>
 8000756:	2b00      	cmp	r3, #0
 8000758:	db1a      	blt.n	8000790 <__aeabi_ldivmod+0x68>
 800075a:	f000 f885 	bl	8000868 <__udivmoddi4>
 800075e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000762:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000766:	b004      	add	sp, #16
 8000768:	4770      	bx	lr
 800076a:	4240      	negs	r0, r0
 800076c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000770:	2b00      	cmp	r3, #0
 8000772:	db1b      	blt.n	80007ac <__aeabi_ldivmod+0x84>
 8000774:	f000 f878 	bl	8000868 <__udivmoddi4>
 8000778:	f8dd e004 	ldr.w	lr, [sp, #4]
 800077c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000780:	b004      	add	sp, #16
 8000782:	4240      	negs	r0, r0
 8000784:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000788:	4252      	negs	r2, r2
 800078a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800078e:	4770      	bx	lr
 8000790:	4252      	negs	r2, r2
 8000792:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000796:	f000 f867 	bl	8000868 <__udivmoddi4>
 800079a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800079e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007a2:	b004      	add	sp, #16
 80007a4:	4240      	negs	r0, r0
 80007a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007aa:	4770      	bx	lr
 80007ac:	4252      	negs	r2, r2
 80007ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007b2:	f000 f859 	bl	8000868 <__udivmoddi4>
 80007b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007be:	b004      	add	sp, #16
 80007c0:	4252      	negs	r2, r2
 80007c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007c6:	4770      	bx	lr

080007c8 <__aeabi_uldivmod>:
 80007c8:	b953      	cbnz	r3, 80007e0 <__aeabi_uldivmod+0x18>
 80007ca:	b94a      	cbnz	r2, 80007e0 <__aeabi_uldivmod+0x18>
 80007cc:	2900      	cmp	r1, #0
 80007ce:	bf08      	it	eq
 80007d0:	2800      	cmpeq	r0, #0
 80007d2:	bf1c      	itt	ne
 80007d4:	f04f 31ff 	movne.w	r1, #4294967295
 80007d8:	f04f 30ff 	movne.w	r0, #4294967295
 80007dc:	f000 b9a2 	b.w	8000b24 <__aeabi_idiv0>
 80007e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007e8:	f000 f83e 	bl	8000868 <__udivmoddi4>
 80007ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f4:	b004      	add	sp, #16
 80007f6:	4770      	bx	lr

080007f8 <__aeabi_d2lz>:
 80007f8:	b508      	push	{r3, lr}
 80007fa:	4602      	mov	r2, r0
 80007fc:	460b      	mov	r3, r1
 80007fe:	ec43 2b17 	vmov	d7, r2, r3
 8000802:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800080a:	d403      	bmi.n	8000814 <__aeabi_d2lz+0x1c>
 800080c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000810:	f000 b80a 	b.w	8000828 <__aeabi_d2ulz>
 8000814:	eeb1 7b47 	vneg.f64	d7, d7
 8000818:	ec51 0b17 	vmov	r0, r1, d7
 800081c:	f000 f804 	bl	8000828 <__aeabi_d2ulz>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	bd08      	pop	{r3, pc}

08000828 <__aeabi_d2ulz>:
 8000828:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000858 <__aeabi_d2ulz+0x30>
 800082c:	ec41 0b17 	vmov	d7, r0, r1
 8000830:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000860 <__aeabi_d2ulz+0x38>
 8000834:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000838:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800083c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000840:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000844:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000848:	ee16 1a10 	vmov	r1, s12
 800084c:	ee17 0a90 	vmov	r0, s15
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	f3af 8000 	nop.w
 8000858:	00000000 	.word	0x00000000
 800085c:	3df00000 	.word	0x3df00000
 8000860:	00000000 	.word	0x00000000
 8000864:	41f00000 	.word	0x41f00000

08000868 <__udivmoddi4>:
 8000868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800086c:	9d08      	ldr	r5, [sp, #32]
 800086e:	460c      	mov	r4, r1
 8000870:	2b00      	cmp	r3, #0
 8000872:	d14e      	bne.n	8000912 <__udivmoddi4+0xaa>
 8000874:	4694      	mov	ip, r2
 8000876:	458c      	cmp	ip, r1
 8000878:	4686      	mov	lr, r0
 800087a:	fab2 f282 	clz	r2, r2
 800087e:	d962      	bls.n	8000946 <__udivmoddi4+0xde>
 8000880:	b14a      	cbz	r2, 8000896 <__udivmoddi4+0x2e>
 8000882:	f1c2 0320 	rsb	r3, r2, #32
 8000886:	4091      	lsls	r1, r2
 8000888:	fa20 f303 	lsr.w	r3, r0, r3
 800088c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000890:	4319      	orrs	r1, r3
 8000892:	fa00 fe02 	lsl.w	lr, r0, r2
 8000896:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800089a:	fa1f f68c 	uxth.w	r6, ip
 800089e:	fbb1 f4f7 	udiv	r4, r1, r7
 80008a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a6:	fb07 1114 	mls	r1, r7, r4, r1
 80008aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ae:	fb04 f106 	mul.w	r1, r4, r6
 80008b2:	4299      	cmp	r1, r3
 80008b4:	d90a      	bls.n	80008cc <__udivmoddi4+0x64>
 80008b6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80008be:	f080 8112 	bcs.w	8000ae6 <__udivmoddi4+0x27e>
 80008c2:	4299      	cmp	r1, r3
 80008c4:	f240 810f 	bls.w	8000ae6 <__udivmoddi4+0x27e>
 80008c8:	3c02      	subs	r4, #2
 80008ca:	4463      	add	r3, ip
 80008cc:	1a59      	subs	r1, r3, r1
 80008ce:	fa1f f38e 	uxth.w	r3, lr
 80008d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80008d6:	fb07 1110 	mls	r1, r7, r0, r1
 80008da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008de:	fb00 f606 	mul.w	r6, r0, r6
 80008e2:	429e      	cmp	r6, r3
 80008e4:	d90a      	bls.n	80008fc <__udivmoddi4+0x94>
 80008e6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80008ee:	f080 80fc 	bcs.w	8000aea <__udivmoddi4+0x282>
 80008f2:	429e      	cmp	r6, r3
 80008f4:	f240 80f9 	bls.w	8000aea <__udivmoddi4+0x282>
 80008f8:	4463      	add	r3, ip
 80008fa:	3802      	subs	r0, #2
 80008fc:	1b9b      	subs	r3, r3, r6
 80008fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000902:	2100      	movs	r1, #0
 8000904:	b11d      	cbz	r5, 800090e <__udivmoddi4+0xa6>
 8000906:	40d3      	lsrs	r3, r2
 8000908:	2200      	movs	r2, #0
 800090a:	e9c5 3200 	strd	r3, r2, [r5]
 800090e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000912:	428b      	cmp	r3, r1
 8000914:	d905      	bls.n	8000922 <__udivmoddi4+0xba>
 8000916:	b10d      	cbz	r5, 800091c <__udivmoddi4+0xb4>
 8000918:	e9c5 0100 	strd	r0, r1, [r5]
 800091c:	2100      	movs	r1, #0
 800091e:	4608      	mov	r0, r1
 8000920:	e7f5      	b.n	800090e <__udivmoddi4+0xa6>
 8000922:	fab3 f183 	clz	r1, r3
 8000926:	2900      	cmp	r1, #0
 8000928:	d146      	bne.n	80009b8 <__udivmoddi4+0x150>
 800092a:	42a3      	cmp	r3, r4
 800092c:	d302      	bcc.n	8000934 <__udivmoddi4+0xcc>
 800092e:	4290      	cmp	r0, r2
 8000930:	f0c0 80f0 	bcc.w	8000b14 <__udivmoddi4+0x2ac>
 8000934:	1a86      	subs	r6, r0, r2
 8000936:	eb64 0303 	sbc.w	r3, r4, r3
 800093a:	2001      	movs	r0, #1
 800093c:	2d00      	cmp	r5, #0
 800093e:	d0e6      	beq.n	800090e <__udivmoddi4+0xa6>
 8000940:	e9c5 6300 	strd	r6, r3, [r5]
 8000944:	e7e3      	b.n	800090e <__udivmoddi4+0xa6>
 8000946:	2a00      	cmp	r2, #0
 8000948:	f040 8090 	bne.w	8000a6c <__udivmoddi4+0x204>
 800094c:	eba1 040c 	sub.w	r4, r1, ip
 8000950:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000954:	fa1f f78c 	uxth.w	r7, ip
 8000958:	2101      	movs	r1, #1
 800095a:	fbb4 f6f8 	udiv	r6, r4, r8
 800095e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000962:	fb08 4416 	mls	r4, r8, r6, r4
 8000966:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800096a:	fb07 f006 	mul.w	r0, r7, r6
 800096e:	4298      	cmp	r0, r3
 8000970:	d908      	bls.n	8000984 <__udivmoddi4+0x11c>
 8000972:	eb1c 0303 	adds.w	r3, ip, r3
 8000976:	f106 34ff 	add.w	r4, r6, #4294967295
 800097a:	d202      	bcs.n	8000982 <__udivmoddi4+0x11a>
 800097c:	4298      	cmp	r0, r3
 800097e:	f200 80cd 	bhi.w	8000b1c <__udivmoddi4+0x2b4>
 8000982:	4626      	mov	r6, r4
 8000984:	1a1c      	subs	r4, r3, r0
 8000986:	fa1f f38e 	uxth.w	r3, lr
 800098a:	fbb4 f0f8 	udiv	r0, r4, r8
 800098e:	fb08 4410 	mls	r4, r8, r0, r4
 8000992:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000996:	fb00 f707 	mul.w	r7, r0, r7
 800099a:	429f      	cmp	r7, r3
 800099c:	d908      	bls.n	80009b0 <__udivmoddi4+0x148>
 800099e:	eb1c 0303 	adds.w	r3, ip, r3
 80009a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80009a6:	d202      	bcs.n	80009ae <__udivmoddi4+0x146>
 80009a8:	429f      	cmp	r7, r3
 80009aa:	f200 80b0 	bhi.w	8000b0e <__udivmoddi4+0x2a6>
 80009ae:	4620      	mov	r0, r4
 80009b0:	1bdb      	subs	r3, r3, r7
 80009b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009b6:	e7a5      	b.n	8000904 <__udivmoddi4+0x9c>
 80009b8:	f1c1 0620 	rsb	r6, r1, #32
 80009bc:	408b      	lsls	r3, r1
 80009be:	fa22 f706 	lsr.w	r7, r2, r6
 80009c2:	431f      	orrs	r7, r3
 80009c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80009c8:	fa04 f301 	lsl.w	r3, r4, r1
 80009cc:	ea43 030c 	orr.w	r3, r3, ip
 80009d0:	40f4      	lsrs	r4, r6
 80009d2:	fa00 f801 	lsl.w	r8, r0, r1
 80009d6:	0c38      	lsrs	r0, r7, #16
 80009d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009dc:	fbb4 fef0 	udiv	lr, r4, r0
 80009e0:	fa1f fc87 	uxth.w	ip, r7
 80009e4:	fb00 441e 	mls	r4, r0, lr, r4
 80009e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009ec:	fb0e f90c 	mul.w	r9, lr, ip
 80009f0:	45a1      	cmp	r9, r4
 80009f2:	fa02 f201 	lsl.w	r2, r2, r1
 80009f6:	d90a      	bls.n	8000a0e <__udivmoddi4+0x1a6>
 80009f8:	193c      	adds	r4, r7, r4
 80009fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009fe:	f080 8084 	bcs.w	8000b0a <__udivmoddi4+0x2a2>
 8000a02:	45a1      	cmp	r9, r4
 8000a04:	f240 8081 	bls.w	8000b0a <__udivmoddi4+0x2a2>
 8000a08:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a0c:	443c      	add	r4, r7
 8000a0e:	eba4 0409 	sub.w	r4, r4, r9
 8000a12:	fa1f f983 	uxth.w	r9, r3
 8000a16:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a1a:	fb00 4413 	mls	r4, r0, r3, r4
 8000a1e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a22:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a26:	45a4      	cmp	ip, r4
 8000a28:	d907      	bls.n	8000a3a <__udivmoddi4+0x1d2>
 8000a2a:	193c      	adds	r4, r7, r4
 8000a2c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a30:	d267      	bcs.n	8000b02 <__udivmoddi4+0x29a>
 8000a32:	45a4      	cmp	ip, r4
 8000a34:	d965      	bls.n	8000b02 <__udivmoddi4+0x29a>
 8000a36:	3b02      	subs	r3, #2
 8000a38:	443c      	add	r4, r7
 8000a3a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a3e:	fba0 9302 	umull	r9, r3, r0, r2
 8000a42:	eba4 040c 	sub.w	r4, r4, ip
 8000a46:	429c      	cmp	r4, r3
 8000a48:	46ce      	mov	lr, r9
 8000a4a:	469c      	mov	ip, r3
 8000a4c:	d351      	bcc.n	8000af2 <__udivmoddi4+0x28a>
 8000a4e:	d04e      	beq.n	8000aee <__udivmoddi4+0x286>
 8000a50:	b155      	cbz	r5, 8000a68 <__udivmoddi4+0x200>
 8000a52:	ebb8 030e 	subs.w	r3, r8, lr
 8000a56:	eb64 040c 	sbc.w	r4, r4, ip
 8000a5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000a5e:	40cb      	lsrs	r3, r1
 8000a60:	431e      	orrs	r6, r3
 8000a62:	40cc      	lsrs	r4, r1
 8000a64:	e9c5 6400 	strd	r6, r4, [r5]
 8000a68:	2100      	movs	r1, #0
 8000a6a:	e750      	b.n	800090e <__udivmoddi4+0xa6>
 8000a6c:	f1c2 0320 	rsb	r3, r2, #32
 8000a70:	fa20 f103 	lsr.w	r1, r0, r3
 8000a74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a78:	fa24 f303 	lsr.w	r3, r4, r3
 8000a7c:	4094      	lsls	r4, r2
 8000a7e:	430c      	orrs	r4, r1
 8000a80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a84:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a88:	fa1f f78c 	uxth.w	r7, ip
 8000a8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a90:	fb08 3110 	mls	r1, r8, r0, r3
 8000a94:	0c23      	lsrs	r3, r4, #16
 8000a96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a9a:	fb00 f107 	mul.w	r1, r0, r7
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	d908      	bls.n	8000ab4 <__udivmoddi4+0x24c>
 8000aa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000aa6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000aaa:	d22c      	bcs.n	8000b06 <__udivmoddi4+0x29e>
 8000aac:	4299      	cmp	r1, r3
 8000aae:	d92a      	bls.n	8000b06 <__udivmoddi4+0x29e>
 8000ab0:	3802      	subs	r0, #2
 8000ab2:	4463      	add	r3, ip
 8000ab4:	1a5b      	subs	r3, r3, r1
 8000ab6:	b2a4      	uxth	r4, r4
 8000ab8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000abc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ac0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ac4:	fb01 f307 	mul.w	r3, r1, r7
 8000ac8:	42a3      	cmp	r3, r4
 8000aca:	d908      	bls.n	8000ade <__udivmoddi4+0x276>
 8000acc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ad0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ad4:	d213      	bcs.n	8000afe <__udivmoddi4+0x296>
 8000ad6:	42a3      	cmp	r3, r4
 8000ad8:	d911      	bls.n	8000afe <__udivmoddi4+0x296>
 8000ada:	3902      	subs	r1, #2
 8000adc:	4464      	add	r4, ip
 8000ade:	1ae4      	subs	r4, r4, r3
 8000ae0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ae4:	e739      	b.n	800095a <__udivmoddi4+0xf2>
 8000ae6:	4604      	mov	r4, r0
 8000ae8:	e6f0      	b.n	80008cc <__udivmoddi4+0x64>
 8000aea:	4608      	mov	r0, r1
 8000aec:	e706      	b.n	80008fc <__udivmoddi4+0x94>
 8000aee:	45c8      	cmp	r8, r9
 8000af0:	d2ae      	bcs.n	8000a50 <__udivmoddi4+0x1e8>
 8000af2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000af6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000afa:	3801      	subs	r0, #1
 8000afc:	e7a8      	b.n	8000a50 <__udivmoddi4+0x1e8>
 8000afe:	4631      	mov	r1, r6
 8000b00:	e7ed      	b.n	8000ade <__udivmoddi4+0x276>
 8000b02:	4603      	mov	r3, r0
 8000b04:	e799      	b.n	8000a3a <__udivmoddi4+0x1d2>
 8000b06:	4630      	mov	r0, r6
 8000b08:	e7d4      	b.n	8000ab4 <__udivmoddi4+0x24c>
 8000b0a:	46d6      	mov	lr, sl
 8000b0c:	e77f      	b.n	8000a0e <__udivmoddi4+0x1a6>
 8000b0e:	4463      	add	r3, ip
 8000b10:	3802      	subs	r0, #2
 8000b12:	e74d      	b.n	80009b0 <__udivmoddi4+0x148>
 8000b14:	4606      	mov	r6, r0
 8000b16:	4623      	mov	r3, r4
 8000b18:	4608      	mov	r0, r1
 8000b1a:	e70f      	b.n	800093c <__udivmoddi4+0xd4>
 8000b1c:	3e02      	subs	r6, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	e730      	b.n	8000984 <__udivmoddi4+0x11c>
 8000b22:	bf00      	nop

08000b24 <__aeabi_idiv0>:
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <LPF_cmd_filter_init>:
Servo_reverse_s Reverse ;
Servo_mgmt_s servo_outs ;


void LPF_cmd_filter_init(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
	//
	COF_cmds[0] = CutOffFreq_cmd_ail;
 8000b2e:	4b40      	ldr	r3, [pc, #256]	@ (8000c30 <LPF_cmd_filter_init+0x108>)
 8000b30:	4a40      	ldr	r2, [pc, #256]	@ (8000c34 <LPF_cmd_filter_init+0x10c>)
 8000b32:	601a      	str	r2, [r3, #0]
	COF_cmds[1] = CutOffFreq_cmd_ele;
 8000b34:	4b3e      	ldr	r3, [pc, #248]	@ (8000c30 <LPF_cmd_filter_init+0x108>)
 8000b36:	4a3f      	ldr	r2, [pc, #252]	@ (8000c34 <LPF_cmd_filter_init+0x10c>)
 8000b38:	605a      	str	r2, [r3, #4]
	COF_cmds[2] = CutOffFreq_cmd_rud;
 8000b3a:	4b3d      	ldr	r3, [pc, #244]	@ (8000c30 <LPF_cmd_filter_init+0x108>)
 8000b3c:	4a3d      	ldr	r2, [pc, #244]	@ (8000c34 <LPF_cmd_filter_init+0x10c>)
 8000b3e:	609a      	str	r2, [r3, #8]
	COF_cmds[3] = CutOffFreq_cmd_thr;
 8000b40:	4b3b      	ldr	r3, [pc, #236]	@ (8000c30 <LPF_cmd_filter_init+0x108>)
 8000b42:	4a3c      	ldr	r2, [pc, #240]	@ (8000c34 <LPF_cmd_filter_init+0x10c>)
 8000b44:	60da      	str	r2, [r3, #12]
	for(int idx = 0; idx < 4; idx++)
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	e066      	b.n	8000c1a <LPF_cmd_filter_init+0xf2>
	{
		//
		commands_fltrs[idx].inicio 		= 1;
 8000b4c:	4a3a      	ldr	r2, [pc, #232]	@ (8000c38 <LPF_cmd_filter_init+0x110>)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	212c      	movs	r1, #44	@ 0x2c
 8000b52:	fb01 f303 	mul.w	r3, r1, r3
 8000b56:	4413      	add	r3, r2
 8000b58:	3328      	adds	r3, #40	@ 0x28
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	601a      	str	r2, [r3, #0]
		commands_fltrs[idx].f_cutoff 	= COF_cmds[idx];
 8000b5e:	4a34      	ldr	r2, [pc, #208]	@ (8000c30 <LPF_cmd_filter_init+0x108>)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	4413      	add	r3, r2
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	4933      	ldr	r1, [pc, #204]	@ (8000c38 <LPF_cmd_filter_init+0x110>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	202c      	movs	r0, #44	@ 0x2c
 8000b6e:	fb00 f303 	mul.w	r3, r0, r3
 8000b72:	440b      	add	r3, r1
 8000b74:	3318      	adds	r3, #24
 8000b76:	601a      	str	r2, [r3, #0]
		commands_fltrs[idx].t_sample 	= SAMPLE_ATT ;
 8000b78:	4a2f      	ldr	r2, [pc, #188]	@ (8000c38 <LPF_cmd_filter_init+0x110>)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	212c      	movs	r1, #44	@ 0x2c
 8000b7e:	fb01 f303 	mul.w	r3, r1, r3
 8000b82:	4413      	add	r3, r2
 8000b84:	331c      	adds	r3, #28
 8000b86:	4a2d      	ldr	r2, [pc, #180]	@ (8000c3c <LPF_cmd_filter_init+0x114>)
 8000b88:	601a      	str	r2, [r3, #0]
		commands_fltrs[idx].Y_0 		= 0.0f ;
 8000b8a:	4a2b      	ldr	r2, [pc, #172]	@ (8000c38 <LPF_cmd_filter_init+0x110>)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	212c      	movs	r1, #44	@ 0x2c
 8000b90:	fb01 f303 	mul.w	r3, r1, r3
 8000b94:	4413      	add	r3, r2
 8000b96:	3308      	adds	r3, #8
 8000b98:	f04f 0200 	mov.w	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
		commands_fltrs[idx].U_n 		= 0.0f ;
 8000b9e:	4a26      	ldr	r2, [pc, #152]	@ (8000c38 <LPF_cmd_filter_init+0x110>)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	212c      	movs	r1, #44	@ 0x2c
 8000ba4:	fb01 f303 	mul.w	r3, r1, r3
 8000ba8:	4413      	add	r3, r2
 8000baa:	330c      	adds	r3, #12
 8000bac:	f04f 0200 	mov.w	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
		commands_fltrs[idx].Y_n 		= 0.0f ;
 8000bb2:	4a21      	ldr	r2, [pc, #132]	@ (8000c38 <LPF_cmd_filter_init+0x110>)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	212c      	movs	r1, #44	@ 0x2c
 8000bb8:	fb01 f303 	mul.w	r3, r1, r3
 8000bbc:	4413      	add	r3, r2
 8000bbe:	f04f 0200 	mov.w	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
		commands_fltrs[idx].Y_nm1 		= 0.0f ;
 8000bc4:	4a1c      	ldr	r2, [pc, #112]	@ (8000c38 <LPF_cmd_filter_init+0x110>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	212c      	movs	r1, #44	@ 0x2c
 8000bca:	fb01 f303 	mul.w	r3, r1, r3
 8000bce:	4413      	add	r3, r2
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	f04f 0200 	mov.w	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
		commands_fltrs[idx].U_nm1 		= 0.0f ;
 8000bd8:	4a17      	ldr	r2, [pc, #92]	@ (8000c38 <LPF_cmd_filter_init+0x110>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	212c      	movs	r1, #44	@ 0x2c
 8000bde:	fb01 f303 	mul.w	r3, r1, r3
 8000be2:	4413      	add	r3, r2
 8000be4:	3310      	adds	r3, #16
 8000be6:	f04f 0200 	mov.w	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
		commands_fltrs[idx].t_n 		= 0.0f ;
 8000bec:	4a12      	ldr	r2, [pc, #72]	@ (8000c38 <LPF_cmd_filter_init+0x110>)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	212c      	movs	r1, #44	@ 0x2c
 8000bf2:	fb01 f303 	mul.w	r3, r1, r3
 8000bf6:	4413      	add	r3, r2
 8000bf8:	3320      	adds	r3, #32
 8000bfa:	f04f 0200 	mov.w	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
		commands_fltrs[idx].t_nm1 		= 0.0f ;
 8000c00:	4a0d      	ldr	r2, [pc, #52]	@ (8000c38 <LPF_cmd_filter_init+0x110>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	212c      	movs	r1, #44	@ 0x2c
 8000c06:	fb01 f303 	mul.w	r3, r1, r3
 8000c0a:	4413      	add	r3, r2
 8000c0c:	3324      	adds	r3, #36	@ 0x24
 8000c0e:	f04f 0200 	mov.w	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
	for(int idx = 0; idx < 4; idx++)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3301      	adds	r3, #1
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2b03      	cmp	r3, #3
 8000c1e:	dd95      	ble.n	8000b4c <LPF_cmd_filter_init+0x24>
	}
}
 8000c20:	bf00      	nop
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	240003a0 	.word	0x240003a0
 8000c34:	41200000 	.word	0x41200000
 8000c38:	240002f0 	.word	0x240002f0
 8000c3c:	3c23d70a 	.word	0x3c23d70a

08000c40 <command_filtering>:

void command_filtering(void)
{
 8000c40:	b5b0      	push	{r4, r5, r7, lr}
 8000c42:	b08e      	sub	sp, #56	@ 0x38
 8000c44:	af00      	add	r7, sp, #0
	//
	commands_noise[0] = Command_out.roll   ;
 8000c46:	4b2b      	ldr	r3, [pc, #172]	@ (8000cf4 <command_filtering+0xb4>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a2b      	ldr	r2, [pc, #172]	@ (8000cf8 <command_filtering+0xb8>)
 8000c4c:	6013      	str	r3, [r2, #0]
	commands_noise[1] = Command_out.pitch  ;
 8000c4e:	4b29      	ldr	r3, [pc, #164]	@ (8000cf4 <command_filtering+0xb4>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	4a29      	ldr	r2, [pc, #164]	@ (8000cf8 <command_filtering+0xb8>)
 8000c54:	6053      	str	r3, [r2, #4]
	commands_noise[2] = Command_out.yaw    ;
 8000c56:	4b27      	ldr	r3, [pc, #156]	@ (8000cf4 <command_filtering+0xb4>)
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	4a27      	ldr	r2, [pc, #156]	@ (8000cf8 <command_filtering+0xb8>)
 8000c5c:	6093      	str	r3, [r2, #8]
	commands_noise[3] = Command_out.thrust ;
 8000c5e:	4b25      	ldr	r3, [pc, #148]	@ (8000cf4 <command_filtering+0xb4>)
 8000c60:	68db      	ldr	r3, [r3, #12]
 8000c62:	4a25      	ldr	r2, [pc, #148]	@ (8000cf8 <command_filtering+0xb8>)
 8000c64:	60d3      	str	r3, [r2, #12]

	for(int idx = 0; idx < 4; idx++)
 8000c66:	2300      	movs	r3, #0
 8000c68:	637b      	str	r3, [r7, #52]	@ 0x34
 8000c6a:	e02a      	b.n	8000cc2 <command_filtering+0x82>
	{
		//
		commands_fltrs[idx].U_n 	= commands_noise[idx];
 8000c6c:	4a22      	ldr	r2, [pc, #136]	@ (8000cf8 <command_filtering+0xb8>)
 8000c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	4413      	add	r3, r2
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	4921      	ldr	r1, [pc, #132]	@ (8000cfc <command_filtering+0xbc>)
 8000c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c7a:	202c      	movs	r0, #44	@ 0x2c
 8000c7c:	fb00 f303 	mul.w	r3, r0, r3
 8000c80:	440b      	add	r3, r1
 8000c82:	330c      	adds	r3, #12
 8000c84:	601a      	str	r2, [r3, #0]
		commands_fltrs[idx] 		= filtering_lpf(&commands_fltrs[idx]);
 8000c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c88:	222c      	movs	r2, #44	@ 0x2c
 8000c8a:	fb02 f303 	mul.w	r3, r2, r3
 8000c8e:	4a1b      	ldr	r2, [pc, #108]	@ (8000cfc <command_filtering+0xbc>)
 8000c90:	441a      	add	r2, r3
 8000c92:	491a      	ldr	r1, [pc, #104]	@ (8000cfc <command_filtering+0xbc>)
 8000c94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c96:	202c      	movs	r0, #44	@ 0x2c
 8000c98:	fb00 f303 	mul.w	r3, r0, r3
 8000c9c:	18cc      	adds	r4, r1, r3
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	4611      	mov	r1, r2
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f001 f962 	bl	8001f6c <filtering_lpf>
 8000ca8:	4625      	mov	r5, r4
 8000caa:	463c      	mov	r4, r7
 8000cac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cb4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000cb8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	for(int idx = 0; idx < 4; idx++)
 8000cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8000cc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cc4:	2b03      	cmp	r3, #3
 8000cc6:	ddd1      	ble.n	8000c6c <command_filtering+0x2c>

	}
	//
	Commands.roll 		= 	commands_fltrs[0].Y_n ;
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <command_filtering+0xbc>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0c      	ldr	r2, [pc, #48]	@ (8000d00 <command_filtering+0xc0>)
 8000cce:	6013      	str	r3, [r2, #0]
	Commands.pitch 		= 	commands_fltrs[1].Y_n ;
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000cfc <command_filtering+0xbc>)
 8000cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cd4:	4a0a      	ldr	r2, [pc, #40]	@ (8000d00 <command_filtering+0xc0>)
 8000cd6:	6053      	str	r3, [r2, #4]
	Commands.yaw 		= 	commands_fltrs[2].Y_n ;
 8000cd8:	4b08      	ldr	r3, [pc, #32]	@ (8000cfc <command_filtering+0xbc>)
 8000cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cdc:	4a08      	ldr	r2, [pc, #32]	@ (8000d00 <command_filtering+0xc0>)
 8000cde:	6093      	str	r3, [r2, #8]
	Commands.thrust 	= 	commands_fltrs[3].Y_n ;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <command_filtering+0xbc>)
 8000ce2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000ce6:	4a06      	ldr	r2, [pc, #24]	@ (8000d00 <command_filtering+0xc0>)
 8000ce8:	60d3      	str	r3, [r2, #12]


}
 8000cea:	bf00      	nop
 8000cec:	3738      	adds	r7, #56	@ 0x38
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bdb0      	pop	{r4, r5, r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	240002b0 	.word	0x240002b0
 8000cf8:	240002e0 	.word	0x240002e0
 8000cfc:	240002f0 	.word	0x240002f0
 8000d00:	240002d0 	.word	0x240002d0

08000d04 <control_allocator>:

void control_allocator(Cmd_s control_cmd, Cmd_s trims )
{
 8000d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d06:	b093      	sub	sp, #76	@ 0x4c
 8000d08:	af02      	add	r7, sp, #8
 8000d0a:	eeb0 4a40 	vmov.f32	s8, s0
 8000d0e:	eef0 4a60 	vmov.f32	s9, s1
 8000d12:	eeb0 5a41 	vmov.f32	s10, s2
 8000d16:	eef0 5a61 	vmov.f32	s11, s3
 8000d1a:	eeb0 6a42 	vmov.f32	s12, s4
 8000d1e:	eef0 6a62 	vmov.f32	s13, s5
 8000d22:	eeb0 7a43 	vmov.f32	s14, s6
 8000d26:	eef0 7a63 	vmov.f32	s15, s7
 8000d2a:	ed87 4a0a 	vstr	s8, [r7, #40]	@ 0x28
 8000d2e:	edc7 4a0b 	vstr	s9, [r7, #44]	@ 0x2c
 8000d32:	ed87 5a0c 	vstr	s10, [r7, #48]	@ 0x30
 8000d36:	edc7 5a0d 	vstr	s11, [r7, #52]	@ 0x34
 8000d3a:	ed87 6a06 	vstr	s12, [r7, #24]
 8000d3e:	edc7 6a07 	vstr	s13, [r7, #28]
 8000d42:	ed87 7a08 	vstr	s14, [r7, #32]
 8000d46:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	//
	Frame = CONFIGURATION;
 8000d4a:	4b7c      	ldr	r3, [pc, #496]	@ (8000f3c <control_allocator+0x238>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	701a      	strb	r2, [r3, #0]


	switch(Frame){
 8000d50:	4b7a      	ldr	r3, [pc, #488]	@ (8000f3c <control_allocator+0x238>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b03      	cmp	r3, #3
 8000d56:	f200 80c3 	bhi.w	8000ee0 <control_allocator+0x1dc>
 8000d5a:	a201      	add	r2, pc, #4	@ (adr r2, 8000d60 <control_allocator+0x5c>)
 8000d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d60:	08000d71 	.word	0x08000d71
 8000d64:	08000dcd 	.word	0x08000dcd
 8000d68:	08000e29 	.word	0x08000e29
 8000d6c:	08000e85 	.word	0x08000e85
		case FIX_WING:
			servo_outs = FIX_WING_MIXER(control_cmd, trims)     ;
 8000d70:	4c73      	ldr	r4, [pc, #460]	@ (8000f40 <control_allocator+0x23c>)
 8000d72:	463b      	mov	r3, r7
 8000d74:	ed97 4a06 	vldr	s8, [r7, #24]
 8000d78:	edd7 4a07 	vldr	s9, [r7, #28]
 8000d7c:	ed97 5a08 	vldr	s10, [r7, #32]
 8000d80:	edd7 5a09 	vldr	s11, [r7, #36]	@ 0x24
 8000d84:	ed97 6a0a 	vldr	s12, [r7, #40]	@ 0x28
 8000d88:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8000d8c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8000d90:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000d94:	eeb0 2a44 	vmov.f32	s4, s8
 8000d98:	eef0 2a64 	vmov.f32	s5, s9
 8000d9c:	eeb0 3a45 	vmov.f32	s6, s10
 8000da0:	eef0 3a65 	vmov.f32	s7, s11
 8000da4:	eeb0 0a46 	vmov.f32	s0, s12
 8000da8:	eef0 0a66 	vmov.f32	s1, s13
 8000dac:	eeb0 1a47 	vmov.f32	s2, s14
 8000db0:	eef0 1a67 	vmov.f32	s3, s15
 8000db4:	4618      	mov	r0, r3
 8000db6:	f000 fc37 	bl	8001628 <FIX_WING_MIXER>
 8000dba:	463d      	mov	r5, r7
 8000dbc:	6828      	ldr	r0, [r5, #0]
 8000dbe:	6869      	ldr	r1, [r5, #4]
 8000dc0:	68aa      	ldr	r2, [r5, #8]
 8000dc2:	68eb      	ldr	r3, [r5, #12]
 8000dc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dc6:	6928      	ldr	r0, [r5, #16]
 8000dc8:	6020      	str	r0, [r4, #0]
			break;
 8000dca:	e098      	b.n	8000efe <control_allocator+0x1fa>
		case FLYING_WING:
			servo_outs = FLYING_WING_MIXER(control_cmd, trims)  ;
 8000dcc:	4c5c      	ldr	r4, [pc, #368]	@ (8000f40 <control_allocator+0x23c>)
 8000dce:	463b      	mov	r3, r7
 8000dd0:	ed97 4a06 	vldr	s8, [r7, #24]
 8000dd4:	edd7 4a07 	vldr	s9, [r7, #28]
 8000dd8:	ed97 5a08 	vldr	s10, [r7, #32]
 8000ddc:	edd7 5a09 	vldr	s11, [r7, #36]	@ 0x24
 8000de0:	ed97 6a0a 	vldr	s12, [r7, #40]	@ 0x28
 8000de4:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8000de8:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8000dec:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000df0:	eeb0 2a44 	vmov.f32	s4, s8
 8000df4:	eef0 2a64 	vmov.f32	s5, s9
 8000df8:	eeb0 3a45 	vmov.f32	s6, s10
 8000dfc:	eef0 3a65 	vmov.f32	s7, s11
 8000e00:	eeb0 0a46 	vmov.f32	s0, s12
 8000e04:	eef0 0a66 	vmov.f32	s1, s13
 8000e08:	eeb0 1a47 	vmov.f32	s2, s14
 8000e0c:	eef0 1a67 	vmov.f32	s3, s15
 8000e10:	4618      	mov	r0, r3
 8000e12:	f000 fcd9 	bl	80017c8 <FLYING_WING_MIXER>
 8000e16:	463d      	mov	r5, r7
 8000e18:	6828      	ldr	r0, [r5, #0]
 8000e1a:	6869      	ldr	r1, [r5, #4]
 8000e1c:	68aa      	ldr	r2, [r5, #8]
 8000e1e:	68eb      	ldr	r3, [r5, #12]
 8000e20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e22:	6928      	ldr	r0, [r5, #16]
 8000e24:	6020      	str	r0, [r4, #0]
			break;
 8000e26:	e06a      	b.n	8000efe <control_allocator+0x1fa>
		case TANDEM_WING:
			servo_outs = TANDEM_WING_MIXER(control_cmd, trims)  ;
 8000e28:	4c45      	ldr	r4, [pc, #276]	@ (8000f40 <control_allocator+0x23c>)
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	ed97 4a06 	vldr	s8, [r7, #24]
 8000e30:	edd7 4a07 	vldr	s9, [r7, #28]
 8000e34:	ed97 5a08 	vldr	s10, [r7, #32]
 8000e38:	edd7 5a09 	vldr	s11, [r7, #36]	@ 0x24
 8000e3c:	ed97 6a0a 	vldr	s12, [r7, #40]	@ 0x28
 8000e40:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8000e44:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8000e48:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000e4c:	eeb0 2a44 	vmov.f32	s4, s8
 8000e50:	eef0 2a64 	vmov.f32	s5, s9
 8000e54:	eeb0 3a45 	vmov.f32	s6, s10
 8000e58:	eef0 3a65 	vmov.f32	s7, s11
 8000e5c:	eeb0 0a46 	vmov.f32	s0, s12
 8000e60:	eef0 0a66 	vmov.f32	s1, s13
 8000e64:	eeb0 1a47 	vmov.f32	s2, s14
 8000e68:	eef0 1a67 	vmov.f32	s3, s15
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f000 fd97 	bl	80019a0 <TANDEM_WING_MIXER>
 8000e72:	463d      	mov	r5, r7
 8000e74:	6828      	ldr	r0, [r5, #0]
 8000e76:	6869      	ldr	r1, [r5, #4]
 8000e78:	68aa      	ldr	r2, [r5, #8]
 8000e7a:	68eb      	ldr	r3, [r5, #12]
 8000e7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e7e:	6928      	ldr	r0, [r5, #16]
 8000e80:	6020      	str	r0, [r4, #0]
			break;
 8000e82:	e03c      	b.n	8000efe <control_allocator+0x1fa>
		case CUSTOM_FRAME:
			servo_outs = CUSTOM_FRAME_MIXER(control_cmd, trims) ;
 8000e84:	4c2e      	ldr	r4, [pc, #184]	@ (8000f40 <control_allocator+0x23c>)
 8000e86:	463b      	mov	r3, r7
 8000e88:	ed97 4a06 	vldr	s8, [r7, #24]
 8000e8c:	edd7 4a07 	vldr	s9, [r7, #28]
 8000e90:	ed97 5a08 	vldr	s10, [r7, #32]
 8000e94:	edd7 5a09 	vldr	s11, [r7, #36]	@ 0x24
 8000e98:	ed97 6a0a 	vldr	s12, [r7, #40]	@ 0x28
 8000e9c:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8000ea0:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8000ea4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000ea8:	eeb0 2a44 	vmov.f32	s4, s8
 8000eac:	eef0 2a64 	vmov.f32	s5, s9
 8000eb0:	eeb0 3a45 	vmov.f32	s6, s10
 8000eb4:	eef0 3a65 	vmov.f32	s7, s11
 8000eb8:	eeb0 0a46 	vmov.f32	s0, s12
 8000ebc:	eef0 0a66 	vmov.f32	s1, s13
 8000ec0:	eeb0 1a47 	vmov.f32	s2, s14
 8000ec4:	eef0 1a67 	vmov.f32	s3, s15
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f000 fe55 	bl	8001b78 <CUSTOM_FRAME_MIXER>
 8000ece:	463d      	mov	r5, r7
 8000ed0:	6828      	ldr	r0, [r5, #0]
 8000ed2:	6869      	ldr	r1, [r5, #4]
 8000ed4:	68aa      	ldr	r2, [r5, #8]
 8000ed6:	68eb      	ldr	r3, [r5, #12]
 8000ed8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eda:	6928      	ldr	r0, [r5, #16]
 8000edc:	6020      	str	r0, [r4, #0]
			break;
 8000ede:	e00e      	b.n	8000efe <control_allocator+0x1fa>
		default:

			for(int i = 0; i < 10; i++)
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000ee4:	e008      	b.n	8000ef8 <control_allocator+0x1f4>
			{
				//
				servo_outs.S[i] = 1500 ;
 8000ee6:	4a16      	ldr	r2, [pc, #88]	@ (8000f40 <control_allocator+0x23c>)
 8000ee8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000eea:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8000eee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int i = 0; i < 10; i++)
 8000ef2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000ef8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000efa:	2b09      	cmp	r3, #9
 8000efc:	ddf3      	ble.n	8000ee6 <control_allocator+0x1e2>
			}

		}

	PWM_Output = reverse_servos(servo_outs );
 8000efe:	4e11      	ldr	r6, [pc, #68]	@ (8000f44 <control_allocator+0x240>)
 8000f00:	463c      	mov	r4, r7
 8000f02:	4b0f      	ldr	r3, [pc, #60]	@ (8000f40 <control_allocator+0x23c>)
 8000f04:	466d      	mov	r5, sp
 8000f06:	f103 020c 	add.w	r2, r3, #12
 8000f0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f0e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f14:	4620      	mov	r0, r4
 8000f16:	f000 f835 	bl	8000f84 <reverse_servos>
 8000f1a:	4632      	mov	r2, r6
 8000f1c:	463b      	mov	r3, r7
 8000f1e:	6819      	ldr	r1, [r3, #0]
 8000f20:	685d      	ldr	r5, [r3, #4]
 8000f22:	689c      	ldr	r4, [r3, #8]
 8000f24:	68d8      	ldr	r0, [r3, #12]
 8000f26:	6011      	str	r1, [r2, #0]
 8000f28:	6055      	str	r5, [r2, #4]
 8000f2a:	6094      	str	r4, [r2, #8]
 8000f2c:	60d0      	str	r0, [r2, #12]
 8000f2e:	6919      	ldr	r1, [r3, #16]
 8000f30:	6111      	str	r1, [r2, #16]
}
 8000f32:	bf00      	nop
 8000f34:	3744      	adds	r7, #68	@ 0x44
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	240002ac 	.word	0x240002ac
 8000f40:	240003bc 	.word	0x240003bc
 8000f44:	24000068 	.word	0x24000068

08000f48 <reverse_servo_value>:

uint16_t reverse_servo_value(uint16_t input)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	80fb      	strh	r3, [r7, #6]
    // Asegurarnos que el valor esté dentro del rango válido
    if (input < 1000) input = 1000;
 8000f52:	88fb      	ldrh	r3, [r7, #6]
 8000f54:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000f58:	d202      	bcs.n	8000f60 <reverse_servo_value+0x18>
 8000f5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f5e:	80fb      	strh	r3, [r7, #6]
    if (input > 2000) input = 2000;
 8000f60:	88fb      	ldrh	r3, [r7, #6]
 8000f62:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000f66:	d902      	bls.n	8000f6e <reverse_servo_value+0x26>
 8000f68:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000f6c:	80fb      	strh	r3, [r7, #6]

    // Calcular el valor invertido
    return 3000 - input;
 8000f6e:	88fb      	ldrh	r3, [r7, #6]
 8000f70:	f5c3 633b 	rsb	r3, r3, #2992	@ 0xbb0
 8000f74:	3308      	adds	r3, #8
 8000f76:	b29b      	uxth	r3, r3
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <reverse_servos>:


Servo_mgmt_s reverse_servos(Servo_mgmt_s inputs )
{
 8000f84:	b084      	sub	sp, #16
 8000f86:	b5b0      	push	{r4, r5, r7, lr}
 8000f88:	b088      	sub	sp, #32
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
 8000f8e:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8000f92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//
	Servo_mgmt_s uotputs;

	for(int i = 0; i < 10; i++)
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
 8000f9a:	e024      	b.n	8000fe6 <reverse_servos+0x62>
	{
		//
		if (Reverse.S[i])
 8000f9c:	4a1c      	ldr	r2, [pc, #112]	@ (8001010 <reverse_servos+0x8c>)
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d010      	beq.n	8000fca <reverse_servos+0x46>
		{
			//
			uotputs.S[i] = reverse_servo_value(inputs.S[i]);
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	3330      	adds	r3, #48	@ 0x30
 8000fae:	443b      	add	r3, r7
 8000fb0:	889b      	ldrh	r3, [r3, #4]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff ffc8 	bl	8000f48 <reverse_servo_value>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	461a      	mov	r2, r3
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	3320      	adds	r3, #32
 8000fc2:	443b      	add	r3, r7
 8000fc4:	f823 2c18 	strh.w	r2, [r3, #-24]
 8000fc8:	e00a      	b.n	8000fe0 <reverse_servos+0x5c>
		}
		else
		{
			//
			uotputs.S[i] = inputs.S[i];
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	3330      	adds	r3, #48	@ 0x30
 8000fd0:	443b      	add	r3, r7
 8000fd2:	889a      	ldrh	r2, [r3, #4]
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	3320      	adds	r3, #32
 8000fda:	443b      	add	r3, r7
 8000fdc:	f823 2c18 	strh.w	r2, [r3, #-24]
	for(int i = 0; i < 10; i++)
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	61fb      	str	r3, [r7, #28]
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	2b09      	cmp	r3, #9
 8000fea:	ddd7      	ble.n	8000f9c <reverse_servos+0x18>
		}
	}

	return uotputs;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	461d      	mov	r5, r3
 8000ff0:	f107 0408 	add.w	r4, r7, #8
 8000ff4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ff6:	6028      	str	r0, [r5, #0]
 8000ff8:	6069      	str	r1, [r5, #4]
 8000ffa:	60aa      	str	r2, [r5, #8]
 8000ffc:	60eb      	str	r3, [r5, #12]
 8000ffe:	6820      	ldr	r0, [r4, #0]
 8001000:	6128      	str	r0, [r5, #16]
}
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	3720      	adds	r7, #32
 8001006:	46bd      	mov	sp, r7
 8001008:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800100c:	b004      	add	sp, #16
 800100e:	4770      	bx	lr
 8001010:	240003b0 	.word	0x240003b0
 8001014:	00000000 	.word	0x00000000

08001018 <get_commands_rc>:
    }
    return signal_out;
}

Cmd_s get_commands_rc(void)
{
 8001018:	b490      	push	{r4, r7}
 800101a:	b08c      	sub	sp, #48	@ 0x30
 800101c:	af00      	add	r7, sp, #0
	//
	Cmd_s out_norms;

	out_norms.roll 		= ((float)Radio_input.Canal_1 - 1500.0 ) / 500.0 ;
 800101e:	4b3e      	ldr	r3, [pc, #248]	@ (8001118 <get_commands_rc+0x100>)
 8001020:	885b      	ldrh	r3, [r3, #2]
 8001022:	ee07 3a90 	vmov	s15, r3
 8001026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800102a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800102e:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 8001100 <get_commands_rc+0xe8>
 8001032:	ee37 6b46 	vsub.f64	d6, d7, d6
 8001036:	ed9f 5b34 	vldr	d5, [pc, #208]	@ 8001108 <get_commands_rc+0xf0>
 800103a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800103e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001042:	edc7 7a04 	vstr	s15, [r7, #16]

	out_norms.pitch 	= ((float)Radio_input.Canal_2 - 1500.0 ) / 500.0 ;
 8001046:	4b34      	ldr	r3, [pc, #208]	@ (8001118 <get_commands_rc+0x100>)
 8001048:	889b      	ldrh	r3, [r3, #4]
 800104a:	ee07 3a90 	vmov	s15, r3
 800104e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001052:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001056:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 8001100 <get_commands_rc+0xe8>
 800105a:	ee37 6b46 	vsub.f64	d6, d7, d6
 800105e:	ed9f 5b2a 	vldr	d5, [pc, #168]	@ 8001108 <get_commands_rc+0xf0>
 8001062:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001066:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800106a:	edc7 7a05 	vstr	s15, [r7, #20]

	out_norms.yaw 		= ((float)Radio_input.Canal_3 - 1500.0 ) / 500.0 ;
 800106e:	4b2a      	ldr	r3, [pc, #168]	@ (8001118 <get_commands_rc+0x100>)
 8001070:	88db      	ldrh	r3, [r3, #6]
 8001072:	ee07 3a90 	vmov	s15, r3
 8001076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800107a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800107e:	ed9f 6b20 	vldr	d6, [pc, #128]	@ 8001100 <get_commands_rc+0xe8>
 8001082:	ee37 6b46 	vsub.f64	d6, d7, d6
 8001086:	ed9f 5b20 	vldr	d5, [pc, #128]	@ 8001108 <get_commands_rc+0xf0>
 800108a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800108e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001092:	edc7 7a06 	vstr	s15, [r7, #24]

	out_norms.thrust 	= ((float)Radio_input.Canal_4 - 1000.0 ) / 1000.0 ;
 8001096:	4b20      	ldr	r3, [pc, #128]	@ (8001118 <get_commands_rc+0x100>)
 8001098:	891b      	ldrh	r3, [r3, #8]
 800109a:	ee07 3a90 	vmov	s15, r3
 800109e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010a6:	ed9f 6b1a 	vldr	d6, [pc, #104]	@ 8001110 <get_commands_rc+0xf8>
 80010aa:	ee37 6b46 	vsub.f64	d6, d7, d6
 80010ae:	ed9f 5b18 	vldr	d5, [pc, #96]	@ 8001110 <get_commands_rc+0xf8>
 80010b2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010b6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010ba:	edc7 7a07 	vstr	s15, [r7, #28]

	return out_norms;
 80010be:	f107 0420 	add.w	r4, r7, #32
 80010c2:	f107 0310 	add.w	r3, r7, #16
 80010c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80010cc:	6a38      	ldr	r0, [r7, #32]
 80010ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80010d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80010d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010d4:	ee06 0a10 	vmov	s12, r0
 80010d8:	ee06 1a90 	vmov	s13, r1
 80010dc:	ee07 2a10 	vmov	s14, r2
 80010e0:	ee07 3a90 	vmov	s15, r3
}
 80010e4:	eeb0 0a46 	vmov.f32	s0, s12
 80010e8:	eef0 0a66 	vmov.f32	s1, s13
 80010ec:	eeb0 1a47 	vmov.f32	s2, s14
 80010f0:	eef0 1a67 	vmov.f32	s3, s15
 80010f4:	3730      	adds	r7, #48	@ 0x30
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc90      	pop	{r4, r7}
 80010fa:	4770      	bx	lr
 80010fc:	f3af 8000 	nop.w
 8001100:	00000000 	.word	0x00000000
 8001104:	40977000 	.word	0x40977000
 8001108:	00000000 	.word	0x00000000
 800110c:	407f4000 	.word	0x407f4000
 8001110:	00000000 	.word	0x00000000
 8001114:	408f4000 	.word	0x408f4000
 8001118:	2400007c 	.word	0x2400007c

0800111c <get_actual_trims>:

void get_actual_trims(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
	//
	Trims.roll 		=  (float)Radio_input.Canal_10 - 1500.0 ;
 8001120:	4b17      	ldr	r3, [pc, #92]	@ (8001180 <get_actual_trims+0x64>)
 8001122:	8a9b      	ldrh	r3, [r3, #20]
 8001124:	ee07 3a90 	vmov	s15, r3
 8001128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800112c:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001184 <get_actual_trims+0x68>
 8001130:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001134:	4b14      	ldr	r3, [pc, #80]	@ (8001188 <get_actual_trims+0x6c>)
 8001136:	edc3 7a00 	vstr	s15, [r3]
	Trims.pitch 	=  (float)Radio_input.Canal_11 - 1500.0 ;
 800113a:	4b11      	ldr	r3, [pc, #68]	@ (8001180 <get_actual_trims+0x64>)
 800113c:	8adb      	ldrh	r3, [r3, #22]
 800113e:	ee07 3a90 	vmov	s15, r3
 8001142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001146:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001184 <get_actual_trims+0x68>
 800114a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800114e:	4b0e      	ldr	r3, [pc, #56]	@ (8001188 <get_actual_trims+0x6c>)
 8001150:	edc3 7a01 	vstr	s15, [r3, #4]
	Trims.yaw 		=  (float)Radio_input.Canal_12 - 1500.0 ;
 8001154:	4b0a      	ldr	r3, [pc, #40]	@ (8001180 <get_actual_trims+0x64>)
 8001156:	8b1b      	ldrh	r3, [r3, #24]
 8001158:	ee07 3a90 	vmov	s15, r3
 800115c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001160:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8001184 <get_actual_trims+0x68>
 8001164:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001168:	4b07      	ldr	r3, [pc, #28]	@ (8001188 <get_actual_trims+0x6c>)
 800116a:	edc3 7a02 	vstr	s15, [r3, #8]
	Trims.thrust 	=  0.0f ;
 800116e:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <get_actual_trims+0x6c>)
 8001170:	f04f 0200 	mov.w	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
}
 8001176:	bf00      	nop
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	2400007c 	.word	0x2400007c
 8001184:	44bb8000 	.word	0x44bb8000
 8001188:	240002c0 	.word	0x240002c0

0800118c <init_Reverse_Servos>:


void init_Reverse_Servos(Servo_reverse_s *servos)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 10; i++)
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	e007      	b.n	80011aa <init_Reverse_Servos+0x1e>
    {
    	//
        servos->S[i] = false;
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4413      	add	r3, r2
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 10; i++)
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	3301      	adds	r3, #1
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2b09      	cmp	r3, #9
 80011ae:	ddf4      	ble.n	800119a <init_Reverse_Servos+0xe>
    }
}
 80011b0:	bf00      	nop
 80011b2:	bf00      	nop
 80011b4:	3714      	adds	r7, #20
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
	...

080011c0 <FlightTaskAttitude>:
Cmd_s rates_Gains;



void FlightTaskAttitude(void)
{
 80011c0:	b598      	push	{r3, r4, r7, lr}
 80011c2:	af00      	add	r7, sp, #0
	//
	attitude_parameters_refresh();
 80011c4:	f000 f8e0 	bl	8001388 <attitude_parameters_refresh>

	refresh_actual_rates();
 80011c8:	f000 f9e2 	bl	8001590 <refresh_actual_rates>

	get_flight_mode();
 80011cc:	f000 f8d0 	bl	8001370 <get_flight_mode>

	Command_in = get_commands_rc();
 80011d0:	f7ff ff22 	bl	8001018 <get_commands_rc>
 80011d4:	eeb0 6a40 	vmov.f32	s12, s0
 80011d8:	eef0 6a60 	vmov.f32	s13, s1
 80011dc:	eeb0 7a41 	vmov.f32	s14, s2
 80011e0:	eef0 7a61 	vmov.f32	s15, s3
 80011e4:	4b44      	ldr	r3, [pc, #272]	@ (80012f8 <FlightTaskAttitude+0x138>)
 80011e6:	ed83 6a00 	vstr	s12, [r3]
 80011ea:	edc3 6a01 	vstr	s13, [r3, #4]
 80011ee:	ed83 7a02 	vstr	s14, [r3, #8]
 80011f2:	edc3 7a03 	vstr	s15, [r3, #12]


	switch(mode)
 80011f6:	4b41      	ldr	r3, [pc, #260]	@ (80012fc <FlightTaskAttitude+0x13c>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2b03      	cmp	r3, #3
 80011fc:	dc47      	bgt.n	800128e <FlightTaskAttitude+0xce>
 80011fe:	2b02      	cmp	r3, #2
 8001200:	da4c      	bge.n	800129c <FlightTaskAttitude+0xdc>
 8001202:	2b00      	cmp	r3, #0
 8001204:	d03c      	beq.n	8001280 <FlightTaskAttitude+0xc0>
 8001206:	2b01      	cmp	r3, #1
 8001208:	d141      	bne.n	800128e <FlightTaskAttitude+0xce>
	case ATTITUDE_HOLD_MODE:
//		AttitudeHold();
		break;
	case RATE_MODE:
		//
		Command_out = rates_control_law(Command_in , actual_rates, rates_Gains);
 800120a:	4b3d      	ldr	r3, [pc, #244]	@ (8001300 <FlightTaskAttitude+0x140>)
 800120c:	edd3 3a00 	vldr	s7, [r3]
 8001210:	ed93 4a01 	vldr	s8, [r3, #4]
 8001214:	edd3 4a02 	vldr	s9, [r3, #8]
 8001218:	ed93 5a03 	vldr	s10, [r3, #12]
 800121c:	4b39      	ldr	r3, [pc, #228]	@ (8001304 <FlightTaskAttitude+0x144>)
 800121e:	edd3 2a00 	vldr	s5, [r3]
 8001222:	ed93 3a01 	vldr	s6, [r3, #4]
 8001226:	edd3 5a02 	vldr	s11, [r3, #8]
 800122a:	4b33      	ldr	r3, [pc, #204]	@ (80012f8 <FlightTaskAttitude+0x138>)
 800122c:	ed93 6a00 	vldr	s12, [r3]
 8001230:	edd3 6a01 	vldr	s13, [r3, #4]
 8001234:	ed93 7a02 	vldr	s14, [r3, #8]
 8001238:	edd3 7a03 	vldr	s15, [r3, #12]
 800123c:	eeb0 2a62 	vmov.f32	s4, s5
 8001240:	eef0 2a43 	vmov.f32	s5, s6
 8001244:	eeb0 3a65 	vmov.f32	s6, s11
 8001248:	eeb0 0a46 	vmov.f32	s0, s12
 800124c:	eef0 0a66 	vmov.f32	s1, s13
 8001250:	eeb0 1a47 	vmov.f32	s2, s14
 8001254:	eef0 1a67 	vmov.f32	s3, s15
 8001258:	f000 f8aa 	bl	80013b0 <rates_control_law>
 800125c:	eeb0 6a40 	vmov.f32	s12, s0
 8001260:	eef0 6a60 	vmov.f32	s13, s1
 8001264:	eeb0 7a41 	vmov.f32	s14, s2
 8001268:	eef0 7a61 	vmov.f32	s15, s3
 800126c:	4b26      	ldr	r3, [pc, #152]	@ (8001308 <FlightTaskAttitude+0x148>)
 800126e:	ed83 6a00 	vstr	s12, [r3]
 8001272:	edc3 6a01 	vstr	s13, [r3, #4]
 8001276:	ed83 7a02 	vstr	s14, [r3, #8]
 800127a:	edc3 7a03 	vstr	s15, [r3, #12]

		break;
 800127e:	e00e      	b.n	800129e <FlightTaskAttitude+0xde>
	case MANUAL_MODE:
		//
		Command_out = Command_in;
 8001280:	4a21      	ldr	r2, [pc, #132]	@ (8001308 <FlightTaskAttitude+0x148>)
 8001282:	4b1d      	ldr	r3, [pc, #116]	@ (80012f8 <FlightTaskAttitude+0x138>)
 8001284:	4614      	mov	r4, r2
 8001286:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001288:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		break;
 800128c:	e007      	b.n	800129e <FlightTaskAttitude+0xde>
	default:
		//
		Command_out = Command_in;
 800128e:	4a1e      	ldr	r2, [pc, #120]	@ (8001308 <FlightTaskAttitude+0x148>)
 8001290:	4b19      	ldr	r3, [pc, #100]	@ (80012f8 <FlightTaskAttitude+0x138>)
 8001292:	4614      	mov	r4, r2
 8001294:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001296:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		break;
 800129a:	e000      	b.n	800129e <FlightTaskAttitude+0xde>
		break;
 800129c:	bf00      	nop
	}

	command_filtering();
 800129e:	f7ff fccf 	bl	8000c40 <command_filtering>

	get_actual_trims();
 80012a2:	f7ff ff3b 	bl	800111c <get_actual_trims>

	init_Reverse_Servos(&Reverse);
 80012a6:	4819      	ldr	r0, [pc, #100]	@ (800130c <FlightTaskAttitude+0x14c>)
 80012a8:	f7ff ff70 	bl	800118c <init_Reverse_Servos>

	control_allocator(Commands , Trims );
 80012ac:	4b18      	ldr	r3, [pc, #96]	@ (8001310 <FlightTaskAttitude+0x150>)
 80012ae:	ed93 4a00 	vldr	s8, [r3]
 80012b2:	edd3 4a01 	vldr	s9, [r3, #4]
 80012b6:	ed93 5a02 	vldr	s10, [r3, #8]
 80012ba:	edd3 5a03 	vldr	s11, [r3, #12]
 80012be:	4b15      	ldr	r3, [pc, #84]	@ (8001314 <FlightTaskAttitude+0x154>)
 80012c0:	ed93 6a00 	vldr	s12, [r3]
 80012c4:	edd3 6a01 	vldr	s13, [r3, #4]
 80012c8:	ed93 7a02 	vldr	s14, [r3, #8]
 80012cc:	edd3 7a03 	vldr	s15, [r3, #12]
 80012d0:	eeb0 2a44 	vmov.f32	s4, s8
 80012d4:	eef0 2a64 	vmov.f32	s5, s9
 80012d8:	eeb0 3a45 	vmov.f32	s6, s10
 80012dc:	eef0 3a65 	vmov.f32	s7, s11
 80012e0:	eeb0 0a46 	vmov.f32	s0, s12
 80012e4:	eef0 0a66 	vmov.f32	s1, s13
 80012e8:	eeb0 1a47 	vmov.f32	s2, s14
 80012ec:	eef0 1a67 	vmov.f32	s3, s15
 80012f0:	f7ff fd08 	bl	8000d04 <control_allocator>

}
 80012f4:	bf00      	nop
 80012f6:	bd98      	pop	{r3, r4, r7, pc}
 80012f8:	240003d0 	.word	0x240003d0
 80012fc:	240003f0 	.word	0x240003f0
 8001300:	240003e0 	.word	0x240003e0
 8001304:	24000490 	.word	0x24000490
 8001308:	240002b0 	.word	0x240002b0
 800130c:	240003b0 	.word	0x240003b0
 8001310:	240002c0 	.word	0x240002c0
 8001314:	240002d0 	.word	0x240002d0

08001318 <rc_three_steps_CurrentMode>:
#include "Flight_Management_Control/modes_management.h"

FlightMode_t mode ;

uint8_t rc_three_steps_CurrentMode(void)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
	//
	uint16_t pwm_value = Radio_input.Canal_5;
 800131e:	4b12      	ldr	r3, [pc, #72]	@ (8001368 <rc_three_steps_CurrentMode+0x50>)
 8001320:	895b      	ldrh	r3, [r3, #10]
 8001322:	80fb      	strh	r3, [r7, #6]

	if (pwm_value < (PWM_MID - PWM_DEADZONE))
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800132a:	4293      	cmp	r3, r2
 800132c:	d801      	bhi.n	8001332 <rc_three_steps_CurrentMode+0x1a>
	{
	        return MANUAL_MODE;
 800132e:	2300      	movs	r3, #0
 8001330:	e014      	b.n	800135c <rc_three_steps_CurrentMode+0x44>
	 }
	else if (pwm_value < 1750 && pwm_value > 1350)
 8001332:	88fb      	ldrh	r3, [r7, #6]
 8001334:	f240 62d5 	movw	r2, #1749	@ 0x6d5
 8001338:	4293      	cmp	r3, r2
 800133a:	d806      	bhi.n	800134a <rc_three_steps_CurrentMode+0x32>
 800133c:	88fb      	ldrh	r3, [r7, #6]
 800133e:	f240 5246 	movw	r2, #1350	@ 0x546
 8001342:	4293      	cmp	r3, r2
 8001344:	d901      	bls.n	800134a <rc_three_steps_CurrentMode+0x32>
	 {
	        return RATE_MODE;
 8001346:	2301      	movs	r3, #1
 8001348:	e008      	b.n	800135c <rc_three_steps_CurrentMode+0x44>
	  }
	else if (pwm_value >= (PWM_MAX - PWM_DEADZONE))
 800134a:	88fb      	ldrh	r3, [r7, #6]
 800134c:	f240 62d5 	movw	r2, #1749	@ 0x6d5
 8001350:	4293      	cmp	r3, r2
 8001352:	d901      	bls.n	8001358 <rc_three_steps_CurrentMode+0x40>
	 {
	        return ATTITUDE_HOLD_MODE;
 8001354:	2302      	movs	r3, #2
 8001356:	e001      	b.n	800135c <rc_three_steps_CurrentMode+0x44>
	  }
	else {
	        // Zona muerta → mantener último modo (evita oscilaciones)
	        static FlightMode_t last_mode = MANUAL_MODE;
	        return last_mode;
 8001358:	4b04      	ldr	r3, [pc, #16]	@ (800136c <rc_three_steps_CurrentMode+0x54>)
 800135a:	781b      	ldrb	r3, [r3, #0]
	    }

}
 800135c:	4618      	mov	r0, r3
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	2400007c 	.word	0x2400007c
 800136c:	240003f1 	.word	0x240003f1

08001370 <get_flight_mode>:

void get_flight_mode(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
	//
	mode = (FlightMode_t)rc_three_steps_CurrentMode();
 8001374:	f7ff ffd0 	bl	8001318 <rc_three_steps_CurrentMode>
 8001378:	4603      	mov	r3, r0
 800137a:	461a      	mov	r2, r3
 800137c:	4b01      	ldr	r3, [pc, #4]	@ (8001384 <get_flight_mode+0x14>)
 800137e:	701a      	strb	r2, [r3, #0]
}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}
 8001384:	240003f0 	.word	0x240003f0

08001388 <attitude_parameters_refresh>:
#include "Flight_Management_Control/parameters_manager.h"
#include "Flight_Management_Control/flight_management.h"


void attitude_parameters_refresh(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
	//
	rates_Gains.roll  = K_P ;
 800138c:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <attitude_parameters_refresh+0x20>)
 800138e:	4a07      	ldr	r2, [pc, #28]	@ (80013ac <attitude_parameters_refresh+0x24>)
 8001390:	601a      	str	r2, [r3, #0]
	rates_Gains.pitch = K_Q ;
 8001392:	4b05      	ldr	r3, [pc, #20]	@ (80013a8 <attitude_parameters_refresh+0x20>)
 8001394:	4a05      	ldr	r2, [pc, #20]	@ (80013ac <attitude_parameters_refresh+0x24>)
 8001396:	605a      	str	r2, [r3, #4]
	rates_Gains.yaw   = K_R ;
 8001398:	4b03      	ldr	r3, [pc, #12]	@ (80013a8 <attitude_parameters_refresh+0x20>)
 800139a:	4a04      	ldr	r2, [pc, #16]	@ (80013ac <attitude_parameters_refresh+0x24>)
 800139c:	609a      	str	r2, [r3, #8]

}
 800139e:	bf00      	nop
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	240003e0 	.word	0x240003e0
 80013ac:	3ba3d70a 	.word	0x3ba3d70a

080013b0 <rates_control_law>:
 *      Author: rtrujillo
 */
#include "Flight_Management_Control/rates_mode.h"

Cmd_s rates_control_law(Cmd_s inputs_norms, Gyro_s actual_gyro, Cmd_s K)
{
 80013b0:	b490      	push	{r4, r7}
 80013b2:	b098      	sub	sp, #96	@ 0x60
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	eef0 5a43 	vmov.f32	s11, s6
 80013ba:	eeb0 6a63 	vmov.f32	s12, s7
 80013be:	eef0 6a44 	vmov.f32	s13, s8
 80013c2:	eeb0 7a64 	vmov.f32	s14, s9
 80013c6:	eef0 7a45 	vmov.f32	s15, s10
 80013ca:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
 80013ce:	edc7 0a0d 	vstr	s1, [r7, #52]	@ 0x34
 80013d2:	ed87 1a0e 	vstr	s2, [r7, #56]	@ 0x38
 80013d6:	edc7 1a0f 	vstr	s3, [r7, #60]	@ 0x3c
 80013da:	ed87 2a09 	vstr	s4, [r7, #36]	@ 0x24
 80013de:	edc7 2a0a 	vstr	s5, [r7, #40]	@ 0x28
 80013e2:	edc7 5a0b 	vstr	s11, [r7, #44]	@ 0x2c
 80013e6:	ed87 6a05 	vstr	s12, [r7, #20]
 80013ea:	edc7 6a06 	vstr	s13, [r7, #24]
 80013ee:	ed87 7a07 	vstr	s14, [r7, #28]
 80013f2:	edc7 7a08 	vstr	s15, [r7, #32]
	//
	Cmd_s out_puts;

	out_puts.roll   = inputs_norms.roll  -  actual_gyro.roll * K.roll ;
 80013f6:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80013fa:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80013fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001402:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001406:	ee77 7a67 	vsub.f32	s15, s14, s15
 800140a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	out_puts.pitch  = inputs_norms.pitch -  actual_gyro.pitch* K.pitch ;
 800140e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001412:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001416:	edd7 7a06 	vldr	s15, [r7, #24]
 800141a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800141e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001422:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
	out_puts.yaw    = inputs_norms.yaw   -  actual_gyro.yaw  * K.yaw ;
 8001426:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800142a:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 800142e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001432:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001436:	ee77 7a67 	vsub.f32	s15, s14, s15
 800143a:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
	out_puts.thrust = inputs_norms.thrust ;
 800143e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001440:	64fb      	str	r3, [r7, #76]	@ 0x4c

	return out_puts ;
 8001442:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8001446:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800144a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800144c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001450:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001452:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001454:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001456:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001458:	ee06 0a10 	vmov	s12, r0
 800145c:	ee06 1a90 	vmov	s13, r1
 8001460:	ee07 2a10 	vmov	s14, r2
 8001464:	ee07 3a90 	vmov	s15, r3
}
 8001468:	eeb0 0a46 	vmov.f32	s0, s12
 800146c:	eef0 0a66 	vmov.f32	s1, s13
 8001470:	eeb0 1a47 	vmov.f32	s2, s14
 8001474:	eef0 1a67 	vmov.f32	s3, s15
 8001478:	3760      	adds	r7, #96	@ 0x60
 800147a:	46bd      	mov	sp, r7
 800147c:	bc90      	pop	{r4, r7}
 800147e:	4770      	bx	lr

08001480 <LPF_gyro_filter_init>:


Gyro_s actual_rates;

void LPF_gyro_filter_init(void)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
	// Inicializaciones
	LPF_gyros[0] = LPF_gyro_x ;
 8001486:	4b3e      	ldr	r3, [pc, #248]	@ (8001580 <LPF_gyro_filter_init+0x100>)
 8001488:	4a3e      	ldr	r2, [pc, #248]	@ (8001584 <LPF_gyro_filter_init+0x104>)
 800148a:	601a      	str	r2, [r3, #0]
	LPF_gyros[1] = LPF_gyro_y ;
 800148c:	4b3c      	ldr	r3, [pc, #240]	@ (8001580 <LPF_gyro_filter_init+0x100>)
 800148e:	4a3d      	ldr	r2, [pc, #244]	@ (8001584 <LPF_gyro_filter_init+0x104>)
 8001490:	605a      	str	r2, [r3, #4]
	LPF_gyros[2] = LPF_gyro_z ;
 8001492:	4b3b      	ldr	r3, [pc, #236]	@ (8001580 <LPF_gyro_filter_init+0x100>)
 8001494:	4a3b      	ldr	r2, [pc, #236]	@ (8001584 <LPF_gyro_filter_init+0x104>)
 8001496:	609a      	str	r2, [r3, #8]
	for(int idx = 0;idx < 3; idx++)
 8001498:	2300      	movs	r3, #0
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	e066      	b.n	800156c <LPF_gyro_filter_init+0xec>
	{
		//
		gyros_fltrs[idx].inicio 	= 1;
 800149e:	4a3a      	ldr	r2, [pc, #232]	@ (8001588 <LPF_gyro_filter_init+0x108>)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	212c      	movs	r1, #44	@ 0x2c
 80014a4:	fb01 f303 	mul.w	r3, r1, r3
 80014a8:	4413      	add	r3, r2
 80014aa:	3328      	adds	r3, #40	@ 0x28
 80014ac:	2201      	movs	r2, #1
 80014ae:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].f_cutoff 	= LPF_gyros[idx] ;
 80014b0:	4a33      	ldr	r2, [pc, #204]	@ (8001580 <LPF_gyro_filter_init+0x100>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	4933      	ldr	r1, [pc, #204]	@ (8001588 <LPF_gyro_filter_init+0x108>)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	202c      	movs	r0, #44	@ 0x2c
 80014c0:	fb00 f303 	mul.w	r3, r0, r3
 80014c4:	440b      	add	r3, r1
 80014c6:	3318      	adds	r3, #24
 80014c8:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].t_sample 	= SAMPLE_ATT ;
 80014ca:	4a2f      	ldr	r2, [pc, #188]	@ (8001588 <LPF_gyro_filter_init+0x108>)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	212c      	movs	r1, #44	@ 0x2c
 80014d0:	fb01 f303 	mul.w	r3, r1, r3
 80014d4:	4413      	add	r3, r2
 80014d6:	331c      	adds	r3, #28
 80014d8:	4a2c      	ldr	r2, [pc, #176]	@ (800158c <LPF_gyro_filter_init+0x10c>)
 80014da:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].Y_0 		= 0.0f ;
 80014dc:	4a2a      	ldr	r2, [pc, #168]	@ (8001588 <LPF_gyro_filter_init+0x108>)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	212c      	movs	r1, #44	@ 0x2c
 80014e2:	fb01 f303 	mul.w	r3, r1, r3
 80014e6:	4413      	add	r3, r2
 80014e8:	3308      	adds	r3, #8
 80014ea:	f04f 0200 	mov.w	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].U_n 		= 0.0f;
 80014f0:	4a25      	ldr	r2, [pc, #148]	@ (8001588 <LPF_gyro_filter_init+0x108>)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	212c      	movs	r1, #44	@ 0x2c
 80014f6:	fb01 f303 	mul.w	r3, r1, r3
 80014fa:	4413      	add	r3, r2
 80014fc:	330c      	adds	r3, #12
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].Y_n 		= 0.0f;
 8001504:	4a20      	ldr	r2, [pc, #128]	@ (8001588 <LPF_gyro_filter_init+0x108>)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	212c      	movs	r1, #44	@ 0x2c
 800150a:	fb01 f303 	mul.w	r3, r1, r3
 800150e:	4413      	add	r3, r2
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].Y_nm1 		= 0.0f;
 8001516:	4a1c      	ldr	r2, [pc, #112]	@ (8001588 <LPF_gyro_filter_init+0x108>)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	212c      	movs	r1, #44	@ 0x2c
 800151c:	fb01 f303 	mul.w	r3, r1, r3
 8001520:	4413      	add	r3, r2
 8001522:	3304      	adds	r3, #4
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].U_nm1 		= 0.0f;
 800152a:	4a17      	ldr	r2, [pc, #92]	@ (8001588 <LPF_gyro_filter_init+0x108>)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	212c      	movs	r1, #44	@ 0x2c
 8001530:	fb01 f303 	mul.w	r3, r1, r3
 8001534:	4413      	add	r3, r2
 8001536:	3310      	adds	r3, #16
 8001538:	f04f 0200 	mov.w	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].t_n 		= 0.0f;
 800153e:	4a12      	ldr	r2, [pc, #72]	@ (8001588 <LPF_gyro_filter_init+0x108>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	212c      	movs	r1, #44	@ 0x2c
 8001544:	fb01 f303 	mul.w	r3, r1, r3
 8001548:	4413      	add	r3, r2
 800154a:	3320      	adds	r3, #32
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].t_nm1 		= 0.0f;
 8001552:	4a0d      	ldr	r2, [pc, #52]	@ (8001588 <LPF_gyro_filter_init+0x108>)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	212c      	movs	r1, #44	@ 0x2c
 8001558:	fb01 f303 	mul.w	r3, r1, r3
 800155c:	4413      	add	r3, r2
 800155e:	3324      	adds	r3, #36	@ 0x24
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
	for(int idx = 0;idx < 3; idx++)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	3301      	adds	r3, #1
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b02      	cmp	r3, #2
 8001570:	dd95      	ble.n	800149e <LPF_gyro_filter_init+0x1e>

	}

}
 8001572:	bf00      	nop
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	24000478 	.word	0x24000478
 8001584:	42480000 	.word	0x42480000
 8001588:	240003f4 	.word	0x240003f4
 800158c:	3c23d70a 	.word	0x3c23d70a

08001590 <refresh_actual_rates>:

void refresh_actual_rates(void)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
	//
	imu_gyr[0] 		= IMU.GYR.x ;
 8001596:	4b20      	ldr	r3, [pc, #128]	@ (8001618 <refresh_actual_rates+0x88>)
 8001598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800159a:	4a20      	ldr	r2, [pc, #128]	@ (800161c <refresh_actual_rates+0x8c>)
 800159c:	6013      	str	r3, [r2, #0]
	imu_gyr[1] 		= IMU.GYR.y ;
 800159e:	4b1e      	ldr	r3, [pc, #120]	@ (8001618 <refresh_actual_rates+0x88>)
 80015a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015a2:	4a1e      	ldr	r2, [pc, #120]	@ (800161c <refresh_actual_rates+0x8c>)
 80015a4:	6053      	str	r3, [r2, #4]
	imu_gyr[2] 		= IMU.GYR.z ;
 80015a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001618 <refresh_actual_rates+0x88>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015aa:	4a1c      	ldr	r2, [pc, #112]	@ (800161c <refresh_actual_rates+0x8c>)
 80015ac:	6093      	str	r3, [r2, #8]

	//
	for(int idx = 0; idx < 3; idx++)
 80015ae:	2300      	movs	r3, #0
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	e01b      	b.n	80015ec <refresh_actual_rates+0x5c>
	{
		//
		gyros_fltrs[idx].U_n = imu_gyr[idx];
 80015b4:	4a19      	ldr	r2, [pc, #100]	@ (800161c <refresh_actual_rates+0x8c>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	4918      	ldr	r1, [pc, #96]	@ (8001620 <refresh_actual_rates+0x90>)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	202c      	movs	r0, #44	@ 0x2c
 80015c4:	fb00 f303 	mul.w	r3, r0, r3
 80015c8:	440b      	add	r3, r1
 80015ca:	330c      	adds	r3, #12
 80015cc:	601a      	str	r2, [r3, #0]
		// El filtro no trabaja por ejfectos de prueba
		//gyros_fltrs[idx] = filtering_lpf(&gyros_fltrs[idx]);
		gyros_fltrs[idx].Y_n = imu_gyr[idx];
 80015ce:	4a13      	ldr	r2, [pc, #76]	@ (800161c <refresh_actual_rates+0x8c>)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4413      	add	r3, r2
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4911      	ldr	r1, [pc, #68]	@ (8001620 <refresh_actual_rates+0x90>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	202c      	movs	r0, #44	@ 0x2c
 80015de:	fb00 f303 	mul.w	r3, r0, r3
 80015e2:	440b      	add	r3, r1
 80015e4:	601a      	str	r2, [r3, #0]
	for(int idx = 0; idx < 3; idx++)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	3301      	adds	r3, #1
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	dde0      	ble.n	80015b4 <refresh_actual_rates+0x24>
	}

	actual_rates.roll  = gyros_fltrs[0].Y_n ;
 80015f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001620 <refresh_actual_rates+0x90>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a0b      	ldr	r2, [pc, #44]	@ (8001624 <refresh_actual_rates+0x94>)
 80015f8:	6013      	str	r3, [r2, #0]
	actual_rates.pitch = gyros_fltrs[1].Y_n ;
 80015fa:	4b09      	ldr	r3, [pc, #36]	@ (8001620 <refresh_actual_rates+0x90>)
 80015fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015fe:	4a09      	ldr	r2, [pc, #36]	@ (8001624 <refresh_actual_rates+0x94>)
 8001600:	6053      	str	r3, [r2, #4]
	actual_rates.yaw   = gyros_fltrs[2].Y_n ;
 8001602:	4b07      	ldr	r3, [pc, #28]	@ (8001620 <refresh_actual_rates+0x90>)
 8001604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001606:	4a07      	ldr	r2, [pc, #28]	@ (8001624 <refresh_actual_rates+0x94>)
 8001608:	6093      	str	r3, [r2, #8]
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	24001664 	.word	0x24001664
 800161c:	24000484 	.word	0x24000484
 8001620:	240003f4 	.word	0x240003f4
 8001624:	24000490 	.word	0x24000490

08001628 <FIX_WING_MIXER>:
#include "Flight_Management_Control/servo_mixers.h"



Servo_mgmt_s FIX_WING_MIXER(Cmd_s control_cmd, Cmd_s trims)
{
 8001628:	b4b0      	push	{r4, r5, r7}
 800162a:	b091      	sub	sp, #68	@ 0x44
 800162c:	af00      	add	r7, sp, #0
 800162e:	6278      	str	r0, [r7, #36]	@ 0x24
 8001630:	eeb0 4a40 	vmov.f32	s8, s0
 8001634:	eef0 4a60 	vmov.f32	s9, s1
 8001638:	eeb0 5a41 	vmov.f32	s10, s2
 800163c:	eef0 5a61 	vmov.f32	s11, s3
 8001640:	eeb0 6a42 	vmov.f32	s12, s4
 8001644:	eef0 6a62 	vmov.f32	s13, s5
 8001648:	eeb0 7a43 	vmov.f32	s14, s6
 800164c:	eef0 7a63 	vmov.f32	s15, s7
 8001650:	ed87 4a05 	vstr	s8, [r7, #20]
 8001654:	edc7 4a06 	vstr	s9, [r7, #24]
 8001658:	ed87 5a07 	vstr	s10, [r7, #28]
 800165c:	edc7 5a08 	vstr	s11, [r7, #32]
 8001660:	ed87 6a01 	vstr	s12, [r7, #4]
 8001664:	edc7 6a02 	vstr	s13, [r7, #8]
 8001668:	ed87 7a03 	vstr	s14, [r7, #12]
 800166c:	edc7 7a04 	vstr	s15, [r7, #16]
	//
	Servo_mgmt_s mixer_output;

	mixer_output.S[0]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (trims.roll  )) ;
 8001670:	edd7 7a05 	vldr	s15, [r7, #20]
 8001674:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 80017bc <FIX_WING_MIXER+0x194>
 8001678:	ee67 7a87 	vmul.f32	s15, s15, s14
 800167c:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 80017c0 <FIX_WING_MIXER+0x198>
 8001680:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001684:	edd7 7a01 	vldr	s15, [r7, #4]
 8001688:	ee77 7a27 	vadd.f32	s15, s14, s15
 800168c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001690:	ee17 3a90 	vmov	r3, s15
 8001694:	b29b      	uxth	r3, r3
 8001696:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	mixer_output.S[1]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (trims.roll  )) ;
 8001698:	edd7 7a05 	vldr	s15, [r7, #20]
 800169c:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80017bc <FIX_WING_MIXER+0x194>
 80016a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016a4:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 80017c0 <FIX_WING_MIXER+0x198>
 80016a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80016ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80016b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016b8:	ee17 3a90 	vmov	r3, s15
 80016bc:	b29b      	uxth	r3, r3
 80016be:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	mixer_output.S[2]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (trims.pitch )) ;
 80016c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80016c4:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 80017bc <FIX_WING_MIXER+0x194>
 80016c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016cc:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 80017c0 <FIX_WING_MIXER+0x198>
 80016d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80016d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80016d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016e0:	ee17 3a90 	vmov	r3, s15
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	863b      	strh	r3, [r7, #48]	@ 0x30
	mixer_output.S[3]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (trims.pitch )) ;
 80016e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80016ec:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80017bc <FIX_WING_MIXER+0x194>
 80016f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016f4:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80017c0 <FIX_WING_MIXER+0x198>
 80016f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80016fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001700:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001704:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001708:	ee17 3a90 	vmov	r3, s15
 800170c:	b29b      	uxth	r3, r3
 800170e:	867b      	strh	r3, [r7, #50]	@ 0x32
	mixer_output.S[4]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (trims.yaw   )) ;
 8001710:	edd7 7a07 	vldr	s15, [r7, #28]
 8001714:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80017bc <FIX_WING_MIXER+0x194>
 8001718:	ee67 7a87 	vmul.f32	s15, s15, s14
 800171c:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80017c0 <FIX_WING_MIXER+0x198>
 8001720:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001724:	edd7 7a03 	vldr	s15, [r7, #12]
 8001728:	ee77 7a27 	vadd.f32	s15, s14, s15
 800172c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001730:	ee17 3a90 	vmov	r3, s15
 8001734:	b29b      	uxth	r3, r3
 8001736:	86bb      	strh	r3, [r7, #52]	@ 0x34
	mixer_output.S[5]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (trims.yaw   )) ;
 8001738:	edd7 7a07 	vldr	s15, [r7, #28]
 800173c:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80017bc <FIX_WING_MIXER+0x194>
 8001740:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001744:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80017c0 <FIX_WING_MIXER+0x198>
 8001748:	ee37 7a87 	vadd.f32	s14, s15, s14
 800174c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001750:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001754:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001758:	ee17 3a90 	vmov	r3, s15
 800175c:	b29b      	uxth	r3, r3
 800175e:	86fb      	strh	r3, [r7, #54]	@ 0x36
	mixer_output.S[6]  = (uint16_t)(1000.0f + 500.f * control_cmd.thrust+ (trims.thrust)) ;
 8001760:	edd7 7a08 	vldr	s15, [r7, #32]
 8001764:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80017bc <FIX_WING_MIXER+0x194>
 8001768:	ee67 7a87 	vmul.f32	s15, s15, s14
 800176c:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80017c4 <FIX_WING_MIXER+0x19c>
 8001770:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001774:	edd7 7a04 	vldr	s15, [r7, #16]
 8001778:	ee77 7a27 	vadd.f32	s15, s14, s15
 800177c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001780:	ee17 3a90 	vmov	r3, s15
 8001784:	b29b      	uxth	r3, r3
 8001786:	873b      	strh	r3, [r7, #56]	@ 0x38
	mixer_output.S[7]  = (uint16_t)(1500.0f );
 8001788:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800178c:	877b      	strh	r3, [r7, #58]	@ 0x3a
	mixer_output.S[8]  = (uint16_t)(1500.0f );
 800178e:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001792:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	mixer_output.S[9]  = (uint16_t)(1500.0f );
 8001794:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001798:	87fb      	strh	r3, [r7, #62]	@ 0x3e

	return mixer_output;
 800179a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179c:	461d      	mov	r5, r3
 800179e:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 80017a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017a4:	6028      	str	r0, [r5, #0]
 80017a6:	6069      	str	r1, [r5, #4]
 80017a8:	60aa      	str	r2, [r5, #8]
 80017aa:	60eb      	str	r3, [r5, #12]
 80017ac:	6820      	ldr	r0, [r4, #0]
 80017ae:	6128      	str	r0, [r5, #16]
}
 80017b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80017b2:	3744      	adds	r7, #68	@ 0x44
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bcb0      	pop	{r4, r5, r7}
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	43fa0000 	.word	0x43fa0000
 80017c0:	44bb8000 	.word	0x44bb8000
 80017c4:	447a0000 	.word	0x447a0000

080017c8 <FLYING_WING_MIXER>:

Servo_mgmt_s FLYING_WING_MIXER(Cmd_s control_cmd, Cmd_s trims)
{
 80017c8:	b4b0      	push	{r4, r5, r7}
 80017ca:	b091      	sub	sp, #68	@ 0x44
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6278      	str	r0, [r7, #36]	@ 0x24
 80017d0:	eeb0 4a40 	vmov.f32	s8, s0
 80017d4:	eef0 4a60 	vmov.f32	s9, s1
 80017d8:	eeb0 5a41 	vmov.f32	s10, s2
 80017dc:	eef0 5a61 	vmov.f32	s11, s3
 80017e0:	eeb0 6a42 	vmov.f32	s12, s4
 80017e4:	eef0 6a62 	vmov.f32	s13, s5
 80017e8:	eeb0 7a43 	vmov.f32	s14, s6
 80017ec:	eef0 7a63 	vmov.f32	s15, s7
 80017f0:	ed87 4a05 	vstr	s8, [r7, #20]
 80017f4:	edc7 4a06 	vstr	s9, [r7, #24]
 80017f8:	ed87 5a07 	vstr	s10, [r7, #28]
 80017fc:	edc7 5a08 	vstr	s11, [r7, #32]
 8001800:	ed87 6a01 	vstr	s12, [r7, #4]
 8001804:	edc7 6a02 	vstr	s13, [r7, #8]
 8001808:	ed87 7a03 	vstr	s14, [r7, #12]
 800180c:	edc7 7a04 	vstr	s15, [r7, #16]
	//
	Servo_mgmt_s mixer_output;

	mixer_output.S[0]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (1500 - trims.roll  )) ;
 8001810:	edd7 7a05 	vldr	s15, [r7, #20]
 8001814:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8001994 <FLYING_WING_MIXER+0x1cc>
 8001818:	ee67 7a87 	vmul.f32	s15, s15, s14
 800181c:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8001998 <FLYING_WING_MIXER+0x1d0>
 8001820:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001824:	edd7 7a01 	vldr	s15, [r7, #4]
 8001828:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 8001998 <FLYING_WING_MIXER+0x1d0>
 800182c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001830:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001834:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001838:	ee17 3a90 	vmov	r3, s15
 800183c:	b29b      	uxth	r3, r3
 800183e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	mixer_output.S[1]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (1500 - trims.roll  )) ;
 8001840:	edd7 7a05 	vldr	s15, [r7, #20]
 8001844:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8001994 <FLYING_WING_MIXER+0x1cc>
 8001848:	ee67 7a87 	vmul.f32	s15, s15, s14
 800184c:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001998 <FLYING_WING_MIXER+0x1d0>
 8001850:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001854:	edd7 7a01 	vldr	s15, [r7, #4]
 8001858:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8001998 <FLYING_WING_MIXER+0x1d0>
 800185c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001860:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001864:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001868:	ee17 3a90 	vmov	r3, s15
 800186c:	b29b      	uxth	r3, r3
 800186e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	mixer_output.S[2]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (1500 - trims.pitch )) ;
 8001870:	edd7 7a06 	vldr	s15, [r7, #24]
 8001874:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001994 <FLYING_WING_MIXER+0x1cc>
 8001878:	ee67 7a87 	vmul.f32	s15, s15, s14
 800187c:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8001998 <FLYING_WING_MIXER+0x1d0>
 8001880:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001884:	edd7 7a02 	vldr	s15, [r7, #8]
 8001888:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8001998 <FLYING_WING_MIXER+0x1d0>
 800188c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001890:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001894:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001898:	ee17 3a90 	vmov	r3, s15
 800189c:	b29b      	uxth	r3, r3
 800189e:	863b      	strh	r3, [r7, #48]	@ 0x30
	mixer_output.S[3]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (1500 - trims.pitch )) ;
 80018a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80018a4:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001994 <FLYING_WING_MIXER+0x1cc>
 80018a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018ac:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8001998 <FLYING_WING_MIXER+0x1d0>
 80018b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80018b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80018b8:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8001998 <FLYING_WING_MIXER+0x1d0>
 80018bc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80018c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018c8:	ee17 3a90 	vmov	r3, s15
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	867b      	strh	r3, [r7, #50]	@ 0x32
	mixer_output.S[4]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (1500 - trims.yaw   )) ;
 80018d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80018d4:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001994 <FLYING_WING_MIXER+0x1cc>
 80018d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018dc:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8001998 <FLYING_WING_MIXER+0x1d0>
 80018e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80018e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80018e8:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8001998 <FLYING_WING_MIXER+0x1d0>
 80018ec:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80018f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018f8:	ee17 3a90 	vmov	r3, s15
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	86bb      	strh	r3, [r7, #52]	@ 0x34
	mixer_output.S[5]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (1500 - trims.yaw   )) ;
 8001900:	edd7 7a07 	vldr	s15, [r7, #28]
 8001904:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001994 <FLYING_WING_MIXER+0x1cc>
 8001908:	ee67 7a87 	vmul.f32	s15, s15, s14
 800190c:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001998 <FLYING_WING_MIXER+0x1d0>
 8001910:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001914:	edd7 7a03 	vldr	s15, [r7, #12]
 8001918:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8001998 <FLYING_WING_MIXER+0x1d0>
 800191c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001920:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001924:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001928:	ee17 3a90 	vmov	r3, s15
 800192c:	b29b      	uxth	r3, r3
 800192e:	86fb      	strh	r3, [r7, #54]	@ 0x36
	mixer_output.S[6]  = (uint16_t)(1000.0f + 500.f * control_cmd.thrust+ (1500 - trims.thrust)) ;
 8001930:	edd7 7a08 	vldr	s15, [r7, #32]
 8001934:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001994 <FLYING_WING_MIXER+0x1cc>
 8001938:	ee67 7a87 	vmul.f32	s15, s15, s14
 800193c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800199c <FLYING_WING_MIXER+0x1d4>
 8001940:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001944:	edd7 7a04 	vldr	s15, [r7, #16]
 8001948:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001998 <FLYING_WING_MIXER+0x1d0>
 800194c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001950:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001954:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001958:	ee17 3a90 	vmov	r3, s15
 800195c:	b29b      	uxth	r3, r3
 800195e:	873b      	strh	r3, [r7, #56]	@ 0x38
	mixer_output.S[7]  = (uint16_t)(1500.0f );
 8001960:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001964:	877b      	strh	r3, [r7, #58]	@ 0x3a
	mixer_output.S[8]  = (uint16_t)(1500.0f );
 8001966:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800196a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	mixer_output.S[9]  = (uint16_t)(1500.0f );
 800196c:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001970:	87fb      	strh	r3, [r7, #62]	@ 0x3e

	return mixer_output;
 8001972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001974:	461d      	mov	r5, r3
 8001976:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 800197a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800197c:	6028      	str	r0, [r5, #0]
 800197e:	6069      	str	r1, [r5, #4]
 8001980:	60aa      	str	r2, [r5, #8]
 8001982:	60eb      	str	r3, [r5, #12]
 8001984:	6820      	ldr	r0, [r4, #0]
 8001986:	6128      	str	r0, [r5, #16]
}
 8001988:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800198a:	3744      	adds	r7, #68	@ 0x44
 800198c:	46bd      	mov	sp, r7
 800198e:	bcb0      	pop	{r4, r5, r7}
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	43fa0000 	.word	0x43fa0000
 8001998:	44bb8000 	.word	0x44bb8000
 800199c:	447a0000 	.word	0x447a0000

080019a0 <TANDEM_WING_MIXER>:

Servo_mgmt_s TANDEM_WING_MIXER(Cmd_s control_cmd, Cmd_s trims)
{
 80019a0:	b4b0      	push	{r4, r5, r7}
 80019a2:	b091      	sub	sp, #68	@ 0x44
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6278      	str	r0, [r7, #36]	@ 0x24
 80019a8:	eeb0 4a40 	vmov.f32	s8, s0
 80019ac:	eef0 4a60 	vmov.f32	s9, s1
 80019b0:	eeb0 5a41 	vmov.f32	s10, s2
 80019b4:	eef0 5a61 	vmov.f32	s11, s3
 80019b8:	eeb0 6a42 	vmov.f32	s12, s4
 80019bc:	eef0 6a62 	vmov.f32	s13, s5
 80019c0:	eeb0 7a43 	vmov.f32	s14, s6
 80019c4:	eef0 7a63 	vmov.f32	s15, s7
 80019c8:	ed87 4a05 	vstr	s8, [r7, #20]
 80019cc:	edc7 4a06 	vstr	s9, [r7, #24]
 80019d0:	ed87 5a07 	vstr	s10, [r7, #28]
 80019d4:	edc7 5a08 	vstr	s11, [r7, #32]
 80019d8:	ed87 6a01 	vstr	s12, [r7, #4]
 80019dc:	edc7 6a02 	vstr	s13, [r7, #8]
 80019e0:	ed87 7a03 	vstr	s14, [r7, #12]
 80019e4:	edc7 7a04 	vstr	s15, [r7, #16]
	//
	Servo_mgmt_s mixer_output;

	mixer_output.S[0]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (1500 - trims.roll  )) ;
 80019e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80019ec:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8001b6c <TANDEM_WING_MIXER+0x1cc>
 80019f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019f4:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8001b70 <TANDEM_WING_MIXER+0x1d0>
 80019f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80019fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a00:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 8001b70 <TANDEM_WING_MIXER+0x1d0>
 8001a04:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001a08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a10:	ee17 3a90 	vmov	r3, s15
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	mixer_output.S[1]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (1500 - trims.roll  )) ;
 8001a18:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a1c:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8001b6c <TANDEM_WING_MIXER+0x1cc>
 8001a20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a24:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001b70 <TANDEM_WING_MIXER+0x1d0>
 8001a28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001a2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a30:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8001b70 <TANDEM_WING_MIXER+0x1d0>
 8001a34:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001a38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a40:	ee17 3a90 	vmov	r3, s15
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	mixer_output.S[2]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (1500 - trims.pitch )) ;
 8001a48:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a4c:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001b6c <TANDEM_WING_MIXER+0x1cc>
 8001a50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a54:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8001b70 <TANDEM_WING_MIXER+0x1d0>
 8001a58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001a5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a60:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8001b70 <TANDEM_WING_MIXER+0x1d0>
 8001a64:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001a68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a70:	ee17 3a90 	vmov	r3, s15
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	863b      	strh	r3, [r7, #48]	@ 0x30
	mixer_output.S[3]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (1500 - trims.pitch )) ;
 8001a78:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a7c:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001b6c <TANDEM_WING_MIXER+0x1cc>
 8001a80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a84:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8001b70 <TANDEM_WING_MIXER+0x1d0>
 8001a88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001a8c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a90:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8001b70 <TANDEM_WING_MIXER+0x1d0>
 8001a94:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001a98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001aa0:	ee17 3a90 	vmov	r3, s15
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	867b      	strh	r3, [r7, #50]	@ 0x32
	mixer_output.S[4]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (1500 - trims.yaw   )) ;
 8001aa8:	edd7 7a07 	vldr	s15, [r7, #28]
 8001aac:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001b6c <TANDEM_WING_MIXER+0x1cc>
 8001ab0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ab4:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8001b70 <TANDEM_WING_MIXER+0x1d0>
 8001ab8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001abc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ac0:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8001b70 <TANDEM_WING_MIXER+0x1d0>
 8001ac4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001ac8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001acc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ad0:	ee17 3a90 	vmov	r3, s15
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	86bb      	strh	r3, [r7, #52]	@ 0x34
	mixer_output.S[5]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (1500 - trims.yaw   )) ;
 8001ad8:	edd7 7a07 	vldr	s15, [r7, #28]
 8001adc:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001b6c <TANDEM_WING_MIXER+0x1cc>
 8001ae0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ae4:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001b70 <TANDEM_WING_MIXER+0x1d0>
 8001ae8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001aec:	edd7 7a03 	vldr	s15, [r7, #12]
 8001af0:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8001b70 <TANDEM_WING_MIXER+0x1d0>
 8001af4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001af8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001afc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b00:	ee17 3a90 	vmov	r3, s15
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	86fb      	strh	r3, [r7, #54]	@ 0x36
	mixer_output.S[6]  = (uint16_t)(1000.0f + 500.f * control_cmd.thrust+ (1500 - trims.thrust)) ;
 8001b08:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b0c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001b6c <TANDEM_WING_MIXER+0x1cc>
 8001b10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b14:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001b74 <TANDEM_WING_MIXER+0x1d4>
 8001b18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001b1c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b20:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001b70 <TANDEM_WING_MIXER+0x1d0>
 8001b24:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001b28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b30:	ee17 3a90 	vmov	r3, s15
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	873b      	strh	r3, [r7, #56]	@ 0x38
	mixer_output.S[7]  = (uint16_t)(1500.0f );
 8001b38:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001b3c:	877b      	strh	r3, [r7, #58]	@ 0x3a
	mixer_output.S[8]  = (uint16_t)(1500.0f );
 8001b3e:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001b42:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	mixer_output.S[9]  = (uint16_t)(1500.0f );
 8001b44:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001b48:	87fb      	strh	r3, [r7, #62]	@ 0x3e

	return mixer_output;
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4c:	461d      	mov	r5, r3
 8001b4e:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8001b52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b54:	6028      	str	r0, [r5, #0]
 8001b56:	6069      	str	r1, [r5, #4]
 8001b58:	60aa      	str	r2, [r5, #8]
 8001b5a:	60eb      	str	r3, [r5, #12]
 8001b5c:	6820      	ldr	r0, [r4, #0]
 8001b5e:	6128      	str	r0, [r5, #16]
}
 8001b60:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001b62:	3744      	adds	r7, #68	@ 0x44
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bcb0      	pop	{r4, r5, r7}
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	43fa0000 	.word	0x43fa0000
 8001b70:	44bb8000 	.word	0x44bb8000
 8001b74:	447a0000 	.word	0x447a0000

08001b78 <CUSTOM_FRAME_MIXER>:

Servo_mgmt_s CUSTOM_FRAME_MIXER(Cmd_s control_cmd, Cmd_s trims)
{
 8001b78:	b4b0      	push	{r4, r5, r7}
 8001b7a:	b091      	sub	sp, #68	@ 0x44
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6278      	str	r0, [r7, #36]	@ 0x24
 8001b80:	eeb0 4a40 	vmov.f32	s8, s0
 8001b84:	eef0 4a60 	vmov.f32	s9, s1
 8001b88:	eeb0 5a41 	vmov.f32	s10, s2
 8001b8c:	eef0 5a61 	vmov.f32	s11, s3
 8001b90:	eeb0 6a42 	vmov.f32	s12, s4
 8001b94:	eef0 6a62 	vmov.f32	s13, s5
 8001b98:	eeb0 7a43 	vmov.f32	s14, s6
 8001b9c:	eef0 7a63 	vmov.f32	s15, s7
 8001ba0:	ed87 4a05 	vstr	s8, [r7, #20]
 8001ba4:	edc7 4a06 	vstr	s9, [r7, #24]
 8001ba8:	ed87 5a07 	vstr	s10, [r7, #28]
 8001bac:	edc7 5a08 	vstr	s11, [r7, #32]
 8001bb0:	ed87 6a01 	vstr	s12, [r7, #4]
 8001bb4:	edc7 6a02 	vstr	s13, [r7, #8]
 8001bb8:	ed87 7a03 	vstr	s14, [r7, #12]
 8001bbc:	edc7 7a04 	vstr	s15, [r7, #16]
	//
	Servo_mgmt_s mixer_output;

	mixer_output.S[0]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (1500 - trims.roll  )) ;
 8001bc0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bc4:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8001d44 <CUSTOM_FRAME_MIXER+0x1cc>
 8001bc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bcc:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8001d48 <CUSTOM_FRAME_MIXER+0x1d0>
 8001bd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001bd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bd8:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 8001d48 <CUSTOM_FRAME_MIXER+0x1d0>
 8001bdc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001be0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001be8:	ee17 3a90 	vmov	r3, s15
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	mixer_output.S[1]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (1500 - trims.roll  )) ;
 8001bf0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bf4:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8001d44 <CUSTOM_FRAME_MIXER+0x1cc>
 8001bf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bfc:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001d48 <CUSTOM_FRAME_MIXER+0x1d0>
 8001c00:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001c04:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c08:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8001d48 <CUSTOM_FRAME_MIXER+0x1d0>
 8001c0c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001c10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c18:	ee17 3a90 	vmov	r3, s15
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	mixer_output.S[2]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (1500 - trims.pitch )) ;
 8001c20:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c24:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001d44 <CUSTOM_FRAME_MIXER+0x1cc>
 8001c28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c2c:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8001d48 <CUSTOM_FRAME_MIXER+0x1d0>
 8001c30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001c34:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c38:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8001d48 <CUSTOM_FRAME_MIXER+0x1d0>
 8001c3c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001c40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c48:	ee17 3a90 	vmov	r3, s15
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	863b      	strh	r3, [r7, #48]	@ 0x30
	mixer_output.S[3]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (1500 - trims.pitch )) ;
 8001c50:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c54:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001d44 <CUSTOM_FRAME_MIXER+0x1cc>
 8001c58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c5c:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8001d48 <CUSTOM_FRAME_MIXER+0x1d0>
 8001c60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001c64:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c68:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8001d48 <CUSTOM_FRAME_MIXER+0x1d0>
 8001c6c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001c70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c78:	ee17 3a90 	vmov	r3, s15
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	867b      	strh	r3, [r7, #50]	@ 0x32
	mixer_output.S[4]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (1500 - trims.yaw   )) ;
 8001c80:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c84:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001d44 <CUSTOM_FRAME_MIXER+0x1cc>
 8001c88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c8c:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8001d48 <CUSTOM_FRAME_MIXER+0x1d0>
 8001c90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001c94:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c98:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8001d48 <CUSTOM_FRAME_MIXER+0x1d0>
 8001c9c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001ca0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ca8:	ee17 3a90 	vmov	r3, s15
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	86bb      	strh	r3, [r7, #52]	@ 0x34
	mixer_output.S[5]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (1500 - trims.yaw   )) ;
 8001cb0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001cb4:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001d44 <CUSTOM_FRAME_MIXER+0x1cc>
 8001cb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cbc:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001d48 <CUSTOM_FRAME_MIXER+0x1d0>
 8001cc0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001cc4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cc8:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8001d48 <CUSTOM_FRAME_MIXER+0x1d0>
 8001ccc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001cd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cd8:	ee17 3a90 	vmov	r3, s15
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	86fb      	strh	r3, [r7, #54]	@ 0x36
	mixer_output.S[6]  = (uint16_t)(1000.0f + 500.f * control_cmd.thrust+ (1500 - trims.thrust)) ;
 8001ce0:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ce4:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001d44 <CUSTOM_FRAME_MIXER+0x1cc>
 8001ce8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cec:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001d4c <CUSTOM_FRAME_MIXER+0x1d4>
 8001cf0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001cf4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cf8:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001d48 <CUSTOM_FRAME_MIXER+0x1d0>
 8001cfc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001d00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d08:	ee17 3a90 	vmov	r3, s15
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	873b      	strh	r3, [r7, #56]	@ 0x38
	mixer_output.S[7]  = (uint16_t)(1500.0f );
 8001d10:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001d14:	877b      	strh	r3, [r7, #58]	@ 0x3a
	mixer_output.S[8]  = (uint16_t)(1500.0f );
 8001d16:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001d1a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	mixer_output.S[9]  = (uint16_t)(1500.0f );
 8001d1c:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001d20:	87fb      	strh	r3, [r7, #62]	@ 0x3e

	return mixer_output;
 8001d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d24:	461d      	mov	r5, r3
 8001d26:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8001d2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d2c:	6028      	str	r0, [r5, #0]
 8001d2e:	6069      	str	r1, [r5, #4]
 8001d30:	60aa      	str	r2, [r5, #8]
 8001d32:	60eb      	str	r3, [r5, #12]
 8001d34:	6820      	ldr	r0, [r4, #0]
 8001d36:	6128      	str	r0, [r5, #16]
}
 8001d38:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001d3a:	3744      	adds	r7, #68	@ 0x44
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bcb0      	pop	{r4, r5, r7}
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	43fa0000 	.word	0x43fa0000
 8001d48:	44bb8000 	.word	0x44bb8000
 8001d4c:	447a0000 	.word	0x447a0000

08001d50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d56:	4b15      	ldr	r3, [pc, #84]	@ (8001dac <MX_DMA_Init+0x5c>)
 8001d58:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001d5c:	4a13      	ldr	r2, [pc, #76]	@ (8001dac <MX_DMA_Init+0x5c>)
 8001d5e:	f043 0301 	orr.w	r3, r3, #1
 8001d62:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8001d66:	4b11      	ldr	r3, [pc, #68]	@ (8001dac <MX_DMA_Init+0x5c>)
 8001d68:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	607b      	str	r3, [r7, #4]
 8001d72:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001d74:	2200      	movs	r2, #0
 8001d76:	2105      	movs	r1, #5
 8001d78:	200b      	movs	r0, #11
 8001d7a:	f004 fe01 	bl	8006980 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001d7e:	200b      	movs	r0, #11
 8001d80:	f004 fe18 	bl	80069b4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001d84:	2200      	movs	r2, #0
 8001d86:	2105      	movs	r1, #5
 8001d88:	200c      	movs	r0, #12
 8001d8a:	f004 fdf9 	bl	8006980 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001d8e:	200c      	movs	r0, #12
 8001d90:	f004 fe10 	bl	80069b4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001d94:	2200      	movs	r2, #0
 8001d96:	2105      	movs	r1, #5
 8001d98:	200d      	movs	r0, #13
 8001d9a:	f004 fdf1 	bl	8006980 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001d9e:	200d      	movs	r0, #13
 8001da0:	f004 fe08 	bl	80069b4 <HAL_NVIC_EnableIRQ>

}
 8001da4:	bf00      	nop
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	58024400 	.word	0x58024400

08001db0 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001db4:	4b2e      	ldr	r3, [pc, #184]	@ (8001e70 <MX_FDCAN1_Init+0xc0>)
 8001db6:	4a2f      	ldr	r2, [pc, #188]	@ (8001e74 <MX_FDCAN1_Init+0xc4>)
 8001db8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001dba:	4b2d      	ldr	r3, [pc, #180]	@ (8001e70 <MX_FDCAN1_Init+0xc0>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001dc0:	4b2b      	ldr	r3, [pc, #172]	@ (8001e70 <MX_FDCAN1_Init+0xc0>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001dc6:	4b2a      	ldr	r3, [pc, #168]	@ (8001e70 <MX_FDCAN1_Init+0xc0>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001dcc:	4b28      	ldr	r3, [pc, #160]	@ (8001e70 <MX_FDCAN1_Init+0xc0>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001dd2:	4b27      	ldr	r3, [pc, #156]	@ (8001e70 <MX_FDCAN1_Init+0xc0>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8001dd8:	4b25      	ldr	r3, [pc, #148]	@ (8001e70 <MX_FDCAN1_Init+0xc0>)
 8001dda:	2210      	movs	r2, #16
 8001ddc:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001dde:	4b24      	ldr	r3, [pc, #144]	@ (8001e70 <MX_FDCAN1_Init+0xc0>)
 8001de0:	2201      	movs	r2, #1
 8001de2:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001de4:	4b22      	ldr	r3, [pc, #136]	@ (8001e70 <MX_FDCAN1_Init+0xc0>)
 8001de6:	2202      	movs	r2, #2
 8001de8:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001dea:	4b21      	ldr	r3, [pc, #132]	@ (8001e70 <MX_FDCAN1_Init+0xc0>)
 8001dec:	2202      	movs	r2, #2
 8001dee:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001df0:	4b1f      	ldr	r3, [pc, #124]	@ (8001e70 <MX_FDCAN1_Init+0xc0>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001df6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e70 <MX_FDCAN1_Init+0xc0>)
 8001df8:	2201      	movs	r2, #1
 8001dfa:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001dfc:	4b1c      	ldr	r3, [pc, #112]	@ (8001e70 <MX_FDCAN1_Init+0xc0>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001e02:	4b1b      	ldr	r3, [pc, #108]	@ (8001e70 <MX_FDCAN1_Init+0xc0>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001e08:	4b19      	ldr	r3, [pc, #100]	@ (8001e70 <MX_FDCAN1_Init+0xc0>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8001e0e:	4b18      	ldr	r3, [pc, #96]	@ (8001e70 <MX_FDCAN1_Init+0xc0>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001e14:	4b16      	ldr	r3, [pc, #88]	@ (8001e70 <MX_FDCAN1_Init+0xc0>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8001e1a:	4b15      	ldr	r3, [pc, #84]	@ (8001e70 <MX_FDCAN1_Init+0xc0>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001e20:	4b13      	ldr	r3, [pc, #76]	@ (8001e70 <MX_FDCAN1_Init+0xc0>)
 8001e22:	2204      	movs	r2, #4
 8001e24:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001e26:	4b12      	ldr	r3, [pc, #72]	@ (8001e70 <MX_FDCAN1_Init+0xc0>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001e2c:	4b10      	ldr	r3, [pc, #64]	@ (8001e70 <MX_FDCAN1_Init+0xc0>)
 8001e2e:	2204      	movs	r2, #4
 8001e30:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001e32:	4b0f      	ldr	r3, [pc, #60]	@ (8001e70 <MX_FDCAN1_Init+0xc0>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001e38:	4b0d      	ldr	r3, [pc, #52]	@ (8001e70 <MX_FDCAN1_Init+0xc0>)
 8001e3a:	2204      	movs	r2, #4
 8001e3c:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e70 <MX_FDCAN1_Init+0xc0>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001e44:	4b0a      	ldr	r3, [pc, #40]	@ (8001e70 <MX_FDCAN1_Init+0xc0>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8001e4a:	4b09      	ldr	r3, [pc, #36]	@ (8001e70 <MX_FDCAN1_Init+0xc0>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001e50:	4b07      	ldr	r3, [pc, #28]	@ (8001e70 <MX_FDCAN1_Init+0xc0>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001e56:	4b06      	ldr	r3, [pc, #24]	@ (8001e70 <MX_FDCAN1_Init+0xc0>)
 8001e58:	2204      	movs	r2, #4
 8001e5a:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001e5c:	4804      	ldr	r0, [pc, #16]	@ (8001e70 <MX_FDCAN1_Init+0xc0>)
 8001e5e:	f007 fd19 	bl	8009894 <HAL_FDCAN_Init>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8001e68:	f001 f936 	bl	80030d8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001e6c:	bf00      	nop
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	2400049c 	.word	0x2400049c
 8001e74:	4000a000 	.word	0x4000a000

08001e78 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b0ba      	sub	sp, #232	@ 0xe8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e80:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e90:	f107 0310 	add.w	r3, r7, #16
 8001e94:	22c0      	movs	r2, #192	@ 0xc0
 8001e96:	2100      	movs	r1, #0
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f015 fe84 	bl	8017ba6 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a2f      	ldr	r2, [pc, #188]	@ (8001f60 <HAL_FDCAN_MspInit+0xe8>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d157      	bne.n	8001f58 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001ea8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001eac:	f04f 0300 	mov.w	r3, #0
 8001eb0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001eb4:	2304      	movs	r3, #4
 8001eb6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 8;
 8001eb8:	2308      	movs	r3, #8
 8001eba:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001ec8:	23c0      	movs	r3, #192	@ 0xc0
 8001eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8001ed4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001ed8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001edc:	f107 0310 	add.w	r3, r7, #16
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f009 fb73 	bl	800b5cc <HAL_RCCEx_PeriphCLKConfig>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 8001eec:	f001 f8f4 	bl	80030d8 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001ef0:	4b1c      	ldr	r3, [pc, #112]	@ (8001f64 <HAL_FDCAN_MspInit+0xec>)
 8001ef2:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8001ef6:	4a1b      	ldr	r2, [pc, #108]	@ (8001f64 <HAL_FDCAN_MspInit+0xec>)
 8001ef8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001efc:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 8001f00:	4b18      	ldr	r3, [pc, #96]	@ (8001f64 <HAL_FDCAN_MspInit+0xec>)
 8001f02:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8001f06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f0e:	4b15      	ldr	r3, [pc, #84]	@ (8001f64 <HAL_FDCAN_MspInit+0xec>)
 8001f10:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f14:	4a13      	ldr	r2, [pc, #76]	@ (8001f64 <HAL_FDCAN_MspInit+0xec>)
 8001f16:	f043 0301 	orr.w	r3, r3, #1
 8001f1a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001f1e:	4b11      	ldr	r3, [pc, #68]	@ (8001f64 <HAL_FDCAN_MspInit+0xec>)
 8001f20:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001f2c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001f30:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f34:	2302      	movs	r3, #2
 8001f36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f40:	2300      	movs	r3, #0
 8001f42:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001f46:	2309      	movs	r3, #9
 8001f48:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001f50:	4619      	mov	r1, r3
 8001f52:	4805      	ldr	r0, [pc, #20]	@ (8001f68 <HAL_FDCAN_MspInit+0xf0>)
 8001f54:	f008 f802 	bl	8009f5c <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001f58:	bf00      	nop
 8001f5a:	37e8      	adds	r7, #232	@ 0xe8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	4000a000 	.word	0x4000a000
 8001f64:	58024400 	.word	0x58024400
 8001f68:	58020000 	.word	0x58020000

08001f6c <filtering_lpf>:
/* Includes ------------------------------------------------------------------*/
#include "filter.h"
#include <math.h>

LPF_s filtering_lpf(LPF_s *filtro)
{
 8001f6c:	b4b0      	push	{r4, r5, r7}
 8001f6e:	b097      	sub	sp, #92	@ 0x5c
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
     *   f_cutoff -> frecuencia de corte
     *   u -> Señal de entrada
     *   y -> Señal de salida
     *   */

    LPF_s resultado = *filtro;
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	f107 040c 	add.w	r4, r7, #12
 8001f7c:	461d      	mov	r5, r3
 8001f7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f86:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    static float y_n;

    // Validación básica de parámetros
    if(filtro->f_cutoff <= 0.0f || filtro->t_sample <= 0.0f) {
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	edd3 7a06 	vldr	s15, [r3, #24]
 8001f94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f9c:	d907      	bls.n	8001fae <filtering_lpf+0x42>
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	edd3 7a07 	vldr	s15, [r3, #28]
 8001fa4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fac:	d80c      	bhi.n	8001fc8 <filtering_lpf+0x5c>
        return resultado;  // O manejar error adecuadamente
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	461d      	mov	r5, r3
 8001fb2:	f107 040c 	add.w	r4, r7, #12
 8001fb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fbe:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001fc2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001fc6:	e0c6      	b.n	8002156 <filtering_lpf+0x1ea>
    }

    const float w_0 = filtro->f_cutoff * 6.283185307179586f; // 2*PI
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	edd3 7a06 	vldr	s15, [r3, #24]
 8001fce:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8002160 <filtering_lpf+0x1f4>
 8001fd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fd6:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    if(filtro->inicio) {
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d016      	beq.n	8002010 <filtering_lpf+0xa4>
        y_n = resultado.Y_n = resultado.Y_nm1 = filtro->Y_0;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	613b      	str	r3, [r7, #16]
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4a5d      	ldr	r2, [pc, #372]	@ (8002164 <filtering_lpf+0x1f8>)
 8001ff0:	6013      	str	r3, [r2, #0]
        resultado.inicio = 0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	637b      	str	r3, [r7, #52]	@ 0x34
        return resultado;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	461d      	mov	r5, r3
 8001ffa:	f107 040c 	add.w	r4, r7, #12
 8001ffe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002000:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002002:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002004:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002006:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800200a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800200e:	e0a2      	b.n	8002156 <filtering_lpf+0x1ea>
    }

    const float u_n = filtro->U_n;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	653b      	str	r3, [r7, #80]	@ 0x50
    const float h = filtro->t_sample;
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    const float h2 = h * .50f;
 800201c:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8002020:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002024:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002028:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    // Runge-Kutta 4to orden
    const float k1 = w_0 * (u_n - y_n);
 800202c:	4b4d      	ldr	r3, [pc, #308]	@ (8002164 <filtering_lpf+0x1f8>)
 800202e:	edd3 7a00 	vldr	s15, [r3]
 8002032:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002036:	ee77 7a67 	vsub.f32	s15, s14, s15
 800203a:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800203e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002042:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    const float k2 = w_0 * (u_n - (y_n + k1 * h2));
 8002046:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800204a:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800204e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002052:	4b44      	ldr	r3, [pc, #272]	@ (8002164 <filtering_lpf+0x1f8>)
 8002054:	edd3 7a00 	vldr	s15, [r3]
 8002058:	ee77 7a27 	vadd.f32	s15, s14, s15
 800205c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002060:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002064:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8002068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800206c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    const float k3 = w_0 * (u_n - (y_n + k2 * h2));
 8002070:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8002074:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002078:	ee27 7a27 	vmul.f32	s14, s14, s15
 800207c:	4b39      	ldr	r3, [pc, #228]	@ (8002164 <filtering_lpf+0x1f8>)
 800207e:	edd3 7a00 	vldr	s15, [r3]
 8002082:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002086:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800208a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800208e:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8002092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002096:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    const float k4 = w_0 * (u_n - (y_n + k3 * h));
 800209a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800209e:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80020a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020a6:	4b2f      	ldr	r3, [pc, #188]	@ (8002164 <filtering_lpf+0x1f8>)
 80020a8:	edd3 7a00 	vldr	s15, [r3]
 80020ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020b0:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80020b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020b8:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80020bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020c0:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    y_n += h * (0.166666667f * k1 + 0.333333333f * (k2 + k3) + 0.166666667f * k4);
 80020c4:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80020c8:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8002168 <filtering_lpf+0x1fc>
 80020cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020d0:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 80020d4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80020d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020dc:	eddf 6a23 	vldr	s13, [pc, #140]	@ 800216c <filtering_lpf+0x200>
 80020e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80020e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020e8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80020ec:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8002168 <filtering_lpf+0x1fc>
 80020f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80020f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020f8:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80020fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002100:	4b18      	ldr	r3, [pc, #96]	@ (8002164 <filtering_lpf+0x1f8>)
 8002102:	edd3 7a00 	vldr	s15, [r3]
 8002106:	ee77 7a27 	vadd.f32	s15, s14, s15
 800210a:	4b16      	ldr	r3, [pc, #88]	@ (8002164 <filtering_lpf+0x1f8>)
 800210c:	edc3 7a00 	vstr	s15, [r3]

    // Manejo robusto de NaN (protección contra condiciones inválidas)
    y_n = isnan(y_n) ? resultado.Y_nm1 : y_n;
 8002110:	4b14      	ldr	r3, [pc, #80]	@ (8002164 <filtering_lpf+0x1f8>)
 8002112:	edd3 7a00 	vldr	s15, [r3]
 8002116:	eef4 7a67 	vcmp.f32	s15, s15
 800211a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800211e:	d701      	bvc.n	8002124 <filtering_lpf+0x1b8>
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	e001      	b.n	8002128 <filtering_lpf+0x1bc>
 8002124:	4b0f      	ldr	r3, [pc, #60]	@ (8002164 <filtering_lpf+0x1f8>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a0e      	ldr	r2, [pc, #56]	@ (8002164 <filtering_lpf+0x1f8>)
 800212a:	6013      	str	r3, [r2, #0]

    // Actualizar estructura de resultado
    resultado.Y_n = resultado.Y_nm1 = y_n;
 800212c:	4b0d      	ldr	r3, [pc, #52]	@ (8002164 <filtering_lpf+0x1f8>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	613b      	str	r3, [r7, #16]
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	60fb      	str	r3, [r7, #12]
    resultado.U_nm1 = u_n;
 8002136:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002138:	61fb      	str	r3, [r7, #28]
    resultado.t_nm1 = resultado.t_n;
 800213a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800213c:	633b      	str	r3, [r7, #48]	@ 0x30

    return resultado;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	461d      	mov	r5, r3
 8002142:	f107 040c 	add.w	r4, r7, #12
 8002146:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002148:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800214a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800214c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800214e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002152:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	375c      	adds	r7, #92	@ 0x5c
 800215a:	46bd      	mov	sp, r7
 800215c:	bcb0      	pop	{r4, r5, r7}
 800215e:	4770      	bx	lr
 8002160:	40c90fdb 	.word	0x40c90fdb
 8002164:	2400053c 	.word	0x2400053c
 8002168:	3e2aaaab 	.word	0x3e2aaaab
 800216c:	3eaaaaab 	.word	0x3eaaaaab

08002170 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	4a07      	ldr	r2, [pc, #28]	@ (800219c <vApplicationGetIdleTaskMemory+0x2c>)
 8002180:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	4a06      	ldr	r2, [pc, #24]	@ (80021a0 <vApplicationGetIdleTaskMemory+0x30>)
 8002186:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2280      	movs	r2, #128	@ 0x80
 800218c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800218e:	bf00      	nop
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	2400054c 	.word	0x2400054c
 80021a0:	240005a0 	.word	0x240005a0

080021a4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80021a4:	b5b0      	push	{r4, r5, r7, lr}
 80021a6:	b096      	sub	sp, #88	@ 0x58
 80021a8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task_1ms */
  osThreadDef(Task_1ms, fTask_1ms, osPriorityNormal, 0, 128);
 80021aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002220 <MX_FREERTOS_Init+0x7c>)
 80021ac:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80021b0:	461d      	mov	r5, r3
 80021b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_1msHandle = osThreadCreate(osThread(Task_1ms), NULL);
 80021be:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80021c2:	2100      	movs	r1, #0
 80021c4:	4618      	mov	r0, r3
 80021c6:	f012 fb7f 	bl	80148c8 <osThreadCreate>
 80021ca:	4603      	mov	r3, r0
 80021cc:	4a15      	ldr	r2, [pc, #84]	@ (8002224 <MX_FREERTOS_Init+0x80>)
 80021ce:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_10ms */
  osThreadDef(Task_10ms, fTask_10ms, osPriorityNormal, 0, 128);
 80021d0:	4b15      	ldr	r3, [pc, #84]	@ (8002228 <MX_FREERTOS_Init+0x84>)
 80021d2:	f107 0420 	add.w	r4, r7, #32
 80021d6:	461d      	mov	r5, r3
 80021d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_10msHandle = osThreadCreate(osThread(Task_10ms), NULL);
 80021e4:	f107 0320 	add.w	r3, r7, #32
 80021e8:	2100      	movs	r1, #0
 80021ea:	4618      	mov	r0, r3
 80021ec:	f012 fb6c 	bl	80148c8 <osThreadCreate>
 80021f0:	4603      	mov	r3, r0
 80021f2:	4a0e      	ldr	r2, [pc, #56]	@ (800222c <MX_FREERTOS_Init+0x88>)
 80021f4:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_100ms */
  osThreadDef(Task_100ms, fTask_100ms, osPriorityNormal, 0, 128);
 80021f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002230 <MX_FREERTOS_Init+0x8c>)
 80021f8:	1d3c      	adds	r4, r7, #4
 80021fa:	461d      	mov	r5, r3
 80021fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002200:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002204:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_100msHandle = osThreadCreate(osThread(Task_100ms), NULL);
 8002208:	1d3b      	adds	r3, r7, #4
 800220a:	2100      	movs	r1, #0
 800220c:	4618      	mov	r0, r3
 800220e:	f012 fb5b 	bl	80148c8 <osThreadCreate>
 8002212:	4603      	mov	r3, r0
 8002214:	4a07      	ldr	r2, [pc, #28]	@ (8002234 <MX_FREERTOS_Init+0x90>)
 8002216:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002218:	bf00      	nop
 800221a:	3758      	adds	r7, #88	@ 0x58
 800221c:	46bd      	mov	sp, r7
 800221e:	bdb0      	pop	{r4, r5, r7, pc}
 8002220:	08019bfc 	.word	0x08019bfc
 8002224:	24000540 	.word	0x24000540
 8002228:	08019c24 	.word	0x08019c24
 800222c:	24000544 	.word	0x24000544
 8002230:	08019c4c 	.word	0x08019c4c
 8002234:	24000548 	.word	0x24000548

08002238 <fTask_1ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTask_1ms */
void fTask_1ms(void const * argument)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTask_1ms */
  /* Infinite loop */
	LPF_gyro_filter_init();
 8002240:	f7ff f91e 	bl	8001480 <LPF_gyro_filter_init>
	LPF_cmd_filter_init();
 8002244:	f7fe fc70 	bl	8000b28 <LPF_cmd_filter_init>

  for(;;)
  {
	TimeOn_Counter++;
 8002248:	4b07      	ldr	r3, [pc, #28]	@ (8002268 <fTask_1ms+0x30>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	3301      	adds	r3, #1
 800224e:	4a06      	ldr	r2, [pc, #24]	@ (8002268 <fTask_1ms+0x30>)
 8002250:	6013      	str	r3, [r2, #0]
	LED_Tasks();
 8002252:	f003 fc2d 	bl	8005ab0 <LED_Tasks>
	SBUS_IntegrityVerification();
 8002256:	f004 f8ed 	bl	8006434 <SBUS_IntegrityVerification>
	NMEA_process_task();
 800225a:	f000 fdb1 	bl	8002dc0 <NMEA_process_task>
    osDelay(1);
 800225e:	2001      	movs	r0, #1
 8002260:	f012 fb7e 	bl	8014960 <osDelay>
	TimeOn_Counter++;
 8002264:	bf00      	nop
 8002266:	e7ef      	b.n	8002248 <fTask_1ms+0x10>
 8002268:	24000ed8 	.word	0x24000ed8

0800226c <fTask_10ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTask_10ms */
void fTask_10ms(void const * argument)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTask_10ms */
  /* Infinite loop */
  for(;;)
  {
	BNO_Tasks();
 8002274:	f003 fb58 	bl	8005928 <BNO_Tasks>
	BMP280_calculate();
 8002278:	f002 fda8 	bl	8004dcc <BMP280_calculate>

	FlightTaskAttitude();
 800227c:	f7fe ffa0 	bl	80011c0 <FlightTaskAttitude>

	PWM_Assign();
 8002280:	f003 fcc8 	bl	8005c14 <PWM_Assign>
	SD_blackbox_write();
 8002284:	f004 f9b8 	bl	80065f8 <SD_blackbox_write>
    osDelay(10);
 8002288:	200a      	movs	r0, #10
 800228a:	f012 fb69 	bl	8014960 <osDelay>
  {
 800228e:	bf00      	nop
 8002290:	e7f0      	b.n	8002274 <fTask_10ms+0x8>

08002292 <fTask_100ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTask_100ms */
void fTask_100ms(void const * argument)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b082      	sub	sp, #8
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTask_100ms */
  /* Infinite loop */
  for(;;)
  {
	LR03_StateMachine();
 800229a:	f003 fca3 	bl	8005be4 <LR03_StateMachine>
    osDelay(100);
 800229e:	2064      	movs	r0, #100	@ 0x64
 80022a0:	f012 fb5e 	bl	8014960 <osDelay>
	LR03_StateMachine();
 80022a4:	bf00      	nop
 80022a6:	e7f8      	b.n	800229a <fTask_100ms+0x8>

080022a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08a      	sub	sp, #40	@ 0x28
 80022ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ae:	f107 0314 	add.w	r3, r7, #20
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	605a      	str	r2, [r3, #4]
 80022b8:	609a      	str	r2, [r3, #8]
 80022ba:	60da      	str	r2, [r3, #12]
 80022bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022be:	4b4e      	ldr	r3, [pc, #312]	@ (80023f8 <MX_GPIO_Init+0x150>)
 80022c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80022c4:	4a4c      	ldr	r2, [pc, #304]	@ (80023f8 <MX_GPIO_Init+0x150>)
 80022c6:	f043 0304 	orr.w	r3, r3, #4
 80022ca:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80022ce:	4b4a      	ldr	r3, [pc, #296]	@ (80023f8 <MX_GPIO_Init+0x150>)
 80022d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80022d4:	f003 0304 	and.w	r3, r3, #4
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022dc:	4b46      	ldr	r3, [pc, #280]	@ (80023f8 <MX_GPIO_Init+0x150>)
 80022de:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80022e2:	4a45      	ldr	r2, [pc, #276]	@ (80023f8 <MX_GPIO_Init+0x150>)
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80022ec:	4b42      	ldr	r3, [pc, #264]	@ (80023f8 <MX_GPIO_Init+0x150>)
 80022ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022fa:	4b3f      	ldr	r3, [pc, #252]	@ (80023f8 <MX_GPIO_Init+0x150>)
 80022fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002300:	4a3d      	ldr	r2, [pc, #244]	@ (80023f8 <MX_GPIO_Init+0x150>)
 8002302:	f043 0302 	orr.w	r3, r3, #2
 8002306:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800230a:	4b3b      	ldr	r3, [pc, #236]	@ (80023f8 <MX_GPIO_Init+0x150>)
 800230c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002318:	4b37      	ldr	r3, [pc, #220]	@ (80023f8 <MX_GPIO_Init+0x150>)
 800231a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800231e:	4a36      	ldr	r2, [pc, #216]	@ (80023f8 <MX_GPIO_Init+0x150>)
 8002320:	f043 0308 	orr.w	r3, r3, #8
 8002324:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002328:	4b33      	ldr	r3, [pc, #204]	@ (80023f8 <MX_GPIO_Init+0x150>)
 800232a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	607b      	str	r3, [r7, #4]
 8002334:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8002336:	2200      	movs	r2, #0
 8002338:	f242 010f 	movw	r1, #8207	@ 0x200f
 800233c:	482f      	ldr	r0, [pc, #188]	@ (80023fc <MX_GPIO_Init+0x154>)
 800233e:	f007 ffbd 	bl	800a2bc <HAL_GPIO_WritePin>
                          |LED_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_NSS_GPIO_Port, SD_NSS_Pin, GPIO_PIN_RESET);
 8002342:	2200      	movs	r2, #0
 8002344:	2110      	movs	r1, #16
 8002346:	482e      	ldr	r0, [pc, #184]	@ (8002400 <MX_GPIO_Init+0x158>)
 8002348:	f007 ffb8 	bl	800a2bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IMU_BOOT_Pin|BME_NSS_Pin, GPIO_PIN_RESET);
 800234c:	2200      	movs	r2, #0
 800234e:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8002352:	482c      	ldr	r0, [pc, #176]	@ (8002404 <MX_GPIO_Init+0x15c>)
 8002354:	f007 ffb2 	bl	800a2bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, GPIO_PIN_RESET);
 8002358:	2200      	movs	r2, #0
 800235a:	2104      	movs	r1, #4
 800235c:	482a      	ldr	r0, [pc, #168]	@ (8002408 <MX_GPIO_Init+0x160>)
 800235e:	f007 ffad 	bl	800a2bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8002362:	f242 030f 	movw	r3, #8207	@ 0x200f
 8002366:	617b      	str	r3, [r7, #20]
                          |LED_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002368:	2301      	movs	r3, #1
 800236a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002370:	2300      	movs	r3, #0
 8002372:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002374:	f107 0314 	add.w	r3, r7, #20
 8002378:	4619      	mov	r1, r3
 800237a:	4820      	ldr	r0, [pc, #128]	@ (80023fc <MX_GPIO_Init+0x154>)
 800237c:	f007 fdee 	bl	8009f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_NSS_Pin;
 8002380:	2310      	movs	r3, #16
 8002382:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002384:	2301      	movs	r3, #1
 8002386:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238c:	2300      	movs	r3, #0
 800238e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_NSS_GPIO_Port, &GPIO_InitStruct);
 8002390:	f107 0314 	add.w	r3, r7, #20
 8002394:	4619      	mov	r1, r3
 8002396:	481a      	ldr	r0, [pc, #104]	@ (8002400 <MX_GPIO_Init+0x158>)
 8002398:	f007 fde0 	bl	8009f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IMU_BOOT_Pin|BME_NSS_Pin;
 800239c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80023a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023a2:	2301      	movs	r3, #1
 80023a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023aa:	2300      	movs	r3, #0
 80023ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ae:	f107 0314 	add.w	r3, r7, #20
 80023b2:	4619      	mov	r1, r3
 80023b4:	4813      	ldr	r0, [pc, #76]	@ (8002404 <MX_GPIO_Init+0x15c>)
 80023b6:	f007 fdd1 	bl	8009f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 80023ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023c0:	2300      	movs	r3, #0
 80023c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 80023c8:	f107 0314 	add.w	r3, r7, #20
 80023cc:	4619      	mov	r1, r3
 80023ce:	480b      	ldr	r0, [pc, #44]	@ (80023fc <MX_GPIO_Init+0x154>)
 80023d0:	f007 fdc4 	bl	8009f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_RST_Pin;
 80023d4:	2304      	movs	r3, #4
 80023d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023d8:	2301      	movs	r3, #1
 80023da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e0:	2300      	movs	r3, #0
 80023e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_RST_GPIO_Port, &GPIO_InitStruct);
 80023e4:	f107 0314 	add.w	r3, r7, #20
 80023e8:	4619      	mov	r1, r3
 80023ea:	4807      	ldr	r0, [pc, #28]	@ (8002408 <MX_GPIO_Init+0x160>)
 80023ec:	f007 fdb6 	bl	8009f5c <HAL_GPIO_Init>

}
 80023f0:	bf00      	nop
 80023f2:	3728      	adds	r7, #40	@ 0x28
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	58024400 	.word	0x58024400
 80023fc:	58020800 	.word	0x58020800
 8002400:	58020000 	.word	0x58020000
 8002404:	58020400 	.word	0x58020400
 8002408:	58020c00 	.word	0x58020c00

0800240c <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002410:	4b1b      	ldr	r3, [pc, #108]	@ (8002480 <MX_I2C3_Init+0x74>)
 8002412:	4a1c      	ldr	r2, [pc, #112]	@ (8002484 <MX_I2C3_Init+0x78>)
 8002414:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20B0CCFF;
 8002416:	4b1a      	ldr	r3, [pc, #104]	@ (8002480 <MX_I2C3_Init+0x74>)
 8002418:	4a1b      	ldr	r2, [pc, #108]	@ (8002488 <MX_I2C3_Init+0x7c>)
 800241a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800241c:	4b18      	ldr	r3, [pc, #96]	@ (8002480 <MX_I2C3_Init+0x74>)
 800241e:	2200      	movs	r2, #0
 8002420:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002422:	4b17      	ldr	r3, [pc, #92]	@ (8002480 <MX_I2C3_Init+0x74>)
 8002424:	2201      	movs	r2, #1
 8002426:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002428:	4b15      	ldr	r3, [pc, #84]	@ (8002480 <MX_I2C3_Init+0x74>)
 800242a:	2200      	movs	r2, #0
 800242c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800242e:	4b14      	ldr	r3, [pc, #80]	@ (8002480 <MX_I2C3_Init+0x74>)
 8002430:	2200      	movs	r2, #0
 8002432:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002434:	4b12      	ldr	r3, [pc, #72]	@ (8002480 <MX_I2C3_Init+0x74>)
 8002436:	2200      	movs	r2, #0
 8002438:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800243a:	4b11      	ldr	r3, [pc, #68]	@ (8002480 <MX_I2C3_Init+0x74>)
 800243c:	2200      	movs	r2, #0
 800243e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002440:	4b0f      	ldr	r3, [pc, #60]	@ (8002480 <MX_I2C3_Init+0x74>)
 8002442:	2200      	movs	r2, #0
 8002444:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002446:	480e      	ldr	r0, [pc, #56]	@ (8002480 <MX_I2C3_Init+0x74>)
 8002448:	f007 ff52 	bl	800a2f0 <HAL_I2C_Init>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002452:	f000 fe41 	bl	80030d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002456:	2100      	movs	r1, #0
 8002458:	4809      	ldr	r0, [pc, #36]	@ (8002480 <MX_I2C3_Init+0x74>)
 800245a:	f007 ffe5 	bl	800a428 <HAL_I2CEx_ConfigAnalogFilter>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002464:	f000 fe38 	bl	80030d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002468:	2100      	movs	r1, #0
 800246a:	4805      	ldr	r0, [pc, #20]	@ (8002480 <MX_I2C3_Init+0x74>)
 800246c:	f008 f827 	bl	800a4be <HAL_I2CEx_ConfigDigitalFilter>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002476:	f000 fe2f 	bl	80030d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	240007a0 	.word	0x240007a0
 8002484:	40005c00 	.word	0x40005c00
 8002488:	20b0ccff 	.word	0x20b0ccff

0800248c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b0bc      	sub	sp, #240	@ 0xf0
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002494:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	605a      	str	r2, [r3, #4]
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	60da      	str	r2, [r3, #12]
 80024a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024a4:	f107 0318 	add.w	r3, r7, #24
 80024a8:	22c0      	movs	r2, #192	@ 0xc0
 80024aa:	2100      	movs	r1, #0
 80024ac:	4618      	mov	r0, r3
 80024ae:	f015 fb7a 	bl	8017ba6 <memset>
  if(i2cHandle->Instance==I2C3)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a39      	ldr	r2, [pc, #228]	@ (800259c <HAL_I2C_MspInit+0x110>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d16b      	bne.n	8002594 <HAL_I2C_MspInit+0x108>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80024bc:	f04f 0208 	mov.w	r2, #8
 80024c0:	f04f 0300 	mov.w	r3, #0
 80024c4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80024c8:	2300      	movs	r3, #0
 80024ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024ce:	f107 0318 	add.w	r3, r7, #24
 80024d2:	4618      	mov	r0, r3
 80024d4:	f009 f87a 	bl	800b5cc <HAL_RCCEx_PeriphCLKConfig>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80024de:	f000 fdfb 	bl	80030d8 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024e2:	4b2f      	ldr	r3, [pc, #188]	@ (80025a0 <HAL_I2C_MspInit+0x114>)
 80024e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80024e8:	4a2d      	ldr	r2, [pc, #180]	@ (80025a0 <HAL_I2C_MspInit+0x114>)
 80024ea:	f043 0304 	orr.w	r3, r3, #4
 80024ee:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80024f2:	4b2b      	ldr	r3, [pc, #172]	@ (80025a0 <HAL_I2C_MspInit+0x114>)
 80024f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	617b      	str	r3, [r7, #20]
 80024fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002500:	4b27      	ldr	r3, [pc, #156]	@ (80025a0 <HAL_I2C_MspInit+0x114>)
 8002502:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002506:	4a26      	ldr	r2, [pc, #152]	@ (80025a0 <HAL_I2C_MspInit+0x114>)
 8002508:	f043 0301 	orr.w	r3, r3, #1
 800250c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002510:	4b23      	ldr	r3, [pc, #140]	@ (80025a0 <HAL_I2C_MspInit+0x114>)
 8002512:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	613b      	str	r3, [r7, #16]
 800251c:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800251e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002522:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002526:	2312      	movs	r3, #18
 8002528:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252c:	2300      	movs	r3, #0
 800252e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002532:	2300      	movs	r3, #0
 8002534:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002538:	2304      	movs	r3, #4
 800253a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800253e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002542:	4619      	mov	r1, r3
 8002544:	4817      	ldr	r0, [pc, #92]	@ (80025a4 <HAL_I2C_MspInit+0x118>)
 8002546:	f007 fd09 	bl	8009f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800254a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800254e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002552:	2312      	movs	r3, #18
 8002554:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002558:	2300      	movs	r3, #0
 800255a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255e:	2300      	movs	r3, #0
 8002560:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002564:	2304      	movs	r3, #4
 8002566:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800256e:	4619      	mov	r1, r3
 8002570:	480d      	ldr	r0, [pc, #52]	@ (80025a8 <HAL_I2C_MspInit+0x11c>)
 8002572:	f007 fcf3 	bl	8009f5c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002576:	4b0a      	ldr	r3, [pc, #40]	@ (80025a0 <HAL_I2C_MspInit+0x114>)
 8002578:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800257c:	4a08      	ldr	r2, [pc, #32]	@ (80025a0 <HAL_I2C_MspInit+0x114>)
 800257e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002582:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002586:	4b06      	ldr	r3, [pc, #24]	@ (80025a0 <HAL_I2C_MspInit+0x114>)
 8002588:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800258c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002594:	bf00      	nop
 8002596:	37f0      	adds	r7, #240	@ 0xf0
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40005c00 	.word	0x40005c00
 80025a0:	58024400 	.word	0x58024400
 80025a4:	58020800 	.word	0x58020800
 80025a8:	58020000 	.word	0x58020000

080025ac <default_CB>:
static float speed_fall_barrier;	/**< Barrier of decreasing speed*/
/**
 * default_CB() is a default function for all the CB pointers which do nothing.\n
 * The unregistering CB pointer is setting to pointer of this function.  
 */
static void default_CB(void){}
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	bf00      	nop
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
	...

080025bc <NMEA_parser>:
 * NMEA_parser is function which parses single correct NMEA message.\n
 * Inside this function all known types of NMEA message are recognized and nmea_data structure fields are set.\n
 * There is also implemented mechanism of recognizing specified events and calling corresponding to them callbacks.
 * @param[in]	message	pointer to buffer storing NMEA message.
 */
static void 	NMEA_parser(char *message){
 80025bc:	b5b0      	push	{r4, r5, r7, lr}
 80025be:	b0b2      	sub	sp, #200	@ 0xc8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]

	NMEA_data previous_data = nmea_data;
 80025c4:	4ba9      	ldr	r3, [pc, #676]	@ (800286c <NMEA_parser+0x2b0>)
 80025c6:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 80025ca:	461d      	mov	r5, r3
 80025cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80025dc:	e884 0003 	stmia.w	r4, {r0, r1}

	int num = 0;
 80025e0:	2300      	movs	r3, #0
 80025e2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	char *fields[32]={NULL};
 80025e6:	f107 030c 	add.w	r3, r7, #12
 80025ea:	2280      	movs	r2, #128	@ 0x80
 80025ec:	2100      	movs	r1, #0
 80025ee:	4618      	mov	r0, r3
 80025f0:	f015 fad9 	bl	8017ba6 <memset>
	fields[num++]=message;
 80025f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025f8:	1c5a      	adds	r2, r3, #1
 80025fa:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	33c8      	adds	r3, #200	@ 0xc8
 8002602:	443b      	add	r3, r7
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	f843 2cbc 	str.w	r2, [r3, #-188]
	while ((message = strchr(message, ','))) {
 800260a:	e00f      	b.n	800262c <NMEA_parser+0x70>
		*message++ = 0;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	1c5a      	adds	r2, r3, #1
 8002610:	607a      	str	r2, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	701a      	strb	r2, [r3, #0]
		fields[num++]=message;
 8002616:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800261a:	1c5a      	adds	r2, r3, #1
 800261c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	33c8      	adds	r3, #200	@ 0xc8
 8002624:	443b      	add	r3, r7
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	f843 2cbc 	str.w	r2, [r3, #-188]
	while ((message = strchr(message, ','))) {
 800262c:	212c      	movs	r1, #44	@ 0x2c
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f015 fac1 	bl	8017bb6 <strchr>
 8002634:	6078      	str	r0, [r7, #4]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1e7      	bne.n	800260c <NMEA_parser+0x50>
	}

	if(strcmp(fields[0],"$GPGLL")==0){
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	498c      	ldr	r1, [pc, #560]	@ (8002870 <NMEA_parser+0x2b4>)
 8002640:	4618      	mov	r0, r3
 8002642:	f7fd fe55 	bl	80002f0 <strcmp>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d11e      	bne.n	800268a <NMEA_parser+0xce>

		nmea_data.latitude = atof(fields[1]);
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4618      	mov	r0, r3
 8002650:	f014 fb5a 	bl	8016d08 <atof>
 8002654:	eeb0 7b40 	vmov.f64	d7, d0
 8002658:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800265c:	4b83      	ldr	r3, [pc, #524]	@ (800286c <NMEA_parser+0x2b0>)
 800265e:	edc3 7a02 	vstr	s15, [r3, #8]
		nmea_data.latitude_direction = *fields[2];
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	781a      	ldrb	r2, [r3, #0]
 8002666:	4b81      	ldr	r3, [pc, #516]	@ (800286c <NMEA_parser+0x2b0>)
 8002668:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[3]);
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	4618      	mov	r0, r3
 800266e:	f014 fb4b 	bl	8016d08 <atof>
 8002672:	eeb0 7b40 	vmov.f64	d7, d0
 8002676:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800267a:	4b7c      	ldr	r3, [pc, #496]	@ (800286c <NMEA_parser+0x2b0>)
 800267c:	edc3 7a04 	vstr	s15, [r3, #16]
		nmea_data.longitude_direction = *fields[4];
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	781a      	ldrb	r2, [r3, #0]
 8002684:	4b79      	ldr	r3, [pc, #484]	@ (800286c <NMEA_parser+0x2b0>)
 8002686:	751a      	strb	r2, [r3, #20]
 8002688:	e10d      	b.n	80028a6 <NMEA_parser+0x2ea>

	}else if(strcmp(fields[0],"$GPRMC")==0){
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	4979      	ldr	r1, [pc, #484]	@ (8002874 <NMEA_parser+0x2b8>)
 800268e:	4618      	mov	r0, r3
 8002690:	f7fd fe2e 	bl	80002f0 <strcmp>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d130      	bne.n	80026fc <NMEA_parser+0x140>

		nmea_data.UTC_time = atof(fields[1]);
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	4618      	mov	r0, r3
 800269e:	f014 fb33 	bl	8016d08 <atof>
 80026a2:	eeb0 7b40 	vmov.f64	d7, d0
 80026a6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80026aa:	4b70      	ldr	r3, [pc, #448]	@ (800286c <NMEA_parser+0x2b0>)
 80026ac:	edc3 7a00 	vstr	s15, [r3]
		nmea_data.UT_date = atoi(fields[9]);
 80026b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026b2:	4618      	mov	r0, r3
 80026b4:	f014 fb2b 	bl	8016d0e <atoi>
 80026b8:	4603      	mov	r3, r0
 80026ba:	4a6c      	ldr	r2, [pc, #432]	@ (800286c <NMEA_parser+0x2b0>)
 80026bc:	6053      	str	r3, [r2, #4]

		nmea_data.latitude = atof(fields[3]);
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f014 fb21 	bl	8016d08 <atof>
 80026c6:	eeb0 7b40 	vmov.f64	d7, d0
 80026ca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80026ce:	4b67      	ldr	r3, [pc, #412]	@ (800286c <NMEA_parser+0x2b0>)
 80026d0:	edc3 7a02 	vstr	s15, [r3, #8]
		nmea_data.latitude_direction = *fields[4];
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	781a      	ldrb	r2, [r3, #0]
 80026d8:	4b64      	ldr	r3, [pc, #400]	@ (800286c <NMEA_parser+0x2b0>)
 80026da:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[5]);
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	4618      	mov	r0, r3
 80026e0:	f014 fb12 	bl	8016d08 <atof>
 80026e4:	eeb0 7b40 	vmov.f64	d7, d0
 80026e8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80026ec:	4b5f      	ldr	r3, [pc, #380]	@ (800286c <NMEA_parser+0x2b0>)
 80026ee:	edc3 7a04 	vstr	s15, [r3, #16]
		nmea_data.longitude_direction = *fields[6];
 80026f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f4:	781a      	ldrb	r2, [r3, #0]
 80026f6:	4b5d      	ldr	r3, [pc, #372]	@ (800286c <NMEA_parser+0x2b0>)
 80026f8:	751a      	strb	r2, [r3, #20]
 80026fa:	e0d4      	b.n	80028a6 <NMEA_parser+0x2ea>


	}else if(strcmp(fields[0],"$GPVTG")==0){
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	495e      	ldr	r1, [pc, #376]	@ (8002878 <NMEA_parser+0x2bc>)
 8002700:	4618      	mov	r0, r3
 8002702:	f7fd fdf5 	bl	80002f0 <strcmp>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d116      	bne.n	800273a <NMEA_parser+0x17e>

		nmea_data.speed_knots =  atoi(fields[5]);
 800270c:	6a3b      	ldr	r3, [r7, #32]
 800270e:	4618      	mov	r0, r3
 8002710:	f014 fafd 	bl	8016d0e <atoi>
 8002714:	ee07 0a90 	vmov	s15, r0
 8002718:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800271c:	4b53      	ldr	r3, [pc, #332]	@ (800286c <NMEA_parser+0x2b0>)
 800271e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		nmea_data.speed_kmph =  atoi(fields[7]);
 8002722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002724:	4618      	mov	r0, r3
 8002726:	f014 faf2 	bl	8016d0e <atoi>
 800272a:	ee07 0a90 	vmov	s15, r0
 800272e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002732:	4b4e      	ldr	r3, [pc, #312]	@ (800286c <NMEA_parser+0x2b0>)
 8002734:	edc3 7a08 	vstr	s15, [r3, #32]
 8002738:	e0b5      	b.n	80028a6 <NMEA_parser+0x2ea>

	}else if(strcmp(fields[0],"$GPGGA")==0){
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	494f      	ldr	r1, [pc, #316]	@ (800287c <NMEA_parser+0x2c0>)
 800273e:	4618      	mov	r0, r3
 8002740:	f7fd fdd6 	bl	80002f0 <strcmp>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d15c      	bne.n	8002804 <NMEA_parser+0x248>

		nmea_data.UTC_time = atof(fields[1]);
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	4618      	mov	r0, r3
 800274e:	f014 fadb 	bl	8016d08 <atof>
 8002752:	eeb0 7b40 	vmov.f64	d7, d0
 8002756:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800275a:	4b44      	ldr	r3, [pc, #272]	@ (800286c <NMEA_parser+0x2b0>)
 800275c:	edc3 7a00 	vstr	s15, [r3]

		nmea_data.latitude = atof(fields[2]);
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	4618      	mov	r0, r3
 8002764:	f014 fad0 	bl	8016d08 <atof>
 8002768:	eeb0 7b40 	vmov.f64	d7, d0
 800276c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002770:	4b3e      	ldr	r3, [pc, #248]	@ (800286c <NMEA_parser+0x2b0>)
 8002772:	edc3 7a02 	vstr	s15, [r3, #8]
		nmea_data.latitude_direction = *fields[3];
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	781a      	ldrb	r2, [r3, #0]
 800277a:	4b3c      	ldr	r3, [pc, #240]	@ (800286c <NMEA_parser+0x2b0>)
 800277c:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[4]);
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	4618      	mov	r0, r3
 8002782:	f014 fac1 	bl	8016d08 <atof>
 8002786:	eeb0 7b40 	vmov.f64	d7, d0
 800278a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800278e:	4b37      	ldr	r3, [pc, #220]	@ (800286c <NMEA_parser+0x2b0>)
 8002790:	edc3 7a04 	vstr	s15, [r3, #16]
		nmea_data.longitude_direction = *fields[5];
 8002794:	6a3b      	ldr	r3, [r7, #32]
 8002796:	781a      	ldrb	r2, [r3, #0]
 8002798:	4b34      	ldr	r3, [pc, #208]	@ (800286c <NMEA_parser+0x2b0>)
 800279a:	751a      	strb	r2, [r3, #20]

		nmea_data.fix = atoi(fields[6]);
 800279c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279e:	4618      	mov	r0, r3
 80027a0:	f014 fab5 	bl	8016d0e <atoi>
 80027a4:	4603      	mov	r3, r0
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	4b30      	ldr	r3, [pc, #192]	@ (800286c <NMEA_parser+0x2b0>)
 80027aa:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		nmea_data.sat_in_use = atoi(fields[7]);
 80027ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027b0:	4618      	mov	r0, r3
 80027b2:	f014 faac 	bl	8016d0e <atoi>
 80027b6:	4603      	mov	r3, r0
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	4b2c      	ldr	r3, [pc, #176]	@ (800286c <NMEA_parser+0x2b0>)
 80027bc:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		nmea_data.HDOP = atof(fields[8]);
 80027c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027c2:	4618      	mov	r0, r3
 80027c4:	f014 faa0 	bl	8016d08 <atof>
 80027c8:	eeb0 7b40 	vmov.f64	d7, d0
 80027cc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80027d0:	4b26      	ldr	r3, [pc, #152]	@ (800286c <NMEA_parser+0x2b0>)
 80027d2:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

		nmea_data.altitude = atof(fields[9]);
 80027d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027d8:	4618      	mov	r0, r3
 80027da:	f014 fa95 	bl	8016d08 <atof>
 80027de:	eeb0 7b40 	vmov.f64	d7, d0
 80027e2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80027e6:	4b21      	ldr	r3, [pc, #132]	@ (800286c <NMEA_parser+0x2b0>)
 80027e8:	edc3 7a06 	vstr	s15, [r3, #24]
		nmea_data.geoidal_separation = atof(fields[11]);
 80027ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027ee:	4618      	mov	r0, r3
 80027f0:	f014 fa8a 	bl	8016d08 <atof>
 80027f4:	eeb0 7b40 	vmov.f64	d7, d0
 80027f8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80027fc:	4b1b      	ldr	r3, [pc, #108]	@ (800286c <NMEA_parser+0x2b0>)
 80027fe:	edc3 7a07 	vstr	s15, [r3, #28]
 8002802:	e050      	b.n	80028a6 <NMEA_parser+0x2ea>

	}else if(strcmp(fields[0],"$GPGSA")==0){
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	491e      	ldr	r1, [pc, #120]	@ (8002880 <NMEA_parser+0x2c4>)
 8002808:	4618      	mov	r0, r3
 800280a:	f7fd fd71 	bl	80002f0 <strcmp>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d137      	bne.n	8002884 <NMEA_parser+0x2c8>

		nmea_data.fix_mode = atoi(fields[2]);
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	4618      	mov	r0, r3
 8002818:	f014 fa79 	bl	8016d0e <atoi>
 800281c:	4603      	mov	r3, r0
 800281e:	b2da      	uxtb	r2, r3
 8002820:	4b12      	ldr	r3, [pc, #72]	@ (800286c <NMEA_parser+0x2b0>)
 8002822:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

		nmea_data.PDOP = atof(fields[15]);
 8002826:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002828:	4618      	mov	r0, r3
 800282a:	f014 fa6d 	bl	8016d08 <atof>
 800282e:	eeb0 7b40 	vmov.f64	d7, d0
 8002832:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002836:	4b0d      	ldr	r3, [pc, #52]	@ (800286c <NMEA_parser+0x2b0>)
 8002838:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		nmea_data.HDOP = atof(fields[16]);
 800283c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800283e:	4618      	mov	r0, r3
 8002840:	f014 fa62 	bl	8016d08 <atof>
 8002844:	eeb0 7b40 	vmov.f64	d7, d0
 8002848:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800284c:	4b07      	ldr	r3, [pc, #28]	@ (800286c <NMEA_parser+0x2b0>)
 800284e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		nmea_data.VDOP = atof(fields[17]);
 8002852:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002854:	4618      	mov	r0, r3
 8002856:	f014 fa57 	bl	8016d08 <atof>
 800285a:	eeb0 7b40 	vmov.f64	d7, d0
 800285e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002862:	4b02      	ldr	r3, [pc, #8]	@ (800286c <NMEA_parser+0x2b0>)
 8002864:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
 8002868:	e01d      	b.n	80028a6 <NMEA_parser+0x2ea>
 800286a:	bf00      	nop
 800286c:	24000e9c 	.word	0x24000e9c
 8002870:	08019c68 	.word	0x08019c68
 8002874:	08019c70 	.word	0x08019c70
 8002878:	08019c78 	.word	0x08019c78
 800287c:	08019c80 	.word	0x08019c80
 8002880:	08019c88 	.word	0x08019c88

	}else if(strcmp(fields[0],"$GPGSV")==0){
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4931      	ldr	r1, [pc, #196]	@ (800294c <NMEA_parser+0x390>)
 8002888:	4618      	mov	r0, r3
 800288a:	f7fd fd31 	bl	80002f0 <strcmp>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d108      	bne.n	80028a6 <NMEA_parser+0x2ea>
		nmea_data.sat_in_view = atoi(fields[3]);
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	4618      	mov	r0, r3
 8002898:	f014 fa39 	bl	8016d0e <atoi>
 800289c:	4603      	mov	r3, r0
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002950 <NMEA_parser+0x394>)
 80028a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	}

	if (abs(nmea_data.speed_kmph - previous_data.speed_kmph) > speed_change_tolerance){
 80028a6:	4b2a      	ldr	r3, [pc, #168]	@ (8002950 <NMEA_parser+0x394>)
 80028a8:	ed93 7a08 	vldr	s14, [r3, #32]
 80028ac:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 80028b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028b8:	ee17 3a90 	vmov	r3, s15
 80028bc:	2b00      	cmp	r3, #0
 80028be:	bfb8      	it	lt
 80028c0:	425b      	neglt	r3, r3
 80028c2:	ee07 3a90 	vmov	s15, r3
 80028c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028ca:	4b22      	ldr	r3, [pc, #136]	@ (8002954 <NMEA_parser+0x398>)
 80028cc:	edd3 7a00 	vldr	s15, [r3]
 80028d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d8:	dd02      	ble.n	80028e0 <NMEA_parser+0x324>
		speed_change_CB_fun_ptr();
 80028da:	4b1f      	ldr	r3, [pc, #124]	@ (8002958 <NMEA_parser+0x39c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4798      	blx	r3
	}

	if (nmea_data.speed_kmph > speed_raise_barrier && previous_data.speed_kmph <= speed_raise_barrier){
 80028e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002950 <NMEA_parser+0x394>)
 80028e2:	ed93 7a08 	vldr	s14, [r3, #32]
 80028e6:	4b1d      	ldr	r3, [pc, #116]	@ (800295c <NMEA_parser+0x3a0>)
 80028e8:	edd3 7a00 	vldr	s15, [r3]
 80028ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028f4:	dd0c      	ble.n	8002910 <NMEA_parser+0x354>
 80028f6:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 80028fa:	4b18      	ldr	r3, [pc, #96]	@ (800295c <NMEA_parser+0x3a0>)
 80028fc:	edd3 7a00 	vldr	s15, [r3]
 8002900:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002908:	d802      	bhi.n	8002910 <NMEA_parser+0x354>
		speed_raise_barrier_CB_fun_ptr();
 800290a:	4b15      	ldr	r3, [pc, #84]	@ (8002960 <NMEA_parser+0x3a4>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4798      	blx	r3
	}

	if (nmea_data.speed_kmph < speed_raise_barrier && previous_data.speed_kmph >= speed_raise_barrier){
 8002910:	4b0f      	ldr	r3, [pc, #60]	@ (8002950 <NMEA_parser+0x394>)
 8002912:	ed93 7a08 	vldr	s14, [r3, #32]
 8002916:	4b11      	ldr	r3, [pc, #68]	@ (800295c <NMEA_parser+0x3a0>)
 8002918:	edd3 7a00 	vldr	s15, [r3]
 800291c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002924:	d400      	bmi.n	8002928 <NMEA_parser+0x36c>
		speed_fall_barrier_CB_fun_ptr();
	}
}
 8002926:	e00d      	b.n	8002944 <NMEA_parser+0x388>
	if (nmea_data.speed_kmph < speed_raise_barrier && previous_data.speed_kmph >= speed_raise_barrier){
 8002928:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 800292c:	4b0b      	ldr	r3, [pc, #44]	@ (800295c <NMEA_parser+0x3a0>)
 800292e:	edd3 7a00 	vldr	s15, [r3]
 8002932:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800293a:	da00      	bge.n	800293e <NMEA_parser+0x382>
}
 800293c:	e002      	b.n	8002944 <NMEA_parser+0x388>
		speed_fall_barrier_CB_fun_ptr();
 800293e:	4b09      	ldr	r3, [pc, #36]	@ (8002964 <NMEA_parser+0x3a8>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4798      	blx	r3
}
 8002944:	bf00      	nop
 8002946:	37c8      	adds	r7, #200	@ 0xc8
 8002948:	46bd      	mov	sp, r7
 800294a:	bdb0      	pop	{r4, r5, r7, pc}
 800294c:	08019c90 	.word	0x08019c90
 8002950:	24000e9c 	.word	0x24000e9c
 8002954:	24000e84 	.word	0x24000e84
 8002958:	24000e80 	.word	0x24000e80
 800295c:	24000e8c 	.word	0x24000e8c
 8002960:	24000e88 	.word	0x24000e88
 8002964:	24000e90 	.word	0x24000e90

08002968 <hx2int>:
 * hx2int is function which converts hex number written using characters to corresponding integer.
 * @param[in]	n2		is older position ix hex code
 * @param[in]	n1		is younger position ix hex code
 * @param[out]	uint8_t	is integer corresponding to input hex
 */
static uint8_t hx2int(uint8_t n2, uint8_t n1){
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	460a      	mov	r2, r1
 8002972:	71fb      	strb	r3, [r7, #7]
 8002974:	4613      	mov	r3, r2
 8002976:	71bb      	strb	r3, [r7, #6]
	if (n2 <= '9') n2-='0';
 8002978:	79fb      	ldrb	r3, [r7, #7]
 800297a:	2b39      	cmp	r3, #57	@ 0x39
 800297c:	d803      	bhi.n	8002986 <hx2int+0x1e>
 800297e:	79fb      	ldrb	r3, [r7, #7]
 8002980:	3b30      	subs	r3, #48	@ 0x30
 8002982:	71fb      	strb	r3, [r7, #7]
 8002984:	e002      	b.n	800298c <hx2int+0x24>
	else n2=n2-'A'+10;
 8002986:	79fb      	ldrb	r3, [r7, #7]
 8002988:	3b37      	subs	r3, #55	@ 0x37
 800298a:	71fb      	strb	r3, [r7, #7]

	if (n1 <= '9') n1-='0';
 800298c:	79bb      	ldrb	r3, [r7, #6]
 800298e:	2b39      	cmp	r3, #57	@ 0x39
 8002990:	d803      	bhi.n	800299a <hx2int+0x32>
 8002992:	79bb      	ldrb	r3, [r7, #6]
 8002994:	3b30      	subs	r3, #48	@ 0x30
 8002996:	71bb      	strb	r3, [r7, #6]
 8002998:	e002      	b.n	80029a0 <hx2int+0x38>
	else n1=n1-'A'+10;
 800299a:	79bb      	ldrb	r3, [r7, #6]
 800299c:	3b37      	subs	r3, #55	@ 0x37
 800299e:	71bb      	strb	r3, [r7, #6]

	return n2*16+n1;
 80029a0:	79fb      	ldrb	r3, [r7, #7]
 80029a2:	011b      	lsls	r3, r3, #4
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	79bb      	ldrb	r3, [r7, #6]
 80029a8:	4413      	add	r3, r2
 80029aa:	b2db      	uxtb	r3, r3

}
 80029ac:	4618      	mov	r0, r3
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <NMEA_checksum_clc>:
 * NMEA_checksum_clc is function which calculates checksum of the message and compares it to checksum value given in NMEA message.\n
 * To convert given checksum it uses hx2int function.
 * @param[in]	message	pointer to buffer storing NMEA message.
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more information check out NMEA_status documentation.
 */
static NMEA_status NMEA_checksum_clc(uint8_t * message){
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
	uint8_t index = 1;
 80029c0:	2301      	movs	r3, #1
 80029c2:	73fb      	strb	r3, [r7, #15]
	uint8_t checksum_clc =0;
 80029c4:	2300      	movs	r3, #0
 80029c6:	73bb      	strb	r3, [r7, #14]

	while (message[index]!='*' && index<NMEA_WORKING_BUFFER_SIZE-2){
 80029c8:	e009      	b.n	80029de <NMEA_checksum_clc+0x26>
		checksum_clc^=message[index++];
 80029ca:	7bfb      	ldrb	r3, [r7, #15]
 80029cc:	1c5a      	adds	r2, r3, #1
 80029ce:	73fa      	strb	r2, [r7, #15]
 80029d0:	461a      	mov	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4413      	add	r3, r2
 80029d6:	781a      	ldrb	r2, [r3, #0]
 80029d8:	7bbb      	ldrb	r3, [r7, #14]
 80029da:	4053      	eors	r3, r2
 80029dc:	73bb      	strb	r3, [r7, #14]
	while (message[index]!='*' && index<NMEA_WORKING_BUFFER_SIZE-2){
 80029de:	7bfb      	ldrb	r3, [r7, #15]
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	4413      	add	r3, r2
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80029e8:	d002      	beq.n	80029f0 <NMEA_checksum_clc+0x38>
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
 80029ec:	2b7d      	cmp	r3, #125	@ 0x7d
 80029ee:	d9ec      	bls.n	80029ca <NMEA_checksum_clc+0x12>
	}

	uint8_t checksum = hx2int(message[index+1],message[index+2]);
 80029f0:	7bfb      	ldrb	r3, [r7, #15]
 80029f2:	3301      	adds	r3, #1
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	4413      	add	r3, r2
 80029f8:	7818      	ldrb	r0, [r3, #0]
 80029fa:	7bfb      	ldrb	r3, [r7, #15]
 80029fc:	3302      	adds	r3, #2
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	4413      	add	r3, r2
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	4619      	mov	r1, r3
 8002a06:	f7ff ffaf 	bl	8002968 <hx2int>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	737b      	strb	r3, [r7, #13]
	if (checksum!=checksum_clc){
 8002a0e:	7b7a      	ldrb	r2, [r7, #13]
 8002a10:	7bbb      	ldrb	r3, [r7, #14]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d001      	beq.n	8002a1a <NMEA_checksum_clc+0x62>
		return NMEA_CHECKSUM_ERROR;
 8002a16:	2302      	movs	r3, #2
 8002a18:	e000      	b.n	8002a1c <NMEA_checksum_clc+0x64>
	}
	return NMEA_OK;
 8002a1a:	2300      	movs	r3, #0


}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <NMEA_read_line>:

/**
 * NMEA_read_line is function which reads one NMEA message line from NMEA_UART_buffer circular buffer to NMEA_working_buffer.
 */
static void NMEA_read_line(void){
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
	int index = 0;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	607b      	str	r3, [r7, #4]
	while (index < NMEA_WORKING_BUFFER_SIZE) NMEA_working_buffer[index++]=0;	// Clean up working buffer.
 8002a2e:	e005      	b.n	8002a3c <NMEA_read_line+0x18>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	1c5a      	adds	r2, r3, #1
 8002a34:	607a      	str	r2, [r7, #4]
 8002a36:	4a2b      	ldr	r2, [pc, #172]	@ (8002ae4 <NMEA_read_line+0xc0>)
 8002a38:	2100      	movs	r1, #0
 8002a3a:	54d1      	strb	r1, [r2, r3]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002a40:	ddf6      	ble.n	8002a30 <NMEA_read_line+0xc>

	index = 0;
 8002a42:	2300      	movs	r3, #0
 8002a44:	607b      	str	r3, [r7, #4]
	while(NMEA_UART_buffer[UART_buffer_tail]!= '\n' && index < NMEA_WORKING_BUFFER_SIZE-2){
 8002a46:	e01c      	b.n	8002a82 <NMEA_read_line+0x5e>
		NMEA_working_buffer[index]=NMEA_UART_buffer[UART_buffer_tail];
 8002a48:	4b27      	ldr	r3, [pc, #156]	@ (8002ae8 <NMEA_read_line+0xc4>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a27      	ldr	r2, [pc, #156]	@ (8002aec <NMEA_read_line+0xc8>)
 8002a4e:	5cd1      	ldrb	r1, [r2, r3]
 8002a50:	4a24      	ldr	r2, [pc, #144]	@ (8002ae4 <NMEA_read_line+0xc0>)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4413      	add	r3, r2
 8002a56:	460a      	mov	r2, r1
 8002a58:	701a      	strb	r2, [r3, #0]
		NMEA_UART_buffer[UART_buffer_tail] = 0;
 8002a5a:	4b23      	ldr	r3, [pc, #140]	@ (8002ae8 <NMEA_read_line+0xc4>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a23      	ldr	r2, [pc, #140]	@ (8002aec <NMEA_read_line+0xc8>)
 8002a60:	2100      	movs	r1, #0
 8002a62:	54d1      	strb	r1, [r2, r3]
		UART_buffer_tail = (UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8002a64:	4b20      	ldr	r3, [pc, #128]	@ (8002ae8 <NMEA_read_line+0xc4>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	425a      	negs	r2, r3
 8002a6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a70:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002a74:	bf58      	it	pl
 8002a76:	4253      	negpl	r3, r2
 8002a78:	4a1b      	ldr	r2, [pc, #108]	@ (8002ae8 <NMEA_read_line+0xc4>)
 8002a7a:	6013      	str	r3, [r2, #0]
		++index;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	607b      	str	r3, [r7, #4]
	while(NMEA_UART_buffer[UART_buffer_tail]!= '\n' && index < NMEA_WORKING_BUFFER_SIZE-2){
 8002a82:	4b19      	ldr	r3, [pc, #100]	@ (8002ae8 <NMEA_read_line+0xc4>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a19      	ldr	r2, [pc, #100]	@ (8002aec <NMEA_read_line+0xc8>)
 8002a88:	5cd3      	ldrb	r3, [r2, r3]
 8002a8a:	2b0a      	cmp	r3, #10
 8002a8c:	d002      	beq.n	8002a94 <NMEA_read_line+0x70>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b7d      	cmp	r3, #125	@ 0x7d
 8002a92:	ddd9      	ble.n	8002a48 <NMEA_read_line+0x24>
	}
	NMEA_working_buffer[index]=NMEA_UART_buffer[UART_buffer_tail];
 8002a94:	4b14      	ldr	r3, [pc, #80]	@ (8002ae8 <NMEA_read_line+0xc4>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a14      	ldr	r2, [pc, #80]	@ (8002aec <NMEA_read_line+0xc8>)
 8002a9a:	5cd1      	ldrb	r1, [r2, r3]
 8002a9c:	4a11      	ldr	r2, [pc, #68]	@ (8002ae4 <NMEA_read_line+0xc0>)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	460a      	mov	r2, r1
 8002aa4:	701a      	strb	r2, [r3, #0]
	NMEA_UART_buffer[UART_buffer_tail] = 0;
 8002aa6:	4b10      	ldr	r3, [pc, #64]	@ (8002ae8 <NMEA_read_line+0xc4>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a10      	ldr	r2, [pc, #64]	@ (8002aec <NMEA_read_line+0xc8>)
 8002aac:	2100      	movs	r1, #0
 8002aae:	54d1      	strb	r1, [r2, r3]
	UART_buffer_tail = (UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8002ab0:	4b0d      	ldr	r3, [pc, #52]	@ (8002ae8 <NMEA_read_line+0xc4>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	425a      	negs	r2, r3
 8002ab8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002abc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002ac0:	bf58      	it	pl
 8002ac2:	4253      	negpl	r3, r2
 8002ac4:	4a08      	ldr	r2, [pc, #32]	@ (8002ae8 <NMEA_read_line+0xc4>)
 8002ac6:	6013      	str	r3, [r2, #0]
	++index;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3301      	adds	r3, #1
 8002acc:	607b      	str	r3, [r7, #4]
	--UART_buffer_lines;
 8002ace:	4b08      	ldr	r3, [pc, #32]	@ (8002af0 <NMEA_read_line+0xcc>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	4a06      	ldr	r2, [pc, #24]	@ (8002af0 <NMEA_read_line+0xcc>)
 8002ad6:	6013      	str	r3, [r2, #0]

}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	24000df4 	.word	0x24000df4
 8002ae8:	24000e78 	.word	0x24000e78
 8002aec:	240009f4 	.word	0x240009f4
 8002af0:	24000e7c 	.word	0x24000e7c

08002af4 <NMEA_init>:

void NMEA_init(UART_HandleTypeDef *huart, DMA_HandleTypeDef *DMA){
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
	HAL_Delay(10);
 8002afe:	200a      	movs	r0, #10
 8002b00:	f003 fe62 	bl	80067c8 <HAL_Delay>
	NMEA_huart=huart;
 8002b04:	4a12      	ldr	r2, [pc, #72]	@ (8002b50 <NMEA_init+0x5c>)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6013      	str	r3, [r2, #0]
	NMEA_DMA=DMA;
 8002b0a:	4a12      	ldr	r2, [pc, #72]	@ (8002b54 <NMEA_init+0x60>)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	6013      	str	r3, [r2, #0]
	__HAL_UART_ENABLE_IT(NMEA_huart,UART_IT_IDLE);
 8002b10:	4b0f      	ldr	r3, [pc, #60]	@ (8002b50 <NMEA_init+0x5c>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	4b0d      	ldr	r3, [pc, #52]	@ (8002b50 <NMEA_init+0x5c>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0210 	orr.w	r2, r2, #16
 8002b22:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(NMEA_huart, NMEA_UART_DMA_buffer, NMEA_UART_DMA_BUFFER_SIZE);
 8002b24:	4b0a      	ldr	r3, [pc, #40]	@ (8002b50 <NMEA_init+0x5c>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b2c:	490a      	ldr	r1, [pc, #40]	@ (8002b58 <NMEA_init+0x64>)
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f00c ff58 	bl	800f9e4 <HAL_UART_Receive_DMA>


	speed_change_CB_fun_ptr = &default_CB;
 8002b34:	4b09      	ldr	r3, [pc, #36]	@ (8002b5c <NMEA_init+0x68>)
 8002b36:	4a0a      	ldr	r2, [pc, #40]	@ (8002b60 <NMEA_init+0x6c>)
 8002b38:	601a      	str	r2, [r3, #0]
	speed_raise_barrier_CB_fun_ptr = &default_CB;
 8002b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b64 <NMEA_init+0x70>)
 8002b3c:	4a08      	ldr	r2, [pc, #32]	@ (8002b60 <NMEA_init+0x6c>)
 8002b3e:	601a      	str	r2, [r3, #0]
	speed_fall_barrier_CB_fun_ptr = &default_CB;
 8002b40:	4b09      	ldr	r3, [pc, #36]	@ (8002b68 <NMEA_init+0x74>)
 8002b42:	4a07      	ldr	r2, [pc, #28]	@ (8002b60 <NMEA_init+0x6c>)
 8002b44:	601a      	str	r2, [r3, #0]
}
 8002b46:	bf00      	nop
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	24000e94 	.word	0x24000e94
 8002b54:	24000e98 	.word	0x24000e98
 8002b58:	240007f4 	.word	0x240007f4
 8002b5c:	24000e80 	.word	0x24000e80
 8002b60:	080025ad 	.word	0x080025ad
 8002b64:	24000e88 	.word	0x24000e88
 8002b68:	24000e90 	.word	0x24000e90

08002b6c <NMEA_UART_DMA_get_char>:
 * If buffer overflowes, the oldest NMEA message will be deleted to make space for incoming messages.\n
 * If new line character is detected ('\ n'), the line counter (UART_buffer_lines) increases.
 * @param[in]	DMA_char	character from DMA buffer
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more information check out NMEA_status documentation.
 */
static NMEA_status NMEA_UART_DMA_get_char(uint8_t DMA_char){
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	4603      	mov	r3, r0
 8002b74:	71fb      	strb	r3, [r7, #7]
	int position = (UART_buffer_head + 1)%NMEA_UART_BUFFER_SIZE;
 8002b76:	4b2d      	ldr	r3, [pc, #180]	@ (8002c2c <NMEA_UART_DMA_get_char+0xc0>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	425a      	negs	r2, r3
 8002b7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b82:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002b86:	bf58      	it	pl
 8002b88:	4253      	negpl	r3, r2
 8002b8a:	60bb      	str	r3, [r7, #8]
	NMEA_status stat=NMEA_OK;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	73fb      	strb	r3, [r7, #15]

	if (position == UART_buffer_tail){		//buffer overflowed! make space for new message
 8002b90:	4b27      	ldr	r3, [pc, #156]	@ (8002c30 <NMEA_UART_DMA_get_char+0xc4>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d130      	bne.n	8002bfc <NMEA_UART_DMA_get_char+0x90>
		while (NMEA_UART_buffer[UART_buffer_tail]!='\n' && NMEA_UART_buffer[UART_buffer_tail]!=0){
 8002b9a:	e010      	b.n	8002bbe <NMEA_UART_DMA_get_char+0x52>
			NMEA_UART_buffer[UART_buffer_tail]=0;
 8002b9c:	4b24      	ldr	r3, [pc, #144]	@ (8002c30 <NMEA_UART_DMA_get_char+0xc4>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a24      	ldr	r2, [pc, #144]	@ (8002c34 <NMEA_UART_DMA_get_char+0xc8>)
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	54d1      	strb	r1, [r2, r3]
			UART_buffer_tail=(UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8002ba6:	4b22      	ldr	r3, [pc, #136]	@ (8002c30 <NMEA_UART_DMA_get_char+0xc4>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	3301      	adds	r3, #1
 8002bac:	425a      	negs	r2, r3
 8002bae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bb2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002bb6:	bf58      	it	pl
 8002bb8:	4253      	negpl	r3, r2
 8002bba:	4a1d      	ldr	r2, [pc, #116]	@ (8002c30 <NMEA_UART_DMA_get_char+0xc4>)
 8002bbc:	6013      	str	r3, [r2, #0]
		while (NMEA_UART_buffer[UART_buffer_tail]!='\n' && NMEA_UART_buffer[UART_buffer_tail]!=0){
 8002bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8002c30 <NMEA_UART_DMA_get_char+0xc4>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a1c      	ldr	r2, [pc, #112]	@ (8002c34 <NMEA_UART_DMA_get_char+0xc8>)
 8002bc4:	5cd3      	ldrb	r3, [r2, r3]
 8002bc6:	2b0a      	cmp	r3, #10
 8002bc8:	d005      	beq.n	8002bd6 <NMEA_UART_DMA_get_char+0x6a>
 8002bca:	4b19      	ldr	r3, [pc, #100]	@ (8002c30 <NMEA_UART_DMA_get_char+0xc4>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a19      	ldr	r2, [pc, #100]	@ (8002c34 <NMEA_UART_DMA_get_char+0xc8>)
 8002bd0:	5cd3      	ldrb	r3, [r2, r3]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1e2      	bne.n	8002b9c <NMEA_UART_DMA_get_char+0x30>
		}
		NMEA_UART_buffer[UART_buffer_tail]=0;
 8002bd6:	4b16      	ldr	r3, [pc, #88]	@ (8002c30 <NMEA_UART_DMA_get_char+0xc4>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a16      	ldr	r2, [pc, #88]	@ (8002c34 <NMEA_UART_DMA_get_char+0xc8>)
 8002bdc:	2100      	movs	r1, #0
 8002bde:	54d1      	strb	r1, [r2, r3]
		UART_buffer_tail=(UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8002be0:	4b13      	ldr	r3, [pc, #76]	@ (8002c30 <NMEA_UART_DMA_get_char+0xc4>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	3301      	adds	r3, #1
 8002be6:	425a      	negs	r2, r3
 8002be8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bec:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002bf0:	bf58      	it	pl
 8002bf2:	4253      	negpl	r3, r2
 8002bf4:	4a0e      	ldr	r2, [pc, #56]	@ (8002c30 <NMEA_UART_DMA_get_char+0xc4>)
 8002bf6:	6013      	str	r3, [r2, #0]
		stat=NMEA_BUFFER_OVERFLOWED;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	73fb      	strb	r3, [r7, #15]
	}

	NMEA_UART_buffer[UART_buffer_head]=DMA_char;
 8002bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8002c2c <NMEA_UART_DMA_get_char+0xc0>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	490c      	ldr	r1, [pc, #48]	@ (8002c34 <NMEA_UART_DMA_get_char+0xc8>)
 8002c02:	79fa      	ldrb	r2, [r7, #7]
 8002c04:	54ca      	strb	r2, [r1, r3]

	UART_buffer_head=position;
 8002c06:	4a09      	ldr	r2, [pc, #36]	@ (8002c2c <NMEA_UART_DMA_get_char+0xc0>)
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	6013      	str	r3, [r2, #0]

	if(DMA_char=='\n'){
 8002c0c:	79fb      	ldrb	r3, [r7, #7]
 8002c0e:	2b0a      	cmp	r3, #10
 8002c10:	d104      	bne.n	8002c1c <NMEA_UART_DMA_get_char+0xb0>
		++UART_buffer_lines;	//increment lines counter
 8002c12:	4b09      	ldr	r3, [pc, #36]	@ (8002c38 <NMEA_UART_DMA_get_char+0xcc>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	3301      	adds	r3, #1
 8002c18:	4a07      	ldr	r2, [pc, #28]	@ (8002c38 <NMEA_UART_DMA_get_char+0xcc>)
 8002c1a:	6013      	str	r3, [r2, #0]
	}

	return stat;
 8002c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	24000e74 	.word	0x24000e74
 8002c30:	24000e78 	.word	0x24000e78
 8002c34:	240009f4 	.word	0x240009f4
 8002c38:	24000e7c 	.word	0x24000e7c

08002c3c <NMEA_UART_DMA_copy_buffer>:
/**
 * NMEA_UART_DMA_copy_buffer is a function which copies messages from DMA buffer to UART circular buffer.\n
 * To do so, it uses NMEA_UART_DMA_get_char function for every character in NMEA_UART_DMA_buffer from 0 to (NMEA_UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(NMEA_DMA)).
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more information check out NMEA_status documentation.
 */
static NMEA_status NMEA_UART_DMA_copy_buffer(void){
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0


	NMEA_status stat=NMEA_OK;
 8002c42:	2300      	movs	r3, #0
 8002c44:	73fb      	strb	r3, [r7, #15]

	int data_length = NMEA_UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(NMEA_DMA);
 8002c46:	4b4b      	ldr	r3, [pc, #300]	@ (8002d74 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a4a      	ldr	r2, [pc, #296]	@ (8002d78 <NMEA_UART_DMA_copy_buffer+0x13c>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d059      	beq.n	8002d06 <NMEA_UART_DMA_copy_buffer+0xca>
 8002c52:	4b48      	ldr	r3, [pc, #288]	@ (8002d74 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a48      	ldr	r2, [pc, #288]	@ (8002d7c <NMEA_UART_DMA_copy_buffer+0x140>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d053      	beq.n	8002d06 <NMEA_UART_DMA_copy_buffer+0xca>
 8002c5e:	4b45      	ldr	r3, [pc, #276]	@ (8002d74 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a46      	ldr	r2, [pc, #280]	@ (8002d80 <NMEA_UART_DMA_copy_buffer+0x144>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d04d      	beq.n	8002d06 <NMEA_UART_DMA_copy_buffer+0xca>
 8002c6a:	4b42      	ldr	r3, [pc, #264]	@ (8002d74 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a44      	ldr	r2, [pc, #272]	@ (8002d84 <NMEA_UART_DMA_copy_buffer+0x148>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d047      	beq.n	8002d06 <NMEA_UART_DMA_copy_buffer+0xca>
 8002c76:	4b3f      	ldr	r3, [pc, #252]	@ (8002d74 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a42      	ldr	r2, [pc, #264]	@ (8002d88 <NMEA_UART_DMA_copy_buffer+0x14c>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d041      	beq.n	8002d06 <NMEA_UART_DMA_copy_buffer+0xca>
 8002c82:	4b3c      	ldr	r3, [pc, #240]	@ (8002d74 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a40      	ldr	r2, [pc, #256]	@ (8002d8c <NMEA_UART_DMA_copy_buffer+0x150>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d03b      	beq.n	8002d06 <NMEA_UART_DMA_copy_buffer+0xca>
 8002c8e:	4b39      	ldr	r3, [pc, #228]	@ (8002d74 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a3e      	ldr	r2, [pc, #248]	@ (8002d90 <NMEA_UART_DMA_copy_buffer+0x154>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d035      	beq.n	8002d06 <NMEA_UART_DMA_copy_buffer+0xca>
 8002c9a:	4b36      	ldr	r3, [pc, #216]	@ (8002d74 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a3c      	ldr	r2, [pc, #240]	@ (8002d94 <NMEA_UART_DMA_copy_buffer+0x158>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d02f      	beq.n	8002d06 <NMEA_UART_DMA_copy_buffer+0xca>
 8002ca6:	4b33      	ldr	r3, [pc, #204]	@ (8002d74 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a3a      	ldr	r2, [pc, #232]	@ (8002d98 <NMEA_UART_DMA_copy_buffer+0x15c>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d029      	beq.n	8002d06 <NMEA_UART_DMA_copy_buffer+0xca>
 8002cb2:	4b30      	ldr	r3, [pc, #192]	@ (8002d74 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a38      	ldr	r2, [pc, #224]	@ (8002d9c <NMEA_UART_DMA_copy_buffer+0x160>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d023      	beq.n	8002d06 <NMEA_UART_DMA_copy_buffer+0xca>
 8002cbe:	4b2d      	ldr	r3, [pc, #180]	@ (8002d74 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a36      	ldr	r2, [pc, #216]	@ (8002da0 <NMEA_UART_DMA_copy_buffer+0x164>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d01d      	beq.n	8002d06 <NMEA_UART_DMA_copy_buffer+0xca>
 8002cca:	4b2a      	ldr	r3, [pc, #168]	@ (8002d74 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a34      	ldr	r2, [pc, #208]	@ (8002da4 <NMEA_UART_DMA_copy_buffer+0x168>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d017      	beq.n	8002d06 <NMEA_UART_DMA_copy_buffer+0xca>
 8002cd6:	4b27      	ldr	r3, [pc, #156]	@ (8002d74 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a32      	ldr	r2, [pc, #200]	@ (8002da8 <NMEA_UART_DMA_copy_buffer+0x16c>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d011      	beq.n	8002d06 <NMEA_UART_DMA_copy_buffer+0xca>
 8002ce2:	4b24      	ldr	r3, [pc, #144]	@ (8002d74 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a30      	ldr	r2, [pc, #192]	@ (8002dac <NMEA_UART_DMA_copy_buffer+0x170>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d00b      	beq.n	8002d06 <NMEA_UART_DMA_copy_buffer+0xca>
 8002cee:	4b21      	ldr	r3, [pc, #132]	@ (8002d74 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a2e      	ldr	r2, [pc, #184]	@ (8002db0 <NMEA_UART_DMA_copy_buffer+0x174>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d005      	beq.n	8002d06 <NMEA_UART_DMA_copy_buffer+0xca>
 8002cfa:	4b1e      	ldr	r3, [pc, #120]	@ (8002d74 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a2c      	ldr	r2, [pc, #176]	@ (8002db4 <NMEA_UART_DMA_copy_buffer+0x178>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d106      	bne.n	8002d14 <NMEA_UART_DMA_copy_buffer+0xd8>
 8002d06:	4b1b      	ldr	r3, [pc, #108]	@ (8002d74 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8002d12:	e005      	b.n	8002d20 <NMEA_UART_DMA_copy_buffer+0xe4>
 8002d14:	4b17      	ldr	r3, [pc, #92]	@ (8002d74 <NMEA_UART_DMA_copy_buffer+0x138>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8002d20:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < data_length; i++){
 8002d22:	2300      	movs	r3, #0
 8002d24:	60bb      	str	r3, [r7, #8]
 8002d26:	e013      	b.n	8002d50 <NMEA_UART_DMA_copy_buffer+0x114>
		if (NMEA_UART_DMA_get_char(NMEA_UART_DMA_buffer[i])==NMEA_BUFFER_OVERFLOWED){
 8002d28:	4a23      	ldr	r2, [pc, #140]	@ (8002db8 <NMEA_UART_DMA_copy_buffer+0x17c>)
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff ff1b 	bl	8002b6c <NMEA_UART_DMA_get_char>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d101      	bne.n	8002d40 <NMEA_UART_DMA_copy_buffer+0x104>
			stat=NMEA_BUFFER_OVERFLOWED;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	73fb      	strb	r3, [r7, #15]
		}
		NMEA_UART_DMA_buffer[i]=0;
 8002d40:	4a1d      	ldr	r2, [pc, #116]	@ (8002db8 <NMEA_UART_DMA_copy_buffer+0x17c>)
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	4413      	add	r3, r2
 8002d46:	2200      	movs	r2, #0
 8002d48:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < data_length; i++){
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	60bb      	str	r3, [r7, #8]
 8002d50:	68ba      	ldr	r2, [r7, #8]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	dbe7      	blt.n	8002d28 <NMEA_UART_DMA_copy_buffer+0xec>
	}

	HAL_UART_Receive_DMA(NMEA_huart, NMEA_UART_DMA_buffer, NMEA_UART_DMA_BUFFER_SIZE);
 8002d58:	4b18      	ldr	r3, [pc, #96]	@ (8002dbc <NMEA_UART_DMA_copy_buffer+0x180>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d60:	4915      	ldr	r1, [pc, #84]	@ (8002db8 <NMEA_UART_DMA_copy_buffer+0x17c>)
 8002d62:	4618      	mov	r0, r3
 8002d64:	f00c fe3e 	bl	800f9e4 <HAL_UART_Receive_DMA>
	return stat;
 8002d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	24000e98 	.word	0x24000e98
 8002d78:	40020010 	.word	0x40020010
 8002d7c:	40020028 	.word	0x40020028
 8002d80:	40020040 	.word	0x40020040
 8002d84:	40020058 	.word	0x40020058
 8002d88:	40020070 	.word	0x40020070
 8002d8c:	40020088 	.word	0x40020088
 8002d90:	400200a0 	.word	0x400200a0
 8002d94:	400200b8 	.word	0x400200b8
 8002d98:	40020410 	.word	0x40020410
 8002d9c:	40020428 	.word	0x40020428
 8002da0:	40020440 	.word	0x40020440
 8002da4:	40020458 	.word	0x40020458
 8002da8:	40020470 	.word	0x40020470
 8002dac:	40020488 	.word	0x40020488
 8002db0:	400204a0 	.word	0x400204a0
 8002db4:	400204b8 	.word	0x400204b8
 8002db8:	240007f4 	.word	0x240007f4
 8002dbc:	24000e94 	.word	0x24000e94

08002dc0 <NMEA_process_task>:

NMEA_status NMEA_process_task(void){
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
	NMEA_status stat = NMEA_OK;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	71fb      	strb	r3, [r7, #7]
	while(UART_buffer_lines>0) {
 8002dca:	e00d      	b.n	8002de8 <NMEA_process_task+0x28>
		NMEA_read_line();
 8002dcc:	f7ff fe2a 	bl	8002a24 <NMEA_read_line>
		if (NMEA_checksum_clc(NMEA_working_buffer) == NMEA_OK){
 8002dd0:	480a      	ldr	r0, [pc, #40]	@ (8002dfc <NMEA_process_task+0x3c>)
 8002dd2:	f7ff fdf1 	bl	80029b8 <NMEA_checksum_clc>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d103      	bne.n	8002de4 <NMEA_process_task+0x24>
			NMEA_parser((char *)NMEA_working_buffer);
 8002ddc:	4807      	ldr	r0, [pc, #28]	@ (8002dfc <NMEA_process_task+0x3c>)
 8002dde:	f7ff fbed 	bl	80025bc <NMEA_parser>
 8002de2:	e001      	b.n	8002de8 <NMEA_process_task+0x28>
		}else stat = NMEA_CHECKSUM_ERROR;
 8002de4:	2302      	movs	r3, #2
 8002de6:	71fb      	strb	r3, [r7, #7]
	while(UART_buffer_lines>0) {
 8002de8:	4b05      	ldr	r3, [pc, #20]	@ (8002e00 <NMEA_process_task+0x40>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	dced      	bgt.n	8002dcc <NMEA_process_task+0xc>
	}
	return stat;
 8002df0:	79fb      	ldrb	r3, [r7, #7]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	24000df4 	.word	0x24000df4
 8002e00:	24000e7c 	.word	0x24000e7c

08002e04 <user_UART_IDLE_IT_handler>:

NMEA_status user_UART_IDLE_IT_handler(void){
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
	NMEA_status stat = NMEA_OK;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	71fb      	strb	r3, [r7, #7]
	if (__HAL_UART_GET_FLAG(NMEA_huart, UART_FLAG_IDLE) == SET) {
 8002e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8002e44 <user_UART_IDLE_IT_handler+0x40>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	f003 0310 	and.w	r3, r3, #16
 8002e1a:	2b10      	cmp	r3, #16
 8002e1c:	d10d      	bne.n	8002e3a <user_UART_IDLE_IT_handler+0x36>
		__HAL_UART_CLEAR_FLAG(NMEA_huart,UART_FLAG_IDLE);
 8002e1e:	4b09      	ldr	r3, [pc, #36]	@ (8002e44 <user_UART_IDLE_IT_handler+0x40>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2210      	movs	r2, #16
 8002e26:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(NMEA_huart);
 8002e28:	4b06      	ldr	r3, [pc, #24]	@ (8002e44 <user_UART_IDLE_IT_handler+0x40>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f00c fe25 	bl	800fa7c <HAL_UART_DMAStop>
		stat = NMEA_UART_DMA_copy_buffer();
 8002e32:	f7ff ff03 	bl	8002c3c <NMEA_UART_DMA_copy_buffer>
 8002e36:	4603      	mov	r3, r0
 8002e38:	71fb      	strb	r3, [r7, #7]
	}
	return stat;
 8002e3a:	79fb      	ldrb	r3, [r7, #7]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	24000e94 	.word	0x24000e94

08002e48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8002e4c:	f000 f906 	bl	800305c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e50:	f003 fc5e 	bl	8006710 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e54:	f000 f842 	bl	8002edc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e58:	f7ff fa26 	bl	80022a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002e5c:	f7fe ff78 	bl	8001d50 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8002e60:	f7fe ffa6 	bl	8001db0 <MX_FDCAN1_Init>
  MX_I2C3_Init();
 8002e64:	f7ff fad2 	bl	800240c <MX_I2C3_Init>
  MX_SPI1_Init();
 8002e68:	f000 f93c 	bl	80030e4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002e6c:	f000 f990 	bl	8003190 <MX_SPI2_Init>
  MX_TIM2_Init();
 8002e70:	f000 fcc8 	bl	8003804 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002e74:	f000 fd42 	bl	80038fc <MX_TIM3_Init>
  MX_TIM4_Init();
 8002e78:	f000 fda6 	bl	80039c8 <MX_TIM4_Init>
  MX_UART4_Init();
 8002e7c:	f000 ff5e 	bl	8003d3c <MX_UART4_Init>
  MX_USART1_UART_Init();
 8002e80:	f000 ffa8 	bl	8003dd4 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8002e84:	f001 f842 	bl	8003f0c <MX_USART6_UART_Init>
  MX_TIM13_Init();
 8002e88:	f000 fe1a 	bl	8003ac0 <MX_TIM13_Init>
  MX_USART3_UART_Init();
 8002e8c:	f000 fff2 	bl	8003e74 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8002e90:	f00f ffe4 	bl	8012e5c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  BMP280_init();
 8002e94:	f001 ff74 	bl	8004d80 <BMP280_init>
  //SD_init();
  SBUS_init();
 8002e98:	f002 ff20 	bl	8005cdc <SBUS_init>
  HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	4909      	ldr	r1, [pc, #36]	@ (8002ec4 <main+0x7c>)
 8002ea0:	4809      	ldr	r0, [pc, #36]	@ (8002ec8 <main+0x80>)
 8002ea2:	f00c fd9f 	bl	800f9e4 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_IT(&huart6, &LR03_RxByte,1);
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	4908      	ldr	r1, [pc, #32]	@ (8002ecc <main+0x84>)
 8002eaa:	4809      	ldr	r0, [pc, #36]	@ (8002ed0 <main+0x88>)
 8002eac:	f00c fd4e 	bl	800f94c <HAL_UART_Receive_IT>
  NMEA_init(&huart4, &hdma_uart4_rx);
 8002eb0:	4908      	ldr	r1, [pc, #32]	@ (8002ed4 <main+0x8c>)
 8002eb2:	4809      	ldr	r0, [pc, #36]	@ (8002ed8 <main+0x90>)
 8002eb4:	f7ff fe1e 	bl	8002af4 <NMEA_init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002eb8:	f7ff f974 	bl	80021a4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002ebc:	f011 fcfd 	bl	80148ba <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002ec0:	bf00      	nop
 8002ec2:	e7fd      	b.n	8002ec0 <main+0x78>
 8002ec4:	2400165b 	.word	0x2400165b
 8002ec8:	24001294 	.word	0x24001294
 8002ecc:	24000ed4 	.word	0x24000ed4
 8002ed0:	24001328 	.word	0x24001328
 8002ed4:	240013bc 	.word	0x240013bc
 8002ed8:	2400116c 	.word	0x2400116c

08002edc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b09c      	sub	sp, #112	@ 0x70
 8002ee0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ee2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ee6:	224c      	movs	r2, #76	@ 0x4c
 8002ee8:	2100      	movs	r1, #0
 8002eea:	4618      	mov	r0, r3
 8002eec:	f014 fe5b 	bl	8017ba6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ef0:	1d3b      	adds	r3, r7, #4
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f014 fe55 	bl	8017ba6 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8002efc:	4b30      	ldr	r3, [pc, #192]	@ (8002fc0 <SystemClock_Config+0xe4>)
 8002efe:	f04f 32ff 	mov.w	r2, #4294967295
 8002f02:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002f06:	2002      	movs	r0, #2
 8002f08:	f007 fb26 	bl	800a558 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	603b      	str	r3, [r7, #0]
 8002f10:	4b2c      	ldr	r3, [pc, #176]	@ (8002fc4 <SystemClock_Config+0xe8>)
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	4a2b      	ldr	r2, [pc, #172]	@ (8002fc4 <SystemClock_Config+0xe8>)
 8002f16:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f1a:	6193      	str	r3, [r2, #24]
 8002f1c:	4b29      	ldr	r3, [pc, #164]	@ (8002fc4 <SystemClock_Config+0xe8>)
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002f24:	603b      	str	r3, [r7, #0]
 8002f26:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002f28:	bf00      	nop
 8002f2a:	4b26      	ldr	r3, [pc, #152]	@ (8002fc4 <SystemClock_Config+0xe8>)
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f36:	d1f8      	bne.n	8002f2a <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f38:	2302      	movs	r3, #2
 8002f3a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8002f40:	2340      	movs	r3, #64	@ 0x40
 8002f42:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f44:	2302      	movs	r3, #2
 8002f46:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002f4c:	2304      	movs	r3, #4
 8002f4e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8002f50:	2323      	movs	r3, #35	@ 0x23
 8002f52:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002f54:	2302      	movs	r3, #2
 8002f56:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002f58:	2302      	movs	r3, #2
 8002f5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002f60:	230c      	movs	r3, #12
 8002f62:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002f64:	2300      	movs	r3, #0
 8002f66:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f70:	4618      	mov	r0, r3
 8002f72:	f007 fb2b 	bl	800a5cc <HAL_RCC_OscConfig>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002f7c:	f000 f8ac 	bl	80030d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f80:	233f      	movs	r3, #63	@ 0x3f
 8002f82:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f84:	2303      	movs	r3, #3
 8002f86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002f90:	2340      	movs	r3, #64	@ 0x40
 8002f92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002f94:	2340      	movs	r3, #64	@ 0x40
 8002f96:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002f98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f9c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002f9e:	2340      	movs	r3, #64	@ 0x40
 8002fa0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8002fa2:	1d3b      	adds	r3, r7, #4
 8002fa4:	2106      	movs	r1, #6
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f007 ff42 	bl	800ae30 <HAL_RCC_ClockConfig>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8002fb2:	f000 f891 	bl	80030d8 <Error_Handler>
  }
}
 8002fb6:	bf00      	nop
 8002fb8:	3770      	adds	r7, #112	@ 0x70
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	58024400 	.word	0x58024400
 8002fc4:	58024800 	.word	0x58024800

08002fc8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == USART1){
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a18      	ldr	r2, [pc, #96]	@ (8003038 <HAL_UART_RxCpltCallback+0x70>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d10a      	bne.n	8002ff0 <HAL_UART_RxCpltCallback+0x28>
		SBUS_Receive(SBUS_RxBuffer);
 8002fda:	4b18      	ldr	r3, [pc, #96]	@ (800303c <HAL_UART_RxCpltCallback+0x74>)
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f002 fe8a 	bl	8005cf8 <SBUS_Receive>
		HAL_UART_Receive_DMA(&huart1, &SBUS_RxBuffer, 1);
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	4915      	ldr	r1, [pc, #84]	@ (800303c <HAL_UART_RxCpltCallback+0x74>)
 8002fe8:	4815      	ldr	r0, [pc, #84]	@ (8003040 <HAL_UART_RxCpltCallback+0x78>)
 8002fea:	f00c fcfb 	bl	800f9e4 <HAL_UART_Receive_DMA>
    }
    else if(huart -> Instance == USART6){
    	LR03_Receive(LR03_RxByte);
    	HAL_UART_Receive_IT(&huart6, &LR03_RxByte,1);
    }
}
 8002fee:	e01e      	b.n	800302e <HAL_UART_RxCpltCallback+0x66>
    else if (huart -> Instance == USART3){
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a13      	ldr	r2, [pc, #76]	@ (8003044 <HAL_UART_RxCpltCallback+0x7c>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d10a      	bne.n	8003010 <HAL_UART_RxCpltCallback+0x48>
        BNO_Receive(BNO_BufferByte);
 8002ffa:	4b13      	ldr	r3, [pc, #76]	@ (8003048 <HAL_UART_RxCpltCallback+0x80>)
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f002 fbf2 	bl	80057e8 <BNO_Receive>
        HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 8003004:	2201      	movs	r2, #1
 8003006:	4910      	ldr	r1, [pc, #64]	@ (8003048 <HAL_UART_RxCpltCallback+0x80>)
 8003008:	4810      	ldr	r0, [pc, #64]	@ (800304c <HAL_UART_RxCpltCallback+0x84>)
 800300a:	f00c fceb 	bl	800f9e4 <HAL_UART_Receive_DMA>
}
 800300e:	e00e      	b.n	800302e <HAL_UART_RxCpltCallback+0x66>
    else if(huart -> Instance == USART6){
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a0e      	ldr	r2, [pc, #56]	@ (8003050 <HAL_UART_RxCpltCallback+0x88>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d109      	bne.n	800302e <HAL_UART_RxCpltCallback+0x66>
    	LR03_Receive(LR03_RxByte);
 800301a:	4b0e      	ldr	r3, [pc, #56]	@ (8003054 <HAL_UART_RxCpltCallback+0x8c>)
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f002 fdc4 	bl	8005bac <LR03_Receive>
    	HAL_UART_Receive_IT(&huart6, &LR03_RxByte,1);
 8003024:	2201      	movs	r2, #1
 8003026:	490b      	ldr	r1, [pc, #44]	@ (8003054 <HAL_UART_RxCpltCallback+0x8c>)
 8003028:	480b      	ldr	r0, [pc, #44]	@ (8003058 <HAL_UART_RxCpltCallback+0x90>)
 800302a:	f00c fc8f 	bl	800f94c <HAL_UART_Receive_IT>
}
 800302e:	bf00      	nop
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	40011000 	.word	0x40011000
 800303c:	240017e5 	.word	0x240017e5
 8003040:	24001200 	.word	0x24001200
 8003044:	40004800 	.word	0x40004800
 8003048:	2400165b 	.word	0x2400165b
 800304c:	24001294 	.word	0x24001294
 8003050:	40011400 	.word	0x40011400
 8003054:	24000ed4 	.word	0x24000ed4
 8003058:	24001328 	.word	0x24001328

0800305c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8003062:	463b      	mov	r3, r7
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	605a      	str	r2, [r3, #4]
 800306a:	609a      	str	r2, [r3, #8]
 800306c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800306e:	f003 fcaf 	bl	80069d0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003072:	2301      	movs	r3, #1
 8003074:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8003076:	2300      	movs	r3, #0
 8003078:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800307a:	2300      	movs	r3, #0
 800307c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800307e:	231f      	movs	r3, #31
 8003080:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8003082:	2387      	movs	r3, #135	@ 0x87
 8003084:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8003086:	2300      	movs	r3, #0
 8003088:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800308a:	2300      	movs	r3, #0
 800308c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800308e:	2301      	movs	r3, #1
 8003090:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8003092:	2301      	movs	r3, #1
 8003094:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8003096:	2300      	movs	r3, #0
 8003098:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800309a:	2300      	movs	r3, #0
 800309c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800309e:	463b      	mov	r3, r7
 80030a0:	4618      	mov	r0, r3
 80030a2:	f003 fccd 	bl	8006a40 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80030a6:	2004      	movs	r0, #4
 80030a8:	f003 fcaa 	bl	8006a00 <HAL_MPU_Enable>

}
 80030ac:	bf00      	nop
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a04      	ldr	r2, [pc, #16]	@ (80030d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d101      	bne.n	80030ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80030c6:	f003 fb5f 	bl	8006788 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80030ca:	bf00      	nop
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40014800 	.word	0x40014800

080030d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030dc:	b672      	cpsid	i
}
 80030de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030e0:	bf00      	nop
 80030e2:	e7fd      	b.n	80030e0 <Error_Handler+0x8>

080030e4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80030e8:	4b27      	ldr	r3, [pc, #156]	@ (8003188 <MX_SPI1_Init+0xa4>)
 80030ea:	4a28      	ldr	r2, [pc, #160]	@ (800318c <MX_SPI1_Init+0xa8>)
 80030ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80030ee:	4b26      	ldr	r3, [pc, #152]	@ (8003188 <MX_SPI1_Init+0xa4>)
 80030f0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80030f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80030f6:	4b24      	ldr	r3, [pc, #144]	@ (8003188 <MX_SPI1_Init+0xa4>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80030fc:	4b22      	ldr	r3, [pc, #136]	@ (8003188 <MX_SPI1_Init+0xa4>)
 80030fe:	2207      	movs	r2, #7
 8003100:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003102:	4b21      	ldr	r3, [pc, #132]	@ (8003188 <MX_SPI1_Init+0xa4>)
 8003104:	2200      	movs	r2, #0
 8003106:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003108:	4b1f      	ldr	r3, [pc, #124]	@ (8003188 <MX_SPI1_Init+0xa4>)
 800310a:	2200      	movs	r2, #0
 800310c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800310e:	4b1e      	ldr	r3, [pc, #120]	@ (8003188 <MX_SPI1_Init+0xa4>)
 8003110:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003114:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003116:	4b1c      	ldr	r3, [pc, #112]	@ (8003188 <MX_SPI1_Init+0xa4>)
 8003118:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 800311c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800311e:	4b1a      	ldr	r3, [pc, #104]	@ (8003188 <MX_SPI1_Init+0xa4>)
 8003120:	2200      	movs	r2, #0
 8003122:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003124:	4b18      	ldr	r3, [pc, #96]	@ (8003188 <MX_SPI1_Init+0xa4>)
 8003126:	2200      	movs	r2, #0
 8003128:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800312a:	4b17      	ldr	r3, [pc, #92]	@ (8003188 <MX_SPI1_Init+0xa4>)
 800312c:	2200      	movs	r2, #0
 800312e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8003130:	4b15      	ldr	r3, [pc, #84]	@ (8003188 <MX_SPI1_Init+0xa4>)
 8003132:	2200      	movs	r2, #0
 8003134:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003136:	4b14      	ldr	r3, [pc, #80]	@ (8003188 <MX_SPI1_Init+0xa4>)
 8003138:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800313c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800313e:	4b12      	ldr	r3, [pc, #72]	@ (8003188 <MX_SPI1_Init+0xa4>)
 8003140:	2200      	movs	r2, #0
 8003142:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003144:	4b10      	ldr	r3, [pc, #64]	@ (8003188 <MX_SPI1_Init+0xa4>)
 8003146:	2200      	movs	r2, #0
 8003148:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800314a:	4b0f      	ldr	r3, [pc, #60]	@ (8003188 <MX_SPI1_Init+0xa4>)
 800314c:	2200      	movs	r2, #0
 800314e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003150:	4b0d      	ldr	r3, [pc, #52]	@ (8003188 <MX_SPI1_Init+0xa4>)
 8003152:	2200      	movs	r2, #0
 8003154:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003156:	4b0c      	ldr	r3, [pc, #48]	@ (8003188 <MX_SPI1_Init+0xa4>)
 8003158:	2200      	movs	r2, #0
 800315a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800315c:	4b0a      	ldr	r3, [pc, #40]	@ (8003188 <MX_SPI1_Init+0xa4>)
 800315e:	2200      	movs	r2, #0
 8003160:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003162:	4b09      	ldr	r3, [pc, #36]	@ (8003188 <MX_SPI1_Init+0xa4>)
 8003164:	2200      	movs	r2, #0
 8003166:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003168:	4b07      	ldr	r3, [pc, #28]	@ (8003188 <MX_SPI1_Init+0xa4>)
 800316a:	2200      	movs	r2, #0
 800316c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800316e:	4b06      	ldr	r3, [pc, #24]	@ (8003188 <MX_SPI1_Init+0xa4>)
 8003170:	2200      	movs	r2, #0
 8003172:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003174:	4804      	ldr	r0, [pc, #16]	@ (8003188 <MX_SPI1_Init+0xa4>)
 8003176:	f00a f809 	bl	800d18c <HAL_SPI_Init>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8003180:	f7ff ffaa 	bl	80030d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003184:	bf00      	nop
 8003186:	bd80      	pop	{r7, pc}
 8003188:	24000edc 	.word	0x24000edc
 800318c:	40013000 	.word	0x40013000

08003190 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003194:	4b27      	ldr	r3, [pc, #156]	@ (8003234 <MX_SPI2_Init+0xa4>)
 8003196:	4a28      	ldr	r2, [pc, #160]	@ (8003238 <MX_SPI2_Init+0xa8>)
 8003198:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800319a:	4b26      	ldr	r3, [pc, #152]	@ (8003234 <MX_SPI2_Init+0xa4>)
 800319c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80031a0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80031a2:	4b24      	ldr	r3, [pc, #144]	@ (8003234 <MX_SPI2_Init+0xa4>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80031a8:	4b22      	ldr	r3, [pc, #136]	@ (8003234 <MX_SPI2_Init+0xa4>)
 80031aa:	2207      	movs	r2, #7
 80031ac:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80031ae:	4b21      	ldr	r3, [pc, #132]	@ (8003234 <MX_SPI2_Init+0xa4>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80031b4:	4b1f      	ldr	r3, [pc, #124]	@ (8003234 <MX_SPI2_Init+0xa4>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80031ba:	4b1e      	ldr	r3, [pc, #120]	@ (8003234 <MX_SPI2_Init+0xa4>)
 80031bc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80031c0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80031c2:	4b1c      	ldr	r3, [pc, #112]	@ (8003234 <MX_SPI2_Init+0xa4>)
 80031c4:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 80031c8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80031ca:	4b1a      	ldr	r3, [pc, #104]	@ (8003234 <MX_SPI2_Init+0xa4>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80031d0:	4b18      	ldr	r3, [pc, #96]	@ (8003234 <MX_SPI2_Init+0xa4>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031d6:	4b17      	ldr	r3, [pc, #92]	@ (8003234 <MX_SPI2_Init+0xa4>)
 80031d8:	2200      	movs	r2, #0
 80031da:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80031dc:	4b15      	ldr	r3, [pc, #84]	@ (8003234 <MX_SPI2_Init+0xa4>)
 80031de:	2200      	movs	r2, #0
 80031e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80031e2:	4b14      	ldr	r3, [pc, #80]	@ (8003234 <MX_SPI2_Init+0xa4>)
 80031e4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80031e8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80031ea:	4b12      	ldr	r3, [pc, #72]	@ (8003234 <MX_SPI2_Init+0xa4>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80031f0:	4b10      	ldr	r3, [pc, #64]	@ (8003234 <MX_SPI2_Init+0xa4>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80031f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003234 <MX_SPI2_Init+0xa4>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80031fc:	4b0d      	ldr	r3, [pc, #52]	@ (8003234 <MX_SPI2_Init+0xa4>)
 80031fe:	2200      	movs	r2, #0
 8003200:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003202:	4b0c      	ldr	r3, [pc, #48]	@ (8003234 <MX_SPI2_Init+0xa4>)
 8003204:	2200      	movs	r2, #0
 8003206:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003208:	4b0a      	ldr	r3, [pc, #40]	@ (8003234 <MX_SPI2_Init+0xa4>)
 800320a:	2200      	movs	r2, #0
 800320c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800320e:	4b09      	ldr	r3, [pc, #36]	@ (8003234 <MX_SPI2_Init+0xa4>)
 8003210:	2200      	movs	r2, #0
 8003212:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003214:	4b07      	ldr	r3, [pc, #28]	@ (8003234 <MX_SPI2_Init+0xa4>)
 8003216:	2200      	movs	r2, #0
 8003218:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800321a:	4b06      	ldr	r3, [pc, #24]	@ (8003234 <MX_SPI2_Init+0xa4>)
 800321c:	2200      	movs	r2, #0
 800321e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003220:	4804      	ldr	r0, [pc, #16]	@ (8003234 <MX_SPI2_Init+0xa4>)
 8003222:	f009 ffb3 	bl	800d18c <HAL_SPI_Init>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 800322c:	f7ff ff54 	bl	80030d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003230:	bf00      	nop
 8003232:	bd80      	pop	{r7, pc}
 8003234:	24000f64 	.word	0x24000f64
 8003238:	40003800 	.word	0x40003800

0800323c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b0bc      	sub	sp, #240	@ 0xf0
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003244:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	605a      	str	r2, [r3, #4]
 800324e:	609a      	str	r2, [r3, #8]
 8003250:	60da      	str	r2, [r3, #12]
 8003252:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003254:	f107 0318 	add.w	r3, r7, #24
 8003258:	22c0      	movs	r2, #192	@ 0xc0
 800325a:	2100      	movs	r1, #0
 800325c:	4618      	mov	r0, r3
 800325e:	f014 fca2 	bl	8017ba6 <memset>
  if(spiHandle->Instance==SPI1)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a4c      	ldr	r2, [pc, #304]	@ (8003398 <HAL_SPI_MspInit+0x15c>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d145      	bne.n	80032f8 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800326c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003270:	f04f 0300 	mov.w	r3, #0
 8003274:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003278:	2300      	movs	r3, #0
 800327a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800327c:	f107 0318 	add.w	r3, r7, #24
 8003280:	4618      	mov	r0, r3
 8003282:	f008 f9a3 	bl	800b5cc <HAL_RCCEx_PeriphCLKConfig>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800328c:	f7ff ff24 	bl	80030d8 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003290:	4b42      	ldr	r3, [pc, #264]	@ (800339c <HAL_SPI_MspInit+0x160>)
 8003292:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8003296:	4a41      	ldr	r2, [pc, #260]	@ (800339c <HAL_SPI_MspInit+0x160>)
 8003298:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800329c:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80032a0:	4b3e      	ldr	r3, [pc, #248]	@ (800339c <HAL_SPI_MspInit+0x160>)
 80032a2:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80032a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032aa:	617b      	str	r3, [r7, #20]
 80032ac:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ae:	4b3b      	ldr	r3, [pc, #236]	@ (800339c <HAL_SPI_MspInit+0x160>)
 80032b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80032b4:	4a39      	ldr	r2, [pc, #228]	@ (800339c <HAL_SPI_MspInit+0x160>)
 80032b6:	f043 0301 	orr.w	r3, r3, #1
 80032ba:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80032be:	4b37      	ldr	r3, [pc, #220]	@ (800339c <HAL_SPI_MspInit+0x160>)
 80032c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	613b      	str	r3, [r7, #16]
 80032ca:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 80032cc:	23e0      	movs	r3, #224	@ 0xe0
 80032ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d2:	2302      	movs	r3, #2
 80032d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d8:	2300      	movs	r3, #0
 80032da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032de:	2300      	movs	r3, #0
 80032e0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80032e4:	2305      	movs	r3, #5
 80032e6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ea:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80032ee:	4619      	mov	r1, r3
 80032f0:	482b      	ldr	r0, [pc, #172]	@ (80033a0 <HAL_SPI_MspInit+0x164>)
 80032f2:	f006 fe33 	bl	8009f5c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80032f6:	e04a      	b.n	800338e <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI2)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a29      	ldr	r2, [pc, #164]	@ (80033a4 <HAL_SPI_MspInit+0x168>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d145      	bne.n	800338e <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8003302:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003306:	f04f 0300 	mov.w	r3, #0
 800330a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800330e:	2300      	movs	r3, #0
 8003310:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003312:	f107 0318 	add.w	r3, r7, #24
 8003316:	4618      	mov	r0, r3
 8003318:	f008 f958 	bl	800b5cc <HAL_RCCEx_PeriphCLKConfig>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8003322:	f7ff fed9 	bl	80030d8 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003326:	4b1d      	ldr	r3, [pc, #116]	@ (800339c <HAL_SPI_MspInit+0x160>)
 8003328:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800332c:	4a1b      	ldr	r2, [pc, #108]	@ (800339c <HAL_SPI_MspInit+0x160>)
 800332e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003332:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003336:	4b19      	ldr	r3, [pc, #100]	@ (800339c <HAL_SPI_MspInit+0x160>)
 8003338:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800333c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003340:	60fb      	str	r3, [r7, #12]
 8003342:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003344:	4b15      	ldr	r3, [pc, #84]	@ (800339c <HAL_SPI_MspInit+0x160>)
 8003346:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800334a:	4a14      	ldr	r2, [pc, #80]	@ (800339c <HAL_SPI_MspInit+0x160>)
 800334c:	f043 0302 	orr.w	r3, r3, #2
 8003350:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003354:	4b11      	ldr	r3, [pc, #68]	@ (800339c <HAL_SPI_MspInit+0x160>)
 8003356:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	60bb      	str	r3, [r7, #8]
 8003360:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BMP_SCK_Pin|BMP_MISO_Pin|BMP_MOSI_Pin;
 8003362:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8003366:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800336a:	2302      	movs	r3, #2
 800336c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003370:	2300      	movs	r3, #0
 8003372:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003376:	2300      	movs	r3, #0
 8003378:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800337c:	2305      	movs	r3, #5
 800337e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003382:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003386:	4619      	mov	r1, r3
 8003388:	4807      	ldr	r0, [pc, #28]	@ (80033a8 <HAL_SPI_MspInit+0x16c>)
 800338a:	f006 fde7 	bl	8009f5c <HAL_GPIO_Init>
}
 800338e:	bf00      	nop
 8003390:	37f0      	adds	r7, #240	@ 0xf0
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40013000 	.word	0x40013000
 800339c:	58024400 	.word	0x58024400
 80033a0:	58020000 	.word	0x58020000
 80033a4:	40003800 	.word	0x40003800
 80033a8:	58020400 	.word	0x58020400

080033ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033b2:	4b0c      	ldr	r3, [pc, #48]	@ (80033e4 <HAL_MspInit+0x38>)
 80033b4:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80033b8:	4a0a      	ldr	r2, [pc, #40]	@ (80033e4 <HAL_MspInit+0x38>)
 80033ba:	f043 0302 	orr.w	r3, r3, #2
 80033be:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80033c2:	4b08      	ldr	r3, [pc, #32]	@ (80033e4 <HAL_MspInit+0x38>)
 80033c4:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	607b      	str	r3, [r7, #4]
 80033ce:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80033d0:	2200      	movs	r2, #0
 80033d2:	210f      	movs	r1, #15
 80033d4:	f06f 0001 	mvn.w	r0, #1
 80033d8:	f003 fad2 	bl	8006980 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033dc:	bf00      	nop
 80033de:	3708      	adds	r7, #8
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	58024400 	.word	0x58024400

080033e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b08e      	sub	sp, #56	@ 0x38
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b0f      	cmp	r3, #15
 80033f4:	d844      	bhi.n	8003480 <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0);
 80033f6:	2200      	movs	r2, #0
 80033f8:	6879      	ldr	r1, [r7, #4]
 80033fa:	2076      	movs	r0, #118	@ 0x76
 80033fc:	f003 fac0 	bl	8006980 <HAL_NVIC_SetPriority>

     /* Enable the TIM17 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8003400:	2076      	movs	r0, #118	@ 0x76
 8003402:	f003 fad7 	bl	80069b4 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8003406:	4a24      	ldr	r2, [pc, #144]	@ (8003498 <HAL_InitTick+0xb0>)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 800340c:	4b23      	ldr	r3, [pc, #140]	@ (800349c <HAL_InitTick+0xb4>)
 800340e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8003412:	4a22      	ldr	r2, [pc, #136]	@ (800349c <HAL_InitTick+0xb4>)
 8003414:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003418:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 800341c:	4b1f      	ldr	r3, [pc, #124]	@ (800349c <HAL_InitTick+0xb4>)
 800341e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8003422:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003426:	60bb      	str	r3, [r7, #8]
 8003428:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800342a:	f107 020c 	add.w	r2, r7, #12
 800342e:	f107 0310 	add.w	r3, r7, #16
 8003432:	4611      	mov	r1, r2
 8003434:	4618      	mov	r0, r3
 8003436:	f008 f887 	bl	800b548 <HAL_RCC_GetClockConfig>
  /* Compute TIM17 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800343a:	f008 f86f 	bl	800b51c <HAL_RCC_GetPCLK2Freq>
 800343e:	4603      	mov	r3, r0
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003446:	4a16      	ldr	r2, [pc, #88]	@ (80034a0 <HAL_InitTick+0xb8>)
 8003448:	fba2 2303 	umull	r2, r3, r2, r3
 800344c:	0c9b      	lsrs	r3, r3, #18
 800344e:	3b01      	subs	r3, #1
 8003450:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8003452:	4b14      	ldr	r3, [pc, #80]	@ (80034a4 <HAL_InitTick+0xbc>)
 8003454:	4a14      	ldr	r2, [pc, #80]	@ (80034a8 <HAL_InitTick+0xc0>)
 8003456:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8003458:	4b12      	ldr	r3, [pc, #72]	@ (80034a4 <HAL_InitTick+0xbc>)
 800345a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800345e:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8003460:	4a10      	ldr	r2, [pc, #64]	@ (80034a4 <HAL_InitTick+0xbc>)
 8003462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003464:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8003466:	4b0f      	ldr	r3, [pc, #60]	@ (80034a4 <HAL_InitTick+0xbc>)
 8003468:	2200      	movs	r2, #0
 800346a:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800346c:	4b0d      	ldr	r3, [pc, #52]	@ (80034a4 <HAL_InitTick+0xbc>)
 800346e:	2200      	movs	r2, #0
 8003470:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8003472:	480c      	ldr	r0, [pc, #48]	@ (80034a4 <HAL_InitTick+0xbc>)
 8003474:	f00b f831 	bl	800e4da <HAL_TIM_Base_Init>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d107      	bne.n	800348e <HAL_InitTick+0xa6>
 800347e:	e001      	b.n	8003484 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e005      	b.n	8003490 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8003484:	4807      	ldr	r0, [pc, #28]	@ (80034a4 <HAL_InitTick+0xbc>)
 8003486:	f00b f87f 	bl	800e588 <HAL_TIM_Base_Start_IT>
 800348a:	4603      	mov	r3, r0
 800348c:	e000      	b.n	8003490 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
}
 8003490:	4618      	mov	r0, r3
 8003492:	3738      	adds	r7, #56	@ 0x38
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	240000a4 	.word	0x240000a4
 800349c:	58024400 	.word	0x58024400
 80034a0:	431bde83 	.word	0x431bde83
 80034a4:	24000fec 	.word	0x24000fec
 80034a8:	40014800 	.word	0x40014800

080034ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80034b0:	bf00      	nop
 80034b2:	e7fd      	b.n	80034b0 <NMI_Handler+0x4>

080034b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034b8:	bf00      	nop
 80034ba:	e7fd      	b.n	80034b8 <HardFault_Handler+0x4>

080034bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034c0:	bf00      	nop
 80034c2:	e7fd      	b.n	80034c0 <MemManage_Handler+0x4>

080034c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034c8:	bf00      	nop
 80034ca:	e7fd      	b.n	80034c8 <BusFault_Handler+0x4>

080034cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034d0:	bf00      	nop
 80034d2:	e7fd      	b.n	80034d0 <UsageFault_Handler+0x4>

080034d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034d8:	bf00      	nop
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
	...

080034e4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80034e8:	4802      	ldr	r0, [pc, #8]	@ (80034f4 <DMA1_Stream0_IRQHandler+0x10>)
 80034ea:	f004 fe45 	bl	8008178 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80034ee:	bf00      	nop
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	24001434 	.word	0x24001434

080034f8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80034fc:	4802      	ldr	r0, [pc, #8]	@ (8003508 <DMA1_Stream1_IRQHandler+0x10>)
 80034fe:	f004 fe3b 	bl	8008178 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003502:	bf00      	nop
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	240014ac 	.word	0x240014ac

0800350c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003510:	4802      	ldr	r0, [pc, #8]	@ (800351c <DMA1_Stream2_IRQHandler+0x10>)
 8003512:	f004 fe31 	bl	8008178 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003516:	bf00      	nop
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	240013bc 	.word	0x240013bc

08003520 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003524:	4802      	ldr	r0, [pc, #8]	@ (8003530 <USART1_IRQHandler+0x10>)
 8003526:	f00c fc7b 	bl	800fe20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800352a:	bf00      	nop
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	24001200 	.word	0x24001200

08003534 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003538:	4802      	ldr	r0, [pc, #8]	@ (8003544 <USART3_IRQHandler+0x10>)
 800353a:	f00c fc71 	bl	800fe20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800353e:	bf00      	nop
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	24001294 	.word	0x24001294

08003548 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	user_UART_IDLE_IT_handler();
 800354c:	f7ff fc5a 	bl	8002e04 <user_UART_IDLE_IT_handler>
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003550:	4802      	ldr	r0, [pc, #8]	@ (800355c <UART4_IRQHandler+0x14>)
 8003552:	f00c fc65 	bl	800fe20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003556:	bf00      	nop
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	2400116c 	.word	0x2400116c

08003560 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003564:	4802      	ldr	r0, [pc, #8]	@ (8003570 <USART6_IRQHandler+0x10>)
 8003566:	f00c fc5b 	bl	800fe20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800356a:	bf00      	nop
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	24001328 	.word	0x24001328

08003574 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003578:	4802      	ldr	r0, [pc, #8]	@ (8003584 <TIM17_IRQHandler+0x10>)
 800357a:	f00b f9e3 	bl	800e944 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 800357e:	bf00      	nop
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	24000fec 	.word	0x24000fec

08003588 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  return 1;
 800358c:	2301      	movs	r3, #1
}
 800358e:	4618      	mov	r0, r3
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <_kill>:

int _kill(int pid, int sig)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80035a2:	f014 fb6d 	bl	8017c80 <__errno>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2216      	movs	r2, #22
 80035aa:	601a      	str	r2, [r3, #0]
  return -1;
 80035ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <_exit>:

void _exit (int status)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80035c0:	f04f 31ff 	mov.w	r1, #4294967295
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7ff ffe7 	bl	8003598 <_kill>
  while (1) {}    /* Make sure we hang here */
 80035ca:	bf00      	nop
 80035cc:	e7fd      	b.n	80035ca <_exit+0x12>

080035ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b086      	sub	sp, #24
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	60f8      	str	r0, [r7, #12]
 80035d6:	60b9      	str	r1, [r7, #8]
 80035d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035da:	2300      	movs	r3, #0
 80035dc:	617b      	str	r3, [r7, #20]
 80035de:	e00a      	b.n	80035f6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80035e0:	f3af 8000 	nop.w
 80035e4:	4601      	mov	r1, r0
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	60ba      	str	r2, [r7, #8]
 80035ec:	b2ca      	uxtb	r2, r1
 80035ee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	3301      	adds	r3, #1
 80035f4:	617b      	str	r3, [r7, #20]
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	dbf0      	blt.n	80035e0 <_read+0x12>
  }

  return len;
 80035fe:	687b      	ldr	r3, [r7, #4]
}
 8003600:	4618      	mov	r0, r3
 8003602:	3718      	adds	r7, #24
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003614:	2300      	movs	r3, #0
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	e009      	b.n	800362e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	60ba      	str	r2, [r7, #8]
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	3301      	adds	r3, #1
 800362c:	617b      	str	r3, [r7, #20]
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	429a      	cmp	r2, r3
 8003634:	dbf1      	blt.n	800361a <_write+0x12>
  }
  return len;
 8003636:	687b      	ldr	r3, [r7, #4]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <_close>:

int _close(int file)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003648:	f04f 33ff 	mov.w	r3, #4294967295
}
 800364c:	4618      	mov	r0, r3
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003668:	605a      	str	r2, [r3, #4]
  return 0;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <_isatty>:

int _isatty(int file)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003680:	2301      	movs	r3, #1
}
 8003682:	4618      	mov	r0, r3
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800368e:	b480      	push	{r7}
 8003690:	b085      	sub	sp, #20
 8003692:	af00      	add	r7, sp, #0
 8003694:	60f8      	str	r0, [r7, #12]
 8003696:	60b9      	str	r1, [r7, #8]
 8003698:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3714      	adds	r7, #20
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036b0:	4a14      	ldr	r2, [pc, #80]	@ (8003704 <_sbrk+0x5c>)
 80036b2:	4b15      	ldr	r3, [pc, #84]	@ (8003708 <_sbrk+0x60>)
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036bc:	4b13      	ldr	r3, [pc, #76]	@ (800370c <_sbrk+0x64>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d102      	bne.n	80036ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036c4:	4b11      	ldr	r3, [pc, #68]	@ (800370c <_sbrk+0x64>)
 80036c6:	4a12      	ldr	r2, [pc, #72]	@ (8003710 <_sbrk+0x68>)
 80036c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036ca:	4b10      	ldr	r3, [pc, #64]	@ (800370c <_sbrk+0x64>)
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4413      	add	r3, r2
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d207      	bcs.n	80036e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036d8:	f014 fad2 	bl	8017c80 <__errno>
 80036dc:	4603      	mov	r3, r0
 80036de:	220c      	movs	r2, #12
 80036e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036e2:	f04f 33ff 	mov.w	r3, #4294967295
 80036e6:	e009      	b.n	80036fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036e8:	4b08      	ldr	r3, [pc, #32]	@ (800370c <_sbrk+0x64>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036ee:	4b07      	ldr	r3, [pc, #28]	@ (800370c <_sbrk+0x64>)
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4413      	add	r3, r2
 80036f6:	4a05      	ldr	r2, [pc, #20]	@ (800370c <_sbrk+0x64>)
 80036f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036fa:	68fb      	ldr	r3, [r7, #12]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	24100000 	.word	0x24100000
 8003708:	00000400 	.word	0x00000400
 800370c:	24001038 	.word	0x24001038
 8003710:	24006958 	.word	0x24006958

08003714 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003718:	4b32      	ldr	r3, [pc, #200]	@ (80037e4 <SystemInit+0xd0>)
 800371a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800371e:	4a31      	ldr	r2, [pc, #196]	@ (80037e4 <SystemInit+0xd0>)
 8003720:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003724:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003728:	4b2f      	ldr	r3, [pc, #188]	@ (80037e8 <SystemInit+0xd4>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 030f 	and.w	r3, r3, #15
 8003730:	2b02      	cmp	r3, #2
 8003732:	d807      	bhi.n	8003744 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003734:	4b2c      	ldr	r3, [pc, #176]	@ (80037e8 <SystemInit+0xd4>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f023 030f 	bic.w	r3, r3, #15
 800373c:	4a2a      	ldr	r2, [pc, #168]	@ (80037e8 <SystemInit+0xd4>)
 800373e:	f043 0303 	orr.w	r3, r3, #3
 8003742:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003744:	4b29      	ldr	r3, [pc, #164]	@ (80037ec <SystemInit+0xd8>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a28      	ldr	r2, [pc, #160]	@ (80037ec <SystemInit+0xd8>)
 800374a:	f043 0301 	orr.w	r3, r3, #1
 800374e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003750:	4b26      	ldr	r3, [pc, #152]	@ (80037ec <SystemInit+0xd8>)
 8003752:	2200      	movs	r2, #0
 8003754:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003756:	4b25      	ldr	r3, [pc, #148]	@ (80037ec <SystemInit+0xd8>)
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	4924      	ldr	r1, [pc, #144]	@ (80037ec <SystemInit+0xd8>)
 800375c:	4b24      	ldr	r3, [pc, #144]	@ (80037f0 <SystemInit+0xdc>)
 800375e:	4013      	ands	r3, r2
 8003760:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003762:	4b21      	ldr	r3, [pc, #132]	@ (80037e8 <SystemInit+0xd4>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 030c 	and.w	r3, r3, #12
 800376a:	2b00      	cmp	r3, #0
 800376c:	d007      	beq.n	800377e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800376e:	4b1e      	ldr	r3, [pc, #120]	@ (80037e8 <SystemInit+0xd4>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f023 030f 	bic.w	r3, r3, #15
 8003776:	4a1c      	ldr	r2, [pc, #112]	@ (80037e8 <SystemInit+0xd4>)
 8003778:	f043 0303 	orr.w	r3, r3, #3
 800377c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800377e:	4b1b      	ldr	r3, [pc, #108]	@ (80037ec <SystemInit+0xd8>)
 8003780:	2200      	movs	r2, #0
 8003782:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8003784:	4b19      	ldr	r3, [pc, #100]	@ (80037ec <SystemInit+0xd8>)
 8003786:	2200      	movs	r2, #0
 8003788:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800378a:	4b18      	ldr	r3, [pc, #96]	@ (80037ec <SystemInit+0xd8>)
 800378c:	2200      	movs	r2, #0
 800378e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003790:	4b16      	ldr	r3, [pc, #88]	@ (80037ec <SystemInit+0xd8>)
 8003792:	4a18      	ldr	r2, [pc, #96]	@ (80037f4 <SystemInit+0xe0>)
 8003794:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003796:	4b15      	ldr	r3, [pc, #84]	@ (80037ec <SystemInit+0xd8>)
 8003798:	4a17      	ldr	r2, [pc, #92]	@ (80037f8 <SystemInit+0xe4>)
 800379a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800379c:	4b13      	ldr	r3, [pc, #76]	@ (80037ec <SystemInit+0xd8>)
 800379e:	4a17      	ldr	r2, [pc, #92]	@ (80037fc <SystemInit+0xe8>)
 80037a0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80037a2:	4b12      	ldr	r3, [pc, #72]	@ (80037ec <SystemInit+0xd8>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80037a8:	4b10      	ldr	r3, [pc, #64]	@ (80037ec <SystemInit+0xd8>)
 80037aa:	4a14      	ldr	r2, [pc, #80]	@ (80037fc <SystemInit+0xe8>)
 80037ac:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80037ae:	4b0f      	ldr	r3, [pc, #60]	@ (80037ec <SystemInit+0xd8>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80037b4:	4b0d      	ldr	r3, [pc, #52]	@ (80037ec <SystemInit+0xd8>)
 80037b6:	4a11      	ldr	r2, [pc, #68]	@ (80037fc <SystemInit+0xe8>)
 80037b8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80037ba:	4b0c      	ldr	r3, [pc, #48]	@ (80037ec <SystemInit+0xd8>)
 80037bc:	2200      	movs	r2, #0
 80037be:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80037c0:	4b0a      	ldr	r3, [pc, #40]	@ (80037ec <SystemInit+0xd8>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a09      	ldr	r2, [pc, #36]	@ (80037ec <SystemInit+0xd8>)
 80037c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80037cc:	4b07      	ldr	r3, [pc, #28]	@ (80037ec <SystemInit+0xd8>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80037d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003800 <SystemInit+0xec>)
 80037d4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80037d8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80037da:	bf00      	nop
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr
 80037e4:	e000ed00 	.word	0xe000ed00
 80037e8:	52002000 	.word	0x52002000
 80037ec:	58024400 	.word	0x58024400
 80037f0:	eaf6ed7f 	.word	0xeaf6ed7f
 80037f4:	02020200 	.word	0x02020200
 80037f8:	01ff0000 	.word	0x01ff0000
 80037fc:	01010280 	.word	0x01010280
 8003800:	52004000 	.word	0x52004000

08003804 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b08a      	sub	sp, #40	@ 0x28
 8003808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800380a:	f107 031c 	add.w	r3, r7, #28
 800380e:	2200      	movs	r2, #0
 8003810:	601a      	str	r2, [r3, #0]
 8003812:	605a      	str	r2, [r3, #4]
 8003814:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003816:	463b      	mov	r3, r7
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	605a      	str	r2, [r3, #4]
 800381e:	609a      	str	r2, [r3, #8]
 8003820:	60da      	str	r2, [r3, #12]
 8003822:	611a      	str	r2, [r3, #16]
 8003824:	615a      	str	r2, [r3, #20]
 8003826:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003828:	4b33      	ldr	r3, [pc, #204]	@ (80038f8 <MX_TIM2_Init+0xf4>)
 800382a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800382e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 280-1;
 8003830:	4b31      	ldr	r3, [pc, #196]	@ (80038f8 <MX_TIM2_Init+0xf4>)
 8003832:	f240 1217 	movw	r2, #279	@ 0x117
 8003836:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003838:	4b2f      	ldr	r3, [pc, #188]	@ (80038f8 <MX_TIM2_Init+0xf4>)
 800383a:	2200      	movs	r2, #0
 800383c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7000;
 800383e:	4b2e      	ldr	r3, [pc, #184]	@ (80038f8 <MX_TIM2_Init+0xf4>)
 8003840:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8003844:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003846:	4b2c      	ldr	r3, [pc, #176]	@ (80038f8 <MX_TIM2_Init+0xf4>)
 8003848:	2200      	movs	r2, #0
 800384a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800384c:	4b2a      	ldr	r3, [pc, #168]	@ (80038f8 <MX_TIM2_Init+0xf4>)
 800384e:	2280      	movs	r2, #128	@ 0x80
 8003850:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003852:	4829      	ldr	r0, [pc, #164]	@ (80038f8 <MX_TIM2_Init+0xf4>)
 8003854:	f00a ff10 	bl	800e678 <HAL_TIM_PWM_Init>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 800385e:	f7ff fc3b 	bl	80030d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003862:	2300      	movs	r3, #0
 8003864:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003866:	2300      	movs	r3, #0
 8003868:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800386a:	f107 031c 	add.w	r3, r7, #28
 800386e:	4619      	mov	r1, r3
 8003870:	4821      	ldr	r0, [pc, #132]	@ (80038f8 <MX_TIM2_Init+0xf4>)
 8003872:	f00b fe4d 	bl	800f510 <HAL_TIMEx_MasterConfigSynchronization>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800387c:	f7ff fc2c 	bl	80030d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003880:	2360      	movs	r3, #96	@ 0x60
 8003882:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003884:	2300      	movs	r3, #0
 8003886:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003888:	2300      	movs	r3, #0
 800388a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800388c:	2300      	movs	r3, #0
 800388e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003890:	463b      	mov	r3, r7
 8003892:	2200      	movs	r2, #0
 8003894:	4619      	mov	r1, r3
 8003896:	4818      	ldr	r0, [pc, #96]	@ (80038f8 <MX_TIM2_Init+0xf4>)
 8003898:	f00b f95c 	bl	800eb54 <HAL_TIM_PWM_ConfigChannel>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80038a2:	f7ff fc19 	bl	80030d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80038a6:	463b      	mov	r3, r7
 80038a8:	2204      	movs	r2, #4
 80038aa:	4619      	mov	r1, r3
 80038ac:	4812      	ldr	r0, [pc, #72]	@ (80038f8 <MX_TIM2_Init+0xf4>)
 80038ae:	f00b f951 	bl	800eb54 <HAL_TIM_PWM_ConfigChannel>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 80038b8:	f7ff fc0e 	bl	80030d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80038bc:	463b      	mov	r3, r7
 80038be:	2208      	movs	r2, #8
 80038c0:	4619      	mov	r1, r3
 80038c2:	480d      	ldr	r0, [pc, #52]	@ (80038f8 <MX_TIM2_Init+0xf4>)
 80038c4:	f00b f946 	bl	800eb54 <HAL_TIM_PWM_ConfigChannel>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 80038ce:	f7ff fc03 	bl	80030d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80038d2:	463b      	mov	r3, r7
 80038d4:	220c      	movs	r2, #12
 80038d6:	4619      	mov	r1, r3
 80038d8:	4807      	ldr	r0, [pc, #28]	@ (80038f8 <MX_TIM2_Init+0xf4>)
 80038da:	f00b f93b 	bl	800eb54 <HAL_TIM_PWM_ConfigChannel>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 80038e4:	f7ff fbf8 	bl	80030d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80038e8:	4803      	ldr	r0, [pc, #12]	@ (80038f8 <MX_TIM2_Init+0xf4>)
 80038ea:	f000 f97d 	bl	8003be8 <HAL_TIM_MspPostInit>

}
 80038ee:	bf00      	nop
 80038f0:	3728      	adds	r7, #40	@ 0x28
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	2400103c 	.word	0x2400103c

080038fc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b08a      	sub	sp, #40	@ 0x28
 8003900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003902:	f107 031c 	add.w	r3, r7, #28
 8003906:	2200      	movs	r2, #0
 8003908:	601a      	str	r2, [r3, #0]
 800390a:	605a      	str	r2, [r3, #4]
 800390c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800390e:	463b      	mov	r3, r7
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	605a      	str	r2, [r3, #4]
 8003916:	609a      	str	r2, [r3, #8]
 8003918:	60da      	str	r2, [r3, #12]
 800391a:	611a      	str	r2, [r3, #16]
 800391c:	615a      	str	r2, [r3, #20]
 800391e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003920:	4b27      	ldr	r3, [pc, #156]	@ (80039c0 <MX_TIM3_Init+0xc4>)
 8003922:	4a28      	ldr	r2, [pc, #160]	@ (80039c4 <MX_TIM3_Init+0xc8>)
 8003924:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 280-1;
 8003926:	4b26      	ldr	r3, [pc, #152]	@ (80039c0 <MX_TIM3_Init+0xc4>)
 8003928:	f240 1217 	movw	r2, #279	@ 0x117
 800392c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800392e:	4b24      	ldr	r3, [pc, #144]	@ (80039c0 <MX_TIM3_Init+0xc4>)
 8003930:	2200      	movs	r2, #0
 8003932:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7000;
 8003934:	4b22      	ldr	r3, [pc, #136]	@ (80039c0 <MX_TIM3_Init+0xc4>)
 8003936:	f641 3258 	movw	r2, #7000	@ 0x1b58
 800393a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800393c:	4b20      	ldr	r3, [pc, #128]	@ (80039c0 <MX_TIM3_Init+0xc4>)
 800393e:	2200      	movs	r2, #0
 8003940:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003942:	4b1f      	ldr	r3, [pc, #124]	@ (80039c0 <MX_TIM3_Init+0xc4>)
 8003944:	2280      	movs	r2, #128	@ 0x80
 8003946:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003948:	481d      	ldr	r0, [pc, #116]	@ (80039c0 <MX_TIM3_Init+0xc4>)
 800394a:	f00a fe95 	bl	800e678 <HAL_TIM_PWM_Init>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8003954:	f7ff fbc0 	bl	80030d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003958:	2300      	movs	r3, #0
 800395a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800395c:	2300      	movs	r3, #0
 800395e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003960:	f107 031c 	add.w	r3, r7, #28
 8003964:	4619      	mov	r1, r3
 8003966:	4816      	ldr	r0, [pc, #88]	@ (80039c0 <MX_TIM3_Init+0xc4>)
 8003968:	f00b fdd2 	bl	800f510 <HAL_TIMEx_MasterConfigSynchronization>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8003972:	f7ff fbb1 	bl	80030d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003976:	2360      	movs	r3, #96	@ 0x60
 8003978:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800397a:	2300      	movs	r3, #0
 800397c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800397e:	2300      	movs	r3, #0
 8003980:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003982:	2300      	movs	r3, #0
 8003984:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003986:	463b      	mov	r3, r7
 8003988:	2200      	movs	r2, #0
 800398a:	4619      	mov	r1, r3
 800398c:	480c      	ldr	r0, [pc, #48]	@ (80039c0 <MX_TIM3_Init+0xc4>)
 800398e:	f00b f8e1 	bl	800eb54 <HAL_TIM_PWM_ConfigChannel>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8003998:	f7ff fb9e 	bl	80030d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800399c:	463b      	mov	r3, r7
 800399e:	2204      	movs	r2, #4
 80039a0:	4619      	mov	r1, r3
 80039a2:	4807      	ldr	r0, [pc, #28]	@ (80039c0 <MX_TIM3_Init+0xc4>)
 80039a4:	f00b f8d6 	bl	800eb54 <HAL_TIM_PWM_ConfigChannel>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 80039ae:	f7ff fb93 	bl	80030d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80039b2:	4803      	ldr	r0, [pc, #12]	@ (80039c0 <MX_TIM3_Init+0xc4>)
 80039b4:	f000 f918 	bl	8003be8 <HAL_TIM_MspPostInit>

}
 80039b8:	bf00      	nop
 80039ba:	3728      	adds	r7, #40	@ 0x28
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	24001088 	.word	0x24001088
 80039c4:	40000400 	.word	0x40000400

080039c8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b08a      	sub	sp, #40	@ 0x28
 80039cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039ce:	f107 031c 	add.w	r3, r7, #28
 80039d2:	2200      	movs	r2, #0
 80039d4:	601a      	str	r2, [r3, #0]
 80039d6:	605a      	str	r2, [r3, #4]
 80039d8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80039da:	463b      	mov	r3, r7
 80039dc:	2200      	movs	r2, #0
 80039de:	601a      	str	r2, [r3, #0]
 80039e0:	605a      	str	r2, [r3, #4]
 80039e2:	609a      	str	r2, [r3, #8]
 80039e4:	60da      	str	r2, [r3, #12]
 80039e6:	611a      	str	r2, [r3, #16]
 80039e8:	615a      	str	r2, [r3, #20]
 80039ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80039ec:	4b32      	ldr	r3, [pc, #200]	@ (8003ab8 <MX_TIM4_Init+0xf0>)
 80039ee:	4a33      	ldr	r2, [pc, #204]	@ (8003abc <MX_TIM4_Init+0xf4>)
 80039f0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 280-1;
 80039f2:	4b31      	ldr	r3, [pc, #196]	@ (8003ab8 <MX_TIM4_Init+0xf0>)
 80039f4:	f240 1217 	movw	r2, #279	@ 0x117
 80039f8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039fa:	4b2f      	ldr	r3, [pc, #188]	@ (8003ab8 <MX_TIM4_Init+0xf0>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7000;
 8003a00:	4b2d      	ldr	r3, [pc, #180]	@ (8003ab8 <MX_TIM4_Init+0xf0>)
 8003a02:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8003a06:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a08:	4b2b      	ldr	r3, [pc, #172]	@ (8003ab8 <MX_TIM4_Init+0xf0>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003a0e:	4b2a      	ldr	r3, [pc, #168]	@ (8003ab8 <MX_TIM4_Init+0xf0>)
 8003a10:	2280      	movs	r2, #128	@ 0x80
 8003a12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003a14:	4828      	ldr	r0, [pc, #160]	@ (8003ab8 <MX_TIM4_Init+0xf0>)
 8003a16:	f00a fe2f 	bl	800e678 <HAL_TIM_PWM_Init>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8003a20:	f7ff fb5a 	bl	80030d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a24:	2300      	movs	r3, #0
 8003a26:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003a2c:	f107 031c 	add.w	r3, r7, #28
 8003a30:	4619      	mov	r1, r3
 8003a32:	4821      	ldr	r0, [pc, #132]	@ (8003ab8 <MX_TIM4_Init+0xf0>)
 8003a34:	f00b fd6c 	bl	800f510 <HAL_TIMEx_MasterConfigSynchronization>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8003a3e:	f7ff fb4b 	bl	80030d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a42:	2360      	movs	r3, #96	@ 0x60
 8003a44:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003a46:	2300      	movs	r3, #0
 8003a48:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a52:	463b      	mov	r3, r7
 8003a54:	2200      	movs	r2, #0
 8003a56:	4619      	mov	r1, r3
 8003a58:	4817      	ldr	r0, [pc, #92]	@ (8003ab8 <MX_TIM4_Init+0xf0>)
 8003a5a:	f00b f87b 	bl	800eb54 <HAL_TIM_PWM_ConfigChannel>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8003a64:	f7ff fb38 	bl	80030d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003a68:	463b      	mov	r3, r7
 8003a6a:	2204      	movs	r2, #4
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4812      	ldr	r0, [pc, #72]	@ (8003ab8 <MX_TIM4_Init+0xf0>)
 8003a70:	f00b f870 	bl	800eb54 <HAL_TIM_PWM_ConfigChannel>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8003a7a:	f7ff fb2d 	bl	80030d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003a7e:	463b      	mov	r3, r7
 8003a80:	2208      	movs	r2, #8
 8003a82:	4619      	mov	r1, r3
 8003a84:	480c      	ldr	r0, [pc, #48]	@ (8003ab8 <MX_TIM4_Init+0xf0>)
 8003a86:	f00b f865 	bl	800eb54 <HAL_TIM_PWM_ConfigChannel>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8003a90:	f7ff fb22 	bl	80030d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003a94:	463b      	mov	r3, r7
 8003a96:	220c      	movs	r2, #12
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4807      	ldr	r0, [pc, #28]	@ (8003ab8 <MX_TIM4_Init+0xf0>)
 8003a9c:	f00b f85a 	bl	800eb54 <HAL_TIM_PWM_ConfigChannel>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 8003aa6:	f7ff fb17 	bl	80030d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003aaa:	4803      	ldr	r0, [pc, #12]	@ (8003ab8 <MX_TIM4_Init+0xf0>)
 8003aac:	f000 f89c 	bl	8003be8 <HAL_TIM_MspPostInit>

}
 8003ab0:	bf00      	nop
 8003ab2:	3728      	adds	r7, #40	@ 0x28
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	240010d4 	.word	0x240010d4
 8003abc:	40000800 	.word	0x40000800

08003ac0 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003ac4:	4b0e      	ldr	r3, [pc, #56]	@ (8003b00 <MX_TIM13_Init+0x40>)
 8003ac6:	4a0f      	ldr	r2, [pc, #60]	@ (8003b04 <MX_TIM13_Init+0x44>)
 8003ac8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 280-1;
 8003aca:	4b0d      	ldr	r3, [pc, #52]	@ (8003b00 <MX_TIM13_Init+0x40>)
 8003acc:	f240 1217 	movw	r2, #279	@ 0x117
 8003ad0:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8003b00 <MX_TIM13_Init+0x40>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8003ad8:	4b09      	ldr	r3, [pc, #36]	@ (8003b00 <MX_TIM13_Init+0x40>)
 8003ada:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ade:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ae0:	4b07      	ldr	r3, [pc, #28]	@ (8003b00 <MX_TIM13_Init+0x40>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003ae6:	4b06      	ldr	r3, [pc, #24]	@ (8003b00 <MX_TIM13_Init+0x40>)
 8003ae8:	2280      	movs	r2, #128	@ 0x80
 8003aea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003aec:	4804      	ldr	r0, [pc, #16]	@ (8003b00 <MX_TIM13_Init+0x40>)
 8003aee:	f00a fcf4 	bl	800e4da <HAL_TIM_Base_Init>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d001      	beq.n	8003afc <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8003af8:	f7ff faee 	bl	80030d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8003afc:	bf00      	nop
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	24001120 	.word	0x24001120
 8003b04:	40001c00 	.word	0x40001c00

08003b08 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b087      	sub	sp, #28
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b18:	d10f      	bne.n	8003b3a <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b1a:	4b1f      	ldr	r3, [pc, #124]	@ (8003b98 <HAL_TIM_PWM_MspInit+0x90>)
 8003b1c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003b20:	4a1d      	ldr	r2, [pc, #116]	@ (8003b98 <HAL_TIM_PWM_MspInit+0x90>)
 8003b22:	f043 0301 	orr.w	r3, r3, #1
 8003b26:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003b2a:	4b1b      	ldr	r3, [pc, #108]	@ (8003b98 <HAL_TIM_PWM_MspInit+0x90>)
 8003b2c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	617b      	str	r3, [r7, #20]
 8003b36:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003b38:	e028      	b.n	8003b8c <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM3)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a17      	ldr	r2, [pc, #92]	@ (8003b9c <HAL_TIM_PWM_MspInit+0x94>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d10f      	bne.n	8003b64 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b44:	4b14      	ldr	r3, [pc, #80]	@ (8003b98 <HAL_TIM_PWM_MspInit+0x90>)
 8003b46:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003b4a:	4a13      	ldr	r2, [pc, #76]	@ (8003b98 <HAL_TIM_PWM_MspInit+0x90>)
 8003b4c:	f043 0302 	orr.w	r3, r3, #2
 8003b50:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003b54:	4b10      	ldr	r3, [pc, #64]	@ (8003b98 <HAL_TIM_PWM_MspInit+0x90>)
 8003b56:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	613b      	str	r3, [r7, #16]
 8003b60:	693b      	ldr	r3, [r7, #16]
}
 8003b62:	e013      	b.n	8003b8c <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM4)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a0d      	ldr	r2, [pc, #52]	@ (8003ba0 <HAL_TIM_PWM_MspInit+0x98>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d10e      	bne.n	8003b8c <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8003b98 <HAL_TIM_PWM_MspInit+0x90>)
 8003b70:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003b74:	4a08      	ldr	r2, [pc, #32]	@ (8003b98 <HAL_TIM_PWM_MspInit+0x90>)
 8003b76:	f043 0304 	orr.w	r3, r3, #4
 8003b7a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003b7e:	4b06      	ldr	r3, [pc, #24]	@ (8003b98 <HAL_TIM_PWM_MspInit+0x90>)
 8003b80:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	60fb      	str	r3, [r7, #12]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
}
 8003b8c:	bf00      	nop
 8003b8e:	371c      	adds	r7, #28
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	58024400 	.word	0x58024400
 8003b9c:	40000400 	.word	0x40000400
 8003ba0:	40000800 	.word	0x40000800

08003ba4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a0b      	ldr	r2, [pc, #44]	@ (8003be0 <HAL_TIM_Base_MspInit+0x3c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d10e      	bne.n	8003bd4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8003be4 <HAL_TIM_Base_MspInit+0x40>)
 8003bb8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003bbc:	4a09      	ldr	r2, [pc, #36]	@ (8003be4 <HAL_TIM_Base_MspInit+0x40>)
 8003bbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bc2:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003bc6:	4b07      	ldr	r3, [pc, #28]	@ (8003be4 <HAL_TIM_Base_MspInit+0x40>)
 8003bc8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003bcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bd0:	60fb      	str	r3, [r7, #12]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8003bd4:	bf00      	nop
 8003bd6:	3714      	adds	r7, #20
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	40001c00 	.word	0x40001c00
 8003be4:	58024400 	.word	0x58024400

08003be8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b08c      	sub	sp, #48	@ 0x30
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bf0:	f107 031c 	add.w	r3, r7, #28
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	605a      	str	r2, [r3, #4]
 8003bfa:	609a      	str	r2, [r3, #8]
 8003bfc:	60da      	str	r2, [r3, #12]
 8003bfe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c08:	d13f      	bne.n	8003c8a <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c0a:	4b47      	ldr	r3, [pc, #284]	@ (8003d28 <HAL_TIM_MspPostInit+0x140>)
 8003c0c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003c10:	4a45      	ldr	r2, [pc, #276]	@ (8003d28 <HAL_TIM_MspPostInit+0x140>)
 8003c12:	f043 0301 	orr.w	r3, r3, #1
 8003c16:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003c1a:	4b43      	ldr	r3, [pc, #268]	@ (8003d28 <HAL_TIM_MspPostInit+0x140>)
 8003c1c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	61bb      	str	r3, [r7, #24]
 8003c26:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c28:	4b3f      	ldr	r3, [pc, #252]	@ (8003d28 <HAL_TIM_MspPostInit+0x140>)
 8003c2a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003c2e:	4a3e      	ldr	r2, [pc, #248]	@ (8003d28 <HAL_TIM_MspPostInit+0x140>)
 8003c30:	f043 0302 	orr.w	r3, r3, #2
 8003c34:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003c38:	4b3b      	ldr	r3, [pc, #236]	@ (8003d28 <HAL_TIM_MspPostInit+0x140>)
 8003c3a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	617b      	str	r3, [r7, #20]
 8003c44:	697b      	ldr	r3, [r7, #20]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 8003c46:	f248 030c 	movw	r3, #32780	@ 0x800c
 8003c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c50:	2300      	movs	r3, #0
 8003c52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c54:	2300      	movs	r3, #0
 8003c56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c5c:	f107 031c 	add.w	r3, r7, #28
 8003c60:	4619      	mov	r1, r3
 8003c62:	4832      	ldr	r0, [pc, #200]	@ (8003d2c <HAL_TIM_MspPostInit+0x144>)
 8003c64:	f006 f97a 	bl	8009f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003c68:	2308      	movs	r3, #8
 8003c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c70:	2300      	movs	r3, #0
 8003c72:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c74:	2300      	movs	r3, #0
 8003c76:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c7c:	f107 031c 	add.w	r3, r7, #28
 8003c80:	4619      	mov	r1, r3
 8003c82:	482b      	ldr	r0, [pc, #172]	@ (8003d30 <HAL_TIM_MspPostInit+0x148>)
 8003c84:	f006 f96a 	bl	8009f5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003c88:	e049      	b.n	8003d1e <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM3)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a29      	ldr	r2, [pc, #164]	@ (8003d34 <HAL_TIM_MspPostInit+0x14c>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d11f      	bne.n	8003cd4 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c94:	4b24      	ldr	r3, [pc, #144]	@ (8003d28 <HAL_TIM_MspPostInit+0x140>)
 8003c96:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003c9a:	4a23      	ldr	r2, [pc, #140]	@ (8003d28 <HAL_TIM_MspPostInit+0x140>)
 8003c9c:	f043 0302 	orr.w	r3, r3, #2
 8003ca0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003ca4:	4b20      	ldr	r3, [pc, #128]	@ (8003d28 <HAL_TIM_MspPostInit+0x140>)
 8003ca6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	613b      	str	r3, [r7, #16]
 8003cb0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003cb2:	2330      	movs	r3, #48	@ 0x30
 8003cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cc6:	f107 031c 	add.w	r3, r7, #28
 8003cca:	4619      	mov	r1, r3
 8003ccc:	4818      	ldr	r0, [pc, #96]	@ (8003d30 <HAL_TIM_MspPostInit+0x148>)
 8003cce:	f006 f945 	bl	8009f5c <HAL_GPIO_Init>
}
 8003cd2:	e024      	b.n	8003d1e <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM4)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a17      	ldr	r2, [pc, #92]	@ (8003d38 <HAL_TIM_MspPostInit+0x150>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d11f      	bne.n	8003d1e <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cde:	4b12      	ldr	r3, [pc, #72]	@ (8003d28 <HAL_TIM_MspPostInit+0x140>)
 8003ce0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003ce4:	4a10      	ldr	r2, [pc, #64]	@ (8003d28 <HAL_TIM_MspPostInit+0x140>)
 8003ce6:	f043 0302 	orr.w	r3, r3, #2
 8003cea:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003cee:	4b0e      	ldr	r3, [pc, #56]	@ (8003d28 <HAL_TIM_MspPostInit+0x140>)
 8003cf0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	60fb      	str	r3, [r7, #12]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003cfc:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8003d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d02:	2302      	movs	r3, #2
 8003d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d06:	2300      	movs	r3, #0
 8003d08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003d0e:	2302      	movs	r3, #2
 8003d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d12:	f107 031c 	add.w	r3, r7, #28
 8003d16:	4619      	mov	r1, r3
 8003d18:	4805      	ldr	r0, [pc, #20]	@ (8003d30 <HAL_TIM_MspPostInit+0x148>)
 8003d1a:	f006 f91f 	bl	8009f5c <HAL_GPIO_Init>
}
 8003d1e:	bf00      	nop
 8003d20:	3730      	adds	r7, #48	@ 0x30
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	58024400 	.word	0x58024400
 8003d2c:	58020000 	.word	0x58020000
 8003d30:	58020400 	.word	0x58020400
 8003d34:	40000400 	.word	0x40000400
 8003d38:	40000800 	.word	0x40000800

08003d3c <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart3_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003d40:	4b22      	ldr	r3, [pc, #136]	@ (8003dcc <MX_UART4_Init+0x90>)
 8003d42:	4a23      	ldr	r2, [pc, #140]	@ (8003dd0 <MX_UART4_Init+0x94>)
 8003d44:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8003d46:	4b21      	ldr	r3, [pc, #132]	@ (8003dcc <MX_UART4_Init+0x90>)
 8003d48:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003d4c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003d4e:	4b1f      	ldr	r3, [pc, #124]	@ (8003dcc <MX_UART4_Init+0x90>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003d54:	4b1d      	ldr	r3, [pc, #116]	@ (8003dcc <MX_UART4_Init+0x90>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003d5a:	4b1c      	ldr	r3, [pc, #112]	@ (8003dcc <MX_UART4_Init+0x90>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003d60:	4b1a      	ldr	r3, [pc, #104]	@ (8003dcc <MX_UART4_Init+0x90>)
 8003d62:	220c      	movs	r2, #12
 8003d64:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d66:	4b19      	ldr	r3, [pc, #100]	@ (8003dcc <MX_UART4_Init+0x90>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d6c:	4b17      	ldr	r3, [pc, #92]	@ (8003dcc <MX_UART4_Init+0x90>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003d72:	4b16      	ldr	r3, [pc, #88]	@ (8003dcc <MX_UART4_Init+0x90>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003d78:	4b14      	ldr	r3, [pc, #80]	@ (8003dcc <MX_UART4_Init+0x90>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003d7e:	4b13      	ldr	r3, [pc, #76]	@ (8003dcc <MX_UART4_Init+0x90>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003d84:	4811      	ldr	r0, [pc, #68]	@ (8003dcc <MX_UART4_Init+0x90>)
 8003d86:	f00b fc6f 	bl	800f668 <HAL_UART_Init>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8003d90:	f7ff f9a2 	bl	80030d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003d94:	2100      	movs	r1, #0
 8003d96:	480d      	ldr	r0, [pc, #52]	@ (8003dcc <MX_UART4_Init+0x90>)
 8003d98:	f00e ff95 	bl	8012cc6 <HAL_UARTEx_SetTxFifoThreshold>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8003da2:	f7ff f999 	bl	80030d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003da6:	2100      	movs	r1, #0
 8003da8:	4808      	ldr	r0, [pc, #32]	@ (8003dcc <MX_UART4_Init+0x90>)
 8003daa:	f00e ffca 	bl	8012d42 <HAL_UARTEx_SetRxFifoThreshold>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8003db4:	f7ff f990 	bl	80030d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8003db8:	4804      	ldr	r0, [pc, #16]	@ (8003dcc <MX_UART4_Init+0x90>)
 8003dba:	f00e ff4b 	bl	8012c54 <HAL_UARTEx_DisableFifoMode>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8003dc4:	f7ff f988 	bl	80030d8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003dc8:	bf00      	nop
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	2400116c 	.word	0x2400116c
 8003dd0:	40004c00 	.word	0x40004c00

08003dd4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003dd8:	4b23      	ldr	r3, [pc, #140]	@ (8003e68 <MX_USART1_UART_Init+0x94>)
 8003dda:	4a24      	ldr	r2, [pc, #144]	@ (8003e6c <MX_USART1_UART_Init+0x98>)
 8003ddc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8003dde:	4b22      	ldr	r3, [pc, #136]	@ (8003e68 <MX_USART1_UART_Init+0x94>)
 8003de0:	4a23      	ldr	r2, [pc, #140]	@ (8003e70 <MX_USART1_UART_Init+0x9c>)
 8003de2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8003de4:	4b20      	ldr	r3, [pc, #128]	@ (8003e68 <MX_USART1_UART_Init+0x94>)
 8003de6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003dea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003dec:	4b1e      	ldr	r3, [pc, #120]	@ (8003e68 <MX_USART1_UART_Init+0x94>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8003df2:	4b1d      	ldr	r3, [pc, #116]	@ (8003e68 <MX_USART1_UART_Init+0x94>)
 8003df4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003df8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003dfa:	4b1b      	ldr	r3, [pc, #108]	@ (8003e68 <MX_USART1_UART_Init+0x94>)
 8003dfc:	220c      	movs	r2, #12
 8003dfe:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e00:	4b19      	ldr	r3, [pc, #100]	@ (8003e68 <MX_USART1_UART_Init+0x94>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e06:	4b18      	ldr	r3, [pc, #96]	@ (8003e68 <MX_USART1_UART_Init+0x94>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e0c:	4b16      	ldr	r3, [pc, #88]	@ (8003e68 <MX_USART1_UART_Init+0x94>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003e12:	4b15      	ldr	r3, [pc, #84]	@ (8003e68 <MX_USART1_UART_Init+0x94>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003e18:	4b13      	ldr	r3, [pc, #76]	@ (8003e68 <MX_USART1_UART_Init+0x94>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003e1e:	4812      	ldr	r0, [pc, #72]	@ (8003e68 <MX_USART1_UART_Init+0x94>)
 8003e20:	f00b fc22 	bl	800f668 <HAL_UART_Init>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8003e2a:	f7ff f955 	bl	80030d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003e2e:	2100      	movs	r1, #0
 8003e30:	480d      	ldr	r0, [pc, #52]	@ (8003e68 <MX_USART1_UART_Init+0x94>)
 8003e32:	f00e ff48 	bl	8012cc6 <HAL_UARTEx_SetTxFifoThreshold>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8003e3c:	f7ff f94c 	bl	80030d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003e40:	2100      	movs	r1, #0
 8003e42:	4809      	ldr	r0, [pc, #36]	@ (8003e68 <MX_USART1_UART_Init+0x94>)
 8003e44:	f00e ff7d 	bl	8012d42 <HAL_UARTEx_SetRxFifoThreshold>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8003e4e:	f7ff f943 	bl	80030d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003e52:	4805      	ldr	r0, [pc, #20]	@ (8003e68 <MX_USART1_UART_Init+0x94>)
 8003e54:	f00e fefe 	bl	8012c54 <HAL_UARTEx_DisableFifoMode>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d001      	beq.n	8003e62 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8003e5e:	f7ff f93b 	bl	80030d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003e62:	bf00      	nop
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	24001200 	.word	0x24001200
 8003e6c:	40011000 	.word	0x40011000
 8003e70:	000186a0 	.word	0x000186a0

08003e74 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003e78:	4b22      	ldr	r3, [pc, #136]	@ (8003f04 <MX_USART3_UART_Init+0x90>)
 8003e7a:	4a23      	ldr	r2, [pc, #140]	@ (8003f08 <MX_USART3_UART_Init+0x94>)
 8003e7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003e7e:	4b21      	ldr	r3, [pc, #132]	@ (8003f04 <MX_USART3_UART_Init+0x90>)
 8003e80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003e84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003e86:	4b1f      	ldr	r3, [pc, #124]	@ (8003f04 <MX_USART3_UART_Init+0x90>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8003f04 <MX_USART3_UART_Init+0x90>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003e92:	4b1c      	ldr	r3, [pc, #112]	@ (8003f04 <MX_USART3_UART_Init+0x90>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003e98:	4b1a      	ldr	r3, [pc, #104]	@ (8003f04 <MX_USART3_UART_Init+0x90>)
 8003e9a:	220c      	movs	r2, #12
 8003e9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e9e:	4b19      	ldr	r3, [pc, #100]	@ (8003f04 <MX_USART3_UART_Init+0x90>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ea4:	4b17      	ldr	r3, [pc, #92]	@ (8003f04 <MX_USART3_UART_Init+0x90>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003eaa:	4b16      	ldr	r3, [pc, #88]	@ (8003f04 <MX_USART3_UART_Init+0x90>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003eb0:	4b14      	ldr	r3, [pc, #80]	@ (8003f04 <MX_USART3_UART_Init+0x90>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003eb6:	4b13      	ldr	r3, [pc, #76]	@ (8003f04 <MX_USART3_UART_Init+0x90>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003ebc:	4811      	ldr	r0, [pc, #68]	@ (8003f04 <MX_USART3_UART_Init+0x90>)
 8003ebe:	f00b fbd3 	bl	800f668 <HAL_UART_Init>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003ec8:	f7ff f906 	bl	80030d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003ecc:	2100      	movs	r1, #0
 8003ece:	480d      	ldr	r0, [pc, #52]	@ (8003f04 <MX_USART3_UART_Init+0x90>)
 8003ed0:	f00e fef9 	bl	8012cc6 <HAL_UARTEx_SetTxFifoThreshold>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8003eda:	f7ff f8fd 	bl	80030d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003ede:	2100      	movs	r1, #0
 8003ee0:	4808      	ldr	r0, [pc, #32]	@ (8003f04 <MX_USART3_UART_Init+0x90>)
 8003ee2:	f00e ff2e 	bl	8012d42 <HAL_UARTEx_SetRxFifoThreshold>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8003eec:	f7ff f8f4 	bl	80030d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003ef0:	4804      	ldr	r0, [pc, #16]	@ (8003f04 <MX_USART3_UART_Init+0x90>)
 8003ef2:	f00e feaf 	bl	8012c54 <HAL_UARTEx_DisableFifoMode>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8003efc:	f7ff f8ec 	bl	80030d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003f00:	bf00      	nop
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	24001294 	.word	0x24001294
 8003f08:	40004800 	.word	0x40004800

08003f0c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003f10:	4b22      	ldr	r3, [pc, #136]	@ (8003f9c <MX_USART6_UART_Init+0x90>)
 8003f12:	4a23      	ldr	r2, [pc, #140]	@ (8003fa0 <MX_USART6_UART_Init+0x94>)
 8003f14:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003f16:	4b21      	ldr	r3, [pc, #132]	@ (8003f9c <MX_USART6_UART_Init+0x90>)
 8003f18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003f1c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003f1e:	4b1f      	ldr	r3, [pc, #124]	@ (8003f9c <MX_USART6_UART_Init+0x90>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003f24:	4b1d      	ldr	r3, [pc, #116]	@ (8003f9c <MX_USART6_UART_Init+0x90>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003f2a:	4b1c      	ldr	r3, [pc, #112]	@ (8003f9c <MX_USART6_UART_Init+0x90>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003f30:	4b1a      	ldr	r3, [pc, #104]	@ (8003f9c <MX_USART6_UART_Init+0x90>)
 8003f32:	220c      	movs	r2, #12
 8003f34:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f36:	4b19      	ldr	r3, [pc, #100]	@ (8003f9c <MX_USART6_UART_Init+0x90>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f3c:	4b17      	ldr	r3, [pc, #92]	@ (8003f9c <MX_USART6_UART_Init+0x90>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f42:	4b16      	ldr	r3, [pc, #88]	@ (8003f9c <MX_USART6_UART_Init+0x90>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003f48:	4b14      	ldr	r3, [pc, #80]	@ (8003f9c <MX_USART6_UART_Init+0x90>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f4e:	4b13      	ldr	r3, [pc, #76]	@ (8003f9c <MX_USART6_UART_Init+0x90>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003f54:	4811      	ldr	r0, [pc, #68]	@ (8003f9c <MX_USART6_UART_Init+0x90>)
 8003f56:	f00b fb87 	bl	800f668 <HAL_UART_Init>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8003f60:	f7ff f8ba 	bl	80030d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f64:	2100      	movs	r1, #0
 8003f66:	480d      	ldr	r0, [pc, #52]	@ (8003f9c <MX_USART6_UART_Init+0x90>)
 8003f68:	f00e fead 	bl	8012cc6 <HAL_UARTEx_SetTxFifoThreshold>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8003f72:	f7ff f8b1 	bl	80030d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f76:	2100      	movs	r1, #0
 8003f78:	4808      	ldr	r0, [pc, #32]	@ (8003f9c <MX_USART6_UART_Init+0x90>)
 8003f7a:	f00e fee2 	bl	8012d42 <HAL_UARTEx_SetRxFifoThreshold>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d001      	beq.n	8003f88 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8003f84:	f7ff f8a8 	bl	80030d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8003f88:	4804      	ldr	r0, [pc, #16]	@ (8003f9c <MX_USART6_UART_Init+0x90>)
 8003f8a:	f00e fe63 	bl	8012c54 <HAL_UARTEx_DisableFifoMode>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8003f94:	f7ff f8a0 	bl	80030d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003f98:	bf00      	nop
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	24001328 	.word	0x24001328
 8003fa0:	40011400 	.word	0x40011400

08003fa4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b0c0      	sub	sp, #256	@ 0x100
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fac:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	605a      	str	r2, [r3, #4]
 8003fb6:	609a      	str	r2, [r3, #8]
 8003fb8:	60da      	str	r2, [r3, #12]
 8003fba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003fbc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003fc0:	22c0      	movs	r2, #192	@ 0xc0
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f013 fdee 	bl	8017ba6 <memset>
  if(uartHandle->Instance==UART4)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a82      	ldr	r2, [pc, #520]	@ (80041d8 <HAL_UART_MspInit+0x234>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d17c      	bne.n	80040ce <HAL_UART_MspInit+0x12a>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003fd4:	f04f 0202 	mov.w	r2, #2
 8003fd8:	f04f 0300 	mov.w	r3, #0
 8003fdc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003fe6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003fea:	4618      	mov	r0, r3
 8003fec:	f007 faee 	bl	800b5cc <HAL_RCCEx_PeriphCLKConfig>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003ff6:	f7ff f86f 	bl	80030d8 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003ffa:	4b78      	ldr	r3, [pc, #480]	@ (80041dc <HAL_UART_MspInit+0x238>)
 8003ffc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004000:	4a76      	ldr	r2, [pc, #472]	@ (80041dc <HAL_UART_MspInit+0x238>)
 8004002:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004006:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800400a:	4b74      	ldr	r3, [pc, #464]	@ (80041dc <HAL_UART_MspInit+0x238>)
 800400c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004010:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004014:	627b      	str	r3, [r7, #36]	@ 0x24
 8004016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004018:	4b70      	ldr	r3, [pc, #448]	@ (80041dc <HAL_UART_MspInit+0x238>)
 800401a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800401e:	4a6f      	ldr	r2, [pc, #444]	@ (80041dc <HAL_UART_MspInit+0x238>)
 8004020:	f043 0301 	orr.w	r3, r3, #1
 8004024:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8004028:	4b6c      	ldr	r3, [pc, #432]	@ (80041dc <HAL_UART_MspInit+0x238>)
 800402a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	623b      	str	r3, [r7, #32]
 8004034:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004036:	2303      	movs	r3, #3
 8004038:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800403c:	2302      	movs	r3, #2
 800403e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004042:	2300      	movs	r3, #0
 8004044:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004048:	2300      	movs	r3, #0
 800404a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800404e:	2308      	movs	r3, #8
 8004050:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004054:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8004058:	4619      	mov	r1, r3
 800405a:	4861      	ldr	r0, [pc, #388]	@ (80041e0 <HAL_UART_MspInit+0x23c>)
 800405c:	f005 ff7e 	bl	8009f5c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8004060:	4b60      	ldr	r3, [pc, #384]	@ (80041e4 <HAL_UART_MspInit+0x240>)
 8004062:	4a61      	ldr	r2, [pc, #388]	@ (80041e8 <HAL_UART_MspInit+0x244>)
 8004064:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8004066:	4b5f      	ldr	r3, [pc, #380]	@ (80041e4 <HAL_UART_MspInit+0x240>)
 8004068:	223f      	movs	r2, #63	@ 0x3f
 800406a:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800406c:	4b5d      	ldr	r3, [pc, #372]	@ (80041e4 <HAL_UART_MspInit+0x240>)
 800406e:	2200      	movs	r2, #0
 8004070:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004072:	4b5c      	ldr	r3, [pc, #368]	@ (80041e4 <HAL_UART_MspInit+0x240>)
 8004074:	2200      	movs	r2, #0
 8004076:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004078:	4b5a      	ldr	r3, [pc, #360]	@ (80041e4 <HAL_UART_MspInit+0x240>)
 800407a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800407e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004080:	4b58      	ldr	r3, [pc, #352]	@ (80041e4 <HAL_UART_MspInit+0x240>)
 8004082:	2200      	movs	r2, #0
 8004084:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004086:	4b57      	ldr	r3, [pc, #348]	@ (80041e4 <HAL_UART_MspInit+0x240>)
 8004088:	2200      	movs	r2, #0
 800408a:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800408c:	4b55      	ldr	r3, [pc, #340]	@ (80041e4 <HAL_UART_MspInit+0x240>)
 800408e:	2200      	movs	r2, #0
 8004090:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004092:	4b54      	ldr	r3, [pc, #336]	@ (80041e4 <HAL_UART_MspInit+0x240>)
 8004094:	2200      	movs	r2, #0
 8004096:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004098:	4b52      	ldr	r3, [pc, #328]	@ (80041e4 <HAL_UART_MspInit+0x240>)
 800409a:	2200      	movs	r2, #0
 800409c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800409e:	4851      	ldr	r0, [pc, #324]	@ (80041e4 <HAL_UART_MspInit+0x240>)
 80040a0:	f002 fd0e 	bl	8006ac0 <HAL_DMA_Init>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 80040aa:	f7ff f815 	bl	80030d8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a4c      	ldr	r2, [pc, #304]	@ (80041e4 <HAL_UART_MspInit+0x240>)
 80040b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80040b6:	4a4b      	ldr	r2, [pc, #300]	@ (80041e4 <HAL_UART_MspInit+0x240>)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80040bc:	2200      	movs	r2, #0
 80040be:	2105      	movs	r1, #5
 80040c0:	2034      	movs	r0, #52	@ 0x34
 80040c2:	f002 fc5d 	bl	8006980 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80040c6:	2034      	movs	r0, #52	@ 0x34
 80040c8:	f002 fc74 	bl	80069b4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80040cc:	e16a      	b.n	80043a4 <HAL_UART_MspInit+0x400>
  else if(uartHandle->Instance==USART1)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a46      	ldr	r2, [pc, #280]	@ (80041ec <HAL_UART_MspInit+0x248>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	f040 808f 	bne.w	80041f8 <HAL_UART_MspInit+0x254>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80040da:	f04f 0201 	mov.w	r2, #1
 80040de:	f04f 0300 	mov.w	r3, #0
 80040e2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80040e6:	2300      	movs	r3, #0
 80040e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80040ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80040f0:	4618      	mov	r0, r3
 80040f2:	f007 fa6b 	bl	800b5cc <HAL_RCCEx_PeriphCLKConfig>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <HAL_UART_MspInit+0x15c>
      Error_Handler();
 80040fc:	f7fe ffec 	bl	80030d8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004100:	4b36      	ldr	r3, [pc, #216]	@ (80041dc <HAL_UART_MspInit+0x238>)
 8004102:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8004106:	4a35      	ldr	r2, [pc, #212]	@ (80041dc <HAL_UART_MspInit+0x238>)
 8004108:	f043 0310 	orr.w	r3, r3, #16
 800410c:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8004110:	4b32      	ldr	r3, [pc, #200]	@ (80041dc <HAL_UART_MspInit+0x238>)
 8004112:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8004116:	f003 0310 	and.w	r3, r3, #16
 800411a:	61fb      	str	r3, [r7, #28]
 800411c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800411e:	4b2f      	ldr	r3, [pc, #188]	@ (80041dc <HAL_UART_MspInit+0x238>)
 8004120:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004124:	4a2d      	ldr	r2, [pc, #180]	@ (80041dc <HAL_UART_MspInit+0x238>)
 8004126:	f043 0301 	orr.w	r3, r3, #1
 800412a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800412e:	4b2b      	ldr	r3, [pc, #172]	@ (80041dc <HAL_UART_MspInit+0x238>)
 8004130:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	61bb      	str	r3, [r7, #24]
 800413a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|SBUS_RX_Pin;
 800413c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004140:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004144:	2302      	movs	r3, #2
 8004146:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800414a:	2300      	movs	r3, #0
 800414c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004150:	2300      	movs	r3, #0
 8004152:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004156:	2307      	movs	r3, #7
 8004158:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800415c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8004160:	4619      	mov	r1, r3
 8004162:	481f      	ldr	r0, [pc, #124]	@ (80041e0 <HAL_UART_MspInit+0x23c>)
 8004164:	f005 fefa 	bl	8009f5c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8004168:	4b21      	ldr	r3, [pc, #132]	@ (80041f0 <HAL_UART_MspInit+0x24c>)
 800416a:	4a22      	ldr	r2, [pc, #136]	@ (80041f4 <HAL_UART_MspInit+0x250>)
 800416c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800416e:	4b20      	ldr	r3, [pc, #128]	@ (80041f0 <HAL_UART_MspInit+0x24c>)
 8004170:	2229      	movs	r2, #41	@ 0x29
 8004172:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004174:	4b1e      	ldr	r3, [pc, #120]	@ (80041f0 <HAL_UART_MspInit+0x24c>)
 8004176:	2200      	movs	r2, #0
 8004178:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800417a:	4b1d      	ldr	r3, [pc, #116]	@ (80041f0 <HAL_UART_MspInit+0x24c>)
 800417c:	2200      	movs	r2, #0
 800417e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004180:	4b1b      	ldr	r3, [pc, #108]	@ (80041f0 <HAL_UART_MspInit+0x24c>)
 8004182:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004186:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004188:	4b19      	ldr	r3, [pc, #100]	@ (80041f0 <HAL_UART_MspInit+0x24c>)
 800418a:	2200      	movs	r2, #0
 800418c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800418e:	4b18      	ldr	r3, [pc, #96]	@ (80041f0 <HAL_UART_MspInit+0x24c>)
 8004190:	2200      	movs	r2, #0
 8004192:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004194:	4b16      	ldr	r3, [pc, #88]	@ (80041f0 <HAL_UART_MspInit+0x24c>)
 8004196:	2200      	movs	r2, #0
 8004198:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800419a:	4b15      	ldr	r3, [pc, #84]	@ (80041f0 <HAL_UART_MspInit+0x24c>)
 800419c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80041a0:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80041a2:	4b13      	ldr	r3, [pc, #76]	@ (80041f0 <HAL_UART_MspInit+0x24c>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80041a8:	4811      	ldr	r0, [pc, #68]	@ (80041f0 <HAL_UART_MspInit+0x24c>)
 80041aa:	f002 fc89 	bl	8006ac0 <HAL_DMA_Init>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <HAL_UART_MspInit+0x214>
      Error_Handler();
 80041b4:	f7fe ff90 	bl	80030d8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a0d      	ldr	r2, [pc, #52]	@ (80041f0 <HAL_UART_MspInit+0x24c>)
 80041bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80041c0:	4a0b      	ldr	r2, [pc, #44]	@ (80041f0 <HAL_UART_MspInit+0x24c>)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80041c6:	2200      	movs	r2, #0
 80041c8:	2105      	movs	r1, #5
 80041ca:	2025      	movs	r0, #37	@ 0x25
 80041cc:	f002 fbd8 	bl	8006980 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80041d0:	2025      	movs	r0, #37	@ 0x25
 80041d2:	f002 fbef 	bl	80069b4 <HAL_NVIC_EnableIRQ>
}
 80041d6:	e0e5      	b.n	80043a4 <HAL_UART_MspInit+0x400>
 80041d8:	40004c00 	.word	0x40004c00
 80041dc:	58024400 	.word	0x58024400
 80041e0:	58020000 	.word	0x58020000
 80041e4:	240013bc 	.word	0x240013bc
 80041e8:	40020040 	.word	0x40020040
 80041ec:	40011000 	.word	0x40011000
 80041f0:	24001434 	.word	0x24001434
 80041f4:	40020010 	.word	0x40020010
  else if(uartHandle->Instance==USART3)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a6c      	ldr	r2, [pc, #432]	@ (80043b0 <HAL_UART_MspInit+0x40c>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d17d      	bne.n	80042fe <HAL_UART_MspInit+0x35a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004202:	f04f 0202 	mov.w	r2, #2
 8004206:	f04f 0300 	mov.w	r3, #0
 800420a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800420e:	2300      	movs	r3, #0
 8004210:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004214:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004218:	4618      	mov	r0, r3
 800421a:	f007 f9d7 	bl	800b5cc <HAL_RCCEx_PeriphCLKConfig>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d001      	beq.n	8004228 <HAL_UART_MspInit+0x284>
      Error_Handler();
 8004224:	f7fe ff58 	bl	80030d8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004228:	4b62      	ldr	r3, [pc, #392]	@ (80043b4 <HAL_UART_MspInit+0x410>)
 800422a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800422e:	4a61      	ldr	r2, [pc, #388]	@ (80043b4 <HAL_UART_MspInit+0x410>)
 8004230:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004234:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8004238:	4b5e      	ldr	r3, [pc, #376]	@ (80043b4 <HAL_UART_MspInit+0x410>)
 800423a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800423e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004242:	617b      	str	r3, [r7, #20]
 8004244:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004246:	4b5b      	ldr	r3, [pc, #364]	@ (80043b4 <HAL_UART_MspInit+0x410>)
 8004248:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800424c:	4a59      	ldr	r2, [pc, #356]	@ (80043b4 <HAL_UART_MspInit+0x410>)
 800424e:	f043 0304 	orr.w	r3, r3, #4
 8004252:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8004256:	4b57      	ldr	r3, [pc, #348]	@ (80043b4 <HAL_UART_MspInit+0x410>)
 8004258:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800425c:	f003 0304 	and.w	r3, r3, #4
 8004260:	613b      	str	r3, [r7, #16]
 8004262:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004264:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004268:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800426c:	2302      	movs	r3, #2
 800426e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004272:	2300      	movs	r3, #0
 8004274:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004278:	2300      	movs	r3, #0
 800427a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800427e:	2307      	movs	r3, #7
 8004280:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004284:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8004288:	4619      	mov	r1, r3
 800428a:	484b      	ldr	r0, [pc, #300]	@ (80043b8 <HAL_UART_MspInit+0x414>)
 800428c:	f005 fe66 	bl	8009f5c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004290:	4b4a      	ldr	r3, [pc, #296]	@ (80043bc <HAL_UART_MspInit+0x418>)
 8004292:	4a4b      	ldr	r2, [pc, #300]	@ (80043c0 <HAL_UART_MspInit+0x41c>)
 8004294:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8004296:	4b49      	ldr	r3, [pc, #292]	@ (80043bc <HAL_UART_MspInit+0x418>)
 8004298:	222d      	movs	r2, #45	@ 0x2d
 800429a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800429c:	4b47      	ldr	r3, [pc, #284]	@ (80043bc <HAL_UART_MspInit+0x418>)
 800429e:	2200      	movs	r2, #0
 80042a0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80042a2:	4b46      	ldr	r3, [pc, #280]	@ (80043bc <HAL_UART_MspInit+0x418>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80042a8:	4b44      	ldr	r3, [pc, #272]	@ (80043bc <HAL_UART_MspInit+0x418>)
 80042aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80042ae:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80042b0:	4b42      	ldr	r3, [pc, #264]	@ (80043bc <HAL_UART_MspInit+0x418>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80042b6:	4b41      	ldr	r3, [pc, #260]	@ (80043bc <HAL_UART_MspInit+0x418>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80042bc:	4b3f      	ldr	r3, [pc, #252]	@ (80043bc <HAL_UART_MspInit+0x418>)
 80042be:	2200      	movs	r2, #0
 80042c0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80042c2:	4b3e      	ldr	r3, [pc, #248]	@ (80043bc <HAL_UART_MspInit+0x418>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80042c8:	4b3c      	ldr	r3, [pc, #240]	@ (80043bc <HAL_UART_MspInit+0x418>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80042ce:	483b      	ldr	r0, [pc, #236]	@ (80043bc <HAL_UART_MspInit+0x418>)
 80042d0:	f002 fbf6 	bl	8006ac0 <HAL_DMA_Init>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <HAL_UART_MspInit+0x33a>
      Error_Handler();
 80042da:	f7fe fefd 	bl	80030d8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a36      	ldr	r2, [pc, #216]	@ (80043bc <HAL_UART_MspInit+0x418>)
 80042e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80042e6:	4a35      	ldr	r2, [pc, #212]	@ (80043bc <HAL_UART_MspInit+0x418>)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80042ec:	2200      	movs	r2, #0
 80042ee:	2105      	movs	r1, #5
 80042f0:	2027      	movs	r0, #39	@ 0x27
 80042f2:	f002 fb45 	bl	8006980 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80042f6:	2027      	movs	r0, #39	@ 0x27
 80042f8:	f002 fb5c 	bl	80069b4 <HAL_NVIC_EnableIRQ>
}
 80042fc:	e052      	b.n	80043a4 <HAL_UART_MspInit+0x400>
  else if(uartHandle->Instance==USART6)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a30      	ldr	r2, [pc, #192]	@ (80043c4 <HAL_UART_MspInit+0x420>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d14d      	bne.n	80043a4 <HAL_UART_MspInit+0x400>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8004308:	f04f 0201 	mov.w	r2, #1
 800430c:	f04f 0300 	mov.w	r3, #0
 8004310:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8004314:	2300      	movs	r3, #0
 8004316:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800431a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800431e:	4618      	mov	r0, r3
 8004320:	f007 f954 	bl	800b5cc <HAL_RCCEx_PeriphCLKConfig>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d001      	beq.n	800432e <HAL_UART_MspInit+0x38a>
      Error_Handler();
 800432a:	f7fe fed5 	bl	80030d8 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800432e:	4b21      	ldr	r3, [pc, #132]	@ (80043b4 <HAL_UART_MspInit+0x410>)
 8004330:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8004334:	4a1f      	ldr	r2, [pc, #124]	@ (80043b4 <HAL_UART_MspInit+0x410>)
 8004336:	f043 0320 	orr.w	r3, r3, #32
 800433a:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 800433e:	4b1d      	ldr	r3, [pc, #116]	@ (80043b4 <HAL_UART_MspInit+0x410>)
 8004340:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8004344:	f003 0320 	and.w	r3, r3, #32
 8004348:	60fb      	str	r3, [r7, #12]
 800434a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800434c:	4b19      	ldr	r3, [pc, #100]	@ (80043b4 <HAL_UART_MspInit+0x410>)
 800434e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004352:	4a18      	ldr	r2, [pc, #96]	@ (80043b4 <HAL_UART_MspInit+0x410>)
 8004354:	f043 0304 	orr.w	r3, r3, #4
 8004358:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800435c:	4b15      	ldr	r3, [pc, #84]	@ (80043b4 <HAL_UART_MspInit+0x410>)
 800435e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004362:	f003 0304 	and.w	r3, r3, #4
 8004366:	60bb      	str	r3, [r7, #8]
 8004368:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800436a:	23c0      	movs	r3, #192	@ 0xc0
 800436c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004370:	2302      	movs	r3, #2
 8004372:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004376:	2300      	movs	r3, #0
 8004378:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800437c:	2300      	movs	r3, #0
 800437e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8004382:	2307      	movs	r3, #7
 8004384:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004388:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800438c:	4619      	mov	r1, r3
 800438e:	480a      	ldr	r0, [pc, #40]	@ (80043b8 <HAL_UART_MspInit+0x414>)
 8004390:	f005 fde4 	bl	8009f5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8004394:	2200      	movs	r2, #0
 8004396:	2105      	movs	r1, #5
 8004398:	2047      	movs	r0, #71	@ 0x47
 800439a:	f002 faf1 	bl	8006980 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800439e:	2047      	movs	r0, #71	@ 0x47
 80043a0:	f002 fb08 	bl	80069b4 <HAL_NVIC_EnableIRQ>
}
 80043a4:	bf00      	nop
 80043a6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	40004800 	.word	0x40004800
 80043b4:	58024400 	.word	0x58024400
 80043b8:	58020800 	.word	0x58020800
 80043bc:	240014ac 	.word	0x240014ac
 80043c0:	40020028 	.word	0x40020028
 80043c4:	40011400 	.word	0x40011400

080043c8 <Reset_UART>:
  /* USER CODE END USART6_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void Reset_UART(UART_HandleTypeDef *huart) {
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]

      // Clear any pending error flags
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF | UART_CLEAR_FEF | UART_CLEAR_NEF | UART_CLEAR_OREF);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	220f      	movs	r2, #15
 80043d6:	621a      	str	r2, [r3, #32]

    // Abort ongoing UART transfer
    if (HAL_UART_Abort_IT(huart) != HAL_OK) {
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f00b fbe5 	bl	800fba8 <HAL_UART_Abort_IT>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <Reset_UART+0x20>
        // Abort Error
        Error_Handler();
 80043e4:	f7fe fe78 	bl	80030d8 <Error_Handler>
    }
     if(huart == &huart3){
    	 MX_USART3_UART_Init();
     }
*/
}
 80043e8:	bf00      	nop
 80043ea:	3708      	adds	r7, #8
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <BMP280_write>:
uint16_t dig_T1, dig_P1;
int16_t  dig_T2, dig_T3, dig_P2,dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;

int32_t T_raw, P_raw, t_fine;

void BMP280_write(uint8_t Address, uint8_t Data){
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	4603      	mov	r3, r0
 80043f8:	460a      	mov	r2, r1
 80043fa:	71fb      	strb	r3, [r7, #7]
 80043fc:	4613      	mov	r3, r2
 80043fe:	71bb      	strb	r3, [r7, #6]
	BMP280_select();
 8004400:	2200      	movs	r2, #0
 8004402:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004406:	480f      	ldr	r0, [pc, #60]	@ (8004444 <BMP280_write+0x54>)
 8004408:	f005 ff58 	bl	800a2bc <HAL_GPIO_WritePin>
	Address &= 0x7F;
 800440c:	79fb      	ldrb	r3, [r7, #7]
 800440e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004412:	b2db      	uxtb	r3, r3
 8004414:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8004416:	1df9      	adds	r1, r7, #7
 8004418:	2364      	movs	r3, #100	@ 0x64
 800441a:	2201      	movs	r2, #1
 800441c:	480a      	ldr	r0, [pc, #40]	@ (8004448 <BMP280_write+0x58>)
 800441e:	f008 ffd9 	bl	800d3d4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BMP280, &Data, 1, 100);
 8004422:	1db9      	adds	r1, r7, #6
 8004424:	2364      	movs	r3, #100	@ 0x64
 8004426:	2201      	movs	r2, #1
 8004428:	4807      	ldr	r0, [pc, #28]	@ (8004448 <BMP280_write+0x58>)
 800442a:	f008 ffd3 	bl	800d3d4 <HAL_SPI_Transmit>

	BMP280_unselect();
 800442e:	2201      	movs	r2, #1
 8004430:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004434:	4803      	ldr	r0, [pc, #12]	@ (8004444 <BMP280_write+0x54>)
 8004436:	f005 ff41 	bl	800a2bc <HAL_GPIO_WritePin>
}
 800443a:	bf00      	nop
 800443c:	3708      	adds	r7, #8
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	58020400 	.word	0x58020400
 8004448:	24000f64 	.word	0x24000f64

0800444c <BMP280_read>:

uint8_t BMP280_read(uint8_t Address){
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	4603      	mov	r3, r0
 8004454:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer = (Address|0x80);
 8004456:	79fb      	ldrb	r3, [r7, #7]
 8004458:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800445c:	b2db      	uxtb	r3, r3
 800445e:	73fb      	strb	r3, [r7, #15]
	BMP280_select();
 8004460:	2200      	movs	r2, #0
 8004462:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004466:	480e      	ldr	r0, [pc, #56]	@ (80044a0 <BMP280_read+0x54>)
 8004468:	f005 ff28 	bl	800a2bc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Buffer, 1, 100);
 800446c:	f107 010f 	add.w	r1, r7, #15
 8004470:	2364      	movs	r3, #100	@ 0x64
 8004472:	2201      	movs	r2, #1
 8004474:	480b      	ldr	r0, [pc, #44]	@ (80044a4 <BMP280_read+0x58>)
 8004476:	f008 ffad 	bl	800d3d4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, &Buffer, 1, 100);
 800447a:	f107 010f 	add.w	r1, r7, #15
 800447e:	2364      	movs	r3, #100	@ 0x64
 8004480:	2201      	movs	r2, #1
 8004482:	4808      	ldr	r0, [pc, #32]	@ (80044a4 <BMP280_read+0x58>)
 8004484:	f009 f994 	bl	800d7b0 <HAL_SPI_Receive>
	BMP280_unselect();
 8004488:	2201      	movs	r2, #1
 800448a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800448e:	4804      	ldr	r0, [pc, #16]	@ (80044a0 <BMP280_read+0x54>)
 8004490:	f005 ff14 	bl	800a2bc <HAL_GPIO_WritePin>

	return Buffer;
 8004494:	7bfb      	ldrb	r3, [r7, #15]
}
 8004496:	4618      	mov	r0, r3
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	58020400 	.word	0x58020400
 80044a4:	24000f64 	.word	0x24000f64

080044a8 <BMP280_config>:

void BMP280_config(void){
 80044a8:	b580      	push	{r7, lr}
 80044aa:	af00      	add	r7, sp, #0
	BMP280_write(ctrl_meas, 0x57);
 80044ac:	2157      	movs	r1, #87	@ 0x57
 80044ae:	20f4      	movs	r0, #244	@ 0xf4
 80044b0:	f7ff ff9e 	bl	80043f0 <BMP280_write>
	BMP280_write(config, 0x10);
 80044b4:	2110      	movs	r1, #16
 80044b6:	20f5      	movs	r0, #245	@ 0xf5
 80044b8:	f7ff ff9a 	bl	80043f0 <BMP280_write>
}
 80044bc:	bf00      	nop
 80044be:	bd80      	pop	{r7, pc}

080044c0 <BMP280_calibrationData>:

void BMP280_reset(void){
	BMP280_write(reset, 0xB6);
}

void BMP280_calibrationData(void){
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b088      	sub	sp, #32
 80044c4:	af00      	add	r7, sp, #0
	uint8_t Address = 0x88;
 80044c6:	2388      	movs	r3, #136	@ 0x88
 80044c8:	77fb      	strb	r3, [r7, #31]
	uint8_t Buffer[24] = {0};
 80044ca:	2300      	movs	r3, #0
 80044cc:	607b      	str	r3, [r7, #4]
 80044ce:	f107 0308 	add.w	r3, r7, #8
 80044d2:	2200      	movs	r2, #0
 80044d4:	601a      	str	r2, [r3, #0]
 80044d6:	605a      	str	r2, [r3, #4]
 80044d8:	609a      	str	r2, [r3, #8]
 80044da:	60da      	str	r2, [r3, #12]
 80044dc:	611a      	str	r2, [r3, #16]
	BMP280_select();
 80044de:	2200      	movs	r2, #0
 80044e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80044e4:	4843      	ldr	r0, [pc, #268]	@ (80045f4 <BMP280_calibrationData+0x134>)
 80044e6:	f005 fee9 	bl	800a2bc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80044ea:	f107 011f 	add.w	r1, r7, #31
 80044ee:	2364      	movs	r3, #100	@ 0x64
 80044f0:	2201      	movs	r2, #1
 80044f2:	4841      	ldr	r0, [pc, #260]	@ (80045f8 <BMP280_calibrationData+0x138>)
 80044f4:	f008 ff6e 	bl	800d3d4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 24, 100);
 80044f8:	1d39      	adds	r1, r7, #4
 80044fa:	2364      	movs	r3, #100	@ 0x64
 80044fc:	2218      	movs	r2, #24
 80044fe:	483e      	ldr	r0, [pc, #248]	@ (80045f8 <BMP280_calibrationData+0x138>)
 8004500:	f009 f956 	bl	800d7b0 <HAL_SPI_Receive>
	BMP280_unselect();
 8004504:	2201      	movs	r2, #1
 8004506:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800450a:	483a      	ldr	r0, [pc, #232]	@ (80045f4 <BMP280_calibrationData+0x134>)
 800450c:	f005 fed6 	bl	800a2bc <HAL_GPIO_WritePin>

	dig_T1 = (Buffer[1]<<8)|Buffer[0];
 8004510:	797b      	ldrb	r3, [r7, #5]
 8004512:	021b      	lsls	r3, r3, #8
 8004514:	b21a      	sxth	r2, r3
 8004516:	793b      	ldrb	r3, [r7, #4]
 8004518:	b21b      	sxth	r3, r3
 800451a:	4313      	orrs	r3, r2
 800451c:	b21b      	sxth	r3, r3
 800451e:	b29a      	uxth	r2, r3
 8004520:	4b36      	ldr	r3, [pc, #216]	@ (80045fc <BMP280_calibrationData+0x13c>)
 8004522:	801a      	strh	r2, [r3, #0]
	dig_T2 = (Buffer[3]<<8)|Buffer[2];
 8004524:	79fb      	ldrb	r3, [r7, #7]
 8004526:	021b      	lsls	r3, r3, #8
 8004528:	b21a      	sxth	r2, r3
 800452a:	79bb      	ldrb	r3, [r7, #6]
 800452c:	b21b      	sxth	r3, r3
 800452e:	4313      	orrs	r3, r2
 8004530:	b21a      	sxth	r2, r3
 8004532:	4b33      	ldr	r3, [pc, #204]	@ (8004600 <BMP280_calibrationData+0x140>)
 8004534:	801a      	strh	r2, [r3, #0]
	dig_T3 = (Buffer[5]<<8)|Buffer[4];
 8004536:	7a7b      	ldrb	r3, [r7, #9]
 8004538:	021b      	lsls	r3, r3, #8
 800453a:	b21a      	sxth	r2, r3
 800453c:	7a3b      	ldrb	r3, [r7, #8]
 800453e:	b21b      	sxth	r3, r3
 8004540:	4313      	orrs	r3, r2
 8004542:	b21a      	sxth	r2, r3
 8004544:	4b2f      	ldr	r3, [pc, #188]	@ (8004604 <BMP280_calibrationData+0x144>)
 8004546:	801a      	strh	r2, [r3, #0]

	dig_P1 = (Buffer[7]<<8)|Buffer[6];
 8004548:	7afb      	ldrb	r3, [r7, #11]
 800454a:	021b      	lsls	r3, r3, #8
 800454c:	b21a      	sxth	r2, r3
 800454e:	7abb      	ldrb	r3, [r7, #10]
 8004550:	b21b      	sxth	r3, r3
 8004552:	4313      	orrs	r3, r2
 8004554:	b21b      	sxth	r3, r3
 8004556:	b29a      	uxth	r2, r3
 8004558:	4b2b      	ldr	r3, [pc, #172]	@ (8004608 <BMP280_calibrationData+0x148>)
 800455a:	801a      	strh	r2, [r3, #0]
	dig_P2 = (Buffer[9]<<8)|Buffer[8];
 800455c:	7b7b      	ldrb	r3, [r7, #13]
 800455e:	021b      	lsls	r3, r3, #8
 8004560:	b21a      	sxth	r2, r3
 8004562:	7b3b      	ldrb	r3, [r7, #12]
 8004564:	b21b      	sxth	r3, r3
 8004566:	4313      	orrs	r3, r2
 8004568:	b21a      	sxth	r2, r3
 800456a:	4b28      	ldr	r3, [pc, #160]	@ (800460c <BMP280_calibrationData+0x14c>)
 800456c:	801a      	strh	r2, [r3, #0]
	dig_P3 = (Buffer[11]<<8)|Buffer[10];
 800456e:	7bfb      	ldrb	r3, [r7, #15]
 8004570:	021b      	lsls	r3, r3, #8
 8004572:	b21a      	sxth	r2, r3
 8004574:	7bbb      	ldrb	r3, [r7, #14]
 8004576:	b21b      	sxth	r3, r3
 8004578:	4313      	orrs	r3, r2
 800457a:	b21a      	sxth	r2, r3
 800457c:	4b24      	ldr	r3, [pc, #144]	@ (8004610 <BMP280_calibrationData+0x150>)
 800457e:	801a      	strh	r2, [r3, #0]
	dig_P4 = (Buffer[13]<<8)|Buffer[12];
 8004580:	7c7b      	ldrb	r3, [r7, #17]
 8004582:	021b      	lsls	r3, r3, #8
 8004584:	b21a      	sxth	r2, r3
 8004586:	7c3b      	ldrb	r3, [r7, #16]
 8004588:	b21b      	sxth	r3, r3
 800458a:	4313      	orrs	r3, r2
 800458c:	b21a      	sxth	r2, r3
 800458e:	4b21      	ldr	r3, [pc, #132]	@ (8004614 <BMP280_calibrationData+0x154>)
 8004590:	801a      	strh	r2, [r3, #0]
	dig_P5 = (Buffer[15]<<8)|Buffer[14];
 8004592:	7cfb      	ldrb	r3, [r7, #19]
 8004594:	021b      	lsls	r3, r3, #8
 8004596:	b21a      	sxth	r2, r3
 8004598:	7cbb      	ldrb	r3, [r7, #18]
 800459a:	b21b      	sxth	r3, r3
 800459c:	4313      	orrs	r3, r2
 800459e:	b21a      	sxth	r2, r3
 80045a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004618 <BMP280_calibrationData+0x158>)
 80045a2:	801a      	strh	r2, [r3, #0]
	dig_P6 = (Buffer[17]<<8)|Buffer[16];
 80045a4:	7d7b      	ldrb	r3, [r7, #21]
 80045a6:	021b      	lsls	r3, r3, #8
 80045a8:	b21a      	sxth	r2, r3
 80045aa:	7d3b      	ldrb	r3, [r7, #20]
 80045ac:	b21b      	sxth	r3, r3
 80045ae:	4313      	orrs	r3, r2
 80045b0:	b21a      	sxth	r2, r3
 80045b2:	4b1a      	ldr	r3, [pc, #104]	@ (800461c <BMP280_calibrationData+0x15c>)
 80045b4:	801a      	strh	r2, [r3, #0]
	dig_P7 = (Buffer[19]<<8)|Buffer[18];
 80045b6:	7dfb      	ldrb	r3, [r7, #23]
 80045b8:	021b      	lsls	r3, r3, #8
 80045ba:	b21a      	sxth	r2, r3
 80045bc:	7dbb      	ldrb	r3, [r7, #22]
 80045be:	b21b      	sxth	r3, r3
 80045c0:	4313      	orrs	r3, r2
 80045c2:	b21a      	sxth	r2, r3
 80045c4:	4b16      	ldr	r3, [pc, #88]	@ (8004620 <BMP280_calibrationData+0x160>)
 80045c6:	801a      	strh	r2, [r3, #0]
	dig_P8 = (Buffer[21]<<8)|Buffer[20];
 80045c8:	7e7b      	ldrb	r3, [r7, #25]
 80045ca:	021b      	lsls	r3, r3, #8
 80045cc:	b21a      	sxth	r2, r3
 80045ce:	7e3b      	ldrb	r3, [r7, #24]
 80045d0:	b21b      	sxth	r3, r3
 80045d2:	4313      	orrs	r3, r2
 80045d4:	b21a      	sxth	r2, r3
 80045d6:	4b13      	ldr	r3, [pc, #76]	@ (8004624 <BMP280_calibrationData+0x164>)
 80045d8:	801a      	strh	r2, [r3, #0]
	dig_P9 = (Buffer[23]<<8)|Buffer[22];
 80045da:	7efb      	ldrb	r3, [r7, #27]
 80045dc:	021b      	lsls	r3, r3, #8
 80045de:	b21a      	sxth	r2, r3
 80045e0:	7ebb      	ldrb	r3, [r7, #26]
 80045e2:	b21b      	sxth	r3, r3
 80045e4:	4313      	orrs	r3, r2
 80045e6:	b21a      	sxth	r2, r3
 80045e8:	4b0f      	ldr	r3, [pc, #60]	@ (8004628 <BMP280_calibrationData+0x168>)
 80045ea:	801a      	strh	r2, [r3, #0]
}
 80045ec:	bf00      	nop
 80045ee:	3720      	adds	r7, #32
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	58020400 	.word	0x58020400
 80045f8:	24000f64 	.word	0x24000f64
 80045fc:	24001538 	.word	0x24001538
 8004600:	2400153c 	.word	0x2400153c
 8004604:	2400153e 	.word	0x2400153e
 8004608:	2400153a 	.word	0x2400153a
 800460c:	24001540 	.word	0x24001540
 8004610:	24001542 	.word	0x24001542
 8004614:	24001544 	.word	0x24001544
 8004618:	24001546 	.word	0x24001546
 800461c:	24001548 	.word	0x24001548
 8004620:	2400154a 	.word	0x2400154a
 8004624:	2400154c 	.word	0x2400154c
 8004628:	2400154e 	.word	0x2400154e

0800462c <BMP280_readRawValues>:

void BMP280_readRawValues(void){
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
	uint8_t Address = press_msb;
 8004632:	23f7      	movs	r3, #247	@ 0xf7
 8004634:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[6] = {0};
 8004636:	2300      	movs	r3, #0
 8004638:	603b      	str	r3, [r7, #0]
 800463a:	2300      	movs	r3, #0
 800463c:	80bb      	strh	r3, [r7, #4]
	BMP280_select();
 800463e:	2200      	movs	r2, #0
 8004640:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004644:	4817      	ldr	r0, [pc, #92]	@ (80046a4 <BMP280_readRawValues+0x78>)
 8004646:	f005 fe39 	bl	800a2bc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 800464a:	1df9      	adds	r1, r7, #7
 800464c:	2364      	movs	r3, #100	@ 0x64
 800464e:	2201      	movs	r2, #1
 8004650:	4815      	ldr	r0, [pc, #84]	@ (80046a8 <BMP280_readRawValues+0x7c>)
 8004652:	f008 febf 	bl	800d3d4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 6, 100);
 8004656:	4639      	mov	r1, r7
 8004658:	2364      	movs	r3, #100	@ 0x64
 800465a:	2206      	movs	r2, #6
 800465c:	4812      	ldr	r0, [pc, #72]	@ (80046a8 <BMP280_readRawValues+0x7c>)
 800465e:	f009 f8a7 	bl	800d7b0 <HAL_SPI_Receive>
	BMP280_unselect();
 8004662:	2201      	movs	r2, #1
 8004664:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004668:	480e      	ldr	r0, [pc, #56]	@ (80046a4 <BMP280_readRawValues+0x78>)
 800466a:	f005 fe27 	bl	800a2bc <HAL_GPIO_WritePin>

	P_raw = (Buffer[0]<<12)|(Buffer[1]<<4)|(Buffer[2]>>4);
 800466e:	783b      	ldrb	r3, [r7, #0]
 8004670:	031a      	lsls	r2, r3, #12
 8004672:	787b      	ldrb	r3, [r7, #1]
 8004674:	011b      	lsls	r3, r3, #4
 8004676:	4313      	orrs	r3, r2
 8004678:	78ba      	ldrb	r2, [r7, #2]
 800467a:	0912      	lsrs	r2, r2, #4
 800467c:	b2d2      	uxtb	r2, r2
 800467e:	4313      	orrs	r3, r2
 8004680:	4a0a      	ldr	r2, [pc, #40]	@ (80046ac <BMP280_readRawValues+0x80>)
 8004682:	6013      	str	r3, [r2, #0]
	T_raw = (Buffer[3]<<12)|(Buffer[4]<<4)|(Buffer[5]>>4);
 8004684:	78fb      	ldrb	r3, [r7, #3]
 8004686:	031a      	lsls	r2, r3, #12
 8004688:	793b      	ldrb	r3, [r7, #4]
 800468a:	011b      	lsls	r3, r3, #4
 800468c:	4313      	orrs	r3, r2
 800468e:	797a      	ldrb	r2, [r7, #5]
 8004690:	0912      	lsrs	r2, r2, #4
 8004692:	b2d2      	uxtb	r2, r2
 8004694:	4313      	orrs	r3, r2
 8004696:	4a06      	ldr	r2, [pc, #24]	@ (80046b0 <BMP280_readRawValues+0x84>)
 8004698:	6013      	str	r3, [r2, #0]
}
 800469a:	bf00      	nop
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	58020400 	.word	0x58020400
 80046a8:	24000f64 	.word	0x24000f64
 80046ac:	24001554 	.word	0x24001554
 80046b0:	24001550 	.word	0x24001550

080046b4 <BMP280_measureT>:

int32_t BMP280_measureT(int32_t adc_T){
 80046b4:	b480      	push	{r7}
 80046b6:	b087      	sub	sp, #28
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 =  ((((T_raw>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 80046bc:	4b1a      	ldr	r3, [pc, #104]	@ (8004728 <BMP280_measureT+0x74>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	10da      	asrs	r2, r3, #3
 80046c2:	4b1a      	ldr	r3, [pc, #104]	@ (800472c <BMP280_measureT+0x78>)
 80046c4:	881b      	ldrh	r3, [r3, #0]
 80046c6:	005b      	lsls	r3, r3, #1
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	4a19      	ldr	r2, [pc, #100]	@ (8004730 <BMP280_measureT+0x7c>)
 80046cc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80046d0:	fb02 f303 	mul.w	r3, r2, r3
 80046d4:	12db      	asrs	r3, r3, #11
 80046d6:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	111b      	asrs	r3, r3, #4
 80046dc:	4a13      	ldr	r2, [pc, #76]	@ (800472c <BMP280_measureT+0x78>)
 80046de:	8812      	ldrh	r2, [r2, #0]
 80046e0:	1a9b      	subs	r3, r3, r2
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	1112      	asrs	r2, r2, #4
 80046e6:	4911      	ldr	r1, [pc, #68]	@ (800472c <BMP280_measureT+0x78>)
 80046e8:	8809      	ldrh	r1, [r1, #0]
 80046ea:	1a52      	subs	r2, r2, r1
 80046ec:	fb02 f303 	mul.w	r3, r2, r3
 80046f0:	131b      	asrs	r3, r3, #12
 80046f2:	4a10      	ldr	r2, [pc, #64]	@ (8004734 <BMP280_measureT+0x80>)
 80046f4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80046f8:	fb02 f303 	mul.w	r3, r2, r3
 80046fc:	139b      	asrs	r3, r3, #14
 80046fe:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	4413      	add	r3, r2
 8004706:	4a0c      	ldr	r2, [pc, #48]	@ (8004738 <BMP280_measureT+0x84>)
 8004708:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800470a:	4b0b      	ldr	r3, [pc, #44]	@ (8004738 <BMP280_measureT+0x84>)
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	4613      	mov	r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	4413      	add	r3, r2
 8004714:	3380      	adds	r3, #128	@ 0x80
 8004716:	121b      	asrs	r3, r3, #8
 8004718:	60fb      	str	r3, [r7, #12]
	return T;
 800471a:	68fb      	ldr	r3, [r7, #12]
}
 800471c:	4618      	mov	r0, r3
 800471e:	371c      	adds	r7, #28
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr
 8004728:	24001550 	.word	0x24001550
 800472c:	24001538 	.word	0x24001538
 8004730:	2400153c 	.word	0x2400153c
 8004734:	2400153e 	.word	0x2400153e
 8004738:	24001558 	.word	0x24001558

0800473c <BMP280_measureP>:

uint32_t BMP280_measureP(int32_t adc_P){
 800473c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004740:	b0ca      	sub	sp, #296	@ 0x128
 8004742:	af00      	add	r7, sp, #0
 8004744:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8004748:	4baf      	ldr	r3, [pc, #700]	@ (8004a08 <BMP280_measureP+0x2cc>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	17da      	asrs	r2, r3, #31
 800474e:	461c      	mov	r4, r3
 8004750:	4615      	mov	r5, r2
 8004752:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8004756:	f145 3bff 	adc.w	fp, r5, #4294967295
 800475a:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 800475e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8004762:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004766:	fb03 f102 	mul.w	r1, r3, r2
 800476a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800476e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004772:	fb02 f303 	mul.w	r3, r2, r3
 8004776:	18ca      	adds	r2, r1, r3
 8004778:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800477c:	fba3 8903 	umull	r8, r9, r3, r3
 8004780:	eb02 0309 	add.w	r3, r2, r9
 8004784:	4699      	mov	r9, r3
 8004786:	4ba1      	ldr	r3, [pc, #644]	@ (8004a0c <BMP280_measureP+0x2d0>)
 8004788:	f9b3 3000 	ldrsh.w	r3, [r3]
 800478c:	b21b      	sxth	r3, r3
 800478e:	17da      	asrs	r2, r3, #31
 8004790:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004794:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004798:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800479c:	4603      	mov	r3, r0
 800479e:	fb03 f209 	mul.w	r2, r3, r9
 80047a2:	460b      	mov	r3, r1
 80047a4:	fb08 f303 	mul.w	r3, r8, r3
 80047a8:	4413      	add	r3, r2
 80047aa:	4602      	mov	r2, r0
 80047ac:	fba8 1202 	umull	r1, r2, r8, r2
 80047b0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80047b4:	460a      	mov	r2, r1
 80047b6:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 80047ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80047be:	4413      	add	r3, r2
 80047c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80047c4:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 80047c8:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 80047cc:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 80047d0:	4b8f      	ldr	r3, [pc, #572]	@ (8004a10 <BMP280_measureP+0x2d4>)
 80047d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047d6:	b21b      	sxth	r3, r3
 80047d8:	17da      	asrs	r2, r3, #31
 80047da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80047de:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80047e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80047e6:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80047ea:	462a      	mov	r2, r5
 80047ec:	fb02 f203 	mul.w	r2, r2, r3
 80047f0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80047f4:	4621      	mov	r1, r4
 80047f6:	fb01 f303 	mul.w	r3, r1, r3
 80047fa:	441a      	add	r2, r3
 80047fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004800:	4621      	mov	r1, r4
 8004802:	fba3 1301 	umull	r1, r3, r3, r1
 8004806:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800480a:	460b      	mov	r3, r1
 800480c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004810:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004814:	18d3      	adds	r3, r2, r3
 8004816:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800481a:	f04f 0000 	mov.w	r0, #0
 800481e:	f04f 0100 	mov.w	r1, #0
 8004822:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8004826:	462b      	mov	r3, r5
 8004828:	0459      	lsls	r1, r3, #17
 800482a:	4623      	mov	r3, r4
 800482c:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8004830:	4623      	mov	r3, r4
 8004832:	0458      	lsls	r0, r3, #17
 8004834:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8004838:	1814      	adds	r4, r2, r0
 800483a:	643c      	str	r4, [r7, #64]	@ 0x40
 800483c:	414b      	adcs	r3, r1
 800483e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004840:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8004844:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8004848:	4b72      	ldr	r3, [pc, #456]	@ (8004a14 <BMP280_measureP+0x2d8>)
 800484a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800484e:	b21b      	sxth	r3, r3
 8004850:	17da      	asrs	r2, r3, #31
 8004852:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004856:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800485a:	f04f 0000 	mov.w	r0, #0
 800485e:	f04f 0100 	mov.w	r1, #0
 8004862:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004866:	00d9      	lsls	r1, r3, #3
 8004868:	2000      	movs	r0, #0
 800486a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800486e:	1814      	adds	r4, r2, r0
 8004870:	63bc      	str	r4, [r7, #56]	@ 0x38
 8004872:	414b      	adcs	r3, r1
 8004874:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004876:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800487a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 800487e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8004882:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004886:	fb03 f102 	mul.w	r1, r3, r2
 800488a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800488e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004892:	fb02 f303 	mul.w	r3, r2, r3
 8004896:	18ca      	adds	r2, r1, r3
 8004898:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800489c:	fba3 1303 	umull	r1, r3, r3, r3
 80048a0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80048a4:	460b      	mov	r3, r1
 80048a6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80048aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048ae:	18d3      	adds	r3, r2, r3
 80048b0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80048b4:	4b58      	ldr	r3, [pc, #352]	@ (8004a18 <BMP280_measureP+0x2dc>)
 80048b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048ba:	b21b      	sxth	r3, r3
 80048bc:	17da      	asrs	r2, r3, #31
 80048be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80048c2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80048c6:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80048ca:	462b      	mov	r3, r5
 80048cc:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80048d0:	4642      	mov	r2, r8
 80048d2:	fb02 f203 	mul.w	r2, r2, r3
 80048d6:	464b      	mov	r3, r9
 80048d8:	4621      	mov	r1, r4
 80048da:	fb01 f303 	mul.w	r3, r1, r3
 80048de:	4413      	add	r3, r2
 80048e0:	4622      	mov	r2, r4
 80048e2:	4641      	mov	r1, r8
 80048e4:	fba2 1201 	umull	r1, r2, r2, r1
 80048e8:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80048ec:	460a      	mov	r2, r1
 80048ee:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 80048f2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80048f6:	4413      	add	r3, r2
 80048f8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80048fc:	f04f 0000 	mov.w	r0, #0
 8004900:	f04f 0100 	mov.w	r1, #0
 8004904:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8004908:	4623      	mov	r3, r4
 800490a:	0a18      	lsrs	r0, r3, #8
 800490c:	462b      	mov	r3, r5
 800490e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8004912:	462b      	mov	r3, r5
 8004914:	1219      	asrs	r1, r3, #8
 8004916:	4b41      	ldr	r3, [pc, #260]	@ (8004a1c <BMP280_measureP+0x2e0>)
 8004918:	f9b3 3000 	ldrsh.w	r3, [r3]
 800491c:	b21b      	sxth	r3, r3
 800491e:	17da      	asrs	r2, r3, #31
 8004920:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004924:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004928:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800492c:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8004930:	464a      	mov	r2, r9
 8004932:	fb02 f203 	mul.w	r2, r2, r3
 8004936:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800493a:	4644      	mov	r4, r8
 800493c:	fb04 f303 	mul.w	r3, r4, r3
 8004940:	441a      	add	r2, r3
 8004942:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004946:	4644      	mov	r4, r8
 8004948:	fba3 4304 	umull	r4, r3, r3, r4
 800494c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004950:	4623      	mov	r3, r4
 8004952:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004956:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800495a:	18d3      	adds	r3, r2, r3
 800495c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004960:	f04f 0200 	mov.w	r2, #0
 8004964:	f04f 0300 	mov.w	r3, #0
 8004968:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 800496c:	464c      	mov	r4, r9
 800496e:	0323      	lsls	r3, r4, #12
 8004970:	4644      	mov	r4, r8
 8004972:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8004976:	4644      	mov	r4, r8
 8004978:	0322      	lsls	r2, r4, #12
 800497a:	1884      	adds	r4, r0, r2
 800497c:	633c      	str	r4, [r7, #48]	@ 0x30
 800497e:	eb41 0303 	adc.w	r3, r1, r3
 8004982:	637b      	str	r3, [r7, #52]	@ 0x34
 8004984:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8004988:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 800498c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8004990:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8004994:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8004998:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800499c:	4b20      	ldr	r3, [pc, #128]	@ (8004a20 <BMP280_measureP+0x2e4>)
 800499e:	881b      	ldrh	r3, [r3, #0]
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	2200      	movs	r2, #0
 80049a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80049a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80049ac:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80049b0:	462b      	mov	r3, r5
 80049b2:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80049b6:	4642      	mov	r2, r8
 80049b8:	fb02 f203 	mul.w	r2, r2, r3
 80049bc:	464b      	mov	r3, r9
 80049be:	4621      	mov	r1, r4
 80049c0:	fb01 f303 	mul.w	r3, r1, r3
 80049c4:	4413      	add	r3, r2
 80049c6:	4622      	mov	r2, r4
 80049c8:	4641      	mov	r1, r8
 80049ca:	fba2 1201 	umull	r1, r2, r2, r1
 80049ce:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80049d2:	460a      	mov	r2, r1
 80049d4:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 80049d8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80049dc:	4413      	add	r3, r2
 80049de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80049e2:	f04f 0200 	mov.w	r2, #0
 80049e6:	f04f 0300 	mov.w	r3, #0
 80049ea:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 80049ee:	4629      	mov	r1, r5
 80049f0:	104a      	asrs	r2, r1, #1
 80049f2:	4629      	mov	r1, r5
 80049f4:	17cb      	asrs	r3, r1, #31
 80049f6:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 80049fa:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80049fe:	4313      	orrs	r3, r2
 8004a00:	d110      	bne.n	8004a24 <BMP280_measureP+0x2e8>
	{
	return 0;
 8004a02:	2300      	movs	r3, #0
 8004a04:	e154      	b.n	8004cb0 <BMP280_measureP+0x574>
 8004a06:	bf00      	nop
 8004a08:	24001558 	.word	0x24001558
 8004a0c:	24001548 	.word	0x24001548
 8004a10:	24001546 	.word	0x24001546
 8004a14:	24001544 	.word	0x24001544
 8004a18:	24001542 	.word	0x24001542
 8004a1c:	24001540 	.word	0x24001540
 8004a20:	2400153a 	.word	0x2400153a
	}
	p = 1048576-adc_P;
 8004a24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a28:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8004a2c:	17da      	asrs	r2, r3, #31
 8004a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a30:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a32:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8004a36:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8004a3a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004a3e:	105b      	asrs	r3, r3, #1
 8004a40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004a44:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004a48:	07db      	lsls	r3, r3, #31
 8004a4a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a4e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8004a52:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8004a56:	4621      	mov	r1, r4
 8004a58:	1a89      	subs	r1, r1, r2
 8004a5a:	67b9      	str	r1, [r7, #120]	@ 0x78
 8004a5c:	4629      	mov	r1, r5
 8004a5e:	eb61 0303 	sbc.w	r3, r1, r3
 8004a62:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004a64:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004a68:	4622      	mov	r2, r4
 8004a6a:	462b      	mov	r3, r5
 8004a6c:	1891      	adds	r1, r2, r2
 8004a6e:	6239      	str	r1, [r7, #32]
 8004a70:	415b      	adcs	r3, r3
 8004a72:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a74:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a78:	4621      	mov	r1, r4
 8004a7a:	1851      	adds	r1, r2, r1
 8004a7c:	61b9      	str	r1, [r7, #24]
 8004a7e:	4629      	mov	r1, r5
 8004a80:	414b      	adcs	r3, r1
 8004a82:	61fb      	str	r3, [r7, #28]
 8004a84:	f04f 0200 	mov.w	r2, #0
 8004a88:	f04f 0300 	mov.w	r3, #0
 8004a8c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8004a90:	4649      	mov	r1, r9
 8004a92:	018b      	lsls	r3, r1, #6
 8004a94:	4641      	mov	r1, r8
 8004a96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a9a:	4641      	mov	r1, r8
 8004a9c:	018a      	lsls	r2, r1, #6
 8004a9e:	4641      	mov	r1, r8
 8004aa0:	1889      	adds	r1, r1, r2
 8004aa2:	6139      	str	r1, [r7, #16]
 8004aa4:	4649      	mov	r1, r9
 8004aa6:	eb43 0101 	adc.w	r1, r3, r1
 8004aaa:	6179      	str	r1, [r7, #20]
 8004aac:	f04f 0200 	mov.w	r2, #0
 8004ab0:	f04f 0300 	mov.w	r3, #0
 8004ab4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8004ab8:	4649      	mov	r1, r9
 8004aba:	008b      	lsls	r3, r1, #2
 8004abc:	4641      	mov	r1, r8
 8004abe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ac2:	4641      	mov	r1, r8
 8004ac4:	008a      	lsls	r2, r1, #2
 8004ac6:	4610      	mov	r0, r2
 8004ac8:	4619      	mov	r1, r3
 8004aca:	4603      	mov	r3, r0
 8004acc:	4622      	mov	r2, r4
 8004ace:	189b      	adds	r3, r3, r2
 8004ad0:	60bb      	str	r3, [r7, #8]
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	462a      	mov	r2, r5
 8004ad6:	eb42 0303 	adc.w	r3, r2, r3
 8004ada:	60fb      	str	r3, [r7, #12]
 8004adc:	f04f 0200 	mov.w	r2, #0
 8004ae0:	f04f 0300 	mov.w	r3, #0
 8004ae4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8004ae8:	4649      	mov	r1, r9
 8004aea:	008b      	lsls	r3, r1, #2
 8004aec:	4641      	mov	r1, r8
 8004aee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004af2:	4641      	mov	r1, r8
 8004af4:	008a      	lsls	r2, r1, #2
 8004af6:	4610      	mov	r0, r2
 8004af8:	4619      	mov	r1, r3
 8004afa:	4603      	mov	r3, r0
 8004afc:	4622      	mov	r2, r4
 8004afe:	189b      	adds	r3, r3, r2
 8004b00:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b02:	462b      	mov	r3, r5
 8004b04:	460a      	mov	r2, r1
 8004b06:	eb42 0303 	adc.w	r3, r2, r3
 8004b0a:	677b      	str	r3, [r7, #116]	@ 0x74
 8004b0c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8004b10:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8004b14:	f7fb fe08 	bl	8000728 <__aeabi_ldivmod>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8004b20:	4b66      	ldr	r3, [pc, #408]	@ (8004cbc <BMP280_measureP+0x580>)
 8004b22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b26:	b21b      	sxth	r3, r3
 8004b28:	17da      	asrs	r2, r3, #31
 8004b2a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b2c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004b2e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8004b32:	f04f 0000 	mov.w	r0, #0
 8004b36:	f04f 0100 	mov.w	r1, #0
 8004b3a:	0b50      	lsrs	r0, r2, #13
 8004b3c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8004b40:	1359      	asrs	r1, r3, #13
 8004b42:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8004b46:	462b      	mov	r3, r5
 8004b48:	fb00 f203 	mul.w	r2, r0, r3
 8004b4c:	4623      	mov	r3, r4
 8004b4e:	fb03 f301 	mul.w	r3, r3, r1
 8004b52:	4413      	add	r3, r2
 8004b54:	4622      	mov	r2, r4
 8004b56:	fba2 1200 	umull	r1, r2, r2, r0
 8004b5a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004b5e:	460a      	mov	r2, r1
 8004b60:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8004b64:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004b68:	4413      	add	r3, r2
 8004b6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004b6e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8004b72:	f04f 0000 	mov.w	r0, #0
 8004b76:	f04f 0100 	mov.w	r1, #0
 8004b7a:	0b50      	lsrs	r0, r2, #13
 8004b7c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8004b80:	1359      	asrs	r1, r3, #13
 8004b82:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8004b86:	462b      	mov	r3, r5
 8004b88:	fb00 f203 	mul.w	r2, r0, r3
 8004b8c:	4623      	mov	r3, r4
 8004b8e:	fb03 f301 	mul.w	r3, r3, r1
 8004b92:	4413      	add	r3, r2
 8004b94:	4622      	mov	r2, r4
 8004b96:	fba2 1200 	umull	r1, r2, r2, r0
 8004b9a:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004b9e:	460a      	mov	r2, r1
 8004ba0:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8004ba4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8004ba8:	4413      	add	r3, r2
 8004baa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004bae:	f04f 0200 	mov.w	r2, #0
 8004bb2:	f04f 0300 	mov.w	r3, #0
 8004bb6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8004bba:	4621      	mov	r1, r4
 8004bbc:	0e4a      	lsrs	r2, r1, #25
 8004bbe:	4629      	mov	r1, r5
 8004bc0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8004bc4:	4629      	mov	r1, r5
 8004bc6:	164b      	asrs	r3, r1, #25
 8004bc8:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8004bcc:	4b3c      	ldr	r3, [pc, #240]	@ (8004cc0 <BMP280_measureP+0x584>)
 8004bce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004bd2:	b21b      	sxth	r3, r3
 8004bd4:	17da      	asrs	r2, r3, #31
 8004bd6:	663b      	str	r3, [r7, #96]	@ 0x60
 8004bd8:	667a      	str	r2, [r7, #100]	@ 0x64
 8004bda:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004bde:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004be2:	462a      	mov	r2, r5
 8004be4:	fb02 f203 	mul.w	r2, r2, r3
 8004be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bec:	4621      	mov	r1, r4
 8004bee:	fb01 f303 	mul.w	r3, r1, r3
 8004bf2:	4413      	add	r3, r2
 8004bf4:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8004bf8:	4621      	mov	r1, r4
 8004bfa:	fba2 1201 	umull	r1, r2, r2, r1
 8004bfe:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8004c02:	460a      	mov	r2, r1
 8004c04:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8004c08:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004c12:	f04f 0200 	mov.w	r2, #0
 8004c16:	f04f 0300 	mov.w	r3, #0
 8004c1a:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8004c1e:	4621      	mov	r1, r4
 8004c20:	0cca      	lsrs	r2, r1, #19
 8004c22:	4629      	mov	r1, r5
 8004c24:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8004c28:	4629      	mov	r1, r5
 8004c2a:	14cb      	asrs	r3, r1, #19
 8004c2c:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8004c30:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8004c34:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8004c38:	1884      	adds	r4, r0, r2
 8004c3a:	65bc      	str	r4, [r7, #88]	@ 0x58
 8004c3c:	eb41 0303 	adc.w	r3, r1, r3
 8004c40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c42:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8004c46:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8004c4a:	4621      	mov	r1, r4
 8004c4c:	1889      	adds	r1, r1, r2
 8004c4e:	6539      	str	r1, [r7, #80]	@ 0x50
 8004c50:	4629      	mov	r1, r5
 8004c52:	eb43 0101 	adc.w	r1, r3, r1
 8004c56:	6579      	str	r1, [r7, #84]	@ 0x54
 8004c58:	f04f 0000 	mov.w	r0, #0
 8004c5c:	f04f 0100 	mov.w	r1, #0
 8004c60:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8004c64:	4623      	mov	r3, r4
 8004c66:	0a18      	lsrs	r0, r3, #8
 8004c68:	462b      	mov	r3, r5
 8004c6a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8004c6e:	462b      	mov	r3, r5
 8004c70:	1219      	asrs	r1, r3, #8
 8004c72:	4b14      	ldr	r3, [pc, #80]	@ (8004cc4 <BMP280_measureP+0x588>)
 8004c74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c78:	b21b      	sxth	r3, r3
 8004c7a:	17da      	asrs	r2, r3, #31
 8004c7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c7e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004c80:	f04f 0200 	mov.w	r2, #0
 8004c84:	f04f 0300 	mov.w	r3, #0
 8004c88:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8004c8c:	464c      	mov	r4, r9
 8004c8e:	0123      	lsls	r3, r4, #4
 8004c90:	4644      	mov	r4, r8
 8004c92:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8004c96:	4644      	mov	r4, r8
 8004c98:	0122      	lsls	r2, r4, #4
 8004c9a:	1884      	adds	r4, r0, r2
 8004c9c:	603c      	str	r4, [r7, #0]
 8004c9e:	eb41 0303 	adc.w	r3, r1, r3
 8004ca2:	607b      	str	r3, [r7, #4]
 8004ca4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004ca8:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 8004cac:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cbc:	2400154e 	.word	0x2400154e
 8004cc0:	2400154c 	.word	0x2400154c
 8004cc4:	2400154a 	.word	0x2400154a

08004cc8 <BMP280_measureH>:

uint16_t BMP280_measureH(uint32_t Pres, int32_t Temp){
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b088      	sub	sp, #32
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
	double var1, var2, h;

	if(Pres == 0) return 0;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d101      	bne.n	8004cdc <BMP280_measureH+0x14>
 8004cd8:	2300      	movs	r3, #0
 8004cda:	e03d      	b.n	8004d58 <BMP280_measureH+0x90>
	var1 = -log(((double)Pres)/101325);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	ee07 3a90 	vmov	s15, r3
 8004ce2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8004ce6:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8004d60 <BMP280_measureH+0x98>
 8004cea:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004cee:	eeb0 0b46 	vmov.f64	d0, d6
 8004cf2:	f014 fe45 	bl	8019980 <log>
 8004cf6:	eeb0 7b40 	vmov.f64	d7, d0
 8004cfa:	eeb1 7b47 	vneg.f64	d7, d7
 8004cfe:	ed87 7b06 	vstr	d7, [r7, #24]

	if(var1 == 0) return 0;
 8004d02:	ed97 7b06 	vldr	d7, [r7, #24]
 8004d06:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d0e:	d101      	bne.n	8004d14 <BMP280_measureH+0x4c>
 8004d10:	2300      	movs	r3, #0
 8004d12:	e021      	b.n	8004d58 <BMP280_measureH+0x90>
	var2 = 0.0341663/((((double)Temp)/100)+273.15);
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	ee07 3a90 	vmov	s15, r3
 8004d1a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004d1e:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8004d68 <BMP280_measureH+0xa0>
 8004d22:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004d26:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 8004d70 <BMP280_measureH+0xa8>
 8004d2a:	ee37 6b06 	vadd.f64	d6, d7, d6
 8004d2e:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8004d78 <BMP280_measureH+0xb0>
 8004d32:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004d36:	ed87 7b04 	vstr	d7, [r7, #16]
	h = var1/var2;
 8004d3a:	ed97 5b06 	vldr	d5, [r7, #24]
 8004d3e:	ed97 6b04 	vldr	d6, [r7, #16]
 8004d42:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004d46:	ed87 7b02 	vstr	d7, [r7, #8]
	return (uint16_t)h;
 8004d4a:	ed97 7b02 	vldr	d7, [r7, #8]
 8004d4e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004d52:	ee17 3a90 	vmov	r3, s15
 8004d56:	b29b      	uxth	r3, r3
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3720      	adds	r7, #32
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	00000000 	.word	0x00000000
 8004d64:	40f8bcd0 	.word	0x40f8bcd0
 8004d68:	00000000 	.word	0x00000000
 8004d6c:	40590000 	.word	0x40590000
 8004d70:	66666666 	.word	0x66666666
 8004d74:	40711266 	.word	0x40711266
 8004d78:	ca402a92 	.word	0xca402a92
 8004d7c:	3fa17e3e 	.word	0x3fa17e3e

08004d80 <BMP280_init>:

void BMP280_init(void){
 8004d80:	b580      	push	{r7, lr}
 8004d82:	af00      	add	r7, sp, #0
	BMP280_unselect();
 8004d84:	2201      	movs	r2, #1
 8004d86:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004d8a:	480d      	ldr	r0, [pc, #52]	@ (8004dc0 <BMP280_init+0x40>)
 8004d8c:	f005 fa96 	bl	800a2bc <HAL_GPIO_WritePin>
	BMP280_config();
 8004d90:	f7ff fb8a 	bl	80044a8 <BMP280_config>
	BMP280.ID = BMP280_read(0x89);
 8004d94:	2089      	movs	r0, #137	@ 0x89
 8004d96:	f7ff fb59 	bl	800444c <BMP280_read>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	4b09      	ldr	r3, [pc, #36]	@ (8004dc4 <BMP280_init+0x44>)
 8004da0:	701a      	strb	r2, [r3, #0]
	BMP280_calibrationData();
 8004da2:	f7ff fb8d 	bl	80044c0 <BMP280_calibrationData>
	BMP280_readRawValues();
 8004da6:	f7ff fc41 	bl	800462c <BMP280_readRawValues>
	BMP280.Temp_inicial = BMP280_measureT(T_raw);
 8004daa:	4b07      	ldr	r3, [pc, #28]	@ (8004dc8 <BMP280_init+0x48>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7ff fc80 	bl	80046b4 <BMP280_measureT>
 8004db4:	4603      	mov	r3, r0
 8004db6:	4a03      	ldr	r2, [pc, #12]	@ (8004dc4 <BMP280_init+0x44>)
 8004db8:	6093      	str	r3, [r2, #8]
}
 8004dba:	bf00      	nop
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	58020400 	.word	0x58020400
 8004dc4:	24001524 	.word	0x24001524
 8004dc8:	24001550 	.word	0x24001550

08004dcc <BMP280_calculate>:

void BMP280_calculate(void){
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	af00      	add	r7, sp, #0
	//BMP280.ID = 0;
	BMP280.ID = BMP280_read(0x89);
 8004dd0:	2089      	movs	r0, #137	@ 0x89
 8004dd2:	f7ff fb3b 	bl	800444c <BMP280_read>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	461a      	mov	r2, r3
 8004dda:	4b16      	ldr	r3, [pc, #88]	@ (8004e34 <BMP280_calculate+0x68>)
 8004ddc:	701a      	strb	r2, [r3, #0]
	BMP280_readRawValues();
 8004dde:	f7ff fc25 	bl	800462c <BMP280_readRawValues>
	BMP280.Temp = BMP280_measureT(T_raw);
 8004de2:	4b15      	ldr	r3, [pc, #84]	@ (8004e38 <BMP280_calculate+0x6c>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7ff fc64 	bl	80046b4 <BMP280_measureT>
 8004dec:	4603      	mov	r3, r0
 8004dee:	4a11      	ldr	r2, [pc, #68]	@ (8004e34 <BMP280_calculate+0x68>)
 8004df0:	6053      	str	r3, [r2, #4]
	BMP280.Pressure    		= BMP280_measureP(P_raw)/256;
 8004df2:	4b12      	ldr	r3, [pc, #72]	@ (8004e3c <BMP280_calculate+0x70>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7ff fca0 	bl	800473c <BMP280_measureP>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	0a1b      	lsrs	r3, r3, #8
 8004e00:	4a0c      	ldr	r2, [pc, #48]	@ (8004e34 <BMP280_calculate+0x68>)
 8004e02:	60d3      	str	r3, [r2, #12]
	BMP280.Barometric_Altitude = BMP280_measureH(BMP280.Pressure, BMP280.Temp_inicial);
 8004e04:	4b0b      	ldr	r3, [pc, #44]	@ (8004e34 <BMP280_calculate+0x68>)
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	4a0a      	ldr	r2, [pc, #40]	@ (8004e34 <BMP280_calculate+0x68>)
 8004e0a:	6892      	ldr	r2, [r2, #8]
 8004e0c:	4611      	mov	r1, r2
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7ff ff5a 	bl	8004cc8 <BMP280_measureH>
 8004e14:	4603      	mov	r3, r0
 8004e16:	461a      	mov	r2, r3
 8004e18:	4b06      	ldr	r3, [pc, #24]	@ (8004e34 <BMP280_calculate+0x68>)
 8004e1a:	821a      	strh	r2, [r3, #16]

	if(BMP280.Barometric_Altitude > BMP280.Max_Altitude) BMP280.Max_Altitude = BMP280.Barometric_Altitude;
 8004e1c:	4b05      	ldr	r3, [pc, #20]	@ (8004e34 <BMP280_calculate+0x68>)
 8004e1e:	8a1a      	ldrh	r2, [r3, #16]
 8004e20:	4b04      	ldr	r3, [pc, #16]	@ (8004e34 <BMP280_calculate+0x68>)
 8004e22:	8a5b      	ldrh	r3, [r3, #18]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d903      	bls.n	8004e30 <BMP280_calculate+0x64>
 8004e28:	4b02      	ldr	r3, [pc, #8]	@ (8004e34 <BMP280_calculate+0x68>)
 8004e2a:	8a1a      	ldrh	r2, [r3, #16]
 8004e2c:	4b01      	ldr	r3, [pc, #4]	@ (8004e34 <BMP280_calculate+0x68>)
 8004e2e:	825a      	strh	r2, [r3, #18]
}
 8004e30:	bf00      	nop
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	24001524 	.word	0x24001524
 8004e38:	24001550 	.word	0x24001550
 8004e3c:	24001554 	.word	0x24001554

08004e40 <bno055_delay>:

BNO_CurrentState_e BNO_CurrentState = Init;

IMU_t IMU;

void bno055_delay(uint8_t time) {
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	4603      	mov	r3, r0
 8004e48:	71fb      	strb	r3, [r7, #7]
	BNO_DelayCounter += time;
 8004e4a:	4b06      	ldr	r3, [pc, #24]	@ (8004e64 <bno055_delay+0x24>)
 8004e4c:	781a      	ldrb	r2, [r3, #0]
 8004e4e:	79fb      	ldrb	r3, [r7, #7]
 8004e50:	4413      	add	r3, r2
 8004e52:	b2da      	uxtb	r2, r3
 8004e54:	4b03      	ldr	r3, [pc, #12]	@ (8004e64 <bno055_delay+0x24>)
 8004e56:	701a      	strb	r2, [r3, #0]
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr
 8004e64:	2400165f 	.word	0x2400165f

08004e68 <BNO_Read>:

HAL_StatusTypeDef BNO_Read(uint8_t Address,uint8_t Size){
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	4603      	mov	r3, r0
 8004e70:	460a      	mov	r2, r1
 8004e72:	71fb      	strb	r3, [r7, #7]
 8004e74:	4613      	mov	r3, r2
 8004e76:	71bb      	strb	r3, [r7, #6]
	uint8_t ReadCommand[4] = {0xAA, 0x01, Address, Size};
 8004e78:	23aa      	movs	r3, #170	@ 0xaa
 8004e7a:	723b      	strb	r3, [r7, #8]
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	727b      	strb	r3, [r7, #9]
 8004e80:	79fb      	ldrb	r3, [r7, #7]
 8004e82:	72bb      	strb	r3, [r7, #10]
 8004e84:	79bb      	ldrb	r3, [r7, #6]
 8004e86:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef uartError;

	BNO_RxBuffer[0] = Address;
 8004e88:	4a08      	ldr	r2, [pc, #32]	@ (8004eac <BNO_Read+0x44>)
 8004e8a:	79fb      	ldrb	r3, [r7, #7]
 8004e8c:	7013      	strb	r3, [r2, #0]

	uartError = HAL_UART_Transmit(&huart3, ReadCommand, 4,100);
 8004e8e:	f107 0108 	add.w	r1, r7, #8
 8004e92:	2364      	movs	r3, #100	@ 0x64
 8004e94:	2204      	movs	r2, #4
 8004e96:	4806      	ldr	r0, [pc, #24]	@ (8004eb0 <BNO_Read+0x48>)
 8004e98:	f00a fc36 	bl	800f708 <HAL_UART_Transmit>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	73fb      	strb	r3, [r7, #15]
	return uartError;
 8004ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	2400155c 	.word	0x2400155c
 8004eb0:	24001294 	.word	0x24001294

08004eb4 <BNO_Write>:

HAL_StatusTypeDef BNO_Write(uint8_t Address,uint8_t Data){
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	4603      	mov	r3, r0
 8004ebc:	460a      	mov	r2, r1
 8004ebe:	71fb      	strb	r3, [r7, #7]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	71bb      	strb	r3, [r7, #6]
	uint8_t WriteCommand[5];
	HAL_StatusTypeDef uartError;

	WriteCommand[0] = 0xAA;
 8004ec4:	23aa      	movs	r3, #170	@ 0xaa
 8004ec6:	723b      	strb	r3, [r7, #8]
	WriteCommand[1] = 0x00;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	727b      	strb	r3, [r7, #9]
	WriteCommand[2] = Address;
 8004ecc:	79fb      	ldrb	r3, [r7, #7]
 8004ece:	72bb      	strb	r3, [r7, #10]
	WriteCommand[3] = 1;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	72fb      	strb	r3, [r7, #11]
	WriteCommand[4] = Data;
 8004ed4:	79bb      	ldrb	r3, [r7, #6]
 8004ed6:	733b      	strb	r3, [r7, #12]

	uartError = HAL_UART_Transmit(&huart3, WriteCommand,5,100);
 8004ed8:	f107 0108 	add.w	r1, r7, #8
 8004edc:	2364      	movs	r3, #100	@ 0x64
 8004ede:	2205      	movs	r2, #5
 8004ee0:	4804      	ldr	r0, [pc, #16]	@ (8004ef4 <BNO_Write+0x40>)
 8004ee2:	f00a fc11 	bl	800f708 <HAL_UART_Transmit>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	73fb      	strb	r3, [r7, #15]
	return uartError;
 8004eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	24001294 	.word	0x24001294

08004ef8 <BNO_Write_MB>:

HAL_StatusTypeDef BNO_Write_MB(uint8_t Address,uint8_t Size, uint8_t *pData){
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b0c4      	sub	sp, #272	@ 0x110
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004f02:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004f06:	601a      	str	r2, [r3, #0]
 8004f08:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004f0c:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8004f10:	4602      	mov	r2, r0
 8004f12:	701a      	strb	r2, [r3, #0]
 8004f14:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004f18:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8004f1c:	460a      	mov	r2, r1
 8004f1e:	701a      	strb	r2, [r3, #0]
    uint8_t WriteCommand[255];
    HAL_StatusTypeDef uartError;

    WriteCommand[0] = 0xAA;
 8004f20:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004f24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f28:	22aa      	movs	r2, #170	@ 0xaa
 8004f2a:	701a      	strb	r2, [r3, #0]
    WriteCommand[1] = 0x00;
 8004f2c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004f30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f34:	2200      	movs	r2, #0
 8004f36:	705a      	strb	r2, [r3, #1]
    WriteCommand[2] = Address;
 8004f38:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004f3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f40:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8004f44:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 8004f48:	7812      	ldrb	r2, [r2, #0]
 8004f4a:	709a      	strb	r2, [r3, #2]
    WriteCommand[3] = Size;
 8004f4c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004f50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f54:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8004f58:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8004f5c:	7812      	ldrb	r2, [r2, #0]
 8004f5e:	70da      	strb	r2, [r3, #3]

    for (uint8_t n = 0; n < Size; ++n) {
 8004f60:	2300      	movs	r3, #0
 8004f62:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8004f66:	e015      	b.n	8004f94 <BNO_Write_MB+0x9c>
        WriteCommand[n + 4] = pData[n];
 8004f68:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8004f6c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8004f70:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8004f74:	6812      	ldr	r2, [r2, #0]
 8004f76:	441a      	add	r2, r3
 8004f78:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8004f7c:	3304      	adds	r3, #4
 8004f7e:	7811      	ldrb	r1, [r2, #0]
 8004f80:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8004f84:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8004f88:	54d1      	strb	r1, [r2, r3]
    for (uint8_t n = 0; n < Size; ++n) {
 8004f8a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8004f8e:	3301      	adds	r3, #1
 8004f90:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8004f94:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004f98:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8004f9c:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d3e0      	bcc.n	8004f68 <BNO_Write_MB+0x70>
    }

    uartError = HAL_UART_Transmit(&huart3, WriteCommand, (Size + 4),100);
 8004fa6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004faa:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	3304      	adds	r3, #4
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	f107 010c 	add.w	r1, r7, #12
 8004fba:	2364      	movs	r3, #100	@ 0x64
 8004fbc:	4806      	ldr	r0, [pc, #24]	@ (8004fd8 <BNO_Write_MB+0xe0>)
 8004fbe:	f00a fba3 	bl	800f708 <HAL_UART_Transmit>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
    return uartError;
 8004fc8:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	24001294 	.word	0x24001294

08004fdc <BNO_Page0Adress>:

void BNO_Page0Adress(void){
 8004fdc:	b480      	push	{r7}
 8004fde:	af00      	add	r7, sp, #0
	switch (BNO_RxBuffer[0]) {
 8004fe0:	4ba6      	ldr	r3, [pc, #664]	@ (800527c <BNO_Page0Adress+0x2a0>)
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	2b55      	cmp	r3, #85	@ 0x55
 8004fe6:	f300 8247 	bgt.w	8005478 <BNO_Page0Adress+0x49c>
 8004fea:	2b35      	cmp	r3, #53	@ 0x35
 8004fec:	da0a      	bge.n	8005004 <BNO_Page0Adress+0x28>
 8004fee:	2b08      	cmp	r3, #8
 8004ff0:	f000 814a 	beq.w	8005288 <BNO_Page0Adress+0x2ac>
 8004ff4:	2b08      	cmp	r3, #8
 8004ff6:	f300 823f 	bgt.w	8005478 <BNO_Page0Adress+0x49c>
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d04c      	beq.n	8005098 <BNO_Page0Adress+0xbc>
 8004ffe:	2b07      	cmp	r3, #7
 8005000:	d064      	beq.n	80050cc <BNO_Page0Adress+0xf0>
			IMU.Roll = ((float)((int16_t)((BNO_RxBuffer[24] << 8) | BNO_RxBuffer[23])))/16;

			BNO_ErrorHandler = ReadSucces;
			break;
		default:
			break;
 8005002:	e239      	b.n	8005478 <BNO_Page0Adress+0x49c>
	switch (BNO_RxBuffer[0]) {
 8005004:	3b35      	subs	r3, #53	@ 0x35
 8005006:	2b20      	cmp	r3, #32
 8005008:	f200 8236 	bhi.w	8005478 <BNO_Page0Adress+0x49c>
 800500c:	a201      	add	r2, pc, #4	@ (adr r2, 8005014 <BNO_Page0Adress+0x38>)
 800500e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005012:	bf00      	nop
 8005014:	08005115 	.word	0x08005115
 8005018:	08005479 	.word	0x08005479
 800501c:	08005479 	.word	0x08005479
 8005020:	08005479 	.word	0x08005479
 8005024:	080050f1 	.word	0x080050f1
 8005028:	08005479 	.word	0x08005479
 800502c:	080050df 	.word	0x080050df
 8005030:	08005479 	.word	0x08005479
 8005034:	08005103 	.word	0x08005103
 8005038:	08005479 	.word	0x08005479
 800503c:	08005479 	.word	0x08005479
 8005040:	08005479 	.word	0x08005479
 8005044:	08005479 	.word	0x08005479
 8005048:	08005479 	.word	0x08005479
 800504c:	08005479 	.word	0x08005479
 8005050:	08005479 	.word	0x08005479
 8005054:	08005479 	.word	0x08005479
 8005058:	08005479 	.word	0x08005479
 800505c:	08005479 	.word	0x08005479
 8005060:	08005479 	.word	0x08005479
 8005064:	08005479 	.word	0x08005479
 8005068:	08005479 	.word	0x08005479
 800506c:	08005479 	.word	0x08005479
 8005070:	08005479 	.word	0x08005479
 8005074:	08005479 	.word	0x08005479
 8005078:	08005479 	.word	0x08005479
 800507c:	08005479 	.word	0x08005479
 8005080:	08005479 	.word	0x08005479
 8005084:	08005479 	.word	0x08005479
 8005088:	08005479 	.word	0x08005479
 800508c:	08005479 	.word	0x08005479
 8005090:	08005479 	.word	0x08005479
 8005094:	0800516d 	.word	0x0800516d
			if(BNO_RxBuffer[1] != 160) return;
 8005098:	4b78      	ldr	r3, [pc, #480]	@ (800527c <BNO_Page0Adress+0x2a0>)
 800509a:	785b      	ldrb	r3, [r3, #1]
 800509c:	2ba0      	cmp	r3, #160	@ 0xa0
 800509e:	f040 81ed 	bne.w	800547c <BNO_Page0Adress+0x4a0>
			IMU.ID = BNO_RxBuffer[1];
 80050a2:	4b76      	ldr	r3, [pc, #472]	@ (800527c <BNO_Page0Adress+0x2a0>)
 80050a4:	785a      	ldrb	r2, [r3, #1]
 80050a6:	4b76      	ldr	r3, [pc, #472]	@ (8005280 <BNO_Page0Adress+0x2a4>)
 80050a8:	701a      	strb	r2, [r3, #0]
			IMU.ACC.ID = BNO_RxBuffer[2];
 80050aa:	4b74      	ldr	r3, [pc, #464]	@ (800527c <BNO_Page0Adress+0x2a0>)
 80050ac:	789a      	ldrb	r2, [r3, #2]
 80050ae:	4b74      	ldr	r3, [pc, #464]	@ (8005280 <BNO_Page0Adress+0x2a4>)
 80050b0:	711a      	strb	r2, [r3, #4]
			IMU.MAG.ID = BNO_RxBuffer[3];
 80050b2:	4b72      	ldr	r3, [pc, #456]	@ (800527c <BNO_Page0Adress+0x2a0>)
 80050b4:	78da      	ldrb	r2, [r3, #3]
 80050b6:	4b72      	ldr	r3, [pc, #456]	@ (8005280 <BNO_Page0Adress+0x2a4>)
 80050b8:	751a      	strb	r2, [r3, #20]
			IMU.GYR.ID = BNO_RxBuffer[4];
 80050ba:	4b70      	ldr	r3, [pc, #448]	@ (800527c <BNO_Page0Adress+0x2a0>)
 80050bc:	791a      	ldrb	r2, [r3, #4]
 80050be:	4b70      	ldr	r3, [pc, #448]	@ (8005280 <BNO_Page0Adress+0x2a4>)
 80050c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			BNO_ErrorHandler = ReadSucces;
 80050c4:	4b6f      	ldr	r3, [pc, #444]	@ (8005284 <BNO_Page0Adress+0x2a8>)
 80050c6:	220b      	movs	r2, #11
 80050c8:	701a      	strb	r2, [r3, #0]
			break;
 80050ca:	e1d8      	b.n	800547e <BNO_Page0Adress+0x4a2>
			IMU.Page = BNO_RxBuffer[1];
 80050cc:	4b6b      	ldr	r3, [pc, #428]	@ (800527c <BNO_Page0Adress+0x2a0>)
 80050ce:	785a      	ldrb	r2, [r3, #1]
 80050d0:	4b6b      	ldr	r3, [pc, #428]	@ (8005280 <BNO_Page0Adress+0x2a4>)
 80050d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			BNO_ErrorHandler = ReadSucces;
 80050d6:	4b6b      	ldr	r3, [pc, #428]	@ (8005284 <BNO_Page0Adress+0x2a8>)
 80050d8:	220b      	movs	r2, #11
 80050da:	701a      	strb	r2, [r3, #0]
			break;
 80050dc:	e1cf      	b.n	800547e <BNO_Page0Adress+0x4a2>
			IMU.Unit_Select = BNO_RxBuffer[1];
 80050de:	4b67      	ldr	r3, [pc, #412]	@ (800527c <BNO_Page0Adress+0x2a0>)
 80050e0:	785a      	ldrb	r2, [r3, #1]
 80050e2:	4b67      	ldr	r3, [pc, #412]	@ (8005280 <BNO_Page0Adress+0x2a4>)
 80050e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
			BNO_ErrorHandler = ReadSucces;
 80050e8:	4b66      	ldr	r3, [pc, #408]	@ (8005284 <BNO_Page0Adress+0x2a8>)
 80050ea:	220b      	movs	r2, #11
 80050ec:	701a      	strb	r2, [r3, #0]
			break;
 80050ee:	e1c6      	b.n	800547e <BNO_Page0Adress+0x4a2>
			IMU.System_Status = BNO_RxBuffer[1];
 80050f0:	4b62      	ldr	r3, [pc, #392]	@ (800527c <BNO_Page0Adress+0x2a0>)
 80050f2:	785a      	ldrb	r2, [r3, #1]
 80050f4:	4b62      	ldr	r3, [pc, #392]	@ (8005280 <BNO_Page0Adress+0x2a4>)
 80050f6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
			BNO_ErrorHandler = ReadSucces;
 80050fa:	4b62      	ldr	r3, [pc, #392]	@ (8005284 <BNO_Page0Adress+0x2a8>)
 80050fc:	220b      	movs	r2, #11
 80050fe:	701a      	strb	r2, [r3, #0]
			break;
 8005100:	e1bd      	b.n	800547e <BNO_Page0Adress+0x4a2>
			IMU.Op_Mode = BNO_RxBuffer[1];
 8005102:	4b5e      	ldr	r3, [pc, #376]	@ (800527c <BNO_Page0Adress+0x2a0>)
 8005104:	785a      	ldrb	r2, [r3, #1]
 8005106:	4b5e      	ldr	r3, [pc, #376]	@ (8005280 <BNO_Page0Adress+0x2a4>)
 8005108:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
			BNO_ErrorHandler = ReadSucces;
 800510c:	4b5d      	ldr	r3, [pc, #372]	@ (8005284 <BNO_Page0Adress+0x2a8>)
 800510e:	220b      	movs	r2, #11
 8005110:	701a      	strb	r2, [r3, #0]
			break;
 8005112:	e1b4      	b.n	800547e <BNO_Page0Adress+0x4a2>
			IMU.CalSatus.Full = BNO_RxBuffer[1];
 8005114:	4b59      	ldr	r3, [pc, #356]	@ (800527c <BNO_Page0Adress+0x2a0>)
 8005116:	785a      	ldrb	r2, [r3, #1]
 8005118:	4b59      	ldr	r3, [pc, #356]	@ (8005280 <BNO_Page0Adress+0x2a4>)
 800511a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			IMU.CalSatus.Sys = (BNO_RxBuffer[1] >> 6) & 0x03;
 800511e:	4b57      	ldr	r3, [pc, #348]	@ (800527c <BNO_Page0Adress+0x2a0>)
 8005120:	785b      	ldrb	r3, [r3, #1]
 8005122:	099b      	lsrs	r3, r3, #6
 8005124:	b2da      	uxtb	r2, r3
 8005126:	4b56      	ldr	r3, [pc, #344]	@ (8005280 <BNO_Page0Adress+0x2a4>)
 8005128:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			IMU.CalSatus.Gyr = (BNO_RxBuffer[1] >> 4) & 0x03;
 800512c:	4b53      	ldr	r3, [pc, #332]	@ (800527c <BNO_Page0Adress+0x2a0>)
 800512e:	785b      	ldrb	r3, [r3, #1]
 8005130:	091b      	lsrs	r3, r3, #4
 8005132:	b2db      	uxtb	r3, r3
 8005134:	f003 0303 	and.w	r3, r3, #3
 8005138:	b2da      	uxtb	r2, r3
 800513a:	4b51      	ldr	r3, [pc, #324]	@ (8005280 <BNO_Page0Adress+0x2a4>)
 800513c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
			IMU.CalSatus.Acc = (BNO_RxBuffer[1] >> 2) & 0x03;
 8005140:	4b4e      	ldr	r3, [pc, #312]	@ (800527c <BNO_Page0Adress+0x2a0>)
 8005142:	785b      	ldrb	r3, [r3, #1]
 8005144:	089b      	lsrs	r3, r3, #2
 8005146:	b2db      	uxtb	r3, r3
 8005148:	f003 0303 	and.w	r3, r3, #3
 800514c:	b2da      	uxtb	r2, r3
 800514e:	4b4c      	ldr	r3, [pc, #304]	@ (8005280 <BNO_Page0Adress+0x2a4>)
 8005150:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
			IMU.CalSatus.Mag = BNO_RxBuffer[1] & 0x03;
 8005154:	4b49      	ldr	r3, [pc, #292]	@ (800527c <BNO_Page0Adress+0x2a0>)
 8005156:	785b      	ldrb	r3, [r3, #1]
 8005158:	f003 0303 	and.w	r3, r3, #3
 800515c:	b2da      	uxtb	r2, r3
 800515e:	4b48      	ldr	r3, [pc, #288]	@ (8005280 <BNO_Page0Adress+0x2a4>)
 8005160:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			BNO_ErrorHandler = ReadSucces;
 8005164:	4b47      	ldr	r3, [pc, #284]	@ (8005284 <BNO_Page0Adress+0x2a8>)
 8005166:	220b      	movs	r2, #11
 8005168:	701a      	strb	r2, [r3, #0]
			break;
 800516a:	e188      	b.n	800547e <BNO_Page0Adress+0x4a2>
			IMU.Calibration_Data.offset.accel.x = (int16_t)((BNO_RxBuffer[2] << 8) | BNO_RxBuffer[1]);
 800516c:	4b43      	ldr	r3, [pc, #268]	@ (800527c <BNO_Page0Adress+0x2a0>)
 800516e:	789b      	ldrb	r3, [r3, #2]
 8005170:	021b      	lsls	r3, r3, #8
 8005172:	b21a      	sxth	r2, r3
 8005174:	4b41      	ldr	r3, [pc, #260]	@ (800527c <BNO_Page0Adress+0x2a0>)
 8005176:	785b      	ldrb	r3, [r3, #1]
 8005178:	b21b      	sxth	r3, r3
 800517a:	4313      	orrs	r3, r2
 800517c:	b21a      	sxth	r2, r3
 800517e:	4b40      	ldr	r3, [pc, #256]	@ (8005280 <BNO_Page0Adress+0x2a4>)
 8005180:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
			IMU.Calibration_Data.offset.accel.y = (int16_t)((BNO_RxBuffer[4] << 8) | BNO_RxBuffer[3]);
 8005184:	4b3d      	ldr	r3, [pc, #244]	@ (800527c <BNO_Page0Adress+0x2a0>)
 8005186:	791b      	ldrb	r3, [r3, #4]
 8005188:	021b      	lsls	r3, r3, #8
 800518a:	b21a      	sxth	r2, r3
 800518c:	4b3b      	ldr	r3, [pc, #236]	@ (800527c <BNO_Page0Adress+0x2a0>)
 800518e:	78db      	ldrb	r3, [r3, #3]
 8005190:	b21b      	sxth	r3, r3
 8005192:	4313      	orrs	r3, r2
 8005194:	b21a      	sxth	r2, r3
 8005196:	4b3a      	ldr	r3, [pc, #232]	@ (8005280 <BNO_Page0Adress+0x2a4>)
 8005198:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
			IMU.Calibration_Data.offset.accel.z = (int16_t)((BNO_RxBuffer[6] << 8) | BNO_RxBuffer[5]);
 800519c:	4b37      	ldr	r3, [pc, #220]	@ (800527c <BNO_Page0Adress+0x2a0>)
 800519e:	799b      	ldrb	r3, [r3, #6]
 80051a0:	021b      	lsls	r3, r3, #8
 80051a2:	b21a      	sxth	r2, r3
 80051a4:	4b35      	ldr	r3, [pc, #212]	@ (800527c <BNO_Page0Adress+0x2a0>)
 80051a6:	795b      	ldrb	r3, [r3, #5]
 80051a8:	b21b      	sxth	r3, r3
 80051aa:	4313      	orrs	r3, r2
 80051ac:	b21a      	sxth	r2, r3
 80051ae:	4b34      	ldr	r3, [pc, #208]	@ (8005280 <BNO_Page0Adress+0x2a4>)
 80051b0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
			IMU.Calibration_Data.offset.mag.x = (int16_t)((BNO_RxBuffer[8] << 8) | BNO_RxBuffer[7]);
 80051b4:	4b31      	ldr	r3, [pc, #196]	@ (800527c <BNO_Page0Adress+0x2a0>)
 80051b6:	7a1b      	ldrb	r3, [r3, #8]
 80051b8:	021b      	lsls	r3, r3, #8
 80051ba:	b21a      	sxth	r2, r3
 80051bc:	4b2f      	ldr	r3, [pc, #188]	@ (800527c <BNO_Page0Adress+0x2a0>)
 80051be:	79db      	ldrb	r3, [r3, #7]
 80051c0:	b21b      	sxth	r3, r3
 80051c2:	4313      	orrs	r3, r2
 80051c4:	b21a      	sxth	r2, r3
 80051c6:	4b2e      	ldr	r3, [pc, #184]	@ (8005280 <BNO_Page0Adress+0x2a4>)
 80051c8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
			IMU.Calibration_Data.offset.mag.y = (int16_t)((BNO_RxBuffer[10] << 8) | BNO_RxBuffer[9]);
 80051cc:	4b2b      	ldr	r3, [pc, #172]	@ (800527c <BNO_Page0Adress+0x2a0>)
 80051ce:	7a9b      	ldrb	r3, [r3, #10]
 80051d0:	021b      	lsls	r3, r3, #8
 80051d2:	b21a      	sxth	r2, r3
 80051d4:	4b29      	ldr	r3, [pc, #164]	@ (800527c <BNO_Page0Adress+0x2a0>)
 80051d6:	7a5b      	ldrb	r3, [r3, #9]
 80051d8:	b21b      	sxth	r3, r3
 80051da:	4313      	orrs	r3, r2
 80051dc:	b21a      	sxth	r2, r3
 80051de:	4b28      	ldr	r3, [pc, #160]	@ (8005280 <BNO_Page0Adress+0x2a4>)
 80051e0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
			IMU.Calibration_Data.offset.mag.z = (int16_t)((BNO_RxBuffer[12] << 8) | BNO_RxBuffer[11]);
 80051e4:	4b25      	ldr	r3, [pc, #148]	@ (800527c <BNO_Page0Adress+0x2a0>)
 80051e6:	7b1b      	ldrb	r3, [r3, #12]
 80051e8:	021b      	lsls	r3, r3, #8
 80051ea:	b21a      	sxth	r2, r3
 80051ec:	4b23      	ldr	r3, [pc, #140]	@ (800527c <BNO_Page0Adress+0x2a0>)
 80051ee:	7adb      	ldrb	r3, [r3, #11]
 80051f0:	b21b      	sxth	r3, r3
 80051f2:	4313      	orrs	r3, r2
 80051f4:	b21a      	sxth	r2, r3
 80051f6:	4b22      	ldr	r3, [pc, #136]	@ (8005280 <BNO_Page0Adress+0x2a4>)
 80051f8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
			IMU.Calibration_Data.offset.gyro.x = (int16_t)((BNO_RxBuffer[14] << 8) | BNO_RxBuffer[13]);
 80051fc:	4b1f      	ldr	r3, [pc, #124]	@ (800527c <BNO_Page0Adress+0x2a0>)
 80051fe:	7b9b      	ldrb	r3, [r3, #14]
 8005200:	021b      	lsls	r3, r3, #8
 8005202:	b21a      	sxth	r2, r3
 8005204:	4b1d      	ldr	r3, [pc, #116]	@ (800527c <BNO_Page0Adress+0x2a0>)
 8005206:	7b5b      	ldrb	r3, [r3, #13]
 8005208:	b21b      	sxth	r3, r3
 800520a:	4313      	orrs	r3, r2
 800520c:	b21a      	sxth	r2, r3
 800520e:	4b1c      	ldr	r3, [pc, #112]	@ (8005280 <BNO_Page0Adress+0x2a4>)
 8005210:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
			IMU.Calibration_Data.offset.gyro.y = (int16_t)((BNO_RxBuffer[16] << 8) | BNO_RxBuffer[15]);
 8005214:	4b19      	ldr	r3, [pc, #100]	@ (800527c <BNO_Page0Adress+0x2a0>)
 8005216:	7c1b      	ldrb	r3, [r3, #16]
 8005218:	021b      	lsls	r3, r3, #8
 800521a:	b21a      	sxth	r2, r3
 800521c:	4b17      	ldr	r3, [pc, #92]	@ (800527c <BNO_Page0Adress+0x2a0>)
 800521e:	7bdb      	ldrb	r3, [r3, #15]
 8005220:	b21b      	sxth	r3, r3
 8005222:	4313      	orrs	r3, r2
 8005224:	b21a      	sxth	r2, r3
 8005226:	4b16      	ldr	r3, [pc, #88]	@ (8005280 <BNO_Page0Adress+0x2a4>)
 8005228:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
			IMU.Calibration_Data.offset.gyro.z = (int16_t)((BNO_RxBuffer[18] << 8) | BNO_RxBuffer[17]);
 800522c:	4b13      	ldr	r3, [pc, #76]	@ (800527c <BNO_Page0Adress+0x2a0>)
 800522e:	7c9b      	ldrb	r3, [r3, #18]
 8005230:	021b      	lsls	r3, r3, #8
 8005232:	b21a      	sxth	r2, r3
 8005234:	4b11      	ldr	r3, [pc, #68]	@ (800527c <BNO_Page0Adress+0x2a0>)
 8005236:	7c5b      	ldrb	r3, [r3, #17]
 8005238:	b21b      	sxth	r3, r3
 800523a:	4313      	orrs	r3, r2
 800523c:	b21a      	sxth	r2, r3
 800523e:	4b10      	ldr	r3, [pc, #64]	@ (8005280 <BNO_Page0Adress+0x2a4>)
 8005240:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
			IMU.Calibration_Data.radius.accel = (uint16_t)((BNO_RxBuffer[20] << 8) | BNO_RxBuffer[19]);
 8005244:	4b0d      	ldr	r3, [pc, #52]	@ (800527c <BNO_Page0Adress+0x2a0>)
 8005246:	7d1b      	ldrb	r3, [r3, #20]
 8005248:	021b      	lsls	r3, r3, #8
 800524a:	b21a      	sxth	r2, r3
 800524c:	4b0b      	ldr	r3, [pc, #44]	@ (800527c <BNO_Page0Adress+0x2a0>)
 800524e:	7cdb      	ldrb	r3, [r3, #19]
 8005250:	b21b      	sxth	r3, r3
 8005252:	4313      	orrs	r3, r2
 8005254:	b21b      	sxth	r3, r3
 8005256:	b29a      	uxth	r2, r3
 8005258:	4b09      	ldr	r3, [pc, #36]	@ (8005280 <BNO_Page0Adress+0x2a4>)
 800525a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
			IMU.Calibration_Data.radius.mag   = (uint16_t)((BNO_RxBuffer[22] << 8) | BNO_RxBuffer[21]);
 800525e:	4b07      	ldr	r3, [pc, #28]	@ (800527c <BNO_Page0Adress+0x2a0>)
 8005260:	7d9b      	ldrb	r3, [r3, #22]
 8005262:	021b      	lsls	r3, r3, #8
 8005264:	b21a      	sxth	r2, r3
 8005266:	4b05      	ldr	r3, [pc, #20]	@ (800527c <BNO_Page0Adress+0x2a0>)
 8005268:	7d5b      	ldrb	r3, [r3, #21]
 800526a:	b21b      	sxth	r3, r3
 800526c:	4313      	orrs	r3, r2
 800526e:	b21b      	sxth	r3, r3
 8005270:	b29a      	uxth	r2, r3
 8005272:	4b03      	ldr	r3, [pc, #12]	@ (8005280 <BNO_Page0Adress+0x2a4>)
 8005274:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
			break;
 8005278:	e101      	b.n	800547e <BNO_Page0Adress+0x4a2>
 800527a:	bf00      	nop
 800527c:	2400155c 	.word	0x2400155c
 8005280:	24001664 	.word	0x24001664
 8005284:	2400165d 	.word	0x2400165d
			IMU.ACC.x = ((float)((int16_t)((BNO_RxBuffer[2] << 8) | BNO_RxBuffer[1])))/100;
 8005288:	4b7f      	ldr	r3, [pc, #508]	@ (8005488 <BNO_Page0Adress+0x4ac>)
 800528a:	789b      	ldrb	r3, [r3, #2]
 800528c:	021b      	lsls	r3, r3, #8
 800528e:	b21a      	sxth	r2, r3
 8005290:	4b7d      	ldr	r3, [pc, #500]	@ (8005488 <BNO_Page0Adress+0x4ac>)
 8005292:	785b      	ldrb	r3, [r3, #1]
 8005294:	b21b      	sxth	r3, r3
 8005296:	4313      	orrs	r3, r2
 8005298:	b21b      	sxth	r3, r3
 800529a:	ee07 3a90 	vmov	s15, r3
 800529e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052a2:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 800548c <BNO_Page0Adress+0x4b0>
 80052a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80052aa:	4b79      	ldr	r3, [pc, #484]	@ (8005490 <BNO_Page0Adress+0x4b4>)
 80052ac:	edc3 7a02 	vstr	s15, [r3, #8]
			IMU.ACC.y = ((float)((int16_t)((BNO_RxBuffer[4] << 8) | BNO_RxBuffer[3])))/100;
 80052b0:	4b75      	ldr	r3, [pc, #468]	@ (8005488 <BNO_Page0Adress+0x4ac>)
 80052b2:	791b      	ldrb	r3, [r3, #4]
 80052b4:	021b      	lsls	r3, r3, #8
 80052b6:	b21a      	sxth	r2, r3
 80052b8:	4b73      	ldr	r3, [pc, #460]	@ (8005488 <BNO_Page0Adress+0x4ac>)
 80052ba:	78db      	ldrb	r3, [r3, #3]
 80052bc:	b21b      	sxth	r3, r3
 80052be:	4313      	orrs	r3, r2
 80052c0:	b21b      	sxth	r3, r3
 80052c2:	ee07 3a90 	vmov	s15, r3
 80052c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052ca:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800548c <BNO_Page0Adress+0x4b0>
 80052ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80052d2:	4b6f      	ldr	r3, [pc, #444]	@ (8005490 <BNO_Page0Adress+0x4b4>)
 80052d4:	edc3 7a03 	vstr	s15, [r3, #12]
			IMU.ACC.z = ((float)((int16_t)((BNO_RxBuffer[6] << 8) | BNO_RxBuffer[5])))/100;
 80052d8:	4b6b      	ldr	r3, [pc, #428]	@ (8005488 <BNO_Page0Adress+0x4ac>)
 80052da:	799b      	ldrb	r3, [r3, #6]
 80052dc:	021b      	lsls	r3, r3, #8
 80052de:	b21a      	sxth	r2, r3
 80052e0:	4b69      	ldr	r3, [pc, #420]	@ (8005488 <BNO_Page0Adress+0x4ac>)
 80052e2:	795b      	ldrb	r3, [r3, #5]
 80052e4:	b21b      	sxth	r3, r3
 80052e6:	4313      	orrs	r3, r2
 80052e8:	b21b      	sxth	r3, r3
 80052ea:	ee07 3a90 	vmov	s15, r3
 80052ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052f2:	eddf 6a66 	vldr	s13, [pc, #408]	@ 800548c <BNO_Page0Adress+0x4b0>
 80052f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80052fa:	4b65      	ldr	r3, [pc, #404]	@ (8005490 <BNO_Page0Adress+0x4b4>)
 80052fc:	edc3 7a04 	vstr	s15, [r3, #16]
			IMU.MAG.x = ((float)((int16_t)((BNO_RxBuffer[8] << 8) | BNO_RxBuffer[7])))/16;
 8005300:	4b61      	ldr	r3, [pc, #388]	@ (8005488 <BNO_Page0Adress+0x4ac>)
 8005302:	7a1b      	ldrb	r3, [r3, #8]
 8005304:	021b      	lsls	r3, r3, #8
 8005306:	b21a      	sxth	r2, r3
 8005308:	4b5f      	ldr	r3, [pc, #380]	@ (8005488 <BNO_Page0Adress+0x4ac>)
 800530a:	79db      	ldrb	r3, [r3, #7]
 800530c:	b21b      	sxth	r3, r3
 800530e:	4313      	orrs	r3, r2
 8005310:	b21b      	sxth	r3, r3
 8005312:	ee07 3a90 	vmov	s15, r3
 8005316:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800531a:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800531e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005322:	4b5b      	ldr	r3, [pc, #364]	@ (8005490 <BNO_Page0Adress+0x4b4>)
 8005324:	edc3 7a06 	vstr	s15, [r3, #24]
			IMU.MAG.y = ((float)((int16_t)((BNO_RxBuffer[10] << 8) | BNO_RxBuffer[9])))/16;
 8005328:	4b57      	ldr	r3, [pc, #348]	@ (8005488 <BNO_Page0Adress+0x4ac>)
 800532a:	7a9b      	ldrb	r3, [r3, #10]
 800532c:	021b      	lsls	r3, r3, #8
 800532e:	b21a      	sxth	r2, r3
 8005330:	4b55      	ldr	r3, [pc, #340]	@ (8005488 <BNO_Page0Adress+0x4ac>)
 8005332:	7a5b      	ldrb	r3, [r3, #9]
 8005334:	b21b      	sxth	r3, r3
 8005336:	4313      	orrs	r3, r2
 8005338:	b21b      	sxth	r3, r3
 800533a:	ee07 3a90 	vmov	s15, r3
 800533e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005342:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8005346:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800534a:	4b51      	ldr	r3, [pc, #324]	@ (8005490 <BNO_Page0Adress+0x4b4>)
 800534c:	edc3 7a07 	vstr	s15, [r3, #28]
			IMU.MAG.z = ((float)((int16_t)((BNO_RxBuffer[12] << 8) | BNO_RxBuffer[11])))/16;
 8005350:	4b4d      	ldr	r3, [pc, #308]	@ (8005488 <BNO_Page0Adress+0x4ac>)
 8005352:	7b1b      	ldrb	r3, [r3, #12]
 8005354:	021b      	lsls	r3, r3, #8
 8005356:	b21a      	sxth	r2, r3
 8005358:	4b4b      	ldr	r3, [pc, #300]	@ (8005488 <BNO_Page0Adress+0x4ac>)
 800535a:	7adb      	ldrb	r3, [r3, #11]
 800535c:	b21b      	sxth	r3, r3
 800535e:	4313      	orrs	r3, r2
 8005360:	b21b      	sxth	r3, r3
 8005362:	ee07 3a90 	vmov	s15, r3
 8005366:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800536a:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800536e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005372:	4b47      	ldr	r3, [pc, #284]	@ (8005490 <BNO_Page0Adress+0x4b4>)
 8005374:	edc3 7a08 	vstr	s15, [r3, #32]
			IMU.GYR.x = ((float)((int16_t)((BNO_RxBuffer[14] << 8) | BNO_RxBuffer[13])))/16;
 8005378:	4b43      	ldr	r3, [pc, #268]	@ (8005488 <BNO_Page0Adress+0x4ac>)
 800537a:	7b9b      	ldrb	r3, [r3, #14]
 800537c:	021b      	lsls	r3, r3, #8
 800537e:	b21a      	sxth	r2, r3
 8005380:	4b41      	ldr	r3, [pc, #260]	@ (8005488 <BNO_Page0Adress+0x4ac>)
 8005382:	7b5b      	ldrb	r3, [r3, #13]
 8005384:	b21b      	sxth	r3, r3
 8005386:	4313      	orrs	r3, r2
 8005388:	b21b      	sxth	r3, r3
 800538a:	ee07 3a90 	vmov	s15, r3
 800538e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005392:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8005396:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800539a:	4b3d      	ldr	r3, [pc, #244]	@ (8005490 <BNO_Page0Adress+0x4b4>)
 800539c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
			IMU.GYR.y = -((float)((int16_t)((BNO_RxBuffer[16] << 8) | BNO_RxBuffer[15])))/16;
 80053a0:	4b39      	ldr	r3, [pc, #228]	@ (8005488 <BNO_Page0Adress+0x4ac>)
 80053a2:	7c1b      	ldrb	r3, [r3, #16]
 80053a4:	021b      	lsls	r3, r3, #8
 80053a6:	b21a      	sxth	r2, r3
 80053a8:	4b37      	ldr	r3, [pc, #220]	@ (8005488 <BNO_Page0Adress+0x4ac>)
 80053aa:	7bdb      	ldrb	r3, [r3, #15]
 80053ac:	b21b      	sxth	r3, r3
 80053ae:	4313      	orrs	r3, r2
 80053b0:	b21b      	sxth	r3, r3
 80053b2:	ee07 3a90 	vmov	s15, r3
 80053b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053ba:	eeb1 7a67 	vneg.f32	s14, s15
 80053be:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80053c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80053c6:	4b32      	ldr	r3, [pc, #200]	@ (8005490 <BNO_Page0Adress+0x4b4>)
 80053c8:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
			IMU.GYR.z = -((float)((int16_t)((BNO_RxBuffer[18] << 8) | BNO_RxBuffer[17])))/16;
 80053cc:	4b2e      	ldr	r3, [pc, #184]	@ (8005488 <BNO_Page0Adress+0x4ac>)
 80053ce:	7c9b      	ldrb	r3, [r3, #18]
 80053d0:	021b      	lsls	r3, r3, #8
 80053d2:	b21a      	sxth	r2, r3
 80053d4:	4b2c      	ldr	r3, [pc, #176]	@ (8005488 <BNO_Page0Adress+0x4ac>)
 80053d6:	7c5b      	ldrb	r3, [r3, #17]
 80053d8:	b21b      	sxth	r3, r3
 80053da:	4313      	orrs	r3, r2
 80053dc:	b21b      	sxth	r3, r3
 80053de:	ee07 3a90 	vmov	s15, r3
 80053e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053e6:	eeb1 7a67 	vneg.f32	s14, s15
 80053ea:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80053ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80053f2:	4b27      	ldr	r3, [pc, #156]	@ (8005490 <BNO_Page0Adress+0x4b4>)
 80053f4:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
			IMU.Heading = ((float)((int16_t)((BNO_RxBuffer[20] << 8) | BNO_RxBuffer[19])))/16;
 80053f8:	4b23      	ldr	r3, [pc, #140]	@ (8005488 <BNO_Page0Adress+0x4ac>)
 80053fa:	7d1b      	ldrb	r3, [r3, #20]
 80053fc:	021b      	lsls	r3, r3, #8
 80053fe:	b21a      	sxth	r2, r3
 8005400:	4b21      	ldr	r3, [pc, #132]	@ (8005488 <BNO_Page0Adress+0x4ac>)
 8005402:	7cdb      	ldrb	r3, [r3, #19]
 8005404:	b21b      	sxth	r3, r3
 8005406:	4313      	orrs	r3, r2
 8005408:	b21b      	sxth	r3, r3
 800540a:	ee07 3a90 	vmov	s15, r3
 800540e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005412:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8005416:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800541a:	4b1d      	ldr	r3, [pc, #116]	@ (8005490 <BNO_Page0Adress+0x4b4>)
 800541c:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
			IMU.Pitch = ((float)((int16_t)((BNO_RxBuffer[22] << 8) | BNO_RxBuffer[21])))/16;
 8005420:	4b19      	ldr	r3, [pc, #100]	@ (8005488 <BNO_Page0Adress+0x4ac>)
 8005422:	7d9b      	ldrb	r3, [r3, #22]
 8005424:	021b      	lsls	r3, r3, #8
 8005426:	b21a      	sxth	r2, r3
 8005428:	4b17      	ldr	r3, [pc, #92]	@ (8005488 <BNO_Page0Adress+0x4ac>)
 800542a:	7d5b      	ldrb	r3, [r3, #21]
 800542c:	b21b      	sxth	r3, r3
 800542e:	4313      	orrs	r3, r2
 8005430:	b21b      	sxth	r3, r3
 8005432:	ee07 3a90 	vmov	s15, r3
 8005436:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800543a:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800543e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005442:	4b13      	ldr	r3, [pc, #76]	@ (8005490 <BNO_Page0Adress+0x4b4>)
 8005444:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
			IMU.Roll = ((float)((int16_t)((BNO_RxBuffer[24] << 8) | BNO_RxBuffer[23])))/16;
 8005448:	4b0f      	ldr	r3, [pc, #60]	@ (8005488 <BNO_Page0Adress+0x4ac>)
 800544a:	7e1b      	ldrb	r3, [r3, #24]
 800544c:	021b      	lsls	r3, r3, #8
 800544e:	b21a      	sxth	r2, r3
 8005450:	4b0d      	ldr	r3, [pc, #52]	@ (8005488 <BNO_Page0Adress+0x4ac>)
 8005452:	7ddb      	ldrb	r3, [r3, #23]
 8005454:	b21b      	sxth	r3, r3
 8005456:	4313      	orrs	r3, r2
 8005458:	b21b      	sxth	r3, r3
 800545a:	ee07 3a90 	vmov	s15, r3
 800545e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005462:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8005466:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800546a:	4b09      	ldr	r3, [pc, #36]	@ (8005490 <BNO_Page0Adress+0x4b4>)
 800546c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
			BNO_ErrorHandler = ReadSucces;
 8005470:	4b08      	ldr	r3, [pc, #32]	@ (8005494 <BNO_Page0Adress+0x4b8>)
 8005472:	220b      	movs	r2, #11
 8005474:	701a      	strb	r2, [r3, #0]
			break;
 8005476:	e002      	b.n	800547e <BNO_Page0Adress+0x4a2>
			break;
 8005478:	bf00      	nop
 800547a:	e000      	b.n	800547e <BNO_Page0Adress+0x4a2>
			if(BNO_RxBuffer[1] != 160) return;
 800547c:	bf00      	nop
	}
}
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	2400155c 	.word	0x2400155c
 800548c:	42c80000 	.word	0x42c80000
 8005490:	24001664 	.word	0x24001664
 8005494:	2400165d 	.word	0x2400165d

08005498 <BNO_Page1Adress>:

void BNO_Page1Adress(void){
 8005498:	b480      	push	{r7}
 800549a:	af00      	add	r7, sp, #0
	switch (BNO_RxBuffer[0]) {
 800549c:	4b09      	ldr	r3, [pc, #36]	@ (80054c4 <BNO_Page1Adress+0x2c>)
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	2b07      	cmp	r3, #7
 80054a2:	d108      	bne.n	80054b6 <BNO_Page1Adress+0x1e>
		case BNO055_PAGE_ID:
			IMU.Page = BNO_RxBuffer[1];
 80054a4:	4b07      	ldr	r3, [pc, #28]	@ (80054c4 <BNO_Page1Adress+0x2c>)
 80054a6:	785a      	ldrb	r2, [r3, #1]
 80054a8:	4b07      	ldr	r3, [pc, #28]	@ (80054c8 <BNO_Page1Adress+0x30>)
 80054aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			BNO_ErrorHandler = ReadSucces;
 80054ae:	4b07      	ldr	r3, [pc, #28]	@ (80054cc <BNO_Page1Adress+0x34>)
 80054b0:	220b      	movs	r2, #11
 80054b2:	701a      	strb	r2, [r3, #0]
			break;
 80054b4:	e000      	b.n	80054b8 <BNO_Page1Adress+0x20>

		default:
			break;
 80054b6:	bf00      	nop
	}
}
 80054b8:	bf00      	nop
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	2400155c 	.word	0x2400155c
 80054c8:	24001664 	.word	0x24001664
 80054cc:	2400165d 	.word	0x2400165d

080054d0 <BNO_EmptyingBuffer>:

void BNO_EmptyingBuffer(void){
 80054d0:	b580      	push	{r7, lr}
 80054d2:	af00      	add	r7, sp, #0
	switch (IMU.Page) {
 80054d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005500 <BNO_EmptyingBuffer+0x30>)
 80054d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d002      	beq.n	80054e4 <BNO_EmptyingBuffer+0x14>
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d003      	beq.n	80054ea <BNO_EmptyingBuffer+0x1a>
			break;
		case 1:
			BNO_Page1Adress();
			break;
		default:
			break;
 80054e2:	e005      	b.n	80054f0 <BNO_EmptyingBuffer+0x20>
			BNO_Page0Adress();
 80054e4:	f7ff fd7a 	bl	8004fdc <BNO_Page0Adress>
			break;
 80054e8:	e002      	b.n	80054f0 <BNO_EmptyingBuffer+0x20>
			BNO_Page1Adress();
 80054ea:	f7ff ffd5 	bl	8005498 <BNO_Page1Adress>
			break;
 80054ee:	bf00      	nop
	}
	memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 80054f0:	22ff      	movs	r2, #255	@ 0xff
 80054f2:	2100      	movs	r1, #0
 80054f4:	4803      	ldr	r0, [pc, #12]	@ (8005504 <BNO_EmptyingBuffer+0x34>)
 80054f6:	f012 fb56 	bl	8017ba6 <memset>
}
 80054fa:	bf00      	nop
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	24001664 	.word	0x24001664
 8005504:	2400155c 	.word	0x2400155c

08005508 <BNO_SWReset>:
		default:
			break;
	}
}

void BNO_SWReset(void){
 8005508:	b580      	push	{r7, lr}
 800550a:	af00      	add	r7, sp, #0
	BNO_Write(BNO055_SYS_TRIGGER,0x20);
 800550c:	2120      	movs	r1, #32
 800550e:	203f      	movs	r0, #63	@ 0x3f
 8005510:	f7ff fcd0 	bl	8004eb4 <BNO_Write>
	bno055_delay(70);
 8005514:	2046      	movs	r0, #70	@ 0x46
 8005516:	f7ff fc93 	bl	8004e40 <bno055_delay>
	IMU.ID = 0x00;
 800551a:	4b04      	ldr	r3, [pc, #16]	@ (800552c <BNO_SWReset+0x24>)
 800551c:	2200      	movs	r2, #0
 800551e:	701a      	strb	r2, [r3, #0]
	BNO_CurrentState = Configuration;
 8005520:	4b03      	ldr	r3, [pc, #12]	@ (8005530 <BNO_SWReset+0x28>)
 8005522:	2201      	movs	r2, #1
 8005524:	701a      	strb	r2, [r3, #0]
}
 8005526:	bf00      	nop
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	24001664 	.word	0x24001664
 8005530:	24001660 	.word	0x24001660

08005534 <bno055_setOperationMode>:

void bno055_setOperationMode(bno055_opmode_t mode) {
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	4603      	mov	r3, r0
 800553c:	71fb      	strb	r3, [r7, #7]
  BNO_Write(BNO055_OPR_MODE, mode);
 800553e:	79fb      	ldrb	r3, [r7, #7]
 8005540:	4619      	mov	r1, r3
 8005542:	203d      	movs	r0, #61	@ 0x3d
 8005544:	f7ff fcb6 	bl	8004eb4 <BNO_Write>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8005548:	79fb      	ldrb	r3, [r7, #7]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d103      	bne.n	8005556 <bno055_setOperationMode+0x22>
    bno055_delay(5);
 800554e:	2005      	movs	r0, #5
 8005550:	f7ff fc76 	bl	8004e40 <bno055_delay>
  } else {
    bno055_delay(3);
  }
}
 8005554:	e002      	b.n	800555c <bno055_setOperationMode+0x28>
    bno055_delay(3);
 8005556:	2003      	movs	r0, #3
 8005558:	f7ff fc72 	bl	8004e40 <bno055_delay>
}
 800555c:	bf00      	nop
 800555e:	3708      	adds	r7, #8
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8005564:	b580      	push	{r7, lr}
 8005566:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8005568:	2000      	movs	r0, #0
 800556a:	f7ff ffe3 	bl	8005534 <bno055_setOperationMode>
}
 800556e:	bf00      	nop
 8005570:	bd80      	pop	{r7, pc}

08005572 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8005572:	b580      	push	{r7, lr}
 8005574:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8005576:	200c      	movs	r0, #12
 8005578:	f7ff ffdc 	bl	8005534 <bno055_setOperationMode>
}
 800557c:	bf00      	nop
 800557e:	bd80      	pop	{r7, pc}

08005580 <BNO_GetCalibrationData>:

void BNO_GetCalibrationData(void){
 8005580:	b580      	push	{r7, lr}
 8005582:	af00      	add	r7, sp, #0
	BNO_Read(BNO055_ACC_OFFSET_X_LSB, 22);
 8005584:	2116      	movs	r1, #22
 8005586:	2055      	movs	r0, #85	@ 0x55
 8005588:	f7ff fc6e 	bl	8004e68 <BNO_Read>
}
 800558c:	bf00      	nop
 800558e:	bd80      	pop	{r7, pc}

08005590 <BNO_SetCalibrationData>:

void BNO_SetCalibrationData(void){
 8005590:	b580      	push	{r7, lr}
 8005592:	b086      	sub	sp, #24
 8005594:	af00      	add	r7, sp, #0
	uint8_t buffer[22];

	  memcpy(&IMU.Calibration_Data.offset.accel, buffer, 6);
 8005596:	463b      	mov	r3, r7
 8005598:	2206      	movs	r2, #6
 800559a:	4619      	mov	r1, r3
 800559c:	4814      	ldr	r0, [pc, #80]	@ (80055f0 <BNO_SetCalibrationData+0x60>)
 800559e:	f012 fb9c 	bl	8017cda <memcpy>
	  memcpy(&IMU.Calibration_Data.offset.mag, buffer + 6, 6);
 80055a2:	463b      	mov	r3, r7
 80055a4:	3306      	adds	r3, #6
 80055a6:	2206      	movs	r2, #6
 80055a8:	4619      	mov	r1, r3
 80055aa:	4812      	ldr	r0, [pc, #72]	@ (80055f4 <BNO_SetCalibrationData+0x64>)
 80055ac:	f012 fb95 	bl	8017cda <memcpy>
	  memcpy(&IMU.Calibration_Data.offset.gyro, buffer + 12, 6);
 80055b0:	463b      	mov	r3, r7
 80055b2:	330c      	adds	r3, #12
 80055b4:	2206      	movs	r2, #6
 80055b6:	4619      	mov	r1, r3
 80055b8:	480f      	ldr	r0, [pc, #60]	@ (80055f8 <BNO_SetCalibrationData+0x68>)
 80055ba:	f012 fb8e 	bl	8017cda <memcpy>
	  memcpy(&IMU.Calibration_Data.radius.accel, buffer + 18, 2);
 80055be:	463b      	mov	r3, r7
 80055c0:	3312      	adds	r3, #18
 80055c2:	881b      	ldrh	r3, [r3, #0]
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	4b0d      	ldr	r3, [pc, #52]	@ (80055fc <BNO_SetCalibrationData+0x6c>)
 80055c8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
	  memcpy(&IMU.Calibration_Data.radius.mag, buffer + 20, 2);
 80055cc:	463b      	mov	r3, r7
 80055ce:	3314      	adds	r3, #20
 80055d0:	881b      	ldrh	r3, [r3, #0]
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	4b09      	ldr	r3, [pc, #36]	@ (80055fc <BNO_SetCalibrationData+0x6c>)
 80055d6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

	BNO_Write_MB(BNO055_ACC_OFFSET_X_LSB, 22, buffer);
 80055da:	463b      	mov	r3, r7
 80055dc:	461a      	mov	r2, r3
 80055de:	2116      	movs	r1, #22
 80055e0:	2055      	movs	r0, #85	@ 0x55
 80055e2:	f7ff fc89 	bl	8004ef8 <BNO_Write_MB>
}
 80055e6:	bf00      	nop
 80055e8:	3718      	adds	r7, #24
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	240016ba 	.word	0x240016ba
 80055f4:	240016b4 	.word	0x240016b4
 80055f8:	240016ae 	.word	0x240016ae
 80055fc:	24001664 	.word	0x24001664

08005600 <BNO_Init>:

void BNO_Init(void){
 8005600:	b580      	push	{r7, lr}
 8005602:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, SET);
 8005604:	2201      	movs	r2, #1
 8005606:	2104      	movs	r1, #4
 8005608:	4808      	ldr	r0, [pc, #32]	@ (800562c <BNO_Init+0x2c>)
 800560a:	f004 fe57 	bl	800a2bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IMU_BOOT_GPIO_Port, IMU_BOOT_Pin, SET);
 800560e:	2201      	movs	r2, #1
 8005610:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005614:	4806      	ldr	r0, [pc, #24]	@ (8005630 <BNO_Init+0x30>)
 8005616:	f004 fe51 	bl	800a2bc <HAL_GPIO_WritePin>

	bno055_delay(100);
 800561a:	2064      	movs	r0, #100	@ 0x64
 800561c:	f7ff fc10 	bl	8004e40 <bno055_delay>

	BNO_CurrentState = Reset;
 8005620:	4b04      	ldr	r3, [pc, #16]	@ (8005634 <BNO_Init+0x34>)
 8005622:	2204      	movs	r2, #4
 8005624:	701a      	strb	r2, [r3, #0]
}
 8005626:	bf00      	nop
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	58020c00 	.word	0x58020c00
 8005630:	58020400 	.word	0x58020400
 8005634:	24001660 	.word	0x24001660

08005638 <BNO_Config>:

void BNO_Config(void){
 8005638:	b580      	push	{r7, lr}
 800563a:	af00      	add	r7, sp, #0
	static uint8_t ConfigFlag = 0;

	switch (ConfigFlag) {
 800563c:	4b20      	ldr	r3, [pc, #128]	@ (80056c0 <BNO_Config+0x88>)
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	2b03      	cmp	r3, #3
 8005642:	d839      	bhi.n	80056b8 <BNO_Config+0x80>
 8005644:	a201      	add	r2, pc, #4	@ (adr r2, 800564c <BNO_Config+0x14>)
 8005646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800564a:	bf00      	nop
 800564c:	0800565d 	.word	0x0800565d
 8005650:	0800566d 	.word	0x0800566d
 8005654:	08005679 	.word	0x08005679
 8005658:	0800569b 	.word	0x0800569b
		case 0:
			BNO_Write(BNO055_SYS_TRIGGER,0x00);
 800565c:	2100      	movs	r1, #0
 800565e:	203f      	movs	r0, #63	@ 0x3f
 8005660:	f7ff fc28 	bl	8004eb4 <BNO_Write>
			ConfigFlag = 1;
 8005664:	4b16      	ldr	r3, [pc, #88]	@ (80056c0 <BNO_Config+0x88>)
 8005666:	2201      	movs	r2, #1
 8005668:	701a      	strb	r2, [r3, #0]
			break;
 800566a:	e026      	b.n	80056ba <BNO_Config+0x82>
		case 1:
			bno055_setOperationModeConfig();
 800566c:	f7ff ff7a 	bl	8005564 <bno055_setOperationModeConfig>
			ConfigFlag = 2;
 8005670:	4b13      	ldr	r3, [pc, #76]	@ (80056c0 <BNO_Config+0x88>)
 8005672:	2202      	movs	r2, #2
 8005674:	701a      	strb	r2, [r3, #0]
			break;
 8005676:	e020      	b.n	80056ba <BNO_Config+0x82>
		case 2:
			BNO_Read(BNO055_OPR_MODE, 1);
 8005678:	2101      	movs	r1, #1
 800567a:	203d      	movs	r0, #61	@ 0x3d
 800567c:	f7ff fbf4 	bl	8004e68 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_CONFIG){
 8005680:	4b10      	ldr	r3, [pc, #64]	@ (80056c4 <BNO_Config+0x8c>)
 8005682:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005686:	2b00      	cmp	r3, #0
 8005688:	d103      	bne.n	8005692 <BNO_Config+0x5a>
				ConfigFlag = 3;
 800568a:	4b0d      	ldr	r3, [pc, #52]	@ (80056c0 <BNO_Config+0x88>)
 800568c:	2203      	movs	r2, #3
 800568e:	701a      	strb	r2, [r3, #0]
			}
			else ConfigFlag = 1;
			break;
 8005690:	e013      	b.n	80056ba <BNO_Config+0x82>
			else ConfigFlag = 1;
 8005692:	4b0b      	ldr	r3, [pc, #44]	@ (80056c0 <BNO_Config+0x88>)
 8005694:	2201      	movs	r2, #1
 8005696:	701a      	strb	r2, [r3, #0]
			break;
 8005698:	e00f      	b.n	80056ba <BNO_Config+0x82>
		case 3:
			BNO_Read(BNO055_CHIP_ID, 4);
 800569a:	2104      	movs	r1, #4
 800569c:	2000      	movs	r0, #0
 800569e:	f7ff fbe3 	bl	8004e68 <BNO_Read>

			if(IMU.ID == BNO055_ID){
 80056a2:	4b08      	ldr	r3, [pc, #32]	@ (80056c4 <BNO_Config+0x8c>)
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	2ba0      	cmp	r3, #160	@ 0xa0
 80056a8:	d102      	bne.n	80056b0 <BNO_Config+0x78>
				BNO_CurrentState = Calibration;
 80056aa:	4b07      	ldr	r3, [pc, #28]	@ (80056c8 <BNO_Config+0x90>)
 80056ac:	2202      	movs	r2, #2
 80056ae:	701a      	strb	r2, [r3, #0]
			}
			ConfigFlag = 0;
 80056b0:	4b03      	ldr	r3, [pc, #12]	@ (80056c0 <BNO_Config+0x88>)
 80056b2:	2200      	movs	r2, #0
 80056b4:	701a      	strb	r2, [r3, #0]
			break;
 80056b6:	e000      	b.n	80056ba <BNO_Config+0x82>
		default:
			break;
 80056b8:	bf00      	nop
	}

}
 80056ba:	bf00      	nop
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	240016c4 	.word	0x240016c4
 80056c4:	24001664 	.word	0x24001664
 80056c8:	24001660 	.word	0x24001660

080056cc <BNO_CalibrationStatus>:

void BNO_CalibrationStatus(void){
 80056cc:	b580      	push	{r7, lr}
 80056ce:	af00      	add	r7, sp, #0
	static uint8_t CalibrationFlag = 0;
	static uint8_t Calibrated = 1;

	switch (CalibrationFlag) {
 80056d0:	4b3d      	ldr	r3, [pc, #244]	@ (80057c8 <BNO_CalibrationStatus+0xfc>)
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	2b07      	cmp	r3, #7
 80056d6:	d870      	bhi.n	80057ba <BNO_CalibrationStatus+0xee>
 80056d8:	a201      	add	r2, pc, #4	@ (adr r2, 80056e0 <BNO_CalibrationStatus+0x14>)
 80056da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056de:	bf00      	nop
 80056e0:	08005701 	.word	0x08005701
 80056e4:	08005711 	.word	0x08005711
 80056e8:	0800571d 	.word	0x0800571d
 80056ec:	08005755 	.word	0x08005755
 80056f0:	0800576f 	.word	0x0800576f
 80056f4:	0800577b 	.word	0x0800577b
 80056f8:	0800579d 	.word	0x0800579d
 80056fc:	080057af 	.word	0x080057af
		case 0:
			BNO_Write(BNO055_SYS_TRIGGER,0x00);
 8005700:	2100      	movs	r1, #0
 8005702:	203f      	movs	r0, #63	@ 0x3f
 8005704:	f7ff fbd6 	bl	8004eb4 <BNO_Write>
			CalibrationFlag = 1;
 8005708:	4b2f      	ldr	r3, [pc, #188]	@ (80057c8 <BNO_CalibrationStatus+0xfc>)
 800570a:	2201      	movs	r2, #1
 800570c:	701a      	strb	r2, [r3, #0]
			break;
 800570e:	e059      	b.n	80057c4 <BNO_CalibrationStatus+0xf8>
		case 1:
			bno055_setOperationModeNDOF();
 8005710:	f7ff ff2f 	bl	8005572 <bno055_setOperationModeNDOF>
			CalibrationFlag = 2;
 8005714:	4b2c      	ldr	r3, [pc, #176]	@ (80057c8 <BNO_CalibrationStatus+0xfc>)
 8005716:	2202      	movs	r2, #2
 8005718:	701a      	strb	r2, [r3, #0]
			break;
 800571a:	e053      	b.n	80057c4 <BNO_CalibrationStatus+0xf8>
		case 2:
			BNO_Read(BNO055_OPR_MODE, 1);
 800571c:	2101      	movs	r1, #1
 800571e:	203d      	movs	r0, #61	@ 0x3d
 8005720:	f7ff fba2 	bl	8004e68 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_NDOF){
 8005724:	4b29      	ldr	r3, [pc, #164]	@ (80057cc <BNO_CalibrationStatus+0x100>)
 8005726:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800572a:	2b0c      	cmp	r3, #12
 800572c:	d10e      	bne.n	800574c <BNO_CalibrationStatus+0x80>
				if(Calibrated){
 800572e:	4b28      	ldr	r3, [pc, #160]	@ (80057d0 <BNO_CalibrationStatus+0x104>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d006      	beq.n	8005744 <BNO_CalibrationStatus+0x78>
					CalibrationFlag = 0;
 8005736:	4b24      	ldr	r3, [pc, #144]	@ (80057c8 <BNO_CalibrationStatus+0xfc>)
 8005738:	2200      	movs	r2, #0
 800573a:	701a      	strb	r2, [r3, #0]
					BNO_CurrentState = Operation;
 800573c:	4b25      	ldr	r3, [pc, #148]	@ (80057d4 <BNO_CalibrationStatus+0x108>)
 800573e:	2203      	movs	r2, #3
 8005740:	701a      	strb	r2, [r3, #0]
				}
				else CalibrationFlag = 3;
			}
			else CalibrationFlag = 1;
			break;
 8005742:	e03f      	b.n	80057c4 <BNO_CalibrationStatus+0xf8>
				else CalibrationFlag = 3;
 8005744:	4b20      	ldr	r3, [pc, #128]	@ (80057c8 <BNO_CalibrationStatus+0xfc>)
 8005746:	2203      	movs	r2, #3
 8005748:	701a      	strb	r2, [r3, #0]
			break;
 800574a:	e03b      	b.n	80057c4 <BNO_CalibrationStatus+0xf8>
			else CalibrationFlag = 1;
 800574c:	4b1e      	ldr	r3, [pc, #120]	@ (80057c8 <BNO_CalibrationStatus+0xfc>)
 800574e:	2201      	movs	r2, #1
 8005750:	701a      	strb	r2, [r3, #0]
			break;
 8005752:	e037      	b.n	80057c4 <BNO_CalibrationStatus+0xf8>
		case 3:
			BNO_Read(BNO055_CALIB_STAT, 1);
 8005754:	2101      	movs	r1, #1
 8005756:	2035      	movs	r0, #53	@ 0x35
 8005758:	f7ff fb86 	bl	8004e68 <BNO_Read>
			if(IMU.CalSatus.Full == 0xFF){
 800575c:	4b1b      	ldr	r3, [pc, #108]	@ (80057cc <BNO_CalibrationStatus+0x100>)
 800575e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005762:	2bff      	cmp	r3, #255	@ 0xff
 8005764:	d12d      	bne.n	80057c2 <BNO_CalibrationStatus+0xf6>
				CalibrationFlag = 4;
 8005766:	4b18      	ldr	r3, [pc, #96]	@ (80057c8 <BNO_CalibrationStatus+0xfc>)
 8005768:	2204      	movs	r2, #4
 800576a:	701a      	strb	r2, [r3, #0]
			}
			break;
 800576c:	e029      	b.n	80057c2 <BNO_CalibrationStatus+0xf6>
		case 4:
			bno055_setOperationModeConfig();
 800576e:	f7ff fef9 	bl	8005564 <bno055_setOperationModeConfig>
			CalibrationFlag = 5;
 8005772:	4b15      	ldr	r3, [pc, #84]	@ (80057c8 <BNO_CalibrationStatus+0xfc>)
 8005774:	2205      	movs	r2, #5
 8005776:	701a      	strb	r2, [r3, #0]
			break;
 8005778:	e024      	b.n	80057c4 <BNO_CalibrationStatus+0xf8>
		case 5:
			BNO_Read(BNO055_OPR_MODE, 1);
 800577a:	2101      	movs	r1, #1
 800577c:	203d      	movs	r0, #61	@ 0x3d
 800577e:	f7ff fb73 	bl	8004e68 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_CONFIG){
 8005782:	4b12      	ldr	r3, [pc, #72]	@ (80057cc <BNO_CalibrationStatus+0x100>)
 8005784:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005788:	2b00      	cmp	r3, #0
 800578a:	d103      	bne.n	8005794 <BNO_CalibrationStatus+0xc8>
				CalibrationFlag = 6;
 800578c:	4b0e      	ldr	r3, [pc, #56]	@ (80057c8 <BNO_CalibrationStatus+0xfc>)
 800578e:	2206      	movs	r2, #6
 8005790:	701a      	strb	r2, [r3, #0]

			}
			else CalibrationFlag = 4;
			break;
 8005792:	e017      	b.n	80057c4 <BNO_CalibrationStatus+0xf8>
			else CalibrationFlag = 4;
 8005794:	4b0c      	ldr	r3, [pc, #48]	@ (80057c8 <BNO_CalibrationStatus+0xfc>)
 8005796:	2204      	movs	r2, #4
 8005798:	701a      	strb	r2, [r3, #0]
			break;
 800579a:	e013      	b.n	80057c4 <BNO_CalibrationStatus+0xf8>
		case 6:
			BNO_GetCalibrationData();
 800579c:	f7ff fef0 	bl	8005580 <BNO_GetCalibrationData>
			Calibrated = 1;
 80057a0:	4b0b      	ldr	r3, [pc, #44]	@ (80057d0 <BNO_CalibrationStatus+0x104>)
 80057a2:	2201      	movs	r2, #1
 80057a4:	701a      	strb	r2, [r3, #0]
			CalibrationFlag = 1;
 80057a6:	4b08      	ldr	r3, [pc, #32]	@ (80057c8 <BNO_CalibrationStatus+0xfc>)
 80057a8:	2201      	movs	r2, #1
 80057aa:	701a      	strb	r2, [r3, #0]
			break;
 80057ac:	e00a      	b.n	80057c4 <BNO_CalibrationStatus+0xf8>
		case 7:
			BNO_SetCalibrationData();
 80057ae:	f7ff feef 	bl	8005590 <BNO_SetCalibrationData>
			CalibrationFlag = 1;
 80057b2:	4b05      	ldr	r3, [pc, #20]	@ (80057c8 <BNO_CalibrationStatus+0xfc>)
 80057b4:	2201      	movs	r2, #1
 80057b6:	701a      	strb	r2, [r3, #0]
			break;
 80057b8:	e004      	b.n	80057c4 <BNO_CalibrationStatus+0xf8>
		default:
			CalibrationFlag = 0;
 80057ba:	4b03      	ldr	r3, [pc, #12]	@ (80057c8 <BNO_CalibrationStatus+0xfc>)
 80057bc:	2200      	movs	r2, #0
 80057be:	701a      	strb	r2, [r3, #0]
			break;
 80057c0:	e000      	b.n	80057c4 <BNO_CalibrationStatus+0xf8>
			break;
 80057c2:	bf00      	nop
    	BNO_CurrentState = Operation;
    }
    else bno055_setOperationModeNDOF();
    */

}
 80057c4:	bf00      	nop
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	240016c5 	.word	0x240016c5
 80057cc:	24001664 	.word	0x24001664
 80057d0:	24000008 	.word	0x24000008
 80057d4:	24001660 	.word	0x24001660

080057d8 <BNO_GetData>:

void BNO_GetData(void){
 80057d8:	b580      	push	{r7, lr}
 80057da:	af00      	add	r7, sp, #0
	BNO_Read(BNO055_ACC_DATA_X_LSB,24);
 80057dc:	2118      	movs	r1, #24
 80057de:	2008      	movs	r0, #8
 80057e0:	f7ff fb42 	bl	8004e68 <BNO_Read>
}
 80057e4:	bf00      	nop
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <BNO_Receive>:

void BNO_Receive(uint8_t Buffer){
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	4603      	mov	r3, r0
 80057f0:	71fb      	strb	r3, [r7, #7]
	static uint8_t MsgSize = 0;
	static uint8_t Counter = 0;

	BNO_ComsCounter = 0;
 80057f2:	4b2c      	ldr	r3, [pc, #176]	@ (80058a4 <BNO_Receive+0xbc>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	701a      	strb	r2, [r3, #0]

	switch (BNO_Rx_Status) {
 80057f8:	4b2b      	ldr	r3, [pc, #172]	@ (80058a8 <BNO_Receive+0xc0>)
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	2bff      	cmp	r3, #255	@ 0xff
 80057fe:	d027      	beq.n	8005850 <BNO_Receive+0x68>
 8005800:	2bff      	cmp	r3, #255	@ 0xff
 8005802:	dc46      	bgt.n	8005892 <BNO_Receive+0xaa>
 8005804:	2bee      	cmp	r3, #238	@ 0xee
 8005806:	d017      	beq.n	8005838 <BNO_Receive+0x50>
 8005808:	2bee      	cmp	r3, #238	@ 0xee
 800580a:	dc42      	bgt.n	8005892 <BNO_Receive+0xaa>
 800580c:	2b00      	cmp	r3, #0
 800580e:	d002      	beq.n	8005816 <BNO_Receive+0x2e>
 8005810:	2bbb      	cmp	r3, #187	@ 0xbb
 8005812:	d00a      	beq.n	800582a <BNO_Receive+0x42>
				BNO_EmptyingBuffer();
			}

			break;
		default:
			break;
 8005814:	e03d      	b.n	8005892 <BNO_Receive+0xaa>
			if(Buffer == Read_Response || Buffer == Header) BNO_Rx_Status = Buffer;
 8005816:	79fb      	ldrb	r3, [r7, #7]
 8005818:	2bbb      	cmp	r3, #187	@ 0xbb
 800581a:	d002      	beq.n	8005822 <BNO_Receive+0x3a>
 800581c:	79fb      	ldrb	r3, [r7, #7]
 800581e:	2bee      	cmp	r3, #238	@ 0xee
 8005820:	d139      	bne.n	8005896 <BNO_Receive+0xae>
 8005822:	4a21      	ldr	r2, [pc, #132]	@ (80058a8 <BNO_Receive+0xc0>)
 8005824:	79fb      	ldrb	r3, [r7, #7]
 8005826:	7013      	strb	r3, [r2, #0]
			break;
 8005828:	e035      	b.n	8005896 <BNO_Receive+0xae>
			MsgSize = Buffer;
 800582a:	4a20      	ldr	r2, [pc, #128]	@ (80058ac <BNO_Receive+0xc4>)
 800582c:	79fb      	ldrb	r3, [r7, #7]
 800582e:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = Emptying_Buffer;
 8005830:	4b1d      	ldr	r3, [pc, #116]	@ (80058a8 <BNO_Receive+0xc0>)
 8005832:	22ff      	movs	r2, #255	@ 0xff
 8005834:	701a      	strb	r2, [r3, #0]
			break;
 8005836:	e031      	b.n	800589c <BNO_Receive+0xb4>
			BNO_ErrorHandler = Buffer;
 8005838:	4a1d      	ldr	r2, [pc, #116]	@ (80058b0 <BNO_Receive+0xc8>)
 800583a:	79fb      	ldrb	r3, [r7, #7]
 800583c:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = AwaitingMsg;
 800583e:	4b1a      	ldr	r3, [pc, #104]	@ (80058a8 <BNO_Receive+0xc0>)
 8005840:	2200      	movs	r2, #0
 8005842:	701a      	strb	r2, [r3, #0]
			memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 8005844:	22ff      	movs	r2, #255	@ 0xff
 8005846:	2100      	movs	r1, #0
 8005848:	481a      	ldr	r0, [pc, #104]	@ (80058b4 <BNO_Receive+0xcc>)
 800584a:	f012 f9ac 	bl	8017ba6 <memset>
			break;
 800584e:	e025      	b.n	800589c <BNO_Receive+0xb4>
			BNO_RxBuffer[Counter + 1] = Buffer;
 8005850:	4b19      	ldr	r3, [pc, #100]	@ (80058b8 <BNO_Receive+0xd0>)
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	3301      	adds	r3, #1
 8005856:	4917      	ldr	r1, [pc, #92]	@ (80058b4 <BNO_Receive+0xcc>)
 8005858:	79fa      	ldrb	r2, [r7, #7]
 800585a:	54ca      	strb	r2, [r1, r3]
			Counter++;
 800585c:	4b16      	ldr	r3, [pc, #88]	@ (80058b8 <BNO_Receive+0xd0>)
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	3301      	adds	r3, #1
 8005862:	b2da      	uxtb	r2, r3
 8005864:	4b14      	ldr	r3, [pc, #80]	@ (80058b8 <BNO_Receive+0xd0>)
 8005866:	701a      	strb	r2, [r3, #0]
			if(Counter == MsgSize){
 8005868:	4b13      	ldr	r3, [pc, #76]	@ (80058b8 <BNO_Receive+0xd0>)
 800586a:	781a      	ldrb	r2, [r3, #0]
 800586c:	4b0f      	ldr	r3, [pc, #60]	@ (80058ac <BNO_Receive+0xc4>)
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	429a      	cmp	r2, r3
 8005872:	d112      	bne.n	800589a <BNO_Receive+0xb2>
				Counter = 0;
 8005874:	4b10      	ldr	r3, [pc, #64]	@ (80058b8 <BNO_Receive+0xd0>)
 8005876:	2200      	movs	r2, #0
 8005878:	701a      	strb	r2, [r3, #0]
				MsgSize = 0;
 800587a:	4b0c      	ldr	r3, [pc, #48]	@ (80058ac <BNO_Receive+0xc4>)
 800587c:	2200      	movs	r2, #0
 800587e:	701a      	strb	r2, [r3, #0]
				BNO_Rx_Status = AwaitingMsg;
 8005880:	4b09      	ldr	r3, [pc, #36]	@ (80058a8 <BNO_Receive+0xc0>)
 8005882:	2200      	movs	r2, #0
 8005884:	701a      	strb	r2, [r3, #0]
				BNO_ErrorHandler = ReadSucces;
 8005886:	4b0a      	ldr	r3, [pc, #40]	@ (80058b0 <BNO_Receive+0xc8>)
 8005888:	220b      	movs	r2, #11
 800588a:	701a      	strb	r2, [r3, #0]
				BNO_EmptyingBuffer();
 800588c:	f7ff fe20 	bl	80054d0 <BNO_EmptyingBuffer>
			break;
 8005890:	e003      	b.n	800589a <BNO_Receive+0xb2>
			break;
 8005892:	bf00      	nop
 8005894:	e002      	b.n	800589c <BNO_Receive+0xb4>
			break;
 8005896:	bf00      	nop
 8005898:	e000      	b.n	800589c <BNO_Receive+0xb4>
			break;
 800589a:	bf00      	nop
	}
}
 800589c:	bf00      	nop
 800589e:	3708      	adds	r7, #8
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	2400165e 	.word	0x2400165e
 80058a8:	2400165c 	.word	0x2400165c
 80058ac:	240016c6 	.word	0x240016c6
 80058b0:	2400165d 	.word	0x2400165d
 80058b4:	2400155c 	.word	0x2400155c
 80058b8:	240016c7 	.word	0x240016c7

080058bc <BNO_FaultManager>:

void BNO_FaultManager(void){
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
	if(BNO_ComsCounter > 3){
 80058c2:	4b13      	ldr	r3, [pc, #76]	@ (8005910 <BNO_FaultManager+0x54>)
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	2b03      	cmp	r3, #3
 80058c8:	d90f      	bls.n	80058ea <BNO_FaultManager+0x2e>
		Reset_UART(&huart3);
 80058ca:	4812      	ldr	r0, [pc, #72]	@ (8005914 <BNO_FaultManager+0x58>)
 80058cc:	f7fe fd7c 	bl	80043c8 <Reset_UART>
		BNO_Rx_Status = AwaitingMsg;
 80058d0:	4b11      	ldr	r3, [pc, #68]	@ (8005918 <BNO_FaultManager+0x5c>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 80058d6:	2201      	movs	r2, #1
 80058d8:	4910      	ldr	r1, [pc, #64]	@ (800591c <BNO_FaultManager+0x60>)
 80058da:	480e      	ldr	r0, [pc, #56]	@ (8005914 <BNO_FaultManager+0x58>)
 80058dc:	f00a f882 	bl	800f9e4 <HAL_UART_Receive_DMA>
		memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 80058e0:	22ff      	movs	r2, #255	@ 0xff
 80058e2:	2100      	movs	r1, #0
 80058e4:	480e      	ldr	r0, [pc, #56]	@ (8005920 <BNO_FaultManager+0x64>)
 80058e6:	f012 f95e 	bl	8017ba6 <memset>
	}
	if(BNO_ErrorHandler == WRONG_START_BYTE){
 80058ea:	4b0e      	ldr	r3, [pc, #56]	@ (8005924 <BNO_FaultManager+0x68>)
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	2b06      	cmp	r3, #6
 80058f0:	d10a      	bne.n	8005908 <BNO_FaultManager+0x4c>
		uint8_t Buffer = 0x00;
 80058f2:	2300      	movs	r3, #0
 80058f4:	71fb      	strb	r3, [r7, #7]

		HAL_UART_Transmit_IT(&huart3, &Buffer, 1);
 80058f6:	1dfb      	adds	r3, r7, #7
 80058f8:	2201      	movs	r2, #1
 80058fa:	4619      	mov	r1, r3
 80058fc:	4805      	ldr	r0, [pc, #20]	@ (8005914 <BNO_FaultManager+0x58>)
 80058fe:	f009 ff91 	bl	800f824 <HAL_UART_Transmit_IT>
		BNO_ErrorHandler = 0;
 8005902:	4b08      	ldr	r3, [pc, #32]	@ (8005924 <BNO_FaultManager+0x68>)
 8005904:	2200      	movs	r2, #0
 8005906:	701a      	strb	r2, [r3, #0]
	}
}
 8005908:	bf00      	nop
 800590a:	3708      	adds	r7, #8
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	2400165e 	.word	0x2400165e
 8005914:	24001294 	.word	0x24001294
 8005918:	2400165c 	.word	0x2400165c
 800591c:	2400165b 	.word	0x2400165b
 8005920:	2400155c 	.word	0x2400155c
 8005924:	2400165d 	.word	0x2400165d

08005928 <BNO_Tasks>:

void BNO_Tasks(void){
 8005928:	b580      	push	{r7, lr}
 800592a:	af00      	add	r7, sp, #0
	if(BNO_DelayCounter == 0){
 800592c:	4b1b      	ldr	r3, [pc, #108]	@ (800599c <BNO_Tasks+0x74>)
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d128      	bne.n	8005986 <BNO_Tasks+0x5e>
		switch (BNO_CurrentState) {
 8005934:	4b1a      	ldr	r3, [pc, #104]	@ (80059a0 <BNO_Tasks+0x78>)
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	2b04      	cmp	r3, #4
 800593a:	d81c      	bhi.n	8005976 <BNO_Tasks+0x4e>
 800593c:	a201      	add	r2, pc, #4	@ (adr r2, 8005944 <BNO_Tasks+0x1c>)
 800593e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005942:	bf00      	nop
 8005944:	08005959 	.word	0x08005959
 8005948:	08005965 	.word	0x08005965
 800594c:	0800596b 	.word	0x0800596b
 8005950:	08005971 	.word	0x08005971
 8005954:	0800595f 	.word	0x0800595f
			case Init:
				BNO_Init();
 8005958:	f7ff fe52 	bl	8005600 <BNO_Init>
				break;
 800595c:	e00c      	b.n	8005978 <BNO_Tasks+0x50>
			case Reset:
				BNO_SWReset();
 800595e:	f7ff fdd3 	bl	8005508 <BNO_SWReset>
			break;
 8005962:	e009      	b.n	8005978 <BNO_Tasks+0x50>
			case Configuration:
				BNO_Config();
 8005964:	f7ff fe68 	bl	8005638 <BNO_Config>
				break;
 8005968:	e006      	b.n	8005978 <BNO_Tasks+0x50>
			case Calibration:
				BNO_CalibrationStatus();
 800596a:	f7ff feaf 	bl	80056cc <BNO_CalibrationStatus>
				break;
 800596e:	e003      	b.n	8005978 <BNO_Tasks+0x50>
			case Operation:
				BNO_GetData();
 8005970:	f7ff ff32 	bl	80057d8 <BNO_GetData>
				break;
 8005974:	e000      	b.n	8005978 <BNO_Tasks+0x50>

			default:
				break;
 8005976:	bf00      	nop
		}
		++BNO_ComsCounter;
 8005978:	4b0a      	ldr	r3, [pc, #40]	@ (80059a4 <BNO_Tasks+0x7c>)
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	3301      	adds	r3, #1
 800597e:	b2da      	uxtb	r2, r3
 8005980:	4b08      	ldr	r3, [pc, #32]	@ (80059a4 <BNO_Tasks+0x7c>)
 8005982:	701a      	strb	r2, [r3, #0]
 8005984:	e005      	b.n	8005992 <BNO_Tasks+0x6a>
	}
	else{
		--BNO_DelayCounter;
 8005986:	4b05      	ldr	r3, [pc, #20]	@ (800599c <BNO_Tasks+0x74>)
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	3b01      	subs	r3, #1
 800598c:	b2da      	uxtb	r2, r3
 800598e:	4b03      	ldr	r3, [pc, #12]	@ (800599c <BNO_Tasks+0x74>)
 8005990:	701a      	strb	r2, [r3, #0]
	}
	BNO_FaultManager();
 8005992:	f7ff ff93 	bl	80058bc <BNO_FaultManager>
}
 8005996:	bf00      	nop
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	2400165f 	.word	0x2400165f
 80059a0:	24001660 	.word	0x24001660
 80059a4:	2400165e 	.word	0x2400165e

080059a8 <LED_blink>:

		.G_LED.LED_GPIO_GPIOx = LED_5_GPIO_Port,
		.G_LED.LED_GPIO_Pin   = LED_5_Pin
};

LED_config_t LED_blink(LED_config_t LED){
 80059a8:	b084      	sub	sp, #16
 80059aa:	b590      	push	{r4, r7, lr}
 80059ac:	b083      	sub	sp, #12
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
 80059b2:	f107 001c 	add.w	r0, r7, #28
 80059b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}

		switch (LED.Blink_status) {
 80059ba:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d002      	beq.n	80059c8 <LED_blink+0x20>
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d010      	beq.n	80059e8 <LED_blink+0x40>
 80059c6:	e01f      	b.n	8005a08 <LED_blink+0x60>
			case 0x00:
				if(LED.count >= LED.Time_Off){
 80059c8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80059ca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d31f      	bcc.n	8005a10 <LED_blink+0x68>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	8c39      	ldrh	r1, [r7, #32]
 80059d4:	2201      	movs	r2, #1
 80059d6:	4618      	mov	r0, r3
 80059d8:	f004 fc70 	bl	800a2bc <HAL_GPIO_WritePin>
					LED.Blink_status = 1;
 80059dc:	2301      	movs	r3, #1
 80059de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 80059e2:	2300      	movs	r3, #0
 80059e4:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 80059e6:	e013      	b.n	8005a10 <LED_blink+0x68>
			case 0x01:
				if(LED.count >= LED.Time_On){
 80059e8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80059ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d311      	bcc.n	8005a14 <LED_blink+0x6c>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	8c39      	ldrh	r1, [r7, #32]
 80059f4:	2200      	movs	r2, #0
 80059f6:	4618      	mov	r0, r3
 80059f8:	f004 fc60 	bl	800a2bc <HAL_GPIO_WritePin>
					LED.Blink_status = 0;
 80059fc:	2300      	movs	r3, #0
 80059fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 8005a02:	2300      	movs	r3, #0
 8005a04:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 8005a06:	e005      	b.n	8005a14 <LED_blink+0x6c>
			default:
				LED.Blink_status = 0;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
				break;
 8005a0e:	e002      	b.n	8005a16 <LED_blink+0x6e>
				break;
 8005a10:	bf00      	nop
 8005a12:	e000      	b.n	8005a16 <LED_blink+0x6e>
				break;
 8005a14:	bf00      	nop
		}

	LED.count++;
 8005a16:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005a18:	3301      	adds	r3, #1
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	853b      	strh	r3, [r7, #40]	@ 0x28
	return LED;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	461c      	mov	r4, r3
 8005a22:	f107 031c 	add.w	r3, r7, #28
 8005a26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005a28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005a36:	b004      	add	sp, #16
 8005a38:	4770      	bx	lr

08005a3a <LED_Rutine>:

LED_config_t LED_Rutine(LED_config_t LED){
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	b590      	push	{r4, r7, lr}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af02      	add	r7, sp, #8
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	f107 001c 	add.w	r0, r7, #28
 8005a48:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(LED.LED_status == 1){
 8005a4c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d117      	bne.n	8005a84 <LED_Rutine+0x4a>
		switch (LED.Sequence) {
 8005a54:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d002      	beq.n	8005a62 <LED_Rutine+0x28>
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d007      	beq.n	8005a70 <LED_Rutine+0x36>
				break;
			case Blink:
				LED = LED_blink(LED);
				break;
			default:
				break;
 8005a60:	e018      	b.n	8005a94 <LED_Rutine+0x5a>
				HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	8c39      	ldrh	r1, [r7, #32]
 8005a66:	2201      	movs	r2, #1
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f004 fc27 	bl	800a2bc <HAL_GPIO_WritePin>
				break;
 8005a6e:	e011      	b.n	8005a94 <LED_Rutine+0x5a>
				LED = LED_blink(LED);
 8005a70:	f107 001c 	add.w	r0, r7, #28
 8005a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a76:	9300      	str	r3, [sp, #0]
 8005a78:	f107 031c 	add.w	r3, r7, #28
 8005a7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a7e:	f7ff ff93 	bl	80059a8 <LED_blink>
				break;
 8005a82:	e007      	b.n	8005a94 <LED_Rutine+0x5a>
		}
	}
	else{
		HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	8c39      	ldrh	r1, [r7, #32]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f004 fc16 	bl	800a2bc <HAL_GPIO_WritePin>
		LED.count = 0;
 8005a90:	2300      	movs	r3, #0
 8005a92:	853b      	strh	r3, [r7, #40]	@ 0x28
	}
	return LED;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	461c      	mov	r4, r3
 8005a98:	f107 031c 	add.w	r3, r7, #28
 8005a9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005a9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	370c      	adds	r7, #12
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005aac:	b004      	add	sp, #16
 8005aae:	4770      	bx	lr

08005ab0 <LED_Tasks>:

void LED_Tasks (void){
 8005ab0:	b590      	push	{r4, r7, lr}
 8005ab2:	b087      	sub	sp, #28
 8005ab4:	af02      	add	r7, sp, #8
	LED_Info.R_LED = LED_Rutine(LED_Info.R_LED);
 8005ab6:	4c24      	ldr	r4, [pc, #144]	@ (8005b48 <LED_Tasks+0x98>)
 8005ab8:	4638      	mov	r0, r7
 8005aba:	4b23      	ldr	r3, [pc, #140]	@ (8005b48 <LED_Tasks+0x98>)
 8005abc:	68da      	ldr	r2, [r3, #12]
 8005abe:	9200      	str	r2, [sp, #0]
 8005ac0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ac2:	f7ff ffba 	bl	8005a3a <LED_Rutine>
 8005ac6:	463b      	mov	r3, r7
 8005ac8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005aca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED1 = LED_Rutine(LED_Info.B_LED1);
 8005ace:	4c1e      	ldr	r4, [pc, #120]	@ (8005b48 <LED_Tasks+0x98>)
 8005ad0:	4638      	mov	r0, r7
 8005ad2:	4b1d      	ldr	r3, [pc, #116]	@ (8005b48 <LED_Tasks+0x98>)
 8005ad4:	69da      	ldr	r2, [r3, #28]
 8005ad6:	9200      	str	r2, [sp, #0]
 8005ad8:	3310      	adds	r3, #16
 8005ada:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005adc:	f7ff ffad 	bl	8005a3a <LED_Rutine>
 8005ae0:	3410      	adds	r4, #16
 8005ae2:	463b      	mov	r3, r7
 8005ae4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005ae6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED2 = LED_Rutine(LED_Info.B_LED2);
 8005aea:	4c17      	ldr	r4, [pc, #92]	@ (8005b48 <LED_Tasks+0x98>)
 8005aec:	4638      	mov	r0, r7
 8005aee:	4b16      	ldr	r3, [pc, #88]	@ (8005b48 <LED_Tasks+0x98>)
 8005af0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005af2:	9200      	str	r2, [sp, #0]
 8005af4:	3320      	adds	r3, #32
 8005af6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005af8:	f7ff ff9f 	bl	8005a3a <LED_Rutine>
 8005afc:	3420      	adds	r4, #32
 8005afe:	463b      	mov	r3, r7
 8005b00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005b02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED3 = LED_Rutine(LED_Info.B_LED3);
 8005b06:	4c10      	ldr	r4, [pc, #64]	@ (8005b48 <LED_Tasks+0x98>)
 8005b08:	4638      	mov	r0, r7
 8005b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8005b48 <LED_Tasks+0x98>)
 8005b0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b0e:	9200      	str	r2, [sp, #0]
 8005b10:	3330      	adds	r3, #48	@ 0x30
 8005b12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b14:	f7ff ff91 	bl	8005a3a <LED_Rutine>
 8005b18:	3430      	adds	r4, #48	@ 0x30
 8005b1a:	463b      	mov	r3, r7
 8005b1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005b1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.G_LED = LED_Rutine(LED_Info.G_LED);
 8005b22:	4c09      	ldr	r4, [pc, #36]	@ (8005b48 <LED_Tasks+0x98>)
 8005b24:	4638      	mov	r0, r7
 8005b26:	4b08      	ldr	r3, [pc, #32]	@ (8005b48 <LED_Tasks+0x98>)
 8005b28:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005b2a:	9200      	str	r2, [sp, #0]
 8005b2c:	3340      	adds	r3, #64	@ 0x40
 8005b2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b30:	f7ff ff83 	bl	8005a3a <LED_Rutine>
 8005b34:	3440      	adds	r4, #64	@ 0x40
 8005b36:	463b      	mov	r3, r7
 8005b38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005b3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8005b3e:	bf00      	nop
 8005b40:	3714      	adds	r7, #20
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd90      	pop	{r4, r7, pc}
 8005b46:	bf00      	nop
 8005b48:	2400000c 	.word	0x2400000c

08005b4c <LR03_AT>:

uint8_t LR03_RxBuffer[256] = {0};

uint8_t Test_1;

void LR03_AT(void){
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	af00      	add	r7, sp, #0

	HAL_UART_Transmit_IT(&huart6, (uint8_t*)"+++\r\n", 5);
 8005b50:	2205      	movs	r2, #5
 8005b52:	4903      	ldr	r1, [pc, #12]	@ (8005b60 <LR03_AT+0x14>)
 8005b54:	4803      	ldr	r0, [pc, #12]	@ (8005b64 <LR03_AT+0x18>)
 8005b56:	f009 fe65 	bl	800f824 <HAL_UART_Transmit_IT>
}
 8005b5a:	bf00      	nop
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	08019c98 	.word	0x08019c98
 8005b64:	24001328 	.word	0x24001328

08005b68 <LR03_Level>:

void LR03_Level(uint8_t Level){
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	4603      	mov	r3, r0
 8005b70:	71fb      	strb	r3, [r7, #7]
	static uint8_t Level_Command[] = {"AT+LEVEL7\r\n"};
	if(Level > 7) Level = 7;
 8005b72:	79fb      	ldrb	r3, [r7, #7]
 8005b74:	2b07      	cmp	r3, #7
 8005b76:	d901      	bls.n	8005b7c <LR03_Level+0x14>
 8005b78:	2307      	movs	r3, #7
 8005b7a:	71fb      	strb	r3, [r7, #7]
	if(Level < 1) Level = 1;
 8005b7c:	79fb      	ldrb	r3, [r7, #7]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d101      	bne.n	8005b86 <LR03_Level+0x1e>
 8005b82:	2301      	movs	r3, #1
 8005b84:	71fb      	strb	r3, [r7, #7]
	Level_Command[8] = Level + 48;
 8005b86:	79fb      	ldrb	r3, [r7, #7]
 8005b88:	3330      	adds	r3, #48	@ 0x30
 8005b8a:	b2da      	uxtb	r2, r3
 8005b8c:	4b05      	ldr	r3, [pc, #20]	@ (8005ba4 <LR03_Level+0x3c>)
 8005b8e:	721a      	strb	r2, [r3, #8]
	HAL_UART_Transmit_IT(&huart6, Level_Command, 11);
 8005b90:	220b      	movs	r2, #11
 8005b92:	4904      	ldr	r1, [pc, #16]	@ (8005ba4 <LR03_Level+0x3c>)
 8005b94:	4804      	ldr	r0, [pc, #16]	@ (8005ba8 <LR03_Level+0x40>)
 8005b96:	f009 fe45 	bl	800f824 <HAL_UART_Transmit_IT>
}
 8005b9a:	bf00      	nop
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	2400005c 	.word	0x2400005c
 8005ba8:	24001328 	.word	0x24001328

08005bac <LR03_Receive>:

void LR03_Receive(uint8_t Data){
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	71fb      	strb	r3, [r7, #7]
	static uint8_t DataPointer = 0;
	LR03_RxBuffer[DataPointer] = Data;
 8005bb6:	4b09      	ldr	r3, [pc, #36]	@ (8005bdc <LR03_Receive+0x30>)
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	4619      	mov	r1, r3
 8005bbc:	4a08      	ldr	r2, [pc, #32]	@ (8005be0 <LR03_Receive+0x34>)
 8005bbe:	79fb      	ldrb	r3, [r7, #7]
 8005bc0:	5453      	strb	r3, [r2, r1]
	DataPointer++;
 8005bc2:	4b06      	ldr	r3, [pc, #24]	@ (8005bdc <LR03_Receive+0x30>)
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	b2da      	uxtb	r2, r3
 8005bca:	4b04      	ldr	r3, [pc, #16]	@ (8005bdc <LR03_Receive+0x30>)
 8005bcc:	701a      	strb	r2, [r3, #0]
}
 8005bce:	bf00      	nop
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	240017c9 	.word	0x240017c9
 8005be0:	240016c8 	.word	0x240016c8

08005be4 <LR03_StateMachine>:

void LR03_StateMachine(void){
 8005be4:	b580      	push	{r7, lr}
 8005be6:	af00      	add	r7, sp, #0

	switch (Test_1) {
 8005be8:	4b09      	ldr	r3, [pc, #36]	@ (8005c10 <LR03_StateMachine+0x2c>)
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d002      	beq.n	8005bf6 <LR03_StateMachine+0x12>
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d003      	beq.n	8005bfc <LR03_StateMachine+0x18>
			break;
		case 2:
			LR03_Level(7);
			break;
		default:
			break;
 8005bf4:	e006      	b.n	8005c04 <LR03_StateMachine+0x20>
			LR03_AT();
 8005bf6:	f7ff ffa9 	bl	8005b4c <LR03_AT>
			break;
 8005bfa:	e003      	b.n	8005c04 <LR03_StateMachine+0x20>
			LR03_Level(7);
 8005bfc:	2007      	movs	r0, #7
 8005bfe:	f7ff ffb3 	bl	8005b68 <LR03_Level>
			break;
 8005c02:	bf00      	nop
	}
	Test_1 = 0;
 8005c04:	4b02      	ldr	r3, [pc, #8]	@ (8005c10 <LR03_StateMachine+0x2c>)
 8005c06:	2200      	movs	r2, #0
 8005c08:	701a      	strb	r2, [r3, #0]
}
 8005c0a:	bf00      	nop
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	240017c8 	.word	0x240017c8

08005c14 <PWM_Assign>:
Servo_mgmt_s PWM_Output = {
	    .S = {1500, 1500, 1500, 1500, 1500,
	          1500, 1500, 1500, 1500, 1500}
	};

void PWM_Assign(void) {
 8005c14:	b580      	push	{r7, lr}
 8005c16:	af00      	add	r7, sp, #0
    // Timer 2 (Canales 1, 2, 10, 9)
    TIM2->CCR1 = PWM_Output.S[0];  // Canal_1 (S[0])
 8005c18:	4b2a      	ldr	r3, [pc, #168]	@ (8005cc4 <PWM_Assign+0xb0>)
 8005c1a:	881a      	ldrh	r2, [r3, #0]
 8005c1c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005c20:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2->CCR2 = PWM_Output.S[1];  // Canal_2 (S[1])
 8005c22:	4b28      	ldr	r3, [pc, #160]	@ (8005cc4 <PWM_Assign+0xb0>)
 8005c24:	885a      	ldrh	r2, [r3, #2]
 8005c26:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005c2a:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM2->CCR3 = PWM_Output.S[9];  // Canal_10 (S[9])
 8005c2c:	4b25      	ldr	r3, [pc, #148]	@ (8005cc4 <PWM_Assign+0xb0>)
 8005c2e:	8a5a      	ldrh	r2, [r3, #18]
 8005c30:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005c34:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2->CCR4 = PWM_Output.S[8];  // Canal_9 (S[8])
 8005c36:	4b23      	ldr	r3, [pc, #140]	@ (8005cc4 <PWM_Assign+0xb0>)
 8005c38:	8a1a      	ldrh	r2, [r3, #16]
 8005c3a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005c3e:	641a      	str	r2, [r3, #64]	@ 0x40

    // Timer 3 (Canales 3, 4)
    TIM3->CCR1 = PWM_Output.S[2];  // Canal_3 (S[2])
 8005c40:	4b20      	ldr	r3, [pc, #128]	@ (8005cc4 <PWM_Assign+0xb0>)
 8005c42:	889a      	ldrh	r2, [r3, #4]
 8005c44:	4b20      	ldr	r3, [pc, #128]	@ (8005cc8 <PWM_Assign+0xb4>)
 8005c46:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3->CCR2 = PWM_Output.S[3];  // Canal_4 (S[3])
 8005c48:	4b1e      	ldr	r3, [pc, #120]	@ (8005cc4 <PWM_Assign+0xb0>)
 8005c4a:	88da      	ldrh	r2, [r3, #6]
 8005c4c:	4b1e      	ldr	r3, [pc, #120]	@ (8005cc8 <PWM_Assign+0xb4>)
 8005c4e:	639a      	str	r2, [r3, #56]	@ 0x38

    // Timer 4 (Canales 5-8)
    TIM4->CCR1 = PWM_Output.S[4];  // Canal_5 (S[4])
 8005c50:	4b1c      	ldr	r3, [pc, #112]	@ (8005cc4 <PWM_Assign+0xb0>)
 8005c52:	891a      	ldrh	r2, [r3, #8]
 8005c54:	4b1d      	ldr	r3, [pc, #116]	@ (8005ccc <PWM_Assign+0xb8>)
 8005c56:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM4->CCR2 = PWM_Output.S[5];  // Canal_6 (S[5])
 8005c58:	4b1a      	ldr	r3, [pc, #104]	@ (8005cc4 <PWM_Assign+0xb0>)
 8005c5a:	895a      	ldrh	r2, [r3, #10]
 8005c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8005ccc <PWM_Assign+0xb8>)
 8005c5e:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM4->CCR3 = PWM_Output.S[6];  // Canal_7 (S[6])
 8005c60:	4b18      	ldr	r3, [pc, #96]	@ (8005cc4 <PWM_Assign+0xb0>)
 8005c62:	899a      	ldrh	r2, [r3, #12]
 8005c64:	4b19      	ldr	r3, [pc, #100]	@ (8005ccc <PWM_Assign+0xb8>)
 8005c66:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM4->CCR4 = PWM_Output.S[7];  // Canal_8 (S[7])
 8005c68:	4b16      	ldr	r3, [pc, #88]	@ (8005cc4 <PWM_Assign+0xb0>)
 8005c6a:	89da      	ldrh	r2, [r3, #14]
 8005c6c:	4b17      	ldr	r3, [pc, #92]	@ (8005ccc <PWM_Assign+0xb8>)
 8005c6e:	641a      	str	r2, [r3, #64]	@ 0x40

    // Iniciar PWM (igual que antes)
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8005c70:	2100      	movs	r1, #0
 8005c72:	4817      	ldr	r0, [pc, #92]	@ (8005cd0 <PWM_Assign+0xbc>)
 8005c74:	f008 fd58 	bl	800e728 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8005c78:	2104      	movs	r1, #4
 8005c7a:	4815      	ldr	r0, [pc, #84]	@ (8005cd0 <PWM_Assign+0xbc>)
 8005c7c:	f008 fd54 	bl	800e728 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8005c80:	2108      	movs	r1, #8
 8005c82:	4813      	ldr	r0, [pc, #76]	@ (8005cd0 <PWM_Assign+0xbc>)
 8005c84:	f008 fd50 	bl	800e728 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8005c88:	210c      	movs	r1, #12
 8005c8a:	4811      	ldr	r0, [pc, #68]	@ (8005cd0 <PWM_Assign+0xbc>)
 8005c8c:	f008 fd4c 	bl	800e728 <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8005c90:	2100      	movs	r1, #0
 8005c92:	4810      	ldr	r0, [pc, #64]	@ (8005cd4 <PWM_Assign+0xc0>)
 8005c94:	f008 fd48 	bl	800e728 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8005c98:	2104      	movs	r1, #4
 8005c9a:	480e      	ldr	r0, [pc, #56]	@ (8005cd4 <PWM_Assign+0xc0>)
 8005c9c:	f008 fd44 	bl	800e728 <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8005ca0:	2100      	movs	r1, #0
 8005ca2:	480d      	ldr	r0, [pc, #52]	@ (8005cd8 <PWM_Assign+0xc4>)
 8005ca4:	f008 fd40 	bl	800e728 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8005ca8:	2104      	movs	r1, #4
 8005caa:	480b      	ldr	r0, [pc, #44]	@ (8005cd8 <PWM_Assign+0xc4>)
 8005cac:	f008 fd3c 	bl	800e728 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8005cb0:	2108      	movs	r1, #8
 8005cb2:	4809      	ldr	r0, [pc, #36]	@ (8005cd8 <PWM_Assign+0xc4>)
 8005cb4:	f008 fd38 	bl	800e728 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8005cb8:	210c      	movs	r1, #12
 8005cba:	4807      	ldr	r0, [pc, #28]	@ (8005cd8 <PWM_Assign+0xc4>)
 8005cbc:	f008 fd34 	bl	800e728 <HAL_TIM_PWM_Start>
}
 8005cc0:	bf00      	nop
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	24000068 	.word	0x24000068
 8005cc8:	40000400 	.word	0x40000400
 8005ccc:	40000800 	.word	0x40000800
 8005cd0:	2400103c 	.word	0x2400103c
 8005cd4:	24001088 	.word	0x24001088
 8005cd8:	240010d4 	.word	0x240010d4

08005cdc <SBUS_init>:

extern UART_HandleTypeDef huart1;
#define SBUS_UART_handler &huart1


void SBUS_init(void){
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(SBUS_UART_handler, &SBUS_RxBuffer, 1);
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	4903      	ldr	r1, [pc, #12]	@ (8005cf0 <SBUS_init+0x14>)
 8005ce4:	4803      	ldr	r0, [pc, #12]	@ (8005cf4 <SBUS_init+0x18>)
 8005ce6:	f009 fe7d 	bl	800f9e4 <HAL_UART_Receive_DMA>

}
 8005cea:	bf00      	nop
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	240017e5 	.word	0x240017e5
 8005cf4:	24001200 	.word	0x24001200

08005cf8 <SBUS_Receive>:

void SBUS_Receive(uint8_t SBUS_RxBuffer){
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	4603      	mov	r3, r0
 8005d00:	71fb      	strb	r3, [r7, #7]
	static uint8_t Actual_status = 0;
	static uint8_t RxCount;

	switch (Actual_status) {
 8005d02:	4b20      	ldr	r3, [pc, #128]	@ (8005d84 <SBUS_Receive+0x8c>)
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d002      	beq.n	8005d10 <SBUS_Receive+0x18>
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d017      	beq.n	8005d3e <SBUS_Receive+0x46>
 8005d0e:	e02f      	b.n	8005d70 <SBUS_Receive+0x78>
		case 0:
			if(SBUS_RxBuffer == 0x0F){
 8005d10:	79fb      	ldrb	r3, [r7, #7]
 8005d12:	2b0f      	cmp	r3, #15
 8005d14:	d10f      	bne.n	8005d36 <SBUS_Receive+0x3e>
				SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 8005d16:	4b1c      	ldr	r3, [pc, #112]	@ (8005d88 <SBUS_Receive+0x90>)
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	4a1b      	ldr	r2, [pc, #108]	@ (8005d8c <SBUS_Receive+0x94>)
 8005d1e:	79fb      	ldrb	r3, [r7, #7]
 8005d20:	5453      	strb	r3, [r2, r1]
				Actual_status = 1;
 8005d22:	4b18      	ldr	r3, [pc, #96]	@ (8005d84 <SBUS_Receive+0x8c>)
 8005d24:	2201      	movs	r2, #1
 8005d26:	701a      	strb	r2, [r3, #0]
				RxCount++;
 8005d28:	4b17      	ldr	r3, [pc, #92]	@ (8005d88 <SBUS_Receive+0x90>)
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	b2da      	uxtb	r2, r3
 8005d30:	4b15      	ldr	r3, [pc, #84]	@ (8005d88 <SBUS_Receive+0x90>)
 8005d32:	701a      	strb	r2, [r3, #0]
			}
			else{
				RxCount = 0;
			}
			break;
 8005d34:	e021      	b.n	8005d7a <SBUS_Receive+0x82>
				RxCount = 0;
 8005d36:	4b14      	ldr	r3, [pc, #80]	@ (8005d88 <SBUS_Receive+0x90>)
 8005d38:	2200      	movs	r2, #0
 8005d3a:	701a      	strb	r2, [r3, #0]
			break;
 8005d3c:	e01d      	b.n	8005d7a <SBUS_Receive+0x82>
		case 1:
			SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 8005d3e:	4b12      	ldr	r3, [pc, #72]	@ (8005d88 <SBUS_Receive+0x90>)
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	4619      	mov	r1, r3
 8005d44:	4a11      	ldr	r2, [pc, #68]	@ (8005d8c <SBUS_Receive+0x94>)
 8005d46:	79fb      	ldrb	r3, [r7, #7]
 8005d48:	5453      	strb	r3, [r2, r1]
			RxCount++;
 8005d4a:	4b0f      	ldr	r3, [pc, #60]	@ (8005d88 <SBUS_Receive+0x90>)
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	b2da      	uxtb	r2, r3
 8005d52:	4b0d      	ldr	r3, [pc, #52]	@ (8005d88 <SBUS_Receive+0x90>)
 8005d54:	701a      	strb	r2, [r3, #0]
			if(RxCount == 24){
 8005d56:	4b0c      	ldr	r3, [pc, #48]	@ (8005d88 <SBUS_Receive+0x90>)
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	2b18      	cmp	r3, #24
 8005d5c:	d10c      	bne.n	8005d78 <SBUS_Receive+0x80>
				RxCount = 0;
 8005d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8005d88 <SBUS_Receive+0x90>)
 8005d60:	2200      	movs	r2, #0
 8005d62:	701a      	strb	r2, [r3, #0]
				Actual_status = 0;
 8005d64:	4b07      	ldr	r3, [pc, #28]	@ (8005d84 <SBUS_Receive+0x8c>)
 8005d66:	2200      	movs	r2, #0
 8005d68:	701a      	strb	r2, [r3, #0]
				SBUS_getData();
 8005d6a:	f000 f811 	bl	8005d90 <SBUS_getData>
			}
			break;
 8005d6e:	e003      	b.n	8005d78 <SBUS_Receive+0x80>
		default:
			Actual_status = 0;
 8005d70:	4b04      	ldr	r3, [pc, #16]	@ (8005d84 <SBUS_Receive+0x8c>)
 8005d72:	2200      	movs	r2, #0
 8005d74:	701a      	strb	r2, [r3, #0]
			break;
 8005d76:	e000      	b.n	8005d7a <SBUS_Receive+0x82>
			break;
 8005d78:	bf00      	nop
	}
}
 8005d7a:	bf00      	nop
 8005d7c:	3708      	adds	r7, #8
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	240017e6 	.word	0x240017e6
 8005d88:	240017e7 	.word	0x240017e7
 8005d8c:	240017cc 	.word	0x240017cc

08005d90 <SBUS_getData>:


void SBUS_getData(void){
 8005d90:	b480      	push	{r7}
 8005d92:	af00      	add	r7, sp, #0
	//Se hace el corrimiento de bits para dar la estructura de los 16 canales, donde cada canal esta compuesto por 11 bits
	//pero cada paquete es de 1 byte. Para cada canal se utilizan los 8 bits (O los que correspondan) de el byte 1
	//(O el que corresponda) como los bits menos significativos del canal 1, y los tres bits faltantes se toman los 3 bits
	// menos significativos (O los que correspondan) del byte 2 y se colocan como los 3 bits más significativos del canal 1.
	Radio_input.Canal_1 = ((SBUS_UART_Rx[1] | SBUS_UART_Rx[2] << 8) & 0x07FF);
 8005d94:	4b95      	ldr	r3, [pc, #596]	@ (8005fec <SBUS_getData+0x25c>)
 8005d96:	785b      	ldrb	r3, [r3, #1]
 8005d98:	b21a      	sxth	r2, r3
 8005d9a:	4b94      	ldr	r3, [pc, #592]	@ (8005fec <SBUS_getData+0x25c>)
 8005d9c:	789b      	ldrb	r3, [r3, #2]
 8005d9e:	021b      	lsls	r3, r3, #8
 8005da0:	b21b      	sxth	r3, r3
 8005da2:	4313      	orrs	r3, r2
 8005da4:	b21b      	sxth	r3, r3
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	4b90      	ldr	r3, [pc, #576]	@ (8005ff0 <SBUS_getData+0x260>)
 8005db0:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_2 = ((SBUS_UART_Rx[2] >> 3 | SBUS_UART_Rx[3] << 5) & 0x07FF);
 8005db2:	4b8e      	ldr	r3, [pc, #568]	@ (8005fec <SBUS_getData+0x25c>)
 8005db4:	789b      	ldrb	r3, [r3, #2]
 8005db6:	08db      	lsrs	r3, r3, #3
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	b21a      	sxth	r2, r3
 8005dbc:	4b8b      	ldr	r3, [pc, #556]	@ (8005fec <SBUS_getData+0x25c>)
 8005dbe:	78db      	ldrb	r3, [r3, #3]
 8005dc0:	015b      	lsls	r3, r3, #5
 8005dc2:	b21b      	sxth	r3, r3
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	b21b      	sxth	r3, r3
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005dce:	b29a      	uxth	r2, r3
 8005dd0:	4b87      	ldr	r3, [pc, #540]	@ (8005ff0 <SBUS_getData+0x260>)
 8005dd2:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_3 = ((SBUS_UART_Rx[3] >> 6 | SBUS_UART_Rx[4] << 2 | SBUS_UART_Rx[5] << 10) & 0x07FF);
 8005dd4:	4b85      	ldr	r3, [pc, #532]	@ (8005fec <SBUS_getData+0x25c>)
 8005dd6:	78db      	ldrb	r3, [r3, #3]
 8005dd8:	099b      	lsrs	r3, r3, #6
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	b21a      	sxth	r2, r3
 8005dde:	4b83      	ldr	r3, [pc, #524]	@ (8005fec <SBUS_getData+0x25c>)
 8005de0:	791b      	ldrb	r3, [r3, #4]
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	b21b      	sxth	r3, r3
 8005de6:	4313      	orrs	r3, r2
 8005de8:	b21a      	sxth	r2, r3
 8005dea:	4b80      	ldr	r3, [pc, #512]	@ (8005fec <SBUS_getData+0x25c>)
 8005dec:	795b      	ldrb	r3, [r3, #5]
 8005dee:	029b      	lsls	r3, r3, #10
 8005df0:	b21b      	sxth	r3, r3
 8005df2:	4313      	orrs	r3, r2
 8005df4:	b21b      	sxth	r3, r3
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	4b7c      	ldr	r3, [pc, #496]	@ (8005ff0 <SBUS_getData+0x260>)
 8005e00:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_4 = ((SBUS_UART_Rx[5] >> 1 | SBUS_UART_Rx[6] << 7) & 0x07FF);
 8005e02:	4b7a      	ldr	r3, [pc, #488]	@ (8005fec <SBUS_getData+0x25c>)
 8005e04:	795b      	ldrb	r3, [r3, #5]
 8005e06:	085b      	lsrs	r3, r3, #1
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	b21a      	sxth	r2, r3
 8005e0c:	4b77      	ldr	r3, [pc, #476]	@ (8005fec <SBUS_getData+0x25c>)
 8005e0e:	799b      	ldrb	r3, [r3, #6]
 8005e10:	01db      	lsls	r3, r3, #7
 8005e12:	b21b      	sxth	r3, r3
 8005e14:	4313      	orrs	r3, r2
 8005e16:	b21b      	sxth	r3, r3
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	4b73      	ldr	r3, [pc, #460]	@ (8005ff0 <SBUS_getData+0x260>)
 8005e22:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_5 = ((SBUS_UART_Rx[6] >> 4 | SBUS_UART_Rx[7] << 4) & 0x07FF);
 8005e24:	4b71      	ldr	r3, [pc, #452]	@ (8005fec <SBUS_getData+0x25c>)
 8005e26:	799b      	ldrb	r3, [r3, #6]
 8005e28:	091b      	lsrs	r3, r3, #4
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	b21a      	sxth	r2, r3
 8005e2e:	4b6f      	ldr	r3, [pc, #444]	@ (8005fec <SBUS_getData+0x25c>)
 8005e30:	79db      	ldrb	r3, [r3, #7]
 8005e32:	011b      	lsls	r3, r3, #4
 8005e34:	b21b      	sxth	r3, r3
 8005e36:	4313      	orrs	r3, r2
 8005e38:	b21b      	sxth	r3, r3
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	4b6b      	ldr	r3, [pc, #428]	@ (8005ff0 <SBUS_getData+0x260>)
 8005e44:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_6 = ((SBUS_UART_Rx[7] >> 7 | SBUS_UART_Rx[8] << 1 | SBUS_UART_Rx[9] << 9) & 0x07FF);
 8005e46:	4b69      	ldr	r3, [pc, #420]	@ (8005fec <SBUS_getData+0x25c>)
 8005e48:	79db      	ldrb	r3, [r3, #7]
 8005e4a:	09db      	lsrs	r3, r3, #7
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	b21a      	sxth	r2, r3
 8005e50:	4b66      	ldr	r3, [pc, #408]	@ (8005fec <SBUS_getData+0x25c>)
 8005e52:	7a1b      	ldrb	r3, [r3, #8]
 8005e54:	005b      	lsls	r3, r3, #1
 8005e56:	b21b      	sxth	r3, r3
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	b21a      	sxth	r2, r3
 8005e5c:	4b63      	ldr	r3, [pc, #396]	@ (8005fec <SBUS_getData+0x25c>)
 8005e5e:	7a5b      	ldrb	r3, [r3, #9]
 8005e60:	025b      	lsls	r3, r3, #9
 8005e62:	b21b      	sxth	r3, r3
 8005e64:	4313      	orrs	r3, r2
 8005e66:	b21b      	sxth	r3, r3
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	4b5f      	ldr	r3, [pc, #380]	@ (8005ff0 <SBUS_getData+0x260>)
 8005e72:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_7 = ((SBUS_UART_Rx[9] >> 2 | SBUS_UART_Rx[10] << 6) & 0x07FF);
 8005e74:	4b5d      	ldr	r3, [pc, #372]	@ (8005fec <SBUS_getData+0x25c>)
 8005e76:	7a5b      	ldrb	r3, [r3, #9]
 8005e78:	089b      	lsrs	r3, r3, #2
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	b21a      	sxth	r2, r3
 8005e7e:	4b5b      	ldr	r3, [pc, #364]	@ (8005fec <SBUS_getData+0x25c>)
 8005e80:	7a9b      	ldrb	r3, [r3, #10]
 8005e82:	019b      	lsls	r3, r3, #6
 8005e84:	b21b      	sxth	r3, r3
 8005e86:	4313      	orrs	r3, r2
 8005e88:	b21b      	sxth	r3, r3
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	4b57      	ldr	r3, [pc, #348]	@ (8005ff0 <SBUS_getData+0x260>)
 8005e94:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_8 = ((SBUS_UART_Rx[10] >> 5 | SBUS_UART_Rx[11] << 3) & 0x07FF);
 8005e96:	4b55      	ldr	r3, [pc, #340]	@ (8005fec <SBUS_getData+0x25c>)
 8005e98:	7a9b      	ldrb	r3, [r3, #10]
 8005e9a:	095b      	lsrs	r3, r3, #5
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	b21a      	sxth	r2, r3
 8005ea0:	4b52      	ldr	r3, [pc, #328]	@ (8005fec <SBUS_getData+0x25c>)
 8005ea2:	7adb      	ldrb	r3, [r3, #11]
 8005ea4:	00db      	lsls	r3, r3, #3
 8005ea6:	b21b      	sxth	r3, r3
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	b21b      	sxth	r3, r3
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	4b4e      	ldr	r3, [pc, #312]	@ (8005ff0 <SBUS_getData+0x260>)
 8005eb6:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_9 = ((SBUS_UART_Rx[12] | SBUS_UART_Rx[13] << 8) & 0x07FF);
 8005eb8:	4b4c      	ldr	r3, [pc, #304]	@ (8005fec <SBUS_getData+0x25c>)
 8005eba:	7b1b      	ldrb	r3, [r3, #12]
 8005ebc:	b21a      	sxth	r2, r3
 8005ebe:	4b4b      	ldr	r3, [pc, #300]	@ (8005fec <SBUS_getData+0x25c>)
 8005ec0:	7b5b      	ldrb	r3, [r3, #13]
 8005ec2:	021b      	lsls	r3, r3, #8
 8005ec4:	b21b      	sxth	r3, r3
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	b21b      	sxth	r3, r3
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	4b47      	ldr	r3, [pc, #284]	@ (8005ff0 <SBUS_getData+0x260>)
 8005ed4:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_10 = ((SBUS_UART_Rx[13] >> 3 | SBUS_UART_Rx[14] << 5) & 0x07FF);
 8005ed6:	4b45      	ldr	r3, [pc, #276]	@ (8005fec <SBUS_getData+0x25c>)
 8005ed8:	7b5b      	ldrb	r3, [r3, #13]
 8005eda:	08db      	lsrs	r3, r3, #3
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	b21a      	sxth	r2, r3
 8005ee0:	4b42      	ldr	r3, [pc, #264]	@ (8005fec <SBUS_getData+0x25c>)
 8005ee2:	7b9b      	ldrb	r3, [r3, #14]
 8005ee4:	015b      	lsls	r3, r3, #5
 8005ee6:	b21b      	sxth	r3, r3
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	b21b      	sxth	r3, r3
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	4b3e      	ldr	r3, [pc, #248]	@ (8005ff0 <SBUS_getData+0x260>)
 8005ef6:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_11 = ((SBUS_UART_Rx[14] >> 6 | SBUS_UART_Rx[15] << 2 | SBUS_UART_Rx[16] << 10) & 0x07FF);
 8005ef8:	4b3c      	ldr	r3, [pc, #240]	@ (8005fec <SBUS_getData+0x25c>)
 8005efa:	7b9b      	ldrb	r3, [r3, #14]
 8005efc:	099b      	lsrs	r3, r3, #6
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	b21a      	sxth	r2, r3
 8005f02:	4b3a      	ldr	r3, [pc, #232]	@ (8005fec <SBUS_getData+0x25c>)
 8005f04:	7bdb      	ldrb	r3, [r3, #15]
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	b21b      	sxth	r3, r3
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	b21a      	sxth	r2, r3
 8005f0e:	4b37      	ldr	r3, [pc, #220]	@ (8005fec <SBUS_getData+0x25c>)
 8005f10:	7c1b      	ldrb	r3, [r3, #16]
 8005f12:	029b      	lsls	r3, r3, #10
 8005f14:	b21b      	sxth	r3, r3
 8005f16:	4313      	orrs	r3, r2
 8005f18:	b21b      	sxth	r3, r3
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	4b33      	ldr	r3, [pc, #204]	@ (8005ff0 <SBUS_getData+0x260>)
 8005f24:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_12 = ((SBUS_UART_Rx[16] >> 1 | SBUS_UART_Rx[17] << 7) & 0x07FF);
 8005f26:	4b31      	ldr	r3, [pc, #196]	@ (8005fec <SBUS_getData+0x25c>)
 8005f28:	7c1b      	ldrb	r3, [r3, #16]
 8005f2a:	085b      	lsrs	r3, r3, #1
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	b21a      	sxth	r2, r3
 8005f30:	4b2e      	ldr	r3, [pc, #184]	@ (8005fec <SBUS_getData+0x25c>)
 8005f32:	7c5b      	ldrb	r3, [r3, #17]
 8005f34:	01db      	lsls	r3, r3, #7
 8005f36:	b21b      	sxth	r3, r3
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	b21b      	sxth	r3, r3
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	4b2a      	ldr	r3, [pc, #168]	@ (8005ff0 <SBUS_getData+0x260>)
 8005f46:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_13 = ((SBUS_UART_Rx[17] >> 4 | SBUS_UART_Rx[18] << 4) & 0x07FF);
 8005f48:	4b28      	ldr	r3, [pc, #160]	@ (8005fec <SBUS_getData+0x25c>)
 8005f4a:	7c5b      	ldrb	r3, [r3, #17]
 8005f4c:	091b      	lsrs	r3, r3, #4
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	b21a      	sxth	r2, r3
 8005f52:	4b26      	ldr	r3, [pc, #152]	@ (8005fec <SBUS_getData+0x25c>)
 8005f54:	7c9b      	ldrb	r3, [r3, #18]
 8005f56:	011b      	lsls	r3, r3, #4
 8005f58:	b21b      	sxth	r3, r3
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	b21b      	sxth	r3, r3
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	4b22      	ldr	r3, [pc, #136]	@ (8005ff0 <SBUS_getData+0x260>)
 8005f68:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_14 = ((SBUS_UART_Rx[18] >> 7 | SBUS_UART_Rx[19] << 1 | SBUS_UART_Rx[20] << 9) & 0x07FF);
 8005f6a:	4b20      	ldr	r3, [pc, #128]	@ (8005fec <SBUS_getData+0x25c>)
 8005f6c:	7c9b      	ldrb	r3, [r3, #18]
 8005f6e:	09db      	lsrs	r3, r3, #7
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	b21a      	sxth	r2, r3
 8005f74:	4b1d      	ldr	r3, [pc, #116]	@ (8005fec <SBUS_getData+0x25c>)
 8005f76:	7cdb      	ldrb	r3, [r3, #19]
 8005f78:	005b      	lsls	r3, r3, #1
 8005f7a:	b21b      	sxth	r3, r3
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	b21a      	sxth	r2, r3
 8005f80:	4b1a      	ldr	r3, [pc, #104]	@ (8005fec <SBUS_getData+0x25c>)
 8005f82:	7d1b      	ldrb	r3, [r3, #20]
 8005f84:	025b      	lsls	r3, r3, #9
 8005f86:	b21b      	sxth	r3, r3
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	b21b      	sxth	r3, r3
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	4b16      	ldr	r3, [pc, #88]	@ (8005ff0 <SBUS_getData+0x260>)
 8005f96:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_15 = ((SBUS_UART_Rx[20] >> 2 | SBUS_UART_Rx[21] << 6) & 0x07FF);
 8005f98:	4b14      	ldr	r3, [pc, #80]	@ (8005fec <SBUS_getData+0x25c>)
 8005f9a:	7d1b      	ldrb	r3, [r3, #20]
 8005f9c:	089b      	lsrs	r3, r3, #2
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	b21a      	sxth	r2, r3
 8005fa2:	4b12      	ldr	r3, [pc, #72]	@ (8005fec <SBUS_getData+0x25c>)
 8005fa4:	7d5b      	ldrb	r3, [r3, #21]
 8005fa6:	019b      	lsls	r3, r3, #6
 8005fa8:	b21b      	sxth	r3, r3
 8005faa:	4313      	orrs	r3, r2
 8005fac:	b21b      	sxth	r3, r3
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8005ff0 <SBUS_getData+0x260>)
 8005fb8:	83da      	strh	r2, [r3, #30]
	Radio_input.Canal_16 = ((SBUS_UART_Rx[21] >> 5 | SBUS_UART_Rx[22] << 3) & 0x07FF);
 8005fba:	4b0c      	ldr	r3, [pc, #48]	@ (8005fec <SBUS_getData+0x25c>)
 8005fbc:	7d5b      	ldrb	r3, [r3, #21]
 8005fbe:	095b      	lsrs	r3, r3, #5
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	b21a      	sxth	r2, r3
 8005fc4:	4b09      	ldr	r3, [pc, #36]	@ (8005fec <SBUS_getData+0x25c>)
 8005fc6:	7d9b      	ldrb	r3, [r3, #22]
 8005fc8:	00db      	lsls	r3, r3, #3
 8005fca:	b21b      	sxth	r3, r3
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	b21b      	sxth	r3, r3
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	4b05      	ldr	r3, [pc, #20]	@ (8005ff0 <SBUS_getData+0x260>)
 8005fda:	841a      	strh	r2, [r3, #32]

	Radio_input.Canal_1 = (uint16_t)((((float)Radio_input.Canal_1 - 352) /1344 ) * 1000) + 1000;
 8005fdc:	4b04      	ldr	r3, [pc, #16]	@ (8005ff0 <SBUS_getData+0x260>)
 8005fde:	885b      	ldrh	r3, [r3, #2]
 8005fe0:	ee07 3a90 	vmov	s15, r3
 8005fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fe8:	e00a      	b.n	8006000 <SBUS_getData+0x270>
 8005fea:	bf00      	nop
 8005fec:	240017cc 	.word	0x240017cc
 8005ff0:	2400007c 	.word	0x2400007c
 8005ff4:	43b00000 	.word	0x43b00000
 8005ff8:	44a80000 	.word	0x44a80000
 8005ffc:	447a0000 	.word	0x447a0000
 8006000:	ed1f 7a04 	vldr	s14, [pc, #-16]	@ 8005ff4 <SBUS_getData+0x264>
 8006004:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006008:	ed5f 6a05 	vldr	s13, [pc, #-20]	@ 8005ff8 <SBUS_getData+0x268>
 800600c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006010:	ed1f 7a06 	vldr	s14, [pc, #-24]	@ 8005ffc <SBUS_getData+0x26c>
 8006014:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006018:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800601c:	ee17 3a90 	vmov	r3, s15
 8006020:	b29b      	uxth	r3, r3
 8006022:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8006026:	b29a      	uxth	r2, r3
 8006028:	4bd1      	ldr	r3, [pc, #836]	@ (8006370 <SBUS_getData+0x5e0>)
 800602a:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_2 = (uint16_t)((((float)Radio_input.Canal_2 - 352) /1344 ) * 1000) + 1000;
 800602c:	4bd0      	ldr	r3, [pc, #832]	@ (8006370 <SBUS_getData+0x5e0>)
 800602e:	889b      	ldrh	r3, [r3, #4]
 8006030:	ee07 3a90 	vmov	s15, r3
 8006034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006038:	ed9f 7ace 	vldr	s14, [pc, #824]	@ 8006374 <SBUS_getData+0x5e4>
 800603c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006040:	eddf 6acd 	vldr	s13, [pc, #820]	@ 8006378 <SBUS_getData+0x5e8>
 8006044:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006048:	ed9f 7acc 	vldr	s14, [pc, #816]	@ 800637c <SBUS_getData+0x5ec>
 800604c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006050:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006054:	ee17 3a90 	vmov	r3, s15
 8006058:	b29b      	uxth	r3, r3
 800605a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800605e:	b29a      	uxth	r2, r3
 8006060:	4bc3      	ldr	r3, [pc, #780]	@ (8006370 <SBUS_getData+0x5e0>)
 8006062:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_3 = (uint16_t)((((float)Radio_input.Canal_3 - 352) /1344 ) * 1000) + 1000;
 8006064:	4bc2      	ldr	r3, [pc, #776]	@ (8006370 <SBUS_getData+0x5e0>)
 8006066:	88db      	ldrh	r3, [r3, #6]
 8006068:	ee07 3a90 	vmov	s15, r3
 800606c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006070:	ed9f 7ac0 	vldr	s14, [pc, #768]	@ 8006374 <SBUS_getData+0x5e4>
 8006074:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006078:	eddf 6abf 	vldr	s13, [pc, #764]	@ 8006378 <SBUS_getData+0x5e8>
 800607c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006080:	ed9f 7abe 	vldr	s14, [pc, #760]	@ 800637c <SBUS_getData+0x5ec>
 8006084:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006088:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800608c:	ee17 3a90 	vmov	r3, s15
 8006090:	b29b      	uxth	r3, r3
 8006092:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8006096:	b29a      	uxth	r2, r3
 8006098:	4bb5      	ldr	r3, [pc, #724]	@ (8006370 <SBUS_getData+0x5e0>)
 800609a:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_4 = (uint16_t)((((float)Radio_input.Canal_4 - 352) /1344 ) * 1000) + 1000;
 800609c:	4bb4      	ldr	r3, [pc, #720]	@ (8006370 <SBUS_getData+0x5e0>)
 800609e:	891b      	ldrh	r3, [r3, #8]
 80060a0:	ee07 3a90 	vmov	s15, r3
 80060a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060a8:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 8006374 <SBUS_getData+0x5e4>
 80060ac:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80060b0:	eddf 6ab1 	vldr	s13, [pc, #708]	@ 8006378 <SBUS_getData+0x5e8>
 80060b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80060b8:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 800637c <SBUS_getData+0x5ec>
 80060bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060c4:	ee17 3a90 	vmov	r3, s15
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	4ba7      	ldr	r3, [pc, #668]	@ (8006370 <SBUS_getData+0x5e0>)
 80060d2:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_5 = (uint16_t)((((float)Radio_input.Canal_5 - 352) /1344 ) * 1000) + 1000;
 80060d4:	4ba6      	ldr	r3, [pc, #664]	@ (8006370 <SBUS_getData+0x5e0>)
 80060d6:	895b      	ldrh	r3, [r3, #10]
 80060d8:	ee07 3a90 	vmov	s15, r3
 80060dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060e0:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 8006374 <SBUS_getData+0x5e4>
 80060e4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80060e8:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8006378 <SBUS_getData+0x5e8>
 80060ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80060f0:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 800637c <SBUS_getData+0x5ec>
 80060f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060fc:	ee17 3a90 	vmov	r3, s15
 8006100:	b29b      	uxth	r3, r3
 8006102:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8006106:	b29a      	uxth	r2, r3
 8006108:	4b99      	ldr	r3, [pc, #612]	@ (8006370 <SBUS_getData+0x5e0>)
 800610a:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_6 = (uint16_t)((((float)Radio_input.Canal_6 - 352) /1344 ) * 1000) + 1000;
 800610c:	4b98      	ldr	r3, [pc, #608]	@ (8006370 <SBUS_getData+0x5e0>)
 800610e:	899b      	ldrh	r3, [r3, #12]
 8006110:	ee07 3a90 	vmov	s15, r3
 8006114:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006118:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8006374 <SBUS_getData+0x5e4>
 800611c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006120:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8006378 <SBUS_getData+0x5e8>
 8006124:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006128:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 800637c <SBUS_getData+0x5ec>
 800612c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006130:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006134:	ee17 3a90 	vmov	r3, s15
 8006138:	b29b      	uxth	r3, r3
 800613a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800613e:	b29a      	uxth	r2, r3
 8006140:	4b8b      	ldr	r3, [pc, #556]	@ (8006370 <SBUS_getData+0x5e0>)
 8006142:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_7 = (uint16_t)((((float)Radio_input.Canal_7 - 352) /1344 ) * 1000) + 1000;
 8006144:	4b8a      	ldr	r3, [pc, #552]	@ (8006370 <SBUS_getData+0x5e0>)
 8006146:	89db      	ldrh	r3, [r3, #14]
 8006148:	ee07 3a90 	vmov	s15, r3
 800614c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006150:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8006374 <SBUS_getData+0x5e4>
 8006154:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006158:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8006378 <SBUS_getData+0x5e8>
 800615c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006160:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 800637c <SBUS_getData+0x5ec>
 8006164:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006168:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800616c:	ee17 3a90 	vmov	r3, s15
 8006170:	b29b      	uxth	r3, r3
 8006172:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8006176:	b29a      	uxth	r2, r3
 8006178:	4b7d      	ldr	r3, [pc, #500]	@ (8006370 <SBUS_getData+0x5e0>)
 800617a:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_8 = (uint16_t)((((float)Radio_input.Canal_8 - 352) /1344 ) * 1000) + 1000;
 800617c:	4b7c      	ldr	r3, [pc, #496]	@ (8006370 <SBUS_getData+0x5e0>)
 800617e:	8a1b      	ldrh	r3, [r3, #16]
 8006180:	ee07 3a90 	vmov	s15, r3
 8006184:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006188:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8006374 <SBUS_getData+0x5e4>
 800618c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006190:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8006378 <SBUS_getData+0x5e8>
 8006194:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006198:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 800637c <SBUS_getData+0x5ec>
 800619c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061a4:	ee17 3a90 	vmov	r3, s15
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	4b6f      	ldr	r3, [pc, #444]	@ (8006370 <SBUS_getData+0x5e0>)
 80061b2:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_9 = (uint16_t)((((float)Radio_input.Canal_9 - 352) /1344 ) * 1000) + 1000;
 80061b4:	4b6e      	ldr	r3, [pc, #440]	@ (8006370 <SBUS_getData+0x5e0>)
 80061b6:	8a5b      	ldrh	r3, [r3, #18]
 80061b8:	ee07 3a90 	vmov	s15, r3
 80061bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061c0:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8006374 <SBUS_getData+0x5e4>
 80061c4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80061c8:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8006378 <SBUS_getData+0x5e8>
 80061cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80061d0:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 800637c <SBUS_getData+0x5ec>
 80061d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061dc:	ee17 3a90 	vmov	r3, s15
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	4b61      	ldr	r3, [pc, #388]	@ (8006370 <SBUS_getData+0x5e0>)
 80061ea:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_10 = (uint16_t)((((float)Radio_input.Canal_10 - 352) /1344 ) * 1000) + 1000;
 80061ec:	4b60      	ldr	r3, [pc, #384]	@ (8006370 <SBUS_getData+0x5e0>)
 80061ee:	8a9b      	ldrh	r3, [r3, #20]
 80061f0:	ee07 3a90 	vmov	s15, r3
 80061f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061f8:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8006374 <SBUS_getData+0x5e4>
 80061fc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006200:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8006378 <SBUS_getData+0x5e8>
 8006204:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006208:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 800637c <SBUS_getData+0x5ec>
 800620c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006210:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006214:	ee17 3a90 	vmov	r3, s15
 8006218:	b29b      	uxth	r3, r3
 800621a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800621e:	b29a      	uxth	r2, r3
 8006220:	4b53      	ldr	r3, [pc, #332]	@ (8006370 <SBUS_getData+0x5e0>)
 8006222:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_11 = (uint16_t)((((float)Radio_input.Canal_11 - 352) /1344 ) * 1000) + 1000;
 8006224:	4b52      	ldr	r3, [pc, #328]	@ (8006370 <SBUS_getData+0x5e0>)
 8006226:	8adb      	ldrh	r3, [r3, #22]
 8006228:	ee07 3a90 	vmov	s15, r3
 800622c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006230:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8006374 <SBUS_getData+0x5e4>
 8006234:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006238:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006378 <SBUS_getData+0x5e8>
 800623c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006240:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 800637c <SBUS_getData+0x5ec>
 8006244:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006248:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800624c:	ee17 3a90 	vmov	r3, s15
 8006250:	b29b      	uxth	r3, r3
 8006252:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8006256:	b29a      	uxth	r2, r3
 8006258:	4b45      	ldr	r3, [pc, #276]	@ (8006370 <SBUS_getData+0x5e0>)
 800625a:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_12 = (uint16_t)((((float)Radio_input.Canal_12 - 352) /1344 ) * 1000) + 1000;
 800625c:	4b44      	ldr	r3, [pc, #272]	@ (8006370 <SBUS_getData+0x5e0>)
 800625e:	8b1b      	ldrh	r3, [r3, #24]
 8006260:	ee07 3a90 	vmov	s15, r3
 8006264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006268:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8006374 <SBUS_getData+0x5e4>
 800626c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006270:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8006378 <SBUS_getData+0x5e8>
 8006274:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006278:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 800637c <SBUS_getData+0x5ec>
 800627c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006280:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006284:	ee17 3a90 	vmov	r3, s15
 8006288:	b29b      	uxth	r3, r3
 800628a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800628e:	b29a      	uxth	r2, r3
 8006290:	4b37      	ldr	r3, [pc, #220]	@ (8006370 <SBUS_getData+0x5e0>)
 8006292:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_13 = (uint16_t)((((float)Radio_input.Canal_13 - 352) /1344 ) * 1000) + 1000;
 8006294:	4b36      	ldr	r3, [pc, #216]	@ (8006370 <SBUS_getData+0x5e0>)
 8006296:	8b5b      	ldrh	r3, [r3, #26]
 8006298:	ee07 3a90 	vmov	s15, r3
 800629c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062a0:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8006374 <SBUS_getData+0x5e4>
 80062a4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80062a8:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8006378 <SBUS_getData+0x5e8>
 80062ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80062b0:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800637c <SBUS_getData+0x5ec>
 80062b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062bc:	ee17 3a90 	vmov	r3, s15
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	4b29      	ldr	r3, [pc, #164]	@ (8006370 <SBUS_getData+0x5e0>)
 80062ca:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_14 = (uint16_t)((((float)Radio_input.Canal_14 - 352) /1344 ) * 1000) + 1000;
 80062cc:	4b28      	ldr	r3, [pc, #160]	@ (8006370 <SBUS_getData+0x5e0>)
 80062ce:	8b9b      	ldrh	r3, [r3, #28]
 80062d0:	ee07 3a90 	vmov	s15, r3
 80062d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062d8:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8006374 <SBUS_getData+0x5e4>
 80062dc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80062e0:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8006378 <SBUS_getData+0x5e8>
 80062e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80062e8:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 800637c <SBUS_getData+0x5ec>
 80062ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062f4:	ee17 3a90 	vmov	r3, s15
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80062fe:	b29a      	uxth	r2, r3
 8006300:	4b1b      	ldr	r3, [pc, #108]	@ (8006370 <SBUS_getData+0x5e0>)
 8006302:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_15 = (uint16_t)((((float)Radio_input.Canal_15 - 352) /1344 ) * 1000) + 1000;
 8006304:	4b1a      	ldr	r3, [pc, #104]	@ (8006370 <SBUS_getData+0x5e0>)
 8006306:	8bdb      	ldrh	r3, [r3, #30]
 8006308:	ee07 3a90 	vmov	s15, r3
 800630c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006310:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8006374 <SBUS_getData+0x5e4>
 8006314:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006318:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8006378 <SBUS_getData+0x5e8>
 800631c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006320:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800637c <SBUS_getData+0x5ec>
 8006324:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006328:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800632c:	ee17 3a90 	vmov	r3, s15
 8006330:	b29b      	uxth	r3, r3
 8006332:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8006336:	b29a      	uxth	r2, r3
 8006338:	4b0d      	ldr	r3, [pc, #52]	@ (8006370 <SBUS_getData+0x5e0>)
 800633a:	83da      	strh	r2, [r3, #30]
	Radio_input.Canal_16 = (uint16_t)((((float)Radio_input.Canal_16 - 352) /1344 ) * 1000) + 1000;
 800633c:	4b0c      	ldr	r3, [pc, #48]	@ (8006370 <SBUS_getData+0x5e0>)
 800633e:	8c1b      	ldrh	r3, [r3, #32]
 8006340:	ee07 3a90 	vmov	s15, r3
 8006344:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006348:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8006374 <SBUS_getData+0x5e4>
 800634c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006350:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8006378 <SBUS_getData+0x5e8>
 8006354:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006358:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800637c <SBUS_getData+0x5ec>
 800635c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006360:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006364:	ee17 3a90 	vmov	r3, s15
 8006368:	b29b      	uxth	r3, r3
 800636a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800636e:	e007      	b.n	8006380 <SBUS_getData+0x5f0>
 8006370:	2400007c 	.word	0x2400007c
 8006374:	43b00000 	.word	0x43b00000
 8006378:	44a80000 	.word	0x44a80000
 800637c:	447a0000 	.word	0x447a0000
 8006380:	b29a      	uxth	r2, r3
 8006382:	4b2a      	ldr	r3, [pc, #168]	@ (800642c <SBUS_getData+0x69c>)
 8006384:	841a      	strh	r2, [r3, #32]

	//En el caso del byte 24, el primer bit menos significativo corresponde al canal 17, el segundo al canal 18, el tercero a el fail safe y
	//el cuarto a la perdida de paquetes. Los 4 restantes no se utilizan.

	Radio_input.Banderas = SBUS_UART_Rx[23];
 8006386:	4b2a      	ldr	r3, [pc, #168]	@ (8006430 <SBUS_getData+0x6a0>)
 8006388:	7dda      	ldrb	r2, [r3, #23]
 800638a:	4b28      	ldr	r3, [pc, #160]	@ (800642c <SBUS_getData+0x69c>)
 800638c:	701a      	strb	r2, [r3, #0]
	if(SBUS_UART_Rx[23]>=8){
 800638e:	4b28      	ldr	r3, [pc, #160]	@ (8006430 <SBUS_getData+0x6a0>)
 8006390:	7ddb      	ldrb	r3, [r3, #23]
 8006392:	2b07      	cmp	r3, #7
 8006394:	d90a      	bls.n	80063ac <SBUS_getData+0x61c>
		SBUS_UART_Rx[23]-=8;
 8006396:	4b26      	ldr	r3, [pc, #152]	@ (8006430 <SBUS_getData+0x6a0>)
 8006398:	7ddb      	ldrb	r3, [r3, #23]
 800639a:	3b08      	subs	r3, #8
 800639c:	b2da      	uxtb	r2, r3
 800639e:	4b24      	ldr	r3, [pc, #144]	@ (8006430 <SBUS_getData+0x6a0>)
 80063a0:	75da      	strb	r2, [r3, #23]
		Radio_input.fail_safe = FailSafe;
 80063a2:	4b22      	ldr	r3, [pc, #136]	@ (800642c <SBUS_getData+0x69c>)
 80063a4:	2235      	movs	r2, #53	@ 0x35
 80063a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 80063aa:	e003      	b.n	80063b4 <SBUS_getData+0x624>
	}else Radio_input.fail_safe= Ok;
 80063ac:	4b1f      	ldr	r3, [pc, #124]	@ (800642c <SBUS_getData+0x69c>)
 80063ae:	22aa      	movs	r2, #170	@ 0xaa
 80063b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

	if(SBUS_UART_Rx[23]>=4){
 80063b4:	4b1e      	ldr	r3, [pc, #120]	@ (8006430 <SBUS_getData+0x6a0>)
 80063b6:	7ddb      	ldrb	r3, [r3, #23]
 80063b8:	2b03      	cmp	r3, #3
 80063ba:	d90a      	bls.n	80063d2 <SBUS_getData+0x642>
		SBUS_UART_Rx[23]-=4;
 80063bc:	4b1c      	ldr	r3, [pc, #112]	@ (8006430 <SBUS_getData+0x6a0>)
 80063be:	7ddb      	ldrb	r3, [r3, #23]
 80063c0:	3b04      	subs	r3, #4
 80063c2:	b2da      	uxtb	r2, r3
 80063c4:	4b1a      	ldr	r3, [pc, #104]	@ (8006430 <SBUS_getData+0x6a0>)
 80063c6:	75da      	strb	r2, [r3, #23]
		Radio_input.pkg_lost = Pkg_Lost;
 80063c8:	4b18      	ldr	r3, [pc, #96]	@ (800642c <SBUS_getData+0x69c>)
 80063ca:	2210      	movs	r2, #16
 80063cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80063d0:	e003      	b.n	80063da <SBUS_getData+0x64a>
	}else Radio_input.pkg_lost=Ok;
 80063d2:	4b16      	ldr	r3, [pc, #88]	@ (800642c <SBUS_getData+0x69c>)
 80063d4:	22aa      	movs	r2, #170	@ 0xaa
 80063d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if(SBUS_UART_Rx[23]>=2){
 80063da:	4b15      	ldr	r3, [pc, #84]	@ (8006430 <SBUS_getData+0x6a0>)
 80063dc:	7ddb      	ldrb	r3, [r3, #23]
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d90a      	bls.n	80063f8 <SBUS_getData+0x668>
		SBUS_UART_Rx[23]-=2;
 80063e2:	4b13      	ldr	r3, [pc, #76]	@ (8006430 <SBUS_getData+0x6a0>)
 80063e4:	7ddb      	ldrb	r3, [r3, #23]
 80063e6:	3b02      	subs	r3, #2
 80063e8:	b2da      	uxtb	r2, r3
 80063ea:	4b11      	ldr	r3, [pc, #68]	@ (8006430 <SBUS_getData+0x6a0>)
 80063ec:	75da      	strb	r2, [r3, #23]
		Radio_input.Interruptor_2=ON;
 80063ee:	4b0f      	ldr	r3, [pc, #60]	@ (800642c <SBUS_getData+0x69c>)
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 80063f6:	e003      	b.n	8006400 <SBUS_getData+0x670>
	}else Radio_input.Interruptor_2=OFF;
 80063f8:	4b0c      	ldr	r3, [pc, #48]	@ (800642c <SBUS_getData+0x69c>)
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

	if(SBUS_UART_Rx[23]){
 8006400:	4b0b      	ldr	r3, [pc, #44]	@ (8006430 <SBUS_getData+0x6a0>)
 8006402:	7ddb      	ldrb	r3, [r3, #23]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d004      	beq.n	8006412 <SBUS_getData+0x682>
		Radio_input.Interruptor_1=ON;
 8006408:	4b08      	ldr	r3, [pc, #32]	@ (800642c <SBUS_getData+0x69c>)
 800640a:	2201      	movs	r2, #1
 800640c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8006410:	e003      	b.n	800641a <SBUS_getData+0x68a>
	}else Radio_input.Interruptor_1=OFF;
 8006412:	4b06      	ldr	r3, [pc, #24]	@ (800642c <SBUS_getData+0x69c>)
 8006414:	2200      	movs	r2, #0
 8006416:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22


	Radio_input.Uart_Counter = 0;
 800641a:	4b04      	ldr	r3, [pc, #16]	@ (800642c <SBUS_getData+0x69c>)
 800641c:	2200      	movs	r2, #0
 800641e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

}
 8006422:	bf00      	nop
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr
 800642c:	2400007c 	.word	0x2400007c
 8006430:	240017cc 	.word	0x240017cc

08006434 <SBUS_IntegrityVerification>:

void SBUS_IntegrityVerification(void){
 8006434:	b480      	push	{r7}
 8006436:	af00      	add	r7, sp, #0

	if(Radio_input.Uart_Counter != 255){
 8006438:	4b0f      	ldr	r3, [pc, #60]	@ (8006478 <SBUS_IntegrityVerification+0x44>)
 800643a:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800643e:	2bff      	cmp	r3, #255	@ 0xff
 8006440:	d00c      	beq.n	800645c <SBUS_IntegrityVerification+0x28>
		Radio_input.Uart_Counter++;
 8006442:	4b0d      	ldr	r3, [pc, #52]	@ (8006478 <SBUS_IntegrityVerification+0x44>)
 8006444:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8006448:	3301      	adds	r3, #1
 800644a:	b2da      	uxtb	r2, r3
 800644c:	4b0a      	ldr	r3, [pc, #40]	@ (8006478 <SBUS_IntegrityVerification+0x44>)
 800644e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		Radio_input.uart_error = Ok;
 8006452:	4b09      	ldr	r3, [pc, #36]	@ (8006478 <SBUS_IntegrityVerification+0x44>)
 8006454:	22aa      	movs	r2, #170	@ 0xaa
 8006456:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	}
	else{
		Radio_input.uart_error = Uart_Error;
		Radio_input.fail_safe = FailSafe;
	}
}
 800645a:	e007      	b.n	800646c <SBUS_IntegrityVerification+0x38>
		Radio_input.uart_error = Uart_Error;
 800645c:	4b06      	ldr	r3, [pc, #24]	@ (8006478 <SBUS_IntegrityVerification+0x44>)
 800645e:	2220      	movs	r2, #32
 8006460:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		Radio_input.fail_safe = FailSafe;
 8006464:	4b04      	ldr	r3, [pc, #16]	@ (8006478 <SBUS_IntegrityVerification+0x44>)
 8006466:	2235      	movs	r2, #53	@ 0x35
 8006468:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 800646c:	bf00      	nop
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop
 8006478:	2400007c 	.word	0x2400007c

0800647c <SD_blackbox_refresh>:
void SD_blackbox_init(void){

	f_open(&BlackBox, BlackBoxFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
}

void SD_blackbox_refresh(void){
 800647c:	b480      	push	{r7}
 800647e:	af00      	add	r7, sp, #0

	blackbox_data.Time = TimeOn_Counter;
 8006480:	4b58      	ldr	r3, [pc, #352]	@ (80065e4 <SD_blackbox_refresh+0x168>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a58      	ldr	r2, [pc, #352]	@ (80065e8 <SD_blackbox_refresh+0x16c>)
 8006486:	6353      	str	r3, [r2, #52]	@ 0x34

	blackbox_data.Ax = IMU.ACC.x;
 8006488:	4b58      	ldr	r3, [pc, #352]	@ (80065ec <SD_blackbox_refresh+0x170>)
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	4a56      	ldr	r2, [pc, #344]	@ (80065e8 <SD_blackbox_refresh+0x16c>)
 800648e:	6013      	str	r3, [r2, #0]
	blackbox_data.Ay = IMU.ACC.y;
 8006490:	4b56      	ldr	r3, [pc, #344]	@ (80065ec <SD_blackbox_refresh+0x170>)
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	4a54      	ldr	r2, [pc, #336]	@ (80065e8 <SD_blackbox_refresh+0x16c>)
 8006496:	6053      	str	r3, [r2, #4]
	blackbox_data.Az = IMU.ACC.z;
 8006498:	4b54      	ldr	r3, [pc, #336]	@ (80065ec <SD_blackbox_refresh+0x170>)
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	4a52      	ldr	r2, [pc, #328]	@ (80065e8 <SD_blackbox_refresh+0x16c>)
 800649e:	6093      	str	r3, [r2, #8]

	blackbox_data.Gx = IMU.GYR.x;
 80064a0:	4b52      	ldr	r3, [pc, #328]	@ (80065ec <SD_blackbox_refresh+0x170>)
 80064a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064a4:	4a50      	ldr	r2, [pc, #320]	@ (80065e8 <SD_blackbox_refresh+0x16c>)
 80064a6:	60d3      	str	r3, [r2, #12]
	blackbox_data.Gy = IMU.GYR.y;
 80064a8:	4b50      	ldr	r3, [pc, #320]	@ (80065ec <SD_blackbox_refresh+0x170>)
 80064aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ac:	4a4e      	ldr	r2, [pc, #312]	@ (80065e8 <SD_blackbox_refresh+0x16c>)
 80064ae:	6113      	str	r3, [r2, #16]
	blackbox_data.Gz = IMU.GYR.z;
 80064b0:	4b4e      	ldr	r3, [pc, #312]	@ (80065ec <SD_blackbox_refresh+0x170>)
 80064b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064b4:	4a4c      	ldr	r2, [pc, #304]	@ (80065e8 <SD_blackbox_refresh+0x16c>)
 80064b6:	6153      	str	r3, [r2, #20]

	blackbox_data.Gfx = 0;
 80064b8:	4b4b      	ldr	r3, [pc, #300]	@ (80065e8 <SD_blackbox_refresh+0x16c>)
 80064ba:	f04f 0200 	mov.w	r2, #0
 80064be:	619a      	str	r2, [r3, #24]
	blackbox_data.Gfy = 0;
 80064c0:	4b49      	ldr	r3, [pc, #292]	@ (80065e8 <SD_blackbox_refresh+0x16c>)
 80064c2:	f04f 0200 	mov.w	r2, #0
 80064c6:	61da      	str	r2, [r3, #28]
	blackbox_data.Gfz = 0;
 80064c8:	4b47      	ldr	r3, [pc, #284]	@ (80065e8 <SD_blackbox_refresh+0x16c>)
 80064ca:	f04f 0200 	mov.w	r2, #0
 80064ce:	621a      	str	r2, [r3, #32]

	blackbox_data.Roll    = IMU.Roll;
 80064d0:	4b46      	ldr	r3, [pc, #280]	@ (80065ec <SD_blackbox_refresh+0x170>)
 80064d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064d4:	4a44      	ldr	r2, [pc, #272]	@ (80065e8 <SD_blackbox_refresh+0x16c>)
 80064d6:	6253      	str	r3, [r2, #36]	@ 0x24
	blackbox_data.Pitch   = IMU.Pitch;
 80064d8:	4b44      	ldr	r3, [pc, #272]	@ (80065ec <SD_blackbox_refresh+0x170>)
 80064da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064dc:	4a42      	ldr	r2, [pc, #264]	@ (80065e8 <SD_blackbox_refresh+0x16c>)
 80064de:	6293      	str	r3, [r2, #40]	@ 0x28
	blackbox_data.Heading = IMU.Heading;
 80064e0:	4b42      	ldr	r3, [pc, #264]	@ (80065ec <SD_blackbox_refresh+0x170>)
 80064e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064e4:	4a40      	ldr	r2, [pc, #256]	@ (80065e8 <SD_blackbox_refresh+0x16c>)
 80064e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

	blackbox_data.Alt = BMP280.Barometric_Altitude;
 80064e8:	4b41      	ldr	r3, [pc, #260]	@ (80065f0 <SD_blackbox_refresh+0x174>)
 80064ea:	8a1a      	ldrh	r2, [r3, #16]
 80064ec:	4b3e      	ldr	r3, [pc, #248]	@ (80065e8 <SD_blackbox_refresh+0x16c>)
 80064ee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
	blackbox_data.Latitude = 0;
 80064f2:	4b3d      	ldr	r3, [pc, #244]	@ (80065e8 <SD_blackbox_refresh+0x16c>)
 80064f4:	2200      	movs	r2, #0
 80064f6:	639a      	str	r2, [r3, #56]	@ 0x38
	blackbox_data.Longitude= 0;
 80064f8:	4b3b      	ldr	r3, [pc, #236]	@ (80065e8 <SD_blackbox_refresh+0x16c>)
 80064fa:	2200      	movs	r2, #0
 80064fc:	63da      	str	r2, [r3, #60]	@ 0x3c

	blackbox_data.ARSP = 0;
 80064fe:	4b3a      	ldr	r3, [pc, #232]	@ (80065e8 <SD_blackbox_refresh+0x16c>)
 8006500:	2200      	movs	r2, #0
 8006502:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

	blackbox_data.Pressure = BMP280.Pressure;
 8006506:	4b3a      	ldr	r3, [pc, #232]	@ (80065f0 <SD_blackbox_refresh+0x174>)
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	4a37      	ldr	r2, [pc, #220]	@ (80065e8 <SD_blackbox_refresh+0x16c>)
 800650c:	6413      	str	r3, [r2, #64]	@ 0x40

	blackbox_data.SBUS_Flags = Radio_input.Banderas;
 800650e:	4b39      	ldr	r3, [pc, #228]	@ (80065f4 <SD_blackbox_refresh+0x178>)
 8006510:	781a      	ldrb	r2, [r3, #0]
 8006512:	4b35      	ldr	r3, [pc, #212]	@ (80065e8 <SD_blackbox_refresh+0x16c>)
 8006514:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
	blackbox_data.Flight_Mode = 0;
 8006518:	4b33      	ldr	r3, [pc, #204]	@ (80065e8 <SD_blackbox_refresh+0x16c>)
 800651a:	2200      	movs	r2, #0
 800651c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

	blackbox_data.Canal_1 = Radio_input.Canal_1;
 8006520:	4b34      	ldr	r3, [pc, #208]	@ (80065f4 <SD_blackbox_refresh+0x178>)
 8006522:	885a      	ldrh	r2, [r3, #2]
 8006524:	4b30      	ldr	r3, [pc, #192]	@ (80065e8 <SD_blackbox_refresh+0x16c>)
 8006526:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	blackbox_data.Canal_2 = Radio_input.Canal_2;
 800652a:	4b32      	ldr	r3, [pc, #200]	@ (80065f4 <SD_blackbox_refresh+0x178>)
 800652c:	889a      	ldrh	r2, [r3, #4]
 800652e:	4b2e      	ldr	r3, [pc, #184]	@ (80065e8 <SD_blackbox_refresh+0x16c>)
 8006530:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
	blackbox_data.Canal_3 = Radio_input.Canal_3;
 8006534:	4b2f      	ldr	r3, [pc, #188]	@ (80065f4 <SD_blackbox_refresh+0x178>)
 8006536:	88da      	ldrh	r2, [r3, #6]
 8006538:	4b2b      	ldr	r3, [pc, #172]	@ (80065e8 <SD_blackbox_refresh+0x16c>)
 800653a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
	blackbox_data.Canal_4 = Radio_input.Canal_4;
 800653e:	4b2d      	ldr	r3, [pc, #180]	@ (80065f4 <SD_blackbox_refresh+0x178>)
 8006540:	891a      	ldrh	r2, [r3, #8]
 8006542:	4b29      	ldr	r3, [pc, #164]	@ (80065e8 <SD_blackbox_refresh+0x16c>)
 8006544:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
	blackbox_data.Canal_5 = Radio_input.Canal_5;
 8006548:	4b2a      	ldr	r3, [pc, #168]	@ (80065f4 <SD_blackbox_refresh+0x178>)
 800654a:	895a      	ldrh	r2, [r3, #10]
 800654c:	4b26      	ldr	r3, [pc, #152]	@ (80065e8 <SD_blackbox_refresh+0x16c>)
 800654e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
	blackbox_data.Canal_6 = Radio_input.Canal_6;
 8006552:	4b28      	ldr	r3, [pc, #160]	@ (80065f4 <SD_blackbox_refresh+0x178>)
 8006554:	899a      	ldrh	r2, [r3, #12]
 8006556:	4b24      	ldr	r3, [pc, #144]	@ (80065e8 <SD_blackbox_refresh+0x16c>)
 8006558:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
	blackbox_data.Canal_7 = Radio_input.Canal_7;
 800655c:	4b25      	ldr	r3, [pc, #148]	@ (80065f4 <SD_blackbox_refresh+0x178>)
 800655e:	89da      	ldrh	r2, [r3, #14]
 8006560:	4b21      	ldr	r3, [pc, #132]	@ (80065e8 <SD_blackbox_refresh+0x16c>)
 8006562:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
	blackbox_data.Canal_8 = Radio_input.Canal_8;
 8006566:	4b23      	ldr	r3, [pc, #140]	@ (80065f4 <SD_blackbox_refresh+0x178>)
 8006568:	8a1a      	ldrh	r2, [r3, #16]
 800656a:	4b1f      	ldr	r3, [pc, #124]	@ (80065e8 <SD_blackbox_refresh+0x16c>)
 800656c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
	blackbox_data.Canal_9 = Radio_input.Canal_9;
 8006570:	4b20      	ldr	r3, [pc, #128]	@ (80065f4 <SD_blackbox_refresh+0x178>)
 8006572:	8a5a      	ldrh	r2, [r3, #18]
 8006574:	4b1c      	ldr	r3, [pc, #112]	@ (80065e8 <SD_blackbox_refresh+0x16c>)
 8006576:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
	blackbox_data.Canal_10 = Radio_input.Canal_10;
 800657a:	4b1e      	ldr	r3, [pc, #120]	@ (80065f4 <SD_blackbox_refresh+0x178>)
 800657c:	8a9a      	ldrh	r2, [r3, #20]
 800657e:	4b1a      	ldr	r3, [pc, #104]	@ (80065e8 <SD_blackbox_refresh+0x16c>)
 8006580:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
	blackbox_data.Canal_11 = Radio_input.Canal_11;
 8006584:	4b1b      	ldr	r3, [pc, #108]	@ (80065f4 <SD_blackbox_refresh+0x178>)
 8006586:	8ada      	ldrh	r2, [r3, #22]
 8006588:	4b17      	ldr	r3, [pc, #92]	@ (80065e8 <SD_blackbox_refresh+0x16c>)
 800658a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
	blackbox_data.Canal_12 = Radio_input.Canal_12;
 800658e:	4b19      	ldr	r3, [pc, #100]	@ (80065f4 <SD_blackbox_refresh+0x178>)
 8006590:	8b1a      	ldrh	r2, [r3, #24]
 8006592:	4b15      	ldr	r3, [pc, #84]	@ (80065e8 <SD_blackbox_refresh+0x16c>)
 8006594:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
	blackbox_data.Canal_13 = Radio_input.Canal_13;
 8006598:	4b16      	ldr	r3, [pc, #88]	@ (80065f4 <SD_blackbox_refresh+0x178>)
 800659a:	8b5a      	ldrh	r2, [r3, #26]
 800659c:	4b12      	ldr	r3, [pc, #72]	@ (80065e8 <SD_blackbox_refresh+0x16c>)
 800659e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
	blackbox_data.Canal_14 = Radio_input.Canal_14;
 80065a2:	4b14      	ldr	r3, [pc, #80]	@ (80065f4 <SD_blackbox_refresh+0x178>)
 80065a4:	8b9a      	ldrh	r2, [r3, #28]
 80065a6:	4b10      	ldr	r3, [pc, #64]	@ (80065e8 <SD_blackbox_refresh+0x16c>)
 80065a8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
	blackbox_data.Canal_15 = Radio_input.Canal_15;
 80065ac:	4b11      	ldr	r3, [pc, #68]	@ (80065f4 <SD_blackbox_refresh+0x178>)
 80065ae:	8bda      	ldrh	r2, [r3, #30]
 80065b0:	4b0d      	ldr	r3, [pc, #52]	@ (80065e8 <SD_blackbox_refresh+0x16c>)
 80065b2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
	blackbox_data.Canal_16 = Radio_input.Canal_16;
 80065b6:	4b0f      	ldr	r3, [pc, #60]	@ (80065f4 <SD_blackbox_refresh+0x178>)
 80065b8:	8c1a      	ldrh	r2, [r3, #32]
 80065ba:	4b0b      	ldr	r3, [pc, #44]	@ (80065e8 <SD_blackbox_refresh+0x16c>)
 80065bc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

	blackbox_data.Interruptor_1 = Radio_input.Interruptor_1;
 80065c0:	4b0c      	ldr	r3, [pc, #48]	@ (80065f4 <SD_blackbox_refresh+0x178>)
 80065c2:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80065c6:	4b08      	ldr	r3, [pc, #32]	@ (80065e8 <SD_blackbox_refresh+0x16c>)
 80065c8:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
	blackbox_data.Interruptor_2 = Radio_input.Interruptor_2;
 80065cc:	4b09      	ldr	r3, [pc, #36]	@ (80065f4 <SD_blackbox_refresh+0x178>)
 80065ce:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 80065d2:	4b05      	ldr	r3, [pc, #20]	@ (80065e8 <SD_blackbox_refresh+0x16c>)
 80065d4:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
//	blackbox_data.OUT6  = PWM_Output.Canal_6;
//	blackbox_data.OUT7  = PWM_Output.Canal_7;
//	blackbox_data.OUT8  = PWM_Output.Canal_8;
//	blackbox_data.OUT9  = PWM_Output.Canal_9;
//	blackbox_data.OUT10 = PWM_Output.Canal_10;
}
 80065d8:	bf00      	nop
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	24000ed8 	.word	0x24000ed8
 80065e8:	24002a10 	.word	0x24002a10
 80065ec:	24001664 	.word	0x24001664
 80065f0:	24001524 	.word	0x24001524
 80065f4:	2400007c 	.word	0x2400007c

080065f8 <SD_blackbox_write>:
	BlackBoxFile[4] = ActualFile[4];

	f_open(&BlackBox, BlackBoxFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
}

void SD_blackbox_write(void){
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
	static uint8_t NewFileCount = 0;
	static uint32_t DataCount = 0;
	static uint16_t WriteCount = 0;

	SD_blackbox_refresh();
 80065fe:	f7ff ff3d 	bl	800647c <SD_blackbox_refresh>

	blackbox_data.Nmsg = DataCount;
 8006602:	4b26      	ldr	r3, [pc, #152]	@ (800669c <SD_blackbox_write+0xa4>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a26      	ldr	r2, [pc, #152]	@ (80066a0 <SD_blackbox_write+0xa8>)
 8006608:	6313      	str	r3, [r2, #48]	@ 0x30
	memcpy(&BlackBoxBuffer[WriteCount],&blackbox_data,sizeof(blackbox_data));
 800660a:	4b26      	ldr	r3, [pc, #152]	@ (80066a4 <SD_blackbox_write+0xac>)
 800660c:	881b      	ldrh	r3, [r3, #0]
 800660e:	461a      	mov	r2, r3
 8006610:	4613      	mov	r3, r2
 8006612:	021b      	lsls	r3, r3, #8
 8006614:	1a9b      	subs	r3, r3, r2
 8006616:	4a24      	ldr	r2, [pc, #144]	@ (80066a8 <SD_blackbox_write+0xb0>)
 8006618:	4413      	add	r3, r2
 800661a:	2280      	movs	r2, #128	@ 0x80
 800661c:	4920      	ldr	r1, [pc, #128]	@ (80066a0 <SD_blackbox_write+0xa8>)
 800661e:	4618      	mov	r0, r3
 8006620:	f011 fb5b 	bl	8017cda <memcpy>

	if(WriteCount == 15){
 8006624:	4b1f      	ldr	r3, [pc, #124]	@ (80066a4 <SD_blackbox_write+0xac>)
 8006626:	881b      	ldrh	r3, [r3, #0]
 8006628:	2b0f      	cmp	r3, #15
 800662a:	d129      	bne.n	8006680 <SD_blackbox_write+0x88>
		for (uint8_t n = 0; n < 16; ++n) {
 800662c:	2300      	movs	r3, #0
 800662e:	71fb      	strb	r3, [r7, #7]
 8006630:	e00d      	b.n	800664e <SD_blackbox_write+0x56>
			f_write(&BlackBox, &BlackBoxBuffer[n], sizeof(blackbox_data), &bw);
 8006632:	79fa      	ldrb	r2, [r7, #7]
 8006634:	4613      	mov	r3, r2
 8006636:	021b      	lsls	r3, r3, #8
 8006638:	1a9b      	subs	r3, r3, r2
 800663a:	4a1b      	ldr	r2, [pc, #108]	@ (80066a8 <SD_blackbox_write+0xb0>)
 800663c:	1899      	adds	r1, r3, r2
 800663e:	4b1b      	ldr	r3, [pc, #108]	@ (80066ac <SD_blackbox_write+0xb4>)
 8006640:	2280      	movs	r2, #128	@ 0x80
 8006642:	481b      	ldr	r0, [pc, #108]	@ (80066b0 <SD_blackbox_write+0xb8>)
 8006644:	f00d fe67 	bl	8014316 <f_write>
		for (uint8_t n = 0; n < 16; ++n) {
 8006648:	79fb      	ldrb	r3, [r7, #7]
 800664a:	3301      	adds	r3, #1
 800664c:	71fb      	strb	r3, [r7, #7]
 800664e:	79fb      	ldrb	r3, [r7, #7]
 8006650:	2b0f      	cmp	r3, #15
 8006652:	d9ee      	bls.n	8006632 <SD_blackbox_write+0x3a>
		}
		fresult = f_sync(&BlackBox);
 8006654:	4816      	ldr	r0, [pc, #88]	@ (80066b0 <SD_blackbox_write+0xb8>)
 8006656:	f00e f802 	bl	801465e <f_sync>
 800665a:	4603      	mov	r3, r0
 800665c:	461a      	mov	r2, r3
 800665e:	4b15      	ldr	r3, [pc, #84]	@ (80066b4 <SD_blackbox_write+0xbc>)
 8006660:	701a      	strb	r2, [r3, #0]
		WriteCount = 0;
 8006662:	4b10      	ldr	r3, [pc, #64]	@ (80066a4 <SD_blackbox_write+0xac>)
 8006664:	2200      	movs	r2, #0
 8006666:	801a      	strh	r2, [r3, #0]
		++NewFileCount;
 8006668:	4b13      	ldr	r3, [pc, #76]	@ (80066b8 <SD_blackbox_write+0xc0>)
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	3301      	adds	r3, #1
 800666e:	b2da      	uxtb	r2, r3
 8006670:	4b11      	ldr	r3, [pc, #68]	@ (80066b8 <SD_blackbox_write+0xc0>)
 8006672:	701a      	strb	r2, [r3, #0]
		++DataCount;
 8006674:	4b09      	ldr	r3, [pc, #36]	@ (800669c <SD_blackbox_write+0xa4>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	3301      	adds	r3, #1
 800667a:	4a08      	ldr	r2, [pc, #32]	@ (800669c <SD_blackbox_write+0xa4>)
 800667c:	6013      	str	r3, [r2, #0]
		return;
 800667e:	e00a      	b.n	8006696 <SD_blackbox_write+0x9e>
	}
	++WriteCount;
 8006680:	4b08      	ldr	r3, [pc, #32]	@ (80066a4 <SD_blackbox_write+0xac>)
 8006682:	881b      	ldrh	r3, [r3, #0]
 8006684:	3301      	adds	r3, #1
 8006686:	b29a      	uxth	r2, r3
 8006688:	4b06      	ldr	r3, [pc, #24]	@ (80066a4 <SD_blackbox_write+0xac>)
 800668a:	801a      	strh	r2, [r3, #0]
	++DataCount;
 800668c:	4b03      	ldr	r3, [pc, #12]	@ (800669c <SD_blackbox_write+0xa4>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	3301      	adds	r3, #1
 8006692:	4a02      	ldr	r2, [pc, #8]	@ (800669c <SD_blackbox_write+0xa4>)
 8006694:	6013      	str	r3, [r2, #0]
}
 8006696:	3708      	adds	r7, #8
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}
 800669c:	24002a90 	.word	0x24002a90
 80066a0:	24002a10 	.word	0x24002a10
 80066a4:	24002a94 	.word	0x24002a94
 80066a8:	24001a20 	.word	0x24001a20
 80066ac:	24001a1c 	.word	0x24001a1c
 80066b0:	240017e8 	.word	0x240017e8
 80066b4:	24001a18 	.word	0x24001a18
 80066b8:	24002a96 	.word	0x24002a96

080066bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80066bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80066f4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80066c0:	f7fd f828 	bl	8003714 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80066c4:	480c      	ldr	r0, [pc, #48]	@ (80066f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80066c6:	490d      	ldr	r1, [pc, #52]	@ (80066fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80066c8:	4a0d      	ldr	r2, [pc, #52]	@ (8006700 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80066ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80066cc:	e002      	b.n	80066d4 <LoopCopyDataInit>

080066ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80066ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80066d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80066d2:	3304      	adds	r3, #4

080066d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80066d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80066d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80066d8:	d3f9      	bcc.n	80066ce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80066da:	4a0a      	ldr	r2, [pc, #40]	@ (8006704 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80066dc:	4c0a      	ldr	r4, [pc, #40]	@ (8006708 <LoopFillZerobss+0x22>)
  movs r3, #0
 80066de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80066e0:	e001      	b.n	80066e6 <LoopFillZerobss>

080066e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80066e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80066e4:	3204      	adds	r2, #4

080066e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80066e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80066e8:	d3fb      	bcc.n	80066e2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80066ea:	f011 facf 	bl	8017c8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80066ee:	f7fc fbab 	bl	8002e48 <main>
  bx  lr
 80066f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80066f4:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80066f8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80066fc:	24000290 	.word	0x24000290
  ldr r2, =_sidata
 8006700:	0801a990 	.word	0x0801a990
  ldr r2, =_sbss
 8006704:	24000290 	.word	0x24000290
  ldr r4, =_ebss
 8006708:	24006958 	.word	0x24006958

0800670c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800670c:	e7fe      	b.n	800670c <ADC_IRQHandler>
	...

08006710 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006716:	2003      	movs	r0, #3
 8006718:	f000 f927 	bl	800696a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800671c:	f004 fd3e 	bl	800b19c <HAL_RCC_GetSysClockFreq>
 8006720:	4602      	mov	r2, r0
 8006722:	4b15      	ldr	r3, [pc, #84]	@ (8006778 <HAL_Init+0x68>)
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	0a1b      	lsrs	r3, r3, #8
 8006728:	f003 030f 	and.w	r3, r3, #15
 800672c:	4913      	ldr	r1, [pc, #76]	@ (800677c <HAL_Init+0x6c>)
 800672e:	5ccb      	ldrb	r3, [r1, r3]
 8006730:	f003 031f 	and.w	r3, r3, #31
 8006734:	fa22 f303 	lsr.w	r3, r2, r3
 8006738:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800673a:	4b0f      	ldr	r3, [pc, #60]	@ (8006778 <HAL_Init+0x68>)
 800673c:	699b      	ldr	r3, [r3, #24]
 800673e:	f003 030f 	and.w	r3, r3, #15
 8006742:	4a0e      	ldr	r2, [pc, #56]	@ (800677c <HAL_Init+0x6c>)
 8006744:	5cd3      	ldrb	r3, [r2, r3]
 8006746:	f003 031f 	and.w	r3, r3, #31
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	fa22 f303 	lsr.w	r3, r2, r3
 8006750:	4a0b      	ldr	r2, [pc, #44]	@ (8006780 <HAL_Init+0x70>)
 8006752:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006754:	4a0b      	ldr	r2, [pc, #44]	@ (8006784 <HAL_Init+0x74>)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800675a:	200f      	movs	r0, #15
 800675c:	f7fc fe44 	bl	80033e8 <HAL_InitTick>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d001      	beq.n	800676a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e002      	b.n	8006770 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800676a:	f7fc fe1f 	bl	80033ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	3708      	adds	r7, #8
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	58024400 	.word	0x58024400
 800677c:	08019cf4 	.word	0x08019cf4
 8006780:	24000004 	.word	0x24000004
 8006784:	24000000 	.word	0x24000000

08006788 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006788:	b480      	push	{r7}
 800678a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800678c:	4b06      	ldr	r3, [pc, #24]	@ (80067a8 <HAL_IncTick+0x20>)
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	461a      	mov	r2, r3
 8006792:	4b06      	ldr	r3, [pc, #24]	@ (80067ac <HAL_IncTick+0x24>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4413      	add	r3, r2
 8006798:	4a04      	ldr	r2, [pc, #16]	@ (80067ac <HAL_IncTick+0x24>)
 800679a:	6013      	str	r3, [r2, #0]
}
 800679c:	bf00      	nop
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	240000a8 	.word	0x240000a8
 80067ac:	24002a98 	.word	0x24002a98

080067b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80067b0:	b480      	push	{r7}
 80067b2:	af00      	add	r7, sp, #0
  return uwTick;
 80067b4:	4b03      	ldr	r3, [pc, #12]	@ (80067c4 <HAL_GetTick+0x14>)
 80067b6:	681b      	ldr	r3, [r3, #0]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop
 80067c4:	24002a98 	.word	0x24002a98

080067c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80067d0:	f7ff ffee 	bl	80067b0 <HAL_GetTick>
 80067d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e0:	d005      	beq.n	80067ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80067e2:	4b0a      	ldr	r3, [pc, #40]	@ (800680c <HAL_Delay+0x44>)
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	461a      	mov	r2, r3
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	4413      	add	r3, r2
 80067ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80067ee:	bf00      	nop
 80067f0:	f7ff ffde 	bl	80067b0 <HAL_GetTick>
 80067f4:	4602      	mov	r2, r0
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d8f7      	bhi.n	80067f0 <HAL_Delay+0x28>
  {
  }
}
 8006800:	bf00      	nop
 8006802:	bf00      	nop
 8006804:	3710      	adds	r7, #16
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	240000a8 	.word	0x240000a8

08006810 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006810:	b480      	push	{r7}
 8006812:	b085      	sub	sp, #20
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f003 0307 	and.w	r3, r3, #7
 800681e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006820:	4b0b      	ldr	r3, [pc, #44]	@ (8006850 <__NVIC_SetPriorityGrouping+0x40>)
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800682c:	4013      	ands	r3, r2
 800682e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006838:	4b06      	ldr	r3, [pc, #24]	@ (8006854 <__NVIC_SetPriorityGrouping+0x44>)
 800683a:	4313      	orrs	r3, r2
 800683c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800683e:	4a04      	ldr	r2, [pc, #16]	@ (8006850 <__NVIC_SetPriorityGrouping+0x40>)
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	60d3      	str	r3, [r2, #12]
}
 8006844:	bf00      	nop
 8006846:	3714      	adds	r7, #20
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr
 8006850:	e000ed00 	.word	0xe000ed00
 8006854:	05fa0000 	.word	0x05fa0000

08006858 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006858:	b480      	push	{r7}
 800685a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800685c:	4b04      	ldr	r3, [pc, #16]	@ (8006870 <__NVIC_GetPriorityGrouping+0x18>)
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	0a1b      	lsrs	r3, r3, #8
 8006862:	f003 0307 	and.w	r3, r3, #7
}
 8006866:	4618      	mov	r0, r3
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr
 8006870:	e000ed00 	.word	0xe000ed00

08006874 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	4603      	mov	r3, r0
 800687c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800687e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006882:	2b00      	cmp	r3, #0
 8006884:	db0b      	blt.n	800689e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006886:	88fb      	ldrh	r3, [r7, #6]
 8006888:	f003 021f 	and.w	r2, r3, #31
 800688c:	4907      	ldr	r1, [pc, #28]	@ (80068ac <__NVIC_EnableIRQ+0x38>)
 800688e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006892:	095b      	lsrs	r3, r3, #5
 8006894:	2001      	movs	r0, #1
 8006896:	fa00 f202 	lsl.w	r2, r0, r2
 800689a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800689e:	bf00      	nop
 80068a0:	370c      	adds	r7, #12
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	e000e100 	.word	0xe000e100

080068b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	4603      	mov	r3, r0
 80068b8:	6039      	str	r1, [r7, #0]
 80068ba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80068bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	db0a      	blt.n	80068da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	b2da      	uxtb	r2, r3
 80068c8:	490c      	ldr	r1, [pc, #48]	@ (80068fc <__NVIC_SetPriority+0x4c>)
 80068ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80068ce:	0112      	lsls	r2, r2, #4
 80068d0:	b2d2      	uxtb	r2, r2
 80068d2:	440b      	add	r3, r1
 80068d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80068d8:	e00a      	b.n	80068f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	b2da      	uxtb	r2, r3
 80068de:	4908      	ldr	r1, [pc, #32]	@ (8006900 <__NVIC_SetPriority+0x50>)
 80068e0:	88fb      	ldrh	r3, [r7, #6]
 80068e2:	f003 030f 	and.w	r3, r3, #15
 80068e6:	3b04      	subs	r3, #4
 80068e8:	0112      	lsls	r2, r2, #4
 80068ea:	b2d2      	uxtb	r2, r2
 80068ec:	440b      	add	r3, r1
 80068ee:	761a      	strb	r2, [r3, #24]
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr
 80068fc:	e000e100 	.word	0xe000e100
 8006900:	e000ed00 	.word	0xe000ed00

08006904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006904:	b480      	push	{r7}
 8006906:	b089      	sub	sp, #36	@ 0x24
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f003 0307 	and.w	r3, r3, #7
 8006916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	f1c3 0307 	rsb	r3, r3, #7
 800691e:	2b04      	cmp	r3, #4
 8006920:	bf28      	it	cs
 8006922:	2304      	movcs	r3, #4
 8006924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	3304      	adds	r3, #4
 800692a:	2b06      	cmp	r3, #6
 800692c:	d902      	bls.n	8006934 <NVIC_EncodePriority+0x30>
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	3b03      	subs	r3, #3
 8006932:	e000      	b.n	8006936 <NVIC_EncodePriority+0x32>
 8006934:	2300      	movs	r3, #0
 8006936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006938:	f04f 32ff 	mov.w	r2, #4294967295
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	fa02 f303 	lsl.w	r3, r2, r3
 8006942:	43da      	mvns	r2, r3
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	401a      	ands	r2, r3
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800694c:	f04f 31ff 	mov.w	r1, #4294967295
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	fa01 f303 	lsl.w	r3, r1, r3
 8006956:	43d9      	mvns	r1, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800695c:	4313      	orrs	r3, r2
         );
}
 800695e:	4618      	mov	r0, r3
 8006960:	3724      	adds	r7, #36	@ 0x24
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr

0800696a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800696a:	b580      	push	{r7, lr}
 800696c:	b082      	sub	sp, #8
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7ff ff4c 	bl	8006810 <__NVIC_SetPriorityGrouping>
}
 8006978:	bf00      	nop
 800697a:	3708      	adds	r7, #8
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b086      	sub	sp, #24
 8006984:	af00      	add	r7, sp, #0
 8006986:	4603      	mov	r3, r0
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	607a      	str	r2, [r7, #4]
 800698c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800698e:	f7ff ff63 	bl	8006858 <__NVIC_GetPriorityGrouping>
 8006992:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	68b9      	ldr	r1, [r7, #8]
 8006998:	6978      	ldr	r0, [r7, #20]
 800699a:	f7ff ffb3 	bl	8006904 <NVIC_EncodePriority>
 800699e:	4602      	mov	r2, r0
 80069a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80069a4:	4611      	mov	r1, r2
 80069a6:	4618      	mov	r0, r3
 80069a8:	f7ff ff82 	bl	80068b0 <__NVIC_SetPriority>
}
 80069ac:	bf00      	nop
 80069ae:	3718      	adds	r7, #24
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	4603      	mov	r3, r0
 80069bc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80069be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7ff ff56 	bl	8006874 <__NVIC_EnableIRQ>
}
 80069c8:	bf00      	nop
 80069ca:	3708      	adds	r7, #8
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80069d0:	b480      	push	{r7}
 80069d2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80069d4:	f3bf 8f5f 	dmb	sy
}
 80069d8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80069da:	4b07      	ldr	r3, [pc, #28]	@ (80069f8 <HAL_MPU_Disable+0x28>)
 80069dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069de:	4a06      	ldr	r2, [pc, #24]	@ (80069f8 <HAL_MPU_Disable+0x28>)
 80069e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069e4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80069e6:	4b05      	ldr	r3, [pc, #20]	@ (80069fc <HAL_MPU_Disable+0x2c>)
 80069e8:	2200      	movs	r2, #0
 80069ea:	605a      	str	r2, [r3, #4]
}
 80069ec:	bf00      	nop
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop
 80069f8:	e000ed00 	.word	0xe000ed00
 80069fc:	e000ed90 	.word	0xe000ed90

08006a00 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006a08:	4a0b      	ldr	r2, [pc, #44]	@ (8006a38 <HAL_MPU_Enable+0x38>)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f043 0301 	orr.w	r3, r3, #1
 8006a10:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006a12:	4b0a      	ldr	r3, [pc, #40]	@ (8006a3c <HAL_MPU_Enable+0x3c>)
 8006a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a16:	4a09      	ldr	r2, [pc, #36]	@ (8006a3c <HAL_MPU_Enable+0x3c>)
 8006a18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a1c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006a1e:	f3bf 8f4f 	dsb	sy
}
 8006a22:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006a24:	f3bf 8f6f 	isb	sy
}
 8006a28:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006a2a:	bf00      	nop
 8006a2c:	370c      	adds	r7, #12
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop
 8006a38:	e000ed90 	.word	0xe000ed90
 8006a3c:	e000ed00 	.word	0xe000ed00

08006a40 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	785a      	ldrb	r2, [r3, #1]
 8006a4c:	4b1b      	ldr	r3, [pc, #108]	@ (8006abc <HAL_MPU_ConfigRegion+0x7c>)
 8006a4e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8006a50:	4b1a      	ldr	r3, [pc, #104]	@ (8006abc <HAL_MPU_ConfigRegion+0x7c>)
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	4a19      	ldr	r2, [pc, #100]	@ (8006abc <HAL_MPU_ConfigRegion+0x7c>)
 8006a56:	f023 0301 	bic.w	r3, r3, #1
 8006a5a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8006a5c:	4a17      	ldr	r2, [pc, #92]	@ (8006abc <HAL_MPU_ConfigRegion+0x7c>)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	7b1b      	ldrb	r3, [r3, #12]
 8006a68:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	7adb      	ldrb	r3, [r3, #11]
 8006a6e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006a70:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	7a9b      	ldrb	r3, [r3, #10]
 8006a76:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006a78:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	7b5b      	ldrb	r3, [r3, #13]
 8006a7e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006a80:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	7b9b      	ldrb	r3, [r3, #14]
 8006a86:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006a88:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	7bdb      	ldrb	r3, [r3, #15]
 8006a8e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006a90:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	7a5b      	ldrb	r3, [r3, #9]
 8006a96:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006a98:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	7a1b      	ldrb	r3, [r3, #8]
 8006a9e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006aa0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	7812      	ldrb	r2, [r2, #0]
 8006aa6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006aa8:	4a04      	ldr	r2, [pc, #16]	@ (8006abc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006aaa:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006aac:	6113      	str	r3, [r2, #16]
}
 8006aae:	bf00      	nop
 8006ab0:	370c      	adds	r7, #12
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	e000ed90 	.word	0xe000ed90

08006ac0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006ac8:	f7ff fe72 	bl	80067b0 <HAL_GetTick>
 8006acc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d101      	bne.n	8006ad8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e37d      	b.n	80071d4 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a66      	ldr	r2, [pc, #408]	@ (8006c78 <HAL_DMA_Init+0x1b8>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d04a      	beq.n	8006b78 <HAL_DMA_Init+0xb8>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a65      	ldr	r2, [pc, #404]	@ (8006c7c <HAL_DMA_Init+0x1bc>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d045      	beq.n	8006b78 <HAL_DMA_Init+0xb8>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a63      	ldr	r2, [pc, #396]	@ (8006c80 <HAL_DMA_Init+0x1c0>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d040      	beq.n	8006b78 <HAL_DMA_Init+0xb8>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a62      	ldr	r2, [pc, #392]	@ (8006c84 <HAL_DMA_Init+0x1c4>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d03b      	beq.n	8006b78 <HAL_DMA_Init+0xb8>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a60      	ldr	r2, [pc, #384]	@ (8006c88 <HAL_DMA_Init+0x1c8>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d036      	beq.n	8006b78 <HAL_DMA_Init+0xb8>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a5f      	ldr	r2, [pc, #380]	@ (8006c8c <HAL_DMA_Init+0x1cc>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d031      	beq.n	8006b78 <HAL_DMA_Init+0xb8>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a5d      	ldr	r2, [pc, #372]	@ (8006c90 <HAL_DMA_Init+0x1d0>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d02c      	beq.n	8006b78 <HAL_DMA_Init+0xb8>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a5c      	ldr	r2, [pc, #368]	@ (8006c94 <HAL_DMA_Init+0x1d4>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d027      	beq.n	8006b78 <HAL_DMA_Init+0xb8>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a5a      	ldr	r2, [pc, #360]	@ (8006c98 <HAL_DMA_Init+0x1d8>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d022      	beq.n	8006b78 <HAL_DMA_Init+0xb8>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a59      	ldr	r2, [pc, #356]	@ (8006c9c <HAL_DMA_Init+0x1dc>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d01d      	beq.n	8006b78 <HAL_DMA_Init+0xb8>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a57      	ldr	r2, [pc, #348]	@ (8006ca0 <HAL_DMA_Init+0x1e0>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d018      	beq.n	8006b78 <HAL_DMA_Init+0xb8>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a56      	ldr	r2, [pc, #344]	@ (8006ca4 <HAL_DMA_Init+0x1e4>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d013      	beq.n	8006b78 <HAL_DMA_Init+0xb8>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a54      	ldr	r2, [pc, #336]	@ (8006ca8 <HAL_DMA_Init+0x1e8>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d00e      	beq.n	8006b78 <HAL_DMA_Init+0xb8>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a53      	ldr	r2, [pc, #332]	@ (8006cac <HAL_DMA_Init+0x1ec>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d009      	beq.n	8006b78 <HAL_DMA_Init+0xb8>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a51      	ldr	r2, [pc, #324]	@ (8006cb0 <HAL_DMA_Init+0x1f0>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d004      	beq.n	8006b78 <HAL_DMA_Init+0xb8>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a50      	ldr	r2, [pc, #320]	@ (8006cb4 <HAL_DMA_Init+0x1f4>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d101      	bne.n	8006b7c <HAL_DMA_Init+0xbc>
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e000      	b.n	8006b7e <HAL_DMA_Init+0xbe>
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	f000 813c 	beq.w	8006dfc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2202      	movs	r2, #2
 8006b88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a37      	ldr	r2, [pc, #220]	@ (8006c78 <HAL_DMA_Init+0x1b8>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d04a      	beq.n	8006c34 <HAL_DMA_Init+0x174>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a36      	ldr	r2, [pc, #216]	@ (8006c7c <HAL_DMA_Init+0x1bc>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d045      	beq.n	8006c34 <HAL_DMA_Init+0x174>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a34      	ldr	r2, [pc, #208]	@ (8006c80 <HAL_DMA_Init+0x1c0>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d040      	beq.n	8006c34 <HAL_DMA_Init+0x174>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a33      	ldr	r2, [pc, #204]	@ (8006c84 <HAL_DMA_Init+0x1c4>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d03b      	beq.n	8006c34 <HAL_DMA_Init+0x174>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a31      	ldr	r2, [pc, #196]	@ (8006c88 <HAL_DMA_Init+0x1c8>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d036      	beq.n	8006c34 <HAL_DMA_Init+0x174>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a30      	ldr	r2, [pc, #192]	@ (8006c8c <HAL_DMA_Init+0x1cc>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d031      	beq.n	8006c34 <HAL_DMA_Init+0x174>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a2e      	ldr	r2, [pc, #184]	@ (8006c90 <HAL_DMA_Init+0x1d0>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d02c      	beq.n	8006c34 <HAL_DMA_Init+0x174>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a2d      	ldr	r2, [pc, #180]	@ (8006c94 <HAL_DMA_Init+0x1d4>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d027      	beq.n	8006c34 <HAL_DMA_Init+0x174>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a2b      	ldr	r2, [pc, #172]	@ (8006c98 <HAL_DMA_Init+0x1d8>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d022      	beq.n	8006c34 <HAL_DMA_Init+0x174>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a2a      	ldr	r2, [pc, #168]	@ (8006c9c <HAL_DMA_Init+0x1dc>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d01d      	beq.n	8006c34 <HAL_DMA_Init+0x174>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a28      	ldr	r2, [pc, #160]	@ (8006ca0 <HAL_DMA_Init+0x1e0>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d018      	beq.n	8006c34 <HAL_DMA_Init+0x174>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a27      	ldr	r2, [pc, #156]	@ (8006ca4 <HAL_DMA_Init+0x1e4>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d013      	beq.n	8006c34 <HAL_DMA_Init+0x174>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a25      	ldr	r2, [pc, #148]	@ (8006ca8 <HAL_DMA_Init+0x1e8>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d00e      	beq.n	8006c34 <HAL_DMA_Init+0x174>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a24      	ldr	r2, [pc, #144]	@ (8006cac <HAL_DMA_Init+0x1ec>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d009      	beq.n	8006c34 <HAL_DMA_Init+0x174>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a22      	ldr	r2, [pc, #136]	@ (8006cb0 <HAL_DMA_Init+0x1f0>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d004      	beq.n	8006c34 <HAL_DMA_Init+0x174>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a21      	ldr	r2, [pc, #132]	@ (8006cb4 <HAL_DMA_Init+0x1f4>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d108      	bne.n	8006c46 <HAL_DMA_Init+0x186>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f022 0201 	bic.w	r2, r2, #1
 8006c42:	601a      	str	r2, [r3, #0]
 8006c44:	e007      	b.n	8006c56 <HAL_DMA_Init+0x196>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f022 0201 	bic.w	r2, r2, #1
 8006c54:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006c56:	e02f      	b.n	8006cb8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006c58:	f7ff fdaa 	bl	80067b0 <HAL_GetTick>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	2b05      	cmp	r3, #5
 8006c64:	d928      	bls.n	8006cb8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2220      	movs	r2, #32
 8006c6a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2203      	movs	r2, #3
 8006c70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	e2ad      	b.n	80071d4 <HAL_DMA_Init+0x714>
 8006c78:	40020010 	.word	0x40020010
 8006c7c:	40020028 	.word	0x40020028
 8006c80:	40020040 	.word	0x40020040
 8006c84:	40020058 	.word	0x40020058
 8006c88:	40020070 	.word	0x40020070
 8006c8c:	40020088 	.word	0x40020088
 8006c90:	400200a0 	.word	0x400200a0
 8006c94:	400200b8 	.word	0x400200b8
 8006c98:	40020410 	.word	0x40020410
 8006c9c:	40020428 	.word	0x40020428
 8006ca0:	40020440 	.word	0x40020440
 8006ca4:	40020458 	.word	0x40020458
 8006ca8:	40020470 	.word	0x40020470
 8006cac:	40020488 	.word	0x40020488
 8006cb0:	400204a0 	.word	0x400204a0
 8006cb4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1c8      	bne.n	8006c58 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006cce:	697a      	ldr	r2, [r7, #20]
 8006cd0:	4b73      	ldr	r3, [pc, #460]	@ (8006ea0 <HAL_DMA_Init+0x3e0>)
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006cde:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006cea:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	699b      	ldr	r3, [r3, #24]
 8006cf0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006cf6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a1b      	ldr	r3, [r3, #32]
 8006cfc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006cfe:	697a      	ldr	r2, [r7, #20]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d08:	2b04      	cmp	r3, #4
 8006d0a:	d107      	bne.n	8006d1c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d14:	4313      	orrs	r3, r2
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	2b28      	cmp	r3, #40	@ 0x28
 8006d22:	d903      	bls.n	8006d2c <HAL_DMA_Init+0x26c>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d2a:	d91f      	bls.n	8006d6c <HAL_DMA_Init+0x2ac>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d32:	d903      	bls.n	8006d3c <HAL_DMA_Init+0x27c>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	2b42      	cmp	r3, #66	@ 0x42
 8006d3a:	d917      	bls.n	8006d6c <HAL_DMA_Init+0x2ac>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	2b46      	cmp	r3, #70	@ 0x46
 8006d42:	d903      	bls.n	8006d4c <HAL_DMA_Init+0x28c>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	2b48      	cmp	r3, #72	@ 0x48
 8006d4a:	d90f      	bls.n	8006d6c <HAL_DMA_Init+0x2ac>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	2b4e      	cmp	r3, #78	@ 0x4e
 8006d52:	d903      	bls.n	8006d5c <HAL_DMA_Init+0x29c>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	2b52      	cmp	r3, #82	@ 0x52
 8006d5a:	d907      	bls.n	8006d6c <HAL_DMA_Init+0x2ac>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	2b73      	cmp	r3, #115	@ 0x73
 8006d62:	d905      	bls.n	8006d70 <HAL_DMA_Init+0x2b0>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	2b77      	cmp	r3, #119	@ 0x77
 8006d6a:	d801      	bhi.n	8006d70 <HAL_DMA_Init+0x2b0>
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e000      	b.n	8006d72 <HAL_DMA_Init+0x2b2>
 8006d70:	2300      	movs	r3, #0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d003      	beq.n	8006d7e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d7c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	697a      	ldr	r2, [r7, #20]
 8006d84:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	695b      	ldr	r3, [r3, #20]
 8006d8c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	f023 0307 	bic.w	r3, r3, #7
 8006d94:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d9a:	697a      	ldr	r2, [r7, #20]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da4:	2b04      	cmp	r3, #4
 8006da6:	d117      	bne.n	8006dd8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dac:	697a      	ldr	r2, [r7, #20]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d00e      	beq.n	8006dd8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f002 fbe0 	bl	8009580 <DMA_CheckFifoParam>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d008      	beq.n	8006dd8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2240      	movs	r2, #64	@ 0x40
 8006dca:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e1fd      	b.n	80071d4 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	697a      	ldr	r2, [r7, #20]
 8006dde:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f002 fb1b 	bl	800941c <DMA_CalcBaseAndBitshift>
 8006de6:	4603      	mov	r3, r0
 8006de8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dee:	f003 031f 	and.w	r3, r3, #31
 8006df2:	223f      	movs	r2, #63	@ 0x3f
 8006df4:	409a      	lsls	r2, r3
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	609a      	str	r2, [r3, #8]
 8006dfa:	e0fd      	b.n	8006ff8 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a28      	ldr	r2, [pc, #160]	@ (8006ea4 <HAL_DMA_Init+0x3e4>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d04a      	beq.n	8006e9c <HAL_DMA_Init+0x3dc>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a27      	ldr	r2, [pc, #156]	@ (8006ea8 <HAL_DMA_Init+0x3e8>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d045      	beq.n	8006e9c <HAL_DMA_Init+0x3dc>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a25      	ldr	r2, [pc, #148]	@ (8006eac <HAL_DMA_Init+0x3ec>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d040      	beq.n	8006e9c <HAL_DMA_Init+0x3dc>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a24      	ldr	r2, [pc, #144]	@ (8006eb0 <HAL_DMA_Init+0x3f0>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d03b      	beq.n	8006e9c <HAL_DMA_Init+0x3dc>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a22      	ldr	r2, [pc, #136]	@ (8006eb4 <HAL_DMA_Init+0x3f4>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d036      	beq.n	8006e9c <HAL_DMA_Init+0x3dc>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a21      	ldr	r2, [pc, #132]	@ (8006eb8 <HAL_DMA_Init+0x3f8>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d031      	beq.n	8006e9c <HAL_DMA_Init+0x3dc>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a1f      	ldr	r2, [pc, #124]	@ (8006ebc <HAL_DMA_Init+0x3fc>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d02c      	beq.n	8006e9c <HAL_DMA_Init+0x3dc>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a1e      	ldr	r2, [pc, #120]	@ (8006ec0 <HAL_DMA_Init+0x400>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d027      	beq.n	8006e9c <HAL_DMA_Init+0x3dc>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a1c      	ldr	r2, [pc, #112]	@ (8006ec4 <HAL_DMA_Init+0x404>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d022      	beq.n	8006e9c <HAL_DMA_Init+0x3dc>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a1b      	ldr	r2, [pc, #108]	@ (8006ec8 <HAL_DMA_Init+0x408>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d01d      	beq.n	8006e9c <HAL_DMA_Init+0x3dc>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a19      	ldr	r2, [pc, #100]	@ (8006ecc <HAL_DMA_Init+0x40c>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d018      	beq.n	8006e9c <HAL_DMA_Init+0x3dc>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a18      	ldr	r2, [pc, #96]	@ (8006ed0 <HAL_DMA_Init+0x410>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d013      	beq.n	8006e9c <HAL_DMA_Init+0x3dc>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a16      	ldr	r2, [pc, #88]	@ (8006ed4 <HAL_DMA_Init+0x414>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d00e      	beq.n	8006e9c <HAL_DMA_Init+0x3dc>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a15      	ldr	r2, [pc, #84]	@ (8006ed8 <HAL_DMA_Init+0x418>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d009      	beq.n	8006e9c <HAL_DMA_Init+0x3dc>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a13      	ldr	r2, [pc, #76]	@ (8006edc <HAL_DMA_Init+0x41c>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d004      	beq.n	8006e9c <HAL_DMA_Init+0x3dc>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a12      	ldr	r2, [pc, #72]	@ (8006ee0 <HAL_DMA_Init+0x420>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d123      	bne.n	8006ee4 <HAL_DMA_Init+0x424>
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e022      	b.n	8006ee6 <HAL_DMA_Init+0x426>
 8006ea0:	fe10803f 	.word	0xfe10803f
 8006ea4:	48022c08 	.word	0x48022c08
 8006ea8:	48022c1c 	.word	0x48022c1c
 8006eac:	48022c30 	.word	0x48022c30
 8006eb0:	48022c44 	.word	0x48022c44
 8006eb4:	48022c58 	.word	0x48022c58
 8006eb8:	48022c6c 	.word	0x48022c6c
 8006ebc:	48022c80 	.word	0x48022c80
 8006ec0:	48022c94 	.word	0x48022c94
 8006ec4:	58025408 	.word	0x58025408
 8006ec8:	5802541c 	.word	0x5802541c
 8006ecc:	58025430 	.word	0x58025430
 8006ed0:	58025444 	.word	0x58025444
 8006ed4:	58025458 	.word	0x58025458
 8006ed8:	5802546c 	.word	0x5802546c
 8006edc:	58025480 	.word	0x58025480
 8006ee0:	58025494 	.word	0x58025494
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d07d      	beq.n	8006fe6 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a7f      	ldr	r2, [pc, #508]	@ (80070ec <HAL_DMA_Init+0x62c>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d021      	beq.n	8006f38 <HAL_DMA_Init+0x478>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a7d      	ldr	r2, [pc, #500]	@ (80070f0 <HAL_DMA_Init+0x630>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d01c      	beq.n	8006f38 <HAL_DMA_Init+0x478>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a7c      	ldr	r2, [pc, #496]	@ (80070f4 <HAL_DMA_Init+0x634>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d017      	beq.n	8006f38 <HAL_DMA_Init+0x478>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a7a      	ldr	r2, [pc, #488]	@ (80070f8 <HAL_DMA_Init+0x638>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d012      	beq.n	8006f38 <HAL_DMA_Init+0x478>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a79      	ldr	r2, [pc, #484]	@ (80070fc <HAL_DMA_Init+0x63c>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d00d      	beq.n	8006f38 <HAL_DMA_Init+0x478>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a77      	ldr	r2, [pc, #476]	@ (8007100 <HAL_DMA_Init+0x640>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d008      	beq.n	8006f38 <HAL_DMA_Init+0x478>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a76      	ldr	r2, [pc, #472]	@ (8007104 <HAL_DMA_Init+0x644>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d003      	beq.n	8006f38 <HAL_DMA_Init+0x478>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a74      	ldr	r2, [pc, #464]	@ (8007108 <HAL_DMA_Init+0x648>)
 8006f36:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006f50:	697a      	ldr	r2, [r7, #20]
 8006f52:	4b6e      	ldr	r3, [pc, #440]	@ (800710c <HAL_DMA_Init+0x64c>)
 8006f54:	4013      	ands	r3, r2
 8006f56:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	2b40      	cmp	r3, #64	@ 0x40
 8006f5e:	d008      	beq.n	8006f72 <HAL_DMA_Init+0x4b2>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	2b80      	cmp	r3, #128	@ 0x80
 8006f66:	d102      	bne.n	8006f6e <HAL_DMA_Init+0x4ae>
 8006f68:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006f6c:	e002      	b.n	8006f74 <HAL_DMA_Init+0x4b4>
 8006f6e:	2300      	movs	r3, #0
 8006f70:	e000      	b.n	8006f74 <HAL_DMA_Init+0x4b4>
 8006f72:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	68d2      	ldr	r2, [r2, #12]
 8006f78:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006f7a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006f82:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	695b      	ldr	r3, [r3, #20]
 8006f88:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006f8a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	699b      	ldr	r3, [r3, #24]
 8006f90:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006f92:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	69db      	ldr	r3, [r3, #28]
 8006f98:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006f9a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6a1b      	ldr	r3, [r3, #32]
 8006fa0:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006fa2:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006fa4:	697a      	ldr	r2, [r7, #20]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	697a      	ldr	r2, [r7, #20]
 8006fb0:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	4b55      	ldr	r3, [pc, #340]	@ (8007110 <HAL_DMA_Init+0x650>)
 8006fba:	4413      	add	r3, r2
 8006fbc:	4a55      	ldr	r2, [pc, #340]	@ (8007114 <HAL_DMA_Init+0x654>)
 8006fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8006fc2:	091b      	lsrs	r3, r3, #4
 8006fc4:	009a      	lsls	r2, r3, #2
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f002 fa26 	bl	800941c <DMA_CalcBaseAndBitshift>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fd8:	f003 031f 	and.w	r3, r3, #31
 8006fdc:	2201      	movs	r2, #1
 8006fde:	409a      	lsls	r2, r3
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	605a      	str	r2, [r3, #4]
 8006fe4:	e008      	b.n	8006ff8 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2240      	movs	r2, #64	@ 0x40
 8006fea:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2203      	movs	r2, #3
 8006ff0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e0ed      	b.n	80071d4 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a46      	ldr	r2, [pc, #280]	@ (8007118 <HAL_DMA_Init+0x658>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d072      	beq.n	80070e8 <HAL_DMA_Init+0x628>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a45      	ldr	r2, [pc, #276]	@ (800711c <HAL_DMA_Init+0x65c>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d06d      	beq.n	80070e8 <HAL_DMA_Init+0x628>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a43      	ldr	r2, [pc, #268]	@ (8007120 <HAL_DMA_Init+0x660>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d068      	beq.n	80070e8 <HAL_DMA_Init+0x628>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a42      	ldr	r2, [pc, #264]	@ (8007124 <HAL_DMA_Init+0x664>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d063      	beq.n	80070e8 <HAL_DMA_Init+0x628>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a40      	ldr	r2, [pc, #256]	@ (8007128 <HAL_DMA_Init+0x668>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d05e      	beq.n	80070e8 <HAL_DMA_Init+0x628>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a3f      	ldr	r2, [pc, #252]	@ (800712c <HAL_DMA_Init+0x66c>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d059      	beq.n	80070e8 <HAL_DMA_Init+0x628>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a3d      	ldr	r2, [pc, #244]	@ (8007130 <HAL_DMA_Init+0x670>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d054      	beq.n	80070e8 <HAL_DMA_Init+0x628>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a3c      	ldr	r2, [pc, #240]	@ (8007134 <HAL_DMA_Init+0x674>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d04f      	beq.n	80070e8 <HAL_DMA_Init+0x628>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a3a      	ldr	r2, [pc, #232]	@ (8007138 <HAL_DMA_Init+0x678>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d04a      	beq.n	80070e8 <HAL_DMA_Init+0x628>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a39      	ldr	r2, [pc, #228]	@ (800713c <HAL_DMA_Init+0x67c>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d045      	beq.n	80070e8 <HAL_DMA_Init+0x628>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a37      	ldr	r2, [pc, #220]	@ (8007140 <HAL_DMA_Init+0x680>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d040      	beq.n	80070e8 <HAL_DMA_Init+0x628>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a36      	ldr	r2, [pc, #216]	@ (8007144 <HAL_DMA_Init+0x684>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d03b      	beq.n	80070e8 <HAL_DMA_Init+0x628>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a34      	ldr	r2, [pc, #208]	@ (8007148 <HAL_DMA_Init+0x688>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d036      	beq.n	80070e8 <HAL_DMA_Init+0x628>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a33      	ldr	r2, [pc, #204]	@ (800714c <HAL_DMA_Init+0x68c>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d031      	beq.n	80070e8 <HAL_DMA_Init+0x628>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a31      	ldr	r2, [pc, #196]	@ (8007150 <HAL_DMA_Init+0x690>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d02c      	beq.n	80070e8 <HAL_DMA_Init+0x628>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a30      	ldr	r2, [pc, #192]	@ (8007154 <HAL_DMA_Init+0x694>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d027      	beq.n	80070e8 <HAL_DMA_Init+0x628>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a13      	ldr	r2, [pc, #76]	@ (80070ec <HAL_DMA_Init+0x62c>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d022      	beq.n	80070e8 <HAL_DMA_Init+0x628>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a12      	ldr	r2, [pc, #72]	@ (80070f0 <HAL_DMA_Init+0x630>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d01d      	beq.n	80070e8 <HAL_DMA_Init+0x628>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a10      	ldr	r2, [pc, #64]	@ (80070f4 <HAL_DMA_Init+0x634>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d018      	beq.n	80070e8 <HAL_DMA_Init+0x628>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a0f      	ldr	r2, [pc, #60]	@ (80070f8 <HAL_DMA_Init+0x638>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d013      	beq.n	80070e8 <HAL_DMA_Init+0x628>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a0d      	ldr	r2, [pc, #52]	@ (80070fc <HAL_DMA_Init+0x63c>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d00e      	beq.n	80070e8 <HAL_DMA_Init+0x628>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a0c      	ldr	r2, [pc, #48]	@ (8007100 <HAL_DMA_Init+0x640>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d009      	beq.n	80070e8 <HAL_DMA_Init+0x628>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a0a      	ldr	r2, [pc, #40]	@ (8007104 <HAL_DMA_Init+0x644>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d004      	beq.n	80070e8 <HAL_DMA_Init+0x628>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a09      	ldr	r2, [pc, #36]	@ (8007108 <HAL_DMA_Init+0x648>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d137      	bne.n	8007158 <HAL_DMA_Init+0x698>
 80070e8:	2301      	movs	r3, #1
 80070ea:	e036      	b.n	800715a <HAL_DMA_Init+0x69a>
 80070ec:	58025408 	.word	0x58025408
 80070f0:	5802541c 	.word	0x5802541c
 80070f4:	58025430 	.word	0x58025430
 80070f8:	58025444 	.word	0x58025444
 80070fc:	58025458 	.word	0x58025458
 8007100:	5802546c 	.word	0x5802546c
 8007104:	58025480 	.word	0x58025480
 8007108:	58025494 	.word	0x58025494
 800710c:	fffe000f 	.word	0xfffe000f
 8007110:	a7fdabf8 	.word	0xa7fdabf8
 8007114:	cccccccd 	.word	0xcccccccd
 8007118:	40020010 	.word	0x40020010
 800711c:	40020028 	.word	0x40020028
 8007120:	40020040 	.word	0x40020040
 8007124:	40020058 	.word	0x40020058
 8007128:	40020070 	.word	0x40020070
 800712c:	40020088 	.word	0x40020088
 8007130:	400200a0 	.word	0x400200a0
 8007134:	400200b8 	.word	0x400200b8
 8007138:	40020410 	.word	0x40020410
 800713c:	40020428 	.word	0x40020428
 8007140:	40020440 	.word	0x40020440
 8007144:	40020458 	.word	0x40020458
 8007148:	40020470 	.word	0x40020470
 800714c:	40020488 	.word	0x40020488
 8007150:	400204a0 	.word	0x400204a0
 8007154:	400204b8 	.word	0x400204b8
 8007158:	2300      	movs	r3, #0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d032      	beq.n	80071c4 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f002 fa8a 	bl	8009678 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	2b80      	cmp	r3, #128	@ 0x80
 800716a:	d102      	bne.n	8007172 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	685a      	ldr	r2, [r3, #4]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800717a:	b2d2      	uxtb	r2, r2
 800717c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007186:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d010      	beq.n	80071b2 <HAL_DMA_Init+0x6f2>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	2b08      	cmp	r3, #8
 8007196:	d80c      	bhi.n	80071b2 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f002 fb07 	bl	80097ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071a2:	2200      	movs	r2, #0
 80071a4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80071ae:	605a      	str	r2, [r3, #4]
 80071b0:	e008      	b.n	80071c4 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2200      	movs	r2, #0
 80071c2:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2201      	movs	r2, #1
 80071ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3718      	adds	r7, #24
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b086      	sub	sp, #24
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	607a      	str	r2, [r7, #4]
 80071e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071ea:	2300      	movs	r3, #0
 80071ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d101      	bne.n	80071f8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	e226      	b.n	8007646 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d101      	bne.n	8007206 <HAL_DMA_Start_IT+0x2a>
 8007202:	2302      	movs	r3, #2
 8007204:	e21f      	b.n	8007646 <HAL_DMA_Start_IT+0x46a>
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2201      	movs	r2, #1
 800720a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007214:	b2db      	uxtb	r3, r3
 8007216:	2b01      	cmp	r3, #1
 8007218:	f040 820a 	bne.w	8007630 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2202      	movs	r2, #2
 8007220:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2200      	movs	r2, #0
 8007228:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a68      	ldr	r2, [pc, #416]	@ (80073d0 <HAL_DMA_Start_IT+0x1f4>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d04a      	beq.n	80072ca <HAL_DMA_Start_IT+0xee>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a66      	ldr	r2, [pc, #408]	@ (80073d4 <HAL_DMA_Start_IT+0x1f8>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d045      	beq.n	80072ca <HAL_DMA_Start_IT+0xee>
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a65      	ldr	r2, [pc, #404]	@ (80073d8 <HAL_DMA_Start_IT+0x1fc>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d040      	beq.n	80072ca <HAL_DMA_Start_IT+0xee>
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a63      	ldr	r2, [pc, #396]	@ (80073dc <HAL_DMA_Start_IT+0x200>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d03b      	beq.n	80072ca <HAL_DMA_Start_IT+0xee>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a62      	ldr	r2, [pc, #392]	@ (80073e0 <HAL_DMA_Start_IT+0x204>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d036      	beq.n	80072ca <HAL_DMA_Start_IT+0xee>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a60      	ldr	r2, [pc, #384]	@ (80073e4 <HAL_DMA_Start_IT+0x208>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d031      	beq.n	80072ca <HAL_DMA_Start_IT+0xee>
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a5f      	ldr	r2, [pc, #380]	@ (80073e8 <HAL_DMA_Start_IT+0x20c>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d02c      	beq.n	80072ca <HAL_DMA_Start_IT+0xee>
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a5d      	ldr	r2, [pc, #372]	@ (80073ec <HAL_DMA_Start_IT+0x210>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d027      	beq.n	80072ca <HAL_DMA_Start_IT+0xee>
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a5c      	ldr	r2, [pc, #368]	@ (80073f0 <HAL_DMA_Start_IT+0x214>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d022      	beq.n	80072ca <HAL_DMA_Start_IT+0xee>
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a5a      	ldr	r2, [pc, #360]	@ (80073f4 <HAL_DMA_Start_IT+0x218>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d01d      	beq.n	80072ca <HAL_DMA_Start_IT+0xee>
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a59      	ldr	r2, [pc, #356]	@ (80073f8 <HAL_DMA_Start_IT+0x21c>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d018      	beq.n	80072ca <HAL_DMA_Start_IT+0xee>
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a57      	ldr	r2, [pc, #348]	@ (80073fc <HAL_DMA_Start_IT+0x220>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d013      	beq.n	80072ca <HAL_DMA_Start_IT+0xee>
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a56      	ldr	r2, [pc, #344]	@ (8007400 <HAL_DMA_Start_IT+0x224>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d00e      	beq.n	80072ca <HAL_DMA_Start_IT+0xee>
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a54      	ldr	r2, [pc, #336]	@ (8007404 <HAL_DMA_Start_IT+0x228>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d009      	beq.n	80072ca <HAL_DMA_Start_IT+0xee>
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a53      	ldr	r2, [pc, #332]	@ (8007408 <HAL_DMA_Start_IT+0x22c>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d004      	beq.n	80072ca <HAL_DMA_Start_IT+0xee>
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a51      	ldr	r2, [pc, #324]	@ (800740c <HAL_DMA_Start_IT+0x230>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d108      	bne.n	80072dc <HAL_DMA_Start_IT+0x100>
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f022 0201 	bic.w	r2, r2, #1
 80072d8:	601a      	str	r2, [r3, #0]
 80072da:	e007      	b.n	80072ec <HAL_DMA_Start_IT+0x110>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f022 0201 	bic.w	r2, r2, #1
 80072ea:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	68b9      	ldr	r1, [r7, #8]
 80072f2:	68f8      	ldr	r0, [r7, #12]
 80072f4:	f001 feae 	bl	8009054 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a34      	ldr	r2, [pc, #208]	@ (80073d0 <HAL_DMA_Start_IT+0x1f4>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d04a      	beq.n	8007398 <HAL_DMA_Start_IT+0x1bc>
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a33      	ldr	r2, [pc, #204]	@ (80073d4 <HAL_DMA_Start_IT+0x1f8>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d045      	beq.n	8007398 <HAL_DMA_Start_IT+0x1bc>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a31      	ldr	r2, [pc, #196]	@ (80073d8 <HAL_DMA_Start_IT+0x1fc>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d040      	beq.n	8007398 <HAL_DMA_Start_IT+0x1bc>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a30      	ldr	r2, [pc, #192]	@ (80073dc <HAL_DMA_Start_IT+0x200>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d03b      	beq.n	8007398 <HAL_DMA_Start_IT+0x1bc>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a2e      	ldr	r2, [pc, #184]	@ (80073e0 <HAL_DMA_Start_IT+0x204>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d036      	beq.n	8007398 <HAL_DMA_Start_IT+0x1bc>
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a2d      	ldr	r2, [pc, #180]	@ (80073e4 <HAL_DMA_Start_IT+0x208>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d031      	beq.n	8007398 <HAL_DMA_Start_IT+0x1bc>
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a2b      	ldr	r2, [pc, #172]	@ (80073e8 <HAL_DMA_Start_IT+0x20c>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d02c      	beq.n	8007398 <HAL_DMA_Start_IT+0x1bc>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a2a      	ldr	r2, [pc, #168]	@ (80073ec <HAL_DMA_Start_IT+0x210>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d027      	beq.n	8007398 <HAL_DMA_Start_IT+0x1bc>
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a28      	ldr	r2, [pc, #160]	@ (80073f0 <HAL_DMA_Start_IT+0x214>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d022      	beq.n	8007398 <HAL_DMA_Start_IT+0x1bc>
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a27      	ldr	r2, [pc, #156]	@ (80073f4 <HAL_DMA_Start_IT+0x218>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d01d      	beq.n	8007398 <HAL_DMA_Start_IT+0x1bc>
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a25      	ldr	r2, [pc, #148]	@ (80073f8 <HAL_DMA_Start_IT+0x21c>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d018      	beq.n	8007398 <HAL_DMA_Start_IT+0x1bc>
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a24      	ldr	r2, [pc, #144]	@ (80073fc <HAL_DMA_Start_IT+0x220>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d013      	beq.n	8007398 <HAL_DMA_Start_IT+0x1bc>
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a22      	ldr	r2, [pc, #136]	@ (8007400 <HAL_DMA_Start_IT+0x224>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d00e      	beq.n	8007398 <HAL_DMA_Start_IT+0x1bc>
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a21      	ldr	r2, [pc, #132]	@ (8007404 <HAL_DMA_Start_IT+0x228>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d009      	beq.n	8007398 <HAL_DMA_Start_IT+0x1bc>
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a1f      	ldr	r2, [pc, #124]	@ (8007408 <HAL_DMA_Start_IT+0x22c>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d004      	beq.n	8007398 <HAL_DMA_Start_IT+0x1bc>
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a1e      	ldr	r2, [pc, #120]	@ (800740c <HAL_DMA_Start_IT+0x230>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d101      	bne.n	800739c <HAL_DMA_Start_IT+0x1c0>
 8007398:	2301      	movs	r3, #1
 800739a:	e000      	b.n	800739e <HAL_DMA_Start_IT+0x1c2>
 800739c:	2300      	movs	r3, #0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d036      	beq.n	8007410 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f023 021e 	bic.w	r2, r3, #30
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f042 0216 	orr.w	r2, r2, #22
 80073b4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d03e      	beq.n	800743c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f042 0208 	orr.w	r2, r2, #8
 80073cc:	601a      	str	r2, [r3, #0]
 80073ce:	e035      	b.n	800743c <HAL_DMA_Start_IT+0x260>
 80073d0:	40020010 	.word	0x40020010
 80073d4:	40020028 	.word	0x40020028
 80073d8:	40020040 	.word	0x40020040
 80073dc:	40020058 	.word	0x40020058
 80073e0:	40020070 	.word	0x40020070
 80073e4:	40020088 	.word	0x40020088
 80073e8:	400200a0 	.word	0x400200a0
 80073ec:	400200b8 	.word	0x400200b8
 80073f0:	40020410 	.word	0x40020410
 80073f4:	40020428 	.word	0x40020428
 80073f8:	40020440 	.word	0x40020440
 80073fc:	40020458 	.word	0x40020458
 8007400:	40020470 	.word	0x40020470
 8007404:	40020488 	.word	0x40020488
 8007408:	400204a0 	.word	0x400204a0
 800740c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f023 020e 	bic.w	r2, r3, #14
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f042 020a 	orr.w	r2, r2, #10
 8007422:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007428:	2b00      	cmp	r3, #0
 800742a:	d007      	beq.n	800743c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f042 0204 	orr.w	r2, r2, #4
 800743a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a83      	ldr	r2, [pc, #524]	@ (8007650 <HAL_DMA_Start_IT+0x474>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d072      	beq.n	800752c <HAL_DMA_Start_IT+0x350>
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a82      	ldr	r2, [pc, #520]	@ (8007654 <HAL_DMA_Start_IT+0x478>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d06d      	beq.n	800752c <HAL_DMA_Start_IT+0x350>
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a80      	ldr	r2, [pc, #512]	@ (8007658 <HAL_DMA_Start_IT+0x47c>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d068      	beq.n	800752c <HAL_DMA_Start_IT+0x350>
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a7f      	ldr	r2, [pc, #508]	@ (800765c <HAL_DMA_Start_IT+0x480>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d063      	beq.n	800752c <HAL_DMA_Start_IT+0x350>
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a7d      	ldr	r2, [pc, #500]	@ (8007660 <HAL_DMA_Start_IT+0x484>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d05e      	beq.n	800752c <HAL_DMA_Start_IT+0x350>
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a7c      	ldr	r2, [pc, #496]	@ (8007664 <HAL_DMA_Start_IT+0x488>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d059      	beq.n	800752c <HAL_DMA_Start_IT+0x350>
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a7a      	ldr	r2, [pc, #488]	@ (8007668 <HAL_DMA_Start_IT+0x48c>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d054      	beq.n	800752c <HAL_DMA_Start_IT+0x350>
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a79      	ldr	r2, [pc, #484]	@ (800766c <HAL_DMA_Start_IT+0x490>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d04f      	beq.n	800752c <HAL_DMA_Start_IT+0x350>
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a77      	ldr	r2, [pc, #476]	@ (8007670 <HAL_DMA_Start_IT+0x494>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d04a      	beq.n	800752c <HAL_DMA_Start_IT+0x350>
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a76      	ldr	r2, [pc, #472]	@ (8007674 <HAL_DMA_Start_IT+0x498>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d045      	beq.n	800752c <HAL_DMA_Start_IT+0x350>
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a74      	ldr	r2, [pc, #464]	@ (8007678 <HAL_DMA_Start_IT+0x49c>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d040      	beq.n	800752c <HAL_DMA_Start_IT+0x350>
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a73      	ldr	r2, [pc, #460]	@ (800767c <HAL_DMA_Start_IT+0x4a0>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d03b      	beq.n	800752c <HAL_DMA_Start_IT+0x350>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a71      	ldr	r2, [pc, #452]	@ (8007680 <HAL_DMA_Start_IT+0x4a4>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d036      	beq.n	800752c <HAL_DMA_Start_IT+0x350>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a70      	ldr	r2, [pc, #448]	@ (8007684 <HAL_DMA_Start_IT+0x4a8>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d031      	beq.n	800752c <HAL_DMA_Start_IT+0x350>
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a6e      	ldr	r2, [pc, #440]	@ (8007688 <HAL_DMA_Start_IT+0x4ac>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d02c      	beq.n	800752c <HAL_DMA_Start_IT+0x350>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a6d      	ldr	r2, [pc, #436]	@ (800768c <HAL_DMA_Start_IT+0x4b0>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d027      	beq.n	800752c <HAL_DMA_Start_IT+0x350>
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a6b      	ldr	r2, [pc, #428]	@ (8007690 <HAL_DMA_Start_IT+0x4b4>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d022      	beq.n	800752c <HAL_DMA_Start_IT+0x350>
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a6a      	ldr	r2, [pc, #424]	@ (8007694 <HAL_DMA_Start_IT+0x4b8>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d01d      	beq.n	800752c <HAL_DMA_Start_IT+0x350>
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a68      	ldr	r2, [pc, #416]	@ (8007698 <HAL_DMA_Start_IT+0x4bc>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d018      	beq.n	800752c <HAL_DMA_Start_IT+0x350>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a67      	ldr	r2, [pc, #412]	@ (800769c <HAL_DMA_Start_IT+0x4c0>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d013      	beq.n	800752c <HAL_DMA_Start_IT+0x350>
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a65      	ldr	r2, [pc, #404]	@ (80076a0 <HAL_DMA_Start_IT+0x4c4>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d00e      	beq.n	800752c <HAL_DMA_Start_IT+0x350>
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a64      	ldr	r2, [pc, #400]	@ (80076a4 <HAL_DMA_Start_IT+0x4c8>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d009      	beq.n	800752c <HAL_DMA_Start_IT+0x350>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a62      	ldr	r2, [pc, #392]	@ (80076a8 <HAL_DMA_Start_IT+0x4cc>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d004      	beq.n	800752c <HAL_DMA_Start_IT+0x350>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a61      	ldr	r2, [pc, #388]	@ (80076ac <HAL_DMA_Start_IT+0x4d0>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d101      	bne.n	8007530 <HAL_DMA_Start_IT+0x354>
 800752c:	2301      	movs	r3, #1
 800752e:	e000      	b.n	8007532 <HAL_DMA_Start_IT+0x356>
 8007530:	2300      	movs	r3, #0
 8007532:	2b00      	cmp	r3, #0
 8007534:	d01a      	beq.n	800756c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007540:	2b00      	cmp	r3, #0
 8007542:	d007      	beq.n	8007554 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800754e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007552:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007558:	2b00      	cmp	r3, #0
 800755a:	d007      	beq.n	800756c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007566:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800756a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a37      	ldr	r2, [pc, #220]	@ (8007650 <HAL_DMA_Start_IT+0x474>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d04a      	beq.n	800760c <HAL_DMA_Start_IT+0x430>
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a36      	ldr	r2, [pc, #216]	@ (8007654 <HAL_DMA_Start_IT+0x478>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d045      	beq.n	800760c <HAL_DMA_Start_IT+0x430>
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a34      	ldr	r2, [pc, #208]	@ (8007658 <HAL_DMA_Start_IT+0x47c>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d040      	beq.n	800760c <HAL_DMA_Start_IT+0x430>
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a33      	ldr	r2, [pc, #204]	@ (800765c <HAL_DMA_Start_IT+0x480>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d03b      	beq.n	800760c <HAL_DMA_Start_IT+0x430>
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a31      	ldr	r2, [pc, #196]	@ (8007660 <HAL_DMA_Start_IT+0x484>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d036      	beq.n	800760c <HAL_DMA_Start_IT+0x430>
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a30      	ldr	r2, [pc, #192]	@ (8007664 <HAL_DMA_Start_IT+0x488>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d031      	beq.n	800760c <HAL_DMA_Start_IT+0x430>
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a2e      	ldr	r2, [pc, #184]	@ (8007668 <HAL_DMA_Start_IT+0x48c>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d02c      	beq.n	800760c <HAL_DMA_Start_IT+0x430>
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a2d      	ldr	r2, [pc, #180]	@ (800766c <HAL_DMA_Start_IT+0x490>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d027      	beq.n	800760c <HAL_DMA_Start_IT+0x430>
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a2b      	ldr	r2, [pc, #172]	@ (8007670 <HAL_DMA_Start_IT+0x494>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d022      	beq.n	800760c <HAL_DMA_Start_IT+0x430>
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a2a      	ldr	r2, [pc, #168]	@ (8007674 <HAL_DMA_Start_IT+0x498>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d01d      	beq.n	800760c <HAL_DMA_Start_IT+0x430>
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a28      	ldr	r2, [pc, #160]	@ (8007678 <HAL_DMA_Start_IT+0x49c>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d018      	beq.n	800760c <HAL_DMA_Start_IT+0x430>
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a27      	ldr	r2, [pc, #156]	@ (800767c <HAL_DMA_Start_IT+0x4a0>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d013      	beq.n	800760c <HAL_DMA_Start_IT+0x430>
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a25      	ldr	r2, [pc, #148]	@ (8007680 <HAL_DMA_Start_IT+0x4a4>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d00e      	beq.n	800760c <HAL_DMA_Start_IT+0x430>
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a24      	ldr	r2, [pc, #144]	@ (8007684 <HAL_DMA_Start_IT+0x4a8>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d009      	beq.n	800760c <HAL_DMA_Start_IT+0x430>
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a22      	ldr	r2, [pc, #136]	@ (8007688 <HAL_DMA_Start_IT+0x4ac>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d004      	beq.n	800760c <HAL_DMA_Start_IT+0x430>
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a21      	ldr	r2, [pc, #132]	@ (800768c <HAL_DMA_Start_IT+0x4b0>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d108      	bne.n	800761e <HAL_DMA_Start_IT+0x442>
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f042 0201 	orr.w	r2, r2, #1
 800761a:	601a      	str	r2, [r3, #0]
 800761c:	e012      	b.n	8007644 <HAL_DMA_Start_IT+0x468>
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f042 0201 	orr.w	r2, r2, #1
 800762c:	601a      	str	r2, [r3, #0]
 800762e:	e009      	b.n	8007644 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007636:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2200      	movs	r2, #0
 800763c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007644:	7dfb      	ldrb	r3, [r7, #23]
}
 8007646:	4618      	mov	r0, r3
 8007648:	3718      	adds	r7, #24
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	40020010 	.word	0x40020010
 8007654:	40020028 	.word	0x40020028
 8007658:	40020040 	.word	0x40020040
 800765c:	40020058 	.word	0x40020058
 8007660:	40020070 	.word	0x40020070
 8007664:	40020088 	.word	0x40020088
 8007668:	400200a0 	.word	0x400200a0
 800766c:	400200b8 	.word	0x400200b8
 8007670:	40020410 	.word	0x40020410
 8007674:	40020428 	.word	0x40020428
 8007678:	40020440 	.word	0x40020440
 800767c:	40020458 	.word	0x40020458
 8007680:	40020470 	.word	0x40020470
 8007684:	40020488 	.word	0x40020488
 8007688:	400204a0 	.word	0x400204a0
 800768c:	400204b8 	.word	0x400204b8
 8007690:	58025408 	.word	0x58025408
 8007694:	5802541c 	.word	0x5802541c
 8007698:	58025430 	.word	0x58025430
 800769c:	58025444 	.word	0x58025444
 80076a0:	58025458 	.word	0x58025458
 80076a4:	5802546c 	.word	0x5802546c
 80076a8:	58025480 	.word	0x58025480
 80076ac:	58025494 	.word	0x58025494

080076b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b086      	sub	sp, #24
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80076b8:	f7ff f87a 	bl	80067b0 <HAL_GetTick>
 80076bc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d101      	bne.n	80076c8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	e2dc      	b.n	8007c82 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	2b02      	cmp	r3, #2
 80076d2:	d008      	beq.n	80076e6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2280      	movs	r2, #128	@ 0x80
 80076d8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e2cd      	b.n	8007c82 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a76      	ldr	r2, [pc, #472]	@ (80078c4 <HAL_DMA_Abort+0x214>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d04a      	beq.n	8007786 <HAL_DMA_Abort+0xd6>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a74      	ldr	r2, [pc, #464]	@ (80078c8 <HAL_DMA_Abort+0x218>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d045      	beq.n	8007786 <HAL_DMA_Abort+0xd6>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a73      	ldr	r2, [pc, #460]	@ (80078cc <HAL_DMA_Abort+0x21c>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d040      	beq.n	8007786 <HAL_DMA_Abort+0xd6>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a71      	ldr	r2, [pc, #452]	@ (80078d0 <HAL_DMA_Abort+0x220>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d03b      	beq.n	8007786 <HAL_DMA_Abort+0xd6>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a70      	ldr	r2, [pc, #448]	@ (80078d4 <HAL_DMA_Abort+0x224>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d036      	beq.n	8007786 <HAL_DMA_Abort+0xd6>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a6e      	ldr	r2, [pc, #440]	@ (80078d8 <HAL_DMA_Abort+0x228>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d031      	beq.n	8007786 <HAL_DMA_Abort+0xd6>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a6d      	ldr	r2, [pc, #436]	@ (80078dc <HAL_DMA_Abort+0x22c>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d02c      	beq.n	8007786 <HAL_DMA_Abort+0xd6>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a6b      	ldr	r2, [pc, #428]	@ (80078e0 <HAL_DMA_Abort+0x230>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d027      	beq.n	8007786 <HAL_DMA_Abort+0xd6>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a6a      	ldr	r2, [pc, #424]	@ (80078e4 <HAL_DMA_Abort+0x234>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d022      	beq.n	8007786 <HAL_DMA_Abort+0xd6>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a68      	ldr	r2, [pc, #416]	@ (80078e8 <HAL_DMA_Abort+0x238>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d01d      	beq.n	8007786 <HAL_DMA_Abort+0xd6>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a67      	ldr	r2, [pc, #412]	@ (80078ec <HAL_DMA_Abort+0x23c>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d018      	beq.n	8007786 <HAL_DMA_Abort+0xd6>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a65      	ldr	r2, [pc, #404]	@ (80078f0 <HAL_DMA_Abort+0x240>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d013      	beq.n	8007786 <HAL_DMA_Abort+0xd6>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a64      	ldr	r2, [pc, #400]	@ (80078f4 <HAL_DMA_Abort+0x244>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d00e      	beq.n	8007786 <HAL_DMA_Abort+0xd6>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a62      	ldr	r2, [pc, #392]	@ (80078f8 <HAL_DMA_Abort+0x248>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d009      	beq.n	8007786 <HAL_DMA_Abort+0xd6>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a61      	ldr	r2, [pc, #388]	@ (80078fc <HAL_DMA_Abort+0x24c>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d004      	beq.n	8007786 <HAL_DMA_Abort+0xd6>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a5f      	ldr	r2, [pc, #380]	@ (8007900 <HAL_DMA_Abort+0x250>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d101      	bne.n	800778a <HAL_DMA_Abort+0xda>
 8007786:	2301      	movs	r3, #1
 8007788:	e000      	b.n	800778c <HAL_DMA_Abort+0xdc>
 800778a:	2300      	movs	r3, #0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d013      	beq.n	80077b8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f022 021e 	bic.w	r2, r2, #30
 800779e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	695a      	ldr	r2, [r3, #20]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80077ae:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	617b      	str	r3, [r7, #20]
 80077b6:	e00a      	b.n	80077ce <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f022 020e 	bic.w	r2, r2, #14
 80077c6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a3c      	ldr	r2, [pc, #240]	@ (80078c4 <HAL_DMA_Abort+0x214>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d072      	beq.n	80078be <HAL_DMA_Abort+0x20e>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a3a      	ldr	r2, [pc, #232]	@ (80078c8 <HAL_DMA_Abort+0x218>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d06d      	beq.n	80078be <HAL_DMA_Abort+0x20e>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a39      	ldr	r2, [pc, #228]	@ (80078cc <HAL_DMA_Abort+0x21c>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d068      	beq.n	80078be <HAL_DMA_Abort+0x20e>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a37      	ldr	r2, [pc, #220]	@ (80078d0 <HAL_DMA_Abort+0x220>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d063      	beq.n	80078be <HAL_DMA_Abort+0x20e>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a36      	ldr	r2, [pc, #216]	@ (80078d4 <HAL_DMA_Abort+0x224>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d05e      	beq.n	80078be <HAL_DMA_Abort+0x20e>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a34      	ldr	r2, [pc, #208]	@ (80078d8 <HAL_DMA_Abort+0x228>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d059      	beq.n	80078be <HAL_DMA_Abort+0x20e>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a33      	ldr	r2, [pc, #204]	@ (80078dc <HAL_DMA_Abort+0x22c>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d054      	beq.n	80078be <HAL_DMA_Abort+0x20e>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a31      	ldr	r2, [pc, #196]	@ (80078e0 <HAL_DMA_Abort+0x230>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d04f      	beq.n	80078be <HAL_DMA_Abort+0x20e>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a30      	ldr	r2, [pc, #192]	@ (80078e4 <HAL_DMA_Abort+0x234>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d04a      	beq.n	80078be <HAL_DMA_Abort+0x20e>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a2e      	ldr	r2, [pc, #184]	@ (80078e8 <HAL_DMA_Abort+0x238>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d045      	beq.n	80078be <HAL_DMA_Abort+0x20e>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a2d      	ldr	r2, [pc, #180]	@ (80078ec <HAL_DMA_Abort+0x23c>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d040      	beq.n	80078be <HAL_DMA_Abort+0x20e>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a2b      	ldr	r2, [pc, #172]	@ (80078f0 <HAL_DMA_Abort+0x240>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d03b      	beq.n	80078be <HAL_DMA_Abort+0x20e>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a2a      	ldr	r2, [pc, #168]	@ (80078f4 <HAL_DMA_Abort+0x244>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d036      	beq.n	80078be <HAL_DMA_Abort+0x20e>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a28      	ldr	r2, [pc, #160]	@ (80078f8 <HAL_DMA_Abort+0x248>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d031      	beq.n	80078be <HAL_DMA_Abort+0x20e>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a27      	ldr	r2, [pc, #156]	@ (80078fc <HAL_DMA_Abort+0x24c>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d02c      	beq.n	80078be <HAL_DMA_Abort+0x20e>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a25      	ldr	r2, [pc, #148]	@ (8007900 <HAL_DMA_Abort+0x250>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d027      	beq.n	80078be <HAL_DMA_Abort+0x20e>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a24      	ldr	r2, [pc, #144]	@ (8007904 <HAL_DMA_Abort+0x254>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d022      	beq.n	80078be <HAL_DMA_Abort+0x20e>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a22      	ldr	r2, [pc, #136]	@ (8007908 <HAL_DMA_Abort+0x258>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d01d      	beq.n	80078be <HAL_DMA_Abort+0x20e>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a21      	ldr	r2, [pc, #132]	@ (800790c <HAL_DMA_Abort+0x25c>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d018      	beq.n	80078be <HAL_DMA_Abort+0x20e>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a1f      	ldr	r2, [pc, #124]	@ (8007910 <HAL_DMA_Abort+0x260>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d013      	beq.n	80078be <HAL_DMA_Abort+0x20e>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a1e      	ldr	r2, [pc, #120]	@ (8007914 <HAL_DMA_Abort+0x264>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d00e      	beq.n	80078be <HAL_DMA_Abort+0x20e>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a1c      	ldr	r2, [pc, #112]	@ (8007918 <HAL_DMA_Abort+0x268>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d009      	beq.n	80078be <HAL_DMA_Abort+0x20e>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a1b      	ldr	r2, [pc, #108]	@ (800791c <HAL_DMA_Abort+0x26c>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d004      	beq.n	80078be <HAL_DMA_Abort+0x20e>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a19      	ldr	r2, [pc, #100]	@ (8007920 <HAL_DMA_Abort+0x270>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d132      	bne.n	8007924 <HAL_DMA_Abort+0x274>
 80078be:	2301      	movs	r3, #1
 80078c0:	e031      	b.n	8007926 <HAL_DMA_Abort+0x276>
 80078c2:	bf00      	nop
 80078c4:	40020010 	.word	0x40020010
 80078c8:	40020028 	.word	0x40020028
 80078cc:	40020040 	.word	0x40020040
 80078d0:	40020058 	.word	0x40020058
 80078d4:	40020070 	.word	0x40020070
 80078d8:	40020088 	.word	0x40020088
 80078dc:	400200a0 	.word	0x400200a0
 80078e0:	400200b8 	.word	0x400200b8
 80078e4:	40020410 	.word	0x40020410
 80078e8:	40020428 	.word	0x40020428
 80078ec:	40020440 	.word	0x40020440
 80078f0:	40020458 	.word	0x40020458
 80078f4:	40020470 	.word	0x40020470
 80078f8:	40020488 	.word	0x40020488
 80078fc:	400204a0 	.word	0x400204a0
 8007900:	400204b8 	.word	0x400204b8
 8007904:	58025408 	.word	0x58025408
 8007908:	5802541c 	.word	0x5802541c
 800790c:	58025430 	.word	0x58025430
 8007910:	58025444 	.word	0x58025444
 8007914:	58025458 	.word	0x58025458
 8007918:	5802546c 	.word	0x5802546c
 800791c:	58025480 	.word	0x58025480
 8007920:	58025494 	.word	0x58025494
 8007924:	2300      	movs	r3, #0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d007      	beq.n	800793a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007934:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007938:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a6d      	ldr	r2, [pc, #436]	@ (8007af4 <HAL_DMA_Abort+0x444>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d04a      	beq.n	80079da <HAL_DMA_Abort+0x32a>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a6b      	ldr	r2, [pc, #428]	@ (8007af8 <HAL_DMA_Abort+0x448>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d045      	beq.n	80079da <HAL_DMA_Abort+0x32a>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a6a      	ldr	r2, [pc, #424]	@ (8007afc <HAL_DMA_Abort+0x44c>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d040      	beq.n	80079da <HAL_DMA_Abort+0x32a>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a68      	ldr	r2, [pc, #416]	@ (8007b00 <HAL_DMA_Abort+0x450>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d03b      	beq.n	80079da <HAL_DMA_Abort+0x32a>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a67      	ldr	r2, [pc, #412]	@ (8007b04 <HAL_DMA_Abort+0x454>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d036      	beq.n	80079da <HAL_DMA_Abort+0x32a>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a65      	ldr	r2, [pc, #404]	@ (8007b08 <HAL_DMA_Abort+0x458>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d031      	beq.n	80079da <HAL_DMA_Abort+0x32a>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a64      	ldr	r2, [pc, #400]	@ (8007b0c <HAL_DMA_Abort+0x45c>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d02c      	beq.n	80079da <HAL_DMA_Abort+0x32a>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a62      	ldr	r2, [pc, #392]	@ (8007b10 <HAL_DMA_Abort+0x460>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d027      	beq.n	80079da <HAL_DMA_Abort+0x32a>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a61      	ldr	r2, [pc, #388]	@ (8007b14 <HAL_DMA_Abort+0x464>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d022      	beq.n	80079da <HAL_DMA_Abort+0x32a>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a5f      	ldr	r2, [pc, #380]	@ (8007b18 <HAL_DMA_Abort+0x468>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d01d      	beq.n	80079da <HAL_DMA_Abort+0x32a>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a5e      	ldr	r2, [pc, #376]	@ (8007b1c <HAL_DMA_Abort+0x46c>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d018      	beq.n	80079da <HAL_DMA_Abort+0x32a>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a5c      	ldr	r2, [pc, #368]	@ (8007b20 <HAL_DMA_Abort+0x470>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d013      	beq.n	80079da <HAL_DMA_Abort+0x32a>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a5b      	ldr	r2, [pc, #364]	@ (8007b24 <HAL_DMA_Abort+0x474>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d00e      	beq.n	80079da <HAL_DMA_Abort+0x32a>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a59      	ldr	r2, [pc, #356]	@ (8007b28 <HAL_DMA_Abort+0x478>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d009      	beq.n	80079da <HAL_DMA_Abort+0x32a>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a58      	ldr	r2, [pc, #352]	@ (8007b2c <HAL_DMA_Abort+0x47c>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d004      	beq.n	80079da <HAL_DMA_Abort+0x32a>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a56      	ldr	r2, [pc, #344]	@ (8007b30 <HAL_DMA_Abort+0x480>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d108      	bne.n	80079ec <HAL_DMA_Abort+0x33c>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f022 0201 	bic.w	r2, r2, #1
 80079e8:	601a      	str	r2, [r3, #0]
 80079ea:	e007      	b.n	80079fc <HAL_DMA_Abort+0x34c>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f022 0201 	bic.w	r2, r2, #1
 80079fa:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80079fc:	e013      	b.n	8007a26 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80079fe:	f7fe fed7 	bl	80067b0 <HAL_GetTick>
 8007a02:	4602      	mov	r2, r0
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	1ad3      	subs	r3, r2, r3
 8007a08:	2b05      	cmp	r3, #5
 8007a0a:	d90c      	bls.n	8007a26 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2220      	movs	r2, #32
 8007a10:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2203      	movs	r2, #3
 8007a16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	e12d      	b.n	8007c82 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f003 0301 	and.w	r3, r3, #1
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d1e5      	bne.n	80079fe <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a2f      	ldr	r2, [pc, #188]	@ (8007af4 <HAL_DMA_Abort+0x444>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d04a      	beq.n	8007ad2 <HAL_DMA_Abort+0x422>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a2d      	ldr	r2, [pc, #180]	@ (8007af8 <HAL_DMA_Abort+0x448>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d045      	beq.n	8007ad2 <HAL_DMA_Abort+0x422>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a2c      	ldr	r2, [pc, #176]	@ (8007afc <HAL_DMA_Abort+0x44c>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d040      	beq.n	8007ad2 <HAL_DMA_Abort+0x422>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a2a      	ldr	r2, [pc, #168]	@ (8007b00 <HAL_DMA_Abort+0x450>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d03b      	beq.n	8007ad2 <HAL_DMA_Abort+0x422>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a29      	ldr	r2, [pc, #164]	@ (8007b04 <HAL_DMA_Abort+0x454>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d036      	beq.n	8007ad2 <HAL_DMA_Abort+0x422>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a27      	ldr	r2, [pc, #156]	@ (8007b08 <HAL_DMA_Abort+0x458>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d031      	beq.n	8007ad2 <HAL_DMA_Abort+0x422>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a26      	ldr	r2, [pc, #152]	@ (8007b0c <HAL_DMA_Abort+0x45c>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d02c      	beq.n	8007ad2 <HAL_DMA_Abort+0x422>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a24      	ldr	r2, [pc, #144]	@ (8007b10 <HAL_DMA_Abort+0x460>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d027      	beq.n	8007ad2 <HAL_DMA_Abort+0x422>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a23      	ldr	r2, [pc, #140]	@ (8007b14 <HAL_DMA_Abort+0x464>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d022      	beq.n	8007ad2 <HAL_DMA_Abort+0x422>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a21      	ldr	r2, [pc, #132]	@ (8007b18 <HAL_DMA_Abort+0x468>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d01d      	beq.n	8007ad2 <HAL_DMA_Abort+0x422>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a20      	ldr	r2, [pc, #128]	@ (8007b1c <HAL_DMA_Abort+0x46c>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d018      	beq.n	8007ad2 <HAL_DMA_Abort+0x422>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a1e      	ldr	r2, [pc, #120]	@ (8007b20 <HAL_DMA_Abort+0x470>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d013      	beq.n	8007ad2 <HAL_DMA_Abort+0x422>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a1d      	ldr	r2, [pc, #116]	@ (8007b24 <HAL_DMA_Abort+0x474>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d00e      	beq.n	8007ad2 <HAL_DMA_Abort+0x422>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a1b      	ldr	r2, [pc, #108]	@ (8007b28 <HAL_DMA_Abort+0x478>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d009      	beq.n	8007ad2 <HAL_DMA_Abort+0x422>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a1a      	ldr	r2, [pc, #104]	@ (8007b2c <HAL_DMA_Abort+0x47c>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d004      	beq.n	8007ad2 <HAL_DMA_Abort+0x422>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a18      	ldr	r2, [pc, #96]	@ (8007b30 <HAL_DMA_Abort+0x480>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d101      	bne.n	8007ad6 <HAL_DMA_Abort+0x426>
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e000      	b.n	8007ad8 <HAL_DMA_Abort+0x428>
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d02b      	beq.n	8007b34 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ae0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ae6:	f003 031f 	and.w	r3, r3, #31
 8007aea:	223f      	movs	r2, #63	@ 0x3f
 8007aec:	409a      	lsls	r2, r3
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	609a      	str	r2, [r3, #8]
 8007af2:	e02a      	b.n	8007b4a <HAL_DMA_Abort+0x49a>
 8007af4:	40020010 	.word	0x40020010
 8007af8:	40020028 	.word	0x40020028
 8007afc:	40020040 	.word	0x40020040
 8007b00:	40020058 	.word	0x40020058
 8007b04:	40020070 	.word	0x40020070
 8007b08:	40020088 	.word	0x40020088
 8007b0c:	400200a0 	.word	0x400200a0
 8007b10:	400200b8 	.word	0x400200b8
 8007b14:	40020410 	.word	0x40020410
 8007b18:	40020428 	.word	0x40020428
 8007b1c:	40020440 	.word	0x40020440
 8007b20:	40020458 	.word	0x40020458
 8007b24:	40020470 	.word	0x40020470
 8007b28:	40020488 	.word	0x40020488
 8007b2c:	400204a0 	.word	0x400204a0
 8007b30:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b38:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b3e:	f003 031f 	and.w	r3, r3, #31
 8007b42:	2201      	movs	r2, #1
 8007b44:	409a      	lsls	r2, r3
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a4f      	ldr	r2, [pc, #316]	@ (8007c8c <HAL_DMA_Abort+0x5dc>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d072      	beq.n	8007c3a <HAL_DMA_Abort+0x58a>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a4d      	ldr	r2, [pc, #308]	@ (8007c90 <HAL_DMA_Abort+0x5e0>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d06d      	beq.n	8007c3a <HAL_DMA_Abort+0x58a>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a4c      	ldr	r2, [pc, #304]	@ (8007c94 <HAL_DMA_Abort+0x5e4>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d068      	beq.n	8007c3a <HAL_DMA_Abort+0x58a>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a4a      	ldr	r2, [pc, #296]	@ (8007c98 <HAL_DMA_Abort+0x5e8>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d063      	beq.n	8007c3a <HAL_DMA_Abort+0x58a>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a49      	ldr	r2, [pc, #292]	@ (8007c9c <HAL_DMA_Abort+0x5ec>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d05e      	beq.n	8007c3a <HAL_DMA_Abort+0x58a>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a47      	ldr	r2, [pc, #284]	@ (8007ca0 <HAL_DMA_Abort+0x5f0>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d059      	beq.n	8007c3a <HAL_DMA_Abort+0x58a>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a46      	ldr	r2, [pc, #280]	@ (8007ca4 <HAL_DMA_Abort+0x5f4>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d054      	beq.n	8007c3a <HAL_DMA_Abort+0x58a>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a44      	ldr	r2, [pc, #272]	@ (8007ca8 <HAL_DMA_Abort+0x5f8>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d04f      	beq.n	8007c3a <HAL_DMA_Abort+0x58a>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a43      	ldr	r2, [pc, #268]	@ (8007cac <HAL_DMA_Abort+0x5fc>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d04a      	beq.n	8007c3a <HAL_DMA_Abort+0x58a>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a41      	ldr	r2, [pc, #260]	@ (8007cb0 <HAL_DMA_Abort+0x600>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d045      	beq.n	8007c3a <HAL_DMA_Abort+0x58a>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a40      	ldr	r2, [pc, #256]	@ (8007cb4 <HAL_DMA_Abort+0x604>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d040      	beq.n	8007c3a <HAL_DMA_Abort+0x58a>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a3e      	ldr	r2, [pc, #248]	@ (8007cb8 <HAL_DMA_Abort+0x608>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d03b      	beq.n	8007c3a <HAL_DMA_Abort+0x58a>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a3d      	ldr	r2, [pc, #244]	@ (8007cbc <HAL_DMA_Abort+0x60c>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d036      	beq.n	8007c3a <HAL_DMA_Abort+0x58a>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a3b      	ldr	r2, [pc, #236]	@ (8007cc0 <HAL_DMA_Abort+0x610>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d031      	beq.n	8007c3a <HAL_DMA_Abort+0x58a>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a3a      	ldr	r2, [pc, #232]	@ (8007cc4 <HAL_DMA_Abort+0x614>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d02c      	beq.n	8007c3a <HAL_DMA_Abort+0x58a>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a38      	ldr	r2, [pc, #224]	@ (8007cc8 <HAL_DMA_Abort+0x618>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d027      	beq.n	8007c3a <HAL_DMA_Abort+0x58a>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a37      	ldr	r2, [pc, #220]	@ (8007ccc <HAL_DMA_Abort+0x61c>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d022      	beq.n	8007c3a <HAL_DMA_Abort+0x58a>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a35      	ldr	r2, [pc, #212]	@ (8007cd0 <HAL_DMA_Abort+0x620>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d01d      	beq.n	8007c3a <HAL_DMA_Abort+0x58a>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a34      	ldr	r2, [pc, #208]	@ (8007cd4 <HAL_DMA_Abort+0x624>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d018      	beq.n	8007c3a <HAL_DMA_Abort+0x58a>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a32      	ldr	r2, [pc, #200]	@ (8007cd8 <HAL_DMA_Abort+0x628>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d013      	beq.n	8007c3a <HAL_DMA_Abort+0x58a>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a31      	ldr	r2, [pc, #196]	@ (8007cdc <HAL_DMA_Abort+0x62c>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d00e      	beq.n	8007c3a <HAL_DMA_Abort+0x58a>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a2f      	ldr	r2, [pc, #188]	@ (8007ce0 <HAL_DMA_Abort+0x630>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d009      	beq.n	8007c3a <HAL_DMA_Abort+0x58a>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a2e      	ldr	r2, [pc, #184]	@ (8007ce4 <HAL_DMA_Abort+0x634>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d004      	beq.n	8007c3a <HAL_DMA_Abort+0x58a>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a2c      	ldr	r2, [pc, #176]	@ (8007ce8 <HAL_DMA_Abort+0x638>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d101      	bne.n	8007c3e <HAL_DMA_Abort+0x58e>
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e000      	b.n	8007c40 <HAL_DMA_Abort+0x590>
 8007c3e:	2300      	movs	r3, #0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d015      	beq.n	8007c70 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007c4c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00c      	beq.n	8007c70 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007c64:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007c6e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3718      	adds	r7, #24
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	40020010 	.word	0x40020010
 8007c90:	40020028 	.word	0x40020028
 8007c94:	40020040 	.word	0x40020040
 8007c98:	40020058 	.word	0x40020058
 8007c9c:	40020070 	.word	0x40020070
 8007ca0:	40020088 	.word	0x40020088
 8007ca4:	400200a0 	.word	0x400200a0
 8007ca8:	400200b8 	.word	0x400200b8
 8007cac:	40020410 	.word	0x40020410
 8007cb0:	40020428 	.word	0x40020428
 8007cb4:	40020440 	.word	0x40020440
 8007cb8:	40020458 	.word	0x40020458
 8007cbc:	40020470 	.word	0x40020470
 8007cc0:	40020488 	.word	0x40020488
 8007cc4:	400204a0 	.word	0x400204a0
 8007cc8:	400204b8 	.word	0x400204b8
 8007ccc:	58025408 	.word	0x58025408
 8007cd0:	5802541c 	.word	0x5802541c
 8007cd4:	58025430 	.word	0x58025430
 8007cd8:	58025444 	.word	0x58025444
 8007cdc:	58025458 	.word	0x58025458
 8007ce0:	5802546c 	.word	0x5802546c
 8007ce4:	58025480 	.word	0x58025480
 8007ce8:	58025494 	.word	0x58025494

08007cec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d101      	bne.n	8007cfe <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e237      	b.n	800816e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	2b02      	cmp	r3, #2
 8007d08:	d004      	beq.n	8007d14 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2280      	movs	r2, #128	@ 0x80
 8007d0e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	e22c      	b.n	800816e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a5c      	ldr	r2, [pc, #368]	@ (8007e8c <HAL_DMA_Abort_IT+0x1a0>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d04a      	beq.n	8007db4 <HAL_DMA_Abort_IT+0xc8>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a5b      	ldr	r2, [pc, #364]	@ (8007e90 <HAL_DMA_Abort_IT+0x1a4>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d045      	beq.n	8007db4 <HAL_DMA_Abort_IT+0xc8>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a59      	ldr	r2, [pc, #356]	@ (8007e94 <HAL_DMA_Abort_IT+0x1a8>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d040      	beq.n	8007db4 <HAL_DMA_Abort_IT+0xc8>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a58      	ldr	r2, [pc, #352]	@ (8007e98 <HAL_DMA_Abort_IT+0x1ac>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d03b      	beq.n	8007db4 <HAL_DMA_Abort_IT+0xc8>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a56      	ldr	r2, [pc, #344]	@ (8007e9c <HAL_DMA_Abort_IT+0x1b0>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d036      	beq.n	8007db4 <HAL_DMA_Abort_IT+0xc8>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a55      	ldr	r2, [pc, #340]	@ (8007ea0 <HAL_DMA_Abort_IT+0x1b4>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d031      	beq.n	8007db4 <HAL_DMA_Abort_IT+0xc8>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a53      	ldr	r2, [pc, #332]	@ (8007ea4 <HAL_DMA_Abort_IT+0x1b8>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d02c      	beq.n	8007db4 <HAL_DMA_Abort_IT+0xc8>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a52      	ldr	r2, [pc, #328]	@ (8007ea8 <HAL_DMA_Abort_IT+0x1bc>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d027      	beq.n	8007db4 <HAL_DMA_Abort_IT+0xc8>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a50      	ldr	r2, [pc, #320]	@ (8007eac <HAL_DMA_Abort_IT+0x1c0>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d022      	beq.n	8007db4 <HAL_DMA_Abort_IT+0xc8>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a4f      	ldr	r2, [pc, #316]	@ (8007eb0 <HAL_DMA_Abort_IT+0x1c4>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d01d      	beq.n	8007db4 <HAL_DMA_Abort_IT+0xc8>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a4d      	ldr	r2, [pc, #308]	@ (8007eb4 <HAL_DMA_Abort_IT+0x1c8>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d018      	beq.n	8007db4 <HAL_DMA_Abort_IT+0xc8>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a4c      	ldr	r2, [pc, #304]	@ (8007eb8 <HAL_DMA_Abort_IT+0x1cc>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d013      	beq.n	8007db4 <HAL_DMA_Abort_IT+0xc8>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a4a      	ldr	r2, [pc, #296]	@ (8007ebc <HAL_DMA_Abort_IT+0x1d0>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d00e      	beq.n	8007db4 <HAL_DMA_Abort_IT+0xc8>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a49      	ldr	r2, [pc, #292]	@ (8007ec0 <HAL_DMA_Abort_IT+0x1d4>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d009      	beq.n	8007db4 <HAL_DMA_Abort_IT+0xc8>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a47      	ldr	r2, [pc, #284]	@ (8007ec4 <HAL_DMA_Abort_IT+0x1d8>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d004      	beq.n	8007db4 <HAL_DMA_Abort_IT+0xc8>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a46      	ldr	r2, [pc, #280]	@ (8007ec8 <HAL_DMA_Abort_IT+0x1dc>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d101      	bne.n	8007db8 <HAL_DMA_Abort_IT+0xcc>
 8007db4:	2301      	movs	r3, #1
 8007db6:	e000      	b.n	8007dba <HAL_DMA_Abort_IT+0xce>
 8007db8:	2300      	movs	r3, #0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	f000 8086 	beq.w	8007ecc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2204      	movs	r2, #4
 8007dc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a2f      	ldr	r2, [pc, #188]	@ (8007e8c <HAL_DMA_Abort_IT+0x1a0>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d04a      	beq.n	8007e68 <HAL_DMA_Abort_IT+0x17c>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a2e      	ldr	r2, [pc, #184]	@ (8007e90 <HAL_DMA_Abort_IT+0x1a4>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d045      	beq.n	8007e68 <HAL_DMA_Abort_IT+0x17c>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a2c      	ldr	r2, [pc, #176]	@ (8007e94 <HAL_DMA_Abort_IT+0x1a8>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d040      	beq.n	8007e68 <HAL_DMA_Abort_IT+0x17c>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a2b      	ldr	r2, [pc, #172]	@ (8007e98 <HAL_DMA_Abort_IT+0x1ac>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d03b      	beq.n	8007e68 <HAL_DMA_Abort_IT+0x17c>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a29      	ldr	r2, [pc, #164]	@ (8007e9c <HAL_DMA_Abort_IT+0x1b0>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d036      	beq.n	8007e68 <HAL_DMA_Abort_IT+0x17c>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a28      	ldr	r2, [pc, #160]	@ (8007ea0 <HAL_DMA_Abort_IT+0x1b4>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d031      	beq.n	8007e68 <HAL_DMA_Abort_IT+0x17c>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a26      	ldr	r2, [pc, #152]	@ (8007ea4 <HAL_DMA_Abort_IT+0x1b8>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d02c      	beq.n	8007e68 <HAL_DMA_Abort_IT+0x17c>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a25      	ldr	r2, [pc, #148]	@ (8007ea8 <HAL_DMA_Abort_IT+0x1bc>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d027      	beq.n	8007e68 <HAL_DMA_Abort_IT+0x17c>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a23      	ldr	r2, [pc, #140]	@ (8007eac <HAL_DMA_Abort_IT+0x1c0>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d022      	beq.n	8007e68 <HAL_DMA_Abort_IT+0x17c>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a22      	ldr	r2, [pc, #136]	@ (8007eb0 <HAL_DMA_Abort_IT+0x1c4>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d01d      	beq.n	8007e68 <HAL_DMA_Abort_IT+0x17c>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a20      	ldr	r2, [pc, #128]	@ (8007eb4 <HAL_DMA_Abort_IT+0x1c8>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d018      	beq.n	8007e68 <HAL_DMA_Abort_IT+0x17c>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a1f      	ldr	r2, [pc, #124]	@ (8007eb8 <HAL_DMA_Abort_IT+0x1cc>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d013      	beq.n	8007e68 <HAL_DMA_Abort_IT+0x17c>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a1d      	ldr	r2, [pc, #116]	@ (8007ebc <HAL_DMA_Abort_IT+0x1d0>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d00e      	beq.n	8007e68 <HAL_DMA_Abort_IT+0x17c>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a1c      	ldr	r2, [pc, #112]	@ (8007ec0 <HAL_DMA_Abort_IT+0x1d4>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d009      	beq.n	8007e68 <HAL_DMA_Abort_IT+0x17c>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a1a      	ldr	r2, [pc, #104]	@ (8007ec4 <HAL_DMA_Abort_IT+0x1d8>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d004      	beq.n	8007e68 <HAL_DMA_Abort_IT+0x17c>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a19      	ldr	r2, [pc, #100]	@ (8007ec8 <HAL_DMA_Abort_IT+0x1dc>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d108      	bne.n	8007e7a <HAL_DMA_Abort_IT+0x18e>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f022 0201 	bic.w	r2, r2, #1
 8007e76:	601a      	str	r2, [r3, #0]
 8007e78:	e178      	b.n	800816c <HAL_DMA_Abort_IT+0x480>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f022 0201 	bic.w	r2, r2, #1
 8007e88:	601a      	str	r2, [r3, #0]
 8007e8a:	e16f      	b.n	800816c <HAL_DMA_Abort_IT+0x480>
 8007e8c:	40020010 	.word	0x40020010
 8007e90:	40020028 	.word	0x40020028
 8007e94:	40020040 	.word	0x40020040
 8007e98:	40020058 	.word	0x40020058
 8007e9c:	40020070 	.word	0x40020070
 8007ea0:	40020088 	.word	0x40020088
 8007ea4:	400200a0 	.word	0x400200a0
 8007ea8:	400200b8 	.word	0x400200b8
 8007eac:	40020410 	.word	0x40020410
 8007eb0:	40020428 	.word	0x40020428
 8007eb4:	40020440 	.word	0x40020440
 8007eb8:	40020458 	.word	0x40020458
 8007ebc:	40020470 	.word	0x40020470
 8007ec0:	40020488 	.word	0x40020488
 8007ec4:	400204a0 	.word	0x400204a0
 8007ec8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f022 020e 	bic.w	r2, r2, #14
 8007eda:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a6c      	ldr	r2, [pc, #432]	@ (8008094 <HAL_DMA_Abort_IT+0x3a8>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d04a      	beq.n	8007f7c <HAL_DMA_Abort_IT+0x290>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a6b      	ldr	r2, [pc, #428]	@ (8008098 <HAL_DMA_Abort_IT+0x3ac>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d045      	beq.n	8007f7c <HAL_DMA_Abort_IT+0x290>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a69      	ldr	r2, [pc, #420]	@ (800809c <HAL_DMA_Abort_IT+0x3b0>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d040      	beq.n	8007f7c <HAL_DMA_Abort_IT+0x290>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a68      	ldr	r2, [pc, #416]	@ (80080a0 <HAL_DMA_Abort_IT+0x3b4>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d03b      	beq.n	8007f7c <HAL_DMA_Abort_IT+0x290>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a66      	ldr	r2, [pc, #408]	@ (80080a4 <HAL_DMA_Abort_IT+0x3b8>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d036      	beq.n	8007f7c <HAL_DMA_Abort_IT+0x290>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a65      	ldr	r2, [pc, #404]	@ (80080a8 <HAL_DMA_Abort_IT+0x3bc>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d031      	beq.n	8007f7c <HAL_DMA_Abort_IT+0x290>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a63      	ldr	r2, [pc, #396]	@ (80080ac <HAL_DMA_Abort_IT+0x3c0>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d02c      	beq.n	8007f7c <HAL_DMA_Abort_IT+0x290>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a62      	ldr	r2, [pc, #392]	@ (80080b0 <HAL_DMA_Abort_IT+0x3c4>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d027      	beq.n	8007f7c <HAL_DMA_Abort_IT+0x290>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a60      	ldr	r2, [pc, #384]	@ (80080b4 <HAL_DMA_Abort_IT+0x3c8>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d022      	beq.n	8007f7c <HAL_DMA_Abort_IT+0x290>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a5f      	ldr	r2, [pc, #380]	@ (80080b8 <HAL_DMA_Abort_IT+0x3cc>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d01d      	beq.n	8007f7c <HAL_DMA_Abort_IT+0x290>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a5d      	ldr	r2, [pc, #372]	@ (80080bc <HAL_DMA_Abort_IT+0x3d0>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d018      	beq.n	8007f7c <HAL_DMA_Abort_IT+0x290>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a5c      	ldr	r2, [pc, #368]	@ (80080c0 <HAL_DMA_Abort_IT+0x3d4>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d013      	beq.n	8007f7c <HAL_DMA_Abort_IT+0x290>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a5a      	ldr	r2, [pc, #360]	@ (80080c4 <HAL_DMA_Abort_IT+0x3d8>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d00e      	beq.n	8007f7c <HAL_DMA_Abort_IT+0x290>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a59      	ldr	r2, [pc, #356]	@ (80080c8 <HAL_DMA_Abort_IT+0x3dc>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d009      	beq.n	8007f7c <HAL_DMA_Abort_IT+0x290>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a57      	ldr	r2, [pc, #348]	@ (80080cc <HAL_DMA_Abort_IT+0x3e0>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d004      	beq.n	8007f7c <HAL_DMA_Abort_IT+0x290>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a56      	ldr	r2, [pc, #344]	@ (80080d0 <HAL_DMA_Abort_IT+0x3e4>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d108      	bne.n	8007f8e <HAL_DMA_Abort_IT+0x2a2>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	681a      	ldr	r2, [r3, #0]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f022 0201 	bic.w	r2, r2, #1
 8007f8a:	601a      	str	r2, [r3, #0]
 8007f8c:	e007      	b.n	8007f9e <HAL_DMA_Abort_IT+0x2b2>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f022 0201 	bic.w	r2, r2, #1
 8007f9c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a3c      	ldr	r2, [pc, #240]	@ (8008094 <HAL_DMA_Abort_IT+0x3a8>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d072      	beq.n	800808e <HAL_DMA_Abort_IT+0x3a2>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a3a      	ldr	r2, [pc, #232]	@ (8008098 <HAL_DMA_Abort_IT+0x3ac>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d06d      	beq.n	800808e <HAL_DMA_Abort_IT+0x3a2>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a39      	ldr	r2, [pc, #228]	@ (800809c <HAL_DMA_Abort_IT+0x3b0>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d068      	beq.n	800808e <HAL_DMA_Abort_IT+0x3a2>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a37      	ldr	r2, [pc, #220]	@ (80080a0 <HAL_DMA_Abort_IT+0x3b4>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d063      	beq.n	800808e <HAL_DMA_Abort_IT+0x3a2>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a36      	ldr	r2, [pc, #216]	@ (80080a4 <HAL_DMA_Abort_IT+0x3b8>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d05e      	beq.n	800808e <HAL_DMA_Abort_IT+0x3a2>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a34      	ldr	r2, [pc, #208]	@ (80080a8 <HAL_DMA_Abort_IT+0x3bc>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d059      	beq.n	800808e <HAL_DMA_Abort_IT+0x3a2>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a33      	ldr	r2, [pc, #204]	@ (80080ac <HAL_DMA_Abort_IT+0x3c0>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d054      	beq.n	800808e <HAL_DMA_Abort_IT+0x3a2>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a31      	ldr	r2, [pc, #196]	@ (80080b0 <HAL_DMA_Abort_IT+0x3c4>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d04f      	beq.n	800808e <HAL_DMA_Abort_IT+0x3a2>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a30      	ldr	r2, [pc, #192]	@ (80080b4 <HAL_DMA_Abort_IT+0x3c8>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d04a      	beq.n	800808e <HAL_DMA_Abort_IT+0x3a2>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a2e      	ldr	r2, [pc, #184]	@ (80080b8 <HAL_DMA_Abort_IT+0x3cc>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d045      	beq.n	800808e <HAL_DMA_Abort_IT+0x3a2>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a2d      	ldr	r2, [pc, #180]	@ (80080bc <HAL_DMA_Abort_IT+0x3d0>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d040      	beq.n	800808e <HAL_DMA_Abort_IT+0x3a2>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a2b      	ldr	r2, [pc, #172]	@ (80080c0 <HAL_DMA_Abort_IT+0x3d4>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d03b      	beq.n	800808e <HAL_DMA_Abort_IT+0x3a2>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a2a      	ldr	r2, [pc, #168]	@ (80080c4 <HAL_DMA_Abort_IT+0x3d8>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d036      	beq.n	800808e <HAL_DMA_Abort_IT+0x3a2>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a28      	ldr	r2, [pc, #160]	@ (80080c8 <HAL_DMA_Abort_IT+0x3dc>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d031      	beq.n	800808e <HAL_DMA_Abort_IT+0x3a2>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a27      	ldr	r2, [pc, #156]	@ (80080cc <HAL_DMA_Abort_IT+0x3e0>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d02c      	beq.n	800808e <HAL_DMA_Abort_IT+0x3a2>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a25      	ldr	r2, [pc, #148]	@ (80080d0 <HAL_DMA_Abort_IT+0x3e4>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d027      	beq.n	800808e <HAL_DMA_Abort_IT+0x3a2>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a24      	ldr	r2, [pc, #144]	@ (80080d4 <HAL_DMA_Abort_IT+0x3e8>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d022      	beq.n	800808e <HAL_DMA_Abort_IT+0x3a2>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a22      	ldr	r2, [pc, #136]	@ (80080d8 <HAL_DMA_Abort_IT+0x3ec>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d01d      	beq.n	800808e <HAL_DMA_Abort_IT+0x3a2>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a21      	ldr	r2, [pc, #132]	@ (80080dc <HAL_DMA_Abort_IT+0x3f0>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d018      	beq.n	800808e <HAL_DMA_Abort_IT+0x3a2>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a1f      	ldr	r2, [pc, #124]	@ (80080e0 <HAL_DMA_Abort_IT+0x3f4>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d013      	beq.n	800808e <HAL_DMA_Abort_IT+0x3a2>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a1e      	ldr	r2, [pc, #120]	@ (80080e4 <HAL_DMA_Abort_IT+0x3f8>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d00e      	beq.n	800808e <HAL_DMA_Abort_IT+0x3a2>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a1c      	ldr	r2, [pc, #112]	@ (80080e8 <HAL_DMA_Abort_IT+0x3fc>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d009      	beq.n	800808e <HAL_DMA_Abort_IT+0x3a2>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a1b      	ldr	r2, [pc, #108]	@ (80080ec <HAL_DMA_Abort_IT+0x400>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d004      	beq.n	800808e <HAL_DMA_Abort_IT+0x3a2>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a19      	ldr	r2, [pc, #100]	@ (80080f0 <HAL_DMA_Abort_IT+0x404>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d132      	bne.n	80080f4 <HAL_DMA_Abort_IT+0x408>
 800808e:	2301      	movs	r3, #1
 8008090:	e031      	b.n	80080f6 <HAL_DMA_Abort_IT+0x40a>
 8008092:	bf00      	nop
 8008094:	40020010 	.word	0x40020010
 8008098:	40020028 	.word	0x40020028
 800809c:	40020040 	.word	0x40020040
 80080a0:	40020058 	.word	0x40020058
 80080a4:	40020070 	.word	0x40020070
 80080a8:	40020088 	.word	0x40020088
 80080ac:	400200a0 	.word	0x400200a0
 80080b0:	400200b8 	.word	0x400200b8
 80080b4:	40020410 	.word	0x40020410
 80080b8:	40020428 	.word	0x40020428
 80080bc:	40020440 	.word	0x40020440
 80080c0:	40020458 	.word	0x40020458
 80080c4:	40020470 	.word	0x40020470
 80080c8:	40020488 	.word	0x40020488
 80080cc:	400204a0 	.word	0x400204a0
 80080d0:	400204b8 	.word	0x400204b8
 80080d4:	58025408 	.word	0x58025408
 80080d8:	5802541c 	.word	0x5802541c
 80080dc:	58025430 	.word	0x58025430
 80080e0:	58025444 	.word	0x58025444
 80080e4:	58025458 	.word	0x58025458
 80080e8:	5802546c 	.word	0x5802546c
 80080ec:	58025480 	.word	0x58025480
 80080f0:	58025494 	.word	0x58025494
 80080f4:	2300      	movs	r3, #0
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d028      	beq.n	800814c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008104:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008108:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800810e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008114:	f003 031f 	and.w	r3, r3, #31
 8008118:	2201      	movs	r2, #1
 800811a:	409a      	lsls	r2, r3
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8008128:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800812e:	2b00      	cmp	r3, #0
 8008130:	d00c      	beq.n	800814c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800813c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008140:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800814a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008160:	2b00      	cmp	r3, #0
 8008162:	d003      	beq.n	800816c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800816c:	2300      	movs	r3, #0
}
 800816e:	4618      	mov	r0, r3
 8008170:	3710      	adds	r7, #16
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
 8008176:	bf00      	nop

08008178 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b08a      	sub	sp, #40	@ 0x28
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008180:	2300      	movs	r3, #0
 8008182:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008184:	4b67      	ldr	r3, [pc, #412]	@ (8008324 <HAL_DMA_IRQHandler+0x1ac>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a67      	ldr	r2, [pc, #412]	@ (8008328 <HAL_DMA_IRQHandler+0x1b0>)
 800818a:	fba2 2303 	umull	r2, r3, r2, r3
 800818e:	0a9b      	lsrs	r3, r3, #10
 8008190:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008196:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800819c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800819e:	6a3b      	ldr	r3, [r7, #32]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80081a4:	69fb      	ldr	r3, [r7, #28]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a5f      	ldr	r2, [pc, #380]	@ (800832c <HAL_DMA_IRQHandler+0x1b4>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d04a      	beq.n	800824a <HAL_DMA_IRQHandler+0xd2>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a5d      	ldr	r2, [pc, #372]	@ (8008330 <HAL_DMA_IRQHandler+0x1b8>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d045      	beq.n	800824a <HAL_DMA_IRQHandler+0xd2>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a5c      	ldr	r2, [pc, #368]	@ (8008334 <HAL_DMA_IRQHandler+0x1bc>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d040      	beq.n	800824a <HAL_DMA_IRQHandler+0xd2>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a5a      	ldr	r2, [pc, #360]	@ (8008338 <HAL_DMA_IRQHandler+0x1c0>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d03b      	beq.n	800824a <HAL_DMA_IRQHandler+0xd2>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a59      	ldr	r2, [pc, #356]	@ (800833c <HAL_DMA_IRQHandler+0x1c4>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d036      	beq.n	800824a <HAL_DMA_IRQHandler+0xd2>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a57      	ldr	r2, [pc, #348]	@ (8008340 <HAL_DMA_IRQHandler+0x1c8>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d031      	beq.n	800824a <HAL_DMA_IRQHandler+0xd2>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a56      	ldr	r2, [pc, #344]	@ (8008344 <HAL_DMA_IRQHandler+0x1cc>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d02c      	beq.n	800824a <HAL_DMA_IRQHandler+0xd2>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a54      	ldr	r2, [pc, #336]	@ (8008348 <HAL_DMA_IRQHandler+0x1d0>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d027      	beq.n	800824a <HAL_DMA_IRQHandler+0xd2>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a53      	ldr	r2, [pc, #332]	@ (800834c <HAL_DMA_IRQHandler+0x1d4>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d022      	beq.n	800824a <HAL_DMA_IRQHandler+0xd2>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a51      	ldr	r2, [pc, #324]	@ (8008350 <HAL_DMA_IRQHandler+0x1d8>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d01d      	beq.n	800824a <HAL_DMA_IRQHandler+0xd2>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a50      	ldr	r2, [pc, #320]	@ (8008354 <HAL_DMA_IRQHandler+0x1dc>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d018      	beq.n	800824a <HAL_DMA_IRQHandler+0xd2>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a4e      	ldr	r2, [pc, #312]	@ (8008358 <HAL_DMA_IRQHandler+0x1e0>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d013      	beq.n	800824a <HAL_DMA_IRQHandler+0xd2>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a4d      	ldr	r2, [pc, #308]	@ (800835c <HAL_DMA_IRQHandler+0x1e4>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d00e      	beq.n	800824a <HAL_DMA_IRQHandler+0xd2>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a4b      	ldr	r2, [pc, #300]	@ (8008360 <HAL_DMA_IRQHandler+0x1e8>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d009      	beq.n	800824a <HAL_DMA_IRQHandler+0xd2>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a4a      	ldr	r2, [pc, #296]	@ (8008364 <HAL_DMA_IRQHandler+0x1ec>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d004      	beq.n	800824a <HAL_DMA_IRQHandler+0xd2>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a48      	ldr	r2, [pc, #288]	@ (8008368 <HAL_DMA_IRQHandler+0x1f0>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d101      	bne.n	800824e <HAL_DMA_IRQHandler+0xd6>
 800824a:	2301      	movs	r3, #1
 800824c:	e000      	b.n	8008250 <HAL_DMA_IRQHandler+0xd8>
 800824e:	2300      	movs	r3, #0
 8008250:	2b00      	cmp	r3, #0
 8008252:	f000 842b 	beq.w	8008aac <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800825a:	f003 031f 	and.w	r3, r3, #31
 800825e:	2208      	movs	r2, #8
 8008260:	409a      	lsls	r2, r3
 8008262:	69bb      	ldr	r3, [r7, #24]
 8008264:	4013      	ands	r3, r2
 8008266:	2b00      	cmp	r3, #0
 8008268:	f000 80a2 	beq.w	80083b0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a2e      	ldr	r2, [pc, #184]	@ (800832c <HAL_DMA_IRQHandler+0x1b4>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d04a      	beq.n	800830c <HAL_DMA_IRQHandler+0x194>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a2d      	ldr	r2, [pc, #180]	@ (8008330 <HAL_DMA_IRQHandler+0x1b8>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d045      	beq.n	800830c <HAL_DMA_IRQHandler+0x194>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a2b      	ldr	r2, [pc, #172]	@ (8008334 <HAL_DMA_IRQHandler+0x1bc>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d040      	beq.n	800830c <HAL_DMA_IRQHandler+0x194>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a2a      	ldr	r2, [pc, #168]	@ (8008338 <HAL_DMA_IRQHandler+0x1c0>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d03b      	beq.n	800830c <HAL_DMA_IRQHandler+0x194>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a28      	ldr	r2, [pc, #160]	@ (800833c <HAL_DMA_IRQHandler+0x1c4>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d036      	beq.n	800830c <HAL_DMA_IRQHandler+0x194>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a27      	ldr	r2, [pc, #156]	@ (8008340 <HAL_DMA_IRQHandler+0x1c8>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d031      	beq.n	800830c <HAL_DMA_IRQHandler+0x194>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a25      	ldr	r2, [pc, #148]	@ (8008344 <HAL_DMA_IRQHandler+0x1cc>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d02c      	beq.n	800830c <HAL_DMA_IRQHandler+0x194>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a24      	ldr	r2, [pc, #144]	@ (8008348 <HAL_DMA_IRQHandler+0x1d0>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d027      	beq.n	800830c <HAL_DMA_IRQHandler+0x194>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a22      	ldr	r2, [pc, #136]	@ (800834c <HAL_DMA_IRQHandler+0x1d4>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d022      	beq.n	800830c <HAL_DMA_IRQHandler+0x194>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a21      	ldr	r2, [pc, #132]	@ (8008350 <HAL_DMA_IRQHandler+0x1d8>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d01d      	beq.n	800830c <HAL_DMA_IRQHandler+0x194>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a1f      	ldr	r2, [pc, #124]	@ (8008354 <HAL_DMA_IRQHandler+0x1dc>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d018      	beq.n	800830c <HAL_DMA_IRQHandler+0x194>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a1e      	ldr	r2, [pc, #120]	@ (8008358 <HAL_DMA_IRQHandler+0x1e0>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d013      	beq.n	800830c <HAL_DMA_IRQHandler+0x194>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a1c      	ldr	r2, [pc, #112]	@ (800835c <HAL_DMA_IRQHandler+0x1e4>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d00e      	beq.n	800830c <HAL_DMA_IRQHandler+0x194>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a1b      	ldr	r2, [pc, #108]	@ (8008360 <HAL_DMA_IRQHandler+0x1e8>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d009      	beq.n	800830c <HAL_DMA_IRQHandler+0x194>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a19      	ldr	r2, [pc, #100]	@ (8008364 <HAL_DMA_IRQHandler+0x1ec>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d004      	beq.n	800830c <HAL_DMA_IRQHandler+0x194>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a18      	ldr	r2, [pc, #96]	@ (8008368 <HAL_DMA_IRQHandler+0x1f0>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d12f      	bne.n	800836c <HAL_DMA_IRQHandler+0x1f4>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f003 0304 	and.w	r3, r3, #4
 8008316:	2b00      	cmp	r3, #0
 8008318:	bf14      	ite	ne
 800831a:	2301      	movne	r3, #1
 800831c:	2300      	moveq	r3, #0
 800831e:	b2db      	uxtb	r3, r3
 8008320:	e02e      	b.n	8008380 <HAL_DMA_IRQHandler+0x208>
 8008322:	bf00      	nop
 8008324:	24000000 	.word	0x24000000
 8008328:	1b4e81b5 	.word	0x1b4e81b5
 800832c:	40020010 	.word	0x40020010
 8008330:	40020028 	.word	0x40020028
 8008334:	40020040 	.word	0x40020040
 8008338:	40020058 	.word	0x40020058
 800833c:	40020070 	.word	0x40020070
 8008340:	40020088 	.word	0x40020088
 8008344:	400200a0 	.word	0x400200a0
 8008348:	400200b8 	.word	0x400200b8
 800834c:	40020410 	.word	0x40020410
 8008350:	40020428 	.word	0x40020428
 8008354:	40020440 	.word	0x40020440
 8008358:	40020458 	.word	0x40020458
 800835c:	40020470 	.word	0x40020470
 8008360:	40020488 	.word	0x40020488
 8008364:	400204a0 	.word	0x400204a0
 8008368:	400204b8 	.word	0x400204b8
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f003 0308 	and.w	r3, r3, #8
 8008376:	2b00      	cmp	r3, #0
 8008378:	bf14      	ite	ne
 800837a:	2301      	movne	r3, #1
 800837c:	2300      	moveq	r3, #0
 800837e:	b2db      	uxtb	r3, r3
 8008380:	2b00      	cmp	r3, #0
 8008382:	d015      	beq.n	80083b0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f022 0204 	bic.w	r2, r2, #4
 8008392:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008398:	f003 031f 	and.w	r3, r3, #31
 800839c:	2208      	movs	r2, #8
 800839e:	409a      	lsls	r2, r3
 80083a0:	6a3b      	ldr	r3, [r7, #32]
 80083a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083a8:	f043 0201 	orr.w	r2, r3, #1
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083b4:	f003 031f 	and.w	r3, r3, #31
 80083b8:	69ba      	ldr	r2, [r7, #24]
 80083ba:	fa22 f303 	lsr.w	r3, r2, r3
 80083be:	f003 0301 	and.w	r3, r3, #1
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d06e      	beq.n	80084a4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a69      	ldr	r2, [pc, #420]	@ (8008570 <HAL_DMA_IRQHandler+0x3f8>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d04a      	beq.n	8008466 <HAL_DMA_IRQHandler+0x2ee>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a67      	ldr	r2, [pc, #412]	@ (8008574 <HAL_DMA_IRQHandler+0x3fc>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d045      	beq.n	8008466 <HAL_DMA_IRQHandler+0x2ee>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a66      	ldr	r2, [pc, #408]	@ (8008578 <HAL_DMA_IRQHandler+0x400>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d040      	beq.n	8008466 <HAL_DMA_IRQHandler+0x2ee>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a64      	ldr	r2, [pc, #400]	@ (800857c <HAL_DMA_IRQHandler+0x404>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d03b      	beq.n	8008466 <HAL_DMA_IRQHandler+0x2ee>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a63      	ldr	r2, [pc, #396]	@ (8008580 <HAL_DMA_IRQHandler+0x408>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d036      	beq.n	8008466 <HAL_DMA_IRQHandler+0x2ee>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a61      	ldr	r2, [pc, #388]	@ (8008584 <HAL_DMA_IRQHandler+0x40c>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d031      	beq.n	8008466 <HAL_DMA_IRQHandler+0x2ee>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a60      	ldr	r2, [pc, #384]	@ (8008588 <HAL_DMA_IRQHandler+0x410>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d02c      	beq.n	8008466 <HAL_DMA_IRQHandler+0x2ee>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a5e      	ldr	r2, [pc, #376]	@ (800858c <HAL_DMA_IRQHandler+0x414>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d027      	beq.n	8008466 <HAL_DMA_IRQHandler+0x2ee>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a5d      	ldr	r2, [pc, #372]	@ (8008590 <HAL_DMA_IRQHandler+0x418>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d022      	beq.n	8008466 <HAL_DMA_IRQHandler+0x2ee>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a5b      	ldr	r2, [pc, #364]	@ (8008594 <HAL_DMA_IRQHandler+0x41c>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d01d      	beq.n	8008466 <HAL_DMA_IRQHandler+0x2ee>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a5a      	ldr	r2, [pc, #360]	@ (8008598 <HAL_DMA_IRQHandler+0x420>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d018      	beq.n	8008466 <HAL_DMA_IRQHandler+0x2ee>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a58      	ldr	r2, [pc, #352]	@ (800859c <HAL_DMA_IRQHandler+0x424>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d013      	beq.n	8008466 <HAL_DMA_IRQHandler+0x2ee>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a57      	ldr	r2, [pc, #348]	@ (80085a0 <HAL_DMA_IRQHandler+0x428>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d00e      	beq.n	8008466 <HAL_DMA_IRQHandler+0x2ee>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a55      	ldr	r2, [pc, #340]	@ (80085a4 <HAL_DMA_IRQHandler+0x42c>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d009      	beq.n	8008466 <HAL_DMA_IRQHandler+0x2ee>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a54      	ldr	r2, [pc, #336]	@ (80085a8 <HAL_DMA_IRQHandler+0x430>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d004      	beq.n	8008466 <HAL_DMA_IRQHandler+0x2ee>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a52      	ldr	r2, [pc, #328]	@ (80085ac <HAL_DMA_IRQHandler+0x434>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d10a      	bne.n	800847c <HAL_DMA_IRQHandler+0x304>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	695b      	ldr	r3, [r3, #20]
 800846c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008470:	2b00      	cmp	r3, #0
 8008472:	bf14      	ite	ne
 8008474:	2301      	movne	r3, #1
 8008476:	2300      	moveq	r3, #0
 8008478:	b2db      	uxtb	r3, r3
 800847a:	e003      	b.n	8008484 <HAL_DMA_IRQHandler+0x30c>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	2300      	movs	r3, #0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d00d      	beq.n	80084a4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800848c:	f003 031f 	and.w	r3, r3, #31
 8008490:	2201      	movs	r2, #1
 8008492:	409a      	lsls	r2, r3
 8008494:	6a3b      	ldr	r3, [r7, #32]
 8008496:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800849c:	f043 0202 	orr.w	r2, r3, #2
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084a8:	f003 031f 	and.w	r3, r3, #31
 80084ac:	2204      	movs	r2, #4
 80084ae:	409a      	lsls	r2, r3
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	4013      	ands	r3, r2
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	f000 808f 	beq.w	80085d8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a2c      	ldr	r2, [pc, #176]	@ (8008570 <HAL_DMA_IRQHandler+0x3f8>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d04a      	beq.n	800855a <HAL_DMA_IRQHandler+0x3e2>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a2a      	ldr	r2, [pc, #168]	@ (8008574 <HAL_DMA_IRQHandler+0x3fc>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d045      	beq.n	800855a <HAL_DMA_IRQHandler+0x3e2>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a29      	ldr	r2, [pc, #164]	@ (8008578 <HAL_DMA_IRQHandler+0x400>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d040      	beq.n	800855a <HAL_DMA_IRQHandler+0x3e2>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a27      	ldr	r2, [pc, #156]	@ (800857c <HAL_DMA_IRQHandler+0x404>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d03b      	beq.n	800855a <HAL_DMA_IRQHandler+0x3e2>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a26      	ldr	r2, [pc, #152]	@ (8008580 <HAL_DMA_IRQHandler+0x408>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d036      	beq.n	800855a <HAL_DMA_IRQHandler+0x3e2>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a24      	ldr	r2, [pc, #144]	@ (8008584 <HAL_DMA_IRQHandler+0x40c>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d031      	beq.n	800855a <HAL_DMA_IRQHandler+0x3e2>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a23      	ldr	r2, [pc, #140]	@ (8008588 <HAL_DMA_IRQHandler+0x410>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d02c      	beq.n	800855a <HAL_DMA_IRQHandler+0x3e2>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a21      	ldr	r2, [pc, #132]	@ (800858c <HAL_DMA_IRQHandler+0x414>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d027      	beq.n	800855a <HAL_DMA_IRQHandler+0x3e2>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a20      	ldr	r2, [pc, #128]	@ (8008590 <HAL_DMA_IRQHandler+0x418>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d022      	beq.n	800855a <HAL_DMA_IRQHandler+0x3e2>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a1e      	ldr	r2, [pc, #120]	@ (8008594 <HAL_DMA_IRQHandler+0x41c>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d01d      	beq.n	800855a <HAL_DMA_IRQHandler+0x3e2>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a1d      	ldr	r2, [pc, #116]	@ (8008598 <HAL_DMA_IRQHandler+0x420>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d018      	beq.n	800855a <HAL_DMA_IRQHandler+0x3e2>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a1b      	ldr	r2, [pc, #108]	@ (800859c <HAL_DMA_IRQHandler+0x424>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d013      	beq.n	800855a <HAL_DMA_IRQHandler+0x3e2>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a1a      	ldr	r2, [pc, #104]	@ (80085a0 <HAL_DMA_IRQHandler+0x428>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d00e      	beq.n	800855a <HAL_DMA_IRQHandler+0x3e2>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a18      	ldr	r2, [pc, #96]	@ (80085a4 <HAL_DMA_IRQHandler+0x42c>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d009      	beq.n	800855a <HAL_DMA_IRQHandler+0x3e2>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a17      	ldr	r2, [pc, #92]	@ (80085a8 <HAL_DMA_IRQHandler+0x430>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d004      	beq.n	800855a <HAL_DMA_IRQHandler+0x3e2>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a15      	ldr	r2, [pc, #84]	@ (80085ac <HAL_DMA_IRQHandler+0x434>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d12a      	bne.n	80085b0 <HAL_DMA_IRQHandler+0x438>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f003 0302 	and.w	r3, r3, #2
 8008564:	2b00      	cmp	r3, #0
 8008566:	bf14      	ite	ne
 8008568:	2301      	movne	r3, #1
 800856a:	2300      	moveq	r3, #0
 800856c:	b2db      	uxtb	r3, r3
 800856e:	e023      	b.n	80085b8 <HAL_DMA_IRQHandler+0x440>
 8008570:	40020010 	.word	0x40020010
 8008574:	40020028 	.word	0x40020028
 8008578:	40020040 	.word	0x40020040
 800857c:	40020058 	.word	0x40020058
 8008580:	40020070 	.word	0x40020070
 8008584:	40020088 	.word	0x40020088
 8008588:	400200a0 	.word	0x400200a0
 800858c:	400200b8 	.word	0x400200b8
 8008590:	40020410 	.word	0x40020410
 8008594:	40020428 	.word	0x40020428
 8008598:	40020440 	.word	0x40020440
 800859c:	40020458 	.word	0x40020458
 80085a0:	40020470 	.word	0x40020470
 80085a4:	40020488 	.word	0x40020488
 80085a8:	400204a0 	.word	0x400204a0
 80085ac:	400204b8 	.word	0x400204b8
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	2300      	movs	r3, #0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00d      	beq.n	80085d8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085c0:	f003 031f 	and.w	r3, r3, #31
 80085c4:	2204      	movs	r2, #4
 80085c6:	409a      	lsls	r2, r3
 80085c8:	6a3b      	ldr	r3, [r7, #32]
 80085ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085d0:	f043 0204 	orr.w	r2, r3, #4
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085dc:	f003 031f 	and.w	r3, r3, #31
 80085e0:	2210      	movs	r2, #16
 80085e2:	409a      	lsls	r2, r3
 80085e4:	69bb      	ldr	r3, [r7, #24]
 80085e6:	4013      	ands	r3, r2
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	f000 80a6 	beq.w	800873a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a85      	ldr	r2, [pc, #532]	@ (8008808 <HAL_DMA_IRQHandler+0x690>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d04a      	beq.n	800868e <HAL_DMA_IRQHandler+0x516>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a83      	ldr	r2, [pc, #524]	@ (800880c <HAL_DMA_IRQHandler+0x694>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d045      	beq.n	800868e <HAL_DMA_IRQHandler+0x516>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a82      	ldr	r2, [pc, #520]	@ (8008810 <HAL_DMA_IRQHandler+0x698>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d040      	beq.n	800868e <HAL_DMA_IRQHandler+0x516>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a80      	ldr	r2, [pc, #512]	@ (8008814 <HAL_DMA_IRQHandler+0x69c>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d03b      	beq.n	800868e <HAL_DMA_IRQHandler+0x516>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a7f      	ldr	r2, [pc, #508]	@ (8008818 <HAL_DMA_IRQHandler+0x6a0>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d036      	beq.n	800868e <HAL_DMA_IRQHandler+0x516>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a7d      	ldr	r2, [pc, #500]	@ (800881c <HAL_DMA_IRQHandler+0x6a4>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d031      	beq.n	800868e <HAL_DMA_IRQHandler+0x516>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a7c      	ldr	r2, [pc, #496]	@ (8008820 <HAL_DMA_IRQHandler+0x6a8>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d02c      	beq.n	800868e <HAL_DMA_IRQHandler+0x516>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a7a      	ldr	r2, [pc, #488]	@ (8008824 <HAL_DMA_IRQHandler+0x6ac>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d027      	beq.n	800868e <HAL_DMA_IRQHandler+0x516>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a79      	ldr	r2, [pc, #484]	@ (8008828 <HAL_DMA_IRQHandler+0x6b0>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d022      	beq.n	800868e <HAL_DMA_IRQHandler+0x516>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a77      	ldr	r2, [pc, #476]	@ (800882c <HAL_DMA_IRQHandler+0x6b4>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d01d      	beq.n	800868e <HAL_DMA_IRQHandler+0x516>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a76      	ldr	r2, [pc, #472]	@ (8008830 <HAL_DMA_IRQHandler+0x6b8>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d018      	beq.n	800868e <HAL_DMA_IRQHandler+0x516>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a74      	ldr	r2, [pc, #464]	@ (8008834 <HAL_DMA_IRQHandler+0x6bc>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d013      	beq.n	800868e <HAL_DMA_IRQHandler+0x516>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a73      	ldr	r2, [pc, #460]	@ (8008838 <HAL_DMA_IRQHandler+0x6c0>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d00e      	beq.n	800868e <HAL_DMA_IRQHandler+0x516>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a71      	ldr	r2, [pc, #452]	@ (800883c <HAL_DMA_IRQHandler+0x6c4>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d009      	beq.n	800868e <HAL_DMA_IRQHandler+0x516>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a70      	ldr	r2, [pc, #448]	@ (8008840 <HAL_DMA_IRQHandler+0x6c8>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d004      	beq.n	800868e <HAL_DMA_IRQHandler+0x516>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a6e      	ldr	r2, [pc, #440]	@ (8008844 <HAL_DMA_IRQHandler+0x6cc>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d10a      	bne.n	80086a4 <HAL_DMA_IRQHandler+0x52c>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f003 0308 	and.w	r3, r3, #8
 8008698:	2b00      	cmp	r3, #0
 800869a:	bf14      	ite	ne
 800869c:	2301      	movne	r3, #1
 800869e:	2300      	moveq	r3, #0
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	e009      	b.n	80086b8 <HAL_DMA_IRQHandler+0x540>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f003 0304 	and.w	r3, r3, #4
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	bf14      	ite	ne
 80086b2:	2301      	movne	r3, #1
 80086b4:	2300      	moveq	r3, #0
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d03e      	beq.n	800873a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086c0:	f003 031f 	and.w	r3, r3, #31
 80086c4:	2210      	movs	r2, #16
 80086c6:	409a      	lsls	r2, r3
 80086c8:	6a3b      	ldr	r3, [r7, #32]
 80086ca:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d018      	beq.n	800870c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d108      	bne.n	80086fa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d024      	beq.n	800873a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	4798      	blx	r3
 80086f8:	e01f      	b.n	800873a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d01b      	beq.n	800873a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	4798      	blx	r3
 800870a:	e016      	b.n	800873a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008716:	2b00      	cmp	r3, #0
 8008718:	d107      	bne.n	800872a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f022 0208 	bic.w	r2, r2, #8
 8008728:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800872e:	2b00      	cmp	r3, #0
 8008730:	d003      	beq.n	800873a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800873e:	f003 031f 	and.w	r3, r3, #31
 8008742:	2220      	movs	r2, #32
 8008744:	409a      	lsls	r2, r3
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	4013      	ands	r3, r2
 800874a:	2b00      	cmp	r3, #0
 800874c:	f000 8110 	beq.w	8008970 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a2c      	ldr	r2, [pc, #176]	@ (8008808 <HAL_DMA_IRQHandler+0x690>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d04a      	beq.n	80087f0 <HAL_DMA_IRQHandler+0x678>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a2b      	ldr	r2, [pc, #172]	@ (800880c <HAL_DMA_IRQHandler+0x694>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d045      	beq.n	80087f0 <HAL_DMA_IRQHandler+0x678>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a29      	ldr	r2, [pc, #164]	@ (8008810 <HAL_DMA_IRQHandler+0x698>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d040      	beq.n	80087f0 <HAL_DMA_IRQHandler+0x678>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a28      	ldr	r2, [pc, #160]	@ (8008814 <HAL_DMA_IRQHandler+0x69c>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d03b      	beq.n	80087f0 <HAL_DMA_IRQHandler+0x678>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a26      	ldr	r2, [pc, #152]	@ (8008818 <HAL_DMA_IRQHandler+0x6a0>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d036      	beq.n	80087f0 <HAL_DMA_IRQHandler+0x678>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a25      	ldr	r2, [pc, #148]	@ (800881c <HAL_DMA_IRQHandler+0x6a4>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d031      	beq.n	80087f0 <HAL_DMA_IRQHandler+0x678>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a23      	ldr	r2, [pc, #140]	@ (8008820 <HAL_DMA_IRQHandler+0x6a8>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d02c      	beq.n	80087f0 <HAL_DMA_IRQHandler+0x678>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a22      	ldr	r2, [pc, #136]	@ (8008824 <HAL_DMA_IRQHandler+0x6ac>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d027      	beq.n	80087f0 <HAL_DMA_IRQHandler+0x678>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a20      	ldr	r2, [pc, #128]	@ (8008828 <HAL_DMA_IRQHandler+0x6b0>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d022      	beq.n	80087f0 <HAL_DMA_IRQHandler+0x678>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a1f      	ldr	r2, [pc, #124]	@ (800882c <HAL_DMA_IRQHandler+0x6b4>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d01d      	beq.n	80087f0 <HAL_DMA_IRQHandler+0x678>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a1d      	ldr	r2, [pc, #116]	@ (8008830 <HAL_DMA_IRQHandler+0x6b8>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d018      	beq.n	80087f0 <HAL_DMA_IRQHandler+0x678>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a1c      	ldr	r2, [pc, #112]	@ (8008834 <HAL_DMA_IRQHandler+0x6bc>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d013      	beq.n	80087f0 <HAL_DMA_IRQHandler+0x678>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a1a      	ldr	r2, [pc, #104]	@ (8008838 <HAL_DMA_IRQHandler+0x6c0>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d00e      	beq.n	80087f0 <HAL_DMA_IRQHandler+0x678>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a19      	ldr	r2, [pc, #100]	@ (800883c <HAL_DMA_IRQHandler+0x6c4>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d009      	beq.n	80087f0 <HAL_DMA_IRQHandler+0x678>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a17      	ldr	r2, [pc, #92]	@ (8008840 <HAL_DMA_IRQHandler+0x6c8>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d004      	beq.n	80087f0 <HAL_DMA_IRQHandler+0x678>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a16      	ldr	r2, [pc, #88]	@ (8008844 <HAL_DMA_IRQHandler+0x6cc>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d12b      	bne.n	8008848 <HAL_DMA_IRQHandler+0x6d0>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f003 0310 	and.w	r3, r3, #16
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	bf14      	ite	ne
 80087fe:	2301      	movne	r3, #1
 8008800:	2300      	moveq	r3, #0
 8008802:	b2db      	uxtb	r3, r3
 8008804:	e02a      	b.n	800885c <HAL_DMA_IRQHandler+0x6e4>
 8008806:	bf00      	nop
 8008808:	40020010 	.word	0x40020010
 800880c:	40020028 	.word	0x40020028
 8008810:	40020040 	.word	0x40020040
 8008814:	40020058 	.word	0x40020058
 8008818:	40020070 	.word	0x40020070
 800881c:	40020088 	.word	0x40020088
 8008820:	400200a0 	.word	0x400200a0
 8008824:	400200b8 	.word	0x400200b8
 8008828:	40020410 	.word	0x40020410
 800882c:	40020428 	.word	0x40020428
 8008830:	40020440 	.word	0x40020440
 8008834:	40020458 	.word	0x40020458
 8008838:	40020470 	.word	0x40020470
 800883c:	40020488 	.word	0x40020488
 8008840:	400204a0 	.word	0x400204a0
 8008844:	400204b8 	.word	0x400204b8
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f003 0302 	and.w	r3, r3, #2
 8008852:	2b00      	cmp	r3, #0
 8008854:	bf14      	ite	ne
 8008856:	2301      	movne	r3, #1
 8008858:	2300      	moveq	r3, #0
 800885a:	b2db      	uxtb	r3, r3
 800885c:	2b00      	cmp	r3, #0
 800885e:	f000 8087 	beq.w	8008970 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008866:	f003 031f 	and.w	r3, r3, #31
 800886a:	2220      	movs	r2, #32
 800886c:	409a      	lsls	r2, r3
 800886e:	6a3b      	ldr	r3, [r7, #32]
 8008870:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008878:	b2db      	uxtb	r3, r3
 800887a:	2b04      	cmp	r3, #4
 800887c:	d139      	bne.n	80088f2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f022 0216 	bic.w	r2, r2, #22
 800888c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	695a      	ldr	r2, [r3, #20]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800889c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d103      	bne.n	80088ae <HAL_DMA_IRQHandler+0x736>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d007      	beq.n	80088be <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f022 0208 	bic.w	r2, r2, #8
 80088bc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088c2:	f003 031f 	and.w	r3, r3, #31
 80088c6:	223f      	movs	r2, #63	@ 0x3f
 80088c8:	409a      	lsls	r2, r3
 80088ca:	6a3b      	ldr	r3, [r7, #32]
 80088cc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2201      	movs	r2, #1
 80088d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2200      	movs	r2, #0
 80088da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	f000 8382 	beq.w	8008fec <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	4798      	blx	r3
          }
          return;
 80088f0:	e37c      	b.n	8008fec <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d018      	beq.n	8008932 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800890a:	2b00      	cmp	r3, #0
 800890c:	d108      	bne.n	8008920 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008912:	2b00      	cmp	r3, #0
 8008914:	d02c      	beq.n	8008970 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	4798      	blx	r3
 800891e:	e027      	b.n	8008970 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008924:	2b00      	cmp	r3, #0
 8008926:	d023      	beq.n	8008970 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	4798      	blx	r3
 8008930:	e01e      	b.n	8008970 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800893c:	2b00      	cmp	r3, #0
 800893e:	d10f      	bne.n	8008960 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f022 0210 	bic.w	r2, r2, #16
 800894e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2201      	movs	r2, #1
 8008954:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2200      	movs	r2, #0
 800895c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008964:	2b00      	cmp	r3, #0
 8008966:	d003      	beq.n	8008970 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008974:	2b00      	cmp	r3, #0
 8008976:	f000 833e 	beq.w	8008ff6 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800897e:	f003 0301 	and.w	r3, r3, #1
 8008982:	2b00      	cmp	r3, #0
 8008984:	f000 8088 	beq.w	8008a98 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2204      	movs	r2, #4
 800898c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a89      	ldr	r2, [pc, #548]	@ (8008bbc <HAL_DMA_IRQHandler+0xa44>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d04a      	beq.n	8008a30 <HAL_DMA_IRQHandler+0x8b8>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a88      	ldr	r2, [pc, #544]	@ (8008bc0 <HAL_DMA_IRQHandler+0xa48>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d045      	beq.n	8008a30 <HAL_DMA_IRQHandler+0x8b8>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a86      	ldr	r2, [pc, #536]	@ (8008bc4 <HAL_DMA_IRQHandler+0xa4c>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d040      	beq.n	8008a30 <HAL_DMA_IRQHandler+0x8b8>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a85      	ldr	r2, [pc, #532]	@ (8008bc8 <HAL_DMA_IRQHandler+0xa50>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d03b      	beq.n	8008a30 <HAL_DMA_IRQHandler+0x8b8>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a83      	ldr	r2, [pc, #524]	@ (8008bcc <HAL_DMA_IRQHandler+0xa54>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d036      	beq.n	8008a30 <HAL_DMA_IRQHandler+0x8b8>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a82      	ldr	r2, [pc, #520]	@ (8008bd0 <HAL_DMA_IRQHandler+0xa58>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d031      	beq.n	8008a30 <HAL_DMA_IRQHandler+0x8b8>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a80      	ldr	r2, [pc, #512]	@ (8008bd4 <HAL_DMA_IRQHandler+0xa5c>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d02c      	beq.n	8008a30 <HAL_DMA_IRQHandler+0x8b8>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a7f      	ldr	r2, [pc, #508]	@ (8008bd8 <HAL_DMA_IRQHandler+0xa60>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d027      	beq.n	8008a30 <HAL_DMA_IRQHandler+0x8b8>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a7d      	ldr	r2, [pc, #500]	@ (8008bdc <HAL_DMA_IRQHandler+0xa64>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d022      	beq.n	8008a30 <HAL_DMA_IRQHandler+0x8b8>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a7c      	ldr	r2, [pc, #496]	@ (8008be0 <HAL_DMA_IRQHandler+0xa68>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d01d      	beq.n	8008a30 <HAL_DMA_IRQHandler+0x8b8>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a7a      	ldr	r2, [pc, #488]	@ (8008be4 <HAL_DMA_IRQHandler+0xa6c>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d018      	beq.n	8008a30 <HAL_DMA_IRQHandler+0x8b8>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a79      	ldr	r2, [pc, #484]	@ (8008be8 <HAL_DMA_IRQHandler+0xa70>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d013      	beq.n	8008a30 <HAL_DMA_IRQHandler+0x8b8>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a77      	ldr	r2, [pc, #476]	@ (8008bec <HAL_DMA_IRQHandler+0xa74>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d00e      	beq.n	8008a30 <HAL_DMA_IRQHandler+0x8b8>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a76      	ldr	r2, [pc, #472]	@ (8008bf0 <HAL_DMA_IRQHandler+0xa78>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d009      	beq.n	8008a30 <HAL_DMA_IRQHandler+0x8b8>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a74      	ldr	r2, [pc, #464]	@ (8008bf4 <HAL_DMA_IRQHandler+0xa7c>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d004      	beq.n	8008a30 <HAL_DMA_IRQHandler+0x8b8>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a73      	ldr	r2, [pc, #460]	@ (8008bf8 <HAL_DMA_IRQHandler+0xa80>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d108      	bne.n	8008a42 <HAL_DMA_IRQHandler+0x8ca>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	681a      	ldr	r2, [r3, #0]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f022 0201 	bic.w	r2, r2, #1
 8008a3e:	601a      	str	r2, [r3, #0]
 8008a40:	e007      	b.n	8008a52 <HAL_DMA_IRQHandler+0x8da>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f022 0201 	bic.w	r2, r2, #1
 8008a50:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	3301      	adds	r3, #1
 8008a56:	60fb      	str	r3, [r7, #12]
 8008a58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d307      	bcc.n	8008a6e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f003 0301 	and.w	r3, r3, #1
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d1f2      	bne.n	8008a52 <HAL_DMA_IRQHandler+0x8da>
 8008a6c:	e000      	b.n	8008a70 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008a6e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 0301 	and.w	r3, r3, #1
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d004      	beq.n	8008a88 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2203      	movs	r2, #3
 8008a82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8008a86:	e003      	b.n	8008a90 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	f000 82aa 	beq.w	8008ff6 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	4798      	blx	r3
 8008aaa:	e2a4      	b.n	8008ff6 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a52      	ldr	r2, [pc, #328]	@ (8008bfc <HAL_DMA_IRQHandler+0xa84>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d04a      	beq.n	8008b4c <HAL_DMA_IRQHandler+0x9d4>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a51      	ldr	r2, [pc, #324]	@ (8008c00 <HAL_DMA_IRQHandler+0xa88>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d045      	beq.n	8008b4c <HAL_DMA_IRQHandler+0x9d4>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a4f      	ldr	r2, [pc, #316]	@ (8008c04 <HAL_DMA_IRQHandler+0xa8c>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d040      	beq.n	8008b4c <HAL_DMA_IRQHandler+0x9d4>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a4e      	ldr	r2, [pc, #312]	@ (8008c08 <HAL_DMA_IRQHandler+0xa90>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d03b      	beq.n	8008b4c <HAL_DMA_IRQHandler+0x9d4>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a4c      	ldr	r2, [pc, #304]	@ (8008c0c <HAL_DMA_IRQHandler+0xa94>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d036      	beq.n	8008b4c <HAL_DMA_IRQHandler+0x9d4>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a4b      	ldr	r2, [pc, #300]	@ (8008c10 <HAL_DMA_IRQHandler+0xa98>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d031      	beq.n	8008b4c <HAL_DMA_IRQHandler+0x9d4>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a49      	ldr	r2, [pc, #292]	@ (8008c14 <HAL_DMA_IRQHandler+0xa9c>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d02c      	beq.n	8008b4c <HAL_DMA_IRQHandler+0x9d4>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4a48      	ldr	r2, [pc, #288]	@ (8008c18 <HAL_DMA_IRQHandler+0xaa0>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d027      	beq.n	8008b4c <HAL_DMA_IRQHandler+0x9d4>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a46      	ldr	r2, [pc, #280]	@ (8008c1c <HAL_DMA_IRQHandler+0xaa4>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d022      	beq.n	8008b4c <HAL_DMA_IRQHandler+0x9d4>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a45      	ldr	r2, [pc, #276]	@ (8008c20 <HAL_DMA_IRQHandler+0xaa8>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d01d      	beq.n	8008b4c <HAL_DMA_IRQHandler+0x9d4>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a43      	ldr	r2, [pc, #268]	@ (8008c24 <HAL_DMA_IRQHandler+0xaac>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d018      	beq.n	8008b4c <HAL_DMA_IRQHandler+0x9d4>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a42      	ldr	r2, [pc, #264]	@ (8008c28 <HAL_DMA_IRQHandler+0xab0>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d013      	beq.n	8008b4c <HAL_DMA_IRQHandler+0x9d4>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a40      	ldr	r2, [pc, #256]	@ (8008c2c <HAL_DMA_IRQHandler+0xab4>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d00e      	beq.n	8008b4c <HAL_DMA_IRQHandler+0x9d4>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a3f      	ldr	r2, [pc, #252]	@ (8008c30 <HAL_DMA_IRQHandler+0xab8>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d009      	beq.n	8008b4c <HAL_DMA_IRQHandler+0x9d4>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a3d      	ldr	r2, [pc, #244]	@ (8008c34 <HAL_DMA_IRQHandler+0xabc>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d004      	beq.n	8008b4c <HAL_DMA_IRQHandler+0x9d4>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a3c      	ldr	r2, [pc, #240]	@ (8008c38 <HAL_DMA_IRQHandler+0xac0>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d101      	bne.n	8008b50 <HAL_DMA_IRQHandler+0x9d8>
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e000      	b.n	8008b52 <HAL_DMA_IRQHandler+0x9da>
 8008b50:	2300      	movs	r3, #0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	f000 824f 	beq.w	8008ff6 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b64:	f003 031f 	and.w	r3, r3, #31
 8008b68:	2204      	movs	r2, #4
 8008b6a:	409a      	lsls	r2, r3
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	4013      	ands	r3, r2
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f000 80dd 	beq.w	8008d30 <HAL_DMA_IRQHandler+0xbb8>
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	f003 0304 	and.w	r3, r3, #4
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	f000 80d7 	beq.w	8008d30 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b86:	f003 031f 	and.w	r3, r3, #31
 8008b8a:	2204      	movs	r2, #4
 8008b8c:	409a      	lsls	r2, r3
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d059      	beq.n	8008c50 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d14a      	bne.n	8008c3c <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	f000 8220 	beq.w	8008ff0 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008bb8:	e21a      	b.n	8008ff0 <HAL_DMA_IRQHandler+0xe78>
 8008bba:	bf00      	nop
 8008bbc:	40020010 	.word	0x40020010
 8008bc0:	40020028 	.word	0x40020028
 8008bc4:	40020040 	.word	0x40020040
 8008bc8:	40020058 	.word	0x40020058
 8008bcc:	40020070 	.word	0x40020070
 8008bd0:	40020088 	.word	0x40020088
 8008bd4:	400200a0 	.word	0x400200a0
 8008bd8:	400200b8 	.word	0x400200b8
 8008bdc:	40020410 	.word	0x40020410
 8008be0:	40020428 	.word	0x40020428
 8008be4:	40020440 	.word	0x40020440
 8008be8:	40020458 	.word	0x40020458
 8008bec:	40020470 	.word	0x40020470
 8008bf0:	40020488 	.word	0x40020488
 8008bf4:	400204a0 	.word	0x400204a0
 8008bf8:	400204b8 	.word	0x400204b8
 8008bfc:	48022c08 	.word	0x48022c08
 8008c00:	48022c1c 	.word	0x48022c1c
 8008c04:	48022c30 	.word	0x48022c30
 8008c08:	48022c44 	.word	0x48022c44
 8008c0c:	48022c58 	.word	0x48022c58
 8008c10:	48022c6c 	.word	0x48022c6c
 8008c14:	48022c80 	.word	0x48022c80
 8008c18:	48022c94 	.word	0x48022c94
 8008c1c:	58025408 	.word	0x58025408
 8008c20:	5802541c 	.word	0x5802541c
 8008c24:	58025430 	.word	0x58025430
 8008c28:	58025444 	.word	0x58025444
 8008c2c:	58025458 	.word	0x58025458
 8008c30:	5802546c 	.word	0x5802546c
 8008c34:	58025480 	.word	0x58025480
 8008c38:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	f000 81d5 	beq.w	8008ff0 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008c4e:	e1cf      	b.n	8008ff0 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	f003 0320 	and.w	r3, r3, #32
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d160      	bne.n	8008d1c <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a7f      	ldr	r2, [pc, #508]	@ (8008e5c <HAL_DMA_IRQHandler+0xce4>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d04a      	beq.n	8008cfa <HAL_DMA_IRQHandler+0xb82>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a7d      	ldr	r2, [pc, #500]	@ (8008e60 <HAL_DMA_IRQHandler+0xce8>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d045      	beq.n	8008cfa <HAL_DMA_IRQHandler+0xb82>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a7c      	ldr	r2, [pc, #496]	@ (8008e64 <HAL_DMA_IRQHandler+0xcec>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d040      	beq.n	8008cfa <HAL_DMA_IRQHandler+0xb82>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a7a      	ldr	r2, [pc, #488]	@ (8008e68 <HAL_DMA_IRQHandler+0xcf0>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d03b      	beq.n	8008cfa <HAL_DMA_IRQHandler+0xb82>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a79      	ldr	r2, [pc, #484]	@ (8008e6c <HAL_DMA_IRQHandler+0xcf4>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d036      	beq.n	8008cfa <HAL_DMA_IRQHandler+0xb82>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a77      	ldr	r2, [pc, #476]	@ (8008e70 <HAL_DMA_IRQHandler+0xcf8>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d031      	beq.n	8008cfa <HAL_DMA_IRQHandler+0xb82>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4a76      	ldr	r2, [pc, #472]	@ (8008e74 <HAL_DMA_IRQHandler+0xcfc>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d02c      	beq.n	8008cfa <HAL_DMA_IRQHandler+0xb82>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a74      	ldr	r2, [pc, #464]	@ (8008e78 <HAL_DMA_IRQHandler+0xd00>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d027      	beq.n	8008cfa <HAL_DMA_IRQHandler+0xb82>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a73      	ldr	r2, [pc, #460]	@ (8008e7c <HAL_DMA_IRQHandler+0xd04>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d022      	beq.n	8008cfa <HAL_DMA_IRQHandler+0xb82>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a71      	ldr	r2, [pc, #452]	@ (8008e80 <HAL_DMA_IRQHandler+0xd08>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d01d      	beq.n	8008cfa <HAL_DMA_IRQHandler+0xb82>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a70      	ldr	r2, [pc, #448]	@ (8008e84 <HAL_DMA_IRQHandler+0xd0c>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d018      	beq.n	8008cfa <HAL_DMA_IRQHandler+0xb82>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a6e      	ldr	r2, [pc, #440]	@ (8008e88 <HAL_DMA_IRQHandler+0xd10>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d013      	beq.n	8008cfa <HAL_DMA_IRQHandler+0xb82>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a6d      	ldr	r2, [pc, #436]	@ (8008e8c <HAL_DMA_IRQHandler+0xd14>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d00e      	beq.n	8008cfa <HAL_DMA_IRQHandler+0xb82>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a6b      	ldr	r2, [pc, #428]	@ (8008e90 <HAL_DMA_IRQHandler+0xd18>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d009      	beq.n	8008cfa <HAL_DMA_IRQHandler+0xb82>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a6a      	ldr	r2, [pc, #424]	@ (8008e94 <HAL_DMA_IRQHandler+0xd1c>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d004      	beq.n	8008cfa <HAL_DMA_IRQHandler+0xb82>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a68      	ldr	r2, [pc, #416]	@ (8008e98 <HAL_DMA_IRQHandler+0xd20>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d108      	bne.n	8008d0c <HAL_DMA_IRQHandler+0xb94>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	681a      	ldr	r2, [r3, #0]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f022 0208 	bic.w	r2, r2, #8
 8008d08:	601a      	str	r2, [r3, #0]
 8008d0a:	e007      	b.n	8008d1c <HAL_DMA_IRQHandler+0xba4>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f022 0204 	bic.w	r2, r2, #4
 8008d1a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	f000 8165 	beq.w	8008ff0 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008d2e:	e15f      	b.n	8008ff0 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d34:	f003 031f 	and.w	r3, r3, #31
 8008d38:	2202      	movs	r2, #2
 8008d3a:	409a      	lsls	r2, r3
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	4013      	ands	r3, r2
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	f000 80c5 	beq.w	8008ed0 <HAL_DMA_IRQHandler+0xd58>
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	f003 0302 	and.w	r3, r3, #2
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f000 80bf 	beq.w	8008ed0 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d56:	f003 031f 	and.w	r3, r3, #31
 8008d5a:	2202      	movs	r2, #2
 8008d5c:	409a      	lsls	r2, r3
 8008d5e:	69fb      	ldr	r3, [r7, #28]
 8008d60:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d018      	beq.n	8008d9e <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d109      	bne.n	8008d8a <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	f000 813a 	beq.w	8008ff4 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008d88:	e134      	b.n	8008ff4 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	f000 8130 	beq.w	8008ff4 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008d9c:	e12a      	b.n	8008ff4 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	f003 0320 	and.w	r3, r3, #32
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	f040 8089 	bne.w	8008ebc <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a2b      	ldr	r2, [pc, #172]	@ (8008e5c <HAL_DMA_IRQHandler+0xce4>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d04a      	beq.n	8008e4a <HAL_DMA_IRQHandler+0xcd2>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a29      	ldr	r2, [pc, #164]	@ (8008e60 <HAL_DMA_IRQHandler+0xce8>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d045      	beq.n	8008e4a <HAL_DMA_IRQHandler+0xcd2>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a28      	ldr	r2, [pc, #160]	@ (8008e64 <HAL_DMA_IRQHandler+0xcec>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d040      	beq.n	8008e4a <HAL_DMA_IRQHandler+0xcd2>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a26      	ldr	r2, [pc, #152]	@ (8008e68 <HAL_DMA_IRQHandler+0xcf0>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d03b      	beq.n	8008e4a <HAL_DMA_IRQHandler+0xcd2>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a25      	ldr	r2, [pc, #148]	@ (8008e6c <HAL_DMA_IRQHandler+0xcf4>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d036      	beq.n	8008e4a <HAL_DMA_IRQHandler+0xcd2>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a23      	ldr	r2, [pc, #140]	@ (8008e70 <HAL_DMA_IRQHandler+0xcf8>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d031      	beq.n	8008e4a <HAL_DMA_IRQHandler+0xcd2>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a22      	ldr	r2, [pc, #136]	@ (8008e74 <HAL_DMA_IRQHandler+0xcfc>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d02c      	beq.n	8008e4a <HAL_DMA_IRQHandler+0xcd2>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a20      	ldr	r2, [pc, #128]	@ (8008e78 <HAL_DMA_IRQHandler+0xd00>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d027      	beq.n	8008e4a <HAL_DMA_IRQHandler+0xcd2>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a1f      	ldr	r2, [pc, #124]	@ (8008e7c <HAL_DMA_IRQHandler+0xd04>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d022      	beq.n	8008e4a <HAL_DMA_IRQHandler+0xcd2>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a1d      	ldr	r2, [pc, #116]	@ (8008e80 <HAL_DMA_IRQHandler+0xd08>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d01d      	beq.n	8008e4a <HAL_DMA_IRQHandler+0xcd2>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a1c      	ldr	r2, [pc, #112]	@ (8008e84 <HAL_DMA_IRQHandler+0xd0c>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d018      	beq.n	8008e4a <HAL_DMA_IRQHandler+0xcd2>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a1a      	ldr	r2, [pc, #104]	@ (8008e88 <HAL_DMA_IRQHandler+0xd10>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d013      	beq.n	8008e4a <HAL_DMA_IRQHandler+0xcd2>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a19      	ldr	r2, [pc, #100]	@ (8008e8c <HAL_DMA_IRQHandler+0xd14>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d00e      	beq.n	8008e4a <HAL_DMA_IRQHandler+0xcd2>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a17      	ldr	r2, [pc, #92]	@ (8008e90 <HAL_DMA_IRQHandler+0xd18>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d009      	beq.n	8008e4a <HAL_DMA_IRQHandler+0xcd2>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a16      	ldr	r2, [pc, #88]	@ (8008e94 <HAL_DMA_IRQHandler+0xd1c>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d004      	beq.n	8008e4a <HAL_DMA_IRQHandler+0xcd2>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a14      	ldr	r2, [pc, #80]	@ (8008e98 <HAL_DMA_IRQHandler+0xd20>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d128      	bne.n	8008e9c <HAL_DMA_IRQHandler+0xd24>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f022 0214 	bic.w	r2, r2, #20
 8008e58:	601a      	str	r2, [r3, #0]
 8008e5a:	e027      	b.n	8008eac <HAL_DMA_IRQHandler+0xd34>
 8008e5c:	40020010 	.word	0x40020010
 8008e60:	40020028 	.word	0x40020028
 8008e64:	40020040 	.word	0x40020040
 8008e68:	40020058 	.word	0x40020058
 8008e6c:	40020070 	.word	0x40020070
 8008e70:	40020088 	.word	0x40020088
 8008e74:	400200a0 	.word	0x400200a0
 8008e78:	400200b8 	.word	0x400200b8
 8008e7c:	40020410 	.word	0x40020410
 8008e80:	40020428 	.word	0x40020428
 8008e84:	40020440 	.word	0x40020440
 8008e88:	40020458 	.word	0x40020458
 8008e8c:	40020470 	.word	0x40020470
 8008e90:	40020488 	.word	0x40020488
 8008e94:	400204a0 	.word	0x400204a0
 8008e98:	400204b8 	.word	0x400204b8
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	681a      	ldr	r2, [r3, #0]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f022 020a 	bic.w	r2, r2, #10
 8008eaa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2201      	movs	r2, #1
 8008eb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	f000 8097 	beq.w	8008ff4 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008ece:	e091      	b.n	8008ff4 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ed4:	f003 031f 	and.w	r3, r3, #31
 8008ed8:	2208      	movs	r2, #8
 8008eda:	409a      	lsls	r2, r3
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	4013      	ands	r3, r2
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	f000 8088 	beq.w	8008ff6 <HAL_DMA_IRQHandler+0xe7e>
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	f003 0308 	and.w	r3, r3, #8
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	f000 8082 	beq.w	8008ff6 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a41      	ldr	r2, [pc, #260]	@ (8008ffc <HAL_DMA_IRQHandler+0xe84>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d04a      	beq.n	8008f92 <HAL_DMA_IRQHandler+0xe1a>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a3f      	ldr	r2, [pc, #252]	@ (8009000 <HAL_DMA_IRQHandler+0xe88>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d045      	beq.n	8008f92 <HAL_DMA_IRQHandler+0xe1a>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a3e      	ldr	r2, [pc, #248]	@ (8009004 <HAL_DMA_IRQHandler+0xe8c>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d040      	beq.n	8008f92 <HAL_DMA_IRQHandler+0xe1a>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a3c      	ldr	r2, [pc, #240]	@ (8009008 <HAL_DMA_IRQHandler+0xe90>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d03b      	beq.n	8008f92 <HAL_DMA_IRQHandler+0xe1a>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4a3b      	ldr	r2, [pc, #236]	@ (800900c <HAL_DMA_IRQHandler+0xe94>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d036      	beq.n	8008f92 <HAL_DMA_IRQHandler+0xe1a>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4a39      	ldr	r2, [pc, #228]	@ (8009010 <HAL_DMA_IRQHandler+0xe98>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d031      	beq.n	8008f92 <HAL_DMA_IRQHandler+0xe1a>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4a38      	ldr	r2, [pc, #224]	@ (8009014 <HAL_DMA_IRQHandler+0xe9c>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d02c      	beq.n	8008f92 <HAL_DMA_IRQHandler+0xe1a>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a36      	ldr	r2, [pc, #216]	@ (8009018 <HAL_DMA_IRQHandler+0xea0>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d027      	beq.n	8008f92 <HAL_DMA_IRQHandler+0xe1a>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4a35      	ldr	r2, [pc, #212]	@ (800901c <HAL_DMA_IRQHandler+0xea4>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d022      	beq.n	8008f92 <HAL_DMA_IRQHandler+0xe1a>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a33      	ldr	r2, [pc, #204]	@ (8009020 <HAL_DMA_IRQHandler+0xea8>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d01d      	beq.n	8008f92 <HAL_DMA_IRQHandler+0xe1a>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a32      	ldr	r2, [pc, #200]	@ (8009024 <HAL_DMA_IRQHandler+0xeac>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d018      	beq.n	8008f92 <HAL_DMA_IRQHandler+0xe1a>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a30      	ldr	r2, [pc, #192]	@ (8009028 <HAL_DMA_IRQHandler+0xeb0>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d013      	beq.n	8008f92 <HAL_DMA_IRQHandler+0xe1a>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4a2f      	ldr	r2, [pc, #188]	@ (800902c <HAL_DMA_IRQHandler+0xeb4>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d00e      	beq.n	8008f92 <HAL_DMA_IRQHandler+0xe1a>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a2d      	ldr	r2, [pc, #180]	@ (8009030 <HAL_DMA_IRQHandler+0xeb8>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d009      	beq.n	8008f92 <HAL_DMA_IRQHandler+0xe1a>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4a2c      	ldr	r2, [pc, #176]	@ (8009034 <HAL_DMA_IRQHandler+0xebc>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d004      	beq.n	8008f92 <HAL_DMA_IRQHandler+0xe1a>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a2a      	ldr	r2, [pc, #168]	@ (8009038 <HAL_DMA_IRQHandler+0xec0>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d108      	bne.n	8008fa4 <HAL_DMA_IRQHandler+0xe2c>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f022 021c 	bic.w	r2, r2, #28
 8008fa0:	601a      	str	r2, [r3, #0]
 8008fa2:	e007      	b.n	8008fb4 <HAL_DMA_IRQHandler+0xe3c>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	681a      	ldr	r2, [r3, #0]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f022 020e 	bic.w	r2, r2, #14
 8008fb2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008fb8:	f003 031f 	and.w	r3, r3, #31
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	409a      	lsls	r2, r3
 8008fc0:	69fb      	ldr	r3, [r7, #28]
 8008fc2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2201      	movs	r2, #1
 8008fce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d009      	beq.n	8008ff6 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	4798      	blx	r3
 8008fea:	e004      	b.n	8008ff6 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8008fec:	bf00      	nop
 8008fee:	e002      	b.n	8008ff6 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008ff0:	bf00      	nop
 8008ff2:	e000      	b.n	8008ff6 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008ff4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008ff6:	3728      	adds	r7, #40	@ 0x28
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}
 8008ffc:	40020010 	.word	0x40020010
 8009000:	40020028 	.word	0x40020028
 8009004:	40020040 	.word	0x40020040
 8009008:	40020058 	.word	0x40020058
 800900c:	40020070 	.word	0x40020070
 8009010:	40020088 	.word	0x40020088
 8009014:	400200a0 	.word	0x400200a0
 8009018:	400200b8 	.word	0x400200b8
 800901c:	40020410 	.word	0x40020410
 8009020:	40020428 	.word	0x40020428
 8009024:	40020440 	.word	0x40020440
 8009028:	40020458 	.word	0x40020458
 800902c:	40020470 	.word	0x40020470
 8009030:	40020488 	.word	0x40020488
 8009034:	400204a0 	.word	0x400204a0
 8009038:	400204b8 	.word	0x400204b8

0800903c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800903c:	b480      	push	{r7}
 800903e:	b083      	sub	sp, #12
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8009048:	4618      	mov	r0, r3
 800904a:	370c      	adds	r7, #12
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr

08009054 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009054:	b480      	push	{r7}
 8009056:	b087      	sub	sp, #28
 8009058:	af00      	add	r7, sp, #0
 800905a:	60f8      	str	r0, [r7, #12]
 800905c:	60b9      	str	r1, [r7, #8]
 800905e:	607a      	str	r2, [r7, #4]
 8009060:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009066:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800906c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a7f      	ldr	r2, [pc, #508]	@ (8009270 <DMA_SetConfig+0x21c>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d072      	beq.n	800915e <DMA_SetConfig+0x10a>
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4a7d      	ldr	r2, [pc, #500]	@ (8009274 <DMA_SetConfig+0x220>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d06d      	beq.n	800915e <DMA_SetConfig+0x10a>
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a7c      	ldr	r2, [pc, #496]	@ (8009278 <DMA_SetConfig+0x224>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d068      	beq.n	800915e <DMA_SetConfig+0x10a>
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a7a      	ldr	r2, [pc, #488]	@ (800927c <DMA_SetConfig+0x228>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d063      	beq.n	800915e <DMA_SetConfig+0x10a>
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a79      	ldr	r2, [pc, #484]	@ (8009280 <DMA_SetConfig+0x22c>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d05e      	beq.n	800915e <DMA_SetConfig+0x10a>
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a77      	ldr	r2, [pc, #476]	@ (8009284 <DMA_SetConfig+0x230>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d059      	beq.n	800915e <DMA_SetConfig+0x10a>
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a76      	ldr	r2, [pc, #472]	@ (8009288 <DMA_SetConfig+0x234>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d054      	beq.n	800915e <DMA_SetConfig+0x10a>
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a74      	ldr	r2, [pc, #464]	@ (800928c <DMA_SetConfig+0x238>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d04f      	beq.n	800915e <DMA_SetConfig+0x10a>
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a73      	ldr	r2, [pc, #460]	@ (8009290 <DMA_SetConfig+0x23c>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d04a      	beq.n	800915e <DMA_SetConfig+0x10a>
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a71      	ldr	r2, [pc, #452]	@ (8009294 <DMA_SetConfig+0x240>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d045      	beq.n	800915e <DMA_SetConfig+0x10a>
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a70      	ldr	r2, [pc, #448]	@ (8009298 <DMA_SetConfig+0x244>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d040      	beq.n	800915e <DMA_SetConfig+0x10a>
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a6e      	ldr	r2, [pc, #440]	@ (800929c <DMA_SetConfig+0x248>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d03b      	beq.n	800915e <DMA_SetConfig+0x10a>
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a6d      	ldr	r2, [pc, #436]	@ (80092a0 <DMA_SetConfig+0x24c>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d036      	beq.n	800915e <DMA_SetConfig+0x10a>
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a6b      	ldr	r2, [pc, #428]	@ (80092a4 <DMA_SetConfig+0x250>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d031      	beq.n	800915e <DMA_SetConfig+0x10a>
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a6a      	ldr	r2, [pc, #424]	@ (80092a8 <DMA_SetConfig+0x254>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d02c      	beq.n	800915e <DMA_SetConfig+0x10a>
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a68      	ldr	r2, [pc, #416]	@ (80092ac <DMA_SetConfig+0x258>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d027      	beq.n	800915e <DMA_SetConfig+0x10a>
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a67      	ldr	r2, [pc, #412]	@ (80092b0 <DMA_SetConfig+0x25c>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d022      	beq.n	800915e <DMA_SetConfig+0x10a>
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a65      	ldr	r2, [pc, #404]	@ (80092b4 <DMA_SetConfig+0x260>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d01d      	beq.n	800915e <DMA_SetConfig+0x10a>
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a64      	ldr	r2, [pc, #400]	@ (80092b8 <DMA_SetConfig+0x264>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d018      	beq.n	800915e <DMA_SetConfig+0x10a>
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a62      	ldr	r2, [pc, #392]	@ (80092bc <DMA_SetConfig+0x268>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d013      	beq.n	800915e <DMA_SetConfig+0x10a>
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a61      	ldr	r2, [pc, #388]	@ (80092c0 <DMA_SetConfig+0x26c>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d00e      	beq.n	800915e <DMA_SetConfig+0x10a>
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a5f      	ldr	r2, [pc, #380]	@ (80092c4 <DMA_SetConfig+0x270>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d009      	beq.n	800915e <DMA_SetConfig+0x10a>
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4a5e      	ldr	r2, [pc, #376]	@ (80092c8 <DMA_SetConfig+0x274>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d004      	beq.n	800915e <DMA_SetConfig+0x10a>
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a5c      	ldr	r2, [pc, #368]	@ (80092cc <DMA_SetConfig+0x278>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d101      	bne.n	8009162 <DMA_SetConfig+0x10e>
 800915e:	2301      	movs	r3, #1
 8009160:	e000      	b.n	8009164 <DMA_SetConfig+0x110>
 8009162:	2300      	movs	r3, #0
 8009164:	2b00      	cmp	r3, #0
 8009166:	d00d      	beq.n	8009184 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800916c:	68fa      	ldr	r2, [r7, #12]
 800916e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8009170:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009176:	2b00      	cmp	r3, #0
 8009178:	d004      	beq.n	8009184 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800917e:	68fa      	ldr	r2, [r7, #12]
 8009180:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009182:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a39      	ldr	r2, [pc, #228]	@ (8009270 <DMA_SetConfig+0x21c>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d04a      	beq.n	8009224 <DMA_SetConfig+0x1d0>
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	4a38      	ldr	r2, [pc, #224]	@ (8009274 <DMA_SetConfig+0x220>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d045      	beq.n	8009224 <DMA_SetConfig+0x1d0>
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a36      	ldr	r2, [pc, #216]	@ (8009278 <DMA_SetConfig+0x224>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d040      	beq.n	8009224 <DMA_SetConfig+0x1d0>
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a35      	ldr	r2, [pc, #212]	@ (800927c <DMA_SetConfig+0x228>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d03b      	beq.n	8009224 <DMA_SetConfig+0x1d0>
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a33      	ldr	r2, [pc, #204]	@ (8009280 <DMA_SetConfig+0x22c>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d036      	beq.n	8009224 <DMA_SetConfig+0x1d0>
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a32      	ldr	r2, [pc, #200]	@ (8009284 <DMA_SetConfig+0x230>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d031      	beq.n	8009224 <DMA_SetConfig+0x1d0>
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a30      	ldr	r2, [pc, #192]	@ (8009288 <DMA_SetConfig+0x234>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d02c      	beq.n	8009224 <DMA_SetConfig+0x1d0>
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a2f      	ldr	r2, [pc, #188]	@ (800928c <DMA_SetConfig+0x238>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d027      	beq.n	8009224 <DMA_SetConfig+0x1d0>
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a2d      	ldr	r2, [pc, #180]	@ (8009290 <DMA_SetConfig+0x23c>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d022      	beq.n	8009224 <DMA_SetConfig+0x1d0>
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4a2c      	ldr	r2, [pc, #176]	@ (8009294 <DMA_SetConfig+0x240>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d01d      	beq.n	8009224 <DMA_SetConfig+0x1d0>
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a2a      	ldr	r2, [pc, #168]	@ (8009298 <DMA_SetConfig+0x244>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d018      	beq.n	8009224 <DMA_SetConfig+0x1d0>
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4a29      	ldr	r2, [pc, #164]	@ (800929c <DMA_SetConfig+0x248>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d013      	beq.n	8009224 <DMA_SetConfig+0x1d0>
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a27      	ldr	r2, [pc, #156]	@ (80092a0 <DMA_SetConfig+0x24c>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d00e      	beq.n	8009224 <DMA_SetConfig+0x1d0>
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a26      	ldr	r2, [pc, #152]	@ (80092a4 <DMA_SetConfig+0x250>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d009      	beq.n	8009224 <DMA_SetConfig+0x1d0>
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a24      	ldr	r2, [pc, #144]	@ (80092a8 <DMA_SetConfig+0x254>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d004      	beq.n	8009224 <DMA_SetConfig+0x1d0>
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a23      	ldr	r2, [pc, #140]	@ (80092ac <DMA_SetConfig+0x258>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d101      	bne.n	8009228 <DMA_SetConfig+0x1d4>
 8009224:	2301      	movs	r3, #1
 8009226:	e000      	b.n	800922a <DMA_SetConfig+0x1d6>
 8009228:	2300      	movs	r3, #0
 800922a:	2b00      	cmp	r3, #0
 800922c:	d059      	beq.n	80092e2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009232:	f003 031f 	and.w	r3, r3, #31
 8009236:	223f      	movs	r2, #63	@ 0x3f
 8009238:	409a      	lsls	r2, r3
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	681a      	ldr	r2, [r3, #0]
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800924c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	683a      	ldr	r2, [r7, #0]
 8009254:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	2b40      	cmp	r3, #64	@ 0x40
 800925c:	d138      	bne.n	80092d0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	687a      	ldr	r2, [r7, #4]
 8009264:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	68ba      	ldr	r2, [r7, #8]
 800926c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800926e:	e0ae      	b.n	80093ce <DMA_SetConfig+0x37a>
 8009270:	40020010 	.word	0x40020010
 8009274:	40020028 	.word	0x40020028
 8009278:	40020040 	.word	0x40020040
 800927c:	40020058 	.word	0x40020058
 8009280:	40020070 	.word	0x40020070
 8009284:	40020088 	.word	0x40020088
 8009288:	400200a0 	.word	0x400200a0
 800928c:	400200b8 	.word	0x400200b8
 8009290:	40020410 	.word	0x40020410
 8009294:	40020428 	.word	0x40020428
 8009298:	40020440 	.word	0x40020440
 800929c:	40020458 	.word	0x40020458
 80092a0:	40020470 	.word	0x40020470
 80092a4:	40020488 	.word	0x40020488
 80092a8:	400204a0 	.word	0x400204a0
 80092ac:	400204b8 	.word	0x400204b8
 80092b0:	58025408 	.word	0x58025408
 80092b4:	5802541c 	.word	0x5802541c
 80092b8:	58025430 	.word	0x58025430
 80092bc:	58025444 	.word	0x58025444
 80092c0:	58025458 	.word	0x58025458
 80092c4:	5802546c 	.word	0x5802546c
 80092c8:	58025480 	.word	0x58025480
 80092cc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	68ba      	ldr	r2, [r7, #8]
 80092d6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	687a      	ldr	r2, [r7, #4]
 80092de:	60da      	str	r2, [r3, #12]
}
 80092e0:	e075      	b.n	80093ce <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a3d      	ldr	r2, [pc, #244]	@ (80093dc <DMA_SetConfig+0x388>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d04a      	beq.n	8009382 <DMA_SetConfig+0x32e>
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a3b      	ldr	r2, [pc, #236]	@ (80093e0 <DMA_SetConfig+0x38c>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d045      	beq.n	8009382 <DMA_SetConfig+0x32e>
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a3a      	ldr	r2, [pc, #232]	@ (80093e4 <DMA_SetConfig+0x390>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d040      	beq.n	8009382 <DMA_SetConfig+0x32e>
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a38      	ldr	r2, [pc, #224]	@ (80093e8 <DMA_SetConfig+0x394>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d03b      	beq.n	8009382 <DMA_SetConfig+0x32e>
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a37      	ldr	r2, [pc, #220]	@ (80093ec <DMA_SetConfig+0x398>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d036      	beq.n	8009382 <DMA_SetConfig+0x32e>
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a35      	ldr	r2, [pc, #212]	@ (80093f0 <DMA_SetConfig+0x39c>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d031      	beq.n	8009382 <DMA_SetConfig+0x32e>
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4a34      	ldr	r2, [pc, #208]	@ (80093f4 <DMA_SetConfig+0x3a0>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d02c      	beq.n	8009382 <DMA_SetConfig+0x32e>
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a32      	ldr	r2, [pc, #200]	@ (80093f8 <DMA_SetConfig+0x3a4>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d027      	beq.n	8009382 <DMA_SetConfig+0x32e>
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4a31      	ldr	r2, [pc, #196]	@ (80093fc <DMA_SetConfig+0x3a8>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d022      	beq.n	8009382 <DMA_SetConfig+0x32e>
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4a2f      	ldr	r2, [pc, #188]	@ (8009400 <DMA_SetConfig+0x3ac>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d01d      	beq.n	8009382 <DMA_SetConfig+0x32e>
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4a2e      	ldr	r2, [pc, #184]	@ (8009404 <DMA_SetConfig+0x3b0>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d018      	beq.n	8009382 <DMA_SetConfig+0x32e>
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a2c      	ldr	r2, [pc, #176]	@ (8009408 <DMA_SetConfig+0x3b4>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d013      	beq.n	8009382 <DMA_SetConfig+0x32e>
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a2b      	ldr	r2, [pc, #172]	@ (800940c <DMA_SetConfig+0x3b8>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d00e      	beq.n	8009382 <DMA_SetConfig+0x32e>
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a29      	ldr	r2, [pc, #164]	@ (8009410 <DMA_SetConfig+0x3bc>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d009      	beq.n	8009382 <DMA_SetConfig+0x32e>
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4a28      	ldr	r2, [pc, #160]	@ (8009414 <DMA_SetConfig+0x3c0>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d004      	beq.n	8009382 <DMA_SetConfig+0x32e>
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a26      	ldr	r2, [pc, #152]	@ (8009418 <DMA_SetConfig+0x3c4>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d101      	bne.n	8009386 <DMA_SetConfig+0x332>
 8009382:	2301      	movs	r3, #1
 8009384:	e000      	b.n	8009388 <DMA_SetConfig+0x334>
 8009386:	2300      	movs	r3, #0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d020      	beq.n	80093ce <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009390:	f003 031f 	and.w	r3, r3, #31
 8009394:	2201      	movs	r2, #1
 8009396:	409a      	lsls	r2, r3
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	683a      	ldr	r2, [r7, #0]
 80093a2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	689b      	ldr	r3, [r3, #8]
 80093a8:	2b40      	cmp	r3, #64	@ 0x40
 80093aa:	d108      	bne.n	80093be <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	68ba      	ldr	r2, [r7, #8]
 80093ba:	60da      	str	r2, [r3, #12]
}
 80093bc:	e007      	b.n	80093ce <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	68ba      	ldr	r2, [r7, #8]
 80093c4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	687a      	ldr	r2, [r7, #4]
 80093cc:	60da      	str	r2, [r3, #12]
}
 80093ce:	bf00      	nop
 80093d0:	371c      	adds	r7, #28
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr
 80093da:	bf00      	nop
 80093dc:	48022c08 	.word	0x48022c08
 80093e0:	48022c1c 	.word	0x48022c1c
 80093e4:	48022c30 	.word	0x48022c30
 80093e8:	48022c44 	.word	0x48022c44
 80093ec:	48022c58 	.word	0x48022c58
 80093f0:	48022c6c 	.word	0x48022c6c
 80093f4:	48022c80 	.word	0x48022c80
 80093f8:	48022c94 	.word	0x48022c94
 80093fc:	58025408 	.word	0x58025408
 8009400:	5802541c 	.word	0x5802541c
 8009404:	58025430 	.word	0x58025430
 8009408:	58025444 	.word	0x58025444
 800940c:	58025458 	.word	0x58025458
 8009410:	5802546c 	.word	0x5802546c
 8009414:	58025480 	.word	0x58025480
 8009418:	58025494 	.word	0x58025494

0800941c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800941c:	b480      	push	{r7}
 800941e:	b085      	sub	sp, #20
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a42      	ldr	r2, [pc, #264]	@ (8009534 <DMA_CalcBaseAndBitshift+0x118>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d04a      	beq.n	80094c4 <DMA_CalcBaseAndBitshift+0xa8>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a41      	ldr	r2, [pc, #260]	@ (8009538 <DMA_CalcBaseAndBitshift+0x11c>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d045      	beq.n	80094c4 <DMA_CalcBaseAndBitshift+0xa8>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4a3f      	ldr	r2, [pc, #252]	@ (800953c <DMA_CalcBaseAndBitshift+0x120>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d040      	beq.n	80094c4 <DMA_CalcBaseAndBitshift+0xa8>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4a3e      	ldr	r2, [pc, #248]	@ (8009540 <DMA_CalcBaseAndBitshift+0x124>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d03b      	beq.n	80094c4 <DMA_CalcBaseAndBitshift+0xa8>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a3c      	ldr	r2, [pc, #240]	@ (8009544 <DMA_CalcBaseAndBitshift+0x128>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d036      	beq.n	80094c4 <DMA_CalcBaseAndBitshift+0xa8>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a3b      	ldr	r2, [pc, #236]	@ (8009548 <DMA_CalcBaseAndBitshift+0x12c>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d031      	beq.n	80094c4 <DMA_CalcBaseAndBitshift+0xa8>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a39      	ldr	r2, [pc, #228]	@ (800954c <DMA_CalcBaseAndBitshift+0x130>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d02c      	beq.n	80094c4 <DMA_CalcBaseAndBitshift+0xa8>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a38      	ldr	r2, [pc, #224]	@ (8009550 <DMA_CalcBaseAndBitshift+0x134>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d027      	beq.n	80094c4 <DMA_CalcBaseAndBitshift+0xa8>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4a36      	ldr	r2, [pc, #216]	@ (8009554 <DMA_CalcBaseAndBitshift+0x138>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d022      	beq.n	80094c4 <DMA_CalcBaseAndBitshift+0xa8>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4a35      	ldr	r2, [pc, #212]	@ (8009558 <DMA_CalcBaseAndBitshift+0x13c>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d01d      	beq.n	80094c4 <DMA_CalcBaseAndBitshift+0xa8>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4a33      	ldr	r2, [pc, #204]	@ (800955c <DMA_CalcBaseAndBitshift+0x140>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d018      	beq.n	80094c4 <DMA_CalcBaseAndBitshift+0xa8>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4a32      	ldr	r2, [pc, #200]	@ (8009560 <DMA_CalcBaseAndBitshift+0x144>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d013      	beq.n	80094c4 <DMA_CalcBaseAndBitshift+0xa8>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a30      	ldr	r2, [pc, #192]	@ (8009564 <DMA_CalcBaseAndBitshift+0x148>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d00e      	beq.n	80094c4 <DMA_CalcBaseAndBitshift+0xa8>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4a2f      	ldr	r2, [pc, #188]	@ (8009568 <DMA_CalcBaseAndBitshift+0x14c>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d009      	beq.n	80094c4 <DMA_CalcBaseAndBitshift+0xa8>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4a2d      	ldr	r2, [pc, #180]	@ (800956c <DMA_CalcBaseAndBitshift+0x150>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d004      	beq.n	80094c4 <DMA_CalcBaseAndBitshift+0xa8>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a2c      	ldr	r2, [pc, #176]	@ (8009570 <DMA_CalcBaseAndBitshift+0x154>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d101      	bne.n	80094c8 <DMA_CalcBaseAndBitshift+0xac>
 80094c4:	2301      	movs	r3, #1
 80094c6:	e000      	b.n	80094ca <DMA_CalcBaseAndBitshift+0xae>
 80094c8:	2300      	movs	r3, #0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d024      	beq.n	8009518 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	3b10      	subs	r3, #16
 80094d6:	4a27      	ldr	r2, [pc, #156]	@ (8009574 <DMA_CalcBaseAndBitshift+0x158>)
 80094d8:	fba2 2303 	umull	r2, r3, r2, r3
 80094dc:	091b      	lsrs	r3, r3, #4
 80094de:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f003 0307 	and.w	r3, r3, #7
 80094e6:	4a24      	ldr	r2, [pc, #144]	@ (8009578 <DMA_CalcBaseAndBitshift+0x15c>)
 80094e8:	5cd3      	ldrb	r3, [r2, r3]
 80094ea:	461a      	mov	r2, r3
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2b03      	cmp	r3, #3
 80094f4:	d908      	bls.n	8009508 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	461a      	mov	r2, r3
 80094fc:	4b1f      	ldr	r3, [pc, #124]	@ (800957c <DMA_CalcBaseAndBitshift+0x160>)
 80094fe:	4013      	ands	r3, r2
 8009500:	1d1a      	adds	r2, r3, #4
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	659a      	str	r2, [r3, #88]	@ 0x58
 8009506:	e00d      	b.n	8009524 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	461a      	mov	r2, r3
 800950e:	4b1b      	ldr	r3, [pc, #108]	@ (800957c <DMA_CalcBaseAndBitshift+0x160>)
 8009510:	4013      	ands	r3, r2
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	6593      	str	r3, [r2, #88]	@ 0x58
 8009516:	e005      	b.n	8009524 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8009528:	4618      	mov	r0, r3
 800952a:	3714      	adds	r7, #20
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr
 8009534:	40020010 	.word	0x40020010
 8009538:	40020028 	.word	0x40020028
 800953c:	40020040 	.word	0x40020040
 8009540:	40020058 	.word	0x40020058
 8009544:	40020070 	.word	0x40020070
 8009548:	40020088 	.word	0x40020088
 800954c:	400200a0 	.word	0x400200a0
 8009550:	400200b8 	.word	0x400200b8
 8009554:	40020410 	.word	0x40020410
 8009558:	40020428 	.word	0x40020428
 800955c:	40020440 	.word	0x40020440
 8009560:	40020458 	.word	0x40020458
 8009564:	40020470 	.word	0x40020470
 8009568:	40020488 	.word	0x40020488
 800956c:	400204a0 	.word	0x400204a0
 8009570:	400204b8 	.word	0x400204b8
 8009574:	aaaaaaab 	.word	0xaaaaaaab
 8009578:	08019d04 	.word	0x08019d04
 800957c:	fffffc00 	.word	0xfffffc00

08009580 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009580:	b480      	push	{r7}
 8009582:	b085      	sub	sp, #20
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009588:	2300      	movs	r3, #0
 800958a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	699b      	ldr	r3, [r3, #24]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d120      	bne.n	80095d6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009598:	2b03      	cmp	r3, #3
 800959a:	d858      	bhi.n	800964e <DMA_CheckFifoParam+0xce>
 800959c:	a201      	add	r2, pc, #4	@ (adr r2, 80095a4 <DMA_CheckFifoParam+0x24>)
 800959e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095a2:	bf00      	nop
 80095a4:	080095b5 	.word	0x080095b5
 80095a8:	080095c7 	.word	0x080095c7
 80095ac:	080095b5 	.word	0x080095b5
 80095b0:	0800964f 	.word	0x0800964f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d048      	beq.n	8009652 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80095c0:	2301      	movs	r3, #1
 80095c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80095c4:	e045      	b.n	8009652 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80095ce:	d142      	bne.n	8009656 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80095d0:	2301      	movs	r3, #1
 80095d2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80095d4:	e03f      	b.n	8009656 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	699b      	ldr	r3, [r3, #24]
 80095da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80095de:	d123      	bne.n	8009628 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095e4:	2b03      	cmp	r3, #3
 80095e6:	d838      	bhi.n	800965a <DMA_CheckFifoParam+0xda>
 80095e8:	a201      	add	r2, pc, #4	@ (adr r2, 80095f0 <DMA_CheckFifoParam+0x70>)
 80095ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ee:	bf00      	nop
 80095f0:	08009601 	.word	0x08009601
 80095f4:	08009607 	.word	0x08009607
 80095f8:	08009601 	.word	0x08009601
 80095fc:	08009619 	.word	0x08009619
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009600:	2301      	movs	r3, #1
 8009602:	73fb      	strb	r3, [r7, #15]
        break;
 8009604:	e030      	b.n	8009668 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800960a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800960e:	2b00      	cmp	r3, #0
 8009610:	d025      	beq.n	800965e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8009612:	2301      	movs	r3, #1
 8009614:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009616:	e022      	b.n	800965e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800961c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009620:	d11f      	bne.n	8009662 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8009622:	2301      	movs	r3, #1
 8009624:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009626:	e01c      	b.n	8009662 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800962c:	2b02      	cmp	r3, #2
 800962e:	d902      	bls.n	8009636 <DMA_CheckFifoParam+0xb6>
 8009630:	2b03      	cmp	r3, #3
 8009632:	d003      	beq.n	800963c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009634:	e018      	b.n	8009668 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8009636:	2301      	movs	r3, #1
 8009638:	73fb      	strb	r3, [r7, #15]
        break;
 800963a:	e015      	b.n	8009668 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009640:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009644:	2b00      	cmp	r3, #0
 8009646:	d00e      	beq.n	8009666 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009648:	2301      	movs	r3, #1
 800964a:	73fb      	strb	r3, [r7, #15]
    break;
 800964c:	e00b      	b.n	8009666 <DMA_CheckFifoParam+0xe6>
        break;
 800964e:	bf00      	nop
 8009650:	e00a      	b.n	8009668 <DMA_CheckFifoParam+0xe8>
        break;
 8009652:	bf00      	nop
 8009654:	e008      	b.n	8009668 <DMA_CheckFifoParam+0xe8>
        break;
 8009656:	bf00      	nop
 8009658:	e006      	b.n	8009668 <DMA_CheckFifoParam+0xe8>
        break;
 800965a:	bf00      	nop
 800965c:	e004      	b.n	8009668 <DMA_CheckFifoParam+0xe8>
        break;
 800965e:	bf00      	nop
 8009660:	e002      	b.n	8009668 <DMA_CheckFifoParam+0xe8>
        break;
 8009662:	bf00      	nop
 8009664:	e000      	b.n	8009668 <DMA_CheckFifoParam+0xe8>
    break;
 8009666:	bf00      	nop
    }
  }

  return status;
 8009668:	7bfb      	ldrb	r3, [r7, #15]
}
 800966a:	4618      	mov	r0, r3
 800966c:	3714      	adds	r7, #20
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr
 8009676:	bf00      	nop

08009678 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009678:	b480      	push	{r7}
 800967a:	b085      	sub	sp, #20
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a38      	ldr	r2, [pc, #224]	@ (800976c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d022      	beq.n	80096d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a36      	ldr	r2, [pc, #216]	@ (8009770 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d01d      	beq.n	80096d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a35      	ldr	r2, [pc, #212]	@ (8009774 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d018      	beq.n	80096d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a33      	ldr	r2, [pc, #204]	@ (8009778 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d013      	beq.n	80096d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a32      	ldr	r2, [pc, #200]	@ (800977c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d00e      	beq.n	80096d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a30      	ldr	r2, [pc, #192]	@ (8009780 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d009      	beq.n	80096d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4a2f      	ldr	r2, [pc, #188]	@ (8009784 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d004      	beq.n	80096d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a2d      	ldr	r2, [pc, #180]	@ (8009788 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d101      	bne.n	80096da <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80096d6:	2301      	movs	r3, #1
 80096d8:	e000      	b.n	80096dc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80096da:	2300      	movs	r3, #0
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d01a      	beq.n	8009716 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	3b08      	subs	r3, #8
 80096e8:	4a28      	ldr	r2, [pc, #160]	@ (800978c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80096ea:	fba2 2303 	umull	r2, r3, r2, r3
 80096ee:	091b      	lsrs	r3, r3, #4
 80096f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80096f2:	68fa      	ldr	r2, [r7, #12]
 80096f4:	4b26      	ldr	r3, [pc, #152]	@ (8009790 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80096f6:	4413      	add	r3, r2
 80096f8:	009b      	lsls	r3, r3, #2
 80096fa:	461a      	mov	r2, r3
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	4a24      	ldr	r2, [pc, #144]	@ (8009794 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009704:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	f003 031f 	and.w	r3, r3, #31
 800970c:	2201      	movs	r2, #1
 800970e:	409a      	lsls	r2, r3
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009714:	e024      	b.n	8009760 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	b2db      	uxtb	r3, r3
 800971c:	3b10      	subs	r3, #16
 800971e:	4a1e      	ldr	r2, [pc, #120]	@ (8009798 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009720:	fba2 2303 	umull	r2, r3, r2, r3
 8009724:	091b      	lsrs	r3, r3, #4
 8009726:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	4a1c      	ldr	r2, [pc, #112]	@ (800979c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d806      	bhi.n	800973e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	4a1b      	ldr	r2, [pc, #108]	@ (80097a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d902      	bls.n	800973e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	3308      	adds	r3, #8
 800973c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800973e:	68fa      	ldr	r2, [r7, #12]
 8009740:	4b18      	ldr	r3, [pc, #96]	@ (80097a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009742:	4413      	add	r3, r2
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	461a      	mov	r2, r3
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	4a16      	ldr	r2, [pc, #88]	@ (80097a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009750:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f003 031f 	and.w	r3, r3, #31
 8009758:	2201      	movs	r2, #1
 800975a:	409a      	lsls	r2, r3
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009760:	bf00      	nop
 8009762:	3714      	adds	r7, #20
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr
 800976c:	58025408 	.word	0x58025408
 8009770:	5802541c 	.word	0x5802541c
 8009774:	58025430 	.word	0x58025430
 8009778:	58025444 	.word	0x58025444
 800977c:	58025458 	.word	0x58025458
 8009780:	5802546c 	.word	0x5802546c
 8009784:	58025480 	.word	0x58025480
 8009788:	58025494 	.word	0x58025494
 800978c:	cccccccd 	.word	0xcccccccd
 8009790:	16009600 	.word	0x16009600
 8009794:	58025880 	.word	0x58025880
 8009798:	aaaaaaab 	.word	0xaaaaaaab
 800979c:	400204b8 	.word	0x400204b8
 80097a0:	4002040f 	.word	0x4002040f
 80097a4:	10008200 	.word	0x10008200
 80097a8:	40020880 	.word	0x40020880

080097ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b085      	sub	sp, #20
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d04a      	beq.n	8009858 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2b08      	cmp	r3, #8
 80097c6:	d847      	bhi.n	8009858 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	4a25      	ldr	r2, [pc, #148]	@ (8009864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d022      	beq.n	8009818 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4a24      	ldr	r2, [pc, #144]	@ (8009868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d01d      	beq.n	8009818 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a22      	ldr	r2, [pc, #136]	@ (800986c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d018      	beq.n	8009818 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4a21      	ldr	r2, [pc, #132]	@ (8009870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d013      	beq.n	8009818 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4a1f      	ldr	r2, [pc, #124]	@ (8009874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d00e      	beq.n	8009818 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	4a1e      	ldr	r2, [pc, #120]	@ (8009878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d009      	beq.n	8009818 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4a1c      	ldr	r2, [pc, #112]	@ (800987c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d004      	beq.n	8009818 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4a1b      	ldr	r2, [pc, #108]	@ (8009880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d101      	bne.n	800981c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009818:	2301      	movs	r3, #1
 800981a:	e000      	b.n	800981e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800981c:	2300      	movs	r3, #0
 800981e:	2b00      	cmp	r3, #0
 8009820:	d00a      	beq.n	8009838 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009822:	68fa      	ldr	r2, [r7, #12]
 8009824:	4b17      	ldr	r3, [pc, #92]	@ (8009884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009826:	4413      	add	r3, r2
 8009828:	009b      	lsls	r3, r3, #2
 800982a:	461a      	mov	r2, r3
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	4a15      	ldr	r2, [pc, #84]	@ (8009888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009834:	671a      	str	r2, [r3, #112]	@ 0x70
 8009836:	e009      	b.n	800984c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009838:	68fa      	ldr	r2, [r7, #12]
 800983a:	4b14      	ldr	r3, [pc, #80]	@ (800988c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800983c:	4413      	add	r3, r2
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	461a      	mov	r2, r3
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	4a11      	ldr	r2, [pc, #68]	@ (8009890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800984a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	3b01      	subs	r3, #1
 8009850:	2201      	movs	r2, #1
 8009852:	409a      	lsls	r2, r3
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8009858:	bf00      	nop
 800985a:	3714      	adds	r7, #20
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr
 8009864:	58025408 	.word	0x58025408
 8009868:	5802541c 	.word	0x5802541c
 800986c:	58025430 	.word	0x58025430
 8009870:	58025444 	.word	0x58025444
 8009874:	58025458 	.word	0x58025458
 8009878:	5802546c 	.word	0x5802546c
 800987c:	58025480 	.word	0x58025480
 8009880:	58025494 	.word	0x58025494
 8009884:	1600963f 	.word	0x1600963f
 8009888:	58025940 	.word	0x58025940
 800988c:	1000823f 	.word	0x1000823f
 8009890:	40020940 	.word	0x40020940

08009894 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b098      	sub	sp, #96	@ 0x60
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800989c:	4a84      	ldr	r2, [pc, #528]	@ (8009ab0 <HAL_FDCAN_Init+0x21c>)
 800989e:	f107 030c 	add.w	r3, r7, #12
 80098a2:	4611      	mov	r1, r2
 80098a4:	224c      	movs	r2, #76	@ 0x4c
 80098a6:	4618      	mov	r0, r3
 80098a8:	f00e fa17 	bl	8017cda <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d101      	bne.n	80098b6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80098b2:	2301      	movs	r3, #1
 80098b4:	e1c6      	b.n	8009c44 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a7e      	ldr	r2, [pc, #504]	@ (8009ab4 <HAL_FDCAN_Init+0x220>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d106      	bne.n	80098ce <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80098c8:	461a      	mov	r2, r3
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80098d4:	b2db      	uxtb	r3, r3
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d106      	bne.n	80098e8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2200      	movs	r2, #0
 80098de:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f7f8 fac8 	bl	8001e78 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	699a      	ldr	r2, [r3, #24]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f022 0210 	bic.w	r2, r2, #16
 80098f6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80098f8:	f7fc ff5a 	bl	80067b0 <HAL_GetTick>
 80098fc:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80098fe:	e014      	b.n	800992a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8009900:	f7fc ff56 	bl	80067b0 <HAL_GetTick>
 8009904:	4602      	mov	r2, r0
 8009906:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009908:	1ad3      	subs	r3, r2, r3
 800990a:	2b0a      	cmp	r3, #10
 800990c:	d90d      	bls.n	800992a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009914:	f043 0201 	orr.w	r2, r3, #1
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2203      	movs	r2, #3
 8009922:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8009926:	2301      	movs	r3, #1
 8009928:	e18c      	b.n	8009c44 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	699b      	ldr	r3, [r3, #24]
 8009930:	f003 0308 	and.w	r3, r3, #8
 8009934:	2b08      	cmp	r3, #8
 8009936:	d0e3      	beq.n	8009900 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	699a      	ldr	r2, [r3, #24]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f042 0201 	orr.w	r2, r2, #1
 8009946:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009948:	f7fc ff32 	bl	80067b0 <HAL_GetTick>
 800994c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800994e:	e014      	b.n	800997a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8009950:	f7fc ff2e 	bl	80067b0 <HAL_GetTick>
 8009954:	4602      	mov	r2, r0
 8009956:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009958:	1ad3      	subs	r3, r2, r3
 800995a:	2b0a      	cmp	r3, #10
 800995c:	d90d      	bls.n	800997a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009964:	f043 0201 	orr.w	r2, r3, #1
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2203      	movs	r2, #3
 8009972:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8009976:	2301      	movs	r3, #1
 8009978:	e164      	b.n	8009c44 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	699b      	ldr	r3, [r3, #24]
 8009980:	f003 0301 	and.w	r3, r3, #1
 8009984:	2b00      	cmp	r3, #0
 8009986:	d0e3      	beq.n	8009950 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	699a      	ldr	r2, [r3, #24]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f042 0202 	orr.w	r2, r2, #2
 8009996:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	7c1b      	ldrb	r3, [r3, #16]
 800999c:	2b01      	cmp	r3, #1
 800999e:	d108      	bne.n	80099b2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	699a      	ldr	r2, [r3, #24]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80099ae:	619a      	str	r2, [r3, #24]
 80099b0:	e007      	b.n	80099c2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	699a      	ldr	r2, [r3, #24]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80099c0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	7c5b      	ldrb	r3, [r3, #17]
 80099c6:	2b01      	cmp	r3, #1
 80099c8:	d108      	bne.n	80099dc <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	699a      	ldr	r2, [r3, #24]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80099d8:	619a      	str	r2, [r3, #24]
 80099da:	e007      	b.n	80099ec <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	699a      	ldr	r2, [r3, #24]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80099ea:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	7c9b      	ldrb	r3, [r3, #18]
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d108      	bne.n	8009a06 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	699a      	ldr	r2, [r3, #24]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009a02:	619a      	str	r2, [r3, #24]
 8009a04:	e007      	b.n	8009a16 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	699a      	ldr	r2, [r3, #24]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009a14:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	699b      	ldr	r3, [r3, #24]
 8009a1c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	689a      	ldr	r2, [r3, #8]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	430a      	orrs	r2, r1
 8009a2a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	699a      	ldr	r2, [r3, #24]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8009a3a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	691a      	ldr	r2, [r3, #16]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f022 0210 	bic.w	r2, r2, #16
 8009a4a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d108      	bne.n	8009a66 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	699a      	ldr	r2, [r3, #24]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f042 0204 	orr.w	r2, r2, #4
 8009a62:	619a      	str	r2, [r3, #24]
 8009a64:	e030      	b.n	8009ac8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	68db      	ldr	r3, [r3, #12]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d02c      	beq.n	8009ac8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	68db      	ldr	r3, [r3, #12]
 8009a72:	2b02      	cmp	r3, #2
 8009a74:	d020      	beq.n	8009ab8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	699a      	ldr	r2, [r3, #24]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009a84:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	691a      	ldr	r2, [r3, #16]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f042 0210 	orr.w	r2, r2, #16
 8009a94:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	68db      	ldr	r3, [r3, #12]
 8009a9a:	2b03      	cmp	r3, #3
 8009a9c:	d114      	bne.n	8009ac8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	699a      	ldr	r2, [r3, #24]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f042 0220 	orr.w	r2, r2, #32
 8009aac:	619a      	str	r2, [r3, #24]
 8009aae:	e00b      	b.n	8009ac8 <HAL_FDCAN_Init+0x234>
 8009ab0:	08019ca0 	.word	0x08019ca0
 8009ab4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	699a      	ldr	r2, [r3, #24]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f042 0220 	orr.w	r2, r2, #32
 8009ac6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	699b      	ldr	r3, [r3, #24]
 8009acc:	3b01      	subs	r3, #1
 8009ace:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	69db      	ldr	r3, [r3, #28]
 8009ad4:	3b01      	subs	r3, #1
 8009ad6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8009ad8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6a1b      	ldr	r3, [r3, #32]
 8009ade:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8009ae0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	695b      	ldr	r3, [r3, #20]
 8009ae8:	3b01      	subs	r3, #1
 8009aea:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8009af0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8009af2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	689b      	ldr	r3, [r3, #8]
 8009af8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009afc:	d115      	bne.n	8009b2a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b02:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b08:	3b01      	subs	r3, #1
 8009b0a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8009b0c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b12:	3b01      	subs	r3, #1
 8009b14:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8009b16:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b1e:	3b01      	subs	r3, #1
 8009b20:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8009b26:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8009b28:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d00a      	beq.n	8009b48 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	430a      	orrs	r2, r1
 8009b44:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b50:	4413      	add	r3, r2
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d011      	beq.n	8009b7a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8009b5e:	f023 0107 	bic.w	r1, r3, #7
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	3360      	adds	r3, #96	@ 0x60
 8009b6a:	443b      	add	r3, r7
 8009b6c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	430a      	orrs	r2, r1
 8009b76:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d011      	beq.n	8009ba6 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009b8a:	f023 0107 	bic.w	r1, r3, #7
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b92:	009b      	lsls	r3, r3, #2
 8009b94:	3360      	adds	r3, #96	@ 0x60
 8009b96:	443b      	add	r3, r7
 8009b98:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	430a      	orrs	r2, r1
 8009ba2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d012      	beq.n	8009bd4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009bb6:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009bbe:	009b      	lsls	r3, r3, #2
 8009bc0:	3360      	adds	r3, #96	@ 0x60
 8009bc2:	443b      	add	r3, r7
 8009bc4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8009bc8:	011a      	lsls	r2, r3, #4
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	430a      	orrs	r2, r1
 8009bd0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d012      	beq.n	8009c02 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009be4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	3360      	adds	r3, #96	@ 0x60
 8009bf0:	443b      	add	r3, r7
 8009bf2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8009bf6:	021a      	lsls	r2, r3, #8
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	430a      	orrs	r2, r1
 8009bfe:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4a11      	ldr	r2, [pc, #68]	@ (8009c4c <HAL_FDCAN_Init+0x3b8>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d107      	bne.n	8009c1c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	689a      	ldr	r2, [r3, #8]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	f022 0203 	bic.w	r2, r2, #3
 8009c1a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2200      	movs	r2, #0
 8009c28:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2201      	movs	r2, #1
 8009c30:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f000 f80b 	bl	8009c50 <FDCAN_CalcultateRamBlockAddresses>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8009c40:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3760      	adds	r7, #96	@ 0x60
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}
 8009c4c:	4000a000 	.word	0x4000a000

08009c50 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b085      	sub	sp, #20
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c5c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8009c66:	4ba7      	ldr	r3, [pc, #668]	@ (8009f04 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009c68:	4013      	ands	r3, r2
 8009c6a:	68ba      	ldr	r2, [r7, #8]
 8009c6c:	0091      	lsls	r1, r2, #2
 8009c6e:	687a      	ldr	r2, [r7, #4]
 8009c70:	6812      	ldr	r2, [r2, #0]
 8009c72:	430b      	orrs	r3, r1
 8009c74:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c80:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c88:	041a      	lsls	r2, r3, #16
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	430a      	orrs	r2, r1
 8009c90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c98:	68ba      	ldr	r2, [r7, #8]
 8009c9a:	4413      	add	r3, r2
 8009c9c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8009ca6:	4b97      	ldr	r3, [pc, #604]	@ (8009f04 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009ca8:	4013      	ands	r3, r2
 8009caa:	68ba      	ldr	r2, [r7, #8]
 8009cac:	0091      	lsls	r1, r2, #2
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	6812      	ldr	r2, [r2, #0]
 8009cb2:	430b      	orrs	r3, r1
 8009cb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cc0:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cc8:	041a      	lsls	r2, r3, #16
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	430a      	orrs	r2, r1
 8009cd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cd8:	005b      	lsls	r3, r3, #1
 8009cda:	68ba      	ldr	r2, [r7, #8]
 8009cdc:	4413      	add	r3, r2
 8009cde:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8009ce8:	4b86      	ldr	r3, [pc, #536]	@ (8009f04 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009cea:	4013      	ands	r3, r2
 8009cec:	68ba      	ldr	r2, [r7, #8]
 8009cee:	0091      	lsls	r1, r2, #2
 8009cf0:	687a      	ldr	r2, [r7, #4]
 8009cf2:	6812      	ldr	r2, [r2, #0]
 8009cf4:	430b      	orrs	r3, r1
 8009cf6:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009d02:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d0a:	041a      	lsls	r2, r3, #16
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	430a      	orrs	r2, r1
 8009d12:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d1a:	687a      	ldr	r2, [r7, #4]
 8009d1c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8009d1e:	fb02 f303 	mul.w	r3, r2, r3
 8009d22:	68ba      	ldr	r2, [r7, #8]
 8009d24:	4413      	add	r3, r2
 8009d26:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8009d30:	4b74      	ldr	r3, [pc, #464]	@ (8009f04 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009d32:	4013      	ands	r3, r2
 8009d34:	68ba      	ldr	r2, [r7, #8]
 8009d36:	0091      	lsls	r1, r2, #2
 8009d38:	687a      	ldr	r2, [r7, #4]
 8009d3a:	6812      	ldr	r2, [r2, #0]
 8009d3c:	430b      	orrs	r3, r1
 8009d3e:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009d4a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d52:	041a      	lsls	r2, r3, #16
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	430a      	orrs	r2, r1
 8009d5a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d62:	687a      	ldr	r2, [r7, #4]
 8009d64:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009d66:	fb02 f303 	mul.w	r3, r2, r3
 8009d6a:	68ba      	ldr	r2, [r7, #8]
 8009d6c:	4413      	add	r3, r2
 8009d6e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8009d78:	4b62      	ldr	r3, [pc, #392]	@ (8009f04 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009d7a:	4013      	ands	r3, r2
 8009d7c:	68ba      	ldr	r2, [r7, #8]
 8009d7e:	0091      	lsls	r1, r2, #2
 8009d80:	687a      	ldr	r2, [r7, #4]
 8009d82:	6812      	ldr	r2, [r2, #0]
 8009d84:	430b      	orrs	r3, r1
 8009d86:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009d92:	fb02 f303 	mul.w	r3, r2, r3
 8009d96:	68ba      	ldr	r2, [r7, #8]
 8009d98:	4413      	add	r3, r2
 8009d9a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8009da4:	4b57      	ldr	r3, [pc, #348]	@ (8009f04 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009da6:	4013      	ands	r3, r2
 8009da8:	68ba      	ldr	r2, [r7, #8]
 8009daa:	0091      	lsls	r1, r2, #2
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	6812      	ldr	r2, [r2, #0]
 8009db0:	430b      	orrs	r3, r1
 8009db2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009dbe:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dc6:	041a      	lsls	r2, r3, #16
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	430a      	orrs	r2, r1
 8009dce:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dd6:	005b      	lsls	r3, r3, #1
 8009dd8:	68ba      	ldr	r2, [r7, #8]
 8009dda:	4413      	add	r3, r2
 8009ddc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8009de6:	4b47      	ldr	r3, [pc, #284]	@ (8009f04 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009de8:	4013      	ands	r3, r2
 8009dea:	68ba      	ldr	r2, [r7, #8]
 8009dec:	0091      	lsls	r1, r2, #2
 8009dee:	687a      	ldr	r2, [r7, #4]
 8009df0:	6812      	ldr	r2, [r2, #0]
 8009df2:	430b      	orrs	r3, r1
 8009df4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009e00:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e08:	041a      	lsls	r2, r3, #16
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	430a      	orrs	r2, r1
 8009e10:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009e1c:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e24:	061a      	lsls	r2, r3, #24
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	430a      	orrs	r2, r1
 8009e2c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e34:	4b34      	ldr	r3, [pc, #208]	@ (8009f08 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8009e36:	4413      	add	r3, r2
 8009e38:	009a      	lsls	r2, r3, #2
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e46:	009b      	lsls	r3, r3, #2
 8009e48:	441a      	add	r2, r3
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e56:	00db      	lsls	r3, r3, #3
 8009e58:	441a      	add	r2, r3
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e66:	6879      	ldr	r1, [r7, #4]
 8009e68:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8009e6a:	fb01 f303 	mul.w	r3, r1, r3
 8009e6e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8009e70:	441a      	add	r2, r3
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e7e:	6879      	ldr	r1, [r7, #4]
 8009e80:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8009e82:	fb01 f303 	mul.w	r3, r1, r3
 8009e86:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8009e88:	441a      	add	r2, r3
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e96:	6879      	ldr	r1, [r7, #4]
 8009e98:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8009e9a:	fb01 f303 	mul.w	r3, r1, r3
 8009e9e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8009ea0:	441a      	add	r2, r3
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009eb2:	00db      	lsls	r3, r3, #3
 8009eb4:	441a      	add	r2, r3
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ec6:	6879      	ldr	r1, [r7, #4]
 8009ec8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8009eca:	fb01 f303 	mul.w	r3, r1, r3
 8009ece:	009b      	lsls	r3, r3, #2
 8009ed0:	441a      	add	r2, r3
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ee2:	6879      	ldr	r1, [r7, #4]
 8009ee4:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8009ee6:	fb01 f303 	mul.w	r3, r1, r3
 8009eea:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8009eec:	441a      	add	r2, r3
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009efa:	4a04      	ldr	r2, [pc, #16]	@ (8009f0c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d915      	bls.n	8009f2c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8009f00:	e006      	b.n	8009f10 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8009f02:	bf00      	nop
 8009f04:	ffff0003 	.word	0xffff0003
 8009f08:	10002b00 	.word	0x10002b00
 8009f0c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009f16:	f043 0220 	orr.w	r2, r3, #32
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2203      	movs	r2, #3
 8009f24:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	e010      	b.n	8009f4e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f30:	60fb      	str	r3, [r7, #12]
 8009f32:	e005      	b.n	8009f40 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2200      	movs	r2, #0
 8009f38:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	3304      	adds	r3, #4
 8009f3e:	60fb      	str	r3, [r7, #12]
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f46:	68fa      	ldr	r2, [r7, #12]
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d3f3      	bcc.n	8009f34 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8009f4c:	2300      	movs	r3, #0
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3714      	adds	r7, #20
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr
 8009f5a:	bf00      	nop

08009f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b089      	sub	sp, #36	@ 0x24
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009f66:	2300      	movs	r3, #0
 8009f68:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009f6a:	4b89      	ldr	r3, [pc, #548]	@ (800a190 <HAL_GPIO_Init+0x234>)
 8009f6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009f6e:	e194      	b.n	800a29a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	681a      	ldr	r2, [r3, #0]
 8009f74:	2101      	movs	r1, #1
 8009f76:	69fb      	ldr	r3, [r7, #28]
 8009f78:	fa01 f303 	lsl.w	r3, r1, r3
 8009f7c:	4013      	ands	r3, r2
 8009f7e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	f000 8186 	beq.w	800a294 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	f003 0303 	and.w	r3, r3, #3
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	d005      	beq.n	8009fa0 <HAL_GPIO_Init+0x44>
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	f003 0303 	and.w	r3, r3, #3
 8009f9c:	2b02      	cmp	r3, #2
 8009f9e:	d130      	bne.n	800a002 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	689b      	ldr	r3, [r3, #8]
 8009fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009fa6:	69fb      	ldr	r3, [r7, #28]
 8009fa8:	005b      	lsls	r3, r3, #1
 8009faa:	2203      	movs	r2, #3
 8009fac:	fa02 f303 	lsl.w	r3, r2, r3
 8009fb0:	43db      	mvns	r3, r3
 8009fb2:	69ba      	ldr	r2, [r7, #24]
 8009fb4:	4013      	ands	r3, r2
 8009fb6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	68da      	ldr	r2, [r3, #12]
 8009fbc:	69fb      	ldr	r3, [r7, #28]
 8009fbe:	005b      	lsls	r3, r3, #1
 8009fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8009fc4:	69ba      	ldr	r2, [r7, #24]
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	69ba      	ldr	r2, [r7, #24]
 8009fce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	69fb      	ldr	r3, [r7, #28]
 8009fda:	fa02 f303 	lsl.w	r3, r2, r3
 8009fde:	43db      	mvns	r3, r3
 8009fe0:	69ba      	ldr	r2, [r7, #24]
 8009fe2:	4013      	ands	r3, r2
 8009fe4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	091b      	lsrs	r3, r3, #4
 8009fec:	f003 0201 	and.w	r2, r3, #1
 8009ff0:	69fb      	ldr	r3, [r7, #28]
 8009ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ff6:	69ba      	ldr	r2, [r7, #24]
 8009ff8:	4313      	orrs	r3, r2
 8009ffa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	69ba      	ldr	r2, [r7, #24]
 800a000:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	685b      	ldr	r3, [r3, #4]
 800a006:	f003 0303 	and.w	r3, r3, #3
 800a00a:	2b03      	cmp	r3, #3
 800a00c:	d017      	beq.n	800a03e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	68db      	ldr	r3, [r3, #12]
 800a012:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a014:	69fb      	ldr	r3, [r7, #28]
 800a016:	005b      	lsls	r3, r3, #1
 800a018:	2203      	movs	r2, #3
 800a01a:	fa02 f303 	lsl.w	r3, r2, r3
 800a01e:	43db      	mvns	r3, r3
 800a020:	69ba      	ldr	r2, [r7, #24]
 800a022:	4013      	ands	r3, r2
 800a024:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	689a      	ldr	r2, [r3, #8]
 800a02a:	69fb      	ldr	r3, [r7, #28]
 800a02c:	005b      	lsls	r3, r3, #1
 800a02e:	fa02 f303 	lsl.w	r3, r2, r3
 800a032:	69ba      	ldr	r2, [r7, #24]
 800a034:	4313      	orrs	r3, r2
 800a036:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	69ba      	ldr	r2, [r7, #24]
 800a03c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	685b      	ldr	r3, [r3, #4]
 800a042:	f003 0303 	and.w	r3, r3, #3
 800a046:	2b02      	cmp	r3, #2
 800a048:	d123      	bne.n	800a092 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a04a:	69fb      	ldr	r3, [r7, #28]
 800a04c:	08da      	lsrs	r2, r3, #3
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	3208      	adds	r2, #8
 800a052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a056:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a058:	69fb      	ldr	r3, [r7, #28]
 800a05a:	f003 0307 	and.w	r3, r3, #7
 800a05e:	009b      	lsls	r3, r3, #2
 800a060:	220f      	movs	r2, #15
 800a062:	fa02 f303 	lsl.w	r3, r2, r3
 800a066:	43db      	mvns	r3, r3
 800a068:	69ba      	ldr	r2, [r7, #24]
 800a06a:	4013      	ands	r3, r2
 800a06c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	691a      	ldr	r2, [r3, #16]
 800a072:	69fb      	ldr	r3, [r7, #28]
 800a074:	f003 0307 	and.w	r3, r3, #7
 800a078:	009b      	lsls	r3, r3, #2
 800a07a:	fa02 f303 	lsl.w	r3, r2, r3
 800a07e:	69ba      	ldr	r2, [r7, #24]
 800a080:	4313      	orrs	r3, r2
 800a082:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a084:	69fb      	ldr	r3, [r7, #28]
 800a086:	08da      	lsrs	r2, r3, #3
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	3208      	adds	r2, #8
 800a08c:	69b9      	ldr	r1, [r7, #24]
 800a08e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a098:	69fb      	ldr	r3, [r7, #28]
 800a09a:	005b      	lsls	r3, r3, #1
 800a09c:	2203      	movs	r2, #3
 800a09e:	fa02 f303 	lsl.w	r3, r2, r3
 800a0a2:	43db      	mvns	r3, r3
 800a0a4:	69ba      	ldr	r2, [r7, #24]
 800a0a6:	4013      	ands	r3, r2
 800a0a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	f003 0203 	and.w	r2, r3, #3
 800a0b2:	69fb      	ldr	r3, [r7, #28]
 800a0b4:	005b      	lsls	r3, r3, #1
 800a0b6:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ba:	69ba      	ldr	r2, [r7, #24]
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	69ba      	ldr	r2, [r7, #24]
 800a0c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	685b      	ldr	r3, [r3, #4]
 800a0ca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	f000 80e0 	beq.w	800a294 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a0d4:	4b2f      	ldr	r3, [pc, #188]	@ (800a194 <HAL_GPIO_Init+0x238>)
 800a0d6:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800a0da:	4a2e      	ldr	r2, [pc, #184]	@ (800a194 <HAL_GPIO_Init+0x238>)
 800a0dc:	f043 0302 	orr.w	r3, r3, #2
 800a0e0:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800a0e4:	4b2b      	ldr	r3, [pc, #172]	@ (800a194 <HAL_GPIO_Init+0x238>)
 800a0e6:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800a0ea:	f003 0302 	and.w	r3, r3, #2
 800a0ee:	60fb      	str	r3, [r7, #12]
 800a0f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a0f2:	4a29      	ldr	r2, [pc, #164]	@ (800a198 <HAL_GPIO_Init+0x23c>)
 800a0f4:	69fb      	ldr	r3, [r7, #28]
 800a0f6:	089b      	lsrs	r3, r3, #2
 800a0f8:	3302      	adds	r3, #2
 800a0fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a100:	69fb      	ldr	r3, [r7, #28]
 800a102:	f003 0303 	and.w	r3, r3, #3
 800a106:	009b      	lsls	r3, r3, #2
 800a108:	220f      	movs	r2, #15
 800a10a:	fa02 f303 	lsl.w	r3, r2, r3
 800a10e:	43db      	mvns	r3, r3
 800a110:	69ba      	ldr	r2, [r7, #24]
 800a112:	4013      	ands	r3, r2
 800a114:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	4a20      	ldr	r2, [pc, #128]	@ (800a19c <HAL_GPIO_Init+0x240>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d052      	beq.n	800a1c4 <HAL_GPIO_Init+0x268>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	4a1f      	ldr	r2, [pc, #124]	@ (800a1a0 <HAL_GPIO_Init+0x244>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d031      	beq.n	800a18a <HAL_GPIO_Init+0x22e>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	4a1e      	ldr	r2, [pc, #120]	@ (800a1a4 <HAL_GPIO_Init+0x248>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d02b      	beq.n	800a186 <HAL_GPIO_Init+0x22a>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	4a1d      	ldr	r2, [pc, #116]	@ (800a1a8 <HAL_GPIO_Init+0x24c>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d025      	beq.n	800a182 <HAL_GPIO_Init+0x226>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	4a1c      	ldr	r2, [pc, #112]	@ (800a1ac <HAL_GPIO_Init+0x250>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d01f      	beq.n	800a17e <HAL_GPIO_Init+0x222>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	4a1b      	ldr	r2, [pc, #108]	@ (800a1b0 <HAL_GPIO_Init+0x254>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d019      	beq.n	800a17a <HAL_GPIO_Init+0x21e>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	4a1a      	ldr	r2, [pc, #104]	@ (800a1b4 <HAL_GPIO_Init+0x258>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d013      	beq.n	800a176 <HAL_GPIO_Init+0x21a>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	4a19      	ldr	r2, [pc, #100]	@ (800a1b8 <HAL_GPIO_Init+0x25c>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d00d      	beq.n	800a172 <HAL_GPIO_Init+0x216>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	4a18      	ldr	r2, [pc, #96]	@ (800a1bc <HAL_GPIO_Init+0x260>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d007      	beq.n	800a16e <HAL_GPIO_Init+0x212>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	4a17      	ldr	r2, [pc, #92]	@ (800a1c0 <HAL_GPIO_Init+0x264>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d101      	bne.n	800a16a <HAL_GPIO_Init+0x20e>
 800a166:	2309      	movs	r3, #9
 800a168:	e02d      	b.n	800a1c6 <HAL_GPIO_Init+0x26a>
 800a16a:	230a      	movs	r3, #10
 800a16c:	e02b      	b.n	800a1c6 <HAL_GPIO_Init+0x26a>
 800a16e:	2308      	movs	r3, #8
 800a170:	e029      	b.n	800a1c6 <HAL_GPIO_Init+0x26a>
 800a172:	2307      	movs	r3, #7
 800a174:	e027      	b.n	800a1c6 <HAL_GPIO_Init+0x26a>
 800a176:	2306      	movs	r3, #6
 800a178:	e025      	b.n	800a1c6 <HAL_GPIO_Init+0x26a>
 800a17a:	2305      	movs	r3, #5
 800a17c:	e023      	b.n	800a1c6 <HAL_GPIO_Init+0x26a>
 800a17e:	2304      	movs	r3, #4
 800a180:	e021      	b.n	800a1c6 <HAL_GPIO_Init+0x26a>
 800a182:	2303      	movs	r3, #3
 800a184:	e01f      	b.n	800a1c6 <HAL_GPIO_Init+0x26a>
 800a186:	2302      	movs	r3, #2
 800a188:	e01d      	b.n	800a1c6 <HAL_GPIO_Init+0x26a>
 800a18a:	2301      	movs	r3, #1
 800a18c:	e01b      	b.n	800a1c6 <HAL_GPIO_Init+0x26a>
 800a18e:	bf00      	nop
 800a190:	58000080 	.word	0x58000080
 800a194:	58024400 	.word	0x58024400
 800a198:	58000400 	.word	0x58000400
 800a19c:	58020000 	.word	0x58020000
 800a1a0:	58020400 	.word	0x58020400
 800a1a4:	58020800 	.word	0x58020800
 800a1a8:	58020c00 	.word	0x58020c00
 800a1ac:	58021000 	.word	0x58021000
 800a1b0:	58021400 	.word	0x58021400
 800a1b4:	58021800 	.word	0x58021800
 800a1b8:	58021c00 	.word	0x58021c00
 800a1bc:	58022000 	.word	0x58022000
 800a1c0:	58022400 	.word	0x58022400
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	69fa      	ldr	r2, [r7, #28]
 800a1c8:	f002 0203 	and.w	r2, r2, #3
 800a1cc:	0092      	lsls	r2, r2, #2
 800a1ce:	4093      	lsls	r3, r2
 800a1d0:	69ba      	ldr	r2, [r7, #24]
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a1d6:	4938      	ldr	r1, [pc, #224]	@ (800a2b8 <HAL_GPIO_Init+0x35c>)
 800a1d8:	69fb      	ldr	r3, [r7, #28]
 800a1da:	089b      	lsrs	r3, r3, #2
 800a1dc:	3302      	adds	r3, #2
 800a1de:	69ba      	ldr	r2, [r7, #24]
 800a1e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a1e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	43db      	mvns	r3, r3
 800a1f0:	69ba      	ldr	r2, [r7, #24]
 800a1f2:	4013      	ands	r3, r2
 800a1f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d003      	beq.n	800a20a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800a202:	69ba      	ldr	r2, [r7, #24]
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	4313      	orrs	r3, r2
 800a208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800a20a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a20e:	69bb      	ldr	r3, [r7, #24]
 800a210:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a212:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	43db      	mvns	r3, r3
 800a21e:	69ba      	ldr	r2, [r7, #24]
 800a220:	4013      	ands	r3, r2
 800a222:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d003      	beq.n	800a238 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800a230:	69ba      	ldr	r2, [r7, #24]
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	4313      	orrs	r3, r2
 800a236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800a238:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a23c:	69bb      	ldr	r3, [r7, #24]
 800a23e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	685b      	ldr	r3, [r3, #4]
 800a244:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	43db      	mvns	r3, r3
 800a24a:	69ba      	ldr	r2, [r7, #24]
 800a24c:	4013      	ands	r3, r2
 800a24e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d003      	beq.n	800a264 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800a25c:	69ba      	ldr	r2, [r7, #24]
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	4313      	orrs	r3, r2
 800a262:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	69ba      	ldr	r2, [r7, #24]
 800a268:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	43db      	mvns	r3, r3
 800a274:	69ba      	ldr	r2, [r7, #24]
 800a276:	4013      	ands	r3, r2
 800a278:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	685b      	ldr	r3, [r3, #4]
 800a27e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a282:	2b00      	cmp	r3, #0
 800a284:	d003      	beq.n	800a28e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800a286:	69ba      	ldr	r2, [r7, #24]
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	4313      	orrs	r3, r2
 800a28c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	69ba      	ldr	r2, [r7, #24]
 800a292:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800a294:	69fb      	ldr	r3, [r7, #28]
 800a296:	3301      	adds	r3, #1
 800a298:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	681a      	ldr	r2, [r3, #0]
 800a29e:	69fb      	ldr	r3, [r7, #28]
 800a2a0:	fa22 f303 	lsr.w	r3, r2, r3
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	f47f ae63 	bne.w	8009f70 <HAL_GPIO_Init+0x14>
  }
}
 800a2aa:	bf00      	nop
 800a2ac:	bf00      	nop
 800a2ae:	3724      	adds	r7, #36	@ 0x24
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr
 800a2b8:	58000400 	.word	0x58000400

0800a2bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b083      	sub	sp, #12
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	807b      	strh	r3, [r7, #2]
 800a2c8:	4613      	mov	r3, r2
 800a2ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a2cc:	787b      	ldrb	r3, [r7, #1]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d003      	beq.n	800a2da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a2d2:	887a      	ldrh	r2, [r7, #2]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a2d8:	e003      	b.n	800a2e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a2da:	887b      	ldrh	r3, [r7, #2]
 800a2dc:	041a      	lsls	r2, r3, #16
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	619a      	str	r2, [r3, #24]
}
 800a2e2:	bf00      	nop
 800a2e4:	370c      	adds	r7, #12
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ec:	4770      	bx	lr
	...

0800a2f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b082      	sub	sp, #8
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d101      	bne.n	800a302 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a2fe:	2301      	movs	r3, #1
 800a300:	e08b      	b.n	800a41a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a308:	b2db      	uxtb	r3, r3
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d106      	bne.n	800a31c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2200      	movs	r2, #0
 800a312:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f7f8 f8b8 	bl	800248c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2224      	movs	r2, #36	@ 0x24
 800a320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	681a      	ldr	r2, [r3, #0]
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f022 0201 	bic.w	r2, r2, #1
 800a332:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	685a      	ldr	r2, [r3, #4]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800a340:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	689a      	ldr	r2, [r3, #8]
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a350:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	68db      	ldr	r3, [r3, #12]
 800a356:	2b01      	cmp	r3, #1
 800a358:	d107      	bne.n	800a36a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	689a      	ldr	r2, [r3, #8]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a366:	609a      	str	r2, [r3, #8]
 800a368:	e006      	b.n	800a378 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	689a      	ldr	r2, [r3, #8]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800a376:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	68db      	ldr	r3, [r3, #12]
 800a37c:	2b02      	cmp	r3, #2
 800a37e:	d108      	bne.n	800a392 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	685a      	ldr	r2, [r3, #4]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a38e:	605a      	str	r2, [r3, #4]
 800a390:	e007      	b.n	800a3a2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	685a      	ldr	r2, [r3, #4]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a3a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	6859      	ldr	r1, [r3, #4]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681a      	ldr	r2, [r3, #0]
 800a3ac:	4b1d      	ldr	r3, [pc, #116]	@ (800a424 <HAL_I2C_Init+0x134>)
 800a3ae:	430b      	orrs	r3, r1
 800a3b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	68da      	ldr	r2, [r3, #12]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a3c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	691a      	ldr	r2, [r3, #16]
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	695b      	ldr	r3, [r3, #20]
 800a3ca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	699b      	ldr	r3, [r3, #24]
 800a3d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	430a      	orrs	r2, r1
 800a3da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	69d9      	ldr	r1, [r3, #28]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6a1a      	ldr	r2, [r3, #32]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	430a      	orrs	r2, r1
 800a3ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	681a      	ldr	r2, [r3, #0]
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f042 0201 	orr.w	r2, r2, #1
 800a3fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2200      	movs	r2, #0
 800a400:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2220      	movs	r2, #32
 800a406:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2200      	movs	r2, #0
 800a40e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2200      	movs	r2, #0
 800a414:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800a418:	2300      	movs	r3, #0
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3708      	adds	r7, #8
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop
 800a424:	02008000 	.word	0x02008000

0800a428 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a428:	b480      	push	{r7}
 800a42a:	b083      	sub	sp, #12
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a438:	b2db      	uxtb	r3, r3
 800a43a:	2b20      	cmp	r3, #32
 800a43c:	d138      	bne.n	800a4b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a444:	2b01      	cmp	r3, #1
 800a446:	d101      	bne.n	800a44c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a448:	2302      	movs	r3, #2
 800a44a:	e032      	b.n	800a4b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2201      	movs	r2, #1
 800a450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2224      	movs	r2, #36	@ 0x24
 800a458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	681a      	ldr	r2, [r3, #0]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f022 0201 	bic.w	r2, r2, #1
 800a46a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	681a      	ldr	r2, [r3, #0]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a47a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	6819      	ldr	r1, [r3, #0]
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	683a      	ldr	r2, [r7, #0]
 800a488:	430a      	orrs	r2, r1
 800a48a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f042 0201 	orr.w	r2, r2, #1
 800a49a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2220      	movs	r2, #32
 800a4a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	e000      	b.n	800a4b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a4b0:	2302      	movs	r3, #2
  }
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	370c      	adds	r7, #12
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4bc:	4770      	bx	lr

0800a4be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a4be:	b480      	push	{r7}
 800a4c0:	b085      	sub	sp, #20
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	6078      	str	r0, [r7, #4]
 800a4c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a4ce:	b2db      	uxtb	r3, r3
 800a4d0:	2b20      	cmp	r3, #32
 800a4d2:	d139      	bne.n	800a548 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a4da:	2b01      	cmp	r3, #1
 800a4dc:	d101      	bne.n	800a4e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a4de:	2302      	movs	r3, #2
 800a4e0:	e033      	b.n	800a54a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2224      	movs	r2, #36	@ 0x24
 800a4ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	681a      	ldr	r2, [r3, #0]
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f022 0201 	bic.w	r2, r2, #1
 800a500:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a510:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	021b      	lsls	r3, r3, #8
 800a516:	68fa      	ldr	r2, [r7, #12]
 800a518:	4313      	orrs	r3, r2
 800a51a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	68fa      	ldr	r2, [r7, #12]
 800a522:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	681a      	ldr	r2, [r3, #0]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f042 0201 	orr.w	r2, r2, #1
 800a532:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2220      	movs	r2, #32
 800a538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2200      	movs	r2, #0
 800a540:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a544:	2300      	movs	r3, #0
 800a546:	e000      	b.n	800a54a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a548:	2302      	movs	r3, #2
  }
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3714      	adds	r7, #20
 800a54e:	46bd      	mov	sp, r7
 800a550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a554:	4770      	bx	lr
	...

0800a558 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b084      	sub	sp, #16
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a560:	4b19      	ldr	r3, [pc, #100]	@ (800a5c8 <HAL_PWREx_ConfigSupply+0x70>)
 800a562:	68db      	ldr	r3, [r3, #12]
 800a564:	f003 0304 	and.w	r3, r3, #4
 800a568:	2b04      	cmp	r3, #4
 800a56a:	d00a      	beq.n	800a582 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a56c:	4b16      	ldr	r3, [pc, #88]	@ (800a5c8 <HAL_PWREx_ConfigSupply+0x70>)
 800a56e:	68db      	ldr	r3, [r3, #12]
 800a570:	f003 0307 	and.w	r3, r3, #7
 800a574:	687a      	ldr	r2, [r7, #4]
 800a576:	429a      	cmp	r2, r3
 800a578:	d001      	beq.n	800a57e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a57a:	2301      	movs	r3, #1
 800a57c:	e01f      	b.n	800a5be <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a57e:	2300      	movs	r3, #0
 800a580:	e01d      	b.n	800a5be <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a582:	4b11      	ldr	r3, [pc, #68]	@ (800a5c8 <HAL_PWREx_ConfigSupply+0x70>)
 800a584:	68db      	ldr	r3, [r3, #12]
 800a586:	f023 0207 	bic.w	r2, r3, #7
 800a58a:	490f      	ldr	r1, [pc, #60]	@ (800a5c8 <HAL_PWREx_ConfigSupply+0x70>)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	4313      	orrs	r3, r2
 800a590:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a592:	f7fc f90d 	bl	80067b0 <HAL_GetTick>
 800a596:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a598:	e009      	b.n	800a5ae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a59a:	f7fc f909 	bl	80067b0 <HAL_GetTick>
 800a59e:	4602      	mov	r2, r0
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	1ad3      	subs	r3, r2, r3
 800a5a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a5a8:	d901      	bls.n	800a5ae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	e007      	b.n	800a5be <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a5ae:	4b06      	ldr	r3, [pc, #24]	@ (800a5c8 <HAL_PWREx_ConfigSupply+0x70>)
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a5b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a5ba:	d1ee      	bne.n	800a59a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a5bc:	2300      	movs	r3, #0
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3710      	adds	r7, #16
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}
 800a5c6:	bf00      	nop
 800a5c8:	58024800 	.word	0x58024800

0800a5cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b08c      	sub	sp, #48	@ 0x30
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d102      	bne.n	800a5e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a5da:	2301      	movs	r3, #1
 800a5dc:	f000 bc1f 	b.w	800ae1e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f003 0301 	and.w	r3, r3, #1
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	f000 80b3 	beq.w	800a754 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a5ee:	4b95      	ldr	r3, [pc, #596]	@ (800a844 <HAL_RCC_OscConfig+0x278>)
 800a5f0:	691b      	ldr	r3, [r3, #16]
 800a5f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a5f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a5f8:	4b92      	ldr	r3, [pc, #584]	@ (800a844 <HAL_RCC_OscConfig+0x278>)
 800a5fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a5fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a600:	2b10      	cmp	r3, #16
 800a602:	d007      	beq.n	800a614 <HAL_RCC_OscConfig+0x48>
 800a604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a606:	2b18      	cmp	r3, #24
 800a608:	d112      	bne.n	800a630 <HAL_RCC_OscConfig+0x64>
 800a60a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a60c:	f003 0303 	and.w	r3, r3, #3
 800a610:	2b02      	cmp	r3, #2
 800a612:	d10d      	bne.n	800a630 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a614:	4b8b      	ldr	r3, [pc, #556]	@ (800a844 <HAL_RCC_OscConfig+0x278>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	f000 8098 	beq.w	800a752 <HAL_RCC_OscConfig+0x186>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	2b00      	cmp	r3, #0
 800a628:	f040 8093 	bne.w	800a752 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800a62c:	2301      	movs	r3, #1
 800a62e:	e3f6      	b.n	800ae1e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a638:	d106      	bne.n	800a648 <HAL_RCC_OscConfig+0x7c>
 800a63a:	4b82      	ldr	r3, [pc, #520]	@ (800a844 <HAL_RCC_OscConfig+0x278>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	4a81      	ldr	r2, [pc, #516]	@ (800a844 <HAL_RCC_OscConfig+0x278>)
 800a640:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a644:	6013      	str	r3, [r2, #0]
 800a646:	e058      	b.n	800a6fa <HAL_RCC_OscConfig+0x12e>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d112      	bne.n	800a676 <HAL_RCC_OscConfig+0xaa>
 800a650:	4b7c      	ldr	r3, [pc, #496]	@ (800a844 <HAL_RCC_OscConfig+0x278>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	4a7b      	ldr	r2, [pc, #492]	@ (800a844 <HAL_RCC_OscConfig+0x278>)
 800a656:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a65a:	6013      	str	r3, [r2, #0]
 800a65c:	4b79      	ldr	r3, [pc, #484]	@ (800a844 <HAL_RCC_OscConfig+0x278>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	4a78      	ldr	r2, [pc, #480]	@ (800a844 <HAL_RCC_OscConfig+0x278>)
 800a662:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a666:	6013      	str	r3, [r2, #0]
 800a668:	4b76      	ldr	r3, [pc, #472]	@ (800a844 <HAL_RCC_OscConfig+0x278>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	4a75      	ldr	r2, [pc, #468]	@ (800a844 <HAL_RCC_OscConfig+0x278>)
 800a66e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a672:	6013      	str	r3, [r2, #0]
 800a674:	e041      	b.n	800a6fa <HAL_RCC_OscConfig+0x12e>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a67e:	d112      	bne.n	800a6a6 <HAL_RCC_OscConfig+0xda>
 800a680:	4b70      	ldr	r3, [pc, #448]	@ (800a844 <HAL_RCC_OscConfig+0x278>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4a6f      	ldr	r2, [pc, #444]	@ (800a844 <HAL_RCC_OscConfig+0x278>)
 800a686:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a68a:	6013      	str	r3, [r2, #0]
 800a68c:	4b6d      	ldr	r3, [pc, #436]	@ (800a844 <HAL_RCC_OscConfig+0x278>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4a6c      	ldr	r2, [pc, #432]	@ (800a844 <HAL_RCC_OscConfig+0x278>)
 800a692:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a696:	6013      	str	r3, [r2, #0]
 800a698:	4b6a      	ldr	r3, [pc, #424]	@ (800a844 <HAL_RCC_OscConfig+0x278>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4a69      	ldr	r2, [pc, #420]	@ (800a844 <HAL_RCC_OscConfig+0x278>)
 800a69e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a6a2:	6013      	str	r3, [r2, #0]
 800a6a4:	e029      	b.n	800a6fa <HAL_RCC_OscConfig+0x12e>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800a6ae:	d112      	bne.n	800a6d6 <HAL_RCC_OscConfig+0x10a>
 800a6b0:	4b64      	ldr	r3, [pc, #400]	@ (800a844 <HAL_RCC_OscConfig+0x278>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	4a63      	ldr	r2, [pc, #396]	@ (800a844 <HAL_RCC_OscConfig+0x278>)
 800a6b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a6ba:	6013      	str	r3, [r2, #0]
 800a6bc:	4b61      	ldr	r3, [pc, #388]	@ (800a844 <HAL_RCC_OscConfig+0x278>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4a60      	ldr	r2, [pc, #384]	@ (800a844 <HAL_RCC_OscConfig+0x278>)
 800a6c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a6c6:	6013      	str	r3, [r2, #0]
 800a6c8:	4b5e      	ldr	r3, [pc, #376]	@ (800a844 <HAL_RCC_OscConfig+0x278>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a5d      	ldr	r2, [pc, #372]	@ (800a844 <HAL_RCC_OscConfig+0x278>)
 800a6ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a6d2:	6013      	str	r3, [r2, #0]
 800a6d4:	e011      	b.n	800a6fa <HAL_RCC_OscConfig+0x12e>
 800a6d6:	4b5b      	ldr	r3, [pc, #364]	@ (800a844 <HAL_RCC_OscConfig+0x278>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	4a5a      	ldr	r2, [pc, #360]	@ (800a844 <HAL_RCC_OscConfig+0x278>)
 800a6dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a6e0:	6013      	str	r3, [r2, #0]
 800a6e2:	4b58      	ldr	r3, [pc, #352]	@ (800a844 <HAL_RCC_OscConfig+0x278>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4a57      	ldr	r2, [pc, #348]	@ (800a844 <HAL_RCC_OscConfig+0x278>)
 800a6e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a6ec:	6013      	str	r3, [r2, #0]
 800a6ee:	4b55      	ldr	r3, [pc, #340]	@ (800a844 <HAL_RCC_OscConfig+0x278>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4a54      	ldr	r2, [pc, #336]	@ (800a844 <HAL_RCC_OscConfig+0x278>)
 800a6f4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a6f8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d013      	beq.n	800a72a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a702:	f7fc f855 	bl	80067b0 <HAL_GetTick>
 800a706:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a708:	e008      	b.n	800a71c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a70a:	f7fc f851 	bl	80067b0 <HAL_GetTick>
 800a70e:	4602      	mov	r2, r0
 800a710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a712:	1ad3      	subs	r3, r2, r3
 800a714:	2b64      	cmp	r3, #100	@ 0x64
 800a716:	d901      	bls.n	800a71c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800a718:	2303      	movs	r3, #3
 800a71a:	e380      	b.n	800ae1e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a71c:	4b49      	ldr	r3, [pc, #292]	@ (800a844 <HAL_RCC_OscConfig+0x278>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a724:	2b00      	cmp	r3, #0
 800a726:	d0f0      	beq.n	800a70a <HAL_RCC_OscConfig+0x13e>
 800a728:	e014      	b.n	800a754 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a72a:	f7fc f841 	bl	80067b0 <HAL_GetTick>
 800a72e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a730:	e008      	b.n	800a744 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a732:	f7fc f83d 	bl	80067b0 <HAL_GetTick>
 800a736:	4602      	mov	r2, r0
 800a738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a73a:	1ad3      	subs	r3, r2, r3
 800a73c:	2b64      	cmp	r3, #100	@ 0x64
 800a73e:	d901      	bls.n	800a744 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800a740:	2303      	movs	r3, #3
 800a742:	e36c      	b.n	800ae1e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a744:	4b3f      	ldr	r3, [pc, #252]	@ (800a844 <HAL_RCC_OscConfig+0x278>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d1f0      	bne.n	800a732 <HAL_RCC_OscConfig+0x166>
 800a750:	e000      	b.n	800a754 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a752:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f003 0302 	and.w	r3, r3, #2
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	f000 808c 	beq.w	800a87a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a762:	4b38      	ldr	r3, [pc, #224]	@ (800a844 <HAL_RCC_OscConfig+0x278>)
 800a764:	691b      	ldr	r3, [r3, #16]
 800a766:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a76a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a76c:	4b35      	ldr	r3, [pc, #212]	@ (800a844 <HAL_RCC_OscConfig+0x278>)
 800a76e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a770:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a772:	6a3b      	ldr	r3, [r7, #32]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d007      	beq.n	800a788 <HAL_RCC_OscConfig+0x1bc>
 800a778:	6a3b      	ldr	r3, [r7, #32]
 800a77a:	2b18      	cmp	r3, #24
 800a77c:	d137      	bne.n	800a7ee <HAL_RCC_OscConfig+0x222>
 800a77e:	69fb      	ldr	r3, [r7, #28]
 800a780:	f003 0303 	and.w	r3, r3, #3
 800a784:	2b00      	cmp	r3, #0
 800a786:	d132      	bne.n	800a7ee <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a788:	4b2e      	ldr	r3, [pc, #184]	@ (800a844 <HAL_RCC_OscConfig+0x278>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f003 0304 	and.w	r3, r3, #4
 800a790:	2b00      	cmp	r3, #0
 800a792:	d005      	beq.n	800a7a0 <HAL_RCC_OscConfig+0x1d4>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	68db      	ldr	r3, [r3, #12]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d101      	bne.n	800a7a0 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800a79c:	2301      	movs	r3, #1
 800a79e:	e33e      	b.n	800ae1e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a7a0:	4b28      	ldr	r3, [pc, #160]	@ (800a844 <HAL_RCC_OscConfig+0x278>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f023 0219 	bic.w	r2, r3, #25
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	68db      	ldr	r3, [r3, #12]
 800a7ac:	4925      	ldr	r1, [pc, #148]	@ (800a844 <HAL_RCC_OscConfig+0x278>)
 800a7ae:	4313      	orrs	r3, r2
 800a7b0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7b2:	f7fb fffd 	bl	80067b0 <HAL_GetTick>
 800a7b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a7b8:	e008      	b.n	800a7cc <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a7ba:	f7fb fff9 	bl	80067b0 <HAL_GetTick>
 800a7be:	4602      	mov	r2, r0
 800a7c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7c2:	1ad3      	subs	r3, r2, r3
 800a7c4:	2b02      	cmp	r3, #2
 800a7c6:	d901      	bls.n	800a7cc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800a7c8:	2303      	movs	r3, #3
 800a7ca:	e328      	b.n	800ae1e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a7cc:	4b1d      	ldr	r3, [pc, #116]	@ (800a844 <HAL_RCC_OscConfig+0x278>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f003 0304 	and.w	r3, r3, #4
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d0f0      	beq.n	800a7ba <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a7d8:	4b1a      	ldr	r3, [pc, #104]	@ (800a844 <HAL_RCC_OscConfig+0x278>)
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	691b      	ldr	r3, [r3, #16]
 800a7e4:	061b      	lsls	r3, r3, #24
 800a7e6:	4917      	ldr	r1, [pc, #92]	@ (800a844 <HAL_RCC_OscConfig+0x278>)
 800a7e8:	4313      	orrs	r3, r2
 800a7ea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a7ec:	e045      	b.n	800a87a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	68db      	ldr	r3, [r3, #12]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d028      	beq.n	800a848 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a7f6:	4b13      	ldr	r3, [pc, #76]	@ (800a844 <HAL_RCC_OscConfig+0x278>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f023 0219 	bic.w	r2, r3, #25
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	68db      	ldr	r3, [r3, #12]
 800a802:	4910      	ldr	r1, [pc, #64]	@ (800a844 <HAL_RCC_OscConfig+0x278>)
 800a804:	4313      	orrs	r3, r2
 800a806:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a808:	f7fb ffd2 	bl	80067b0 <HAL_GetTick>
 800a80c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a80e:	e008      	b.n	800a822 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a810:	f7fb ffce 	bl	80067b0 <HAL_GetTick>
 800a814:	4602      	mov	r2, r0
 800a816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a818:	1ad3      	subs	r3, r2, r3
 800a81a:	2b02      	cmp	r3, #2
 800a81c:	d901      	bls.n	800a822 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800a81e:	2303      	movs	r3, #3
 800a820:	e2fd      	b.n	800ae1e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a822:	4b08      	ldr	r3, [pc, #32]	@ (800a844 <HAL_RCC_OscConfig+0x278>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f003 0304 	and.w	r3, r3, #4
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d0f0      	beq.n	800a810 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a82e:	4b05      	ldr	r3, [pc, #20]	@ (800a844 <HAL_RCC_OscConfig+0x278>)
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	691b      	ldr	r3, [r3, #16]
 800a83a:	061b      	lsls	r3, r3, #24
 800a83c:	4901      	ldr	r1, [pc, #4]	@ (800a844 <HAL_RCC_OscConfig+0x278>)
 800a83e:	4313      	orrs	r3, r2
 800a840:	604b      	str	r3, [r1, #4]
 800a842:	e01a      	b.n	800a87a <HAL_RCC_OscConfig+0x2ae>
 800a844:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a848:	4b97      	ldr	r3, [pc, #604]	@ (800aaa8 <HAL_RCC_OscConfig+0x4dc>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	4a96      	ldr	r2, [pc, #600]	@ (800aaa8 <HAL_RCC_OscConfig+0x4dc>)
 800a84e:	f023 0301 	bic.w	r3, r3, #1
 800a852:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a854:	f7fb ffac 	bl	80067b0 <HAL_GetTick>
 800a858:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a85a:	e008      	b.n	800a86e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a85c:	f7fb ffa8 	bl	80067b0 <HAL_GetTick>
 800a860:	4602      	mov	r2, r0
 800a862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a864:	1ad3      	subs	r3, r2, r3
 800a866:	2b02      	cmp	r3, #2
 800a868:	d901      	bls.n	800a86e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800a86a:	2303      	movs	r3, #3
 800a86c:	e2d7      	b.n	800ae1e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a86e:	4b8e      	ldr	r3, [pc, #568]	@ (800aaa8 <HAL_RCC_OscConfig+0x4dc>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f003 0304 	and.w	r3, r3, #4
 800a876:	2b00      	cmp	r3, #0
 800a878:	d1f0      	bne.n	800a85c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f003 0310 	and.w	r3, r3, #16
 800a882:	2b00      	cmp	r3, #0
 800a884:	d06a      	beq.n	800a95c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a886:	4b88      	ldr	r3, [pc, #544]	@ (800aaa8 <HAL_RCC_OscConfig+0x4dc>)
 800a888:	691b      	ldr	r3, [r3, #16]
 800a88a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a88e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a890:	4b85      	ldr	r3, [pc, #532]	@ (800aaa8 <HAL_RCC_OscConfig+0x4dc>)
 800a892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a894:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a896:	69bb      	ldr	r3, [r7, #24]
 800a898:	2b08      	cmp	r3, #8
 800a89a:	d007      	beq.n	800a8ac <HAL_RCC_OscConfig+0x2e0>
 800a89c:	69bb      	ldr	r3, [r7, #24]
 800a89e:	2b18      	cmp	r3, #24
 800a8a0:	d11b      	bne.n	800a8da <HAL_RCC_OscConfig+0x30e>
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	f003 0303 	and.w	r3, r3, #3
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	d116      	bne.n	800a8da <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a8ac:	4b7e      	ldr	r3, [pc, #504]	@ (800aaa8 <HAL_RCC_OscConfig+0x4dc>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d005      	beq.n	800a8c4 <HAL_RCC_OscConfig+0x2f8>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	69db      	ldr	r3, [r3, #28]
 800a8bc:	2b80      	cmp	r3, #128	@ 0x80
 800a8be:	d001      	beq.n	800a8c4 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	e2ac      	b.n	800ae1e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a8c4:	4b78      	ldr	r3, [pc, #480]	@ (800aaa8 <HAL_RCC_OscConfig+0x4dc>)
 800a8c6:	68db      	ldr	r3, [r3, #12]
 800a8c8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6a1b      	ldr	r3, [r3, #32]
 800a8d0:	061b      	lsls	r3, r3, #24
 800a8d2:	4975      	ldr	r1, [pc, #468]	@ (800aaa8 <HAL_RCC_OscConfig+0x4dc>)
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a8d8:	e040      	b.n	800a95c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	69db      	ldr	r3, [r3, #28]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d023      	beq.n	800a92a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a8e2:	4b71      	ldr	r3, [pc, #452]	@ (800aaa8 <HAL_RCC_OscConfig+0x4dc>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4a70      	ldr	r2, [pc, #448]	@ (800aaa8 <HAL_RCC_OscConfig+0x4dc>)
 800a8e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8ee:	f7fb ff5f 	bl	80067b0 <HAL_GetTick>
 800a8f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a8f4:	e008      	b.n	800a908 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a8f6:	f7fb ff5b 	bl	80067b0 <HAL_GetTick>
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8fe:	1ad3      	subs	r3, r2, r3
 800a900:	2b02      	cmp	r3, #2
 800a902:	d901      	bls.n	800a908 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800a904:	2303      	movs	r3, #3
 800a906:	e28a      	b.n	800ae1e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a908:	4b67      	ldr	r3, [pc, #412]	@ (800aaa8 <HAL_RCC_OscConfig+0x4dc>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a910:	2b00      	cmp	r3, #0
 800a912:	d0f0      	beq.n	800a8f6 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a914:	4b64      	ldr	r3, [pc, #400]	@ (800aaa8 <HAL_RCC_OscConfig+0x4dc>)
 800a916:	68db      	ldr	r3, [r3, #12]
 800a918:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6a1b      	ldr	r3, [r3, #32]
 800a920:	061b      	lsls	r3, r3, #24
 800a922:	4961      	ldr	r1, [pc, #388]	@ (800aaa8 <HAL_RCC_OscConfig+0x4dc>)
 800a924:	4313      	orrs	r3, r2
 800a926:	60cb      	str	r3, [r1, #12]
 800a928:	e018      	b.n	800a95c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a92a:	4b5f      	ldr	r3, [pc, #380]	@ (800aaa8 <HAL_RCC_OscConfig+0x4dc>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	4a5e      	ldr	r2, [pc, #376]	@ (800aaa8 <HAL_RCC_OscConfig+0x4dc>)
 800a930:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a934:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a936:	f7fb ff3b 	bl	80067b0 <HAL_GetTick>
 800a93a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a93c:	e008      	b.n	800a950 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a93e:	f7fb ff37 	bl	80067b0 <HAL_GetTick>
 800a942:	4602      	mov	r2, r0
 800a944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a946:	1ad3      	subs	r3, r2, r3
 800a948:	2b02      	cmp	r3, #2
 800a94a:	d901      	bls.n	800a950 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800a94c:	2303      	movs	r3, #3
 800a94e:	e266      	b.n	800ae1e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a950:	4b55      	ldr	r3, [pc, #340]	@ (800aaa8 <HAL_RCC_OscConfig+0x4dc>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d1f0      	bne.n	800a93e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f003 0308 	and.w	r3, r3, #8
 800a964:	2b00      	cmp	r3, #0
 800a966:	d036      	beq.n	800a9d6 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	695b      	ldr	r3, [r3, #20]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d019      	beq.n	800a9a4 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a970:	4b4d      	ldr	r3, [pc, #308]	@ (800aaa8 <HAL_RCC_OscConfig+0x4dc>)
 800a972:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a974:	4a4c      	ldr	r2, [pc, #304]	@ (800aaa8 <HAL_RCC_OscConfig+0x4dc>)
 800a976:	f043 0301 	orr.w	r3, r3, #1
 800a97a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a97c:	f7fb ff18 	bl	80067b0 <HAL_GetTick>
 800a980:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a982:	e008      	b.n	800a996 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a984:	f7fb ff14 	bl	80067b0 <HAL_GetTick>
 800a988:	4602      	mov	r2, r0
 800a98a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a98c:	1ad3      	subs	r3, r2, r3
 800a98e:	2b02      	cmp	r3, #2
 800a990:	d901      	bls.n	800a996 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800a992:	2303      	movs	r3, #3
 800a994:	e243      	b.n	800ae1e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a996:	4b44      	ldr	r3, [pc, #272]	@ (800aaa8 <HAL_RCC_OscConfig+0x4dc>)
 800a998:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a99a:	f003 0302 	and.w	r3, r3, #2
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d0f0      	beq.n	800a984 <HAL_RCC_OscConfig+0x3b8>
 800a9a2:	e018      	b.n	800a9d6 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a9a4:	4b40      	ldr	r3, [pc, #256]	@ (800aaa8 <HAL_RCC_OscConfig+0x4dc>)
 800a9a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a9a8:	4a3f      	ldr	r2, [pc, #252]	@ (800aaa8 <HAL_RCC_OscConfig+0x4dc>)
 800a9aa:	f023 0301 	bic.w	r3, r3, #1
 800a9ae:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a9b0:	f7fb fefe 	bl	80067b0 <HAL_GetTick>
 800a9b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a9b6:	e008      	b.n	800a9ca <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a9b8:	f7fb fefa 	bl	80067b0 <HAL_GetTick>
 800a9bc:	4602      	mov	r2, r0
 800a9be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9c0:	1ad3      	subs	r3, r2, r3
 800a9c2:	2b02      	cmp	r3, #2
 800a9c4:	d901      	bls.n	800a9ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800a9c6:	2303      	movs	r3, #3
 800a9c8:	e229      	b.n	800ae1e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a9ca:	4b37      	ldr	r3, [pc, #220]	@ (800aaa8 <HAL_RCC_OscConfig+0x4dc>)
 800a9cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a9ce:	f003 0302 	and.w	r3, r3, #2
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d1f0      	bne.n	800a9b8 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f003 0320 	and.w	r3, r3, #32
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d036      	beq.n	800aa50 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	699b      	ldr	r3, [r3, #24]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d019      	beq.n	800aa1e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a9ea:	4b2f      	ldr	r3, [pc, #188]	@ (800aaa8 <HAL_RCC_OscConfig+0x4dc>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4a2e      	ldr	r2, [pc, #184]	@ (800aaa8 <HAL_RCC_OscConfig+0x4dc>)
 800a9f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a9f4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a9f6:	f7fb fedb 	bl	80067b0 <HAL_GetTick>
 800a9fa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a9fc:	e008      	b.n	800aa10 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a9fe:	f7fb fed7 	bl	80067b0 <HAL_GetTick>
 800aa02:	4602      	mov	r2, r0
 800aa04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa06:	1ad3      	subs	r3, r2, r3
 800aa08:	2b02      	cmp	r3, #2
 800aa0a:	d901      	bls.n	800aa10 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800aa0c:	2303      	movs	r3, #3
 800aa0e:	e206      	b.n	800ae1e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800aa10:	4b25      	ldr	r3, [pc, #148]	@ (800aaa8 <HAL_RCC_OscConfig+0x4dc>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d0f0      	beq.n	800a9fe <HAL_RCC_OscConfig+0x432>
 800aa1c:	e018      	b.n	800aa50 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800aa1e:	4b22      	ldr	r3, [pc, #136]	@ (800aaa8 <HAL_RCC_OscConfig+0x4dc>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	4a21      	ldr	r2, [pc, #132]	@ (800aaa8 <HAL_RCC_OscConfig+0x4dc>)
 800aa24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aa28:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800aa2a:	f7fb fec1 	bl	80067b0 <HAL_GetTick>
 800aa2e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800aa30:	e008      	b.n	800aa44 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aa32:	f7fb febd 	bl	80067b0 <HAL_GetTick>
 800aa36:	4602      	mov	r2, r0
 800aa38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa3a:	1ad3      	subs	r3, r2, r3
 800aa3c:	2b02      	cmp	r3, #2
 800aa3e:	d901      	bls.n	800aa44 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800aa40:	2303      	movs	r3, #3
 800aa42:	e1ec      	b.n	800ae1e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800aa44:	4b18      	ldr	r3, [pc, #96]	@ (800aaa8 <HAL_RCC_OscConfig+0x4dc>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d1f0      	bne.n	800aa32 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f003 0304 	and.w	r3, r3, #4
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	f000 80af 	beq.w	800abbc <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800aa5e:	4b13      	ldr	r3, [pc, #76]	@ (800aaac <HAL_RCC_OscConfig+0x4e0>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	4a12      	ldr	r2, [pc, #72]	@ (800aaac <HAL_RCC_OscConfig+0x4e0>)
 800aa64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aa68:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aa6a:	f7fb fea1 	bl	80067b0 <HAL_GetTick>
 800aa6e:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aa70:	e008      	b.n	800aa84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aa72:	f7fb fe9d 	bl	80067b0 <HAL_GetTick>
 800aa76:	4602      	mov	r2, r0
 800aa78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa7a:	1ad3      	subs	r3, r2, r3
 800aa7c:	2b64      	cmp	r3, #100	@ 0x64
 800aa7e:	d901      	bls.n	800aa84 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800aa80:	2303      	movs	r3, #3
 800aa82:	e1cc      	b.n	800ae1e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aa84:	4b09      	ldr	r3, [pc, #36]	@ (800aaac <HAL_RCC_OscConfig+0x4e0>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d0f0      	beq.n	800aa72 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	689b      	ldr	r3, [r3, #8]
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	d10b      	bne.n	800aab0 <HAL_RCC_OscConfig+0x4e4>
 800aa98:	4b03      	ldr	r3, [pc, #12]	@ (800aaa8 <HAL_RCC_OscConfig+0x4dc>)
 800aa9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa9c:	4a02      	ldr	r2, [pc, #8]	@ (800aaa8 <HAL_RCC_OscConfig+0x4dc>)
 800aa9e:	f043 0301 	orr.w	r3, r3, #1
 800aaa2:	6713      	str	r3, [r2, #112]	@ 0x70
 800aaa4:	e05b      	b.n	800ab5e <HAL_RCC_OscConfig+0x592>
 800aaa6:	bf00      	nop
 800aaa8:	58024400 	.word	0x58024400
 800aaac:	58024800 	.word	0x58024800
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	689b      	ldr	r3, [r3, #8]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d112      	bne.n	800aade <HAL_RCC_OscConfig+0x512>
 800aab8:	4b9d      	ldr	r3, [pc, #628]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800aaba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aabc:	4a9c      	ldr	r2, [pc, #624]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800aabe:	f023 0301 	bic.w	r3, r3, #1
 800aac2:	6713      	str	r3, [r2, #112]	@ 0x70
 800aac4:	4b9a      	ldr	r3, [pc, #616]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800aac6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aac8:	4a99      	ldr	r2, [pc, #612]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800aaca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aace:	6713      	str	r3, [r2, #112]	@ 0x70
 800aad0:	4b97      	ldr	r3, [pc, #604]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800aad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aad4:	4a96      	ldr	r2, [pc, #600]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800aad6:	f023 0304 	bic.w	r3, r3, #4
 800aada:	6713      	str	r3, [r2, #112]	@ 0x70
 800aadc:	e03f      	b.n	800ab5e <HAL_RCC_OscConfig+0x592>
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	689b      	ldr	r3, [r3, #8]
 800aae2:	2b05      	cmp	r3, #5
 800aae4:	d112      	bne.n	800ab0c <HAL_RCC_OscConfig+0x540>
 800aae6:	4b92      	ldr	r3, [pc, #584]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800aae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aaea:	4a91      	ldr	r2, [pc, #580]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800aaec:	f043 0304 	orr.w	r3, r3, #4
 800aaf0:	6713      	str	r3, [r2, #112]	@ 0x70
 800aaf2:	4b8f      	ldr	r3, [pc, #572]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800aaf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aaf6:	4a8e      	ldr	r2, [pc, #568]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800aaf8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aafc:	6713      	str	r3, [r2, #112]	@ 0x70
 800aafe:	4b8c      	ldr	r3, [pc, #560]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800ab00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab02:	4a8b      	ldr	r2, [pc, #556]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800ab04:	f043 0301 	orr.w	r3, r3, #1
 800ab08:	6713      	str	r3, [r2, #112]	@ 0x70
 800ab0a:	e028      	b.n	800ab5e <HAL_RCC_OscConfig+0x592>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	689b      	ldr	r3, [r3, #8]
 800ab10:	2b85      	cmp	r3, #133	@ 0x85
 800ab12:	d112      	bne.n	800ab3a <HAL_RCC_OscConfig+0x56e>
 800ab14:	4b86      	ldr	r3, [pc, #536]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800ab16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab18:	4a85      	ldr	r2, [pc, #532]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800ab1a:	f043 0304 	orr.w	r3, r3, #4
 800ab1e:	6713      	str	r3, [r2, #112]	@ 0x70
 800ab20:	4b83      	ldr	r3, [pc, #524]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800ab22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab24:	4a82      	ldr	r2, [pc, #520]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800ab26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab2a:	6713      	str	r3, [r2, #112]	@ 0x70
 800ab2c:	4b80      	ldr	r3, [pc, #512]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800ab2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab30:	4a7f      	ldr	r2, [pc, #508]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800ab32:	f043 0301 	orr.w	r3, r3, #1
 800ab36:	6713      	str	r3, [r2, #112]	@ 0x70
 800ab38:	e011      	b.n	800ab5e <HAL_RCC_OscConfig+0x592>
 800ab3a:	4b7d      	ldr	r3, [pc, #500]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800ab3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab3e:	4a7c      	ldr	r2, [pc, #496]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800ab40:	f023 0301 	bic.w	r3, r3, #1
 800ab44:	6713      	str	r3, [r2, #112]	@ 0x70
 800ab46:	4b7a      	ldr	r3, [pc, #488]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800ab48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab4a:	4a79      	ldr	r2, [pc, #484]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800ab4c:	f023 0304 	bic.w	r3, r3, #4
 800ab50:	6713      	str	r3, [r2, #112]	@ 0x70
 800ab52:	4b77      	ldr	r3, [pc, #476]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800ab54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab56:	4a76      	ldr	r2, [pc, #472]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800ab58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ab5c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	689b      	ldr	r3, [r3, #8]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d015      	beq.n	800ab92 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab66:	f7fb fe23 	bl	80067b0 <HAL_GetTick>
 800ab6a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ab6c:	e00a      	b.n	800ab84 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab6e:	f7fb fe1f 	bl	80067b0 <HAL_GetTick>
 800ab72:	4602      	mov	r2, r0
 800ab74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab76:	1ad3      	subs	r3, r2, r3
 800ab78:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d901      	bls.n	800ab84 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800ab80:	2303      	movs	r3, #3
 800ab82:	e14c      	b.n	800ae1e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ab84:	4b6a      	ldr	r3, [pc, #424]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800ab86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab88:	f003 0302 	and.w	r3, r3, #2
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d0ee      	beq.n	800ab6e <HAL_RCC_OscConfig+0x5a2>
 800ab90:	e014      	b.n	800abbc <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab92:	f7fb fe0d 	bl	80067b0 <HAL_GetTick>
 800ab96:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ab98:	e00a      	b.n	800abb0 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab9a:	f7fb fe09 	bl	80067b0 <HAL_GetTick>
 800ab9e:	4602      	mov	r2, r0
 800aba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aba2:	1ad3      	subs	r3, r2, r3
 800aba4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d901      	bls.n	800abb0 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800abac:	2303      	movs	r3, #3
 800abae:	e136      	b.n	800ae1e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800abb0:	4b5f      	ldr	r3, [pc, #380]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800abb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abb4:	f003 0302 	and.w	r3, r3, #2
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d1ee      	bne.n	800ab9a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	f000 812b 	beq.w	800ae1c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800abc6:	4b5a      	ldr	r3, [pc, #360]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800abc8:	691b      	ldr	r3, [r3, #16]
 800abca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800abce:	2b18      	cmp	r3, #24
 800abd0:	f000 80bb 	beq.w	800ad4a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abd8:	2b02      	cmp	r3, #2
 800abda:	f040 8095 	bne.w	800ad08 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800abde:	4b54      	ldr	r3, [pc, #336]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	4a53      	ldr	r2, [pc, #332]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800abe4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800abe8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abea:	f7fb fde1 	bl	80067b0 <HAL_GetTick>
 800abee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800abf0:	e008      	b.n	800ac04 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800abf2:	f7fb fddd 	bl	80067b0 <HAL_GetTick>
 800abf6:	4602      	mov	r2, r0
 800abf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abfa:	1ad3      	subs	r3, r2, r3
 800abfc:	2b02      	cmp	r3, #2
 800abfe:	d901      	bls.n	800ac04 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800ac00:	2303      	movs	r3, #3
 800ac02:	e10c      	b.n	800ae1e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ac04:	4b4a      	ldr	r3, [pc, #296]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d1f0      	bne.n	800abf2 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ac10:	4b47      	ldr	r3, [pc, #284]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800ac12:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ac14:	4b47      	ldr	r3, [pc, #284]	@ (800ad34 <HAL_RCC_OscConfig+0x768>)
 800ac16:	4013      	ands	r3, r2
 800ac18:	687a      	ldr	r2, [r7, #4]
 800ac1a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800ac1c:	687a      	ldr	r2, [r7, #4]
 800ac1e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ac20:	0112      	lsls	r2, r2, #4
 800ac22:	430a      	orrs	r2, r1
 800ac24:	4942      	ldr	r1, [pc, #264]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800ac26:	4313      	orrs	r3, r2
 800ac28:	628b      	str	r3, [r1, #40]	@ 0x28
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac2e:	3b01      	subs	r3, #1
 800ac30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac38:	3b01      	subs	r3, #1
 800ac3a:	025b      	lsls	r3, r3, #9
 800ac3c:	b29b      	uxth	r3, r3
 800ac3e:	431a      	orrs	r2, r3
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac44:	3b01      	subs	r3, #1
 800ac46:	041b      	lsls	r3, r3, #16
 800ac48:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ac4c:	431a      	orrs	r2, r3
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac52:	3b01      	subs	r3, #1
 800ac54:	061b      	lsls	r3, r3, #24
 800ac56:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ac5a:	4935      	ldr	r1, [pc, #212]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800ac60:	4b33      	ldr	r3, [pc, #204]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800ac62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac64:	4a32      	ldr	r2, [pc, #200]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800ac66:	f023 0301 	bic.w	r3, r3, #1
 800ac6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ac6c:	4b30      	ldr	r3, [pc, #192]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800ac6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ac70:	4b31      	ldr	r3, [pc, #196]	@ (800ad38 <HAL_RCC_OscConfig+0x76c>)
 800ac72:	4013      	ands	r3, r2
 800ac74:	687a      	ldr	r2, [r7, #4]
 800ac76:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ac78:	00d2      	lsls	r2, r2, #3
 800ac7a:	492d      	ldr	r1, [pc, #180]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800ac7c:	4313      	orrs	r3, r2
 800ac7e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ac80:	4b2b      	ldr	r3, [pc, #172]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800ac82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac84:	f023 020c 	bic.w	r2, r3, #12
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac8c:	4928      	ldr	r1, [pc, #160]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ac92:	4b27      	ldr	r3, [pc, #156]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800ac94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac96:	f023 0202 	bic.w	r2, r3, #2
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac9e:	4924      	ldr	r1, [pc, #144]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800aca0:	4313      	orrs	r3, r2
 800aca2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800aca4:	4b22      	ldr	r3, [pc, #136]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800aca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aca8:	4a21      	ldr	r2, [pc, #132]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800acaa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800acae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acb0:	4b1f      	ldr	r3, [pc, #124]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800acb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acb4:	4a1e      	ldr	r2, [pc, #120]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800acb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800acba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800acbc:	4b1c      	ldr	r3, [pc, #112]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800acbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acc0:	4a1b      	ldr	r2, [pc, #108]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800acc2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800acc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800acc8:	4b19      	ldr	r3, [pc, #100]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800acca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800accc:	4a18      	ldr	r2, [pc, #96]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800acce:	f043 0301 	orr.w	r3, r3, #1
 800acd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800acd4:	4b16      	ldr	r3, [pc, #88]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	4a15      	ldr	r2, [pc, #84]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800acda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800acde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ace0:	f7fb fd66 	bl	80067b0 <HAL_GetTick>
 800ace4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ace6:	e008      	b.n	800acfa <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ace8:	f7fb fd62 	bl	80067b0 <HAL_GetTick>
 800acec:	4602      	mov	r2, r0
 800acee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acf0:	1ad3      	subs	r3, r2, r3
 800acf2:	2b02      	cmp	r3, #2
 800acf4:	d901      	bls.n	800acfa <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800acf6:	2303      	movs	r3, #3
 800acf8:	e091      	b.n	800ae1e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800acfa:	4b0d      	ldr	r3, [pc, #52]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d0f0      	beq.n	800ace8 <HAL_RCC_OscConfig+0x71c>
 800ad06:	e089      	b.n	800ae1c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ad08:	4b09      	ldr	r3, [pc, #36]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4a08      	ldr	r2, [pc, #32]	@ (800ad30 <HAL_RCC_OscConfig+0x764>)
 800ad0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ad12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad14:	f7fb fd4c 	bl	80067b0 <HAL_GetTick>
 800ad18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ad1a:	e00f      	b.n	800ad3c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad1c:	f7fb fd48 	bl	80067b0 <HAL_GetTick>
 800ad20:	4602      	mov	r2, r0
 800ad22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad24:	1ad3      	subs	r3, r2, r3
 800ad26:	2b02      	cmp	r3, #2
 800ad28:	d908      	bls.n	800ad3c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800ad2a:	2303      	movs	r3, #3
 800ad2c:	e077      	b.n	800ae1e <HAL_RCC_OscConfig+0x852>
 800ad2e:	bf00      	nop
 800ad30:	58024400 	.word	0x58024400
 800ad34:	fffffc0c 	.word	0xfffffc0c
 800ad38:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ad3c:	4b3a      	ldr	r3, [pc, #232]	@ (800ae28 <HAL_RCC_OscConfig+0x85c>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d1e9      	bne.n	800ad1c <HAL_RCC_OscConfig+0x750>
 800ad48:	e068      	b.n	800ae1c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ad4a:	4b37      	ldr	r3, [pc, #220]	@ (800ae28 <HAL_RCC_OscConfig+0x85c>)
 800ad4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad4e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ad50:	4b35      	ldr	r3, [pc, #212]	@ (800ae28 <HAL_RCC_OscConfig+0x85c>)
 800ad52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad54:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad5a:	2b01      	cmp	r3, #1
 800ad5c:	d031      	beq.n	800adc2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad5e:	693b      	ldr	r3, [r7, #16]
 800ad60:	f003 0203 	and.w	r2, r3, #3
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ad68:	429a      	cmp	r2, r3
 800ad6a:	d12a      	bne.n	800adc2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	091b      	lsrs	r3, r3, #4
 800ad70:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d122      	bne.n	800adc2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad86:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	d11a      	bne.n	800adc2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	0a5b      	lsrs	r3, r3, #9
 800ad90:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad98:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d111      	bne.n	800adc2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	0c1b      	lsrs	r3, r3, #16
 800ada2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adaa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800adac:	429a      	cmp	r2, r3
 800adae:	d108      	bne.n	800adc2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	0e1b      	lsrs	r3, r3, #24
 800adb4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800adbc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800adbe:	429a      	cmp	r2, r3
 800adc0:	d001      	beq.n	800adc6 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800adc2:	2301      	movs	r3, #1
 800adc4:	e02b      	b.n	800ae1e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800adc6:	4b18      	ldr	r3, [pc, #96]	@ (800ae28 <HAL_RCC_OscConfig+0x85c>)
 800adc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800adca:	08db      	lsrs	r3, r3, #3
 800adcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800add0:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800add6:	693a      	ldr	r2, [r7, #16]
 800add8:	429a      	cmp	r2, r3
 800adda:	d01f      	beq.n	800ae1c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800addc:	4b12      	ldr	r3, [pc, #72]	@ (800ae28 <HAL_RCC_OscConfig+0x85c>)
 800adde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ade0:	4a11      	ldr	r2, [pc, #68]	@ (800ae28 <HAL_RCC_OscConfig+0x85c>)
 800ade2:	f023 0301 	bic.w	r3, r3, #1
 800ade6:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ade8:	f7fb fce2 	bl	80067b0 <HAL_GetTick>
 800adec:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800adee:	bf00      	nop
 800adf0:	f7fb fcde 	bl	80067b0 <HAL_GetTick>
 800adf4:	4602      	mov	r2, r0
 800adf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adf8:	4293      	cmp	r3, r2
 800adfa:	d0f9      	beq.n	800adf0 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800adfc:	4b0a      	ldr	r3, [pc, #40]	@ (800ae28 <HAL_RCC_OscConfig+0x85c>)
 800adfe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ae00:	4b0a      	ldr	r3, [pc, #40]	@ (800ae2c <HAL_RCC_OscConfig+0x860>)
 800ae02:	4013      	ands	r3, r2
 800ae04:	687a      	ldr	r2, [r7, #4]
 800ae06:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ae08:	00d2      	lsls	r2, r2, #3
 800ae0a:	4907      	ldr	r1, [pc, #28]	@ (800ae28 <HAL_RCC_OscConfig+0x85c>)
 800ae0c:	4313      	orrs	r3, r2
 800ae0e:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800ae10:	4b05      	ldr	r3, [pc, #20]	@ (800ae28 <HAL_RCC_OscConfig+0x85c>)
 800ae12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae14:	4a04      	ldr	r2, [pc, #16]	@ (800ae28 <HAL_RCC_OscConfig+0x85c>)
 800ae16:	f043 0301 	orr.w	r3, r3, #1
 800ae1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800ae1c:	2300      	movs	r3, #0
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3730      	adds	r7, #48	@ 0x30
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
 800ae26:	bf00      	nop
 800ae28:	58024400 	.word	0x58024400
 800ae2c:	ffff0007 	.word	0xffff0007

0800ae30 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b086      	sub	sp, #24
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d101      	bne.n	800ae44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ae40:	2301      	movs	r3, #1
 800ae42:	e19c      	b.n	800b17e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ae44:	4b8a      	ldr	r3, [pc, #552]	@ (800b070 <HAL_RCC_ClockConfig+0x240>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f003 030f 	and.w	r3, r3, #15
 800ae4c:	683a      	ldr	r2, [r7, #0]
 800ae4e:	429a      	cmp	r2, r3
 800ae50:	d910      	bls.n	800ae74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae52:	4b87      	ldr	r3, [pc, #540]	@ (800b070 <HAL_RCC_ClockConfig+0x240>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f023 020f 	bic.w	r2, r3, #15
 800ae5a:	4985      	ldr	r1, [pc, #532]	@ (800b070 <HAL_RCC_ClockConfig+0x240>)
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae62:	4b83      	ldr	r3, [pc, #524]	@ (800b070 <HAL_RCC_ClockConfig+0x240>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f003 030f 	and.w	r3, r3, #15
 800ae6a:	683a      	ldr	r2, [r7, #0]
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	d001      	beq.n	800ae74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ae70:	2301      	movs	r3, #1
 800ae72:	e184      	b.n	800b17e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f003 0304 	and.w	r3, r3, #4
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d010      	beq.n	800aea2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	691a      	ldr	r2, [r3, #16]
 800ae84:	4b7b      	ldr	r3, [pc, #492]	@ (800b074 <HAL_RCC_ClockConfig+0x244>)
 800ae86:	699b      	ldr	r3, [r3, #24]
 800ae88:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d908      	bls.n	800aea2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ae90:	4b78      	ldr	r3, [pc, #480]	@ (800b074 <HAL_RCC_ClockConfig+0x244>)
 800ae92:	699b      	ldr	r3, [r3, #24]
 800ae94:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	691b      	ldr	r3, [r3, #16]
 800ae9c:	4975      	ldr	r1, [pc, #468]	@ (800b074 <HAL_RCC_ClockConfig+0x244>)
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f003 0308 	and.w	r3, r3, #8
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d010      	beq.n	800aed0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	695a      	ldr	r2, [r3, #20]
 800aeb2:	4b70      	ldr	r3, [pc, #448]	@ (800b074 <HAL_RCC_ClockConfig+0x244>)
 800aeb4:	69db      	ldr	r3, [r3, #28]
 800aeb6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800aeba:	429a      	cmp	r2, r3
 800aebc:	d908      	bls.n	800aed0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800aebe:	4b6d      	ldr	r3, [pc, #436]	@ (800b074 <HAL_RCC_ClockConfig+0x244>)
 800aec0:	69db      	ldr	r3, [r3, #28]
 800aec2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	695b      	ldr	r3, [r3, #20]
 800aeca:	496a      	ldr	r1, [pc, #424]	@ (800b074 <HAL_RCC_ClockConfig+0x244>)
 800aecc:	4313      	orrs	r3, r2
 800aece:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f003 0310 	and.w	r3, r3, #16
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d010      	beq.n	800aefe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	699a      	ldr	r2, [r3, #24]
 800aee0:	4b64      	ldr	r3, [pc, #400]	@ (800b074 <HAL_RCC_ClockConfig+0x244>)
 800aee2:	69db      	ldr	r3, [r3, #28]
 800aee4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d908      	bls.n	800aefe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800aeec:	4b61      	ldr	r3, [pc, #388]	@ (800b074 <HAL_RCC_ClockConfig+0x244>)
 800aeee:	69db      	ldr	r3, [r3, #28]
 800aef0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	699b      	ldr	r3, [r3, #24]
 800aef8:	495e      	ldr	r1, [pc, #376]	@ (800b074 <HAL_RCC_ClockConfig+0x244>)
 800aefa:	4313      	orrs	r3, r2
 800aefc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f003 0320 	and.w	r3, r3, #32
 800af06:	2b00      	cmp	r3, #0
 800af08:	d010      	beq.n	800af2c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	69da      	ldr	r2, [r3, #28]
 800af0e:	4b59      	ldr	r3, [pc, #356]	@ (800b074 <HAL_RCC_ClockConfig+0x244>)
 800af10:	6a1b      	ldr	r3, [r3, #32]
 800af12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800af16:	429a      	cmp	r2, r3
 800af18:	d908      	bls.n	800af2c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800af1a:	4b56      	ldr	r3, [pc, #344]	@ (800b074 <HAL_RCC_ClockConfig+0x244>)
 800af1c:	6a1b      	ldr	r3, [r3, #32]
 800af1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	69db      	ldr	r3, [r3, #28]
 800af26:	4953      	ldr	r1, [pc, #332]	@ (800b074 <HAL_RCC_ClockConfig+0x244>)
 800af28:	4313      	orrs	r3, r2
 800af2a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f003 0302 	and.w	r3, r3, #2
 800af34:	2b00      	cmp	r3, #0
 800af36:	d010      	beq.n	800af5a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	68da      	ldr	r2, [r3, #12]
 800af3c:	4b4d      	ldr	r3, [pc, #308]	@ (800b074 <HAL_RCC_ClockConfig+0x244>)
 800af3e:	699b      	ldr	r3, [r3, #24]
 800af40:	f003 030f 	and.w	r3, r3, #15
 800af44:	429a      	cmp	r2, r3
 800af46:	d908      	bls.n	800af5a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800af48:	4b4a      	ldr	r3, [pc, #296]	@ (800b074 <HAL_RCC_ClockConfig+0x244>)
 800af4a:	699b      	ldr	r3, [r3, #24]
 800af4c:	f023 020f 	bic.w	r2, r3, #15
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	68db      	ldr	r3, [r3, #12]
 800af54:	4947      	ldr	r1, [pc, #284]	@ (800b074 <HAL_RCC_ClockConfig+0x244>)
 800af56:	4313      	orrs	r3, r2
 800af58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f003 0301 	and.w	r3, r3, #1
 800af62:	2b00      	cmp	r3, #0
 800af64:	d055      	beq.n	800b012 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800af66:	4b43      	ldr	r3, [pc, #268]	@ (800b074 <HAL_RCC_ClockConfig+0x244>)
 800af68:	699b      	ldr	r3, [r3, #24]
 800af6a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	689b      	ldr	r3, [r3, #8]
 800af72:	4940      	ldr	r1, [pc, #256]	@ (800b074 <HAL_RCC_ClockConfig+0x244>)
 800af74:	4313      	orrs	r3, r2
 800af76:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	685b      	ldr	r3, [r3, #4]
 800af7c:	2b02      	cmp	r3, #2
 800af7e:	d107      	bne.n	800af90 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800af80:	4b3c      	ldr	r3, [pc, #240]	@ (800b074 <HAL_RCC_ClockConfig+0x244>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d121      	bne.n	800afd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800af8c:	2301      	movs	r3, #1
 800af8e:	e0f6      	b.n	800b17e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	685b      	ldr	r3, [r3, #4]
 800af94:	2b03      	cmp	r3, #3
 800af96:	d107      	bne.n	800afa8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800af98:	4b36      	ldr	r3, [pc, #216]	@ (800b074 <HAL_RCC_ClockConfig+0x244>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d115      	bne.n	800afd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800afa4:	2301      	movs	r3, #1
 800afa6:	e0ea      	b.n	800b17e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	2b01      	cmp	r3, #1
 800afae:	d107      	bne.n	800afc0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800afb0:	4b30      	ldr	r3, [pc, #192]	@ (800b074 <HAL_RCC_ClockConfig+0x244>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d109      	bne.n	800afd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800afbc:	2301      	movs	r3, #1
 800afbe:	e0de      	b.n	800b17e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800afc0:	4b2c      	ldr	r3, [pc, #176]	@ (800b074 <HAL_RCC_ClockConfig+0x244>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f003 0304 	and.w	r3, r3, #4
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d101      	bne.n	800afd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800afcc:	2301      	movs	r3, #1
 800afce:	e0d6      	b.n	800b17e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800afd0:	4b28      	ldr	r3, [pc, #160]	@ (800b074 <HAL_RCC_ClockConfig+0x244>)
 800afd2:	691b      	ldr	r3, [r3, #16]
 800afd4:	f023 0207 	bic.w	r2, r3, #7
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	685b      	ldr	r3, [r3, #4]
 800afdc:	4925      	ldr	r1, [pc, #148]	@ (800b074 <HAL_RCC_ClockConfig+0x244>)
 800afde:	4313      	orrs	r3, r2
 800afe0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800afe2:	f7fb fbe5 	bl	80067b0 <HAL_GetTick>
 800afe6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800afe8:	e00a      	b.n	800b000 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800afea:	f7fb fbe1 	bl	80067b0 <HAL_GetTick>
 800afee:	4602      	mov	r2, r0
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	1ad3      	subs	r3, r2, r3
 800aff4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aff8:	4293      	cmp	r3, r2
 800affa:	d901      	bls.n	800b000 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800affc:	2303      	movs	r3, #3
 800affe:	e0be      	b.n	800b17e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b000:	4b1c      	ldr	r3, [pc, #112]	@ (800b074 <HAL_RCC_ClockConfig+0x244>)
 800b002:	691b      	ldr	r3, [r3, #16]
 800b004:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	685b      	ldr	r3, [r3, #4]
 800b00c:	00db      	lsls	r3, r3, #3
 800b00e:	429a      	cmp	r2, r3
 800b010:	d1eb      	bne.n	800afea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f003 0302 	and.w	r3, r3, #2
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d010      	beq.n	800b040 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	68da      	ldr	r2, [r3, #12]
 800b022:	4b14      	ldr	r3, [pc, #80]	@ (800b074 <HAL_RCC_ClockConfig+0x244>)
 800b024:	699b      	ldr	r3, [r3, #24]
 800b026:	f003 030f 	and.w	r3, r3, #15
 800b02a:	429a      	cmp	r2, r3
 800b02c:	d208      	bcs.n	800b040 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b02e:	4b11      	ldr	r3, [pc, #68]	@ (800b074 <HAL_RCC_ClockConfig+0x244>)
 800b030:	699b      	ldr	r3, [r3, #24]
 800b032:	f023 020f 	bic.w	r2, r3, #15
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	68db      	ldr	r3, [r3, #12]
 800b03a:	490e      	ldr	r1, [pc, #56]	@ (800b074 <HAL_RCC_ClockConfig+0x244>)
 800b03c:	4313      	orrs	r3, r2
 800b03e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b040:	4b0b      	ldr	r3, [pc, #44]	@ (800b070 <HAL_RCC_ClockConfig+0x240>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f003 030f 	and.w	r3, r3, #15
 800b048:	683a      	ldr	r2, [r7, #0]
 800b04a:	429a      	cmp	r2, r3
 800b04c:	d214      	bcs.n	800b078 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b04e:	4b08      	ldr	r3, [pc, #32]	@ (800b070 <HAL_RCC_ClockConfig+0x240>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f023 020f 	bic.w	r2, r3, #15
 800b056:	4906      	ldr	r1, [pc, #24]	@ (800b070 <HAL_RCC_ClockConfig+0x240>)
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	4313      	orrs	r3, r2
 800b05c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b05e:	4b04      	ldr	r3, [pc, #16]	@ (800b070 <HAL_RCC_ClockConfig+0x240>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f003 030f 	and.w	r3, r3, #15
 800b066:	683a      	ldr	r2, [r7, #0]
 800b068:	429a      	cmp	r2, r3
 800b06a:	d005      	beq.n	800b078 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b06c:	2301      	movs	r3, #1
 800b06e:	e086      	b.n	800b17e <HAL_RCC_ClockConfig+0x34e>
 800b070:	52002000 	.word	0x52002000
 800b074:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f003 0304 	and.w	r3, r3, #4
 800b080:	2b00      	cmp	r3, #0
 800b082:	d010      	beq.n	800b0a6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	691a      	ldr	r2, [r3, #16]
 800b088:	4b3f      	ldr	r3, [pc, #252]	@ (800b188 <HAL_RCC_ClockConfig+0x358>)
 800b08a:	699b      	ldr	r3, [r3, #24]
 800b08c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b090:	429a      	cmp	r2, r3
 800b092:	d208      	bcs.n	800b0a6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b094:	4b3c      	ldr	r3, [pc, #240]	@ (800b188 <HAL_RCC_ClockConfig+0x358>)
 800b096:	699b      	ldr	r3, [r3, #24]
 800b098:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	691b      	ldr	r3, [r3, #16]
 800b0a0:	4939      	ldr	r1, [pc, #228]	@ (800b188 <HAL_RCC_ClockConfig+0x358>)
 800b0a2:	4313      	orrs	r3, r2
 800b0a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f003 0308 	and.w	r3, r3, #8
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d010      	beq.n	800b0d4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	695a      	ldr	r2, [r3, #20]
 800b0b6:	4b34      	ldr	r3, [pc, #208]	@ (800b188 <HAL_RCC_ClockConfig+0x358>)
 800b0b8:	69db      	ldr	r3, [r3, #28]
 800b0ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b0be:	429a      	cmp	r2, r3
 800b0c0:	d208      	bcs.n	800b0d4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b0c2:	4b31      	ldr	r3, [pc, #196]	@ (800b188 <HAL_RCC_ClockConfig+0x358>)
 800b0c4:	69db      	ldr	r3, [r3, #28]
 800b0c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	695b      	ldr	r3, [r3, #20]
 800b0ce:	492e      	ldr	r1, [pc, #184]	@ (800b188 <HAL_RCC_ClockConfig+0x358>)
 800b0d0:	4313      	orrs	r3, r2
 800b0d2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f003 0310 	and.w	r3, r3, #16
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d010      	beq.n	800b102 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	699a      	ldr	r2, [r3, #24]
 800b0e4:	4b28      	ldr	r3, [pc, #160]	@ (800b188 <HAL_RCC_ClockConfig+0x358>)
 800b0e6:	69db      	ldr	r3, [r3, #28]
 800b0e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	d208      	bcs.n	800b102 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b0f0:	4b25      	ldr	r3, [pc, #148]	@ (800b188 <HAL_RCC_ClockConfig+0x358>)
 800b0f2:	69db      	ldr	r3, [r3, #28]
 800b0f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	699b      	ldr	r3, [r3, #24]
 800b0fc:	4922      	ldr	r1, [pc, #136]	@ (800b188 <HAL_RCC_ClockConfig+0x358>)
 800b0fe:	4313      	orrs	r3, r2
 800b100:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f003 0320 	and.w	r3, r3, #32
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d010      	beq.n	800b130 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	69da      	ldr	r2, [r3, #28]
 800b112:	4b1d      	ldr	r3, [pc, #116]	@ (800b188 <HAL_RCC_ClockConfig+0x358>)
 800b114:	6a1b      	ldr	r3, [r3, #32]
 800b116:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b11a:	429a      	cmp	r2, r3
 800b11c:	d208      	bcs.n	800b130 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b11e:	4b1a      	ldr	r3, [pc, #104]	@ (800b188 <HAL_RCC_ClockConfig+0x358>)
 800b120:	6a1b      	ldr	r3, [r3, #32]
 800b122:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	69db      	ldr	r3, [r3, #28]
 800b12a:	4917      	ldr	r1, [pc, #92]	@ (800b188 <HAL_RCC_ClockConfig+0x358>)
 800b12c:	4313      	orrs	r3, r2
 800b12e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800b130:	f000 f834 	bl	800b19c <HAL_RCC_GetSysClockFreq>
 800b134:	4602      	mov	r2, r0
 800b136:	4b14      	ldr	r3, [pc, #80]	@ (800b188 <HAL_RCC_ClockConfig+0x358>)
 800b138:	699b      	ldr	r3, [r3, #24]
 800b13a:	0a1b      	lsrs	r3, r3, #8
 800b13c:	f003 030f 	and.w	r3, r3, #15
 800b140:	4912      	ldr	r1, [pc, #72]	@ (800b18c <HAL_RCC_ClockConfig+0x35c>)
 800b142:	5ccb      	ldrb	r3, [r1, r3]
 800b144:	f003 031f 	and.w	r3, r3, #31
 800b148:	fa22 f303 	lsr.w	r3, r2, r3
 800b14c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800b14e:	4b0e      	ldr	r3, [pc, #56]	@ (800b188 <HAL_RCC_ClockConfig+0x358>)
 800b150:	699b      	ldr	r3, [r3, #24]
 800b152:	f003 030f 	and.w	r3, r3, #15
 800b156:	4a0d      	ldr	r2, [pc, #52]	@ (800b18c <HAL_RCC_ClockConfig+0x35c>)
 800b158:	5cd3      	ldrb	r3, [r2, r3]
 800b15a:	f003 031f 	and.w	r3, r3, #31
 800b15e:	693a      	ldr	r2, [r7, #16]
 800b160:	fa22 f303 	lsr.w	r3, r2, r3
 800b164:	4a0a      	ldr	r2, [pc, #40]	@ (800b190 <HAL_RCC_ClockConfig+0x360>)
 800b166:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b168:	4a0a      	ldr	r2, [pc, #40]	@ (800b194 <HAL_RCC_ClockConfig+0x364>)
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b16e:	4b0a      	ldr	r3, [pc, #40]	@ (800b198 <HAL_RCC_ClockConfig+0x368>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	4618      	mov	r0, r3
 800b174:	f7f8 f938 	bl	80033e8 <HAL_InitTick>
 800b178:	4603      	mov	r3, r0
 800b17a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b17c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3718      	adds	r7, #24
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}
 800b186:	bf00      	nop
 800b188:	58024400 	.word	0x58024400
 800b18c:	08019cf4 	.word	0x08019cf4
 800b190:	24000004 	.word	0x24000004
 800b194:	24000000 	.word	0x24000000
 800b198:	240000a4 	.word	0x240000a4

0800b19c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b089      	sub	sp, #36	@ 0x24
 800b1a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b1a2:	4bb3      	ldr	r3, [pc, #716]	@ (800b470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b1a4:	691b      	ldr	r3, [r3, #16]
 800b1a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b1aa:	2b18      	cmp	r3, #24
 800b1ac:	f200 8155 	bhi.w	800b45a <HAL_RCC_GetSysClockFreq+0x2be>
 800b1b0:	a201      	add	r2, pc, #4	@ (adr r2, 800b1b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b1b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1b6:	bf00      	nop
 800b1b8:	0800b21d 	.word	0x0800b21d
 800b1bc:	0800b45b 	.word	0x0800b45b
 800b1c0:	0800b45b 	.word	0x0800b45b
 800b1c4:	0800b45b 	.word	0x0800b45b
 800b1c8:	0800b45b 	.word	0x0800b45b
 800b1cc:	0800b45b 	.word	0x0800b45b
 800b1d0:	0800b45b 	.word	0x0800b45b
 800b1d4:	0800b45b 	.word	0x0800b45b
 800b1d8:	0800b243 	.word	0x0800b243
 800b1dc:	0800b45b 	.word	0x0800b45b
 800b1e0:	0800b45b 	.word	0x0800b45b
 800b1e4:	0800b45b 	.word	0x0800b45b
 800b1e8:	0800b45b 	.word	0x0800b45b
 800b1ec:	0800b45b 	.word	0x0800b45b
 800b1f0:	0800b45b 	.word	0x0800b45b
 800b1f4:	0800b45b 	.word	0x0800b45b
 800b1f8:	0800b249 	.word	0x0800b249
 800b1fc:	0800b45b 	.word	0x0800b45b
 800b200:	0800b45b 	.word	0x0800b45b
 800b204:	0800b45b 	.word	0x0800b45b
 800b208:	0800b45b 	.word	0x0800b45b
 800b20c:	0800b45b 	.word	0x0800b45b
 800b210:	0800b45b 	.word	0x0800b45b
 800b214:	0800b45b 	.word	0x0800b45b
 800b218:	0800b24f 	.word	0x0800b24f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b21c:	4b94      	ldr	r3, [pc, #592]	@ (800b470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f003 0320 	and.w	r3, r3, #32
 800b224:	2b00      	cmp	r3, #0
 800b226:	d009      	beq.n	800b23c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b228:	4b91      	ldr	r3, [pc, #580]	@ (800b470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	08db      	lsrs	r3, r3, #3
 800b22e:	f003 0303 	and.w	r3, r3, #3
 800b232:	4a90      	ldr	r2, [pc, #576]	@ (800b474 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b234:	fa22 f303 	lsr.w	r3, r2, r3
 800b238:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b23a:	e111      	b.n	800b460 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b23c:	4b8d      	ldr	r3, [pc, #564]	@ (800b474 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b23e:	61bb      	str	r3, [r7, #24]
      break;
 800b240:	e10e      	b.n	800b460 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b242:	4b8d      	ldr	r3, [pc, #564]	@ (800b478 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b244:	61bb      	str	r3, [r7, #24]
      break;
 800b246:	e10b      	b.n	800b460 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b248:	4b8c      	ldr	r3, [pc, #560]	@ (800b47c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b24a:	61bb      	str	r3, [r7, #24]
      break;
 800b24c:	e108      	b.n	800b460 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b24e:	4b88      	ldr	r3, [pc, #544]	@ (800b470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b252:	f003 0303 	and.w	r3, r3, #3
 800b256:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b258:	4b85      	ldr	r3, [pc, #532]	@ (800b470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b25a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b25c:	091b      	lsrs	r3, r3, #4
 800b25e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b262:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b264:	4b82      	ldr	r3, [pc, #520]	@ (800b470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b268:	f003 0301 	and.w	r3, r3, #1
 800b26c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b26e:	4b80      	ldr	r3, [pc, #512]	@ (800b470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b270:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b272:	08db      	lsrs	r3, r3, #3
 800b274:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b278:	68fa      	ldr	r2, [r7, #12]
 800b27a:	fb02 f303 	mul.w	r3, r2, r3
 800b27e:	ee07 3a90 	vmov	s15, r3
 800b282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b286:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	f000 80e1 	beq.w	800b454 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	2b02      	cmp	r3, #2
 800b296:	f000 8083 	beq.w	800b3a0 <HAL_RCC_GetSysClockFreq+0x204>
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	2b02      	cmp	r3, #2
 800b29e:	f200 80a1 	bhi.w	800b3e4 <HAL_RCC_GetSysClockFreq+0x248>
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d003      	beq.n	800b2b0 <HAL_RCC_GetSysClockFreq+0x114>
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	2b01      	cmp	r3, #1
 800b2ac:	d056      	beq.n	800b35c <HAL_RCC_GetSysClockFreq+0x1c0>
 800b2ae:	e099      	b.n	800b3e4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2b0:	4b6f      	ldr	r3, [pc, #444]	@ (800b470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f003 0320 	and.w	r3, r3, #32
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d02d      	beq.n	800b318 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b2bc:	4b6c      	ldr	r3, [pc, #432]	@ (800b470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	08db      	lsrs	r3, r3, #3
 800b2c2:	f003 0303 	and.w	r3, r3, #3
 800b2c6:	4a6b      	ldr	r2, [pc, #428]	@ (800b474 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b2c8:	fa22 f303 	lsr.w	r3, r2, r3
 800b2cc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	ee07 3a90 	vmov	s15, r3
 800b2d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	ee07 3a90 	vmov	s15, r3
 800b2de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2e6:	4b62      	ldr	r3, [pc, #392]	@ (800b470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2ee:	ee07 3a90 	vmov	s15, r3
 800b2f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2f6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b2fa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800b480 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b2fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b306:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b30a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b30e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b312:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b316:	e087      	b.n	800b428 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	ee07 3a90 	vmov	s15, r3
 800b31e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b322:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800b484 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b32a:	4b51      	ldr	r3, [pc, #324]	@ (800b470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b32c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b32e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b332:	ee07 3a90 	vmov	s15, r3
 800b336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b33a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b33e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800b480 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b34a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b34e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b352:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b356:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b35a:	e065      	b.n	800b428 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	ee07 3a90 	vmov	s15, r3
 800b362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b366:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800b488 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b36a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b36e:	4b40      	ldr	r3, [pc, #256]	@ (800b470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b376:	ee07 3a90 	vmov	s15, r3
 800b37a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b37e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b382:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b480 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b38a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b38e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b39a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b39e:	e043      	b.n	800b428 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	ee07 3a90 	vmov	s15, r3
 800b3a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3aa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800b48c <HAL_RCC_GetSysClockFreq+0x2f0>
 800b3ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3b2:	4b2f      	ldr	r3, [pc, #188]	@ (800b470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3ba:	ee07 3a90 	vmov	s15, r3
 800b3be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3c2:	ed97 6a02 	vldr	s12, [r7, #8]
 800b3c6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800b480 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b3ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b3e2:	e021      	b.n	800b428 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	ee07 3a90 	vmov	s15, r3
 800b3ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3ee:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800b488 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b3f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3f6:	4b1e      	ldr	r3, [pc, #120]	@ (800b470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3fe:	ee07 3a90 	vmov	s15, r3
 800b402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b406:	ed97 6a02 	vldr	s12, [r7, #8]
 800b40a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800b480 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b40e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b416:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b41a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b41e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b422:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b426:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b428:	4b11      	ldr	r3, [pc, #68]	@ (800b470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b42a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b42c:	0a5b      	lsrs	r3, r3, #9
 800b42e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b432:	3301      	adds	r3, #1
 800b434:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	ee07 3a90 	vmov	s15, r3
 800b43c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b440:	edd7 6a07 	vldr	s13, [r7, #28]
 800b444:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b448:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b44c:	ee17 3a90 	vmov	r3, s15
 800b450:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b452:	e005      	b.n	800b460 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b454:	2300      	movs	r3, #0
 800b456:	61bb      	str	r3, [r7, #24]
      break;
 800b458:	e002      	b.n	800b460 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b45a:	4b07      	ldr	r3, [pc, #28]	@ (800b478 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b45c:	61bb      	str	r3, [r7, #24]
      break;
 800b45e:	bf00      	nop
  }

  return sysclockfreq;
 800b460:	69bb      	ldr	r3, [r7, #24]
}
 800b462:	4618      	mov	r0, r3
 800b464:	3724      	adds	r7, #36	@ 0x24
 800b466:	46bd      	mov	sp, r7
 800b468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46c:	4770      	bx	lr
 800b46e:	bf00      	nop
 800b470:	58024400 	.word	0x58024400
 800b474:	03d09000 	.word	0x03d09000
 800b478:	003d0900 	.word	0x003d0900
 800b47c:	016e3600 	.word	0x016e3600
 800b480:	46000000 	.word	0x46000000
 800b484:	4c742400 	.word	0x4c742400
 800b488:	4a742400 	.word	0x4a742400
 800b48c:	4bb71b00 	.word	0x4bb71b00

0800b490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b082      	sub	sp, #8
 800b494:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800b496:	f7ff fe81 	bl	800b19c <HAL_RCC_GetSysClockFreq>
 800b49a:	4602      	mov	r2, r0
 800b49c:	4b10      	ldr	r3, [pc, #64]	@ (800b4e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800b49e:	699b      	ldr	r3, [r3, #24]
 800b4a0:	0a1b      	lsrs	r3, r3, #8
 800b4a2:	f003 030f 	and.w	r3, r3, #15
 800b4a6:	490f      	ldr	r1, [pc, #60]	@ (800b4e4 <HAL_RCC_GetHCLKFreq+0x54>)
 800b4a8:	5ccb      	ldrb	r3, [r1, r3]
 800b4aa:	f003 031f 	and.w	r3, r3, #31
 800b4ae:	fa22 f303 	lsr.w	r3, r2, r3
 800b4b2:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800b4b4:	4b0a      	ldr	r3, [pc, #40]	@ (800b4e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800b4b6:	699b      	ldr	r3, [r3, #24]
 800b4b8:	f003 030f 	and.w	r3, r3, #15
 800b4bc:	4a09      	ldr	r2, [pc, #36]	@ (800b4e4 <HAL_RCC_GetHCLKFreq+0x54>)
 800b4be:	5cd3      	ldrb	r3, [r2, r3]
 800b4c0:	f003 031f 	and.w	r3, r3, #31
 800b4c4:	687a      	ldr	r2, [r7, #4]
 800b4c6:	fa22 f303 	lsr.w	r3, r2, r3
 800b4ca:	4a07      	ldr	r2, [pc, #28]	@ (800b4e8 <HAL_RCC_GetHCLKFreq+0x58>)
 800b4cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b4ce:	4a07      	ldr	r2, [pc, #28]	@ (800b4ec <HAL_RCC_GetHCLKFreq+0x5c>)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b4d4:	4b04      	ldr	r3, [pc, #16]	@ (800b4e8 <HAL_RCC_GetHCLKFreq+0x58>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3708      	adds	r7, #8
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}
 800b4e0:	58024400 	.word	0x58024400
 800b4e4:	08019cf4 	.word	0x08019cf4
 800b4e8:	24000004 	.word	0x24000004
 800b4ec:	24000000 	.word	0x24000000

0800b4f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800b4f4:	f7ff ffcc 	bl	800b490 <HAL_RCC_GetHCLKFreq>
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	4b06      	ldr	r3, [pc, #24]	@ (800b514 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b4fc:	69db      	ldr	r3, [r3, #28]
 800b4fe:	091b      	lsrs	r3, r3, #4
 800b500:	f003 0307 	and.w	r3, r3, #7
 800b504:	4904      	ldr	r1, [pc, #16]	@ (800b518 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b506:	5ccb      	ldrb	r3, [r1, r3]
 800b508:	f003 031f 	and.w	r3, r3, #31
 800b50c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b510:	4618      	mov	r0, r3
 800b512:	bd80      	pop	{r7, pc}
 800b514:	58024400 	.word	0x58024400
 800b518:	08019cf4 	.word	0x08019cf4

0800b51c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800b520:	f7ff ffb6 	bl	800b490 <HAL_RCC_GetHCLKFreq>
 800b524:	4602      	mov	r2, r0
 800b526:	4b06      	ldr	r3, [pc, #24]	@ (800b540 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b528:	69db      	ldr	r3, [r3, #28]
 800b52a:	0a1b      	lsrs	r3, r3, #8
 800b52c:	f003 0307 	and.w	r3, r3, #7
 800b530:	4904      	ldr	r1, [pc, #16]	@ (800b544 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b532:	5ccb      	ldrb	r3, [r1, r3]
 800b534:	f003 031f 	and.w	r3, r3, #31
 800b538:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	bd80      	pop	{r7, pc}
 800b540:	58024400 	.word	0x58024400
 800b544:	08019cf4 	.word	0x08019cf4

0800b548 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b548:	b480      	push	{r7}
 800b54a:	b083      	sub	sp, #12
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	223f      	movs	r2, #63	@ 0x3f
 800b556:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b558:	4b1a      	ldr	r3, [pc, #104]	@ (800b5c4 <HAL_RCC_GetClockConfig+0x7c>)
 800b55a:	691b      	ldr	r3, [r3, #16]
 800b55c:	f003 0207 	and.w	r2, r3, #7
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 800b564:	4b17      	ldr	r3, [pc, #92]	@ (800b5c4 <HAL_RCC_GetClockConfig+0x7c>)
 800b566:	699b      	ldr	r3, [r3, #24]
 800b568:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 800b570:	4b14      	ldr	r3, [pc, #80]	@ (800b5c4 <HAL_RCC_GetClockConfig+0x7c>)
 800b572:	699b      	ldr	r3, [r3, #24]
 800b574:	f003 020f 	and.w	r2, r3, #15
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 800b57c:	4b11      	ldr	r3, [pc, #68]	@ (800b5c4 <HAL_RCC_GetClockConfig+0x7c>)
 800b57e:	699b      	ldr	r3, [r3, #24]
 800b580:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 800b588:	4b0e      	ldr	r3, [pc, #56]	@ (800b5c4 <HAL_RCC_GetClockConfig+0x7c>)
 800b58a:	69db      	ldr	r3, [r3, #28]
 800b58c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 800b594:	4b0b      	ldr	r3, [pc, #44]	@ (800b5c4 <HAL_RCC_GetClockConfig+0x7c>)
 800b596:	69db      	ldr	r3, [r3, #28]
 800b598:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 800b5a0:	4b08      	ldr	r3, [pc, #32]	@ (800b5c4 <HAL_RCC_GetClockConfig+0x7c>)
 800b5a2:	6a1b      	ldr	r3, [r3, #32]
 800b5a4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b5ac:	4b06      	ldr	r3, [pc, #24]	@ (800b5c8 <HAL_RCC_GetClockConfig+0x80>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f003 020f 	and.w	r2, r3, #15
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	601a      	str	r2, [r3, #0]
}
 800b5b8:	bf00      	nop
 800b5ba:	370c      	adds	r7, #12
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c2:	4770      	bx	lr
 800b5c4:	58024400 	.word	0x58024400
 800b5c8:	52002000 	.word	0x52002000

0800b5cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b5cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b5d0:	b0c8      	sub	sp, #288	@ 0x120
 800b5d2:	af00      	add	r7, sp, #0
 800b5d4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b5d8:	2300      	movs	r3, #0
 800b5da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b5de:	2300      	movs	r3, #0
 800b5e0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b5e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ec:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800b5f0:	2500      	movs	r5, #0
 800b5f2:	ea54 0305 	orrs.w	r3, r4, r5
 800b5f6:	d049      	beq.n	800b68c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b5f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b5fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b602:	d02f      	beq.n	800b664 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b604:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b608:	d828      	bhi.n	800b65c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b60a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b60e:	d01a      	beq.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b610:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b614:	d822      	bhi.n	800b65c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b616:	2b00      	cmp	r3, #0
 800b618:	d003      	beq.n	800b622 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b61a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b61e:	d007      	beq.n	800b630 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b620:	e01c      	b.n	800b65c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b622:	4ba7      	ldr	r3, [pc, #668]	@ (800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b626:	4aa6      	ldr	r2, [pc, #664]	@ (800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b628:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b62c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b62e:	e01a      	b.n	800b666 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b630:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b634:	3308      	adds	r3, #8
 800b636:	2102      	movs	r1, #2
 800b638:	4618      	mov	r0, r3
 800b63a:	f001 fc43 	bl	800cec4 <RCCEx_PLL2_Config>
 800b63e:	4603      	mov	r3, r0
 800b640:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b644:	e00f      	b.n	800b666 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b646:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b64a:	3328      	adds	r3, #40	@ 0x28
 800b64c:	2102      	movs	r1, #2
 800b64e:	4618      	mov	r0, r3
 800b650:	f001 fcea 	bl	800d028 <RCCEx_PLL3_Config>
 800b654:	4603      	mov	r3, r0
 800b656:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b65a:	e004      	b.n	800b666 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b65c:	2301      	movs	r3, #1
 800b65e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b662:	e000      	b.n	800b666 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b664:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b666:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d10a      	bne.n	800b684 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b66e:	4b94      	ldr	r3, [pc, #592]	@ (800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b670:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b672:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b676:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b67a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b67c:	4a90      	ldr	r2, [pc, #576]	@ (800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b67e:	430b      	orrs	r3, r1
 800b680:	6513      	str	r3, [r2, #80]	@ 0x50
 800b682:	e003      	b.n	800b68c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b684:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b688:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b68c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b694:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800b698:	f04f 0900 	mov.w	r9, #0
 800b69c:	ea58 0309 	orrs.w	r3, r8, r9
 800b6a0:	d047      	beq.n	800b732 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b6a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b6a8:	2b04      	cmp	r3, #4
 800b6aa:	d82a      	bhi.n	800b702 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b6ac:	a201      	add	r2, pc, #4	@ (adr r2, 800b6b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b6ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6b2:	bf00      	nop
 800b6b4:	0800b6c9 	.word	0x0800b6c9
 800b6b8:	0800b6d7 	.word	0x0800b6d7
 800b6bc:	0800b6ed 	.word	0x0800b6ed
 800b6c0:	0800b70b 	.word	0x0800b70b
 800b6c4:	0800b70b 	.word	0x0800b70b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6c8:	4b7d      	ldr	r3, [pc, #500]	@ (800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b6ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6cc:	4a7c      	ldr	r2, [pc, #496]	@ (800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b6ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b6d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b6d4:	e01a      	b.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b6d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6da:	3308      	adds	r3, #8
 800b6dc:	2100      	movs	r1, #0
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f001 fbf0 	bl	800cec4 <RCCEx_PLL2_Config>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b6ea:	e00f      	b.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b6ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6f0:	3328      	adds	r3, #40	@ 0x28
 800b6f2:	2100      	movs	r1, #0
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f001 fc97 	bl	800d028 <RCCEx_PLL3_Config>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b700:	e004      	b.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b702:	2301      	movs	r3, #1
 800b704:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b708:	e000      	b.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b70a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b70c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b710:	2b00      	cmp	r3, #0
 800b712:	d10a      	bne.n	800b72a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b714:	4b6a      	ldr	r3, [pc, #424]	@ (800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b716:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b718:	f023 0107 	bic.w	r1, r3, #7
 800b71c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b722:	4a67      	ldr	r2, [pc, #412]	@ (800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b724:	430b      	orrs	r3, r1
 800b726:	6513      	str	r3, [r2, #80]	@ 0x50
 800b728:	e003      	b.n	800b732 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b72a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b72e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800b732:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b73a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800b73e:	f04f 0b00 	mov.w	fp, #0
 800b742:	ea5a 030b 	orrs.w	r3, sl, fp
 800b746:	d054      	beq.n	800b7f2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800b748:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b74c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b74e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800b752:	d036      	beq.n	800b7c2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800b754:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800b758:	d82f      	bhi.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b75a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b75e:	d032      	beq.n	800b7c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b760:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b764:	d829      	bhi.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b766:	2bc0      	cmp	r3, #192	@ 0xc0
 800b768:	d02f      	beq.n	800b7ca <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800b76a:	2bc0      	cmp	r3, #192	@ 0xc0
 800b76c:	d825      	bhi.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b76e:	2b80      	cmp	r3, #128	@ 0x80
 800b770:	d018      	beq.n	800b7a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800b772:	2b80      	cmp	r3, #128	@ 0x80
 800b774:	d821      	bhi.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b776:	2b00      	cmp	r3, #0
 800b778:	d002      	beq.n	800b780 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800b77a:	2b40      	cmp	r3, #64	@ 0x40
 800b77c:	d007      	beq.n	800b78e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800b77e:	e01c      	b.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b780:	4b4f      	ldr	r3, [pc, #316]	@ (800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b784:	4a4e      	ldr	r2, [pc, #312]	@ (800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b786:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b78a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b78c:	e01e      	b.n	800b7cc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b78e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b792:	3308      	adds	r3, #8
 800b794:	2100      	movs	r1, #0
 800b796:	4618      	mov	r0, r3
 800b798:	f001 fb94 	bl	800cec4 <RCCEx_PLL2_Config>
 800b79c:	4603      	mov	r3, r0
 800b79e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b7a2:	e013      	b.n	800b7cc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b7a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7a8:	3328      	adds	r3, #40	@ 0x28
 800b7aa:	2100      	movs	r1, #0
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f001 fc3b 	bl	800d028 <RCCEx_PLL3_Config>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b7b8:	e008      	b.n	800b7cc <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b7c0:	e004      	b.n	800b7cc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b7c2:	bf00      	nop
 800b7c4:	e002      	b.n	800b7cc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b7c6:	bf00      	nop
 800b7c8:	e000      	b.n	800b7cc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b7ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d10a      	bne.n	800b7ea <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800b7d4:	4b3a      	ldr	r3, [pc, #232]	@ (800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b7d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7d8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800b7dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b7e2:	4a37      	ldr	r2, [pc, #220]	@ (800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b7e4:	430b      	orrs	r3, r1
 800b7e6:	6513      	str	r3, [r2, #80]	@ 0x50
 800b7e8:	e003      	b.n	800b7f2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b7ee:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800b7f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7fa:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800b7fe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b802:	2300      	movs	r3, #0
 800b804:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800b808:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800b80c:	460b      	mov	r3, r1
 800b80e:	4313      	orrs	r3, r2
 800b810:	d05c      	beq.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800b812:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b816:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b818:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800b81c:	d03b      	beq.n	800b896 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b81e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800b822:	d834      	bhi.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b824:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b828:	d037      	beq.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800b82a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b82e:	d82e      	bhi.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b830:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800b834:	d033      	beq.n	800b89e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b836:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800b83a:	d828      	bhi.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b83c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b840:	d01a      	beq.n	800b878 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800b842:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b846:	d822      	bhi.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d003      	beq.n	800b854 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800b84c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b850:	d007      	beq.n	800b862 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800b852:	e01c      	b.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b854:	4b1a      	ldr	r3, [pc, #104]	@ (800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b858:	4a19      	ldr	r2, [pc, #100]	@ (800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b85a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b85e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b860:	e01e      	b.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b862:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b866:	3308      	adds	r3, #8
 800b868:	2100      	movs	r1, #0
 800b86a:	4618      	mov	r0, r3
 800b86c:	f001 fb2a 	bl	800cec4 <RCCEx_PLL2_Config>
 800b870:	4603      	mov	r3, r0
 800b872:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b876:	e013      	b.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b878:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b87c:	3328      	adds	r3, #40	@ 0x28
 800b87e:	2100      	movs	r1, #0
 800b880:	4618      	mov	r0, r3
 800b882:	f001 fbd1 	bl	800d028 <RCCEx_PLL3_Config>
 800b886:	4603      	mov	r3, r0
 800b888:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b88c:	e008      	b.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b88e:	2301      	movs	r3, #1
 800b890:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b894:	e004      	b.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b896:	bf00      	nop
 800b898:	e002      	b.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b89a:	bf00      	nop
 800b89c:	e000      	b.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b89e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d10d      	bne.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800b8a8:	4b05      	ldr	r3, [pc, #20]	@ (800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b8aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b8ac:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800b8b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b8b6:	4a02      	ldr	r2, [pc, #8]	@ (800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b8b8:	430b      	orrs	r3, r1
 800b8ba:	6513      	str	r3, [r2, #80]	@ 0x50
 800b8bc:	e006      	b.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0x300>
 800b8be:	bf00      	nop
 800b8c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b8c8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b8cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800b8d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b8dc:	2300      	movs	r3, #0
 800b8de:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b8e2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800b8e6:	460b      	mov	r3, r1
 800b8e8:	4313      	orrs	r3, r2
 800b8ea:	d03a      	beq.n	800b962 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800b8ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b8f2:	2b30      	cmp	r3, #48	@ 0x30
 800b8f4:	d01f      	beq.n	800b936 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800b8f6:	2b30      	cmp	r3, #48	@ 0x30
 800b8f8:	d819      	bhi.n	800b92e <HAL_RCCEx_PeriphCLKConfig+0x362>
 800b8fa:	2b20      	cmp	r3, #32
 800b8fc:	d00c      	beq.n	800b918 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800b8fe:	2b20      	cmp	r3, #32
 800b900:	d815      	bhi.n	800b92e <HAL_RCCEx_PeriphCLKConfig+0x362>
 800b902:	2b00      	cmp	r3, #0
 800b904:	d019      	beq.n	800b93a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800b906:	2b10      	cmp	r3, #16
 800b908:	d111      	bne.n	800b92e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b90a:	4bae      	ldr	r3, [pc, #696]	@ (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b90c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b90e:	4aad      	ldr	r2, [pc, #692]	@ (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b910:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b914:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b916:	e011      	b.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b918:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b91c:	3308      	adds	r3, #8
 800b91e:	2102      	movs	r1, #2
 800b920:	4618      	mov	r0, r3
 800b922:	f001 facf 	bl	800cec4 <RCCEx_PLL2_Config>
 800b926:	4603      	mov	r3, r0
 800b928:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b92c:	e006      	b.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b92e:	2301      	movs	r3, #1
 800b930:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b934:	e002      	b.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800b936:	bf00      	nop
 800b938:	e000      	b.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800b93a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b93c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b940:	2b00      	cmp	r3, #0
 800b942:	d10a      	bne.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b944:	4b9f      	ldr	r3, [pc, #636]	@ (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b948:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800b94c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b952:	4a9c      	ldr	r2, [pc, #624]	@ (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b954:	430b      	orrs	r3, r1
 800b956:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b958:	e003      	b.n	800b962 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b95a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b95e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b962:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b96a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800b96e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b972:	2300      	movs	r3, #0
 800b974:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b978:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800b97c:	460b      	mov	r3, r1
 800b97e:	4313      	orrs	r3, r2
 800b980:	d051      	beq.n	800ba26 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b982:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b986:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b988:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b98c:	d035      	beq.n	800b9fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800b98e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b992:	d82e      	bhi.n	800b9f2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b994:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b998:	d031      	beq.n	800b9fe <HAL_RCCEx_PeriphCLKConfig+0x432>
 800b99a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b99e:	d828      	bhi.n	800b9f2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b9a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b9a4:	d01a      	beq.n	800b9dc <HAL_RCCEx_PeriphCLKConfig+0x410>
 800b9a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b9aa:	d822      	bhi.n	800b9f2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d003      	beq.n	800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800b9b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b9b4:	d007      	beq.n	800b9c6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800b9b6:	e01c      	b.n	800b9f2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9b8:	4b82      	ldr	r3, [pc, #520]	@ (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b9ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9bc:	4a81      	ldr	r2, [pc, #516]	@ (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b9be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b9c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b9c4:	e01c      	b.n	800ba00 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b9c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9ca:	3308      	adds	r3, #8
 800b9cc:	2100      	movs	r1, #0
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f001 fa78 	bl	800cec4 <RCCEx_PLL2_Config>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b9da:	e011      	b.n	800ba00 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b9dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9e0:	3328      	adds	r3, #40	@ 0x28
 800b9e2:	2100      	movs	r1, #0
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f001 fb1f 	bl	800d028 <RCCEx_PLL3_Config>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b9f0:	e006      	b.n	800ba00 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b9f8:	e002      	b.n	800ba00 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800b9fa:	bf00      	nop
 800b9fc:	e000      	b.n	800ba00 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800b9fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d10a      	bne.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ba08:	4b6e      	ldr	r3, [pc, #440]	@ (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba0c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800ba10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba16:	4a6b      	ldr	r2, [pc, #428]	@ (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba18:	430b      	orrs	r3, r1
 800ba1a:	6513      	str	r3, [r2, #80]	@ 0x50
 800ba1c:	e003      	b.n	800ba26 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba1e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ba22:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ba26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba2e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800ba32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ba36:	2300      	movs	r3, #0
 800ba38:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800ba3c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800ba40:	460b      	mov	r3, r1
 800ba42:	4313      	orrs	r3, r2
 800ba44:	d053      	beq.n	800baee <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ba46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ba4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ba50:	d033      	beq.n	800baba <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800ba52:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ba56:	d82c      	bhi.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800ba58:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ba5c:	d02f      	beq.n	800babe <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800ba5e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ba62:	d826      	bhi.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800ba64:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ba68:	d02b      	beq.n	800bac2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ba6a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ba6e:	d820      	bhi.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800ba70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba74:	d012      	beq.n	800ba9c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800ba76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba7a:	d81a      	bhi.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d022      	beq.n	800bac6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800ba80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba84:	d115      	bne.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba8a:	3308      	adds	r3, #8
 800ba8c:	2101      	movs	r1, #1
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f001 fa18 	bl	800cec4 <RCCEx_PLL2_Config>
 800ba94:	4603      	mov	r3, r0
 800ba96:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ba9a:	e015      	b.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800baa0:	3328      	adds	r3, #40	@ 0x28
 800baa2:	2101      	movs	r1, #1
 800baa4:	4618      	mov	r0, r3
 800baa6:	f001 fabf 	bl	800d028 <RCCEx_PLL3_Config>
 800baaa:	4603      	mov	r3, r0
 800baac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bab0:	e00a      	b.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bab2:	2301      	movs	r3, #1
 800bab4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bab8:	e006      	b.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800baba:	bf00      	nop
 800babc:	e004      	b.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800babe:	bf00      	nop
 800bac0:	e002      	b.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bac2:	bf00      	nop
 800bac4:	e000      	b.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bac6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bac8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d10a      	bne.n	800bae6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bad0:	4b3c      	ldr	r3, [pc, #240]	@ (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bad2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bad4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800bad8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800badc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bade:	4a39      	ldr	r2, [pc, #228]	@ (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bae0:	430b      	orrs	r3, r1
 800bae2:	6513      	str	r3, [r2, #80]	@ 0x50
 800bae4:	e003      	b.n	800baee <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bae6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800baea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800baee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800baf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800bafa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bafe:	2300      	movs	r3, #0
 800bb00:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bb04:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800bb08:	460b      	mov	r3, r1
 800bb0a:	4313      	orrs	r3, r2
 800bb0c:	d060      	beq.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800bb0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bb16:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800bb1a:	d039      	beq.n	800bb90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800bb1c:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800bb20:	d832      	bhi.n	800bb88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bb22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bb26:	d035      	beq.n	800bb94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800bb28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bb2c:	d82c      	bhi.n	800bb88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bb2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb32:	d031      	beq.n	800bb98 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800bb34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb38:	d826      	bhi.n	800bb88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bb3a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bb3e:	d02d      	beq.n	800bb9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800bb40:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bb44:	d820      	bhi.n	800bb88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bb46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bb4a:	d012      	beq.n	800bb72 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800bb4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bb50:	d81a      	bhi.n	800bb88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d024      	beq.n	800bba0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800bb56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bb5a:	d115      	bne.n	800bb88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bb5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb60:	3308      	adds	r3, #8
 800bb62:	2101      	movs	r1, #1
 800bb64:	4618      	mov	r0, r3
 800bb66:	f001 f9ad 	bl	800cec4 <RCCEx_PLL2_Config>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bb70:	e017      	b.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb76:	3328      	adds	r3, #40	@ 0x28
 800bb78:	2101      	movs	r1, #1
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f001 fa54 	bl	800d028 <RCCEx_PLL3_Config>
 800bb80:	4603      	mov	r3, r0
 800bb82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bb86:	e00c      	b.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800bb88:	2301      	movs	r3, #1
 800bb8a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bb8e:	e008      	b.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bb90:	bf00      	nop
 800bb92:	e006      	b.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bb94:	bf00      	nop
 800bb96:	e004      	b.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bb98:	bf00      	nop
 800bb9a:	e002      	b.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bb9c:	bf00      	nop
 800bb9e:	e000      	b.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bba0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bba2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d10e      	bne.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bbaa:	4b06      	ldr	r3, [pc, #24]	@ (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bbac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bbae:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800bbb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bbba:	4a02      	ldr	r2, [pc, #8]	@ (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bbbc:	430b      	orrs	r3, r1
 800bbbe:	6593      	str	r3, [r2, #88]	@ 0x58
 800bbc0:	e006      	b.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800bbc2:	bf00      	nop
 800bbc4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbc8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bbcc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bbd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800bbdc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800bbe6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800bbea:	460b      	mov	r3, r1
 800bbec:	4313      	orrs	r3, r2
 800bbee:	d037      	beq.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800bbf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbf4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bbf6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bbfa:	d00e      	beq.n	800bc1a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800bbfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bc00:	d816      	bhi.n	800bc30 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d018      	beq.n	800bc38 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800bc06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bc0a:	d111      	bne.n	800bc30 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc0c:	4bc4      	ldr	r3, [pc, #784]	@ (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc10:	4ac3      	ldr	r2, [pc, #780]	@ (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bc16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bc18:	e00f      	b.n	800bc3a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bc1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc1e:	3308      	adds	r3, #8
 800bc20:	2101      	movs	r1, #1
 800bc22:	4618      	mov	r0, r3
 800bc24:	f001 f94e 	bl	800cec4 <RCCEx_PLL2_Config>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bc2e:	e004      	b.n	800bc3a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc30:	2301      	movs	r3, #1
 800bc32:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bc36:	e000      	b.n	800bc3a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800bc38:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc3a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d10a      	bne.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bc42:	4bb7      	ldr	r3, [pc, #732]	@ (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc46:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800bc4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bc50:	4ab3      	ldr	r2, [pc, #716]	@ (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc52:	430b      	orrs	r3, r1
 800bc54:	6513      	str	r3, [r2, #80]	@ 0x50
 800bc56:	e003      	b.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc58:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bc5c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bc60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc68:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800bc6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bc70:	2300      	movs	r3, #0
 800bc72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800bc76:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800bc7a:	460b      	mov	r3, r1
 800bc7c:	4313      	orrs	r3, r2
 800bc7e:	d039      	beq.n	800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800bc80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bc86:	2b03      	cmp	r3, #3
 800bc88:	d81c      	bhi.n	800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800bc8a:	a201      	add	r2, pc, #4	@ (adr r2, 800bc90 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800bc8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc90:	0800bccd 	.word	0x0800bccd
 800bc94:	0800bca1 	.word	0x0800bca1
 800bc98:	0800bcaf 	.word	0x0800bcaf
 800bc9c:	0800bccd 	.word	0x0800bccd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bca0:	4b9f      	ldr	r3, [pc, #636]	@ (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bca4:	4a9e      	ldr	r2, [pc, #632]	@ (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bca6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bcaa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bcac:	e00f      	b.n	800bcce <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bcae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcb2:	3308      	adds	r3, #8
 800bcb4:	2102      	movs	r1, #2
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f001 f904 	bl	800cec4 <RCCEx_PLL2_Config>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bcc2:	e004      	b.n	800bcce <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bcca:	e000      	b.n	800bcce <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800bccc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d10a      	bne.n	800bcec <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bcd6:	4b92      	ldr	r3, [pc, #584]	@ (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bcd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bcda:	f023 0103 	bic.w	r1, r3, #3
 800bcde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bce2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bce4:	4a8e      	ldr	r2, [pc, #568]	@ (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bce6:	430b      	orrs	r3, r1
 800bce8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800bcea:	e003      	b.n	800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bcf0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bcf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcfc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800bd00:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bd04:	2300      	movs	r3, #0
 800bd06:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800bd0a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800bd0e:	460b      	mov	r3, r1
 800bd10:	4313      	orrs	r3, r2
 800bd12:	f000 8099 	beq.w	800be48 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bd16:	4b83      	ldr	r3, [pc, #524]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	4a82      	ldr	r2, [pc, #520]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bd1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bd20:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bd22:	f7fa fd45 	bl	80067b0 <HAL_GetTick>
 800bd26:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bd2a:	e00b      	b.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bd2c:	f7fa fd40 	bl	80067b0 <HAL_GetTick>
 800bd30:	4602      	mov	r2, r0
 800bd32:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800bd36:	1ad3      	subs	r3, r2, r3
 800bd38:	2b64      	cmp	r3, #100	@ 0x64
 800bd3a:	d903      	bls.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800bd3c:	2303      	movs	r3, #3
 800bd3e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bd42:	e005      	b.n	800bd50 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bd44:	4b77      	ldr	r3, [pc, #476]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d0ed      	beq.n	800bd2c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800bd50:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d173      	bne.n	800be40 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bd58:	4b71      	ldr	r3, [pc, #452]	@ (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd5a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800bd5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd60:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800bd64:	4053      	eors	r3, r2
 800bd66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d015      	beq.n	800bd9a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bd6e:	4b6c      	ldr	r3, [pc, #432]	@ (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bd76:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bd7a:	4b69      	ldr	r3, [pc, #420]	@ (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd7e:	4a68      	ldr	r2, [pc, #416]	@ (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bd84:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bd86:	4b66      	ldr	r3, [pc, #408]	@ (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd8a:	4a65      	ldr	r2, [pc, #404]	@ (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bd90:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bd92:	4a63      	ldr	r2, [pc, #396]	@ (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bd98:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bd9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800bda2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bda6:	d118      	bne.n	800bdda <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bda8:	f7fa fd02 	bl	80067b0 <HAL_GetTick>
 800bdac:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bdb0:	e00d      	b.n	800bdce <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bdb2:	f7fa fcfd 	bl	80067b0 <HAL_GetTick>
 800bdb6:	4602      	mov	r2, r0
 800bdb8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800bdbc:	1ad2      	subs	r2, r2, r3
 800bdbe:	f241 3388 	movw	r3, #5000	@ 0x1388
 800bdc2:	429a      	cmp	r2, r3
 800bdc4:	d903      	bls.n	800bdce <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800bdc6:	2303      	movs	r3, #3
 800bdc8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 800bdcc:	e005      	b.n	800bdda <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bdce:	4b54      	ldr	r3, [pc, #336]	@ (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bdd2:	f003 0302 	and.w	r3, r3, #2
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d0eb      	beq.n	800bdb2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800bdda:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d129      	bne.n	800be36 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bde2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bde6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800bdea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bdee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bdf2:	d10e      	bne.n	800be12 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800bdf4:	4b4a      	ldr	r3, [pc, #296]	@ (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdf6:	691b      	ldr	r3, [r3, #16]
 800bdf8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800bdfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800be04:	091a      	lsrs	r2, r3, #4
 800be06:	4b48      	ldr	r3, [pc, #288]	@ (800bf28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800be08:	4013      	ands	r3, r2
 800be0a:	4a45      	ldr	r2, [pc, #276]	@ (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be0c:	430b      	orrs	r3, r1
 800be0e:	6113      	str	r3, [r2, #16]
 800be10:	e005      	b.n	800be1e <HAL_RCCEx_PeriphCLKConfig+0x852>
 800be12:	4b43      	ldr	r3, [pc, #268]	@ (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be14:	691b      	ldr	r3, [r3, #16]
 800be16:	4a42      	ldr	r2, [pc, #264]	@ (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be18:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800be1c:	6113      	str	r3, [r2, #16]
 800be1e:	4b40      	ldr	r3, [pc, #256]	@ (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be20:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800be22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800be2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800be2e:	4a3c      	ldr	r2, [pc, #240]	@ (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be30:	430b      	orrs	r3, r1
 800be32:	6713      	str	r3, [r2, #112]	@ 0x70
 800be34:	e008      	b.n	800be48 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800be36:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800be3a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800be3e:	e003      	b.n	800be48 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be40:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800be44:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800be48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be50:	f002 0301 	and.w	r3, r2, #1
 800be54:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800be58:	2300      	movs	r3, #0
 800be5a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800be5e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800be62:	460b      	mov	r3, r1
 800be64:	4313      	orrs	r3, r2
 800be66:	f000 8090 	beq.w	800bf8a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800be6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be72:	2b28      	cmp	r3, #40	@ 0x28
 800be74:	d870      	bhi.n	800bf58 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800be76:	a201      	add	r2, pc, #4	@ (adr r2, 800be7c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800be78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be7c:	0800bf61 	.word	0x0800bf61
 800be80:	0800bf59 	.word	0x0800bf59
 800be84:	0800bf59 	.word	0x0800bf59
 800be88:	0800bf59 	.word	0x0800bf59
 800be8c:	0800bf59 	.word	0x0800bf59
 800be90:	0800bf59 	.word	0x0800bf59
 800be94:	0800bf59 	.word	0x0800bf59
 800be98:	0800bf59 	.word	0x0800bf59
 800be9c:	0800bf2d 	.word	0x0800bf2d
 800bea0:	0800bf59 	.word	0x0800bf59
 800bea4:	0800bf59 	.word	0x0800bf59
 800bea8:	0800bf59 	.word	0x0800bf59
 800beac:	0800bf59 	.word	0x0800bf59
 800beb0:	0800bf59 	.word	0x0800bf59
 800beb4:	0800bf59 	.word	0x0800bf59
 800beb8:	0800bf59 	.word	0x0800bf59
 800bebc:	0800bf43 	.word	0x0800bf43
 800bec0:	0800bf59 	.word	0x0800bf59
 800bec4:	0800bf59 	.word	0x0800bf59
 800bec8:	0800bf59 	.word	0x0800bf59
 800becc:	0800bf59 	.word	0x0800bf59
 800bed0:	0800bf59 	.word	0x0800bf59
 800bed4:	0800bf59 	.word	0x0800bf59
 800bed8:	0800bf59 	.word	0x0800bf59
 800bedc:	0800bf61 	.word	0x0800bf61
 800bee0:	0800bf59 	.word	0x0800bf59
 800bee4:	0800bf59 	.word	0x0800bf59
 800bee8:	0800bf59 	.word	0x0800bf59
 800beec:	0800bf59 	.word	0x0800bf59
 800bef0:	0800bf59 	.word	0x0800bf59
 800bef4:	0800bf59 	.word	0x0800bf59
 800bef8:	0800bf59 	.word	0x0800bf59
 800befc:	0800bf61 	.word	0x0800bf61
 800bf00:	0800bf59 	.word	0x0800bf59
 800bf04:	0800bf59 	.word	0x0800bf59
 800bf08:	0800bf59 	.word	0x0800bf59
 800bf0c:	0800bf59 	.word	0x0800bf59
 800bf10:	0800bf59 	.word	0x0800bf59
 800bf14:	0800bf59 	.word	0x0800bf59
 800bf18:	0800bf59 	.word	0x0800bf59
 800bf1c:	0800bf61 	.word	0x0800bf61
 800bf20:	58024400 	.word	0x58024400
 800bf24:	58024800 	.word	0x58024800
 800bf28:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bf2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf30:	3308      	adds	r3, #8
 800bf32:	2101      	movs	r1, #1
 800bf34:	4618      	mov	r0, r3
 800bf36:	f000 ffc5 	bl	800cec4 <RCCEx_PLL2_Config>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bf40:	e00f      	b.n	800bf62 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bf42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf46:	3328      	adds	r3, #40	@ 0x28
 800bf48:	2101      	movs	r1, #1
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f001 f86c 	bl	800d028 <RCCEx_PLL3_Config>
 800bf50:	4603      	mov	r3, r0
 800bf52:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bf56:	e004      	b.n	800bf62 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf58:	2301      	movs	r3, #1
 800bf5a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bf5e:	e000      	b.n	800bf62 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800bf60:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf62:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d10b      	bne.n	800bf82 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bf6a:	4bc0      	ldr	r3, [pc, #768]	@ (800c26c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bf6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf6e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800bf72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf7a:	4abc      	ldr	r2, [pc, #752]	@ (800c26c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bf7c:	430b      	orrs	r3, r1
 800bf7e:	6553      	str	r3, [r2, #84]	@ 0x54
 800bf80:	e003      	b.n	800bf8a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf82:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bf86:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bf8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf92:	f002 0302 	and.w	r3, r2, #2
 800bf96:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800bfa0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800bfa4:	460b      	mov	r3, r1
 800bfa6:	4313      	orrs	r3, r2
 800bfa8:	d043      	beq.n	800c032 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800bfaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bfae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bfb2:	2b05      	cmp	r3, #5
 800bfb4:	d824      	bhi.n	800c000 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800bfb6:	a201      	add	r2, pc, #4	@ (adr r2, 800bfbc <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800bfb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfbc:	0800c009 	.word	0x0800c009
 800bfc0:	0800bfd5 	.word	0x0800bfd5
 800bfc4:	0800bfeb 	.word	0x0800bfeb
 800bfc8:	0800c009 	.word	0x0800c009
 800bfcc:	0800c009 	.word	0x0800c009
 800bfd0:	0800c009 	.word	0x0800c009
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bfd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bfd8:	3308      	adds	r3, #8
 800bfda:	2101      	movs	r1, #1
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f000 ff71 	bl	800cec4 <RCCEx_PLL2_Config>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bfe8:	e00f      	b.n	800c00a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bfea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bfee:	3328      	adds	r3, #40	@ 0x28
 800bff0:	2101      	movs	r1, #1
 800bff2:	4618      	mov	r0, r3
 800bff4:	f001 f818 	bl	800d028 <RCCEx_PLL3_Config>
 800bff8:	4603      	mov	r3, r0
 800bffa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bffe:	e004      	b.n	800c00a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c000:	2301      	movs	r3, #1
 800c002:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c006:	e000      	b.n	800c00a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800c008:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c00a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d10b      	bne.n	800c02a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c012:	4b96      	ldr	r3, [pc, #600]	@ (800c26c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c016:	f023 0107 	bic.w	r1, r3, #7
 800c01a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c01e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c022:	4a92      	ldr	r2, [pc, #584]	@ (800c26c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c024:	430b      	orrs	r3, r1
 800c026:	6553      	str	r3, [r2, #84]	@ 0x54
 800c028:	e003      	b.n	800c032 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c02a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c02e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c032:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c03a:	f002 0304 	and.w	r3, r2, #4
 800c03e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c042:	2300      	movs	r3, #0
 800c044:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c048:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800c04c:	460b      	mov	r3, r1
 800c04e:	4313      	orrs	r3, r2
 800c050:	d043      	beq.n	800c0da <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c052:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c056:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c05a:	2b05      	cmp	r3, #5
 800c05c:	d824      	bhi.n	800c0a8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800c05e:	a201      	add	r2, pc, #4	@ (adr r2, 800c064 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800c060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c064:	0800c0b1 	.word	0x0800c0b1
 800c068:	0800c07d 	.word	0x0800c07d
 800c06c:	0800c093 	.word	0x0800c093
 800c070:	0800c0b1 	.word	0x0800c0b1
 800c074:	0800c0b1 	.word	0x0800c0b1
 800c078:	0800c0b1 	.word	0x0800c0b1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c07c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c080:	3308      	adds	r3, #8
 800c082:	2101      	movs	r1, #1
 800c084:	4618      	mov	r0, r3
 800c086:	f000 ff1d 	bl	800cec4 <RCCEx_PLL2_Config>
 800c08a:	4603      	mov	r3, r0
 800c08c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c090:	e00f      	b.n	800c0b2 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c092:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c096:	3328      	adds	r3, #40	@ 0x28
 800c098:	2101      	movs	r1, #1
 800c09a:	4618      	mov	r0, r3
 800c09c:	f000 ffc4 	bl	800d028 <RCCEx_PLL3_Config>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c0a6:	e004      	b.n	800c0b2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c0a8:	2301      	movs	r3, #1
 800c0aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c0ae:	e000      	b.n	800c0b2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800c0b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c0b2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d10b      	bne.n	800c0d2 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c0ba:	4b6c      	ldr	r3, [pc, #432]	@ (800c26c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c0bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0be:	f023 0107 	bic.w	r1, r3, #7
 800c0c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c0c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c0ca:	4a68      	ldr	r2, [pc, #416]	@ (800c26c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c0cc:	430b      	orrs	r3, r1
 800c0ce:	6593      	str	r3, [r2, #88]	@ 0x58
 800c0d0:	e003      	b.n	800c0da <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0d2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c0d6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c0da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e2:	f002 0320 	and.w	r3, r2, #32
 800c0e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c0f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c0f4:	460b      	mov	r3, r1
 800c0f6:	4313      	orrs	r3, r2
 800c0f8:	d055      	beq.n	800c1a6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c0fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c0fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c102:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c106:	d033      	beq.n	800c170 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c108:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c10c:	d82c      	bhi.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c10e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c112:	d02f      	beq.n	800c174 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c114:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c118:	d826      	bhi.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c11a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c11e:	d02b      	beq.n	800c178 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c120:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c124:	d820      	bhi.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c126:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c12a:	d012      	beq.n	800c152 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800c12c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c130:	d81a      	bhi.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c132:	2b00      	cmp	r3, #0
 800c134:	d022      	beq.n	800c17c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800c136:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c13a:	d115      	bne.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c13c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c140:	3308      	adds	r3, #8
 800c142:	2100      	movs	r1, #0
 800c144:	4618      	mov	r0, r3
 800c146:	f000 febd 	bl	800cec4 <RCCEx_PLL2_Config>
 800c14a:	4603      	mov	r3, r0
 800c14c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c150:	e015      	b.n	800c17e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c152:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c156:	3328      	adds	r3, #40	@ 0x28
 800c158:	2102      	movs	r1, #2
 800c15a:	4618      	mov	r0, r3
 800c15c:	f000 ff64 	bl	800d028 <RCCEx_PLL3_Config>
 800c160:	4603      	mov	r3, r0
 800c162:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c166:	e00a      	b.n	800c17e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c168:	2301      	movs	r3, #1
 800c16a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c16e:	e006      	b.n	800c17e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c170:	bf00      	nop
 800c172:	e004      	b.n	800c17e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c174:	bf00      	nop
 800c176:	e002      	b.n	800c17e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c178:	bf00      	nop
 800c17a:	e000      	b.n	800c17e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c17c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c17e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c182:	2b00      	cmp	r3, #0
 800c184:	d10b      	bne.n	800c19e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c186:	4b39      	ldr	r3, [pc, #228]	@ (800c26c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c18a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c18e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c192:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c196:	4a35      	ldr	r2, [pc, #212]	@ (800c26c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c198:	430b      	orrs	r3, r1
 800c19a:	6553      	str	r3, [r2, #84]	@ 0x54
 800c19c:	e003      	b.n	800c1a6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c19e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c1a2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c1a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ae:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800c1b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c1bc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800c1c0:	460b      	mov	r3, r1
 800c1c2:	4313      	orrs	r3, r2
 800c1c4:	d058      	beq.n	800c278 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c1c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c1ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c1ce:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c1d2:	d033      	beq.n	800c23c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c1d4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c1d8:	d82c      	bhi.n	800c234 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c1da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c1de:	d02f      	beq.n	800c240 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c1e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c1e4:	d826      	bhi.n	800c234 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c1e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c1ea:	d02b      	beq.n	800c244 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c1ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c1f0:	d820      	bhi.n	800c234 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c1f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c1f6:	d012      	beq.n	800c21e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800c1f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c1fc:	d81a      	bhi.n	800c234 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d022      	beq.n	800c248 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800c202:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c206:	d115      	bne.n	800c234 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c208:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c20c:	3308      	adds	r3, #8
 800c20e:	2100      	movs	r1, #0
 800c210:	4618      	mov	r0, r3
 800c212:	f000 fe57 	bl	800cec4 <RCCEx_PLL2_Config>
 800c216:	4603      	mov	r3, r0
 800c218:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c21c:	e015      	b.n	800c24a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c21e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c222:	3328      	adds	r3, #40	@ 0x28
 800c224:	2102      	movs	r1, #2
 800c226:	4618      	mov	r0, r3
 800c228:	f000 fefe 	bl	800d028 <RCCEx_PLL3_Config>
 800c22c:	4603      	mov	r3, r0
 800c22e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c232:	e00a      	b.n	800c24a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c234:	2301      	movs	r3, #1
 800c236:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c23a:	e006      	b.n	800c24a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c23c:	bf00      	nop
 800c23e:	e004      	b.n	800c24a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c240:	bf00      	nop
 800c242:	e002      	b.n	800c24a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c244:	bf00      	nop
 800c246:	e000      	b.n	800c24a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c248:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c24a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d10e      	bne.n	800c270 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c252:	4b06      	ldr	r3, [pc, #24]	@ (800c26c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c256:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800c25a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c25e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c262:	4a02      	ldr	r2, [pc, #8]	@ (800c26c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c264:	430b      	orrs	r3, r1
 800c266:	6593      	str	r3, [r2, #88]	@ 0x58
 800c268:	e006      	b.n	800c278 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800c26a:	bf00      	nop
 800c26c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c270:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c274:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c278:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c280:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800c284:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c288:	2300      	movs	r3, #0
 800c28a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c28e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800c292:	460b      	mov	r3, r1
 800c294:	4313      	orrs	r3, r2
 800c296:	d055      	beq.n	800c344 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c298:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c29c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c2a0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c2a4:	d033      	beq.n	800c30e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c2a6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c2aa:	d82c      	bhi.n	800c306 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c2ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c2b0:	d02f      	beq.n	800c312 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c2b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c2b6:	d826      	bhi.n	800c306 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c2b8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c2bc:	d02b      	beq.n	800c316 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c2be:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c2c2:	d820      	bhi.n	800c306 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c2c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c2c8:	d012      	beq.n	800c2f0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800c2ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c2ce:	d81a      	bhi.n	800c306 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d022      	beq.n	800c31a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800c2d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c2d8:	d115      	bne.n	800c306 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c2da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c2de:	3308      	adds	r3, #8
 800c2e0:	2100      	movs	r1, #0
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f000 fdee 	bl	800cec4 <RCCEx_PLL2_Config>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c2ee:	e015      	b.n	800c31c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c2f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c2f4:	3328      	adds	r3, #40	@ 0x28
 800c2f6:	2102      	movs	r1, #2
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f000 fe95 	bl	800d028 <RCCEx_PLL3_Config>
 800c2fe:	4603      	mov	r3, r0
 800c300:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c304:	e00a      	b.n	800c31c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c306:	2301      	movs	r3, #1
 800c308:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c30c:	e006      	b.n	800c31c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c30e:	bf00      	nop
 800c310:	e004      	b.n	800c31c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c312:	bf00      	nop
 800c314:	e002      	b.n	800c31c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c316:	bf00      	nop
 800c318:	e000      	b.n	800c31c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c31a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c31c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c320:	2b00      	cmp	r3, #0
 800c322:	d10b      	bne.n	800c33c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c324:	4ba1      	ldr	r3, [pc, #644]	@ (800c5ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c328:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800c32c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c330:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c334:	4a9d      	ldr	r2, [pc, #628]	@ (800c5ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c336:	430b      	orrs	r3, r1
 800c338:	6593      	str	r3, [r2, #88]	@ 0x58
 800c33a:	e003      	b.n	800c344 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c33c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c340:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c344:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c34c:	f002 0308 	and.w	r3, r2, #8
 800c350:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c354:	2300      	movs	r3, #0
 800c356:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c35a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800c35e:	460b      	mov	r3, r1
 800c360:	4313      	orrs	r3, r2
 800c362:	d01e      	beq.n	800c3a2 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800c364:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c368:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c36c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c370:	d10c      	bne.n	800c38c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c372:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c376:	3328      	adds	r3, #40	@ 0x28
 800c378:	2102      	movs	r1, #2
 800c37a:	4618      	mov	r0, r3
 800c37c:	f000 fe54 	bl	800d028 <RCCEx_PLL3_Config>
 800c380:	4603      	mov	r3, r0
 800c382:	2b00      	cmp	r3, #0
 800c384:	d002      	beq.n	800c38c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800c386:	2301      	movs	r3, #1
 800c388:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c38c:	4b87      	ldr	r3, [pc, #540]	@ (800c5ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c38e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c390:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c394:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c398:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c39c:	4a83      	ldr	r2, [pc, #524]	@ (800c5ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c39e:	430b      	orrs	r3, r1
 800c3a0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c3a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3aa:	f002 0310 	and.w	r3, r2, #16
 800c3ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c3b8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800c3bc:	460b      	mov	r3, r1
 800c3be:	4313      	orrs	r3, r2
 800c3c0:	d01e      	beq.n	800c400 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c3c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c3ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c3ce:	d10c      	bne.n	800c3ea <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c3d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3d4:	3328      	adds	r3, #40	@ 0x28
 800c3d6:	2102      	movs	r1, #2
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f000 fe25 	bl	800d028 <RCCEx_PLL3_Config>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d002      	beq.n	800c3ea <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c3ea:	4b70      	ldr	r3, [pc, #448]	@ (800c5ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c3ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c3ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c3f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c3fa:	4a6c      	ldr	r2, [pc, #432]	@ (800c5ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c3fc:	430b      	orrs	r3, r1
 800c3fe:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c400:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c408:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800c40c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c410:	2300      	movs	r3, #0
 800c412:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c416:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800c41a:	460b      	mov	r3, r1
 800c41c:	4313      	orrs	r3, r2
 800c41e:	d03e      	beq.n	800c49e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c420:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c424:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c428:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c42c:	d022      	beq.n	800c474 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800c42e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c432:	d81b      	bhi.n	800c46c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c434:	2b00      	cmp	r3, #0
 800c436:	d003      	beq.n	800c440 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800c438:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c43c:	d00b      	beq.n	800c456 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800c43e:	e015      	b.n	800c46c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c440:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c444:	3308      	adds	r3, #8
 800c446:	2100      	movs	r1, #0
 800c448:	4618      	mov	r0, r3
 800c44a:	f000 fd3b 	bl	800cec4 <RCCEx_PLL2_Config>
 800c44e:	4603      	mov	r3, r0
 800c450:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c454:	e00f      	b.n	800c476 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c456:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c45a:	3328      	adds	r3, #40	@ 0x28
 800c45c:	2102      	movs	r1, #2
 800c45e:	4618      	mov	r0, r3
 800c460:	f000 fde2 	bl	800d028 <RCCEx_PLL3_Config>
 800c464:	4603      	mov	r3, r0
 800c466:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c46a:	e004      	b.n	800c476 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c46c:	2301      	movs	r3, #1
 800c46e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c472:	e000      	b.n	800c476 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800c474:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c476:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d10b      	bne.n	800c496 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c47e:	4b4b      	ldr	r3, [pc, #300]	@ (800c5ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c482:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800c486:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c48a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c48e:	4a47      	ldr	r2, [pc, #284]	@ (800c5ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c490:	430b      	orrs	r3, r1
 800c492:	6593      	str	r3, [r2, #88]	@ 0x58
 800c494:	e003      	b.n	800c49e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c496:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c49a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c49e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800c4aa:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c4b0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800c4b4:	460b      	mov	r3, r1
 800c4b6:	4313      	orrs	r3, r2
 800c4b8:	d03b      	beq.n	800c532 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c4ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4c2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c4c6:	d01f      	beq.n	800c508 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800c4c8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c4cc:	d818      	bhi.n	800c500 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c4ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c4d2:	d003      	beq.n	800c4dc <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800c4d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c4d8:	d007      	beq.n	800c4ea <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800c4da:	e011      	b.n	800c500 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c4dc:	4b33      	ldr	r3, [pc, #204]	@ (800c5ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c4de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4e0:	4a32      	ldr	r2, [pc, #200]	@ (800c5ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c4e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c4e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c4e8:	e00f      	b.n	800c50a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c4ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4ee:	3328      	adds	r3, #40	@ 0x28
 800c4f0:	2101      	movs	r1, #1
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f000 fd98 	bl	800d028 <RCCEx_PLL3_Config>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800c4fe:	e004      	b.n	800c50a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c500:	2301      	movs	r3, #1
 800c502:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c506:	e000      	b.n	800c50a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800c508:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c50a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d10b      	bne.n	800c52a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c512:	4b26      	ldr	r3, [pc, #152]	@ (800c5ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c516:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c51a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c51e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c522:	4a22      	ldr	r2, [pc, #136]	@ (800c5ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c524:	430b      	orrs	r3, r1
 800c526:	6553      	str	r3, [r2, #84]	@ 0x54
 800c528:	e003      	b.n	800c532 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c52a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c52e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c532:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c53a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800c53e:	673b      	str	r3, [r7, #112]	@ 0x70
 800c540:	2300      	movs	r3, #0
 800c542:	677b      	str	r3, [r7, #116]	@ 0x74
 800c544:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800c548:	460b      	mov	r3, r1
 800c54a:	4313      	orrs	r3, r2
 800c54c:	d034      	beq.n	800c5b8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c54e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c552:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c554:	2b00      	cmp	r3, #0
 800c556:	d003      	beq.n	800c560 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800c558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c55c:	d007      	beq.n	800c56e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800c55e:	e011      	b.n	800c584 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c560:	4b12      	ldr	r3, [pc, #72]	@ (800c5ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c564:	4a11      	ldr	r2, [pc, #68]	@ (800c5ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c566:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c56a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c56c:	e00e      	b.n	800c58c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c56e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c572:	3308      	adds	r3, #8
 800c574:	2102      	movs	r1, #2
 800c576:	4618      	mov	r0, r3
 800c578:	f000 fca4 	bl	800cec4 <RCCEx_PLL2_Config>
 800c57c:	4603      	mov	r3, r0
 800c57e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c582:	e003      	b.n	800c58c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800c584:	2301      	movs	r3, #1
 800c586:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c58a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c58c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c590:	2b00      	cmp	r3, #0
 800c592:	d10d      	bne.n	800c5b0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c594:	4b05      	ldr	r3, [pc, #20]	@ (800c5ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c596:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c598:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c59c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c5a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c5a2:	4a02      	ldr	r2, [pc, #8]	@ (800c5ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c5a4:	430b      	orrs	r3, r1
 800c5a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c5a8:	e006      	b.n	800c5b8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800c5aa:	bf00      	nop
 800c5ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c5b4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c5b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800c5c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c5ca:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800c5ce:	460b      	mov	r3, r1
 800c5d0:	4313      	orrs	r3, r2
 800c5d2:	d00c      	beq.n	800c5ee <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c5d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c5d8:	3328      	adds	r3, #40	@ 0x28
 800c5da:	2102      	movs	r1, #2
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f000 fd23 	bl	800d028 <RCCEx_PLL3_Config>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d002      	beq.n	800c5ee <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c5ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800c5fa:	663b      	str	r3, [r7, #96]	@ 0x60
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	667b      	str	r3, [r7, #100]	@ 0x64
 800c600:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800c604:	460b      	mov	r3, r1
 800c606:	4313      	orrs	r3, r2
 800c608:	d038      	beq.n	800c67c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c60a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c60e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c612:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c616:	d018      	beq.n	800c64a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800c618:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c61c:	d811      	bhi.n	800c642 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800c61e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c622:	d014      	beq.n	800c64e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800c624:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c628:	d80b      	bhi.n	800c642 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d011      	beq.n	800c652 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800c62e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c632:	d106      	bne.n	800c642 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c634:	4bc3      	ldr	r3, [pc, #780]	@ (800c944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c638:	4ac2      	ldr	r2, [pc, #776]	@ (800c944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c63a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c63e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c640:	e008      	b.n	800c654 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c642:	2301      	movs	r3, #1
 800c644:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c648:	e004      	b.n	800c654 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c64a:	bf00      	nop
 800c64c:	e002      	b.n	800c654 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c64e:	bf00      	nop
 800c650:	e000      	b.n	800c654 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c652:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c654:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d10b      	bne.n	800c674 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c65c:	4bb9      	ldr	r3, [pc, #740]	@ (800c944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c65e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c660:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c664:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c66c:	4ab5      	ldr	r2, [pc, #724]	@ (800c944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c66e:	430b      	orrs	r3, r1
 800c670:	6553      	str	r3, [r2, #84]	@ 0x54
 800c672:	e003      	b.n	800c67c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c674:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c678:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c67c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c680:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c684:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800c688:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c68a:	2300      	movs	r3, #0
 800c68c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c68e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800c692:	460b      	mov	r3, r1
 800c694:	4313      	orrs	r3, r2
 800c696:	d009      	beq.n	800c6ac <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c698:	4baa      	ldr	r3, [pc, #680]	@ (800c944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c69a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c69c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c6a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c6a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c6a6:	4aa7      	ldr	r2, [pc, #668]	@ (800c944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c6a8:	430b      	orrs	r3, r1
 800c6aa:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c6ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800c6b8:	653b      	str	r3, [r7, #80]	@ 0x50
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	657b      	str	r3, [r7, #84]	@ 0x54
 800c6be:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800c6c2:	460b      	mov	r3, r1
 800c6c4:	4313      	orrs	r3, r2
 800c6c6:	d009      	beq.n	800c6dc <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c6c8:	4b9e      	ldr	r3, [pc, #632]	@ (800c944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c6ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c6cc:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800c6d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c6d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c6d6:	4a9b      	ldr	r2, [pc, #620]	@ (800c944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c6d8:	430b      	orrs	r3, r1
 800c6da:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800c6dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800c6e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c6ee:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800c6f2:	460b      	mov	r3, r1
 800c6f4:	4313      	orrs	r3, r2
 800c6f6:	d009      	beq.n	800c70c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800c6f8:	4b92      	ldr	r3, [pc, #584]	@ (800c944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c6fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c6fc:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 800c700:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c704:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c706:	4a8f      	ldr	r2, [pc, #572]	@ (800c944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c708:	430b      	orrs	r3, r1
 800c70a:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c70c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c714:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800c718:	643b      	str	r3, [r7, #64]	@ 0x40
 800c71a:	2300      	movs	r3, #0
 800c71c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c71e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800c722:	460b      	mov	r3, r1
 800c724:	4313      	orrs	r3, r2
 800c726:	d00e      	beq.n	800c746 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c728:	4b86      	ldr	r3, [pc, #536]	@ (800c944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c72a:	691b      	ldr	r3, [r3, #16]
 800c72c:	4a85      	ldr	r2, [pc, #532]	@ (800c944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c72e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c732:	6113      	str	r3, [r2, #16]
 800c734:	4b83      	ldr	r3, [pc, #524]	@ (800c944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c736:	6919      	ldr	r1, [r3, #16]
 800c738:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c73c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800c740:	4a80      	ldr	r2, [pc, #512]	@ (800c944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c742:	430b      	orrs	r3, r1
 800c744:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c746:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c74e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800c752:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c754:	2300      	movs	r3, #0
 800c756:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c758:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800c75c:	460b      	mov	r3, r1
 800c75e:	4313      	orrs	r3, r2
 800c760:	d009      	beq.n	800c776 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c762:	4b78      	ldr	r3, [pc, #480]	@ (800c944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c766:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800c76a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c76e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c770:	4a74      	ldr	r2, [pc, #464]	@ (800c944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c772:	430b      	orrs	r3, r1
 800c774:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c776:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c77e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800c782:	633b      	str	r3, [r7, #48]	@ 0x30
 800c784:	2300      	movs	r3, #0
 800c786:	637b      	str	r3, [r7, #52]	@ 0x34
 800c788:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800c78c:	460b      	mov	r3, r1
 800c78e:	4313      	orrs	r3, r2
 800c790:	d00a      	beq.n	800c7a8 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c792:	4b6c      	ldr	r3, [pc, #432]	@ (800c944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c796:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800c79a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c79e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c7a2:	4a68      	ldr	r2, [pc, #416]	@ (800c944 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c7a4:	430b      	orrs	r3, r1
 800c7a6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c7a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b0:	2100      	movs	r1, #0
 800c7b2:	62b9      	str	r1, [r7, #40]	@ 0x28
 800c7b4:	f003 0301 	and.w	r3, r3, #1
 800c7b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c7ba:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800c7be:	460b      	mov	r3, r1
 800c7c0:	4313      	orrs	r3, r2
 800c7c2:	d011      	beq.n	800c7e8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c7c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c7c8:	3308      	adds	r3, #8
 800c7ca:	2100      	movs	r1, #0
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	f000 fb79 	bl	800cec4 <RCCEx_PLL2_Config>
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800c7d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d003      	beq.n	800c7e8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c7e4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c7e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7f0:	2100      	movs	r1, #0
 800c7f2:	6239      	str	r1, [r7, #32]
 800c7f4:	f003 0302 	and.w	r3, r3, #2
 800c7f8:	627b      	str	r3, [r7, #36]	@ 0x24
 800c7fa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c7fe:	460b      	mov	r3, r1
 800c800:	4313      	orrs	r3, r2
 800c802:	d011      	beq.n	800c828 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c804:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c808:	3308      	adds	r3, #8
 800c80a:	2101      	movs	r1, #1
 800c80c:	4618      	mov	r0, r3
 800c80e:	f000 fb59 	bl	800cec4 <RCCEx_PLL2_Config>
 800c812:	4603      	mov	r3, r0
 800c814:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800c818:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d003      	beq.n	800c828 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c820:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c824:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c828:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c830:	2100      	movs	r1, #0
 800c832:	61b9      	str	r1, [r7, #24]
 800c834:	f003 0304 	and.w	r3, r3, #4
 800c838:	61fb      	str	r3, [r7, #28]
 800c83a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c83e:	460b      	mov	r3, r1
 800c840:	4313      	orrs	r3, r2
 800c842:	d011      	beq.n	800c868 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c844:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c848:	3308      	adds	r3, #8
 800c84a:	2102      	movs	r1, #2
 800c84c:	4618      	mov	r0, r3
 800c84e:	f000 fb39 	bl	800cec4 <RCCEx_PLL2_Config>
 800c852:	4603      	mov	r3, r0
 800c854:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800c858:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d003      	beq.n	800c868 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c860:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c864:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c868:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c870:	2100      	movs	r1, #0
 800c872:	6139      	str	r1, [r7, #16]
 800c874:	f003 0308 	and.w	r3, r3, #8
 800c878:	617b      	str	r3, [r7, #20]
 800c87a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c87e:	460b      	mov	r3, r1
 800c880:	4313      	orrs	r3, r2
 800c882:	d011      	beq.n	800c8a8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c884:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c888:	3328      	adds	r3, #40	@ 0x28
 800c88a:	2100      	movs	r1, #0
 800c88c:	4618      	mov	r0, r3
 800c88e:	f000 fbcb 	bl	800d028 <RCCEx_PLL3_Config>
 800c892:	4603      	mov	r3, r0
 800c894:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800c898:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d003      	beq.n	800c8a8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c8a4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c8a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b0:	2100      	movs	r1, #0
 800c8b2:	60b9      	str	r1, [r7, #8]
 800c8b4:	f003 0310 	and.w	r3, r3, #16
 800c8b8:	60fb      	str	r3, [r7, #12]
 800c8ba:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c8be:	460b      	mov	r3, r1
 800c8c0:	4313      	orrs	r3, r2
 800c8c2:	d011      	beq.n	800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c8c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c8c8:	3328      	adds	r3, #40	@ 0x28
 800c8ca:	2101      	movs	r1, #1
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f000 fbab 	bl	800d028 <RCCEx_PLL3_Config>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800c8d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d003      	beq.n	800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c8e4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c8e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f0:	2100      	movs	r1, #0
 800c8f2:	6039      	str	r1, [r7, #0]
 800c8f4:	f003 0320 	and.w	r3, r3, #32
 800c8f8:	607b      	str	r3, [r7, #4]
 800c8fa:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c8fe:	460b      	mov	r3, r1
 800c900:	4313      	orrs	r3, r2
 800c902:	d011      	beq.n	800c928 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c904:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c908:	3328      	adds	r3, #40	@ 0x28
 800c90a:	2102      	movs	r1, #2
 800c90c:	4618      	mov	r0, r3
 800c90e:	f000 fb8b 	bl	800d028 <RCCEx_PLL3_Config>
 800c912:	4603      	mov	r3, r0
 800c914:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800c918:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d003      	beq.n	800c928 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c920:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c924:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800c928:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d101      	bne.n	800c934 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800c930:	2300      	movs	r3, #0
 800c932:	e000      	b.n	800c936 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800c934:	2301      	movs	r3, #1
}
 800c936:	4618      	mov	r0, r3
 800c938:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800c93c:	46bd      	mov	sp, r7
 800c93e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c942:	bf00      	nop
 800c944:	58024400 	.word	0x58024400

0800c948 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800c94c:	f7fe fda0 	bl	800b490 <HAL_RCC_GetHCLKFreq>
 800c950:	4602      	mov	r2, r0
 800c952:	4b06      	ldr	r3, [pc, #24]	@ (800c96c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c954:	6a1b      	ldr	r3, [r3, #32]
 800c956:	091b      	lsrs	r3, r3, #4
 800c958:	f003 0307 	and.w	r3, r3, #7
 800c95c:	4904      	ldr	r1, [pc, #16]	@ (800c970 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c95e:	5ccb      	ldrb	r3, [r1, r3]
 800c960:	f003 031f 	and.w	r3, r3, #31
 800c964:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800c968:	4618      	mov	r0, r3
 800c96a:	bd80      	pop	{r7, pc}
 800c96c:	58024400 	.word	0x58024400
 800c970:	08019cf4 	.word	0x08019cf4

0800c974 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c974:	b480      	push	{r7}
 800c976:	b089      	sub	sp, #36	@ 0x24
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c97c:	4ba1      	ldr	r3, [pc, #644]	@ (800cc04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c97e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c980:	f003 0303 	and.w	r3, r3, #3
 800c984:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c986:	4b9f      	ldr	r3, [pc, #636]	@ (800cc04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c98a:	0b1b      	lsrs	r3, r3, #12
 800c98c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c990:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c992:	4b9c      	ldr	r3, [pc, #624]	@ (800cc04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c996:	091b      	lsrs	r3, r3, #4
 800c998:	f003 0301 	and.w	r3, r3, #1
 800c99c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c99e:	4b99      	ldr	r3, [pc, #612]	@ (800cc04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c9a2:	08db      	lsrs	r3, r3, #3
 800c9a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c9a8:	693a      	ldr	r2, [r7, #16]
 800c9aa:	fb02 f303 	mul.w	r3, r2, r3
 800c9ae:	ee07 3a90 	vmov	s15, r3
 800c9b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	f000 8111 	beq.w	800cbe4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c9c2:	69bb      	ldr	r3, [r7, #24]
 800c9c4:	2b02      	cmp	r3, #2
 800c9c6:	f000 8083 	beq.w	800cad0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c9ca:	69bb      	ldr	r3, [r7, #24]
 800c9cc:	2b02      	cmp	r3, #2
 800c9ce:	f200 80a1 	bhi.w	800cb14 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c9d2:	69bb      	ldr	r3, [r7, #24]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d003      	beq.n	800c9e0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c9d8:	69bb      	ldr	r3, [r7, #24]
 800c9da:	2b01      	cmp	r3, #1
 800c9dc:	d056      	beq.n	800ca8c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c9de:	e099      	b.n	800cb14 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c9e0:	4b88      	ldr	r3, [pc, #544]	@ (800cc04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	f003 0320 	and.w	r3, r3, #32
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d02d      	beq.n	800ca48 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c9ec:	4b85      	ldr	r3, [pc, #532]	@ (800cc04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	08db      	lsrs	r3, r3, #3
 800c9f2:	f003 0303 	and.w	r3, r3, #3
 800c9f6:	4a84      	ldr	r2, [pc, #528]	@ (800cc08 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c9f8:	fa22 f303 	lsr.w	r3, r2, r3
 800c9fc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c9fe:	68bb      	ldr	r3, [r7, #8]
 800ca00:	ee07 3a90 	vmov	s15, r3
 800ca04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	ee07 3a90 	vmov	s15, r3
 800ca0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca16:	4b7b      	ldr	r3, [pc, #492]	@ (800cc04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca1e:	ee07 3a90 	vmov	s15, r3
 800ca22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca26:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca2a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800cc0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ca3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca42:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ca46:	e087      	b.n	800cb58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca48:	697b      	ldr	r3, [r7, #20]
 800ca4a:	ee07 3a90 	vmov	s15, r3
 800ca4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca52:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800cc10 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ca56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca5a:	4b6a      	ldr	r3, [pc, #424]	@ (800cc04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca62:	ee07 3a90 	vmov	s15, r3
 800ca66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca6e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800cc0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ca7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca8a:	e065      	b.n	800cb58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca8c:	697b      	ldr	r3, [r7, #20]
 800ca8e:	ee07 3a90 	vmov	s15, r3
 800ca92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca96:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800cc14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ca9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca9e:	4b59      	ldr	r3, [pc, #356]	@ (800cc04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800caa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800caa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800caa6:	ee07 3a90 	vmov	s15, r3
 800caaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800caae:	ed97 6a03 	vldr	s12, [r7, #12]
 800cab2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800cc0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800caba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cabe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800caca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cace:	e043      	b.n	800cb58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cad0:	697b      	ldr	r3, [r7, #20]
 800cad2:	ee07 3a90 	vmov	s15, r3
 800cad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cada:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800cc18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800cade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cae2:	4b48      	ldr	r3, [pc, #288]	@ (800cc04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800caea:	ee07 3a90 	vmov	s15, r3
 800caee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800caf2:	ed97 6a03 	vldr	s12, [r7, #12]
 800caf6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800cc0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cafa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cafe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cb06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb12:	e021      	b.n	800cb58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cb14:	697b      	ldr	r3, [r7, #20]
 800cb16:	ee07 3a90 	vmov	s15, r3
 800cb1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb1e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800cc14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cb22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb26:	4b37      	ldr	r3, [pc, #220]	@ (800cc04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb2e:	ee07 3a90 	vmov	s15, r3
 800cb32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb36:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb3a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800cc0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cb3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cb4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb56:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800cb58:	4b2a      	ldr	r3, [pc, #168]	@ (800cc04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb5c:	0a5b      	lsrs	r3, r3, #9
 800cb5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb62:	ee07 3a90 	vmov	s15, r3
 800cb66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cb6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb72:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb7e:	ee17 2a90 	vmov	r2, s15
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800cb86:	4b1f      	ldr	r3, [pc, #124]	@ (800cc04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb8a:	0c1b      	lsrs	r3, r3, #16
 800cb8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb90:	ee07 3a90 	vmov	s15, r3
 800cb94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb98:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cb9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cba0:	edd7 6a07 	vldr	s13, [r7, #28]
 800cba4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cba8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbac:	ee17 2a90 	vmov	r2, s15
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800cbb4:	4b13      	ldr	r3, [pc, #76]	@ (800cc04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbb8:	0e1b      	lsrs	r3, r3, #24
 800cbba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cbbe:	ee07 3a90 	vmov	s15, r3
 800cbc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbc6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cbca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cbce:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbda:	ee17 2a90 	vmov	r2, s15
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cbe2:	e008      	b.n	800cbf6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2200      	movs	r2, #0
 800cbee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	609a      	str	r2, [r3, #8]
}
 800cbf6:	bf00      	nop
 800cbf8:	3724      	adds	r7, #36	@ 0x24
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc00:	4770      	bx	lr
 800cc02:	bf00      	nop
 800cc04:	58024400 	.word	0x58024400
 800cc08:	03d09000 	.word	0x03d09000
 800cc0c:	46000000 	.word	0x46000000
 800cc10:	4c742400 	.word	0x4c742400
 800cc14:	4a742400 	.word	0x4a742400
 800cc18:	4bb71b00 	.word	0x4bb71b00

0800cc1c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cc1c:	b480      	push	{r7}
 800cc1e:	b089      	sub	sp, #36	@ 0x24
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cc24:	4ba1      	ldr	r3, [pc, #644]	@ (800ceac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc28:	f003 0303 	and.w	r3, r3, #3
 800cc2c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800cc2e:	4b9f      	ldr	r3, [pc, #636]	@ (800ceac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc32:	0d1b      	lsrs	r3, r3, #20
 800cc34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cc38:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cc3a:	4b9c      	ldr	r3, [pc, #624]	@ (800ceac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc3e:	0a1b      	lsrs	r3, r3, #8
 800cc40:	f003 0301 	and.w	r3, r3, #1
 800cc44:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800cc46:	4b99      	ldr	r3, [pc, #612]	@ (800ceac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc4a:	08db      	lsrs	r3, r3, #3
 800cc4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cc50:	693a      	ldr	r2, [r7, #16]
 800cc52:	fb02 f303 	mul.w	r3, r2, r3
 800cc56:	ee07 3a90 	vmov	s15, r3
 800cc5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc5e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cc62:	697b      	ldr	r3, [r7, #20]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	f000 8111 	beq.w	800ce8c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cc6a:	69bb      	ldr	r3, [r7, #24]
 800cc6c:	2b02      	cmp	r3, #2
 800cc6e:	f000 8083 	beq.w	800cd78 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800cc72:	69bb      	ldr	r3, [r7, #24]
 800cc74:	2b02      	cmp	r3, #2
 800cc76:	f200 80a1 	bhi.w	800cdbc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cc7a:	69bb      	ldr	r3, [r7, #24]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d003      	beq.n	800cc88 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cc80:	69bb      	ldr	r3, [r7, #24]
 800cc82:	2b01      	cmp	r3, #1
 800cc84:	d056      	beq.n	800cd34 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cc86:	e099      	b.n	800cdbc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cc88:	4b88      	ldr	r3, [pc, #544]	@ (800ceac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	f003 0320 	and.w	r3, r3, #32
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d02d      	beq.n	800ccf0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc94:	4b85      	ldr	r3, [pc, #532]	@ (800ceac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	08db      	lsrs	r3, r3, #3
 800cc9a:	f003 0303 	and.w	r3, r3, #3
 800cc9e:	4a84      	ldr	r2, [pc, #528]	@ (800ceb0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800cca0:	fa22 f303 	lsr.w	r3, r2, r3
 800cca4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	ee07 3a90 	vmov	s15, r3
 800ccac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	ee07 3a90 	vmov	s15, r3
 800ccb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccbe:	4b7b      	ldr	r3, [pc, #492]	@ (800ceac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ccc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccc6:	ee07 3a90 	vmov	s15, r3
 800ccca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccce:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccd2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ceb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ccd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ccda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ccee:	e087      	b.n	800ce00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ccf0:	697b      	ldr	r3, [r7, #20]
 800ccf2:	ee07 3a90 	vmov	s15, r3
 800ccf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccfa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ceb8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ccfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd02:	4b6a      	ldr	r3, [pc, #424]	@ (800ceac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd0a:	ee07 3a90 	vmov	s15, r3
 800cd0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd12:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd16:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ceb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cd26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd32:	e065      	b.n	800ce00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cd34:	697b      	ldr	r3, [r7, #20]
 800cd36:	ee07 3a90 	vmov	s15, r3
 800cd3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd3e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800cebc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cd42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd46:	4b59      	ldr	r3, [pc, #356]	@ (800ceac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd4e:	ee07 3a90 	vmov	s15, r3
 800cd52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd56:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd5a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ceb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cd6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd76:	e043      	b.n	800ce00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cd78:	697b      	ldr	r3, [r7, #20]
 800cd7a:	ee07 3a90 	vmov	s15, r3
 800cd7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd82:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800cec0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cd86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd8a:	4b48      	ldr	r3, [pc, #288]	@ (800ceac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd92:	ee07 3a90 	vmov	s15, r3
 800cd96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd9a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd9e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ceb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cda2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cda6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cdaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cdae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cdba:	e021      	b.n	800ce00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cdbc:	697b      	ldr	r3, [r7, #20]
 800cdbe:	ee07 3a90 	vmov	s15, r3
 800cdc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdc6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800cebc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cdca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdce:	4b37      	ldr	r3, [pc, #220]	@ (800ceac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cdd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdd6:	ee07 3a90 	vmov	s15, r3
 800cdda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdde:	ed97 6a03 	vldr	s12, [r7, #12]
 800cde2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ceb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cde6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cdee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cdf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cdfe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ce00:	4b2a      	ldr	r3, [pc, #168]	@ (800ceac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce04:	0a5b      	lsrs	r3, r3, #9
 800ce06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce0a:	ee07 3a90 	vmov	s15, r3
 800ce0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ce16:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce1a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce26:	ee17 2a90 	vmov	r2, s15
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ce2e:	4b1f      	ldr	r3, [pc, #124]	@ (800ceac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce32:	0c1b      	lsrs	r3, r3, #16
 800ce34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce38:	ee07 3a90 	vmov	s15, r3
 800ce3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce40:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ce44:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce48:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce54:	ee17 2a90 	vmov	r2, s15
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ce5c:	4b13      	ldr	r3, [pc, #76]	@ (800ceac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce60:	0e1b      	lsrs	r3, r3, #24
 800ce62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce66:	ee07 3a90 	vmov	s15, r3
 800ce6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ce72:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce76:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce82:	ee17 2a90 	vmov	r2, s15
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ce8a:	e008      	b.n	800ce9e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2200      	movs	r2, #0
 800ce90:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2200      	movs	r2, #0
 800ce96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	609a      	str	r2, [r3, #8]
}
 800ce9e:	bf00      	nop
 800cea0:	3724      	adds	r7, #36	@ 0x24
 800cea2:	46bd      	mov	sp, r7
 800cea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea8:	4770      	bx	lr
 800ceaa:	bf00      	nop
 800ceac:	58024400 	.word	0x58024400
 800ceb0:	03d09000 	.word	0x03d09000
 800ceb4:	46000000 	.word	0x46000000
 800ceb8:	4c742400 	.word	0x4c742400
 800cebc:	4a742400 	.word	0x4a742400
 800cec0:	4bb71b00 	.word	0x4bb71b00

0800cec4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b084      	sub	sp, #16
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
 800cecc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cece:	2300      	movs	r3, #0
 800ced0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ced2:	4b53      	ldr	r3, [pc, #332]	@ (800d020 <RCCEx_PLL2_Config+0x15c>)
 800ced4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ced6:	f003 0303 	and.w	r3, r3, #3
 800ceda:	2b03      	cmp	r3, #3
 800cedc:	d101      	bne.n	800cee2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cede:	2301      	movs	r3, #1
 800cee0:	e099      	b.n	800d016 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cee2:	4b4f      	ldr	r3, [pc, #316]	@ (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	4a4e      	ldr	r2, [pc, #312]	@ (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cee8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ceec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ceee:	f7f9 fc5f 	bl	80067b0 <HAL_GetTick>
 800cef2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cef4:	e008      	b.n	800cf08 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cef6:	f7f9 fc5b 	bl	80067b0 <HAL_GetTick>
 800cefa:	4602      	mov	r2, r0
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	1ad3      	subs	r3, r2, r3
 800cf00:	2b02      	cmp	r3, #2
 800cf02:	d901      	bls.n	800cf08 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cf04:	2303      	movs	r3, #3
 800cf06:	e086      	b.n	800d016 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cf08:	4b45      	ldr	r3, [pc, #276]	@ (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d1f0      	bne.n	800cef6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cf14:	4b42      	ldr	r3, [pc, #264]	@ (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cf16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf18:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	031b      	lsls	r3, r3, #12
 800cf22:	493f      	ldr	r1, [pc, #252]	@ (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cf24:	4313      	orrs	r3, r2
 800cf26:	628b      	str	r3, [r1, #40]	@ 0x28
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	685b      	ldr	r3, [r3, #4]
 800cf2c:	3b01      	subs	r3, #1
 800cf2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	689b      	ldr	r3, [r3, #8]
 800cf36:	3b01      	subs	r3, #1
 800cf38:	025b      	lsls	r3, r3, #9
 800cf3a:	b29b      	uxth	r3, r3
 800cf3c:	431a      	orrs	r2, r3
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	68db      	ldr	r3, [r3, #12]
 800cf42:	3b01      	subs	r3, #1
 800cf44:	041b      	lsls	r3, r3, #16
 800cf46:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800cf4a:	431a      	orrs	r2, r3
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	691b      	ldr	r3, [r3, #16]
 800cf50:	3b01      	subs	r3, #1
 800cf52:	061b      	lsls	r3, r3, #24
 800cf54:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800cf58:	4931      	ldr	r1, [pc, #196]	@ (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cf5a:	4313      	orrs	r3, r2
 800cf5c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cf5e:	4b30      	ldr	r3, [pc, #192]	@ (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cf60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf62:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	695b      	ldr	r3, [r3, #20]
 800cf6a:	492d      	ldr	r1, [pc, #180]	@ (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cf6c:	4313      	orrs	r3, r2
 800cf6e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cf70:	4b2b      	ldr	r3, [pc, #172]	@ (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cf72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf74:	f023 0220 	bic.w	r2, r3, #32
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	699b      	ldr	r3, [r3, #24]
 800cf7c:	4928      	ldr	r1, [pc, #160]	@ (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cf7e:	4313      	orrs	r3, r2
 800cf80:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cf82:	4b27      	ldr	r3, [pc, #156]	@ (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cf84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf86:	4a26      	ldr	r2, [pc, #152]	@ (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cf88:	f023 0310 	bic.w	r3, r3, #16
 800cf8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cf8e:	4b24      	ldr	r3, [pc, #144]	@ (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cf90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cf92:	4b24      	ldr	r3, [pc, #144]	@ (800d024 <RCCEx_PLL2_Config+0x160>)
 800cf94:	4013      	ands	r3, r2
 800cf96:	687a      	ldr	r2, [r7, #4]
 800cf98:	69d2      	ldr	r2, [r2, #28]
 800cf9a:	00d2      	lsls	r2, r2, #3
 800cf9c:	4920      	ldr	r1, [pc, #128]	@ (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cf9e:	4313      	orrs	r3, r2
 800cfa0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cfa2:	4b1f      	ldr	r3, [pc, #124]	@ (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cfa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfa6:	4a1e      	ldr	r2, [pc, #120]	@ (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cfa8:	f043 0310 	orr.w	r3, r3, #16
 800cfac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d106      	bne.n	800cfc2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cfb4:	4b1a      	ldr	r3, [pc, #104]	@ (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cfb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfb8:	4a19      	ldr	r2, [pc, #100]	@ (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cfba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cfbe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800cfc0:	e00f      	b.n	800cfe2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	2b01      	cmp	r3, #1
 800cfc6:	d106      	bne.n	800cfd6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cfc8:	4b15      	ldr	r3, [pc, #84]	@ (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cfca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfcc:	4a14      	ldr	r2, [pc, #80]	@ (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cfce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cfd2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800cfd4:	e005      	b.n	800cfe2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cfd6:	4b12      	ldr	r3, [pc, #72]	@ (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cfd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfda:	4a11      	ldr	r2, [pc, #68]	@ (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cfdc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800cfe0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cfe2:	4b0f      	ldr	r3, [pc, #60]	@ (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	4a0e      	ldr	r2, [pc, #56]	@ (800d020 <RCCEx_PLL2_Config+0x15c>)
 800cfe8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800cfec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cfee:	f7f9 fbdf 	bl	80067b0 <HAL_GetTick>
 800cff2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cff4:	e008      	b.n	800d008 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cff6:	f7f9 fbdb 	bl	80067b0 <HAL_GetTick>
 800cffa:	4602      	mov	r2, r0
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	1ad3      	subs	r3, r2, r3
 800d000:	2b02      	cmp	r3, #2
 800d002:	d901      	bls.n	800d008 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d004:	2303      	movs	r3, #3
 800d006:	e006      	b.n	800d016 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d008:	4b05      	ldr	r3, [pc, #20]	@ (800d020 <RCCEx_PLL2_Config+0x15c>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d010:	2b00      	cmp	r3, #0
 800d012:	d0f0      	beq.n	800cff6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d014:	7bfb      	ldrb	r3, [r7, #15]
}
 800d016:	4618      	mov	r0, r3
 800d018:	3710      	adds	r7, #16
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bd80      	pop	{r7, pc}
 800d01e:	bf00      	nop
 800d020:	58024400 	.word	0x58024400
 800d024:	ffff0007 	.word	0xffff0007

0800d028 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b084      	sub	sp, #16
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
 800d030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d032:	2300      	movs	r3, #0
 800d034:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d036:	4b53      	ldr	r3, [pc, #332]	@ (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d03a:	f003 0303 	and.w	r3, r3, #3
 800d03e:	2b03      	cmp	r3, #3
 800d040:	d101      	bne.n	800d046 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d042:	2301      	movs	r3, #1
 800d044:	e099      	b.n	800d17a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d046:	4b4f      	ldr	r3, [pc, #316]	@ (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	4a4e      	ldr	r2, [pc, #312]	@ (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d04c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d050:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d052:	f7f9 fbad 	bl	80067b0 <HAL_GetTick>
 800d056:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d058:	e008      	b.n	800d06c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d05a:	f7f9 fba9 	bl	80067b0 <HAL_GetTick>
 800d05e:	4602      	mov	r2, r0
 800d060:	68bb      	ldr	r3, [r7, #8]
 800d062:	1ad3      	subs	r3, r2, r3
 800d064:	2b02      	cmp	r3, #2
 800d066:	d901      	bls.n	800d06c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d068:	2303      	movs	r3, #3
 800d06a:	e086      	b.n	800d17a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d06c:	4b45      	ldr	r3, [pc, #276]	@ (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d074:	2b00      	cmp	r3, #0
 800d076:	d1f0      	bne.n	800d05a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d078:	4b42      	ldr	r3, [pc, #264]	@ (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d07a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d07c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	051b      	lsls	r3, r3, #20
 800d086:	493f      	ldr	r1, [pc, #252]	@ (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d088:	4313      	orrs	r3, r2
 800d08a:	628b      	str	r3, [r1, #40]	@ 0x28
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	685b      	ldr	r3, [r3, #4]
 800d090:	3b01      	subs	r3, #1
 800d092:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	689b      	ldr	r3, [r3, #8]
 800d09a:	3b01      	subs	r3, #1
 800d09c:	025b      	lsls	r3, r3, #9
 800d09e:	b29b      	uxth	r3, r3
 800d0a0:	431a      	orrs	r2, r3
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	68db      	ldr	r3, [r3, #12]
 800d0a6:	3b01      	subs	r3, #1
 800d0a8:	041b      	lsls	r3, r3, #16
 800d0aa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d0ae:	431a      	orrs	r2, r3
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	691b      	ldr	r3, [r3, #16]
 800d0b4:	3b01      	subs	r3, #1
 800d0b6:	061b      	lsls	r3, r3, #24
 800d0b8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d0bc:	4931      	ldr	r1, [pc, #196]	@ (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d0be:	4313      	orrs	r3, r2
 800d0c0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d0c2:	4b30      	ldr	r3, [pc, #192]	@ (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d0c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0c6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	695b      	ldr	r3, [r3, #20]
 800d0ce:	492d      	ldr	r1, [pc, #180]	@ (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d0d0:	4313      	orrs	r3, r2
 800d0d2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d0d4:	4b2b      	ldr	r3, [pc, #172]	@ (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d0d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0d8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	699b      	ldr	r3, [r3, #24]
 800d0e0:	4928      	ldr	r1, [pc, #160]	@ (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d0e2:	4313      	orrs	r3, r2
 800d0e4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d0e6:	4b27      	ldr	r3, [pc, #156]	@ (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d0e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0ea:	4a26      	ldr	r2, [pc, #152]	@ (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d0ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d0f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d0f2:	4b24      	ldr	r3, [pc, #144]	@ (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d0f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d0f6:	4b24      	ldr	r3, [pc, #144]	@ (800d188 <RCCEx_PLL3_Config+0x160>)
 800d0f8:	4013      	ands	r3, r2
 800d0fa:	687a      	ldr	r2, [r7, #4]
 800d0fc:	69d2      	ldr	r2, [r2, #28]
 800d0fe:	00d2      	lsls	r2, r2, #3
 800d100:	4920      	ldr	r1, [pc, #128]	@ (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d102:	4313      	orrs	r3, r2
 800d104:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d106:	4b1f      	ldr	r3, [pc, #124]	@ (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d10a:	4a1e      	ldr	r2, [pc, #120]	@ (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d10c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d110:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d106      	bne.n	800d126 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d118:	4b1a      	ldr	r3, [pc, #104]	@ (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d11a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d11c:	4a19      	ldr	r2, [pc, #100]	@ (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d11e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800d122:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d124:	e00f      	b.n	800d146 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	2b01      	cmp	r3, #1
 800d12a:	d106      	bne.n	800d13a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d12c:	4b15      	ldr	r3, [pc, #84]	@ (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d12e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d130:	4a14      	ldr	r2, [pc, #80]	@ (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d132:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d136:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d138:	e005      	b.n	800d146 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d13a:	4b12      	ldr	r3, [pc, #72]	@ (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d13c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d13e:	4a11      	ldr	r2, [pc, #68]	@ (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d140:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d144:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d146:	4b0f      	ldr	r3, [pc, #60]	@ (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	4a0e      	ldr	r2, [pc, #56]	@ (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d14c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d150:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d152:	f7f9 fb2d 	bl	80067b0 <HAL_GetTick>
 800d156:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d158:	e008      	b.n	800d16c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d15a:	f7f9 fb29 	bl	80067b0 <HAL_GetTick>
 800d15e:	4602      	mov	r2, r0
 800d160:	68bb      	ldr	r3, [r7, #8]
 800d162:	1ad3      	subs	r3, r2, r3
 800d164:	2b02      	cmp	r3, #2
 800d166:	d901      	bls.n	800d16c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d168:	2303      	movs	r3, #3
 800d16a:	e006      	b.n	800d17a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d16c:	4b05      	ldr	r3, [pc, #20]	@ (800d184 <RCCEx_PLL3_Config+0x15c>)
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d174:	2b00      	cmp	r3, #0
 800d176:	d0f0      	beq.n	800d15a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d178:	7bfb      	ldrb	r3, [r7, #15]
}
 800d17a:	4618      	mov	r0, r3
 800d17c:	3710      	adds	r7, #16
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd80      	pop	{r7, pc}
 800d182:	bf00      	nop
 800d184:	58024400 	.word	0x58024400
 800d188:	ffff0007 	.word	0xffff0007

0800d18c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b084      	sub	sp, #16
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d101      	bne.n	800d19e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d19a:	2301      	movs	r3, #1
 800d19c:	e10f      	b.n	800d3be <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	4a87      	ldr	r2, [pc, #540]	@ (800d3c8 <HAL_SPI_Init+0x23c>)
 800d1aa:	4293      	cmp	r3, r2
 800d1ac:	d00f      	beq.n	800d1ce <HAL_SPI_Init+0x42>
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	4a86      	ldr	r2, [pc, #536]	@ (800d3cc <HAL_SPI_Init+0x240>)
 800d1b4:	4293      	cmp	r3, r2
 800d1b6:	d00a      	beq.n	800d1ce <HAL_SPI_Init+0x42>
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	4a84      	ldr	r2, [pc, #528]	@ (800d3d0 <HAL_SPI_Init+0x244>)
 800d1be:	4293      	cmp	r3, r2
 800d1c0:	d005      	beq.n	800d1ce <HAL_SPI_Init+0x42>
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	68db      	ldr	r3, [r3, #12]
 800d1c6:	2b0f      	cmp	r3, #15
 800d1c8:	d901      	bls.n	800d1ce <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	e0f7      	b.n	800d3be <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f001 f968 	bl	800e4a4 <SPI_GetPacketSize>
 800d1d4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	4a7b      	ldr	r2, [pc, #492]	@ (800d3c8 <HAL_SPI_Init+0x23c>)
 800d1dc:	4293      	cmp	r3, r2
 800d1de:	d00c      	beq.n	800d1fa <HAL_SPI_Init+0x6e>
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	4a79      	ldr	r2, [pc, #484]	@ (800d3cc <HAL_SPI_Init+0x240>)
 800d1e6:	4293      	cmp	r3, r2
 800d1e8:	d007      	beq.n	800d1fa <HAL_SPI_Init+0x6e>
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	4a78      	ldr	r2, [pc, #480]	@ (800d3d0 <HAL_SPI_Init+0x244>)
 800d1f0:	4293      	cmp	r3, r2
 800d1f2:	d002      	beq.n	800d1fa <HAL_SPI_Init+0x6e>
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	2b08      	cmp	r3, #8
 800d1f8:	d811      	bhi.n	800d21e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d1fe:	4a72      	ldr	r2, [pc, #456]	@ (800d3c8 <HAL_SPI_Init+0x23c>)
 800d200:	4293      	cmp	r3, r2
 800d202:	d009      	beq.n	800d218 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	4a70      	ldr	r2, [pc, #448]	@ (800d3cc <HAL_SPI_Init+0x240>)
 800d20a:	4293      	cmp	r3, r2
 800d20c:	d004      	beq.n	800d218 <HAL_SPI_Init+0x8c>
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	4a6f      	ldr	r2, [pc, #444]	@ (800d3d0 <HAL_SPI_Init+0x244>)
 800d214:	4293      	cmp	r3, r2
 800d216:	d104      	bne.n	800d222 <HAL_SPI_Init+0x96>
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	2b10      	cmp	r3, #16
 800d21c:	d901      	bls.n	800d222 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800d21e:	2301      	movs	r3, #1
 800d220:	e0cd      	b.n	800d3be <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d228:	b2db      	uxtb	r3, r3
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d106      	bne.n	800d23c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2200      	movs	r2, #0
 800d232:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	f7f6 f800 	bl	800323c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2202      	movs	r2, #2
 800d240:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	681a      	ldr	r2, [r3, #0]
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	f022 0201 	bic.w	r2, r2, #1
 800d252:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	689b      	ldr	r3, [r3, #8]
 800d25a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800d25e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	699b      	ldr	r3, [r3, #24]
 800d264:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d268:	d119      	bne.n	800d29e <HAL_SPI_Init+0x112>
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	685b      	ldr	r3, [r3, #4]
 800d26e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d272:	d103      	bne.n	800d27c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d008      	beq.n	800d28e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d280:	2b00      	cmp	r3, #0
 800d282:	d10c      	bne.n	800d29e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d288:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d28c:	d107      	bne.n	800d29e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	681a      	ldr	r2, [r3, #0]
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d29c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	685b      	ldr	r3, [r3, #4]
 800d2a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d00f      	beq.n	800d2ca <HAL_SPI_Init+0x13e>
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	68db      	ldr	r3, [r3, #12]
 800d2ae:	2b06      	cmp	r3, #6
 800d2b0:	d90b      	bls.n	800d2ca <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	430a      	orrs	r2, r1
 800d2c6:	601a      	str	r2, [r3, #0]
 800d2c8:	e007      	b.n	800d2da <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	681a      	ldr	r2, [r3, #0]
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d2d8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	69da      	ldr	r2, [r3, #28]
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2e2:	431a      	orrs	r2, r3
 800d2e4:	68bb      	ldr	r3, [r7, #8]
 800d2e6:	431a      	orrs	r2, r3
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2ec:	ea42 0103 	orr.w	r1, r2, r3
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	68da      	ldr	r2, [r3, #12]
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	430a      	orrs	r2, r1
 800d2fa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d304:	431a      	orrs	r2, r3
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d30a:	431a      	orrs	r2, r3
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	699b      	ldr	r3, [r3, #24]
 800d310:	431a      	orrs	r2, r3
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	691b      	ldr	r3, [r3, #16]
 800d316:	431a      	orrs	r2, r3
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	695b      	ldr	r3, [r3, #20]
 800d31c:	431a      	orrs	r2, r3
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	6a1b      	ldr	r3, [r3, #32]
 800d322:	431a      	orrs	r2, r3
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	685b      	ldr	r3, [r3, #4]
 800d328:	431a      	orrs	r2, r3
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d32e:	431a      	orrs	r2, r3
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	689b      	ldr	r3, [r3, #8]
 800d334:	431a      	orrs	r2, r3
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d33a:	ea42 0103 	orr.w	r1, r2, r3
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	430a      	orrs	r2, r1
 800d348:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	685b      	ldr	r3, [r3, #4]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d113      	bne.n	800d37a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	689b      	ldr	r3, [r3, #8]
 800d358:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d364:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	689b      	ldr	r3, [r3, #8]
 800d36c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d378:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	f022 0201 	bic.w	r2, r2, #1
 800d388:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	685b      	ldr	r3, [r3, #4]
 800d38e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d392:	2b00      	cmp	r3, #0
 800d394:	d00a      	beq.n	800d3ac <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	68db      	ldr	r3, [r3, #12]
 800d39c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	430a      	orrs	r2, r1
 800d3aa:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2201      	movs	r2, #1
 800d3b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800d3bc:	2300      	movs	r3, #0
}
 800d3be:	4618      	mov	r0, r3
 800d3c0:	3710      	adds	r7, #16
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	bd80      	pop	{r7, pc}
 800d3c6:	bf00      	nop
 800d3c8:	40013000 	.word	0x40013000
 800d3cc:	40003800 	.word	0x40003800
 800d3d0:	40003c00 	.word	0x40003c00

0800d3d4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b088      	sub	sp, #32
 800d3d8:	af02      	add	r7, sp, #8
 800d3da:	60f8      	str	r0, [r7, #12]
 800d3dc:	60b9      	str	r1, [r7, #8]
 800d3de:	603b      	str	r3, [r7, #0]
 800d3e0:	4613      	mov	r3, r2
 800d3e2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	3320      	adds	r3, #32
 800d3ea:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d3ec:	f7f9 f9e0 	bl	80067b0 <HAL_GetTick>
 800d3f0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d3f8:	b2db      	uxtb	r3, r3
 800d3fa:	2b01      	cmp	r3, #1
 800d3fc:	d001      	beq.n	800d402 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800d3fe:	2302      	movs	r3, #2
 800d400:	e1d1      	b.n	800d7a6 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d002      	beq.n	800d40e <HAL_SPI_Transmit+0x3a>
 800d408:	88fb      	ldrh	r3, [r7, #6]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d101      	bne.n	800d412 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800d40e:	2301      	movs	r3, #1
 800d410:	e1c9      	b.n	800d7a6 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800d418:	2b01      	cmp	r3, #1
 800d41a:	d101      	bne.n	800d420 <HAL_SPI_Transmit+0x4c>
 800d41c:	2302      	movs	r3, #2
 800d41e:	e1c2      	b.n	800d7a6 <HAL_SPI_Transmit+0x3d2>
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	2201      	movs	r2, #1
 800d424:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	2203      	movs	r2, #3
 800d42c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	2200      	movs	r2, #0
 800d434:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	68ba      	ldr	r2, [r7, #8]
 800d43c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	88fa      	ldrh	r2, [r7, #6]
 800d442:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	88fa      	ldrh	r2, [r7, #6]
 800d44a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	2200      	movs	r2, #0
 800d452:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	2200      	movs	r2, #0
 800d458:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	2200      	movs	r2, #0
 800d460:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	2200      	movs	r2, #0
 800d468:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	2200      	movs	r2, #0
 800d46e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	689b      	ldr	r3, [r3, #8]
 800d474:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800d478:	d108      	bne.n	800d48c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	681a      	ldr	r2, [r3, #0]
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d488:	601a      	str	r2, [r3, #0]
 800d48a:	e009      	b.n	800d4a0 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	68db      	ldr	r3, [r3, #12]
 800d492:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800d49e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	685a      	ldr	r2, [r3, #4]
 800d4a6:	4b96      	ldr	r3, [pc, #600]	@ (800d700 <HAL_SPI_Transmit+0x32c>)
 800d4a8:	4013      	ands	r3, r2
 800d4aa:	88f9      	ldrh	r1, [r7, #6]
 800d4ac:	68fa      	ldr	r2, [r7, #12]
 800d4ae:	6812      	ldr	r2, [r2, #0]
 800d4b0:	430b      	orrs	r3, r1
 800d4b2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	681a      	ldr	r2, [r3, #0]
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	f042 0201 	orr.w	r2, r2, #1
 800d4c2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	685b      	ldr	r3, [r3, #4]
 800d4c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d4cc:	d107      	bne.n	800d4de <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	681a      	ldr	r2, [r3, #0]
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d4dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	68db      	ldr	r3, [r3, #12]
 800d4e2:	2b0f      	cmp	r3, #15
 800d4e4:	d947      	bls.n	800d576 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d4e6:	e03f      	b.n	800d568 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	695b      	ldr	r3, [r3, #20]
 800d4ee:	f003 0302 	and.w	r3, r3, #2
 800d4f2:	2b02      	cmp	r3, #2
 800d4f4:	d114      	bne.n	800d520 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	6812      	ldr	r2, [r2, #0]
 800d500:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d506:	1d1a      	adds	r2, r3, #4
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d512:	b29b      	uxth	r3, r3
 800d514:	3b01      	subs	r3, #1
 800d516:	b29a      	uxth	r2, r3
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d51e:	e023      	b.n	800d568 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d520:	f7f9 f946 	bl	80067b0 <HAL_GetTick>
 800d524:	4602      	mov	r2, r0
 800d526:	693b      	ldr	r3, [r7, #16]
 800d528:	1ad3      	subs	r3, r2, r3
 800d52a:	683a      	ldr	r2, [r7, #0]
 800d52c:	429a      	cmp	r2, r3
 800d52e:	d803      	bhi.n	800d538 <HAL_SPI_Transmit+0x164>
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d536:	d102      	bne.n	800d53e <HAL_SPI_Transmit+0x16a>
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d114      	bne.n	800d568 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d53e:	68f8      	ldr	r0, [r7, #12]
 800d540:	f000 fee2 	bl	800e308 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d54a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	2201      	movs	r2, #1
 800d558:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	2200      	movs	r2, #0
 800d560:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800d564:	2303      	movs	r3, #3
 800d566:	e11e      	b.n	800d7a6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d56e:	b29b      	uxth	r3, r3
 800d570:	2b00      	cmp	r3, #0
 800d572:	d1b9      	bne.n	800d4e8 <HAL_SPI_Transmit+0x114>
 800d574:	e0f1      	b.n	800d75a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	68db      	ldr	r3, [r3, #12]
 800d57a:	2b07      	cmp	r3, #7
 800d57c:	f240 80e6 	bls.w	800d74c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d580:	e05d      	b.n	800d63e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	695b      	ldr	r3, [r3, #20]
 800d588:	f003 0302 	and.w	r3, r3, #2
 800d58c:	2b02      	cmp	r3, #2
 800d58e:	d132      	bne.n	800d5f6 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d596:	b29b      	uxth	r3, r3
 800d598:	2b01      	cmp	r3, #1
 800d59a:	d918      	bls.n	800d5ce <HAL_SPI_Transmit+0x1fa>
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d014      	beq.n	800d5ce <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	6812      	ldr	r2, [r2, #0]
 800d5ae:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d5b4:	1d1a      	adds	r2, r3, #4
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d5c0:	b29b      	uxth	r3, r3
 800d5c2:	3b02      	subs	r3, #2
 800d5c4:	b29a      	uxth	r2, r3
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d5cc:	e037      	b.n	800d63e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d5d2:	881a      	ldrh	r2, [r3, #0]
 800d5d4:	697b      	ldr	r3, [r7, #20]
 800d5d6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d5dc:	1c9a      	adds	r2, r3, #2
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d5e8:	b29b      	uxth	r3, r3
 800d5ea:	3b01      	subs	r3, #1
 800d5ec:	b29a      	uxth	r2, r3
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d5f4:	e023      	b.n	800d63e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d5f6:	f7f9 f8db 	bl	80067b0 <HAL_GetTick>
 800d5fa:	4602      	mov	r2, r0
 800d5fc:	693b      	ldr	r3, [r7, #16]
 800d5fe:	1ad3      	subs	r3, r2, r3
 800d600:	683a      	ldr	r2, [r7, #0]
 800d602:	429a      	cmp	r2, r3
 800d604:	d803      	bhi.n	800d60e <HAL_SPI_Transmit+0x23a>
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d60c:	d102      	bne.n	800d614 <HAL_SPI_Transmit+0x240>
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d114      	bne.n	800d63e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d614:	68f8      	ldr	r0, [r7, #12]
 800d616:	f000 fe77 	bl	800e308 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d620:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	2201      	movs	r2, #1
 800d62e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	2200      	movs	r2, #0
 800d636:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800d63a:	2303      	movs	r3, #3
 800d63c:	e0b3      	b.n	800d7a6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d644:	b29b      	uxth	r3, r3
 800d646:	2b00      	cmp	r3, #0
 800d648:	d19b      	bne.n	800d582 <HAL_SPI_Transmit+0x1ae>
 800d64a:	e086      	b.n	800d75a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	695b      	ldr	r3, [r3, #20]
 800d652:	f003 0302 	and.w	r3, r3, #2
 800d656:	2b02      	cmp	r3, #2
 800d658:	d154      	bne.n	800d704 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d660:	b29b      	uxth	r3, r3
 800d662:	2b03      	cmp	r3, #3
 800d664:	d918      	bls.n	800d698 <HAL_SPI_Transmit+0x2c4>
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d66a:	2b40      	cmp	r3, #64	@ 0x40
 800d66c:	d914      	bls.n	800d698 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	6812      	ldr	r2, [r2, #0]
 800d678:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d67e:	1d1a      	adds	r2, r3, #4
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d68a:	b29b      	uxth	r3, r3
 800d68c:	3b04      	subs	r3, #4
 800d68e:	b29a      	uxth	r2, r3
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d696:	e059      	b.n	800d74c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d69e:	b29b      	uxth	r3, r3
 800d6a0:	2b01      	cmp	r3, #1
 800d6a2:	d917      	bls.n	800d6d4 <HAL_SPI_Transmit+0x300>
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d013      	beq.n	800d6d4 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d6b0:	881a      	ldrh	r2, [r3, #0]
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d6ba:	1c9a      	adds	r2, r3, #2
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d6c6:	b29b      	uxth	r3, r3
 800d6c8:	3b02      	subs	r3, #2
 800d6ca:	b29a      	uxth	r2, r3
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d6d2:	e03b      	b.n	800d74c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	3320      	adds	r3, #32
 800d6de:	7812      	ldrb	r2, [r2, #0]
 800d6e0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d6e6:	1c5a      	adds	r2, r3, #1
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d6f2:	b29b      	uxth	r3, r3
 800d6f4:	3b01      	subs	r3, #1
 800d6f6:	b29a      	uxth	r2, r3
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d6fe:	e025      	b.n	800d74c <HAL_SPI_Transmit+0x378>
 800d700:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d704:	f7f9 f854 	bl	80067b0 <HAL_GetTick>
 800d708:	4602      	mov	r2, r0
 800d70a:	693b      	ldr	r3, [r7, #16]
 800d70c:	1ad3      	subs	r3, r2, r3
 800d70e:	683a      	ldr	r2, [r7, #0]
 800d710:	429a      	cmp	r2, r3
 800d712:	d803      	bhi.n	800d71c <HAL_SPI_Transmit+0x348>
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d71a:	d102      	bne.n	800d722 <HAL_SPI_Transmit+0x34e>
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d114      	bne.n	800d74c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d722:	68f8      	ldr	r0, [r7, #12]
 800d724:	f000 fdf0 	bl	800e308 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d72e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	2201      	movs	r2, #1
 800d73c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	2200      	movs	r2, #0
 800d744:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800d748:	2303      	movs	r3, #3
 800d74a:	e02c      	b.n	800d7a6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d752:	b29b      	uxth	r3, r3
 800d754:	2b00      	cmp	r3, #0
 800d756:	f47f af79 	bne.w	800d64c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800d75a:	693b      	ldr	r3, [r7, #16]
 800d75c:	9300      	str	r3, [sp, #0]
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	2200      	movs	r2, #0
 800d762:	2108      	movs	r1, #8
 800d764:	68f8      	ldr	r0, [r7, #12]
 800d766:	f000 fe6f 	bl	800e448 <SPI_WaitOnFlagUntilTimeout>
 800d76a:	4603      	mov	r3, r0
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d007      	beq.n	800d780 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d776:	f043 0220 	orr.w	r2, r3, #32
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d780:	68f8      	ldr	r0, [r7, #12]
 800d782:	f000 fdc1 	bl	800e308 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	2201      	movs	r2, #1
 800d78a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	2200      	movs	r2, #0
 800d792:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d001      	beq.n	800d7a4 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	e000      	b.n	800d7a6 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800d7a4:	2300      	movs	r3, #0
  }
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	3718      	adds	r7, #24
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bd80      	pop	{r7, pc}
 800d7ae:	bf00      	nop

0800d7b0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b088      	sub	sp, #32
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	60f8      	str	r0, [r7, #12]
 800d7b8:	60b9      	str	r1, [r7, #8]
 800d7ba:	603b      	str	r3, [r7, #0]
 800d7bc:	4613      	mov	r3, r2
 800d7be:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d7c4:	095b      	lsrs	r3, r3, #5
 800d7c6:	b29b      	uxth	r3, r3
 800d7c8:	3301      	adds	r3, #1
 800d7ca:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	3330      	adds	r3, #48	@ 0x30
 800d7d2:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d7d4:	f7f8 ffec 	bl	80067b0 <HAL_GetTick>
 800d7d8:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d7e0:	b2db      	uxtb	r3, r3
 800d7e2:	2b01      	cmp	r3, #1
 800d7e4:	d001      	beq.n	800d7ea <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800d7e6:	2302      	movs	r3, #2
 800d7e8:	e250      	b.n	800dc8c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d002      	beq.n	800d7f6 <HAL_SPI_Receive+0x46>
 800d7f0:	88fb      	ldrh	r3, [r7, #6]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d101      	bne.n	800d7fa <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800d7f6:	2301      	movs	r3, #1
 800d7f8:	e248      	b.n	800dc8c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800d800:	2b01      	cmp	r3, #1
 800d802:	d101      	bne.n	800d808 <HAL_SPI_Receive+0x58>
 800d804:	2302      	movs	r3, #2
 800d806:	e241      	b.n	800dc8c <HAL_SPI_Receive+0x4dc>
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	2201      	movs	r2, #1
 800d80c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	2204      	movs	r2, #4
 800d814:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	2200      	movs	r2, #0
 800d81c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	68ba      	ldr	r2, [r7, #8]
 800d824:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	88fa      	ldrh	r2, [r7, #6]
 800d82a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	88fa      	ldrh	r2, [r7, #6]
 800d832:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	2200      	movs	r2, #0
 800d83a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	2200      	movs	r2, #0
 800d840:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	2200      	movs	r2, #0
 800d848:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	2200      	movs	r2, #0
 800d850:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	2200      	movs	r2, #0
 800d856:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	689b      	ldr	r3, [r3, #8]
 800d85c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800d860:	d108      	bne.n	800d874 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	681a      	ldr	r2, [r3, #0]
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d870:	601a      	str	r2, [r3, #0]
 800d872:	e009      	b.n	800d888 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	68db      	ldr	r3, [r3, #12]
 800d87a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800d886:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	685a      	ldr	r2, [r3, #4]
 800d88e:	4b95      	ldr	r3, [pc, #596]	@ (800dae4 <HAL_SPI_Receive+0x334>)
 800d890:	4013      	ands	r3, r2
 800d892:	88f9      	ldrh	r1, [r7, #6]
 800d894:	68fa      	ldr	r2, [r7, #12]
 800d896:	6812      	ldr	r2, [r2, #0]
 800d898:	430b      	orrs	r3, r1
 800d89a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	681a      	ldr	r2, [r3, #0]
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	f042 0201 	orr.w	r2, r2, #1
 800d8aa:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	685b      	ldr	r3, [r3, #4]
 800d8b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d8b4:	d107      	bne.n	800d8c6 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	681a      	ldr	r2, [r3, #0]
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d8c4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	68db      	ldr	r3, [r3, #12]
 800d8ca:	2b0f      	cmp	r3, #15
 800d8cc:	d96c      	bls.n	800d9a8 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800d8ce:	e064      	b.n	800d99a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	695b      	ldr	r3, [r3, #20]
 800d8d6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	695b      	ldr	r3, [r3, #20]
 800d8de:	f003 0301 	and.w	r3, r3, #1
 800d8e2:	2b01      	cmp	r3, #1
 800d8e4:	d114      	bne.n	800d910 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	681a      	ldr	r2, [r3, #0]
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d8ee:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800d8f0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d8f6:	1d1a      	adds	r2, r3, #4
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d902:	b29b      	uxth	r3, r3
 800d904:	3b01      	subs	r3, #1
 800d906:	b29a      	uxth	r2, r3
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d90e:	e044      	b.n	800d99a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d916:	b29b      	uxth	r3, r3
 800d918:	8bfa      	ldrh	r2, [r7, #30]
 800d91a:	429a      	cmp	r2, r3
 800d91c:	d919      	bls.n	800d952 <HAL_SPI_Receive+0x1a2>
 800d91e:	693b      	ldr	r3, [r7, #16]
 800d920:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d924:	2b00      	cmp	r3, #0
 800d926:	d014      	beq.n	800d952 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	681a      	ldr	r2, [r3, #0]
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d930:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800d932:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d938:	1d1a      	adds	r2, r3, #4
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d944:	b29b      	uxth	r3, r3
 800d946:	3b01      	subs	r3, #1
 800d948:	b29a      	uxth	r2, r3
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d950:	e023      	b.n	800d99a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d952:	f7f8 ff2d 	bl	80067b0 <HAL_GetTick>
 800d956:	4602      	mov	r2, r0
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	1ad3      	subs	r3, r2, r3
 800d95c:	683a      	ldr	r2, [r7, #0]
 800d95e:	429a      	cmp	r2, r3
 800d960:	d803      	bhi.n	800d96a <HAL_SPI_Receive+0x1ba>
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d968:	d102      	bne.n	800d970 <HAL_SPI_Receive+0x1c0>
 800d96a:	683b      	ldr	r3, [r7, #0]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d114      	bne.n	800d99a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d970:	68f8      	ldr	r0, [r7, #12]
 800d972:	f000 fcc9 	bl	800e308 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d97c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	2201      	movs	r2, #1
 800d98a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	2200      	movs	r2, #0
 800d992:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800d996:	2303      	movs	r3, #3
 800d998:	e178      	b.n	800dc8c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d9a0:	b29b      	uxth	r3, r3
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d194      	bne.n	800d8d0 <HAL_SPI_Receive+0x120>
 800d9a6:	e15e      	b.n	800dc66 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	68db      	ldr	r3, [r3, #12]
 800d9ac:	2b07      	cmp	r3, #7
 800d9ae:	f240 8153 	bls.w	800dc58 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800d9b2:	e08f      	b.n	800dad4 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	695b      	ldr	r3, [r3, #20]
 800d9ba:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	695b      	ldr	r3, [r3, #20]
 800d9c2:	f003 0301 	and.w	r3, r3, #1
 800d9c6:	2b01      	cmp	r3, #1
 800d9c8:	d114      	bne.n	800d9f4 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d9ce:	69ba      	ldr	r2, [r7, #24]
 800d9d0:	8812      	ldrh	r2, [r2, #0]
 800d9d2:	b292      	uxth	r2, r2
 800d9d4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d9da:	1c9a      	adds	r2, r3, #2
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d9e6:	b29b      	uxth	r3, r3
 800d9e8:	3b01      	subs	r3, #1
 800d9ea:	b29a      	uxth	r2, r3
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d9f2:	e06f      	b.n	800dad4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d9fa:	b29b      	uxth	r3, r3
 800d9fc:	8bfa      	ldrh	r2, [r7, #30]
 800d9fe:	429a      	cmp	r2, r3
 800da00:	d924      	bls.n	800da4c <HAL_SPI_Receive+0x29c>
 800da02:	693b      	ldr	r3, [r7, #16]
 800da04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d01f      	beq.n	800da4c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800da10:	69ba      	ldr	r2, [r7, #24]
 800da12:	8812      	ldrh	r2, [r2, #0]
 800da14:	b292      	uxth	r2, r2
 800da16:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800da1c:	1c9a      	adds	r2, r3, #2
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800da26:	69ba      	ldr	r2, [r7, #24]
 800da28:	8812      	ldrh	r2, [r2, #0]
 800da2a:	b292      	uxth	r2, r2
 800da2c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800da32:	1c9a      	adds	r2, r3, #2
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800da3e:	b29b      	uxth	r3, r3
 800da40:	3b02      	subs	r3, #2
 800da42:	b29a      	uxth	r2, r3
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800da4a:	e043      	b.n	800dad4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800da52:	b29b      	uxth	r3, r3
 800da54:	2b01      	cmp	r3, #1
 800da56:	d119      	bne.n	800da8c <HAL_SPI_Receive+0x2dc>
 800da58:	693b      	ldr	r3, [r7, #16]
 800da5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d014      	beq.n	800da8c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800da66:	69ba      	ldr	r2, [r7, #24]
 800da68:	8812      	ldrh	r2, [r2, #0]
 800da6a:	b292      	uxth	r2, r2
 800da6c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800da72:	1c9a      	adds	r2, r3, #2
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800da7e:	b29b      	uxth	r3, r3
 800da80:	3b01      	subs	r3, #1
 800da82:	b29a      	uxth	r2, r3
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800da8a:	e023      	b.n	800dad4 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800da8c:	f7f8 fe90 	bl	80067b0 <HAL_GetTick>
 800da90:	4602      	mov	r2, r0
 800da92:	697b      	ldr	r3, [r7, #20]
 800da94:	1ad3      	subs	r3, r2, r3
 800da96:	683a      	ldr	r2, [r7, #0]
 800da98:	429a      	cmp	r2, r3
 800da9a:	d803      	bhi.n	800daa4 <HAL_SPI_Receive+0x2f4>
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daa2:	d102      	bne.n	800daaa <HAL_SPI_Receive+0x2fa>
 800daa4:	683b      	ldr	r3, [r7, #0]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d114      	bne.n	800dad4 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800daaa:	68f8      	ldr	r0, [r7, #12]
 800daac:	f000 fc2c 	bl	800e308 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dab6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	2201      	movs	r2, #1
 800dac4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	2200      	movs	r2, #0
 800dacc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800dad0:	2303      	movs	r3, #3
 800dad2:	e0db      	b.n	800dc8c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800dada:	b29b      	uxth	r3, r3
 800dadc:	2b00      	cmp	r3, #0
 800dade:	f47f af69 	bne.w	800d9b4 <HAL_SPI_Receive+0x204>
 800dae2:	e0c0      	b.n	800dc66 <HAL_SPI_Receive+0x4b6>
 800dae4:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	695b      	ldr	r3, [r3, #20]
 800daee:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	695b      	ldr	r3, [r3, #20]
 800daf6:	f003 0301 	and.w	r3, r3, #1
 800dafa:	2b01      	cmp	r3, #1
 800dafc:	d117      	bne.n	800db2e <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800db0a:	7812      	ldrb	r2, [r2, #0]
 800db0c:	b2d2      	uxtb	r2, r2
 800db0e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800db14:	1c5a      	adds	r2, r3, #1
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800db20:	b29b      	uxth	r3, r3
 800db22:	3b01      	subs	r3, #1
 800db24:	b29a      	uxth	r2, r3
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800db2c:	e094      	b.n	800dc58 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800db34:	b29b      	uxth	r3, r3
 800db36:	8bfa      	ldrh	r2, [r7, #30]
 800db38:	429a      	cmp	r2, r3
 800db3a:	d946      	bls.n	800dbca <HAL_SPI_Receive+0x41a>
 800db3c:	693b      	ldr	r3, [r7, #16]
 800db3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800db42:	2b00      	cmp	r3, #0
 800db44:	d041      	beq.n	800dbca <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800db52:	7812      	ldrb	r2, [r2, #0]
 800db54:	b2d2      	uxtb	r2, r2
 800db56:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800db5c:	1c5a      	adds	r2, r3, #1
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800db6e:	7812      	ldrb	r2, [r2, #0]
 800db70:	b2d2      	uxtb	r2, r2
 800db72:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800db78:	1c5a      	adds	r2, r3, #1
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800db8a:	7812      	ldrb	r2, [r2, #0]
 800db8c:	b2d2      	uxtb	r2, r2
 800db8e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800db94:	1c5a      	adds	r2, r3, #1
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dba6:	7812      	ldrb	r2, [r2, #0]
 800dba8:	b2d2      	uxtb	r2, r2
 800dbaa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dbb0:	1c5a      	adds	r2, r3, #1
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800dbbc:	b29b      	uxth	r3, r3
 800dbbe:	3b04      	subs	r3, #4
 800dbc0:	b29a      	uxth	r2, r3
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800dbc8:	e046      	b.n	800dc58 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800dbd0:	b29b      	uxth	r3, r3
 800dbd2:	2b03      	cmp	r3, #3
 800dbd4:	d81c      	bhi.n	800dc10 <HAL_SPI_Receive+0x460>
 800dbd6:	693b      	ldr	r3, [r7, #16]
 800dbd8:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d017      	beq.n	800dc10 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dbec:	7812      	ldrb	r2, [r2, #0]
 800dbee:	b2d2      	uxtb	r2, r2
 800dbf0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dbf6:	1c5a      	adds	r2, r3, #1
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800dc02:	b29b      	uxth	r3, r3
 800dc04:	3b01      	subs	r3, #1
 800dc06:	b29a      	uxth	r2, r3
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800dc0e:	e023      	b.n	800dc58 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dc10:	f7f8 fdce 	bl	80067b0 <HAL_GetTick>
 800dc14:	4602      	mov	r2, r0
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	1ad3      	subs	r3, r2, r3
 800dc1a:	683a      	ldr	r2, [r7, #0]
 800dc1c:	429a      	cmp	r2, r3
 800dc1e:	d803      	bhi.n	800dc28 <HAL_SPI_Receive+0x478>
 800dc20:	683b      	ldr	r3, [r7, #0]
 800dc22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc26:	d102      	bne.n	800dc2e <HAL_SPI_Receive+0x47e>
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d114      	bne.n	800dc58 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dc2e:	68f8      	ldr	r0, [r7, #12]
 800dc30:	f000 fb6a 	bl	800e308 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dc3a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	2201      	movs	r2, #1
 800dc48:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	2200      	movs	r2, #0
 800dc50:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800dc54:	2303      	movs	r3, #3
 800dc56:	e019      	b.n	800dc8c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800dc5e:	b29b      	uxth	r3, r3
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	f47f af41 	bne.w	800dae8 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800dc66:	68f8      	ldr	r0, [r7, #12]
 800dc68:	f000 fb4e 	bl	800e308 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	2201      	movs	r2, #1
 800dc70:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	2200      	movs	r2, #0
 800dc78:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d001      	beq.n	800dc8a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800dc86:	2301      	movs	r3, #1
 800dc88:	e000      	b.n	800dc8c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800dc8a:	2300      	movs	r3, #0
  }
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	3720      	adds	r7, #32
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}

0800dc94 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b08e      	sub	sp, #56	@ 0x38
 800dc98:	af02      	add	r7, sp, #8
 800dc9a:	60f8      	str	r0, [r7, #12]
 800dc9c:	60b9      	str	r1, [r7, #8]
 800dc9e:	607a      	str	r2, [r7, #4]
 800dca0:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	3320      	adds	r3, #32
 800dca8:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	3330      	adds	r3, #48	@ 0x30
 800dcb0:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dcb6:	095b      	lsrs	r3, r3, #5
 800dcb8:	b29b      	uxth	r3, r3
 800dcba:	3301      	adds	r3, #1
 800dcbc:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dcbe:	f7f8 fd77 	bl	80067b0 <HAL_GetTick>
 800dcc2:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800dcc4:	887b      	ldrh	r3, [r7, #2]
 800dcc6:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800dcc8:	887b      	ldrh	r3, [r7, #2]
 800dcca:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800dcd2:	b2db      	uxtb	r3, r3
 800dcd4:	2b01      	cmp	r3, #1
 800dcd6:	d001      	beq.n	800dcdc <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800dcd8:	2302      	movs	r3, #2
 800dcda:	e310      	b.n	800e2fe <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d005      	beq.n	800dcee <HAL_SPI_TransmitReceive+0x5a>
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d002      	beq.n	800dcee <HAL_SPI_TransmitReceive+0x5a>
 800dce8:	887b      	ldrh	r3, [r7, #2]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d101      	bne.n	800dcf2 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800dcee:	2301      	movs	r3, #1
 800dcf0:	e305      	b.n	800e2fe <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800dcf8:	2b01      	cmp	r3, #1
 800dcfa:	d101      	bne.n	800dd00 <HAL_SPI_TransmitReceive+0x6c>
 800dcfc:	2302      	movs	r3, #2
 800dcfe:	e2fe      	b.n	800e2fe <HAL_SPI_TransmitReceive+0x66a>
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	2201      	movs	r2, #1
 800dd04:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	2205      	movs	r2, #5
 800dd0c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	2200      	movs	r2, #0
 800dd14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	687a      	ldr	r2, [r7, #4]
 800dd1c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	887a      	ldrh	r2, [r7, #2]
 800dd22:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	887a      	ldrh	r2, [r7, #2]
 800dd2a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	68ba      	ldr	r2, [r7, #8]
 800dd32:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	887a      	ldrh	r2, [r7, #2]
 800dd38:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	887a      	ldrh	r2, [r7, #2]
 800dd40:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	2200      	movs	r2, #0
 800dd48:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	68da      	ldr	r2, [r3, #12]
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800dd5e:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	4a70      	ldr	r2, [pc, #448]	@ (800df28 <HAL_SPI_TransmitReceive+0x294>)
 800dd66:	4293      	cmp	r3, r2
 800dd68:	d009      	beq.n	800dd7e <HAL_SPI_TransmitReceive+0xea>
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	4a6f      	ldr	r2, [pc, #444]	@ (800df2c <HAL_SPI_TransmitReceive+0x298>)
 800dd70:	4293      	cmp	r3, r2
 800dd72:	d004      	beq.n	800dd7e <HAL_SPI_TransmitReceive+0xea>
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	4a6d      	ldr	r2, [pc, #436]	@ (800df30 <HAL_SPI_TransmitReceive+0x29c>)
 800dd7a:	4293      	cmp	r3, r2
 800dd7c:	d102      	bne.n	800dd84 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800dd7e:	2310      	movs	r3, #16
 800dd80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dd82:	e001      	b.n	800dd88 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800dd84:	2308      	movs	r3, #8
 800dd86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	685a      	ldr	r2, [r3, #4]
 800dd8e:	4b69      	ldr	r3, [pc, #420]	@ (800df34 <HAL_SPI_TransmitReceive+0x2a0>)
 800dd90:	4013      	ands	r3, r2
 800dd92:	8879      	ldrh	r1, [r7, #2]
 800dd94:	68fa      	ldr	r2, [r7, #12]
 800dd96:	6812      	ldr	r2, [r2, #0]
 800dd98:	430b      	orrs	r3, r1
 800dd9a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	681a      	ldr	r2, [r3, #0]
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	f042 0201 	orr.w	r2, r2, #1
 800ddaa:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	685b      	ldr	r3, [r3, #4]
 800ddb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ddb4:	d107      	bne.n	800ddc6 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	681a      	ldr	r2, [r3, #0]
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ddc4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	68db      	ldr	r3, [r3, #12]
 800ddca:	2b0f      	cmp	r3, #15
 800ddcc:	f240 80a2 	bls.w	800df14 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800ddd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddd2:	089b      	lsrs	r3, r3, #2
 800ddd4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ddd6:	e094      	b.n	800df02 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	695b      	ldr	r3, [r3, #20]
 800ddde:	f003 0302 	and.w	r3, r3, #2
 800dde2:	2b02      	cmp	r3, #2
 800dde4:	d120      	bne.n	800de28 <HAL_SPI_TransmitReceive+0x194>
 800dde6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d01d      	beq.n	800de28 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800ddec:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ddee:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800ddf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddf2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800ddf4:	429a      	cmp	r2, r3
 800ddf6:	d217      	bcs.n	800de28 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	6812      	ldr	r2, [r2, #0]
 800de02:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800de08:	1d1a      	adds	r2, r3, #4
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800de14:	b29b      	uxth	r3, r3
 800de16:	3b01      	subs	r3, #1
 800de18:	b29a      	uxth	r2, r3
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800de26:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	695b      	ldr	r3, [r3, #20]
 800de2e:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800de30:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800de32:	2b00      	cmp	r3, #0
 800de34:	d065      	beq.n	800df02 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	695b      	ldr	r3, [r3, #20]
 800de3c:	f003 0301 	and.w	r3, r3, #1
 800de40:	2b01      	cmp	r3, #1
 800de42:	d118      	bne.n	800de76 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	681a      	ldr	r2, [r3, #0]
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800de4c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800de4e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800de54:	1d1a      	adds	r2, r3, #4
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800de60:	b29b      	uxth	r3, r3
 800de62:	3b01      	subs	r3, #1
 800de64:	b29a      	uxth	r2, r3
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800de72:	853b      	strh	r3, [r7, #40]	@ 0x28
 800de74:	e045      	b.n	800df02 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800de76:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800de78:	8bfb      	ldrh	r3, [r7, #30]
 800de7a:	429a      	cmp	r2, r3
 800de7c:	d21d      	bcs.n	800deba <HAL_SPI_TransmitReceive+0x226>
 800de7e:	697b      	ldr	r3, [r7, #20]
 800de80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800de84:	2b00      	cmp	r3, #0
 800de86:	d018      	beq.n	800deba <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	681a      	ldr	r2, [r3, #0]
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800de90:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800de92:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800de98:	1d1a      	adds	r2, r3, #4
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800dea4:	b29b      	uxth	r3, r3
 800dea6:	3b01      	subs	r3, #1
 800dea8:	b29a      	uxth	r2, r3
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800deb6:	853b      	strh	r3, [r7, #40]	@ 0x28
 800deb8:	e023      	b.n	800df02 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800deba:	f7f8 fc79 	bl	80067b0 <HAL_GetTick>
 800debe:	4602      	mov	r2, r0
 800dec0:	69bb      	ldr	r3, [r7, #24]
 800dec2:	1ad3      	subs	r3, r2, r3
 800dec4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dec6:	429a      	cmp	r2, r3
 800dec8:	d803      	bhi.n	800ded2 <HAL_SPI_TransmitReceive+0x23e>
 800deca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800decc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ded0:	d102      	bne.n	800ded8 <HAL_SPI_TransmitReceive+0x244>
 800ded2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d114      	bne.n	800df02 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800ded8:	68f8      	ldr	r0, [r7, #12]
 800deda:	f000 fa15 	bl	800e308 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dee4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	2201      	movs	r2, #1
 800def2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	2200      	movs	r2, #0
 800defa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800defe:	2303      	movs	r3, #3
 800df00:	e1fd      	b.n	800e2fe <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800df02:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800df04:	2b00      	cmp	r3, #0
 800df06:	f47f af67 	bne.w	800ddd8 <HAL_SPI_TransmitReceive+0x144>
 800df0a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	f47f af63 	bne.w	800ddd8 <HAL_SPI_TransmitReceive+0x144>
 800df12:	e1ce      	b.n	800e2b2 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	68db      	ldr	r3, [r3, #12]
 800df18:	2b07      	cmp	r3, #7
 800df1a:	f240 81c2 	bls.w	800e2a2 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800df1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df20:	085b      	lsrs	r3, r3, #1
 800df22:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800df24:	e0c9      	b.n	800e0ba <HAL_SPI_TransmitReceive+0x426>
 800df26:	bf00      	nop
 800df28:	40013000 	.word	0x40013000
 800df2c:	40003800 	.word	0x40003800
 800df30:	40003c00 	.word	0x40003c00
 800df34:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	695b      	ldr	r3, [r3, #20]
 800df3e:	f003 0302 	and.w	r3, r3, #2
 800df42:	2b02      	cmp	r3, #2
 800df44:	d11f      	bne.n	800df86 <HAL_SPI_TransmitReceive+0x2f2>
 800df46:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d01c      	beq.n	800df86 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800df4c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800df4e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800df50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df52:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800df54:	429a      	cmp	r2, r3
 800df56:	d216      	bcs.n	800df86 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800df5c:	881a      	ldrh	r2, [r3, #0]
 800df5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df60:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800df66:	1c9a      	adds	r2, r3, #2
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800df72:	b29b      	uxth	r3, r3
 800df74:	3b01      	subs	r3, #1
 800df76:	b29a      	uxth	r2, r3
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800df84:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	695b      	ldr	r3, [r3, #20]
 800df8c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800df8e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800df90:	2b00      	cmp	r3, #0
 800df92:	f000 8092 	beq.w	800e0ba <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	695b      	ldr	r3, [r3, #20]
 800df9c:	f003 0301 	and.w	r3, r3, #1
 800dfa0:	2b01      	cmp	r3, #1
 800dfa2:	d118      	bne.n	800dfd6 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dfa8:	6a3a      	ldr	r2, [r7, #32]
 800dfaa:	8812      	ldrh	r2, [r2, #0]
 800dfac:	b292      	uxth	r2, r2
 800dfae:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dfb4:	1c9a      	adds	r2, r3, #2
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800dfc0:	b29b      	uxth	r3, r3
 800dfc2:	3b01      	subs	r3, #1
 800dfc4:	b29a      	uxth	r2, r3
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800dfd2:	853b      	strh	r3, [r7, #40]	@ 0x28
 800dfd4:	e071      	b.n	800e0ba <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800dfd6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800dfd8:	8bfb      	ldrh	r3, [r7, #30]
 800dfda:	429a      	cmp	r2, r3
 800dfdc:	d228      	bcs.n	800e030 <HAL_SPI_TransmitReceive+0x39c>
 800dfde:	697b      	ldr	r3, [r7, #20]
 800dfe0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d023      	beq.n	800e030 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dfec:	6a3a      	ldr	r2, [r7, #32]
 800dfee:	8812      	ldrh	r2, [r2, #0]
 800dff0:	b292      	uxth	r2, r2
 800dff2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dff8:	1c9a      	adds	r2, r3, #2
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e002:	6a3a      	ldr	r2, [r7, #32]
 800e004:	8812      	ldrh	r2, [r2, #0]
 800e006:	b292      	uxth	r2, r2
 800e008:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e00e:	1c9a      	adds	r2, r3, #2
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e01a:	b29b      	uxth	r3, r3
 800e01c:	3b02      	subs	r3, #2
 800e01e:	b29a      	uxth	r2, r3
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e02c:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e02e:	e044      	b.n	800e0ba <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800e030:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e032:	2b01      	cmp	r3, #1
 800e034:	d11d      	bne.n	800e072 <HAL_SPI_TransmitReceive+0x3de>
 800e036:	697b      	ldr	r3, [r7, #20]
 800e038:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d018      	beq.n	800e072 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e044:	6a3a      	ldr	r2, [r7, #32]
 800e046:	8812      	ldrh	r2, [r2, #0]
 800e048:	b292      	uxth	r2, r2
 800e04a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e050:	1c9a      	adds	r2, r3, #2
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e05c:	b29b      	uxth	r3, r3
 800e05e:	3b01      	subs	r3, #1
 800e060:	b29a      	uxth	r2, r3
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e06e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e070:	e023      	b.n	800e0ba <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e072:	f7f8 fb9d 	bl	80067b0 <HAL_GetTick>
 800e076:	4602      	mov	r2, r0
 800e078:	69bb      	ldr	r3, [r7, #24]
 800e07a:	1ad3      	subs	r3, r2, r3
 800e07c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e07e:	429a      	cmp	r2, r3
 800e080:	d803      	bhi.n	800e08a <HAL_SPI_TransmitReceive+0x3f6>
 800e082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e084:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e088:	d102      	bne.n	800e090 <HAL_SPI_TransmitReceive+0x3fc>
 800e08a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d114      	bne.n	800e0ba <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800e090:	68f8      	ldr	r0, [r7, #12]
 800e092:	f000 f939 	bl	800e308 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e09c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	2201      	movs	r2, #1
 800e0aa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800e0b6:	2303      	movs	r3, #3
 800e0b8:	e121      	b.n	800e2fe <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e0ba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	f47f af3b 	bne.w	800df38 <HAL_SPI_TransmitReceive+0x2a4>
 800e0c2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	f47f af37 	bne.w	800df38 <HAL_SPI_TransmitReceive+0x2a4>
 800e0ca:	e0f2      	b.n	800e2b2 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	695b      	ldr	r3, [r3, #20]
 800e0d2:	f003 0302 	and.w	r3, r3, #2
 800e0d6:	2b02      	cmp	r3, #2
 800e0d8:	d121      	bne.n	800e11e <HAL_SPI_TransmitReceive+0x48a>
 800e0da:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d01e      	beq.n	800e11e <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800e0e0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800e0e2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800e0e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0e6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e0e8:	429a      	cmp	r2, r3
 800e0ea:	d218      	bcs.n	800e11e <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	3320      	adds	r3, #32
 800e0f6:	7812      	ldrb	r2, [r2, #0]
 800e0f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e0fe:	1c5a      	adds	r2, r3, #1
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e10a:	b29b      	uxth	r3, r3
 800e10c:	3b01      	subs	r3, #1
 800e10e:	b29a      	uxth	r2, r3
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e11c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	695b      	ldr	r3, [r3, #20]
 800e124:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800e126:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e128:	2b00      	cmp	r3, #0
 800e12a:	f000 80ba 	beq.w	800e2a2 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	695b      	ldr	r3, [r3, #20]
 800e134:	f003 0301 	and.w	r3, r3, #1
 800e138:	2b01      	cmp	r3, #1
 800e13a:	d11b      	bne.n	800e174 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e148:	7812      	ldrb	r2, [r2, #0]
 800e14a:	b2d2      	uxtb	r2, r2
 800e14c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e152:	1c5a      	adds	r2, r3, #1
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e15e:	b29b      	uxth	r3, r3
 800e160:	3b01      	subs	r3, #1
 800e162:	b29a      	uxth	r2, r3
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e170:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e172:	e096      	b.n	800e2a2 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e174:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800e176:	8bfb      	ldrh	r3, [r7, #30]
 800e178:	429a      	cmp	r2, r3
 800e17a:	d24a      	bcs.n	800e212 <HAL_SPI_TransmitReceive+0x57e>
 800e17c:	697b      	ldr	r3, [r7, #20]
 800e17e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e182:	2b00      	cmp	r3, #0
 800e184:	d045      	beq.n	800e212 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e192:	7812      	ldrb	r2, [r2, #0]
 800e194:	b2d2      	uxtb	r2, r2
 800e196:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e19c:	1c5a      	adds	r2, r3, #1
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e1ae:	7812      	ldrb	r2, [r2, #0]
 800e1b0:	b2d2      	uxtb	r2, r2
 800e1b2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e1b8:	1c5a      	adds	r2, r3, #1
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e1ca:	7812      	ldrb	r2, [r2, #0]
 800e1cc:	b2d2      	uxtb	r2, r2
 800e1ce:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e1d4:	1c5a      	adds	r2, r3, #1
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e1e6:	7812      	ldrb	r2, [r2, #0]
 800e1e8:	b2d2      	uxtb	r2, r2
 800e1ea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e1f0:	1c5a      	adds	r2, r3, #1
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e1fc:	b29b      	uxth	r3, r3
 800e1fe:	3b04      	subs	r3, #4
 800e200:	b29a      	uxth	r2, r3
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e20e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e210:	e047      	b.n	800e2a2 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800e212:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e214:	2b03      	cmp	r3, #3
 800e216:	d820      	bhi.n	800e25a <HAL_SPI_TransmitReceive+0x5c6>
 800e218:	697b      	ldr	r3, [r7, #20]
 800e21a:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d01b      	beq.n	800e25a <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e22e:	7812      	ldrb	r2, [r2, #0]
 800e230:	b2d2      	uxtb	r2, r2
 800e232:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e238:	1c5a      	adds	r2, r3, #1
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e244:	b29b      	uxth	r3, r3
 800e246:	3b01      	subs	r3, #1
 800e248:	b29a      	uxth	r2, r3
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e256:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e258:	e023      	b.n	800e2a2 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e25a:	f7f8 faa9 	bl	80067b0 <HAL_GetTick>
 800e25e:	4602      	mov	r2, r0
 800e260:	69bb      	ldr	r3, [r7, #24]
 800e262:	1ad3      	subs	r3, r2, r3
 800e264:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e266:	429a      	cmp	r2, r3
 800e268:	d803      	bhi.n	800e272 <HAL_SPI_TransmitReceive+0x5de>
 800e26a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e26c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e270:	d102      	bne.n	800e278 <HAL_SPI_TransmitReceive+0x5e4>
 800e272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e274:	2b00      	cmp	r3, #0
 800e276:	d114      	bne.n	800e2a2 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800e278:	68f8      	ldr	r0, [r7, #12]
 800e27a:	f000 f845 	bl	800e308 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e284:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	2201      	movs	r2, #1
 800e292:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	2200      	movs	r2, #0
 800e29a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800e29e:	2303      	movs	r3, #3
 800e2a0:	e02d      	b.n	800e2fe <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e2a2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	f47f af11 	bne.w	800e0cc <HAL_SPI_TransmitReceive+0x438>
 800e2aa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	f47f af0d 	bne.w	800e0cc <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800e2b2:	69bb      	ldr	r3, [r7, #24]
 800e2b4:	9300      	str	r3, [sp, #0]
 800e2b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	2108      	movs	r1, #8
 800e2bc:	68f8      	ldr	r0, [r7, #12]
 800e2be:	f000 f8c3 	bl	800e448 <SPI_WaitOnFlagUntilTimeout>
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d007      	beq.n	800e2d8 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e2ce:	f043 0220 	orr.w	r2, r3, #32
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e2d8:	68f8      	ldr	r0, [r7, #12]
 800e2da:	f000 f815 	bl	800e308 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	2201      	movs	r2, #1
 800e2e2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	2200      	movs	r2, #0
 800e2ea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d001      	beq.n	800e2fc <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800e2f8:	2301      	movs	r3, #1
 800e2fa:	e000      	b.n	800e2fe <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800e2fc:	2300      	movs	r3, #0
  }
}
 800e2fe:	4618      	mov	r0, r3
 800e300:	3730      	adds	r7, #48	@ 0x30
 800e302:	46bd      	mov	sp, r7
 800e304:	bd80      	pop	{r7, pc}
 800e306:	bf00      	nop

0800e308 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e308:	b480      	push	{r7}
 800e30a:	b085      	sub	sp, #20
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	695b      	ldr	r3, [r3, #20]
 800e316:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	699a      	ldr	r2, [r3, #24]
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	f042 0208 	orr.w	r2, r2, #8
 800e326:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	699a      	ldr	r2, [r3, #24]
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	f042 0210 	orr.w	r2, r2, #16
 800e336:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	681a      	ldr	r2, [r3, #0]
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	f022 0201 	bic.w	r2, r2, #1
 800e346:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	6919      	ldr	r1, [r3, #16]
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681a      	ldr	r2, [r3, #0]
 800e352:	4b3c      	ldr	r3, [pc, #240]	@ (800e444 <SPI_CloseTransfer+0x13c>)
 800e354:	400b      	ands	r3, r1
 800e356:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	689a      	ldr	r2, [r3, #8]
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800e366:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e36e:	b2db      	uxtb	r3, r3
 800e370:	2b04      	cmp	r3, #4
 800e372:	d014      	beq.n	800e39e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	f003 0320 	and.w	r3, r3, #32
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d00f      	beq.n	800e39e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e384:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	699a      	ldr	r2, [r3, #24]
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	f042 0220 	orr.w	r2, r2, #32
 800e39c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e3a4:	b2db      	uxtb	r3, r3
 800e3a6:	2b03      	cmp	r3, #3
 800e3a8:	d014      	beq.n	800e3d4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d00f      	beq.n	800e3d4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e3ba:	f043 0204 	orr.w	r2, r3, #4
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	699a      	ldr	r2, [r3, #24]
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e3d2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d00f      	beq.n	800e3fe <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e3e4:	f043 0201 	orr.w	r2, r3, #1
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	699a      	ldr	r2, [r3, #24]
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e3fc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e404:	2b00      	cmp	r3, #0
 800e406:	d00f      	beq.n	800e428 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e40e:	f043 0208 	orr.w	r2, r3, #8
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	699a      	ldr	r2, [r3, #24]
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e426:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	2200      	movs	r2, #0
 800e42c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2200      	movs	r2, #0
 800e434:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800e438:	bf00      	nop
 800e43a:	3714      	adds	r7, #20
 800e43c:	46bd      	mov	sp, r7
 800e43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e442:	4770      	bx	lr
 800e444:	fffffc90 	.word	0xfffffc90

0800e448 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b084      	sub	sp, #16
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	60f8      	str	r0, [r7, #12]
 800e450:	60b9      	str	r1, [r7, #8]
 800e452:	603b      	str	r3, [r7, #0]
 800e454:	4613      	mov	r3, r2
 800e456:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e458:	e010      	b.n	800e47c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e45a:	f7f8 f9a9 	bl	80067b0 <HAL_GetTick>
 800e45e:	4602      	mov	r2, r0
 800e460:	69bb      	ldr	r3, [r7, #24]
 800e462:	1ad3      	subs	r3, r2, r3
 800e464:	683a      	ldr	r2, [r7, #0]
 800e466:	429a      	cmp	r2, r3
 800e468:	d803      	bhi.n	800e472 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e470:	d102      	bne.n	800e478 <SPI_WaitOnFlagUntilTimeout+0x30>
 800e472:	683b      	ldr	r3, [r7, #0]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d101      	bne.n	800e47c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800e478:	2303      	movs	r3, #3
 800e47a:	e00f      	b.n	800e49c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	695a      	ldr	r2, [r3, #20]
 800e482:	68bb      	ldr	r3, [r7, #8]
 800e484:	4013      	ands	r3, r2
 800e486:	68ba      	ldr	r2, [r7, #8]
 800e488:	429a      	cmp	r2, r3
 800e48a:	bf0c      	ite	eq
 800e48c:	2301      	moveq	r3, #1
 800e48e:	2300      	movne	r3, #0
 800e490:	b2db      	uxtb	r3, r3
 800e492:	461a      	mov	r2, r3
 800e494:	79fb      	ldrb	r3, [r7, #7]
 800e496:	429a      	cmp	r2, r3
 800e498:	d0df      	beq.n	800e45a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800e49a:	2300      	movs	r3, #0
}
 800e49c:	4618      	mov	r0, r3
 800e49e:	3710      	adds	r7, #16
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	bd80      	pop	{r7, pc}

0800e4a4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e4a4:	b480      	push	{r7}
 800e4a6:	b085      	sub	sp, #20
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e4b0:	095b      	lsrs	r3, r3, #5
 800e4b2:	3301      	adds	r3, #1
 800e4b4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	68db      	ldr	r3, [r3, #12]
 800e4ba:	3301      	adds	r3, #1
 800e4bc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e4be:	68bb      	ldr	r3, [r7, #8]
 800e4c0:	3307      	adds	r3, #7
 800e4c2:	08db      	lsrs	r3, r3, #3
 800e4c4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e4c6:	68bb      	ldr	r3, [r7, #8]
 800e4c8:	68fa      	ldr	r2, [r7, #12]
 800e4ca:	fb02 f303 	mul.w	r3, r2, r3
}
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	3714      	adds	r7, #20
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d8:	4770      	bx	lr

0800e4da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e4da:	b580      	push	{r7, lr}
 800e4dc:	b082      	sub	sp, #8
 800e4de:	af00      	add	r7, sp, #0
 800e4e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d101      	bne.n	800e4ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e4e8:	2301      	movs	r3, #1
 800e4ea:	e049      	b.n	800e580 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e4f2:	b2db      	uxtb	r3, r3
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d106      	bne.n	800e506 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e500:	6878      	ldr	r0, [r7, #4]
 800e502:	f7f5 fb4f 	bl	8003ba4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	2202      	movs	r2, #2
 800e50a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681a      	ldr	r2, [r3, #0]
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	3304      	adds	r3, #4
 800e516:	4619      	mov	r1, r3
 800e518:	4610      	mov	r0, r2
 800e51a:	f000 fc57 	bl	800edcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	2201      	movs	r2, #1
 800e522:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	2201      	movs	r2, #1
 800e52a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	2201      	movs	r2, #1
 800e532:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	2201      	movs	r2, #1
 800e53a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	2201      	movs	r2, #1
 800e542:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	2201      	movs	r2, #1
 800e54a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	2201      	movs	r2, #1
 800e552:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	2201      	movs	r2, #1
 800e55a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	2201      	movs	r2, #1
 800e562:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	2201      	movs	r2, #1
 800e56a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	2201      	movs	r2, #1
 800e572:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	2201      	movs	r2, #1
 800e57a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e57e:	2300      	movs	r3, #0
}
 800e580:	4618      	mov	r0, r3
 800e582:	3708      	adds	r7, #8
 800e584:	46bd      	mov	sp, r7
 800e586:	bd80      	pop	{r7, pc}

0800e588 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e588:	b480      	push	{r7}
 800e58a:	b085      	sub	sp, #20
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e596:	b2db      	uxtb	r3, r3
 800e598:	2b01      	cmp	r3, #1
 800e59a:	d001      	beq.n	800e5a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e59c:	2301      	movs	r3, #1
 800e59e:	e054      	b.n	800e64a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2202      	movs	r2, #2
 800e5a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	68da      	ldr	r2, [r3, #12]
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	f042 0201 	orr.w	r2, r2, #1
 800e5b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	4a26      	ldr	r2, [pc, #152]	@ (800e658 <HAL_TIM_Base_Start_IT+0xd0>)
 800e5be:	4293      	cmp	r3, r2
 800e5c0:	d022      	beq.n	800e608 <HAL_TIM_Base_Start_IT+0x80>
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e5ca:	d01d      	beq.n	800e608 <HAL_TIM_Base_Start_IT+0x80>
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	4a22      	ldr	r2, [pc, #136]	@ (800e65c <HAL_TIM_Base_Start_IT+0xd4>)
 800e5d2:	4293      	cmp	r3, r2
 800e5d4:	d018      	beq.n	800e608 <HAL_TIM_Base_Start_IT+0x80>
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	4a21      	ldr	r2, [pc, #132]	@ (800e660 <HAL_TIM_Base_Start_IT+0xd8>)
 800e5dc:	4293      	cmp	r3, r2
 800e5de:	d013      	beq.n	800e608 <HAL_TIM_Base_Start_IT+0x80>
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	4a1f      	ldr	r2, [pc, #124]	@ (800e664 <HAL_TIM_Base_Start_IT+0xdc>)
 800e5e6:	4293      	cmp	r3, r2
 800e5e8:	d00e      	beq.n	800e608 <HAL_TIM_Base_Start_IT+0x80>
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	4a1e      	ldr	r2, [pc, #120]	@ (800e668 <HAL_TIM_Base_Start_IT+0xe0>)
 800e5f0:	4293      	cmp	r3, r2
 800e5f2:	d009      	beq.n	800e608 <HAL_TIM_Base_Start_IT+0x80>
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	4a1c      	ldr	r2, [pc, #112]	@ (800e66c <HAL_TIM_Base_Start_IT+0xe4>)
 800e5fa:	4293      	cmp	r3, r2
 800e5fc:	d004      	beq.n	800e608 <HAL_TIM_Base_Start_IT+0x80>
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	4a1b      	ldr	r2, [pc, #108]	@ (800e670 <HAL_TIM_Base_Start_IT+0xe8>)
 800e604:	4293      	cmp	r3, r2
 800e606:	d115      	bne.n	800e634 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	689a      	ldr	r2, [r3, #8]
 800e60e:	4b19      	ldr	r3, [pc, #100]	@ (800e674 <HAL_TIM_Base_Start_IT+0xec>)
 800e610:	4013      	ands	r3, r2
 800e612:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	2b06      	cmp	r3, #6
 800e618:	d015      	beq.n	800e646 <HAL_TIM_Base_Start_IT+0xbe>
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e620:	d011      	beq.n	800e646 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	681a      	ldr	r2, [r3, #0]
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	f042 0201 	orr.w	r2, r2, #1
 800e630:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e632:	e008      	b.n	800e646 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	681a      	ldr	r2, [r3, #0]
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	f042 0201 	orr.w	r2, r2, #1
 800e642:	601a      	str	r2, [r3, #0]
 800e644:	e000      	b.n	800e648 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e646:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e648:	2300      	movs	r3, #0
}
 800e64a:	4618      	mov	r0, r3
 800e64c:	3714      	adds	r7, #20
 800e64e:	46bd      	mov	sp, r7
 800e650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e654:	4770      	bx	lr
 800e656:	bf00      	nop
 800e658:	40010000 	.word	0x40010000
 800e65c:	40000400 	.word	0x40000400
 800e660:	40000800 	.word	0x40000800
 800e664:	40000c00 	.word	0x40000c00
 800e668:	40010400 	.word	0x40010400
 800e66c:	40001800 	.word	0x40001800
 800e670:	40014000 	.word	0x40014000
 800e674:	00010007 	.word	0x00010007

0800e678 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b082      	sub	sp, #8
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d101      	bne.n	800e68a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e686:	2301      	movs	r3, #1
 800e688:	e049      	b.n	800e71e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e690:	b2db      	uxtb	r3, r3
 800e692:	2b00      	cmp	r3, #0
 800e694:	d106      	bne.n	800e6a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	2200      	movs	r2, #0
 800e69a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e69e:	6878      	ldr	r0, [r7, #4]
 800e6a0:	f7f5 fa32 	bl	8003b08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2202      	movs	r2, #2
 800e6a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681a      	ldr	r2, [r3, #0]
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	3304      	adds	r3, #4
 800e6b4:	4619      	mov	r1, r3
 800e6b6:	4610      	mov	r0, r2
 800e6b8:	f000 fb88 	bl	800edcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2201      	movs	r2, #1
 800e6c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2201      	movs	r2, #1
 800e6c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	2201      	movs	r2, #1
 800e6d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	2201      	movs	r2, #1
 800e6d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	2201      	movs	r2, #1
 800e6e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	2201      	movs	r2, #1
 800e6e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	2201      	movs	r2, #1
 800e6f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	2201      	movs	r2, #1
 800e6f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2201      	movs	r2, #1
 800e700:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2201      	movs	r2, #1
 800e708:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	2201      	movs	r2, #1
 800e710:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	2201      	movs	r2, #1
 800e718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e71c:	2300      	movs	r3, #0
}
 800e71e:	4618      	mov	r0, r3
 800e720:	3708      	adds	r7, #8
 800e722:	46bd      	mov	sp, r7
 800e724:	bd80      	pop	{r7, pc}
	...

0800e728 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b084      	sub	sp, #16
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
 800e730:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e732:	683b      	ldr	r3, [r7, #0]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d109      	bne.n	800e74c <HAL_TIM_PWM_Start+0x24>
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e73e:	b2db      	uxtb	r3, r3
 800e740:	2b01      	cmp	r3, #1
 800e742:	bf14      	ite	ne
 800e744:	2301      	movne	r3, #1
 800e746:	2300      	moveq	r3, #0
 800e748:	b2db      	uxtb	r3, r3
 800e74a:	e03c      	b.n	800e7c6 <HAL_TIM_PWM_Start+0x9e>
 800e74c:	683b      	ldr	r3, [r7, #0]
 800e74e:	2b04      	cmp	r3, #4
 800e750:	d109      	bne.n	800e766 <HAL_TIM_PWM_Start+0x3e>
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800e758:	b2db      	uxtb	r3, r3
 800e75a:	2b01      	cmp	r3, #1
 800e75c:	bf14      	ite	ne
 800e75e:	2301      	movne	r3, #1
 800e760:	2300      	moveq	r3, #0
 800e762:	b2db      	uxtb	r3, r3
 800e764:	e02f      	b.n	800e7c6 <HAL_TIM_PWM_Start+0x9e>
 800e766:	683b      	ldr	r3, [r7, #0]
 800e768:	2b08      	cmp	r3, #8
 800e76a:	d109      	bne.n	800e780 <HAL_TIM_PWM_Start+0x58>
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e772:	b2db      	uxtb	r3, r3
 800e774:	2b01      	cmp	r3, #1
 800e776:	bf14      	ite	ne
 800e778:	2301      	movne	r3, #1
 800e77a:	2300      	moveq	r3, #0
 800e77c:	b2db      	uxtb	r3, r3
 800e77e:	e022      	b.n	800e7c6 <HAL_TIM_PWM_Start+0x9e>
 800e780:	683b      	ldr	r3, [r7, #0]
 800e782:	2b0c      	cmp	r3, #12
 800e784:	d109      	bne.n	800e79a <HAL_TIM_PWM_Start+0x72>
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e78c:	b2db      	uxtb	r3, r3
 800e78e:	2b01      	cmp	r3, #1
 800e790:	bf14      	ite	ne
 800e792:	2301      	movne	r3, #1
 800e794:	2300      	moveq	r3, #0
 800e796:	b2db      	uxtb	r3, r3
 800e798:	e015      	b.n	800e7c6 <HAL_TIM_PWM_Start+0x9e>
 800e79a:	683b      	ldr	r3, [r7, #0]
 800e79c:	2b10      	cmp	r3, #16
 800e79e:	d109      	bne.n	800e7b4 <HAL_TIM_PWM_Start+0x8c>
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e7a6:	b2db      	uxtb	r3, r3
 800e7a8:	2b01      	cmp	r3, #1
 800e7aa:	bf14      	ite	ne
 800e7ac:	2301      	movne	r3, #1
 800e7ae:	2300      	moveq	r3, #0
 800e7b0:	b2db      	uxtb	r3, r3
 800e7b2:	e008      	b.n	800e7c6 <HAL_TIM_PWM_Start+0x9e>
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e7ba:	b2db      	uxtb	r3, r3
 800e7bc:	2b01      	cmp	r3, #1
 800e7be:	bf14      	ite	ne
 800e7c0:	2301      	movne	r3, #1
 800e7c2:	2300      	moveq	r3, #0
 800e7c4:	b2db      	uxtb	r3, r3
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d001      	beq.n	800e7ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e7ca:	2301      	movs	r3, #1
 800e7cc:	e0a1      	b.n	800e912 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e7ce:	683b      	ldr	r3, [r7, #0]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d104      	bne.n	800e7de <HAL_TIM_PWM_Start+0xb6>
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	2202      	movs	r2, #2
 800e7d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e7dc:	e023      	b.n	800e826 <HAL_TIM_PWM_Start+0xfe>
 800e7de:	683b      	ldr	r3, [r7, #0]
 800e7e0:	2b04      	cmp	r3, #4
 800e7e2:	d104      	bne.n	800e7ee <HAL_TIM_PWM_Start+0xc6>
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2202      	movs	r2, #2
 800e7e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e7ec:	e01b      	b.n	800e826 <HAL_TIM_PWM_Start+0xfe>
 800e7ee:	683b      	ldr	r3, [r7, #0]
 800e7f0:	2b08      	cmp	r3, #8
 800e7f2:	d104      	bne.n	800e7fe <HAL_TIM_PWM_Start+0xd6>
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	2202      	movs	r2, #2
 800e7f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e7fc:	e013      	b.n	800e826 <HAL_TIM_PWM_Start+0xfe>
 800e7fe:	683b      	ldr	r3, [r7, #0]
 800e800:	2b0c      	cmp	r3, #12
 800e802:	d104      	bne.n	800e80e <HAL_TIM_PWM_Start+0xe6>
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	2202      	movs	r2, #2
 800e808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e80c:	e00b      	b.n	800e826 <HAL_TIM_PWM_Start+0xfe>
 800e80e:	683b      	ldr	r3, [r7, #0]
 800e810:	2b10      	cmp	r3, #16
 800e812:	d104      	bne.n	800e81e <HAL_TIM_PWM_Start+0xf6>
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	2202      	movs	r2, #2
 800e818:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e81c:	e003      	b.n	800e826 <HAL_TIM_PWM_Start+0xfe>
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	2202      	movs	r2, #2
 800e822:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	2201      	movs	r2, #1
 800e82c:	6839      	ldr	r1, [r7, #0]
 800e82e:	4618      	mov	r0, r3
 800e830:	f000 fe48 	bl	800f4c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	4a38      	ldr	r2, [pc, #224]	@ (800e91c <HAL_TIM_PWM_Start+0x1f4>)
 800e83a:	4293      	cmp	r3, r2
 800e83c:	d013      	beq.n	800e866 <HAL_TIM_PWM_Start+0x13e>
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	4a37      	ldr	r2, [pc, #220]	@ (800e920 <HAL_TIM_PWM_Start+0x1f8>)
 800e844:	4293      	cmp	r3, r2
 800e846:	d00e      	beq.n	800e866 <HAL_TIM_PWM_Start+0x13e>
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	4a35      	ldr	r2, [pc, #212]	@ (800e924 <HAL_TIM_PWM_Start+0x1fc>)
 800e84e:	4293      	cmp	r3, r2
 800e850:	d009      	beq.n	800e866 <HAL_TIM_PWM_Start+0x13e>
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	4a34      	ldr	r2, [pc, #208]	@ (800e928 <HAL_TIM_PWM_Start+0x200>)
 800e858:	4293      	cmp	r3, r2
 800e85a:	d004      	beq.n	800e866 <HAL_TIM_PWM_Start+0x13e>
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	4a32      	ldr	r2, [pc, #200]	@ (800e92c <HAL_TIM_PWM_Start+0x204>)
 800e862:	4293      	cmp	r3, r2
 800e864:	d101      	bne.n	800e86a <HAL_TIM_PWM_Start+0x142>
 800e866:	2301      	movs	r3, #1
 800e868:	e000      	b.n	800e86c <HAL_TIM_PWM_Start+0x144>
 800e86a:	2300      	movs	r3, #0
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d007      	beq.n	800e880 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e87e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	4a25      	ldr	r2, [pc, #148]	@ (800e91c <HAL_TIM_PWM_Start+0x1f4>)
 800e886:	4293      	cmp	r3, r2
 800e888:	d022      	beq.n	800e8d0 <HAL_TIM_PWM_Start+0x1a8>
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e892:	d01d      	beq.n	800e8d0 <HAL_TIM_PWM_Start+0x1a8>
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	4a25      	ldr	r2, [pc, #148]	@ (800e930 <HAL_TIM_PWM_Start+0x208>)
 800e89a:	4293      	cmp	r3, r2
 800e89c:	d018      	beq.n	800e8d0 <HAL_TIM_PWM_Start+0x1a8>
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	4a24      	ldr	r2, [pc, #144]	@ (800e934 <HAL_TIM_PWM_Start+0x20c>)
 800e8a4:	4293      	cmp	r3, r2
 800e8a6:	d013      	beq.n	800e8d0 <HAL_TIM_PWM_Start+0x1a8>
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	4a22      	ldr	r2, [pc, #136]	@ (800e938 <HAL_TIM_PWM_Start+0x210>)
 800e8ae:	4293      	cmp	r3, r2
 800e8b0:	d00e      	beq.n	800e8d0 <HAL_TIM_PWM_Start+0x1a8>
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	4a1a      	ldr	r2, [pc, #104]	@ (800e920 <HAL_TIM_PWM_Start+0x1f8>)
 800e8b8:	4293      	cmp	r3, r2
 800e8ba:	d009      	beq.n	800e8d0 <HAL_TIM_PWM_Start+0x1a8>
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	4a1e      	ldr	r2, [pc, #120]	@ (800e93c <HAL_TIM_PWM_Start+0x214>)
 800e8c2:	4293      	cmp	r3, r2
 800e8c4:	d004      	beq.n	800e8d0 <HAL_TIM_PWM_Start+0x1a8>
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	4a16      	ldr	r2, [pc, #88]	@ (800e924 <HAL_TIM_PWM_Start+0x1fc>)
 800e8cc:	4293      	cmp	r3, r2
 800e8ce:	d115      	bne.n	800e8fc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	689a      	ldr	r2, [r3, #8]
 800e8d6:	4b1a      	ldr	r3, [pc, #104]	@ (800e940 <HAL_TIM_PWM_Start+0x218>)
 800e8d8:	4013      	ands	r3, r2
 800e8da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	2b06      	cmp	r3, #6
 800e8e0:	d015      	beq.n	800e90e <HAL_TIM_PWM_Start+0x1e6>
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e8e8:	d011      	beq.n	800e90e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	681a      	ldr	r2, [r3, #0]
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	f042 0201 	orr.w	r2, r2, #1
 800e8f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e8fa:	e008      	b.n	800e90e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	681a      	ldr	r2, [r3, #0]
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	f042 0201 	orr.w	r2, r2, #1
 800e90a:	601a      	str	r2, [r3, #0]
 800e90c:	e000      	b.n	800e910 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e90e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e910:	2300      	movs	r3, #0
}
 800e912:	4618      	mov	r0, r3
 800e914:	3710      	adds	r7, #16
 800e916:	46bd      	mov	sp, r7
 800e918:	bd80      	pop	{r7, pc}
 800e91a:	bf00      	nop
 800e91c:	40010000 	.word	0x40010000
 800e920:	40010400 	.word	0x40010400
 800e924:	40014000 	.word	0x40014000
 800e928:	40014400 	.word	0x40014400
 800e92c:	40014800 	.word	0x40014800
 800e930:	40000400 	.word	0x40000400
 800e934:	40000800 	.word	0x40000800
 800e938:	40000c00 	.word	0x40000c00
 800e93c:	40001800 	.word	0x40001800
 800e940:	00010007 	.word	0x00010007

0800e944 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b084      	sub	sp, #16
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	68db      	ldr	r3, [r3, #12]
 800e952:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	691b      	ldr	r3, [r3, #16]
 800e95a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e95c:	68bb      	ldr	r3, [r7, #8]
 800e95e:	f003 0302 	and.w	r3, r3, #2
 800e962:	2b00      	cmp	r3, #0
 800e964:	d020      	beq.n	800e9a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	f003 0302 	and.w	r3, r3, #2
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d01b      	beq.n	800e9a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	f06f 0202 	mvn.w	r2, #2
 800e978:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	2201      	movs	r2, #1
 800e97e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	699b      	ldr	r3, [r3, #24]
 800e986:	f003 0303 	and.w	r3, r3, #3
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d003      	beq.n	800e996 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e98e:	6878      	ldr	r0, [r7, #4]
 800e990:	f000 f9fe 	bl	800ed90 <HAL_TIM_IC_CaptureCallback>
 800e994:	e005      	b.n	800e9a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e996:	6878      	ldr	r0, [r7, #4]
 800e998:	f000 f9f0 	bl	800ed7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e99c:	6878      	ldr	r0, [r7, #4]
 800e99e:	f000 fa01 	bl	800eda4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e9a8:	68bb      	ldr	r3, [r7, #8]
 800e9aa:	f003 0304 	and.w	r3, r3, #4
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d020      	beq.n	800e9f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	f003 0304 	and.w	r3, r3, #4
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d01b      	beq.n	800e9f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	f06f 0204 	mvn.w	r2, #4
 800e9c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	2202      	movs	r2, #2
 800e9ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	699b      	ldr	r3, [r3, #24]
 800e9d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d003      	beq.n	800e9e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e9da:	6878      	ldr	r0, [r7, #4]
 800e9dc:	f000 f9d8 	bl	800ed90 <HAL_TIM_IC_CaptureCallback>
 800e9e0:	e005      	b.n	800e9ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e9e2:	6878      	ldr	r0, [r7, #4]
 800e9e4:	f000 f9ca 	bl	800ed7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e9e8:	6878      	ldr	r0, [r7, #4]
 800e9ea:	f000 f9db 	bl	800eda4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e9f4:	68bb      	ldr	r3, [r7, #8]
 800e9f6:	f003 0308 	and.w	r3, r3, #8
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d020      	beq.n	800ea40 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	f003 0308 	and.w	r3, r3, #8
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d01b      	beq.n	800ea40 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	f06f 0208 	mvn.w	r2, #8
 800ea10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	2204      	movs	r2, #4
 800ea16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	69db      	ldr	r3, [r3, #28]
 800ea1e:	f003 0303 	and.w	r3, r3, #3
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d003      	beq.n	800ea2e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ea26:	6878      	ldr	r0, [r7, #4]
 800ea28:	f000 f9b2 	bl	800ed90 <HAL_TIM_IC_CaptureCallback>
 800ea2c:	e005      	b.n	800ea3a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ea2e:	6878      	ldr	r0, [r7, #4]
 800ea30:	f000 f9a4 	bl	800ed7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ea34:	6878      	ldr	r0, [r7, #4]
 800ea36:	f000 f9b5 	bl	800eda4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ea40:	68bb      	ldr	r3, [r7, #8]
 800ea42:	f003 0310 	and.w	r3, r3, #16
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d020      	beq.n	800ea8c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	f003 0310 	and.w	r3, r3, #16
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d01b      	beq.n	800ea8c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	f06f 0210 	mvn.w	r2, #16
 800ea5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	2208      	movs	r2, #8
 800ea62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	69db      	ldr	r3, [r3, #28]
 800ea6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d003      	beq.n	800ea7a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ea72:	6878      	ldr	r0, [r7, #4]
 800ea74:	f000 f98c 	bl	800ed90 <HAL_TIM_IC_CaptureCallback>
 800ea78:	e005      	b.n	800ea86 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ea7a:	6878      	ldr	r0, [r7, #4]
 800ea7c:	f000 f97e 	bl	800ed7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ea80:	6878      	ldr	r0, [r7, #4]
 800ea82:	f000 f98f 	bl	800eda4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	2200      	movs	r2, #0
 800ea8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ea8c:	68bb      	ldr	r3, [r7, #8]
 800ea8e:	f003 0301 	and.w	r3, r3, #1
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d00c      	beq.n	800eab0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	f003 0301 	and.w	r3, r3, #1
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d007      	beq.n	800eab0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	f06f 0201 	mvn.w	r2, #1
 800eaa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	f7f4 fb02 	bl	80030b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800eab0:	68bb      	ldr	r3, [r7, #8]
 800eab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d104      	bne.n	800eac4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800eaba:	68bb      	ldr	r3, [r7, #8]
 800eabc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d00c      	beq.n	800eade <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d007      	beq.n	800eade <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ead6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ead8:	6878      	ldr	r0, [r7, #4]
 800eada:	f000 fdb1 	bl	800f640 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800eade:	68bb      	ldr	r3, [r7, #8]
 800eae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d00c      	beq.n	800eb02 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d007      	beq.n	800eb02 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800eafa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800eafc:	6878      	ldr	r0, [r7, #4]
 800eafe:	f000 fda9 	bl	800f654 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800eb02:	68bb      	ldr	r3, [r7, #8]
 800eb04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d00c      	beq.n	800eb26 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d007      	beq.n	800eb26 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800eb1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800eb20:	6878      	ldr	r0, [r7, #4]
 800eb22:	f000 f949 	bl	800edb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800eb26:	68bb      	ldr	r3, [r7, #8]
 800eb28:	f003 0320 	and.w	r3, r3, #32
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d00c      	beq.n	800eb4a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	f003 0320 	and.w	r3, r3, #32
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d007      	beq.n	800eb4a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	f06f 0220 	mvn.w	r2, #32
 800eb42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800eb44:	6878      	ldr	r0, [r7, #4]
 800eb46:	f000 fd71 	bl	800f62c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800eb4a:	bf00      	nop
 800eb4c:	3710      	adds	r7, #16
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}
	...

0800eb54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b086      	sub	sp, #24
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	60f8      	str	r0, [r7, #12]
 800eb5c:	60b9      	str	r1, [r7, #8]
 800eb5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800eb60:	2300      	movs	r3, #0
 800eb62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800eb6a:	2b01      	cmp	r3, #1
 800eb6c:	d101      	bne.n	800eb72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800eb6e:	2302      	movs	r3, #2
 800eb70:	e0ff      	b.n	800ed72 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	2201      	movs	r2, #1
 800eb76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	2b14      	cmp	r3, #20
 800eb7e:	f200 80f0 	bhi.w	800ed62 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800eb82:	a201      	add	r2, pc, #4	@ (adr r2, 800eb88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800eb84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb88:	0800ebdd 	.word	0x0800ebdd
 800eb8c:	0800ed63 	.word	0x0800ed63
 800eb90:	0800ed63 	.word	0x0800ed63
 800eb94:	0800ed63 	.word	0x0800ed63
 800eb98:	0800ec1d 	.word	0x0800ec1d
 800eb9c:	0800ed63 	.word	0x0800ed63
 800eba0:	0800ed63 	.word	0x0800ed63
 800eba4:	0800ed63 	.word	0x0800ed63
 800eba8:	0800ec5f 	.word	0x0800ec5f
 800ebac:	0800ed63 	.word	0x0800ed63
 800ebb0:	0800ed63 	.word	0x0800ed63
 800ebb4:	0800ed63 	.word	0x0800ed63
 800ebb8:	0800ec9f 	.word	0x0800ec9f
 800ebbc:	0800ed63 	.word	0x0800ed63
 800ebc0:	0800ed63 	.word	0x0800ed63
 800ebc4:	0800ed63 	.word	0x0800ed63
 800ebc8:	0800ece1 	.word	0x0800ece1
 800ebcc:	0800ed63 	.word	0x0800ed63
 800ebd0:	0800ed63 	.word	0x0800ed63
 800ebd4:	0800ed63 	.word	0x0800ed63
 800ebd8:	0800ed21 	.word	0x0800ed21
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	68b9      	ldr	r1, [r7, #8]
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	f000 f998 	bl	800ef18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	699a      	ldr	r2, [r3, #24]
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	f042 0208 	orr.w	r2, r2, #8
 800ebf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	699a      	ldr	r2, [r3, #24]
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	f022 0204 	bic.w	r2, r2, #4
 800ec06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	6999      	ldr	r1, [r3, #24]
 800ec0e:	68bb      	ldr	r3, [r7, #8]
 800ec10:	691a      	ldr	r2, [r3, #16]
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	430a      	orrs	r2, r1
 800ec18:	619a      	str	r2, [r3, #24]
      break;
 800ec1a:	e0a5      	b.n	800ed68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	68b9      	ldr	r1, [r7, #8]
 800ec22:	4618      	mov	r0, r3
 800ec24:	f000 fa08 	bl	800f038 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	699a      	ldr	r2, [r3, #24]
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ec36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	699a      	ldr	r2, [r3, #24]
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ec46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	6999      	ldr	r1, [r3, #24]
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	691b      	ldr	r3, [r3, #16]
 800ec52:	021a      	lsls	r2, r3, #8
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	430a      	orrs	r2, r1
 800ec5a:	619a      	str	r2, [r3, #24]
      break;
 800ec5c:	e084      	b.n	800ed68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	68b9      	ldr	r1, [r7, #8]
 800ec64:	4618      	mov	r0, r3
 800ec66:	f000 fa71 	bl	800f14c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	69da      	ldr	r2, [r3, #28]
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	f042 0208 	orr.w	r2, r2, #8
 800ec78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	69da      	ldr	r2, [r3, #28]
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	f022 0204 	bic.w	r2, r2, #4
 800ec88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	69d9      	ldr	r1, [r3, #28]
 800ec90:	68bb      	ldr	r3, [r7, #8]
 800ec92:	691a      	ldr	r2, [r3, #16]
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	430a      	orrs	r2, r1
 800ec9a:	61da      	str	r2, [r3, #28]
      break;
 800ec9c:	e064      	b.n	800ed68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	68b9      	ldr	r1, [r7, #8]
 800eca4:	4618      	mov	r0, r3
 800eca6:	f000 fad9 	bl	800f25c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	69da      	ldr	r2, [r3, #28]
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ecb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	69da      	ldr	r2, [r3, #28]
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ecc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	69d9      	ldr	r1, [r3, #28]
 800ecd0:	68bb      	ldr	r3, [r7, #8]
 800ecd2:	691b      	ldr	r3, [r3, #16]
 800ecd4:	021a      	lsls	r2, r3, #8
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	430a      	orrs	r2, r1
 800ecdc:	61da      	str	r2, [r3, #28]
      break;
 800ecde:	e043      	b.n	800ed68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	68b9      	ldr	r1, [r7, #8]
 800ece6:	4618      	mov	r0, r3
 800ece8:	f000 fb22 	bl	800f330 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	f042 0208 	orr.w	r2, r2, #8
 800ecfa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	f022 0204 	bic.w	r2, r2, #4
 800ed0a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ed12:	68bb      	ldr	r3, [r7, #8]
 800ed14:	691a      	ldr	r2, [r3, #16]
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	430a      	orrs	r2, r1
 800ed1c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ed1e:	e023      	b.n	800ed68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	68b9      	ldr	r1, [r7, #8]
 800ed26:	4618      	mov	r0, r3
 800ed28:	f000 fb66 	bl	800f3f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ed3a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ed4a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ed52:	68bb      	ldr	r3, [r7, #8]
 800ed54:	691b      	ldr	r3, [r3, #16]
 800ed56:	021a      	lsls	r2, r3, #8
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	430a      	orrs	r2, r1
 800ed5e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ed60:	e002      	b.n	800ed68 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ed62:	2301      	movs	r3, #1
 800ed64:	75fb      	strb	r3, [r7, #23]
      break;
 800ed66:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ed70:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed72:	4618      	mov	r0, r3
 800ed74:	3718      	adds	r7, #24
 800ed76:	46bd      	mov	sp, r7
 800ed78:	bd80      	pop	{r7, pc}
 800ed7a:	bf00      	nop

0800ed7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ed7c:	b480      	push	{r7}
 800ed7e:	b083      	sub	sp, #12
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ed84:	bf00      	nop
 800ed86:	370c      	adds	r7, #12
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8e:	4770      	bx	lr

0800ed90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ed90:	b480      	push	{r7}
 800ed92:	b083      	sub	sp, #12
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ed98:	bf00      	nop
 800ed9a:	370c      	adds	r7, #12
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda2:	4770      	bx	lr

0800eda4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800eda4:	b480      	push	{r7}
 800eda6:	b083      	sub	sp, #12
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800edac:	bf00      	nop
 800edae:	370c      	adds	r7, #12
 800edb0:	46bd      	mov	sp, r7
 800edb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb6:	4770      	bx	lr

0800edb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800edb8:	b480      	push	{r7}
 800edba:	b083      	sub	sp, #12
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800edc0:	bf00      	nop
 800edc2:	370c      	adds	r7, #12
 800edc4:	46bd      	mov	sp, r7
 800edc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edca:	4770      	bx	lr

0800edcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800edcc:	b480      	push	{r7}
 800edce:	b085      	sub	sp, #20
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
 800edd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	4a46      	ldr	r2, [pc, #280]	@ (800eef8 <TIM_Base_SetConfig+0x12c>)
 800ede0:	4293      	cmp	r3, r2
 800ede2:	d013      	beq.n	800ee0c <TIM_Base_SetConfig+0x40>
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800edea:	d00f      	beq.n	800ee0c <TIM_Base_SetConfig+0x40>
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	4a43      	ldr	r2, [pc, #268]	@ (800eefc <TIM_Base_SetConfig+0x130>)
 800edf0:	4293      	cmp	r3, r2
 800edf2:	d00b      	beq.n	800ee0c <TIM_Base_SetConfig+0x40>
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	4a42      	ldr	r2, [pc, #264]	@ (800ef00 <TIM_Base_SetConfig+0x134>)
 800edf8:	4293      	cmp	r3, r2
 800edfa:	d007      	beq.n	800ee0c <TIM_Base_SetConfig+0x40>
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	4a41      	ldr	r2, [pc, #260]	@ (800ef04 <TIM_Base_SetConfig+0x138>)
 800ee00:	4293      	cmp	r3, r2
 800ee02:	d003      	beq.n	800ee0c <TIM_Base_SetConfig+0x40>
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	4a40      	ldr	r2, [pc, #256]	@ (800ef08 <TIM_Base_SetConfig+0x13c>)
 800ee08:	4293      	cmp	r3, r2
 800ee0a:	d108      	bne.n	800ee1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ee12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ee14:	683b      	ldr	r3, [r7, #0]
 800ee16:	685b      	ldr	r3, [r3, #4]
 800ee18:	68fa      	ldr	r2, [r7, #12]
 800ee1a:	4313      	orrs	r3, r2
 800ee1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	4a35      	ldr	r2, [pc, #212]	@ (800eef8 <TIM_Base_SetConfig+0x12c>)
 800ee22:	4293      	cmp	r3, r2
 800ee24:	d01f      	beq.n	800ee66 <TIM_Base_SetConfig+0x9a>
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ee2c:	d01b      	beq.n	800ee66 <TIM_Base_SetConfig+0x9a>
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	4a32      	ldr	r2, [pc, #200]	@ (800eefc <TIM_Base_SetConfig+0x130>)
 800ee32:	4293      	cmp	r3, r2
 800ee34:	d017      	beq.n	800ee66 <TIM_Base_SetConfig+0x9a>
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	4a31      	ldr	r2, [pc, #196]	@ (800ef00 <TIM_Base_SetConfig+0x134>)
 800ee3a:	4293      	cmp	r3, r2
 800ee3c:	d013      	beq.n	800ee66 <TIM_Base_SetConfig+0x9a>
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	4a30      	ldr	r2, [pc, #192]	@ (800ef04 <TIM_Base_SetConfig+0x138>)
 800ee42:	4293      	cmp	r3, r2
 800ee44:	d00f      	beq.n	800ee66 <TIM_Base_SetConfig+0x9a>
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	4a2f      	ldr	r2, [pc, #188]	@ (800ef08 <TIM_Base_SetConfig+0x13c>)
 800ee4a:	4293      	cmp	r3, r2
 800ee4c:	d00b      	beq.n	800ee66 <TIM_Base_SetConfig+0x9a>
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	4a2e      	ldr	r2, [pc, #184]	@ (800ef0c <TIM_Base_SetConfig+0x140>)
 800ee52:	4293      	cmp	r3, r2
 800ee54:	d007      	beq.n	800ee66 <TIM_Base_SetConfig+0x9a>
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	4a2d      	ldr	r2, [pc, #180]	@ (800ef10 <TIM_Base_SetConfig+0x144>)
 800ee5a:	4293      	cmp	r3, r2
 800ee5c:	d003      	beq.n	800ee66 <TIM_Base_SetConfig+0x9a>
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	4a2c      	ldr	r2, [pc, #176]	@ (800ef14 <TIM_Base_SetConfig+0x148>)
 800ee62:	4293      	cmp	r3, r2
 800ee64:	d108      	bne.n	800ee78 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ee6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ee6e:	683b      	ldr	r3, [r7, #0]
 800ee70:	68db      	ldr	r3, [r3, #12]
 800ee72:	68fa      	ldr	r2, [r7, #12]
 800ee74:	4313      	orrs	r3, r2
 800ee76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ee7e:	683b      	ldr	r3, [r7, #0]
 800ee80:	695b      	ldr	r3, [r3, #20]
 800ee82:	4313      	orrs	r3, r2
 800ee84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	68fa      	ldr	r2, [r7, #12]
 800ee8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ee8c:	683b      	ldr	r3, [r7, #0]
 800ee8e:	689a      	ldr	r2, [r3, #8]
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ee94:	683b      	ldr	r3, [r7, #0]
 800ee96:	681a      	ldr	r2, [r3, #0]
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	4a16      	ldr	r2, [pc, #88]	@ (800eef8 <TIM_Base_SetConfig+0x12c>)
 800eea0:	4293      	cmp	r3, r2
 800eea2:	d00f      	beq.n	800eec4 <TIM_Base_SetConfig+0xf8>
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	4a18      	ldr	r2, [pc, #96]	@ (800ef08 <TIM_Base_SetConfig+0x13c>)
 800eea8:	4293      	cmp	r3, r2
 800eeaa:	d00b      	beq.n	800eec4 <TIM_Base_SetConfig+0xf8>
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	4a17      	ldr	r2, [pc, #92]	@ (800ef0c <TIM_Base_SetConfig+0x140>)
 800eeb0:	4293      	cmp	r3, r2
 800eeb2:	d007      	beq.n	800eec4 <TIM_Base_SetConfig+0xf8>
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	4a16      	ldr	r2, [pc, #88]	@ (800ef10 <TIM_Base_SetConfig+0x144>)
 800eeb8:	4293      	cmp	r3, r2
 800eeba:	d003      	beq.n	800eec4 <TIM_Base_SetConfig+0xf8>
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	4a15      	ldr	r2, [pc, #84]	@ (800ef14 <TIM_Base_SetConfig+0x148>)
 800eec0:	4293      	cmp	r3, r2
 800eec2:	d103      	bne.n	800eecc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800eec4:	683b      	ldr	r3, [r7, #0]
 800eec6:	691a      	ldr	r2, [r3, #16]
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	2201      	movs	r2, #1
 800eed0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	691b      	ldr	r3, [r3, #16]
 800eed6:	f003 0301 	and.w	r3, r3, #1
 800eeda:	2b01      	cmp	r3, #1
 800eedc:	d105      	bne.n	800eeea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	691b      	ldr	r3, [r3, #16]
 800eee2:	f023 0201 	bic.w	r2, r3, #1
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	611a      	str	r2, [r3, #16]
  }
}
 800eeea:	bf00      	nop
 800eeec:	3714      	adds	r7, #20
 800eeee:	46bd      	mov	sp, r7
 800eef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef4:	4770      	bx	lr
 800eef6:	bf00      	nop
 800eef8:	40010000 	.word	0x40010000
 800eefc:	40000400 	.word	0x40000400
 800ef00:	40000800 	.word	0x40000800
 800ef04:	40000c00 	.word	0x40000c00
 800ef08:	40010400 	.word	0x40010400
 800ef0c:	40014000 	.word	0x40014000
 800ef10:	40014400 	.word	0x40014400
 800ef14:	40014800 	.word	0x40014800

0800ef18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ef18:	b480      	push	{r7}
 800ef1a:	b087      	sub	sp, #28
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
 800ef20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	6a1b      	ldr	r3, [r3, #32]
 800ef26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	6a1b      	ldr	r3, [r3, #32]
 800ef2c:	f023 0201 	bic.w	r2, r3, #1
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	685b      	ldr	r3, [r3, #4]
 800ef38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	699b      	ldr	r3, [r3, #24]
 800ef3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ef40:	68fa      	ldr	r2, [r7, #12]
 800ef42:	4b37      	ldr	r3, [pc, #220]	@ (800f020 <TIM_OC1_SetConfig+0x108>)
 800ef44:	4013      	ands	r3, r2
 800ef46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	f023 0303 	bic.w	r3, r3, #3
 800ef4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ef50:	683b      	ldr	r3, [r7, #0]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	68fa      	ldr	r2, [r7, #12]
 800ef56:	4313      	orrs	r3, r2
 800ef58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ef5a:	697b      	ldr	r3, [r7, #20]
 800ef5c:	f023 0302 	bic.w	r3, r3, #2
 800ef60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ef62:	683b      	ldr	r3, [r7, #0]
 800ef64:	689b      	ldr	r3, [r3, #8]
 800ef66:	697a      	ldr	r2, [r7, #20]
 800ef68:	4313      	orrs	r3, r2
 800ef6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	4a2d      	ldr	r2, [pc, #180]	@ (800f024 <TIM_OC1_SetConfig+0x10c>)
 800ef70:	4293      	cmp	r3, r2
 800ef72:	d00f      	beq.n	800ef94 <TIM_OC1_SetConfig+0x7c>
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	4a2c      	ldr	r2, [pc, #176]	@ (800f028 <TIM_OC1_SetConfig+0x110>)
 800ef78:	4293      	cmp	r3, r2
 800ef7a:	d00b      	beq.n	800ef94 <TIM_OC1_SetConfig+0x7c>
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	4a2b      	ldr	r2, [pc, #172]	@ (800f02c <TIM_OC1_SetConfig+0x114>)
 800ef80:	4293      	cmp	r3, r2
 800ef82:	d007      	beq.n	800ef94 <TIM_OC1_SetConfig+0x7c>
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	4a2a      	ldr	r2, [pc, #168]	@ (800f030 <TIM_OC1_SetConfig+0x118>)
 800ef88:	4293      	cmp	r3, r2
 800ef8a:	d003      	beq.n	800ef94 <TIM_OC1_SetConfig+0x7c>
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	4a29      	ldr	r2, [pc, #164]	@ (800f034 <TIM_OC1_SetConfig+0x11c>)
 800ef90:	4293      	cmp	r3, r2
 800ef92:	d10c      	bne.n	800efae <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ef94:	697b      	ldr	r3, [r7, #20]
 800ef96:	f023 0308 	bic.w	r3, r3, #8
 800ef9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ef9c:	683b      	ldr	r3, [r7, #0]
 800ef9e:	68db      	ldr	r3, [r3, #12]
 800efa0:	697a      	ldr	r2, [r7, #20]
 800efa2:	4313      	orrs	r3, r2
 800efa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800efa6:	697b      	ldr	r3, [r7, #20]
 800efa8:	f023 0304 	bic.w	r3, r3, #4
 800efac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	4a1c      	ldr	r2, [pc, #112]	@ (800f024 <TIM_OC1_SetConfig+0x10c>)
 800efb2:	4293      	cmp	r3, r2
 800efb4:	d00f      	beq.n	800efd6 <TIM_OC1_SetConfig+0xbe>
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	4a1b      	ldr	r2, [pc, #108]	@ (800f028 <TIM_OC1_SetConfig+0x110>)
 800efba:	4293      	cmp	r3, r2
 800efbc:	d00b      	beq.n	800efd6 <TIM_OC1_SetConfig+0xbe>
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	4a1a      	ldr	r2, [pc, #104]	@ (800f02c <TIM_OC1_SetConfig+0x114>)
 800efc2:	4293      	cmp	r3, r2
 800efc4:	d007      	beq.n	800efd6 <TIM_OC1_SetConfig+0xbe>
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	4a19      	ldr	r2, [pc, #100]	@ (800f030 <TIM_OC1_SetConfig+0x118>)
 800efca:	4293      	cmp	r3, r2
 800efcc:	d003      	beq.n	800efd6 <TIM_OC1_SetConfig+0xbe>
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	4a18      	ldr	r2, [pc, #96]	@ (800f034 <TIM_OC1_SetConfig+0x11c>)
 800efd2:	4293      	cmp	r3, r2
 800efd4:	d111      	bne.n	800effa <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800efd6:	693b      	ldr	r3, [r7, #16]
 800efd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800efdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800efde:	693b      	ldr	r3, [r7, #16]
 800efe0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800efe4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800efe6:	683b      	ldr	r3, [r7, #0]
 800efe8:	695b      	ldr	r3, [r3, #20]
 800efea:	693a      	ldr	r2, [r7, #16]
 800efec:	4313      	orrs	r3, r2
 800efee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	699b      	ldr	r3, [r3, #24]
 800eff4:	693a      	ldr	r2, [r7, #16]
 800eff6:	4313      	orrs	r3, r2
 800eff8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	693a      	ldr	r2, [r7, #16]
 800effe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	68fa      	ldr	r2, [r7, #12]
 800f004:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f006:	683b      	ldr	r3, [r7, #0]
 800f008:	685a      	ldr	r2, [r3, #4]
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	697a      	ldr	r2, [r7, #20]
 800f012:	621a      	str	r2, [r3, #32]
}
 800f014:	bf00      	nop
 800f016:	371c      	adds	r7, #28
 800f018:	46bd      	mov	sp, r7
 800f01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01e:	4770      	bx	lr
 800f020:	fffeff8f 	.word	0xfffeff8f
 800f024:	40010000 	.word	0x40010000
 800f028:	40010400 	.word	0x40010400
 800f02c:	40014000 	.word	0x40014000
 800f030:	40014400 	.word	0x40014400
 800f034:	40014800 	.word	0x40014800

0800f038 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f038:	b480      	push	{r7}
 800f03a:	b087      	sub	sp, #28
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
 800f040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	6a1b      	ldr	r3, [r3, #32]
 800f046:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	6a1b      	ldr	r3, [r3, #32]
 800f04c:	f023 0210 	bic.w	r2, r3, #16
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	685b      	ldr	r3, [r3, #4]
 800f058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	699b      	ldr	r3, [r3, #24]
 800f05e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f060:	68fa      	ldr	r2, [r7, #12]
 800f062:	4b34      	ldr	r3, [pc, #208]	@ (800f134 <TIM_OC2_SetConfig+0xfc>)
 800f064:	4013      	ands	r3, r2
 800f066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f06e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f070:	683b      	ldr	r3, [r7, #0]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	021b      	lsls	r3, r3, #8
 800f076:	68fa      	ldr	r2, [r7, #12]
 800f078:	4313      	orrs	r3, r2
 800f07a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f07c:	697b      	ldr	r3, [r7, #20]
 800f07e:	f023 0320 	bic.w	r3, r3, #32
 800f082:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f084:	683b      	ldr	r3, [r7, #0]
 800f086:	689b      	ldr	r3, [r3, #8]
 800f088:	011b      	lsls	r3, r3, #4
 800f08a:	697a      	ldr	r2, [r7, #20]
 800f08c:	4313      	orrs	r3, r2
 800f08e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	4a29      	ldr	r2, [pc, #164]	@ (800f138 <TIM_OC2_SetConfig+0x100>)
 800f094:	4293      	cmp	r3, r2
 800f096:	d003      	beq.n	800f0a0 <TIM_OC2_SetConfig+0x68>
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	4a28      	ldr	r2, [pc, #160]	@ (800f13c <TIM_OC2_SetConfig+0x104>)
 800f09c:	4293      	cmp	r3, r2
 800f09e:	d10d      	bne.n	800f0bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f0a0:	697b      	ldr	r3, [r7, #20]
 800f0a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f0a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f0a8:	683b      	ldr	r3, [r7, #0]
 800f0aa:	68db      	ldr	r3, [r3, #12]
 800f0ac:	011b      	lsls	r3, r3, #4
 800f0ae:	697a      	ldr	r2, [r7, #20]
 800f0b0:	4313      	orrs	r3, r2
 800f0b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f0b4:	697b      	ldr	r3, [r7, #20]
 800f0b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f0ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	4a1e      	ldr	r2, [pc, #120]	@ (800f138 <TIM_OC2_SetConfig+0x100>)
 800f0c0:	4293      	cmp	r3, r2
 800f0c2:	d00f      	beq.n	800f0e4 <TIM_OC2_SetConfig+0xac>
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	4a1d      	ldr	r2, [pc, #116]	@ (800f13c <TIM_OC2_SetConfig+0x104>)
 800f0c8:	4293      	cmp	r3, r2
 800f0ca:	d00b      	beq.n	800f0e4 <TIM_OC2_SetConfig+0xac>
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	4a1c      	ldr	r2, [pc, #112]	@ (800f140 <TIM_OC2_SetConfig+0x108>)
 800f0d0:	4293      	cmp	r3, r2
 800f0d2:	d007      	beq.n	800f0e4 <TIM_OC2_SetConfig+0xac>
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	4a1b      	ldr	r2, [pc, #108]	@ (800f144 <TIM_OC2_SetConfig+0x10c>)
 800f0d8:	4293      	cmp	r3, r2
 800f0da:	d003      	beq.n	800f0e4 <TIM_OC2_SetConfig+0xac>
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	4a1a      	ldr	r2, [pc, #104]	@ (800f148 <TIM_OC2_SetConfig+0x110>)
 800f0e0:	4293      	cmp	r3, r2
 800f0e2:	d113      	bne.n	800f10c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f0e4:	693b      	ldr	r3, [r7, #16]
 800f0e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f0ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f0ec:	693b      	ldr	r3, [r7, #16]
 800f0ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f0f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f0f4:	683b      	ldr	r3, [r7, #0]
 800f0f6:	695b      	ldr	r3, [r3, #20]
 800f0f8:	009b      	lsls	r3, r3, #2
 800f0fa:	693a      	ldr	r2, [r7, #16]
 800f0fc:	4313      	orrs	r3, r2
 800f0fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	699b      	ldr	r3, [r3, #24]
 800f104:	009b      	lsls	r3, r3, #2
 800f106:	693a      	ldr	r2, [r7, #16]
 800f108:	4313      	orrs	r3, r2
 800f10a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	693a      	ldr	r2, [r7, #16]
 800f110:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	68fa      	ldr	r2, [r7, #12]
 800f116:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	685a      	ldr	r2, [r3, #4]
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	697a      	ldr	r2, [r7, #20]
 800f124:	621a      	str	r2, [r3, #32]
}
 800f126:	bf00      	nop
 800f128:	371c      	adds	r7, #28
 800f12a:	46bd      	mov	sp, r7
 800f12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f130:	4770      	bx	lr
 800f132:	bf00      	nop
 800f134:	feff8fff 	.word	0xfeff8fff
 800f138:	40010000 	.word	0x40010000
 800f13c:	40010400 	.word	0x40010400
 800f140:	40014000 	.word	0x40014000
 800f144:	40014400 	.word	0x40014400
 800f148:	40014800 	.word	0x40014800

0800f14c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f14c:	b480      	push	{r7}
 800f14e:	b087      	sub	sp, #28
 800f150:	af00      	add	r7, sp, #0
 800f152:	6078      	str	r0, [r7, #4]
 800f154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	6a1b      	ldr	r3, [r3, #32]
 800f15a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	6a1b      	ldr	r3, [r3, #32]
 800f160:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	685b      	ldr	r3, [r3, #4]
 800f16c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	69db      	ldr	r3, [r3, #28]
 800f172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f174:	68fa      	ldr	r2, [r7, #12]
 800f176:	4b33      	ldr	r3, [pc, #204]	@ (800f244 <TIM_OC3_SetConfig+0xf8>)
 800f178:	4013      	ands	r3, r2
 800f17a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	f023 0303 	bic.w	r3, r3, #3
 800f182:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f184:	683b      	ldr	r3, [r7, #0]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	68fa      	ldr	r2, [r7, #12]
 800f18a:	4313      	orrs	r3, r2
 800f18c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f18e:	697b      	ldr	r3, [r7, #20]
 800f190:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f194:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f196:	683b      	ldr	r3, [r7, #0]
 800f198:	689b      	ldr	r3, [r3, #8]
 800f19a:	021b      	lsls	r3, r3, #8
 800f19c:	697a      	ldr	r2, [r7, #20]
 800f19e:	4313      	orrs	r3, r2
 800f1a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	4a28      	ldr	r2, [pc, #160]	@ (800f248 <TIM_OC3_SetConfig+0xfc>)
 800f1a6:	4293      	cmp	r3, r2
 800f1a8:	d003      	beq.n	800f1b2 <TIM_OC3_SetConfig+0x66>
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	4a27      	ldr	r2, [pc, #156]	@ (800f24c <TIM_OC3_SetConfig+0x100>)
 800f1ae:	4293      	cmp	r3, r2
 800f1b0:	d10d      	bne.n	800f1ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f1b2:	697b      	ldr	r3, [r7, #20]
 800f1b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f1b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f1ba:	683b      	ldr	r3, [r7, #0]
 800f1bc:	68db      	ldr	r3, [r3, #12]
 800f1be:	021b      	lsls	r3, r3, #8
 800f1c0:	697a      	ldr	r2, [r7, #20]
 800f1c2:	4313      	orrs	r3, r2
 800f1c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f1c6:	697b      	ldr	r3, [r7, #20]
 800f1c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f1cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	4a1d      	ldr	r2, [pc, #116]	@ (800f248 <TIM_OC3_SetConfig+0xfc>)
 800f1d2:	4293      	cmp	r3, r2
 800f1d4:	d00f      	beq.n	800f1f6 <TIM_OC3_SetConfig+0xaa>
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	4a1c      	ldr	r2, [pc, #112]	@ (800f24c <TIM_OC3_SetConfig+0x100>)
 800f1da:	4293      	cmp	r3, r2
 800f1dc:	d00b      	beq.n	800f1f6 <TIM_OC3_SetConfig+0xaa>
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	4a1b      	ldr	r2, [pc, #108]	@ (800f250 <TIM_OC3_SetConfig+0x104>)
 800f1e2:	4293      	cmp	r3, r2
 800f1e4:	d007      	beq.n	800f1f6 <TIM_OC3_SetConfig+0xaa>
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	4a1a      	ldr	r2, [pc, #104]	@ (800f254 <TIM_OC3_SetConfig+0x108>)
 800f1ea:	4293      	cmp	r3, r2
 800f1ec:	d003      	beq.n	800f1f6 <TIM_OC3_SetConfig+0xaa>
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	4a19      	ldr	r2, [pc, #100]	@ (800f258 <TIM_OC3_SetConfig+0x10c>)
 800f1f2:	4293      	cmp	r3, r2
 800f1f4:	d113      	bne.n	800f21e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f1f6:	693b      	ldr	r3, [r7, #16]
 800f1f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f1fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f1fe:	693b      	ldr	r3, [r7, #16]
 800f200:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f204:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	695b      	ldr	r3, [r3, #20]
 800f20a:	011b      	lsls	r3, r3, #4
 800f20c:	693a      	ldr	r2, [r7, #16]
 800f20e:	4313      	orrs	r3, r2
 800f210:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	699b      	ldr	r3, [r3, #24]
 800f216:	011b      	lsls	r3, r3, #4
 800f218:	693a      	ldr	r2, [r7, #16]
 800f21a:	4313      	orrs	r3, r2
 800f21c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	693a      	ldr	r2, [r7, #16]
 800f222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	68fa      	ldr	r2, [r7, #12]
 800f228:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f22a:	683b      	ldr	r3, [r7, #0]
 800f22c:	685a      	ldr	r2, [r3, #4]
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	697a      	ldr	r2, [r7, #20]
 800f236:	621a      	str	r2, [r3, #32]
}
 800f238:	bf00      	nop
 800f23a:	371c      	adds	r7, #28
 800f23c:	46bd      	mov	sp, r7
 800f23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f242:	4770      	bx	lr
 800f244:	fffeff8f 	.word	0xfffeff8f
 800f248:	40010000 	.word	0x40010000
 800f24c:	40010400 	.word	0x40010400
 800f250:	40014000 	.word	0x40014000
 800f254:	40014400 	.word	0x40014400
 800f258:	40014800 	.word	0x40014800

0800f25c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f25c:	b480      	push	{r7}
 800f25e:	b087      	sub	sp, #28
 800f260:	af00      	add	r7, sp, #0
 800f262:	6078      	str	r0, [r7, #4]
 800f264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	6a1b      	ldr	r3, [r3, #32]
 800f26a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	6a1b      	ldr	r3, [r3, #32]
 800f270:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	685b      	ldr	r3, [r3, #4]
 800f27c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	69db      	ldr	r3, [r3, #28]
 800f282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f284:	68fa      	ldr	r2, [r7, #12]
 800f286:	4b24      	ldr	r3, [pc, #144]	@ (800f318 <TIM_OC4_SetConfig+0xbc>)
 800f288:	4013      	ands	r3, r2
 800f28a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f292:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f294:	683b      	ldr	r3, [r7, #0]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	021b      	lsls	r3, r3, #8
 800f29a:	68fa      	ldr	r2, [r7, #12]
 800f29c:	4313      	orrs	r3, r2
 800f29e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f2a0:	693b      	ldr	r3, [r7, #16]
 800f2a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f2a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	689b      	ldr	r3, [r3, #8]
 800f2ac:	031b      	lsls	r3, r3, #12
 800f2ae:	693a      	ldr	r2, [r7, #16]
 800f2b0:	4313      	orrs	r3, r2
 800f2b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	4a19      	ldr	r2, [pc, #100]	@ (800f31c <TIM_OC4_SetConfig+0xc0>)
 800f2b8:	4293      	cmp	r3, r2
 800f2ba:	d00f      	beq.n	800f2dc <TIM_OC4_SetConfig+0x80>
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	4a18      	ldr	r2, [pc, #96]	@ (800f320 <TIM_OC4_SetConfig+0xc4>)
 800f2c0:	4293      	cmp	r3, r2
 800f2c2:	d00b      	beq.n	800f2dc <TIM_OC4_SetConfig+0x80>
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	4a17      	ldr	r2, [pc, #92]	@ (800f324 <TIM_OC4_SetConfig+0xc8>)
 800f2c8:	4293      	cmp	r3, r2
 800f2ca:	d007      	beq.n	800f2dc <TIM_OC4_SetConfig+0x80>
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	4a16      	ldr	r2, [pc, #88]	@ (800f328 <TIM_OC4_SetConfig+0xcc>)
 800f2d0:	4293      	cmp	r3, r2
 800f2d2:	d003      	beq.n	800f2dc <TIM_OC4_SetConfig+0x80>
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	4a15      	ldr	r2, [pc, #84]	@ (800f32c <TIM_OC4_SetConfig+0xd0>)
 800f2d8:	4293      	cmp	r3, r2
 800f2da:	d109      	bne.n	800f2f0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f2dc:	697b      	ldr	r3, [r7, #20]
 800f2de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f2e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	695b      	ldr	r3, [r3, #20]
 800f2e8:	019b      	lsls	r3, r3, #6
 800f2ea:	697a      	ldr	r2, [r7, #20]
 800f2ec:	4313      	orrs	r3, r2
 800f2ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	697a      	ldr	r2, [r7, #20]
 800f2f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	68fa      	ldr	r2, [r7, #12]
 800f2fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	685a      	ldr	r2, [r3, #4]
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	693a      	ldr	r2, [r7, #16]
 800f308:	621a      	str	r2, [r3, #32]
}
 800f30a:	bf00      	nop
 800f30c:	371c      	adds	r7, #28
 800f30e:	46bd      	mov	sp, r7
 800f310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f314:	4770      	bx	lr
 800f316:	bf00      	nop
 800f318:	feff8fff 	.word	0xfeff8fff
 800f31c:	40010000 	.word	0x40010000
 800f320:	40010400 	.word	0x40010400
 800f324:	40014000 	.word	0x40014000
 800f328:	40014400 	.word	0x40014400
 800f32c:	40014800 	.word	0x40014800

0800f330 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f330:	b480      	push	{r7}
 800f332:	b087      	sub	sp, #28
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
 800f338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	6a1b      	ldr	r3, [r3, #32]
 800f33e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	6a1b      	ldr	r3, [r3, #32]
 800f344:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	685b      	ldr	r3, [r3, #4]
 800f350:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f358:	68fa      	ldr	r2, [r7, #12]
 800f35a:	4b21      	ldr	r3, [pc, #132]	@ (800f3e0 <TIM_OC5_SetConfig+0xb0>)
 800f35c:	4013      	ands	r3, r2
 800f35e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f360:	683b      	ldr	r3, [r7, #0]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	68fa      	ldr	r2, [r7, #12]
 800f366:	4313      	orrs	r3, r2
 800f368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f36a:	693b      	ldr	r3, [r7, #16]
 800f36c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800f370:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	689b      	ldr	r3, [r3, #8]
 800f376:	041b      	lsls	r3, r3, #16
 800f378:	693a      	ldr	r2, [r7, #16]
 800f37a:	4313      	orrs	r3, r2
 800f37c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	4a18      	ldr	r2, [pc, #96]	@ (800f3e4 <TIM_OC5_SetConfig+0xb4>)
 800f382:	4293      	cmp	r3, r2
 800f384:	d00f      	beq.n	800f3a6 <TIM_OC5_SetConfig+0x76>
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	4a17      	ldr	r2, [pc, #92]	@ (800f3e8 <TIM_OC5_SetConfig+0xb8>)
 800f38a:	4293      	cmp	r3, r2
 800f38c:	d00b      	beq.n	800f3a6 <TIM_OC5_SetConfig+0x76>
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	4a16      	ldr	r2, [pc, #88]	@ (800f3ec <TIM_OC5_SetConfig+0xbc>)
 800f392:	4293      	cmp	r3, r2
 800f394:	d007      	beq.n	800f3a6 <TIM_OC5_SetConfig+0x76>
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	4a15      	ldr	r2, [pc, #84]	@ (800f3f0 <TIM_OC5_SetConfig+0xc0>)
 800f39a:	4293      	cmp	r3, r2
 800f39c:	d003      	beq.n	800f3a6 <TIM_OC5_SetConfig+0x76>
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	4a14      	ldr	r2, [pc, #80]	@ (800f3f4 <TIM_OC5_SetConfig+0xc4>)
 800f3a2:	4293      	cmp	r3, r2
 800f3a4:	d109      	bne.n	800f3ba <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f3a6:	697b      	ldr	r3, [r7, #20]
 800f3a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f3ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f3ae:	683b      	ldr	r3, [r7, #0]
 800f3b0:	695b      	ldr	r3, [r3, #20]
 800f3b2:	021b      	lsls	r3, r3, #8
 800f3b4:	697a      	ldr	r2, [r7, #20]
 800f3b6:	4313      	orrs	r3, r2
 800f3b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	697a      	ldr	r2, [r7, #20]
 800f3be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	68fa      	ldr	r2, [r7, #12]
 800f3c4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f3c6:	683b      	ldr	r3, [r7, #0]
 800f3c8:	685a      	ldr	r2, [r3, #4]
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	693a      	ldr	r2, [r7, #16]
 800f3d2:	621a      	str	r2, [r3, #32]
}
 800f3d4:	bf00      	nop
 800f3d6:	371c      	adds	r7, #28
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3de:	4770      	bx	lr
 800f3e0:	fffeff8f 	.word	0xfffeff8f
 800f3e4:	40010000 	.word	0x40010000
 800f3e8:	40010400 	.word	0x40010400
 800f3ec:	40014000 	.word	0x40014000
 800f3f0:	40014400 	.word	0x40014400
 800f3f4:	40014800 	.word	0x40014800

0800f3f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f3f8:	b480      	push	{r7}
 800f3fa:	b087      	sub	sp, #28
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	6078      	str	r0, [r7, #4]
 800f400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	6a1b      	ldr	r3, [r3, #32]
 800f406:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	6a1b      	ldr	r3, [r3, #32]
 800f40c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	685b      	ldr	r3, [r3, #4]
 800f418:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f41e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f420:	68fa      	ldr	r2, [r7, #12]
 800f422:	4b22      	ldr	r3, [pc, #136]	@ (800f4ac <TIM_OC6_SetConfig+0xb4>)
 800f424:	4013      	ands	r3, r2
 800f426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f428:	683b      	ldr	r3, [r7, #0]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	021b      	lsls	r3, r3, #8
 800f42e:	68fa      	ldr	r2, [r7, #12]
 800f430:	4313      	orrs	r3, r2
 800f432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f434:	693b      	ldr	r3, [r7, #16]
 800f436:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f43a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f43c:	683b      	ldr	r3, [r7, #0]
 800f43e:	689b      	ldr	r3, [r3, #8]
 800f440:	051b      	lsls	r3, r3, #20
 800f442:	693a      	ldr	r2, [r7, #16]
 800f444:	4313      	orrs	r3, r2
 800f446:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	4a19      	ldr	r2, [pc, #100]	@ (800f4b0 <TIM_OC6_SetConfig+0xb8>)
 800f44c:	4293      	cmp	r3, r2
 800f44e:	d00f      	beq.n	800f470 <TIM_OC6_SetConfig+0x78>
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	4a18      	ldr	r2, [pc, #96]	@ (800f4b4 <TIM_OC6_SetConfig+0xbc>)
 800f454:	4293      	cmp	r3, r2
 800f456:	d00b      	beq.n	800f470 <TIM_OC6_SetConfig+0x78>
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	4a17      	ldr	r2, [pc, #92]	@ (800f4b8 <TIM_OC6_SetConfig+0xc0>)
 800f45c:	4293      	cmp	r3, r2
 800f45e:	d007      	beq.n	800f470 <TIM_OC6_SetConfig+0x78>
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	4a16      	ldr	r2, [pc, #88]	@ (800f4bc <TIM_OC6_SetConfig+0xc4>)
 800f464:	4293      	cmp	r3, r2
 800f466:	d003      	beq.n	800f470 <TIM_OC6_SetConfig+0x78>
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	4a15      	ldr	r2, [pc, #84]	@ (800f4c0 <TIM_OC6_SetConfig+0xc8>)
 800f46c:	4293      	cmp	r3, r2
 800f46e:	d109      	bne.n	800f484 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f470:	697b      	ldr	r3, [r7, #20]
 800f472:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f476:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f478:	683b      	ldr	r3, [r7, #0]
 800f47a:	695b      	ldr	r3, [r3, #20]
 800f47c:	029b      	lsls	r3, r3, #10
 800f47e:	697a      	ldr	r2, [r7, #20]
 800f480:	4313      	orrs	r3, r2
 800f482:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	697a      	ldr	r2, [r7, #20]
 800f488:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	68fa      	ldr	r2, [r7, #12]
 800f48e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f490:	683b      	ldr	r3, [r7, #0]
 800f492:	685a      	ldr	r2, [r3, #4]
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	693a      	ldr	r2, [r7, #16]
 800f49c:	621a      	str	r2, [r3, #32]
}
 800f49e:	bf00      	nop
 800f4a0:	371c      	adds	r7, #28
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a8:	4770      	bx	lr
 800f4aa:	bf00      	nop
 800f4ac:	feff8fff 	.word	0xfeff8fff
 800f4b0:	40010000 	.word	0x40010000
 800f4b4:	40010400 	.word	0x40010400
 800f4b8:	40014000 	.word	0x40014000
 800f4bc:	40014400 	.word	0x40014400
 800f4c0:	40014800 	.word	0x40014800

0800f4c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f4c4:	b480      	push	{r7}
 800f4c6:	b087      	sub	sp, #28
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	60f8      	str	r0, [r7, #12]
 800f4cc:	60b9      	str	r1, [r7, #8]
 800f4ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f4d0:	68bb      	ldr	r3, [r7, #8]
 800f4d2:	f003 031f 	and.w	r3, r3, #31
 800f4d6:	2201      	movs	r2, #1
 800f4d8:	fa02 f303 	lsl.w	r3, r2, r3
 800f4dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	6a1a      	ldr	r2, [r3, #32]
 800f4e2:	697b      	ldr	r3, [r7, #20]
 800f4e4:	43db      	mvns	r3, r3
 800f4e6:	401a      	ands	r2, r3
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	6a1a      	ldr	r2, [r3, #32]
 800f4f0:	68bb      	ldr	r3, [r7, #8]
 800f4f2:	f003 031f 	and.w	r3, r3, #31
 800f4f6:	6879      	ldr	r1, [r7, #4]
 800f4f8:	fa01 f303 	lsl.w	r3, r1, r3
 800f4fc:	431a      	orrs	r2, r3
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	621a      	str	r2, [r3, #32]
}
 800f502:	bf00      	nop
 800f504:	371c      	adds	r7, #28
 800f506:	46bd      	mov	sp, r7
 800f508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50c:	4770      	bx	lr
	...

0800f510 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f510:	b480      	push	{r7}
 800f512:	b085      	sub	sp, #20
 800f514:	af00      	add	r7, sp, #0
 800f516:	6078      	str	r0, [r7, #4]
 800f518:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f520:	2b01      	cmp	r3, #1
 800f522:	d101      	bne.n	800f528 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f524:	2302      	movs	r3, #2
 800f526:	e06d      	b.n	800f604 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	2201      	movs	r2, #1
 800f52c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	2202      	movs	r2, #2
 800f534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	685b      	ldr	r3, [r3, #4]
 800f53e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	689b      	ldr	r3, [r3, #8]
 800f546:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	4a30      	ldr	r2, [pc, #192]	@ (800f610 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f54e:	4293      	cmp	r3, r2
 800f550:	d004      	beq.n	800f55c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	4a2f      	ldr	r2, [pc, #188]	@ (800f614 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f558:	4293      	cmp	r3, r2
 800f55a:	d108      	bne.n	800f56e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f562:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f564:	683b      	ldr	r3, [r7, #0]
 800f566:	685b      	ldr	r3, [r3, #4]
 800f568:	68fa      	ldr	r2, [r7, #12]
 800f56a:	4313      	orrs	r3, r2
 800f56c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f574:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f576:	683b      	ldr	r3, [r7, #0]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	68fa      	ldr	r2, [r7, #12]
 800f57c:	4313      	orrs	r3, r2
 800f57e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	68fa      	ldr	r2, [r7, #12]
 800f586:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	4a20      	ldr	r2, [pc, #128]	@ (800f610 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f58e:	4293      	cmp	r3, r2
 800f590:	d022      	beq.n	800f5d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f59a:	d01d      	beq.n	800f5d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	4a1d      	ldr	r2, [pc, #116]	@ (800f618 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f5a2:	4293      	cmp	r3, r2
 800f5a4:	d018      	beq.n	800f5d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	4a1c      	ldr	r2, [pc, #112]	@ (800f61c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f5ac:	4293      	cmp	r3, r2
 800f5ae:	d013      	beq.n	800f5d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	4a1a      	ldr	r2, [pc, #104]	@ (800f620 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f5b6:	4293      	cmp	r3, r2
 800f5b8:	d00e      	beq.n	800f5d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	4a15      	ldr	r2, [pc, #84]	@ (800f614 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f5c0:	4293      	cmp	r3, r2
 800f5c2:	d009      	beq.n	800f5d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	4a16      	ldr	r2, [pc, #88]	@ (800f624 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f5ca:	4293      	cmp	r3, r2
 800f5cc:	d004      	beq.n	800f5d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	4a15      	ldr	r2, [pc, #84]	@ (800f628 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f5d4:	4293      	cmp	r3, r2
 800f5d6:	d10c      	bne.n	800f5f2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f5d8:	68bb      	ldr	r3, [r7, #8]
 800f5da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f5de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f5e0:	683b      	ldr	r3, [r7, #0]
 800f5e2:	689b      	ldr	r3, [r3, #8]
 800f5e4:	68ba      	ldr	r2, [r7, #8]
 800f5e6:	4313      	orrs	r3, r2
 800f5e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	68ba      	ldr	r2, [r7, #8]
 800f5f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	2201      	movs	r2, #1
 800f5f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	2200      	movs	r2, #0
 800f5fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f602:	2300      	movs	r3, #0
}
 800f604:	4618      	mov	r0, r3
 800f606:	3714      	adds	r7, #20
 800f608:	46bd      	mov	sp, r7
 800f60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60e:	4770      	bx	lr
 800f610:	40010000 	.word	0x40010000
 800f614:	40010400 	.word	0x40010400
 800f618:	40000400 	.word	0x40000400
 800f61c:	40000800 	.word	0x40000800
 800f620:	40000c00 	.word	0x40000c00
 800f624:	40001800 	.word	0x40001800
 800f628:	40014000 	.word	0x40014000

0800f62c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f62c:	b480      	push	{r7}
 800f62e:	b083      	sub	sp, #12
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f634:	bf00      	nop
 800f636:	370c      	adds	r7, #12
 800f638:	46bd      	mov	sp, r7
 800f63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63e:	4770      	bx	lr

0800f640 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f640:	b480      	push	{r7}
 800f642:	b083      	sub	sp, #12
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f648:	bf00      	nop
 800f64a:	370c      	adds	r7, #12
 800f64c:	46bd      	mov	sp, r7
 800f64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f652:	4770      	bx	lr

0800f654 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f654:	b480      	push	{r7}
 800f656:	b083      	sub	sp, #12
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f65c:	bf00      	nop
 800f65e:	370c      	adds	r7, #12
 800f660:	46bd      	mov	sp, r7
 800f662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f666:	4770      	bx	lr

0800f668 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b082      	sub	sp, #8
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d101      	bne.n	800f67a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f676:	2301      	movs	r3, #1
 800f678:	e042      	b.n	800f700 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f680:	2b00      	cmp	r3, #0
 800f682:	d106      	bne.n	800f692 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	2200      	movs	r2, #0
 800f688:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f68c:	6878      	ldr	r0, [r7, #4]
 800f68e:	f7f4 fc89 	bl	8003fa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	2224      	movs	r2, #36	@ 0x24
 800f696:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	681a      	ldr	r2, [r3, #0]
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	f022 0201 	bic.w	r2, r2, #1
 800f6a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d002      	beq.n	800f6b8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f6b2:	6878      	ldr	r0, [r7, #4]
 800f6b4:	f001 fe0e 	bl	80112d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f6b8:	6878      	ldr	r0, [r7, #4]
 800f6ba:	f000 ff9f 	bl	80105fc <UART_SetConfig>
 800f6be:	4603      	mov	r3, r0
 800f6c0:	2b01      	cmp	r3, #1
 800f6c2:	d101      	bne.n	800f6c8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f6c4:	2301      	movs	r3, #1
 800f6c6:	e01b      	b.n	800f700 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	685a      	ldr	r2, [r3, #4]
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f6d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	689a      	ldr	r2, [r3, #8]
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f6e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	681a      	ldr	r2, [r3, #0]
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	f042 0201 	orr.w	r2, r2, #1
 800f6f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f6f8:	6878      	ldr	r0, [r7, #4]
 800f6fa:	f001 fe8d 	bl	8011418 <UART_CheckIdleState>
 800f6fe:	4603      	mov	r3, r0
}
 800f700:	4618      	mov	r0, r3
 800f702:	3708      	adds	r7, #8
 800f704:	46bd      	mov	sp, r7
 800f706:	bd80      	pop	{r7, pc}

0800f708 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f708:	b580      	push	{r7, lr}
 800f70a:	b08a      	sub	sp, #40	@ 0x28
 800f70c:	af02      	add	r7, sp, #8
 800f70e:	60f8      	str	r0, [r7, #12]
 800f710:	60b9      	str	r1, [r7, #8]
 800f712:	603b      	str	r3, [r7, #0]
 800f714:	4613      	mov	r3, r2
 800f716:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f71e:	2b20      	cmp	r3, #32
 800f720:	d17b      	bne.n	800f81a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800f722:	68bb      	ldr	r3, [r7, #8]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d002      	beq.n	800f72e <HAL_UART_Transmit+0x26>
 800f728:	88fb      	ldrh	r3, [r7, #6]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d101      	bne.n	800f732 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800f72e:	2301      	movs	r3, #1
 800f730:	e074      	b.n	800f81c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	2200      	movs	r2, #0
 800f736:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	2221      	movs	r2, #33	@ 0x21
 800f73e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f742:	f7f7 f835 	bl	80067b0 <HAL_GetTick>
 800f746:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	88fa      	ldrh	r2, [r7, #6]
 800f74c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	88fa      	ldrh	r2, [r7, #6]
 800f754:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	689b      	ldr	r3, [r3, #8]
 800f75c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f760:	d108      	bne.n	800f774 <HAL_UART_Transmit+0x6c>
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	691b      	ldr	r3, [r3, #16]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d104      	bne.n	800f774 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800f76a:	2300      	movs	r3, #0
 800f76c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f76e:	68bb      	ldr	r3, [r7, #8]
 800f770:	61bb      	str	r3, [r7, #24]
 800f772:	e003      	b.n	800f77c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800f774:	68bb      	ldr	r3, [r7, #8]
 800f776:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f778:	2300      	movs	r3, #0
 800f77a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f77c:	e030      	b.n	800f7e0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f77e:	683b      	ldr	r3, [r7, #0]
 800f780:	9300      	str	r3, [sp, #0]
 800f782:	697b      	ldr	r3, [r7, #20]
 800f784:	2200      	movs	r2, #0
 800f786:	2180      	movs	r1, #128	@ 0x80
 800f788:	68f8      	ldr	r0, [r7, #12]
 800f78a:	f001 feef 	bl	801156c <UART_WaitOnFlagUntilTimeout>
 800f78e:	4603      	mov	r3, r0
 800f790:	2b00      	cmp	r3, #0
 800f792:	d005      	beq.n	800f7a0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	2220      	movs	r2, #32
 800f798:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800f79c:	2303      	movs	r3, #3
 800f79e:	e03d      	b.n	800f81c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800f7a0:	69fb      	ldr	r3, [r7, #28]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d10b      	bne.n	800f7be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f7a6:	69bb      	ldr	r3, [r7, #24]
 800f7a8:	881b      	ldrh	r3, [r3, #0]
 800f7aa:	461a      	mov	r2, r3
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f7b4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800f7b6:	69bb      	ldr	r3, [r7, #24]
 800f7b8:	3302      	adds	r3, #2
 800f7ba:	61bb      	str	r3, [r7, #24]
 800f7bc:	e007      	b.n	800f7ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f7be:	69fb      	ldr	r3, [r7, #28]
 800f7c0:	781a      	ldrb	r2, [r3, #0]
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800f7c8:	69fb      	ldr	r3, [r7, #28]
 800f7ca:	3301      	adds	r3, #1
 800f7cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f7d4:	b29b      	uxth	r3, r3
 800f7d6:	3b01      	subs	r3, #1
 800f7d8:	b29a      	uxth	r2, r3
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f7e6:	b29b      	uxth	r3, r3
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d1c8      	bne.n	800f77e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f7ec:	683b      	ldr	r3, [r7, #0]
 800f7ee:	9300      	str	r3, [sp, #0]
 800f7f0:	697b      	ldr	r3, [r7, #20]
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	2140      	movs	r1, #64	@ 0x40
 800f7f6:	68f8      	ldr	r0, [r7, #12]
 800f7f8:	f001 feb8 	bl	801156c <UART_WaitOnFlagUntilTimeout>
 800f7fc:	4603      	mov	r3, r0
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d005      	beq.n	800f80e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	2220      	movs	r2, #32
 800f806:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800f80a:	2303      	movs	r3, #3
 800f80c:	e006      	b.n	800f81c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	2220      	movs	r2, #32
 800f812:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800f816:	2300      	movs	r3, #0
 800f818:	e000      	b.n	800f81c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800f81a:	2302      	movs	r3, #2
  }
}
 800f81c:	4618      	mov	r0, r3
 800f81e:	3720      	adds	r7, #32
 800f820:	46bd      	mov	sp, r7
 800f822:	bd80      	pop	{r7, pc}

0800f824 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800f824:	b480      	push	{r7}
 800f826:	b091      	sub	sp, #68	@ 0x44
 800f828:	af00      	add	r7, sp, #0
 800f82a:	60f8      	str	r0, [r7, #12]
 800f82c:	60b9      	str	r1, [r7, #8]
 800f82e:	4613      	mov	r3, r2
 800f830:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f838:	2b20      	cmp	r3, #32
 800f83a:	d178      	bne.n	800f92e <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800f83c:	68bb      	ldr	r3, [r7, #8]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d002      	beq.n	800f848 <HAL_UART_Transmit_IT+0x24>
 800f842:	88fb      	ldrh	r3, [r7, #6]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d101      	bne.n	800f84c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800f848:	2301      	movs	r3, #1
 800f84a:	e071      	b.n	800f930 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	68ba      	ldr	r2, [r7, #8]
 800f850:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	88fa      	ldrh	r2, [r7, #6]
 800f856:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	88fa      	ldrh	r2, [r7, #6]
 800f85e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	2200      	movs	r2, #0
 800f866:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	2200      	movs	r2, #0
 800f86c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	2221      	movs	r2, #33	@ 0x21
 800f874:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f87c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f880:	d12a      	bne.n	800f8d8 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	689b      	ldr	r3, [r3, #8]
 800f886:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f88a:	d107      	bne.n	800f89c <HAL_UART_Transmit_IT+0x78>
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	691b      	ldr	r3, [r3, #16]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d103      	bne.n	800f89c <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	4a29      	ldr	r2, [pc, #164]	@ (800f93c <HAL_UART_Transmit_IT+0x118>)
 800f898:	679a      	str	r2, [r3, #120]	@ 0x78
 800f89a:	e002      	b.n	800f8a2 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	4a28      	ldr	r2, [pc, #160]	@ (800f940 <HAL_UART_Transmit_IT+0x11c>)
 800f8a0:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	3308      	adds	r3, #8
 800f8a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8ac:	e853 3f00 	ldrex	r3, [r3]
 800f8b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f8b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800f8b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	3308      	adds	r3, #8
 800f8c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f8c2:	637a      	str	r2, [r7, #52]	@ 0x34
 800f8c4:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8c6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f8c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f8ca:	e841 2300 	strex	r3, r2, [r1]
 800f8ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800f8d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d1e5      	bne.n	800f8a2 <HAL_UART_Transmit_IT+0x7e>
 800f8d6:	e028      	b.n	800f92a <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	689b      	ldr	r3, [r3, #8]
 800f8dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f8e0:	d107      	bne.n	800f8f2 <HAL_UART_Transmit_IT+0xce>
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	691b      	ldr	r3, [r3, #16]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d103      	bne.n	800f8f2 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	4a15      	ldr	r2, [pc, #84]	@ (800f944 <HAL_UART_Transmit_IT+0x120>)
 800f8ee:	679a      	str	r2, [r3, #120]	@ 0x78
 800f8f0:	e002      	b.n	800f8f8 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	4a14      	ldr	r2, [pc, #80]	@ (800f948 <HAL_UART_Transmit_IT+0x124>)
 800f8f6:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8fe:	697b      	ldr	r3, [r7, #20]
 800f900:	e853 3f00 	ldrex	r3, [r3]
 800f904:	613b      	str	r3, [r7, #16]
   return(result);
 800f906:	693b      	ldr	r3, [r7, #16]
 800f908:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f90c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	461a      	mov	r2, r3
 800f914:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f916:	623b      	str	r3, [r7, #32]
 800f918:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f91a:	69f9      	ldr	r1, [r7, #28]
 800f91c:	6a3a      	ldr	r2, [r7, #32]
 800f91e:	e841 2300 	strex	r3, r2, [r1]
 800f922:	61bb      	str	r3, [r7, #24]
   return(result);
 800f924:	69bb      	ldr	r3, [r7, #24]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d1e6      	bne.n	800f8f8 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800f92a:	2300      	movs	r3, #0
 800f92c:	e000      	b.n	800f930 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800f92e:	2302      	movs	r3, #2
  }
}
 800f930:	4618      	mov	r0, r3
 800f932:	3744      	adds	r7, #68	@ 0x44
 800f934:	46bd      	mov	sp, r7
 800f936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93a:	4770      	bx	lr
 800f93c:	080120a1 	.word	0x080120a1
 800f940:	08011fc1 	.word	0x08011fc1
 800f944:	08011eff 	.word	0x08011eff
 800f948:	08011e47 	.word	0x08011e47

0800f94c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b08a      	sub	sp, #40	@ 0x28
 800f950:	af00      	add	r7, sp, #0
 800f952:	60f8      	str	r0, [r7, #12]
 800f954:	60b9      	str	r1, [r7, #8]
 800f956:	4613      	mov	r3, r2
 800f958:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f960:	2b20      	cmp	r3, #32
 800f962:	d137      	bne.n	800f9d4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800f964:	68bb      	ldr	r3, [r7, #8]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d002      	beq.n	800f970 <HAL_UART_Receive_IT+0x24>
 800f96a:	88fb      	ldrh	r3, [r7, #6]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d101      	bne.n	800f974 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800f970:	2301      	movs	r3, #1
 800f972:	e030      	b.n	800f9d6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	2200      	movs	r2, #0
 800f978:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	4a18      	ldr	r2, [pc, #96]	@ (800f9e0 <HAL_UART_Receive_IT+0x94>)
 800f980:	4293      	cmp	r3, r2
 800f982:	d01f      	beq.n	800f9c4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	685b      	ldr	r3, [r3, #4]
 800f98a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d018      	beq.n	800f9c4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f998:	697b      	ldr	r3, [r7, #20]
 800f99a:	e853 3f00 	ldrex	r3, [r3]
 800f99e:	613b      	str	r3, [r7, #16]
   return(result);
 800f9a0:	693b      	ldr	r3, [r7, #16]
 800f9a2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f9a6:	627b      	str	r3, [r7, #36]	@ 0x24
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	461a      	mov	r2, r3
 800f9ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9b0:	623b      	str	r3, [r7, #32]
 800f9b2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9b4:	69f9      	ldr	r1, [r7, #28]
 800f9b6:	6a3a      	ldr	r2, [r7, #32]
 800f9b8:	e841 2300 	strex	r3, r2, [r1]
 800f9bc:	61bb      	str	r3, [r7, #24]
   return(result);
 800f9be:	69bb      	ldr	r3, [r7, #24]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d1e6      	bne.n	800f992 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800f9c4:	88fb      	ldrh	r3, [r7, #6]
 800f9c6:	461a      	mov	r2, r3
 800f9c8:	68b9      	ldr	r1, [r7, #8]
 800f9ca:	68f8      	ldr	r0, [r7, #12]
 800f9cc:	f001 fe3c 	bl	8011648 <UART_Start_Receive_IT>
 800f9d0:	4603      	mov	r3, r0
 800f9d2:	e000      	b.n	800f9d6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800f9d4:	2302      	movs	r3, #2
  }
}
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	3728      	adds	r7, #40	@ 0x28
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	bd80      	pop	{r7, pc}
 800f9de:	bf00      	nop
 800f9e0:	58000c00 	.word	0x58000c00

0800f9e4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	b08a      	sub	sp, #40	@ 0x28
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	60f8      	str	r0, [r7, #12]
 800f9ec:	60b9      	str	r1, [r7, #8]
 800f9ee:	4613      	mov	r3, r2
 800f9f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f9f8:	2b20      	cmp	r3, #32
 800f9fa:	d137      	bne.n	800fa6c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800f9fc:	68bb      	ldr	r3, [r7, #8]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d002      	beq.n	800fa08 <HAL_UART_Receive_DMA+0x24>
 800fa02:	88fb      	ldrh	r3, [r7, #6]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d101      	bne.n	800fa0c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800fa08:	2301      	movs	r3, #1
 800fa0a:	e030      	b.n	800fa6e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	2200      	movs	r2, #0
 800fa10:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	4a18      	ldr	r2, [pc, #96]	@ (800fa78 <HAL_UART_Receive_DMA+0x94>)
 800fa18:	4293      	cmp	r3, r2
 800fa1a:	d01f      	beq.n	800fa5c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	685b      	ldr	r3, [r3, #4]
 800fa22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d018      	beq.n	800fa5c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa30:	697b      	ldr	r3, [r7, #20]
 800fa32:	e853 3f00 	ldrex	r3, [r3]
 800fa36:	613b      	str	r3, [r7, #16]
   return(result);
 800fa38:	693b      	ldr	r3, [r7, #16]
 800fa3a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800fa3e:	627b      	str	r3, [r7, #36]	@ 0x24
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	461a      	mov	r2, r3
 800fa46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa48:	623b      	str	r3, [r7, #32]
 800fa4a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa4c:	69f9      	ldr	r1, [r7, #28]
 800fa4e:	6a3a      	ldr	r2, [r7, #32]
 800fa50:	e841 2300 	strex	r3, r2, [r1]
 800fa54:	61bb      	str	r3, [r7, #24]
   return(result);
 800fa56:	69bb      	ldr	r3, [r7, #24]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d1e6      	bne.n	800fa2a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800fa5c:	88fb      	ldrh	r3, [r7, #6]
 800fa5e:	461a      	mov	r2, r3
 800fa60:	68b9      	ldr	r1, [r7, #8]
 800fa62:	68f8      	ldr	r0, [r7, #12]
 800fa64:	f001 ff12 	bl	801188c <UART_Start_Receive_DMA>
 800fa68:	4603      	mov	r3, r0
 800fa6a:	e000      	b.n	800fa6e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800fa6c:	2302      	movs	r3, #2
  }
}
 800fa6e:	4618      	mov	r0, r3
 800fa70:	3728      	adds	r7, #40	@ 0x28
 800fa72:	46bd      	mov	sp, r7
 800fa74:	bd80      	pop	{r7, pc}
 800fa76:	bf00      	nop
 800fa78:	58000c00 	.word	0x58000c00

0800fa7c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	b090      	sub	sp, #64	@ 0x40
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fa8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fa92:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	689b      	ldr	r3, [r3, #8]
 800fa9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fa9e:	2b80      	cmp	r3, #128	@ 0x80
 800faa0:	d139      	bne.n	800fb16 <HAL_UART_DMAStop+0x9a>
 800faa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800faa4:	2b21      	cmp	r3, #33	@ 0x21
 800faa6:	d136      	bne.n	800fb16 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	3308      	adds	r3, #8
 800faae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fab0:	6a3b      	ldr	r3, [r7, #32]
 800fab2:	e853 3f00 	ldrex	r3, [r3]
 800fab6:	61fb      	str	r3, [r7, #28]
   return(result);
 800fab8:	69fb      	ldr	r3, [r7, #28]
 800faba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fabe:	637b      	str	r3, [r7, #52]	@ 0x34
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	3308      	adds	r3, #8
 800fac6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fac8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800faca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800facc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800face:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fad0:	e841 2300 	strex	r3, r2, [r1]
 800fad4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d1e5      	bne.n	800faa8 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d015      	beq.n	800fb10 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fae8:	4618      	mov	r0, r3
 800faea:	f7f7 fde1 	bl	80076b0 <HAL_DMA_Abort>
 800faee:	4603      	mov	r3, r0
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d00d      	beq.n	800fb10 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800faf8:	4618      	mov	r0, r3
 800fafa:	f7f9 fa9f 	bl	800903c <HAL_DMA_GetError>
 800fafe:	4603      	mov	r3, r0
 800fb00:	2b20      	cmp	r3, #32
 800fb02:	d105      	bne.n	800fb10 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	2210      	movs	r2, #16
 800fb08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800fb0c:	2303      	movs	r3, #3
 800fb0e:	e047      	b.n	800fba0 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800fb10:	6878      	ldr	r0, [r7, #4]
 800fb12:	f001 ff61 	bl	80119d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	689b      	ldr	r3, [r3, #8]
 800fb1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fb20:	2b40      	cmp	r3, #64	@ 0x40
 800fb22:	d13c      	bne.n	800fb9e <HAL_UART_DMAStop+0x122>
 800fb24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb26:	2b22      	cmp	r3, #34	@ 0x22
 800fb28:	d139      	bne.n	800fb9e <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	3308      	adds	r3, #8
 800fb30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	e853 3f00 	ldrex	r3, [r3]
 800fb38:	60bb      	str	r3, [r7, #8]
   return(result);
 800fb3a:	68bb      	ldr	r3, [r7, #8]
 800fb3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fb40:	633b      	str	r3, [r7, #48]	@ 0x30
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	3308      	adds	r3, #8
 800fb48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fb4a:	61ba      	str	r2, [r7, #24]
 800fb4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb4e:	6979      	ldr	r1, [r7, #20]
 800fb50:	69ba      	ldr	r2, [r7, #24]
 800fb52:	e841 2300 	strex	r3, r2, [r1]
 800fb56:	613b      	str	r3, [r7, #16]
   return(result);
 800fb58:	693b      	ldr	r3, [r7, #16]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d1e5      	bne.n	800fb2a <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d017      	beq.n	800fb98 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fb6e:	4618      	mov	r0, r3
 800fb70:	f7f7 fd9e 	bl	80076b0 <HAL_DMA_Abort>
 800fb74:	4603      	mov	r3, r0
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d00e      	beq.n	800fb98 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fb80:	4618      	mov	r0, r3
 800fb82:	f7f9 fa5b 	bl	800903c <HAL_DMA_GetError>
 800fb86:	4603      	mov	r3, r0
 800fb88:	2b20      	cmp	r3, #32
 800fb8a:	d105      	bne.n	800fb98 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	2210      	movs	r2, #16
 800fb90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800fb94:	2303      	movs	r3, #3
 800fb96:	e003      	b.n	800fba0 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800fb98:	6878      	ldr	r0, [r7, #4]
 800fb9a:	f001 ff5f 	bl	8011a5c <UART_EndRxTransfer>
  }

  return HAL_OK;
 800fb9e:	2300      	movs	r3, #0
}
 800fba0:	4618      	mov	r0, r3
 800fba2:	3740      	adds	r7, #64	@ 0x40
 800fba4:	46bd      	mov	sp, r7
 800fba6:	bd80      	pop	{r7, pc}

0800fba8 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b0a2      	sub	sp, #136	@ 0x88
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 800fbb0:	2301      	movs	r3, #1
 800fbb2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbbc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fbbe:	e853 3f00 	ldrex	r3, [r3]
 800fbc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800fbc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fbc6:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800fbca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	461a      	mov	r2, r3
 800fbd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800fbd8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800fbda:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbdc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800fbde:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fbe0:	e841 2300 	strex	r3, r2, [r1]
 800fbe4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800fbe6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d1e4      	bne.n	800fbb6 <HAL_UART_Abort_IT+0xe>
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	3308      	adds	r3, #8
 800fbf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fbf6:	e853 3f00 	ldrex	r3, [r3]
 800fbfa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800fbfc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fbfe:	4b85      	ldr	r3, [pc, #532]	@ (800fe14 <HAL_UART_Abort_IT+0x26c>)
 800fc00:	4013      	ands	r3, r2
 800fc02:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	3308      	adds	r3, #8
 800fc0a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800fc0c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800fc0e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc10:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fc12:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fc14:	e841 2300 	strex	r3, r2, [r1]
 800fc18:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800fc1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d1e5      	bne.n	800fbec <HAL_UART_Abort_IT+0x44>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fc24:	2b01      	cmp	r3, #1
 800fc26:	d118      	bne.n	800fc5a <HAL_UART_Abort_IT+0xb2>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc30:	e853 3f00 	ldrex	r3, [r3]
 800fc34:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fc36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc38:	f023 0310 	bic.w	r3, r3, #16
 800fc3c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	461a      	mov	r2, r3
 800fc44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fc46:	647b      	str	r3, [r7, #68]	@ 0x44
 800fc48:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc4a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fc4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fc4e:	e841 2300 	strex	r3, r2, [r1]
 800fc52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fc54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d1e6      	bne.n	800fc28 <HAL_UART_Abort_IT+0x80>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d00f      	beq.n	800fc82 <HAL_UART_Abort_IT+0xda>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	689b      	ldr	r3, [r3, #8]
 800fc68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fc6c:	2b80      	cmp	r3, #128	@ 0x80
 800fc6e:	d104      	bne.n	800fc7a <HAL_UART_Abort_IT+0xd2>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fc74:	4a68      	ldr	r2, [pc, #416]	@ (800fe18 <HAL_UART_Abort_IT+0x270>)
 800fc76:	651a      	str	r2, [r3, #80]	@ 0x50
 800fc78:	e003      	b.n	800fc82 <HAL_UART_Abort_IT+0xda>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fc7e:	2200      	movs	r2, #0
 800fc80:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d011      	beq.n	800fcb0 <HAL_UART_Abort_IT+0x108>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	689b      	ldr	r3, [r3, #8]
 800fc92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fc96:	2b40      	cmp	r3, #64	@ 0x40
 800fc98:	d105      	bne.n	800fca6 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fca0:	4a5e      	ldr	r2, [pc, #376]	@ (800fe1c <HAL_UART_Abort_IT+0x274>)
 800fca2:	651a      	str	r2, [r3, #80]	@ 0x50
 800fca4:	e004      	b.n	800fcb0 <HAL_UART_Abort_IT+0x108>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fcac:	2200      	movs	r2, #0
 800fcae:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	689b      	ldr	r3, [r3, #8]
 800fcb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fcba:	2b80      	cmp	r3, #128	@ 0x80
 800fcbc:	d12d      	bne.n	800fd1a <HAL_UART_Abort_IT+0x172>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	3308      	adds	r3, #8
 800fcc4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcc8:	e853 3f00 	ldrex	r3, [r3]
 800fccc:	623b      	str	r3, [r7, #32]
   return(result);
 800fcce:	6a3b      	ldr	r3, [r7, #32]
 800fcd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fcd4:	677b      	str	r3, [r7, #116]	@ 0x74
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	3308      	adds	r3, #8
 800fcdc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800fcde:	633a      	str	r2, [r7, #48]	@ 0x30
 800fce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fce2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fce4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fce6:	e841 2300 	strex	r3, r2, [r1]
 800fcea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fcec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d1e5      	bne.n	800fcbe <HAL_UART_Abort_IT+0x116>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d00f      	beq.n	800fd1a <HAL_UART_Abort_IT+0x172>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fcfe:	4618      	mov	r0, r3
 800fd00:	f7f7 fff4 	bl	8007cec <HAL_DMA_Abort_IT>
 800fd04:	4603      	mov	r3, r0
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d004      	beq.n	800fd14 <HAL_UART_Abort_IT+0x16c>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fd0e:	2200      	movs	r2, #0
 800fd10:	651a      	str	r2, [r3, #80]	@ 0x50
 800fd12:	e002      	b.n	800fd1a <HAL_UART_Abort_IT+0x172>
      }
      else
      {
        abortcplt = 0U;
 800fd14:	2300      	movs	r3, #0
 800fd16:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	689b      	ldr	r3, [r3, #8]
 800fd20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd24:	2b40      	cmp	r3, #64	@ 0x40
 800fd26:	d133      	bne.n	800fd90 <HAL_UART_Abort_IT+0x1e8>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	3308      	adds	r3, #8
 800fd2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd30:	693b      	ldr	r3, [r7, #16]
 800fd32:	e853 3f00 	ldrex	r3, [r3]
 800fd36:	60fb      	str	r3, [r7, #12]
   return(result);
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fd3e:	673b      	str	r3, [r7, #112]	@ 0x70
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	3308      	adds	r3, #8
 800fd46:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800fd48:	61fa      	str	r2, [r7, #28]
 800fd4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd4c:	69b9      	ldr	r1, [r7, #24]
 800fd4e:	69fa      	ldr	r2, [r7, #28]
 800fd50:	e841 2300 	strex	r3, r2, [r1]
 800fd54:	617b      	str	r3, [r7, #20]
   return(result);
 800fd56:	697b      	ldr	r3, [r7, #20]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d1e5      	bne.n	800fd28 <HAL_UART_Abort_IT+0x180>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d014      	beq.n	800fd90 <HAL_UART_Abort_IT+0x1e8>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	f7f7 ffbd 	bl	8007cec <HAL_DMA_Abort_IT>
 800fd72:	4603      	mov	r3, r0
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d008      	beq.n	800fd8a <HAL_UART_Abort_IT+0x1e2>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fd7e:	2200      	movs	r2, #0
 800fd80:	651a      	str	r2, [r3, #80]	@ 0x50
        abortcplt = 1U;
 800fd82:	2301      	movs	r3, #1
 800fd84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800fd88:	e002      	b.n	800fd90 <HAL_UART_Abort_IT+0x1e8>
      }
      else
      {
        abortcplt = 0U;
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 800fd90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fd94:	2b01      	cmp	r3, #1
 800fd96:	d138      	bne.n	800fe0a <HAL_UART_Abort_IT+0x262>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->RxXferCount = 0U;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	2200      	movs	r2, #0
 800fda4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	2200      	movs	r2, #0
 800fdac:	675a      	str	r2, [r3, #116]	@ 0x74
    huart->TxISR = NULL;
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	2200      	movs	r2, #0
 800fdb2:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	220f      	movs	r2, #15
 800fdc2:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fdc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fdcc:	d107      	bne.n	800fdde <HAL_UART_Abort_IT+0x236>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	699a      	ldr	r2, [r3, #24]
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	f042 0210 	orr.w	r2, r2, #16
 800fddc:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	699a      	ldr	r2, [r3, #24]
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	f042 0208 	orr.w	r2, r2, #8
 800fdec:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	2220      	movs	r2, #32
 800fdf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    huart->RxState = HAL_UART_STATE_READY;
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	2220      	movs	r2, #32
 800fdfa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	2200      	movs	r2, #0
 800fe02:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 800fe04:	6878      	ldr	r0, [r7, #4]
 800fe06:	f000 fbe3 	bl	80105d0 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800fe0a:	2300      	movs	r3, #0
}
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	3788      	adds	r7, #136	@ 0x88
 800fe10:	46bd      	mov	sp, r7
 800fe12:	bd80      	pop	{r7, pc}
 800fe14:	ef7ffffe 	.word	0xef7ffffe
 800fe18:	08011d3b 	.word	0x08011d3b
 800fe1c:	08011dc7 	.word	0x08011dc7

0800fe20 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b0ba      	sub	sp, #232	@ 0xe8
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	69db      	ldr	r3, [r3, #28]
 800fe2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	689b      	ldr	r3, [r3, #8]
 800fe42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800fe46:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800fe4a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800fe4e:	4013      	ands	r3, r2
 800fe50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800fe54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d11b      	bne.n	800fe94 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fe5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fe60:	f003 0320 	and.w	r3, r3, #32
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d015      	beq.n	800fe94 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fe68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fe6c:	f003 0320 	and.w	r3, r3, #32
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d105      	bne.n	800fe80 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fe74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fe78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d009      	beq.n	800fe94 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	f000 8377 	beq.w	8010578 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fe8e:	6878      	ldr	r0, [r7, #4]
 800fe90:	4798      	blx	r3
      }
      return;
 800fe92:	e371      	b.n	8010578 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800fe94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	f000 8123 	beq.w	80100e4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800fe9e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800fea2:	4b8d      	ldr	r3, [pc, #564]	@ (80100d8 <HAL_UART_IRQHandler+0x2b8>)
 800fea4:	4013      	ands	r3, r2
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d106      	bne.n	800feb8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800feaa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800feae:	4b8b      	ldr	r3, [pc, #556]	@ (80100dc <HAL_UART_IRQHandler+0x2bc>)
 800feb0:	4013      	ands	r3, r2
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	f000 8116 	beq.w	80100e4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800feb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800febc:	f003 0301 	and.w	r3, r3, #1
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d011      	beq.n	800fee8 <HAL_UART_IRQHandler+0xc8>
 800fec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fec8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d00b      	beq.n	800fee8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	2201      	movs	r2, #1
 800fed6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fede:	f043 0201 	orr.w	r2, r3, #1
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800feec:	f003 0302 	and.w	r3, r3, #2
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d011      	beq.n	800ff18 <HAL_UART_IRQHandler+0xf8>
 800fef4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fef8:	f003 0301 	and.w	r3, r3, #1
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d00b      	beq.n	800ff18 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	2202      	movs	r2, #2
 800ff06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ff0e:	f043 0204 	orr.w	r2, r3, #4
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ff18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ff1c:	f003 0304 	and.w	r3, r3, #4
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d011      	beq.n	800ff48 <HAL_UART_IRQHandler+0x128>
 800ff24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ff28:	f003 0301 	and.w	r3, r3, #1
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d00b      	beq.n	800ff48 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	2204      	movs	r2, #4
 800ff36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ff3e:	f043 0202 	orr.w	r2, r3, #2
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ff48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ff4c:	f003 0308 	and.w	r3, r3, #8
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d017      	beq.n	800ff84 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ff54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ff58:	f003 0320 	and.w	r3, r3, #32
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d105      	bne.n	800ff6c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ff60:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ff64:	4b5c      	ldr	r3, [pc, #368]	@ (80100d8 <HAL_UART_IRQHandler+0x2b8>)
 800ff66:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d00b      	beq.n	800ff84 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	2208      	movs	r2, #8
 800ff72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ff7a:	f043 0208 	orr.w	r2, r3, #8
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ff84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ff88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d012      	beq.n	800ffb6 <HAL_UART_IRQHandler+0x196>
 800ff90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ff94:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d00c      	beq.n	800ffb6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ffa4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ffac:	f043 0220 	orr.w	r2, r3, #32
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	f000 82dd 	beq.w	801057c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ffc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ffc6:	f003 0320 	and.w	r3, r3, #32
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d013      	beq.n	800fff6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ffce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ffd2:	f003 0320 	and.w	r3, r3, #32
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d105      	bne.n	800ffe6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ffda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ffde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d007      	beq.n	800fff6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d003      	beq.n	800fff6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fff2:	6878      	ldr	r0, [r7, #4]
 800fff4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fffc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	689b      	ldr	r3, [r3, #8]
 8010006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801000a:	2b40      	cmp	r3, #64	@ 0x40
 801000c:	d005      	beq.n	801001a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801000e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8010012:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010016:	2b00      	cmp	r3, #0
 8010018:	d054      	beq.n	80100c4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801001a:	6878      	ldr	r0, [r7, #4]
 801001c:	f001 fd1e 	bl	8011a5c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	689b      	ldr	r3, [r3, #8]
 8010026:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801002a:	2b40      	cmp	r3, #64	@ 0x40
 801002c:	d146      	bne.n	80100bc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	3308      	adds	r3, #8
 8010034:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010038:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801003c:	e853 3f00 	ldrex	r3, [r3]
 8010040:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8010044:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010048:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801004c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	3308      	adds	r3, #8
 8010056:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801005a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801005e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010062:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8010066:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801006a:	e841 2300 	strex	r3, r2, [r1]
 801006e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8010072:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010076:	2b00      	cmp	r3, #0
 8010078:	d1d9      	bne.n	801002e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010080:	2b00      	cmp	r3, #0
 8010082:	d017      	beq.n	80100b4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801008a:	4a15      	ldr	r2, [pc, #84]	@ (80100e0 <HAL_UART_IRQHandler+0x2c0>)
 801008c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010094:	4618      	mov	r0, r3
 8010096:	f7f7 fe29 	bl	8007cec <HAL_DMA_Abort_IT>
 801009a:	4603      	mov	r3, r0
 801009c:	2b00      	cmp	r3, #0
 801009e:	d019      	beq.n	80100d4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80100a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80100a8:	687a      	ldr	r2, [r7, #4]
 80100aa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80100ae:	4610      	mov	r0, r2
 80100b0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80100b2:	e00f      	b.n	80100d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80100b4:	6878      	ldr	r0, [r7, #4]
 80100b6:	f000 fa81 	bl	80105bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80100ba:	e00b      	b.n	80100d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80100bc:	6878      	ldr	r0, [r7, #4]
 80100be:	f000 fa7d 	bl	80105bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80100c2:	e007      	b.n	80100d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80100c4:	6878      	ldr	r0, [r7, #4]
 80100c6:	f000 fa79 	bl	80105bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	2200      	movs	r2, #0
 80100ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80100d2:	e253      	b.n	801057c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80100d4:	bf00      	nop
    return;
 80100d6:	e251      	b.n	801057c <HAL_UART_IRQHandler+0x75c>
 80100d8:	10000001 	.word	0x10000001
 80100dc:	04000120 	.word	0x04000120
 80100e0:	08011d0f 	.word	0x08011d0f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80100e8:	2b01      	cmp	r3, #1
 80100ea:	f040 81e7 	bne.w	80104bc <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80100ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80100f2:	f003 0310 	and.w	r3, r3, #16
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	f000 81e0 	beq.w	80104bc <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80100fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010100:	f003 0310 	and.w	r3, r3, #16
 8010104:	2b00      	cmp	r3, #0
 8010106:	f000 81d9 	beq.w	80104bc <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	2210      	movs	r2, #16
 8010110:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	689b      	ldr	r3, [r3, #8]
 8010118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801011c:	2b40      	cmp	r3, #64	@ 0x40
 801011e:	f040 8151 	bne.w	80103c4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	4a96      	ldr	r2, [pc, #600]	@ (8010384 <HAL_UART_IRQHandler+0x564>)
 801012c:	4293      	cmp	r3, r2
 801012e:	d068      	beq.n	8010202 <HAL_UART_IRQHandler+0x3e2>
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	4a93      	ldr	r2, [pc, #588]	@ (8010388 <HAL_UART_IRQHandler+0x568>)
 801013a:	4293      	cmp	r3, r2
 801013c:	d061      	beq.n	8010202 <HAL_UART_IRQHandler+0x3e2>
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	4a91      	ldr	r2, [pc, #580]	@ (801038c <HAL_UART_IRQHandler+0x56c>)
 8010148:	4293      	cmp	r3, r2
 801014a:	d05a      	beq.n	8010202 <HAL_UART_IRQHandler+0x3e2>
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	4a8e      	ldr	r2, [pc, #568]	@ (8010390 <HAL_UART_IRQHandler+0x570>)
 8010156:	4293      	cmp	r3, r2
 8010158:	d053      	beq.n	8010202 <HAL_UART_IRQHandler+0x3e2>
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	4a8c      	ldr	r2, [pc, #560]	@ (8010394 <HAL_UART_IRQHandler+0x574>)
 8010164:	4293      	cmp	r3, r2
 8010166:	d04c      	beq.n	8010202 <HAL_UART_IRQHandler+0x3e2>
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	4a89      	ldr	r2, [pc, #548]	@ (8010398 <HAL_UART_IRQHandler+0x578>)
 8010172:	4293      	cmp	r3, r2
 8010174:	d045      	beq.n	8010202 <HAL_UART_IRQHandler+0x3e2>
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	4a87      	ldr	r2, [pc, #540]	@ (801039c <HAL_UART_IRQHandler+0x57c>)
 8010180:	4293      	cmp	r3, r2
 8010182:	d03e      	beq.n	8010202 <HAL_UART_IRQHandler+0x3e2>
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	4a84      	ldr	r2, [pc, #528]	@ (80103a0 <HAL_UART_IRQHandler+0x580>)
 801018e:	4293      	cmp	r3, r2
 8010190:	d037      	beq.n	8010202 <HAL_UART_IRQHandler+0x3e2>
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	4a82      	ldr	r2, [pc, #520]	@ (80103a4 <HAL_UART_IRQHandler+0x584>)
 801019c:	4293      	cmp	r3, r2
 801019e:	d030      	beq.n	8010202 <HAL_UART_IRQHandler+0x3e2>
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	4a7f      	ldr	r2, [pc, #508]	@ (80103a8 <HAL_UART_IRQHandler+0x588>)
 80101aa:	4293      	cmp	r3, r2
 80101ac:	d029      	beq.n	8010202 <HAL_UART_IRQHandler+0x3e2>
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	4a7d      	ldr	r2, [pc, #500]	@ (80103ac <HAL_UART_IRQHandler+0x58c>)
 80101b8:	4293      	cmp	r3, r2
 80101ba:	d022      	beq.n	8010202 <HAL_UART_IRQHandler+0x3e2>
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	4a7a      	ldr	r2, [pc, #488]	@ (80103b0 <HAL_UART_IRQHandler+0x590>)
 80101c6:	4293      	cmp	r3, r2
 80101c8:	d01b      	beq.n	8010202 <HAL_UART_IRQHandler+0x3e2>
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	4a78      	ldr	r2, [pc, #480]	@ (80103b4 <HAL_UART_IRQHandler+0x594>)
 80101d4:	4293      	cmp	r3, r2
 80101d6:	d014      	beq.n	8010202 <HAL_UART_IRQHandler+0x3e2>
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	4a75      	ldr	r2, [pc, #468]	@ (80103b8 <HAL_UART_IRQHandler+0x598>)
 80101e2:	4293      	cmp	r3, r2
 80101e4:	d00d      	beq.n	8010202 <HAL_UART_IRQHandler+0x3e2>
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	4a73      	ldr	r2, [pc, #460]	@ (80103bc <HAL_UART_IRQHandler+0x59c>)
 80101f0:	4293      	cmp	r3, r2
 80101f2:	d006      	beq.n	8010202 <HAL_UART_IRQHandler+0x3e2>
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	4a70      	ldr	r2, [pc, #448]	@ (80103c0 <HAL_UART_IRQHandler+0x5a0>)
 80101fe:	4293      	cmp	r3, r2
 8010200:	d106      	bne.n	8010210 <HAL_UART_IRQHandler+0x3f0>
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	685b      	ldr	r3, [r3, #4]
 801020c:	b29b      	uxth	r3, r3
 801020e:	e005      	b.n	801021c <HAL_UART_IRQHandler+0x3fc>
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	685b      	ldr	r3, [r3, #4]
 801021a:	b29b      	uxth	r3, r3
 801021c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010220:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8010224:	2b00      	cmp	r3, #0
 8010226:	f000 81ab 	beq.w	8010580 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010230:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010234:	429a      	cmp	r2, r3
 8010236:	f080 81a3 	bcs.w	8010580 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010240:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801024a:	69db      	ldr	r3, [r3, #28]
 801024c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010250:	f000 8087 	beq.w	8010362 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801025c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010260:	e853 3f00 	ldrex	r3, [r3]
 8010264:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8010268:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801026c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010270:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	461a      	mov	r2, r3
 801027a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801027e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010282:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010286:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801028a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801028e:	e841 2300 	strex	r3, r2, [r1]
 8010292:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8010296:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801029a:	2b00      	cmp	r3, #0
 801029c:	d1da      	bne.n	8010254 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	3308      	adds	r3, #8
 80102a4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80102a8:	e853 3f00 	ldrex	r3, [r3]
 80102ac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80102ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80102b0:	f023 0301 	bic.w	r3, r3, #1
 80102b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	3308      	adds	r3, #8
 80102be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80102c2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80102c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102c8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80102ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80102ce:	e841 2300 	strex	r3, r2, [r1]
 80102d2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80102d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d1e1      	bne.n	801029e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	3308      	adds	r3, #8
 80102e0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80102e4:	e853 3f00 	ldrex	r3, [r3]
 80102e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80102ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80102ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80102f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	3308      	adds	r3, #8
 80102fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80102fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8010300:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010302:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010304:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010306:	e841 2300 	strex	r3, r2, [r1]
 801030a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801030c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801030e:	2b00      	cmp	r3, #0
 8010310:	d1e3      	bne.n	80102da <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	2220      	movs	r2, #32
 8010316:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	2200      	movs	r2, #0
 801031e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010326:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010328:	e853 3f00 	ldrex	r3, [r3]
 801032c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801032e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010330:	f023 0310 	bic.w	r3, r3, #16
 8010334:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	461a      	mov	r2, r3
 801033e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010342:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010344:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010346:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010348:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801034a:	e841 2300 	strex	r3, r2, [r1]
 801034e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010350:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010352:	2b00      	cmp	r3, #0
 8010354:	d1e4      	bne.n	8010320 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801035c:	4618      	mov	r0, r3
 801035e:	f7f7 f9a7 	bl	80076b0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	2202      	movs	r2, #2
 8010366:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010374:	b29b      	uxth	r3, r3
 8010376:	1ad3      	subs	r3, r2, r3
 8010378:	b29b      	uxth	r3, r3
 801037a:	4619      	mov	r1, r3
 801037c:	6878      	ldr	r0, [r7, #4]
 801037e:	f000 f931 	bl	80105e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010382:	e0fd      	b.n	8010580 <HAL_UART_IRQHandler+0x760>
 8010384:	40020010 	.word	0x40020010
 8010388:	40020028 	.word	0x40020028
 801038c:	40020040 	.word	0x40020040
 8010390:	40020058 	.word	0x40020058
 8010394:	40020070 	.word	0x40020070
 8010398:	40020088 	.word	0x40020088
 801039c:	400200a0 	.word	0x400200a0
 80103a0:	400200b8 	.word	0x400200b8
 80103a4:	40020410 	.word	0x40020410
 80103a8:	40020428 	.word	0x40020428
 80103ac:	40020440 	.word	0x40020440
 80103b0:	40020458 	.word	0x40020458
 80103b4:	40020470 	.word	0x40020470
 80103b8:	40020488 	.word	0x40020488
 80103bc:	400204a0 	.word	0x400204a0
 80103c0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80103d0:	b29b      	uxth	r3, r3
 80103d2:	1ad3      	subs	r3, r2, r3
 80103d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80103de:	b29b      	uxth	r3, r3
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	f000 80cf 	beq.w	8010584 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80103e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	f000 80ca 	beq.w	8010584 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103f8:	e853 3f00 	ldrex	r3, [r3]
 80103fc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80103fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010400:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010404:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	461a      	mov	r2, r3
 801040e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8010412:	647b      	str	r3, [r7, #68]	@ 0x44
 8010414:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010416:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010418:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801041a:	e841 2300 	strex	r3, r2, [r1]
 801041e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010420:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010422:	2b00      	cmp	r3, #0
 8010424:	d1e4      	bne.n	80103f0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	3308      	adds	r3, #8
 801042c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801042e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010430:	e853 3f00 	ldrex	r3, [r3]
 8010434:	623b      	str	r3, [r7, #32]
   return(result);
 8010436:	6a3a      	ldr	r2, [r7, #32]
 8010438:	4b55      	ldr	r3, [pc, #340]	@ (8010590 <HAL_UART_IRQHandler+0x770>)
 801043a:	4013      	ands	r3, r2
 801043c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	3308      	adds	r3, #8
 8010446:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801044a:	633a      	str	r2, [r7, #48]	@ 0x30
 801044c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801044e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010450:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010452:	e841 2300 	strex	r3, r2, [r1]
 8010456:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801045a:	2b00      	cmp	r3, #0
 801045c:	d1e3      	bne.n	8010426 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	2220      	movs	r2, #32
 8010462:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	2200      	movs	r2, #0
 801046a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	2200      	movs	r2, #0
 8010470:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010478:	693b      	ldr	r3, [r7, #16]
 801047a:	e853 3f00 	ldrex	r3, [r3]
 801047e:	60fb      	str	r3, [r7, #12]
   return(result);
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	f023 0310 	bic.w	r3, r3, #16
 8010486:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	461a      	mov	r2, r3
 8010490:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8010494:	61fb      	str	r3, [r7, #28]
 8010496:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010498:	69b9      	ldr	r1, [r7, #24]
 801049a:	69fa      	ldr	r2, [r7, #28]
 801049c:	e841 2300 	strex	r3, r2, [r1]
 80104a0:	617b      	str	r3, [r7, #20]
   return(result);
 80104a2:	697b      	ldr	r3, [r7, #20]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d1e4      	bne.n	8010472 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	2202      	movs	r2, #2
 80104ac:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80104ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80104b2:	4619      	mov	r1, r3
 80104b4:	6878      	ldr	r0, [r7, #4]
 80104b6:	f000 f895 	bl	80105e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80104ba:	e063      	b.n	8010584 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80104bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80104c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d00e      	beq.n	80104e6 <HAL_UART_IRQHandler+0x6c6>
 80104c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80104cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d008      	beq.n	80104e6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80104dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80104de:	6878      	ldr	r0, [r7, #4]
 80104e0:	f002 fb9a 	bl	8012c18 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80104e4:	e051      	b.n	801058a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80104e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80104ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d014      	beq.n	801051c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80104f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80104f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d105      	bne.n	801050a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80104fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010502:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010506:	2b00      	cmp	r3, #0
 8010508:	d008      	beq.n	801051c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801050e:	2b00      	cmp	r3, #0
 8010510:	d03a      	beq.n	8010588 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010516:	6878      	ldr	r0, [r7, #4]
 8010518:	4798      	blx	r3
    }
    return;
 801051a:	e035      	b.n	8010588 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801051c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010524:	2b00      	cmp	r3, #0
 8010526:	d009      	beq.n	801053c <HAL_UART_IRQHandler+0x71c>
 8010528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801052c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010530:	2b00      	cmp	r3, #0
 8010532:	d003      	beq.n	801053c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8010534:	6878      	ldr	r0, [r7, #4]
 8010536:	f001 fe28 	bl	801218a <UART_EndTransmit_IT>
    return;
 801053a:	e026      	b.n	801058a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801053c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010540:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010544:	2b00      	cmp	r3, #0
 8010546:	d009      	beq.n	801055c <HAL_UART_IRQHandler+0x73c>
 8010548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801054c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010550:	2b00      	cmp	r3, #0
 8010552:	d003      	beq.n	801055c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010554:	6878      	ldr	r0, [r7, #4]
 8010556:	f002 fb73 	bl	8012c40 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801055a:	e016      	b.n	801058a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801055c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010560:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010564:	2b00      	cmp	r3, #0
 8010566:	d010      	beq.n	801058a <HAL_UART_IRQHandler+0x76a>
 8010568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801056c:	2b00      	cmp	r3, #0
 801056e:	da0c      	bge.n	801058a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010570:	6878      	ldr	r0, [r7, #4]
 8010572:	f002 fb5b 	bl	8012c2c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010576:	e008      	b.n	801058a <HAL_UART_IRQHandler+0x76a>
      return;
 8010578:	bf00      	nop
 801057a:	e006      	b.n	801058a <HAL_UART_IRQHandler+0x76a>
    return;
 801057c:	bf00      	nop
 801057e:	e004      	b.n	801058a <HAL_UART_IRQHandler+0x76a>
      return;
 8010580:	bf00      	nop
 8010582:	e002      	b.n	801058a <HAL_UART_IRQHandler+0x76a>
      return;
 8010584:	bf00      	nop
 8010586:	e000      	b.n	801058a <HAL_UART_IRQHandler+0x76a>
    return;
 8010588:	bf00      	nop
  }
}
 801058a:	37e8      	adds	r7, #232	@ 0xe8
 801058c:	46bd      	mov	sp, r7
 801058e:	bd80      	pop	{r7, pc}
 8010590:	effffffe 	.word	0xeffffffe

08010594 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010594:	b480      	push	{r7}
 8010596:	b083      	sub	sp, #12
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801059c:	bf00      	nop
 801059e:	370c      	adds	r7, #12
 80105a0:	46bd      	mov	sp, r7
 80105a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a6:	4770      	bx	lr

080105a8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80105a8:	b480      	push	{r7}
 80105aa:	b083      	sub	sp, #12
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80105b0:	bf00      	nop
 80105b2:	370c      	adds	r7, #12
 80105b4:	46bd      	mov	sp, r7
 80105b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ba:	4770      	bx	lr

080105bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80105bc:	b480      	push	{r7}
 80105be:	b083      	sub	sp, #12
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80105c4:	bf00      	nop
 80105c6:	370c      	adds	r7, #12
 80105c8:	46bd      	mov	sp, r7
 80105ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ce:	4770      	bx	lr

080105d0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80105d0:	b480      	push	{r7}
 80105d2:	b083      	sub	sp, #12
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80105d8:	bf00      	nop
 80105da:	370c      	adds	r7, #12
 80105dc:	46bd      	mov	sp, r7
 80105de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e2:	4770      	bx	lr

080105e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80105e4:	b480      	push	{r7}
 80105e6:	b083      	sub	sp, #12
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	6078      	str	r0, [r7, #4]
 80105ec:	460b      	mov	r3, r1
 80105ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80105f0:	bf00      	nop
 80105f2:	370c      	adds	r7, #12
 80105f4:	46bd      	mov	sp, r7
 80105f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fa:	4770      	bx	lr

080105fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80105fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010600:	b092      	sub	sp, #72	@ 0x48
 8010602:	af00      	add	r7, sp, #0
 8010604:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010606:	2300      	movs	r3, #0
 8010608:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801060c:	697b      	ldr	r3, [r7, #20]
 801060e:	689a      	ldr	r2, [r3, #8]
 8010610:	697b      	ldr	r3, [r7, #20]
 8010612:	691b      	ldr	r3, [r3, #16]
 8010614:	431a      	orrs	r2, r3
 8010616:	697b      	ldr	r3, [r7, #20]
 8010618:	695b      	ldr	r3, [r3, #20]
 801061a:	431a      	orrs	r2, r3
 801061c:	697b      	ldr	r3, [r7, #20]
 801061e:	69db      	ldr	r3, [r3, #28]
 8010620:	4313      	orrs	r3, r2
 8010622:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010624:	697b      	ldr	r3, [r7, #20]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	681a      	ldr	r2, [r3, #0]
 801062a:	4bbe      	ldr	r3, [pc, #760]	@ (8010924 <UART_SetConfig+0x328>)
 801062c:	4013      	ands	r3, r2
 801062e:	697a      	ldr	r2, [r7, #20]
 8010630:	6812      	ldr	r2, [r2, #0]
 8010632:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010634:	430b      	orrs	r3, r1
 8010636:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010638:	697b      	ldr	r3, [r7, #20]
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	685b      	ldr	r3, [r3, #4]
 801063e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8010642:	697b      	ldr	r3, [r7, #20]
 8010644:	68da      	ldr	r2, [r3, #12]
 8010646:	697b      	ldr	r3, [r7, #20]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	430a      	orrs	r2, r1
 801064c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801064e:	697b      	ldr	r3, [r7, #20]
 8010650:	699b      	ldr	r3, [r3, #24]
 8010652:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010654:	697b      	ldr	r3, [r7, #20]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	4ab3      	ldr	r2, [pc, #716]	@ (8010928 <UART_SetConfig+0x32c>)
 801065a:	4293      	cmp	r3, r2
 801065c:	d004      	beq.n	8010668 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801065e:	697b      	ldr	r3, [r7, #20]
 8010660:	6a1b      	ldr	r3, [r3, #32]
 8010662:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010664:	4313      	orrs	r3, r2
 8010666:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010668:	697b      	ldr	r3, [r7, #20]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	689a      	ldr	r2, [r3, #8]
 801066e:	4baf      	ldr	r3, [pc, #700]	@ (801092c <UART_SetConfig+0x330>)
 8010670:	4013      	ands	r3, r2
 8010672:	697a      	ldr	r2, [r7, #20]
 8010674:	6812      	ldr	r2, [r2, #0]
 8010676:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010678:	430b      	orrs	r3, r1
 801067a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801067c:	697b      	ldr	r3, [r7, #20]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010682:	f023 010f 	bic.w	r1, r3, #15
 8010686:	697b      	ldr	r3, [r7, #20]
 8010688:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801068a:	697b      	ldr	r3, [r7, #20]
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	430a      	orrs	r2, r1
 8010690:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010692:	697b      	ldr	r3, [r7, #20]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	4aa6      	ldr	r2, [pc, #664]	@ (8010930 <UART_SetConfig+0x334>)
 8010698:	4293      	cmp	r3, r2
 801069a:	d177      	bne.n	801078c <UART_SetConfig+0x190>
 801069c:	4ba5      	ldr	r3, [pc, #660]	@ (8010934 <UART_SetConfig+0x338>)
 801069e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80106a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80106a4:	2b28      	cmp	r3, #40	@ 0x28
 80106a6:	d86d      	bhi.n	8010784 <UART_SetConfig+0x188>
 80106a8:	a201      	add	r2, pc, #4	@ (adr r2, 80106b0 <UART_SetConfig+0xb4>)
 80106aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106ae:	bf00      	nop
 80106b0:	08010755 	.word	0x08010755
 80106b4:	08010785 	.word	0x08010785
 80106b8:	08010785 	.word	0x08010785
 80106bc:	08010785 	.word	0x08010785
 80106c0:	08010785 	.word	0x08010785
 80106c4:	08010785 	.word	0x08010785
 80106c8:	08010785 	.word	0x08010785
 80106cc:	08010785 	.word	0x08010785
 80106d0:	0801075d 	.word	0x0801075d
 80106d4:	08010785 	.word	0x08010785
 80106d8:	08010785 	.word	0x08010785
 80106dc:	08010785 	.word	0x08010785
 80106e0:	08010785 	.word	0x08010785
 80106e4:	08010785 	.word	0x08010785
 80106e8:	08010785 	.word	0x08010785
 80106ec:	08010785 	.word	0x08010785
 80106f0:	08010765 	.word	0x08010765
 80106f4:	08010785 	.word	0x08010785
 80106f8:	08010785 	.word	0x08010785
 80106fc:	08010785 	.word	0x08010785
 8010700:	08010785 	.word	0x08010785
 8010704:	08010785 	.word	0x08010785
 8010708:	08010785 	.word	0x08010785
 801070c:	08010785 	.word	0x08010785
 8010710:	0801076d 	.word	0x0801076d
 8010714:	08010785 	.word	0x08010785
 8010718:	08010785 	.word	0x08010785
 801071c:	08010785 	.word	0x08010785
 8010720:	08010785 	.word	0x08010785
 8010724:	08010785 	.word	0x08010785
 8010728:	08010785 	.word	0x08010785
 801072c:	08010785 	.word	0x08010785
 8010730:	08010775 	.word	0x08010775
 8010734:	08010785 	.word	0x08010785
 8010738:	08010785 	.word	0x08010785
 801073c:	08010785 	.word	0x08010785
 8010740:	08010785 	.word	0x08010785
 8010744:	08010785 	.word	0x08010785
 8010748:	08010785 	.word	0x08010785
 801074c:	08010785 	.word	0x08010785
 8010750:	0801077d 	.word	0x0801077d
 8010754:	2301      	movs	r3, #1
 8010756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801075a:	e326      	b.n	8010daa <UART_SetConfig+0x7ae>
 801075c:	2304      	movs	r3, #4
 801075e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010762:	e322      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010764:	2308      	movs	r3, #8
 8010766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801076a:	e31e      	b.n	8010daa <UART_SetConfig+0x7ae>
 801076c:	2310      	movs	r3, #16
 801076e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010772:	e31a      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010774:	2320      	movs	r3, #32
 8010776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801077a:	e316      	b.n	8010daa <UART_SetConfig+0x7ae>
 801077c:	2340      	movs	r3, #64	@ 0x40
 801077e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010782:	e312      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010784:	2380      	movs	r3, #128	@ 0x80
 8010786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801078a:	e30e      	b.n	8010daa <UART_SetConfig+0x7ae>
 801078c:	697b      	ldr	r3, [r7, #20]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	4a69      	ldr	r2, [pc, #420]	@ (8010938 <UART_SetConfig+0x33c>)
 8010792:	4293      	cmp	r3, r2
 8010794:	d130      	bne.n	80107f8 <UART_SetConfig+0x1fc>
 8010796:	4b67      	ldr	r3, [pc, #412]	@ (8010934 <UART_SetConfig+0x338>)
 8010798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801079a:	f003 0307 	and.w	r3, r3, #7
 801079e:	2b05      	cmp	r3, #5
 80107a0:	d826      	bhi.n	80107f0 <UART_SetConfig+0x1f4>
 80107a2:	a201      	add	r2, pc, #4	@ (adr r2, 80107a8 <UART_SetConfig+0x1ac>)
 80107a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107a8:	080107c1 	.word	0x080107c1
 80107ac:	080107c9 	.word	0x080107c9
 80107b0:	080107d1 	.word	0x080107d1
 80107b4:	080107d9 	.word	0x080107d9
 80107b8:	080107e1 	.word	0x080107e1
 80107bc:	080107e9 	.word	0x080107e9
 80107c0:	2300      	movs	r3, #0
 80107c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107c6:	e2f0      	b.n	8010daa <UART_SetConfig+0x7ae>
 80107c8:	2304      	movs	r3, #4
 80107ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107ce:	e2ec      	b.n	8010daa <UART_SetConfig+0x7ae>
 80107d0:	2308      	movs	r3, #8
 80107d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107d6:	e2e8      	b.n	8010daa <UART_SetConfig+0x7ae>
 80107d8:	2310      	movs	r3, #16
 80107da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107de:	e2e4      	b.n	8010daa <UART_SetConfig+0x7ae>
 80107e0:	2320      	movs	r3, #32
 80107e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107e6:	e2e0      	b.n	8010daa <UART_SetConfig+0x7ae>
 80107e8:	2340      	movs	r3, #64	@ 0x40
 80107ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107ee:	e2dc      	b.n	8010daa <UART_SetConfig+0x7ae>
 80107f0:	2380      	movs	r3, #128	@ 0x80
 80107f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107f6:	e2d8      	b.n	8010daa <UART_SetConfig+0x7ae>
 80107f8:	697b      	ldr	r3, [r7, #20]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	4a4f      	ldr	r2, [pc, #316]	@ (801093c <UART_SetConfig+0x340>)
 80107fe:	4293      	cmp	r3, r2
 8010800:	d130      	bne.n	8010864 <UART_SetConfig+0x268>
 8010802:	4b4c      	ldr	r3, [pc, #304]	@ (8010934 <UART_SetConfig+0x338>)
 8010804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010806:	f003 0307 	and.w	r3, r3, #7
 801080a:	2b05      	cmp	r3, #5
 801080c:	d826      	bhi.n	801085c <UART_SetConfig+0x260>
 801080e:	a201      	add	r2, pc, #4	@ (adr r2, 8010814 <UART_SetConfig+0x218>)
 8010810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010814:	0801082d 	.word	0x0801082d
 8010818:	08010835 	.word	0x08010835
 801081c:	0801083d 	.word	0x0801083d
 8010820:	08010845 	.word	0x08010845
 8010824:	0801084d 	.word	0x0801084d
 8010828:	08010855 	.word	0x08010855
 801082c:	2300      	movs	r3, #0
 801082e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010832:	e2ba      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010834:	2304      	movs	r3, #4
 8010836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801083a:	e2b6      	b.n	8010daa <UART_SetConfig+0x7ae>
 801083c:	2308      	movs	r3, #8
 801083e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010842:	e2b2      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010844:	2310      	movs	r3, #16
 8010846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801084a:	e2ae      	b.n	8010daa <UART_SetConfig+0x7ae>
 801084c:	2320      	movs	r3, #32
 801084e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010852:	e2aa      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010854:	2340      	movs	r3, #64	@ 0x40
 8010856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801085a:	e2a6      	b.n	8010daa <UART_SetConfig+0x7ae>
 801085c:	2380      	movs	r3, #128	@ 0x80
 801085e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010862:	e2a2      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010864:	697b      	ldr	r3, [r7, #20]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	4a35      	ldr	r2, [pc, #212]	@ (8010940 <UART_SetConfig+0x344>)
 801086a:	4293      	cmp	r3, r2
 801086c:	d130      	bne.n	80108d0 <UART_SetConfig+0x2d4>
 801086e:	4b31      	ldr	r3, [pc, #196]	@ (8010934 <UART_SetConfig+0x338>)
 8010870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010872:	f003 0307 	and.w	r3, r3, #7
 8010876:	2b05      	cmp	r3, #5
 8010878:	d826      	bhi.n	80108c8 <UART_SetConfig+0x2cc>
 801087a:	a201      	add	r2, pc, #4	@ (adr r2, 8010880 <UART_SetConfig+0x284>)
 801087c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010880:	08010899 	.word	0x08010899
 8010884:	080108a1 	.word	0x080108a1
 8010888:	080108a9 	.word	0x080108a9
 801088c:	080108b1 	.word	0x080108b1
 8010890:	080108b9 	.word	0x080108b9
 8010894:	080108c1 	.word	0x080108c1
 8010898:	2300      	movs	r3, #0
 801089a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801089e:	e284      	b.n	8010daa <UART_SetConfig+0x7ae>
 80108a0:	2304      	movs	r3, #4
 80108a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108a6:	e280      	b.n	8010daa <UART_SetConfig+0x7ae>
 80108a8:	2308      	movs	r3, #8
 80108aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108ae:	e27c      	b.n	8010daa <UART_SetConfig+0x7ae>
 80108b0:	2310      	movs	r3, #16
 80108b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108b6:	e278      	b.n	8010daa <UART_SetConfig+0x7ae>
 80108b8:	2320      	movs	r3, #32
 80108ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108be:	e274      	b.n	8010daa <UART_SetConfig+0x7ae>
 80108c0:	2340      	movs	r3, #64	@ 0x40
 80108c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108c6:	e270      	b.n	8010daa <UART_SetConfig+0x7ae>
 80108c8:	2380      	movs	r3, #128	@ 0x80
 80108ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108ce:	e26c      	b.n	8010daa <UART_SetConfig+0x7ae>
 80108d0:	697b      	ldr	r3, [r7, #20]
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	4a1b      	ldr	r2, [pc, #108]	@ (8010944 <UART_SetConfig+0x348>)
 80108d6:	4293      	cmp	r3, r2
 80108d8:	d142      	bne.n	8010960 <UART_SetConfig+0x364>
 80108da:	4b16      	ldr	r3, [pc, #88]	@ (8010934 <UART_SetConfig+0x338>)
 80108dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80108de:	f003 0307 	and.w	r3, r3, #7
 80108e2:	2b05      	cmp	r3, #5
 80108e4:	d838      	bhi.n	8010958 <UART_SetConfig+0x35c>
 80108e6:	a201      	add	r2, pc, #4	@ (adr r2, 80108ec <UART_SetConfig+0x2f0>)
 80108e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108ec:	08010905 	.word	0x08010905
 80108f0:	0801090d 	.word	0x0801090d
 80108f4:	08010915 	.word	0x08010915
 80108f8:	0801091d 	.word	0x0801091d
 80108fc:	08010949 	.word	0x08010949
 8010900:	08010951 	.word	0x08010951
 8010904:	2300      	movs	r3, #0
 8010906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801090a:	e24e      	b.n	8010daa <UART_SetConfig+0x7ae>
 801090c:	2304      	movs	r3, #4
 801090e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010912:	e24a      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010914:	2308      	movs	r3, #8
 8010916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801091a:	e246      	b.n	8010daa <UART_SetConfig+0x7ae>
 801091c:	2310      	movs	r3, #16
 801091e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010922:	e242      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010924:	cfff69f3 	.word	0xcfff69f3
 8010928:	58000c00 	.word	0x58000c00
 801092c:	11fff4ff 	.word	0x11fff4ff
 8010930:	40011000 	.word	0x40011000
 8010934:	58024400 	.word	0x58024400
 8010938:	40004400 	.word	0x40004400
 801093c:	40004800 	.word	0x40004800
 8010940:	40004c00 	.word	0x40004c00
 8010944:	40005000 	.word	0x40005000
 8010948:	2320      	movs	r3, #32
 801094a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801094e:	e22c      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010950:	2340      	movs	r3, #64	@ 0x40
 8010952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010956:	e228      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010958:	2380      	movs	r3, #128	@ 0x80
 801095a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801095e:	e224      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010960:	697b      	ldr	r3, [r7, #20]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	4ab1      	ldr	r2, [pc, #708]	@ (8010c2c <UART_SetConfig+0x630>)
 8010966:	4293      	cmp	r3, r2
 8010968:	d176      	bne.n	8010a58 <UART_SetConfig+0x45c>
 801096a:	4bb1      	ldr	r3, [pc, #708]	@ (8010c30 <UART_SetConfig+0x634>)
 801096c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801096e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010972:	2b28      	cmp	r3, #40	@ 0x28
 8010974:	d86c      	bhi.n	8010a50 <UART_SetConfig+0x454>
 8010976:	a201      	add	r2, pc, #4	@ (adr r2, 801097c <UART_SetConfig+0x380>)
 8010978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801097c:	08010a21 	.word	0x08010a21
 8010980:	08010a51 	.word	0x08010a51
 8010984:	08010a51 	.word	0x08010a51
 8010988:	08010a51 	.word	0x08010a51
 801098c:	08010a51 	.word	0x08010a51
 8010990:	08010a51 	.word	0x08010a51
 8010994:	08010a51 	.word	0x08010a51
 8010998:	08010a51 	.word	0x08010a51
 801099c:	08010a29 	.word	0x08010a29
 80109a0:	08010a51 	.word	0x08010a51
 80109a4:	08010a51 	.word	0x08010a51
 80109a8:	08010a51 	.word	0x08010a51
 80109ac:	08010a51 	.word	0x08010a51
 80109b0:	08010a51 	.word	0x08010a51
 80109b4:	08010a51 	.word	0x08010a51
 80109b8:	08010a51 	.word	0x08010a51
 80109bc:	08010a31 	.word	0x08010a31
 80109c0:	08010a51 	.word	0x08010a51
 80109c4:	08010a51 	.word	0x08010a51
 80109c8:	08010a51 	.word	0x08010a51
 80109cc:	08010a51 	.word	0x08010a51
 80109d0:	08010a51 	.word	0x08010a51
 80109d4:	08010a51 	.word	0x08010a51
 80109d8:	08010a51 	.word	0x08010a51
 80109dc:	08010a39 	.word	0x08010a39
 80109e0:	08010a51 	.word	0x08010a51
 80109e4:	08010a51 	.word	0x08010a51
 80109e8:	08010a51 	.word	0x08010a51
 80109ec:	08010a51 	.word	0x08010a51
 80109f0:	08010a51 	.word	0x08010a51
 80109f4:	08010a51 	.word	0x08010a51
 80109f8:	08010a51 	.word	0x08010a51
 80109fc:	08010a41 	.word	0x08010a41
 8010a00:	08010a51 	.word	0x08010a51
 8010a04:	08010a51 	.word	0x08010a51
 8010a08:	08010a51 	.word	0x08010a51
 8010a0c:	08010a51 	.word	0x08010a51
 8010a10:	08010a51 	.word	0x08010a51
 8010a14:	08010a51 	.word	0x08010a51
 8010a18:	08010a51 	.word	0x08010a51
 8010a1c:	08010a49 	.word	0x08010a49
 8010a20:	2301      	movs	r3, #1
 8010a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a26:	e1c0      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010a28:	2304      	movs	r3, #4
 8010a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a2e:	e1bc      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010a30:	2308      	movs	r3, #8
 8010a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a36:	e1b8      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010a38:	2310      	movs	r3, #16
 8010a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a3e:	e1b4      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010a40:	2320      	movs	r3, #32
 8010a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a46:	e1b0      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010a48:	2340      	movs	r3, #64	@ 0x40
 8010a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a4e:	e1ac      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010a50:	2380      	movs	r3, #128	@ 0x80
 8010a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a56:	e1a8      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010a58:	697b      	ldr	r3, [r7, #20]
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	4a75      	ldr	r2, [pc, #468]	@ (8010c34 <UART_SetConfig+0x638>)
 8010a5e:	4293      	cmp	r3, r2
 8010a60:	d130      	bne.n	8010ac4 <UART_SetConfig+0x4c8>
 8010a62:	4b73      	ldr	r3, [pc, #460]	@ (8010c30 <UART_SetConfig+0x634>)
 8010a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010a66:	f003 0307 	and.w	r3, r3, #7
 8010a6a:	2b05      	cmp	r3, #5
 8010a6c:	d826      	bhi.n	8010abc <UART_SetConfig+0x4c0>
 8010a6e:	a201      	add	r2, pc, #4	@ (adr r2, 8010a74 <UART_SetConfig+0x478>)
 8010a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a74:	08010a8d 	.word	0x08010a8d
 8010a78:	08010a95 	.word	0x08010a95
 8010a7c:	08010a9d 	.word	0x08010a9d
 8010a80:	08010aa5 	.word	0x08010aa5
 8010a84:	08010aad 	.word	0x08010aad
 8010a88:	08010ab5 	.word	0x08010ab5
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a92:	e18a      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010a94:	2304      	movs	r3, #4
 8010a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a9a:	e186      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010a9c:	2308      	movs	r3, #8
 8010a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010aa2:	e182      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010aa4:	2310      	movs	r3, #16
 8010aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010aaa:	e17e      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010aac:	2320      	movs	r3, #32
 8010aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ab2:	e17a      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010ab4:	2340      	movs	r3, #64	@ 0x40
 8010ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010aba:	e176      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010abc:	2380      	movs	r3, #128	@ 0x80
 8010abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ac2:	e172      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010ac4:	697b      	ldr	r3, [r7, #20]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	4a5b      	ldr	r2, [pc, #364]	@ (8010c38 <UART_SetConfig+0x63c>)
 8010aca:	4293      	cmp	r3, r2
 8010acc:	d130      	bne.n	8010b30 <UART_SetConfig+0x534>
 8010ace:	4b58      	ldr	r3, [pc, #352]	@ (8010c30 <UART_SetConfig+0x634>)
 8010ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010ad2:	f003 0307 	and.w	r3, r3, #7
 8010ad6:	2b05      	cmp	r3, #5
 8010ad8:	d826      	bhi.n	8010b28 <UART_SetConfig+0x52c>
 8010ada:	a201      	add	r2, pc, #4	@ (adr r2, 8010ae0 <UART_SetConfig+0x4e4>)
 8010adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ae0:	08010af9 	.word	0x08010af9
 8010ae4:	08010b01 	.word	0x08010b01
 8010ae8:	08010b09 	.word	0x08010b09
 8010aec:	08010b11 	.word	0x08010b11
 8010af0:	08010b19 	.word	0x08010b19
 8010af4:	08010b21 	.word	0x08010b21
 8010af8:	2300      	movs	r3, #0
 8010afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010afe:	e154      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010b00:	2304      	movs	r3, #4
 8010b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b06:	e150      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010b08:	2308      	movs	r3, #8
 8010b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b0e:	e14c      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010b10:	2310      	movs	r3, #16
 8010b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b16:	e148      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010b18:	2320      	movs	r3, #32
 8010b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b1e:	e144      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010b20:	2340      	movs	r3, #64	@ 0x40
 8010b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b26:	e140      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010b28:	2380      	movs	r3, #128	@ 0x80
 8010b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b2e:	e13c      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010b30:	697b      	ldr	r3, [r7, #20]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	4a41      	ldr	r2, [pc, #260]	@ (8010c3c <UART_SetConfig+0x640>)
 8010b36:	4293      	cmp	r3, r2
 8010b38:	f040 8082 	bne.w	8010c40 <UART_SetConfig+0x644>
 8010b3c:	4b3c      	ldr	r3, [pc, #240]	@ (8010c30 <UART_SetConfig+0x634>)
 8010b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010b40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010b44:	2b28      	cmp	r3, #40	@ 0x28
 8010b46:	d86d      	bhi.n	8010c24 <UART_SetConfig+0x628>
 8010b48:	a201      	add	r2, pc, #4	@ (adr r2, 8010b50 <UART_SetConfig+0x554>)
 8010b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b4e:	bf00      	nop
 8010b50:	08010bf5 	.word	0x08010bf5
 8010b54:	08010c25 	.word	0x08010c25
 8010b58:	08010c25 	.word	0x08010c25
 8010b5c:	08010c25 	.word	0x08010c25
 8010b60:	08010c25 	.word	0x08010c25
 8010b64:	08010c25 	.word	0x08010c25
 8010b68:	08010c25 	.word	0x08010c25
 8010b6c:	08010c25 	.word	0x08010c25
 8010b70:	08010bfd 	.word	0x08010bfd
 8010b74:	08010c25 	.word	0x08010c25
 8010b78:	08010c25 	.word	0x08010c25
 8010b7c:	08010c25 	.word	0x08010c25
 8010b80:	08010c25 	.word	0x08010c25
 8010b84:	08010c25 	.word	0x08010c25
 8010b88:	08010c25 	.word	0x08010c25
 8010b8c:	08010c25 	.word	0x08010c25
 8010b90:	08010c05 	.word	0x08010c05
 8010b94:	08010c25 	.word	0x08010c25
 8010b98:	08010c25 	.word	0x08010c25
 8010b9c:	08010c25 	.word	0x08010c25
 8010ba0:	08010c25 	.word	0x08010c25
 8010ba4:	08010c25 	.word	0x08010c25
 8010ba8:	08010c25 	.word	0x08010c25
 8010bac:	08010c25 	.word	0x08010c25
 8010bb0:	08010c0d 	.word	0x08010c0d
 8010bb4:	08010c25 	.word	0x08010c25
 8010bb8:	08010c25 	.word	0x08010c25
 8010bbc:	08010c25 	.word	0x08010c25
 8010bc0:	08010c25 	.word	0x08010c25
 8010bc4:	08010c25 	.word	0x08010c25
 8010bc8:	08010c25 	.word	0x08010c25
 8010bcc:	08010c25 	.word	0x08010c25
 8010bd0:	08010c15 	.word	0x08010c15
 8010bd4:	08010c25 	.word	0x08010c25
 8010bd8:	08010c25 	.word	0x08010c25
 8010bdc:	08010c25 	.word	0x08010c25
 8010be0:	08010c25 	.word	0x08010c25
 8010be4:	08010c25 	.word	0x08010c25
 8010be8:	08010c25 	.word	0x08010c25
 8010bec:	08010c25 	.word	0x08010c25
 8010bf0:	08010c1d 	.word	0x08010c1d
 8010bf4:	2301      	movs	r3, #1
 8010bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010bfa:	e0d6      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010bfc:	2304      	movs	r3, #4
 8010bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c02:	e0d2      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010c04:	2308      	movs	r3, #8
 8010c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c0a:	e0ce      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010c0c:	2310      	movs	r3, #16
 8010c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c12:	e0ca      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010c14:	2320      	movs	r3, #32
 8010c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c1a:	e0c6      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010c1c:	2340      	movs	r3, #64	@ 0x40
 8010c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c22:	e0c2      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010c24:	2380      	movs	r3, #128	@ 0x80
 8010c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c2a:	e0be      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010c2c:	40011400 	.word	0x40011400
 8010c30:	58024400 	.word	0x58024400
 8010c34:	40007800 	.word	0x40007800
 8010c38:	40007c00 	.word	0x40007c00
 8010c3c:	40011800 	.word	0x40011800
 8010c40:	697b      	ldr	r3, [r7, #20]
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	4aad      	ldr	r2, [pc, #692]	@ (8010efc <UART_SetConfig+0x900>)
 8010c46:	4293      	cmp	r3, r2
 8010c48:	d176      	bne.n	8010d38 <UART_SetConfig+0x73c>
 8010c4a:	4bad      	ldr	r3, [pc, #692]	@ (8010f00 <UART_SetConfig+0x904>)
 8010c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010c4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010c52:	2b28      	cmp	r3, #40	@ 0x28
 8010c54:	d86c      	bhi.n	8010d30 <UART_SetConfig+0x734>
 8010c56:	a201      	add	r2, pc, #4	@ (adr r2, 8010c5c <UART_SetConfig+0x660>)
 8010c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c5c:	08010d01 	.word	0x08010d01
 8010c60:	08010d31 	.word	0x08010d31
 8010c64:	08010d31 	.word	0x08010d31
 8010c68:	08010d31 	.word	0x08010d31
 8010c6c:	08010d31 	.word	0x08010d31
 8010c70:	08010d31 	.word	0x08010d31
 8010c74:	08010d31 	.word	0x08010d31
 8010c78:	08010d31 	.word	0x08010d31
 8010c7c:	08010d09 	.word	0x08010d09
 8010c80:	08010d31 	.word	0x08010d31
 8010c84:	08010d31 	.word	0x08010d31
 8010c88:	08010d31 	.word	0x08010d31
 8010c8c:	08010d31 	.word	0x08010d31
 8010c90:	08010d31 	.word	0x08010d31
 8010c94:	08010d31 	.word	0x08010d31
 8010c98:	08010d31 	.word	0x08010d31
 8010c9c:	08010d11 	.word	0x08010d11
 8010ca0:	08010d31 	.word	0x08010d31
 8010ca4:	08010d31 	.word	0x08010d31
 8010ca8:	08010d31 	.word	0x08010d31
 8010cac:	08010d31 	.word	0x08010d31
 8010cb0:	08010d31 	.word	0x08010d31
 8010cb4:	08010d31 	.word	0x08010d31
 8010cb8:	08010d31 	.word	0x08010d31
 8010cbc:	08010d19 	.word	0x08010d19
 8010cc0:	08010d31 	.word	0x08010d31
 8010cc4:	08010d31 	.word	0x08010d31
 8010cc8:	08010d31 	.word	0x08010d31
 8010ccc:	08010d31 	.word	0x08010d31
 8010cd0:	08010d31 	.word	0x08010d31
 8010cd4:	08010d31 	.word	0x08010d31
 8010cd8:	08010d31 	.word	0x08010d31
 8010cdc:	08010d21 	.word	0x08010d21
 8010ce0:	08010d31 	.word	0x08010d31
 8010ce4:	08010d31 	.word	0x08010d31
 8010ce8:	08010d31 	.word	0x08010d31
 8010cec:	08010d31 	.word	0x08010d31
 8010cf0:	08010d31 	.word	0x08010d31
 8010cf4:	08010d31 	.word	0x08010d31
 8010cf8:	08010d31 	.word	0x08010d31
 8010cfc:	08010d29 	.word	0x08010d29
 8010d00:	2301      	movs	r3, #1
 8010d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d06:	e050      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010d08:	2304      	movs	r3, #4
 8010d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d0e:	e04c      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010d10:	2308      	movs	r3, #8
 8010d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d16:	e048      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010d18:	2310      	movs	r3, #16
 8010d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d1e:	e044      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010d20:	2320      	movs	r3, #32
 8010d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d26:	e040      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010d28:	2340      	movs	r3, #64	@ 0x40
 8010d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d2e:	e03c      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010d30:	2380      	movs	r3, #128	@ 0x80
 8010d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d36:	e038      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010d38:	697b      	ldr	r3, [r7, #20]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	4a71      	ldr	r2, [pc, #452]	@ (8010f04 <UART_SetConfig+0x908>)
 8010d3e:	4293      	cmp	r3, r2
 8010d40:	d130      	bne.n	8010da4 <UART_SetConfig+0x7a8>
 8010d42:	4b6f      	ldr	r3, [pc, #444]	@ (8010f00 <UART_SetConfig+0x904>)
 8010d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010d46:	f003 0307 	and.w	r3, r3, #7
 8010d4a:	2b05      	cmp	r3, #5
 8010d4c:	d826      	bhi.n	8010d9c <UART_SetConfig+0x7a0>
 8010d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8010d54 <UART_SetConfig+0x758>)
 8010d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d54:	08010d6d 	.word	0x08010d6d
 8010d58:	08010d75 	.word	0x08010d75
 8010d5c:	08010d7d 	.word	0x08010d7d
 8010d60:	08010d85 	.word	0x08010d85
 8010d64:	08010d8d 	.word	0x08010d8d
 8010d68:	08010d95 	.word	0x08010d95
 8010d6c:	2302      	movs	r3, #2
 8010d6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d72:	e01a      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010d74:	2304      	movs	r3, #4
 8010d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d7a:	e016      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010d7c:	2308      	movs	r3, #8
 8010d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d82:	e012      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010d84:	2310      	movs	r3, #16
 8010d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d8a:	e00e      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010d8c:	2320      	movs	r3, #32
 8010d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d92:	e00a      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010d94:	2340      	movs	r3, #64	@ 0x40
 8010d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d9a:	e006      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010d9c:	2380      	movs	r3, #128	@ 0x80
 8010d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010da2:	e002      	b.n	8010daa <UART_SetConfig+0x7ae>
 8010da4:	2380      	movs	r3, #128	@ 0x80
 8010da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010daa:	697b      	ldr	r3, [r7, #20]
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	4a55      	ldr	r2, [pc, #340]	@ (8010f04 <UART_SetConfig+0x908>)
 8010db0:	4293      	cmp	r3, r2
 8010db2:	f040 80f8 	bne.w	8010fa6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010db6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010dba:	2b20      	cmp	r3, #32
 8010dbc:	dc46      	bgt.n	8010e4c <UART_SetConfig+0x850>
 8010dbe:	2b02      	cmp	r3, #2
 8010dc0:	db75      	blt.n	8010eae <UART_SetConfig+0x8b2>
 8010dc2:	3b02      	subs	r3, #2
 8010dc4:	2b1e      	cmp	r3, #30
 8010dc6:	d872      	bhi.n	8010eae <UART_SetConfig+0x8b2>
 8010dc8:	a201      	add	r2, pc, #4	@ (adr r2, 8010dd0 <UART_SetConfig+0x7d4>)
 8010dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dce:	bf00      	nop
 8010dd0:	08010e53 	.word	0x08010e53
 8010dd4:	08010eaf 	.word	0x08010eaf
 8010dd8:	08010e5b 	.word	0x08010e5b
 8010ddc:	08010eaf 	.word	0x08010eaf
 8010de0:	08010eaf 	.word	0x08010eaf
 8010de4:	08010eaf 	.word	0x08010eaf
 8010de8:	08010e6b 	.word	0x08010e6b
 8010dec:	08010eaf 	.word	0x08010eaf
 8010df0:	08010eaf 	.word	0x08010eaf
 8010df4:	08010eaf 	.word	0x08010eaf
 8010df8:	08010eaf 	.word	0x08010eaf
 8010dfc:	08010eaf 	.word	0x08010eaf
 8010e00:	08010eaf 	.word	0x08010eaf
 8010e04:	08010eaf 	.word	0x08010eaf
 8010e08:	08010e7b 	.word	0x08010e7b
 8010e0c:	08010eaf 	.word	0x08010eaf
 8010e10:	08010eaf 	.word	0x08010eaf
 8010e14:	08010eaf 	.word	0x08010eaf
 8010e18:	08010eaf 	.word	0x08010eaf
 8010e1c:	08010eaf 	.word	0x08010eaf
 8010e20:	08010eaf 	.word	0x08010eaf
 8010e24:	08010eaf 	.word	0x08010eaf
 8010e28:	08010eaf 	.word	0x08010eaf
 8010e2c:	08010eaf 	.word	0x08010eaf
 8010e30:	08010eaf 	.word	0x08010eaf
 8010e34:	08010eaf 	.word	0x08010eaf
 8010e38:	08010eaf 	.word	0x08010eaf
 8010e3c:	08010eaf 	.word	0x08010eaf
 8010e40:	08010eaf 	.word	0x08010eaf
 8010e44:	08010eaf 	.word	0x08010eaf
 8010e48:	08010ea1 	.word	0x08010ea1
 8010e4c:	2b40      	cmp	r3, #64	@ 0x40
 8010e4e:	d02a      	beq.n	8010ea6 <UART_SetConfig+0x8aa>
 8010e50:	e02d      	b.n	8010eae <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010e52:	f7fb fd79 	bl	800c948 <HAL_RCCEx_GetD3PCLK1Freq>
 8010e56:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010e58:	e02f      	b.n	8010eba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010e5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010e5e:	4618      	mov	r0, r3
 8010e60:	f7fb fd88 	bl	800c974 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010e68:	e027      	b.n	8010eba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010e6a:	f107 0318 	add.w	r3, r7, #24
 8010e6e:	4618      	mov	r0, r3
 8010e70:	f7fb fed4 	bl	800cc1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010e74:	69fb      	ldr	r3, [r7, #28]
 8010e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010e78:	e01f      	b.n	8010eba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010e7a:	4b21      	ldr	r3, [pc, #132]	@ (8010f00 <UART_SetConfig+0x904>)
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	f003 0320 	and.w	r3, r3, #32
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d009      	beq.n	8010e9a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010e86:	4b1e      	ldr	r3, [pc, #120]	@ (8010f00 <UART_SetConfig+0x904>)
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	08db      	lsrs	r3, r3, #3
 8010e8c:	f003 0303 	and.w	r3, r3, #3
 8010e90:	4a1d      	ldr	r2, [pc, #116]	@ (8010f08 <UART_SetConfig+0x90c>)
 8010e92:	fa22 f303 	lsr.w	r3, r2, r3
 8010e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010e98:	e00f      	b.n	8010eba <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8010e9a:	4b1b      	ldr	r3, [pc, #108]	@ (8010f08 <UART_SetConfig+0x90c>)
 8010e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010e9e:	e00c      	b.n	8010eba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010ea0:	4b1a      	ldr	r3, [pc, #104]	@ (8010f0c <UART_SetConfig+0x910>)
 8010ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010ea4:	e009      	b.n	8010eba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010ea6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010eac:	e005      	b.n	8010eba <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8010eae:	2300      	movs	r3, #0
 8010eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010eb2:	2301      	movs	r3, #1
 8010eb4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010eb8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010eba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	f000 81ee 	beq.w	801129e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010ec2:	697b      	ldr	r3, [r7, #20]
 8010ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ec6:	4a12      	ldr	r2, [pc, #72]	@ (8010f10 <UART_SetConfig+0x914>)
 8010ec8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010ecc:	461a      	mov	r2, r3
 8010ece:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ed0:	fbb3 f3f2 	udiv	r3, r3, r2
 8010ed4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010ed6:	697b      	ldr	r3, [r7, #20]
 8010ed8:	685a      	ldr	r2, [r3, #4]
 8010eda:	4613      	mov	r3, r2
 8010edc:	005b      	lsls	r3, r3, #1
 8010ede:	4413      	add	r3, r2
 8010ee0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010ee2:	429a      	cmp	r2, r3
 8010ee4:	d305      	bcc.n	8010ef2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010ee6:	697b      	ldr	r3, [r7, #20]
 8010ee8:	685b      	ldr	r3, [r3, #4]
 8010eea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010eec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010eee:	429a      	cmp	r2, r3
 8010ef0:	d910      	bls.n	8010f14 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8010ef2:	2301      	movs	r3, #1
 8010ef4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010ef8:	e1d1      	b.n	801129e <UART_SetConfig+0xca2>
 8010efa:	bf00      	nop
 8010efc:	40011c00 	.word	0x40011c00
 8010f00:	58024400 	.word	0x58024400
 8010f04:	58000c00 	.word	0x58000c00
 8010f08:	03d09000 	.word	0x03d09000
 8010f0c:	003d0900 	.word	0x003d0900
 8010f10:	08019d0c 	.word	0x08019d0c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010f14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f16:	2200      	movs	r2, #0
 8010f18:	60bb      	str	r3, [r7, #8]
 8010f1a:	60fa      	str	r2, [r7, #12]
 8010f1c:	697b      	ldr	r3, [r7, #20]
 8010f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f20:	4ac0      	ldr	r2, [pc, #768]	@ (8011224 <UART_SetConfig+0xc28>)
 8010f22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f26:	b29b      	uxth	r3, r3
 8010f28:	2200      	movs	r2, #0
 8010f2a:	603b      	str	r3, [r7, #0]
 8010f2c:	607a      	str	r2, [r7, #4]
 8010f2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010f32:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010f36:	f7ef fc47 	bl	80007c8 <__aeabi_uldivmod>
 8010f3a:	4602      	mov	r2, r0
 8010f3c:	460b      	mov	r3, r1
 8010f3e:	4610      	mov	r0, r2
 8010f40:	4619      	mov	r1, r3
 8010f42:	f04f 0200 	mov.w	r2, #0
 8010f46:	f04f 0300 	mov.w	r3, #0
 8010f4a:	020b      	lsls	r3, r1, #8
 8010f4c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010f50:	0202      	lsls	r2, r0, #8
 8010f52:	6979      	ldr	r1, [r7, #20]
 8010f54:	6849      	ldr	r1, [r1, #4]
 8010f56:	0849      	lsrs	r1, r1, #1
 8010f58:	2000      	movs	r0, #0
 8010f5a:	460c      	mov	r4, r1
 8010f5c:	4605      	mov	r5, r0
 8010f5e:	eb12 0804 	adds.w	r8, r2, r4
 8010f62:	eb43 0905 	adc.w	r9, r3, r5
 8010f66:	697b      	ldr	r3, [r7, #20]
 8010f68:	685b      	ldr	r3, [r3, #4]
 8010f6a:	2200      	movs	r2, #0
 8010f6c:	469a      	mov	sl, r3
 8010f6e:	4693      	mov	fp, r2
 8010f70:	4652      	mov	r2, sl
 8010f72:	465b      	mov	r3, fp
 8010f74:	4640      	mov	r0, r8
 8010f76:	4649      	mov	r1, r9
 8010f78:	f7ef fc26 	bl	80007c8 <__aeabi_uldivmod>
 8010f7c:	4602      	mov	r2, r0
 8010f7e:	460b      	mov	r3, r1
 8010f80:	4613      	mov	r3, r2
 8010f82:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010f8a:	d308      	bcc.n	8010f9e <UART_SetConfig+0x9a2>
 8010f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010f92:	d204      	bcs.n	8010f9e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8010f94:	697b      	ldr	r3, [r7, #20]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010f9a:	60da      	str	r2, [r3, #12]
 8010f9c:	e17f      	b.n	801129e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8010f9e:	2301      	movs	r3, #1
 8010fa0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010fa4:	e17b      	b.n	801129e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010fa6:	697b      	ldr	r3, [r7, #20]
 8010fa8:	69db      	ldr	r3, [r3, #28]
 8010faa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010fae:	f040 80bd 	bne.w	801112c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8010fb2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010fb6:	2b20      	cmp	r3, #32
 8010fb8:	dc48      	bgt.n	801104c <UART_SetConfig+0xa50>
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	db7b      	blt.n	80110b6 <UART_SetConfig+0xaba>
 8010fbe:	2b20      	cmp	r3, #32
 8010fc0:	d879      	bhi.n	80110b6 <UART_SetConfig+0xaba>
 8010fc2:	a201      	add	r2, pc, #4	@ (adr r2, 8010fc8 <UART_SetConfig+0x9cc>)
 8010fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fc8:	08011053 	.word	0x08011053
 8010fcc:	0801105b 	.word	0x0801105b
 8010fd0:	080110b7 	.word	0x080110b7
 8010fd4:	080110b7 	.word	0x080110b7
 8010fd8:	08011063 	.word	0x08011063
 8010fdc:	080110b7 	.word	0x080110b7
 8010fe0:	080110b7 	.word	0x080110b7
 8010fe4:	080110b7 	.word	0x080110b7
 8010fe8:	08011073 	.word	0x08011073
 8010fec:	080110b7 	.word	0x080110b7
 8010ff0:	080110b7 	.word	0x080110b7
 8010ff4:	080110b7 	.word	0x080110b7
 8010ff8:	080110b7 	.word	0x080110b7
 8010ffc:	080110b7 	.word	0x080110b7
 8011000:	080110b7 	.word	0x080110b7
 8011004:	080110b7 	.word	0x080110b7
 8011008:	08011083 	.word	0x08011083
 801100c:	080110b7 	.word	0x080110b7
 8011010:	080110b7 	.word	0x080110b7
 8011014:	080110b7 	.word	0x080110b7
 8011018:	080110b7 	.word	0x080110b7
 801101c:	080110b7 	.word	0x080110b7
 8011020:	080110b7 	.word	0x080110b7
 8011024:	080110b7 	.word	0x080110b7
 8011028:	080110b7 	.word	0x080110b7
 801102c:	080110b7 	.word	0x080110b7
 8011030:	080110b7 	.word	0x080110b7
 8011034:	080110b7 	.word	0x080110b7
 8011038:	080110b7 	.word	0x080110b7
 801103c:	080110b7 	.word	0x080110b7
 8011040:	080110b7 	.word	0x080110b7
 8011044:	080110b7 	.word	0x080110b7
 8011048:	080110a9 	.word	0x080110a9
 801104c:	2b40      	cmp	r3, #64	@ 0x40
 801104e:	d02e      	beq.n	80110ae <UART_SetConfig+0xab2>
 8011050:	e031      	b.n	80110b6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011052:	f7fa fa4d 	bl	800b4f0 <HAL_RCC_GetPCLK1Freq>
 8011056:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011058:	e033      	b.n	80110c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801105a:	f7fa fa5f 	bl	800b51c <HAL_RCC_GetPCLK2Freq>
 801105e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011060:	e02f      	b.n	80110c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011062:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011066:	4618      	mov	r0, r3
 8011068:	f7fb fc84 	bl	800c974 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801106c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801106e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011070:	e027      	b.n	80110c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011072:	f107 0318 	add.w	r3, r7, #24
 8011076:	4618      	mov	r0, r3
 8011078:	f7fb fdd0 	bl	800cc1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801107c:	69fb      	ldr	r3, [r7, #28]
 801107e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011080:	e01f      	b.n	80110c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011082:	4b69      	ldr	r3, [pc, #420]	@ (8011228 <UART_SetConfig+0xc2c>)
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	f003 0320 	and.w	r3, r3, #32
 801108a:	2b00      	cmp	r3, #0
 801108c:	d009      	beq.n	80110a2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801108e:	4b66      	ldr	r3, [pc, #408]	@ (8011228 <UART_SetConfig+0xc2c>)
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	08db      	lsrs	r3, r3, #3
 8011094:	f003 0303 	and.w	r3, r3, #3
 8011098:	4a64      	ldr	r2, [pc, #400]	@ (801122c <UART_SetConfig+0xc30>)
 801109a:	fa22 f303 	lsr.w	r3, r2, r3
 801109e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80110a0:	e00f      	b.n	80110c2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80110a2:	4b62      	ldr	r3, [pc, #392]	@ (801122c <UART_SetConfig+0xc30>)
 80110a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80110a6:	e00c      	b.n	80110c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80110a8:	4b61      	ldr	r3, [pc, #388]	@ (8011230 <UART_SetConfig+0xc34>)
 80110aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80110ac:	e009      	b.n	80110c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80110ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80110b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80110b4:	e005      	b.n	80110c2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80110b6:	2300      	movs	r3, #0
 80110b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80110ba:	2301      	movs	r3, #1
 80110bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80110c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80110c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	f000 80ea 	beq.w	801129e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80110ca:	697b      	ldr	r3, [r7, #20]
 80110cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80110ce:	4a55      	ldr	r2, [pc, #340]	@ (8011224 <UART_SetConfig+0xc28>)
 80110d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80110d4:	461a      	mov	r2, r3
 80110d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80110d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80110dc:	005a      	lsls	r2, r3, #1
 80110de:	697b      	ldr	r3, [r7, #20]
 80110e0:	685b      	ldr	r3, [r3, #4]
 80110e2:	085b      	lsrs	r3, r3, #1
 80110e4:	441a      	add	r2, r3
 80110e6:	697b      	ldr	r3, [r7, #20]
 80110e8:	685b      	ldr	r3, [r3, #4]
 80110ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80110ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80110f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110f2:	2b0f      	cmp	r3, #15
 80110f4:	d916      	bls.n	8011124 <UART_SetConfig+0xb28>
 80110f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80110fc:	d212      	bcs.n	8011124 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80110fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011100:	b29b      	uxth	r3, r3
 8011102:	f023 030f 	bic.w	r3, r3, #15
 8011106:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801110a:	085b      	lsrs	r3, r3, #1
 801110c:	b29b      	uxth	r3, r3
 801110e:	f003 0307 	and.w	r3, r3, #7
 8011112:	b29a      	uxth	r2, r3
 8011114:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011116:	4313      	orrs	r3, r2
 8011118:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 801111a:	697b      	ldr	r3, [r7, #20]
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8011120:	60da      	str	r2, [r3, #12]
 8011122:	e0bc      	b.n	801129e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011124:	2301      	movs	r3, #1
 8011126:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801112a:	e0b8      	b.n	801129e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 801112c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8011130:	2b20      	cmp	r3, #32
 8011132:	dc4b      	bgt.n	80111cc <UART_SetConfig+0xbd0>
 8011134:	2b00      	cmp	r3, #0
 8011136:	f2c0 8087 	blt.w	8011248 <UART_SetConfig+0xc4c>
 801113a:	2b20      	cmp	r3, #32
 801113c:	f200 8084 	bhi.w	8011248 <UART_SetConfig+0xc4c>
 8011140:	a201      	add	r2, pc, #4	@ (adr r2, 8011148 <UART_SetConfig+0xb4c>)
 8011142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011146:	bf00      	nop
 8011148:	080111d3 	.word	0x080111d3
 801114c:	080111db 	.word	0x080111db
 8011150:	08011249 	.word	0x08011249
 8011154:	08011249 	.word	0x08011249
 8011158:	080111e3 	.word	0x080111e3
 801115c:	08011249 	.word	0x08011249
 8011160:	08011249 	.word	0x08011249
 8011164:	08011249 	.word	0x08011249
 8011168:	080111f3 	.word	0x080111f3
 801116c:	08011249 	.word	0x08011249
 8011170:	08011249 	.word	0x08011249
 8011174:	08011249 	.word	0x08011249
 8011178:	08011249 	.word	0x08011249
 801117c:	08011249 	.word	0x08011249
 8011180:	08011249 	.word	0x08011249
 8011184:	08011249 	.word	0x08011249
 8011188:	08011203 	.word	0x08011203
 801118c:	08011249 	.word	0x08011249
 8011190:	08011249 	.word	0x08011249
 8011194:	08011249 	.word	0x08011249
 8011198:	08011249 	.word	0x08011249
 801119c:	08011249 	.word	0x08011249
 80111a0:	08011249 	.word	0x08011249
 80111a4:	08011249 	.word	0x08011249
 80111a8:	08011249 	.word	0x08011249
 80111ac:	08011249 	.word	0x08011249
 80111b0:	08011249 	.word	0x08011249
 80111b4:	08011249 	.word	0x08011249
 80111b8:	08011249 	.word	0x08011249
 80111bc:	08011249 	.word	0x08011249
 80111c0:	08011249 	.word	0x08011249
 80111c4:	08011249 	.word	0x08011249
 80111c8:	0801123b 	.word	0x0801123b
 80111cc:	2b40      	cmp	r3, #64	@ 0x40
 80111ce:	d037      	beq.n	8011240 <UART_SetConfig+0xc44>
 80111d0:	e03a      	b.n	8011248 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80111d2:	f7fa f98d 	bl	800b4f0 <HAL_RCC_GetPCLK1Freq>
 80111d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80111d8:	e03c      	b.n	8011254 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80111da:	f7fa f99f 	bl	800b51c <HAL_RCC_GetPCLK2Freq>
 80111de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80111e0:	e038      	b.n	8011254 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80111e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80111e6:	4618      	mov	r0, r3
 80111e8:	f7fb fbc4 	bl	800c974 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80111ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80111f0:	e030      	b.n	8011254 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80111f2:	f107 0318 	add.w	r3, r7, #24
 80111f6:	4618      	mov	r0, r3
 80111f8:	f7fb fd10 	bl	800cc1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80111fc:	69fb      	ldr	r3, [r7, #28]
 80111fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011200:	e028      	b.n	8011254 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011202:	4b09      	ldr	r3, [pc, #36]	@ (8011228 <UART_SetConfig+0xc2c>)
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	f003 0320 	and.w	r3, r3, #32
 801120a:	2b00      	cmp	r3, #0
 801120c:	d012      	beq.n	8011234 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801120e:	4b06      	ldr	r3, [pc, #24]	@ (8011228 <UART_SetConfig+0xc2c>)
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	08db      	lsrs	r3, r3, #3
 8011214:	f003 0303 	and.w	r3, r3, #3
 8011218:	4a04      	ldr	r2, [pc, #16]	@ (801122c <UART_SetConfig+0xc30>)
 801121a:	fa22 f303 	lsr.w	r3, r2, r3
 801121e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011220:	e018      	b.n	8011254 <UART_SetConfig+0xc58>
 8011222:	bf00      	nop
 8011224:	08019d0c 	.word	0x08019d0c
 8011228:	58024400 	.word	0x58024400
 801122c:	03d09000 	.word	0x03d09000
 8011230:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8011234:	4b24      	ldr	r3, [pc, #144]	@ (80112c8 <UART_SetConfig+0xccc>)
 8011236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011238:	e00c      	b.n	8011254 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801123a:	4b24      	ldr	r3, [pc, #144]	@ (80112cc <UART_SetConfig+0xcd0>)
 801123c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801123e:	e009      	b.n	8011254 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011240:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011244:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011246:	e005      	b.n	8011254 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8011248:	2300      	movs	r3, #0
 801124a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801124c:	2301      	movs	r3, #1
 801124e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8011252:	bf00      	nop
    }

    if (pclk != 0U)
 8011254:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011256:	2b00      	cmp	r3, #0
 8011258:	d021      	beq.n	801129e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801125a:	697b      	ldr	r3, [r7, #20]
 801125c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801125e:	4a1c      	ldr	r2, [pc, #112]	@ (80112d0 <UART_SetConfig+0xcd4>)
 8011260:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011264:	461a      	mov	r2, r3
 8011266:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011268:	fbb3 f2f2 	udiv	r2, r3, r2
 801126c:	697b      	ldr	r3, [r7, #20]
 801126e:	685b      	ldr	r3, [r3, #4]
 8011270:	085b      	lsrs	r3, r3, #1
 8011272:	441a      	add	r2, r3
 8011274:	697b      	ldr	r3, [r7, #20]
 8011276:	685b      	ldr	r3, [r3, #4]
 8011278:	fbb2 f3f3 	udiv	r3, r2, r3
 801127c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801127e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011280:	2b0f      	cmp	r3, #15
 8011282:	d909      	bls.n	8011298 <UART_SetConfig+0xc9c>
 8011284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011286:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801128a:	d205      	bcs.n	8011298 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801128c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801128e:	b29a      	uxth	r2, r3
 8011290:	697b      	ldr	r3, [r7, #20]
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	60da      	str	r2, [r3, #12]
 8011296:	e002      	b.n	801129e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011298:	2301      	movs	r3, #1
 801129a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801129e:	697b      	ldr	r3, [r7, #20]
 80112a0:	2201      	movs	r2, #1
 80112a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80112a6:	697b      	ldr	r3, [r7, #20]
 80112a8:	2201      	movs	r2, #1
 80112aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80112ae:	697b      	ldr	r3, [r7, #20]
 80112b0:	2200      	movs	r2, #0
 80112b2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80112b4:	697b      	ldr	r3, [r7, #20]
 80112b6:	2200      	movs	r2, #0
 80112b8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80112ba:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80112be:	4618      	mov	r0, r3
 80112c0:	3748      	adds	r7, #72	@ 0x48
 80112c2:	46bd      	mov	sp, r7
 80112c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80112c8:	03d09000 	.word	0x03d09000
 80112cc:	003d0900 	.word	0x003d0900
 80112d0:	08019d0c 	.word	0x08019d0c

080112d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80112d4:	b480      	push	{r7}
 80112d6:	b083      	sub	sp, #12
 80112d8:	af00      	add	r7, sp, #0
 80112da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80112e0:	f003 0308 	and.w	r3, r3, #8
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d00a      	beq.n	80112fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	685b      	ldr	r3, [r3, #4]
 80112ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	430a      	orrs	r2, r1
 80112fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011302:	f003 0301 	and.w	r3, r3, #1
 8011306:	2b00      	cmp	r3, #0
 8011308:	d00a      	beq.n	8011320 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	685b      	ldr	r3, [r3, #4]
 8011310:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	430a      	orrs	r2, r1
 801131e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011324:	f003 0302 	and.w	r3, r3, #2
 8011328:	2b00      	cmp	r3, #0
 801132a:	d00a      	beq.n	8011342 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	685b      	ldr	r3, [r3, #4]
 8011332:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	430a      	orrs	r2, r1
 8011340:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011346:	f003 0304 	and.w	r3, r3, #4
 801134a:	2b00      	cmp	r3, #0
 801134c:	d00a      	beq.n	8011364 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	685b      	ldr	r3, [r3, #4]
 8011354:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	430a      	orrs	r2, r1
 8011362:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011368:	f003 0310 	and.w	r3, r3, #16
 801136c:	2b00      	cmp	r3, #0
 801136e:	d00a      	beq.n	8011386 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	689b      	ldr	r3, [r3, #8]
 8011376:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	430a      	orrs	r2, r1
 8011384:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801138a:	f003 0320 	and.w	r3, r3, #32
 801138e:	2b00      	cmp	r3, #0
 8011390:	d00a      	beq.n	80113a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	689b      	ldr	r3, [r3, #8]
 8011398:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	430a      	orrs	r2, r1
 80113a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80113ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d01a      	beq.n	80113ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	685b      	ldr	r3, [r3, #4]
 80113ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	430a      	orrs	r2, r1
 80113c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80113ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80113d2:	d10a      	bne.n	80113ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	685b      	ldr	r3, [r3, #4]
 80113da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	430a      	orrs	r2, r1
 80113e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80113ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d00a      	beq.n	801140c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	685b      	ldr	r3, [r3, #4]
 80113fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	430a      	orrs	r2, r1
 801140a:	605a      	str	r2, [r3, #4]
  }
}
 801140c:	bf00      	nop
 801140e:	370c      	adds	r7, #12
 8011410:	46bd      	mov	sp, r7
 8011412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011416:	4770      	bx	lr

08011418 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011418:	b580      	push	{r7, lr}
 801141a:	b098      	sub	sp, #96	@ 0x60
 801141c:	af02      	add	r7, sp, #8
 801141e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	2200      	movs	r2, #0
 8011424:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011428:	f7f5 f9c2 	bl	80067b0 <HAL_GetTick>
 801142c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	f003 0308 	and.w	r3, r3, #8
 8011438:	2b08      	cmp	r3, #8
 801143a:	d12f      	bne.n	801149c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801143c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011440:	9300      	str	r3, [sp, #0]
 8011442:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011444:	2200      	movs	r2, #0
 8011446:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801144a:	6878      	ldr	r0, [r7, #4]
 801144c:	f000 f88e 	bl	801156c <UART_WaitOnFlagUntilTimeout>
 8011450:	4603      	mov	r3, r0
 8011452:	2b00      	cmp	r3, #0
 8011454:	d022      	beq.n	801149c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801145c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801145e:	e853 3f00 	ldrex	r3, [r3]
 8011462:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011466:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801146a:	653b      	str	r3, [r7, #80]	@ 0x50
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	461a      	mov	r2, r3
 8011472:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011474:	647b      	str	r3, [r7, #68]	@ 0x44
 8011476:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011478:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801147a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801147c:	e841 2300 	strex	r3, r2, [r1]
 8011480:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011482:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011484:	2b00      	cmp	r3, #0
 8011486:	d1e6      	bne.n	8011456 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	2220      	movs	r2, #32
 801148c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	2200      	movs	r2, #0
 8011494:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011498:	2303      	movs	r3, #3
 801149a:	e063      	b.n	8011564 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	f003 0304 	and.w	r3, r3, #4
 80114a6:	2b04      	cmp	r3, #4
 80114a8:	d149      	bne.n	801153e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80114aa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80114ae:	9300      	str	r3, [sp, #0]
 80114b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80114b2:	2200      	movs	r2, #0
 80114b4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80114b8:	6878      	ldr	r0, [r7, #4]
 80114ba:	f000 f857 	bl	801156c <UART_WaitOnFlagUntilTimeout>
 80114be:	4603      	mov	r3, r0
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d03c      	beq.n	801153e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114cc:	e853 3f00 	ldrex	r3, [r3]
 80114d0:	623b      	str	r3, [r7, #32]
   return(result);
 80114d2:	6a3b      	ldr	r3, [r7, #32]
 80114d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80114d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	461a      	mov	r2, r3
 80114e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80114e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80114e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80114e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80114ea:	e841 2300 	strex	r3, r2, [r1]
 80114ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80114f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d1e6      	bne.n	80114c4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	3308      	adds	r3, #8
 80114fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114fe:	693b      	ldr	r3, [r7, #16]
 8011500:	e853 3f00 	ldrex	r3, [r3]
 8011504:	60fb      	str	r3, [r7, #12]
   return(result);
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	f023 0301 	bic.w	r3, r3, #1
 801150c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	3308      	adds	r3, #8
 8011514:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011516:	61fa      	str	r2, [r7, #28]
 8011518:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801151a:	69b9      	ldr	r1, [r7, #24]
 801151c:	69fa      	ldr	r2, [r7, #28]
 801151e:	e841 2300 	strex	r3, r2, [r1]
 8011522:	617b      	str	r3, [r7, #20]
   return(result);
 8011524:	697b      	ldr	r3, [r7, #20]
 8011526:	2b00      	cmp	r3, #0
 8011528:	d1e5      	bne.n	80114f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	2220      	movs	r2, #32
 801152e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	2200      	movs	r2, #0
 8011536:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801153a:	2303      	movs	r3, #3
 801153c:	e012      	b.n	8011564 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	2220      	movs	r2, #32
 8011542:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	2220      	movs	r2, #32
 801154a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	2200      	movs	r2, #0
 8011552:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	2200      	movs	r2, #0
 8011558:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	2200      	movs	r2, #0
 801155e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011562:	2300      	movs	r3, #0
}
 8011564:	4618      	mov	r0, r3
 8011566:	3758      	adds	r7, #88	@ 0x58
 8011568:	46bd      	mov	sp, r7
 801156a:	bd80      	pop	{r7, pc}

0801156c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801156c:	b580      	push	{r7, lr}
 801156e:	b084      	sub	sp, #16
 8011570:	af00      	add	r7, sp, #0
 8011572:	60f8      	str	r0, [r7, #12]
 8011574:	60b9      	str	r1, [r7, #8]
 8011576:	603b      	str	r3, [r7, #0]
 8011578:	4613      	mov	r3, r2
 801157a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801157c:	e04f      	b.n	801161e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801157e:	69bb      	ldr	r3, [r7, #24]
 8011580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011584:	d04b      	beq.n	801161e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011586:	f7f5 f913 	bl	80067b0 <HAL_GetTick>
 801158a:	4602      	mov	r2, r0
 801158c:	683b      	ldr	r3, [r7, #0]
 801158e:	1ad3      	subs	r3, r2, r3
 8011590:	69ba      	ldr	r2, [r7, #24]
 8011592:	429a      	cmp	r2, r3
 8011594:	d302      	bcc.n	801159c <UART_WaitOnFlagUntilTimeout+0x30>
 8011596:	69bb      	ldr	r3, [r7, #24]
 8011598:	2b00      	cmp	r3, #0
 801159a:	d101      	bne.n	80115a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801159c:	2303      	movs	r3, #3
 801159e:	e04e      	b.n	801163e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	f003 0304 	and.w	r3, r3, #4
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d037      	beq.n	801161e <UART_WaitOnFlagUntilTimeout+0xb2>
 80115ae:	68bb      	ldr	r3, [r7, #8]
 80115b0:	2b80      	cmp	r3, #128	@ 0x80
 80115b2:	d034      	beq.n	801161e <UART_WaitOnFlagUntilTimeout+0xb2>
 80115b4:	68bb      	ldr	r3, [r7, #8]
 80115b6:	2b40      	cmp	r3, #64	@ 0x40
 80115b8:	d031      	beq.n	801161e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	69db      	ldr	r3, [r3, #28]
 80115c0:	f003 0308 	and.w	r3, r3, #8
 80115c4:	2b08      	cmp	r3, #8
 80115c6:	d110      	bne.n	80115ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	2208      	movs	r2, #8
 80115ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80115d0:	68f8      	ldr	r0, [r7, #12]
 80115d2:	f000 fa43 	bl	8011a5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	2208      	movs	r2, #8
 80115da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	2200      	movs	r2, #0
 80115e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80115e6:	2301      	movs	r3, #1
 80115e8:	e029      	b.n	801163e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	69db      	ldr	r3, [r3, #28]
 80115f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80115f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80115f8:	d111      	bne.n	801161e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011602:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011604:	68f8      	ldr	r0, [r7, #12]
 8011606:	f000 fa29 	bl	8011a5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	2220      	movs	r2, #32
 801160e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	2200      	movs	r2, #0
 8011616:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801161a:	2303      	movs	r3, #3
 801161c:	e00f      	b.n	801163e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	69da      	ldr	r2, [r3, #28]
 8011624:	68bb      	ldr	r3, [r7, #8]
 8011626:	4013      	ands	r3, r2
 8011628:	68ba      	ldr	r2, [r7, #8]
 801162a:	429a      	cmp	r2, r3
 801162c:	bf0c      	ite	eq
 801162e:	2301      	moveq	r3, #1
 8011630:	2300      	movne	r3, #0
 8011632:	b2db      	uxtb	r3, r3
 8011634:	461a      	mov	r2, r3
 8011636:	79fb      	ldrb	r3, [r7, #7]
 8011638:	429a      	cmp	r2, r3
 801163a:	d0a0      	beq.n	801157e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801163c:	2300      	movs	r3, #0
}
 801163e:	4618      	mov	r0, r3
 8011640:	3710      	adds	r7, #16
 8011642:	46bd      	mov	sp, r7
 8011644:	bd80      	pop	{r7, pc}
	...

08011648 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011648:	b480      	push	{r7}
 801164a:	b0a3      	sub	sp, #140	@ 0x8c
 801164c:	af00      	add	r7, sp, #0
 801164e:	60f8      	str	r0, [r7, #12]
 8011650:	60b9      	str	r1, [r7, #8]
 8011652:	4613      	mov	r3, r2
 8011654:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	68ba      	ldr	r2, [r7, #8]
 801165a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	88fa      	ldrh	r2, [r7, #6]
 8011660:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	88fa      	ldrh	r2, [r7, #6]
 8011668:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	2200      	movs	r2, #0
 8011670:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	689b      	ldr	r3, [r3, #8]
 8011676:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801167a:	d10e      	bne.n	801169a <UART_Start_Receive_IT+0x52>
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	691b      	ldr	r3, [r3, #16]
 8011680:	2b00      	cmp	r3, #0
 8011682:	d105      	bne.n	8011690 <UART_Start_Receive_IT+0x48>
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	f240 12ff 	movw	r2, #511	@ 0x1ff
 801168a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801168e:	e02d      	b.n	80116ec <UART_Start_Receive_IT+0xa4>
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	22ff      	movs	r2, #255	@ 0xff
 8011694:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8011698:	e028      	b.n	80116ec <UART_Start_Receive_IT+0xa4>
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	689b      	ldr	r3, [r3, #8]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d10d      	bne.n	80116be <UART_Start_Receive_IT+0x76>
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	691b      	ldr	r3, [r3, #16]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d104      	bne.n	80116b4 <UART_Start_Receive_IT+0x6c>
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	22ff      	movs	r2, #255	@ 0xff
 80116ae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80116b2:	e01b      	b.n	80116ec <UART_Start_Receive_IT+0xa4>
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	227f      	movs	r2, #127	@ 0x7f
 80116b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80116bc:	e016      	b.n	80116ec <UART_Start_Receive_IT+0xa4>
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	689b      	ldr	r3, [r3, #8]
 80116c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80116c6:	d10d      	bne.n	80116e4 <UART_Start_Receive_IT+0x9c>
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	691b      	ldr	r3, [r3, #16]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d104      	bne.n	80116da <UART_Start_Receive_IT+0x92>
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	227f      	movs	r2, #127	@ 0x7f
 80116d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80116d8:	e008      	b.n	80116ec <UART_Start_Receive_IT+0xa4>
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	223f      	movs	r2, #63	@ 0x3f
 80116de:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80116e2:	e003      	b.n	80116ec <UART_Start_Receive_IT+0xa4>
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	2200      	movs	r2, #0
 80116e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	2200      	movs	r2, #0
 80116f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	2222      	movs	r2, #34	@ 0x22
 80116f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	3308      	adds	r3, #8
 8011702:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011704:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011706:	e853 3f00 	ldrex	r3, [r3]
 801170a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 801170c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801170e:	f043 0301 	orr.w	r3, r3, #1
 8011712:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	3308      	adds	r3, #8
 801171c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8011720:	673a      	str	r2, [r7, #112]	@ 0x70
 8011722:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011724:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011726:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8011728:	e841 2300 	strex	r3, r2, [r1]
 801172c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 801172e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011730:	2b00      	cmp	r3, #0
 8011732:	d1e3      	bne.n	80116fc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011738:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801173c:	d14f      	bne.n	80117de <UART_Start_Receive_IT+0x196>
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011744:	88fa      	ldrh	r2, [r7, #6]
 8011746:	429a      	cmp	r2, r3
 8011748:	d349      	bcc.n	80117de <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	689b      	ldr	r3, [r3, #8]
 801174e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011752:	d107      	bne.n	8011764 <UART_Start_Receive_IT+0x11c>
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	691b      	ldr	r3, [r3, #16]
 8011758:	2b00      	cmp	r3, #0
 801175a:	d103      	bne.n	8011764 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	4a47      	ldr	r2, [pc, #284]	@ (801187c <UART_Start_Receive_IT+0x234>)
 8011760:	675a      	str	r2, [r3, #116]	@ 0x74
 8011762:	e002      	b.n	801176a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	4a46      	ldr	r2, [pc, #280]	@ (8011880 <UART_Start_Receive_IT+0x238>)
 8011768:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	691b      	ldr	r3, [r3, #16]
 801176e:	2b00      	cmp	r3, #0
 8011770:	d01a      	beq.n	80117a8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011778:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801177a:	e853 3f00 	ldrex	r3, [r3]
 801177e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8011780:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011782:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011786:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	461a      	mov	r2, r3
 8011790:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8011794:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011796:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011798:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801179a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801179c:	e841 2300 	strex	r3, r2, [r1]
 80117a0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80117a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d1e4      	bne.n	8011772 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	3308      	adds	r3, #8
 80117ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80117b2:	e853 3f00 	ldrex	r3, [r3]
 80117b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80117b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80117be:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	3308      	adds	r3, #8
 80117c6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80117c8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80117ca:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117cc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80117ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80117d0:	e841 2300 	strex	r3, r2, [r1]
 80117d4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80117d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d1e5      	bne.n	80117a8 <UART_Start_Receive_IT+0x160>
 80117dc:	e046      	b.n	801186c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	689b      	ldr	r3, [r3, #8]
 80117e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80117e6:	d107      	bne.n	80117f8 <UART_Start_Receive_IT+0x1b0>
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	691b      	ldr	r3, [r3, #16]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d103      	bne.n	80117f8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	4a24      	ldr	r2, [pc, #144]	@ (8011884 <UART_Start_Receive_IT+0x23c>)
 80117f4:	675a      	str	r2, [r3, #116]	@ 0x74
 80117f6:	e002      	b.n	80117fe <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	4a23      	ldr	r2, [pc, #140]	@ (8011888 <UART_Start_Receive_IT+0x240>)
 80117fc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	691b      	ldr	r3, [r3, #16]
 8011802:	2b00      	cmp	r3, #0
 8011804:	d019      	beq.n	801183a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801180c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801180e:	e853 3f00 	ldrex	r3, [r3]
 8011812:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011816:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 801181a:	677b      	str	r3, [r7, #116]	@ 0x74
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	461a      	mov	r2, r3
 8011822:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011824:	637b      	str	r3, [r7, #52]	@ 0x34
 8011826:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011828:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801182a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801182c:	e841 2300 	strex	r3, r2, [r1]
 8011830:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8011832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011834:	2b00      	cmp	r3, #0
 8011836:	d1e6      	bne.n	8011806 <UART_Start_Receive_IT+0x1be>
 8011838:	e018      	b.n	801186c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011840:	697b      	ldr	r3, [r7, #20]
 8011842:	e853 3f00 	ldrex	r3, [r3]
 8011846:	613b      	str	r3, [r7, #16]
   return(result);
 8011848:	693b      	ldr	r3, [r7, #16]
 801184a:	f043 0320 	orr.w	r3, r3, #32
 801184e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	461a      	mov	r2, r3
 8011856:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011858:	623b      	str	r3, [r7, #32]
 801185a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801185c:	69f9      	ldr	r1, [r7, #28]
 801185e:	6a3a      	ldr	r2, [r7, #32]
 8011860:	e841 2300 	strex	r3, r2, [r1]
 8011864:	61bb      	str	r3, [r7, #24]
   return(result);
 8011866:	69bb      	ldr	r3, [r7, #24]
 8011868:	2b00      	cmp	r3, #0
 801186a:	d1e6      	bne.n	801183a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 801186c:	2300      	movs	r3, #0
}
 801186e:	4618      	mov	r0, r3
 8011870:	378c      	adds	r7, #140	@ 0x8c
 8011872:	46bd      	mov	sp, r7
 8011874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011878:	4770      	bx	lr
 801187a:	bf00      	nop
 801187c:	080128b1 	.word	0x080128b1
 8011880:	08012551 	.word	0x08012551
 8011884:	08012399 	.word	0x08012399
 8011888:	080121e1 	.word	0x080121e1

0801188c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801188c:	b580      	push	{r7, lr}
 801188e:	b096      	sub	sp, #88	@ 0x58
 8011890:	af00      	add	r7, sp, #0
 8011892:	60f8      	str	r0, [r7, #12]
 8011894:	60b9      	str	r1, [r7, #8]
 8011896:	4613      	mov	r3, r2
 8011898:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	68ba      	ldr	r2, [r7, #8]
 801189e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	88fa      	ldrh	r2, [r7, #6]
 80118a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	2200      	movs	r2, #0
 80118ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	2222      	movs	r2, #34	@ 0x22
 80118b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d02d      	beq.n	801191e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80118c8:	4a40      	ldr	r2, [pc, #256]	@ (80119cc <UART_Start_Receive_DMA+0x140>)
 80118ca:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80118d2:	4a3f      	ldr	r2, [pc, #252]	@ (80119d0 <UART_Start_Receive_DMA+0x144>)
 80118d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80118dc:	4a3d      	ldr	r2, [pc, #244]	@ (80119d4 <UART_Start_Receive_DMA+0x148>)
 80118de:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80118e6:	2200      	movs	r2, #0
 80118e8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	3324      	adds	r3, #36	@ 0x24
 80118f6:	4619      	mov	r1, r3
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80118fc:	461a      	mov	r2, r3
 80118fe:	88fb      	ldrh	r3, [r7, #6]
 8011900:	f7f5 fc6c 	bl	80071dc <HAL_DMA_Start_IT>
 8011904:	4603      	mov	r3, r0
 8011906:	2b00      	cmp	r3, #0
 8011908:	d009      	beq.n	801191e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	2210      	movs	r2, #16
 801190e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	2220      	movs	r2, #32
 8011916:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 801191a:	2301      	movs	r3, #1
 801191c:	e051      	b.n	80119c2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	691b      	ldr	r3, [r3, #16]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d018      	beq.n	8011958 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801192c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801192e:	e853 3f00 	ldrex	r3, [r3]
 8011932:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011936:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801193a:	657b      	str	r3, [r7, #84]	@ 0x54
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	461a      	mov	r2, r3
 8011942:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011944:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011946:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011948:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801194a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801194c:	e841 2300 	strex	r3, r2, [r1]
 8011950:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8011952:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011954:	2b00      	cmp	r3, #0
 8011956:	d1e6      	bne.n	8011926 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	3308      	adds	r3, #8
 801195e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011962:	e853 3f00 	ldrex	r3, [r3]
 8011966:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801196a:	f043 0301 	orr.w	r3, r3, #1
 801196e:	653b      	str	r3, [r7, #80]	@ 0x50
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	3308      	adds	r3, #8
 8011976:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011978:	637a      	str	r2, [r7, #52]	@ 0x34
 801197a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801197c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801197e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011980:	e841 2300 	strex	r3, r2, [r1]
 8011984:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8011986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011988:	2b00      	cmp	r3, #0
 801198a:	d1e5      	bne.n	8011958 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	3308      	adds	r3, #8
 8011992:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011994:	697b      	ldr	r3, [r7, #20]
 8011996:	e853 3f00 	ldrex	r3, [r3]
 801199a:	613b      	str	r3, [r7, #16]
   return(result);
 801199c:	693b      	ldr	r3, [r7, #16]
 801199e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80119a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	3308      	adds	r3, #8
 80119aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80119ac:	623a      	str	r2, [r7, #32]
 80119ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119b0:	69f9      	ldr	r1, [r7, #28]
 80119b2:	6a3a      	ldr	r2, [r7, #32]
 80119b4:	e841 2300 	strex	r3, r2, [r1]
 80119b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80119ba:	69bb      	ldr	r3, [r7, #24]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d1e5      	bne.n	801198c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80119c0:	2300      	movs	r3, #0
}
 80119c2:	4618      	mov	r0, r3
 80119c4:	3758      	adds	r7, #88	@ 0x58
 80119c6:	46bd      	mov	sp, r7
 80119c8:	bd80      	pop	{r7, pc}
 80119ca:	bf00      	nop
 80119cc:	08011b29 	.word	0x08011b29
 80119d0:	08011c51 	.word	0x08011c51
 80119d4:	08011c8f 	.word	0x08011c8f

080119d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80119d8:	b480      	push	{r7}
 80119da:	b08f      	sub	sp, #60	@ 0x3c
 80119dc:	af00      	add	r7, sp, #0
 80119de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119e6:	6a3b      	ldr	r3, [r7, #32]
 80119e8:	e853 3f00 	ldrex	r3, [r3]
 80119ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80119ee:	69fb      	ldr	r3, [r7, #28]
 80119f0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80119f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	461a      	mov	r2, r3
 80119fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80119fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011a00:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011a04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011a06:	e841 2300 	strex	r3, r2, [r1]
 8011a0a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d1e6      	bne.n	80119e0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	3308      	adds	r3, #8
 8011a18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	e853 3f00 	ldrex	r3, [r3]
 8011a20:	60bb      	str	r3, [r7, #8]
   return(result);
 8011a22:	68bb      	ldr	r3, [r7, #8]
 8011a24:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8011a28:	633b      	str	r3, [r7, #48]	@ 0x30
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	3308      	adds	r3, #8
 8011a30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011a32:	61ba      	str	r2, [r7, #24]
 8011a34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a36:	6979      	ldr	r1, [r7, #20]
 8011a38:	69ba      	ldr	r2, [r7, #24]
 8011a3a:	e841 2300 	strex	r3, r2, [r1]
 8011a3e:	613b      	str	r3, [r7, #16]
   return(result);
 8011a40:	693b      	ldr	r3, [r7, #16]
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d1e5      	bne.n	8011a12 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	2220      	movs	r2, #32
 8011a4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8011a4e:	bf00      	nop
 8011a50:	373c      	adds	r7, #60	@ 0x3c
 8011a52:	46bd      	mov	sp, r7
 8011a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a58:	4770      	bx	lr
	...

08011a5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011a5c:	b480      	push	{r7}
 8011a5e:	b095      	sub	sp, #84	@ 0x54
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a6c:	e853 3f00 	ldrex	r3, [r3]
 8011a70:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011a78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	461a      	mov	r2, r3
 8011a80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a82:	643b      	str	r3, [r7, #64]	@ 0x40
 8011a84:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a86:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011a88:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011a8a:	e841 2300 	strex	r3, r2, [r1]
 8011a8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d1e6      	bne.n	8011a64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	3308      	adds	r3, #8
 8011a9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a9e:	6a3b      	ldr	r3, [r7, #32]
 8011aa0:	e853 3f00 	ldrex	r3, [r3]
 8011aa4:	61fb      	str	r3, [r7, #28]
   return(result);
 8011aa6:	69fa      	ldr	r2, [r7, #28]
 8011aa8:	4b1e      	ldr	r3, [pc, #120]	@ (8011b24 <UART_EndRxTransfer+0xc8>)
 8011aaa:	4013      	ands	r3, r2
 8011aac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	3308      	adds	r3, #8
 8011ab4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011ab6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011aba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011abc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011abe:	e841 2300 	strex	r3, r2, [r1]
 8011ac2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d1e5      	bne.n	8011a96 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011ace:	2b01      	cmp	r3, #1
 8011ad0:	d118      	bne.n	8011b04 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ad8:	68fb      	ldr	r3, [r7, #12]
 8011ada:	e853 3f00 	ldrex	r3, [r3]
 8011ade:	60bb      	str	r3, [r7, #8]
   return(result);
 8011ae0:	68bb      	ldr	r3, [r7, #8]
 8011ae2:	f023 0310 	bic.w	r3, r3, #16
 8011ae6:	647b      	str	r3, [r7, #68]	@ 0x44
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	461a      	mov	r2, r3
 8011aee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011af0:	61bb      	str	r3, [r7, #24]
 8011af2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011af4:	6979      	ldr	r1, [r7, #20]
 8011af6:	69ba      	ldr	r2, [r7, #24]
 8011af8:	e841 2300 	strex	r3, r2, [r1]
 8011afc:	613b      	str	r3, [r7, #16]
   return(result);
 8011afe:	693b      	ldr	r3, [r7, #16]
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d1e6      	bne.n	8011ad2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	2220      	movs	r2, #32
 8011b08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	2200      	movs	r2, #0
 8011b10:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	2200      	movs	r2, #0
 8011b16:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8011b18:	bf00      	nop
 8011b1a:	3754      	adds	r7, #84	@ 0x54
 8011b1c:	46bd      	mov	sp, r7
 8011b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b22:	4770      	bx	lr
 8011b24:	effffffe 	.word	0xeffffffe

08011b28 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b09c      	sub	sp, #112	@ 0x70
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b34:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	69db      	ldr	r3, [r3, #28]
 8011b3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011b3e:	d071      	beq.n	8011c24 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8011b40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011b42:	2200      	movs	r2, #0
 8011b44:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011b48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011b50:	e853 3f00 	ldrex	r3, [r3]
 8011b54:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8011b56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011b58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011b5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011b5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	461a      	mov	r2, r3
 8011b64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011b66:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011b68:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b6a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011b6c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011b6e:	e841 2300 	strex	r3, r2, [r1]
 8011b72:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8011b74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d1e6      	bne.n	8011b48 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011b7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	3308      	adds	r3, #8
 8011b80:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b84:	e853 3f00 	ldrex	r3, [r3]
 8011b88:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011b8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b8c:	f023 0301 	bic.w	r3, r3, #1
 8011b90:	667b      	str	r3, [r7, #100]	@ 0x64
 8011b92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	3308      	adds	r3, #8
 8011b98:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011b9a:	647a      	str	r2, [r7, #68]	@ 0x44
 8011b9c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b9e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011ba0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011ba2:	e841 2300 	strex	r3, r2, [r1]
 8011ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011ba8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d1e5      	bne.n	8011b7a <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011bae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	3308      	adds	r3, #8
 8011bb4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bb8:	e853 3f00 	ldrex	r3, [r3]
 8011bbc:	623b      	str	r3, [r7, #32]
   return(result);
 8011bbe:	6a3b      	ldr	r3, [r7, #32]
 8011bc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011bc4:	663b      	str	r3, [r7, #96]	@ 0x60
 8011bc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	3308      	adds	r3, #8
 8011bcc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011bce:	633a      	str	r2, [r7, #48]	@ 0x30
 8011bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bd2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011bd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011bd6:	e841 2300 	strex	r3, r2, [r1]
 8011bda:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d1e5      	bne.n	8011bae <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011be2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011be4:	2220      	movs	r2, #32
 8011be6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011bea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011bec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011bee:	2b01      	cmp	r3, #1
 8011bf0:	d118      	bne.n	8011c24 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011bf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bf8:	693b      	ldr	r3, [r7, #16]
 8011bfa:	e853 3f00 	ldrex	r3, [r3]
 8011bfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	f023 0310 	bic.w	r3, r3, #16
 8011c06:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011c08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	461a      	mov	r2, r3
 8011c0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011c10:	61fb      	str	r3, [r7, #28]
 8011c12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c14:	69b9      	ldr	r1, [r7, #24]
 8011c16:	69fa      	ldr	r2, [r7, #28]
 8011c18:	e841 2300 	strex	r3, r2, [r1]
 8011c1c:	617b      	str	r3, [r7, #20]
   return(result);
 8011c1e:	697b      	ldr	r3, [r7, #20]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d1e6      	bne.n	8011bf2 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011c24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011c26:	2200      	movs	r2, #0
 8011c28:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011c2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011c2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011c2e:	2b01      	cmp	r3, #1
 8011c30:	d107      	bne.n	8011c42 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011c32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011c34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011c38:	4619      	mov	r1, r3
 8011c3a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011c3c:	f7fe fcd2 	bl	80105e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011c40:	e002      	b.n	8011c48 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8011c42:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011c44:	f7f1 f9c0 	bl	8002fc8 <HAL_UART_RxCpltCallback>
}
 8011c48:	bf00      	nop
 8011c4a:	3770      	adds	r7, #112	@ 0x70
 8011c4c:	46bd      	mov	sp, r7
 8011c4e:	bd80      	pop	{r7, pc}

08011c50 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011c50:	b580      	push	{r7, lr}
 8011c52:	b084      	sub	sp, #16
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011c5c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	2201      	movs	r2, #1
 8011c62:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011c68:	2b01      	cmp	r3, #1
 8011c6a:	d109      	bne.n	8011c80 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011c72:	085b      	lsrs	r3, r3, #1
 8011c74:	b29b      	uxth	r3, r3
 8011c76:	4619      	mov	r1, r3
 8011c78:	68f8      	ldr	r0, [r7, #12]
 8011c7a:	f7fe fcb3 	bl	80105e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011c7e:	e002      	b.n	8011c86 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8011c80:	68f8      	ldr	r0, [r7, #12]
 8011c82:	f7fe fc91 	bl	80105a8 <HAL_UART_RxHalfCpltCallback>
}
 8011c86:	bf00      	nop
 8011c88:	3710      	adds	r7, #16
 8011c8a:	46bd      	mov	sp, r7
 8011c8c:	bd80      	pop	{r7, pc}

08011c8e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011c8e:	b580      	push	{r7, lr}
 8011c90:	b086      	sub	sp, #24
 8011c92:	af00      	add	r7, sp, #0
 8011c94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011c9a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011c9c:	697b      	ldr	r3, [r7, #20]
 8011c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011ca2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011ca4:	697b      	ldr	r3, [r7, #20]
 8011ca6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011caa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011cac:	697b      	ldr	r3, [r7, #20]
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	689b      	ldr	r3, [r3, #8]
 8011cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011cb6:	2b80      	cmp	r3, #128	@ 0x80
 8011cb8:	d109      	bne.n	8011cce <UART_DMAError+0x40>
 8011cba:	693b      	ldr	r3, [r7, #16]
 8011cbc:	2b21      	cmp	r3, #33	@ 0x21
 8011cbe:	d106      	bne.n	8011cce <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8011cc0:	697b      	ldr	r3, [r7, #20]
 8011cc2:	2200      	movs	r2, #0
 8011cc4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8011cc8:	6978      	ldr	r0, [r7, #20]
 8011cca:	f7ff fe85 	bl	80119d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011cce:	697b      	ldr	r3, [r7, #20]
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	689b      	ldr	r3, [r3, #8]
 8011cd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011cd8:	2b40      	cmp	r3, #64	@ 0x40
 8011cda:	d109      	bne.n	8011cf0 <UART_DMAError+0x62>
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	2b22      	cmp	r3, #34	@ 0x22
 8011ce0:	d106      	bne.n	8011cf0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8011ce2:	697b      	ldr	r3, [r7, #20]
 8011ce4:	2200      	movs	r2, #0
 8011ce6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8011cea:	6978      	ldr	r0, [r7, #20]
 8011cec:	f7ff feb6 	bl	8011a5c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011cf0:	697b      	ldr	r3, [r7, #20]
 8011cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011cf6:	f043 0210 	orr.w	r2, r3, #16
 8011cfa:	697b      	ldr	r3, [r7, #20]
 8011cfc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011d00:	6978      	ldr	r0, [r7, #20]
 8011d02:	f7fe fc5b 	bl	80105bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011d06:	bf00      	nop
 8011d08:	3718      	adds	r7, #24
 8011d0a:	46bd      	mov	sp, r7
 8011d0c:	bd80      	pop	{r7, pc}

08011d0e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011d0e:	b580      	push	{r7, lr}
 8011d10:	b084      	sub	sp, #16
 8011d12:	af00      	add	r7, sp, #0
 8011d14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	2200      	movs	r2, #0
 8011d20:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	2200      	movs	r2, #0
 8011d28:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011d2c:	68f8      	ldr	r0, [r7, #12]
 8011d2e:	f7fe fc45 	bl	80105bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011d32:	bf00      	nop
 8011d34:	3710      	adds	r7, #16
 8011d36:	46bd      	mov	sp, r7
 8011d38:	bd80      	pop	{r7, pc}

08011d3a <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8011d3a:	b580      	push	{r7, lr}
 8011d3c:	b084      	sub	sp, #16
 8011d3e:	af00      	add	r7, sp, #0
 8011d40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d46:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011d4c:	2200      	movs	r2, #0
 8011d4e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d005      	beq.n	8011d66 <UART_DMATxAbortCallback+0x2c>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011d60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d12b      	bne.n	8011dbe <UART_DMATxAbortCallback+0x84>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	2200      	movs	r2, #0
 8011d6a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	2200      	movs	r2, #0
 8011d72:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	2200      	movs	r2, #0
 8011d7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	220f      	movs	r2, #15
 8011d84:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011d8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011d8e:	d107      	bne.n	8011da0 <UART_DMATxAbortCallback+0x66>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	699a      	ldr	r2, [r3, #24]
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	f042 0210 	orr.w	r2, r2, #16
 8011d9e:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	2220      	movs	r2, #32
 8011da4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	2220      	movs	r2, #32
 8011dac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	2200      	movs	r2, #0
 8011db4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8011db6:	68f8      	ldr	r0, [r7, #12]
 8011db8:	f7fe fc0a 	bl	80105d0 <HAL_UART_AbortCpltCallback>
 8011dbc:	e000      	b.n	8011dc0 <UART_DMATxAbortCallback+0x86>
      return;
 8011dbe:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011dc0:	3710      	adds	r7, #16
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	bd80      	pop	{r7, pc}

08011dc6 <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8011dc6:	b580      	push	{r7, lr}
 8011dc8:	b084      	sub	sp, #16
 8011dca:	af00      	add	r7, sp, #0
 8011dcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011dd2:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011dda:	2200      	movs	r2, #0
 8011ddc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d004      	beq.n	8011df0 <UART_DMARxAbortCallback+0x2a>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011dea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d126      	bne.n	8011e3e <UART_DMARxAbortCallback+0x78>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	2200      	movs	r2, #0
 8011df4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	2200      	movs	r2, #0
 8011dfc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	2200      	movs	r2, #0
 8011e04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	220f      	movs	r2, #15
 8011e0e:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	699a      	ldr	r2, [r3, #24]
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	f042 0208 	orr.w	r2, r2, #8
 8011e1e:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	2220      	movs	r2, #32
 8011e24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	2220      	movs	r2, #32
 8011e2c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	2200      	movs	r2, #0
 8011e34:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8011e36:	68f8      	ldr	r0, [r7, #12]
 8011e38:	f7fe fbca 	bl	80105d0 <HAL_UART_AbortCpltCallback>
 8011e3c:	e000      	b.n	8011e40 <UART_DMARxAbortCallback+0x7a>
      return;
 8011e3e:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011e40:	3710      	adds	r7, #16
 8011e42:	46bd      	mov	sp, r7
 8011e44:	bd80      	pop	{r7, pc}

08011e46 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8011e46:	b480      	push	{r7}
 8011e48:	b08f      	sub	sp, #60	@ 0x3c
 8011e4a:	af00      	add	r7, sp, #0
 8011e4c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011e54:	2b21      	cmp	r3, #33	@ 0x21
 8011e56:	d14c      	bne.n	8011ef2 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8011e5e:	b29b      	uxth	r3, r3
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d132      	bne.n	8011eca <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e6a:	6a3b      	ldr	r3, [r7, #32]
 8011e6c:	e853 3f00 	ldrex	r3, [r3]
 8011e70:	61fb      	str	r3, [r7, #28]
   return(result);
 8011e72:	69fb      	ldr	r3, [r7, #28]
 8011e74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011e78:	637b      	str	r3, [r7, #52]	@ 0x34
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	461a      	mov	r2, r3
 8011e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011e84:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011e88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011e8a:	e841 2300 	strex	r3, r2, [r1]
 8011e8e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d1e6      	bne.n	8011e64 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	e853 3f00 	ldrex	r3, [r3]
 8011ea2:	60bb      	str	r3, [r7, #8]
   return(result);
 8011ea4:	68bb      	ldr	r3, [r7, #8]
 8011ea6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011eaa:	633b      	str	r3, [r7, #48]	@ 0x30
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	461a      	mov	r2, r3
 8011eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011eb4:	61bb      	str	r3, [r7, #24]
 8011eb6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011eb8:	6979      	ldr	r1, [r7, #20]
 8011eba:	69ba      	ldr	r2, [r7, #24]
 8011ebc:	e841 2300 	strex	r3, r2, [r1]
 8011ec0:	613b      	str	r3, [r7, #16]
   return(result);
 8011ec2:	693b      	ldr	r3, [r7, #16]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d1e6      	bne.n	8011e96 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8011ec8:	e013      	b.n	8011ef2 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011ece:	781a      	ldrb	r2, [r3, #0]
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011eda:	1c5a      	adds	r2, r3, #1
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8011ee6:	b29b      	uxth	r3, r3
 8011ee8:	3b01      	subs	r3, #1
 8011eea:	b29a      	uxth	r2, r3
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8011ef2:	bf00      	nop
 8011ef4:	373c      	adds	r7, #60	@ 0x3c
 8011ef6:	46bd      	mov	sp, r7
 8011ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011efc:	4770      	bx	lr

08011efe <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8011efe:	b480      	push	{r7}
 8011f00:	b091      	sub	sp, #68	@ 0x44
 8011f02:	af00      	add	r7, sp, #0
 8011f04:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011f0c:	2b21      	cmp	r3, #33	@ 0x21
 8011f0e:	d151      	bne.n	8011fb4 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8011f16:	b29b      	uxth	r3, r3
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d132      	bne.n	8011f82 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f24:	e853 3f00 	ldrex	r3, [r3]
 8011f28:	623b      	str	r3, [r7, #32]
   return(result);
 8011f2a:	6a3b      	ldr	r3, [r7, #32]
 8011f2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011f30:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	461a      	mov	r2, r3
 8011f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8011f3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011f40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011f42:	e841 2300 	strex	r3, r2, [r1]
 8011f46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d1e6      	bne.n	8011f1c <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f54:	693b      	ldr	r3, [r7, #16]
 8011f56:	e853 3f00 	ldrex	r3, [r3]
 8011f5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011f62:	637b      	str	r3, [r7, #52]	@ 0x34
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	461a      	mov	r2, r3
 8011f6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f6c:	61fb      	str	r3, [r7, #28]
 8011f6e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f70:	69b9      	ldr	r1, [r7, #24]
 8011f72:	69fa      	ldr	r2, [r7, #28]
 8011f74:	e841 2300 	strex	r3, r2, [r1]
 8011f78:	617b      	str	r3, [r7, #20]
   return(result);
 8011f7a:	697b      	ldr	r3, [r7, #20]
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d1e6      	bne.n	8011f4e <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8011f80:	e018      	b.n	8011fb4 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8011f88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011f8a:	881b      	ldrh	r3, [r3, #0]
 8011f8c:	461a      	mov	r2, r3
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011f96:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011f9c:	1c9a      	adds	r2, r3, #2
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8011fa8:	b29b      	uxth	r3, r3
 8011faa:	3b01      	subs	r3, #1
 8011fac:	b29a      	uxth	r2, r3
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8011fb4:	bf00      	nop
 8011fb6:	3744      	adds	r7, #68	@ 0x44
 8011fb8:	46bd      	mov	sp, r7
 8011fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fbe:	4770      	bx	lr

08011fc0 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011fc0:	b480      	push	{r7}
 8011fc2:	b091      	sub	sp, #68	@ 0x44
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011fce:	2b21      	cmp	r3, #33	@ 0x21
 8011fd0:	d160      	bne.n	8012094 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011fd8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8011fda:	e057      	b.n	801208c <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8011fe2:	b29b      	uxth	r3, r3
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d133      	bne.n	8012050 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	3308      	adds	r3, #8
 8011fee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ff2:	e853 3f00 	ldrex	r3, [r3]
 8011ff6:	623b      	str	r3, [r7, #32]
   return(result);
 8011ff8:	6a3b      	ldr	r3, [r7, #32]
 8011ffa:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8011ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	3308      	adds	r3, #8
 8012006:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012008:	633a      	str	r2, [r7, #48]	@ 0x30
 801200a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801200c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801200e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012010:	e841 2300 	strex	r3, r2, [r1]
 8012014:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012018:	2b00      	cmp	r3, #0
 801201a:	d1e5      	bne.n	8011fe8 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012022:	693b      	ldr	r3, [r7, #16]
 8012024:	e853 3f00 	ldrex	r3, [r3]
 8012028:	60fb      	str	r3, [r7, #12]
   return(result);
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012030:	637b      	str	r3, [r7, #52]	@ 0x34
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	461a      	mov	r2, r3
 8012038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801203a:	61fb      	str	r3, [r7, #28]
 801203c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801203e:	69b9      	ldr	r1, [r7, #24]
 8012040:	69fa      	ldr	r2, [r7, #28]
 8012042:	e841 2300 	strex	r3, r2, [r1]
 8012046:	617b      	str	r3, [r7, #20]
   return(result);
 8012048:	697b      	ldr	r3, [r7, #20]
 801204a:	2b00      	cmp	r3, #0
 801204c:	d1e6      	bne.n	801201c <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 801204e:	e021      	b.n	8012094 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	69db      	ldr	r3, [r3, #28]
 8012056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801205a:	2b00      	cmp	r3, #0
 801205c:	d013      	beq.n	8012086 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012062:	781a      	ldrb	r2, [r3, #0]
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801206e:	1c5a      	adds	r2, r3, #1
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801207a:	b29b      	uxth	r3, r3
 801207c:	3b01      	subs	r3, #1
 801207e:	b29a      	uxth	r2, r3
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8012086:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012088:	3b01      	subs	r3, #1
 801208a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801208c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801208e:	2b00      	cmp	r3, #0
 8012090:	d1a4      	bne.n	8011fdc <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8012092:	e7ff      	b.n	8012094 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8012094:	bf00      	nop
 8012096:	3744      	adds	r7, #68	@ 0x44
 8012098:	46bd      	mov	sp, r7
 801209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801209e:	4770      	bx	lr

080120a0 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80120a0:	b480      	push	{r7}
 80120a2:	b091      	sub	sp, #68	@ 0x44
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80120ae:	2b21      	cmp	r3, #33	@ 0x21
 80120b0:	d165      	bne.n	801217e <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80120b8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80120ba:	e05c      	b.n	8012176 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80120c2:	b29b      	uxth	r3, r3
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d133      	bne.n	8012130 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	3308      	adds	r3, #8
 80120ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120d0:	6a3b      	ldr	r3, [r7, #32]
 80120d2:	e853 3f00 	ldrex	r3, [r3]
 80120d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80120d8:	69fb      	ldr	r3, [r7, #28]
 80120da:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80120de:	637b      	str	r3, [r7, #52]	@ 0x34
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	3308      	adds	r3, #8
 80120e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80120e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80120ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80120ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80120f0:	e841 2300 	strex	r3, r2, [r1]
 80120f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80120f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d1e5      	bne.n	80120c8 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	e853 3f00 	ldrex	r3, [r3]
 8012108:	60bb      	str	r3, [r7, #8]
   return(result);
 801210a:	68bb      	ldr	r3, [r7, #8]
 801210c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012110:	633b      	str	r3, [r7, #48]	@ 0x30
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	461a      	mov	r2, r3
 8012118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801211a:	61bb      	str	r3, [r7, #24]
 801211c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801211e:	6979      	ldr	r1, [r7, #20]
 8012120:	69ba      	ldr	r2, [r7, #24]
 8012122:	e841 2300 	strex	r3, r2, [r1]
 8012126:	613b      	str	r3, [r7, #16]
   return(result);
 8012128:	693b      	ldr	r3, [r7, #16]
 801212a:	2b00      	cmp	r3, #0
 801212c:	d1e6      	bne.n	80120fc <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 801212e:	e026      	b.n	801217e <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	69db      	ldr	r3, [r3, #28]
 8012136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801213a:	2b00      	cmp	r3, #0
 801213c:	d018      	beq.n	8012170 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012142:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8012144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012146:	881b      	ldrh	r3, [r3, #0]
 8012148:	461a      	mov	r2, r3
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012152:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012158:	1c9a      	adds	r2, r3, #2
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8012164:	b29b      	uxth	r3, r3
 8012166:	3b01      	subs	r3, #1
 8012168:	b29a      	uxth	r2, r3
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8012170:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012172:	3b01      	subs	r3, #1
 8012174:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8012176:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012178:	2b00      	cmp	r3, #0
 801217a:	d19f      	bne.n	80120bc <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 801217c:	e7ff      	b.n	801217e <UART_TxISR_16BIT_FIFOEN+0xde>
 801217e:	bf00      	nop
 8012180:	3744      	adds	r7, #68	@ 0x44
 8012182:	46bd      	mov	sp, r7
 8012184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012188:	4770      	bx	lr

0801218a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801218a:	b580      	push	{r7, lr}
 801218c:	b088      	sub	sp, #32
 801218e:	af00      	add	r7, sp, #0
 8012190:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	e853 3f00 	ldrex	r3, [r3]
 801219e:	60bb      	str	r3, [r7, #8]
   return(result);
 80121a0:	68bb      	ldr	r3, [r7, #8]
 80121a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80121a6:	61fb      	str	r3, [r7, #28]
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	461a      	mov	r2, r3
 80121ae:	69fb      	ldr	r3, [r7, #28]
 80121b0:	61bb      	str	r3, [r7, #24]
 80121b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121b4:	6979      	ldr	r1, [r7, #20]
 80121b6:	69ba      	ldr	r2, [r7, #24]
 80121b8:	e841 2300 	strex	r3, r2, [r1]
 80121bc:	613b      	str	r3, [r7, #16]
   return(result);
 80121be:	693b      	ldr	r3, [r7, #16]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d1e6      	bne.n	8012192 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	2220      	movs	r2, #32
 80121c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	2200      	movs	r2, #0
 80121d0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80121d2:	6878      	ldr	r0, [r7, #4]
 80121d4:	f7fe f9de 	bl	8010594 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80121d8:	bf00      	nop
 80121da:	3720      	adds	r7, #32
 80121dc:	46bd      	mov	sp, r7
 80121de:	bd80      	pop	{r7, pc}

080121e0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80121e0:	b580      	push	{r7, lr}
 80121e2:	b09c      	sub	sp, #112	@ 0x70
 80121e4:	af00      	add	r7, sp, #0
 80121e6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80121ee:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80121f8:	2b22      	cmp	r3, #34	@ 0x22
 80121fa:	f040 80be 	bne.w	801237a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012204:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8012208:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 801220c:	b2d9      	uxtb	r1, r3
 801220e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8012212:	b2da      	uxtb	r2, r3
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012218:	400a      	ands	r2, r1
 801221a:	b2d2      	uxtb	r2, r2
 801221c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012222:	1c5a      	adds	r2, r3, #1
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801222e:	b29b      	uxth	r3, r3
 8012230:	3b01      	subs	r3, #1
 8012232:	b29a      	uxth	r2, r3
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012240:	b29b      	uxth	r3, r3
 8012242:	2b00      	cmp	r3, #0
 8012244:	f040 80a1 	bne.w	801238a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801224e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012250:	e853 3f00 	ldrex	r3, [r3]
 8012254:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8012256:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012258:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801225c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	461a      	mov	r2, r3
 8012264:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012266:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012268:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801226a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801226c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801226e:	e841 2300 	strex	r3, r2, [r1]
 8012272:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8012274:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012276:	2b00      	cmp	r3, #0
 8012278:	d1e6      	bne.n	8012248 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	3308      	adds	r3, #8
 8012280:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012284:	e853 3f00 	ldrex	r3, [r3]
 8012288:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801228a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801228c:	f023 0301 	bic.w	r3, r3, #1
 8012290:	667b      	str	r3, [r7, #100]	@ 0x64
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	3308      	adds	r3, #8
 8012298:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801229a:	647a      	str	r2, [r7, #68]	@ 0x44
 801229c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801229e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80122a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80122a2:	e841 2300 	strex	r3, r2, [r1]
 80122a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80122a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d1e5      	bne.n	801227a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	2220      	movs	r2, #32
 80122b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	2200      	movs	r2, #0
 80122ba:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	2200      	movs	r2, #0
 80122c0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	4a33      	ldr	r2, [pc, #204]	@ (8012394 <UART_RxISR_8BIT+0x1b4>)
 80122c8:	4293      	cmp	r3, r2
 80122ca:	d01f      	beq.n	801230c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	685b      	ldr	r3, [r3, #4]
 80122d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d018      	beq.n	801230c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122e2:	e853 3f00 	ldrex	r3, [r3]
 80122e6:	623b      	str	r3, [r7, #32]
   return(result);
 80122e8:	6a3b      	ldr	r3, [r7, #32]
 80122ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80122ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	461a      	mov	r2, r3
 80122f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80122f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80122fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80122fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012300:	e841 2300 	strex	r3, r2, [r1]
 8012304:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012308:	2b00      	cmp	r3, #0
 801230a:	d1e6      	bne.n	80122da <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012310:	2b01      	cmp	r3, #1
 8012312:	d12e      	bne.n	8012372 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	2200      	movs	r2, #0
 8012318:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012320:	693b      	ldr	r3, [r7, #16]
 8012322:	e853 3f00 	ldrex	r3, [r3]
 8012326:	60fb      	str	r3, [r7, #12]
   return(result);
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	f023 0310 	bic.w	r3, r3, #16
 801232e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	461a      	mov	r2, r3
 8012336:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012338:	61fb      	str	r3, [r7, #28]
 801233a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801233c:	69b9      	ldr	r1, [r7, #24]
 801233e:	69fa      	ldr	r2, [r7, #28]
 8012340:	e841 2300 	strex	r3, r2, [r1]
 8012344:	617b      	str	r3, [r7, #20]
   return(result);
 8012346:	697b      	ldr	r3, [r7, #20]
 8012348:	2b00      	cmp	r3, #0
 801234a:	d1e6      	bne.n	801231a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	69db      	ldr	r3, [r3, #28]
 8012352:	f003 0310 	and.w	r3, r3, #16
 8012356:	2b10      	cmp	r3, #16
 8012358:	d103      	bne.n	8012362 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	2210      	movs	r2, #16
 8012360:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012368:	4619      	mov	r1, r3
 801236a:	6878      	ldr	r0, [r7, #4]
 801236c:	f7fe f93a 	bl	80105e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012370:	e00b      	b.n	801238a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8012372:	6878      	ldr	r0, [r7, #4]
 8012374:	f7f0 fe28 	bl	8002fc8 <HAL_UART_RxCpltCallback>
}
 8012378:	e007      	b.n	801238a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	699a      	ldr	r2, [r3, #24]
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	f042 0208 	orr.w	r2, r2, #8
 8012388:	619a      	str	r2, [r3, #24]
}
 801238a:	bf00      	nop
 801238c:	3770      	adds	r7, #112	@ 0x70
 801238e:	46bd      	mov	sp, r7
 8012390:	bd80      	pop	{r7, pc}
 8012392:	bf00      	nop
 8012394:	58000c00 	.word	0x58000c00

08012398 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8012398:	b580      	push	{r7, lr}
 801239a:	b09c      	sub	sp, #112	@ 0x70
 801239c:	af00      	add	r7, sp, #0
 801239e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80123a6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80123b0:	2b22      	cmp	r3, #34	@ 0x22
 80123b2:	f040 80be 	bne.w	8012532 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80123bc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80123c4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80123c6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80123ca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80123ce:	4013      	ands	r3, r2
 80123d0:	b29a      	uxth	r2, r3
 80123d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80123d4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80123da:	1c9a      	adds	r2, r3, #2
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80123e6:	b29b      	uxth	r3, r3
 80123e8:	3b01      	subs	r3, #1
 80123ea:	b29a      	uxth	r2, r3
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80123f8:	b29b      	uxth	r3, r3
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	f040 80a1 	bne.w	8012542 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012406:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012408:	e853 3f00 	ldrex	r3, [r3]
 801240c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801240e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012410:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8012414:	667b      	str	r3, [r7, #100]	@ 0x64
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	461a      	mov	r2, r3
 801241c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801241e:	657b      	str	r3, [r7, #84]	@ 0x54
 8012420:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012422:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8012424:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012426:	e841 2300 	strex	r3, r2, [r1]
 801242a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801242c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801242e:	2b00      	cmp	r3, #0
 8012430:	d1e6      	bne.n	8012400 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	3308      	adds	r3, #8
 8012438:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801243a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801243c:	e853 3f00 	ldrex	r3, [r3]
 8012440:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8012442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012444:	f023 0301 	bic.w	r3, r3, #1
 8012448:	663b      	str	r3, [r7, #96]	@ 0x60
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	3308      	adds	r3, #8
 8012450:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8012452:	643a      	str	r2, [r7, #64]	@ 0x40
 8012454:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012456:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8012458:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801245a:	e841 2300 	strex	r3, r2, [r1]
 801245e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8012460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012462:	2b00      	cmp	r3, #0
 8012464:	d1e5      	bne.n	8012432 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	2220      	movs	r2, #32
 801246a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	2200      	movs	r2, #0
 8012472:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	2200      	movs	r2, #0
 8012478:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	4a33      	ldr	r2, [pc, #204]	@ (801254c <UART_RxISR_16BIT+0x1b4>)
 8012480:	4293      	cmp	r3, r2
 8012482:	d01f      	beq.n	80124c4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	685b      	ldr	r3, [r3, #4]
 801248a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801248e:	2b00      	cmp	r3, #0
 8012490:	d018      	beq.n	80124c4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012498:	6a3b      	ldr	r3, [r7, #32]
 801249a:	e853 3f00 	ldrex	r3, [r3]
 801249e:	61fb      	str	r3, [r7, #28]
   return(result);
 80124a0:	69fb      	ldr	r3, [r7, #28]
 80124a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80124a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	461a      	mov	r2, r3
 80124ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80124b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80124b2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80124b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80124b8:	e841 2300 	strex	r3, r2, [r1]
 80124bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80124be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d1e6      	bne.n	8012492 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80124c8:	2b01      	cmp	r3, #1
 80124ca:	d12e      	bne.n	801252a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	2200      	movs	r2, #0
 80124d0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	e853 3f00 	ldrex	r3, [r3]
 80124de:	60bb      	str	r3, [r7, #8]
   return(result);
 80124e0:	68bb      	ldr	r3, [r7, #8]
 80124e2:	f023 0310 	bic.w	r3, r3, #16
 80124e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	461a      	mov	r2, r3
 80124ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80124f0:	61bb      	str	r3, [r7, #24]
 80124f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124f4:	6979      	ldr	r1, [r7, #20]
 80124f6:	69ba      	ldr	r2, [r7, #24]
 80124f8:	e841 2300 	strex	r3, r2, [r1]
 80124fc:	613b      	str	r3, [r7, #16]
   return(result);
 80124fe:	693b      	ldr	r3, [r7, #16]
 8012500:	2b00      	cmp	r3, #0
 8012502:	d1e6      	bne.n	80124d2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	69db      	ldr	r3, [r3, #28]
 801250a:	f003 0310 	and.w	r3, r3, #16
 801250e:	2b10      	cmp	r3, #16
 8012510:	d103      	bne.n	801251a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	2210      	movs	r2, #16
 8012518:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012520:	4619      	mov	r1, r3
 8012522:	6878      	ldr	r0, [r7, #4]
 8012524:	f7fe f85e 	bl	80105e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012528:	e00b      	b.n	8012542 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801252a:	6878      	ldr	r0, [r7, #4]
 801252c:	f7f0 fd4c 	bl	8002fc8 <HAL_UART_RxCpltCallback>
}
 8012530:	e007      	b.n	8012542 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	699a      	ldr	r2, [r3, #24]
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	f042 0208 	orr.w	r2, r2, #8
 8012540:	619a      	str	r2, [r3, #24]
}
 8012542:	bf00      	nop
 8012544:	3770      	adds	r7, #112	@ 0x70
 8012546:	46bd      	mov	sp, r7
 8012548:	bd80      	pop	{r7, pc}
 801254a:	bf00      	nop
 801254c:	58000c00 	.word	0x58000c00

08012550 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012550:	b580      	push	{r7, lr}
 8012552:	b0ac      	sub	sp, #176	@ 0xb0
 8012554:	af00      	add	r7, sp, #0
 8012556:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801255e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	69db      	ldr	r3, [r3, #28]
 8012568:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	689b      	ldr	r3, [r3, #8]
 801257c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012586:	2b22      	cmp	r3, #34	@ 0x22
 8012588:	f040 8180 	bne.w	801288c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8012592:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012596:	e123      	b.n	80127e0 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801259e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80125a2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80125a6:	b2d9      	uxtb	r1, r3
 80125a8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80125ac:	b2da      	uxtb	r2, r3
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80125b2:	400a      	ands	r2, r1
 80125b4:	b2d2      	uxtb	r2, r2
 80125b6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80125bc:	1c5a      	adds	r2, r3, #1
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80125c8:	b29b      	uxth	r3, r3
 80125ca:	3b01      	subs	r3, #1
 80125cc:	b29a      	uxth	r2, r3
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	69db      	ldr	r3, [r3, #28]
 80125da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80125de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80125e2:	f003 0307 	and.w	r3, r3, #7
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d053      	beq.n	8012692 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80125ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80125ee:	f003 0301 	and.w	r3, r3, #1
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d011      	beq.n	801261a <UART_RxISR_8BIT_FIFOEN+0xca>
 80125f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80125fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d00b      	beq.n	801261a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	2201      	movs	r2, #1
 8012608:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012610:	f043 0201 	orr.w	r2, r3, #1
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801261a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801261e:	f003 0302 	and.w	r3, r3, #2
 8012622:	2b00      	cmp	r3, #0
 8012624:	d011      	beq.n	801264a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8012626:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801262a:	f003 0301 	and.w	r3, r3, #1
 801262e:	2b00      	cmp	r3, #0
 8012630:	d00b      	beq.n	801264a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	2202      	movs	r2, #2
 8012638:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012640:	f043 0204 	orr.w	r2, r3, #4
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801264a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801264e:	f003 0304 	and.w	r3, r3, #4
 8012652:	2b00      	cmp	r3, #0
 8012654:	d011      	beq.n	801267a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8012656:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801265a:	f003 0301 	and.w	r3, r3, #1
 801265e:	2b00      	cmp	r3, #0
 8012660:	d00b      	beq.n	801267a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	2204      	movs	r2, #4
 8012668:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012670:	f043 0202 	orr.w	r2, r3, #2
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012680:	2b00      	cmp	r3, #0
 8012682:	d006      	beq.n	8012692 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012684:	6878      	ldr	r0, [r7, #4]
 8012686:	f7fd ff99 	bl	80105bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	2200      	movs	r2, #0
 801268e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012698:	b29b      	uxth	r3, r3
 801269a:	2b00      	cmp	r3, #0
 801269c:	f040 80a0 	bne.w	80127e0 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80126a8:	e853 3f00 	ldrex	r3, [r3]
 80126ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80126ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80126b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80126b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	461a      	mov	r2, r3
 80126be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80126c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80126c4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126c6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80126c8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80126ca:	e841 2300 	strex	r3, r2, [r1]
 80126ce:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80126d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d1e4      	bne.n	80126a0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	3308      	adds	r3, #8
 80126dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80126e0:	e853 3f00 	ldrex	r3, [r3]
 80126e4:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80126e6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80126e8:	4b6e      	ldr	r3, [pc, #440]	@ (80128a4 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80126ea:	4013      	ands	r3, r2
 80126ec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	3308      	adds	r3, #8
 80126f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80126fa:	66ba      	str	r2, [r7, #104]	@ 0x68
 80126fc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126fe:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8012700:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8012702:	e841 2300 	strex	r3, r2, [r1]
 8012706:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8012708:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801270a:	2b00      	cmp	r3, #0
 801270c:	d1e3      	bne.n	80126d6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	2220      	movs	r2, #32
 8012712:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	2200      	movs	r2, #0
 801271a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	2200      	movs	r2, #0
 8012720:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	4a60      	ldr	r2, [pc, #384]	@ (80128a8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8012728:	4293      	cmp	r3, r2
 801272a:	d021      	beq.n	8012770 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	685b      	ldr	r3, [r3, #4]
 8012732:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012736:	2b00      	cmp	r3, #0
 8012738:	d01a      	beq.n	8012770 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012740:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012742:	e853 3f00 	ldrex	r3, [r3]
 8012746:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8012748:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801274a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801274e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	461a      	mov	r2, r3
 8012758:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801275c:	657b      	str	r3, [r7, #84]	@ 0x54
 801275e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012760:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8012762:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012764:	e841 2300 	strex	r3, r2, [r1]
 8012768:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801276a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801276c:	2b00      	cmp	r3, #0
 801276e:	d1e4      	bne.n	801273a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012774:	2b01      	cmp	r3, #1
 8012776:	d130      	bne.n	80127da <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	2200      	movs	r2, #0
 801277c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012786:	e853 3f00 	ldrex	r3, [r3]
 801278a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801278c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801278e:	f023 0310 	bic.w	r3, r3, #16
 8012792:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	461a      	mov	r2, r3
 801279c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80127a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80127a2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80127a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80127a8:	e841 2300 	strex	r3, r2, [r1]
 80127ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80127ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d1e4      	bne.n	801277e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	69db      	ldr	r3, [r3, #28]
 80127ba:	f003 0310 	and.w	r3, r3, #16
 80127be:	2b10      	cmp	r3, #16
 80127c0:	d103      	bne.n	80127ca <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	681b      	ldr	r3, [r3, #0]
 80127c6:	2210      	movs	r2, #16
 80127c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80127d0:	4619      	mov	r1, r3
 80127d2:	6878      	ldr	r0, [r7, #4]
 80127d4:	f7fd ff06 	bl	80105e4 <HAL_UARTEx_RxEventCallback>
 80127d8:	e002      	b.n	80127e0 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80127da:	6878      	ldr	r0, [r7, #4]
 80127dc:	f7f0 fbf4 	bl	8002fc8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80127e0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d006      	beq.n	80127f6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80127e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80127ec:	f003 0320 	and.w	r3, r3, #32
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	f47f aed1 	bne.w	8012598 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80127fc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012800:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8012804:	2b00      	cmp	r3, #0
 8012806:	d049      	beq.n	801289c <UART_RxISR_8BIT_FIFOEN+0x34c>
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801280e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8012812:	429a      	cmp	r2, r3
 8012814:	d242      	bcs.n	801289c <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	3308      	adds	r3, #8
 801281c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801281e:	6a3b      	ldr	r3, [r7, #32]
 8012820:	e853 3f00 	ldrex	r3, [r3]
 8012824:	61fb      	str	r3, [r7, #28]
   return(result);
 8012826:	69fb      	ldr	r3, [r7, #28]
 8012828:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801282c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	3308      	adds	r3, #8
 8012836:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801283a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801283c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801283e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012840:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012842:	e841 2300 	strex	r3, r2, [r1]
 8012846:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8012848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801284a:	2b00      	cmp	r3, #0
 801284c:	d1e3      	bne.n	8012816 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	4a16      	ldr	r2, [pc, #88]	@ (80128ac <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8012852:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	e853 3f00 	ldrex	r3, [r3]
 8012860:	60bb      	str	r3, [r7, #8]
   return(result);
 8012862:	68bb      	ldr	r3, [r7, #8]
 8012864:	f043 0320 	orr.w	r3, r3, #32
 8012868:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	461a      	mov	r2, r3
 8012872:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8012876:	61bb      	str	r3, [r7, #24]
 8012878:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801287a:	6979      	ldr	r1, [r7, #20]
 801287c:	69ba      	ldr	r2, [r7, #24]
 801287e:	e841 2300 	strex	r3, r2, [r1]
 8012882:	613b      	str	r3, [r7, #16]
   return(result);
 8012884:	693b      	ldr	r3, [r7, #16]
 8012886:	2b00      	cmp	r3, #0
 8012888:	d1e4      	bne.n	8012854 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801288a:	e007      	b.n	801289c <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	699a      	ldr	r2, [r3, #24]
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	f042 0208 	orr.w	r2, r2, #8
 801289a:	619a      	str	r2, [r3, #24]
}
 801289c:	bf00      	nop
 801289e:	37b0      	adds	r7, #176	@ 0xb0
 80128a0:	46bd      	mov	sp, r7
 80128a2:	bd80      	pop	{r7, pc}
 80128a4:	effffffe 	.word	0xeffffffe
 80128a8:	58000c00 	.word	0x58000c00
 80128ac:	080121e1 	.word	0x080121e1

080128b0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80128b0:	b580      	push	{r7, lr}
 80128b2:	b0ae      	sub	sp, #184	@ 0xb8
 80128b4:	af00      	add	r7, sp, #0
 80128b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80128be:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	69db      	ldr	r3, [r3, #28]
 80128c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	689b      	ldr	r3, [r3, #8]
 80128dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80128e6:	2b22      	cmp	r3, #34	@ 0x22
 80128e8:	f040 8184 	bne.w	8012bf4 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80128f2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80128f6:	e127      	b.n	8012b48 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80128fe:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012906:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 801290a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 801290e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8012912:	4013      	ands	r3, r2
 8012914:	b29a      	uxth	r2, r3
 8012916:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801291a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012920:	1c9a      	adds	r2, r3, #2
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801292c:	b29b      	uxth	r3, r3
 801292e:	3b01      	subs	r3, #1
 8012930:	b29a      	uxth	r2, r3
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	69db      	ldr	r3, [r3, #28]
 801293e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8012942:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012946:	f003 0307 	and.w	r3, r3, #7
 801294a:	2b00      	cmp	r3, #0
 801294c:	d053      	beq.n	80129f6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801294e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012952:	f003 0301 	and.w	r3, r3, #1
 8012956:	2b00      	cmp	r3, #0
 8012958:	d011      	beq.n	801297e <UART_RxISR_16BIT_FIFOEN+0xce>
 801295a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801295e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012962:	2b00      	cmp	r3, #0
 8012964:	d00b      	beq.n	801297e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	2201      	movs	r2, #1
 801296c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012974:	f043 0201 	orr.w	r2, r3, #1
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801297e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012982:	f003 0302 	and.w	r3, r3, #2
 8012986:	2b00      	cmp	r3, #0
 8012988:	d011      	beq.n	80129ae <UART_RxISR_16BIT_FIFOEN+0xfe>
 801298a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801298e:	f003 0301 	and.w	r3, r3, #1
 8012992:	2b00      	cmp	r3, #0
 8012994:	d00b      	beq.n	80129ae <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	2202      	movs	r2, #2
 801299c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80129a4:	f043 0204 	orr.w	r2, r3, #4
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80129ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80129b2:	f003 0304 	and.w	r3, r3, #4
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d011      	beq.n	80129de <UART_RxISR_16BIT_FIFOEN+0x12e>
 80129ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80129be:	f003 0301 	and.w	r3, r3, #1
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d00b      	beq.n	80129de <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	2204      	movs	r2, #4
 80129cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80129d4:	f043 0202 	orr.w	r2, r3, #2
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d006      	beq.n	80129f6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80129e8:	6878      	ldr	r0, [r7, #4]
 80129ea:	f7fd fde7 	bl	80105bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	2200      	movs	r2, #0
 80129f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80129fc:	b29b      	uxth	r3, r3
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	f040 80a2 	bne.w	8012b48 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012a0c:	e853 3f00 	ldrex	r3, [r3]
 8012a10:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8012a12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012a14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012a18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	461a      	mov	r2, r3
 8012a22:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012a26:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012a2a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a2c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8012a2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8012a32:	e841 2300 	strex	r3, r2, [r1]
 8012a36:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8012a38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d1e2      	bne.n	8012a04 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	3308      	adds	r3, #8
 8012a44:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012a48:	e853 3f00 	ldrex	r3, [r3]
 8012a4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8012a4e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012a50:	4b6e      	ldr	r3, [pc, #440]	@ (8012c0c <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8012a52:	4013      	ands	r3, r2
 8012a54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	3308      	adds	r3, #8
 8012a5e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8012a62:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8012a64:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a66:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8012a68:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8012a6a:	e841 2300 	strex	r3, r2, [r1]
 8012a6e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8012a70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d1e3      	bne.n	8012a3e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	2220      	movs	r2, #32
 8012a7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	2200      	movs	r2, #0
 8012a82:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	2200      	movs	r2, #0
 8012a88:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	4a60      	ldr	r2, [pc, #384]	@ (8012c10 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8012a90:	4293      	cmp	r3, r2
 8012a92:	d021      	beq.n	8012ad8 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	685b      	ldr	r3, [r3, #4]
 8012a9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d01a      	beq.n	8012ad8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012aa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012aaa:	e853 3f00 	ldrex	r3, [r3]
 8012aae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8012ab0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012ab2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8012ab6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	461a      	mov	r2, r3
 8012ac0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012ac4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012ac6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ac8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012aca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012acc:	e841 2300 	strex	r3, r2, [r1]
 8012ad0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8012ad2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d1e4      	bne.n	8012aa2 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012adc:	2b01      	cmp	r3, #1
 8012ade:	d130      	bne.n	8012b42 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	2200      	movs	r2, #0
 8012ae4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012aee:	e853 3f00 	ldrex	r3, [r3]
 8012af2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8012af4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012af6:	f023 0310 	bic.w	r3, r3, #16
 8012afa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	461a      	mov	r2, r3
 8012b04:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012b08:	647b      	str	r3, [r7, #68]	@ 0x44
 8012b0a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8012b0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012b10:	e841 2300 	strex	r3, r2, [r1]
 8012b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8012b16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d1e4      	bne.n	8012ae6 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	69db      	ldr	r3, [r3, #28]
 8012b22:	f003 0310 	and.w	r3, r3, #16
 8012b26:	2b10      	cmp	r3, #16
 8012b28:	d103      	bne.n	8012b32 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	2210      	movs	r2, #16
 8012b30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012b38:	4619      	mov	r1, r3
 8012b3a:	6878      	ldr	r0, [r7, #4]
 8012b3c:	f7fd fd52 	bl	80105e4 <HAL_UARTEx_RxEventCallback>
 8012b40:	e002      	b.n	8012b48 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012b42:	6878      	ldr	r0, [r7, #4]
 8012b44:	f7f0 fa40 	bl	8002fc8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012b48:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d006      	beq.n	8012b5e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8012b50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012b54:	f003 0320 	and.w	r3, r3, #32
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	f47f aecd 	bne.w	80128f8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012b64:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012b68:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d049      	beq.n	8012c04 <UART_RxISR_16BIT_FIFOEN+0x354>
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8012b76:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8012b7a:	429a      	cmp	r2, r3
 8012b7c:	d242      	bcs.n	8012c04 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	681b      	ldr	r3, [r3, #0]
 8012b82:	3308      	adds	r3, #8
 8012b84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b88:	e853 3f00 	ldrex	r3, [r3]
 8012b8c:	623b      	str	r3, [r7, #32]
   return(result);
 8012b8e:	6a3b      	ldr	r3, [r7, #32]
 8012b90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8012b94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	3308      	adds	r3, #8
 8012b9e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012ba2:	633a      	str	r2, [r7, #48]	@ 0x30
 8012ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ba6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012ba8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012baa:	e841 2300 	strex	r3, r2, [r1]
 8012bae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d1e3      	bne.n	8012b7e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	4a16      	ldr	r2, [pc, #88]	@ (8012c14 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8012bba:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012bc2:	693b      	ldr	r3, [r7, #16]
 8012bc4:	e853 3f00 	ldrex	r3, [r3]
 8012bc8:	60fb      	str	r3, [r7, #12]
   return(result);
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	f043 0320 	orr.w	r3, r3, #32
 8012bd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	461a      	mov	r2, r3
 8012bda:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012bde:	61fb      	str	r3, [r7, #28]
 8012be0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012be2:	69b9      	ldr	r1, [r7, #24]
 8012be4:	69fa      	ldr	r2, [r7, #28]
 8012be6:	e841 2300 	strex	r3, r2, [r1]
 8012bea:	617b      	str	r3, [r7, #20]
   return(result);
 8012bec:	697b      	ldr	r3, [r7, #20]
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d1e4      	bne.n	8012bbc <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012bf2:	e007      	b.n	8012c04 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	699a      	ldr	r2, [r3, #24]
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	f042 0208 	orr.w	r2, r2, #8
 8012c02:	619a      	str	r2, [r3, #24]
}
 8012c04:	bf00      	nop
 8012c06:	37b8      	adds	r7, #184	@ 0xb8
 8012c08:	46bd      	mov	sp, r7
 8012c0a:	bd80      	pop	{r7, pc}
 8012c0c:	effffffe 	.word	0xeffffffe
 8012c10:	58000c00 	.word	0x58000c00
 8012c14:	08012399 	.word	0x08012399

08012c18 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012c18:	b480      	push	{r7}
 8012c1a:	b083      	sub	sp, #12
 8012c1c:	af00      	add	r7, sp, #0
 8012c1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012c20:	bf00      	nop
 8012c22:	370c      	adds	r7, #12
 8012c24:	46bd      	mov	sp, r7
 8012c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c2a:	4770      	bx	lr

08012c2c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012c2c:	b480      	push	{r7}
 8012c2e:	b083      	sub	sp, #12
 8012c30:	af00      	add	r7, sp, #0
 8012c32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012c34:	bf00      	nop
 8012c36:	370c      	adds	r7, #12
 8012c38:	46bd      	mov	sp, r7
 8012c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c3e:	4770      	bx	lr

08012c40 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012c40:	b480      	push	{r7}
 8012c42:	b083      	sub	sp, #12
 8012c44:	af00      	add	r7, sp, #0
 8012c46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012c48:	bf00      	nop
 8012c4a:	370c      	adds	r7, #12
 8012c4c:	46bd      	mov	sp, r7
 8012c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c52:	4770      	bx	lr

08012c54 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012c54:	b480      	push	{r7}
 8012c56:	b085      	sub	sp, #20
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012c62:	2b01      	cmp	r3, #1
 8012c64:	d101      	bne.n	8012c6a <HAL_UARTEx_DisableFifoMode+0x16>
 8012c66:	2302      	movs	r3, #2
 8012c68:	e027      	b.n	8012cba <HAL_UARTEx_DisableFifoMode+0x66>
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	2201      	movs	r2, #1
 8012c6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	2224      	movs	r2, #36	@ 0x24
 8012c76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	681a      	ldr	r2, [r3, #0]
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	f022 0201 	bic.w	r2, r2, #1
 8012c90:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8012c98:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	2200      	movs	r2, #0
 8012c9e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	68fa      	ldr	r2, [r7, #12]
 8012ca6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	2220      	movs	r2, #32
 8012cac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	2200      	movs	r2, #0
 8012cb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012cb8:	2300      	movs	r3, #0
}
 8012cba:	4618      	mov	r0, r3
 8012cbc:	3714      	adds	r7, #20
 8012cbe:	46bd      	mov	sp, r7
 8012cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cc4:	4770      	bx	lr

08012cc6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012cc6:	b580      	push	{r7, lr}
 8012cc8:	b084      	sub	sp, #16
 8012cca:	af00      	add	r7, sp, #0
 8012ccc:	6078      	str	r0, [r7, #4]
 8012cce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012cd6:	2b01      	cmp	r3, #1
 8012cd8:	d101      	bne.n	8012cde <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012cda:	2302      	movs	r3, #2
 8012cdc:	e02d      	b.n	8012d3a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	2201      	movs	r2, #1
 8012ce2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	2224      	movs	r2, #36	@ 0x24
 8012cea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	681a      	ldr	r2, [r3, #0]
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	f022 0201 	bic.w	r2, r2, #1
 8012d04:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	689b      	ldr	r3, [r3, #8]
 8012d0c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	683a      	ldr	r2, [r7, #0]
 8012d16:	430a      	orrs	r2, r1
 8012d18:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012d1a:	6878      	ldr	r0, [r7, #4]
 8012d1c:	f000 f850 	bl	8012dc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	68fa      	ldr	r2, [r7, #12]
 8012d26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	2220      	movs	r2, #32
 8012d2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	2200      	movs	r2, #0
 8012d34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012d38:	2300      	movs	r3, #0
}
 8012d3a:	4618      	mov	r0, r3
 8012d3c:	3710      	adds	r7, #16
 8012d3e:	46bd      	mov	sp, r7
 8012d40:	bd80      	pop	{r7, pc}

08012d42 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012d42:	b580      	push	{r7, lr}
 8012d44:	b084      	sub	sp, #16
 8012d46:	af00      	add	r7, sp, #0
 8012d48:	6078      	str	r0, [r7, #4]
 8012d4a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012d52:	2b01      	cmp	r3, #1
 8012d54:	d101      	bne.n	8012d5a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012d56:	2302      	movs	r3, #2
 8012d58:	e02d      	b.n	8012db6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	2201      	movs	r2, #1
 8012d5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	2224      	movs	r2, #36	@ 0x24
 8012d66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	681a      	ldr	r2, [r3, #0]
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	f022 0201 	bic.w	r2, r2, #1
 8012d80:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	689b      	ldr	r3, [r3, #8]
 8012d88:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	683a      	ldr	r2, [r7, #0]
 8012d92:	430a      	orrs	r2, r1
 8012d94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012d96:	6878      	ldr	r0, [r7, #4]
 8012d98:	f000 f812 	bl	8012dc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	681b      	ldr	r3, [r3, #0]
 8012da0:	68fa      	ldr	r2, [r7, #12]
 8012da2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	2220      	movs	r2, #32
 8012da8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	2200      	movs	r2, #0
 8012db0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012db4:	2300      	movs	r3, #0
}
 8012db6:	4618      	mov	r0, r3
 8012db8:	3710      	adds	r7, #16
 8012dba:	46bd      	mov	sp, r7
 8012dbc:	bd80      	pop	{r7, pc}
	...

08012dc0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012dc0:	b480      	push	{r7}
 8012dc2:	b085      	sub	sp, #20
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d108      	bne.n	8012de2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	2201      	movs	r2, #1
 8012dd4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	2201      	movs	r2, #1
 8012ddc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012de0:	e031      	b.n	8012e46 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012de2:	2310      	movs	r3, #16
 8012de4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012de6:	2310      	movs	r3, #16
 8012de8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	689b      	ldr	r3, [r3, #8]
 8012df0:	0e5b      	lsrs	r3, r3, #25
 8012df2:	b2db      	uxtb	r3, r3
 8012df4:	f003 0307 	and.w	r3, r3, #7
 8012df8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	689b      	ldr	r3, [r3, #8]
 8012e00:	0f5b      	lsrs	r3, r3, #29
 8012e02:	b2db      	uxtb	r3, r3
 8012e04:	f003 0307 	and.w	r3, r3, #7
 8012e08:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012e0a:	7bbb      	ldrb	r3, [r7, #14]
 8012e0c:	7b3a      	ldrb	r2, [r7, #12]
 8012e0e:	4911      	ldr	r1, [pc, #68]	@ (8012e54 <UARTEx_SetNbDataToProcess+0x94>)
 8012e10:	5c8a      	ldrb	r2, [r1, r2]
 8012e12:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012e16:	7b3a      	ldrb	r2, [r7, #12]
 8012e18:	490f      	ldr	r1, [pc, #60]	@ (8012e58 <UARTEx_SetNbDataToProcess+0x98>)
 8012e1a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012e1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8012e20:	b29a      	uxth	r2, r3
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012e28:	7bfb      	ldrb	r3, [r7, #15]
 8012e2a:	7b7a      	ldrb	r2, [r7, #13]
 8012e2c:	4909      	ldr	r1, [pc, #36]	@ (8012e54 <UARTEx_SetNbDataToProcess+0x94>)
 8012e2e:	5c8a      	ldrb	r2, [r1, r2]
 8012e30:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012e34:	7b7a      	ldrb	r2, [r7, #13]
 8012e36:	4908      	ldr	r1, [pc, #32]	@ (8012e58 <UARTEx_SetNbDataToProcess+0x98>)
 8012e38:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012e3a:	fb93 f3f2 	sdiv	r3, r3, r2
 8012e3e:	b29a      	uxth	r2, r3
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8012e46:	bf00      	nop
 8012e48:	3714      	adds	r7, #20
 8012e4a:	46bd      	mov	sp, r7
 8012e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e50:	4770      	bx	lr
 8012e52:	bf00      	nop
 8012e54:	08019d24 	.word	0x08019d24
 8012e58:	08019d2c 	.word	0x08019d2c

08012e5c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8012e5c:	b580      	push	{r7, lr}
 8012e5e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8012e60:	4904      	ldr	r1, [pc, #16]	@ (8012e74 <MX_FATFS_Init+0x18>)
 8012e62:	4805      	ldr	r0, [pc, #20]	@ (8012e78 <MX_FATFS_Init+0x1c>)
 8012e64:	f001 fcd0 	bl	8014808 <FATFS_LinkDriver>
 8012e68:	4603      	mov	r3, r0
 8012e6a:	461a      	mov	r2, r3
 8012e6c:	4b03      	ldr	r3, [pc, #12]	@ (8012e7c <MX_FATFS_Init+0x20>)
 8012e6e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8012e70:	bf00      	nop
 8012e72:	bd80      	pop	{r7, pc}
 8012e74:	24002aa0 	.word	0x24002aa0
 8012e78:	240000ac 	.word	0x240000ac
 8012e7c:	24002a9c 	.word	0x24002a9c

08012e80 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8012e80:	b480      	push	{r7}
 8012e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8012e84:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8012e86:	4618      	mov	r0, r3
 8012e88:	46bd      	mov	sp, r7
 8012e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e8e:	4770      	bx	lr

08012e90 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8012e90:	b580      	push	{r7, lr}
 8012e92:	b082      	sub	sp, #8
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	4603      	mov	r3, r0
 8012e98:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8012e9a:	79fb      	ldrb	r3, [r7, #7]
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	f000 f9fd 	bl	801329c <SD_disk_initialize>
 8012ea2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8012ea4:	4618      	mov	r0, r3
 8012ea6:	3708      	adds	r7, #8
 8012ea8:	46bd      	mov	sp, r7
 8012eaa:	bd80      	pop	{r7, pc}

08012eac <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8012eac:	b580      	push	{r7, lr}
 8012eae:	b082      	sub	sp, #8
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	4603      	mov	r3, r0
 8012eb4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8012eb6:	79fb      	ldrb	r3, [r7, #7]
 8012eb8:	4618      	mov	r0, r3
 8012eba:	f000 fad5 	bl	8013468 <SD_disk_status>
 8012ebe:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8012ec0:	4618      	mov	r0, r3
 8012ec2:	3708      	adds	r7, #8
 8012ec4:	46bd      	mov	sp, r7
 8012ec6:	bd80      	pop	{r7, pc}

08012ec8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8012ec8:	b580      	push	{r7, lr}
 8012eca:	b084      	sub	sp, #16
 8012ecc:	af00      	add	r7, sp, #0
 8012ece:	60b9      	str	r1, [r7, #8]
 8012ed0:	607a      	str	r2, [r7, #4]
 8012ed2:	603b      	str	r3, [r7, #0]
 8012ed4:	4603      	mov	r3, r0
 8012ed6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8012ed8:	7bf8      	ldrb	r0, [r7, #15]
 8012eda:	683b      	ldr	r3, [r7, #0]
 8012edc:	687a      	ldr	r2, [r7, #4]
 8012ede:	68b9      	ldr	r1, [r7, #8]
 8012ee0:	f000 fad8 	bl	8013494 <SD_disk_read>
 8012ee4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8012ee6:	4618      	mov	r0, r3
 8012ee8:	3710      	adds	r7, #16
 8012eea:	46bd      	mov	sp, r7
 8012eec:	bd80      	pop	{r7, pc}

08012eee <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8012eee:	b580      	push	{r7, lr}
 8012ef0:	b084      	sub	sp, #16
 8012ef2:	af00      	add	r7, sp, #0
 8012ef4:	60b9      	str	r1, [r7, #8]
 8012ef6:	607a      	str	r2, [r7, #4]
 8012ef8:	603b      	str	r3, [r7, #0]
 8012efa:	4603      	mov	r3, r0
 8012efc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8012efe:	7bf8      	ldrb	r0, [r7, #15]
 8012f00:	683b      	ldr	r3, [r7, #0]
 8012f02:	687a      	ldr	r2, [r7, #4]
 8012f04:	68b9      	ldr	r1, [r7, #8]
 8012f06:	f000 fb2f 	bl	8013568 <SD_disk_write>
 8012f0a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	3710      	adds	r7, #16
 8012f10:	46bd      	mov	sp, r7
 8012f12:	bd80      	pop	{r7, pc}

08012f14 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8012f14:	b580      	push	{r7, lr}
 8012f16:	b082      	sub	sp, #8
 8012f18:	af00      	add	r7, sp, #0
 8012f1a:	4603      	mov	r3, r0
 8012f1c:	603a      	str	r2, [r7, #0]
 8012f1e:	71fb      	strb	r3, [r7, #7]
 8012f20:	460b      	mov	r3, r1
 8012f22:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8012f24:	79b9      	ldrb	r1, [r7, #6]
 8012f26:	79fb      	ldrb	r3, [r7, #7]
 8012f28:	683a      	ldr	r2, [r7, #0]
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	f000 fba0 	bl	8013670 <SD_disk_ioctl>
 8012f30:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8012f32:	4618      	mov	r0, r3
 8012f34:	3708      	adds	r7, #8
 8012f36:	46bd      	mov	sp, r7
 8012f38:	bd80      	pop	{r7, pc}
	...

08012f3c <SELECT>:

//-----[ SPI Functions ]-----

/* slave select */
static void SELECT(void)
{
 8012f3c:	b580      	push	{r7, lr}
 8012f3e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8012f40:	2200      	movs	r2, #0
 8012f42:	2110      	movs	r1, #16
 8012f44:	4802      	ldr	r0, [pc, #8]	@ (8012f50 <SELECT+0x14>)
 8012f46:	f7f7 f9b9 	bl	800a2bc <HAL_GPIO_WritePin>
}
 8012f4a:	bf00      	nop
 8012f4c:	bd80      	pop	{r7, pc}
 8012f4e:	bf00      	nop
 8012f50:	58020000 	.word	0x58020000

08012f54 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8012f54:	b580      	push	{r7, lr}
 8012f56:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8012f58:	2201      	movs	r2, #1
 8012f5a:	2110      	movs	r1, #16
 8012f5c:	4802      	ldr	r0, [pc, #8]	@ (8012f68 <DESELECT+0x14>)
 8012f5e:	f7f7 f9ad 	bl	800a2bc <HAL_GPIO_WritePin>
}
 8012f62:	bf00      	nop
 8012f64:	bd80      	pop	{r7, pc}
 8012f66:	bf00      	nop
 8012f68:	58020000 	.word	0x58020000

08012f6c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8012f6c:	b580      	push	{r7, lr}
 8012f6e:	b082      	sub	sp, #8
 8012f70:	af00      	add	r7, sp, #0
 8012f72:	4603      	mov	r3, r0
 8012f74:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8012f76:	bf00      	nop
 8012f78:	4b08      	ldr	r3, [pc, #32]	@ (8012f9c <SPI_TxByte+0x30>)
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	695b      	ldr	r3, [r3, #20]
 8012f7e:	f003 0302 	and.w	r3, r3, #2
 8012f82:	2b02      	cmp	r3, #2
 8012f84:	d1f8      	bne.n	8012f78 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8012f86:	1df9      	adds	r1, r7, #7
 8012f88:	2364      	movs	r3, #100	@ 0x64
 8012f8a:	2201      	movs	r2, #1
 8012f8c:	4803      	ldr	r0, [pc, #12]	@ (8012f9c <SPI_TxByte+0x30>)
 8012f8e:	f7fa fa21 	bl	800d3d4 <HAL_SPI_Transmit>
}
 8012f92:	bf00      	nop
 8012f94:	3708      	adds	r7, #8
 8012f96:	46bd      	mov	sp, r7
 8012f98:	bd80      	pop	{r7, pc}
 8012f9a:	bf00      	nop
 8012f9c:	24000edc 	.word	0x24000edc

08012fa0 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8012fa0:	b580      	push	{r7, lr}
 8012fa2:	b082      	sub	sp, #8
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	6078      	str	r0, [r7, #4]
 8012fa8:	460b      	mov	r3, r1
 8012faa:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8012fac:	bf00      	nop
 8012fae:	4b08      	ldr	r3, [pc, #32]	@ (8012fd0 <SPI_TxBuffer+0x30>)
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	695b      	ldr	r3, [r3, #20]
 8012fb4:	f003 0302 	and.w	r3, r3, #2
 8012fb8:	2b02      	cmp	r3, #2
 8012fba:	d1f8      	bne.n	8012fae <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8012fbc:	887a      	ldrh	r2, [r7, #2]
 8012fbe:	2364      	movs	r3, #100	@ 0x64
 8012fc0:	6879      	ldr	r1, [r7, #4]
 8012fc2:	4803      	ldr	r0, [pc, #12]	@ (8012fd0 <SPI_TxBuffer+0x30>)
 8012fc4:	f7fa fa06 	bl	800d3d4 <HAL_SPI_Transmit>
}
 8012fc8:	bf00      	nop
 8012fca:	3708      	adds	r7, #8
 8012fcc:	46bd      	mov	sp, r7
 8012fce:	bd80      	pop	{r7, pc}
 8012fd0:	24000edc 	.word	0x24000edc

08012fd4 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8012fd4:	b580      	push	{r7, lr}
 8012fd6:	b084      	sub	sp, #16
 8012fd8:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8012fda:	23ff      	movs	r3, #255	@ 0xff
 8012fdc:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8012fde:	bf00      	nop
 8012fe0:	4b09      	ldr	r3, [pc, #36]	@ (8013008 <SPI_RxByte+0x34>)
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	695b      	ldr	r3, [r3, #20]
 8012fe6:	f003 0302 	and.w	r3, r3, #2
 8012fea:	2b02      	cmp	r3, #2
 8012fec:	d1f8      	bne.n	8012fe0 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8012fee:	1dba      	adds	r2, r7, #6
 8012ff0:	1df9      	adds	r1, r7, #7
 8012ff2:	2364      	movs	r3, #100	@ 0x64
 8012ff4:	9300      	str	r3, [sp, #0]
 8012ff6:	2301      	movs	r3, #1
 8012ff8:	4803      	ldr	r0, [pc, #12]	@ (8013008 <SPI_RxByte+0x34>)
 8012ffa:	f7fa fe4b 	bl	800dc94 <HAL_SPI_TransmitReceive>
  return data;
 8012ffe:	79bb      	ldrb	r3, [r7, #6]
}
 8013000:	4618      	mov	r0, r3
 8013002:	3708      	adds	r7, #8
 8013004:	46bd      	mov	sp, r7
 8013006:	bd80      	pop	{r7, pc}
 8013008:	24000edc 	.word	0x24000edc

0801300c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 801300c:	b580      	push	{r7, lr}
 801300e:	b082      	sub	sp, #8
 8013010:	af00      	add	r7, sp, #0
 8013012:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8013014:	f7ff ffde 	bl	8012fd4 <SPI_RxByte>
 8013018:	4603      	mov	r3, r0
 801301a:	461a      	mov	r2, r3
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	701a      	strb	r2, [r3, #0]
}
 8013020:	bf00      	nop
 8013022:	3708      	adds	r7, #8
 8013024:	46bd      	mov	sp, r7
 8013026:	bd80      	pop	{r7, pc}

08013028 <SD_ReadyWait>:

//-----[ SD Card Functions ]-----

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8013028:	b580      	push	{r7, lr}
 801302a:	b082      	sub	sp, #8
 801302c:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 801302e:	4b0a      	ldr	r3, [pc, #40]	@ (8013058 <SD_ReadyWait+0x30>)
 8013030:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8013034:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8013036:	f7ff ffcd 	bl	8012fd4 <SPI_RxByte>
 801303a:	4603      	mov	r3, r0
 801303c:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 801303e:	79fb      	ldrb	r3, [r7, #7]
 8013040:	2bff      	cmp	r3, #255	@ 0xff
 8013042:	d003      	beq.n	801304c <SD_ReadyWait+0x24>
 8013044:	4b04      	ldr	r3, [pc, #16]	@ (8013058 <SD_ReadyWait+0x30>)
 8013046:	881b      	ldrh	r3, [r3, #0]
 8013048:	2b00      	cmp	r3, #0
 801304a:	d1f4      	bne.n	8013036 <SD_ReadyWait+0xe>
  return res;
 801304c:	79fb      	ldrb	r3, [r7, #7]
}
 801304e:	4618      	mov	r0, r3
 8013050:	3708      	adds	r7, #8
 8013052:	46bd      	mov	sp, r7
 8013054:	bd80      	pop	{r7, pc}
 8013056:	bf00      	nop
 8013058:	24002aa6 	.word	0x24002aa6

0801305c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 801305c:	b580      	push	{r7, lr}
 801305e:	b084      	sub	sp, #16
 8013060:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 8013062:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8013066:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 8013068:	f7ff ff74 	bl	8012f54 <DESELECT>
  for(int i = 0; i < 10; i++)
 801306c:	2300      	movs	r3, #0
 801306e:	60bb      	str	r3, [r7, #8]
 8013070:	e005      	b.n	801307e <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8013072:	20ff      	movs	r0, #255	@ 0xff
 8013074:	f7ff ff7a 	bl	8012f6c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8013078:	68bb      	ldr	r3, [r7, #8]
 801307a:	3301      	adds	r3, #1
 801307c:	60bb      	str	r3, [r7, #8]
 801307e:	68bb      	ldr	r3, [r7, #8]
 8013080:	2b09      	cmp	r3, #9
 8013082:	ddf6      	ble.n	8013072 <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 8013084:	f7ff ff5a 	bl	8012f3c <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8013088:	2340      	movs	r3, #64	@ 0x40
 801308a:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 801308c:	2300      	movs	r3, #0
 801308e:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8013090:	2300      	movs	r3, #0
 8013092:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8013094:	2300      	movs	r3, #0
 8013096:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8013098:	2300      	movs	r3, #0
 801309a:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 801309c:	2395      	movs	r3, #149	@ 0x95
 801309e:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 80130a0:	463b      	mov	r3, r7
 80130a2:	2106      	movs	r1, #6
 80130a4:	4618      	mov	r0, r3
 80130a6:	f7ff ff7b 	bl	8012fa0 <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 80130aa:	e002      	b.n	80130b2 <SD_PowerOn+0x56>
  {
    cnt--;
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	3b01      	subs	r3, #1
 80130b0:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 80130b2:	f7ff ff8f 	bl	8012fd4 <SPI_RxByte>
 80130b6:	4603      	mov	r3, r0
 80130b8:	2b01      	cmp	r3, #1
 80130ba:	d002      	beq.n	80130c2 <SD_PowerOn+0x66>
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d1f4      	bne.n	80130ac <SD_PowerOn+0x50>
  }
  DESELECT();
 80130c2:	f7ff ff47 	bl	8012f54 <DESELECT>
  SPI_TxByte(0XFF);
 80130c6:	20ff      	movs	r0, #255	@ 0xff
 80130c8:	f7ff ff50 	bl	8012f6c <SPI_TxByte>
  PowerFlag = 1;
 80130cc:	4b03      	ldr	r3, [pc, #12]	@ (80130dc <SD_PowerOn+0x80>)
 80130ce:	2201      	movs	r2, #1
 80130d0:	701a      	strb	r2, [r3, #0]
}
 80130d2:	bf00      	nop
 80130d4:	3710      	adds	r7, #16
 80130d6:	46bd      	mov	sp, r7
 80130d8:	bd80      	pop	{r7, pc}
 80130da:	bf00      	nop
 80130dc:	24002aa9 	.word	0x24002aa9

080130e0 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 80130e0:	b480      	push	{r7}
 80130e2:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80130e4:	4b03      	ldr	r3, [pc, #12]	@ (80130f4 <SD_PowerOff+0x14>)
 80130e6:	2200      	movs	r2, #0
 80130e8:	701a      	strb	r2, [r3, #0]
}
 80130ea:	bf00      	nop
 80130ec:	46bd      	mov	sp, r7
 80130ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130f2:	4770      	bx	lr
 80130f4:	24002aa9 	.word	0x24002aa9

080130f8 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 80130f8:	b480      	push	{r7}
 80130fa:	af00      	add	r7, sp, #0
  return PowerFlag;
 80130fc:	4b03      	ldr	r3, [pc, #12]	@ (801310c <SD_CheckPower+0x14>)
 80130fe:	781b      	ldrb	r3, [r3, #0]
}
 8013100:	4618      	mov	r0, r3
 8013102:	46bd      	mov	sp, r7
 8013104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013108:	4770      	bx	lr
 801310a:	bf00      	nop
 801310c:	24002aa9 	.word	0x24002aa9

08013110 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8013110:	b580      	push	{r7, lr}
 8013112:	b084      	sub	sp, #16
 8013114:	af00      	add	r7, sp, #0
 8013116:	6078      	str	r0, [r7, #4]
 8013118:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 801311a:	4b13      	ldr	r3, [pc, #76]	@ (8013168 <SD_RxDataBlock+0x58>)
 801311c:	22c8      	movs	r2, #200	@ 0xc8
 801311e:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8013120:	f7ff ff58 	bl	8012fd4 <SPI_RxByte>
 8013124:	4603      	mov	r3, r0
 8013126:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8013128:	7bfb      	ldrb	r3, [r7, #15]
 801312a:	2bff      	cmp	r3, #255	@ 0xff
 801312c:	d103      	bne.n	8013136 <SD_RxDataBlock+0x26>
 801312e:	4b0e      	ldr	r3, [pc, #56]	@ (8013168 <SD_RxDataBlock+0x58>)
 8013130:	881b      	ldrh	r3, [r3, #0]
 8013132:	2b00      	cmp	r3, #0
 8013134:	d1f4      	bne.n	8013120 <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 8013136:	7bfb      	ldrb	r3, [r7, #15]
 8013138:	2bfe      	cmp	r3, #254	@ 0xfe
 801313a:	d001      	beq.n	8013140 <SD_RxDataBlock+0x30>
 801313c:	2300      	movs	r3, #0
 801313e:	e00f      	b.n	8013160 <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	1c5a      	adds	r2, r3, #1
 8013144:	607a      	str	r2, [r7, #4]
 8013146:	4618      	mov	r0, r3
 8013148:	f7ff ff60 	bl	801300c <SPI_RxBytePtr>
  } while(len--);
 801314c:	683b      	ldr	r3, [r7, #0]
 801314e:	1e5a      	subs	r2, r3, #1
 8013150:	603a      	str	r2, [r7, #0]
 8013152:	2b00      	cmp	r3, #0
 8013154:	d1f4      	bne.n	8013140 <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 8013156:	f7ff ff3d 	bl	8012fd4 <SPI_RxByte>
  SPI_RxByte();
 801315a:	f7ff ff3b 	bl	8012fd4 <SPI_RxByte>
  return TRUE;
 801315e:	2301      	movs	r3, #1
}
 8013160:	4618      	mov	r0, r3
 8013162:	3710      	adds	r7, #16
 8013164:	46bd      	mov	sp, r7
 8013166:	bd80      	pop	{r7, pc}
 8013168:	24002aa4 	.word	0x24002aa4

0801316c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 801316c:	b580      	push	{r7, lr}
 801316e:	b084      	sub	sp, #16
 8013170:	af00      	add	r7, sp, #0
 8013172:	6078      	str	r0, [r7, #4]
 8013174:	460b      	mov	r3, r1
 8013176:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8013178:	2300      	movs	r3, #0
 801317a:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 801317c:	f7ff ff54 	bl	8013028 <SD_ReadyWait>
 8013180:	4603      	mov	r3, r0
 8013182:	2bff      	cmp	r3, #255	@ 0xff
 8013184:	d001      	beq.n	801318a <SD_TxDataBlock+0x1e>
 8013186:	2300      	movs	r3, #0
 8013188:	e02f      	b.n	80131ea <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 801318a:	78fb      	ldrb	r3, [r7, #3]
 801318c:	4618      	mov	r0, r3
 801318e:	f7ff feed 	bl	8012f6c <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8013192:	78fb      	ldrb	r3, [r7, #3]
 8013194:	2bfd      	cmp	r3, #253	@ 0xfd
 8013196:	d020      	beq.n	80131da <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8013198:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801319c:	6878      	ldr	r0, [r7, #4]
 801319e:	f7ff feff 	bl	8012fa0 <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 80131a2:	f7ff ff17 	bl	8012fd4 <SPI_RxByte>
    SPI_RxByte();
 80131a6:	f7ff ff15 	bl	8012fd4 <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 80131aa:	e00b      	b.n	80131c4 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 80131ac:	f7ff ff12 	bl	8012fd4 <SPI_RxByte>
 80131b0:	4603      	mov	r3, r0
 80131b2:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 80131b4:	7bfb      	ldrb	r3, [r7, #15]
 80131b6:	f003 031f 	and.w	r3, r3, #31
 80131ba:	2b05      	cmp	r3, #5
 80131bc:	d006      	beq.n	80131cc <SD_TxDataBlock+0x60>
      i++;
 80131be:	7bbb      	ldrb	r3, [r7, #14]
 80131c0:	3301      	adds	r3, #1
 80131c2:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 80131c4:	7bbb      	ldrb	r3, [r7, #14]
 80131c6:	2b40      	cmp	r3, #64	@ 0x40
 80131c8:	d9f0      	bls.n	80131ac <SD_TxDataBlock+0x40>
 80131ca:	e000      	b.n	80131ce <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 80131cc:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 80131ce:	bf00      	nop
 80131d0:	f7ff ff00 	bl	8012fd4 <SPI_RxByte>
 80131d4:	4603      	mov	r3, r0
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d0fa      	beq.n	80131d0 <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 80131da:	7bfb      	ldrb	r3, [r7, #15]
 80131dc:	f003 031f 	and.w	r3, r3, #31
 80131e0:	2b05      	cmp	r3, #5
 80131e2:	d101      	bne.n	80131e8 <SD_TxDataBlock+0x7c>
 80131e4:	2301      	movs	r3, #1
 80131e6:	e000      	b.n	80131ea <SD_TxDataBlock+0x7e>

  return FALSE;
 80131e8:	2300      	movs	r3, #0
}
 80131ea:	4618      	mov	r0, r3
 80131ec:	3710      	adds	r7, #16
 80131ee:	46bd      	mov	sp, r7
 80131f0:	bd80      	pop	{r7, pc}

080131f2 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80131f2:	b580      	push	{r7, lr}
 80131f4:	b084      	sub	sp, #16
 80131f6:	af00      	add	r7, sp, #0
 80131f8:	4603      	mov	r3, r0
 80131fa:	6039      	str	r1, [r7, #0]
 80131fc:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 80131fe:	f7ff ff13 	bl	8013028 <SD_ReadyWait>
 8013202:	4603      	mov	r3, r0
 8013204:	2bff      	cmp	r3, #255	@ 0xff
 8013206:	d001      	beq.n	801320c <SD_SendCmd+0x1a>
 8013208:	23ff      	movs	r3, #255	@ 0xff
 801320a:	e042      	b.n	8013292 <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 801320c:	79fb      	ldrb	r3, [r7, #7]
 801320e:	4618      	mov	r0, r3
 8013210:	f7ff feac 	bl	8012f6c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8013214:	683b      	ldr	r3, [r7, #0]
 8013216:	0e1b      	lsrs	r3, r3, #24
 8013218:	b2db      	uxtb	r3, r3
 801321a:	4618      	mov	r0, r3
 801321c:	f7ff fea6 	bl	8012f6c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8013220:	683b      	ldr	r3, [r7, #0]
 8013222:	0c1b      	lsrs	r3, r3, #16
 8013224:	b2db      	uxtb	r3, r3
 8013226:	4618      	mov	r0, r3
 8013228:	f7ff fea0 	bl	8012f6c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 801322c:	683b      	ldr	r3, [r7, #0]
 801322e:	0a1b      	lsrs	r3, r3, #8
 8013230:	b2db      	uxtb	r3, r3
 8013232:	4618      	mov	r0, r3
 8013234:	f7ff fe9a 	bl	8012f6c <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8013238:	683b      	ldr	r3, [r7, #0]
 801323a:	b2db      	uxtb	r3, r3
 801323c:	4618      	mov	r0, r3
 801323e:	f7ff fe95 	bl	8012f6c <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8013242:	79fb      	ldrb	r3, [r7, #7]
 8013244:	2b40      	cmp	r3, #64	@ 0x40
 8013246:	d102      	bne.n	801324e <SD_SendCmd+0x5c>
 8013248:	2395      	movs	r3, #149	@ 0x95
 801324a:	73fb      	strb	r3, [r7, #15]
 801324c:	e007      	b.n	801325e <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 801324e:	79fb      	ldrb	r3, [r7, #7]
 8013250:	2b48      	cmp	r3, #72	@ 0x48
 8013252:	d102      	bne.n	801325a <SD_SendCmd+0x68>
 8013254:	2387      	movs	r3, #135	@ 0x87
 8013256:	73fb      	strb	r3, [r7, #15]
 8013258:	e001      	b.n	801325e <SD_SendCmd+0x6c>
  else crc = 1;
 801325a:	2301      	movs	r3, #1
 801325c:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 801325e:	7bfb      	ldrb	r3, [r7, #15]
 8013260:	4618      	mov	r0, r3
 8013262:	f7ff fe83 	bl	8012f6c <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8013266:	79fb      	ldrb	r3, [r7, #7]
 8013268:	2b4c      	cmp	r3, #76	@ 0x4c
 801326a:	d101      	bne.n	8013270 <SD_SendCmd+0x7e>
 801326c:	f7ff feb2 	bl	8012fd4 <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 8013270:	230a      	movs	r3, #10
 8013272:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8013274:	f7ff feae 	bl	8012fd4 <SPI_RxByte>
 8013278:	4603      	mov	r3, r0
 801327a:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 801327c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8013280:	2b00      	cmp	r3, #0
 8013282:	da05      	bge.n	8013290 <SD_SendCmd+0x9e>
 8013284:	7bbb      	ldrb	r3, [r7, #14]
 8013286:	3b01      	subs	r3, #1
 8013288:	73bb      	strb	r3, [r7, #14]
 801328a:	7bbb      	ldrb	r3, [r7, #14]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d1f1      	bne.n	8013274 <SD_SendCmd+0x82>

  return res;
 8013290:	7b7b      	ldrb	r3, [r7, #13]
}
 8013292:	4618      	mov	r0, r3
 8013294:	3710      	adds	r7, #16
 8013296:	46bd      	mov	sp, r7
 8013298:	bd80      	pop	{r7, pc}
	...

0801329c <SD_disk_initialize>:

//-----[ user_diskio.c Functions ]-----

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 801329c:	b590      	push	{r4, r7, lr}
 801329e:	b085      	sub	sp, #20
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	4603      	mov	r3, r0
 80132a4:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 80132a6:	79fb      	ldrb	r3, [r7, #7]
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d001      	beq.n	80132b0 <SD_disk_initialize+0x14>
 80132ac:	2301      	movs	r3, #1
 80132ae:	e0d1      	b.n	8013454 <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 80132b0:	4b6a      	ldr	r3, [pc, #424]	@ (801345c <SD_disk_initialize+0x1c0>)
 80132b2:	781b      	ldrb	r3, [r3, #0]
 80132b4:	b2db      	uxtb	r3, r3
 80132b6:	f003 0302 	and.w	r3, r3, #2
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d003      	beq.n	80132c6 <SD_disk_initialize+0x2a>
 80132be:	4b67      	ldr	r3, [pc, #412]	@ (801345c <SD_disk_initialize+0x1c0>)
 80132c0:	781b      	ldrb	r3, [r3, #0]
 80132c2:	b2db      	uxtb	r3, r3
 80132c4:	e0c6      	b.n	8013454 <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 80132c6:	f7ff fec9 	bl	801305c <SD_PowerOn>
  /* slave select */
  SELECT();
 80132ca:	f7ff fe37 	bl	8012f3c <SELECT>
  /* check disk type */
  type = 0;
 80132ce:	2300      	movs	r3, #0
 80132d0:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 80132d2:	2100      	movs	r1, #0
 80132d4:	2040      	movs	r0, #64	@ 0x40
 80132d6:	f7ff ff8c 	bl	80131f2 <SD_SendCmd>
 80132da:	4603      	mov	r3, r0
 80132dc:	2b01      	cmp	r3, #1
 80132de:	f040 80a1 	bne.w	8013424 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 80132e2:	4b5f      	ldr	r3, [pc, #380]	@ (8013460 <SD_disk_initialize+0x1c4>)
 80132e4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80132e8:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80132ea:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80132ee:	2048      	movs	r0, #72	@ 0x48
 80132f0:	f7ff ff7f 	bl	80131f2 <SD_SendCmd>
 80132f4:	4603      	mov	r3, r0
 80132f6:	2b01      	cmp	r3, #1
 80132f8:	d155      	bne.n	80133a6 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 80132fa:	2300      	movs	r3, #0
 80132fc:	73fb      	strb	r3, [r7, #15]
 80132fe:	e00c      	b.n	801331a <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8013300:	7bfc      	ldrb	r4, [r7, #15]
 8013302:	f7ff fe67 	bl	8012fd4 <SPI_RxByte>
 8013306:	4603      	mov	r3, r0
 8013308:	461a      	mov	r2, r3
 801330a:	f104 0310 	add.w	r3, r4, #16
 801330e:	443b      	add	r3, r7
 8013310:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8013314:	7bfb      	ldrb	r3, [r7, #15]
 8013316:	3301      	adds	r3, #1
 8013318:	73fb      	strb	r3, [r7, #15]
 801331a:	7bfb      	ldrb	r3, [r7, #15]
 801331c:	2b03      	cmp	r3, #3
 801331e:	d9ef      	bls.n	8013300 <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8013320:	7abb      	ldrb	r3, [r7, #10]
 8013322:	2b01      	cmp	r3, #1
 8013324:	d17e      	bne.n	8013424 <SD_disk_initialize+0x188>
 8013326:	7afb      	ldrb	r3, [r7, #11]
 8013328:	2baa      	cmp	r3, #170	@ 0xaa
 801332a:	d17b      	bne.n	8013424 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 801332c:	2100      	movs	r1, #0
 801332e:	2077      	movs	r0, #119	@ 0x77
 8013330:	f7ff ff5f 	bl	80131f2 <SD_SendCmd>
 8013334:	4603      	mov	r3, r0
 8013336:	2b01      	cmp	r3, #1
 8013338:	d807      	bhi.n	801334a <SD_disk_initialize+0xae>
 801333a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 801333e:	2069      	movs	r0, #105	@ 0x69
 8013340:	f7ff ff57 	bl	80131f2 <SD_SendCmd>
 8013344:	4603      	mov	r3, r0
 8013346:	2b00      	cmp	r3, #0
 8013348:	d004      	beq.n	8013354 <SD_disk_initialize+0xb8>
        } while (Timer1);
 801334a:	4b45      	ldr	r3, [pc, #276]	@ (8013460 <SD_disk_initialize+0x1c4>)
 801334c:	881b      	ldrh	r3, [r3, #0]
 801334e:	2b00      	cmp	r3, #0
 8013350:	d1ec      	bne.n	801332c <SD_disk_initialize+0x90>
 8013352:	e000      	b.n	8013356 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8013354:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8013356:	4b42      	ldr	r3, [pc, #264]	@ (8013460 <SD_disk_initialize+0x1c4>)
 8013358:	881b      	ldrh	r3, [r3, #0]
 801335a:	2b00      	cmp	r3, #0
 801335c:	d062      	beq.n	8013424 <SD_disk_initialize+0x188>
 801335e:	2100      	movs	r1, #0
 8013360:	207a      	movs	r0, #122	@ 0x7a
 8013362:	f7ff ff46 	bl	80131f2 <SD_SendCmd>
 8013366:	4603      	mov	r3, r0
 8013368:	2b00      	cmp	r3, #0
 801336a:	d15b      	bne.n	8013424 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 801336c:	2300      	movs	r3, #0
 801336e:	73fb      	strb	r3, [r7, #15]
 8013370:	e00c      	b.n	801338c <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 8013372:	7bfc      	ldrb	r4, [r7, #15]
 8013374:	f7ff fe2e 	bl	8012fd4 <SPI_RxByte>
 8013378:	4603      	mov	r3, r0
 801337a:	461a      	mov	r2, r3
 801337c:	f104 0310 	add.w	r3, r4, #16
 8013380:	443b      	add	r3, r7
 8013382:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8013386:	7bfb      	ldrb	r3, [r7, #15]
 8013388:	3301      	adds	r3, #1
 801338a:	73fb      	strb	r3, [r7, #15]
 801338c:	7bfb      	ldrb	r3, [r7, #15]
 801338e:	2b03      	cmp	r3, #3
 8013390:	d9ef      	bls.n	8013372 <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8013392:	7a3b      	ldrb	r3, [r7, #8]
 8013394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013398:	2b00      	cmp	r3, #0
 801339a:	d001      	beq.n	80133a0 <SD_disk_initialize+0x104>
 801339c:	230c      	movs	r3, #12
 801339e:	e000      	b.n	80133a2 <SD_disk_initialize+0x106>
 80133a0:	2304      	movs	r3, #4
 80133a2:	73bb      	strb	r3, [r7, #14]
 80133a4:	e03e      	b.n	8013424 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80133a6:	2100      	movs	r1, #0
 80133a8:	2077      	movs	r0, #119	@ 0x77
 80133aa:	f7ff ff22 	bl	80131f2 <SD_SendCmd>
 80133ae:	4603      	mov	r3, r0
 80133b0:	2b01      	cmp	r3, #1
 80133b2:	d808      	bhi.n	80133c6 <SD_disk_initialize+0x12a>
 80133b4:	2100      	movs	r1, #0
 80133b6:	2069      	movs	r0, #105	@ 0x69
 80133b8:	f7ff ff1b 	bl	80131f2 <SD_SendCmd>
 80133bc:	4603      	mov	r3, r0
 80133be:	2b01      	cmp	r3, #1
 80133c0:	d801      	bhi.n	80133c6 <SD_disk_initialize+0x12a>
 80133c2:	2302      	movs	r3, #2
 80133c4:	e000      	b.n	80133c8 <SD_disk_initialize+0x12c>
 80133c6:	2301      	movs	r3, #1
 80133c8:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 80133ca:	7bbb      	ldrb	r3, [r7, #14]
 80133cc:	2b02      	cmp	r3, #2
 80133ce:	d10e      	bne.n	80133ee <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80133d0:	2100      	movs	r1, #0
 80133d2:	2077      	movs	r0, #119	@ 0x77
 80133d4:	f7ff ff0d 	bl	80131f2 <SD_SendCmd>
 80133d8:	4603      	mov	r3, r0
 80133da:	2b01      	cmp	r3, #1
 80133dc:	d80e      	bhi.n	80133fc <SD_disk_initialize+0x160>
 80133de:	2100      	movs	r1, #0
 80133e0:	2069      	movs	r0, #105	@ 0x69
 80133e2:	f7ff ff06 	bl	80131f2 <SD_SendCmd>
 80133e6:	4603      	mov	r3, r0
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d107      	bne.n	80133fc <SD_disk_initialize+0x160>
 80133ec:	e00c      	b.n	8013408 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80133ee:	2100      	movs	r1, #0
 80133f0:	2041      	movs	r0, #65	@ 0x41
 80133f2:	f7ff fefe 	bl	80131f2 <SD_SendCmd>
 80133f6:	4603      	mov	r3, r0
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d004      	beq.n	8013406 <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 80133fc:	4b18      	ldr	r3, [pc, #96]	@ (8013460 <SD_disk_initialize+0x1c4>)
 80133fe:	881b      	ldrh	r3, [r3, #0]
 8013400:	2b00      	cmp	r3, #0
 8013402:	d1e2      	bne.n	80133ca <SD_disk_initialize+0x12e>
 8013404:	e000      	b.n	8013408 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8013406:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8013408:	4b15      	ldr	r3, [pc, #84]	@ (8013460 <SD_disk_initialize+0x1c4>)
 801340a:	881b      	ldrh	r3, [r3, #0]
 801340c:	2b00      	cmp	r3, #0
 801340e:	d007      	beq.n	8013420 <SD_disk_initialize+0x184>
 8013410:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8013414:	2050      	movs	r0, #80	@ 0x50
 8013416:	f7ff feec 	bl	80131f2 <SD_SendCmd>
 801341a:	4603      	mov	r3, r0
 801341c:	2b00      	cmp	r3, #0
 801341e:	d001      	beq.n	8013424 <SD_disk_initialize+0x188>
 8013420:	2300      	movs	r3, #0
 8013422:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 8013424:	4a0f      	ldr	r2, [pc, #60]	@ (8013464 <SD_disk_initialize+0x1c8>)
 8013426:	7bbb      	ldrb	r3, [r7, #14]
 8013428:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 801342a:	f7ff fd93 	bl	8012f54 <DESELECT>
  SPI_RxByte();
 801342e:	f7ff fdd1 	bl	8012fd4 <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 8013432:	7bbb      	ldrb	r3, [r7, #14]
 8013434:	2b00      	cmp	r3, #0
 8013436:	d008      	beq.n	801344a <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8013438:	4b08      	ldr	r3, [pc, #32]	@ (801345c <SD_disk_initialize+0x1c0>)
 801343a:	781b      	ldrb	r3, [r3, #0]
 801343c:	b2db      	uxtb	r3, r3
 801343e:	f023 0301 	bic.w	r3, r3, #1
 8013442:	b2da      	uxtb	r2, r3
 8013444:	4b05      	ldr	r3, [pc, #20]	@ (801345c <SD_disk_initialize+0x1c0>)
 8013446:	701a      	strb	r2, [r3, #0]
 8013448:	e001      	b.n	801344e <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 801344a:	f7ff fe49 	bl	80130e0 <SD_PowerOff>
  }
  return Stat;
 801344e:	4b03      	ldr	r3, [pc, #12]	@ (801345c <SD_disk_initialize+0x1c0>)
 8013450:	781b      	ldrb	r3, [r3, #0]
 8013452:	b2db      	uxtb	r3, r3
}
 8013454:	4618      	mov	r0, r3
 8013456:	3714      	adds	r7, #20
 8013458:	46bd      	mov	sp, r7
 801345a:	bd90      	pop	{r4, r7, pc}
 801345c:	240000c0 	.word	0x240000c0
 8013460:	24002aa4 	.word	0x24002aa4
 8013464:	24002aa8 	.word	0x24002aa8

08013468 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8013468:	b480      	push	{r7}
 801346a:	b083      	sub	sp, #12
 801346c:	af00      	add	r7, sp, #0
 801346e:	4603      	mov	r3, r0
 8013470:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 8013472:	79fb      	ldrb	r3, [r7, #7]
 8013474:	2b00      	cmp	r3, #0
 8013476:	d001      	beq.n	801347c <SD_disk_status+0x14>
 8013478:	2301      	movs	r3, #1
 801347a:	e002      	b.n	8013482 <SD_disk_status+0x1a>
  return Stat;
 801347c:	4b04      	ldr	r3, [pc, #16]	@ (8013490 <SD_disk_status+0x28>)
 801347e:	781b      	ldrb	r3, [r3, #0]
 8013480:	b2db      	uxtb	r3, r3
}
 8013482:	4618      	mov	r0, r3
 8013484:	370c      	adds	r7, #12
 8013486:	46bd      	mov	sp, r7
 8013488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801348c:	4770      	bx	lr
 801348e:	bf00      	nop
 8013490:	240000c0 	.word	0x240000c0

08013494 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8013494:	b580      	push	{r7, lr}
 8013496:	b084      	sub	sp, #16
 8013498:	af00      	add	r7, sp, #0
 801349a:	60b9      	str	r1, [r7, #8]
 801349c:	607a      	str	r2, [r7, #4]
 801349e:	603b      	str	r3, [r7, #0]
 80134a0:	4603      	mov	r3, r0
 80134a2:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 80134a4:	7bfb      	ldrb	r3, [r7, #15]
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d102      	bne.n	80134b0 <SD_disk_read+0x1c>
 80134aa:	683b      	ldr	r3, [r7, #0]
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d101      	bne.n	80134b4 <SD_disk_read+0x20>
 80134b0:	2304      	movs	r3, #4
 80134b2:	e051      	b.n	8013558 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80134b4:	4b2a      	ldr	r3, [pc, #168]	@ (8013560 <SD_disk_read+0xcc>)
 80134b6:	781b      	ldrb	r3, [r3, #0]
 80134b8:	b2db      	uxtb	r3, r3
 80134ba:	f003 0301 	and.w	r3, r3, #1
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d001      	beq.n	80134c6 <SD_disk_read+0x32>
 80134c2:	2303      	movs	r3, #3
 80134c4:	e048      	b.n	8013558 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 80134c6:	4b27      	ldr	r3, [pc, #156]	@ (8013564 <SD_disk_read+0xd0>)
 80134c8:	781b      	ldrb	r3, [r3, #0]
 80134ca:	f003 0304 	and.w	r3, r3, #4
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d102      	bne.n	80134d8 <SD_disk_read+0x44>
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	025b      	lsls	r3, r3, #9
 80134d6:	607b      	str	r3, [r7, #4]

  SELECT();
 80134d8:	f7ff fd30 	bl	8012f3c <SELECT>

  if (count == 1)
 80134dc:	683b      	ldr	r3, [r7, #0]
 80134de:	2b01      	cmp	r3, #1
 80134e0:	d111      	bne.n	8013506 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80134e2:	6879      	ldr	r1, [r7, #4]
 80134e4:	2051      	movs	r0, #81	@ 0x51
 80134e6:	f7ff fe84 	bl	80131f2 <SD_SendCmd>
 80134ea:	4603      	mov	r3, r0
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d129      	bne.n	8013544 <SD_disk_read+0xb0>
 80134f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80134f4:	68b8      	ldr	r0, [r7, #8]
 80134f6:	f7ff fe0b 	bl	8013110 <SD_RxDataBlock>
 80134fa:	4603      	mov	r3, r0
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d021      	beq.n	8013544 <SD_disk_read+0xb0>
 8013500:	2300      	movs	r3, #0
 8013502:	603b      	str	r3, [r7, #0]
 8013504:	e01e      	b.n	8013544 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8013506:	6879      	ldr	r1, [r7, #4]
 8013508:	2052      	movs	r0, #82	@ 0x52
 801350a:	f7ff fe72 	bl	80131f2 <SD_SendCmd>
 801350e:	4603      	mov	r3, r0
 8013510:	2b00      	cmp	r3, #0
 8013512:	d117      	bne.n	8013544 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8013514:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8013518:	68b8      	ldr	r0, [r7, #8]
 801351a:	f7ff fdf9 	bl	8013110 <SD_RxDataBlock>
 801351e:	4603      	mov	r3, r0
 8013520:	2b00      	cmp	r3, #0
 8013522:	d00a      	beq.n	801353a <SD_disk_read+0xa6>
        buff += 512;
 8013524:	68bb      	ldr	r3, [r7, #8]
 8013526:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 801352a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 801352c:	683b      	ldr	r3, [r7, #0]
 801352e:	3b01      	subs	r3, #1
 8013530:	603b      	str	r3, [r7, #0]
 8013532:	683b      	ldr	r3, [r7, #0]
 8013534:	2b00      	cmp	r3, #0
 8013536:	d1ed      	bne.n	8013514 <SD_disk_read+0x80>
 8013538:	e000      	b.n	801353c <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 801353a:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 801353c:	2100      	movs	r1, #0
 801353e:	204c      	movs	r0, #76	@ 0x4c
 8013540:	f7ff fe57 	bl	80131f2 <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8013544:	f7ff fd06 	bl	8012f54 <DESELECT>
  SPI_RxByte();
 8013548:	f7ff fd44 	bl	8012fd4 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 801354c:	683b      	ldr	r3, [r7, #0]
 801354e:	2b00      	cmp	r3, #0
 8013550:	bf14      	ite	ne
 8013552:	2301      	movne	r3, #1
 8013554:	2300      	moveq	r3, #0
 8013556:	b2db      	uxtb	r3, r3
}
 8013558:	4618      	mov	r0, r3
 801355a:	3710      	adds	r7, #16
 801355c:	46bd      	mov	sp, r7
 801355e:	bd80      	pop	{r7, pc}
 8013560:	240000c0 	.word	0x240000c0
 8013564:	24002aa8 	.word	0x24002aa8

08013568 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8013568:	b580      	push	{r7, lr}
 801356a:	b084      	sub	sp, #16
 801356c:	af00      	add	r7, sp, #0
 801356e:	60b9      	str	r1, [r7, #8]
 8013570:	607a      	str	r2, [r7, #4]
 8013572:	603b      	str	r3, [r7, #0]
 8013574:	4603      	mov	r3, r0
 8013576:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8013578:	7bfb      	ldrb	r3, [r7, #15]
 801357a:	2b00      	cmp	r3, #0
 801357c:	d102      	bne.n	8013584 <SD_disk_write+0x1c>
 801357e:	683b      	ldr	r3, [r7, #0]
 8013580:	2b00      	cmp	r3, #0
 8013582:	d101      	bne.n	8013588 <SD_disk_write+0x20>
 8013584:	2304      	movs	r3, #4
 8013586:	e06b      	b.n	8013660 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8013588:	4b37      	ldr	r3, [pc, #220]	@ (8013668 <SD_disk_write+0x100>)
 801358a:	781b      	ldrb	r3, [r3, #0]
 801358c:	b2db      	uxtb	r3, r3
 801358e:	f003 0301 	and.w	r3, r3, #1
 8013592:	2b00      	cmp	r3, #0
 8013594:	d001      	beq.n	801359a <SD_disk_write+0x32>
 8013596:	2303      	movs	r3, #3
 8013598:	e062      	b.n	8013660 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 801359a:	4b33      	ldr	r3, [pc, #204]	@ (8013668 <SD_disk_write+0x100>)
 801359c:	781b      	ldrb	r3, [r3, #0]
 801359e:	b2db      	uxtb	r3, r3
 80135a0:	f003 0304 	and.w	r3, r3, #4
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d001      	beq.n	80135ac <SD_disk_write+0x44>
 80135a8:	2302      	movs	r3, #2
 80135aa:	e059      	b.n	8013660 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 80135ac:	4b2f      	ldr	r3, [pc, #188]	@ (801366c <SD_disk_write+0x104>)
 80135ae:	781b      	ldrb	r3, [r3, #0]
 80135b0:	f003 0304 	and.w	r3, r3, #4
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d102      	bne.n	80135be <SD_disk_write+0x56>
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	025b      	lsls	r3, r3, #9
 80135bc:	607b      	str	r3, [r7, #4]

  SELECT();
 80135be:	f7ff fcbd 	bl	8012f3c <SELECT>

  if (count == 1)
 80135c2:	683b      	ldr	r3, [r7, #0]
 80135c4:	2b01      	cmp	r3, #1
 80135c6:	d110      	bne.n	80135ea <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80135c8:	6879      	ldr	r1, [r7, #4]
 80135ca:	2058      	movs	r0, #88	@ 0x58
 80135cc:	f7ff fe11 	bl	80131f2 <SD_SendCmd>
 80135d0:	4603      	mov	r3, r0
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d13a      	bne.n	801364c <SD_disk_write+0xe4>
 80135d6:	21fe      	movs	r1, #254	@ 0xfe
 80135d8:	68b8      	ldr	r0, [r7, #8]
 80135da:	f7ff fdc7 	bl	801316c <SD_TxDataBlock>
 80135de:	4603      	mov	r3, r0
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d033      	beq.n	801364c <SD_disk_write+0xe4>
      count = 0;
 80135e4:	2300      	movs	r3, #0
 80135e6:	603b      	str	r3, [r7, #0]
 80135e8:	e030      	b.n	801364c <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 80135ea:	4b20      	ldr	r3, [pc, #128]	@ (801366c <SD_disk_write+0x104>)
 80135ec:	781b      	ldrb	r3, [r3, #0]
 80135ee:	f003 0302 	and.w	r3, r3, #2
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d007      	beq.n	8013606 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80135f6:	2100      	movs	r1, #0
 80135f8:	2077      	movs	r0, #119	@ 0x77
 80135fa:	f7ff fdfa 	bl	80131f2 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80135fe:	6839      	ldr	r1, [r7, #0]
 8013600:	2057      	movs	r0, #87	@ 0x57
 8013602:	f7ff fdf6 	bl	80131f2 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8013606:	6879      	ldr	r1, [r7, #4]
 8013608:	2059      	movs	r0, #89	@ 0x59
 801360a:	f7ff fdf2 	bl	80131f2 <SD_SendCmd>
 801360e:	4603      	mov	r3, r0
 8013610:	2b00      	cmp	r3, #0
 8013612:	d11b      	bne.n	801364c <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8013614:	21fc      	movs	r1, #252	@ 0xfc
 8013616:	68b8      	ldr	r0, [r7, #8]
 8013618:	f7ff fda8 	bl	801316c <SD_TxDataBlock>
 801361c:	4603      	mov	r3, r0
 801361e:	2b00      	cmp	r3, #0
 8013620:	d00a      	beq.n	8013638 <SD_disk_write+0xd0>
        buff += 512;
 8013622:	68bb      	ldr	r3, [r7, #8]
 8013624:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8013628:	60bb      	str	r3, [r7, #8]
      } while (--count);
 801362a:	683b      	ldr	r3, [r7, #0]
 801362c:	3b01      	subs	r3, #1
 801362e:	603b      	str	r3, [r7, #0]
 8013630:	683b      	ldr	r3, [r7, #0]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d1ee      	bne.n	8013614 <SD_disk_write+0xac>
 8013636:	e000      	b.n	801363a <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8013638:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 801363a:	21fd      	movs	r1, #253	@ 0xfd
 801363c:	2000      	movs	r0, #0
 801363e:	f7ff fd95 	bl	801316c <SD_TxDataBlock>
 8013642:	4603      	mov	r3, r0
 8013644:	2b00      	cmp	r3, #0
 8013646:	d101      	bne.n	801364c <SD_disk_write+0xe4>
      {
        count = 1;
 8013648:	2301      	movs	r3, #1
 801364a:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 801364c:	f7ff fc82 	bl	8012f54 <DESELECT>
  SPI_RxByte();
 8013650:	f7ff fcc0 	bl	8012fd4 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8013654:	683b      	ldr	r3, [r7, #0]
 8013656:	2b00      	cmp	r3, #0
 8013658:	bf14      	ite	ne
 801365a:	2301      	movne	r3, #1
 801365c:	2300      	moveq	r3, #0
 801365e:	b2db      	uxtb	r3, r3
}
 8013660:	4618      	mov	r0, r3
 8013662:	3710      	adds	r7, #16
 8013664:	46bd      	mov	sp, r7
 8013666:	bd80      	pop	{r7, pc}
 8013668:	240000c0 	.word	0x240000c0
 801366c:	24002aa8 	.word	0x24002aa8

08013670 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8013670:	b590      	push	{r4, r7, lr}
 8013672:	b08b      	sub	sp, #44	@ 0x2c
 8013674:	af00      	add	r7, sp, #0
 8013676:	4603      	mov	r3, r0
 8013678:	603a      	str	r2, [r7, #0]
 801367a:	71fb      	strb	r3, [r7, #7]
 801367c:	460b      	mov	r3, r1
 801367e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8013680:	683b      	ldr	r3, [r7, #0]
 8013682:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8013684:	79fb      	ldrb	r3, [r7, #7]
 8013686:	2b00      	cmp	r3, #0
 8013688:	d001      	beq.n	801368e <SD_disk_ioctl+0x1e>
 801368a:	2304      	movs	r3, #4
 801368c:	e113      	b.n	80138b6 <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 801368e:	2301      	movs	r3, #1
 8013690:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8013694:	79bb      	ldrb	r3, [r7, #6]
 8013696:	2b05      	cmp	r3, #5
 8013698:	d124      	bne.n	80136e4 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 801369a:	6a3b      	ldr	r3, [r7, #32]
 801369c:	781b      	ldrb	r3, [r3, #0]
 801369e:	2b02      	cmp	r3, #2
 80136a0:	d012      	beq.n	80136c8 <SD_disk_ioctl+0x58>
 80136a2:	2b02      	cmp	r3, #2
 80136a4:	dc1a      	bgt.n	80136dc <SD_disk_ioctl+0x6c>
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d002      	beq.n	80136b0 <SD_disk_ioctl+0x40>
 80136aa:	2b01      	cmp	r3, #1
 80136ac:	d006      	beq.n	80136bc <SD_disk_ioctl+0x4c>
 80136ae:	e015      	b.n	80136dc <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 80136b0:	f7ff fd16 	bl	80130e0 <SD_PowerOff>
      res = RES_OK;
 80136b4:	2300      	movs	r3, #0
 80136b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80136ba:	e0fa      	b.n	80138b2 <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 80136bc:	f7ff fcce 	bl	801305c <SD_PowerOn>
      res = RES_OK;
 80136c0:	2300      	movs	r3, #0
 80136c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80136c6:	e0f4      	b.n	80138b2 <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 80136c8:	6a3b      	ldr	r3, [r7, #32]
 80136ca:	1c5c      	adds	r4, r3, #1
 80136cc:	f7ff fd14 	bl	80130f8 <SD_CheckPower>
 80136d0:	4603      	mov	r3, r0
 80136d2:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 80136d4:	2300      	movs	r3, #0
 80136d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80136da:	e0ea      	b.n	80138b2 <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 80136dc:	2304      	movs	r3, #4
 80136de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80136e2:	e0e6      	b.n	80138b2 <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT){
 80136e4:	4b76      	ldr	r3, [pc, #472]	@ (80138c0 <SD_disk_ioctl+0x250>)
 80136e6:	781b      	ldrb	r3, [r3, #0]
 80136e8:	b2db      	uxtb	r3, r3
 80136ea:	f003 0301 	and.w	r3, r3, #1
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d001      	beq.n	80136f6 <SD_disk_ioctl+0x86>
    	return RES_NOTRDY;
 80136f2:	2303      	movs	r3, #3
 80136f4:	e0df      	b.n	80138b6 <SD_disk_ioctl+0x246>
    }
    SELECT();
 80136f6:	f7ff fc21 	bl	8012f3c <SELECT>
    switch (ctrl)
 80136fa:	79bb      	ldrb	r3, [r7, #6]
 80136fc:	2b0d      	cmp	r3, #13
 80136fe:	f200 80c9 	bhi.w	8013894 <SD_disk_ioctl+0x224>
 8013702:	a201      	add	r2, pc, #4	@ (adr r2, 8013708 <SD_disk_ioctl+0x98>)
 8013704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013708:	080137ff 	.word	0x080137ff
 801370c:	08013741 	.word	0x08013741
 8013710:	080137ef 	.word	0x080137ef
 8013714:	08013895 	.word	0x08013895
 8013718:	08013895 	.word	0x08013895
 801371c:	08013895 	.word	0x08013895
 8013720:	08013895 	.word	0x08013895
 8013724:	08013895 	.word	0x08013895
 8013728:	08013895 	.word	0x08013895
 801372c:	08013895 	.word	0x08013895
 8013730:	08013895 	.word	0x08013895
 8013734:	08013811 	.word	0x08013811
 8013738:	08013835 	.word	0x08013835
 801373c:	08013859 	.word	0x08013859
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8013740:	2100      	movs	r1, #0
 8013742:	2049      	movs	r0, #73	@ 0x49
 8013744:	f7ff fd55 	bl	80131f2 <SD_SendCmd>
 8013748:	4603      	mov	r3, r0
 801374a:	2b00      	cmp	r3, #0
 801374c:	f040 80a6 	bne.w	801389c <SD_disk_ioctl+0x22c>
 8013750:	f107 030c 	add.w	r3, r7, #12
 8013754:	2110      	movs	r1, #16
 8013756:	4618      	mov	r0, r3
 8013758:	f7ff fcda 	bl	8013110 <SD_RxDataBlock>
 801375c:	4603      	mov	r3, r0
 801375e:	2b00      	cmp	r3, #0
 8013760:	f000 809c 	beq.w	801389c <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 8013764:	7b3b      	ldrb	r3, [r7, #12]
 8013766:	099b      	lsrs	r3, r3, #6
 8013768:	b2db      	uxtb	r3, r3
 801376a:	2b01      	cmp	r3, #1
 801376c:	d10d      	bne.n	801378a <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 801376e:	7d7b      	ldrb	r3, [r7, #21]
 8013770:	461a      	mov	r2, r3
 8013772:	7d3b      	ldrb	r3, [r7, #20]
 8013774:	021b      	lsls	r3, r3, #8
 8013776:	b29b      	uxth	r3, r3
 8013778:	4413      	add	r3, r2
 801377a:	b29b      	uxth	r3, r3
 801377c:	3301      	adds	r3, #1
 801377e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8013780:	8bfb      	ldrh	r3, [r7, #30]
 8013782:	029a      	lsls	r2, r3, #10
 8013784:	683b      	ldr	r3, [r7, #0]
 8013786:	601a      	str	r2, [r3, #0]
 8013788:	e02d      	b.n	80137e6 <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 801378a:	7c7b      	ldrb	r3, [r7, #17]
 801378c:	f003 030f 	and.w	r3, r3, #15
 8013790:	b2da      	uxtb	r2, r3
 8013792:	7dbb      	ldrb	r3, [r7, #22]
 8013794:	09db      	lsrs	r3, r3, #7
 8013796:	b2db      	uxtb	r3, r3
 8013798:	4413      	add	r3, r2
 801379a:	b2da      	uxtb	r2, r3
 801379c:	7d7b      	ldrb	r3, [r7, #21]
 801379e:	005b      	lsls	r3, r3, #1
 80137a0:	b2db      	uxtb	r3, r3
 80137a2:	f003 0306 	and.w	r3, r3, #6
 80137a6:	b2db      	uxtb	r3, r3
 80137a8:	4413      	add	r3, r2
 80137aa:	b2db      	uxtb	r3, r3
 80137ac:	3302      	adds	r3, #2
 80137ae:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80137b2:	7d3b      	ldrb	r3, [r7, #20]
 80137b4:	099b      	lsrs	r3, r3, #6
 80137b6:	b2db      	uxtb	r3, r3
 80137b8:	461a      	mov	r2, r3
 80137ba:	7cfb      	ldrb	r3, [r7, #19]
 80137bc:	009b      	lsls	r3, r3, #2
 80137be:	b29b      	uxth	r3, r3
 80137c0:	4413      	add	r3, r2
 80137c2:	b29a      	uxth	r2, r3
 80137c4:	7cbb      	ldrb	r3, [r7, #18]
 80137c6:	029b      	lsls	r3, r3, #10
 80137c8:	b29b      	uxth	r3, r3
 80137ca:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80137ce:	b29b      	uxth	r3, r3
 80137d0:	4413      	add	r3, r2
 80137d2:	b29b      	uxth	r3, r3
 80137d4:	3301      	adds	r3, #1
 80137d6:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80137d8:	8bfa      	ldrh	r2, [r7, #30]
 80137da:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80137de:	3b09      	subs	r3, #9
 80137e0:	409a      	lsls	r2, r3
 80137e2:	683b      	ldr	r3, [r7, #0]
 80137e4:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 80137e6:	2300      	movs	r3, #0
 80137e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 80137ec:	e056      	b.n	801389c <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 80137ee:	683b      	ldr	r3, [r7, #0]
 80137f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80137f4:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80137f6:	2300      	movs	r3, #0
 80137f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80137fc:	e055      	b.n	80138aa <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80137fe:	f7ff fc13 	bl	8013028 <SD_ReadyWait>
 8013802:	4603      	mov	r3, r0
 8013804:	2bff      	cmp	r3, #255	@ 0xff
 8013806:	d14b      	bne.n	80138a0 <SD_disk_ioctl+0x230>
 8013808:	2300      	movs	r3, #0
 801380a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 801380e:	e047      	b.n	80138a0 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8013810:	2100      	movs	r1, #0
 8013812:	2049      	movs	r0, #73	@ 0x49
 8013814:	f7ff fced 	bl	80131f2 <SD_SendCmd>
 8013818:	4603      	mov	r3, r0
 801381a:	2b00      	cmp	r3, #0
 801381c:	d142      	bne.n	80138a4 <SD_disk_ioctl+0x234>
 801381e:	2110      	movs	r1, #16
 8013820:	6a38      	ldr	r0, [r7, #32]
 8013822:	f7ff fc75 	bl	8013110 <SD_RxDataBlock>
 8013826:	4603      	mov	r3, r0
 8013828:	2b00      	cmp	r3, #0
 801382a:	d03b      	beq.n	80138a4 <SD_disk_ioctl+0x234>
 801382c:	2300      	movs	r3, #0
 801382e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8013832:	e037      	b.n	80138a4 <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8013834:	2100      	movs	r1, #0
 8013836:	204a      	movs	r0, #74	@ 0x4a
 8013838:	f7ff fcdb 	bl	80131f2 <SD_SendCmd>
 801383c:	4603      	mov	r3, r0
 801383e:	2b00      	cmp	r3, #0
 8013840:	d132      	bne.n	80138a8 <SD_disk_ioctl+0x238>
 8013842:	2110      	movs	r1, #16
 8013844:	6a38      	ldr	r0, [r7, #32]
 8013846:	f7ff fc63 	bl	8013110 <SD_RxDataBlock>
 801384a:	4603      	mov	r3, r0
 801384c:	2b00      	cmp	r3, #0
 801384e:	d02b      	beq.n	80138a8 <SD_disk_ioctl+0x238>
 8013850:	2300      	movs	r3, #0
 8013852:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8013856:	e027      	b.n	80138a8 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8013858:	2100      	movs	r1, #0
 801385a:	207a      	movs	r0, #122	@ 0x7a
 801385c:	f7ff fcc9 	bl	80131f2 <SD_SendCmd>
 8013860:	4603      	mov	r3, r0
 8013862:	2b00      	cmp	r3, #0
 8013864:	d116      	bne.n	8013894 <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 8013866:	2300      	movs	r3, #0
 8013868:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801386c:	e00b      	b.n	8013886 <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 801386e:	6a3c      	ldr	r4, [r7, #32]
 8013870:	1c63      	adds	r3, r4, #1
 8013872:	623b      	str	r3, [r7, #32]
 8013874:	f7ff fbae 	bl	8012fd4 <SPI_RxByte>
 8013878:	4603      	mov	r3, r0
 801387a:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 801387c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013880:	3301      	adds	r3, #1
 8013882:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8013886:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801388a:	2b03      	cmp	r3, #3
 801388c:	d9ef      	bls.n	801386e <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 801388e:	2300      	movs	r3, #0
 8013890:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 8013894:	2304      	movs	r3, #4
 8013896:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801389a:	e006      	b.n	80138aa <SD_disk_ioctl+0x23a>
      break;
 801389c:	bf00      	nop
 801389e:	e004      	b.n	80138aa <SD_disk_ioctl+0x23a>
      break;
 80138a0:	bf00      	nop
 80138a2:	e002      	b.n	80138aa <SD_disk_ioctl+0x23a>
      break;
 80138a4:	bf00      	nop
 80138a6:	e000      	b.n	80138aa <SD_disk_ioctl+0x23a>
      break;
 80138a8:	bf00      	nop
    }
    DESELECT();
 80138aa:	f7ff fb53 	bl	8012f54 <DESELECT>
    SPI_RxByte();
 80138ae:	f7ff fb91 	bl	8012fd4 <SPI_RxByte>
  }
  return res;
 80138b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80138b6:	4618      	mov	r0, r3
 80138b8:	372c      	adds	r7, #44	@ 0x2c
 80138ba:	46bd      	mov	sp, r7
 80138bc:	bd90      	pop	{r4, r7, pc}
 80138be:	bf00      	nop
 80138c0:	240000c0 	.word	0x240000c0

080138c4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80138c4:	b580      	push	{r7, lr}
 80138c6:	b084      	sub	sp, #16
 80138c8:	af00      	add	r7, sp, #0
 80138ca:	4603      	mov	r3, r0
 80138cc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80138ce:	79fb      	ldrb	r3, [r7, #7]
 80138d0:	4a08      	ldr	r2, [pc, #32]	@ (80138f4 <disk_status+0x30>)
 80138d2:	009b      	lsls	r3, r3, #2
 80138d4:	4413      	add	r3, r2
 80138d6:	685b      	ldr	r3, [r3, #4]
 80138d8:	685b      	ldr	r3, [r3, #4]
 80138da:	79fa      	ldrb	r2, [r7, #7]
 80138dc:	4905      	ldr	r1, [pc, #20]	@ (80138f4 <disk_status+0x30>)
 80138de:	440a      	add	r2, r1
 80138e0:	7a12      	ldrb	r2, [r2, #8]
 80138e2:	4610      	mov	r0, r2
 80138e4:	4798      	blx	r3
 80138e6:	4603      	mov	r3, r0
 80138e8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80138ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80138ec:	4618      	mov	r0, r3
 80138ee:	3710      	adds	r7, #16
 80138f0:	46bd      	mov	sp, r7
 80138f2:	bd80      	pop	{r7, pc}
 80138f4:	24002aac 	.word	0x24002aac

080138f8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80138f8:	b590      	push	{r4, r7, lr}
 80138fa:	b087      	sub	sp, #28
 80138fc:	af00      	add	r7, sp, #0
 80138fe:	60b9      	str	r1, [r7, #8]
 8013900:	607a      	str	r2, [r7, #4]
 8013902:	603b      	str	r3, [r7, #0]
 8013904:	4603      	mov	r3, r0
 8013906:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8013908:	7bfb      	ldrb	r3, [r7, #15]
 801390a:	4a0a      	ldr	r2, [pc, #40]	@ (8013934 <disk_read+0x3c>)
 801390c:	009b      	lsls	r3, r3, #2
 801390e:	4413      	add	r3, r2
 8013910:	685b      	ldr	r3, [r3, #4]
 8013912:	689c      	ldr	r4, [r3, #8]
 8013914:	7bfb      	ldrb	r3, [r7, #15]
 8013916:	4a07      	ldr	r2, [pc, #28]	@ (8013934 <disk_read+0x3c>)
 8013918:	4413      	add	r3, r2
 801391a:	7a18      	ldrb	r0, [r3, #8]
 801391c:	683b      	ldr	r3, [r7, #0]
 801391e:	687a      	ldr	r2, [r7, #4]
 8013920:	68b9      	ldr	r1, [r7, #8]
 8013922:	47a0      	blx	r4
 8013924:	4603      	mov	r3, r0
 8013926:	75fb      	strb	r3, [r7, #23]
  return res;
 8013928:	7dfb      	ldrb	r3, [r7, #23]
}
 801392a:	4618      	mov	r0, r3
 801392c:	371c      	adds	r7, #28
 801392e:	46bd      	mov	sp, r7
 8013930:	bd90      	pop	{r4, r7, pc}
 8013932:	bf00      	nop
 8013934:	24002aac 	.word	0x24002aac

08013938 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8013938:	b590      	push	{r4, r7, lr}
 801393a:	b087      	sub	sp, #28
 801393c:	af00      	add	r7, sp, #0
 801393e:	60b9      	str	r1, [r7, #8]
 8013940:	607a      	str	r2, [r7, #4]
 8013942:	603b      	str	r3, [r7, #0]
 8013944:	4603      	mov	r3, r0
 8013946:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8013948:	7bfb      	ldrb	r3, [r7, #15]
 801394a:	4a0a      	ldr	r2, [pc, #40]	@ (8013974 <disk_write+0x3c>)
 801394c:	009b      	lsls	r3, r3, #2
 801394e:	4413      	add	r3, r2
 8013950:	685b      	ldr	r3, [r3, #4]
 8013952:	68dc      	ldr	r4, [r3, #12]
 8013954:	7bfb      	ldrb	r3, [r7, #15]
 8013956:	4a07      	ldr	r2, [pc, #28]	@ (8013974 <disk_write+0x3c>)
 8013958:	4413      	add	r3, r2
 801395a:	7a18      	ldrb	r0, [r3, #8]
 801395c:	683b      	ldr	r3, [r7, #0]
 801395e:	687a      	ldr	r2, [r7, #4]
 8013960:	68b9      	ldr	r1, [r7, #8]
 8013962:	47a0      	blx	r4
 8013964:	4603      	mov	r3, r0
 8013966:	75fb      	strb	r3, [r7, #23]
  return res;
 8013968:	7dfb      	ldrb	r3, [r7, #23]
}
 801396a:	4618      	mov	r0, r3
 801396c:	371c      	adds	r7, #28
 801396e:	46bd      	mov	sp, r7
 8013970:	bd90      	pop	{r4, r7, pc}
 8013972:	bf00      	nop
 8013974:	24002aac 	.word	0x24002aac

08013978 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8013978:	b580      	push	{r7, lr}
 801397a:	b084      	sub	sp, #16
 801397c:	af00      	add	r7, sp, #0
 801397e:	4603      	mov	r3, r0
 8013980:	603a      	str	r2, [r7, #0]
 8013982:	71fb      	strb	r3, [r7, #7]
 8013984:	460b      	mov	r3, r1
 8013986:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8013988:	79fb      	ldrb	r3, [r7, #7]
 801398a:	4a09      	ldr	r2, [pc, #36]	@ (80139b0 <disk_ioctl+0x38>)
 801398c:	009b      	lsls	r3, r3, #2
 801398e:	4413      	add	r3, r2
 8013990:	685b      	ldr	r3, [r3, #4]
 8013992:	691b      	ldr	r3, [r3, #16]
 8013994:	79fa      	ldrb	r2, [r7, #7]
 8013996:	4906      	ldr	r1, [pc, #24]	@ (80139b0 <disk_ioctl+0x38>)
 8013998:	440a      	add	r2, r1
 801399a:	7a10      	ldrb	r0, [r2, #8]
 801399c:	79b9      	ldrb	r1, [r7, #6]
 801399e:	683a      	ldr	r2, [r7, #0]
 80139a0:	4798      	blx	r3
 80139a2:	4603      	mov	r3, r0
 80139a4:	73fb      	strb	r3, [r7, #15]
  return res;
 80139a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80139a8:	4618      	mov	r0, r3
 80139aa:	3710      	adds	r7, #16
 80139ac:	46bd      	mov	sp, r7
 80139ae:	bd80      	pop	{r7, pc}
 80139b0:	24002aac 	.word	0x24002aac

080139b4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80139b4:	b480      	push	{r7}
 80139b6:	b085      	sub	sp, #20
 80139b8:	af00      	add	r7, sp, #0
 80139ba:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	3301      	adds	r3, #1
 80139c0:	781b      	ldrb	r3, [r3, #0]
 80139c2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80139c4:	89fb      	ldrh	r3, [r7, #14]
 80139c6:	021b      	lsls	r3, r3, #8
 80139c8:	b21a      	sxth	r2, r3
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	781b      	ldrb	r3, [r3, #0]
 80139ce:	b21b      	sxth	r3, r3
 80139d0:	4313      	orrs	r3, r2
 80139d2:	b21b      	sxth	r3, r3
 80139d4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80139d6:	89fb      	ldrh	r3, [r7, #14]
}
 80139d8:	4618      	mov	r0, r3
 80139da:	3714      	adds	r7, #20
 80139dc:	46bd      	mov	sp, r7
 80139de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139e2:	4770      	bx	lr

080139e4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80139e4:	b480      	push	{r7}
 80139e6:	b085      	sub	sp, #20
 80139e8:	af00      	add	r7, sp, #0
 80139ea:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	3303      	adds	r3, #3
 80139f0:	781b      	ldrb	r3, [r3, #0]
 80139f2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	021b      	lsls	r3, r3, #8
 80139f8:	687a      	ldr	r2, [r7, #4]
 80139fa:	3202      	adds	r2, #2
 80139fc:	7812      	ldrb	r2, [r2, #0]
 80139fe:	4313      	orrs	r3, r2
 8013a00:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8013a02:	68fb      	ldr	r3, [r7, #12]
 8013a04:	021b      	lsls	r3, r3, #8
 8013a06:	687a      	ldr	r2, [r7, #4]
 8013a08:	3201      	adds	r2, #1
 8013a0a:	7812      	ldrb	r2, [r2, #0]
 8013a0c:	4313      	orrs	r3, r2
 8013a0e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	021b      	lsls	r3, r3, #8
 8013a14:	687a      	ldr	r2, [r7, #4]
 8013a16:	7812      	ldrb	r2, [r2, #0]
 8013a18:	4313      	orrs	r3, r2
 8013a1a:	60fb      	str	r3, [r7, #12]
	return rv;
 8013a1c:	68fb      	ldr	r3, [r7, #12]
}
 8013a1e:	4618      	mov	r0, r3
 8013a20:	3714      	adds	r7, #20
 8013a22:	46bd      	mov	sp, r7
 8013a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a28:	4770      	bx	lr

08013a2a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8013a2a:	b480      	push	{r7}
 8013a2c:	b083      	sub	sp, #12
 8013a2e:	af00      	add	r7, sp, #0
 8013a30:	6078      	str	r0, [r7, #4]
 8013a32:	460b      	mov	r3, r1
 8013a34:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	1c5a      	adds	r2, r3, #1
 8013a3a:	607a      	str	r2, [r7, #4]
 8013a3c:	887a      	ldrh	r2, [r7, #2]
 8013a3e:	b2d2      	uxtb	r2, r2
 8013a40:	701a      	strb	r2, [r3, #0]
 8013a42:	887b      	ldrh	r3, [r7, #2]
 8013a44:	0a1b      	lsrs	r3, r3, #8
 8013a46:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	1c5a      	adds	r2, r3, #1
 8013a4c:	607a      	str	r2, [r7, #4]
 8013a4e:	887a      	ldrh	r2, [r7, #2]
 8013a50:	b2d2      	uxtb	r2, r2
 8013a52:	701a      	strb	r2, [r3, #0]
}
 8013a54:	bf00      	nop
 8013a56:	370c      	adds	r7, #12
 8013a58:	46bd      	mov	sp, r7
 8013a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a5e:	4770      	bx	lr

08013a60 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8013a60:	b480      	push	{r7}
 8013a62:	b083      	sub	sp, #12
 8013a64:	af00      	add	r7, sp, #0
 8013a66:	6078      	str	r0, [r7, #4]
 8013a68:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	1c5a      	adds	r2, r3, #1
 8013a6e:	607a      	str	r2, [r7, #4]
 8013a70:	683a      	ldr	r2, [r7, #0]
 8013a72:	b2d2      	uxtb	r2, r2
 8013a74:	701a      	strb	r2, [r3, #0]
 8013a76:	683b      	ldr	r3, [r7, #0]
 8013a78:	0a1b      	lsrs	r3, r3, #8
 8013a7a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	1c5a      	adds	r2, r3, #1
 8013a80:	607a      	str	r2, [r7, #4]
 8013a82:	683a      	ldr	r2, [r7, #0]
 8013a84:	b2d2      	uxtb	r2, r2
 8013a86:	701a      	strb	r2, [r3, #0]
 8013a88:	683b      	ldr	r3, [r7, #0]
 8013a8a:	0a1b      	lsrs	r3, r3, #8
 8013a8c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	1c5a      	adds	r2, r3, #1
 8013a92:	607a      	str	r2, [r7, #4]
 8013a94:	683a      	ldr	r2, [r7, #0]
 8013a96:	b2d2      	uxtb	r2, r2
 8013a98:	701a      	strb	r2, [r3, #0]
 8013a9a:	683b      	ldr	r3, [r7, #0]
 8013a9c:	0a1b      	lsrs	r3, r3, #8
 8013a9e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	1c5a      	adds	r2, r3, #1
 8013aa4:	607a      	str	r2, [r7, #4]
 8013aa6:	683a      	ldr	r2, [r7, #0]
 8013aa8:	b2d2      	uxtb	r2, r2
 8013aaa:	701a      	strb	r2, [r3, #0]
}
 8013aac:	bf00      	nop
 8013aae:	370c      	adds	r7, #12
 8013ab0:	46bd      	mov	sp, r7
 8013ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab6:	4770      	bx	lr

08013ab8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8013ab8:	b480      	push	{r7}
 8013aba:	b087      	sub	sp, #28
 8013abc:	af00      	add	r7, sp, #0
 8013abe:	60f8      	str	r0, [r7, #12]
 8013ac0:	60b9      	str	r1, [r7, #8]
 8013ac2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8013ac8:	68bb      	ldr	r3, [r7, #8]
 8013aca:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d00d      	beq.n	8013aee <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8013ad2:	693a      	ldr	r2, [r7, #16]
 8013ad4:	1c53      	adds	r3, r2, #1
 8013ad6:	613b      	str	r3, [r7, #16]
 8013ad8:	697b      	ldr	r3, [r7, #20]
 8013ada:	1c59      	adds	r1, r3, #1
 8013adc:	6179      	str	r1, [r7, #20]
 8013ade:	7812      	ldrb	r2, [r2, #0]
 8013ae0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	3b01      	subs	r3, #1
 8013ae6:	607b      	str	r3, [r7, #4]
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d1f1      	bne.n	8013ad2 <mem_cpy+0x1a>
	}
}
 8013aee:	bf00      	nop
 8013af0:	371c      	adds	r7, #28
 8013af2:	46bd      	mov	sp, r7
 8013af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af8:	4770      	bx	lr

08013afa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8013afa:	b480      	push	{r7}
 8013afc:	b087      	sub	sp, #28
 8013afe:	af00      	add	r7, sp, #0
 8013b00:	60f8      	str	r0, [r7, #12]
 8013b02:	60b9      	str	r1, [r7, #8]
 8013b04:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8013b0a:	697b      	ldr	r3, [r7, #20]
 8013b0c:	1c5a      	adds	r2, r3, #1
 8013b0e:	617a      	str	r2, [r7, #20]
 8013b10:	68ba      	ldr	r2, [r7, #8]
 8013b12:	b2d2      	uxtb	r2, r2
 8013b14:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	3b01      	subs	r3, #1
 8013b1a:	607b      	str	r3, [r7, #4]
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d1f3      	bne.n	8013b0a <mem_set+0x10>
}
 8013b22:	bf00      	nop
 8013b24:	bf00      	nop
 8013b26:	371c      	adds	r7, #28
 8013b28:	46bd      	mov	sp, r7
 8013b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b2e:	4770      	bx	lr

08013b30 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8013b30:	b580      	push	{r7, lr}
 8013b32:	b082      	sub	sp, #8
 8013b34:	af00      	add	r7, sp, #0
 8013b36:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d009      	beq.n	8013b52 <lock_fs+0x22>
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	691b      	ldr	r3, [r3, #16]
 8013b42:	4618      	mov	r0, r3
 8013b44:	f000 fe6f 	bl	8014826 <ff_req_grant>
 8013b48:	4603      	mov	r3, r0
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d001      	beq.n	8013b52 <lock_fs+0x22>
 8013b4e:	2301      	movs	r3, #1
 8013b50:	e000      	b.n	8013b54 <lock_fs+0x24>
 8013b52:	2300      	movs	r3, #0
}
 8013b54:	4618      	mov	r0, r3
 8013b56:	3708      	adds	r7, #8
 8013b58:	46bd      	mov	sp, r7
 8013b5a:	bd80      	pop	{r7, pc}

08013b5c <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8013b5c:	b580      	push	{r7, lr}
 8013b5e:	b082      	sub	sp, #8
 8013b60:	af00      	add	r7, sp, #0
 8013b62:	6078      	str	r0, [r7, #4]
 8013b64:	460b      	mov	r3, r1
 8013b66:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d00d      	beq.n	8013b8a <unlock_fs+0x2e>
 8013b6e:	78fb      	ldrb	r3, [r7, #3]
 8013b70:	2b0c      	cmp	r3, #12
 8013b72:	d00a      	beq.n	8013b8a <unlock_fs+0x2e>
 8013b74:	78fb      	ldrb	r3, [r7, #3]
 8013b76:	2b0b      	cmp	r3, #11
 8013b78:	d007      	beq.n	8013b8a <unlock_fs+0x2e>
 8013b7a:	78fb      	ldrb	r3, [r7, #3]
 8013b7c:	2b0f      	cmp	r3, #15
 8013b7e:	d004      	beq.n	8013b8a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	691b      	ldr	r3, [r3, #16]
 8013b84:	4618      	mov	r0, r3
 8013b86:	f000 fe63 	bl	8014850 <ff_rel_grant>
	}
}
 8013b8a:	bf00      	nop
 8013b8c:	3708      	adds	r7, #8
 8013b8e:	46bd      	mov	sp, r7
 8013b90:	bd80      	pop	{r7, pc}

08013b92 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8013b92:	b580      	push	{r7, lr}
 8013b94:	b086      	sub	sp, #24
 8013b96:	af00      	add	r7, sp, #0
 8013b98:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8013b9a:	2300      	movs	r3, #0
 8013b9c:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	78db      	ldrb	r3, [r3, #3]
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d034      	beq.n	8013c10 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013baa:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	7858      	ldrb	r0, [r3, #1]
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8013bb6:	2301      	movs	r3, #1
 8013bb8:	697a      	ldr	r2, [r7, #20]
 8013bba:	f7ff febd 	bl	8013938 <disk_write>
 8013bbe:	4603      	mov	r3, r0
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d002      	beq.n	8013bca <sync_window+0x38>
			res = FR_DISK_ERR;
 8013bc4:	2301      	movs	r3, #1
 8013bc6:	73fb      	strb	r3, [r7, #15]
 8013bc8:	e022      	b.n	8013c10 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	2200      	movs	r2, #0
 8013bce:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013bd4:	697a      	ldr	r2, [r7, #20]
 8013bd6:	1ad2      	subs	r2, r2, r3
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	6a1b      	ldr	r3, [r3, #32]
 8013bdc:	429a      	cmp	r2, r3
 8013bde:	d217      	bcs.n	8013c10 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	789b      	ldrb	r3, [r3, #2]
 8013be4:	613b      	str	r3, [r7, #16]
 8013be6:	e010      	b.n	8013c0a <sync_window+0x78>
					wsect += fs->fsize;
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	6a1b      	ldr	r3, [r3, #32]
 8013bec:	697a      	ldr	r2, [r7, #20]
 8013bee:	4413      	add	r3, r2
 8013bf0:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	7858      	ldrb	r0, [r3, #1]
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8013bfc:	2301      	movs	r3, #1
 8013bfe:	697a      	ldr	r2, [r7, #20]
 8013c00:	f7ff fe9a 	bl	8013938 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013c04:	693b      	ldr	r3, [r7, #16]
 8013c06:	3b01      	subs	r3, #1
 8013c08:	613b      	str	r3, [r7, #16]
 8013c0a:	693b      	ldr	r3, [r7, #16]
 8013c0c:	2b01      	cmp	r3, #1
 8013c0e:	d8eb      	bhi.n	8013be8 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8013c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c12:	4618      	mov	r0, r3
 8013c14:	3718      	adds	r7, #24
 8013c16:	46bd      	mov	sp, r7
 8013c18:	bd80      	pop	{r7, pc}

08013c1a <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8013c1a:	b580      	push	{r7, lr}
 8013c1c:	b084      	sub	sp, #16
 8013c1e:	af00      	add	r7, sp, #0
 8013c20:	6078      	str	r0, [r7, #4]
 8013c22:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8013c24:	2300      	movs	r3, #0
 8013c26:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013c2c:	683a      	ldr	r2, [r7, #0]
 8013c2e:	429a      	cmp	r2, r3
 8013c30:	d01b      	beq.n	8013c6a <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8013c32:	6878      	ldr	r0, [r7, #4]
 8013c34:	f7ff ffad 	bl	8013b92 <sync_window>
 8013c38:	4603      	mov	r3, r0
 8013c3a:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8013c3c:	7bfb      	ldrb	r3, [r7, #15]
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d113      	bne.n	8013c6a <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	7858      	ldrb	r0, [r3, #1]
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8013c4c:	2301      	movs	r3, #1
 8013c4e:	683a      	ldr	r2, [r7, #0]
 8013c50:	f7ff fe52 	bl	80138f8 <disk_read>
 8013c54:	4603      	mov	r3, r0
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d004      	beq.n	8013c64 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8013c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8013c5e:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8013c60:	2301      	movs	r3, #1
 8013c62:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	683a      	ldr	r2, [r7, #0]
 8013c68:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8013c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	3710      	adds	r7, #16
 8013c70:	46bd      	mov	sp, r7
 8013c72:	bd80      	pop	{r7, pc}

08013c74 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8013c74:	b580      	push	{r7, lr}
 8013c76:	b084      	sub	sp, #16
 8013c78:	af00      	add	r7, sp, #0
 8013c7a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8013c7c:	6878      	ldr	r0, [r7, #4]
 8013c7e:	f7ff ff88 	bl	8013b92 <sync_window>
 8013c82:	4603      	mov	r3, r0
 8013c84:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8013c86:	7bfb      	ldrb	r3, [r7, #15]
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d158      	bne.n	8013d3e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	781b      	ldrb	r3, [r3, #0]
 8013c90:	2b03      	cmp	r3, #3
 8013c92:	d148      	bne.n	8013d26 <sync_fs+0xb2>
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	791b      	ldrb	r3, [r3, #4]
 8013c98:	2b01      	cmp	r3, #1
 8013c9a:	d144      	bne.n	8013d26 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	3338      	adds	r3, #56	@ 0x38
 8013ca0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013ca4:	2100      	movs	r1, #0
 8013ca6:	4618      	mov	r0, r3
 8013ca8:	f7ff ff27 	bl	8013afa <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	3338      	adds	r3, #56	@ 0x38
 8013cb0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8013cb4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8013cb8:	4618      	mov	r0, r3
 8013cba:	f7ff feb6 	bl	8013a2a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	3338      	adds	r3, #56	@ 0x38
 8013cc2:	4921      	ldr	r1, [pc, #132]	@ (8013d48 <sync_fs+0xd4>)
 8013cc4:	4618      	mov	r0, r3
 8013cc6:	f7ff fecb 	bl	8013a60 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	3338      	adds	r3, #56	@ 0x38
 8013cce:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8013cd2:	491e      	ldr	r1, [pc, #120]	@ (8013d4c <sync_fs+0xd8>)
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	f7ff fec3 	bl	8013a60 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	3338      	adds	r3, #56	@ 0x38
 8013cde:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	699b      	ldr	r3, [r3, #24]
 8013ce6:	4619      	mov	r1, r3
 8013ce8:	4610      	mov	r0, r2
 8013cea:	f7ff feb9 	bl	8013a60 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	3338      	adds	r3, #56	@ 0x38
 8013cf2:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	695b      	ldr	r3, [r3, #20]
 8013cfa:	4619      	mov	r1, r3
 8013cfc:	4610      	mov	r0, r2
 8013cfe:	f7ff feaf 	bl	8013a60 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d06:	1c5a      	adds	r2, r3, #1
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	7858      	ldrb	r0, [r3, #1]
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013d1a:	2301      	movs	r3, #1
 8013d1c:	f7ff fe0c 	bl	8013938 <disk_write>
			fs->fsi_flag = 0;
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	2200      	movs	r2, #0
 8013d24:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	785b      	ldrb	r3, [r3, #1]
 8013d2a:	2200      	movs	r2, #0
 8013d2c:	2100      	movs	r1, #0
 8013d2e:	4618      	mov	r0, r3
 8013d30:	f7ff fe22 	bl	8013978 <disk_ioctl>
 8013d34:	4603      	mov	r3, r0
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d001      	beq.n	8013d3e <sync_fs+0xca>
 8013d3a:	2301      	movs	r3, #1
 8013d3c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8013d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d40:	4618      	mov	r0, r3
 8013d42:	3710      	adds	r7, #16
 8013d44:	46bd      	mov	sp, r7
 8013d46:	bd80      	pop	{r7, pc}
 8013d48:	41615252 	.word	0x41615252
 8013d4c:	61417272 	.word	0x61417272

08013d50 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8013d50:	b480      	push	{r7}
 8013d52:	b083      	sub	sp, #12
 8013d54:	af00      	add	r7, sp, #0
 8013d56:	6078      	str	r0, [r7, #4]
 8013d58:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8013d5a:	683b      	ldr	r3, [r7, #0]
 8013d5c:	3b02      	subs	r3, #2
 8013d5e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	69db      	ldr	r3, [r3, #28]
 8013d64:	3b02      	subs	r3, #2
 8013d66:	683a      	ldr	r2, [r7, #0]
 8013d68:	429a      	cmp	r2, r3
 8013d6a:	d301      	bcc.n	8013d70 <clust2sect+0x20>
 8013d6c:	2300      	movs	r3, #0
 8013d6e:	e008      	b.n	8013d82 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	895b      	ldrh	r3, [r3, #10]
 8013d74:	461a      	mov	r2, r3
 8013d76:	683b      	ldr	r3, [r7, #0]
 8013d78:	fb03 f202 	mul.w	r2, r3, r2
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013d80:	4413      	add	r3, r2
}
 8013d82:	4618      	mov	r0, r3
 8013d84:	370c      	adds	r7, #12
 8013d86:	46bd      	mov	sp, r7
 8013d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d8c:	4770      	bx	lr

08013d8e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8013d8e:	b580      	push	{r7, lr}
 8013d90:	b086      	sub	sp, #24
 8013d92:	af00      	add	r7, sp, #0
 8013d94:	6078      	str	r0, [r7, #4]
 8013d96:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	681b      	ldr	r3, [r3, #0]
 8013d9c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8013d9e:	683b      	ldr	r3, [r7, #0]
 8013da0:	2b01      	cmp	r3, #1
 8013da2:	d904      	bls.n	8013dae <get_fat+0x20>
 8013da4:	693b      	ldr	r3, [r7, #16]
 8013da6:	69db      	ldr	r3, [r3, #28]
 8013da8:	683a      	ldr	r2, [r7, #0]
 8013daa:	429a      	cmp	r2, r3
 8013dac:	d302      	bcc.n	8013db4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8013dae:	2301      	movs	r3, #1
 8013db0:	617b      	str	r3, [r7, #20]
 8013db2:	e08e      	b.n	8013ed2 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8013db4:	f04f 33ff 	mov.w	r3, #4294967295
 8013db8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8013dba:	693b      	ldr	r3, [r7, #16]
 8013dbc:	781b      	ldrb	r3, [r3, #0]
 8013dbe:	2b03      	cmp	r3, #3
 8013dc0:	d061      	beq.n	8013e86 <get_fat+0xf8>
 8013dc2:	2b03      	cmp	r3, #3
 8013dc4:	dc7b      	bgt.n	8013ebe <get_fat+0x130>
 8013dc6:	2b01      	cmp	r3, #1
 8013dc8:	d002      	beq.n	8013dd0 <get_fat+0x42>
 8013dca:	2b02      	cmp	r3, #2
 8013dcc:	d041      	beq.n	8013e52 <get_fat+0xc4>
 8013dce:	e076      	b.n	8013ebe <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8013dd0:	683b      	ldr	r3, [r7, #0]
 8013dd2:	60fb      	str	r3, [r7, #12]
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	085b      	lsrs	r3, r3, #1
 8013dd8:	68fa      	ldr	r2, [r7, #12]
 8013dda:	4413      	add	r3, r2
 8013ddc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013dde:	693b      	ldr	r3, [r7, #16]
 8013de0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	0a5b      	lsrs	r3, r3, #9
 8013de6:	4413      	add	r3, r2
 8013de8:	4619      	mov	r1, r3
 8013dea:	6938      	ldr	r0, [r7, #16]
 8013dec:	f7ff ff15 	bl	8013c1a <move_window>
 8013df0:	4603      	mov	r3, r0
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d166      	bne.n	8013ec4 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	1c5a      	adds	r2, r3, #1
 8013dfa:	60fa      	str	r2, [r7, #12]
 8013dfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e00:	693a      	ldr	r2, [r7, #16]
 8013e02:	4413      	add	r3, r2
 8013e04:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8013e08:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013e0a:	693b      	ldr	r3, [r7, #16]
 8013e0c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	0a5b      	lsrs	r3, r3, #9
 8013e12:	4413      	add	r3, r2
 8013e14:	4619      	mov	r1, r3
 8013e16:	6938      	ldr	r0, [r7, #16]
 8013e18:	f7ff feff 	bl	8013c1a <move_window>
 8013e1c:	4603      	mov	r3, r0
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d152      	bne.n	8013ec8 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e28:	693a      	ldr	r2, [r7, #16]
 8013e2a:	4413      	add	r3, r2
 8013e2c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8013e30:	021b      	lsls	r3, r3, #8
 8013e32:	68ba      	ldr	r2, [r7, #8]
 8013e34:	4313      	orrs	r3, r2
 8013e36:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8013e38:	683b      	ldr	r3, [r7, #0]
 8013e3a:	f003 0301 	and.w	r3, r3, #1
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d002      	beq.n	8013e48 <get_fat+0xba>
 8013e42:	68bb      	ldr	r3, [r7, #8]
 8013e44:	091b      	lsrs	r3, r3, #4
 8013e46:	e002      	b.n	8013e4e <get_fat+0xc0>
 8013e48:	68bb      	ldr	r3, [r7, #8]
 8013e4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013e4e:	617b      	str	r3, [r7, #20]
			break;
 8013e50:	e03f      	b.n	8013ed2 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013e52:	693b      	ldr	r3, [r7, #16]
 8013e54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013e56:	683b      	ldr	r3, [r7, #0]
 8013e58:	0a1b      	lsrs	r3, r3, #8
 8013e5a:	4413      	add	r3, r2
 8013e5c:	4619      	mov	r1, r3
 8013e5e:	6938      	ldr	r0, [r7, #16]
 8013e60:	f7ff fedb 	bl	8013c1a <move_window>
 8013e64:	4603      	mov	r3, r0
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d130      	bne.n	8013ecc <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8013e6a:	693b      	ldr	r3, [r7, #16]
 8013e6c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8013e70:	683b      	ldr	r3, [r7, #0]
 8013e72:	005b      	lsls	r3, r3, #1
 8013e74:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8013e78:	4413      	add	r3, r2
 8013e7a:	4618      	mov	r0, r3
 8013e7c:	f7ff fd9a 	bl	80139b4 <ld_word>
 8013e80:	4603      	mov	r3, r0
 8013e82:	617b      	str	r3, [r7, #20]
			break;
 8013e84:	e025      	b.n	8013ed2 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013e86:	693b      	ldr	r3, [r7, #16]
 8013e88:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013e8a:	683b      	ldr	r3, [r7, #0]
 8013e8c:	09db      	lsrs	r3, r3, #7
 8013e8e:	4413      	add	r3, r2
 8013e90:	4619      	mov	r1, r3
 8013e92:	6938      	ldr	r0, [r7, #16]
 8013e94:	f7ff fec1 	bl	8013c1a <move_window>
 8013e98:	4603      	mov	r3, r0
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d118      	bne.n	8013ed0 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8013e9e:	693b      	ldr	r3, [r7, #16]
 8013ea0:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8013ea4:	683b      	ldr	r3, [r7, #0]
 8013ea6:	009b      	lsls	r3, r3, #2
 8013ea8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8013eac:	4413      	add	r3, r2
 8013eae:	4618      	mov	r0, r3
 8013eb0:	f7ff fd98 	bl	80139e4 <ld_dword>
 8013eb4:	4603      	mov	r3, r0
 8013eb6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8013eba:	617b      	str	r3, [r7, #20]
			break;
 8013ebc:	e009      	b.n	8013ed2 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8013ebe:	2301      	movs	r3, #1
 8013ec0:	617b      	str	r3, [r7, #20]
 8013ec2:	e006      	b.n	8013ed2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013ec4:	bf00      	nop
 8013ec6:	e004      	b.n	8013ed2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013ec8:	bf00      	nop
 8013eca:	e002      	b.n	8013ed2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013ecc:	bf00      	nop
 8013ece:	e000      	b.n	8013ed2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013ed0:	bf00      	nop
		}
	}

	return val;
 8013ed2:	697b      	ldr	r3, [r7, #20]
}
 8013ed4:	4618      	mov	r0, r3
 8013ed6:	3718      	adds	r7, #24
 8013ed8:	46bd      	mov	sp, r7
 8013eda:	bd80      	pop	{r7, pc}

08013edc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8013edc:	b590      	push	{r4, r7, lr}
 8013ede:	b089      	sub	sp, #36	@ 0x24
 8013ee0:	af00      	add	r7, sp, #0
 8013ee2:	60f8      	str	r0, [r7, #12]
 8013ee4:	60b9      	str	r1, [r7, #8]
 8013ee6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8013ee8:	2302      	movs	r3, #2
 8013eea:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8013eec:	68bb      	ldr	r3, [r7, #8]
 8013eee:	2b01      	cmp	r3, #1
 8013ef0:	f240 80d9 	bls.w	80140a6 <put_fat+0x1ca>
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	69db      	ldr	r3, [r3, #28]
 8013ef8:	68ba      	ldr	r2, [r7, #8]
 8013efa:	429a      	cmp	r2, r3
 8013efc:	f080 80d3 	bcs.w	80140a6 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	781b      	ldrb	r3, [r3, #0]
 8013f04:	2b03      	cmp	r3, #3
 8013f06:	f000 8096 	beq.w	8014036 <put_fat+0x15a>
 8013f0a:	2b03      	cmp	r3, #3
 8013f0c:	f300 80cb 	bgt.w	80140a6 <put_fat+0x1ca>
 8013f10:	2b01      	cmp	r3, #1
 8013f12:	d002      	beq.n	8013f1a <put_fat+0x3e>
 8013f14:	2b02      	cmp	r3, #2
 8013f16:	d06e      	beq.n	8013ff6 <put_fat+0x11a>
 8013f18:	e0c5      	b.n	80140a6 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8013f1a:	68bb      	ldr	r3, [r7, #8]
 8013f1c:	61bb      	str	r3, [r7, #24]
 8013f1e:	69bb      	ldr	r3, [r7, #24]
 8013f20:	085b      	lsrs	r3, r3, #1
 8013f22:	69ba      	ldr	r2, [r7, #24]
 8013f24:	4413      	add	r3, r2
 8013f26:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013f2c:	69bb      	ldr	r3, [r7, #24]
 8013f2e:	0a5b      	lsrs	r3, r3, #9
 8013f30:	4413      	add	r3, r2
 8013f32:	4619      	mov	r1, r3
 8013f34:	68f8      	ldr	r0, [r7, #12]
 8013f36:	f7ff fe70 	bl	8013c1a <move_window>
 8013f3a:	4603      	mov	r3, r0
 8013f3c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013f3e:	7ffb      	ldrb	r3, [r7, #31]
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	f040 80a9 	bne.w	8014098 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8013f46:	68fb      	ldr	r3, [r7, #12]
 8013f48:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8013f4c:	69bb      	ldr	r3, [r7, #24]
 8013f4e:	1c59      	adds	r1, r3, #1
 8013f50:	61b9      	str	r1, [r7, #24]
 8013f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013f56:	4413      	add	r3, r2
 8013f58:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8013f5a:	68bb      	ldr	r3, [r7, #8]
 8013f5c:	f003 0301 	and.w	r3, r3, #1
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d00d      	beq.n	8013f80 <put_fat+0xa4>
 8013f64:	697b      	ldr	r3, [r7, #20]
 8013f66:	781b      	ldrb	r3, [r3, #0]
 8013f68:	b25b      	sxtb	r3, r3
 8013f6a:	f003 030f 	and.w	r3, r3, #15
 8013f6e:	b25a      	sxtb	r2, r3
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	b2db      	uxtb	r3, r3
 8013f74:	011b      	lsls	r3, r3, #4
 8013f76:	b25b      	sxtb	r3, r3
 8013f78:	4313      	orrs	r3, r2
 8013f7a:	b25b      	sxtb	r3, r3
 8013f7c:	b2db      	uxtb	r3, r3
 8013f7e:	e001      	b.n	8013f84 <put_fat+0xa8>
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	b2db      	uxtb	r3, r3
 8013f84:	697a      	ldr	r2, [r7, #20]
 8013f86:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013f88:	68fb      	ldr	r3, [r7, #12]
 8013f8a:	2201      	movs	r2, #1
 8013f8c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013f92:	69bb      	ldr	r3, [r7, #24]
 8013f94:	0a5b      	lsrs	r3, r3, #9
 8013f96:	4413      	add	r3, r2
 8013f98:	4619      	mov	r1, r3
 8013f9a:	68f8      	ldr	r0, [r7, #12]
 8013f9c:	f7ff fe3d 	bl	8013c1a <move_window>
 8013fa0:	4603      	mov	r3, r0
 8013fa2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013fa4:	7ffb      	ldrb	r3, [r7, #31]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d178      	bne.n	801409c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8013fb0:	69bb      	ldr	r3, [r7, #24]
 8013fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013fb6:	4413      	add	r3, r2
 8013fb8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8013fba:	68bb      	ldr	r3, [r7, #8]
 8013fbc:	f003 0301 	and.w	r3, r3, #1
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d003      	beq.n	8013fcc <put_fat+0xf0>
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	091b      	lsrs	r3, r3, #4
 8013fc8:	b2db      	uxtb	r3, r3
 8013fca:	e00e      	b.n	8013fea <put_fat+0x10e>
 8013fcc:	697b      	ldr	r3, [r7, #20]
 8013fce:	781b      	ldrb	r3, [r3, #0]
 8013fd0:	b25b      	sxtb	r3, r3
 8013fd2:	f023 030f 	bic.w	r3, r3, #15
 8013fd6:	b25a      	sxtb	r2, r3
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	0a1b      	lsrs	r3, r3, #8
 8013fdc:	b25b      	sxtb	r3, r3
 8013fde:	f003 030f 	and.w	r3, r3, #15
 8013fe2:	b25b      	sxtb	r3, r3
 8013fe4:	4313      	orrs	r3, r2
 8013fe6:	b25b      	sxtb	r3, r3
 8013fe8:	b2db      	uxtb	r3, r3
 8013fea:	697a      	ldr	r2, [r7, #20]
 8013fec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013fee:	68fb      	ldr	r3, [r7, #12]
 8013ff0:	2201      	movs	r2, #1
 8013ff2:	70da      	strb	r2, [r3, #3]
			break;
 8013ff4:	e057      	b.n	80140a6 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013ffa:	68bb      	ldr	r3, [r7, #8]
 8013ffc:	0a1b      	lsrs	r3, r3, #8
 8013ffe:	4413      	add	r3, r2
 8014000:	4619      	mov	r1, r3
 8014002:	68f8      	ldr	r0, [r7, #12]
 8014004:	f7ff fe09 	bl	8013c1a <move_window>
 8014008:	4603      	mov	r3, r0
 801400a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801400c:	7ffb      	ldrb	r3, [r7, #31]
 801400e:	2b00      	cmp	r3, #0
 8014010:	d146      	bne.n	80140a0 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8014018:	68bb      	ldr	r3, [r7, #8]
 801401a:	005b      	lsls	r3, r3, #1
 801401c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8014020:	4413      	add	r3, r2
 8014022:	687a      	ldr	r2, [r7, #4]
 8014024:	b292      	uxth	r2, r2
 8014026:	4611      	mov	r1, r2
 8014028:	4618      	mov	r0, r3
 801402a:	f7ff fcfe 	bl	8013a2a <st_word>
			fs->wflag = 1;
 801402e:	68fb      	ldr	r3, [r7, #12]
 8014030:	2201      	movs	r2, #1
 8014032:	70da      	strb	r2, [r3, #3]
			break;
 8014034:	e037      	b.n	80140a6 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801403a:	68bb      	ldr	r3, [r7, #8]
 801403c:	09db      	lsrs	r3, r3, #7
 801403e:	4413      	add	r3, r2
 8014040:	4619      	mov	r1, r3
 8014042:	68f8      	ldr	r0, [r7, #12]
 8014044:	f7ff fde9 	bl	8013c1a <move_window>
 8014048:	4603      	mov	r3, r0
 801404a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801404c:	7ffb      	ldrb	r3, [r7, #31]
 801404e:	2b00      	cmp	r3, #0
 8014050:	d128      	bne.n	80140a4 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 801405e:	68bb      	ldr	r3, [r7, #8]
 8014060:	009b      	lsls	r3, r3, #2
 8014062:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8014066:	4413      	add	r3, r2
 8014068:	4618      	mov	r0, r3
 801406a:	f7ff fcbb 	bl	80139e4 <ld_dword>
 801406e:	4603      	mov	r3, r0
 8014070:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8014074:	4323      	orrs	r3, r4
 8014076:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 801407e:	68bb      	ldr	r3, [r7, #8]
 8014080:	009b      	lsls	r3, r3, #2
 8014082:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8014086:	4413      	add	r3, r2
 8014088:	6879      	ldr	r1, [r7, #4]
 801408a:	4618      	mov	r0, r3
 801408c:	f7ff fce8 	bl	8013a60 <st_dword>
			fs->wflag = 1;
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	2201      	movs	r2, #1
 8014094:	70da      	strb	r2, [r3, #3]
			break;
 8014096:	e006      	b.n	80140a6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8014098:	bf00      	nop
 801409a:	e004      	b.n	80140a6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801409c:	bf00      	nop
 801409e:	e002      	b.n	80140a6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80140a0:	bf00      	nop
 80140a2:	e000      	b.n	80140a6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80140a4:	bf00      	nop
		}
	}
	return res;
 80140a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80140a8:	4618      	mov	r0, r3
 80140aa:	3724      	adds	r7, #36	@ 0x24
 80140ac:	46bd      	mov	sp, r7
 80140ae:	bd90      	pop	{r4, r7, pc}

080140b0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80140b0:	b580      	push	{r7, lr}
 80140b2:	b088      	sub	sp, #32
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	6078      	str	r0, [r7, #4]
 80140b8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	681b      	ldr	r3, [r3, #0]
 80140be:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80140c0:	683b      	ldr	r3, [r7, #0]
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d10d      	bne.n	80140e2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80140c6:	693b      	ldr	r3, [r7, #16]
 80140c8:	695b      	ldr	r3, [r3, #20]
 80140ca:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80140cc:	69bb      	ldr	r3, [r7, #24]
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d004      	beq.n	80140dc <create_chain+0x2c>
 80140d2:	693b      	ldr	r3, [r7, #16]
 80140d4:	69db      	ldr	r3, [r3, #28]
 80140d6:	69ba      	ldr	r2, [r7, #24]
 80140d8:	429a      	cmp	r2, r3
 80140da:	d31b      	bcc.n	8014114 <create_chain+0x64>
 80140dc:	2301      	movs	r3, #1
 80140de:	61bb      	str	r3, [r7, #24]
 80140e0:	e018      	b.n	8014114 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80140e2:	6839      	ldr	r1, [r7, #0]
 80140e4:	6878      	ldr	r0, [r7, #4]
 80140e6:	f7ff fe52 	bl	8013d8e <get_fat>
 80140ea:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	2b01      	cmp	r3, #1
 80140f0:	d801      	bhi.n	80140f6 <create_chain+0x46>
 80140f2:	2301      	movs	r3, #1
 80140f4:	e070      	b.n	80141d8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80140f6:	68fb      	ldr	r3, [r7, #12]
 80140f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140fc:	d101      	bne.n	8014102 <create_chain+0x52>
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	e06a      	b.n	80141d8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8014102:	693b      	ldr	r3, [r7, #16]
 8014104:	69db      	ldr	r3, [r3, #28]
 8014106:	68fa      	ldr	r2, [r7, #12]
 8014108:	429a      	cmp	r2, r3
 801410a:	d201      	bcs.n	8014110 <create_chain+0x60>
 801410c:	68fb      	ldr	r3, [r7, #12]
 801410e:	e063      	b.n	80141d8 <create_chain+0x128>
		scl = clst;
 8014110:	683b      	ldr	r3, [r7, #0]
 8014112:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8014114:	69bb      	ldr	r3, [r7, #24]
 8014116:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8014118:	69fb      	ldr	r3, [r7, #28]
 801411a:	3301      	adds	r3, #1
 801411c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801411e:	693b      	ldr	r3, [r7, #16]
 8014120:	69db      	ldr	r3, [r3, #28]
 8014122:	69fa      	ldr	r2, [r7, #28]
 8014124:	429a      	cmp	r2, r3
 8014126:	d307      	bcc.n	8014138 <create_chain+0x88>
				ncl = 2;
 8014128:	2302      	movs	r3, #2
 801412a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801412c:	69fa      	ldr	r2, [r7, #28]
 801412e:	69bb      	ldr	r3, [r7, #24]
 8014130:	429a      	cmp	r2, r3
 8014132:	d901      	bls.n	8014138 <create_chain+0x88>
 8014134:	2300      	movs	r3, #0
 8014136:	e04f      	b.n	80141d8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8014138:	69f9      	ldr	r1, [r7, #28]
 801413a:	6878      	ldr	r0, [r7, #4]
 801413c:	f7ff fe27 	bl	8013d8e <get_fat>
 8014140:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8014142:	68fb      	ldr	r3, [r7, #12]
 8014144:	2b00      	cmp	r3, #0
 8014146:	d00e      	beq.n	8014166 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8014148:	68fb      	ldr	r3, [r7, #12]
 801414a:	2b01      	cmp	r3, #1
 801414c:	d003      	beq.n	8014156 <create_chain+0xa6>
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014154:	d101      	bne.n	801415a <create_chain+0xaa>
 8014156:	68fb      	ldr	r3, [r7, #12]
 8014158:	e03e      	b.n	80141d8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801415a:	69fa      	ldr	r2, [r7, #28]
 801415c:	69bb      	ldr	r3, [r7, #24]
 801415e:	429a      	cmp	r2, r3
 8014160:	d1da      	bne.n	8014118 <create_chain+0x68>
 8014162:	2300      	movs	r3, #0
 8014164:	e038      	b.n	80141d8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8014166:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8014168:	f04f 32ff 	mov.w	r2, #4294967295
 801416c:	69f9      	ldr	r1, [r7, #28]
 801416e:	6938      	ldr	r0, [r7, #16]
 8014170:	f7ff feb4 	bl	8013edc <put_fat>
 8014174:	4603      	mov	r3, r0
 8014176:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8014178:	7dfb      	ldrb	r3, [r7, #23]
 801417a:	2b00      	cmp	r3, #0
 801417c:	d109      	bne.n	8014192 <create_chain+0xe2>
 801417e:	683b      	ldr	r3, [r7, #0]
 8014180:	2b00      	cmp	r3, #0
 8014182:	d006      	beq.n	8014192 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8014184:	69fa      	ldr	r2, [r7, #28]
 8014186:	6839      	ldr	r1, [r7, #0]
 8014188:	6938      	ldr	r0, [r7, #16]
 801418a:	f7ff fea7 	bl	8013edc <put_fat>
 801418e:	4603      	mov	r3, r0
 8014190:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8014192:	7dfb      	ldrb	r3, [r7, #23]
 8014194:	2b00      	cmp	r3, #0
 8014196:	d116      	bne.n	80141c6 <create_chain+0x116>
		fs->last_clst = ncl;
 8014198:	693b      	ldr	r3, [r7, #16]
 801419a:	69fa      	ldr	r2, [r7, #28]
 801419c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801419e:	693b      	ldr	r3, [r7, #16]
 80141a0:	699a      	ldr	r2, [r3, #24]
 80141a2:	693b      	ldr	r3, [r7, #16]
 80141a4:	69db      	ldr	r3, [r3, #28]
 80141a6:	3b02      	subs	r3, #2
 80141a8:	429a      	cmp	r2, r3
 80141aa:	d804      	bhi.n	80141b6 <create_chain+0x106>
 80141ac:	693b      	ldr	r3, [r7, #16]
 80141ae:	699b      	ldr	r3, [r3, #24]
 80141b0:	1e5a      	subs	r2, r3, #1
 80141b2:	693b      	ldr	r3, [r7, #16]
 80141b4:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80141b6:	693b      	ldr	r3, [r7, #16]
 80141b8:	791b      	ldrb	r3, [r3, #4]
 80141ba:	f043 0301 	orr.w	r3, r3, #1
 80141be:	b2da      	uxtb	r2, r3
 80141c0:	693b      	ldr	r3, [r7, #16]
 80141c2:	711a      	strb	r2, [r3, #4]
 80141c4:	e007      	b.n	80141d6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80141c6:	7dfb      	ldrb	r3, [r7, #23]
 80141c8:	2b01      	cmp	r3, #1
 80141ca:	d102      	bne.n	80141d2 <create_chain+0x122>
 80141cc:	f04f 33ff 	mov.w	r3, #4294967295
 80141d0:	e000      	b.n	80141d4 <create_chain+0x124>
 80141d2:	2301      	movs	r3, #1
 80141d4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80141d6:	69fb      	ldr	r3, [r7, #28]
}
 80141d8:	4618      	mov	r0, r3
 80141da:	3720      	adds	r7, #32
 80141dc:	46bd      	mov	sp, r7
 80141de:	bd80      	pop	{r7, pc}

080141e0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80141e0:	b480      	push	{r7}
 80141e2:	b087      	sub	sp, #28
 80141e4:	af00      	add	r7, sp, #0
 80141e6:	6078      	str	r0, [r7, #4]
 80141e8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80141f4:	3304      	adds	r3, #4
 80141f6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80141f8:	683b      	ldr	r3, [r7, #0]
 80141fa:	0a5b      	lsrs	r3, r3, #9
 80141fc:	68fa      	ldr	r2, [r7, #12]
 80141fe:	8952      	ldrh	r2, [r2, #10]
 8014200:	fbb3 f3f2 	udiv	r3, r3, r2
 8014204:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8014206:	693b      	ldr	r3, [r7, #16]
 8014208:	1d1a      	adds	r2, r3, #4
 801420a:	613a      	str	r2, [r7, #16]
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8014210:	68bb      	ldr	r3, [r7, #8]
 8014212:	2b00      	cmp	r3, #0
 8014214:	d101      	bne.n	801421a <clmt_clust+0x3a>
 8014216:	2300      	movs	r3, #0
 8014218:	e010      	b.n	801423c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 801421a:	697a      	ldr	r2, [r7, #20]
 801421c:	68bb      	ldr	r3, [r7, #8]
 801421e:	429a      	cmp	r2, r3
 8014220:	d307      	bcc.n	8014232 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8014222:	697a      	ldr	r2, [r7, #20]
 8014224:	68bb      	ldr	r3, [r7, #8]
 8014226:	1ad3      	subs	r3, r2, r3
 8014228:	617b      	str	r3, [r7, #20]
 801422a:	693b      	ldr	r3, [r7, #16]
 801422c:	3304      	adds	r3, #4
 801422e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8014230:	e7e9      	b.n	8014206 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8014232:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8014234:	693b      	ldr	r3, [r7, #16]
 8014236:	681a      	ldr	r2, [r3, #0]
 8014238:	697b      	ldr	r3, [r7, #20]
 801423a:	4413      	add	r3, r2
}
 801423c:	4618      	mov	r0, r3
 801423e:	371c      	adds	r7, #28
 8014240:	46bd      	mov	sp, r7
 8014242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014246:	4770      	bx	lr

08014248 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8014248:	b580      	push	{r7, lr}
 801424a:	b084      	sub	sp, #16
 801424c:	af00      	add	r7, sp, #0
 801424e:	60f8      	str	r0, [r7, #12]
 8014250:	60b9      	str	r1, [r7, #8]
 8014252:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8014254:	68bb      	ldr	r3, [r7, #8]
 8014256:	331a      	adds	r3, #26
 8014258:	687a      	ldr	r2, [r7, #4]
 801425a:	b292      	uxth	r2, r2
 801425c:	4611      	mov	r1, r2
 801425e:	4618      	mov	r0, r3
 8014260:	f7ff fbe3 	bl	8013a2a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8014264:	68fb      	ldr	r3, [r7, #12]
 8014266:	781b      	ldrb	r3, [r3, #0]
 8014268:	2b03      	cmp	r3, #3
 801426a:	d109      	bne.n	8014280 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801426c:	68bb      	ldr	r3, [r7, #8]
 801426e:	f103 0214 	add.w	r2, r3, #20
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	0c1b      	lsrs	r3, r3, #16
 8014276:	b29b      	uxth	r3, r3
 8014278:	4619      	mov	r1, r3
 801427a:	4610      	mov	r0, r2
 801427c:	f7ff fbd5 	bl	8013a2a <st_word>
	}
}
 8014280:	bf00      	nop
 8014282:	3710      	adds	r7, #16
 8014284:	46bd      	mov	sp, r7
 8014286:	bd80      	pop	{r7, pc}

08014288 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8014288:	b580      	push	{r7, lr}
 801428a:	b084      	sub	sp, #16
 801428c:	af00      	add	r7, sp, #0
 801428e:	6078      	str	r0, [r7, #4]
 8014290:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8014292:	2309      	movs	r3, #9
 8014294:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	2b00      	cmp	r3, #0
 801429a:	d02e      	beq.n	80142fa <validate+0x72>
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d02a      	beq.n	80142fa <validate+0x72>
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	681b      	ldr	r3, [r3, #0]
 80142a8:	781b      	ldrb	r3, [r3, #0]
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d025      	beq.n	80142fa <validate+0x72>
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	889a      	ldrh	r2, [r3, #4]
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	88db      	ldrh	r3, [r3, #6]
 80142b8:	429a      	cmp	r2, r3
 80142ba:	d11e      	bne.n	80142fa <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	4618      	mov	r0, r3
 80142c2:	f7ff fc35 	bl	8013b30 <lock_fs>
 80142c6:	4603      	mov	r3, r0
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d014      	beq.n	80142f6 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	681b      	ldr	r3, [r3, #0]
 80142d0:	785b      	ldrb	r3, [r3, #1]
 80142d2:	4618      	mov	r0, r3
 80142d4:	f7ff faf6 	bl	80138c4 <disk_status>
 80142d8:	4603      	mov	r3, r0
 80142da:	f003 0301 	and.w	r3, r3, #1
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d102      	bne.n	80142e8 <validate+0x60>
				res = FR_OK;
 80142e2:	2300      	movs	r3, #0
 80142e4:	73fb      	strb	r3, [r7, #15]
 80142e6:	e008      	b.n	80142fa <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	2100      	movs	r1, #0
 80142ee:	4618      	mov	r0, r3
 80142f0:	f7ff fc34 	bl	8013b5c <unlock_fs>
 80142f4:	e001      	b.n	80142fa <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80142f6:	230f      	movs	r3, #15
 80142f8:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80142fa:	7bfb      	ldrb	r3, [r7, #15]
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d102      	bne.n	8014306 <validate+0x7e>
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	681b      	ldr	r3, [r3, #0]
 8014304:	e000      	b.n	8014308 <validate+0x80>
 8014306:	2300      	movs	r3, #0
 8014308:	683a      	ldr	r2, [r7, #0]
 801430a:	6013      	str	r3, [r2, #0]
	return res;
 801430c:	7bfb      	ldrb	r3, [r7, #15]
}
 801430e:	4618      	mov	r0, r3
 8014310:	3710      	adds	r7, #16
 8014312:	46bd      	mov	sp, r7
 8014314:	bd80      	pop	{r7, pc}

08014316 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8014316:	b580      	push	{r7, lr}
 8014318:	b08c      	sub	sp, #48	@ 0x30
 801431a:	af00      	add	r7, sp, #0
 801431c:	60f8      	str	r0, [r7, #12]
 801431e:	60b9      	str	r1, [r7, #8]
 8014320:	607a      	str	r2, [r7, #4]
 8014322:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8014324:	68bb      	ldr	r3, [r7, #8]
 8014326:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8014328:	683b      	ldr	r3, [r7, #0]
 801432a:	2200      	movs	r2, #0
 801432c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801432e:	68fb      	ldr	r3, [r7, #12]
 8014330:	f107 0210 	add.w	r2, r7, #16
 8014334:	4611      	mov	r1, r2
 8014336:	4618      	mov	r0, r3
 8014338:	f7ff ffa6 	bl	8014288 <validate>
 801433c:	4603      	mov	r3, r0
 801433e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014342:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014346:	2b00      	cmp	r3, #0
 8014348:	d107      	bne.n	801435a <f_write+0x44>
 801434a:	68fb      	ldr	r3, [r7, #12]
 801434c:	7d5b      	ldrb	r3, [r3, #21]
 801434e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8014352:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014356:	2b00      	cmp	r3, #0
 8014358:	d009      	beq.n	801436e <f_write+0x58>
 801435a:	693b      	ldr	r3, [r7, #16]
 801435c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8014360:	4611      	mov	r1, r2
 8014362:	4618      	mov	r0, r3
 8014364:	f7ff fbfa 	bl	8013b5c <unlock_fs>
 8014368:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801436c:	e173      	b.n	8014656 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801436e:	68fb      	ldr	r3, [r7, #12]
 8014370:	7d1b      	ldrb	r3, [r3, #20]
 8014372:	f003 0302 	and.w	r3, r3, #2
 8014376:	2b00      	cmp	r3, #0
 8014378:	d106      	bne.n	8014388 <f_write+0x72>
 801437a:	693b      	ldr	r3, [r7, #16]
 801437c:	2107      	movs	r1, #7
 801437e:	4618      	mov	r0, r3
 8014380:	f7ff fbec 	bl	8013b5c <unlock_fs>
 8014384:	2307      	movs	r3, #7
 8014386:	e166      	b.n	8014656 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8014388:	68fb      	ldr	r3, [r7, #12]
 801438a:	699a      	ldr	r2, [r3, #24]
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	441a      	add	r2, r3
 8014390:	68fb      	ldr	r3, [r7, #12]
 8014392:	699b      	ldr	r3, [r3, #24]
 8014394:	429a      	cmp	r2, r3
 8014396:	f080 814b 	bcs.w	8014630 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	699b      	ldr	r3, [r3, #24]
 801439e:	43db      	mvns	r3, r3
 80143a0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80143a2:	e145      	b.n	8014630 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	699b      	ldr	r3, [r3, #24]
 80143a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	f040 8101 	bne.w	80145b4 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	699b      	ldr	r3, [r3, #24]
 80143b6:	0a5b      	lsrs	r3, r3, #9
 80143b8:	693a      	ldr	r2, [r7, #16]
 80143ba:	8952      	ldrh	r2, [r2, #10]
 80143bc:	3a01      	subs	r2, #1
 80143be:	4013      	ands	r3, r2
 80143c0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80143c2:	69bb      	ldr	r3, [r7, #24]
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d14d      	bne.n	8014464 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80143c8:	68fb      	ldr	r3, [r7, #12]
 80143ca:	699b      	ldr	r3, [r3, #24]
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d10c      	bne.n	80143ea <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	689b      	ldr	r3, [r3, #8]
 80143d4:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80143d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143d8:	2b00      	cmp	r3, #0
 80143da:	d11a      	bne.n	8014412 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80143dc:	68fb      	ldr	r3, [r7, #12]
 80143de:	2100      	movs	r1, #0
 80143e0:	4618      	mov	r0, r3
 80143e2:	f7ff fe65 	bl	80140b0 <create_chain>
 80143e6:	62b8      	str	r0, [r7, #40]	@ 0x28
 80143e8:	e013      	b.n	8014412 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80143ea:	68fb      	ldr	r3, [r7, #12]
 80143ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d007      	beq.n	8014402 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	699b      	ldr	r3, [r3, #24]
 80143f6:	4619      	mov	r1, r3
 80143f8:	68f8      	ldr	r0, [r7, #12]
 80143fa:	f7ff fef1 	bl	80141e0 <clmt_clust>
 80143fe:	62b8      	str	r0, [r7, #40]	@ 0x28
 8014400:	e007      	b.n	8014412 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8014402:	68fa      	ldr	r2, [r7, #12]
 8014404:	68fb      	ldr	r3, [r7, #12]
 8014406:	69db      	ldr	r3, [r3, #28]
 8014408:	4619      	mov	r1, r3
 801440a:	4610      	mov	r0, r2
 801440c:	f7ff fe50 	bl	80140b0 <create_chain>
 8014410:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014414:	2b00      	cmp	r3, #0
 8014416:	f000 8110 	beq.w	801463a <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801441a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801441c:	2b01      	cmp	r3, #1
 801441e:	d109      	bne.n	8014434 <f_write+0x11e>
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	2202      	movs	r2, #2
 8014424:	755a      	strb	r2, [r3, #21]
 8014426:	693b      	ldr	r3, [r7, #16]
 8014428:	2102      	movs	r1, #2
 801442a:	4618      	mov	r0, r3
 801442c:	f7ff fb96 	bl	8013b5c <unlock_fs>
 8014430:	2302      	movs	r3, #2
 8014432:	e110      	b.n	8014656 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014436:	f1b3 3fff 	cmp.w	r3, #4294967295
 801443a:	d109      	bne.n	8014450 <f_write+0x13a>
 801443c:	68fb      	ldr	r3, [r7, #12]
 801443e:	2201      	movs	r2, #1
 8014440:	755a      	strb	r2, [r3, #21]
 8014442:	693b      	ldr	r3, [r7, #16]
 8014444:	2101      	movs	r1, #1
 8014446:	4618      	mov	r0, r3
 8014448:	f7ff fb88 	bl	8013b5c <unlock_fs>
 801444c:	2301      	movs	r3, #1
 801444e:	e102      	b.n	8014656 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8014450:	68fb      	ldr	r3, [r7, #12]
 8014452:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014454:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	689b      	ldr	r3, [r3, #8]
 801445a:	2b00      	cmp	r3, #0
 801445c:	d102      	bne.n	8014464 <f_write+0x14e>
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014462:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8014464:	68fb      	ldr	r3, [r7, #12]
 8014466:	7d1b      	ldrb	r3, [r3, #20]
 8014468:	b25b      	sxtb	r3, r3
 801446a:	2b00      	cmp	r3, #0
 801446c:	da1d      	bge.n	80144aa <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801446e:	693b      	ldr	r3, [r7, #16]
 8014470:	7858      	ldrb	r0, [r3, #1]
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014478:	68fb      	ldr	r3, [r7, #12]
 801447a:	6a1a      	ldr	r2, [r3, #32]
 801447c:	2301      	movs	r3, #1
 801447e:	f7ff fa5b 	bl	8013938 <disk_write>
 8014482:	4603      	mov	r3, r0
 8014484:	2b00      	cmp	r3, #0
 8014486:	d009      	beq.n	801449c <f_write+0x186>
 8014488:	68fb      	ldr	r3, [r7, #12]
 801448a:	2201      	movs	r2, #1
 801448c:	755a      	strb	r2, [r3, #21]
 801448e:	693b      	ldr	r3, [r7, #16]
 8014490:	2101      	movs	r1, #1
 8014492:	4618      	mov	r0, r3
 8014494:	f7ff fb62 	bl	8013b5c <unlock_fs>
 8014498:	2301      	movs	r3, #1
 801449a:	e0dc      	b.n	8014656 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 801449c:	68fb      	ldr	r3, [r7, #12]
 801449e:	7d1b      	ldrb	r3, [r3, #20]
 80144a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80144a4:	b2da      	uxtb	r2, r3
 80144a6:	68fb      	ldr	r3, [r7, #12]
 80144a8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80144aa:	693a      	ldr	r2, [r7, #16]
 80144ac:	68fb      	ldr	r3, [r7, #12]
 80144ae:	69db      	ldr	r3, [r3, #28]
 80144b0:	4619      	mov	r1, r3
 80144b2:	4610      	mov	r0, r2
 80144b4:	f7ff fc4c 	bl	8013d50 <clust2sect>
 80144b8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80144ba:	697b      	ldr	r3, [r7, #20]
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d109      	bne.n	80144d4 <f_write+0x1be>
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	2202      	movs	r2, #2
 80144c4:	755a      	strb	r2, [r3, #21]
 80144c6:	693b      	ldr	r3, [r7, #16]
 80144c8:	2102      	movs	r1, #2
 80144ca:	4618      	mov	r0, r3
 80144cc:	f7ff fb46 	bl	8013b5c <unlock_fs>
 80144d0:	2302      	movs	r3, #2
 80144d2:	e0c0      	b.n	8014656 <f_write+0x340>
			sect += csect;
 80144d4:	697a      	ldr	r2, [r7, #20]
 80144d6:	69bb      	ldr	r3, [r7, #24]
 80144d8:	4413      	add	r3, r2
 80144da:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	0a5b      	lsrs	r3, r3, #9
 80144e0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80144e2:	6a3b      	ldr	r3, [r7, #32]
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d041      	beq.n	801456c <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80144e8:	69ba      	ldr	r2, [r7, #24]
 80144ea:	6a3b      	ldr	r3, [r7, #32]
 80144ec:	4413      	add	r3, r2
 80144ee:	693a      	ldr	r2, [r7, #16]
 80144f0:	8952      	ldrh	r2, [r2, #10]
 80144f2:	4293      	cmp	r3, r2
 80144f4:	d905      	bls.n	8014502 <f_write+0x1ec>
					cc = fs->csize - csect;
 80144f6:	693b      	ldr	r3, [r7, #16]
 80144f8:	895b      	ldrh	r3, [r3, #10]
 80144fa:	461a      	mov	r2, r3
 80144fc:	69bb      	ldr	r3, [r7, #24]
 80144fe:	1ad3      	subs	r3, r2, r3
 8014500:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014502:	693b      	ldr	r3, [r7, #16]
 8014504:	7858      	ldrb	r0, [r3, #1]
 8014506:	6a3b      	ldr	r3, [r7, #32]
 8014508:	697a      	ldr	r2, [r7, #20]
 801450a:	69f9      	ldr	r1, [r7, #28]
 801450c:	f7ff fa14 	bl	8013938 <disk_write>
 8014510:	4603      	mov	r3, r0
 8014512:	2b00      	cmp	r3, #0
 8014514:	d009      	beq.n	801452a <f_write+0x214>
 8014516:	68fb      	ldr	r3, [r7, #12]
 8014518:	2201      	movs	r2, #1
 801451a:	755a      	strb	r2, [r3, #21]
 801451c:	693b      	ldr	r3, [r7, #16]
 801451e:	2101      	movs	r1, #1
 8014520:	4618      	mov	r0, r3
 8014522:	f7ff fb1b 	bl	8013b5c <unlock_fs>
 8014526:	2301      	movs	r3, #1
 8014528:	e095      	b.n	8014656 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	6a1a      	ldr	r2, [r3, #32]
 801452e:	697b      	ldr	r3, [r7, #20]
 8014530:	1ad3      	subs	r3, r2, r3
 8014532:	6a3a      	ldr	r2, [r7, #32]
 8014534:	429a      	cmp	r2, r3
 8014536:	d915      	bls.n	8014564 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8014538:	68fb      	ldr	r3, [r7, #12]
 801453a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801453e:	68fb      	ldr	r3, [r7, #12]
 8014540:	6a1a      	ldr	r2, [r3, #32]
 8014542:	697b      	ldr	r3, [r7, #20]
 8014544:	1ad3      	subs	r3, r2, r3
 8014546:	025b      	lsls	r3, r3, #9
 8014548:	69fa      	ldr	r2, [r7, #28]
 801454a:	4413      	add	r3, r2
 801454c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014550:	4619      	mov	r1, r3
 8014552:	f7ff fab1 	bl	8013ab8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	7d1b      	ldrb	r3, [r3, #20]
 801455a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801455e:	b2da      	uxtb	r2, r3
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8014564:	6a3b      	ldr	r3, [r7, #32]
 8014566:	025b      	lsls	r3, r3, #9
 8014568:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801456a:	e044      	b.n	80145f6 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801456c:	68fb      	ldr	r3, [r7, #12]
 801456e:	6a1b      	ldr	r3, [r3, #32]
 8014570:	697a      	ldr	r2, [r7, #20]
 8014572:	429a      	cmp	r2, r3
 8014574:	d01b      	beq.n	80145ae <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	699a      	ldr	r2, [r3, #24]
 801457a:	68fb      	ldr	r3, [r7, #12]
 801457c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801457e:	429a      	cmp	r2, r3
 8014580:	d215      	bcs.n	80145ae <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8014582:	693b      	ldr	r3, [r7, #16]
 8014584:	7858      	ldrb	r0, [r3, #1]
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801458c:	2301      	movs	r3, #1
 801458e:	697a      	ldr	r2, [r7, #20]
 8014590:	f7ff f9b2 	bl	80138f8 <disk_read>
 8014594:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8014596:	2b00      	cmp	r3, #0
 8014598:	d009      	beq.n	80145ae <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	2201      	movs	r2, #1
 801459e:	755a      	strb	r2, [r3, #21]
 80145a0:	693b      	ldr	r3, [r7, #16]
 80145a2:	2101      	movs	r1, #1
 80145a4:	4618      	mov	r0, r3
 80145a6:	f7ff fad9 	bl	8013b5c <unlock_fs>
 80145aa:	2301      	movs	r3, #1
 80145ac:	e053      	b.n	8014656 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 80145ae:	68fb      	ldr	r3, [r7, #12]
 80145b0:	697a      	ldr	r2, [r7, #20]
 80145b2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	699b      	ldr	r3, [r3, #24]
 80145b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80145bc:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80145c0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80145c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	429a      	cmp	r2, r3
 80145c8:	d901      	bls.n	80145ce <f_write+0x2b8>
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80145ce:	68fb      	ldr	r3, [r7, #12]
 80145d0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	699b      	ldr	r3, [r3, #24]
 80145d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80145dc:	4413      	add	r3, r2
 80145de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80145e0:	69f9      	ldr	r1, [r7, #28]
 80145e2:	4618      	mov	r0, r3
 80145e4:	f7ff fa68 	bl	8013ab8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	7d1b      	ldrb	r3, [r3, #20]
 80145ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80145f0:	b2da      	uxtb	r2, r3
 80145f2:	68fb      	ldr	r3, [r7, #12]
 80145f4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80145f6:	69fa      	ldr	r2, [r7, #28]
 80145f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145fa:	4413      	add	r3, r2
 80145fc:	61fb      	str	r3, [r7, #28]
 80145fe:	68fb      	ldr	r3, [r7, #12]
 8014600:	699a      	ldr	r2, [r3, #24]
 8014602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014604:	441a      	add	r2, r3
 8014606:	68fb      	ldr	r3, [r7, #12]
 8014608:	619a      	str	r2, [r3, #24]
 801460a:	68fb      	ldr	r3, [r7, #12]
 801460c:	68da      	ldr	r2, [r3, #12]
 801460e:	68fb      	ldr	r3, [r7, #12]
 8014610:	699b      	ldr	r3, [r3, #24]
 8014612:	429a      	cmp	r2, r3
 8014614:	bf38      	it	cc
 8014616:	461a      	movcc	r2, r3
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	60da      	str	r2, [r3, #12]
 801461c:	683b      	ldr	r3, [r7, #0]
 801461e:	681a      	ldr	r2, [r3, #0]
 8014620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014622:	441a      	add	r2, r3
 8014624:	683b      	ldr	r3, [r7, #0]
 8014626:	601a      	str	r2, [r3, #0]
 8014628:	687a      	ldr	r2, [r7, #4]
 801462a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801462c:	1ad3      	subs	r3, r2, r3
 801462e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	2b00      	cmp	r3, #0
 8014634:	f47f aeb6 	bne.w	80143a4 <f_write+0x8e>
 8014638:	e000      	b.n	801463c <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801463a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801463c:	68fb      	ldr	r3, [r7, #12]
 801463e:	7d1b      	ldrb	r3, [r3, #20]
 8014640:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014644:	b2da      	uxtb	r2, r3
 8014646:	68fb      	ldr	r3, [r7, #12]
 8014648:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801464a:	693b      	ldr	r3, [r7, #16]
 801464c:	2100      	movs	r1, #0
 801464e:	4618      	mov	r0, r3
 8014650:	f7ff fa84 	bl	8013b5c <unlock_fs>
 8014654:	2300      	movs	r3, #0
}
 8014656:	4618      	mov	r0, r3
 8014658:	3730      	adds	r7, #48	@ 0x30
 801465a:	46bd      	mov	sp, r7
 801465c:	bd80      	pop	{r7, pc}

0801465e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801465e:	b580      	push	{r7, lr}
 8014660:	b086      	sub	sp, #24
 8014662:	af00      	add	r7, sp, #0
 8014664:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	f107 0208 	add.w	r2, r7, #8
 801466c:	4611      	mov	r1, r2
 801466e:	4618      	mov	r0, r3
 8014670:	f7ff fe0a 	bl	8014288 <validate>
 8014674:	4603      	mov	r3, r0
 8014676:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014678:	7dfb      	ldrb	r3, [r7, #23]
 801467a:	2b00      	cmp	r3, #0
 801467c:	d16d      	bne.n	801475a <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	7d1b      	ldrb	r3, [r3, #20]
 8014682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014686:	2b00      	cmp	r3, #0
 8014688:	d067      	beq.n	801475a <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	7d1b      	ldrb	r3, [r3, #20]
 801468e:	b25b      	sxtb	r3, r3
 8014690:	2b00      	cmp	r3, #0
 8014692:	da1a      	bge.n	80146ca <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8014694:	68bb      	ldr	r3, [r7, #8]
 8014696:	7858      	ldrb	r0, [r3, #1]
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	6a1a      	ldr	r2, [r3, #32]
 80146a2:	2301      	movs	r3, #1
 80146a4:	f7ff f948 	bl	8013938 <disk_write>
 80146a8:	4603      	mov	r3, r0
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d006      	beq.n	80146bc <f_sync+0x5e>
 80146ae:	68bb      	ldr	r3, [r7, #8]
 80146b0:	2101      	movs	r1, #1
 80146b2:	4618      	mov	r0, r3
 80146b4:	f7ff fa52 	bl	8013b5c <unlock_fs>
 80146b8:	2301      	movs	r3, #1
 80146ba:	e055      	b.n	8014768 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	7d1b      	ldrb	r3, [r3, #20]
 80146c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80146c4:	b2da      	uxtb	r2, r3
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80146ca:	f7fe fbd9 	bl	8012e80 <get_fattime>
 80146ce:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80146d0:	68ba      	ldr	r2, [r7, #8]
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80146d6:	4619      	mov	r1, r3
 80146d8:	4610      	mov	r0, r2
 80146da:	f7ff fa9e 	bl	8013c1a <move_window>
 80146de:	4603      	mov	r3, r0
 80146e0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80146e2:	7dfb      	ldrb	r3, [r7, #23]
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d138      	bne.n	801475a <f_sync+0xfc>
					dir = fp->dir_ptr;
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80146ec:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80146ee:	68fb      	ldr	r3, [r7, #12]
 80146f0:	330b      	adds	r3, #11
 80146f2:	781a      	ldrb	r2, [r3, #0]
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	330b      	adds	r3, #11
 80146f8:	f042 0220 	orr.w	r2, r2, #32
 80146fc:	b2d2      	uxtb	r2, r2
 80146fe:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	6818      	ldr	r0, [r3, #0]
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	689b      	ldr	r3, [r3, #8]
 8014708:	461a      	mov	r2, r3
 801470a:	68f9      	ldr	r1, [r7, #12]
 801470c:	f7ff fd9c 	bl	8014248 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8014710:	68fb      	ldr	r3, [r7, #12]
 8014712:	f103 021c 	add.w	r2, r3, #28
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	68db      	ldr	r3, [r3, #12]
 801471a:	4619      	mov	r1, r3
 801471c:	4610      	mov	r0, r2
 801471e:	f7ff f99f 	bl	8013a60 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	3316      	adds	r3, #22
 8014726:	6939      	ldr	r1, [r7, #16]
 8014728:	4618      	mov	r0, r3
 801472a:	f7ff f999 	bl	8013a60 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801472e:	68fb      	ldr	r3, [r7, #12]
 8014730:	3312      	adds	r3, #18
 8014732:	2100      	movs	r1, #0
 8014734:	4618      	mov	r0, r3
 8014736:	f7ff f978 	bl	8013a2a <st_word>
					fs->wflag = 1;
 801473a:	68bb      	ldr	r3, [r7, #8]
 801473c:	2201      	movs	r2, #1
 801473e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8014740:	68bb      	ldr	r3, [r7, #8]
 8014742:	4618      	mov	r0, r3
 8014744:	f7ff fa96 	bl	8013c74 <sync_fs>
 8014748:	4603      	mov	r3, r0
 801474a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	7d1b      	ldrb	r3, [r3, #20]
 8014750:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8014754:	b2da      	uxtb	r2, r3
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801475a:	68bb      	ldr	r3, [r7, #8]
 801475c:	7dfa      	ldrb	r2, [r7, #23]
 801475e:	4611      	mov	r1, r2
 8014760:	4618      	mov	r0, r3
 8014762:	f7ff f9fb 	bl	8013b5c <unlock_fs>
 8014766:	7dfb      	ldrb	r3, [r7, #23]
}
 8014768:	4618      	mov	r0, r3
 801476a:	3718      	adds	r7, #24
 801476c:	46bd      	mov	sp, r7
 801476e:	bd80      	pop	{r7, pc}

08014770 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014770:	b480      	push	{r7}
 8014772:	b087      	sub	sp, #28
 8014774:	af00      	add	r7, sp, #0
 8014776:	60f8      	str	r0, [r7, #12]
 8014778:	60b9      	str	r1, [r7, #8]
 801477a:	4613      	mov	r3, r2
 801477c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801477e:	2301      	movs	r3, #1
 8014780:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014782:	2300      	movs	r3, #0
 8014784:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014786:	4b1f      	ldr	r3, [pc, #124]	@ (8014804 <FATFS_LinkDriverEx+0x94>)
 8014788:	7a5b      	ldrb	r3, [r3, #9]
 801478a:	b2db      	uxtb	r3, r3
 801478c:	2b00      	cmp	r3, #0
 801478e:	d131      	bne.n	80147f4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014790:	4b1c      	ldr	r3, [pc, #112]	@ (8014804 <FATFS_LinkDriverEx+0x94>)
 8014792:	7a5b      	ldrb	r3, [r3, #9]
 8014794:	b2db      	uxtb	r3, r3
 8014796:	461a      	mov	r2, r3
 8014798:	4b1a      	ldr	r3, [pc, #104]	@ (8014804 <FATFS_LinkDriverEx+0x94>)
 801479a:	2100      	movs	r1, #0
 801479c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801479e:	4b19      	ldr	r3, [pc, #100]	@ (8014804 <FATFS_LinkDriverEx+0x94>)
 80147a0:	7a5b      	ldrb	r3, [r3, #9]
 80147a2:	b2db      	uxtb	r3, r3
 80147a4:	4a17      	ldr	r2, [pc, #92]	@ (8014804 <FATFS_LinkDriverEx+0x94>)
 80147a6:	009b      	lsls	r3, r3, #2
 80147a8:	4413      	add	r3, r2
 80147aa:	68fa      	ldr	r2, [r7, #12]
 80147ac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80147ae:	4b15      	ldr	r3, [pc, #84]	@ (8014804 <FATFS_LinkDriverEx+0x94>)
 80147b0:	7a5b      	ldrb	r3, [r3, #9]
 80147b2:	b2db      	uxtb	r3, r3
 80147b4:	461a      	mov	r2, r3
 80147b6:	4b13      	ldr	r3, [pc, #76]	@ (8014804 <FATFS_LinkDriverEx+0x94>)
 80147b8:	4413      	add	r3, r2
 80147ba:	79fa      	ldrb	r2, [r7, #7]
 80147bc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80147be:	4b11      	ldr	r3, [pc, #68]	@ (8014804 <FATFS_LinkDriverEx+0x94>)
 80147c0:	7a5b      	ldrb	r3, [r3, #9]
 80147c2:	b2db      	uxtb	r3, r3
 80147c4:	1c5a      	adds	r2, r3, #1
 80147c6:	b2d1      	uxtb	r1, r2
 80147c8:	4a0e      	ldr	r2, [pc, #56]	@ (8014804 <FATFS_LinkDriverEx+0x94>)
 80147ca:	7251      	strb	r1, [r2, #9]
 80147cc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80147ce:	7dbb      	ldrb	r3, [r7, #22]
 80147d0:	3330      	adds	r3, #48	@ 0x30
 80147d2:	b2da      	uxtb	r2, r3
 80147d4:	68bb      	ldr	r3, [r7, #8]
 80147d6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80147d8:	68bb      	ldr	r3, [r7, #8]
 80147da:	3301      	adds	r3, #1
 80147dc:	223a      	movs	r2, #58	@ 0x3a
 80147de:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80147e0:	68bb      	ldr	r3, [r7, #8]
 80147e2:	3302      	adds	r3, #2
 80147e4:	222f      	movs	r2, #47	@ 0x2f
 80147e6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80147e8:	68bb      	ldr	r3, [r7, #8]
 80147ea:	3303      	adds	r3, #3
 80147ec:	2200      	movs	r2, #0
 80147ee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80147f0:	2300      	movs	r3, #0
 80147f2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80147f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80147f6:	4618      	mov	r0, r3
 80147f8:	371c      	adds	r7, #28
 80147fa:	46bd      	mov	sp, r7
 80147fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014800:	4770      	bx	lr
 8014802:	bf00      	nop
 8014804:	24002aac 	.word	0x24002aac

08014808 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014808:	b580      	push	{r7, lr}
 801480a:	b082      	sub	sp, #8
 801480c:	af00      	add	r7, sp, #0
 801480e:	6078      	str	r0, [r7, #4]
 8014810:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014812:	2200      	movs	r2, #0
 8014814:	6839      	ldr	r1, [r7, #0]
 8014816:	6878      	ldr	r0, [r7, #4]
 8014818:	f7ff ffaa 	bl	8014770 <FATFS_LinkDriverEx>
 801481c:	4603      	mov	r3, r0
}
 801481e:	4618      	mov	r0, r3
 8014820:	3708      	adds	r7, #8
 8014822:	46bd      	mov	sp, r7
 8014824:	bd80      	pop	{r7, pc}

08014826 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8014826:	b580      	push	{r7, lr}
 8014828:	b084      	sub	sp, #16
 801482a:	af00      	add	r7, sp, #0
 801482c:	6078      	str	r0, [r7, #4]
  int ret = 0;
 801482e:	2300      	movs	r3, #0
 8014830:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8014832:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8014836:	6878      	ldr	r0, [r7, #4]
 8014838:	f000 f8a6 	bl	8014988 <osSemaphoreWait>
 801483c:	4603      	mov	r3, r0
 801483e:	2b00      	cmp	r3, #0
 8014840:	d101      	bne.n	8014846 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8014842:	2301      	movs	r3, #1
 8014844:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014846:	68fb      	ldr	r3, [r7, #12]
}
 8014848:	4618      	mov	r0, r3
 801484a:	3710      	adds	r7, #16
 801484c:	46bd      	mov	sp, r7
 801484e:	bd80      	pop	{r7, pc}

08014850 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8014850:	b580      	push	{r7, lr}
 8014852:	b082      	sub	sp, #8
 8014854:	af00      	add	r7, sp, #0
 8014856:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8014858:	6878      	ldr	r0, [r7, #4]
 801485a:	f000 f8e3 	bl	8014a24 <osSemaphoreRelease>
#endif
}
 801485e:	bf00      	nop
 8014860:	3708      	adds	r7, #8
 8014862:	46bd      	mov	sp, r7
 8014864:	bd80      	pop	{r7, pc}

08014866 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8014866:	b480      	push	{r7}
 8014868:	b085      	sub	sp, #20
 801486a:	af00      	add	r7, sp, #0
 801486c:	4603      	mov	r3, r0
 801486e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8014870:	2300      	movs	r3, #0
 8014872:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8014874:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014878:	2b84      	cmp	r3, #132	@ 0x84
 801487a:	d005      	beq.n	8014888 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 801487c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	4413      	add	r3, r2
 8014884:	3303      	adds	r3, #3
 8014886:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8014888:	68fb      	ldr	r3, [r7, #12]
}
 801488a:	4618      	mov	r0, r3
 801488c:	3714      	adds	r7, #20
 801488e:	46bd      	mov	sp, r7
 8014890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014894:	4770      	bx	lr

08014896 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8014896:	b480      	push	{r7}
 8014898:	b083      	sub	sp, #12
 801489a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801489c:	f3ef 8305 	mrs	r3, IPSR
 80148a0:	607b      	str	r3, [r7, #4]
  return(result);
 80148a2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	bf14      	ite	ne
 80148a8:	2301      	movne	r3, #1
 80148aa:	2300      	moveq	r3, #0
 80148ac:	b2db      	uxtb	r3, r3
}
 80148ae:	4618      	mov	r0, r3
 80148b0:	370c      	adds	r7, #12
 80148b2:	46bd      	mov	sp, r7
 80148b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148b8:	4770      	bx	lr

080148ba <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80148ba:	b580      	push	{r7, lr}
 80148bc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80148be:	f000 ffb5 	bl	801582c <vTaskStartScheduler>
  
  return osOK;
 80148c2:	2300      	movs	r3, #0
}
 80148c4:	4618      	mov	r0, r3
 80148c6:	bd80      	pop	{r7, pc}

080148c8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80148c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80148ca:	b089      	sub	sp, #36	@ 0x24
 80148cc:	af04      	add	r7, sp, #16
 80148ce:	6078      	str	r0, [r7, #4]
 80148d0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	695b      	ldr	r3, [r3, #20]
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d020      	beq.n	801491c <osThreadCreate+0x54>
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	699b      	ldr	r3, [r3, #24]
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d01c      	beq.n	801491c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	685c      	ldr	r4, [r3, #4]
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	691e      	ldr	r6, [r3, #16]
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80148f4:	4618      	mov	r0, r3
 80148f6:	f7ff ffb6 	bl	8014866 <makeFreeRtosPriority>
 80148fa:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	695b      	ldr	r3, [r3, #20]
 8014900:	687a      	ldr	r2, [r7, #4]
 8014902:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014904:	9202      	str	r2, [sp, #8]
 8014906:	9301      	str	r3, [sp, #4]
 8014908:	9100      	str	r1, [sp, #0]
 801490a:	683b      	ldr	r3, [r7, #0]
 801490c:	4632      	mov	r2, r6
 801490e:	4629      	mov	r1, r5
 8014910:	4620      	mov	r0, r4
 8014912:	f000 fdbd 	bl	8015490 <xTaskCreateStatic>
 8014916:	4603      	mov	r3, r0
 8014918:	60fb      	str	r3, [r7, #12]
 801491a:	e01c      	b.n	8014956 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	685c      	ldr	r4, [r3, #4]
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014928:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014930:	4618      	mov	r0, r3
 8014932:	f7ff ff98 	bl	8014866 <makeFreeRtosPriority>
 8014936:	4602      	mov	r2, r0
 8014938:	f107 030c 	add.w	r3, r7, #12
 801493c:	9301      	str	r3, [sp, #4]
 801493e:	9200      	str	r2, [sp, #0]
 8014940:	683b      	ldr	r3, [r7, #0]
 8014942:	4632      	mov	r2, r6
 8014944:	4629      	mov	r1, r5
 8014946:	4620      	mov	r0, r4
 8014948:	f000 fe02 	bl	8015550 <xTaskCreate>
 801494c:	4603      	mov	r3, r0
 801494e:	2b01      	cmp	r3, #1
 8014950:	d001      	beq.n	8014956 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8014952:	2300      	movs	r3, #0
 8014954:	e000      	b.n	8014958 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8014956:	68fb      	ldr	r3, [r7, #12]
}
 8014958:	4618      	mov	r0, r3
 801495a:	3714      	adds	r7, #20
 801495c:	46bd      	mov	sp, r7
 801495e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014960 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8014960:	b580      	push	{r7, lr}
 8014962:	b084      	sub	sp, #16
 8014964:	af00      	add	r7, sp, #0
 8014966:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	2b00      	cmp	r3, #0
 8014970:	d001      	beq.n	8014976 <osDelay+0x16>
 8014972:	68fb      	ldr	r3, [r7, #12]
 8014974:	e000      	b.n	8014978 <osDelay+0x18>
 8014976:	2301      	movs	r3, #1
 8014978:	4618      	mov	r0, r3
 801497a:	f000 ff21 	bl	80157c0 <vTaskDelay>
  
  return osOK;
 801497e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8014980:	4618      	mov	r0, r3
 8014982:	3710      	adds	r7, #16
 8014984:	46bd      	mov	sp, r7
 8014986:	bd80      	pop	{r7, pc}

08014988 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8014988:	b580      	push	{r7, lr}
 801498a:	b084      	sub	sp, #16
 801498c:	af00      	add	r7, sp, #0
 801498e:	6078      	str	r0, [r7, #4]
 8014990:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8014992:	2300      	movs	r3, #0
 8014994:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	2b00      	cmp	r3, #0
 801499a:	d101      	bne.n	80149a0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 801499c:	2380      	movs	r3, #128	@ 0x80
 801499e:	e03a      	b.n	8014a16 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80149a0:	2300      	movs	r3, #0
 80149a2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80149a4:	683b      	ldr	r3, [r7, #0]
 80149a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80149aa:	d103      	bne.n	80149b4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80149ac:	f04f 33ff 	mov.w	r3, #4294967295
 80149b0:	60fb      	str	r3, [r7, #12]
 80149b2:	e009      	b.n	80149c8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80149b4:	683b      	ldr	r3, [r7, #0]
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d006      	beq.n	80149c8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80149ba:	683b      	ldr	r3, [r7, #0]
 80149bc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d101      	bne.n	80149c8 <osSemaphoreWait+0x40>
      ticks = 1;
 80149c4:	2301      	movs	r3, #1
 80149c6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80149c8:	f7ff ff65 	bl	8014896 <inHandlerMode>
 80149cc:	4603      	mov	r3, r0
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d017      	beq.n	8014a02 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80149d2:	f107 0308 	add.w	r3, r7, #8
 80149d6:	461a      	mov	r2, r3
 80149d8:	2100      	movs	r1, #0
 80149da:	6878      	ldr	r0, [r7, #4]
 80149dc:	f000 fbae 	bl	801513c <xQueueReceiveFromISR>
 80149e0:	4603      	mov	r3, r0
 80149e2:	2b01      	cmp	r3, #1
 80149e4:	d001      	beq.n	80149ea <osSemaphoreWait+0x62>
      return osErrorOS;
 80149e6:	23ff      	movs	r3, #255	@ 0xff
 80149e8:	e015      	b.n	8014a16 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80149ea:	68bb      	ldr	r3, [r7, #8]
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d011      	beq.n	8014a14 <osSemaphoreWait+0x8c>
 80149f0:	4b0b      	ldr	r3, [pc, #44]	@ (8014a20 <osSemaphoreWait+0x98>)
 80149f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80149f6:	601a      	str	r2, [r3, #0]
 80149f8:	f3bf 8f4f 	dsb	sy
 80149fc:	f3bf 8f6f 	isb	sy
 8014a00:	e008      	b.n	8014a14 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8014a02:	68f9      	ldr	r1, [r7, #12]
 8014a04:	6878      	ldr	r0, [r7, #4]
 8014a06:	f000 fa89 	bl	8014f1c <xQueueSemaphoreTake>
 8014a0a:	4603      	mov	r3, r0
 8014a0c:	2b01      	cmp	r3, #1
 8014a0e:	d001      	beq.n	8014a14 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8014a10:	23ff      	movs	r3, #255	@ 0xff
 8014a12:	e000      	b.n	8014a16 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8014a14:	2300      	movs	r3, #0
}
 8014a16:	4618      	mov	r0, r3
 8014a18:	3710      	adds	r7, #16
 8014a1a:	46bd      	mov	sp, r7
 8014a1c:	bd80      	pop	{r7, pc}
 8014a1e:	bf00      	nop
 8014a20:	e000ed04 	.word	0xe000ed04

08014a24 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8014a24:	b580      	push	{r7, lr}
 8014a26:	b084      	sub	sp, #16
 8014a28:	af00      	add	r7, sp, #0
 8014a2a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8014a2c:	2300      	movs	r3, #0
 8014a2e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8014a30:	2300      	movs	r3, #0
 8014a32:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8014a34:	f7ff ff2f 	bl	8014896 <inHandlerMode>
 8014a38:	4603      	mov	r3, r0
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d016      	beq.n	8014a6c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8014a3e:	f107 0308 	add.w	r3, r7, #8
 8014a42:	4619      	mov	r1, r3
 8014a44:	6878      	ldr	r0, [r7, #4]
 8014a46:	f000 f9d9 	bl	8014dfc <xQueueGiveFromISR>
 8014a4a:	4603      	mov	r3, r0
 8014a4c:	2b01      	cmp	r3, #1
 8014a4e:	d001      	beq.n	8014a54 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8014a50:	23ff      	movs	r3, #255	@ 0xff
 8014a52:	e017      	b.n	8014a84 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8014a54:	68bb      	ldr	r3, [r7, #8]
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d013      	beq.n	8014a82 <osSemaphoreRelease+0x5e>
 8014a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8014a8c <osSemaphoreRelease+0x68>)
 8014a5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014a60:	601a      	str	r2, [r3, #0]
 8014a62:	f3bf 8f4f 	dsb	sy
 8014a66:	f3bf 8f6f 	isb	sy
 8014a6a:	e00a      	b.n	8014a82 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8014a6c:	2300      	movs	r3, #0
 8014a6e:	2200      	movs	r2, #0
 8014a70:	2100      	movs	r1, #0
 8014a72:	6878      	ldr	r0, [r7, #4]
 8014a74:	f000 f8c0 	bl	8014bf8 <xQueueGenericSend>
 8014a78:	4603      	mov	r3, r0
 8014a7a:	2b01      	cmp	r3, #1
 8014a7c:	d001      	beq.n	8014a82 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8014a7e:	23ff      	movs	r3, #255	@ 0xff
 8014a80:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8014a82:	68fb      	ldr	r3, [r7, #12]
}
 8014a84:	4618      	mov	r0, r3
 8014a86:	3710      	adds	r7, #16
 8014a88:	46bd      	mov	sp, r7
 8014a8a:	bd80      	pop	{r7, pc}
 8014a8c:	e000ed04 	.word	0xe000ed04

08014a90 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014a90:	b480      	push	{r7}
 8014a92:	b083      	sub	sp, #12
 8014a94:	af00      	add	r7, sp, #0
 8014a96:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	f103 0208 	add.w	r2, r3, #8
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8014aa8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	f103 0208 	add.w	r2, r3, #8
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	f103 0208 	add.w	r2, r3, #8
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	2200      	movs	r2, #0
 8014ac2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8014ac4:	bf00      	nop
 8014ac6:	370c      	adds	r7, #12
 8014ac8:	46bd      	mov	sp, r7
 8014aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ace:	4770      	bx	lr

08014ad0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8014ad0:	b480      	push	{r7}
 8014ad2:	b083      	sub	sp, #12
 8014ad4:	af00      	add	r7, sp, #0
 8014ad6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	2200      	movs	r2, #0
 8014adc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8014ade:	bf00      	nop
 8014ae0:	370c      	adds	r7, #12
 8014ae2:	46bd      	mov	sp, r7
 8014ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ae8:	4770      	bx	lr

08014aea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014aea:	b480      	push	{r7}
 8014aec:	b085      	sub	sp, #20
 8014aee:	af00      	add	r7, sp, #0
 8014af0:	6078      	str	r0, [r7, #4]
 8014af2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	685b      	ldr	r3, [r3, #4]
 8014af8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8014afa:	683b      	ldr	r3, [r7, #0]
 8014afc:	68fa      	ldr	r2, [r7, #12]
 8014afe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	689a      	ldr	r2, [r3, #8]
 8014b04:	683b      	ldr	r3, [r7, #0]
 8014b06:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014b08:	68fb      	ldr	r3, [r7, #12]
 8014b0a:	689b      	ldr	r3, [r3, #8]
 8014b0c:	683a      	ldr	r2, [r7, #0]
 8014b0e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8014b10:	68fb      	ldr	r3, [r7, #12]
 8014b12:	683a      	ldr	r2, [r7, #0]
 8014b14:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8014b16:	683b      	ldr	r3, [r7, #0]
 8014b18:	687a      	ldr	r2, [r7, #4]
 8014b1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	1c5a      	adds	r2, r3, #1
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	601a      	str	r2, [r3, #0]
}
 8014b26:	bf00      	nop
 8014b28:	3714      	adds	r7, #20
 8014b2a:	46bd      	mov	sp, r7
 8014b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b30:	4770      	bx	lr

08014b32 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014b32:	b480      	push	{r7}
 8014b34:	b085      	sub	sp, #20
 8014b36:	af00      	add	r7, sp, #0
 8014b38:	6078      	str	r0, [r7, #4]
 8014b3a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8014b3c:	683b      	ldr	r3, [r7, #0]
 8014b3e:	681b      	ldr	r3, [r3, #0]
 8014b40:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8014b42:	68bb      	ldr	r3, [r7, #8]
 8014b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b48:	d103      	bne.n	8014b52 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	691b      	ldr	r3, [r3, #16]
 8014b4e:	60fb      	str	r3, [r7, #12]
 8014b50:	e00c      	b.n	8014b6c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	3308      	adds	r3, #8
 8014b56:	60fb      	str	r3, [r7, #12]
 8014b58:	e002      	b.n	8014b60 <vListInsert+0x2e>
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	685b      	ldr	r3, [r3, #4]
 8014b5e:	60fb      	str	r3, [r7, #12]
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	685b      	ldr	r3, [r3, #4]
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	68ba      	ldr	r2, [r7, #8]
 8014b68:	429a      	cmp	r2, r3
 8014b6a:	d2f6      	bcs.n	8014b5a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8014b6c:	68fb      	ldr	r3, [r7, #12]
 8014b6e:	685a      	ldr	r2, [r3, #4]
 8014b70:	683b      	ldr	r3, [r7, #0]
 8014b72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8014b74:	683b      	ldr	r3, [r7, #0]
 8014b76:	685b      	ldr	r3, [r3, #4]
 8014b78:	683a      	ldr	r2, [r7, #0]
 8014b7a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8014b7c:	683b      	ldr	r3, [r7, #0]
 8014b7e:	68fa      	ldr	r2, [r7, #12]
 8014b80:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	683a      	ldr	r2, [r7, #0]
 8014b86:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8014b88:	683b      	ldr	r3, [r7, #0]
 8014b8a:	687a      	ldr	r2, [r7, #4]
 8014b8c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	681b      	ldr	r3, [r3, #0]
 8014b92:	1c5a      	adds	r2, r3, #1
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	601a      	str	r2, [r3, #0]
}
 8014b98:	bf00      	nop
 8014b9a:	3714      	adds	r7, #20
 8014b9c:	46bd      	mov	sp, r7
 8014b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ba2:	4770      	bx	lr

08014ba4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8014ba4:	b480      	push	{r7}
 8014ba6:	b085      	sub	sp, #20
 8014ba8:	af00      	add	r7, sp, #0
 8014baa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	691b      	ldr	r3, [r3, #16]
 8014bb0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	685b      	ldr	r3, [r3, #4]
 8014bb6:	687a      	ldr	r2, [r7, #4]
 8014bb8:	6892      	ldr	r2, [r2, #8]
 8014bba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	689b      	ldr	r3, [r3, #8]
 8014bc0:	687a      	ldr	r2, [r7, #4]
 8014bc2:	6852      	ldr	r2, [r2, #4]
 8014bc4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	685b      	ldr	r3, [r3, #4]
 8014bca:	687a      	ldr	r2, [r7, #4]
 8014bcc:	429a      	cmp	r2, r3
 8014bce:	d103      	bne.n	8014bd8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	689a      	ldr	r2, [r3, #8]
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	2200      	movs	r2, #0
 8014bdc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	681b      	ldr	r3, [r3, #0]
 8014be2:	1e5a      	subs	r2, r3, #1
 8014be4:	68fb      	ldr	r3, [r7, #12]
 8014be6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	681b      	ldr	r3, [r3, #0]
}
 8014bec:	4618      	mov	r0, r3
 8014bee:	3714      	adds	r7, #20
 8014bf0:	46bd      	mov	sp, r7
 8014bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bf6:	4770      	bx	lr

08014bf8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8014bf8:	b580      	push	{r7, lr}
 8014bfa:	b08e      	sub	sp, #56	@ 0x38
 8014bfc:	af00      	add	r7, sp, #0
 8014bfe:	60f8      	str	r0, [r7, #12]
 8014c00:	60b9      	str	r1, [r7, #8]
 8014c02:	607a      	str	r2, [r7, #4]
 8014c04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8014c06:	2300      	movs	r3, #0
 8014c08:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8014c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d10b      	bne.n	8014c2c <xQueueGenericSend+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8014c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c18:	f383 8811 	msr	BASEPRI, r3
 8014c1c:	f3bf 8f6f 	isb	sy
 8014c20:	f3bf 8f4f 	dsb	sy
 8014c24:	62bb      	str	r3, [r7, #40]	@ 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8014c26:	bf00      	nop
 8014c28:	bf00      	nop
 8014c2a:	e7fd      	b.n	8014c28 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014c2c:	68bb      	ldr	r3, [r7, #8]
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d103      	bne.n	8014c3a <xQueueGenericSend+0x42>
 8014c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d101      	bne.n	8014c3e <xQueueGenericSend+0x46>
 8014c3a:	2301      	movs	r3, #1
 8014c3c:	e000      	b.n	8014c40 <xQueueGenericSend+0x48>
 8014c3e:	2300      	movs	r3, #0
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d10b      	bne.n	8014c5c <xQueueGenericSend+0x64>
	__asm volatile
 8014c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c48:	f383 8811 	msr	BASEPRI, r3
 8014c4c:	f3bf 8f6f 	isb	sy
 8014c50:	f3bf 8f4f 	dsb	sy
 8014c54:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8014c56:	bf00      	nop
 8014c58:	bf00      	nop
 8014c5a:	e7fd      	b.n	8014c58 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014c5c:	683b      	ldr	r3, [r7, #0]
 8014c5e:	2b02      	cmp	r3, #2
 8014c60:	d103      	bne.n	8014c6a <xQueueGenericSend+0x72>
 8014c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014c66:	2b01      	cmp	r3, #1
 8014c68:	d101      	bne.n	8014c6e <xQueueGenericSend+0x76>
 8014c6a:	2301      	movs	r3, #1
 8014c6c:	e000      	b.n	8014c70 <xQueueGenericSend+0x78>
 8014c6e:	2300      	movs	r3, #0
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d10b      	bne.n	8014c8c <xQueueGenericSend+0x94>
	__asm volatile
 8014c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c78:	f383 8811 	msr	BASEPRI, r3
 8014c7c:	f3bf 8f6f 	isb	sy
 8014c80:	f3bf 8f4f 	dsb	sy
 8014c84:	623b      	str	r3, [r7, #32]
}
 8014c86:	bf00      	nop
 8014c88:	bf00      	nop
 8014c8a:	e7fd      	b.n	8014c88 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014c8c:	f001 f9d8 	bl	8016040 <xTaskGetSchedulerState>
 8014c90:	4603      	mov	r3, r0
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d102      	bne.n	8014c9c <xQueueGenericSend+0xa4>
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d101      	bne.n	8014ca0 <xQueueGenericSend+0xa8>
 8014c9c:	2301      	movs	r3, #1
 8014c9e:	e000      	b.n	8014ca2 <xQueueGenericSend+0xaa>
 8014ca0:	2300      	movs	r3, #0
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d10b      	bne.n	8014cbe <xQueueGenericSend+0xc6>
	__asm volatile
 8014ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014caa:	f383 8811 	msr	BASEPRI, r3
 8014cae:	f3bf 8f6f 	isb	sy
 8014cb2:	f3bf 8f4f 	dsb	sy
 8014cb6:	61fb      	str	r3, [r7, #28]
}
 8014cb8:	bf00      	nop
 8014cba:	bf00      	nop
 8014cbc:	e7fd      	b.n	8014cba <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014cbe:	f001 fd13 	bl	80166e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014cca:	429a      	cmp	r2, r3
 8014ccc:	d302      	bcc.n	8014cd4 <xQueueGenericSend+0xdc>
 8014cce:	683b      	ldr	r3, [r7, #0]
 8014cd0:	2b02      	cmp	r3, #2
 8014cd2:	d129      	bne.n	8014d28 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014cd4:	683a      	ldr	r2, [r7, #0]
 8014cd6:	68b9      	ldr	r1, [r7, #8]
 8014cd8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014cda:	f000 fac9 	bl	8015270 <prvCopyDataToQueue>
 8014cde:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d010      	beq.n	8014d0a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cea:	3324      	adds	r3, #36	@ 0x24
 8014cec:	4618      	mov	r0, r3
 8014cee:	f000 ffe7 	bl	8015cc0 <xTaskRemoveFromEventList>
 8014cf2:	4603      	mov	r3, r0
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d013      	beq.n	8014d20 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8014cf8:	4b3f      	ldr	r3, [pc, #252]	@ (8014df8 <xQueueGenericSend+0x200>)
 8014cfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014cfe:	601a      	str	r2, [r3, #0]
 8014d00:	f3bf 8f4f 	dsb	sy
 8014d04:	f3bf 8f6f 	isb	sy
 8014d08:	e00a      	b.n	8014d20 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8014d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d007      	beq.n	8014d20 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8014d10:	4b39      	ldr	r3, [pc, #228]	@ (8014df8 <xQueueGenericSend+0x200>)
 8014d12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014d16:	601a      	str	r2, [r3, #0]
 8014d18:	f3bf 8f4f 	dsb	sy
 8014d1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8014d20:	f001 fd14 	bl	801674c <vPortExitCritical>
				return pdPASS;
 8014d24:	2301      	movs	r3, #1
 8014d26:	e063      	b.n	8014df0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d103      	bne.n	8014d36 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014d2e:	f001 fd0d 	bl	801674c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8014d32:	2300      	movs	r3, #0
 8014d34:	e05c      	b.n	8014df0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	d106      	bne.n	8014d4a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014d3c:	f107 0314 	add.w	r3, r7, #20
 8014d40:	4618      	mov	r0, r3
 8014d42:	f001 f821 	bl	8015d88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014d46:	2301      	movs	r3, #1
 8014d48:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014d4a:	f001 fcff 	bl	801674c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014d4e:	f000 fdcf 	bl	80158f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014d52:	f001 fcc9 	bl	80166e8 <vPortEnterCritical>
 8014d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014d5c:	b25b      	sxtb	r3, r3
 8014d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d62:	d103      	bne.n	8014d6c <xQueueGenericSend+0x174>
 8014d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d66:	2200      	movs	r2, #0
 8014d68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014d72:	b25b      	sxtb	r3, r3
 8014d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d78:	d103      	bne.n	8014d82 <xQueueGenericSend+0x18a>
 8014d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d7c:	2200      	movs	r2, #0
 8014d7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8014d82:	f001 fce3 	bl	801674c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014d86:	1d3a      	adds	r2, r7, #4
 8014d88:	f107 0314 	add.w	r3, r7, #20
 8014d8c:	4611      	mov	r1, r2
 8014d8e:	4618      	mov	r0, r3
 8014d90:	f001 f810 	bl	8015db4 <xTaskCheckForTimeOut>
 8014d94:	4603      	mov	r3, r0
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d124      	bne.n	8014de4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8014d9a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014d9c:	f000 fb60 	bl	8015460 <prvIsQueueFull>
 8014da0:	4603      	mov	r3, r0
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d018      	beq.n	8014dd8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8014da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014da8:	3310      	adds	r3, #16
 8014daa:	687a      	ldr	r2, [r7, #4]
 8014dac:	4611      	mov	r1, r2
 8014dae:	4618      	mov	r0, r3
 8014db0:	f000 ff60 	bl	8015c74 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8014db4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014db6:	f000 faeb 	bl	8015390 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8014dba:	f000 fda7 	bl	801590c <xTaskResumeAll>
 8014dbe:	4603      	mov	r3, r0
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	f47f af7c 	bne.w	8014cbe <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8014dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8014df8 <xQueueGenericSend+0x200>)
 8014dc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014dcc:	601a      	str	r2, [r3, #0]
 8014dce:	f3bf 8f4f 	dsb	sy
 8014dd2:	f3bf 8f6f 	isb	sy
 8014dd6:	e772      	b.n	8014cbe <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8014dd8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014dda:	f000 fad9 	bl	8015390 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014dde:	f000 fd95 	bl	801590c <xTaskResumeAll>
 8014de2:	e76c      	b.n	8014cbe <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8014de4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014de6:	f000 fad3 	bl	8015390 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014dea:	f000 fd8f 	bl	801590c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8014dee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8014df0:	4618      	mov	r0, r3
 8014df2:	3738      	adds	r7, #56	@ 0x38
 8014df4:	46bd      	mov	sp, r7
 8014df6:	bd80      	pop	{r7, pc}
 8014df8:	e000ed04 	.word	0xe000ed04

08014dfc <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8014dfc:	b580      	push	{r7, lr}
 8014dfe:	b08e      	sub	sp, #56	@ 0x38
 8014e00:	af00      	add	r7, sp, #0
 8014e02:	6078      	str	r0, [r7, #4]
 8014e04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8014e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d10b      	bne.n	8014e28 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8014e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e14:	f383 8811 	msr	BASEPRI, r3
 8014e18:	f3bf 8f6f 	isb	sy
 8014e1c:	f3bf 8f4f 	dsb	sy
 8014e20:	623b      	str	r3, [r7, #32]
}
 8014e22:	bf00      	nop
 8014e24:	bf00      	nop
 8014e26:	e7fd      	b.n	8014e24 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8014e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	d00b      	beq.n	8014e48 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8014e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e34:	f383 8811 	msr	BASEPRI, r3
 8014e38:	f3bf 8f6f 	isb	sy
 8014e3c:	f3bf 8f4f 	dsb	sy
 8014e40:	61fb      	str	r3, [r7, #28]
}
 8014e42:	bf00      	nop
 8014e44:	bf00      	nop
 8014e46:	e7fd      	b.n	8014e44 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8014e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e4a:	681b      	ldr	r3, [r3, #0]
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d103      	bne.n	8014e58 <xQueueGiveFromISR+0x5c>
 8014e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e52:	689b      	ldr	r3, [r3, #8]
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d101      	bne.n	8014e5c <xQueueGiveFromISR+0x60>
 8014e58:	2301      	movs	r3, #1
 8014e5a:	e000      	b.n	8014e5e <xQueueGiveFromISR+0x62>
 8014e5c:	2300      	movs	r3, #0
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d10b      	bne.n	8014e7a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8014e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e66:	f383 8811 	msr	BASEPRI, r3
 8014e6a:	f3bf 8f6f 	isb	sy
 8014e6e:	f3bf 8f4f 	dsb	sy
 8014e72:	61bb      	str	r3, [r7, #24]
}
 8014e74:	bf00      	nop
 8014e76:	bf00      	nop
 8014e78:	e7fd      	b.n	8014e76 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014e7a:	f001 fd15 	bl	80168a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8014e7e:	f3ef 8211 	mrs	r2, BASEPRI
 8014e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e86:	f383 8811 	msr	BASEPRI, r3
 8014e8a:	f3bf 8f6f 	isb	sy
 8014e8e:	f3bf 8f4f 	dsb	sy
 8014e92:	617a      	str	r2, [r7, #20]
 8014e94:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8014e96:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014e9e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8014ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014ea4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014ea6:	429a      	cmp	r2, r3
 8014ea8:	d22b      	bcs.n	8014f02 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014eac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014eb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014eb6:	1c5a      	adds	r2, r3, #1
 8014eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014eba:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8014ebc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8014ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ec4:	d112      	bne.n	8014eec <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d016      	beq.n	8014efc <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ed0:	3324      	adds	r3, #36	@ 0x24
 8014ed2:	4618      	mov	r0, r3
 8014ed4:	f000 fef4 	bl	8015cc0 <xTaskRemoveFromEventList>
 8014ed8:	4603      	mov	r3, r0
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d00e      	beq.n	8014efc <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8014ede:	683b      	ldr	r3, [r7, #0]
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d00b      	beq.n	8014efc <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014ee4:	683b      	ldr	r3, [r7, #0]
 8014ee6:	2201      	movs	r2, #1
 8014ee8:	601a      	str	r2, [r3, #0]
 8014eea:	e007      	b.n	8014efc <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8014eec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014ef0:	3301      	adds	r3, #1
 8014ef2:	b2db      	uxtb	r3, r3
 8014ef4:	b25a      	sxtb	r2, r3
 8014ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ef8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8014efc:	2301      	movs	r3, #1
 8014efe:	637b      	str	r3, [r7, #52]	@ 0x34
 8014f00:	e001      	b.n	8014f06 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014f02:	2300      	movs	r3, #0
 8014f04:	637b      	str	r3, [r7, #52]	@ 0x34
 8014f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f08:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8014f0a:	68fb      	ldr	r3, [r7, #12]
 8014f0c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8014f10:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014f12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8014f14:	4618      	mov	r0, r3
 8014f16:	3738      	adds	r7, #56	@ 0x38
 8014f18:	46bd      	mov	sp, r7
 8014f1a:	bd80      	pop	{r7, pc}

08014f1c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8014f1c:	b580      	push	{r7, lr}
 8014f1e:	b08e      	sub	sp, #56	@ 0x38
 8014f20:	af00      	add	r7, sp, #0
 8014f22:	6078      	str	r0, [r7, #4]
 8014f24:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8014f26:	2300      	movs	r3, #0
 8014f28:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8014f2e:	2300      	movs	r3, #0
 8014f30:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d10b      	bne.n	8014f50 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8014f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f3c:	f383 8811 	msr	BASEPRI, r3
 8014f40:	f3bf 8f6f 	isb	sy
 8014f44:	f3bf 8f4f 	dsb	sy
 8014f48:	623b      	str	r3, [r7, #32]
}
 8014f4a:	bf00      	nop
 8014f4c:	bf00      	nop
 8014f4e:	e7fd      	b.n	8014f4c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8014f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d00b      	beq.n	8014f70 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8014f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f5c:	f383 8811 	msr	BASEPRI, r3
 8014f60:	f3bf 8f6f 	isb	sy
 8014f64:	f3bf 8f4f 	dsb	sy
 8014f68:	61fb      	str	r3, [r7, #28]
}
 8014f6a:	bf00      	nop
 8014f6c:	bf00      	nop
 8014f6e:	e7fd      	b.n	8014f6c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014f70:	f001 f866 	bl	8016040 <xTaskGetSchedulerState>
 8014f74:	4603      	mov	r3, r0
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d102      	bne.n	8014f80 <xQueueSemaphoreTake+0x64>
 8014f7a:	683b      	ldr	r3, [r7, #0]
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d101      	bne.n	8014f84 <xQueueSemaphoreTake+0x68>
 8014f80:	2301      	movs	r3, #1
 8014f82:	e000      	b.n	8014f86 <xQueueSemaphoreTake+0x6a>
 8014f84:	2300      	movs	r3, #0
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d10b      	bne.n	8014fa2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8014f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f8e:	f383 8811 	msr	BASEPRI, r3
 8014f92:	f3bf 8f6f 	isb	sy
 8014f96:	f3bf 8f4f 	dsb	sy
 8014f9a:	61bb      	str	r3, [r7, #24]
}
 8014f9c:	bf00      	nop
 8014f9e:	bf00      	nop
 8014fa0:	e7fd      	b.n	8014f9e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014fa2:	f001 fba1 	bl	80166e8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8014fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014faa:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8014fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d024      	beq.n	8014ffc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8014fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014fb4:	1e5a      	subs	r2, r3, #1
 8014fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014fb8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014fbc:	681b      	ldr	r3, [r3, #0]
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d104      	bne.n	8014fcc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8014fc2:	f001 f9e9 	bl	8016398 <pvTaskIncrementMutexHeldCount>
 8014fc6:	4602      	mov	r2, r0
 8014fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014fca:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014fce:	691b      	ldr	r3, [r3, #16]
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d00f      	beq.n	8014ff4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014fd6:	3310      	adds	r3, #16
 8014fd8:	4618      	mov	r0, r3
 8014fda:	f000 fe71 	bl	8015cc0 <xTaskRemoveFromEventList>
 8014fde:	4603      	mov	r3, r0
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d007      	beq.n	8014ff4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014fe4:	4b54      	ldr	r3, [pc, #336]	@ (8015138 <xQueueSemaphoreTake+0x21c>)
 8014fe6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014fea:	601a      	str	r2, [r3, #0]
 8014fec:	f3bf 8f4f 	dsb	sy
 8014ff0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014ff4:	f001 fbaa 	bl	801674c <vPortExitCritical>
				return pdPASS;
 8014ff8:	2301      	movs	r3, #1
 8014ffa:	e098      	b.n	801512e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014ffc:	683b      	ldr	r3, [r7, #0]
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d112      	bne.n	8015028 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8015002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015004:	2b00      	cmp	r3, #0
 8015006:	d00b      	beq.n	8015020 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8015008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801500c:	f383 8811 	msr	BASEPRI, r3
 8015010:	f3bf 8f6f 	isb	sy
 8015014:	f3bf 8f4f 	dsb	sy
 8015018:	617b      	str	r3, [r7, #20]
}
 801501a:	bf00      	nop
 801501c:	bf00      	nop
 801501e:	e7fd      	b.n	801501c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8015020:	f001 fb94 	bl	801674c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015024:	2300      	movs	r3, #0
 8015026:	e082      	b.n	801512e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801502a:	2b00      	cmp	r3, #0
 801502c:	d106      	bne.n	801503c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801502e:	f107 030c 	add.w	r3, r7, #12
 8015032:	4618      	mov	r0, r3
 8015034:	f000 fea8 	bl	8015d88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015038:	2301      	movs	r3, #1
 801503a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801503c:	f001 fb86 	bl	801674c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015040:	f000 fc56 	bl	80158f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015044:	f001 fb50 	bl	80166e8 <vPortEnterCritical>
 8015048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801504a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801504e:	b25b      	sxtb	r3, r3
 8015050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015054:	d103      	bne.n	801505e <xQueueSemaphoreTake+0x142>
 8015056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015058:	2200      	movs	r2, #0
 801505a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801505e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015060:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015064:	b25b      	sxtb	r3, r3
 8015066:	f1b3 3fff 	cmp.w	r3, #4294967295
 801506a:	d103      	bne.n	8015074 <xQueueSemaphoreTake+0x158>
 801506c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801506e:	2200      	movs	r2, #0
 8015070:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015074:	f001 fb6a 	bl	801674c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015078:	463a      	mov	r2, r7
 801507a:	f107 030c 	add.w	r3, r7, #12
 801507e:	4611      	mov	r1, r2
 8015080:	4618      	mov	r0, r3
 8015082:	f000 fe97 	bl	8015db4 <xTaskCheckForTimeOut>
 8015086:	4603      	mov	r3, r0
 8015088:	2b00      	cmp	r3, #0
 801508a:	d132      	bne.n	80150f2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801508c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801508e:	f000 f9d1 	bl	8015434 <prvIsQueueEmpty>
 8015092:	4603      	mov	r3, r0
 8015094:	2b00      	cmp	r3, #0
 8015096:	d026      	beq.n	80150e6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801509a:	681b      	ldr	r3, [r3, #0]
 801509c:	2b00      	cmp	r3, #0
 801509e:	d109      	bne.n	80150b4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80150a0:	f001 fb22 	bl	80166e8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80150a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150a6:	689b      	ldr	r3, [r3, #8]
 80150a8:	4618      	mov	r0, r3
 80150aa:	f000 ffe7 	bl	801607c <xTaskPriorityInherit>
 80150ae:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80150b0:	f001 fb4c 	bl	801674c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80150b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150b6:	3324      	adds	r3, #36	@ 0x24
 80150b8:	683a      	ldr	r2, [r7, #0]
 80150ba:	4611      	mov	r1, r2
 80150bc:	4618      	mov	r0, r3
 80150be:	f000 fdd9 	bl	8015c74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80150c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80150c4:	f000 f964 	bl	8015390 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80150c8:	f000 fc20 	bl	801590c <xTaskResumeAll>
 80150cc:	4603      	mov	r3, r0
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	f47f af67 	bne.w	8014fa2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80150d4:	4b18      	ldr	r3, [pc, #96]	@ (8015138 <xQueueSemaphoreTake+0x21c>)
 80150d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80150da:	601a      	str	r2, [r3, #0]
 80150dc:	f3bf 8f4f 	dsb	sy
 80150e0:	f3bf 8f6f 	isb	sy
 80150e4:	e75d      	b.n	8014fa2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80150e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80150e8:	f000 f952 	bl	8015390 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80150ec:	f000 fc0e 	bl	801590c <xTaskResumeAll>
 80150f0:	e757      	b.n	8014fa2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80150f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80150f4:	f000 f94c 	bl	8015390 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80150f8:	f000 fc08 	bl	801590c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80150fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80150fe:	f000 f999 	bl	8015434 <prvIsQueueEmpty>
 8015102:	4603      	mov	r3, r0
 8015104:	2b00      	cmp	r3, #0
 8015106:	f43f af4c 	beq.w	8014fa2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801510a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801510c:	2b00      	cmp	r3, #0
 801510e:	d00d      	beq.n	801512c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8015110:	f001 faea 	bl	80166e8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8015114:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015116:	f000 f893 	bl	8015240 <prvGetDisinheritPriorityAfterTimeout>
 801511a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801511c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801511e:	689b      	ldr	r3, [r3, #8]
 8015120:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015122:	4618      	mov	r0, r3
 8015124:	f001 f8a8 	bl	8016278 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8015128:	f001 fb10 	bl	801674c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801512c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801512e:	4618      	mov	r0, r3
 8015130:	3738      	adds	r7, #56	@ 0x38
 8015132:	46bd      	mov	sp, r7
 8015134:	bd80      	pop	{r7, pc}
 8015136:	bf00      	nop
 8015138:	e000ed04 	.word	0xe000ed04

0801513c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801513c:	b580      	push	{r7, lr}
 801513e:	b08e      	sub	sp, #56	@ 0x38
 8015140:	af00      	add	r7, sp, #0
 8015142:	60f8      	str	r0, [r7, #12]
 8015144:	60b9      	str	r1, [r7, #8]
 8015146:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801514c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801514e:	2b00      	cmp	r3, #0
 8015150:	d10b      	bne.n	801516a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8015152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015156:	f383 8811 	msr	BASEPRI, r3
 801515a:	f3bf 8f6f 	isb	sy
 801515e:	f3bf 8f4f 	dsb	sy
 8015162:	623b      	str	r3, [r7, #32]
}
 8015164:	bf00      	nop
 8015166:	bf00      	nop
 8015168:	e7fd      	b.n	8015166 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801516a:	68bb      	ldr	r3, [r7, #8]
 801516c:	2b00      	cmp	r3, #0
 801516e:	d103      	bne.n	8015178 <xQueueReceiveFromISR+0x3c>
 8015170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015174:	2b00      	cmp	r3, #0
 8015176:	d101      	bne.n	801517c <xQueueReceiveFromISR+0x40>
 8015178:	2301      	movs	r3, #1
 801517a:	e000      	b.n	801517e <xQueueReceiveFromISR+0x42>
 801517c:	2300      	movs	r3, #0
 801517e:	2b00      	cmp	r3, #0
 8015180:	d10b      	bne.n	801519a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8015182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015186:	f383 8811 	msr	BASEPRI, r3
 801518a:	f3bf 8f6f 	isb	sy
 801518e:	f3bf 8f4f 	dsb	sy
 8015192:	61fb      	str	r3, [r7, #28]
}
 8015194:	bf00      	nop
 8015196:	bf00      	nop
 8015198:	e7fd      	b.n	8015196 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801519a:	f001 fb85 	bl	80168a8 <vPortValidateInterruptPriority>
	__asm volatile
 801519e:	f3ef 8211 	mrs	r2, BASEPRI
 80151a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80151a6:	f383 8811 	msr	BASEPRI, r3
 80151aa:	f3bf 8f6f 	isb	sy
 80151ae:	f3bf 8f4f 	dsb	sy
 80151b2:	61ba      	str	r2, [r7, #24]
 80151b4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80151b6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80151b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80151ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80151bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80151be:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80151c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d02f      	beq.n	8015226 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80151c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80151c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80151cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80151d0:	68b9      	ldr	r1, [r7, #8]
 80151d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80151d4:	f000 f8b6 	bl	8015344 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80151d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80151da:	1e5a      	subs	r2, r3, #1
 80151dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80151de:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80151e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80151e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151e8:	d112      	bne.n	8015210 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80151ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80151ec:	691b      	ldr	r3, [r3, #16]
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	d016      	beq.n	8015220 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80151f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80151f4:	3310      	adds	r3, #16
 80151f6:	4618      	mov	r0, r3
 80151f8:	f000 fd62 	bl	8015cc0 <xTaskRemoveFromEventList>
 80151fc:	4603      	mov	r3, r0
 80151fe:	2b00      	cmp	r3, #0
 8015200:	d00e      	beq.n	8015220 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	2b00      	cmp	r3, #0
 8015206:	d00b      	beq.n	8015220 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	2201      	movs	r2, #1
 801520c:	601a      	str	r2, [r3, #0]
 801520e:	e007      	b.n	8015220 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8015210:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015214:	3301      	adds	r3, #1
 8015216:	b2db      	uxtb	r3, r3
 8015218:	b25a      	sxtb	r2, r3
 801521a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801521c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8015220:	2301      	movs	r3, #1
 8015222:	637b      	str	r3, [r7, #52]	@ 0x34
 8015224:	e001      	b.n	801522a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8015226:	2300      	movs	r3, #0
 8015228:	637b      	str	r3, [r7, #52]	@ 0x34
 801522a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801522c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801522e:	693b      	ldr	r3, [r7, #16]
 8015230:	f383 8811 	msr	BASEPRI, r3
}
 8015234:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8015238:	4618      	mov	r0, r3
 801523a:	3738      	adds	r7, #56	@ 0x38
 801523c:	46bd      	mov	sp, r7
 801523e:	bd80      	pop	{r7, pc}

08015240 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8015240:	b480      	push	{r7}
 8015242:	b085      	sub	sp, #20
 8015244:	af00      	add	r7, sp, #0
 8015246:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801524c:	2b00      	cmp	r3, #0
 801524e:	d006      	beq.n	801525e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015254:	681b      	ldr	r3, [r3, #0]
 8015256:	f1c3 0307 	rsb	r3, r3, #7
 801525a:	60fb      	str	r3, [r7, #12]
 801525c:	e001      	b.n	8015262 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801525e:	2300      	movs	r3, #0
 8015260:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8015262:	68fb      	ldr	r3, [r7, #12]
	}
 8015264:	4618      	mov	r0, r3
 8015266:	3714      	adds	r7, #20
 8015268:	46bd      	mov	sp, r7
 801526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801526e:	4770      	bx	lr

08015270 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8015270:	b580      	push	{r7, lr}
 8015272:	b086      	sub	sp, #24
 8015274:	af00      	add	r7, sp, #0
 8015276:	60f8      	str	r0, [r7, #12]
 8015278:	60b9      	str	r1, [r7, #8]
 801527a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801527c:	2300      	movs	r3, #0
 801527e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015280:	68fb      	ldr	r3, [r7, #12]
 8015282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015284:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801528a:	2b00      	cmp	r3, #0
 801528c:	d10d      	bne.n	80152aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801528e:	68fb      	ldr	r3, [r7, #12]
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	2b00      	cmp	r3, #0
 8015294:	d14d      	bne.n	8015332 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015296:	68fb      	ldr	r3, [r7, #12]
 8015298:	689b      	ldr	r3, [r3, #8]
 801529a:	4618      	mov	r0, r3
 801529c:	f000 ff64 	bl	8016168 <xTaskPriorityDisinherit>
 80152a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	2200      	movs	r2, #0
 80152a6:	609a      	str	r2, [r3, #8]
 80152a8:	e043      	b.n	8015332 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d119      	bne.n	80152e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	6858      	ldr	r0, [r3, #4]
 80152b4:	68fb      	ldr	r3, [r7, #12]
 80152b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80152b8:	461a      	mov	r2, r3
 80152ba:	68b9      	ldr	r1, [r7, #8]
 80152bc:	f002 fd0d 	bl	8017cda <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80152c0:	68fb      	ldr	r3, [r7, #12]
 80152c2:	685a      	ldr	r2, [r3, #4]
 80152c4:	68fb      	ldr	r3, [r7, #12]
 80152c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80152c8:	441a      	add	r2, r3
 80152ca:	68fb      	ldr	r3, [r7, #12]
 80152cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80152ce:	68fb      	ldr	r3, [r7, #12]
 80152d0:	685a      	ldr	r2, [r3, #4]
 80152d2:	68fb      	ldr	r3, [r7, #12]
 80152d4:	689b      	ldr	r3, [r3, #8]
 80152d6:	429a      	cmp	r2, r3
 80152d8:	d32b      	bcc.n	8015332 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80152da:	68fb      	ldr	r3, [r7, #12]
 80152dc:	681a      	ldr	r2, [r3, #0]
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	605a      	str	r2, [r3, #4]
 80152e2:	e026      	b.n	8015332 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80152e4:	68fb      	ldr	r3, [r7, #12]
 80152e6:	68d8      	ldr	r0, [r3, #12]
 80152e8:	68fb      	ldr	r3, [r7, #12]
 80152ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80152ec:	461a      	mov	r2, r3
 80152ee:	68b9      	ldr	r1, [r7, #8]
 80152f0:	f002 fcf3 	bl	8017cda <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80152f4:	68fb      	ldr	r3, [r7, #12]
 80152f6:	68da      	ldr	r2, [r3, #12]
 80152f8:	68fb      	ldr	r3, [r7, #12]
 80152fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80152fc:	425b      	negs	r3, r3
 80152fe:	441a      	add	r2, r3
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	68da      	ldr	r2, [r3, #12]
 8015308:	68fb      	ldr	r3, [r7, #12]
 801530a:	681b      	ldr	r3, [r3, #0]
 801530c:	429a      	cmp	r2, r3
 801530e:	d207      	bcs.n	8015320 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8015310:	68fb      	ldr	r3, [r7, #12]
 8015312:	689a      	ldr	r2, [r3, #8]
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015318:	425b      	negs	r3, r3
 801531a:	441a      	add	r2, r3
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	2b02      	cmp	r3, #2
 8015324:	d105      	bne.n	8015332 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015326:	693b      	ldr	r3, [r7, #16]
 8015328:	2b00      	cmp	r3, #0
 801532a:	d002      	beq.n	8015332 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801532c:	693b      	ldr	r3, [r7, #16]
 801532e:	3b01      	subs	r3, #1
 8015330:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015332:	693b      	ldr	r3, [r7, #16]
 8015334:	1c5a      	adds	r2, r3, #1
 8015336:	68fb      	ldr	r3, [r7, #12]
 8015338:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 801533a:	697b      	ldr	r3, [r7, #20]
}
 801533c:	4618      	mov	r0, r3
 801533e:	3718      	adds	r7, #24
 8015340:	46bd      	mov	sp, r7
 8015342:	bd80      	pop	{r7, pc}

08015344 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8015344:	b580      	push	{r7, lr}
 8015346:	b082      	sub	sp, #8
 8015348:	af00      	add	r7, sp, #0
 801534a:	6078      	str	r0, [r7, #4]
 801534c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015352:	2b00      	cmp	r3, #0
 8015354:	d018      	beq.n	8015388 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	68da      	ldr	r2, [r3, #12]
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801535e:	441a      	add	r2, r3
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	68da      	ldr	r2, [r3, #12]
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	689b      	ldr	r3, [r3, #8]
 801536c:	429a      	cmp	r2, r3
 801536e:	d303      	bcc.n	8015378 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	681a      	ldr	r2, [r3, #0]
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	68d9      	ldr	r1, [r3, #12]
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015380:	461a      	mov	r2, r3
 8015382:	6838      	ldr	r0, [r7, #0]
 8015384:	f002 fca9 	bl	8017cda <memcpy>
	}
}
 8015388:	bf00      	nop
 801538a:	3708      	adds	r7, #8
 801538c:	46bd      	mov	sp, r7
 801538e:	bd80      	pop	{r7, pc}

08015390 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015390:	b580      	push	{r7, lr}
 8015392:	b084      	sub	sp, #16
 8015394:	af00      	add	r7, sp, #0
 8015396:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8015398:	f001 f9a6 	bl	80166e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80153a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80153a4:	e011      	b.n	80153ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	d012      	beq.n	80153d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	3324      	adds	r3, #36	@ 0x24
 80153b2:	4618      	mov	r0, r3
 80153b4:	f000 fc84 	bl	8015cc0 <xTaskRemoveFromEventList>
 80153b8:	4603      	mov	r3, r0
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	d001      	beq.n	80153c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80153be:	f000 fd5d 	bl	8015e7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80153c2:	7bfb      	ldrb	r3, [r7, #15]
 80153c4:	3b01      	subs	r3, #1
 80153c6:	b2db      	uxtb	r3, r3
 80153c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80153ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	dce9      	bgt.n	80153a6 <prvUnlockQueue+0x16>
 80153d2:	e000      	b.n	80153d6 <prvUnlockQueue+0x46>
					break;
 80153d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	22ff      	movs	r2, #255	@ 0xff
 80153da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80153de:	f001 f9b5 	bl	801674c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80153e2:	f001 f981 	bl	80166e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80153ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80153ee:	e011      	b.n	8015414 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	691b      	ldr	r3, [r3, #16]
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d012      	beq.n	801541e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	3310      	adds	r3, #16
 80153fc:	4618      	mov	r0, r3
 80153fe:	f000 fc5f 	bl	8015cc0 <xTaskRemoveFromEventList>
 8015402:	4603      	mov	r3, r0
 8015404:	2b00      	cmp	r3, #0
 8015406:	d001      	beq.n	801540c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8015408:	f000 fd38 	bl	8015e7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801540c:	7bbb      	ldrb	r3, [r7, #14]
 801540e:	3b01      	subs	r3, #1
 8015410:	b2db      	uxtb	r3, r3
 8015412:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015414:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015418:	2b00      	cmp	r3, #0
 801541a:	dce9      	bgt.n	80153f0 <prvUnlockQueue+0x60>
 801541c:	e000      	b.n	8015420 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801541e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	22ff      	movs	r2, #255	@ 0xff
 8015424:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8015428:	f001 f990 	bl	801674c <vPortExitCritical>
}
 801542c:	bf00      	nop
 801542e:	3710      	adds	r7, #16
 8015430:	46bd      	mov	sp, r7
 8015432:	bd80      	pop	{r7, pc}

08015434 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8015434:	b580      	push	{r7, lr}
 8015436:	b084      	sub	sp, #16
 8015438:	af00      	add	r7, sp, #0
 801543a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801543c:	f001 f954 	bl	80166e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015444:	2b00      	cmp	r3, #0
 8015446:	d102      	bne.n	801544e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8015448:	2301      	movs	r3, #1
 801544a:	60fb      	str	r3, [r7, #12]
 801544c:	e001      	b.n	8015452 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801544e:	2300      	movs	r3, #0
 8015450:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015452:	f001 f97b 	bl	801674c <vPortExitCritical>

	return xReturn;
 8015456:	68fb      	ldr	r3, [r7, #12]
}
 8015458:	4618      	mov	r0, r3
 801545a:	3710      	adds	r7, #16
 801545c:	46bd      	mov	sp, r7
 801545e:	bd80      	pop	{r7, pc}

08015460 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8015460:	b580      	push	{r7, lr}
 8015462:	b084      	sub	sp, #16
 8015464:	af00      	add	r7, sp, #0
 8015466:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015468:	f001 f93e 	bl	80166e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015474:	429a      	cmp	r2, r3
 8015476:	d102      	bne.n	801547e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8015478:	2301      	movs	r3, #1
 801547a:	60fb      	str	r3, [r7, #12]
 801547c:	e001      	b.n	8015482 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801547e:	2300      	movs	r3, #0
 8015480:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015482:	f001 f963 	bl	801674c <vPortExitCritical>

	return xReturn;
 8015486:	68fb      	ldr	r3, [r7, #12]
}
 8015488:	4618      	mov	r0, r3
 801548a:	3710      	adds	r7, #16
 801548c:	46bd      	mov	sp, r7
 801548e:	bd80      	pop	{r7, pc}

08015490 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8015490:	b580      	push	{r7, lr}
 8015492:	b08e      	sub	sp, #56	@ 0x38
 8015494:	af04      	add	r7, sp, #16
 8015496:	60f8      	str	r0, [r7, #12]
 8015498:	60b9      	str	r1, [r7, #8]
 801549a:	607a      	str	r2, [r7, #4]
 801549c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801549e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d10b      	bne.n	80154bc <xTaskCreateStatic+0x2c>
	__asm volatile
 80154a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80154a8:	f383 8811 	msr	BASEPRI, r3
 80154ac:	f3bf 8f6f 	isb	sy
 80154b0:	f3bf 8f4f 	dsb	sy
 80154b4:	623b      	str	r3, [r7, #32]
}
 80154b6:	bf00      	nop
 80154b8:	bf00      	nop
 80154ba:	e7fd      	b.n	80154b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80154bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d10b      	bne.n	80154da <xTaskCreateStatic+0x4a>
	__asm volatile
 80154c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80154c6:	f383 8811 	msr	BASEPRI, r3
 80154ca:	f3bf 8f6f 	isb	sy
 80154ce:	f3bf 8f4f 	dsb	sy
 80154d2:	61fb      	str	r3, [r7, #28]
}
 80154d4:	bf00      	nop
 80154d6:	bf00      	nop
 80154d8:	e7fd      	b.n	80154d6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80154da:	2354      	movs	r3, #84	@ 0x54
 80154dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80154de:	693b      	ldr	r3, [r7, #16]
 80154e0:	2b54      	cmp	r3, #84	@ 0x54
 80154e2:	d00b      	beq.n	80154fc <xTaskCreateStatic+0x6c>
	__asm volatile
 80154e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80154e8:	f383 8811 	msr	BASEPRI, r3
 80154ec:	f3bf 8f6f 	isb	sy
 80154f0:	f3bf 8f4f 	dsb	sy
 80154f4:	61bb      	str	r3, [r7, #24]
}
 80154f6:	bf00      	nop
 80154f8:	bf00      	nop
 80154fa:	e7fd      	b.n	80154f8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80154fc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80154fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015500:	2b00      	cmp	r3, #0
 8015502:	d01e      	beq.n	8015542 <xTaskCreateStatic+0xb2>
 8015504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015506:	2b00      	cmp	r3, #0
 8015508:	d01b      	beq.n	8015542 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801550a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801550c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801550e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015510:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015512:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8015514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015516:	2202      	movs	r2, #2
 8015518:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801551c:	2300      	movs	r3, #0
 801551e:	9303      	str	r3, [sp, #12]
 8015520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015522:	9302      	str	r3, [sp, #8]
 8015524:	f107 0314 	add.w	r3, r7, #20
 8015528:	9301      	str	r3, [sp, #4]
 801552a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801552c:	9300      	str	r3, [sp, #0]
 801552e:	683b      	ldr	r3, [r7, #0]
 8015530:	687a      	ldr	r2, [r7, #4]
 8015532:	68b9      	ldr	r1, [r7, #8]
 8015534:	68f8      	ldr	r0, [r7, #12]
 8015536:	f000 f850 	bl	80155da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801553a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801553c:	f000 f8d6 	bl	80156ec <prvAddNewTaskToReadyList>
 8015540:	e001      	b.n	8015546 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8015542:	2300      	movs	r3, #0
 8015544:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8015546:	697b      	ldr	r3, [r7, #20]
	}
 8015548:	4618      	mov	r0, r3
 801554a:	3728      	adds	r7, #40	@ 0x28
 801554c:	46bd      	mov	sp, r7
 801554e:	bd80      	pop	{r7, pc}

08015550 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8015550:	b580      	push	{r7, lr}
 8015552:	b08c      	sub	sp, #48	@ 0x30
 8015554:	af04      	add	r7, sp, #16
 8015556:	60f8      	str	r0, [r7, #12]
 8015558:	60b9      	str	r1, [r7, #8]
 801555a:	603b      	str	r3, [r7, #0]
 801555c:	4613      	mov	r3, r2
 801555e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8015560:	88fb      	ldrh	r3, [r7, #6]
 8015562:	009b      	lsls	r3, r3, #2
 8015564:	4618      	mov	r0, r3
 8015566:	f001 f9e1 	bl	801692c <pvPortMalloc>
 801556a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801556c:	697b      	ldr	r3, [r7, #20]
 801556e:	2b00      	cmp	r3, #0
 8015570:	d00e      	beq.n	8015590 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8015572:	2054      	movs	r0, #84	@ 0x54
 8015574:	f001 f9da 	bl	801692c <pvPortMalloc>
 8015578:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801557a:	69fb      	ldr	r3, [r7, #28]
 801557c:	2b00      	cmp	r3, #0
 801557e:	d003      	beq.n	8015588 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8015580:	69fb      	ldr	r3, [r7, #28]
 8015582:	697a      	ldr	r2, [r7, #20]
 8015584:	631a      	str	r2, [r3, #48]	@ 0x30
 8015586:	e005      	b.n	8015594 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8015588:	6978      	ldr	r0, [r7, #20]
 801558a:	f001 fa9d 	bl	8016ac8 <vPortFree>
 801558e:	e001      	b.n	8015594 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8015590:	2300      	movs	r3, #0
 8015592:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8015594:	69fb      	ldr	r3, [r7, #28]
 8015596:	2b00      	cmp	r3, #0
 8015598:	d017      	beq.n	80155ca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801559a:	69fb      	ldr	r3, [r7, #28]
 801559c:	2200      	movs	r2, #0
 801559e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80155a2:	88fa      	ldrh	r2, [r7, #6]
 80155a4:	2300      	movs	r3, #0
 80155a6:	9303      	str	r3, [sp, #12]
 80155a8:	69fb      	ldr	r3, [r7, #28]
 80155aa:	9302      	str	r3, [sp, #8]
 80155ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155ae:	9301      	str	r3, [sp, #4]
 80155b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155b2:	9300      	str	r3, [sp, #0]
 80155b4:	683b      	ldr	r3, [r7, #0]
 80155b6:	68b9      	ldr	r1, [r7, #8]
 80155b8:	68f8      	ldr	r0, [r7, #12]
 80155ba:	f000 f80e 	bl	80155da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80155be:	69f8      	ldr	r0, [r7, #28]
 80155c0:	f000 f894 	bl	80156ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80155c4:	2301      	movs	r3, #1
 80155c6:	61bb      	str	r3, [r7, #24]
 80155c8:	e002      	b.n	80155d0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80155ca:	f04f 33ff 	mov.w	r3, #4294967295
 80155ce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80155d0:	69bb      	ldr	r3, [r7, #24]
	}
 80155d2:	4618      	mov	r0, r3
 80155d4:	3720      	adds	r7, #32
 80155d6:	46bd      	mov	sp, r7
 80155d8:	bd80      	pop	{r7, pc}

080155da <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80155da:	b580      	push	{r7, lr}
 80155dc:	b088      	sub	sp, #32
 80155de:	af00      	add	r7, sp, #0
 80155e0:	60f8      	str	r0, [r7, #12]
 80155e2:	60b9      	str	r1, [r7, #8]
 80155e4:	607a      	str	r2, [r7, #4]
 80155e6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80155e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80155ec:	6879      	ldr	r1, [r7, #4]
 80155ee:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80155f2:	440b      	add	r3, r1
 80155f4:	009b      	lsls	r3, r3, #2
 80155f6:	4413      	add	r3, r2
 80155f8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80155fa:	69bb      	ldr	r3, [r7, #24]
 80155fc:	f023 0307 	bic.w	r3, r3, #7
 8015600:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8015602:	69bb      	ldr	r3, [r7, #24]
 8015604:	f003 0307 	and.w	r3, r3, #7
 8015608:	2b00      	cmp	r3, #0
 801560a:	d00b      	beq.n	8015624 <prvInitialiseNewTask+0x4a>
	__asm volatile
 801560c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015610:	f383 8811 	msr	BASEPRI, r3
 8015614:	f3bf 8f6f 	isb	sy
 8015618:	f3bf 8f4f 	dsb	sy
 801561c:	617b      	str	r3, [r7, #20]
}
 801561e:	bf00      	nop
 8015620:	bf00      	nop
 8015622:	e7fd      	b.n	8015620 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8015624:	68bb      	ldr	r3, [r7, #8]
 8015626:	2b00      	cmp	r3, #0
 8015628:	d01f      	beq.n	801566a <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801562a:	2300      	movs	r3, #0
 801562c:	61fb      	str	r3, [r7, #28]
 801562e:	e012      	b.n	8015656 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8015630:	68ba      	ldr	r2, [r7, #8]
 8015632:	69fb      	ldr	r3, [r7, #28]
 8015634:	4413      	add	r3, r2
 8015636:	7819      	ldrb	r1, [r3, #0]
 8015638:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801563a:	69fb      	ldr	r3, [r7, #28]
 801563c:	4413      	add	r3, r2
 801563e:	3334      	adds	r3, #52	@ 0x34
 8015640:	460a      	mov	r2, r1
 8015642:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8015644:	68ba      	ldr	r2, [r7, #8]
 8015646:	69fb      	ldr	r3, [r7, #28]
 8015648:	4413      	add	r3, r2
 801564a:	781b      	ldrb	r3, [r3, #0]
 801564c:	2b00      	cmp	r3, #0
 801564e:	d006      	beq.n	801565e <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015650:	69fb      	ldr	r3, [r7, #28]
 8015652:	3301      	adds	r3, #1
 8015654:	61fb      	str	r3, [r7, #28]
 8015656:	69fb      	ldr	r3, [r7, #28]
 8015658:	2b0f      	cmp	r3, #15
 801565a:	d9e9      	bls.n	8015630 <prvInitialiseNewTask+0x56>
 801565c:	e000      	b.n	8015660 <prvInitialiseNewTask+0x86>
			{
				break;
 801565e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8015660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015662:	2200      	movs	r2, #0
 8015664:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8015668:	e003      	b.n	8015672 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801566a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801566c:	2200      	movs	r2, #0
 801566e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8015672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015674:	2b06      	cmp	r3, #6
 8015676:	d901      	bls.n	801567c <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8015678:	2306      	movs	r3, #6
 801567a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801567c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801567e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015680:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8015682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015684:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015686:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8015688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801568a:	2200      	movs	r2, #0
 801568c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801568e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015690:	3304      	adds	r3, #4
 8015692:	4618      	mov	r0, r3
 8015694:	f7ff fa1c 	bl	8014ad0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8015698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801569a:	3318      	adds	r3, #24
 801569c:	4618      	mov	r0, r3
 801569e:	f7ff fa17 	bl	8014ad0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80156a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80156a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80156a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156aa:	f1c3 0207 	rsb	r2, r3, #7
 80156ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80156b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80156b6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80156b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156ba:	2200      	movs	r2, #0
 80156bc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80156be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156c0:	2200      	movs	r2, #0
 80156c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80156c6:	683a      	ldr	r2, [r7, #0]
 80156c8:	68f9      	ldr	r1, [r7, #12]
 80156ca:	69b8      	ldr	r0, [r7, #24]
 80156cc:	f000 fede 	bl	801648c <pxPortInitialiseStack>
 80156d0:	4602      	mov	r2, r0
 80156d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156d4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80156d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d002      	beq.n	80156e2 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80156dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80156e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80156e2:	bf00      	nop
 80156e4:	3720      	adds	r7, #32
 80156e6:	46bd      	mov	sp, r7
 80156e8:	bd80      	pop	{r7, pc}
	...

080156ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80156ec:	b580      	push	{r7, lr}
 80156ee:	b082      	sub	sp, #8
 80156f0:	af00      	add	r7, sp, #0
 80156f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80156f4:	f000 fff8 	bl	80166e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80156f8:	4b2a      	ldr	r3, [pc, #168]	@ (80157a4 <prvAddNewTaskToReadyList+0xb8>)
 80156fa:	681b      	ldr	r3, [r3, #0]
 80156fc:	3301      	adds	r3, #1
 80156fe:	4a29      	ldr	r2, [pc, #164]	@ (80157a4 <prvAddNewTaskToReadyList+0xb8>)
 8015700:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8015702:	4b29      	ldr	r3, [pc, #164]	@ (80157a8 <prvAddNewTaskToReadyList+0xbc>)
 8015704:	681b      	ldr	r3, [r3, #0]
 8015706:	2b00      	cmp	r3, #0
 8015708:	d109      	bne.n	801571e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801570a:	4a27      	ldr	r2, [pc, #156]	@ (80157a8 <prvAddNewTaskToReadyList+0xbc>)
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8015710:	4b24      	ldr	r3, [pc, #144]	@ (80157a4 <prvAddNewTaskToReadyList+0xb8>)
 8015712:	681b      	ldr	r3, [r3, #0]
 8015714:	2b01      	cmp	r3, #1
 8015716:	d110      	bne.n	801573a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8015718:	f000 fbd4 	bl	8015ec4 <prvInitialiseTaskLists>
 801571c:	e00d      	b.n	801573a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801571e:	4b23      	ldr	r3, [pc, #140]	@ (80157ac <prvAddNewTaskToReadyList+0xc0>)
 8015720:	681b      	ldr	r3, [r3, #0]
 8015722:	2b00      	cmp	r3, #0
 8015724:	d109      	bne.n	801573a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8015726:	4b20      	ldr	r3, [pc, #128]	@ (80157a8 <prvAddNewTaskToReadyList+0xbc>)
 8015728:	681b      	ldr	r3, [r3, #0]
 801572a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015730:	429a      	cmp	r2, r3
 8015732:	d802      	bhi.n	801573a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8015734:	4a1c      	ldr	r2, [pc, #112]	@ (80157a8 <prvAddNewTaskToReadyList+0xbc>)
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801573a:	4b1d      	ldr	r3, [pc, #116]	@ (80157b0 <prvAddNewTaskToReadyList+0xc4>)
 801573c:	681b      	ldr	r3, [r3, #0]
 801573e:	3301      	adds	r3, #1
 8015740:	4a1b      	ldr	r2, [pc, #108]	@ (80157b0 <prvAddNewTaskToReadyList+0xc4>)
 8015742:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015748:	2201      	movs	r2, #1
 801574a:	409a      	lsls	r2, r3
 801574c:	4b19      	ldr	r3, [pc, #100]	@ (80157b4 <prvAddNewTaskToReadyList+0xc8>)
 801574e:	681b      	ldr	r3, [r3, #0]
 8015750:	4313      	orrs	r3, r2
 8015752:	4a18      	ldr	r2, [pc, #96]	@ (80157b4 <prvAddNewTaskToReadyList+0xc8>)
 8015754:	6013      	str	r3, [r2, #0]
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801575a:	4613      	mov	r3, r2
 801575c:	009b      	lsls	r3, r3, #2
 801575e:	4413      	add	r3, r2
 8015760:	009b      	lsls	r3, r3, #2
 8015762:	4a15      	ldr	r2, [pc, #84]	@ (80157b8 <prvAddNewTaskToReadyList+0xcc>)
 8015764:	441a      	add	r2, r3
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	3304      	adds	r3, #4
 801576a:	4619      	mov	r1, r3
 801576c:	4610      	mov	r0, r2
 801576e:	f7ff f9bc 	bl	8014aea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8015772:	f000 ffeb 	bl	801674c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8015776:	4b0d      	ldr	r3, [pc, #52]	@ (80157ac <prvAddNewTaskToReadyList+0xc0>)
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	2b00      	cmp	r3, #0
 801577c:	d00e      	beq.n	801579c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801577e:	4b0a      	ldr	r3, [pc, #40]	@ (80157a8 <prvAddNewTaskToReadyList+0xbc>)
 8015780:	681b      	ldr	r3, [r3, #0]
 8015782:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015788:	429a      	cmp	r2, r3
 801578a:	d207      	bcs.n	801579c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801578c:	4b0b      	ldr	r3, [pc, #44]	@ (80157bc <prvAddNewTaskToReadyList+0xd0>)
 801578e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015792:	601a      	str	r2, [r3, #0]
 8015794:	f3bf 8f4f 	dsb	sy
 8015798:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801579c:	bf00      	nop
 801579e:	3708      	adds	r7, #8
 80157a0:	46bd      	mov	sp, r7
 80157a2:	bd80      	pop	{r7, pc}
 80157a4:	24002bb8 	.word	0x24002bb8
 80157a8:	24002ab8 	.word	0x24002ab8
 80157ac:	24002bc4 	.word	0x24002bc4
 80157b0:	24002bd4 	.word	0x24002bd4
 80157b4:	24002bc0 	.word	0x24002bc0
 80157b8:	24002abc 	.word	0x24002abc
 80157bc:	e000ed04 	.word	0xe000ed04

080157c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80157c0:	b580      	push	{r7, lr}
 80157c2:	b084      	sub	sp, #16
 80157c4:	af00      	add	r7, sp, #0
 80157c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80157c8:	2300      	movs	r3, #0
 80157ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d018      	beq.n	8015804 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80157d2:	4b14      	ldr	r3, [pc, #80]	@ (8015824 <vTaskDelay+0x64>)
 80157d4:	681b      	ldr	r3, [r3, #0]
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d00b      	beq.n	80157f2 <vTaskDelay+0x32>
	__asm volatile
 80157da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80157de:	f383 8811 	msr	BASEPRI, r3
 80157e2:	f3bf 8f6f 	isb	sy
 80157e6:	f3bf 8f4f 	dsb	sy
 80157ea:	60bb      	str	r3, [r7, #8]
}
 80157ec:	bf00      	nop
 80157ee:	bf00      	nop
 80157f0:	e7fd      	b.n	80157ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80157f2:	f000 f87d 	bl	80158f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80157f6:	2100      	movs	r1, #0
 80157f8:	6878      	ldr	r0, [r7, #4]
 80157fa:	f000 fde1 	bl	80163c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80157fe:	f000 f885 	bl	801590c <xTaskResumeAll>
 8015802:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8015804:	68fb      	ldr	r3, [r7, #12]
 8015806:	2b00      	cmp	r3, #0
 8015808:	d107      	bne.n	801581a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801580a:	4b07      	ldr	r3, [pc, #28]	@ (8015828 <vTaskDelay+0x68>)
 801580c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015810:	601a      	str	r2, [r3, #0]
 8015812:	f3bf 8f4f 	dsb	sy
 8015816:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801581a:	bf00      	nop
 801581c:	3710      	adds	r7, #16
 801581e:	46bd      	mov	sp, r7
 8015820:	bd80      	pop	{r7, pc}
 8015822:	bf00      	nop
 8015824:	24002be0 	.word	0x24002be0
 8015828:	e000ed04 	.word	0xe000ed04

0801582c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801582c:	b580      	push	{r7, lr}
 801582e:	b08a      	sub	sp, #40	@ 0x28
 8015830:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8015832:	2300      	movs	r3, #0
 8015834:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8015836:	2300      	movs	r3, #0
 8015838:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801583a:	463a      	mov	r2, r7
 801583c:	1d39      	adds	r1, r7, #4
 801583e:	f107 0308 	add.w	r3, r7, #8
 8015842:	4618      	mov	r0, r3
 8015844:	f7ec fc94 	bl	8002170 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8015848:	6839      	ldr	r1, [r7, #0]
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	68ba      	ldr	r2, [r7, #8]
 801584e:	9202      	str	r2, [sp, #8]
 8015850:	9301      	str	r3, [sp, #4]
 8015852:	2300      	movs	r3, #0
 8015854:	9300      	str	r3, [sp, #0]
 8015856:	2300      	movs	r3, #0
 8015858:	460a      	mov	r2, r1
 801585a:	491f      	ldr	r1, [pc, #124]	@ (80158d8 <vTaskStartScheduler+0xac>)
 801585c:	481f      	ldr	r0, [pc, #124]	@ (80158dc <vTaskStartScheduler+0xb0>)
 801585e:	f7ff fe17 	bl	8015490 <xTaskCreateStatic>
 8015862:	4603      	mov	r3, r0
 8015864:	4a1e      	ldr	r2, [pc, #120]	@ (80158e0 <vTaskStartScheduler+0xb4>)
 8015866:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8015868:	4b1d      	ldr	r3, [pc, #116]	@ (80158e0 <vTaskStartScheduler+0xb4>)
 801586a:	681b      	ldr	r3, [r3, #0]
 801586c:	2b00      	cmp	r3, #0
 801586e:	d002      	beq.n	8015876 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8015870:	2301      	movs	r3, #1
 8015872:	617b      	str	r3, [r7, #20]
 8015874:	e001      	b.n	801587a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8015876:	2300      	movs	r3, #0
 8015878:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801587a:	697b      	ldr	r3, [r7, #20]
 801587c:	2b01      	cmp	r3, #1
 801587e:	d116      	bne.n	80158ae <vTaskStartScheduler+0x82>
	__asm volatile
 8015880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015884:	f383 8811 	msr	BASEPRI, r3
 8015888:	f3bf 8f6f 	isb	sy
 801588c:	f3bf 8f4f 	dsb	sy
 8015890:	613b      	str	r3, [r7, #16]
}
 8015892:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8015894:	4b13      	ldr	r3, [pc, #76]	@ (80158e4 <vTaskStartScheduler+0xb8>)
 8015896:	f04f 32ff 	mov.w	r2, #4294967295
 801589a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801589c:	4b12      	ldr	r3, [pc, #72]	@ (80158e8 <vTaskStartScheduler+0xbc>)
 801589e:	2201      	movs	r2, #1
 80158a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80158a2:	4b12      	ldr	r3, [pc, #72]	@ (80158ec <vTaskStartScheduler+0xc0>)
 80158a4:	2200      	movs	r2, #0
 80158a6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80158a8:	f000 fe7a 	bl	80165a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80158ac:	e00f      	b.n	80158ce <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80158ae:	697b      	ldr	r3, [r7, #20]
 80158b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158b4:	d10b      	bne.n	80158ce <vTaskStartScheduler+0xa2>
	__asm volatile
 80158b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80158ba:	f383 8811 	msr	BASEPRI, r3
 80158be:	f3bf 8f6f 	isb	sy
 80158c2:	f3bf 8f4f 	dsb	sy
 80158c6:	60fb      	str	r3, [r7, #12]
}
 80158c8:	bf00      	nop
 80158ca:	bf00      	nop
 80158cc:	e7fd      	b.n	80158ca <vTaskStartScheduler+0x9e>
}
 80158ce:	bf00      	nop
 80158d0:	3718      	adds	r7, #24
 80158d2:	46bd      	mov	sp, r7
 80158d4:	bd80      	pop	{r7, pc}
 80158d6:	bf00      	nop
 80158d8:	08019cec 	.word	0x08019cec
 80158dc:	08015e95 	.word	0x08015e95
 80158e0:	24002bdc 	.word	0x24002bdc
 80158e4:	24002bd8 	.word	0x24002bd8
 80158e8:	24002bc4 	.word	0x24002bc4
 80158ec:	24002bbc 	.word	0x24002bbc

080158f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80158f0:	b480      	push	{r7}
 80158f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80158f4:	4b04      	ldr	r3, [pc, #16]	@ (8015908 <vTaskSuspendAll+0x18>)
 80158f6:	681b      	ldr	r3, [r3, #0]
 80158f8:	3301      	adds	r3, #1
 80158fa:	4a03      	ldr	r2, [pc, #12]	@ (8015908 <vTaskSuspendAll+0x18>)
 80158fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80158fe:	bf00      	nop
 8015900:	46bd      	mov	sp, r7
 8015902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015906:	4770      	bx	lr
 8015908:	24002be0 	.word	0x24002be0

0801590c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801590c:	b580      	push	{r7, lr}
 801590e:	b084      	sub	sp, #16
 8015910:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8015912:	2300      	movs	r3, #0
 8015914:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8015916:	2300      	movs	r3, #0
 8015918:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801591a:	4b42      	ldr	r3, [pc, #264]	@ (8015a24 <xTaskResumeAll+0x118>)
 801591c:	681b      	ldr	r3, [r3, #0]
 801591e:	2b00      	cmp	r3, #0
 8015920:	d10b      	bne.n	801593a <xTaskResumeAll+0x2e>
	__asm volatile
 8015922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015926:	f383 8811 	msr	BASEPRI, r3
 801592a:	f3bf 8f6f 	isb	sy
 801592e:	f3bf 8f4f 	dsb	sy
 8015932:	603b      	str	r3, [r7, #0]
}
 8015934:	bf00      	nop
 8015936:	bf00      	nop
 8015938:	e7fd      	b.n	8015936 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801593a:	f000 fed5 	bl	80166e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801593e:	4b39      	ldr	r3, [pc, #228]	@ (8015a24 <xTaskResumeAll+0x118>)
 8015940:	681b      	ldr	r3, [r3, #0]
 8015942:	3b01      	subs	r3, #1
 8015944:	4a37      	ldr	r2, [pc, #220]	@ (8015a24 <xTaskResumeAll+0x118>)
 8015946:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015948:	4b36      	ldr	r3, [pc, #216]	@ (8015a24 <xTaskResumeAll+0x118>)
 801594a:	681b      	ldr	r3, [r3, #0]
 801594c:	2b00      	cmp	r3, #0
 801594e:	d161      	bne.n	8015a14 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8015950:	4b35      	ldr	r3, [pc, #212]	@ (8015a28 <xTaskResumeAll+0x11c>)
 8015952:	681b      	ldr	r3, [r3, #0]
 8015954:	2b00      	cmp	r3, #0
 8015956:	d05d      	beq.n	8015a14 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015958:	e02e      	b.n	80159b8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801595a:	4b34      	ldr	r3, [pc, #208]	@ (8015a2c <xTaskResumeAll+0x120>)
 801595c:	68db      	ldr	r3, [r3, #12]
 801595e:	68db      	ldr	r3, [r3, #12]
 8015960:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015962:	68fb      	ldr	r3, [r7, #12]
 8015964:	3318      	adds	r3, #24
 8015966:	4618      	mov	r0, r3
 8015968:	f7ff f91c 	bl	8014ba4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801596c:	68fb      	ldr	r3, [r7, #12]
 801596e:	3304      	adds	r3, #4
 8015970:	4618      	mov	r0, r3
 8015972:	f7ff f917 	bl	8014ba4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015976:	68fb      	ldr	r3, [r7, #12]
 8015978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801597a:	2201      	movs	r2, #1
 801597c:	409a      	lsls	r2, r3
 801597e:	4b2c      	ldr	r3, [pc, #176]	@ (8015a30 <xTaskResumeAll+0x124>)
 8015980:	681b      	ldr	r3, [r3, #0]
 8015982:	4313      	orrs	r3, r2
 8015984:	4a2a      	ldr	r2, [pc, #168]	@ (8015a30 <xTaskResumeAll+0x124>)
 8015986:	6013      	str	r3, [r2, #0]
 8015988:	68fb      	ldr	r3, [r7, #12]
 801598a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801598c:	4613      	mov	r3, r2
 801598e:	009b      	lsls	r3, r3, #2
 8015990:	4413      	add	r3, r2
 8015992:	009b      	lsls	r3, r3, #2
 8015994:	4a27      	ldr	r2, [pc, #156]	@ (8015a34 <xTaskResumeAll+0x128>)
 8015996:	441a      	add	r2, r3
 8015998:	68fb      	ldr	r3, [r7, #12]
 801599a:	3304      	adds	r3, #4
 801599c:	4619      	mov	r1, r3
 801599e:	4610      	mov	r0, r2
 80159a0:	f7ff f8a3 	bl	8014aea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80159a4:	68fb      	ldr	r3, [r7, #12]
 80159a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80159a8:	4b23      	ldr	r3, [pc, #140]	@ (8015a38 <xTaskResumeAll+0x12c>)
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80159ae:	429a      	cmp	r2, r3
 80159b0:	d302      	bcc.n	80159b8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80159b2:	4b22      	ldr	r3, [pc, #136]	@ (8015a3c <xTaskResumeAll+0x130>)
 80159b4:	2201      	movs	r2, #1
 80159b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80159b8:	4b1c      	ldr	r3, [pc, #112]	@ (8015a2c <xTaskResumeAll+0x120>)
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d1cc      	bne.n	801595a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80159c0:	68fb      	ldr	r3, [r7, #12]
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d001      	beq.n	80159ca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80159c6:	f000 fb1b 	bl	8016000 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80159ca:	4b1d      	ldr	r3, [pc, #116]	@ (8015a40 <xTaskResumeAll+0x134>)
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d010      	beq.n	80159f8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80159d6:	f000 f837 	bl	8015a48 <xTaskIncrementTick>
 80159da:	4603      	mov	r3, r0
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d002      	beq.n	80159e6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80159e0:	4b16      	ldr	r3, [pc, #88]	@ (8015a3c <xTaskResumeAll+0x130>)
 80159e2:	2201      	movs	r2, #1
 80159e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	3b01      	subs	r3, #1
 80159ea:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d1f1      	bne.n	80159d6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80159f2:	4b13      	ldr	r3, [pc, #76]	@ (8015a40 <xTaskResumeAll+0x134>)
 80159f4:	2200      	movs	r2, #0
 80159f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80159f8:	4b10      	ldr	r3, [pc, #64]	@ (8015a3c <xTaskResumeAll+0x130>)
 80159fa:	681b      	ldr	r3, [r3, #0]
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d009      	beq.n	8015a14 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8015a00:	2301      	movs	r3, #1
 8015a02:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8015a04:	4b0f      	ldr	r3, [pc, #60]	@ (8015a44 <xTaskResumeAll+0x138>)
 8015a06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015a0a:	601a      	str	r2, [r3, #0]
 8015a0c:	f3bf 8f4f 	dsb	sy
 8015a10:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015a14:	f000 fe9a 	bl	801674c <vPortExitCritical>

	return xAlreadyYielded;
 8015a18:	68bb      	ldr	r3, [r7, #8]
}
 8015a1a:	4618      	mov	r0, r3
 8015a1c:	3710      	adds	r7, #16
 8015a1e:	46bd      	mov	sp, r7
 8015a20:	bd80      	pop	{r7, pc}
 8015a22:	bf00      	nop
 8015a24:	24002be0 	.word	0x24002be0
 8015a28:	24002bb8 	.word	0x24002bb8
 8015a2c:	24002b78 	.word	0x24002b78
 8015a30:	24002bc0 	.word	0x24002bc0
 8015a34:	24002abc 	.word	0x24002abc
 8015a38:	24002ab8 	.word	0x24002ab8
 8015a3c:	24002bcc 	.word	0x24002bcc
 8015a40:	24002bc8 	.word	0x24002bc8
 8015a44:	e000ed04 	.word	0xe000ed04

08015a48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015a48:	b580      	push	{r7, lr}
 8015a4a:	b086      	sub	sp, #24
 8015a4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8015a4e:	2300      	movs	r3, #0
 8015a50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015a52:	4b4f      	ldr	r3, [pc, #316]	@ (8015b90 <xTaskIncrementTick+0x148>)
 8015a54:	681b      	ldr	r3, [r3, #0]
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	f040 808f 	bne.w	8015b7a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8015a5c:	4b4d      	ldr	r3, [pc, #308]	@ (8015b94 <xTaskIncrementTick+0x14c>)
 8015a5e:	681b      	ldr	r3, [r3, #0]
 8015a60:	3301      	adds	r3, #1
 8015a62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8015a64:	4a4b      	ldr	r2, [pc, #300]	@ (8015b94 <xTaskIncrementTick+0x14c>)
 8015a66:	693b      	ldr	r3, [r7, #16]
 8015a68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8015a6a:	693b      	ldr	r3, [r7, #16]
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d121      	bne.n	8015ab4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8015a70:	4b49      	ldr	r3, [pc, #292]	@ (8015b98 <xTaskIncrementTick+0x150>)
 8015a72:	681b      	ldr	r3, [r3, #0]
 8015a74:	681b      	ldr	r3, [r3, #0]
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d00b      	beq.n	8015a92 <xTaskIncrementTick+0x4a>
	__asm volatile
 8015a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a7e:	f383 8811 	msr	BASEPRI, r3
 8015a82:	f3bf 8f6f 	isb	sy
 8015a86:	f3bf 8f4f 	dsb	sy
 8015a8a:	603b      	str	r3, [r7, #0]
}
 8015a8c:	bf00      	nop
 8015a8e:	bf00      	nop
 8015a90:	e7fd      	b.n	8015a8e <xTaskIncrementTick+0x46>
 8015a92:	4b41      	ldr	r3, [pc, #260]	@ (8015b98 <xTaskIncrementTick+0x150>)
 8015a94:	681b      	ldr	r3, [r3, #0]
 8015a96:	60fb      	str	r3, [r7, #12]
 8015a98:	4b40      	ldr	r3, [pc, #256]	@ (8015b9c <xTaskIncrementTick+0x154>)
 8015a9a:	681b      	ldr	r3, [r3, #0]
 8015a9c:	4a3e      	ldr	r2, [pc, #248]	@ (8015b98 <xTaskIncrementTick+0x150>)
 8015a9e:	6013      	str	r3, [r2, #0]
 8015aa0:	4a3e      	ldr	r2, [pc, #248]	@ (8015b9c <xTaskIncrementTick+0x154>)
 8015aa2:	68fb      	ldr	r3, [r7, #12]
 8015aa4:	6013      	str	r3, [r2, #0]
 8015aa6:	4b3e      	ldr	r3, [pc, #248]	@ (8015ba0 <xTaskIncrementTick+0x158>)
 8015aa8:	681b      	ldr	r3, [r3, #0]
 8015aaa:	3301      	adds	r3, #1
 8015aac:	4a3c      	ldr	r2, [pc, #240]	@ (8015ba0 <xTaskIncrementTick+0x158>)
 8015aae:	6013      	str	r3, [r2, #0]
 8015ab0:	f000 faa6 	bl	8016000 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8015ab4:	4b3b      	ldr	r3, [pc, #236]	@ (8015ba4 <xTaskIncrementTick+0x15c>)
 8015ab6:	681b      	ldr	r3, [r3, #0]
 8015ab8:	693a      	ldr	r2, [r7, #16]
 8015aba:	429a      	cmp	r2, r3
 8015abc:	d348      	bcc.n	8015b50 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015abe:	4b36      	ldr	r3, [pc, #216]	@ (8015b98 <xTaskIncrementTick+0x150>)
 8015ac0:	681b      	ldr	r3, [r3, #0]
 8015ac2:	681b      	ldr	r3, [r3, #0]
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	d104      	bne.n	8015ad2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015ac8:	4b36      	ldr	r3, [pc, #216]	@ (8015ba4 <xTaskIncrementTick+0x15c>)
 8015aca:	f04f 32ff 	mov.w	r2, #4294967295
 8015ace:	601a      	str	r2, [r3, #0]
					break;
 8015ad0:	e03e      	b.n	8015b50 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015ad2:	4b31      	ldr	r3, [pc, #196]	@ (8015b98 <xTaskIncrementTick+0x150>)
 8015ad4:	681b      	ldr	r3, [r3, #0]
 8015ad6:	68db      	ldr	r3, [r3, #12]
 8015ad8:	68db      	ldr	r3, [r3, #12]
 8015ada:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015adc:	68bb      	ldr	r3, [r7, #8]
 8015ade:	685b      	ldr	r3, [r3, #4]
 8015ae0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8015ae2:	693a      	ldr	r2, [r7, #16]
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	429a      	cmp	r2, r3
 8015ae8:	d203      	bcs.n	8015af2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015aea:	4a2e      	ldr	r2, [pc, #184]	@ (8015ba4 <xTaskIncrementTick+0x15c>)
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8015af0:	e02e      	b.n	8015b50 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015af2:	68bb      	ldr	r3, [r7, #8]
 8015af4:	3304      	adds	r3, #4
 8015af6:	4618      	mov	r0, r3
 8015af8:	f7ff f854 	bl	8014ba4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015afc:	68bb      	ldr	r3, [r7, #8]
 8015afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d004      	beq.n	8015b0e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015b04:	68bb      	ldr	r3, [r7, #8]
 8015b06:	3318      	adds	r3, #24
 8015b08:	4618      	mov	r0, r3
 8015b0a:	f7ff f84b 	bl	8014ba4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8015b0e:	68bb      	ldr	r3, [r7, #8]
 8015b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015b12:	2201      	movs	r2, #1
 8015b14:	409a      	lsls	r2, r3
 8015b16:	4b24      	ldr	r3, [pc, #144]	@ (8015ba8 <xTaskIncrementTick+0x160>)
 8015b18:	681b      	ldr	r3, [r3, #0]
 8015b1a:	4313      	orrs	r3, r2
 8015b1c:	4a22      	ldr	r2, [pc, #136]	@ (8015ba8 <xTaskIncrementTick+0x160>)
 8015b1e:	6013      	str	r3, [r2, #0]
 8015b20:	68bb      	ldr	r3, [r7, #8]
 8015b22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015b24:	4613      	mov	r3, r2
 8015b26:	009b      	lsls	r3, r3, #2
 8015b28:	4413      	add	r3, r2
 8015b2a:	009b      	lsls	r3, r3, #2
 8015b2c:	4a1f      	ldr	r2, [pc, #124]	@ (8015bac <xTaskIncrementTick+0x164>)
 8015b2e:	441a      	add	r2, r3
 8015b30:	68bb      	ldr	r3, [r7, #8]
 8015b32:	3304      	adds	r3, #4
 8015b34:	4619      	mov	r1, r3
 8015b36:	4610      	mov	r0, r2
 8015b38:	f7fe ffd7 	bl	8014aea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015b3c:	68bb      	ldr	r3, [r7, #8]
 8015b3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015b40:	4b1b      	ldr	r3, [pc, #108]	@ (8015bb0 <xTaskIncrementTick+0x168>)
 8015b42:	681b      	ldr	r3, [r3, #0]
 8015b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015b46:	429a      	cmp	r2, r3
 8015b48:	d3b9      	bcc.n	8015abe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8015b4a:	2301      	movs	r3, #1
 8015b4c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015b4e:	e7b6      	b.n	8015abe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8015b50:	4b17      	ldr	r3, [pc, #92]	@ (8015bb0 <xTaskIncrementTick+0x168>)
 8015b52:	681b      	ldr	r3, [r3, #0]
 8015b54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015b56:	4915      	ldr	r1, [pc, #84]	@ (8015bac <xTaskIncrementTick+0x164>)
 8015b58:	4613      	mov	r3, r2
 8015b5a:	009b      	lsls	r3, r3, #2
 8015b5c:	4413      	add	r3, r2
 8015b5e:	009b      	lsls	r3, r3, #2
 8015b60:	440b      	add	r3, r1
 8015b62:	681b      	ldr	r3, [r3, #0]
 8015b64:	2b01      	cmp	r3, #1
 8015b66:	d901      	bls.n	8015b6c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8015b68:	2301      	movs	r3, #1
 8015b6a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8015b6c:	4b11      	ldr	r3, [pc, #68]	@ (8015bb4 <xTaskIncrementTick+0x16c>)
 8015b6e:	681b      	ldr	r3, [r3, #0]
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	d007      	beq.n	8015b84 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8015b74:	2301      	movs	r3, #1
 8015b76:	617b      	str	r3, [r7, #20]
 8015b78:	e004      	b.n	8015b84 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8015b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8015bb8 <xTaskIncrementTick+0x170>)
 8015b7c:	681b      	ldr	r3, [r3, #0]
 8015b7e:	3301      	adds	r3, #1
 8015b80:	4a0d      	ldr	r2, [pc, #52]	@ (8015bb8 <xTaskIncrementTick+0x170>)
 8015b82:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8015b84:	697b      	ldr	r3, [r7, #20]
}
 8015b86:	4618      	mov	r0, r3
 8015b88:	3718      	adds	r7, #24
 8015b8a:	46bd      	mov	sp, r7
 8015b8c:	bd80      	pop	{r7, pc}
 8015b8e:	bf00      	nop
 8015b90:	24002be0 	.word	0x24002be0
 8015b94:	24002bbc 	.word	0x24002bbc
 8015b98:	24002b70 	.word	0x24002b70
 8015b9c:	24002b74 	.word	0x24002b74
 8015ba0:	24002bd0 	.word	0x24002bd0
 8015ba4:	24002bd8 	.word	0x24002bd8
 8015ba8:	24002bc0 	.word	0x24002bc0
 8015bac:	24002abc 	.word	0x24002abc
 8015bb0:	24002ab8 	.word	0x24002ab8
 8015bb4:	24002bcc 	.word	0x24002bcc
 8015bb8:	24002bc8 	.word	0x24002bc8

08015bbc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015bbc:	b480      	push	{r7}
 8015bbe:	b087      	sub	sp, #28
 8015bc0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8015bc2:	4b27      	ldr	r3, [pc, #156]	@ (8015c60 <vTaskSwitchContext+0xa4>)
 8015bc4:	681b      	ldr	r3, [r3, #0]
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d003      	beq.n	8015bd2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8015bca:	4b26      	ldr	r3, [pc, #152]	@ (8015c64 <vTaskSwitchContext+0xa8>)
 8015bcc:	2201      	movs	r2, #1
 8015bce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015bd0:	e040      	b.n	8015c54 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8015bd2:	4b24      	ldr	r3, [pc, #144]	@ (8015c64 <vTaskSwitchContext+0xa8>)
 8015bd4:	2200      	movs	r2, #0
 8015bd6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015bd8:	4b23      	ldr	r3, [pc, #140]	@ (8015c68 <vTaskSwitchContext+0xac>)
 8015bda:	681b      	ldr	r3, [r3, #0]
 8015bdc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8015bde:	68fb      	ldr	r3, [r7, #12]
 8015be0:	fab3 f383 	clz	r3, r3
 8015be4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8015be6:	7afb      	ldrb	r3, [r7, #11]
 8015be8:	f1c3 031f 	rsb	r3, r3, #31
 8015bec:	617b      	str	r3, [r7, #20]
 8015bee:	491f      	ldr	r1, [pc, #124]	@ (8015c6c <vTaskSwitchContext+0xb0>)
 8015bf0:	697a      	ldr	r2, [r7, #20]
 8015bf2:	4613      	mov	r3, r2
 8015bf4:	009b      	lsls	r3, r3, #2
 8015bf6:	4413      	add	r3, r2
 8015bf8:	009b      	lsls	r3, r3, #2
 8015bfa:	440b      	add	r3, r1
 8015bfc:	681b      	ldr	r3, [r3, #0]
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d10b      	bne.n	8015c1a <vTaskSwitchContext+0x5e>
	__asm volatile
 8015c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015c06:	f383 8811 	msr	BASEPRI, r3
 8015c0a:	f3bf 8f6f 	isb	sy
 8015c0e:	f3bf 8f4f 	dsb	sy
 8015c12:	607b      	str	r3, [r7, #4]
}
 8015c14:	bf00      	nop
 8015c16:	bf00      	nop
 8015c18:	e7fd      	b.n	8015c16 <vTaskSwitchContext+0x5a>
 8015c1a:	697a      	ldr	r2, [r7, #20]
 8015c1c:	4613      	mov	r3, r2
 8015c1e:	009b      	lsls	r3, r3, #2
 8015c20:	4413      	add	r3, r2
 8015c22:	009b      	lsls	r3, r3, #2
 8015c24:	4a11      	ldr	r2, [pc, #68]	@ (8015c6c <vTaskSwitchContext+0xb0>)
 8015c26:	4413      	add	r3, r2
 8015c28:	613b      	str	r3, [r7, #16]
 8015c2a:	693b      	ldr	r3, [r7, #16]
 8015c2c:	685b      	ldr	r3, [r3, #4]
 8015c2e:	685a      	ldr	r2, [r3, #4]
 8015c30:	693b      	ldr	r3, [r7, #16]
 8015c32:	605a      	str	r2, [r3, #4]
 8015c34:	693b      	ldr	r3, [r7, #16]
 8015c36:	685a      	ldr	r2, [r3, #4]
 8015c38:	693b      	ldr	r3, [r7, #16]
 8015c3a:	3308      	adds	r3, #8
 8015c3c:	429a      	cmp	r2, r3
 8015c3e:	d104      	bne.n	8015c4a <vTaskSwitchContext+0x8e>
 8015c40:	693b      	ldr	r3, [r7, #16]
 8015c42:	685b      	ldr	r3, [r3, #4]
 8015c44:	685a      	ldr	r2, [r3, #4]
 8015c46:	693b      	ldr	r3, [r7, #16]
 8015c48:	605a      	str	r2, [r3, #4]
 8015c4a:	693b      	ldr	r3, [r7, #16]
 8015c4c:	685b      	ldr	r3, [r3, #4]
 8015c4e:	68db      	ldr	r3, [r3, #12]
 8015c50:	4a07      	ldr	r2, [pc, #28]	@ (8015c70 <vTaskSwitchContext+0xb4>)
 8015c52:	6013      	str	r3, [r2, #0]
}
 8015c54:	bf00      	nop
 8015c56:	371c      	adds	r7, #28
 8015c58:	46bd      	mov	sp, r7
 8015c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c5e:	4770      	bx	lr
 8015c60:	24002be0 	.word	0x24002be0
 8015c64:	24002bcc 	.word	0x24002bcc
 8015c68:	24002bc0 	.word	0x24002bc0
 8015c6c:	24002abc 	.word	0x24002abc
 8015c70:	24002ab8 	.word	0x24002ab8

08015c74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8015c74:	b580      	push	{r7, lr}
 8015c76:	b084      	sub	sp, #16
 8015c78:	af00      	add	r7, sp, #0
 8015c7a:	6078      	str	r0, [r7, #4]
 8015c7c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d10b      	bne.n	8015c9c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8015c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015c88:	f383 8811 	msr	BASEPRI, r3
 8015c8c:	f3bf 8f6f 	isb	sy
 8015c90:	f3bf 8f4f 	dsb	sy
 8015c94:	60fb      	str	r3, [r7, #12]
}
 8015c96:	bf00      	nop
 8015c98:	bf00      	nop
 8015c9a:	e7fd      	b.n	8015c98 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015c9c:	4b07      	ldr	r3, [pc, #28]	@ (8015cbc <vTaskPlaceOnEventList+0x48>)
 8015c9e:	681b      	ldr	r3, [r3, #0]
 8015ca0:	3318      	adds	r3, #24
 8015ca2:	4619      	mov	r1, r3
 8015ca4:	6878      	ldr	r0, [r7, #4]
 8015ca6:	f7fe ff44 	bl	8014b32 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015caa:	2101      	movs	r1, #1
 8015cac:	6838      	ldr	r0, [r7, #0]
 8015cae:	f000 fb87 	bl	80163c0 <prvAddCurrentTaskToDelayedList>
}
 8015cb2:	bf00      	nop
 8015cb4:	3710      	adds	r7, #16
 8015cb6:	46bd      	mov	sp, r7
 8015cb8:	bd80      	pop	{r7, pc}
 8015cba:	bf00      	nop
 8015cbc:	24002ab8 	.word	0x24002ab8

08015cc0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015cc0:	b580      	push	{r7, lr}
 8015cc2:	b086      	sub	sp, #24
 8015cc4:	af00      	add	r7, sp, #0
 8015cc6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	68db      	ldr	r3, [r3, #12]
 8015ccc:	68db      	ldr	r3, [r3, #12]
 8015cce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015cd0:	693b      	ldr	r3, [r7, #16]
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d10b      	bne.n	8015cee <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8015cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015cda:	f383 8811 	msr	BASEPRI, r3
 8015cde:	f3bf 8f6f 	isb	sy
 8015ce2:	f3bf 8f4f 	dsb	sy
 8015ce6:	60fb      	str	r3, [r7, #12]
}
 8015ce8:	bf00      	nop
 8015cea:	bf00      	nop
 8015cec:	e7fd      	b.n	8015cea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015cee:	693b      	ldr	r3, [r7, #16]
 8015cf0:	3318      	adds	r3, #24
 8015cf2:	4618      	mov	r0, r3
 8015cf4:	f7fe ff56 	bl	8014ba4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015cf8:	4b1d      	ldr	r3, [pc, #116]	@ (8015d70 <xTaskRemoveFromEventList+0xb0>)
 8015cfa:	681b      	ldr	r3, [r3, #0]
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d11c      	bne.n	8015d3a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015d00:	693b      	ldr	r3, [r7, #16]
 8015d02:	3304      	adds	r3, #4
 8015d04:	4618      	mov	r0, r3
 8015d06:	f7fe ff4d 	bl	8014ba4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015d0a:	693b      	ldr	r3, [r7, #16]
 8015d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015d0e:	2201      	movs	r2, #1
 8015d10:	409a      	lsls	r2, r3
 8015d12:	4b18      	ldr	r3, [pc, #96]	@ (8015d74 <xTaskRemoveFromEventList+0xb4>)
 8015d14:	681b      	ldr	r3, [r3, #0]
 8015d16:	4313      	orrs	r3, r2
 8015d18:	4a16      	ldr	r2, [pc, #88]	@ (8015d74 <xTaskRemoveFromEventList+0xb4>)
 8015d1a:	6013      	str	r3, [r2, #0]
 8015d1c:	693b      	ldr	r3, [r7, #16]
 8015d1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015d20:	4613      	mov	r3, r2
 8015d22:	009b      	lsls	r3, r3, #2
 8015d24:	4413      	add	r3, r2
 8015d26:	009b      	lsls	r3, r3, #2
 8015d28:	4a13      	ldr	r2, [pc, #76]	@ (8015d78 <xTaskRemoveFromEventList+0xb8>)
 8015d2a:	441a      	add	r2, r3
 8015d2c:	693b      	ldr	r3, [r7, #16]
 8015d2e:	3304      	adds	r3, #4
 8015d30:	4619      	mov	r1, r3
 8015d32:	4610      	mov	r0, r2
 8015d34:	f7fe fed9 	bl	8014aea <vListInsertEnd>
 8015d38:	e005      	b.n	8015d46 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8015d3a:	693b      	ldr	r3, [r7, #16]
 8015d3c:	3318      	adds	r3, #24
 8015d3e:	4619      	mov	r1, r3
 8015d40:	480e      	ldr	r0, [pc, #56]	@ (8015d7c <xTaskRemoveFromEventList+0xbc>)
 8015d42:	f7fe fed2 	bl	8014aea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015d46:	693b      	ldr	r3, [r7, #16]
 8015d48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8015d80 <xTaskRemoveFromEventList+0xc0>)
 8015d4c:	681b      	ldr	r3, [r3, #0]
 8015d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015d50:	429a      	cmp	r2, r3
 8015d52:	d905      	bls.n	8015d60 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8015d54:	2301      	movs	r3, #1
 8015d56:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8015d58:	4b0a      	ldr	r3, [pc, #40]	@ (8015d84 <xTaskRemoveFromEventList+0xc4>)
 8015d5a:	2201      	movs	r2, #1
 8015d5c:	601a      	str	r2, [r3, #0]
 8015d5e:	e001      	b.n	8015d64 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8015d60:	2300      	movs	r3, #0
 8015d62:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8015d64:	697b      	ldr	r3, [r7, #20]
}
 8015d66:	4618      	mov	r0, r3
 8015d68:	3718      	adds	r7, #24
 8015d6a:	46bd      	mov	sp, r7
 8015d6c:	bd80      	pop	{r7, pc}
 8015d6e:	bf00      	nop
 8015d70:	24002be0 	.word	0x24002be0
 8015d74:	24002bc0 	.word	0x24002bc0
 8015d78:	24002abc 	.word	0x24002abc
 8015d7c:	24002b78 	.word	0x24002b78
 8015d80:	24002ab8 	.word	0x24002ab8
 8015d84:	24002bcc 	.word	0x24002bcc

08015d88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015d88:	b480      	push	{r7}
 8015d8a:	b083      	sub	sp, #12
 8015d8c:	af00      	add	r7, sp, #0
 8015d8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015d90:	4b06      	ldr	r3, [pc, #24]	@ (8015dac <vTaskInternalSetTimeOutState+0x24>)
 8015d92:	681a      	ldr	r2, [r3, #0]
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015d98:	4b05      	ldr	r3, [pc, #20]	@ (8015db0 <vTaskInternalSetTimeOutState+0x28>)
 8015d9a:	681a      	ldr	r2, [r3, #0]
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	605a      	str	r2, [r3, #4]
}
 8015da0:	bf00      	nop
 8015da2:	370c      	adds	r7, #12
 8015da4:	46bd      	mov	sp, r7
 8015da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015daa:	4770      	bx	lr
 8015dac:	24002bd0 	.word	0x24002bd0
 8015db0:	24002bbc 	.word	0x24002bbc

08015db4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8015db4:	b580      	push	{r7, lr}
 8015db6:	b088      	sub	sp, #32
 8015db8:	af00      	add	r7, sp, #0
 8015dba:	6078      	str	r0, [r7, #4]
 8015dbc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d10b      	bne.n	8015ddc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8015dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015dc8:	f383 8811 	msr	BASEPRI, r3
 8015dcc:	f3bf 8f6f 	isb	sy
 8015dd0:	f3bf 8f4f 	dsb	sy
 8015dd4:	613b      	str	r3, [r7, #16]
}
 8015dd6:	bf00      	nop
 8015dd8:	bf00      	nop
 8015dda:	e7fd      	b.n	8015dd8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8015ddc:	683b      	ldr	r3, [r7, #0]
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d10b      	bne.n	8015dfa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8015de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015de6:	f383 8811 	msr	BASEPRI, r3
 8015dea:	f3bf 8f6f 	isb	sy
 8015dee:	f3bf 8f4f 	dsb	sy
 8015df2:	60fb      	str	r3, [r7, #12]
}
 8015df4:	bf00      	nop
 8015df6:	bf00      	nop
 8015df8:	e7fd      	b.n	8015df6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8015dfa:	f000 fc75 	bl	80166e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8015dfe:	4b1d      	ldr	r3, [pc, #116]	@ (8015e74 <xTaskCheckForTimeOut+0xc0>)
 8015e00:	681b      	ldr	r3, [r3, #0]
 8015e02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	685b      	ldr	r3, [r3, #4]
 8015e08:	69ba      	ldr	r2, [r7, #24]
 8015e0a:	1ad3      	subs	r3, r2, r3
 8015e0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8015e0e:	683b      	ldr	r3, [r7, #0]
 8015e10:	681b      	ldr	r3, [r3, #0]
 8015e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e16:	d102      	bne.n	8015e1e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015e18:	2300      	movs	r3, #0
 8015e1a:	61fb      	str	r3, [r7, #28]
 8015e1c:	e023      	b.n	8015e66 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	681a      	ldr	r2, [r3, #0]
 8015e22:	4b15      	ldr	r3, [pc, #84]	@ (8015e78 <xTaskCheckForTimeOut+0xc4>)
 8015e24:	681b      	ldr	r3, [r3, #0]
 8015e26:	429a      	cmp	r2, r3
 8015e28:	d007      	beq.n	8015e3a <xTaskCheckForTimeOut+0x86>
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	685b      	ldr	r3, [r3, #4]
 8015e2e:	69ba      	ldr	r2, [r7, #24]
 8015e30:	429a      	cmp	r2, r3
 8015e32:	d302      	bcc.n	8015e3a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8015e34:	2301      	movs	r3, #1
 8015e36:	61fb      	str	r3, [r7, #28]
 8015e38:	e015      	b.n	8015e66 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8015e3a:	683b      	ldr	r3, [r7, #0]
 8015e3c:	681b      	ldr	r3, [r3, #0]
 8015e3e:	697a      	ldr	r2, [r7, #20]
 8015e40:	429a      	cmp	r2, r3
 8015e42:	d20b      	bcs.n	8015e5c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8015e44:	683b      	ldr	r3, [r7, #0]
 8015e46:	681a      	ldr	r2, [r3, #0]
 8015e48:	697b      	ldr	r3, [r7, #20]
 8015e4a:	1ad2      	subs	r2, r2, r3
 8015e4c:	683b      	ldr	r3, [r7, #0]
 8015e4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015e50:	6878      	ldr	r0, [r7, #4]
 8015e52:	f7ff ff99 	bl	8015d88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8015e56:	2300      	movs	r3, #0
 8015e58:	61fb      	str	r3, [r7, #28]
 8015e5a:	e004      	b.n	8015e66 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8015e5c:	683b      	ldr	r3, [r7, #0]
 8015e5e:	2200      	movs	r2, #0
 8015e60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8015e62:	2301      	movs	r3, #1
 8015e64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8015e66:	f000 fc71 	bl	801674c <vPortExitCritical>

	return xReturn;
 8015e6a:	69fb      	ldr	r3, [r7, #28]
}
 8015e6c:	4618      	mov	r0, r3
 8015e6e:	3720      	adds	r7, #32
 8015e70:	46bd      	mov	sp, r7
 8015e72:	bd80      	pop	{r7, pc}
 8015e74:	24002bbc 	.word	0x24002bbc
 8015e78:	24002bd0 	.word	0x24002bd0

08015e7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8015e7c:	b480      	push	{r7}
 8015e7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015e80:	4b03      	ldr	r3, [pc, #12]	@ (8015e90 <vTaskMissedYield+0x14>)
 8015e82:	2201      	movs	r2, #1
 8015e84:	601a      	str	r2, [r3, #0]
}
 8015e86:	bf00      	nop
 8015e88:	46bd      	mov	sp, r7
 8015e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e8e:	4770      	bx	lr
 8015e90:	24002bcc 	.word	0x24002bcc

08015e94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8015e94:	b580      	push	{r7, lr}
 8015e96:	b082      	sub	sp, #8
 8015e98:	af00      	add	r7, sp, #0
 8015e9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8015e9c:	f000 f852 	bl	8015f44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015ea0:	4b06      	ldr	r3, [pc, #24]	@ (8015ebc <prvIdleTask+0x28>)
 8015ea2:	681b      	ldr	r3, [r3, #0]
 8015ea4:	2b01      	cmp	r3, #1
 8015ea6:	d9f9      	bls.n	8015e9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8015ea8:	4b05      	ldr	r3, [pc, #20]	@ (8015ec0 <prvIdleTask+0x2c>)
 8015eaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015eae:	601a      	str	r2, [r3, #0]
 8015eb0:	f3bf 8f4f 	dsb	sy
 8015eb4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8015eb8:	e7f0      	b.n	8015e9c <prvIdleTask+0x8>
 8015eba:	bf00      	nop
 8015ebc:	24002abc 	.word	0x24002abc
 8015ec0:	e000ed04 	.word	0xe000ed04

08015ec4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8015ec4:	b580      	push	{r7, lr}
 8015ec6:	b082      	sub	sp, #8
 8015ec8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015eca:	2300      	movs	r3, #0
 8015ecc:	607b      	str	r3, [r7, #4]
 8015ece:	e00c      	b.n	8015eea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015ed0:	687a      	ldr	r2, [r7, #4]
 8015ed2:	4613      	mov	r3, r2
 8015ed4:	009b      	lsls	r3, r3, #2
 8015ed6:	4413      	add	r3, r2
 8015ed8:	009b      	lsls	r3, r3, #2
 8015eda:	4a12      	ldr	r2, [pc, #72]	@ (8015f24 <prvInitialiseTaskLists+0x60>)
 8015edc:	4413      	add	r3, r2
 8015ede:	4618      	mov	r0, r3
 8015ee0:	f7fe fdd6 	bl	8014a90 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	3301      	adds	r3, #1
 8015ee8:	607b      	str	r3, [r7, #4]
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	2b06      	cmp	r3, #6
 8015eee:	d9ef      	bls.n	8015ed0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015ef0:	480d      	ldr	r0, [pc, #52]	@ (8015f28 <prvInitialiseTaskLists+0x64>)
 8015ef2:	f7fe fdcd 	bl	8014a90 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8015ef6:	480d      	ldr	r0, [pc, #52]	@ (8015f2c <prvInitialiseTaskLists+0x68>)
 8015ef8:	f7fe fdca 	bl	8014a90 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015efc:	480c      	ldr	r0, [pc, #48]	@ (8015f30 <prvInitialiseTaskLists+0x6c>)
 8015efe:	f7fe fdc7 	bl	8014a90 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8015f02:	480c      	ldr	r0, [pc, #48]	@ (8015f34 <prvInitialiseTaskLists+0x70>)
 8015f04:	f7fe fdc4 	bl	8014a90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015f08:	480b      	ldr	r0, [pc, #44]	@ (8015f38 <prvInitialiseTaskLists+0x74>)
 8015f0a:	f7fe fdc1 	bl	8014a90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8015f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8015f3c <prvInitialiseTaskLists+0x78>)
 8015f10:	4a05      	ldr	r2, [pc, #20]	@ (8015f28 <prvInitialiseTaskLists+0x64>)
 8015f12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015f14:	4b0a      	ldr	r3, [pc, #40]	@ (8015f40 <prvInitialiseTaskLists+0x7c>)
 8015f16:	4a05      	ldr	r2, [pc, #20]	@ (8015f2c <prvInitialiseTaskLists+0x68>)
 8015f18:	601a      	str	r2, [r3, #0]
}
 8015f1a:	bf00      	nop
 8015f1c:	3708      	adds	r7, #8
 8015f1e:	46bd      	mov	sp, r7
 8015f20:	bd80      	pop	{r7, pc}
 8015f22:	bf00      	nop
 8015f24:	24002abc 	.word	0x24002abc
 8015f28:	24002b48 	.word	0x24002b48
 8015f2c:	24002b5c 	.word	0x24002b5c
 8015f30:	24002b78 	.word	0x24002b78
 8015f34:	24002b8c 	.word	0x24002b8c
 8015f38:	24002ba4 	.word	0x24002ba4
 8015f3c:	24002b70 	.word	0x24002b70
 8015f40:	24002b74 	.word	0x24002b74

08015f44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015f44:	b580      	push	{r7, lr}
 8015f46:	b082      	sub	sp, #8
 8015f48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015f4a:	e019      	b.n	8015f80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015f4c:	f000 fbcc 	bl	80166e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015f50:	4b10      	ldr	r3, [pc, #64]	@ (8015f94 <prvCheckTasksWaitingTermination+0x50>)
 8015f52:	68db      	ldr	r3, [r3, #12]
 8015f54:	68db      	ldr	r3, [r3, #12]
 8015f56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	3304      	adds	r3, #4
 8015f5c:	4618      	mov	r0, r3
 8015f5e:	f7fe fe21 	bl	8014ba4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8015f62:	4b0d      	ldr	r3, [pc, #52]	@ (8015f98 <prvCheckTasksWaitingTermination+0x54>)
 8015f64:	681b      	ldr	r3, [r3, #0]
 8015f66:	3b01      	subs	r3, #1
 8015f68:	4a0b      	ldr	r2, [pc, #44]	@ (8015f98 <prvCheckTasksWaitingTermination+0x54>)
 8015f6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8015f9c <prvCheckTasksWaitingTermination+0x58>)
 8015f6e:	681b      	ldr	r3, [r3, #0]
 8015f70:	3b01      	subs	r3, #1
 8015f72:	4a0a      	ldr	r2, [pc, #40]	@ (8015f9c <prvCheckTasksWaitingTermination+0x58>)
 8015f74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8015f76:	f000 fbe9 	bl	801674c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8015f7a:	6878      	ldr	r0, [r7, #4]
 8015f7c:	f000 f810 	bl	8015fa0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015f80:	4b06      	ldr	r3, [pc, #24]	@ (8015f9c <prvCheckTasksWaitingTermination+0x58>)
 8015f82:	681b      	ldr	r3, [r3, #0]
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d1e1      	bne.n	8015f4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8015f88:	bf00      	nop
 8015f8a:	bf00      	nop
 8015f8c:	3708      	adds	r7, #8
 8015f8e:	46bd      	mov	sp, r7
 8015f90:	bd80      	pop	{r7, pc}
 8015f92:	bf00      	nop
 8015f94:	24002b8c 	.word	0x24002b8c
 8015f98:	24002bb8 	.word	0x24002bb8
 8015f9c:	24002ba0 	.word	0x24002ba0

08015fa0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015fa0:	b580      	push	{r7, lr}
 8015fa2:	b084      	sub	sp, #16
 8015fa4:	af00      	add	r7, sp, #0
 8015fa6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d108      	bne.n	8015fc4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015fb6:	4618      	mov	r0, r3
 8015fb8:	f000 fd86 	bl	8016ac8 <vPortFree>
				vPortFree( pxTCB );
 8015fbc:	6878      	ldr	r0, [r7, #4]
 8015fbe:	f000 fd83 	bl	8016ac8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8015fc2:	e019      	b.n	8015ff8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8015fca:	2b01      	cmp	r3, #1
 8015fcc:	d103      	bne.n	8015fd6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8015fce:	6878      	ldr	r0, [r7, #4]
 8015fd0:	f000 fd7a 	bl	8016ac8 <vPortFree>
	}
 8015fd4:	e010      	b.n	8015ff8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8015fdc:	2b02      	cmp	r3, #2
 8015fde:	d00b      	beq.n	8015ff8 <prvDeleteTCB+0x58>
	__asm volatile
 8015fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015fe4:	f383 8811 	msr	BASEPRI, r3
 8015fe8:	f3bf 8f6f 	isb	sy
 8015fec:	f3bf 8f4f 	dsb	sy
 8015ff0:	60fb      	str	r3, [r7, #12]
}
 8015ff2:	bf00      	nop
 8015ff4:	bf00      	nop
 8015ff6:	e7fd      	b.n	8015ff4 <prvDeleteTCB+0x54>
	}
 8015ff8:	bf00      	nop
 8015ffa:	3710      	adds	r7, #16
 8015ffc:	46bd      	mov	sp, r7
 8015ffe:	bd80      	pop	{r7, pc}

08016000 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016000:	b480      	push	{r7}
 8016002:	b083      	sub	sp, #12
 8016004:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016006:	4b0c      	ldr	r3, [pc, #48]	@ (8016038 <prvResetNextTaskUnblockTime+0x38>)
 8016008:	681b      	ldr	r3, [r3, #0]
 801600a:	681b      	ldr	r3, [r3, #0]
 801600c:	2b00      	cmp	r3, #0
 801600e:	d104      	bne.n	801601a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8016010:	4b0a      	ldr	r3, [pc, #40]	@ (801603c <prvResetNextTaskUnblockTime+0x3c>)
 8016012:	f04f 32ff 	mov.w	r2, #4294967295
 8016016:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8016018:	e008      	b.n	801602c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801601a:	4b07      	ldr	r3, [pc, #28]	@ (8016038 <prvResetNextTaskUnblockTime+0x38>)
 801601c:	681b      	ldr	r3, [r3, #0]
 801601e:	68db      	ldr	r3, [r3, #12]
 8016020:	68db      	ldr	r3, [r3, #12]
 8016022:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	685b      	ldr	r3, [r3, #4]
 8016028:	4a04      	ldr	r2, [pc, #16]	@ (801603c <prvResetNextTaskUnblockTime+0x3c>)
 801602a:	6013      	str	r3, [r2, #0]
}
 801602c:	bf00      	nop
 801602e:	370c      	adds	r7, #12
 8016030:	46bd      	mov	sp, r7
 8016032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016036:	4770      	bx	lr
 8016038:	24002b70 	.word	0x24002b70
 801603c:	24002bd8 	.word	0x24002bd8

08016040 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8016040:	b480      	push	{r7}
 8016042:	b083      	sub	sp, #12
 8016044:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8016046:	4b0b      	ldr	r3, [pc, #44]	@ (8016074 <xTaskGetSchedulerState+0x34>)
 8016048:	681b      	ldr	r3, [r3, #0]
 801604a:	2b00      	cmp	r3, #0
 801604c:	d102      	bne.n	8016054 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801604e:	2301      	movs	r3, #1
 8016050:	607b      	str	r3, [r7, #4]
 8016052:	e008      	b.n	8016066 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016054:	4b08      	ldr	r3, [pc, #32]	@ (8016078 <xTaskGetSchedulerState+0x38>)
 8016056:	681b      	ldr	r3, [r3, #0]
 8016058:	2b00      	cmp	r3, #0
 801605a:	d102      	bne.n	8016062 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801605c:	2302      	movs	r3, #2
 801605e:	607b      	str	r3, [r7, #4]
 8016060:	e001      	b.n	8016066 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8016062:	2300      	movs	r3, #0
 8016064:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8016066:	687b      	ldr	r3, [r7, #4]
	}
 8016068:	4618      	mov	r0, r3
 801606a:	370c      	adds	r7, #12
 801606c:	46bd      	mov	sp, r7
 801606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016072:	4770      	bx	lr
 8016074:	24002bc4 	.word	0x24002bc4
 8016078:	24002be0 	.word	0x24002be0

0801607c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801607c:	b580      	push	{r7, lr}
 801607e:	b084      	sub	sp, #16
 8016080:	af00      	add	r7, sp, #0
 8016082:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8016088:	2300      	movs	r3, #0
 801608a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	2b00      	cmp	r3, #0
 8016090:	d05e      	beq.n	8016150 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8016092:	68bb      	ldr	r3, [r7, #8]
 8016094:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016096:	4b31      	ldr	r3, [pc, #196]	@ (801615c <xTaskPriorityInherit+0xe0>)
 8016098:	681b      	ldr	r3, [r3, #0]
 801609a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801609c:	429a      	cmp	r2, r3
 801609e:	d24e      	bcs.n	801613e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80160a0:	68bb      	ldr	r3, [r7, #8]
 80160a2:	699b      	ldr	r3, [r3, #24]
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	db06      	blt.n	80160b6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80160a8:	4b2c      	ldr	r3, [pc, #176]	@ (801615c <xTaskPriorityInherit+0xe0>)
 80160aa:	681b      	ldr	r3, [r3, #0]
 80160ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80160ae:	f1c3 0207 	rsb	r2, r3, #7
 80160b2:	68bb      	ldr	r3, [r7, #8]
 80160b4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80160b6:	68bb      	ldr	r3, [r7, #8]
 80160b8:	6959      	ldr	r1, [r3, #20]
 80160ba:	68bb      	ldr	r3, [r7, #8]
 80160bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80160be:	4613      	mov	r3, r2
 80160c0:	009b      	lsls	r3, r3, #2
 80160c2:	4413      	add	r3, r2
 80160c4:	009b      	lsls	r3, r3, #2
 80160c6:	4a26      	ldr	r2, [pc, #152]	@ (8016160 <xTaskPriorityInherit+0xe4>)
 80160c8:	4413      	add	r3, r2
 80160ca:	4299      	cmp	r1, r3
 80160cc:	d12f      	bne.n	801612e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80160ce:	68bb      	ldr	r3, [r7, #8]
 80160d0:	3304      	adds	r3, #4
 80160d2:	4618      	mov	r0, r3
 80160d4:	f7fe fd66 	bl	8014ba4 <uxListRemove>
 80160d8:	4603      	mov	r3, r0
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d10a      	bne.n	80160f4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80160de:	68bb      	ldr	r3, [r7, #8]
 80160e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80160e2:	2201      	movs	r2, #1
 80160e4:	fa02 f303 	lsl.w	r3, r2, r3
 80160e8:	43da      	mvns	r2, r3
 80160ea:	4b1e      	ldr	r3, [pc, #120]	@ (8016164 <xTaskPriorityInherit+0xe8>)
 80160ec:	681b      	ldr	r3, [r3, #0]
 80160ee:	4013      	ands	r3, r2
 80160f0:	4a1c      	ldr	r2, [pc, #112]	@ (8016164 <xTaskPriorityInherit+0xe8>)
 80160f2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80160f4:	4b19      	ldr	r3, [pc, #100]	@ (801615c <xTaskPriorityInherit+0xe0>)
 80160f6:	681b      	ldr	r3, [r3, #0]
 80160f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80160fa:	68bb      	ldr	r3, [r7, #8]
 80160fc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80160fe:	68bb      	ldr	r3, [r7, #8]
 8016100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016102:	2201      	movs	r2, #1
 8016104:	409a      	lsls	r2, r3
 8016106:	4b17      	ldr	r3, [pc, #92]	@ (8016164 <xTaskPriorityInherit+0xe8>)
 8016108:	681b      	ldr	r3, [r3, #0]
 801610a:	4313      	orrs	r3, r2
 801610c:	4a15      	ldr	r2, [pc, #84]	@ (8016164 <xTaskPriorityInherit+0xe8>)
 801610e:	6013      	str	r3, [r2, #0]
 8016110:	68bb      	ldr	r3, [r7, #8]
 8016112:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016114:	4613      	mov	r3, r2
 8016116:	009b      	lsls	r3, r3, #2
 8016118:	4413      	add	r3, r2
 801611a:	009b      	lsls	r3, r3, #2
 801611c:	4a10      	ldr	r2, [pc, #64]	@ (8016160 <xTaskPriorityInherit+0xe4>)
 801611e:	441a      	add	r2, r3
 8016120:	68bb      	ldr	r3, [r7, #8]
 8016122:	3304      	adds	r3, #4
 8016124:	4619      	mov	r1, r3
 8016126:	4610      	mov	r0, r2
 8016128:	f7fe fcdf 	bl	8014aea <vListInsertEnd>
 801612c:	e004      	b.n	8016138 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801612e:	4b0b      	ldr	r3, [pc, #44]	@ (801615c <xTaskPriorityInherit+0xe0>)
 8016130:	681b      	ldr	r3, [r3, #0]
 8016132:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016134:	68bb      	ldr	r3, [r7, #8]
 8016136:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8016138:	2301      	movs	r3, #1
 801613a:	60fb      	str	r3, [r7, #12]
 801613c:	e008      	b.n	8016150 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801613e:	68bb      	ldr	r3, [r7, #8]
 8016140:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016142:	4b06      	ldr	r3, [pc, #24]	@ (801615c <xTaskPriorityInherit+0xe0>)
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016148:	429a      	cmp	r2, r3
 801614a:	d201      	bcs.n	8016150 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801614c:	2301      	movs	r3, #1
 801614e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016150:	68fb      	ldr	r3, [r7, #12]
	}
 8016152:	4618      	mov	r0, r3
 8016154:	3710      	adds	r7, #16
 8016156:	46bd      	mov	sp, r7
 8016158:	bd80      	pop	{r7, pc}
 801615a:	bf00      	nop
 801615c:	24002ab8 	.word	0x24002ab8
 8016160:	24002abc 	.word	0x24002abc
 8016164:	24002bc0 	.word	0x24002bc0

08016168 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8016168:	b580      	push	{r7, lr}
 801616a:	b086      	sub	sp, #24
 801616c:	af00      	add	r7, sp, #0
 801616e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8016174:	2300      	movs	r3, #0
 8016176:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	2b00      	cmp	r3, #0
 801617c:	d070      	beq.n	8016260 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801617e:	4b3b      	ldr	r3, [pc, #236]	@ (801626c <xTaskPriorityDisinherit+0x104>)
 8016180:	681b      	ldr	r3, [r3, #0]
 8016182:	693a      	ldr	r2, [r7, #16]
 8016184:	429a      	cmp	r2, r3
 8016186:	d00b      	beq.n	80161a0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8016188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801618c:	f383 8811 	msr	BASEPRI, r3
 8016190:	f3bf 8f6f 	isb	sy
 8016194:	f3bf 8f4f 	dsb	sy
 8016198:	60fb      	str	r3, [r7, #12]
}
 801619a:	bf00      	nop
 801619c:	bf00      	nop
 801619e:	e7fd      	b.n	801619c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80161a0:	693b      	ldr	r3, [r7, #16]
 80161a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80161a4:	2b00      	cmp	r3, #0
 80161a6:	d10b      	bne.n	80161c0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80161a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80161ac:	f383 8811 	msr	BASEPRI, r3
 80161b0:	f3bf 8f6f 	isb	sy
 80161b4:	f3bf 8f4f 	dsb	sy
 80161b8:	60bb      	str	r3, [r7, #8]
}
 80161ba:	bf00      	nop
 80161bc:	bf00      	nop
 80161be:	e7fd      	b.n	80161bc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80161c0:	693b      	ldr	r3, [r7, #16]
 80161c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80161c4:	1e5a      	subs	r2, r3, #1
 80161c6:	693b      	ldr	r3, [r7, #16]
 80161c8:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80161ca:	693b      	ldr	r3, [r7, #16]
 80161cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80161ce:	693b      	ldr	r3, [r7, #16]
 80161d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80161d2:	429a      	cmp	r2, r3
 80161d4:	d044      	beq.n	8016260 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80161d6:	693b      	ldr	r3, [r7, #16]
 80161d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d140      	bne.n	8016260 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80161de:	693b      	ldr	r3, [r7, #16]
 80161e0:	3304      	adds	r3, #4
 80161e2:	4618      	mov	r0, r3
 80161e4:	f7fe fcde 	bl	8014ba4 <uxListRemove>
 80161e8:	4603      	mov	r3, r0
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	d115      	bne.n	801621a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80161ee:	693b      	ldr	r3, [r7, #16]
 80161f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80161f2:	491f      	ldr	r1, [pc, #124]	@ (8016270 <xTaskPriorityDisinherit+0x108>)
 80161f4:	4613      	mov	r3, r2
 80161f6:	009b      	lsls	r3, r3, #2
 80161f8:	4413      	add	r3, r2
 80161fa:	009b      	lsls	r3, r3, #2
 80161fc:	440b      	add	r3, r1
 80161fe:	681b      	ldr	r3, [r3, #0]
 8016200:	2b00      	cmp	r3, #0
 8016202:	d10a      	bne.n	801621a <xTaskPriorityDisinherit+0xb2>
 8016204:	693b      	ldr	r3, [r7, #16]
 8016206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016208:	2201      	movs	r2, #1
 801620a:	fa02 f303 	lsl.w	r3, r2, r3
 801620e:	43da      	mvns	r2, r3
 8016210:	4b18      	ldr	r3, [pc, #96]	@ (8016274 <xTaskPriorityDisinherit+0x10c>)
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	4013      	ands	r3, r2
 8016216:	4a17      	ldr	r2, [pc, #92]	@ (8016274 <xTaskPriorityDisinherit+0x10c>)
 8016218:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801621a:	693b      	ldr	r3, [r7, #16]
 801621c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801621e:	693b      	ldr	r3, [r7, #16]
 8016220:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016222:	693b      	ldr	r3, [r7, #16]
 8016224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016226:	f1c3 0207 	rsb	r2, r3, #7
 801622a:	693b      	ldr	r3, [r7, #16]
 801622c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801622e:	693b      	ldr	r3, [r7, #16]
 8016230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016232:	2201      	movs	r2, #1
 8016234:	409a      	lsls	r2, r3
 8016236:	4b0f      	ldr	r3, [pc, #60]	@ (8016274 <xTaskPriorityDisinherit+0x10c>)
 8016238:	681b      	ldr	r3, [r3, #0]
 801623a:	4313      	orrs	r3, r2
 801623c:	4a0d      	ldr	r2, [pc, #52]	@ (8016274 <xTaskPriorityDisinherit+0x10c>)
 801623e:	6013      	str	r3, [r2, #0]
 8016240:	693b      	ldr	r3, [r7, #16]
 8016242:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016244:	4613      	mov	r3, r2
 8016246:	009b      	lsls	r3, r3, #2
 8016248:	4413      	add	r3, r2
 801624a:	009b      	lsls	r3, r3, #2
 801624c:	4a08      	ldr	r2, [pc, #32]	@ (8016270 <xTaskPriorityDisinherit+0x108>)
 801624e:	441a      	add	r2, r3
 8016250:	693b      	ldr	r3, [r7, #16]
 8016252:	3304      	adds	r3, #4
 8016254:	4619      	mov	r1, r3
 8016256:	4610      	mov	r0, r2
 8016258:	f7fe fc47 	bl	8014aea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801625c:	2301      	movs	r3, #1
 801625e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016260:	697b      	ldr	r3, [r7, #20]
	}
 8016262:	4618      	mov	r0, r3
 8016264:	3718      	adds	r7, #24
 8016266:	46bd      	mov	sp, r7
 8016268:	bd80      	pop	{r7, pc}
 801626a:	bf00      	nop
 801626c:	24002ab8 	.word	0x24002ab8
 8016270:	24002abc 	.word	0x24002abc
 8016274:	24002bc0 	.word	0x24002bc0

08016278 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8016278:	b580      	push	{r7, lr}
 801627a:	b088      	sub	sp, #32
 801627c:	af00      	add	r7, sp, #0
 801627e:	6078      	str	r0, [r7, #4]
 8016280:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8016286:	2301      	movs	r3, #1
 8016288:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	2b00      	cmp	r3, #0
 801628e:	d079      	beq.n	8016384 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8016290:	69bb      	ldr	r3, [r7, #24]
 8016292:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016294:	2b00      	cmp	r3, #0
 8016296:	d10b      	bne.n	80162b0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8016298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801629c:	f383 8811 	msr	BASEPRI, r3
 80162a0:	f3bf 8f6f 	isb	sy
 80162a4:	f3bf 8f4f 	dsb	sy
 80162a8:	60fb      	str	r3, [r7, #12]
}
 80162aa:	bf00      	nop
 80162ac:	bf00      	nop
 80162ae:	e7fd      	b.n	80162ac <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80162b0:	69bb      	ldr	r3, [r7, #24]
 80162b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80162b4:	683a      	ldr	r2, [r7, #0]
 80162b6:	429a      	cmp	r2, r3
 80162b8:	d902      	bls.n	80162c0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80162ba:	683b      	ldr	r3, [r7, #0]
 80162bc:	61fb      	str	r3, [r7, #28]
 80162be:	e002      	b.n	80162c6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80162c0:	69bb      	ldr	r3, [r7, #24]
 80162c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80162c4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80162c6:	69bb      	ldr	r3, [r7, #24]
 80162c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80162ca:	69fa      	ldr	r2, [r7, #28]
 80162cc:	429a      	cmp	r2, r3
 80162ce:	d059      	beq.n	8016384 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80162d0:	69bb      	ldr	r3, [r7, #24]
 80162d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80162d4:	697a      	ldr	r2, [r7, #20]
 80162d6:	429a      	cmp	r2, r3
 80162d8:	d154      	bne.n	8016384 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80162da:	4b2c      	ldr	r3, [pc, #176]	@ (801638c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80162dc:	681b      	ldr	r3, [r3, #0]
 80162de:	69ba      	ldr	r2, [r7, #24]
 80162e0:	429a      	cmp	r2, r3
 80162e2:	d10b      	bne.n	80162fc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80162e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80162e8:	f383 8811 	msr	BASEPRI, r3
 80162ec:	f3bf 8f6f 	isb	sy
 80162f0:	f3bf 8f4f 	dsb	sy
 80162f4:	60bb      	str	r3, [r7, #8]
}
 80162f6:	bf00      	nop
 80162f8:	bf00      	nop
 80162fa:	e7fd      	b.n	80162f8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80162fc:	69bb      	ldr	r3, [r7, #24]
 80162fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016300:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8016302:	69bb      	ldr	r3, [r7, #24]
 8016304:	69fa      	ldr	r2, [r7, #28]
 8016306:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016308:	69bb      	ldr	r3, [r7, #24]
 801630a:	699b      	ldr	r3, [r3, #24]
 801630c:	2b00      	cmp	r3, #0
 801630e:	db04      	blt.n	801631a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016310:	69fb      	ldr	r3, [r7, #28]
 8016312:	f1c3 0207 	rsb	r2, r3, #7
 8016316:	69bb      	ldr	r3, [r7, #24]
 8016318:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801631a:	69bb      	ldr	r3, [r7, #24]
 801631c:	6959      	ldr	r1, [r3, #20]
 801631e:	693a      	ldr	r2, [r7, #16]
 8016320:	4613      	mov	r3, r2
 8016322:	009b      	lsls	r3, r3, #2
 8016324:	4413      	add	r3, r2
 8016326:	009b      	lsls	r3, r3, #2
 8016328:	4a19      	ldr	r2, [pc, #100]	@ (8016390 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801632a:	4413      	add	r3, r2
 801632c:	4299      	cmp	r1, r3
 801632e:	d129      	bne.n	8016384 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016330:	69bb      	ldr	r3, [r7, #24]
 8016332:	3304      	adds	r3, #4
 8016334:	4618      	mov	r0, r3
 8016336:	f7fe fc35 	bl	8014ba4 <uxListRemove>
 801633a:	4603      	mov	r3, r0
 801633c:	2b00      	cmp	r3, #0
 801633e:	d10a      	bne.n	8016356 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8016340:	69bb      	ldr	r3, [r7, #24]
 8016342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016344:	2201      	movs	r2, #1
 8016346:	fa02 f303 	lsl.w	r3, r2, r3
 801634a:	43da      	mvns	r2, r3
 801634c:	4b11      	ldr	r3, [pc, #68]	@ (8016394 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 801634e:	681b      	ldr	r3, [r3, #0]
 8016350:	4013      	ands	r3, r2
 8016352:	4a10      	ldr	r2, [pc, #64]	@ (8016394 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8016354:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8016356:	69bb      	ldr	r3, [r7, #24]
 8016358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801635a:	2201      	movs	r2, #1
 801635c:	409a      	lsls	r2, r3
 801635e:	4b0d      	ldr	r3, [pc, #52]	@ (8016394 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8016360:	681b      	ldr	r3, [r3, #0]
 8016362:	4313      	orrs	r3, r2
 8016364:	4a0b      	ldr	r2, [pc, #44]	@ (8016394 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8016366:	6013      	str	r3, [r2, #0]
 8016368:	69bb      	ldr	r3, [r7, #24]
 801636a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801636c:	4613      	mov	r3, r2
 801636e:	009b      	lsls	r3, r3, #2
 8016370:	4413      	add	r3, r2
 8016372:	009b      	lsls	r3, r3, #2
 8016374:	4a06      	ldr	r2, [pc, #24]	@ (8016390 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8016376:	441a      	add	r2, r3
 8016378:	69bb      	ldr	r3, [r7, #24]
 801637a:	3304      	adds	r3, #4
 801637c:	4619      	mov	r1, r3
 801637e:	4610      	mov	r0, r2
 8016380:	f7fe fbb3 	bl	8014aea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016384:	bf00      	nop
 8016386:	3720      	adds	r7, #32
 8016388:	46bd      	mov	sp, r7
 801638a:	bd80      	pop	{r7, pc}
 801638c:	24002ab8 	.word	0x24002ab8
 8016390:	24002abc 	.word	0x24002abc
 8016394:	24002bc0 	.word	0x24002bc0

08016398 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8016398:	b480      	push	{r7}
 801639a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801639c:	4b07      	ldr	r3, [pc, #28]	@ (80163bc <pvTaskIncrementMutexHeldCount+0x24>)
 801639e:	681b      	ldr	r3, [r3, #0]
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d004      	beq.n	80163ae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80163a4:	4b05      	ldr	r3, [pc, #20]	@ (80163bc <pvTaskIncrementMutexHeldCount+0x24>)
 80163a6:	681b      	ldr	r3, [r3, #0]
 80163a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80163aa:	3201      	adds	r2, #1
 80163ac:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80163ae:	4b03      	ldr	r3, [pc, #12]	@ (80163bc <pvTaskIncrementMutexHeldCount+0x24>)
 80163b0:	681b      	ldr	r3, [r3, #0]
	}
 80163b2:	4618      	mov	r0, r3
 80163b4:	46bd      	mov	sp, r7
 80163b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163ba:	4770      	bx	lr
 80163bc:	24002ab8 	.word	0x24002ab8

080163c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80163c0:	b580      	push	{r7, lr}
 80163c2:	b084      	sub	sp, #16
 80163c4:	af00      	add	r7, sp, #0
 80163c6:	6078      	str	r0, [r7, #4]
 80163c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80163ca:	4b29      	ldr	r3, [pc, #164]	@ (8016470 <prvAddCurrentTaskToDelayedList+0xb0>)
 80163cc:	681b      	ldr	r3, [r3, #0]
 80163ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80163d0:	4b28      	ldr	r3, [pc, #160]	@ (8016474 <prvAddCurrentTaskToDelayedList+0xb4>)
 80163d2:	681b      	ldr	r3, [r3, #0]
 80163d4:	3304      	adds	r3, #4
 80163d6:	4618      	mov	r0, r3
 80163d8:	f7fe fbe4 	bl	8014ba4 <uxListRemove>
 80163dc:	4603      	mov	r3, r0
 80163de:	2b00      	cmp	r3, #0
 80163e0:	d10b      	bne.n	80163fa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80163e2:	4b24      	ldr	r3, [pc, #144]	@ (8016474 <prvAddCurrentTaskToDelayedList+0xb4>)
 80163e4:	681b      	ldr	r3, [r3, #0]
 80163e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80163e8:	2201      	movs	r2, #1
 80163ea:	fa02 f303 	lsl.w	r3, r2, r3
 80163ee:	43da      	mvns	r2, r3
 80163f0:	4b21      	ldr	r3, [pc, #132]	@ (8016478 <prvAddCurrentTaskToDelayedList+0xb8>)
 80163f2:	681b      	ldr	r3, [r3, #0]
 80163f4:	4013      	ands	r3, r2
 80163f6:	4a20      	ldr	r2, [pc, #128]	@ (8016478 <prvAddCurrentTaskToDelayedList+0xb8>)
 80163f8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016400:	d10a      	bne.n	8016418 <prvAddCurrentTaskToDelayedList+0x58>
 8016402:	683b      	ldr	r3, [r7, #0]
 8016404:	2b00      	cmp	r3, #0
 8016406:	d007      	beq.n	8016418 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016408:	4b1a      	ldr	r3, [pc, #104]	@ (8016474 <prvAddCurrentTaskToDelayedList+0xb4>)
 801640a:	681b      	ldr	r3, [r3, #0]
 801640c:	3304      	adds	r3, #4
 801640e:	4619      	mov	r1, r3
 8016410:	481a      	ldr	r0, [pc, #104]	@ (801647c <prvAddCurrentTaskToDelayedList+0xbc>)
 8016412:	f7fe fb6a 	bl	8014aea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8016416:	e026      	b.n	8016466 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8016418:	68fa      	ldr	r2, [r7, #12]
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	4413      	add	r3, r2
 801641e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8016420:	4b14      	ldr	r3, [pc, #80]	@ (8016474 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016422:	681b      	ldr	r3, [r3, #0]
 8016424:	68ba      	ldr	r2, [r7, #8]
 8016426:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8016428:	68ba      	ldr	r2, [r7, #8]
 801642a:	68fb      	ldr	r3, [r7, #12]
 801642c:	429a      	cmp	r2, r3
 801642e:	d209      	bcs.n	8016444 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016430:	4b13      	ldr	r3, [pc, #76]	@ (8016480 <prvAddCurrentTaskToDelayedList+0xc0>)
 8016432:	681a      	ldr	r2, [r3, #0]
 8016434:	4b0f      	ldr	r3, [pc, #60]	@ (8016474 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016436:	681b      	ldr	r3, [r3, #0]
 8016438:	3304      	adds	r3, #4
 801643a:	4619      	mov	r1, r3
 801643c:	4610      	mov	r0, r2
 801643e:	f7fe fb78 	bl	8014b32 <vListInsert>
}
 8016442:	e010      	b.n	8016466 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016444:	4b0f      	ldr	r3, [pc, #60]	@ (8016484 <prvAddCurrentTaskToDelayedList+0xc4>)
 8016446:	681a      	ldr	r2, [r3, #0]
 8016448:	4b0a      	ldr	r3, [pc, #40]	@ (8016474 <prvAddCurrentTaskToDelayedList+0xb4>)
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	3304      	adds	r3, #4
 801644e:	4619      	mov	r1, r3
 8016450:	4610      	mov	r0, r2
 8016452:	f7fe fb6e 	bl	8014b32 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8016456:	4b0c      	ldr	r3, [pc, #48]	@ (8016488 <prvAddCurrentTaskToDelayedList+0xc8>)
 8016458:	681b      	ldr	r3, [r3, #0]
 801645a:	68ba      	ldr	r2, [r7, #8]
 801645c:	429a      	cmp	r2, r3
 801645e:	d202      	bcs.n	8016466 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8016460:	4a09      	ldr	r2, [pc, #36]	@ (8016488 <prvAddCurrentTaskToDelayedList+0xc8>)
 8016462:	68bb      	ldr	r3, [r7, #8]
 8016464:	6013      	str	r3, [r2, #0]
}
 8016466:	bf00      	nop
 8016468:	3710      	adds	r7, #16
 801646a:	46bd      	mov	sp, r7
 801646c:	bd80      	pop	{r7, pc}
 801646e:	bf00      	nop
 8016470:	24002bbc 	.word	0x24002bbc
 8016474:	24002ab8 	.word	0x24002ab8
 8016478:	24002bc0 	.word	0x24002bc0
 801647c:	24002ba4 	.word	0x24002ba4
 8016480:	24002b74 	.word	0x24002b74
 8016484:	24002b70 	.word	0x24002b70
 8016488:	24002bd8 	.word	0x24002bd8

0801648c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801648c:	b480      	push	{r7}
 801648e:	b085      	sub	sp, #20
 8016490:	af00      	add	r7, sp, #0
 8016492:	60f8      	str	r0, [r7, #12]
 8016494:	60b9      	str	r1, [r7, #8]
 8016496:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	3b04      	subs	r3, #4
 801649c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801649e:	68fb      	ldr	r3, [r7, #12]
 80164a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80164a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80164a6:	68fb      	ldr	r3, [r7, #12]
 80164a8:	3b04      	subs	r3, #4
 80164aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80164ac:	68bb      	ldr	r3, [r7, #8]
 80164ae:	f023 0201 	bic.w	r2, r3, #1
 80164b2:	68fb      	ldr	r3, [r7, #12]
 80164b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80164b6:	68fb      	ldr	r3, [r7, #12]
 80164b8:	3b04      	subs	r3, #4
 80164ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80164bc:	4a0c      	ldr	r2, [pc, #48]	@ (80164f0 <pxPortInitialiseStack+0x64>)
 80164be:	68fb      	ldr	r3, [r7, #12]
 80164c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80164c2:	68fb      	ldr	r3, [r7, #12]
 80164c4:	3b14      	subs	r3, #20
 80164c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80164c8:	687a      	ldr	r2, [r7, #4]
 80164ca:	68fb      	ldr	r3, [r7, #12]
 80164cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80164ce:	68fb      	ldr	r3, [r7, #12]
 80164d0:	3b04      	subs	r3, #4
 80164d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80164d4:	68fb      	ldr	r3, [r7, #12]
 80164d6:	f06f 0202 	mvn.w	r2, #2
 80164da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80164dc:	68fb      	ldr	r3, [r7, #12]
 80164de:	3b20      	subs	r3, #32
 80164e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80164e2:	68fb      	ldr	r3, [r7, #12]
}
 80164e4:	4618      	mov	r0, r3
 80164e6:	3714      	adds	r7, #20
 80164e8:	46bd      	mov	sp, r7
 80164ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ee:	4770      	bx	lr
 80164f0:	080164f5 	.word	0x080164f5

080164f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80164f4:	b480      	push	{r7}
 80164f6:	b085      	sub	sp, #20
 80164f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80164fa:	2300      	movs	r3, #0
 80164fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80164fe:	4b13      	ldr	r3, [pc, #76]	@ (801654c <prvTaskExitError+0x58>)
 8016500:	681b      	ldr	r3, [r3, #0]
 8016502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016506:	d00b      	beq.n	8016520 <prvTaskExitError+0x2c>
	__asm volatile
 8016508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801650c:	f383 8811 	msr	BASEPRI, r3
 8016510:	f3bf 8f6f 	isb	sy
 8016514:	f3bf 8f4f 	dsb	sy
 8016518:	60fb      	str	r3, [r7, #12]
}
 801651a:	bf00      	nop
 801651c:	bf00      	nop
 801651e:	e7fd      	b.n	801651c <prvTaskExitError+0x28>
	__asm volatile
 8016520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016524:	f383 8811 	msr	BASEPRI, r3
 8016528:	f3bf 8f6f 	isb	sy
 801652c:	f3bf 8f4f 	dsb	sy
 8016530:	60bb      	str	r3, [r7, #8]
}
 8016532:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8016534:	bf00      	nop
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	2b00      	cmp	r3, #0
 801653a:	d0fc      	beq.n	8016536 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801653c:	bf00      	nop
 801653e:	bf00      	nop
 8016540:	3714      	adds	r7, #20
 8016542:	46bd      	mov	sp, r7
 8016544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016548:	4770      	bx	lr
 801654a:	bf00      	nop
 801654c:	240000c4 	.word	0x240000c4

08016550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016550:	4b07      	ldr	r3, [pc, #28]	@ (8016570 <pxCurrentTCBConst2>)
 8016552:	6819      	ldr	r1, [r3, #0]
 8016554:	6808      	ldr	r0, [r1, #0]
 8016556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801655a:	f380 8809 	msr	PSP, r0
 801655e:	f3bf 8f6f 	isb	sy
 8016562:	f04f 0000 	mov.w	r0, #0
 8016566:	f380 8811 	msr	BASEPRI, r0
 801656a:	4770      	bx	lr
 801656c:	f3af 8000 	nop.w

08016570 <pxCurrentTCBConst2>:
 8016570:	24002ab8 	.word	0x24002ab8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016574:	bf00      	nop
 8016576:	bf00      	nop

08016578 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016578:	4808      	ldr	r0, [pc, #32]	@ (801659c <prvPortStartFirstTask+0x24>)
 801657a:	6800      	ldr	r0, [r0, #0]
 801657c:	6800      	ldr	r0, [r0, #0]
 801657e:	f380 8808 	msr	MSP, r0
 8016582:	f04f 0000 	mov.w	r0, #0
 8016586:	f380 8814 	msr	CONTROL, r0
 801658a:	b662      	cpsie	i
 801658c:	b661      	cpsie	f
 801658e:	f3bf 8f4f 	dsb	sy
 8016592:	f3bf 8f6f 	isb	sy
 8016596:	df00      	svc	0
 8016598:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801659a:	bf00      	nop
 801659c:	e000ed08 	.word	0xe000ed08

080165a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80165a0:	b580      	push	{r7, lr}
 80165a2:	b086      	sub	sp, #24
 80165a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80165a6:	4b47      	ldr	r3, [pc, #284]	@ (80166c4 <xPortStartScheduler+0x124>)
 80165a8:	681b      	ldr	r3, [r3, #0]
 80165aa:	4a47      	ldr	r2, [pc, #284]	@ (80166c8 <xPortStartScheduler+0x128>)
 80165ac:	4293      	cmp	r3, r2
 80165ae:	d10b      	bne.n	80165c8 <xPortStartScheduler+0x28>
	__asm volatile
 80165b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80165b4:	f383 8811 	msr	BASEPRI, r3
 80165b8:	f3bf 8f6f 	isb	sy
 80165bc:	f3bf 8f4f 	dsb	sy
 80165c0:	613b      	str	r3, [r7, #16]
}
 80165c2:	bf00      	nop
 80165c4:	bf00      	nop
 80165c6:	e7fd      	b.n	80165c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80165c8:	4b3e      	ldr	r3, [pc, #248]	@ (80166c4 <xPortStartScheduler+0x124>)
 80165ca:	681b      	ldr	r3, [r3, #0]
 80165cc:	4a3f      	ldr	r2, [pc, #252]	@ (80166cc <xPortStartScheduler+0x12c>)
 80165ce:	4293      	cmp	r3, r2
 80165d0:	d10b      	bne.n	80165ea <xPortStartScheduler+0x4a>
	__asm volatile
 80165d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80165d6:	f383 8811 	msr	BASEPRI, r3
 80165da:	f3bf 8f6f 	isb	sy
 80165de:	f3bf 8f4f 	dsb	sy
 80165e2:	60fb      	str	r3, [r7, #12]
}
 80165e4:	bf00      	nop
 80165e6:	bf00      	nop
 80165e8:	e7fd      	b.n	80165e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80165ea:	4b39      	ldr	r3, [pc, #228]	@ (80166d0 <xPortStartScheduler+0x130>)
 80165ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80165ee:	697b      	ldr	r3, [r7, #20]
 80165f0:	781b      	ldrb	r3, [r3, #0]
 80165f2:	b2db      	uxtb	r3, r3
 80165f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80165f6:	697b      	ldr	r3, [r7, #20]
 80165f8:	22ff      	movs	r2, #255	@ 0xff
 80165fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80165fc:	697b      	ldr	r3, [r7, #20]
 80165fe:	781b      	ldrb	r3, [r3, #0]
 8016600:	b2db      	uxtb	r3, r3
 8016602:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016604:	78fb      	ldrb	r3, [r7, #3]
 8016606:	b2db      	uxtb	r3, r3
 8016608:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801660c:	b2da      	uxtb	r2, r3
 801660e:	4b31      	ldr	r3, [pc, #196]	@ (80166d4 <xPortStartScheduler+0x134>)
 8016610:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8016612:	4b31      	ldr	r3, [pc, #196]	@ (80166d8 <xPortStartScheduler+0x138>)
 8016614:	2207      	movs	r2, #7
 8016616:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016618:	e009      	b.n	801662e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801661a:	4b2f      	ldr	r3, [pc, #188]	@ (80166d8 <xPortStartScheduler+0x138>)
 801661c:	681b      	ldr	r3, [r3, #0]
 801661e:	3b01      	subs	r3, #1
 8016620:	4a2d      	ldr	r2, [pc, #180]	@ (80166d8 <xPortStartScheduler+0x138>)
 8016622:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016624:	78fb      	ldrb	r3, [r7, #3]
 8016626:	b2db      	uxtb	r3, r3
 8016628:	005b      	lsls	r3, r3, #1
 801662a:	b2db      	uxtb	r3, r3
 801662c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801662e:	78fb      	ldrb	r3, [r7, #3]
 8016630:	b2db      	uxtb	r3, r3
 8016632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016636:	2b80      	cmp	r3, #128	@ 0x80
 8016638:	d0ef      	beq.n	801661a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801663a:	4b27      	ldr	r3, [pc, #156]	@ (80166d8 <xPortStartScheduler+0x138>)
 801663c:	681b      	ldr	r3, [r3, #0]
 801663e:	f1c3 0307 	rsb	r3, r3, #7
 8016642:	2b04      	cmp	r3, #4
 8016644:	d00b      	beq.n	801665e <xPortStartScheduler+0xbe>
	__asm volatile
 8016646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801664a:	f383 8811 	msr	BASEPRI, r3
 801664e:	f3bf 8f6f 	isb	sy
 8016652:	f3bf 8f4f 	dsb	sy
 8016656:	60bb      	str	r3, [r7, #8]
}
 8016658:	bf00      	nop
 801665a:	bf00      	nop
 801665c:	e7fd      	b.n	801665a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801665e:	4b1e      	ldr	r3, [pc, #120]	@ (80166d8 <xPortStartScheduler+0x138>)
 8016660:	681b      	ldr	r3, [r3, #0]
 8016662:	021b      	lsls	r3, r3, #8
 8016664:	4a1c      	ldr	r2, [pc, #112]	@ (80166d8 <xPortStartScheduler+0x138>)
 8016666:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016668:	4b1b      	ldr	r3, [pc, #108]	@ (80166d8 <xPortStartScheduler+0x138>)
 801666a:	681b      	ldr	r3, [r3, #0]
 801666c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8016670:	4a19      	ldr	r2, [pc, #100]	@ (80166d8 <xPortStartScheduler+0x138>)
 8016672:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	b2da      	uxtb	r2, r3
 8016678:	697b      	ldr	r3, [r7, #20]
 801667a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801667c:	4b17      	ldr	r3, [pc, #92]	@ (80166dc <xPortStartScheduler+0x13c>)
 801667e:	681b      	ldr	r3, [r3, #0]
 8016680:	4a16      	ldr	r2, [pc, #88]	@ (80166dc <xPortStartScheduler+0x13c>)
 8016682:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8016686:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016688:	4b14      	ldr	r3, [pc, #80]	@ (80166dc <xPortStartScheduler+0x13c>)
 801668a:	681b      	ldr	r3, [r3, #0]
 801668c:	4a13      	ldr	r2, [pc, #76]	@ (80166dc <xPortStartScheduler+0x13c>)
 801668e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8016692:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8016694:	f000 f8da 	bl	801684c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016698:	4b11      	ldr	r3, [pc, #68]	@ (80166e0 <xPortStartScheduler+0x140>)
 801669a:	2200      	movs	r2, #0
 801669c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801669e:	f000 f8f9 	bl	8016894 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80166a2:	4b10      	ldr	r3, [pc, #64]	@ (80166e4 <xPortStartScheduler+0x144>)
 80166a4:	681b      	ldr	r3, [r3, #0]
 80166a6:	4a0f      	ldr	r2, [pc, #60]	@ (80166e4 <xPortStartScheduler+0x144>)
 80166a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80166ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80166ae:	f7ff ff63 	bl	8016578 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80166b2:	f7ff fa83 	bl	8015bbc <vTaskSwitchContext>
	prvTaskExitError();
 80166b6:	f7ff ff1d 	bl	80164f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80166ba:	2300      	movs	r3, #0
}
 80166bc:	4618      	mov	r0, r3
 80166be:	3718      	adds	r7, #24
 80166c0:	46bd      	mov	sp, r7
 80166c2:	bd80      	pop	{r7, pc}
 80166c4:	e000ed00 	.word	0xe000ed00
 80166c8:	410fc271 	.word	0x410fc271
 80166cc:	410fc270 	.word	0x410fc270
 80166d0:	e000e400 	.word	0xe000e400
 80166d4:	24002be4 	.word	0x24002be4
 80166d8:	24002be8 	.word	0x24002be8
 80166dc:	e000ed20 	.word	0xe000ed20
 80166e0:	240000c4 	.word	0x240000c4
 80166e4:	e000ef34 	.word	0xe000ef34

080166e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80166e8:	b480      	push	{r7}
 80166ea:	b083      	sub	sp, #12
 80166ec:	af00      	add	r7, sp, #0
	__asm volatile
 80166ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80166f2:	f383 8811 	msr	BASEPRI, r3
 80166f6:	f3bf 8f6f 	isb	sy
 80166fa:	f3bf 8f4f 	dsb	sy
 80166fe:	607b      	str	r3, [r7, #4]
}
 8016700:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8016702:	4b10      	ldr	r3, [pc, #64]	@ (8016744 <vPortEnterCritical+0x5c>)
 8016704:	681b      	ldr	r3, [r3, #0]
 8016706:	3301      	adds	r3, #1
 8016708:	4a0e      	ldr	r2, [pc, #56]	@ (8016744 <vPortEnterCritical+0x5c>)
 801670a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801670c:	4b0d      	ldr	r3, [pc, #52]	@ (8016744 <vPortEnterCritical+0x5c>)
 801670e:	681b      	ldr	r3, [r3, #0]
 8016710:	2b01      	cmp	r3, #1
 8016712:	d110      	bne.n	8016736 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016714:	4b0c      	ldr	r3, [pc, #48]	@ (8016748 <vPortEnterCritical+0x60>)
 8016716:	681b      	ldr	r3, [r3, #0]
 8016718:	b2db      	uxtb	r3, r3
 801671a:	2b00      	cmp	r3, #0
 801671c:	d00b      	beq.n	8016736 <vPortEnterCritical+0x4e>
	__asm volatile
 801671e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016722:	f383 8811 	msr	BASEPRI, r3
 8016726:	f3bf 8f6f 	isb	sy
 801672a:	f3bf 8f4f 	dsb	sy
 801672e:	603b      	str	r3, [r7, #0]
}
 8016730:	bf00      	nop
 8016732:	bf00      	nop
 8016734:	e7fd      	b.n	8016732 <vPortEnterCritical+0x4a>
	}
}
 8016736:	bf00      	nop
 8016738:	370c      	adds	r7, #12
 801673a:	46bd      	mov	sp, r7
 801673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016740:	4770      	bx	lr
 8016742:	bf00      	nop
 8016744:	240000c4 	.word	0x240000c4
 8016748:	e000ed04 	.word	0xe000ed04

0801674c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801674c:	b480      	push	{r7}
 801674e:	b083      	sub	sp, #12
 8016750:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8016752:	4b12      	ldr	r3, [pc, #72]	@ (801679c <vPortExitCritical+0x50>)
 8016754:	681b      	ldr	r3, [r3, #0]
 8016756:	2b00      	cmp	r3, #0
 8016758:	d10b      	bne.n	8016772 <vPortExitCritical+0x26>
	__asm volatile
 801675a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801675e:	f383 8811 	msr	BASEPRI, r3
 8016762:	f3bf 8f6f 	isb	sy
 8016766:	f3bf 8f4f 	dsb	sy
 801676a:	607b      	str	r3, [r7, #4]
}
 801676c:	bf00      	nop
 801676e:	bf00      	nop
 8016770:	e7fd      	b.n	801676e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8016772:	4b0a      	ldr	r3, [pc, #40]	@ (801679c <vPortExitCritical+0x50>)
 8016774:	681b      	ldr	r3, [r3, #0]
 8016776:	3b01      	subs	r3, #1
 8016778:	4a08      	ldr	r2, [pc, #32]	@ (801679c <vPortExitCritical+0x50>)
 801677a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801677c:	4b07      	ldr	r3, [pc, #28]	@ (801679c <vPortExitCritical+0x50>)
 801677e:	681b      	ldr	r3, [r3, #0]
 8016780:	2b00      	cmp	r3, #0
 8016782:	d105      	bne.n	8016790 <vPortExitCritical+0x44>
 8016784:	2300      	movs	r3, #0
 8016786:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016788:	683b      	ldr	r3, [r7, #0]
 801678a:	f383 8811 	msr	BASEPRI, r3
}
 801678e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8016790:	bf00      	nop
 8016792:	370c      	adds	r7, #12
 8016794:	46bd      	mov	sp, r7
 8016796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801679a:	4770      	bx	lr
 801679c:	240000c4 	.word	0x240000c4

080167a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80167a0:	f3ef 8009 	mrs	r0, PSP
 80167a4:	f3bf 8f6f 	isb	sy
 80167a8:	4b15      	ldr	r3, [pc, #84]	@ (8016800 <pxCurrentTCBConst>)
 80167aa:	681a      	ldr	r2, [r3, #0]
 80167ac:	f01e 0f10 	tst.w	lr, #16
 80167b0:	bf08      	it	eq
 80167b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80167b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167ba:	6010      	str	r0, [r2, #0]
 80167bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80167c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80167c4:	f380 8811 	msr	BASEPRI, r0
 80167c8:	f3bf 8f4f 	dsb	sy
 80167cc:	f3bf 8f6f 	isb	sy
 80167d0:	f7ff f9f4 	bl	8015bbc <vTaskSwitchContext>
 80167d4:	f04f 0000 	mov.w	r0, #0
 80167d8:	f380 8811 	msr	BASEPRI, r0
 80167dc:	bc09      	pop	{r0, r3}
 80167de:	6819      	ldr	r1, [r3, #0]
 80167e0:	6808      	ldr	r0, [r1, #0]
 80167e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167e6:	f01e 0f10 	tst.w	lr, #16
 80167ea:	bf08      	it	eq
 80167ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80167f0:	f380 8809 	msr	PSP, r0
 80167f4:	f3bf 8f6f 	isb	sy
 80167f8:	4770      	bx	lr
 80167fa:	bf00      	nop
 80167fc:	f3af 8000 	nop.w

08016800 <pxCurrentTCBConst>:
 8016800:	24002ab8 	.word	0x24002ab8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016804:	bf00      	nop
 8016806:	bf00      	nop

08016808 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016808:	b580      	push	{r7, lr}
 801680a:	b082      	sub	sp, #8
 801680c:	af00      	add	r7, sp, #0
	__asm volatile
 801680e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016812:	f383 8811 	msr	BASEPRI, r3
 8016816:	f3bf 8f6f 	isb	sy
 801681a:	f3bf 8f4f 	dsb	sy
 801681e:	607b      	str	r3, [r7, #4]
}
 8016820:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016822:	f7ff f911 	bl	8015a48 <xTaskIncrementTick>
 8016826:	4603      	mov	r3, r0
 8016828:	2b00      	cmp	r3, #0
 801682a:	d003      	beq.n	8016834 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801682c:	4b06      	ldr	r3, [pc, #24]	@ (8016848 <SysTick_Handler+0x40>)
 801682e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016832:	601a      	str	r2, [r3, #0]
 8016834:	2300      	movs	r3, #0
 8016836:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016838:	683b      	ldr	r3, [r7, #0]
 801683a:	f383 8811 	msr	BASEPRI, r3
}
 801683e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016840:	bf00      	nop
 8016842:	3708      	adds	r7, #8
 8016844:	46bd      	mov	sp, r7
 8016846:	bd80      	pop	{r7, pc}
 8016848:	e000ed04 	.word	0xe000ed04

0801684c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801684c:	b480      	push	{r7}
 801684e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016850:	4b0b      	ldr	r3, [pc, #44]	@ (8016880 <vPortSetupTimerInterrupt+0x34>)
 8016852:	2200      	movs	r2, #0
 8016854:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016856:	4b0b      	ldr	r3, [pc, #44]	@ (8016884 <vPortSetupTimerInterrupt+0x38>)
 8016858:	2200      	movs	r2, #0
 801685a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801685c:	4b0a      	ldr	r3, [pc, #40]	@ (8016888 <vPortSetupTimerInterrupt+0x3c>)
 801685e:	681b      	ldr	r3, [r3, #0]
 8016860:	4a0a      	ldr	r2, [pc, #40]	@ (801688c <vPortSetupTimerInterrupt+0x40>)
 8016862:	fba2 2303 	umull	r2, r3, r2, r3
 8016866:	099b      	lsrs	r3, r3, #6
 8016868:	4a09      	ldr	r2, [pc, #36]	@ (8016890 <vPortSetupTimerInterrupt+0x44>)
 801686a:	3b01      	subs	r3, #1
 801686c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801686e:	4b04      	ldr	r3, [pc, #16]	@ (8016880 <vPortSetupTimerInterrupt+0x34>)
 8016870:	2207      	movs	r2, #7
 8016872:	601a      	str	r2, [r3, #0]
}
 8016874:	bf00      	nop
 8016876:	46bd      	mov	sp, r7
 8016878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801687c:	4770      	bx	lr
 801687e:	bf00      	nop
 8016880:	e000e010 	.word	0xe000e010
 8016884:	e000e018 	.word	0xe000e018
 8016888:	24000000 	.word	0x24000000
 801688c:	10624dd3 	.word	0x10624dd3
 8016890:	e000e014 	.word	0xe000e014

08016894 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016894:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80168a4 <vPortEnableVFP+0x10>
 8016898:	6801      	ldr	r1, [r0, #0]
 801689a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801689e:	6001      	str	r1, [r0, #0]
 80168a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80168a2:	bf00      	nop
 80168a4:	e000ed88 	.word	0xe000ed88

080168a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80168a8:	b480      	push	{r7}
 80168aa:	b085      	sub	sp, #20
 80168ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80168ae:	f3ef 8305 	mrs	r3, IPSR
 80168b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80168b4:	68fb      	ldr	r3, [r7, #12]
 80168b6:	2b0f      	cmp	r3, #15
 80168b8:	d915      	bls.n	80168e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80168ba:	4a18      	ldr	r2, [pc, #96]	@ (801691c <vPortValidateInterruptPriority+0x74>)
 80168bc:	68fb      	ldr	r3, [r7, #12]
 80168be:	4413      	add	r3, r2
 80168c0:	781b      	ldrb	r3, [r3, #0]
 80168c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80168c4:	4b16      	ldr	r3, [pc, #88]	@ (8016920 <vPortValidateInterruptPriority+0x78>)
 80168c6:	781b      	ldrb	r3, [r3, #0]
 80168c8:	7afa      	ldrb	r2, [r7, #11]
 80168ca:	429a      	cmp	r2, r3
 80168cc:	d20b      	bcs.n	80168e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80168ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80168d2:	f383 8811 	msr	BASEPRI, r3
 80168d6:	f3bf 8f6f 	isb	sy
 80168da:	f3bf 8f4f 	dsb	sy
 80168de:	607b      	str	r3, [r7, #4]
}
 80168e0:	bf00      	nop
 80168e2:	bf00      	nop
 80168e4:	e7fd      	b.n	80168e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80168e6:	4b0f      	ldr	r3, [pc, #60]	@ (8016924 <vPortValidateInterruptPriority+0x7c>)
 80168e8:	681b      	ldr	r3, [r3, #0]
 80168ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80168ee:	4b0e      	ldr	r3, [pc, #56]	@ (8016928 <vPortValidateInterruptPriority+0x80>)
 80168f0:	681b      	ldr	r3, [r3, #0]
 80168f2:	429a      	cmp	r2, r3
 80168f4:	d90b      	bls.n	801690e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80168f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80168fa:	f383 8811 	msr	BASEPRI, r3
 80168fe:	f3bf 8f6f 	isb	sy
 8016902:	f3bf 8f4f 	dsb	sy
 8016906:	603b      	str	r3, [r7, #0]
}
 8016908:	bf00      	nop
 801690a:	bf00      	nop
 801690c:	e7fd      	b.n	801690a <vPortValidateInterruptPriority+0x62>
	}
 801690e:	bf00      	nop
 8016910:	3714      	adds	r7, #20
 8016912:	46bd      	mov	sp, r7
 8016914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016918:	4770      	bx	lr
 801691a:	bf00      	nop
 801691c:	e000e3f0 	.word	0xe000e3f0
 8016920:	24002be4 	.word	0x24002be4
 8016924:	e000ed0c 	.word	0xe000ed0c
 8016928:	24002be8 	.word	0x24002be8

0801692c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801692c:	b580      	push	{r7, lr}
 801692e:	b08a      	sub	sp, #40	@ 0x28
 8016930:	af00      	add	r7, sp, #0
 8016932:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016934:	2300      	movs	r3, #0
 8016936:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016938:	f7fe ffda 	bl	80158f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801693c:	4b5c      	ldr	r3, [pc, #368]	@ (8016ab0 <pvPortMalloc+0x184>)
 801693e:	681b      	ldr	r3, [r3, #0]
 8016940:	2b00      	cmp	r3, #0
 8016942:	d101      	bne.n	8016948 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016944:	f000 f924 	bl	8016b90 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016948:	4b5a      	ldr	r3, [pc, #360]	@ (8016ab4 <pvPortMalloc+0x188>)
 801694a:	681a      	ldr	r2, [r3, #0]
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	4013      	ands	r3, r2
 8016950:	2b00      	cmp	r3, #0
 8016952:	f040 8095 	bne.w	8016a80 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	2b00      	cmp	r3, #0
 801695a:	d01e      	beq.n	801699a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801695c:	2208      	movs	r2, #8
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	4413      	add	r3, r2
 8016962:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	f003 0307 	and.w	r3, r3, #7
 801696a:	2b00      	cmp	r3, #0
 801696c:	d015      	beq.n	801699a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	f023 0307 	bic.w	r3, r3, #7
 8016974:	3308      	adds	r3, #8
 8016976:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	f003 0307 	and.w	r3, r3, #7
 801697e:	2b00      	cmp	r3, #0
 8016980:	d00b      	beq.n	801699a <pvPortMalloc+0x6e>
	__asm volatile
 8016982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016986:	f383 8811 	msr	BASEPRI, r3
 801698a:	f3bf 8f6f 	isb	sy
 801698e:	f3bf 8f4f 	dsb	sy
 8016992:	617b      	str	r3, [r7, #20]
}
 8016994:	bf00      	nop
 8016996:	bf00      	nop
 8016998:	e7fd      	b.n	8016996 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	2b00      	cmp	r3, #0
 801699e:	d06f      	beq.n	8016a80 <pvPortMalloc+0x154>
 80169a0:	4b45      	ldr	r3, [pc, #276]	@ (8016ab8 <pvPortMalloc+0x18c>)
 80169a2:	681b      	ldr	r3, [r3, #0]
 80169a4:	687a      	ldr	r2, [r7, #4]
 80169a6:	429a      	cmp	r2, r3
 80169a8:	d86a      	bhi.n	8016a80 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80169aa:	4b44      	ldr	r3, [pc, #272]	@ (8016abc <pvPortMalloc+0x190>)
 80169ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80169ae:	4b43      	ldr	r3, [pc, #268]	@ (8016abc <pvPortMalloc+0x190>)
 80169b0:	681b      	ldr	r3, [r3, #0]
 80169b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80169b4:	e004      	b.n	80169c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80169b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80169ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169bc:	681b      	ldr	r3, [r3, #0]
 80169be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80169c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169c2:	685b      	ldr	r3, [r3, #4]
 80169c4:	687a      	ldr	r2, [r7, #4]
 80169c6:	429a      	cmp	r2, r3
 80169c8:	d903      	bls.n	80169d2 <pvPortMalloc+0xa6>
 80169ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169cc:	681b      	ldr	r3, [r3, #0]
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	d1f1      	bne.n	80169b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80169d2:	4b37      	ldr	r3, [pc, #220]	@ (8016ab0 <pvPortMalloc+0x184>)
 80169d4:	681b      	ldr	r3, [r3, #0]
 80169d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80169d8:	429a      	cmp	r2, r3
 80169da:	d051      	beq.n	8016a80 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80169dc:	6a3b      	ldr	r3, [r7, #32]
 80169de:	681b      	ldr	r3, [r3, #0]
 80169e0:	2208      	movs	r2, #8
 80169e2:	4413      	add	r3, r2
 80169e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80169e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169e8:	681a      	ldr	r2, [r3, #0]
 80169ea:	6a3b      	ldr	r3, [r7, #32]
 80169ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80169ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169f0:	685a      	ldr	r2, [r3, #4]
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	1ad2      	subs	r2, r2, r3
 80169f6:	2308      	movs	r3, #8
 80169f8:	005b      	lsls	r3, r3, #1
 80169fa:	429a      	cmp	r2, r3
 80169fc:	d920      	bls.n	8016a40 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80169fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	4413      	add	r3, r2
 8016a04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016a06:	69bb      	ldr	r3, [r7, #24]
 8016a08:	f003 0307 	and.w	r3, r3, #7
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d00b      	beq.n	8016a28 <pvPortMalloc+0xfc>
	__asm volatile
 8016a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016a14:	f383 8811 	msr	BASEPRI, r3
 8016a18:	f3bf 8f6f 	isb	sy
 8016a1c:	f3bf 8f4f 	dsb	sy
 8016a20:	613b      	str	r3, [r7, #16]
}
 8016a22:	bf00      	nop
 8016a24:	bf00      	nop
 8016a26:	e7fd      	b.n	8016a24 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a2a:	685a      	ldr	r2, [r3, #4]
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	1ad2      	subs	r2, r2, r3
 8016a30:	69bb      	ldr	r3, [r7, #24]
 8016a32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a36:	687a      	ldr	r2, [r7, #4]
 8016a38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016a3a:	69b8      	ldr	r0, [r7, #24]
 8016a3c:	f000 f90a 	bl	8016c54 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016a40:	4b1d      	ldr	r3, [pc, #116]	@ (8016ab8 <pvPortMalloc+0x18c>)
 8016a42:	681a      	ldr	r2, [r3, #0]
 8016a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a46:	685b      	ldr	r3, [r3, #4]
 8016a48:	1ad3      	subs	r3, r2, r3
 8016a4a:	4a1b      	ldr	r2, [pc, #108]	@ (8016ab8 <pvPortMalloc+0x18c>)
 8016a4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8016ab8 <pvPortMalloc+0x18c>)
 8016a50:	681a      	ldr	r2, [r3, #0]
 8016a52:	4b1b      	ldr	r3, [pc, #108]	@ (8016ac0 <pvPortMalloc+0x194>)
 8016a54:	681b      	ldr	r3, [r3, #0]
 8016a56:	429a      	cmp	r2, r3
 8016a58:	d203      	bcs.n	8016a62 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016a5a:	4b17      	ldr	r3, [pc, #92]	@ (8016ab8 <pvPortMalloc+0x18c>)
 8016a5c:	681b      	ldr	r3, [r3, #0]
 8016a5e:	4a18      	ldr	r2, [pc, #96]	@ (8016ac0 <pvPortMalloc+0x194>)
 8016a60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a64:	685a      	ldr	r2, [r3, #4]
 8016a66:	4b13      	ldr	r3, [pc, #76]	@ (8016ab4 <pvPortMalloc+0x188>)
 8016a68:	681b      	ldr	r3, [r3, #0]
 8016a6a:	431a      	orrs	r2, r3
 8016a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a72:	2200      	movs	r2, #0
 8016a74:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8016a76:	4b13      	ldr	r3, [pc, #76]	@ (8016ac4 <pvPortMalloc+0x198>)
 8016a78:	681b      	ldr	r3, [r3, #0]
 8016a7a:	3301      	adds	r3, #1
 8016a7c:	4a11      	ldr	r2, [pc, #68]	@ (8016ac4 <pvPortMalloc+0x198>)
 8016a7e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016a80:	f7fe ff44 	bl	801590c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016a84:	69fb      	ldr	r3, [r7, #28]
 8016a86:	f003 0307 	and.w	r3, r3, #7
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	d00b      	beq.n	8016aa6 <pvPortMalloc+0x17a>
	__asm volatile
 8016a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016a92:	f383 8811 	msr	BASEPRI, r3
 8016a96:	f3bf 8f6f 	isb	sy
 8016a9a:	f3bf 8f4f 	dsb	sy
 8016a9e:	60fb      	str	r3, [r7, #12]
}
 8016aa0:	bf00      	nop
 8016aa2:	bf00      	nop
 8016aa4:	e7fd      	b.n	8016aa2 <pvPortMalloc+0x176>
	return pvReturn;
 8016aa6:	69fb      	ldr	r3, [r7, #28]
}
 8016aa8:	4618      	mov	r0, r3
 8016aaa:	3728      	adds	r7, #40	@ 0x28
 8016aac:	46bd      	mov	sp, r7
 8016aae:	bd80      	pop	{r7, pc}
 8016ab0:	240067f4 	.word	0x240067f4
 8016ab4:	24006808 	.word	0x24006808
 8016ab8:	240067f8 	.word	0x240067f8
 8016abc:	240067ec 	.word	0x240067ec
 8016ac0:	240067fc 	.word	0x240067fc
 8016ac4:	24006800 	.word	0x24006800

08016ac8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016ac8:	b580      	push	{r7, lr}
 8016aca:	b086      	sub	sp, #24
 8016acc:	af00      	add	r7, sp, #0
 8016ace:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	d04f      	beq.n	8016b7a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016ada:	2308      	movs	r3, #8
 8016adc:	425b      	negs	r3, r3
 8016ade:	697a      	ldr	r2, [r7, #20]
 8016ae0:	4413      	add	r3, r2
 8016ae2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016ae4:	697b      	ldr	r3, [r7, #20]
 8016ae6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016ae8:	693b      	ldr	r3, [r7, #16]
 8016aea:	685a      	ldr	r2, [r3, #4]
 8016aec:	4b25      	ldr	r3, [pc, #148]	@ (8016b84 <vPortFree+0xbc>)
 8016aee:	681b      	ldr	r3, [r3, #0]
 8016af0:	4013      	ands	r3, r2
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	d10b      	bne.n	8016b0e <vPortFree+0x46>
	__asm volatile
 8016af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016afa:	f383 8811 	msr	BASEPRI, r3
 8016afe:	f3bf 8f6f 	isb	sy
 8016b02:	f3bf 8f4f 	dsb	sy
 8016b06:	60fb      	str	r3, [r7, #12]
}
 8016b08:	bf00      	nop
 8016b0a:	bf00      	nop
 8016b0c:	e7fd      	b.n	8016b0a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016b0e:	693b      	ldr	r3, [r7, #16]
 8016b10:	681b      	ldr	r3, [r3, #0]
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	d00b      	beq.n	8016b2e <vPortFree+0x66>
	__asm volatile
 8016b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016b1a:	f383 8811 	msr	BASEPRI, r3
 8016b1e:	f3bf 8f6f 	isb	sy
 8016b22:	f3bf 8f4f 	dsb	sy
 8016b26:	60bb      	str	r3, [r7, #8]
}
 8016b28:	bf00      	nop
 8016b2a:	bf00      	nop
 8016b2c:	e7fd      	b.n	8016b2a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016b2e:	693b      	ldr	r3, [r7, #16]
 8016b30:	685a      	ldr	r2, [r3, #4]
 8016b32:	4b14      	ldr	r3, [pc, #80]	@ (8016b84 <vPortFree+0xbc>)
 8016b34:	681b      	ldr	r3, [r3, #0]
 8016b36:	4013      	ands	r3, r2
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d01e      	beq.n	8016b7a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016b3c:	693b      	ldr	r3, [r7, #16]
 8016b3e:	681b      	ldr	r3, [r3, #0]
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	d11a      	bne.n	8016b7a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016b44:	693b      	ldr	r3, [r7, #16]
 8016b46:	685a      	ldr	r2, [r3, #4]
 8016b48:	4b0e      	ldr	r3, [pc, #56]	@ (8016b84 <vPortFree+0xbc>)
 8016b4a:	681b      	ldr	r3, [r3, #0]
 8016b4c:	43db      	mvns	r3, r3
 8016b4e:	401a      	ands	r2, r3
 8016b50:	693b      	ldr	r3, [r7, #16]
 8016b52:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016b54:	f7fe fecc 	bl	80158f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016b58:	693b      	ldr	r3, [r7, #16]
 8016b5a:	685a      	ldr	r2, [r3, #4]
 8016b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8016b88 <vPortFree+0xc0>)
 8016b5e:	681b      	ldr	r3, [r3, #0]
 8016b60:	4413      	add	r3, r2
 8016b62:	4a09      	ldr	r2, [pc, #36]	@ (8016b88 <vPortFree+0xc0>)
 8016b64:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016b66:	6938      	ldr	r0, [r7, #16]
 8016b68:	f000 f874 	bl	8016c54 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8016b6c:	4b07      	ldr	r3, [pc, #28]	@ (8016b8c <vPortFree+0xc4>)
 8016b6e:	681b      	ldr	r3, [r3, #0]
 8016b70:	3301      	adds	r3, #1
 8016b72:	4a06      	ldr	r2, [pc, #24]	@ (8016b8c <vPortFree+0xc4>)
 8016b74:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8016b76:	f7fe fec9 	bl	801590c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8016b7a:	bf00      	nop
 8016b7c:	3718      	adds	r7, #24
 8016b7e:	46bd      	mov	sp, r7
 8016b80:	bd80      	pop	{r7, pc}
 8016b82:	bf00      	nop
 8016b84:	24006808 	.word	0x24006808
 8016b88:	240067f8 	.word	0x240067f8
 8016b8c:	24006804 	.word	0x24006804

08016b90 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016b90:	b480      	push	{r7}
 8016b92:	b085      	sub	sp, #20
 8016b94:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016b96:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8016b9a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016b9c:	4b27      	ldr	r3, [pc, #156]	@ (8016c3c <prvHeapInit+0xac>)
 8016b9e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016ba0:	68fb      	ldr	r3, [r7, #12]
 8016ba2:	f003 0307 	and.w	r3, r3, #7
 8016ba6:	2b00      	cmp	r3, #0
 8016ba8:	d00c      	beq.n	8016bc4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016baa:	68fb      	ldr	r3, [r7, #12]
 8016bac:	3307      	adds	r3, #7
 8016bae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016bb0:	68fb      	ldr	r3, [r7, #12]
 8016bb2:	f023 0307 	bic.w	r3, r3, #7
 8016bb6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016bb8:	68ba      	ldr	r2, [r7, #8]
 8016bba:	68fb      	ldr	r3, [r7, #12]
 8016bbc:	1ad3      	subs	r3, r2, r3
 8016bbe:	4a1f      	ldr	r2, [pc, #124]	@ (8016c3c <prvHeapInit+0xac>)
 8016bc0:	4413      	add	r3, r2
 8016bc2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016bc4:	68fb      	ldr	r3, [r7, #12]
 8016bc6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8016c40 <prvHeapInit+0xb0>)
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016bce:	4b1c      	ldr	r3, [pc, #112]	@ (8016c40 <prvHeapInit+0xb0>)
 8016bd0:	2200      	movs	r2, #0
 8016bd2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	68ba      	ldr	r2, [r7, #8]
 8016bd8:	4413      	add	r3, r2
 8016bda:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016bdc:	2208      	movs	r2, #8
 8016bde:	68fb      	ldr	r3, [r7, #12]
 8016be0:	1a9b      	subs	r3, r3, r2
 8016be2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016be4:	68fb      	ldr	r3, [r7, #12]
 8016be6:	f023 0307 	bic.w	r3, r3, #7
 8016bea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016bec:	68fb      	ldr	r3, [r7, #12]
 8016bee:	4a15      	ldr	r2, [pc, #84]	@ (8016c44 <prvHeapInit+0xb4>)
 8016bf0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016bf2:	4b14      	ldr	r3, [pc, #80]	@ (8016c44 <prvHeapInit+0xb4>)
 8016bf4:	681b      	ldr	r3, [r3, #0]
 8016bf6:	2200      	movs	r2, #0
 8016bf8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8016bfa:	4b12      	ldr	r3, [pc, #72]	@ (8016c44 <prvHeapInit+0xb4>)
 8016bfc:	681b      	ldr	r3, [r3, #0]
 8016bfe:	2200      	movs	r2, #0
 8016c00:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016c06:	683b      	ldr	r3, [r7, #0]
 8016c08:	68fa      	ldr	r2, [r7, #12]
 8016c0a:	1ad2      	subs	r2, r2, r3
 8016c0c:	683b      	ldr	r3, [r7, #0]
 8016c0e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016c10:	4b0c      	ldr	r3, [pc, #48]	@ (8016c44 <prvHeapInit+0xb4>)
 8016c12:	681a      	ldr	r2, [r3, #0]
 8016c14:	683b      	ldr	r3, [r7, #0]
 8016c16:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016c18:	683b      	ldr	r3, [r7, #0]
 8016c1a:	685b      	ldr	r3, [r3, #4]
 8016c1c:	4a0a      	ldr	r2, [pc, #40]	@ (8016c48 <prvHeapInit+0xb8>)
 8016c1e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016c20:	683b      	ldr	r3, [r7, #0]
 8016c22:	685b      	ldr	r3, [r3, #4]
 8016c24:	4a09      	ldr	r2, [pc, #36]	@ (8016c4c <prvHeapInit+0xbc>)
 8016c26:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016c28:	4b09      	ldr	r3, [pc, #36]	@ (8016c50 <prvHeapInit+0xc0>)
 8016c2a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8016c2e:	601a      	str	r2, [r3, #0]
}
 8016c30:	bf00      	nop
 8016c32:	3714      	adds	r7, #20
 8016c34:	46bd      	mov	sp, r7
 8016c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c3a:	4770      	bx	lr
 8016c3c:	24002bec 	.word	0x24002bec
 8016c40:	240067ec 	.word	0x240067ec
 8016c44:	240067f4 	.word	0x240067f4
 8016c48:	240067fc 	.word	0x240067fc
 8016c4c:	240067f8 	.word	0x240067f8
 8016c50:	24006808 	.word	0x24006808

08016c54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016c54:	b480      	push	{r7}
 8016c56:	b085      	sub	sp, #20
 8016c58:	af00      	add	r7, sp, #0
 8016c5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016c5c:	4b28      	ldr	r3, [pc, #160]	@ (8016d00 <prvInsertBlockIntoFreeList+0xac>)
 8016c5e:	60fb      	str	r3, [r7, #12]
 8016c60:	e002      	b.n	8016c68 <prvInsertBlockIntoFreeList+0x14>
 8016c62:	68fb      	ldr	r3, [r7, #12]
 8016c64:	681b      	ldr	r3, [r3, #0]
 8016c66:	60fb      	str	r3, [r7, #12]
 8016c68:	68fb      	ldr	r3, [r7, #12]
 8016c6a:	681b      	ldr	r3, [r3, #0]
 8016c6c:	687a      	ldr	r2, [r7, #4]
 8016c6e:	429a      	cmp	r2, r3
 8016c70:	d8f7      	bhi.n	8016c62 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016c72:	68fb      	ldr	r3, [r7, #12]
 8016c74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016c76:	68fb      	ldr	r3, [r7, #12]
 8016c78:	685b      	ldr	r3, [r3, #4]
 8016c7a:	68ba      	ldr	r2, [r7, #8]
 8016c7c:	4413      	add	r3, r2
 8016c7e:	687a      	ldr	r2, [r7, #4]
 8016c80:	429a      	cmp	r2, r3
 8016c82:	d108      	bne.n	8016c96 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016c84:	68fb      	ldr	r3, [r7, #12]
 8016c86:	685a      	ldr	r2, [r3, #4]
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	685b      	ldr	r3, [r3, #4]
 8016c8c:	441a      	add	r2, r3
 8016c8e:	68fb      	ldr	r3, [r7, #12]
 8016c90:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016c92:	68fb      	ldr	r3, [r7, #12]
 8016c94:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	685b      	ldr	r3, [r3, #4]
 8016c9e:	68ba      	ldr	r2, [r7, #8]
 8016ca0:	441a      	add	r2, r3
 8016ca2:	68fb      	ldr	r3, [r7, #12]
 8016ca4:	681b      	ldr	r3, [r3, #0]
 8016ca6:	429a      	cmp	r2, r3
 8016ca8:	d118      	bne.n	8016cdc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8016caa:	68fb      	ldr	r3, [r7, #12]
 8016cac:	681a      	ldr	r2, [r3, #0]
 8016cae:	4b15      	ldr	r3, [pc, #84]	@ (8016d04 <prvInsertBlockIntoFreeList+0xb0>)
 8016cb0:	681b      	ldr	r3, [r3, #0]
 8016cb2:	429a      	cmp	r2, r3
 8016cb4:	d00d      	beq.n	8016cd2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	685a      	ldr	r2, [r3, #4]
 8016cba:	68fb      	ldr	r3, [r7, #12]
 8016cbc:	681b      	ldr	r3, [r3, #0]
 8016cbe:	685b      	ldr	r3, [r3, #4]
 8016cc0:	441a      	add	r2, r3
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016cc6:	68fb      	ldr	r3, [r7, #12]
 8016cc8:	681b      	ldr	r3, [r3, #0]
 8016cca:	681a      	ldr	r2, [r3, #0]
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	601a      	str	r2, [r3, #0]
 8016cd0:	e008      	b.n	8016ce4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8016d04 <prvInsertBlockIntoFreeList+0xb0>)
 8016cd4:	681a      	ldr	r2, [r3, #0]
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	601a      	str	r2, [r3, #0]
 8016cda:	e003      	b.n	8016ce4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016cdc:	68fb      	ldr	r3, [r7, #12]
 8016cde:	681a      	ldr	r2, [r3, #0]
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016ce4:	68fa      	ldr	r2, [r7, #12]
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	429a      	cmp	r2, r3
 8016cea:	d002      	beq.n	8016cf2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016cec:	68fb      	ldr	r3, [r7, #12]
 8016cee:	687a      	ldr	r2, [r7, #4]
 8016cf0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016cf2:	bf00      	nop
 8016cf4:	3714      	adds	r7, #20
 8016cf6:	46bd      	mov	sp, r7
 8016cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cfc:	4770      	bx	lr
 8016cfe:	bf00      	nop
 8016d00:	240067ec 	.word	0x240067ec
 8016d04:	240067f4 	.word	0x240067f4

08016d08 <atof>:
 8016d08:	2100      	movs	r1, #0
 8016d0a:	f000 bdb7 	b.w	801787c <strtod>

08016d0e <atoi>:
 8016d0e:	220a      	movs	r2, #10
 8016d10:	2100      	movs	r1, #0
 8016d12:	f000 be39 	b.w	8017988 <strtol>

08016d16 <sulp>:
 8016d16:	b570      	push	{r4, r5, r6, lr}
 8016d18:	4604      	mov	r4, r0
 8016d1a:	460d      	mov	r5, r1
 8016d1c:	4616      	mov	r6, r2
 8016d1e:	ec45 4b10 	vmov	d0, r4, r5
 8016d22:	f001 ffa9 	bl	8018c78 <__ulp>
 8016d26:	b17e      	cbz	r6, 8016d48 <sulp+0x32>
 8016d28:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016d2c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8016d30:	2b00      	cmp	r3, #0
 8016d32:	dd09      	ble.n	8016d48 <sulp+0x32>
 8016d34:	051b      	lsls	r3, r3, #20
 8016d36:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8016d3a:	2000      	movs	r0, #0
 8016d3c:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8016d40:	ec41 0b17 	vmov	d7, r0, r1
 8016d44:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016d48:	bd70      	pop	{r4, r5, r6, pc}
 8016d4a:	0000      	movs	r0, r0
 8016d4c:	0000      	movs	r0, r0
	...

08016d50 <_strtod_l>:
 8016d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d54:	ed2d 8b0a 	vpush	{d8-d12}
 8016d58:	b097      	sub	sp, #92	@ 0x5c
 8016d5a:	4688      	mov	r8, r1
 8016d5c:	920e      	str	r2, [sp, #56]	@ 0x38
 8016d5e:	2200      	movs	r2, #0
 8016d60:	9212      	str	r2, [sp, #72]	@ 0x48
 8016d62:	9005      	str	r0, [sp, #20]
 8016d64:	f04f 0a00 	mov.w	sl, #0
 8016d68:	f04f 0b00 	mov.w	fp, #0
 8016d6c:	460a      	mov	r2, r1
 8016d6e:	9211      	str	r2, [sp, #68]	@ 0x44
 8016d70:	7811      	ldrb	r1, [r2, #0]
 8016d72:	292b      	cmp	r1, #43	@ 0x2b
 8016d74:	d04c      	beq.n	8016e10 <_strtod_l+0xc0>
 8016d76:	d839      	bhi.n	8016dec <_strtod_l+0x9c>
 8016d78:	290d      	cmp	r1, #13
 8016d7a:	d833      	bhi.n	8016de4 <_strtod_l+0x94>
 8016d7c:	2908      	cmp	r1, #8
 8016d7e:	d833      	bhi.n	8016de8 <_strtod_l+0x98>
 8016d80:	2900      	cmp	r1, #0
 8016d82:	d03c      	beq.n	8016dfe <_strtod_l+0xae>
 8016d84:	2200      	movs	r2, #0
 8016d86:	9208      	str	r2, [sp, #32]
 8016d88:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8016d8a:	782a      	ldrb	r2, [r5, #0]
 8016d8c:	2a30      	cmp	r2, #48	@ 0x30
 8016d8e:	f040 80b5 	bne.w	8016efc <_strtod_l+0x1ac>
 8016d92:	786a      	ldrb	r2, [r5, #1]
 8016d94:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016d98:	2a58      	cmp	r2, #88	@ 0x58
 8016d9a:	d170      	bne.n	8016e7e <_strtod_l+0x12e>
 8016d9c:	9302      	str	r3, [sp, #8]
 8016d9e:	9b08      	ldr	r3, [sp, #32]
 8016da0:	9301      	str	r3, [sp, #4]
 8016da2:	ab12      	add	r3, sp, #72	@ 0x48
 8016da4:	9300      	str	r3, [sp, #0]
 8016da6:	4a8b      	ldr	r2, [pc, #556]	@ (8016fd4 <_strtod_l+0x284>)
 8016da8:	9805      	ldr	r0, [sp, #20]
 8016daa:	ab13      	add	r3, sp, #76	@ 0x4c
 8016dac:	a911      	add	r1, sp, #68	@ 0x44
 8016dae:	f001 f85d 	bl	8017e6c <__gethex>
 8016db2:	f010 060f 	ands.w	r6, r0, #15
 8016db6:	4604      	mov	r4, r0
 8016db8:	d005      	beq.n	8016dc6 <_strtod_l+0x76>
 8016dba:	2e06      	cmp	r6, #6
 8016dbc:	d12a      	bne.n	8016e14 <_strtod_l+0xc4>
 8016dbe:	3501      	adds	r5, #1
 8016dc0:	2300      	movs	r3, #0
 8016dc2:	9511      	str	r5, [sp, #68]	@ 0x44
 8016dc4:	9308      	str	r3, [sp, #32]
 8016dc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	f040 852f 	bne.w	801782c <_strtod_l+0xadc>
 8016dce:	9b08      	ldr	r3, [sp, #32]
 8016dd0:	ec4b ab10 	vmov	d0, sl, fp
 8016dd4:	b1cb      	cbz	r3, 8016e0a <_strtod_l+0xba>
 8016dd6:	eeb1 0b40 	vneg.f64	d0, d0
 8016dda:	b017      	add	sp, #92	@ 0x5c
 8016ddc:	ecbd 8b0a 	vpop	{d8-d12}
 8016de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016de4:	2920      	cmp	r1, #32
 8016de6:	d1cd      	bne.n	8016d84 <_strtod_l+0x34>
 8016de8:	3201      	adds	r2, #1
 8016dea:	e7c0      	b.n	8016d6e <_strtod_l+0x1e>
 8016dec:	292d      	cmp	r1, #45	@ 0x2d
 8016dee:	d1c9      	bne.n	8016d84 <_strtod_l+0x34>
 8016df0:	2101      	movs	r1, #1
 8016df2:	9108      	str	r1, [sp, #32]
 8016df4:	1c51      	adds	r1, r2, #1
 8016df6:	9111      	str	r1, [sp, #68]	@ 0x44
 8016df8:	7852      	ldrb	r2, [r2, #1]
 8016dfa:	2a00      	cmp	r2, #0
 8016dfc:	d1c4      	bne.n	8016d88 <_strtod_l+0x38>
 8016dfe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016e00:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	f040 850f 	bne.w	8017828 <_strtod_l+0xad8>
 8016e0a:	ec4b ab10 	vmov	d0, sl, fp
 8016e0e:	e7e4      	b.n	8016dda <_strtod_l+0x8a>
 8016e10:	2100      	movs	r1, #0
 8016e12:	e7ee      	b.n	8016df2 <_strtod_l+0xa2>
 8016e14:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016e16:	b13a      	cbz	r2, 8016e28 <_strtod_l+0xd8>
 8016e18:	2135      	movs	r1, #53	@ 0x35
 8016e1a:	a814      	add	r0, sp, #80	@ 0x50
 8016e1c:	f002 f823 	bl	8018e66 <__copybits>
 8016e20:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016e22:	9805      	ldr	r0, [sp, #20]
 8016e24:	f001 fbf4 	bl	8018610 <_Bfree>
 8016e28:	1e73      	subs	r3, r6, #1
 8016e2a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8016e2c:	2b04      	cmp	r3, #4
 8016e2e:	d806      	bhi.n	8016e3e <_strtod_l+0xee>
 8016e30:	e8df f003 	tbb	[pc, r3]
 8016e34:	201d0314 	.word	0x201d0314
 8016e38:	14          	.byte	0x14
 8016e39:	00          	.byte	0x00
 8016e3a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8016e3e:	05e3      	lsls	r3, r4, #23
 8016e40:	bf48      	it	mi
 8016e42:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8016e46:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016e4a:	0d1b      	lsrs	r3, r3, #20
 8016e4c:	051b      	lsls	r3, r3, #20
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	d1b9      	bne.n	8016dc6 <_strtod_l+0x76>
 8016e52:	f000 ff15 	bl	8017c80 <__errno>
 8016e56:	2322      	movs	r3, #34	@ 0x22
 8016e58:	6003      	str	r3, [r0, #0]
 8016e5a:	e7b4      	b.n	8016dc6 <_strtod_l+0x76>
 8016e5c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8016e60:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8016e64:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8016e68:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016e6c:	e7e7      	b.n	8016e3e <_strtod_l+0xee>
 8016e6e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8016fdc <_strtod_l+0x28c>
 8016e72:	e7e4      	b.n	8016e3e <_strtod_l+0xee>
 8016e74:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8016e78:	f04f 3aff 	mov.w	sl, #4294967295
 8016e7c:	e7df      	b.n	8016e3e <_strtod_l+0xee>
 8016e7e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016e80:	1c5a      	adds	r2, r3, #1
 8016e82:	9211      	str	r2, [sp, #68]	@ 0x44
 8016e84:	785b      	ldrb	r3, [r3, #1]
 8016e86:	2b30      	cmp	r3, #48	@ 0x30
 8016e88:	d0f9      	beq.n	8016e7e <_strtod_l+0x12e>
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	d09b      	beq.n	8016dc6 <_strtod_l+0x76>
 8016e8e:	2301      	movs	r3, #1
 8016e90:	2600      	movs	r6, #0
 8016e92:	9307      	str	r3, [sp, #28]
 8016e94:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016e96:	930a      	str	r3, [sp, #40]	@ 0x28
 8016e98:	46b1      	mov	r9, r6
 8016e9a:	4635      	mov	r5, r6
 8016e9c:	220a      	movs	r2, #10
 8016e9e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8016ea0:	7804      	ldrb	r4, [r0, #0]
 8016ea2:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8016ea6:	b2d9      	uxtb	r1, r3
 8016ea8:	2909      	cmp	r1, #9
 8016eaa:	d929      	bls.n	8016f00 <_strtod_l+0x1b0>
 8016eac:	494a      	ldr	r1, [pc, #296]	@ (8016fd8 <_strtod_l+0x288>)
 8016eae:	2201      	movs	r2, #1
 8016eb0:	f000 fe8e 	bl	8017bd0 <strncmp>
 8016eb4:	b378      	cbz	r0, 8016f16 <_strtod_l+0x1c6>
 8016eb6:	2000      	movs	r0, #0
 8016eb8:	4622      	mov	r2, r4
 8016eba:	462b      	mov	r3, r5
 8016ebc:	4607      	mov	r7, r0
 8016ebe:	9006      	str	r0, [sp, #24]
 8016ec0:	2a65      	cmp	r2, #101	@ 0x65
 8016ec2:	d001      	beq.n	8016ec8 <_strtod_l+0x178>
 8016ec4:	2a45      	cmp	r2, #69	@ 0x45
 8016ec6:	d117      	bne.n	8016ef8 <_strtod_l+0x1a8>
 8016ec8:	b91b      	cbnz	r3, 8016ed2 <_strtod_l+0x182>
 8016eca:	9b07      	ldr	r3, [sp, #28]
 8016ecc:	4303      	orrs	r3, r0
 8016ece:	d096      	beq.n	8016dfe <_strtod_l+0xae>
 8016ed0:	2300      	movs	r3, #0
 8016ed2:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8016ed6:	f108 0201 	add.w	r2, r8, #1
 8016eda:	9211      	str	r2, [sp, #68]	@ 0x44
 8016edc:	f898 2001 	ldrb.w	r2, [r8, #1]
 8016ee0:	2a2b      	cmp	r2, #43	@ 0x2b
 8016ee2:	d06b      	beq.n	8016fbc <_strtod_l+0x26c>
 8016ee4:	2a2d      	cmp	r2, #45	@ 0x2d
 8016ee6:	d071      	beq.n	8016fcc <_strtod_l+0x27c>
 8016ee8:	f04f 0e00 	mov.w	lr, #0
 8016eec:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8016ef0:	2c09      	cmp	r4, #9
 8016ef2:	d979      	bls.n	8016fe8 <_strtod_l+0x298>
 8016ef4:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8016ef8:	2400      	movs	r4, #0
 8016efa:	e094      	b.n	8017026 <_strtod_l+0x2d6>
 8016efc:	2300      	movs	r3, #0
 8016efe:	e7c7      	b.n	8016e90 <_strtod_l+0x140>
 8016f00:	2d08      	cmp	r5, #8
 8016f02:	f100 0001 	add.w	r0, r0, #1
 8016f06:	bfd4      	ite	le
 8016f08:	fb02 3909 	mlale	r9, r2, r9, r3
 8016f0c:	fb02 3606 	mlagt	r6, r2, r6, r3
 8016f10:	3501      	adds	r5, #1
 8016f12:	9011      	str	r0, [sp, #68]	@ 0x44
 8016f14:	e7c3      	b.n	8016e9e <_strtod_l+0x14e>
 8016f16:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016f18:	1c5a      	adds	r2, r3, #1
 8016f1a:	9211      	str	r2, [sp, #68]	@ 0x44
 8016f1c:	785a      	ldrb	r2, [r3, #1]
 8016f1e:	b375      	cbz	r5, 8016f7e <_strtod_l+0x22e>
 8016f20:	4607      	mov	r7, r0
 8016f22:	462b      	mov	r3, r5
 8016f24:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8016f28:	2909      	cmp	r1, #9
 8016f2a:	d913      	bls.n	8016f54 <_strtod_l+0x204>
 8016f2c:	2101      	movs	r1, #1
 8016f2e:	9106      	str	r1, [sp, #24]
 8016f30:	e7c6      	b.n	8016ec0 <_strtod_l+0x170>
 8016f32:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016f34:	1c5a      	adds	r2, r3, #1
 8016f36:	9211      	str	r2, [sp, #68]	@ 0x44
 8016f38:	785a      	ldrb	r2, [r3, #1]
 8016f3a:	3001      	adds	r0, #1
 8016f3c:	2a30      	cmp	r2, #48	@ 0x30
 8016f3e:	d0f8      	beq.n	8016f32 <_strtod_l+0x1e2>
 8016f40:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8016f44:	2b08      	cmp	r3, #8
 8016f46:	f200 8476 	bhi.w	8017836 <_strtod_l+0xae6>
 8016f4a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016f4c:	930a      	str	r3, [sp, #40]	@ 0x28
 8016f4e:	4607      	mov	r7, r0
 8016f50:	2000      	movs	r0, #0
 8016f52:	4603      	mov	r3, r0
 8016f54:	3a30      	subs	r2, #48	@ 0x30
 8016f56:	f100 0101 	add.w	r1, r0, #1
 8016f5a:	d023      	beq.n	8016fa4 <_strtod_l+0x254>
 8016f5c:	440f      	add	r7, r1
 8016f5e:	eb00 0c03 	add.w	ip, r0, r3
 8016f62:	4619      	mov	r1, r3
 8016f64:	240a      	movs	r4, #10
 8016f66:	4561      	cmp	r1, ip
 8016f68:	d10b      	bne.n	8016f82 <_strtod_l+0x232>
 8016f6a:	1c5c      	adds	r4, r3, #1
 8016f6c:	4403      	add	r3, r0
 8016f6e:	2b08      	cmp	r3, #8
 8016f70:	4404      	add	r4, r0
 8016f72:	dc11      	bgt.n	8016f98 <_strtod_l+0x248>
 8016f74:	230a      	movs	r3, #10
 8016f76:	fb03 2909 	mla	r9, r3, r9, r2
 8016f7a:	2100      	movs	r1, #0
 8016f7c:	e013      	b.n	8016fa6 <_strtod_l+0x256>
 8016f7e:	4628      	mov	r0, r5
 8016f80:	e7dc      	b.n	8016f3c <_strtod_l+0x1ec>
 8016f82:	2908      	cmp	r1, #8
 8016f84:	f101 0101 	add.w	r1, r1, #1
 8016f88:	dc02      	bgt.n	8016f90 <_strtod_l+0x240>
 8016f8a:	fb04 f909 	mul.w	r9, r4, r9
 8016f8e:	e7ea      	b.n	8016f66 <_strtod_l+0x216>
 8016f90:	2910      	cmp	r1, #16
 8016f92:	bfd8      	it	le
 8016f94:	4366      	mulle	r6, r4
 8016f96:	e7e6      	b.n	8016f66 <_strtod_l+0x216>
 8016f98:	2b0f      	cmp	r3, #15
 8016f9a:	dcee      	bgt.n	8016f7a <_strtod_l+0x22a>
 8016f9c:	230a      	movs	r3, #10
 8016f9e:	fb03 2606 	mla	r6, r3, r6, r2
 8016fa2:	e7ea      	b.n	8016f7a <_strtod_l+0x22a>
 8016fa4:	461c      	mov	r4, r3
 8016fa6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016fa8:	1c5a      	adds	r2, r3, #1
 8016faa:	9211      	str	r2, [sp, #68]	@ 0x44
 8016fac:	785a      	ldrb	r2, [r3, #1]
 8016fae:	4608      	mov	r0, r1
 8016fb0:	4623      	mov	r3, r4
 8016fb2:	e7b7      	b.n	8016f24 <_strtod_l+0x1d4>
 8016fb4:	2301      	movs	r3, #1
 8016fb6:	2700      	movs	r7, #0
 8016fb8:	9306      	str	r3, [sp, #24]
 8016fba:	e786      	b.n	8016eca <_strtod_l+0x17a>
 8016fbc:	f04f 0e00 	mov.w	lr, #0
 8016fc0:	f108 0202 	add.w	r2, r8, #2
 8016fc4:	9211      	str	r2, [sp, #68]	@ 0x44
 8016fc6:	f898 2002 	ldrb.w	r2, [r8, #2]
 8016fca:	e78f      	b.n	8016eec <_strtod_l+0x19c>
 8016fcc:	f04f 0e01 	mov.w	lr, #1
 8016fd0:	e7f6      	b.n	8016fc0 <_strtod_l+0x270>
 8016fd2:	bf00      	nop
 8016fd4:	08019d58 	.word	0x08019d58
 8016fd8:	08019d34 	.word	0x08019d34
 8016fdc:	7ff00000 	.word	0x7ff00000
 8016fe0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8016fe2:	1c54      	adds	r4, r2, #1
 8016fe4:	9411      	str	r4, [sp, #68]	@ 0x44
 8016fe6:	7852      	ldrb	r2, [r2, #1]
 8016fe8:	2a30      	cmp	r2, #48	@ 0x30
 8016fea:	d0f9      	beq.n	8016fe0 <_strtod_l+0x290>
 8016fec:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8016ff0:	2c08      	cmp	r4, #8
 8016ff2:	d881      	bhi.n	8016ef8 <_strtod_l+0x1a8>
 8016ff4:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8016ff8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8016ffa:	9209      	str	r2, [sp, #36]	@ 0x24
 8016ffc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8016ffe:	1c51      	adds	r1, r2, #1
 8017000:	9111      	str	r1, [sp, #68]	@ 0x44
 8017002:	7852      	ldrb	r2, [r2, #1]
 8017004:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8017008:	2c09      	cmp	r4, #9
 801700a:	d938      	bls.n	801707e <_strtod_l+0x32e>
 801700c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801700e:	1b0c      	subs	r4, r1, r4
 8017010:	2c08      	cmp	r4, #8
 8017012:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8017016:	dc02      	bgt.n	801701e <_strtod_l+0x2ce>
 8017018:	4564      	cmp	r4, ip
 801701a:	bfa8      	it	ge
 801701c:	4664      	movge	r4, ip
 801701e:	f1be 0f00 	cmp.w	lr, #0
 8017022:	d000      	beq.n	8017026 <_strtod_l+0x2d6>
 8017024:	4264      	negs	r4, r4
 8017026:	2b00      	cmp	r3, #0
 8017028:	d14e      	bne.n	80170c8 <_strtod_l+0x378>
 801702a:	9b07      	ldr	r3, [sp, #28]
 801702c:	4318      	orrs	r0, r3
 801702e:	f47f aeca 	bne.w	8016dc6 <_strtod_l+0x76>
 8017032:	9b06      	ldr	r3, [sp, #24]
 8017034:	2b00      	cmp	r3, #0
 8017036:	f47f aee2 	bne.w	8016dfe <_strtod_l+0xae>
 801703a:	2a69      	cmp	r2, #105	@ 0x69
 801703c:	d027      	beq.n	801708e <_strtod_l+0x33e>
 801703e:	dc24      	bgt.n	801708a <_strtod_l+0x33a>
 8017040:	2a49      	cmp	r2, #73	@ 0x49
 8017042:	d024      	beq.n	801708e <_strtod_l+0x33e>
 8017044:	2a4e      	cmp	r2, #78	@ 0x4e
 8017046:	f47f aeda 	bne.w	8016dfe <_strtod_l+0xae>
 801704a:	4997      	ldr	r1, [pc, #604]	@ (80172a8 <_strtod_l+0x558>)
 801704c:	a811      	add	r0, sp, #68	@ 0x44
 801704e:	f001 f92f 	bl	80182b0 <__match>
 8017052:	2800      	cmp	r0, #0
 8017054:	f43f aed3 	beq.w	8016dfe <_strtod_l+0xae>
 8017058:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801705a:	781b      	ldrb	r3, [r3, #0]
 801705c:	2b28      	cmp	r3, #40	@ 0x28
 801705e:	d12d      	bne.n	80170bc <_strtod_l+0x36c>
 8017060:	4992      	ldr	r1, [pc, #584]	@ (80172ac <_strtod_l+0x55c>)
 8017062:	aa14      	add	r2, sp, #80	@ 0x50
 8017064:	a811      	add	r0, sp, #68	@ 0x44
 8017066:	f001 f937 	bl	80182d8 <__hexnan>
 801706a:	2805      	cmp	r0, #5
 801706c:	d126      	bne.n	80170bc <_strtod_l+0x36c>
 801706e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017070:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8017074:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8017078:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801707c:	e6a3      	b.n	8016dc6 <_strtod_l+0x76>
 801707e:	240a      	movs	r4, #10
 8017080:	fb04 2c0c 	mla	ip, r4, ip, r2
 8017084:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8017088:	e7b8      	b.n	8016ffc <_strtod_l+0x2ac>
 801708a:	2a6e      	cmp	r2, #110	@ 0x6e
 801708c:	e7db      	b.n	8017046 <_strtod_l+0x2f6>
 801708e:	4988      	ldr	r1, [pc, #544]	@ (80172b0 <_strtod_l+0x560>)
 8017090:	a811      	add	r0, sp, #68	@ 0x44
 8017092:	f001 f90d 	bl	80182b0 <__match>
 8017096:	2800      	cmp	r0, #0
 8017098:	f43f aeb1 	beq.w	8016dfe <_strtod_l+0xae>
 801709c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801709e:	4985      	ldr	r1, [pc, #532]	@ (80172b4 <_strtod_l+0x564>)
 80170a0:	3b01      	subs	r3, #1
 80170a2:	a811      	add	r0, sp, #68	@ 0x44
 80170a4:	9311      	str	r3, [sp, #68]	@ 0x44
 80170a6:	f001 f903 	bl	80182b0 <__match>
 80170aa:	b910      	cbnz	r0, 80170b2 <_strtod_l+0x362>
 80170ac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80170ae:	3301      	adds	r3, #1
 80170b0:	9311      	str	r3, [sp, #68]	@ 0x44
 80170b2:	f8df b214 	ldr.w	fp, [pc, #532]	@ 80172c8 <_strtod_l+0x578>
 80170b6:	f04f 0a00 	mov.w	sl, #0
 80170ba:	e684      	b.n	8016dc6 <_strtod_l+0x76>
 80170bc:	487e      	ldr	r0, [pc, #504]	@ (80172b8 <_strtod_l+0x568>)
 80170be:	f000 fe1b 	bl	8017cf8 <nan>
 80170c2:	ec5b ab10 	vmov	sl, fp, d0
 80170c6:	e67e      	b.n	8016dc6 <_strtod_l+0x76>
 80170c8:	ee07 9a90 	vmov	s15, r9
 80170cc:	1be2      	subs	r2, r4, r7
 80170ce:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80170d2:	2d00      	cmp	r5, #0
 80170d4:	bf08      	it	eq
 80170d6:	461d      	moveq	r5, r3
 80170d8:	2b10      	cmp	r3, #16
 80170da:	9209      	str	r2, [sp, #36]	@ 0x24
 80170dc:	461a      	mov	r2, r3
 80170de:	bfa8      	it	ge
 80170e0:	2210      	movge	r2, #16
 80170e2:	2b09      	cmp	r3, #9
 80170e4:	ec5b ab17 	vmov	sl, fp, d7
 80170e8:	dc15      	bgt.n	8017116 <_strtod_l+0x3c6>
 80170ea:	1be1      	subs	r1, r4, r7
 80170ec:	2900      	cmp	r1, #0
 80170ee:	f43f ae6a 	beq.w	8016dc6 <_strtod_l+0x76>
 80170f2:	eba4 0107 	sub.w	r1, r4, r7
 80170f6:	dd72      	ble.n	80171de <_strtod_l+0x48e>
 80170f8:	2916      	cmp	r1, #22
 80170fa:	dc59      	bgt.n	80171b0 <_strtod_l+0x460>
 80170fc:	4b6f      	ldr	r3, [pc, #444]	@ (80172bc <_strtod_l+0x56c>)
 80170fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017100:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017104:	ed93 7b00 	vldr	d7, [r3]
 8017108:	ec4b ab16 	vmov	d6, sl, fp
 801710c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017110:	ec5b ab17 	vmov	sl, fp, d7
 8017114:	e657      	b.n	8016dc6 <_strtod_l+0x76>
 8017116:	4969      	ldr	r1, [pc, #420]	@ (80172bc <_strtod_l+0x56c>)
 8017118:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801711c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8017120:	ee06 6a90 	vmov	s13, r6
 8017124:	2b0f      	cmp	r3, #15
 8017126:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 801712a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801712e:	ec5b ab16 	vmov	sl, fp, d6
 8017132:	ddda      	ble.n	80170ea <_strtod_l+0x39a>
 8017134:	1a9a      	subs	r2, r3, r2
 8017136:	1be1      	subs	r1, r4, r7
 8017138:	440a      	add	r2, r1
 801713a:	2a00      	cmp	r2, #0
 801713c:	f340 8094 	ble.w	8017268 <_strtod_l+0x518>
 8017140:	f012 000f 	ands.w	r0, r2, #15
 8017144:	d00a      	beq.n	801715c <_strtod_l+0x40c>
 8017146:	495d      	ldr	r1, [pc, #372]	@ (80172bc <_strtod_l+0x56c>)
 8017148:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801714c:	ed91 7b00 	vldr	d7, [r1]
 8017150:	ec4b ab16 	vmov	d6, sl, fp
 8017154:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017158:	ec5b ab17 	vmov	sl, fp, d7
 801715c:	f032 020f 	bics.w	r2, r2, #15
 8017160:	d073      	beq.n	801724a <_strtod_l+0x4fa>
 8017162:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8017166:	dd47      	ble.n	80171f8 <_strtod_l+0x4a8>
 8017168:	2400      	movs	r4, #0
 801716a:	4625      	mov	r5, r4
 801716c:	9407      	str	r4, [sp, #28]
 801716e:	4626      	mov	r6, r4
 8017170:	9a05      	ldr	r2, [sp, #20]
 8017172:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80172c8 <_strtod_l+0x578>
 8017176:	2322      	movs	r3, #34	@ 0x22
 8017178:	6013      	str	r3, [r2, #0]
 801717a:	f04f 0a00 	mov.w	sl, #0
 801717e:	9b07      	ldr	r3, [sp, #28]
 8017180:	2b00      	cmp	r3, #0
 8017182:	f43f ae20 	beq.w	8016dc6 <_strtod_l+0x76>
 8017186:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8017188:	9805      	ldr	r0, [sp, #20]
 801718a:	f001 fa41 	bl	8018610 <_Bfree>
 801718e:	9805      	ldr	r0, [sp, #20]
 8017190:	4631      	mov	r1, r6
 8017192:	f001 fa3d 	bl	8018610 <_Bfree>
 8017196:	9805      	ldr	r0, [sp, #20]
 8017198:	4629      	mov	r1, r5
 801719a:	f001 fa39 	bl	8018610 <_Bfree>
 801719e:	9907      	ldr	r1, [sp, #28]
 80171a0:	9805      	ldr	r0, [sp, #20]
 80171a2:	f001 fa35 	bl	8018610 <_Bfree>
 80171a6:	9805      	ldr	r0, [sp, #20]
 80171a8:	4621      	mov	r1, r4
 80171aa:	f001 fa31 	bl	8018610 <_Bfree>
 80171ae:	e60a      	b.n	8016dc6 <_strtod_l+0x76>
 80171b0:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 80171b4:	1be0      	subs	r0, r4, r7
 80171b6:	4281      	cmp	r1, r0
 80171b8:	dbbc      	blt.n	8017134 <_strtod_l+0x3e4>
 80171ba:	4a40      	ldr	r2, [pc, #256]	@ (80172bc <_strtod_l+0x56c>)
 80171bc:	f1c3 030f 	rsb	r3, r3, #15
 80171c0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80171c4:	ed91 7b00 	vldr	d7, [r1]
 80171c8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80171ca:	ec4b ab16 	vmov	d6, sl, fp
 80171ce:	1acb      	subs	r3, r1, r3
 80171d0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80171d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80171d8:	ed92 6b00 	vldr	d6, [r2]
 80171dc:	e796      	b.n	801710c <_strtod_l+0x3bc>
 80171de:	3116      	adds	r1, #22
 80171e0:	dba8      	blt.n	8017134 <_strtod_l+0x3e4>
 80171e2:	4b36      	ldr	r3, [pc, #216]	@ (80172bc <_strtod_l+0x56c>)
 80171e4:	1b3c      	subs	r4, r7, r4
 80171e6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80171ea:	ed94 7b00 	vldr	d7, [r4]
 80171ee:	ec4b ab16 	vmov	d6, sl, fp
 80171f2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80171f6:	e78b      	b.n	8017110 <_strtod_l+0x3c0>
 80171f8:	2000      	movs	r0, #0
 80171fa:	ec4b ab17 	vmov	d7, sl, fp
 80171fe:	4e30      	ldr	r6, [pc, #192]	@ (80172c0 <_strtod_l+0x570>)
 8017200:	1112      	asrs	r2, r2, #4
 8017202:	4601      	mov	r1, r0
 8017204:	2a01      	cmp	r2, #1
 8017206:	dc23      	bgt.n	8017250 <_strtod_l+0x500>
 8017208:	b108      	cbz	r0, 801720e <_strtod_l+0x4be>
 801720a:	ec5b ab17 	vmov	sl, fp, d7
 801720e:	4a2c      	ldr	r2, [pc, #176]	@ (80172c0 <_strtod_l+0x570>)
 8017210:	482c      	ldr	r0, [pc, #176]	@ (80172c4 <_strtod_l+0x574>)
 8017212:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8017216:	ed92 7b00 	vldr	d7, [r2]
 801721a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801721e:	ec4b ab16 	vmov	d6, sl, fp
 8017222:	4a29      	ldr	r2, [pc, #164]	@ (80172c8 <_strtod_l+0x578>)
 8017224:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017228:	ee17 1a90 	vmov	r1, s15
 801722c:	400a      	ands	r2, r1
 801722e:	4282      	cmp	r2, r0
 8017230:	ec5b ab17 	vmov	sl, fp, d7
 8017234:	d898      	bhi.n	8017168 <_strtod_l+0x418>
 8017236:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 801723a:	4282      	cmp	r2, r0
 801723c:	bf86      	itte	hi
 801723e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80172cc <_strtod_l+0x57c>
 8017242:	f04f 3aff 	movhi.w	sl, #4294967295
 8017246:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 801724a:	2200      	movs	r2, #0
 801724c:	9206      	str	r2, [sp, #24]
 801724e:	e076      	b.n	801733e <_strtod_l+0x5ee>
 8017250:	f012 0f01 	tst.w	r2, #1
 8017254:	d004      	beq.n	8017260 <_strtod_l+0x510>
 8017256:	ed96 6b00 	vldr	d6, [r6]
 801725a:	2001      	movs	r0, #1
 801725c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017260:	3101      	adds	r1, #1
 8017262:	1052      	asrs	r2, r2, #1
 8017264:	3608      	adds	r6, #8
 8017266:	e7cd      	b.n	8017204 <_strtod_l+0x4b4>
 8017268:	d0ef      	beq.n	801724a <_strtod_l+0x4fa>
 801726a:	4252      	negs	r2, r2
 801726c:	f012 000f 	ands.w	r0, r2, #15
 8017270:	d00a      	beq.n	8017288 <_strtod_l+0x538>
 8017272:	4912      	ldr	r1, [pc, #72]	@ (80172bc <_strtod_l+0x56c>)
 8017274:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8017278:	ed91 7b00 	vldr	d7, [r1]
 801727c:	ec4b ab16 	vmov	d6, sl, fp
 8017280:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8017284:	ec5b ab17 	vmov	sl, fp, d7
 8017288:	1112      	asrs	r2, r2, #4
 801728a:	d0de      	beq.n	801724a <_strtod_l+0x4fa>
 801728c:	2a1f      	cmp	r2, #31
 801728e:	dd1f      	ble.n	80172d0 <_strtod_l+0x580>
 8017290:	2400      	movs	r4, #0
 8017292:	4625      	mov	r5, r4
 8017294:	9407      	str	r4, [sp, #28]
 8017296:	4626      	mov	r6, r4
 8017298:	9a05      	ldr	r2, [sp, #20]
 801729a:	2322      	movs	r3, #34	@ 0x22
 801729c:	f04f 0a00 	mov.w	sl, #0
 80172a0:	f04f 0b00 	mov.w	fp, #0
 80172a4:	6013      	str	r3, [r2, #0]
 80172a6:	e76a      	b.n	801717e <_strtod_l+0x42e>
 80172a8:	08019d3f 	.word	0x08019d3f
 80172ac:	08019d44 	.word	0x08019d44
 80172b0:	08019d36 	.word	0x08019d36
 80172b4:	08019d39 	.word	0x08019d39
 80172b8:	0801a0bb 	.word	0x0801a0bb
 80172bc:	08019fb8 	.word	0x08019fb8
 80172c0:	08019f90 	.word	0x08019f90
 80172c4:	7ca00000 	.word	0x7ca00000
 80172c8:	7ff00000 	.word	0x7ff00000
 80172cc:	7fefffff 	.word	0x7fefffff
 80172d0:	f012 0110 	ands.w	r1, r2, #16
 80172d4:	bf18      	it	ne
 80172d6:	216a      	movne	r1, #106	@ 0x6a
 80172d8:	9106      	str	r1, [sp, #24]
 80172da:	ec4b ab17 	vmov	d7, sl, fp
 80172de:	49b0      	ldr	r1, [pc, #704]	@ (80175a0 <_strtod_l+0x850>)
 80172e0:	2000      	movs	r0, #0
 80172e2:	07d6      	lsls	r6, r2, #31
 80172e4:	d504      	bpl.n	80172f0 <_strtod_l+0x5a0>
 80172e6:	ed91 6b00 	vldr	d6, [r1]
 80172ea:	2001      	movs	r0, #1
 80172ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 80172f0:	1052      	asrs	r2, r2, #1
 80172f2:	f101 0108 	add.w	r1, r1, #8
 80172f6:	d1f4      	bne.n	80172e2 <_strtod_l+0x592>
 80172f8:	b108      	cbz	r0, 80172fe <_strtod_l+0x5ae>
 80172fa:	ec5b ab17 	vmov	sl, fp, d7
 80172fe:	9a06      	ldr	r2, [sp, #24]
 8017300:	b1b2      	cbz	r2, 8017330 <_strtod_l+0x5e0>
 8017302:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8017306:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 801730a:	2a00      	cmp	r2, #0
 801730c:	4658      	mov	r0, fp
 801730e:	dd0f      	ble.n	8017330 <_strtod_l+0x5e0>
 8017310:	2a1f      	cmp	r2, #31
 8017312:	dd55      	ble.n	80173c0 <_strtod_l+0x670>
 8017314:	2a34      	cmp	r2, #52	@ 0x34
 8017316:	bfde      	ittt	le
 8017318:	f04f 32ff 	movle.w	r2, #4294967295
 801731c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8017320:	408a      	lslle	r2, r1
 8017322:	f04f 0a00 	mov.w	sl, #0
 8017326:	bfcc      	ite	gt
 8017328:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801732c:	ea02 0b00 	andle.w	fp, r2, r0
 8017330:	ec4b ab17 	vmov	d7, sl, fp
 8017334:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801733c:	d0a8      	beq.n	8017290 <_strtod_l+0x540>
 801733e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017340:	9805      	ldr	r0, [sp, #20]
 8017342:	f8cd 9000 	str.w	r9, [sp]
 8017346:	462a      	mov	r2, r5
 8017348:	f001 f9ca 	bl	80186e0 <__s2b>
 801734c:	9007      	str	r0, [sp, #28]
 801734e:	2800      	cmp	r0, #0
 8017350:	f43f af0a 	beq.w	8017168 <_strtod_l+0x418>
 8017354:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017356:	1b3f      	subs	r7, r7, r4
 8017358:	2b00      	cmp	r3, #0
 801735a:	bfb4      	ite	lt
 801735c:	463b      	movlt	r3, r7
 801735e:	2300      	movge	r3, #0
 8017360:	930a      	str	r3, [sp, #40]	@ 0x28
 8017362:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017364:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8017590 <_strtod_l+0x840>
 8017368:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801736c:	2400      	movs	r4, #0
 801736e:	930d      	str	r3, [sp, #52]	@ 0x34
 8017370:	4625      	mov	r5, r4
 8017372:	9b07      	ldr	r3, [sp, #28]
 8017374:	9805      	ldr	r0, [sp, #20]
 8017376:	6859      	ldr	r1, [r3, #4]
 8017378:	f001 f90a 	bl	8018590 <_Balloc>
 801737c:	4606      	mov	r6, r0
 801737e:	2800      	cmp	r0, #0
 8017380:	f43f aef6 	beq.w	8017170 <_strtod_l+0x420>
 8017384:	9b07      	ldr	r3, [sp, #28]
 8017386:	691a      	ldr	r2, [r3, #16]
 8017388:	ec4b ab19 	vmov	d9, sl, fp
 801738c:	3202      	adds	r2, #2
 801738e:	f103 010c 	add.w	r1, r3, #12
 8017392:	0092      	lsls	r2, r2, #2
 8017394:	300c      	adds	r0, #12
 8017396:	f000 fca0 	bl	8017cda <memcpy>
 801739a:	eeb0 0b49 	vmov.f64	d0, d9
 801739e:	9805      	ldr	r0, [sp, #20]
 80173a0:	aa14      	add	r2, sp, #80	@ 0x50
 80173a2:	a913      	add	r1, sp, #76	@ 0x4c
 80173a4:	f001 fcd8 	bl	8018d58 <__d2b>
 80173a8:	9012      	str	r0, [sp, #72]	@ 0x48
 80173aa:	2800      	cmp	r0, #0
 80173ac:	f43f aee0 	beq.w	8017170 <_strtod_l+0x420>
 80173b0:	9805      	ldr	r0, [sp, #20]
 80173b2:	2101      	movs	r1, #1
 80173b4:	f001 fa2a 	bl	801880c <__i2b>
 80173b8:	4605      	mov	r5, r0
 80173ba:	b940      	cbnz	r0, 80173ce <_strtod_l+0x67e>
 80173bc:	2500      	movs	r5, #0
 80173be:	e6d7      	b.n	8017170 <_strtod_l+0x420>
 80173c0:	f04f 31ff 	mov.w	r1, #4294967295
 80173c4:	fa01 f202 	lsl.w	r2, r1, r2
 80173c8:	ea02 0a0a 	and.w	sl, r2, sl
 80173cc:	e7b0      	b.n	8017330 <_strtod_l+0x5e0>
 80173ce:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 80173d0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80173d2:	2f00      	cmp	r7, #0
 80173d4:	bfab      	itete	ge
 80173d6:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 80173d8:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 80173da:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 80173de:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 80173e2:	bfac      	ite	ge
 80173e4:	eb07 0903 	addge.w	r9, r7, r3
 80173e8:	eba3 0807 	sublt.w	r8, r3, r7
 80173ec:	9b06      	ldr	r3, [sp, #24]
 80173ee:	1aff      	subs	r7, r7, r3
 80173f0:	4417      	add	r7, r2
 80173f2:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 80173f6:	4a6b      	ldr	r2, [pc, #428]	@ (80175a4 <_strtod_l+0x854>)
 80173f8:	3f01      	subs	r7, #1
 80173fa:	4297      	cmp	r7, r2
 80173fc:	da51      	bge.n	80174a2 <_strtod_l+0x752>
 80173fe:	1bd1      	subs	r1, r2, r7
 8017400:	291f      	cmp	r1, #31
 8017402:	eba3 0301 	sub.w	r3, r3, r1
 8017406:	f04f 0201 	mov.w	r2, #1
 801740a:	dc3e      	bgt.n	801748a <_strtod_l+0x73a>
 801740c:	408a      	lsls	r2, r1
 801740e:	920c      	str	r2, [sp, #48]	@ 0x30
 8017410:	2200      	movs	r2, #0
 8017412:	920b      	str	r2, [sp, #44]	@ 0x2c
 8017414:	eb09 0703 	add.w	r7, r9, r3
 8017418:	4498      	add	r8, r3
 801741a:	9b06      	ldr	r3, [sp, #24]
 801741c:	45b9      	cmp	r9, r7
 801741e:	4498      	add	r8, r3
 8017420:	464b      	mov	r3, r9
 8017422:	bfa8      	it	ge
 8017424:	463b      	movge	r3, r7
 8017426:	4543      	cmp	r3, r8
 8017428:	bfa8      	it	ge
 801742a:	4643      	movge	r3, r8
 801742c:	2b00      	cmp	r3, #0
 801742e:	bfc2      	ittt	gt
 8017430:	1aff      	subgt	r7, r7, r3
 8017432:	eba8 0803 	subgt.w	r8, r8, r3
 8017436:	eba9 0903 	subgt.w	r9, r9, r3
 801743a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801743c:	2b00      	cmp	r3, #0
 801743e:	dd16      	ble.n	801746e <_strtod_l+0x71e>
 8017440:	4629      	mov	r1, r5
 8017442:	9805      	ldr	r0, [sp, #20]
 8017444:	461a      	mov	r2, r3
 8017446:	f001 faa1 	bl	801898c <__pow5mult>
 801744a:	4605      	mov	r5, r0
 801744c:	2800      	cmp	r0, #0
 801744e:	d0b5      	beq.n	80173bc <_strtod_l+0x66c>
 8017450:	4601      	mov	r1, r0
 8017452:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8017454:	9805      	ldr	r0, [sp, #20]
 8017456:	f001 f9ef 	bl	8018838 <__multiply>
 801745a:	900f      	str	r0, [sp, #60]	@ 0x3c
 801745c:	2800      	cmp	r0, #0
 801745e:	f43f ae87 	beq.w	8017170 <_strtod_l+0x420>
 8017462:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8017464:	9805      	ldr	r0, [sp, #20]
 8017466:	f001 f8d3 	bl	8018610 <_Bfree>
 801746a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801746c:	9312      	str	r3, [sp, #72]	@ 0x48
 801746e:	2f00      	cmp	r7, #0
 8017470:	dc1b      	bgt.n	80174aa <_strtod_l+0x75a>
 8017472:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017474:	2b00      	cmp	r3, #0
 8017476:	dd21      	ble.n	80174bc <_strtod_l+0x76c>
 8017478:	4631      	mov	r1, r6
 801747a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801747c:	9805      	ldr	r0, [sp, #20]
 801747e:	f001 fa85 	bl	801898c <__pow5mult>
 8017482:	4606      	mov	r6, r0
 8017484:	b9d0      	cbnz	r0, 80174bc <_strtod_l+0x76c>
 8017486:	2600      	movs	r6, #0
 8017488:	e672      	b.n	8017170 <_strtod_l+0x420>
 801748a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 801748e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8017492:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8017496:	37e2      	adds	r7, #226	@ 0xe2
 8017498:	fa02 f107 	lsl.w	r1, r2, r7
 801749c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801749e:	920c      	str	r2, [sp, #48]	@ 0x30
 80174a0:	e7b8      	b.n	8017414 <_strtod_l+0x6c4>
 80174a2:	2200      	movs	r2, #0
 80174a4:	920b      	str	r2, [sp, #44]	@ 0x2c
 80174a6:	2201      	movs	r2, #1
 80174a8:	e7f9      	b.n	801749e <_strtod_l+0x74e>
 80174aa:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80174ac:	9805      	ldr	r0, [sp, #20]
 80174ae:	463a      	mov	r2, r7
 80174b0:	f001 fac6 	bl	8018a40 <__lshift>
 80174b4:	9012      	str	r0, [sp, #72]	@ 0x48
 80174b6:	2800      	cmp	r0, #0
 80174b8:	d1db      	bne.n	8017472 <_strtod_l+0x722>
 80174ba:	e659      	b.n	8017170 <_strtod_l+0x420>
 80174bc:	f1b8 0f00 	cmp.w	r8, #0
 80174c0:	dd07      	ble.n	80174d2 <_strtod_l+0x782>
 80174c2:	4631      	mov	r1, r6
 80174c4:	9805      	ldr	r0, [sp, #20]
 80174c6:	4642      	mov	r2, r8
 80174c8:	f001 faba 	bl	8018a40 <__lshift>
 80174cc:	4606      	mov	r6, r0
 80174ce:	2800      	cmp	r0, #0
 80174d0:	d0d9      	beq.n	8017486 <_strtod_l+0x736>
 80174d2:	f1b9 0f00 	cmp.w	r9, #0
 80174d6:	dd08      	ble.n	80174ea <_strtod_l+0x79a>
 80174d8:	4629      	mov	r1, r5
 80174da:	9805      	ldr	r0, [sp, #20]
 80174dc:	464a      	mov	r2, r9
 80174de:	f001 faaf 	bl	8018a40 <__lshift>
 80174e2:	4605      	mov	r5, r0
 80174e4:	2800      	cmp	r0, #0
 80174e6:	f43f ae43 	beq.w	8017170 <_strtod_l+0x420>
 80174ea:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80174ec:	9805      	ldr	r0, [sp, #20]
 80174ee:	4632      	mov	r2, r6
 80174f0:	f001 fb2e 	bl	8018b50 <__mdiff>
 80174f4:	4604      	mov	r4, r0
 80174f6:	2800      	cmp	r0, #0
 80174f8:	f43f ae3a 	beq.w	8017170 <_strtod_l+0x420>
 80174fc:	2300      	movs	r3, #0
 80174fe:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8017502:	60c3      	str	r3, [r0, #12]
 8017504:	4629      	mov	r1, r5
 8017506:	f001 fb07 	bl	8018b18 <__mcmp>
 801750a:	2800      	cmp	r0, #0
 801750c:	da4e      	bge.n	80175ac <_strtod_l+0x85c>
 801750e:	ea58 080a 	orrs.w	r8, r8, sl
 8017512:	d174      	bne.n	80175fe <_strtod_l+0x8ae>
 8017514:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017518:	2b00      	cmp	r3, #0
 801751a:	d170      	bne.n	80175fe <_strtod_l+0x8ae>
 801751c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8017520:	0d1b      	lsrs	r3, r3, #20
 8017522:	051b      	lsls	r3, r3, #20
 8017524:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8017528:	d969      	bls.n	80175fe <_strtod_l+0x8ae>
 801752a:	6963      	ldr	r3, [r4, #20]
 801752c:	b913      	cbnz	r3, 8017534 <_strtod_l+0x7e4>
 801752e:	6923      	ldr	r3, [r4, #16]
 8017530:	2b01      	cmp	r3, #1
 8017532:	dd64      	ble.n	80175fe <_strtod_l+0x8ae>
 8017534:	4621      	mov	r1, r4
 8017536:	2201      	movs	r2, #1
 8017538:	9805      	ldr	r0, [sp, #20]
 801753a:	f001 fa81 	bl	8018a40 <__lshift>
 801753e:	4629      	mov	r1, r5
 8017540:	4604      	mov	r4, r0
 8017542:	f001 fae9 	bl	8018b18 <__mcmp>
 8017546:	2800      	cmp	r0, #0
 8017548:	dd59      	ble.n	80175fe <_strtod_l+0x8ae>
 801754a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801754e:	9a06      	ldr	r2, [sp, #24]
 8017550:	0d1b      	lsrs	r3, r3, #20
 8017552:	051b      	lsls	r3, r3, #20
 8017554:	2a00      	cmp	r2, #0
 8017556:	d070      	beq.n	801763a <_strtod_l+0x8ea>
 8017558:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801755c:	d86d      	bhi.n	801763a <_strtod_l+0x8ea>
 801755e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8017562:	f67f ae99 	bls.w	8017298 <_strtod_l+0x548>
 8017566:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8017598 <_strtod_l+0x848>
 801756a:	ec4b ab16 	vmov	d6, sl, fp
 801756e:	4b0e      	ldr	r3, [pc, #56]	@ (80175a8 <_strtod_l+0x858>)
 8017570:	ee26 7b07 	vmul.f64	d7, d6, d7
 8017574:	ee17 2a90 	vmov	r2, s15
 8017578:	4013      	ands	r3, r2
 801757a:	ec5b ab17 	vmov	sl, fp, d7
 801757e:	2b00      	cmp	r3, #0
 8017580:	f47f ae01 	bne.w	8017186 <_strtod_l+0x436>
 8017584:	9a05      	ldr	r2, [sp, #20]
 8017586:	2322      	movs	r3, #34	@ 0x22
 8017588:	6013      	str	r3, [r2, #0]
 801758a:	e5fc      	b.n	8017186 <_strtod_l+0x436>
 801758c:	f3af 8000 	nop.w
 8017590:	ffc00000 	.word	0xffc00000
 8017594:	41dfffff 	.word	0x41dfffff
 8017598:	00000000 	.word	0x00000000
 801759c:	39500000 	.word	0x39500000
 80175a0:	08019d70 	.word	0x08019d70
 80175a4:	fffffc02 	.word	0xfffffc02
 80175a8:	7ff00000 	.word	0x7ff00000
 80175ac:	46d9      	mov	r9, fp
 80175ae:	d15d      	bne.n	801766c <_strtod_l+0x91c>
 80175b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80175b4:	f1b8 0f00 	cmp.w	r8, #0
 80175b8:	d02a      	beq.n	8017610 <_strtod_l+0x8c0>
 80175ba:	4aab      	ldr	r2, [pc, #684]	@ (8017868 <_strtod_l+0xb18>)
 80175bc:	4293      	cmp	r3, r2
 80175be:	d12a      	bne.n	8017616 <_strtod_l+0x8c6>
 80175c0:	9b06      	ldr	r3, [sp, #24]
 80175c2:	4652      	mov	r2, sl
 80175c4:	b1fb      	cbz	r3, 8017606 <_strtod_l+0x8b6>
 80175c6:	4ba9      	ldr	r3, [pc, #676]	@ (801786c <_strtod_l+0xb1c>)
 80175c8:	ea0b 0303 	and.w	r3, fp, r3
 80175cc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80175d0:	f04f 31ff 	mov.w	r1, #4294967295
 80175d4:	d81a      	bhi.n	801760c <_strtod_l+0x8bc>
 80175d6:	0d1b      	lsrs	r3, r3, #20
 80175d8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80175dc:	fa01 f303 	lsl.w	r3, r1, r3
 80175e0:	429a      	cmp	r2, r3
 80175e2:	d118      	bne.n	8017616 <_strtod_l+0x8c6>
 80175e4:	4ba2      	ldr	r3, [pc, #648]	@ (8017870 <_strtod_l+0xb20>)
 80175e6:	4599      	cmp	r9, r3
 80175e8:	d102      	bne.n	80175f0 <_strtod_l+0x8a0>
 80175ea:	3201      	adds	r2, #1
 80175ec:	f43f adc0 	beq.w	8017170 <_strtod_l+0x420>
 80175f0:	4b9e      	ldr	r3, [pc, #632]	@ (801786c <_strtod_l+0xb1c>)
 80175f2:	ea09 0303 	and.w	r3, r9, r3
 80175f6:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 80175fa:	f04f 0a00 	mov.w	sl, #0
 80175fe:	9b06      	ldr	r3, [sp, #24]
 8017600:	2b00      	cmp	r3, #0
 8017602:	d1b0      	bne.n	8017566 <_strtod_l+0x816>
 8017604:	e5bf      	b.n	8017186 <_strtod_l+0x436>
 8017606:	f04f 33ff 	mov.w	r3, #4294967295
 801760a:	e7e9      	b.n	80175e0 <_strtod_l+0x890>
 801760c:	460b      	mov	r3, r1
 801760e:	e7e7      	b.n	80175e0 <_strtod_l+0x890>
 8017610:	ea53 030a 	orrs.w	r3, r3, sl
 8017614:	d099      	beq.n	801754a <_strtod_l+0x7fa>
 8017616:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017618:	b1c3      	cbz	r3, 801764c <_strtod_l+0x8fc>
 801761a:	ea13 0f09 	tst.w	r3, r9
 801761e:	d0ee      	beq.n	80175fe <_strtod_l+0x8ae>
 8017620:	9a06      	ldr	r2, [sp, #24]
 8017622:	4650      	mov	r0, sl
 8017624:	4659      	mov	r1, fp
 8017626:	f1b8 0f00 	cmp.w	r8, #0
 801762a:	d013      	beq.n	8017654 <_strtod_l+0x904>
 801762c:	f7ff fb73 	bl	8016d16 <sulp>
 8017630:	ee39 7b00 	vadd.f64	d7, d9, d0
 8017634:	ec5b ab17 	vmov	sl, fp, d7
 8017638:	e7e1      	b.n	80175fe <_strtod_l+0x8ae>
 801763a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801763e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8017642:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8017646:	f04f 3aff 	mov.w	sl, #4294967295
 801764a:	e7d8      	b.n	80175fe <_strtod_l+0x8ae>
 801764c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801764e:	ea13 0f0a 	tst.w	r3, sl
 8017652:	e7e4      	b.n	801761e <_strtod_l+0x8ce>
 8017654:	f7ff fb5f 	bl	8016d16 <sulp>
 8017658:	ee39 0b40 	vsub.f64	d0, d9, d0
 801765c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8017660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017664:	ec5b ab10 	vmov	sl, fp, d0
 8017668:	d1c9      	bne.n	80175fe <_strtod_l+0x8ae>
 801766a:	e615      	b.n	8017298 <_strtod_l+0x548>
 801766c:	4629      	mov	r1, r5
 801766e:	4620      	mov	r0, r4
 8017670:	f001 fbca 	bl	8018e08 <__ratio>
 8017674:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8017678:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801767c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017680:	d85d      	bhi.n	801773e <_strtod_l+0x9ee>
 8017682:	f1b8 0f00 	cmp.w	r8, #0
 8017686:	d164      	bne.n	8017752 <_strtod_l+0xa02>
 8017688:	f1ba 0f00 	cmp.w	sl, #0
 801768c:	d14b      	bne.n	8017726 <_strtod_l+0x9d6>
 801768e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017692:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8017696:	2b00      	cmp	r3, #0
 8017698:	d160      	bne.n	801775c <_strtod_l+0xa0c>
 801769a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 801769e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80176a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176a6:	d401      	bmi.n	80176ac <_strtod_l+0x95c>
 80176a8:	ee20 8b08 	vmul.f64	d8, d0, d8
 80176ac:	eeb1 ab48 	vneg.f64	d10, d8
 80176b0:	486e      	ldr	r0, [pc, #440]	@ (801786c <_strtod_l+0xb1c>)
 80176b2:	4970      	ldr	r1, [pc, #448]	@ (8017874 <_strtod_l+0xb24>)
 80176b4:	ea09 0700 	and.w	r7, r9, r0
 80176b8:	428f      	cmp	r7, r1
 80176ba:	ec53 2b1a 	vmov	r2, r3, d10
 80176be:	d17d      	bne.n	80177bc <_strtod_l+0xa6c>
 80176c0:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 80176c4:	ec4b ab1c 	vmov	d12, sl, fp
 80176c8:	eeb0 0b4c 	vmov.f64	d0, d12
 80176cc:	f001 fad4 	bl	8018c78 <__ulp>
 80176d0:	4866      	ldr	r0, [pc, #408]	@ (801786c <_strtod_l+0xb1c>)
 80176d2:	eea0 cb0a 	vfma.f64	d12, d0, d10
 80176d6:	ee1c 3a90 	vmov	r3, s25
 80176da:	4a67      	ldr	r2, [pc, #412]	@ (8017878 <_strtod_l+0xb28>)
 80176dc:	ea03 0100 	and.w	r1, r3, r0
 80176e0:	4291      	cmp	r1, r2
 80176e2:	ec5b ab1c 	vmov	sl, fp, d12
 80176e6:	d93c      	bls.n	8017762 <_strtod_l+0xa12>
 80176e8:	ee19 2a90 	vmov	r2, s19
 80176ec:	4b60      	ldr	r3, [pc, #384]	@ (8017870 <_strtod_l+0xb20>)
 80176ee:	429a      	cmp	r2, r3
 80176f0:	d104      	bne.n	80176fc <_strtod_l+0x9ac>
 80176f2:	ee19 3a10 	vmov	r3, s18
 80176f6:	3301      	adds	r3, #1
 80176f8:	f43f ad3a 	beq.w	8017170 <_strtod_l+0x420>
 80176fc:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8017870 <_strtod_l+0xb20>
 8017700:	f04f 3aff 	mov.w	sl, #4294967295
 8017704:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8017706:	9805      	ldr	r0, [sp, #20]
 8017708:	f000 ff82 	bl	8018610 <_Bfree>
 801770c:	9805      	ldr	r0, [sp, #20]
 801770e:	4631      	mov	r1, r6
 8017710:	f000 ff7e 	bl	8018610 <_Bfree>
 8017714:	9805      	ldr	r0, [sp, #20]
 8017716:	4629      	mov	r1, r5
 8017718:	f000 ff7a 	bl	8018610 <_Bfree>
 801771c:	9805      	ldr	r0, [sp, #20]
 801771e:	4621      	mov	r1, r4
 8017720:	f000 ff76 	bl	8018610 <_Bfree>
 8017724:	e625      	b.n	8017372 <_strtod_l+0x622>
 8017726:	f1ba 0f01 	cmp.w	sl, #1
 801772a:	d103      	bne.n	8017734 <_strtod_l+0x9e4>
 801772c:	f1bb 0f00 	cmp.w	fp, #0
 8017730:	f43f adb2 	beq.w	8017298 <_strtod_l+0x548>
 8017734:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8017738:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 801773c:	e7b8      	b.n	80176b0 <_strtod_l+0x960>
 801773e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8017742:	ee20 8b08 	vmul.f64	d8, d0, d8
 8017746:	f1b8 0f00 	cmp.w	r8, #0
 801774a:	d0af      	beq.n	80176ac <_strtod_l+0x95c>
 801774c:	eeb0 ab48 	vmov.f64	d10, d8
 8017750:	e7ae      	b.n	80176b0 <_strtod_l+0x960>
 8017752:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8017756:	eeb0 8b4a 	vmov.f64	d8, d10
 801775a:	e7a9      	b.n	80176b0 <_strtod_l+0x960>
 801775c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8017760:	e7a6      	b.n	80176b0 <_strtod_l+0x960>
 8017762:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8017766:	9b06      	ldr	r3, [sp, #24]
 8017768:	46d9      	mov	r9, fp
 801776a:	2b00      	cmp	r3, #0
 801776c:	d1ca      	bne.n	8017704 <_strtod_l+0x9b4>
 801776e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8017772:	0d1b      	lsrs	r3, r3, #20
 8017774:	051b      	lsls	r3, r3, #20
 8017776:	429f      	cmp	r7, r3
 8017778:	d1c4      	bne.n	8017704 <_strtod_l+0x9b4>
 801777a:	ec51 0b18 	vmov	r0, r1, d8
 801777e:	f7e9 f83b 	bl	80007f8 <__aeabi_d2lz>
 8017782:	f7e8 ffa3 	bl	80006cc <__aeabi_l2d>
 8017786:	f3cb 0913 	ubfx	r9, fp, #0, #20
 801778a:	ec41 0b17 	vmov	d7, r0, r1
 801778e:	ea49 090a 	orr.w	r9, r9, sl
 8017792:	ea59 0908 	orrs.w	r9, r9, r8
 8017796:	ee38 8b47 	vsub.f64	d8, d8, d7
 801779a:	d03c      	beq.n	8017816 <_strtod_l+0xac6>
 801779c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8017850 <_strtod_l+0xb00>
 80177a0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80177a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177a8:	f53f aced 	bmi.w	8017186 <_strtod_l+0x436>
 80177ac:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8017858 <_strtod_l+0xb08>
 80177b0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80177b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177b8:	dda4      	ble.n	8017704 <_strtod_l+0x9b4>
 80177ba:	e4e4      	b.n	8017186 <_strtod_l+0x436>
 80177bc:	9906      	ldr	r1, [sp, #24]
 80177be:	b1e1      	cbz	r1, 80177fa <_strtod_l+0xaaa>
 80177c0:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 80177c4:	d819      	bhi.n	80177fa <_strtod_l+0xaaa>
 80177c6:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80177ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177ce:	d811      	bhi.n	80177f4 <_strtod_l+0xaa4>
 80177d0:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 80177d4:	ee18 3a10 	vmov	r3, s16
 80177d8:	2b01      	cmp	r3, #1
 80177da:	bf38      	it	cc
 80177dc:	2301      	movcc	r3, #1
 80177de:	ee08 3a10 	vmov	s16, r3
 80177e2:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 80177e6:	f1b8 0f00 	cmp.w	r8, #0
 80177ea:	d111      	bne.n	8017810 <_strtod_l+0xac0>
 80177ec:	eeb1 7b48 	vneg.f64	d7, d8
 80177f0:	ec53 2b17 	vmov	r2, r3, d7
 80177f4:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 80177f8:	1bcb      	subs	r3, r1, r7
 80177fa:	eeb0 0b49 	vmov.f64	d0, d9
 80177fe:	ec43 2b1a 	vmov	d10, r2, r3
 8017802:	f001 fa39 	bl	8018c78 <__ulp>
 8017806:	eeaa 9b00 	vfma.f64	d9, d10, d0
 801780a:	ec5b ab19 	vmov	sl, fp, d9
 801780e:	e7aa      	b.n	8017766 <_strtod_l+0xa16>
 8017810:	eeb0 7b48 	vmov.f64	d7, d8
 8017814:	e7ec      	b.n	80177f0 <_strtod_l+0xaa0>
 8017816:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8017860 <_strtod_l+0xb10>
 801781a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801781e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017822:	f57f af6f 	bpl.w	8017704 <_strtod_l+0x9b4>
 8017826:	e4ae      	b.n	8017186 <_strtod_l+0x436>
 8017828:	2300      	movs	r3, #0
 801782a:	9308      	str	r3, [sp, #32]
 801782c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801782e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017830:	6013      	str	r3, [r2, #0]
 8017832:	f7ff bacc 	b.w	8016dce <_strtod_l+0x7e>
 8017836:	2a65      	cmp	r2, #101	@ 0x65
 8017838:	f43f abbc 	beq.w	8016fb4 <_strtod_l+0x264>
 801783c:	2a45      	cmp	r2, #69	@ 0x45
 801783e:	f43f abb9 	beq.w	8016fb4 <_strtod_l+0x264>
 8017842:	2301      	movs	r3, #1
 8017844:	9306      	str	r3, [sp, #24]
 8017846:	f7ff bbf0 	b.w	801702a <_strtod_l+0x2da>
 801784a:	bf00      	nop
 801784c:	f3af 8000 	nop.w
 8017850:	94a03595 	.word	0x94a03595
 8017854:	3fdfffff 	.word	0x3fdfffff
 8017858:	35afe535 	.word	0x35afe535
 801785c:	3fe00000 	.word	0x3fe00000
 8017860:	94a03595 	.word	0x94a03595
 8017864:	3fcfffff 	.word	0x3fcfffff
 8017868:	000fffff 	.word	0x000fffff
 801786c:	7ff00000 	.word	0x7ff00000
 8017870:	7fefffff 	.word	0x7fefffff
 8017874:	7fe00000 	.word	0x7fe00000
 8017878:	7c9fffff 	.word	0x7c9fffff

0801787c <strtod>:
 801787c:	460a      	mov	r2, r1
 801787e:	4601      	mov	r1, r0
 8017880:	4802      	ldr	r0, [pc, #8]	@ (801788c <strtod+0x10>)
 8017882:	4b03      	ldr	r3, [pc, #12]	@ (8017890 <strtod+0x14>)
 8017884:	6800      	ldr	r0, [r0, #0]
 8017886:	f7ff ba63 	b.w	8016d50 <_strtod_l>
 801788a:	bf00      	nop
 801788c:	24000240 	.word	0x24000240
 8017890:	240000d4 	.word	0x240000d4

08017894 <_strtol_l.constprop.0>:
 8017894:	2b24      	cmp	r3, #36	@ 0x24
 8017896:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801789a:	4686      	mov	lr, r0
 801789c:	4690      	mov	r8, r2
 801789e:	d801      	bhi.n	80178a4 <_strtol_l.constprop.0+0x10>
 80178a0:	2b01      	cmp	r3, #1
 80178a2:	d106      	bne.n	80178b2 <_strtol_l.constprop.0+0x1e>
 80178a4:	f000 f9ec 	bl	8017c80 <__errno>
 80178a8:	2316      	movs	r3, #22
 80178aa:	6003      	str	r3, [r0, #0]
 80178ac:	2000      	movs	r0, #0
 80178ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178b2:	4834      	ldr	r0, [pc, #208]	@ (8017984 <_strtol_l.constprop.0+0xf0>)
 80178b4:	460d      	mov	r5, r1
 80178b6:	462a      	mov	r2, r5
 80178b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80178bc:	5d06      	ldrb	r6, [r0, r4]
 80178be:	f016 0608 	ands.w	r6, r6, #8
 80178c2:	d1f8      	bne.n	80178b6 <_strtol_l.constprop.0+0x22>
 80178c4:	2c2d      	cmp	r4, #45	@ 0x2d
 80178c6:	d12d      	bne.n	8017924 <_strtol_l.constprop.0+0x90>
 80178c8:	782c      	ldrb	r4, [r5, #0]
 80178ca:	2601      	movs	r6, #1
 80178cc:	1c95      	adds	r5, r2, #2
 80178ce:	f033 0210 	bics.w	r2, r3, #16
 80178d2:	d109      	bne.n	80178e8 <_strtol_l.constprop.0+0x54>
 80178d4:	2c30      	cmp	r4, #48	@ 0x30
 80178d6:	d12a      	bne.n	801792e <_strtol_l.constprop.0+0x9a>
 80178d8:	782a      	ldrb	r2, [r5, #0]
 80178da:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80178de:	2a58      	cmp	r2, #88	@ 0x58
 80178e0:	d125      	bne.n	801792e <_strtol_l.constprop.0+0x9a>
 80178e2:	786c      	ldrb	r4, [r5, #1]
 80178e4:	2310      	movs	r3, #16
 80178e6:	3502      	adds	r5, #2
 80178e8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80178ec:	f10c 3cff 	add.w	ip, ip, #4294967295
 80178f0:	2200      	movs	r2, #0
 80178f2:	fbbc f9f3 	udiv	r9, ip, r3
 80178f6:	4610      	mov	r0, r2
 80178f8:	fb03 ca19 	mls	sl, r3, r9, ip
 80178fc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8017900:	2f09      	cmp	r7, #9
 8017902:	d81b      	bhi.n	801793c <_strtol_l.constprop.0+0xa8>
 8017904:	463c      	mov	r4, r7
 8017906:	42a3      	cmp	r3, r4
 8017908:	dd27      	ble.n	801795a <_strtol_l.constprop.0+0xc6>
 801790a:	1c57      	adds	r7, r2, #1
 801790c:	d007      	beq.n	801791e <_strtol_l.constprop.0+0x8a>
 801790e:	4581      	cmp	r9, r0
 8017910:	d320      	bcc.n	8017954 <_strtol_l.constprop.0+0xc0>
 8017912:	d101      	bne.n	8017918 <_strtol_l.constprop.0+0x84>
 8017914:	45a2      	cmp	sl, r4
 8017916:	db1d      	blt.n	8017954 <_strtol_l.constprop.0+0xc0>
 8017918:	fb00 4003 	mla	r0, r0, r3, r4
 801791c:	2201      	movs	r2, #1
 801791e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017922:	e7eb      	b.n	80178fc <_strtol_l.constprop.0+0x68>
 8017924:	2c2b      	cmp	r4, #43	@ 0x2b
 8017926:	bf04      	itt	eq
 8017928:	782c      	ldrbeq	r4, [r5, #0]
 801792a:	1c95      	addeq	r5, r2, #2
 801792c:	e7cf      	b.n	80178ce <_strtol_l.constprop.0+0x3a>
 801792e:	2b00      	cmp	r3, #0
 8017930:	d1da      	bne.n	80178e8 <_strtol_l.constprop.0+0x54>
 8017932:	2c30      	cmp	r4, #48	@ 0x30
 8017934:	bf0c      	ite	eq
 8017936:	2308      	moveq	r3, #8
 8017938:	230a      	movne	r3, #10
 801793a:	e7d5      	b.n	80178e8 <_strtol_l.constprop.0+0x54>
 801793c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8017940:	2f19      	cmp	r7, #25
 8017942:	d801      	bhi.n	8017948 <_strtol_l.constprop.0+0xb4>
 8017944:	3c37      	subs	r4, #55	@ 0x37
 8017946:	e7de      	b.n	8017906 <_strtol_l.constprop.0+0x72>
 8017948:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801794c:	2f19      	cmp	r7, #25
 801794e:	d804      	bhi.n	801795a <_strtol_l.constprop.0+0xc6>
 8017950:	3c57      	subs	r4, #87	@ 0x57
 8017952:	e7d8      	b.n	8017906 <_strtol_l.constprop.0+0x72>
 8017954:	f04f 32ff 	mov.w	r2, #4294967295
 8017958:	e7e1      	b.n	801791e <_strtol_l.constprop.0+0x8a>
 801795a:	1c53      	adds	r3, r2, #1
 801795c:	d108      	bne.n	8017970 <_strtol_l.constprop.0+0xdc>
 801795e:	2322      	movs	r3, #34	@ 0x22
 8017960:	f8ce 3000 	str.w	r3, [lr]
 8017964:	4660      	mov	r0, ip
 8017966:	f1b8 0f00 	cmp.w	r8, #0
 801796a:	d0a0      	beq.n	80178ae <_strtol_l.constprop.0+0x1a>
 801796c:	1e69      	subs	r1, r5, #1
 801796e:	e006      	b.n	801797e <_strtol_l.constprop.0+0xea>
 8017970:	b106      	cbz	r6, 8017974 <_strtol_l.constprop.0+0xe0>
 8017972:	4240      	negs	r0, r0
 8017974:	f1b8 0f00 	cmp.w	r8, #0
 8017978:	d099      	beq.n	80178ae <_strtol_l.constprop.0+0x1a>
 801797a:	2a00      	cmp	r2, #0
 801797c:	d1f6      	bne.n	801796c <_strtol_l.constprop.0+0xd8>
 801797e:	f8c8 1000 	str.w	r1, [r8]
 8017982:	e794      	b.n	80178ae <_strtol_l.constprop.0+0x1a>
 8017984:	08019d99 	.word	0x08019d99

08017988 <strtol>:
 8017988:	4613      	mov	r3, r2
 801798a:	460a      	mov	r2, r1
 801798c:	4601      	mov	r1, r0
 801798e:	4802      	ldr	r0, [pc, #8]	@ (8017998 <strtol+0x10>)
 8017990:	6800      	ldr	r0, [r0, #0]
 8017992:	f7ff bf7f 	b.w	8017894 <_strtol_l.constprop.0>
 8017996:	bf00      	nop
 8017998:	24000240 	.word	0x24000240

0801799c <std>:
 801799c:	2300      	movs	r3, #0
 801799e:	b510      	push	{r4, lr}
 80179a0:	4604      	mov	r4, r0
 80179a2:	e9c0 3300 	strd	r3, r3, [r0]
 80179a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80179aa:	6083      	str	r3, [r0, #8]
 80179ac:	8181      	strh	r1, [r0, #12]
 80179ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80179b0:	81c2      	strh	r2, [r0, #14]
 80179b2:	6183      	str	r3, [r0, #24]
 80179b4:	4619      	mov	r1, r3
 80179b6:	2208      	movs	r2, #8
 80179b8:	305c      	adds	r0, #92	@ 0x5c
 80179ba:	f000 f8f4 	bl	8017ba6 <memset>
 80179be:	4b0d      	ldr	r3, [pc, #52]	@ (80179f4 <std+0x58>)
 80179c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80179c2:	4b0d      	ldr	r3, [pc, #52]	@ (80179f8 <std+0x5c>)
 80179c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80179c6:	4b0d      	ldr	r3, [pc, #52]	@ (80179fc <std+0x60>)
 80179c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80179ca:	4b0d      	ldr	r3, [pc, #52]	@ (8017a00 <std+0x64>)
 80179cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80179ce:	4b0d      	ldr	r3, [pc, #52]	@ (8017a04 <std+0x68>)
 80179d0:	6224      	str	r4, [r4, #32]
 80179d2:	429c      	cmp	r4, r3
 80179d4:	d006      	beq.n	80179e4 <std+0x48>
 80179d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80179da:	4294      	cmp	r4, r2
 80179dc:	d002      	beq.n	80179e4 <std+0x48>
 80179de:	33d0      	adds	r3, #208	@ 0xd0
 80179e0:	429c      	cmp	r4, r3
 80179e2:	d105      	bne.n	80179f0 <std+0x54>
 80179e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80179e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80179ec:	f000 b972 	b.w	8017cd4 <__retarget_lock_init_recursive>
 80179f0:	bd10      	pop	{r4, pc}
 80179f2:	bf00      	nop
 80179f4:	08017b21 	.word	0x08017b21
 80179f8:	08017b43 	.word	0x08017b43
 80179fc:	08017b7b 	.word	0x08017b7b
 8017a00:	08017b9f 	.word	0x08017b9f
 8017a04:	2400680c 	.word	0x2400680c

08017a08 <stdio_exit_handler>:
 8017a08:	4a02      	ldr	r2, [pc, #8]	@ (8017a14 <stdio_exit_handler+0xc>)
 8017a0a:	4903      	ldr	r1, [pc, #12]	@ (8017a18 <stdio_exit_handler+0x10>)
 8017a0c:	4803      	ldr	r0, [pc, #12]	@ (8017a1c <stdio_exit_handler+0x14>)
 8017a0e:	f000 b869 	b.w	8017ae4 <_fwalk_sglue>
 8017a12:	bf00      	nop
 8017a14:	240000c8 	.word	0x240000c8
 8017a18:	08019011 	.word	0x08019011
 8017a1c:	24000244 	.word	0x24000244

08017a20 <cleanup_stdio>:
 8017a20:	6841      	ldr	r1, [r0, #4]
 8017a22:	4b0c      	ldr	r3, [pc, #48]	@ (8017a54 <cleanup_stdio+0x34>)
 8017a24:	4299      	cmp	r1, r3
 8017a26:	b510      	push	{r4, lr}
 8017a28:	4604      	mov	r4, r0
 8017a2a:	d001      	beq.n	8017a30 <cleanup_stdio+0x10>
 8017a2c:	f001 faf0 	bl	8019010 <_fflush_r>
 8017a30:	68a1      	ldr	r1, [r4, #8]
 8017a32:	4b09      	ldr	r3, [pc, #36]	@ (8017a58 <cleanup_stdio+0x38>)
 8017a34:	4299      	cmp	r1, r3
 8017a36:	d002      	beq.n	8017a3e <cleanup_stdio+0x1e>
 8017a38:	4620      	mov	r0, r4
 8017a3a:	f001 fae9 	bl	8019010 <_fflush_r>
 8017a3e:	68e1      	ldr	r1, [r4, #12]
 8017a40:	4b06      	ldr	r3, [pc, #24]	@ (8017a5c <cleanup_stdio+0x3c>)
 8017a42:	4299      	cmp	r1, r3
 8017a44:	d004      	beq.n	8017a50 <cleanup_stdio+0x30>
 8017a46:	4620      	mov	r0, r4
 8017a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017a4c:	f001 bae0 	b.w	8019010 <_fflush_r>
 8017a50:	bd10      	pop	{r4, pc}
 8017a52:	bf00      	nop
 8017a54:	2400680c 	.word	0x2400680c
 8017a58:	24006874 	.word	0x24006874
 8017a5c:	240068dc 	.word	0x240068dc

08017a60 <global_stdio_init.part.0>:
 8017a60:	b510      	push	{r4, lr}
 8017a62:	4b0b      	ldr	r3, [pc, #44]	@ (8017a90 <global_stdio_init.part.0+0x30>)
 8017a64:	4c0b      	ldr	r4, [pc, #44]	@ (8017a94 <global_stdio_init.part.0+0x34>)
 8017a66:	4a0c      	ldr	r2, [pc, #48]	@ (8017a98 <global_stdio_init.part.0+0x38>)
 8017a68:	601a      	str	r2, [r3, #0]
 8017a6a:	4620      	mov	r0, r4
 8017a6c:	2200      	movs	r2, #0
 8017a6e:	2104      	movs	r1, #4
 8017a70:	f7ff ff94 	bl	801799c <std>
 8017a74:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8017a78:	2201      	movs	r2, #1
 8017a7a:	2109      	movs	r1, #9
 8017a7c:	f7ff ff8e 	bl	801799c <std>
 8017a80:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017a84:	2202      	movs	r2, #2
 8017a86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017a8a:	2112      	movs	r1, #18
 8017a8c:	f7ff bf86 	b.w	801799c <std>
 8017a90:	24006944 	.word	0x24006944
 8017a94:	2400680c 	.word	0x2400680c
 8017a98:	08017a09 	.word	0x08017a09

08017a9c <__sfp_lock_acquire>:
 8017a9c:	4801      	ldr	r0, [pc, #4]	@ (8017aa4 <__sfp_lock_acquire+0x8>)
 8017a9e:	f000 b91a 	b.w	8017cd6 <__retarget_lock_acquire_recursive>
 8017aa2:	bf00      	nop
 8017aa4:	2400694d 	.word	0x2400694d

08017aa8 <__sfp_lock_release>:
 8017aa8:	4801      	ldr	r0, [pc, #4]	@ (8017ab0 <__sfp_lock_release+0x8>)
 8017aaa:	f000 b915 	b.w	8017cd8 <__retarget_lock_release_recursive>
 8017aae:	bf00      	nop
 8017ab0:	2400694d 	.word	0x2400694d

08017ab4 <__sinit>:
 8017ab4:	b510      	push	{r4, lr}
 8017ab6:	4604      	mov	r4, r0
 8017ab8:	f7ff fff0 	bl	8017a9c <__sfp_lock_acquire>
 8017abc:	6a23      	ldr	r3, [r4, #32]
 8017abe:	b11b      	cbz	r3, 8017ac8 <__sinit+0x14>
 8017ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ac4:	f7ff bff0 	b.w	8017aa8 <__sfp_lock_release>
 8017ac8:	4b04      	ldr	r3, [pc, #16]	@ (8017adc <__sinit+0x28>)
 8017aca:	6223      	str	r3, [r4, #32]
 8017acc:	4b04      	ldr	r3, [pc, #16]	@ (8017ae0 <__sinit+0x2c>)
 8017ace:	681b      	ldr	r3, [r3, #0]
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	d1f5      	bne.n	8017ac0 <__sinit+0xc>
 8017ad4:	f7ff ffc4 	bl	8017a60 <global_stdio_init.part.0>
 8017ad8:	e7f2      	b.n	8017ac0 <__sinit+0xc>
 8017ada:	bf00      	nop
 8017adc:	08017a21 	.word	0x08017a21
 8017ae0:	24006944 	.word	0x24006944

08017ae4 <_fwalk_sglue>:
 8017ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017ae8:	4607      	mov	r7, r0
 8017aea:	4688      	mov	r8, r1
 8017aec:	4614      	mov	r4, r2
 8017aee:	2600      	movs	r6, #0
 8017af0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017af4:	f1b9 0901 	subs.w	r9, r9, #1
 8017af8:	d505      	bpl.n	8017b06 <_fwalk_sglue+0x22>
 8017afa:	6824      	ldr	r4, [r4, #0]
 8017afc:	2c00      	cmp	r4, #0
 8017afe:	d1f7      	bne.n	8017af0 <_fwalk_sglue+0xc>
 8017b00:	4630      	mov	r0, r6
 8017b02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017b06:	89ab      	ldrh	r3, [r5, #12]
 8017b08:	2b01      	cmp	r3, #1
 8017b0a:	d907      	bls.n	8017b1c <_fwalk_sglue+0x38>
 8017b0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017b10:	3301      	adds	r3, #1
 8017b12:	d003      	beq.n	8017b1c <_fwalk_sglue+0x38>
 8017b14:	4629      	mov	r1, r5
 8017b16:	4638      	mov	r0, r7
 8017b18:	47c0      	blx	r8
 8017b1a:	4306      	orrs	r6, r0
 8017b1c:	3568      	adds	r5, #104	@ 0x68
 8017b1e:	e7e9      	b.n	8017af4 <_fwalk_sglue+0x10>

08017b20 <__sread>:
 8017b20:	b510      	push	{r4, lr}
 8017b22:	460c      	mov	r4, r1
 8017b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b28:	f000 f886 	bl	8017c38 <_read_r>
 8017b2c:	2800      	cmp	r0, #0
 8017b2e:	bfab      	itete	ge
 8017b30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8017b32:	89a3      	ldrhlt	r3, [r4, #12]
 8017b34:	181b      	addge	r3, r3, r0
 8017b36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8017b3a:	bfac      	ite	ge
 8017b3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8017b3e:	81a3      	strhlt	r3, [r4, #12]
 8017b40:	bd10      	pop	{r4, pc}

08017b42 <__swrite>:
 8017b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b46:	461f      	mov	r7, r3
 8017b48:	898b      	ldrh	r3, [r1, #12]
 8017b4a:	05db      	lsls	r3, r3, #23
 8017b4c:	4605      	mov	r5, r0
 8017b4e:	460c      	mov	r4, r1
 8017b50:	4616      	mov	r6, r2
 8017b52:	d505      	bpl.n	8017b60 <__swrite+0x1e>
 8017b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b58:	2302      	movs	r3, #2
 8017b5a:	2200      	movs	r2, #0
 8017b5c:	f000 f85a 	bl	8017c14 <_lseek_r>
 8017b60:	89a3      	ldrh	r3, [r4, #12]
 8017b62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017b66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017b6a:	81a3      	strh	r3, [r4, #12]
 8017b6c:	4632      	mov	r2, r6
 8017b6e:	463b      	mov	r3, r7
 8017b70:	4628      	mov	r0, r5
 8017b72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017b76:	f000 b871 	b.w	8017c5c <_write_r>

08017b7a <__sseek>:
 8017b7a:	b510      	push	{r4, lr}
 8017b7c:	460c      	mov	r4, r1
 8017b7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b82:	f000 f847 	bl	8017c14 <_lseek_r>
 8017b86:	1c43      	adds	r3, r0, #1
 8017b88:	89a3      	ldrh	r3, [r4, #12]
 8017b8a:	bf15      	itete	ne
 8017b8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8017b8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017b92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8017b96:	81a3      	strheq	r3, [r4, #12]
 8017b98:	bf18      	it	ne
 8017b9a:	81a3      	strhne	r3, [r4, #12]
 8017b9c:	bd10      	pop	{r4, pc}

08017b9e <__sclose>:
 8017b9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017ba2:	f000 b827 	b.w	8017bf4 <_close_r>

08017ba6 <memset>:
 8017ba6:	4402      	add	r2, r0
 8017ba8:	4603      	mov	r3, r0
 8017baa:	4293      	cmp	r3, r2
 8017bac:	d100      	bne.n	8017bb0 <memset+0xa>
 8017bae:	4770      	bx	lr
 8017bb0:	f803 1b01 	strb.w	r1, [r3], #1
 8017bb4:	e7f9      	b.n	8017baa <memset+0x4>

08017bb6 <strchr>:
 8017bb6:	b2c9      	uxtb	r1, r1
 8017bb8:	4603      	mov	r3, r0
 8017bba:	4618      	mov	r0, r3
 8017bbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017bc0:	b112      	cbz	r2, 8017bc8 <strchr+0x12>
 8017bc2:	428a      	cmp	r2, r1
 8017bc4:	d1f9      	bne.n	8017bba <strchr+0x4>
 8017bc6:	4770      	bx	lr
 8017bc8:	2900      	cmp	r1, #0
 8017bca:	bf18      	it	ne
 8017bcc:	2000      	movne	r0, #0
 8017bce:	4770      	bx	lr

08017bd0 <strncmp>:
 8017bd0:	b510      	push	{r4, lr}
 8017bd2:	b16a      	cbz	r2, 8017bf0 <strncmp+0x20>
 8017bd4:	3901      	subs	r1, #1
 8017bd6:	1884      	adds	r4, r0, r2
 8017bd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017bdc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017be0:	429a      	cmp	r2, r3
 8017be2:	d103      	bne.n	8017bec <strncmp+0x1c>
 8017be4:	42a0      	cmp	r0, r4
 8017be6:	d001      	beq.n	8017bec <strncmp+0x1c>
 8017be8:	2a00      	cmp	r2, #0
 8017bea:	d1f5      	bne.n	8017bd8 <strncmp+0x8>
 8017bec:	1ad0      	subs	r0, r2, r3
 8017bee:	bd10      	pop	{r4, pc}
 8017bf0:	4610      	mov	r0, r2
 8017bf2:	e7fc      	b.n	8017bee <strncmp+0x1e>

08017bf4 <_close_r>:
 8017bf4:	b538      	push	{r3, r4, r5, lr}
 8017bf6:	4d06      	ldr	r5, [pc, #24]	@ (8017c10 <_close_r+0x1c>)
 8017bf8:	2300      	movs	r3, #0
 8017bfa:	4604      	mov	r4, r0
 8017bfc:	4608      	mov	r0, r1
 8017bfe:	602b      	str	r3, [r5, #0]
 8017c00:	f7eb fd1e 	bl	8003640 <_close>
 8017c04:	1c43      	adds	r3, r0, #1
 8017c06:	d102      	bne.n	8017c0e <_close_r+0x1a>
 8017c08:	682b      	ldr	r3, [r5, #0]
 8017c0a:	b103      	cbz	r3, 8017c0e <_close_r+0x1a>
 8017c0c:	6023      	str	r3, [r4, #0]
 8017c0e:	bd38      	pop	{r3, r4, r5, pc}
 8017c10:	24006948 	.word	0x24006948

08017c14 <_lseek_r>:
 8017c14:	b538      	push	{r3, r4, r5, lr}
 8017c16:	4d07      	ldr	r5, [pc, #28]	@ (8017c34 <_lseek_r+0x20>)
 8017c18:	4604      	mov	r4, r0
 8017c1a:	4608      	mov	r0, r1
 8017c1c:	4611      	mov	r1, r2
 8017c1e:	2200      	movs	r2, #0
 8017c20:	602a      	str	r2, [r5, #0]
 8017c22:	461a      	mov	r2, r3
 8017c24:	f7eb fd33 	bl	800368e <_lseek>
 8017c28:	1c43      	adds	r3, r0, #1
 8017c2a:	d102      	bne.n	8017c32 <_lseek_r+0x1e>
 8017c2c:	682b      	ldr	r3, [r5, #0]
 8017c2e:	b103      	cbz	r3, 8017c32 <_lseek_r+0x1e>
 8017c30:	6023      	str	r3, [r4, #0]
 8017c32:	bd38      	pop	{r3, r4, r5, pc}
 8017c34:	24006948 	.word	0x24006948

08017c38 <_read_r>:
 8017c38:	b538      	push	{r3, r4, r5, lr}
 8017c3a:	4d07      	ldr	r5, [pc, #28]	@ (8017c58 <_read_r+0x20>)
 8017c3c:	4604      	mov	r4, r0
 8017c3e:	4608      	mov	r0, r1
 8017c40:	4611      	mov	r1, r2
 8017c42:	2200      	movs	r2, #0
 8017c44:	602a      	str	r2, [r5, #0]
 8017c46:	461a      	mov	r2, r3
 8017c48:	f7eb fcc1 	bl	80035ce <_read>
 8017c4c:	1c43      	adds	r3, r0, #1
 8017c4e:	d102      	bne.n	8017c56 <_read_r+0x1e>
 8017c50:	682b      	ldr	r3, [r5, #0]
 8017c52:	b103      	cbz	r3, 8017c56 <_read_r+0x1e>
 8017c54:	6023      	str	r3, [r4, #0]
 8017c56:	bd38      	pop	{r3, r4, r5, pc}
 8017c58:	24006948 	.word	0x24006948

08017c5c <_write_r>:
 8017c5c:	b538      	push	{r3, r4, r5, lr}
 8017c5e:	4d07      	ldr	r5, [pc, #28]	@ (8017c7c <_write_r+0x20>)
 8017c60:	4604      	mov	r4, r0
 8017c62:	4608      	mov	r0, r1
 8017c64:	4611      	mov	r1, r2
 8017c66:	2200      	movs	r2, #0
 8017c68:	602a      	str	r2, [r5, #0]
 8017c6a:	461a      	mov	r2, r3
 8017c6c:	f7eb fccc 	bl	8003608 <_write>
 8017c70:	1c43      	adds	r3, r0, #1
 8017c72:	d102      	bne.n	8017c7a <_write_r+0x1e>
 8017c74:	682b      	ldr	r3, [r5, #0]
 8017c76:	b103      	cbz	r3, 8017c7a <_write_r+0x1e>
 8017c78:	6023      	str	r3, [r4, #0]
 8017c7a:	bd38      	pop	{r3, r4, r5, pc}
 8017c7c:	24006948 	.word	0x24006948

08017c80 <__errno>:
 8017c80:	4b01      	ldr	r3, [pc, #4]	@ (8017c88 <__errno+0x8>)
 8017c82:	6818      	ldr	r0, [r3, #0]
 8017c84:	4770      	bx	lr
 8017c86:	bf00      	nop
 8017c88:	24000240 	.word	0x24000240

08017c8c <__libc_init_array>:
 8017c8c:	b570      	push	{r4, r5, r6, lr}
 8017c8e:	4d0d      	ldr	r5, [pc, #52]	@ (8017cc4 <__libc_init_array+0x38>)
 8017c90:	4c0d      	ldr	r4, [pc, #52]	@ (8017cc8 <__libc_init_array+0x3c>)
 8017c92:	1b64      	subs	r4, r4, r5
 8017c94:	10a4      	asrs	r4, r4, #2
 8017c96:	2600      	movs	r6, #0
 8017c98:	42a6      	cmp	r6, r4
 8017c9a:	d109      	bne.n	8017cb0 <__libc_init_array+0x24>
 8017c9c:	4d0b      	ldr	r5, [pc, #44]	@ (8017ccc <__libc_init_array+0x40>)
 8017c9e:	4c0c      	ldr	r4, [pc, #48]	@ (8017cd0 <__libc_init_array+0x44>)
 8017ca0:	f001 ff9a 	bl	8019bd8 <_init>
 8017ca4:	1b64      	subs	r4, r4, r5
 8017ca6:	10a4      	asrs	r4, r4, #2
 8017ca8:	2600      	movs	r6, #0
 8017caa:	42a6      	cmp	r6, r4
 8017cac:	d105      	bne.n	8017cba <__libc_init_array+0x2e>
 8017cae:	bd70      	pop	{r4, r5, r6, pc}
 8017cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8017cb4:	4798      	blx	r3
 8017cb6:	3601      	adds	r6, #1
 8017cb8:	e7ee      	b.n	8017c98 <__libc_init_array+0xc>
 8017cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8017cbe:	4798      	blx	r3
 8017cc0:	3601      	adds	r6, #1
 8017cc2:	e7f2      	b.n	8017caa <__libc_init_array+0x1e>
 8017cc4:	0801a988 	.word	0x0801a988
 8017cc8:	0801a988 	.word	0x0801a988
 8017ccc:	0801a988 	.word	0x0801a988
 8017cd0:	0801a98c 	.word	0x0801a98c

08017cd4 <__retarget_lock_init_recursive>:
 8017cd4:	4770      	bx	lr

08017cd6 <__retarget_lock_acquire_recursive>:
 8017cd6:	4770      	bx	lr

08017cd8 <__retarget_lock_release_recursive>:
 8017cd8:	4770      	bx	lr

08017cda <memcpy>:
 8017cda:	440a      	add	r2, r1
 8017cdc:	4291      	cmp	r1, r2
 8017cde:	f100 33ff 	add.w	r3, r0, #4294967295
 8017ce2:	d100      	bne.n	8017ce6 <memcpy+0xc>
 8017ce4:	4770      	bx	lr
 8017ce6:	b510      	push	{r4, lr}
 8017ce8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017cec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017cf0:	4291      	cmp	r1, r2
 8017cf2:	d1f9      	bne.n	8017ce8 <memcpy+0xe>
 8017cf4:	bd10      	pop	{r4, pc}
	...

08017cf8 <nan>:
 8017cf8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8017d00 <nan+0x8>
 8017cfc:	4770      	bx	lr
 8017cfe:	bf00      	nop
 8017d00:	00000000 	.word	0x00000000
 8017d04:	7ff80000 	.word	0x7ff80000

08017d08 <_free_r>:
 8017d08:	b538      	push	{r3, r4, r5, lr}
 8017d0a:	4605      	mov	r5, r0
 8017d0c:	2900      	cmp	r1, #0
 8017d0e:	d041      	beq.n	8017d94 <_free_r+0x8c>
 8017d10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017d14:	1f0c      	subs	r4, r1, #4
 8017d16:	2b00      	cmp	r3, #0
 8017d18:	bfb8      	it	lt
 8017d1a:	18e4      	addlt	r4, r4, r3
 8017d1c:	f000 fc2c 	bl	8018578 <__malloc_lock>
 8017d20:	4a1d      	ldr	r2, [pc, #116]	@ (8017d98 <_free_r+0x90>)
 8017d22:	6813      	ldr	r3, [r2, #0]
 8017d24:	b933      	cbnz	r3, 8017d34 <_free_r+0x2c>
 8017d26:	6063      	str	r3, [r4, #4]
 8017d28:	6014      	str	r4, [r2, #0]
 8017d2a:	4628      	mov	r0, r5
 8017d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017d30:	f000 bc28 	b.w	8018584 <__malloc_unlock>
 8017d34:	42a3      	cmp	r3, r4
 8017d36:	d908      	bls.n	8017d4a <_free_r+0x42>
 8017d38:	6820      	ldr	r0, [r4, #0]
 8017d3a:	1821      	adds	r1, r4, r0
 8017d3c:	428b      	cmp	r3, r1
 8017d3e:	bf01      	itttt	eq
 8017d40:	6819      	ldreq	r1, [r3, #0]
 8017d42:	685b      	ldreq	r3, [r3, #4]
 8017d44:	1809      	addeq	r1, r1, r0
 8017d46:	6021      	streq	r1, [r4, #0]
 8017d48:	e7ed      	b.n	8017d26 <_free_r+0x1e>
 8017d4a:	461a      	mov	r2, r3
 8017d4c:	685b      	ldr	r3, [r3, #4]
 8017d4e:	b10b      	cbz	r3, 8017d54 <_free_r+0x4c>
 8017d50:	42a3      	cmp	r3, r4
 8017d52:	d9fa      	bls.n	8017d4a <_free_r+0x42>
 8017d54:	6811      	ldr	r1, [r2, #0]
 8017d56:	1850      	adds	r0, r2, r1
 8017d58:	42a0      	cmp	r0, r4
 8017d5a:	d10b      	bne.n	8017d74 <_free_r+0x6c>
 8017d5c:	6820      	ldr	r0, [r4, #0]
 8017d5e:	4401      	add	r1, r0
 8017d60:	1850      	adds	r0, r2, r1
 8017d62:	4283      	cmp	r3, r0
 8017d64:	6011      	str	r1, [r2, #0]
 8017d66:	d1e0      	bne.n	8017d2a <_free_r+0x22>
 8017d68:	6818      	ldr	r0, [r3, #0]
 8017d6a:	685b      	ldr	r3, [r3, #4]
 8017d6c:	6053      	str	r3, [r2, #4]
 8017d6e:	4408      	add	r0, r1
 8017d70:	6010      	str	r0, [r2, #0]
 8017d72:	e7da      	b.n	8017d2a <_free_r+0x22>
 8017d74:	d902      	bls.n	8017d7c <_free_r+0x74>
 8017d76:	230c      	movs	r3, #12
 8017d78:	602b      	str	r3, [r5, #0]
 8017d7a:	e7d6      	b.n	8017d2a <_free_r+0x22>
 8017d7c:	6820      	ldr	r0, [r4, #0]
 8017d7e:	1821      	adds	r1, r4, r0
 8017d80:	428b      	cmp	r3, r1
 8017d82:	bf04      	itt	eq
 8017d84:	6819      	ldreq	r1, [r3, #0]
 8017d86:	685b      	ldreq	r3, [r3, #4]
 8017d88:	6063      	str	r3, [r4, #4]
 8017d8a:	bf04      	itt	eq
 8017d8c:	1809      	addeq	r1, r1, r0
 8017d8e:	6021      	streq	r1, [r4, #0]
 8017d90:	6054      	str	r4, [r2, #4]
 8017d92:	e7ca      	b.n	8017d2a <_free_r+0x22>
 8017d94:	bd38      	pop	{r3, r4, r5, pc}
 8017d96:	bf00      	nop
 8017d98:	24006954 	.word	0x24006954

08017d9c <rshift>:
 8017d9c:	6903      	ldr	r3, [r0, #16]
 8017d9e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8017da2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017da6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8017daa:	f100 0414 	add.w	r4, r0, #20
 8017dae:	dd45      	ble.n	8017e3c <rshift+0xa0>
 8017db0:	f011 011f 	ands.w	r1, r1, #31
 8017db4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017db8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8017dbc:	d10c      	bne.n	8017dd8 <rshift+0x3c>
 8017dbe:	f100 0710 	add.w	r7, r0, #16
 8017dc2:	4629      	mov	r1, r5
 8017dc4:	42b1      	cmp	r1, r6
 8017dc6:	d334      	bcc.n	8017e32 <rshift+0x96>
 8017dc8:	1a9b      	subs	r3, r3, r2
 8017dca:	009b      	lsls	r3, r3, #2
 8017dcc:	1eea      	subs	r2, r5, #3
 8017dce:	4296      	cmp	r6, r2
 8017dd0:	bf38      	it	cc
 8017dd2:	2300      	movcc	r3, #0
 8017dd4:	4423      	add	r3, r4
 8017dd6:	e015      	b.n	8017e04 <rshift+0x68>
 8017dd8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8017ddc:	f1c1 0820 	rsb	r8, r1, #32
 8017de0:	40cf      	lsrs	r7, r1
 8017de2:	f105 0e04 	add.w	lr, r5, #4
 8017de6:	46a1      	mov	r9, r4
 8017de8:	4576      	cmp	r6, lr
 8017dea:	46f4      	mov	ip, lr
 8017dec:	d815      	bhi.n	8017e1a <rshift+0x7e>
 8017dee:	1a9a      	subs	r2, r3, r2
 8017df0:	0092      	lsls	r2, r2, #2
 8017df2:	3a04      	subs	r2, #4
 8017df4:	3501      	adds	r5, #1
 8017df6:	42ae      	cmp	r6, r5
 8017df8:	bf38      	it	cc
 8017dfa:	2200      	movcc	r2, #0
 8017dfc:	18a3      	adds	r3, r4, r2
 8017dfe:	50a7      	str	r7, [r4, r2]
 8017e00:	b107      	cbz	r7, 8017e04 <rshift+0x68>
 8017e02:	3304      	adds	r3, #4
 8017e04:	1b1a      	subs	r2, r3, r4
 8017e06:	42a3      	cmp	r3, r4
 8017e08:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017e0c:	bf08      	it	eq
 8017e0e:	2300      	moveq	r3, #0
 8017e10:	6102      	str	r2, [r0, #16]
 8017e12:	bf08      	it	eq
 8017e14:	6143      	streq	r3, [r0, #20]
 8017e16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017e1a:	f8dc c000 	ldr.w	ip, [ip]
 8017e1e:	fa0c fc08 	lsl.w	ip, ip, r8
 8017e22:	ea4c 0707 	orr.w	r7, ip, r7
 8017e26:	f849 7b04 	str.w	r7, [r9], #4
 8017e2a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017e2e:	40cf      	lsrs	r7, r1
 8017e30:	e7da      	b.n	8017de8 <rshift+0x4c>
 8017e32:	f851 cb04 	ldr.w	ip, [r1], #4
 8017e36:	f847 cf04 	str.w	ip, [r7, #4]!
 8017e3a:	e7c3      	b.n	8017dc4 <rshift+0x28>
 8017e3c:	4623      	mov	r3, r4
 8017e3e:	e7e1      	b.n	8017e04 <rshift+0x68>

08017e40 <__hexdig_fun>:
 8017e40:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8017e44:	2b09      	cmp	r3, #9
 8017e46:	d802      	bhi.n	8017e4e <__hexdig_fun+0xe>
 8017e48:	3820      	subs	r0, #32
 8017e4a:	b2c0      	uxtb	r0, r0
 8017e4c:	4770      	bx	lr
 8017e4e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8017e52:	2b05      	cmp	r3, #5
 8017e54:	d801      	bhi.n	8017e5a <__hexdig_fun+0x1a>
 8017e56:	3847      	subs	r0, #71	@ 0x47
 8017e58:	e7f7      	b.n	8017e4a <__hexdig_fun+0xa>
 8017e5a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8017e5e:	2b05      	cmp	r3, #5
 8017e60:	d801      	bhi.n	8017e66 <__hexdig_fun+0x26>
 8017e62:	3827      	subs	r0, #39	@ 0x27
 8017e64:	e7f1      	b.n	8017e4a <__hexdig_fun+0xa>
 8017e66:	2000      	movs	r0, #0
 8017e68:	4770      	bx	lr
	...

08017e6c <__gethex>:
 8017e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e70:	b085      	sub	sp, #20
 8017e72:	468a      	mov	sl, r1
 8017e74:	9302      	str	r3, [sp, #8]
 8017e76:	680b      	ldr	r3, [r1, #0]
 8017e78:	9001      	str	r0, [sp, #4]
 8017e7a:	4690      	mov	r8, r2
 8017e7c:	1c9c      	adds	r4, r3, #2
 8017e7e:	46a1      	mov	r9, r4
 8017e80:	f814 0b01 	ldrb.w	r0, [r4], #1
 8017e84:	2830      	cmp	r0, #48	@ 0x30
 8017e86:	d0fa      	beq.n	8017e7e <__gethex+0x12>
 8017e88:	eba9 0303 	sub.w	r3, r9, r3
 8017e8c:	f1a3 0b02 	sub.w	fp, r3, #2
 8017e90:	f7ff ffd6 	bl	8017e40 <__hexdig_fun>
 8017e94:	4605      	mov	r5, r0
 8017e96:	2800      	cmp	r0, #0
 8017e98:	d168      	bne.n	8017f6c <__gethex+0x100>
 8017e9a:	49a0      	ldr	r1, [pc, #640]	@ (801811c <__gethex+0x2b0>)
 8017e9c:	2201      	movs	r2, #1
 8017e9e:	4648      	mov	r0, r9
 8017ea0:	f7ff fe96 	bl	8017bd0 <strncmp>
 8017ea4:	4607      	mov	r7, r0
 8017ea6:	2800      	cmp	r0, #0
 8017ea8:	d167      	bne.n	8017f7a <__gethex+0x10e>
 8017eaa:	f899 0001 	ldrb.w	r0, [r9, #1]
 8017eae:	4626      	mov	r6, r4
 8017eb0:	f7ff ffc6 	bl	8017e40 <__hexdig_fun>
 8017eb4:	2800      	cmp	r0, #0
 8017eb6:	d062      	beq.n	8017f7e <__gethex+0x112>
 8017eb8:	4623      	mov	r3, r4
 8017eba:	7818      	ldrb	r0, [r3, #0]
 8017ebc:	2830      	cmp	r0, #48	@ 0x30
 8017ebe:	4699      	mov	r9, r3
 8017ec0:	f103 0301 	add.w	r3, r3, #1
 8017ec4:	d0f9      	beq.n	8017eba <__gethex+0x4e>
 8017ec6:	f7ff ffbb 	bl	8017e40 <__hexdig_fun>
 8017eca:	fab0 f580 	clz	r5, r0
 8017ece:	096d      	lsrs	r5, r5, #5
 8017ed0:	f04f 0b01 	mov.w	fp, #1
 8017ed4:	464a      	mov	r2, r9
 8017ed6:	4616      	mov	r6, r2
 8017ed8:	3201      	adds	r2, #1
 8017eda:	7830      	ldrb	r0, [r6, #0]
 8017edc:	f7ff ffb0 	bl	8017e40 <__hexdig_fun>
 8017ee0:	2800      	cmp	r0, #0
 8017ee2:	d1f8      	bne.n	8017ed6 <__gethex+0x6a>
 8017ee4:	498d      	ldr	r1, [pc, #564]	@ (801811c <__gethex+0x2b0>)
 8017ee6:	2201      	movs	r2, #1
 8017ee8:	4630      	mov	r0, r6
 8017eea:	f7ff fe71 	bl	8017bd0 <strncmp>
 8017eee:	2800      	cmp	r0, #0
 8017ef0:	d13f      	bne.n	8017f72 <__gethex+0x106>
 8017ef2:	b944      	cbnz	r4, 8017f06 <__gethex+0x9a>
 8017ef4:	1c74      	adds	r4, r6, #1
 8017ef6:	4622      	mov	r2, r4
 8017ef8:	4616      	mov	r6, r2
 8017efa:	3201      	adds	r2, #1
 8017efc:	7830      	ldrb	r0, [r6, #0]
 8017efe:	f7ff ff9f 	bl	8017e40 <__hexdig_fun>
 8017f02:	2800      	cmp	r0, #0
 8017f04:	d1f8      	bne.n	8017ef8 <__gethex+0x8c>
 8017f06:	1ba4      	subs	r4, r4, r6
 8017f08:	00a7      	lsls	r7, r4, #2
 8017f0a:	7833      	ldrb	r3, [r6, #0]
 8017f0c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8017f10:	2b50      	cmp	r3, #80	@ 0x50
 8017f12:	d13e      	bne.n	8017f92 <__gethex+0x126>
 8017f14:	7873      	ldrb	r3, [r6, #1]
 8017f16:	2b2b      	cmp	r3, #43	@ 0x2b
 8017f18:	d033      	beq.n	8017f82 <__gethex+0x116>
 8017f1a:	2b2d      	cmp	r3, #45	@ 0x2d
 8017f1c:	d034      	beq.n	8017f88 <__gethex+0x11c>
 8017f1e:	1c71      	adds	r1, r6, #1
 8017f20:	2400      	movs	r4, #0
 8017f22:	7808      	ldrb	r0, [r1, #0]
 8017f24:	f7ff ff8c 	bl	8017e40 <__hexdig_fun>
 8017f28:	1e43      	subs	r3, r0, #1
 8017f2a:	b2db      	uxtb	r3, r3
 8017f2c:	2b18      	cmp	r3, #24
 8017f2e:	d830      	bhi.n	8017f92 <__gethex+0x126>
 8017f30:	f1a0 0210 	sub.w	r2, r0, #16
 8017f34:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017f38:	f7ff ff82 	bl	8017e40 <__hexdig_fun>
 8017f3c:	f100 3cff 	add.w	ip, r0, #4294967295
 8017f40:	fa5f fc8c 	uxtb.w	ip, ip
 8017f44:	f1bc 0f18 	cmp.w	ip, #24
 8017f48:	f04f 030a 	mov.w	r3, #10
 8017f4c:	d91e      	bls.n	8017f8c <__gethex+0x120>
 8017f4e:	b104      	cbz	r4, 8017f52 <__gethex+0xe6>
 8017f50:	4252      	negs	r2, r2
 8017f52:	4417      	add	r7, r2
 8017f54:	f8ca 1000 	str.w	r1, [sl]
 8017f58:	b1ed      	cbz	r5, 8017f96 <__gethex+0x12a>
 8017f5a:	f1bb 0f00 	cmp.w	fp, #0
 8017f5e:	bf0c      	ite	eq
 8017f60:	2506      	moveq	r5, #6
 8017f62:	2500      	movne	r5, #0
 8017f64:	4628      	mov	r0, r5
 8017f66:	b005      	add	sp, #20
 8017f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f6c:	2500      	movs	r5, #0
 8017f6e:	462c      	mov	r4, r5
 8017f70:	e7b0      	b.n	8017ed4 <__gethex+0x68>
 8017f72:	2c00      	cmp	r4, #0
 8017f74:	d1c7      	bne.n	8017f06 <__gethex+0x9a>
 8017f76:	4627      	mov	r7, r4
 8017f78:	e7c7      	b.n	8017f0a <__gethex+0x9e>
 8017f7a:	464e      	mov	r6, r9
 8017f7c:	462f      	mov	r7, r5
 8017f7e:	2501      	movs	r5, #1
 8017f80:	e7c3      	b.n	8017f0a <__gethex+0x9e>
 8017f82:	2400      	movs	r4, #0
 8017f84:	1cb1      	adds	r1, r6, #2
 8017f86:	e7cc      	b.n	8017f22 <__gethex+0xb6>
 8017f88:	2401      	movs	r4, #1
 8017f8a:	e7fb      	b.n	8017f84 <__gethex+0x118>
 8017f8c:	fb03 0002 	mla	r0, r3, r2, r0
 8017f90:	e7ce      	b.n	8017f30 <__gethex+0xc4>
 8017f92:	4631      	mov	r1, r6
 8017f94:	e7de      	b.n	8017f54 <__gethex+0xe8>
 8017f96:	eba6 0309 	sub.w	r3, r6, r9
 8017f9a:	3b01      	subs	r3, #1
 8017f9c:	4629      	mov	r1, r5
 8017f9e:	2b07      	cmp	r3, #7
 8017fa0:	dc0a      	bgt.n	8017fb8 <__gethex+0x14c>
 8017fa2:	9801      	ldr	r0, [sp, #4]
 8017fa4:	f000 faf4 	bl	8018590 <_Balloc>
 8017fa8:	4604      	mov	r4, r0
 8017faa:	b940      	cbnz	r0, 8017fbe <__gethex+0x152>
 8017fac:	4b5c      	ldr	r3, [pc, #368]	@ (8018120 <__gethex+0x2b4>)
 8017fae:	4602      	mov	r2, r0
 8017fb0:	21e4      	movs	r1, #228	@ 0xe4
 8017fb2:	485c      	ldr	r0, [pc, #368]	@ (8018124 <__gethex+0x2b8>)
 8017fb4:	f001 f864 	bl	8019080 <__assert_func>
 8017fb8:	3101      	adds	r1, #1
 8017fba:	105b      	asrs	r3, r3, #1
 8017fbc:	e7ef      	b.n	8017f9e <__gethex+0x132>
 8017fbe:	f100 0a14 	add.w	sl, r0, #20
 8017fc2:	2300      	movs	r3, #0
 8017fc4:	4655      	mov	r5, sl
 8017fc6:	469b      	mov	fp, r3
 8017fc8:	45b1      	cmp	r9, r6
 8017fca:	d337      	bcc.n	801803c <__gethex+0x1d0>
 8017fcc:	f845 bb04 	str.w	fp, [r5], #4
 8017fd0:	eba5 050a 	sub.w	r5, r5, sl
 8017fd4:	10ad      	asrs	r5, r5, #2
 8017fd6:	6125      	str	r5, [r4, #16]
 8017fd8:	4658      	mov	r0, fp
 8017fda:	f000 fbcb 	bl	8018774 <__hi0bits>
 8017fde:	016d      	lsls	r5, r5, #5
 8017fe0:	f8d8 6000 	ldr.w	r6, [r8]
 8017fe4:	1a2d      	subs	r5, r5, r0
 8017fe6:	42b5      	cmp	r5, r6
 8017fe8:	dd54      	ble.n	8018094 <__gethex+0x228>
 8017fea:	1bad      	subs	r5, r5, r6
 8017fec:	4629      	mov	r1, r5
 8017fee:	4620      	mov	r0, r4
 8017ff0:	f000 ff5c 	bl	8018eac <__any_on>
 8017ff4:	4681      	mov	r9, r0
 8017ff6:	b178      	cbz	r0, 8018018 <__gethex+0x1ac>
 8017ff8:	1e6b      	subs	r3, r5, #1
 8017ffa:	1159      	asrs	r1, r3, #5
 8017ffc:	f003 021f 	and.w	r2, r3, #31
 8018000:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8018004:	f04f 0901 	mov.w	r9, #1
 8018008:	fa09 f202 	lsl.w	r2, r9, r2
 801800c:	420a      	tst	r2, r1
 801800e:	d003      	beq.n	8018018 <__gethex+0x1ac>
 8018010:	454b      	cmp	r3, r9
 8018012:	dc36      	bgt.n	8018082 <__gethex+0x216>
 8018014:	f04f 0902 	mov.w	r9, #2
 8018018:	4629      	mov	r1, r5
 801801a:	4620      	mov	r0, r4
 801801c:	f7ff febe 	bl	8017d9c <rshift>
 8018020:	442f      	add	r7, r5
 8018022:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018026:	42bb      	cmp	r3, r7
 8018028:	da42      	bge.n	80180b0 <__gethex+0x244>
 801802a:	9801      	ldr	r0, [sp, #4]
 801802c:	4621      	mov	r1, r4
 801802e:	f000 faef 	bl	8018610 <_Bfree>
 8018032:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018034:	2300      	movs	r3, #0
 8018036:	6013      	str	r3, [r2, #0]
 8018038:	25a3      	movs	r5, #163	@ 0xa3
 801803a:	e793      	b.n	8017f64 <__gethex+0xf8>
 801803c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8018040:	2a2e      	cmp	r2, #46	@ 0x2e
 8018042:	d012      	beq.n	801806a <__gethex+0x1fe>
 8018044:	2b20      	cmp	r3, #32
 8018046:	d104      	bne.n	8018052 <__gethex+0x1e6>
 8018048:	f845 bb04 	str.w	fp, [r5], #4
 801804c:	f04f 0b00 	mov.w	fp, #0
 8018050:	465b      	mov	r3, fp
 8018052:	7830      	ldrb	r0, [r6, #0]
 8018054:	9303      	str	r3, [sp, #12]
 8018056:	f7ff fef3 	bl	8017e40 <__hexdig_fun>
 801805a:	9b03      	ldr	r3, [sp, #12]
 801805c:	f000 000f 	and.w	r0, r0, #15
 8018060:	4098      	lsls	r0, r3
 8018062:	ea4b 0b00 	orr.w	fp, fp, r0
 8018066:	3304      	adds	r3, #4
 8018068:	e7ae      	b.n	8017fc8 <__gethex+0x15c>
 801806a:	45b1      	cmp	r9, r6
 801806c:	d8ea      	bhi.n	8018044 <__gethex+0x1d8>
 801806e:	492b      	ldr	r1, [pc, #172]	@ (801811c <__gethex+0x2b0>)
 8018070:	9303      	str	r3, [sp, #12]
 8018072:	2201      	movs	r2, #1
 8018074:	4630      	mov	r0, r6
 8018076:	f7ff fdab 	bl	8017bd0 <strncmp>
 801807a:	9b03      	ldr	r3, [sp, #12]
 801807c:	2800      	cmp	r0, #0
 801807e:	d1e1      	bne.n	8018044 <__gethex+0x1d8>
 8018080:	e7a2      	b.n	8017fc8 <__gethex+0x15c>
 8018082:	1ea9      	subs	r1, r5, #2
 8018084:	4620      	mov	r0, r4
 8018086:	f000 ff11 	bl	8018eac <__any_on>
 801808a:	2800      	cmp	r0, #0
 801808c:	d0c2      	beq.n	8018014 <__gethex+0x1a8>
 801808e:	f04f 0903 	mov.w	r9, #3
 8018092:	e7c1      	b.n	8018018 <__gethex+0x1ac>
 8018094:	da09      	bge.n	80180aa <__gethex+0x23e>
 8018096:	1b75      	subs	r5, r6, r5
 8018098:	4621      	mov	r1, r4
 801809a:	9801      	ldr	r0, [sp, #4]
 801809c:	462a      	mov	r2, r5
 801809e:	f000 fccf 	bl	8018a40 <__lshift>
 80180a2:	1b7f      	subs	r7, r7, r5
 80180a4:	4604      	mov	r4, r0
 80180a6:	f100 0a14 	add.w	sl, r0, #20
 80180aa:	f04f 0900 	mov.w	r9, #0
 80180ae:	e7b8      	b.n	8018022 <__gethex+0x1b6>
 80180b0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80180b4:	42bd      	cmp	r5, r7
 80180b6:	dd6f      	ble.n	8018198 <__gethex+0x32c>
 80180b8:	1bed      	subs	r5, r5, r7
 80180ba:	42ae      	cmp	r6, r5
 80180bc:	dc34      	bgt.n	8018128 <__gethex+0x2bc>
 80180be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80180c2:	2b02      	cmp	r3, #2
 80180c4:	d022      	beq.n	801810c <__gethex+0x2a0>
 80180c6:	2b03      	cmp	r3, #3
 80180c8:	d024      	beq.n	8018114 <__gethex+0x2a8>
 80180ca:	2b01      	cmp	r3, #1
 80180cc:	d115      	bne.n	80180fa <__gethex+0x28e>
 80180ce:	42ae      	cmp	r6, r5
 80180d0:	d113      	bne.n	80180fa <__gethex+0x28e>
 80180d2:	2e01      	cmp	r6, #1
 80180d4:	d10b      	bne.n	80180ee <__gethex+0x282>
 80180d6:	9a02      	ldr	r2, [sp, #8]
 80180d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80180dc:	6013      	str	r3, [r2, #0]
 80180de:	2301      	movs	r3, #1
 80180e0:	6123      	str	r3, [r4, #16]
 80180e2:	f8ca 3000 	str.w	r3, [sl]
 80180e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80180e8:	2562      	movs	r5, #98	@ 0x62
 80180ea:	601c      	str	r4, [r3, #0]
 80180ec:	e73a      	b.n	8017f64 <__gethex+0xf8>
 80180ee:	1e71      	subs	r1, r6, #1
 80180f0:	4620      	mov	r0, r4
 80180f2:	f000 fedb 	bl	8018eac <__any_on>
 80180f6:	2800      	cmp	r0, #0
 80180f8:	d1ed      	bne.n	80180d6 <__gethex+0x26a>
 80180fa:	9801      	ldr	r0, [sp, #4]
 80180fc:	4621      	mov	r1, r4
 80180fe:	f000 fa87 	bl	8018610 <_Bfree>
 8018102:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018104:	2300      	movs	r3, #0
 8018106:	6013      	str	r3, [r2, #0]
 8018108:	2550      	movs	r5, #80	@ 0x50
 801810a:	e72b      	b.n	8017f64 <__gethex+0xf8>
 801810c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801810e:	2b00      	cmp	r3, #0
 8018110:	d1f3      	bne.n	80180fa <__gethex+0x28e>
 8018112:	e7e0      	b.n	80180d6 <__gethex+0x26a>
 8018114:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018116:	2b00      	cmp	r3, #0
 8018118:	d1dd      	bne.n	80180d6 <__gethex+0x26a>
 801811a:	e7ee      	b.n	80180fa <__gethex+0x28e>
 801811c:	08019d34 	.word	0x08019d34
 8018120:	08019ea1 	.word	0x08019ea1
 8018124:	08019eb2 	.word	0x08019eb2
 8018128:	1e6f      	subs	r7, r5, #1
 801812a:	f1b9 0f00 	cmp.w	r9, #0
 801812e:	d130      	bne.n	8018192 <__gethex+0x326>
 8018130:	b127      	cbz	r7, 801813c <__gethex+0x2d0>
 8018132:	4639      	mov	r1, r7
 8018134:	4620      	mov	r0, r4
 8018136:	f000 feb9 	bl	8018eac <__any_on>
 801813a:	4681      	mov	r9, r0
 801813c:	117a      	asrs	r2, r7, #5
 801813e:	2301      	movs	r3, #1
 8018140:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8018144:	f007 071f 	and.w	r7, r7, #31
 8018148:	40bb      	lsls	r3, r7
 801814a:	4213      	tst	r3, r2
 801814c:	4629      	mov	r1, r5
 801814e:	4620      	mov	r0, r4
 8018150:	bf18      	it	ne
 8018152:	f049 0902 	orrne.w	r9, r9, #2
 8018156:	f7ff fe21 	bl	8017d9c <rshift>
 801815a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801815e:	1b76      	subs	r6, r6, r5
 8018160:	2502      	movs	r5, #2
 8018162:	f1b9 0f00 	cmp.w	r9, #0
 8018166:	d047      	beq.n	80181f8 <__gethex+0x38c>
 8018168:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801816c:	2b02      	cmp	r3, #2
 801816e:	d015      	beq.n	801819c <__gethex+0x330>
 8018170:	2b03      	cmp	r3, #3
 8018172:	d017      	beq.n	80181a4 <__gethex+0x338>
 8018174:	2b01      	cmp	r3, #1
 8018176:	d109      	bne.n	801818c <__gethex+0x320>
 8018178:	f019 0f02 	tst.w	r9, #2
 801817c:	d006      	beq.n	801818c <__gethex+0x320>
 801817e:	f8da 3000 	ldr.w	r3, [sl]
 8018182:	ea49 0903 	orr.w	r9, r9, r3
 8018186:	f019 0f01 	tst.w	r9, #1
 801818a:	d10e      	bne.n	80181aa <__gethex+0x33e>
 801818c:	f045 0510 	orr.w	r5, r5, #16
 8018190:	e032      	b.n	80181f8 <__gethex+0x38c>
 8018192:	f04f 0901 	mov.w	r9, #1
 8018196:	e7d1      	b.n	801813c <__gethex+0x2d0>
 8018198:	2501      	movs	r5, #1
 801819a:	e7e2      	b.n	8018162 <__gethex+0x2f6>
 801819c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801819e:	f1c3 0301 	rsb	r3, r3, #1
 80181a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80181a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80181a6:	2b00      	cmp	r3, #0
 80181a8:	d0f0      	beq.n	801818c <__gethex+0x320>
 80181aa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80181ae:	f104 0314 	add.w	r3, r4, #20
 80181b2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80181b6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80181ba:	f04f 0c00 	mov.w	ip, #0
 80181be:	4618      	mov	r0, r3
 80181c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80181c4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80181c8:	d01b      	beq.n	8018202 <__gethex+0x396>
 80181ca:	3201      	adds	r2, #1
 80181cc:	6002      	str	r2, [r0, #0]
 80181ce:	2d02      	cmp	r5, #2
 80181d0:	f104 0314 	add.w	r3, r4, #20
 80181d4:	d13c      	bne.n	8018250 <__gethex+0x3e4>
 80181d6:	f8d8 2000 	ldr.w	r2, [r8]
 80181da:	3a01      	subs	r2, #1
 80181dc:	42b2      	cmp	r2, r6
 80181de:	d109      	bne.n	80181f4 <__gethex+0x388>
 80181e0:	1171      	asrs	r1, r6, #5
 80181e2:	2201      	movs	r2, #1
 80181e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80181e8:	f006 061f 	and.w	r6, r6, #31
 80181ec:	fa02 f606 	lsl.w	r6, r2, r6
 80181f0:	421e      	tst	r6, r3
 80181f2:	d13a      	bne.n	801826a <__gethex+0x3fe>
 80181f4:	f045 0520 	orr.w	r5, r5, #32
 80181f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80181fa:	601c      	str	r4, [r3, #0]
 80181fc:	9b02      	ldr	r3, [sp, #8]
 80181fe:	601f      	str	r7, [r3, #0]
 8018200:	e6b0      	b.n	8017f64 <__gethex+0xf8>
 8018202:	4299      	cmp	r1, r3
 8018204:	f843 cc04 	str.w	ip, [r3, #-4]
 8018208:	d8d9      	bhi.n	80181be <__gethex+0x352>
 801820a:	68a3      	ldr	r3, [r4, #8]
 801820c:	459b      	cmp	fp, r3
 801820e:	db17      	blt.n	8018240 <__gethex+0x3d4>
 8018210:	6861      	ldr	r1, [r4, #4]
 8018212:	9801      	ldr	r0, [sp, #4]
 8018214:	3101      	adds	r1, #1
 8018216:	f000 f9bb 	bl	8018590 <_Balloc>
 801821a:	4681      	mov	r9, r0
 801821c:	b918      	cbnz	r0, 8018226 <__gethex+0x3ba>
 801821e:	4b1a      	ldr	r3, [pc, #104]	@ (8018288 <__gethex+0x41c>)
 8018220:	4602      	mov	r2, r0
 8018222:	2184      	movs	r1, #132	@ 0x84
 8018224:	e6c5      	b.n	8017fb2 <__gethex+0x146>
 8018226:	6922      	ldr	r2, [r4, #16]
 8018228:	3202      	adds	r2, #2
 801822a:	f104 010c 	add.w	r1, r4, #12
 801822e:	0092      	lsls	r2, r2, #2
 8018230:	300c      	adds	r0, #12
 8018232:	f7ff fd52 	bl	8017cda <memcpy>
 8018236:	4621      	mov	r1, r4
 8018238:	9801      	ldr	r0, [sp, #4]
 801823a:	f000 f9e9 	bl	8018610 <_Bfree>
 801823e:	464c      	mov	r4, r9
 8018240:	6923      	ldr	r3, [r4, #16]
 8018242:	1c5a      	adds	r2, r3, #1
 8018244:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018248:	6122      	str	r2, [r4, #16]
 801824a:	2201      	movs	r2, #1
 801824c:	615a      	str	r2, [r3, #20]
 801824e:	e7be      	b.n	80181ce <__gethex+0x362>
 8018250:	6922      	ldr	r2, [r4, #16]
 8018252:	455a      	cmp	r2, fp
 8018254:	dd0b      	ble.n	801826e <__gethex+0x402>
 8018256:	2101      	movs	r1, #1
 8018258:	4620      	mov	r0, r4
 801825a:	f7ff fd9f 	bl	8017d9c <rshift>
 801825e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018262:	3701      	adds	r7, #1
 8018264:	42bb      	cmp	r3, r7
 8018266:	f6ff aee0 	blt.w	801802a <__gethex+0x1be>
 801826a:	2501      	movs	r5, #1
 801826c:	e7c2      	b.n	80181f4 <__gethex+0x388>
 801826e:	f016 061f 	ands.w	r6, r6, #31
 8018272:	d0fa      	beq.n	801826a <__gethex+0x3fe>
 8018274:	4453      	add	r3, sl
 8018276:	f1c6 0620 	rsb	r6, r6, #32
 801827a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801827e:	f000 fa79 	bl	8018774 <__hi0bits>
 8018282:	42b0      	cmp	r0, r6
 8018284:	dbe7      	blt.n	8018256 <__gethex+0x3ea>
 8018286:	e7f0      	b.n	801826a <__gethex+0x3fe>
 8018288:	08019ea1 	.word	0x08019ea1

0801828c <L_shift>:
 801828c:	f1c2 0208 	rsb	r2, r2, #8
 8018290:	0092      	lsls	r2, r2, #2
 8018292:	b570      	push	{r4, r5, r6, lr}
 8018294:	f1c2 0620 	rsb	r6, r2, #32
 8018298:	6843      	ldr	r3, [r0, #4]
 801829a:	6804      	ldr	r4, [r0, #0]
 801829c:	fa03 f506 	lsl.w	r5, r3, r6
 80182a0:	432c      	orrs	r4, r5
 80182a2:	40d3      	lsrs	r3, r2
 80182a4:	6004      	str	r4, [r0, #0]
 80182a6:	f840 3f04 	str.w	r3, [r0, #4]!
 80182aa:	4288      	cmp	r0, r1
 80182ac:	d3f4      	bcc.n	8018298 <L_shift+0xc>
 80182ae:	bd70      	pop	{r4, r5, r6, pc}

080182b0 <__match>:
 80182b0:	b530      	push	{r4, r5, lr}
 80182b2:	6803      	ldr	r3, [r0, #0]
 80182b4:	3301      	adds	r3, #1
 80182b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80182ba:	b914      	cbnz	r4, 80182c2 <__match+0x12>
 80182bc:	6003      	str	r3, [r0, #0]
 80182be:	2001      	movs	r0, #1
 80182c0:	bd30      	pop	{r4, r5, pc}
 80182c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80182c6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80182ca:	2d19      	cmp	r5, #25
 80182cc:	bf98      	it	ls
 80182ce:	3220      	addls	r2, #32
 80182d0:	42a2      	cmp	r2, r4
 80182d2:	d0f0      	beq.n	80182b6 <__match+0x6>
 80182d4:	2000      	movs	r0, #0
 80182d6:	e7f3      	b.n	80182c0 <__match+0x10>

080182d8 <__hexnan>:
 80182d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182dc:	680b      	ldr	r3, [r1, #0]
 80182de:	6801      	ldr	r1, [r0, #0]
 80182e0:	115e      	asrs	r6, r3, #5
 80182e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80182e6:	f013 031f 	ands.w	r3, r3, #31
 80182ea:	b087      	sub	sp, #28
 80182ec:	bf18      	it	ne
 80182ee:	3604      	addne	r6, #4
 80182f0:	2500      	movs	r5, #0
 80182f2:	1f37      	subs	r7, r6, #4
 80182f4:	4682      	mov	sl, r0
 80182f6:	4690      	mov	r8, r2
 80182f8:	9301      	str	r3, [sp, #4]
 80182fa:	f846 5c04 	str.w	r5, [r6, #-4]
 80182fe:	46b9      	mov	r9, r7
 8018300:	463c      	mov	r4, r7
 8018302:	9502      	str	r5, [sp, #8]
 8018304:	46ab      	mov	fp, r5
 8018306:	784a      	ldrb	r2, [r1, #1]
 8018308:	1c4b      	adds	r3, r1, #1
 801830a:	9303      	str	r3, [sp, #12]
 801830c:	b342      	cbz	r2, 8018360 <__hexnan+0x88>
 801830e:	4610      	mov	r0, r2
 8018310:	9105      	str	r1, [sp, #20]
 8018312:	9204      	str	r2, [sp, #16]
 8018314:	f7ff fd94 	bl	8017e40 <__hexdig_fun>
 8018318:	2800      	cmp	r0, #0
 801831a:	d151      	bne.n	80183c0 <__hexnan+0xe8>
 801831c:	9a04      	ldr	r2, [sp, #16]
 801831e:	9905      	ldr	r1, [sp, #20]
 8018320:	2a20      	cmp	r2, #32
 8018322:	d818      	bhi.n	8018356 <__hexnan+0x7e>
 8018324:	9b02      	ldr	r3, [sp, #8]
 8018326:	459b      	cmp	fp, r3
 8018328:	dd13      	ble.n	8018352 <__hexnan+0x7a>
 801832a:	454c      	cmp	r4, r9
 801832c:	d206      	bcs.n	801833c <__hexnan+0x64>
 801832e:	2d07      	cmp	r5, #7
 8018330:	dc04      	bgt.n	801833c <__hexnan+0x64>
 8018332:	462a      	mov	r2, r5
 8018334:	4649      	mov	r1, r9
 8018336:	4620      	mov	r0, r4
 8018338:	f7ff ffa8 	bl	801828c <L_shift>
 801833c:	4544      	cmp	r4, r8
 801833e:	d952      	bls.n	80183e6 <__hexnan+0x10e>
 8018340:	2300      	movs	r3, #0
 8018342:	f1a4 0904 	sub.w	r9, r4, #4
 8018346:	f844 3c04 	str.w	r3, [r4, #-4]
 801834a:	f8cd b008 	str.w	fp, [sp, #8]
 801834e:	464c      	mov	r4, r9
 8018350:	461d      	mov	r5, r3
 8018352:	9903      	ldr	r1, [sp, #12]
 8018354:	e7d7      	b.n	8018306 <__hexnan+0x2e>
 8018356:	2a29      	cmp	r2, #41	@ 0x29
 8018358:	d157      	bne.n	801840a <__hexnan+0x132>
 801835a:	3102      	adds	r1, #2
 801835c:	f8ca 1000 	str.w	r1, [sl]
 8018360:	f1bb 0f00 	cmp.w	fp, #0
 8018364:	d051      	beq.n	801840a <__hexnan+0x132>
 8018366:	454c      	cmp	r4, r9
 8018368:	d206      	bcs.n	8018378 <__hexnan+0xa0>
 801836a:	2d07      	cmp	r5, #7
 801836c:	dc04      	bgt.n	8018378 <__hexnan+0xa0>
 801836e:	462a      	mov	r2, r5
 8018370:	4649      	mov	r1, r9
 8018372:	4620      	mov	r0, r4
 8018374:	f7ff ff8a 	bl	801828c <L_shift>
 8018378:	4544      	cmp	r4, r8
 801837a:	d936      	bls.n	80183ea <__hexnan+0x112>
 801837c:	f1a8 0204 	sub.w	r2, r8, #4
 8018380:	4623      	mov	r3, r4
 8018382:	f853 1b04 	ldr.w	r1, [r3], #4
 8018386:	f842 1f04 	str.w	r1, [r2, #4]!
 801838a:	429f      	cmp	r7, r3
 801838c:	d2f9      	bcs.n	8018382 <__hexnan+0xaa>
 801838e:	1b3b      	subs	r3, r7, r4
 8018390:	f023 0303 	bic.w	r3, r3, #3
 8018394:	3304      	adds	r3, #4
 8018396:	3401      	adds	r4, #1
 8018398:	3e03      	subs	r6, #3
 801839a:	42b4      	cmp	r4, r6
 801839c:	bf88      	it	hi
 801839e:	2304      	movhi	r3, #4
 80183a0:	4443      	add	r3, r8
 80183a2:	2200      	movs	r2, #0
 80183a4:	f843 2b04 	str.w	r2, [r3], #4
 80183a8:	429f      	cmp	r7, r3
 80183aa:	d2fb      	bcs.n	80183a4 <__hexnan+0xcc>
 80183ac:	683b      	ldr	r3, [r7, #0]
 80183ae:	b91b      	cbnz	r3, 80183b8 <__hexnan+0xe0>
 80183b0:	4547      	cmp	r7, r8
 80183b2:	d128      	bne.n	8018406 <__hexnan+0x12e>
 80183b4:	2301      	movs	r3, #1
 80183b6:	603b      	str	r3, [r7, #0]
 80183b8:	2005      	movs	r0, #5
 80183ba:	b007      	add	sp, #28
 80183bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183c0:	3501      	adds	r5, #1
 80183c2:	2d08      	cmp	r5, #8
 80183c4:	f10b 0b01 	add.w	fp, fp, #1
 80183c8:	dd06      	ble.n	80183d8 <__hexnan+0x100>
 80183ca:	4544      	cmp	r4, r8
 80183cc:	d9c1      	bls.n	8018352 <__hexnan+0x7a>
 80183ce:	2300      	movs	r3, #0
 80183d0:	f844 3c04 	str.w	r3, [r4, #-4]
 80183d4:	2501      	movs	r5, #1
 80183d6:	3c04      	subs	r4, #4
 80183d8:	6822      	ldr	r2, [r4, #0]
 80183da:	f000 000f 	and.w	r0, r0, #15
 80183de:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80183e2:	6020      	str	r0, [r4, #0]
 80183e4:	e7b5      	b.n	8018352 <__hexnan+0x7a>
 80183e6:	2508      	movs	r5, #8
 80183e8:	e7b3      	b.n	8018352 <__hexnan+0x7a>
 80183ea:	9b01      	ldr	r3, [sp, #4]
 80183ec:	2b00      	cmp	r3, #0
 80183ee:	d0dd      	beq.n	80183ac <__hexnan+0xd4>
 80183f0:	f1c3 0320 	rsb	r3, r3, #32
 80183f4:	f04f 32ff 	mov.w	r2, #4294967295
 80183f8:	40da      	lsrs	r2, r3
 80183fa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80183fe:	4013      	ands	r3, r2
 8018400:	f846 3c04 	str.w	r3, [r6, #-4]
 8018404:	e7d2      	b.n	80183ac <__hexnan+0xd4>
 8018406:	3f04      	subs	r7, #4
 8018408:	e7d0      	b.n	80183ac <__hexnan+0xd4>
 801840a:	2004      	movs	r0, #4
 801840c:	e7d5      	b.n	80183ba <__hexnan+0xe2>
	...

08018410 <sbrk_aligned>:
 8018410:	b570      	push	{r4, r5, r6, lr}
 8018412:	4e0f      	ldr	r6, [pc, #60]	@ (8018450 <sbrk_aligned+0x40>)
 8018414:	460c      	mov	r4, r1
 8018416:	6831      	ldr	r1, [r6, #0]
 8018418:	4605      	mov	r5, r0
 801841a:	b911      	cbnz	r1, 8018422 <sbrk_aligned+0x12>
 801841c:	f000 fe20 	bl	8019060 <_sbrk_r>
 8018420:	6030      	str	r0, [r6, #0]
 8018422:	4621      	mov	r1, r4
 8018424:	4628      	mov	r0, r5
 8018426:	f000 fe1b 	bl	8019060 <_sbrk_r>
 801842a:	1c43      	adds	r3, r0, #1
 801842c:	d103      	bne.n	8018436 <sbrk_aligned+0x26>
 801842e:	f04f 34ff 	mov.w	r4, #4294967295
 8018432:	4620      	mov	r0, r4
 8018434:	bd70      	pop	{r4, r5, r6, pc}
 8018436:	1cc4      	adds	r4, r0, #3
 8018438:	f024 0403 	bic.w	r4, r4, #3
 801843c:	42a0      	cmp	r0, r4
 801843e:	d0f8      	beq.n	8018432 <sbrk_aligned+0x22>
 8018440:	1a21      	subs	r1, r4, r0
 8018442:	4628      	mov	r0, r5
 8018444:	f000 fe0c 	bl	8019060 <_sbrk_r>
 8018448:	3001      	adds	r0, #1
 801844a:	d1f2      	bne.n	8018432 <sbrk_aligned+0x22>
 801844c:	e7ef      	b.n	801842e <sbrk_aligned+0x1e>
 801844e:	bf00      	nop
 8018450:	24006950 	.word	0x24006950

08018454 <_malloc_r>:
 8018454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018458:	1ccd      	adds	r5, r1, #3
 801845a:	f025 0503 	bic.w	r5, r5, #3
 801845e:	3508      	adds	r5, #8
 8018460:	2d0c      	cmp	r5, #12
 8018462:	bf38      	it	cc
 8018464:	250c      	movcc	r5, #12
 8018466:	2d00      	cmp	r5, #0
 8018468:	4606      	mov	r6, r0
 801846a:	db01      	blt.n	8018470 <_malloc_r+0x1c>
 801846c:	42a9      	cmp	r1, r5
 801846e:	d904      	bls.n	801847a <_malloc_r+0x26>
 8018470:	230c      	movs	r3, #12
 8018472:	6033      	str	r3, [r6, #0]
 8018474:	2000      	movs	r0, #0
 8018476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801847a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8018550 <_malloc_r+0xfc>
 801847e:	f000 f87b 	bl	8018578 <__malloc_lock>
 8018482:	f8d8 3000 	ldr.w	r3, [r8]
 8018486:	461c      	mov	r4, r3
 8018488:	bb44      	cbnz	r4, 80184dc <_malloc_r+0x88>
 801848a:	4629      	mov	r1, r5
 801848c:	4630      	mov	r0, r6
 801848e:	f7ff ffbf 	bl	8018410 <sbrk_aligned>
 8018492:	1c43      	adds	r3, r0, #1
 8018494:	4604      	mov	r4, r0
 8018496:	d158      	bne.n	801854a <_malloc_r+0xf6>
 8018498:	f8d8 4000 	ldr.w	r4, [r8]
 801849c:	4627      	mov	r7, r4
 801849e:	2f00      	cmp	r7, #0
 80184a0:	d143      	bne.n	801852a <_malloc_r+0xd6>
 80184a2:	2c00      	cmp	r4, #0
 80184a4:	d04b      	beq.n	801853e <_malloc_r+0xea>
 80184a6:	6823      	ldr	r3, [r4, #0]
 80184a8:	4639      	mov	r1, r7
 80184aa:	4630      	mov	r0, r6
 80184ac:	eb04 0903 	add.w	r9, r4, r3
 80184b0:	f000 fdd6 	bl	8019060 <_sbrk_r>
 80184b4:	4581      	cmp	r9, r0
 80184b6:	d142      	bne.n	801853e <_malloc_r+0xea>
 80184b8:	6821      	ldr	r1, [r4, #0]
 80184ba:	1a6d      	subs	r5, r5, r1
 80184bc:	4629      	mov	r1, r5
 80184be:	4630      	mov	r0, r6
 80184c0:	f7ff ffa6 	bl	8018410 <sbrk_aligned>
 80184c4:	3001      	adds	r0, #1
 80184c6:	d03a      	beq.n	801853e <_malloc_r+0xea>
 80184c8:	6823      	ldr	r3, [r4, #0]
 80184ca:	442b      	add	r3, r5
 80184cc:	6023      	str	r3, [r4, #0]
 80184ce:	f8d8 3000 	ldr.w	r3, [r8]
 80184d2:	685a      	ldr	r2, [r3, #4]
 80184d4:	bb62      	cbnz	r2, 8018530 <_malloc_r+0xdc>
 80184d6:	f8c8 7000 	str.w	r7, [r8]
 80184da:	e00f      	b.n	80184fc <_malloc_r+0xa8>
 80184dc:	6822      	ldr	r2, [r4, #0]
 80184de:	1b52      	subs	r2, r2, r5
 80184e0:	d420      	bmi.n	8018524 <_malloc_r+0xd0>
 80184e2:	2a0b      	cmp	r2, #11
 80184e4:	d917      	bls.n	8018516 <_malloc_r+0xc2>
 80184e6:	1961      	adds	r1, r4, r5
 80184e8:	42a3      	cmp	r3, r4
 80184ea:	6025      	str	r5, [r4, #0]
 80184ec:	bf18      	it	ne
 80184ee:	6059      	strne	r1, [r3, #4]
 80184f0:	6863      	ldr	r3, [r4, #4]
 80184f2:	bf08      	it	eq
 80184f4:	f8c8 1000 	streq.w	r1, [r8]
 80184f8:	5162      	str	r2, [r4, r5]
 80184fa:	604b      	str	r3, [r1, #4]
 80184fc:	4630      	mov	r0, r6
 80184fe:	f000 f841 	bl	8018584 <__malloc_unlock>
 8018502:	f104 000b 	add.w	r0, r4, #11
 8018506:	1d23      	adds	r3, r4, #4
 8018508:	f020 0007 	bic.w	r0, r0, #7
 801850c:	1ac2      	subs	r2, r0, r3
 801850e:	bf1c      	itt	ne
 8018510:	1a1b      	subne	r3, r3, r0
 8018512:	50a3      	strne	r3, [r4, r2]
 8018514:	e7af      	b.n	8018476 <_malloc_r+0x22>
 8018516:	6862      	ldr	r2, [r4, #4]
 8018518:	42a3      	cmp	r3, r4
 801851a:	bf0c      	ite	eq
 801851c:	f8c8 2000 	streq.w	r2, [r8]
 8018520:	605a      	strne	r2, [r3, #4]
 8018522:	e7eb      	b.n	80184fc <_malloc_r+0xa8>
 8018524:	4623      	mov	r3, r4
 8018526:	6864      	ldr	r4, [r4, #4]
 8018528:	e7ae      	b.n	8018488 <_malloc_r+0x34>
 801852a:	463c      	mov	r4, r7
 801852c:	687f      	ldr	r7, [r7, #4]
 801852e:	e7b6      	b.n	801849e <_malloc_r+0x4a>
 8018530:	461a      	mov	r2, r3
 8018532:	685b      	ldr	r3, [r3, #4]
 8018534:	42a3      	cmp	r3, r4
 8018536:	d1fb      	bne.n	8018530 <_malloc_r+0xdc>
 8018538:	2300      	movs	r3, #0
 801853a:	6053      	str	r3, [r2, #4]
 801853c:	e7de      	b.n	80184fc <_malloc_r+0xa8>
 801853e:	230c      	movs	r3, #12
 8018540:	6033      	str	r3, [r6, #0]
 8018542:	4630      	mov	r0, r6
 8018544:	f000 f81e 	bl	8018584 <__malloc_unlock>
 8018548:	e794      	b.n	8018474 <_malloc_r+0x20>
 801854a:	6005      	str	r5, [r0, #0]
 801854c:	e7d6      	b.n	80184fc <_malloc_r+0xa8>
 801854e:	bf00      	nop
 8018550:	24006954 	.word	0x24006954

08018554 <__ascii_mbtowc>:
 8018554:	b082      	sub	sp, #8
 8018556:	b901      	cbnz	r1, 801855a <__ascii_mbtowc+0x6>
 8018558:	a901      	add	r1, sp, #4
 801855a:	b142      	cbz	r2, 801856e <__ascii_mbtowc+0x1a>
 801855c:	b14b      	cbz	r3, 8018572 <__ascii_mbtowc+0x1e>
 801855e:	7813      	ldrb	r3, [r2, #0]
 8018560:	600b      	str	r3, [r1, #0]
 8018562:	7812      	ldrb	r2, [r2, #0]
 8018564:	1e10      	subs	r0, r2, #0
 8018566:	bf18      	it	ne
 8018568:	2001      	movne	r0, #1
 801856a:	b002      	add	sp, #8
 801856c:	4770      	bx	lr
 801856e:	4610      	mov	r0, r2
 8018570:	e7fb      	b.n	801856a <__ascii_mbtowc+0x16>
 8018572:	f06f 0001 	mvn.w	r0, #1
 8018576:	e7f8      	b.n	801856a <__ascii_mbtowc+0x16>

08018578 <__malloc_lock>:
 8018578:	4801      	ldr	r0, [pc, #4]	@ (8018580 <__malloc_lock+0x8>)
 801857a:	f7ff bbac 	b.w	8017cd6 <__retarget_lock_acquire_recursive>
 801857e:	bf00      	nop
 8018580:	2400694c 	.word	0x2400694c

08018584 <__malloc_unlock>:
 8018584:	4801      	ldr	r0, [pc, #4]	@ (801858c <__malloc_unlock+0x8>)
 8018586:	f7ff bba7 	b.w	8017cd8 <__retarget_lock_release_recursive>
 801858a:	bf00      	nop
 801858c:	2400694c 	.word	0x2400694c

08018590 <_Balloc>:
 8018590:	b570      	push	{r4, r5, r6, lr}
 8018592:	69c6      	ldr	r6, [r0, #28]
 8018594:	4604      	mov	r4, r0
 8018596:	460d      	mov	r5, r1
 8018598:	b976      	cbnz	r6, 80185b8 <_Balloc+0x28>
 801859a:	2010      	movs	r0, #16
 801859c:	f000 fda2 	bl	80190e4 <malloc>
 80185a0:	4602      	mov	r2, r0
 80185a2:	61e0      	str	r0, [r4, #28]
 80185a4:	b920      	cbnz	r0, 80185b0 <_Balloc+0x20>
 80185a6:	4b18      	ldr	r3, [pc, #96]	@ (8018608 <_Balloc+0x78>)
 80185a8:	4818      	ldr	r0, [pc, #96]	@ (801860c <_Balloc+0x7c>)
 80185aa:	216b      	movs	r1, #107	@ 0x6b
 80185ac:	f000 fd68 	bl	8019080 <__assert_func>
 80185b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80185b4:	6006      	str	r6, [r0, #0]
 80185b6:	60c6      	str	r6, [r0, #12]
 80185b8:	69e6      	ldr	r6, [r4, #28]
 80185ba:	68f3      	ldr	r3, [r6, #12]
 80185bc:	b183      	cbz	r3, 80185e0 <_Balloc+0x50>
 80185be:	69e3      	ldr	r3, [r4, #28]
 80185c0:	68db      	ldr	r3, [r3, #12]
 80185c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80185c6:	b9b8      	cbnz	r0, 80185f8 <_Balloc+0x68>
 80185c8:	2101      	movs	r1, #1
 80185ca:	fa01 f605 	lsl.w	r6, r1, r5
 80185ce:	1d72      	adds	r2, r6, #5
 80185d0:	0092      	lsls	r2, r2, #2
 80185d2:	4620      	mov	r0, r4
 80185d4:	f000 fd72 	bl	80190bc <_calloc_r>
 80185d8:	b160      	cbz	r0, 80185f4 <_Balloc+0x64>
 80185da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80185de:	e00e      	b.n	80185fe <_Balloc+0x6e>
 80185e0:	2221      	movs	r2, #33	@ 0x21
 80185e2:	2104      	movs	r1, #4
 80185e4:	4620      	mov	r0, r4
 80185e6:	f000 fd69 	bl	80190bc <_calloc_r>
 80185ea:	69e3      	ldr	r3, [r4, #28]
 80185ec:	60f0      	str	r0, [r6, #12]
 80185ee:	68db      	ldr	r3, [r3, #12]
 80185f0:	2b00      	cmp	r3, #0
 80185f2:	d1e4      	bne.n	80185be <_Balloc+0x2e>
 80185f4:	2000      	movs	r0, #0
 80185f6:	bd70      	pop	{r4, r5, r6, pc}
 80185f8:	6802      	ldr	r2, [r0, #0]
 80185fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80185fe:	2300      	movs	r3, #0
 8018600:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018604:	e7f7      	b.n	80185f6 <_Balloc+0x66>
 8018606:	bf00      	nop
 8018608:	08019f12 	.word	0x08019f12
 801860c:	08019f29 	.word	0x08019f29

08018610 <_Bfree>:
 8018610:	b570      	push	{r4, r5, r6, lr}
 8018612:	69c6      	ldr	r6, [r0, #28]
 8018614:	4605      	mov	r5, r0
 8018616:	460c      	mov	r4, r1
 8018618:	b976      	cbnz	r6, 8018638 <_Bfree+0x28>
 801861a:	2010      	movs	r0, #16
 801861c:	f000 fd62 	bl	80190e4 <malloc>
 8018620:	4602      	mov	r2, r0
 8018622:	61e8      	str	r0, [r5, #28]
 8018624:	b920      	cbnz	r0, 8018630 <_Bfree+0x20>
 8018626:	4b09      	ldr	r3, [pc, #36]	@ (801864c <_Bfree+0x3c>)
 8018628:	4809      	ldr	r0, [pc, #36]	@ (8018650 <_Bfree+0x40>)
 801862a:	218f      	movs	r1, #143	@ 0x8f
 801862c:	f000 fd28 	bl	8019080 <__assert_func>
 8018630:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018634:	6006      	str	r6, [r0, #0]
 8018636:	60c6      	str	r6, [r0, #12]
 8018638:	b13c      	cbz	r4, 801864a <_Bfree+0x3a>
 801863a:	69eb      	ldr	r3, [r5, #28]
 801863c:	6862      	ldr	r2, [r4, #4]
 801863e:	68db      	ldr	r3, [r3, #12]
 8018640:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018644:	6021      	str	r1, [r4, #0]
 8018646:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801864a:	bd70      	pop	{r4, r5, r6, pc}
 801864c:	08019f12 	.word	0x08019f12
 8018650:	08019f29 	.word	0x08019f29

08018654 <__multadd>:
 8018654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018658:	690d      	ldr	r5, [r1, #16]
 801865a:	4607      	mov	r7, r0
 801865c:	460c      	mov	r4, r1
 801865e:	461e      	mov	r6, r3
 8018660:	f101 0c14 	add.w	ip, r1, #20
 8018664:	2000      	movs	r0, #0
 8018666:	f8dc 3000 	ldr.w	r3, [ip]
 801866a:	b299      	uxth	r1, r3
 801866c:	fb02 6101 	mla	r1, r2, r1, r6
 8018670:	0c1e      	lsrs	r6, r3, #16
 8018672:	0c0b      	lsrs	r3, r1, #16
 8018674:	fb02 3306 	mla	r3, r2, r6, r3
 8018678:	b289      	uxth	r1, r1
 801867a:	3001      	adds	r0, #1
 801867c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018680:	4285      	cmp	r5, r0
 8018682:	f84c 1b04 	str.w	r1, [ip], #4
 8018686:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801868a:	dcec      	bgt.n	8018666 <__multadd+0x12>
 801868c:	b30e      	cbz	r6, 80186d2 <__multadd+0x7e>
 801868e:	68a3      	ldr	r3, [r4, #8]
 8018690:	42ab      	cmp	r3, r5
 8018692:	dc19      	bgt.n	80186c8 <__multadd+0x74>
 8018694:	6861      	ldr	r1, [r4, #4]
 8018696:	4638      	mov	r0, r7
 8018698:	3101      	adds	r1, #1
 801869a:	f7ff ff79 	bl	8018590 <_Balloc>
 801869e:	4680      	mov	r8, r0
 80186a0:	b928      	cbnz	r0, 80186ae <__multadd+0x5a>
 80186a2:	4602      	mov	r2, r0
 80186a4:	4b0c      	ldr	r3, [pc, #48]	@ (80186d8 <__multadd+0x84>)
 80186a6:	480d      	ldr	r0, [pc, #52]	@ (80186dc <__multadd+0x88>)
 80186a8:	21ba      	movs	r1, #186	@ 0xba
 80186aa:	f000 fce9 	bl	8019080 <__assert_func>
 80186ae:	6922      	ldr	r2, [r4, #16]
 80186b0:	3202      	adds	r2, #2
 80186b2:	f104 010c 	add.w	r1, r4, #12
 80186b6:	0092      	lsls	r2, r2, #2
 80186b8:	300c      	adds	r0, #12
 80186ba:	f7ff fb0e 	bl	8017cda <memcpy>
 80186be:	4621      	mov	r1, r4
 80186c0:	4638      	mov	r0, r7
 80186c2:	f7ff ffa5 	bl	8018610 <_Bfree>
 80186c6:	4644      	mov	r4, r8
 80186c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80186cc:	3501      	adds	r5, #1
 80186ce:	615e      	str	r6, [r3, #20]
 80186d0:	6125      	str	r5, [r4, #16]
 80186d2:	4620      	mov	r0, r4
 80186d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80186d8:	08019ea1 	.word	0x08019ea1
 80186dc:	08019f29 	.word	0x08019f29

080186e0 <__s2b>:
 80186e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80186e4:	460c      	mov	r4, r1
 80186e6:	4615      	mov	r5, r2
 80186e8:	461f      	mov	r7, r3
 80186ea:	2209      	movs	r2, #9
 80186ec:	3308      	adds	r3, #8
 80186ee:	4606      	mov	r6, r0
 80186f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80186f4:	2100      	movs	r1, #0
 80186f6:	2201      	movs	r2, #1
 80186f8:	429a      	cmp	r2, r3
 80186fa:	db09      	blt.n	8018710 <__s2b+0x30>
 80186fc:	4630      	mov	r0, r6
 80186fe:	f7ff ff47 	bl	8018590 <_Balloc>
 8018702:	b940      	cbnz	r0, 8018716 <__s2b+0x36>
 8018704:	4602      	mov	r2, r0
 8018706:	4b19      	ldr	r3, [pc, #100]	@ (801876c <__s2b+0x8c>)
 8018708:	4819      	ldr	r0, [pc, #100]	@ (8018770 <__s2b+0x90>)
 801870a:	21d3      	movs	r1, #211	@ 0xd3
 801870c:	f000 fcb8 	bl	8019080 <__assert_func>
 8018710:	0052      	lsls	r2, r2, #1
 8018712:	3101      	adds	r1, #1
 8018714:	e7f0      	b.n	80186f8 <__s2b+0x18>
 8018716:	9b08      	ldr	r3, [sp, #32]
 8018718:	6143      	str	r3, [r0, #20]
 801871a:	2d09      	cmp	r5, #9
 801871c:	f04f 0301 	mov.w	r3, #1
 8018720:	6103      	str	r3, [r0, #16]
 8018722:	dd16      	ble.n	8018752 <__s2b+0x72>
 8018724:	f104 0909 	add.w	r9, r4, #9
 8018728:	46c8      	mov	r8, r9
 801872a:	442c      	add	r4, r5
 801872c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8018730:	4601      	mov	r1, r0
 8018732:	3b30      	subs	r3, #48	@ 0x30
 8018734:	220a      	movs	r2, #10
 8018736:	4630      	mov	r0, r6
 8018738:	f7ff ff8c 	bl	8018654 <__multadd>
 801873c:	45a0      	cmp	r8, r4
 801873e:	d1f5      	bne.n	801872c <__s2b+0x4c>
 8018740:	f1a5 0408 	sub.w	r4, r5, #8
 8018744:	444c      	add	r4, r9
 8018746:	1b2d      	subs	r5, r5, r4
 8018748:	1963      	adds	r3, r4, r5
 801874a:	42bb      	cmp	r3, r7
 801874c:	db04      	blt.n	8018758 <__s2b+0x78>
 801874e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018752:	340a      	adds	r4, #10
 8018754:	2509      	movs	r5, #9
 8018756:	e7f6      	b.n	8018746 <__s2b+0x66>
 8018758:	f814 3b01 	ldrb.w	r3, [r4], #1
 801875c:	4601      	mov	r1, r0
 801875e:	3b30      	subs	r3, #48	@ 0x30
 8018760:	220a      	movs	r2, #10
 8018762:	4630      	mov	r0, r6
 8018764:	f7ff ff76 	bl	8018654 <__multadd>
 8018768:	e7ee      	b.n	8018748 <__s2b+0x68>
 801876a:	bf00      	nop
 801876c:	08019ea1 	.word	0x08019ea1
 8018770:	08019f29 	.word	0x08019f29

08018774 <__hi0bits>:
 8018774:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8018778:	4603      	mov	r3, r0
 801877a:	bf36      	itet	cc
 801877c:	0403      	lslcc	r3, r0, #16
 801877e:	2000      	movcs	r0, #0
 8018780:	2010      	movcc	r0, #16
 8018782:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8018786:	bf3c      	itt	cc
 8018788:	021b      	lslcc	r3, r3, #8
 801878a:	3008      	addcc	r0, #8
 801878c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8018790:	bf3c      	itt	cc
 8018792:	011b      	lslcc	r3, r3, #4
 8018794:	3004      	addcc	r0, #4
 8018796:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801879a:	bf3c      	itt	cc
 801879c:	009b      	lslcc	r3, r3, #2
 801879e:	3002      	addcc	r0, #2
 80187a0:	2b00      	cmp	r3, #0
 80187a2:	db05      	blt.n	80187b0 <__hi0bits+0x3c>
 80187a4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80187a8:	f100 0001 	add.w	r0, r0, #1
 80187ac:	bf08      	it	eq
 80187ae:	2020      	moveq	r0, #32
 80187b0:	4770      	bx	lr

080187b2 <__lo0bits>:
 80187b2:	6803      	ldr	r3, [r0, #0]
 80187b4:	4602      	mov	r2, r0
 80187b6:	f013 0007 	ands.w	r0, r3, #7
 80187ba:	d00b      	beq.n	80187d4 <__lo0bits+0x22>
 80187bc:	07d9      	lsls	r1, r3, #31
 80187be:	d421      	bmi.n	8018804 <__lo0bits+0x52>
 80187c0:	0798      	lsls	r0, r3, #30
 80187c2:	bf49      	itett	mi
 80187c4:	085b      	lsrmi	r3, r3, #1
 80187c6:	089b      	lsrpl	r3, r3, #2
 80187c8:	2001      	movmi	r0, #1
 80187ca:	6013      	strmi	r3, [r2, #0]
 80187cc:	bf5c      	itt	pl
 80187ce:	6013      	strpl	r3, [r2, #0]
 80187d0:	2002      	movpl	r0, #2
 80187d2:	4770      	bx	lr
 80187d4:	b299      	uxth	r1, r3
 80187d6:	b909      	cbnz	r1, 80187dc <__lo0bits+0x2a>
 80187d8:	0c1b      	lsrs	r3, r3, #16
 80187da:	2010      	movs	r0, #16
 80187dc:	b2d9      	uxtb	r1, r3
 80187de:	b909      	cbnz	r1, 80187e4 <__lo0bits+0x32>
 80187e0:	3008      	adds	r0, #8
 80187e2:	0a1b      	lsrs	r3, r3, #8
 80187e4:	0719      	lsls	r1, r3, #28
 80187e6:	bf04      	itt	eq
 80187e8:	091b      	lsreq	r3, r3, #4
 80187ea:	3004      	addeq	r0, #4
 80187ec:	0799      	lsls	r1, r3, #30
 80187ee:	bf04      	itt	eq
 80187f0:	089b      	lsreq	r3, r3, #2
 80187f2:	3002      	addeq	r0, #2
 80187f4:	07d9      	lsls	r1, r3, #31
 80187f6:	d403      	bmi.n	8018800 <__lo0bits+0x4e>
 80187f8:	085b      	lsrs	r3, r3, #1
 80187fa:	f100 0001 	add.w	r0, r0, #1
 80187fe:	d003      	beq.n	8018808 <__lo0bits+0x56>
 8018800:	6013      	str	r3, [r2, #0]
 8018802:	4770      	bx	lr
 8018804:	2000      	movs	r0, #0
 8018806:	4770      	bx	lr
 8018808:	2020      	movs	r0, #32
 801880a:	4770      	bx	lr

0801880c <__i2b>:
 801880c:	b510      	push	{r4, lr}
 801880e:	460c      	mov	r4, r1
 8018810:	2101      	movs	r1, #1
 8018812:	f7ff febd 	bl	8018590 <_Balloc>
 8018816:	4602      	mov	r2, r0
 8018818:	b928      	cbnz	r0, 8018826 <__i2b+0x1a>
 801881a:	4b05      	ldr	r3, [pc, #20]	@ (8018830 <__i2b+0x24>)
 801881c:	4805      	ldr	r0, [pc, #20]	@ (8018834 <__i2b+0x28>)
 801881e:	f240 1145 	movw	r1, #325	@ 0x145
 8018822:	f000 fc2d 	bl	8019080 <__assert_func>
 8018826:	2301      	movs	r3, #1
 8018828:	6144      	str	r4, [r0, #20]
 801882a:	6103      	str	r3, [r0, #16]
 801882c:	bd10      	pop	{r4, pc}
 801882e:	bf00      	nop
 8018830:	08019ea1 	.word	0x08019ea1
 8018834:	08019f29 	.word	0x08019f29

08018838 <__multiply>:
 8018838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801883c:	4614      	mov	r4, r2
 801883e:	690a      	ldr	r2, [r1, #16]
 8018840:	6923      	ldr	r3, [r4, #16]
 8018842:	429a      	cmp	r2, r3
 8018844:	bfa8      	it	ge
 8018846:	4623      	movge	r3, r4
 8018848:	460f      	mov	r7, r1
 801884a:	bfa4      	itt	ge
 801884c:	460c      	movge	r4, r1
 801884e:	461f      	movge	r7, r3
 8018850:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8018854:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8018858:	68a3      	ldr	r3, [r4, #8]
 801885a:	6861      	ldr	r1, [r4, #4]
 801885c:	eb0a 0609 	add.w	r6, sl, r9
 8018860:	42b3      	cmp	r3, r6
 8018862:	b085      	sub	sp, #20
 8018864:	bfb8      	it	lt
 8018866:	3101      	addlt	r1, #1
 8018868:	f7ff fe92 	bl	8018590 <_Balloc>
 801886c:	b930      	cbnz	r0, 801887c <__multiply+0x44>
 801886e:	4602      	mov	r2, r0
 8018870:	4b44      	ldr	r3, [pc, #272]	@ (8018984 <__multiply+0x14c>)
 8018872:	4845      	ldr	r0, [pc, #276]	@ (8018988 <__multiply+0x150>)
 8018874:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8018878:	f000 fc02 	bl	8019080 <__assert_func>
 801887c:	f100 0514 	add.w	r5, r0, #20
 8018880:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8018884:	462b      	mov	r3, r5
 8018886:	2200      	movs	r2, #0
 8018888:	4543      	cmp	r3, r8
 801888a:	d321      	bcc.n	80188d0 <__multiply+0x98>
 801888c:	f107 0114 	add.w	r1, r7, #20
 8018890:	f104 0214 	add.w	r2, r4, #20
 8018894:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8018898:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801889c:	9302      	str	r3, [sp, #8]
 801889e:	1b13      	subs	r3, r2, r4
 80188a0:	3b15      	subs	r3, #21
 80188a2:	f023 0303 	bic.w	r3, r3, #3
 80188a6:	3304      	adds	r3, #4
 80188a8:	f104 0715 	add.w	r7, r4, #21
 80188ac:	42ba      	cmp	r2, r7
 80188ae:	bf38      	it	cc
 80188b0:	2304      	movcc	r3, #4
 80188b2:	9301      	str	r3, [sp, #4]
 80188b4:	9b02      	ldr	r3, [sp, #8]
 80188b6:	9103      	str	r1, [sp, #12]
 80188b8:	428b      	cmp	r3, r1
 80188ba:	d80c      	bhi.n	80188d6 <__multiply+0x9e>
 80188bc:	2e00      	cmp	r6, #0
 80188be:	dd03      	ble.n	80188c8 <__multiply+0x90>
 80188c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80188c4:	2b00      	cmp	r3, #0
 80188c6:	d05b      	beq.n	8018980 <__multiply+0x148>
 80188c8:	6106      	str	r6, [r0, #16]
 80188ca:	b005      	add	sp, #20
 80188cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188d0:	f843 2b04 	str.w	r2, [r3], #4
 80188d4:	e7d8      	b.n	8018888 <__multiply+0x50>
 80188d6:	f8b1 a000 	ldrh.w	sl, [r1]
 80188da:	f1ba 0f00 	cmp.w	sl, #0
 80188de:	d024      	beq.n	801892a <__multiply+0xf2>
 80188e0:	f104 0e14 	add.w	lr, r4, #20
 80188e4:	46a9      	mov	r9, r5
 80188e6:	f04f 0c00 	mov.w	ip, #0
 80188ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 80188ee:	f8d9 3000 	ldr.w	r3, [r9]
 80188f2:	fa1f fb87 	uxth.w	fp, r7
 80188f6:	b29b      	uxth	r3, r3
 80188f8:	fb0a 330b 	mla	r3, sl, fp, r3
 80188fc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8018900:	f8d9 7000 	ldr.w	r7, [r9]
 8018904:	4463      	add	r3, ip
 8018906:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801890a:	fb0a c70b 	mla	r7, sl, fp, ip
 801890e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8018912:	b29b      	uxth	r3, r3
 8018914:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8018918:	4572      	cmp	r2, lr
 801891a:	f849 3b04 	str.w	r3, [r9], #4
 801891e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8018922:	d8e2      	bhi.n	80188ea <__multiply+0xb2>
 8018924:	9b01      	ldr	r3, [sp, #4]
 8018926:	f845 c003 	str.w	ip, [r5, r3]
 801892a:	9b03      	ldr	r3, [sp, #12]
 801892c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8018930:	3104      	adds	r1, #4
 8018932:	f1b9 0f00 	cmp.w	r9, #0
 8018936:	d021      	beq.n	801897c <__multiply+0x144>
 8018938:	682b      	ldr	r3, [r5, #0]
 801893a:	f104 0c14 	add.w	ip, r4, #20
 801893e:	46ae      	mov	lr, r5
 8018940:	f04f 0a00 	mov.w	sl, #0
 8018944:	f8bc b000 	ldrh.w	fp, [ip]
 8018948:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801894c:	fb09 770b 	mla	r7, r9, fp, r7
 8018950:	4457      	add	r7, sl
 8018952:	b29b      	uxth	r3, r3
 8018954:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8018958:	f84e 3b04 	str.w	r3, [lr], #4
 801895c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8018960:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018964:	f8be 3000 	ldrh.w	r3, [lr]
 8018968:	fb09 330a 	mla	r3, r9, sl, r3
 801896c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8018970:	4562      	cmp	r2, ip
 8018972:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018976:	d8e5      	bhi.n	8018944 <__multiply+0x10c>
 8018978:	9f01      	ldr	r7, [sp, #4]
 801897a:	51eb      	str	r3, [r5, r7]
 801897c:	3504      	adds	r5, #4
 801897e:	e799      	b.n	80188b4 <__multiply+0x7c>
 8018980:	3e01      	subs	r6, #1
 8018982:	e79b      	b.n	80188bc <__multiply+0x84>
 8018984:	08019ea1 	.word	0x08019ea1
 8018988:	08019f29 	.word	0x08019f29

0801898c <__pow5mult>:
 801898c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018990:	4615      	mov	r5, r2
 8018992:	f012 0203 	ands.w	r2, r2, #3
 8018996:	4607      	mov	r7, r0
 8018998:	460e      	mov	r6, r1
 801899a:	d007      	beq.n	80189ac <__pow5mult+0x20>
 801899c:	4c25      	ldr	r4, [pc, #148]	@ (8018a34 <__pow5mult+0xa8>)
 801899e:	3a01      	subs	r2, #1
 80189a0:	2300      	movs	r3, #0
 80189a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80189a6:	f7ff fe55 	bl	8018654 <__multadd>
 80189aa:	4606      	mov	r6, r0
 80189ac:	10ad      	asrs	r5, r5, #2
 80189ae:	d03d      	beq.n	8018a2c <__pow5mult+0xa0>
 80189b0:	69fc      	ldr	r4, [r7, #28]
 80189b2:	b97c      	cbnz	r4, 80189d4 <__pow5mult+0x48>
 80189b4:	2010      	movs	r0, #16
 80189b6:	f000 fb95 	bl	80190e4 <malloc>
 80189ba:	4602      	mov	r2, r0
 80189bc:	61f8      	str	r0, [r7, #28]
 80189be:	b928      	cbnz	r0, 80189cc <__pow5mult+0x40>
 80189c0:	4b1d      	ldr	r3, [pc, #116]	@ (8018a38 <__pow5mult+0xac>)
 80189c2:	481e      	ldr	r0, [pc, #120]	@ (8018a3c <__pow5mult+0xb0>)
 80189c4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80189c8:	f000 fb5a 	bl	8019080 <__assert_func>
 80189cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80189d0:	6004      	str	r4, [r0, #0]
 80189d2:	60c4      	str	r4, [r0, #12]
 80189d4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80189d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80189dc:	b94c      	cbnz	r4, 80189f2 <__pow5mult+0x66>
 80189de:	f240 2171 	movw	r1, #625	@ 0x271
 80189e2:	4638      	mov	r0, r7
 80189e4:	f7ff ff12 	bl	801880c <__i2b>
 80189e8:	2300      	movs	r3, #0
 80189ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80189ee:	4604      	mov	r4, r0
 80189f0:	6003      	str	r3, [r0, #0]
 80189f2:	f04f 0900 	mov.w	r9, #0
 80189f6:	07eb      	lsls	r3, r5, #31
 80189f8:	d50a      	bpl.n	8018a10 <__pow5mult+0x84>
 80189fa:	4631      	mov	r1, r6
 80189fc:	4622      	mov	r2, r4
 80189fe:	4638      	mov	r0, r7
 8018a00:	f7ff ff1a 	bl	8018838 <__multiply>
 8018a04:	4631      	mov	r1, r6
 8018a06:	4680      	mov	r8, r0
 8018a08:	4638      	mov	r0, r7
 8018a0a:	f7ff fe01 	bl	8018610 <_Bfree>
 8018a0e:	4646      	mov	r6, r8
 8018a10:	106d      	asrs	r5, r5, #1
 8018a12:	d00b      	beq.n	8018a2c <__pow5mult+0xa0>
 8018a14:	6820      	ldr	r0, [r4, #0]
 8018a16:	b938      	cbnz	r0, 8018a28 <__pow5mult+0x9c>
 8018a18:	4622      	mov	r2, r4
 8018a1a:	4621      	mov	r1, r4
 8018a1c:	4638      	mov	r0, r7
 8018a1e:	f7ff ff0b 	bl	8018838 <__multiply>
 8018a22:	6020      	str	r0, [r4, #0]
 8018a24:	f8c0 9000 	str.w	r9, [r0]
 8018a28:	4604      	mov	r4, r0
 8018a2a:	e7e4      	b.n	80189f6 <__pow5mult+0x6a>
 8018a2c:	4630      	mov	r0, r6
 8018a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018a32:	bf00      	nop
 8018a34:	08019f84 	.word	0x08019f84
 8018a38:	08019f12 	.word	0x08019f12
 8018a3c:	08019f29 	.word	0x08019f29

08018a40 <__lshift>:
 8018a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018a44:	460c      	mov	r4, r1
 8018a46:	6849      	ldr	r1, [r1, #4]
 8018a48:	6923      	ldr	r3, [r4, #16]
 8018a4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018a4e:	68a3      	ldr	r3, [r4, #8]
 8018a50:	4607      	mov	r7, r0
 8018a52:	4691      	mov	r9, r2
 8018a54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018a58:	f108 0601 	add.w	r6, r8, #1
 8018a5c:	42b3      	cmp	r3, r6
 8018a5e:	db0b      	blt.n	8018a78 <__lshift+0x38>
 8018a60:	4638      	mov	r0, r7
 8018a62:	f7ff fd95 	bl	8018590 <_Balloc>
 8018a66:	4605      	mov	r5, r0
 8018a68:	b948      	cbnz	r0, 8018a7e <__lshift+0x3e>
 8018a6a:	4602      	mov	r2, r0
 8018a6c:	4b28      	ldr	r3, [pc, #160]	@ (8018b10 <__lshift+0xd0>)
 8018a6e:	4829      	ldr	r0, [pc, #164]	@ (8018b14 <__lshift+0xd4>)
 8018a70:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8018a74:	f000 fb04 	bl	8019080 <__assert_func>
 8018a78:	3101      	adds	r1, #1
 8018a7a:	005b      	lsls	r3, r3, #1
 8018a7c:	e7ee      	b.n	8018a5c <__lshift+0x1c>
 8018a7e:	2300      	movs	r3, #0
 8018a80:	f100 0114 	add.w	r1, r0, #20
 8018a84:	f100 0210 	add.w	r2, r0, #16
 8018a88:	4618      	mov	r0, r3
 8018a8a:	4553      	cmp	r3, sl
 8018a8c:	db33      	blt.n	8018af6 <__lshift+0xb6>
 8018a8e:	6920      	ldr	r0, [r4, #16]
 8018a90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018a94:	f104 0314 	add.w	r3, r4, #20
 8018a98:	f019 091f 	ands.w	r9, r9, #31
 8018a9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018aa0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018aa4:	d02b      	beq.n	8018afe <__lshift+0xbe>
 8018aa6:	f1c9 0e20 	rsb	lr, r9, #32
 8018aaa:	468a      	mov	sl, r1
 8018aac:	2200      	movs	r2, #0
 8018aae:	6818      	ldr	r0, [r3, #0]
 8018ab0:	fa00 f009 	lsl.w	r0, r0, r9
 8018ab4:	4310      	orrs	r0, r2
 8018ab6:	f84a 0b04 	str.w	r0, [sl], #4
 8018aba:	f853 2b04 	ldr.w	r2, [r3], #4
 8018abe:	459c      	cmp	ip, r3
 8018ac0:	fa22 f20e 	lsr.w	r2, r2, lr
 8018ac4:	d8f3      	bhi.n	8018aae <__lshift+0x6e>
 8018ac6:	ebac 0304 	sub.w	r3, ip, r4
 8018aca:	3b15      	subs	r3, #21
 8018acc:	f023 0303 	bic.w	r3, r3, #3
 8018ad0:	3304      	adds	r3, #4
 8018ad2:	f104 0015 	add.w	r0, r4, #21
 8018ad6:	4584      	cmp	ip, r0
 8018ad8:	bf38      	it	cc
 8018ada:	2304      	movcc	r3, #4
 8018adc:	50ca      	str	r2, [r1, r3]
 8018ade:	b10a      	cbz	r2, 8018ae4 <__lshift+0xa4>
 8018ae0:	f108 0602 	add.w	r6, r8, #2
 8018ae4:	3e01      	subs	r6, #1
 8018ae6:	4638      	mov	r0, r7
 8018ae8:	612e      	str	r6, [r5, #16]
 8018aea:	4621      	mov	r1, r4
 8018aec:	f7ff fd90 	bl	8018610 <_Bfree>
 8018af0:	4628      	mov	r0, r5
 8018af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018af6:	f842 0f04 	str.w	r0, [r2, #4]!
 8018afa:	3301      	adds	r3, #1
 8018afc:	e7c5      	b.n	8018a8a <__lshift+0x4a>
 8018afe:	3904      	subs	r1, #4
 8018b00:	f853 2b04 	ldr.w	r2, [r3], #4
 8018b04:	f841 2f04 	str.w	r2, [r1, #4]!
 8018b08:	459c      	cmp	ip, r3
 8018b0a:	d8f9      	bhi.n	8018b00 <__lshift+0xc0>
 8018b0c:	e7ea      	b.n	8018ae4 <__lshift+0xa4>
 8018b0e:	bf00      	nop
 8018b10:	08019ea1 	.word	0x08019ea1
 8018b14:	08019f29 	.word	0x08019f29

08018b18 <__mcmp>:
 8018b18:	690a      	ldr	r2, [r1, #16]
 8018b1a:	4603      	mov	r3, r0
 8018b1c:	6900      	ldr	r0, [r0, #16]
 8018b1e:	1a80      	subs	r0, r0, r2
 8018b20:	b530      	push	{r4, r5, lr}
 8018b22:	d10e      	bne.n	8018b42 <__mcmp+0x2a>
 8018b24:	3314      	adds	r3, #20
 8018b26:	3114      	adds	r1, #20
 8018b28:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8018b2c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8018b30:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018b34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018b38:	4295      	cmp	r5, r2
 8018b3a:	d003      	beq.n	8018b44 <__mcmp+0x2c>
 8018b3c:	d205      	bcs.n	8018b4a <__mcmp+0x32>
 8018b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8018b42:	bd30      	pop	{r4, r5, pc}
 8018b44:	42a3      	cmp	r3, r4
 8018b46:	d3f3      	bcc.n	8018b30 <__mcmp+0x18>
 8018b48:	e7fb      	b.n	8018b42 <__mcmp+0x2a>
 8018b4a:	2001      	movs	r0, #1
 8018b4c:	e7f9      	b.n	8018b42 <__mcmp+0x2a>
	...

08018b50 <__mdiff>:
 8018b50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b54:	4689      	mov	r9, r1
 8018b56:	4606      	mov	r6, r0
 8018b58:	4611      	mov	r1, r2
 8018b5a:	4648      	mov	r0, r9
 8018b5c:	4614      	mov	r4, r2
 8018b5e:	f7ff ffdb 	bl	8018b18 <__mcmp>
 8018b62:	1e05      	subs	r5, r0, #0
 8018b64:	d112      	bne.n	8018b8c <__mdiff+0x3c>
 8018b66:	4629      	mov	r1, r5
 8018b68:	4630      	mov	r0, r6
 8018b6a:	f7ff fd11 	bl	8018590 <_Balloc>
 8018b6e:	4602      	mov	r2, r0
 8018b70:	b928      	cbnz	r0, 8018b7e <__mdiff+0x2e>
 8018b72:	4b3f      	ldr	r3, [pc, #252]	@ (8018c70 <__mdiff+0x120>)
 8018b74:	f240 2137 	movw	r1, #567	@ 0x237
 8018b78:	483e      	ldr	r0, [pc, #248]	@ (8018c74 <__mdiff+0x124>)
 8018b7a:	f000 fa81 	bl	8019080 <__assert_func>
 8018b7e:	2301      	movs	r3, #1
 8018b80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018b84:	4610      	mov	r0, r2
 8018b86:	b003      	add	sp, #12
 8018b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b8c:	bfbc      	itt	lt
 8018b8e:	464b      	movlt	r3, r9
 8018b90:	46a1      	movlt	r9, r4
 8018b92:	4630      	mov	r0, r6
 8018b94:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8018b98:	bfba      	itte	lt
 8018b9a:	461c      	movlt	r4, r3
 8018b9c:	2501      	movlt	r5, #1
 8018b9e:	2500      	movge	r5, #0
 8018ba0:	f7ff fcf6 	bl	8018590 <_Balloc>
 8018ba4:	4602      	mov	r2, r0
 8018ba6:	b918      	cbnz	r0, 8018bb0 <__mdiff+0x60>
 8018ba8:	4b31      	ldr	r3, [pc, #196]	@ (8018c70 <__mdiff+0x120>)
 8018baa:	f240 2145 	movw	r1, #581	@ 0x245
 8018bae:	e7e3      	b.n	8018b78 <__mdiff+0x28>
 8018bb0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8018bb4:	6926      	ldr	r6, [r4, #16]
 8018bb6:	60c5      	str	r5, [r0, #12]
 8018bb8:	f109 0310 	add.w	r3, r9, #16
 8018bbc:	f109 0514 	add.w	r5, r9, #20
 8018bc0:	f104 0e14 	add.w	lr, r4, #20
 8018bc4:	f100 0b14 	add.w	fp, r0, #20
 8018bc8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8018bcc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8018bd0:	9301      	str	r3, [sp, #4]
 8018bd2:	46d9      	mov	r9, fp
 8018bd4:	f04f 0c00 	mov.w	ip, #0
 8018bd8:	9b01      	ldr	r3, [sp, #4]
 8018bda:	f85e 0b04 	ldr.w	r0, [lr], #4
 8018bde:	f853 af04 	ldr.w	sl, [r3, #4]!
 8018be2:	9301      	str	r3, [sp, #4]
 8018be4:	fa1f f38a 	uxth.w	r3, sl
 8018be8:	4619      	mov	r1, r3
 8018bea:	b283      	uxth	r3, r0
 8018bec:	1acb      	subs	r3, r1, r3
 8018bee:	0c00      	lsrs	r0, r0, #16
 8018bf0:	4463      	add	r3, ip
 8018bf2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8018bf6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8018bfa:	b29b      	uxth	r3, r3
 8018bfc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8018c00:	4576      	cmp	r6, lr
 8018c02:	f849 3b04 	str.w	r3, [r9], #4
 8018c06:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8018c0a:	d8e5      	bhi.n	8018bd8 <__mdiff+0x88>
 8018c0c:	1b33      	subs	r3, r6, r4
 8018c0e:	3b15      	subs	r3, #21
 8018c10:	f023 0303 	bic.w	r3, r3, #3
 8018c14:	3415      	adds	r4, #21
 8018c16:	3304      	adds	r3, #4
 8018c18:	42a6      	cmp	r6, r4
 8018c1a:	bf38      	it	cc
 8018c1c:	2304      	movcc	r3, #4
 8018c1e:	441d      	add	r5, r3
 8018c20:	445b      	add	r3, fp
 8018c22:	461e      	mov	r6, r3
 8018c24:	462c      	mov	r4, r5
 8018c26:	4544      	cmp	r4, r8
 8018c28:	d30e      	bcc.n	8018c48 <__mdiff+0xf8>
 8018c2a:	f108 0103 	add.w	r1, r8, #3
 8018c2e:	1b49      	subs	r1, r1, r5
 8018c30:	f021 0103 	bic.w	r1, r1, #3
 8018c34:	3d03      	subs	r5, #3
 8018c36:	45a8      	cmp	r8, r5
 8018c38:	bf38      	it	cc
 8018c3a:	2100      	movcc	r1, #0
 8018c3c:	440b      	add	r3, r1
 8018c3e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018c42:	b191      	cbz	r1, 8018c6a <__mdiff+0x11a>
 8018c44:	6117      	str	r7, [r2, #16]
 8018c46:	e79d      	b.n	8018b84 <__mdiff+0x34>
 8018c48:	f854 1b04 	ldr.w	r1, [r4], #4
 8018c4c:	46e6      	mov	lr, ip
 8018c4e:	0c08      	lsrs	r0, r1, #16
 8018c50:	fa1c fc81 	uxtah	ip, ip, r1
 8018c54:	4471      	add	r1, lr
 8018c56:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8018c5a:	b289      	uxth	r1, r1
 8018c5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8018c60:	f846 1b04 	str.w	r1, [r6], #4
 8018c64:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8018c68:	e7dd      	b.n	8018c26 <__mdiff+0xd6>
 8018c6a:	3f01      	subs	r7, #1
 8018c6c:	e7e7      	b.n	8018c3e <__mdiff+0xee>
 8018c6e:	bf00      	nop
 8018c70:	08019ea1 	.word	0x08019ea1
 8018c74:	08019f29 	.word	0x08019f29

08018c78 <__ulp>:
 8018c78:	b082      	sub	sp, #8
 8018c7a:	ed8d 0b00 	vstr	d0, [sp]
 8018c7e:	9a01      	ldr	r2, [sp, #4]
 8018c80:	4b0f      	ldr	r3, [pc, #60]	@ (8018cc0 <__ulp+0x48>)
 8018c82:	4013      	ands	r3, r2
 8018c84:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8018c88:	2b00      	cmp	r3, #0
 8018c8a:	dc08      	bgt.n	8018c9e <__ulp+0x26>
 8018c8c:	425b      	negs	r3, r3
 8018c8e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8018c92:	ea4f 5223 	mov.w	r2, r3, asr #20
 8018c96:	da04      	bge.n	8018ca2 <__ulp+0x2a>
 8018c98:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8018c9c:	4113      	asrs	r3, r2
 8018c9e:	2200      	movs	r2, #0
 8018ca0:	e008      	b.n	8018cb4 <__ulp+0x3c>
 8018ca2:	f1a2 0314 	sub.w	r3, r2, #20
 8018ca6:	2b1e      	cmp	r3, #30
 8018ca8:	bfda      	itte	le
 8018caa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8018cae:	40da      	lsrle	r2, r3
 8018cb0:	2201      	movgt	r2, #1
 8018cb2:	2300      	movs	r3, #0
 8018cb4:	4619      	mov	r1, r3
 8018cb6:	4610      	mov	r0, r2
 8018cb8:	ec41 0b10 	vmov	d0, r0, r1
 8018cbc:	b002      	add	sp, #8
 8018cbe:	4770      	bx	lr
 8018cc0:	7ff00000 	.word	0x7ff00000

08018cc4 <__b2d>:
 8018cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018cc8:	6906      	ldr	r6, [r0, #16]
 8018cca:	f100 0814 	add.w	r8, r0, #20
 8018cce:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8018cd2:	1f37      	subs	r7, r6, #4
 8018cd4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8018cd8:	4610      	mov	r0, r2
 8018cda:	f7ff fd4b 	bl	8018774 <__hi0bits>
 8018cde:	f1c0 0320 	rsb	r3, r0, #32
 8018ce2:	280a      	cmp	r0, #10
 8018ce4:	600b      	str	r3, [r1, #0]
 8018ce6:	491b      	ldr	r1, [pc, #108]	@ (8018d54 <__b2d+0x90>)
 8018ce8:	dc15      	bgt.n	8018d16 <__b2d+0x52>
 8018cea:	f1c0 0c0b 	rsb	ip, r0, #11
 8018cee:	fa22 f30c 	lsr.w	r3, r2, ip
 8018cf2:	45b8      	cmp	r8, r7
 8018cf4:	ea43 0501 	orr.w	r5, r3, r1
 8018cf8:	bf34      	ite	cc
 8018cfa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8018cfe:	2300      	movcs	r3, #0
 8018d00:	3015      	adds	r0, #21
 8018d02:	fa02 f000 	lsl.w	r0, r2, r0
 8018d06:	fa23 f30c 	lsr.w	r3, r3, ip
 8018d0a:	4303      	orrs	r3, r0
 8018d0c:	461c      	mov	r4, r3
 8018d0e:	ec45 4b10 	vmov	d0, r4, r5
 8018d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d16:	45b8      	cmp	r8, r7
 8018d18:	bf3a      	itte	cc
 8018d1a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8018d1e:	f1a6 0708 	subcc.w	r7, r6, #8
 8018d22:	2300      	movcs	r3, #0
 8018d24:	380b      	subs	r0, #11
 8018d26:	d012      	beq.n	8018d4e <__b2d+0x8a>
 8018d28:	f1c0 0120 	rsb	r1, r0, #32
 8018d2c:	fa23 f401 	lsr.w	r4, r3, r1
 8018d30:	4082      	lsls	r2, r0
 8018d32:	4322      	orrs	r2, r4
 8018d34:	4547      	cmp	r7, r8
 8018d36:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8018d3a:	bf8c      	ite	hi
 8018d3c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8018d40:	2200      	movls	r2, #0
 8018d42:	4083      	lsls	r3, r0
 8018d44:	40ca      	lsrs	r2, r1
 8018d46:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8018d4a:	4313      	orrs	r3, r2
 8018d4c:	e7de      	b.n	8018d0c <__b2d+0x48>
 8018d4e:	ea42 0501 	orr.w	r5, r2, r1
 8018d52:	e7db      	b.n	8018d0c <__b2d+0x48>
 8018d54:	3ff00000 	.word	0x3ff00000

08018d58 <__d2b>:
 8018d58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018d5c:	460f      	mov	r7, r1
 8018d5e:	2101      	movs	r1, #1
 8018d60:	ec59 8b10 	vmov	r8, r9, d0
 8018d64:	4616      	mov	r6, r2
 8018d66:	f7ff fc13 	bl	8018590 <_Balloc>
 8018d6a:	4604      	mov	r4, r0
 8018d6c:	b930      	cbnz	r0, 8018d7c <__d2b+0x24>
 8018d6e:	4602      	mov	r2, r0
 8018d70:	4b23      	ldr	r3, [pc, #140]	@ (8018e00 <__d2b+0xa8>)
 8018d72:	4824      	ldr	r0, [pc, #144]	@ (8018e04 <__d2b+0xac>)
 8018d74:	f240 310f 	movw	r1, #783	@ 0x30f
 8018d78:	f000 f982 	bl	8019080 <__assert_func>
 8018d7c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8018d80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018d84:	b10d      	cbz	r5, 8018d8a <__d2b+0x32>
 8018d86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8018d8a:	9301      	str	r3, [sp, #4]
 8018d8c:	f1b8 0300 	subs.w	r3, r8, #0
 8018d90:	d023      	beq.n	8018dda <__d2b+0x82>
 8018d92:	4668      	mov	r0, sp
 8018d94:	9300      	str	r3, [sp, #0]
 8018d96:	f7ff fd0c 	bl	80187b2 <__lo0bits>
 8018d9a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8018d9e:	b1d0      	cbz	r0, 8018dd6 <__d2b+0x7e>
 8018da0:	f1c0 0320 	rsb	r3, r0, #32
 8018da4:	fa02 f303 	lsl.w	r3, r2, r3
 8018da8:	430b      	orrs	r3, r1
 8018daa:	40c2      	lsrs	r2, r0
 8018dac:	6163      	str	r3, [r4, #20]
 8018dae:	9201      	str	r2, [sp, #4]
 8018db0:	9b01      	ldr	r3, [sp, #4]
 8018db2:	61a3      	str	r3, [r4, #24]
 8018db4:	2b00      	cmp	r3, #0
 8018db6:	bf0c      	ite	eq
 8018db8:	2201      	moveq	r2, #1
 8018dba:	2202      	movne	r2, #2
 8018dbc:	6122      	str	r2, [r4, #16]
 8018dbe:	b1a5      	cbz	r5, 8018dea <__d2b+0x92>
 8018dc0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8018dc4:	4405      	add	r5, r0
 8018dc6:	603d      	str	r5, [r7, #0]
 8018dc8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8018dcc:	6030      	str	r0, [r6, #0]
 8018dce:	4620      	mov	r0, r4
 8018dd0:	b003      	add	sp, #12
 8018dd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018dd6:	6161      	str	r1, [r4, #20]
 8018dd8:	e7ea      	b.n	8018db0 <__d2b+0x58>
 8018dda:	a801      	add	r0, sp, #4
 8018ddc:	f7ff fce9 	bl	80187b2 <__lo0bits>
 8018de0:	9b01      	ldr	r3, [sp, #4]
 8018de2:	6163      	str	r3, [r4, #20]
 8018de4:	3020      	adds	r0, #32
 8018de6:	2201      	movs	r2, #1
 8018de8:	e7e8      	b.n	8018dbc <__d2b+0x64>
 8018dea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018dee:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8018df2:	6038      	str	r0, [r7, #0]
 8018df4:	6918      	ldr	r0, [r3, #16]
 8018df6:	f7ff fcbd 	bl	8018774 <__hi0bits>
 8018dfa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018dfe:	e7e5      	b.n	8018dcc <__d2b+0x74>
 8018e00:	08019ea1 	.word	0x08019ea1
 8018e04:	08019f29 	.word	0x08019f29

08018e08 <__ratio>:
 8018e08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e0c:	4688      	mov	r8, r1
 8018e0e:	4669      	mov	r1, sp
 8018e10:	4681      	mov	r9, r0
 8018e12:	f7ff ff57 	bl	8018cc4 <__b2d>
 8018e16:	a901      	add	r1, sp, #4
 8018e18:	4640      	mov	r0, r8
 8018e1a:	ec55 4b10 	vmov	r4, r5, d0
 8018e1e:	f7ff ff51 	bl	8018cc4 <__b2d>
 8018e22:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8018e26:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8018e2a:	1ad2      	subs	r2, r2, r3
 8018e2c:	e9dd 3100 	ldrd	r3, r1, [sp]
 8018e30:	1a5b      	subs	r3, r3, r1
 8018e32:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8018e36:	ec57 6b10 	vmov	r6, r7, d0
 8018e3a:	2b00      	cmp	r3, #0
 8018e3c:	bfd6      	itet	le
 8018e3e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018e42:	462a      	movgt	r2, r5
 8018e44:	463a      	movle	r2, r7
 8018e46:	46ab      	mov	fp, r5
 8018e48:	46a2      	mov	sl, r4
 8018e4a:	bfce      	itee	gt
 8018e4c:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8018e50:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8018e54:	ee00 3a90 	vmovle	s1, r3
 8018e58:	ec4b ab17 	vmov	d7, sl, fp
 8018e5c:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8018e60:	b003      	add	sp, #12
 8018e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018e66 <__copybits>:
 8018e66:	3901      	subs	r1, #1
 8018e68:	b570      	push	{r4, r5, r6, lr}
 8018e6a:	1149      	asrs	r1, r1, #5
 8018e6c:	6914      	ldr	r4, [r2, #16]
 8018e6e:	3101      	adds	r1, #1
 8018e70:	f102 0314 	add.w	r3, r2, #20
 8018e74:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018e78:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018e7c:	1f05      	subs	r5, r0, #4
 8018e7e:	42a3      	cmp	r3, r4
 8018e80:	d30c      	bcc.n	8018e9c <__copybits+0x36>
 8018e82:	1aa3      	subs	r3, r4, r2
 8018e84:	3b11      	subs	r3, #17
 8018e86:	f023 0303 	bic.w	r3, r3, #3
 8018e8a:	3211      	adds	r2, #17
 8018e8c:	42a2      	cmp	r2, r4
 8018e8e:	bf88      	it	hi
 8018e90:	2300      	movhi	r3, #0
 8018e92:	4418      	add	r0, r3
 8018e94:	2300      	movs	r3, #0
 8018e96:	4288      	cmp	r0, r1
 8018e98:	d305      	bcc.n	8018ea6 <__copybits+0x40>
 8018e9a:	bd70      	pop	{r4, r5, r6, pc}
 8018e9c:	f853 6b04 	ldr.w	r6, [r3], #4
 8018ea0:	f845 6f04 	str.w	r6, [r5, #4]!
 8018ea4:	e7eb      	b.n	8018e7e <__copybits+0x18>
 8018ea6:	f840 3b04 	str.w	r3, [r0], #4
 8018eaa:	e7f4      	b.n	8018e96 <__copybits+0x30>

08018eac <__any_on>:
 8018eac:	f100 0214 	add.w	r2, r0, #20
 8018eb0:	6900      	ldr	r0, [r0, #16]
 8018eb2:	114b      	asrs	r3, r1, #5
 8018eb4:	4298      	cmp	r0, r3
 8018eb6:	b510      	push	{r4, lr}
 8018eb8:	db11      	blt.n	8018ede <__any_on+0x32>
 8018eba:	dd0a      	ble.n	8018ed2 <__any_on+0x26>
 8018ebc:	f011 011f 	ands.w	r1, r1, #31
 8018ec0:	d007      	beq.n	8018ed2 <__any_on+0x26>
 8018ec2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018ec6:	fa24 f001 	lsr.w	r0, r4, r1
 8018eca:	fa00 f101 	lsl.w	r1, r0, r1
 8018ece:	428c      	cmp	r4, r1
 8018ed0:	d10b      	bne.n	8018eea <__any_on+0x3e>
 8018ed2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018ed6:	4293      	cmp	r3, r2
 8018ed8:	d803      	bhi.n	8018ee2 <__any_on+0x36>
 8018eda:	2000      	movs	r0, #0
 8018edc:	bd10      	pop	{r4, pc}
 8018ede:	4603      	mov	r3, r0
 8018ee0:	e7f7      	b.n	8018ed2 <__any_on+0x26>
 8018ee2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018ee6:	2900      	cmp	r1, #0
 8018ee8:	d0f5      	beq.n	8018ed6 <__any_on+0x2a>
 8018eea:	2001      	movs	r0, #1
 8018eec:	e7f6      	b.n	8018edc <__any_on+0x30>

08018eee <__ascii_wctomb>:
 8018eee:	4603      	mov	r3, r0
 8018ef0:	4608      	mov	r0, r1
 8018ef2:	b141      	cbz	r1, 8018f06 <__ascii_wctomb+0x18>
 8018ef4:	2aff      	cmp	r2, #255	@ 0xff
 8018ef6:	d904      	bls.n	8018f02 <__ascii_wctomb+0x14>
 8018ef8:	228a      	movs	r2, #138	@ 0x8a
 8018efa:	601a      	str	r2, [r3, #0]
 8018efc:	f04f 30ff 	mov.w	r0, #4294967295
 8018f00:	4770      	bx	lr
 8018f02:	700a      	strb	r2, [r1, #0]
 8018f04:	2001      	movs	r0, #1
 8018f06:	4770      	bx	lr

08018f08 <__sflush_r>:
 8018f08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f10:	0716      	lsls	r6, r2, #28
 8018f12:	4605      	mov	r5, r0
 8018f14:	460c      	mov	r4, r1
 8018f16:	d454      	bmi.n	8018fc2 <__sflush_r+0xba>
 8018f18:	684b      	ldr	r3, [r1, #4]
 8018f1a:	2b00      	cmp	r3, #0
 8018f1c:	dc02      	bgt.n	8018f24 <__sflush_r+0x1c>
 8018f1e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018f20:	2b00      	cmp	r3, #0
 8018f22:	dd48      	ble.n	8018fb6 <__sflush_r+0xae>
 8018f24:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018f26:	2e00      	cmp	r6, #0
 8018f28:	d045      	beq.n	8018fb6 <__sflush_r+0xae>
 8018f2a:	2300      	movs	r3, #0
 8018f2c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018f30:	682f      	ldr	r7, [r5, #0]
 8018f32:	6a21      	ldr	r1, [r4, #32]
 8018f34:	602b      	str	r3, [r5, #0]
 8018f36:	d030      	beq.n	8018f9a <__sflush_r+0x92>
 8018f38:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8018f3a:	89a3      	ldrh	r3, [r4, #12]
 8018f3c:	0759      	lsls	r1, r3, #29
 8018f3e:	d505      	bpl.n	8018f4c <__sflush_r+0x44>
 8018f40:	6863      	ldr	r3, [r4, #4]
 8018f42:	1ad2      	subs	r2, r2, r3
 8018f44:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018f46:	b10b      	cbz	r3, 8018f4c <__sflush_r+0x44>
 8018f48:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018f4a:	1ad2      	subs	r2, r2, r3
 8018f4c:	2300      	movs	r3, #0
 8018f4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018f50:	6a21      	ldr	r1, [r4, #32]
 8018f52:	4628      	mov	r0, r5
 8018f54:	47b0      	blx	r6
 8018f56:	1c43      	adds	r3, r0, #1
 8018f58:	89a3      	ldrh	r3, [r4, #12]
 8018f5a:	d106      	bne.n	8018f6a <__sflush_r+0x62>
 8018f5c:	6829      	ldr	r1, [r5, #0]
 8018f5e:	291d      	cmp	r1, #29
 8018f60:	d82b      	bhi.n	8018fba <__sflush_r+0xb2>
 8018f62:	4a2a      	ldr	r2, [pc, #168]	@ (801900c <__sflush_r+0x104>)
 8018f64:	410a      	asrs	r2, r1
 8018f66:	07d6      	lsls	r6, r2, #31
 8018f68:	d427      	bmi.n	8018fba <__sflush_r+0xb2>
 8018f6a:	2200      	movs	r2, #0
 8018f6c:	6062      	str	r2, [r4, #4]
 8018f6e:	04d9      	lsls	r1, r3, #19
 8018f70:	6922      	ldr	r2, [r4, #16]
 8018f72:	6022      	str	r2, [r4, #0]
 8018f74:	d504      	bpl.n	8018f80 <__sflush_r+0x78>
 8018f76:	1c42      	adds	r2, r0, #1
 8018f78:	d101      	bne.n	8018f7e <__sflush_r+0x76>
 8018f7a:	682b      	ldr	r3, [r5, #0]
 8018f7c:	b903      	cbnz	r3, 8018f80 <__sflush_r+0x78>
 8018f7e:	6560      	str	r0, [r4, #84]	@ 0x54
 8018f80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018f82:	602f      	str	r7, [r5, #0]
 8018f84:	b1b9      	cbz	r1, 8018fb6 <__sflush_r+0xae>
 8018f86:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018f8a:	4299      	cmp	r1, r3
 8018f8c:	d002      	beq.n	8018f94 <__sflush_r+0x8c>
 8018f8e:	4628      	mov	r0, r5
 8018f90:	f7fe feba 	bl	8017d08 <_free_r>
 8018f94:	2300      	movs	r3, #0
 8018f96:	6363      	str	r3, [r4, #52]	@ 0x34
 8018f98:	e00d      	b.n	8018fb6 <__sflush_r+0xae>
 8018f9a:	2301      	movs	r3, #1
 8018f9c:	4628      	mov	r0, r5
 8018f9e:	47b0      	blx	r6
 8018fa0:	4602      	mov	r2, r0
 8018fa2:	1c50      	adds	r0, r2, #1
 8018fa4:	d1c9      	bne.n	8018f3a <__sflush_r+0x32>
 8018fa6:	682b      	ldr	r3, [r5, #0]
 8018fa8:	2b00      	cmp	r3, #0
 8018faa:	d0c6      	beq.n	8018f3a <__sflush_r+0x32>
 8018fac:	2b1d      	cmp	r3, #29
 8018fae:	d001      	beq.n	8018fb4 <__sflush_r+0xac>
 8018fb0:	2b16      	cmp	r3, #22
 8018fb2:	d11e      	bne.n	8018ff2 <__sflush_r+0xea>
 8018fb4:	602f      	str	r7, [r5, #0]
 8018fb6:	2000      	movs	r0, #0
 8018fb8:	e022      	b.n	8019000 <__sflush_r+0xf8>
 8018fba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018fbe:	b21b      	sxth	r3, r3
 8018fc0:	e01b      	b.n	8018ffa <__sflush_r+0xf2>
 8018fc2:	690f      	ldr	r7, [r1, #16]
 8018fc4:	2f00      	cmp	r7, #0
 8018fc6:	d0f6      	beq.n	8018fb6 <__sflush_r+0xae>
 8018fc8:	0793      	lsls	r3, r2, #30
 8018fca:	680e      	ldr	r6, [r1, #0]
 8018fcc:	bf08      	it	eq
 8018fce:	694b      	ldreq	r3, [r1, #20]
 8018fd0:	600f      	str	r7, [r1, #0]
 8018fd2:	bf18      	it	ne
 8018fd4:	2300      	movne	r3, #0
 8018fd6:	eba6 0807 	sub.w	r8, r6, r7
 8018fda:	608b      	str	r3, [r1, #8]
 8018fdc:	f1b8 0f00 	cmp.w	r8, #0
 8018fe0:	dde9      	ble.n	8018fb6 <__sflush_r+0xae>
 8018fe2:	6a21      	ldr	r1, [r4, #32]
 8018fe4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8018fe6:	4643      	mov	r3, r8
 8018fe8:	463a      	mov	r2, r7
 8018fea:	4628      	mov	r0, r5
 8018fec:	47b0      	blx	r6
 8018fee:	2800      	cmp	r0, #0
 8018ff0:	dc08      	bgt.n	8019004 <__sflush_r+0xfc>
 8018ff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018ff6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018ffa:	81a3      	strh	r3, [r4, #12]
 8018ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8019000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019004:	4407      	add	r7, r0
 8019006:	eba8 0800 	sub.w	r8, r8, r0
 801900a:	e7e7      	b.n	8018fdc <__sflush_r+0xd4>
 801900c:	dfbffffe 	.word	0xdfbffffe

08019010 <_fflush_r>:
 8019010:	b538      	push	{r3, r4, r5, lr}
 8019012:	690b      	ldr	r3, [r1, #16]
 8019014:	4605      	mov	r5, r0
 8019016:	460c      	mov	r4, r1
 8019018:	b913      	cbnz	r3, 8019020 <_fflush_r+0x10>
 801901a:	2500      	movs	r5, #0
 801901c:	4628      	mov	r0, r5
 801901e:	bd38      	pop	{r3, r4, r5, pc}
 8019020:	b118      	cbz	r0, 801902a <_fflush_r+0x1a>
 8019022:	6a03      	ldr	r3, [r0, #32]
 8019024:	b90b      	cbnz	r3, 801902a <_fflush_r+0x1a>
 8019026:	f7fe fd45 	bl	8017ab4 <__sinit>
 801902a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801902e:	2b00      	cmp	r3, #0
 8019030:	d0f3      	beq.n	801901a <_fflush_r+0xa>
 8019032:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8019034:	07d0      	lsls	r0, r2, #31
 8019036:	d404      	bmi.n	8019042 <_fflush_r+0x32>
 8019038:	0599      	lsls	r1, r3, #22
 801903a:	d402      	bmi.n	8019042 <_fflush_r+0x32>
 801903c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801903e:	f7fe fe4a 	bl	8017cd6 <__retarget_lock_acquire_recursive>
 8019042:	4628      	mov	r0, r5
 8019044:	4621      	mov	r1, r4
 8019046:	f7ff ff5f 	bl	8018f08 <__sflush_r>
 801904a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801904c:	07da      	lsls	r2, r3, #31
 801904e:	4605      	mov	r5, r0
 8019050:	d4e4      	bmi.n	801901c <_fflush_r+0xc>
 8019052:	89a3      	ldrh	r3, [r4, #12]
 8019054:	059b      	lsls	r3, r3, #22
 8019056:	d4e1      	bmi.n	801901c <_fflush_r+0xc>
 8019058:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801905a:	f7fe fe3d 	bl	8017cd8 <__retarget_lock_release_recursive>
 801905e:	e7dd      	b.n	801901c <_fflush_r+0xc>

08019060 <_sbrk_r>:
 8019060:	b538      	push	{r3, r4, r5, lr}
 8019062:	4d06      	ldr	r5, [pc, #24]	@ (801907c <_sbrk_r+0x1c>)
 8019064:	2300      	movs	r3, #0
 8019066:	4604      	mov	r4, r0
 8019068:	4608      	mov	r0, r1
 801906a:	602b      	str	r3, [r5, #0]
 801906c:	f7ea fb1c 	bl	80036a8 <_sbrk>
 8019070:	1c43      	adds	r3, r0, #1
 8019072:	d102      	bne.n	801907a <_sbrk_r+0x1a>
 8019074:	682b      	ldr	r3, [r5, #0]
 8019076:	b103      	cbz	r3, 801907a <_sbrk_r+0x1a>
 8019078:	6023      	str	r3, [r4, #0]
 801907a:	bd38      	pop	{r3, r4, r5, pc}
 801907c:	24006948 	.word	0x24006948

08019080 <__assert_func>:
 8019080:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019082:	4614      	mov	r4, r2
 8019084:	461a      	mov	r2, r3
 8019086:	4b09      	ldr	r3, [pc, #36]	@ (80190ac <__assert_func+0x2c>)
 8019088:	681b      	ldr	r3, [r3, #0]
 801908a:	4605      	mov	r5, r0
 801908c:	68d8      	ldr	r0, [r3, #12]
 801908e:	b954      	cbnz	r4, 80190a6 <__assert_func+0x26>
 8019090:	4b07      	ldr	r3, [pc, #28]	@ (80190b0 <__assert_func+0x30>)
 8019092:	461c      	mov	r4, r3
 8019094:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019098:	9100      	str	r1, [sp, #0]
 801909a:	462b      	mov	r3, r5
 801909c:	4905      	ldr	r1, [pc, #20]	@ (80190b4 <__assert_func+0x34>)
 801909e:	f000 f829 	bl	80190f4 <fiprintf>
 80190a2:	f000 f839 	bl	8019118 <abort>
 80190a6:	4b04      	ldr	r3, [pc, #16]	@ (80190b8 <__assert_func+0x38>)
 80190a8:	e7f4      	b.n	8019094 <__assert_func+0x14>
 80190aa:	bf00      	nop
 80190ac:	24000240 	.word	0x24000240
 80190b0:	0801a0bb 	.word	0x0801a0bb
 80190b4:	0801a08d 	.word	0x0801a08d
 80190b8:	0801a080 	.word	0x0801a080

080190bc <_calloc_r>:
 80190bc:	b570      	push	{r4, r5, r6, lr}
 80190be:	fba1 5402 	umull	r5, r4, r1, r2
 80190c2:	b93c      	cbnz	r4, 80190d4 <_calloc_r+0x18>
 80190c4:	4629      	mov	r1, r5
 80190c6:	f7ff f9c5 	bl	8018454 <_malloc_r>
 80190ca:	4606      	mov	r6, r0
 80190cc:	b928      	cbnz	r0, 80190da <_calloc_r+0x1e>
 80190ce:	2600      	movs	r6, #0
 80190d0:	4630      	mov	r0, r6
 80190d2:	bd70      	pop	{r4, r5, r6, pc}
 80190d4:	220c      	movs	r2, #12
 80190d6:	6002      	str	r2, [r0, #0]
 80190d8:	e7f9      	b.n	80190ce <_calloc_r+0x12>
 80190da:	462a      	mov	r2, r5
 80190dc:	4621      	mov	r1, r4
 80190de:	f7fe fd62 	bl	8017ba6 <memset>
 80190e2:	e7f5      	b.n	80190d0 <_calloc_r+0x14>

080190e4 <malloc>:
 80190e4:	4b02      	ldr	r3, [pc, #8]	@ (80190f0 <malloc+0xc>)
 80190e6:	4601      	mov	r1, r0
 80190e8:	6818      	ldr	r0, [r3, #0]
 80190ea:	f7ff b9b3 	b.w	8018454 <_malloc_r>
 80190ee:	bf00      	nop
 80190f0:	24000240 	.word	0x24000240

080190f4 <fiprintf>:
 80190f4:	b40e      	push	{r1, r2, r3}
 80190f6:	b503      	push	{r0, r1, lr}
 80190f8:	4601      	mov	r1, r0
 80190fa:	ab03      	add	r3, sp, #12
 80190fc:	4805      	ldr	r0, [pc, #20]	@ (8019114 <fiprintf+0x20>)
 80190fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8019102:	6800      	ldr	r0, [r0, #0]
 8019104:	9301      	str	r3, [sp, #4]
 8019106:	f000 f837 	bl	8019178 <_vfiprintf_r>
 801910a:	b002      	add	sp, #8
 801910c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019110:	b003      	add	sp, #12
 8019112:	4770      	bx	lr
 8019114:	24000240 	.word	0x24000240

08019118 <abort>:
 8019118:	b508      	push	{r3, lr}
 801911a:	2006      	movs	r0, #6
 801911c:	f000 fb8e 	bl	801983c <raise>
 8019120:	2001      	movs	r0, #1
 8019122:	f7ea fa49 	bl	80035b8 <_exit>

08019126 <__sfputc_r>:
 8019126:	6893      	ldr	r3, [r2, #8]
 8019128:	3b01      	subs	r3, #1
 801912a:	2b00      	cmp	r3, #0
 801912c:	b410      	push	{r4}
 801912e:	6093      	str	r3, [r2, #8]
 8019130:	da08      	bge.n	8019144 <__sfputc_r+0x1e>
 8019132:	6994      	ldr	r4, [r2, #24]
 8019134:	42a3      	cmp	r3, r4
 8019136:	db01      	blt.n	801913c <__sfputc_r+0x16>
 8019138:	290a      	cmp	r1, #10
 801913a:	d103      	bne.n	8019144 <__sfputc_r+0x1e>
 801913c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019140:	f000 bac0 	b.w	80196c4 <__swbuf_r>
 8019144:	6813      	ldr	r3, [r2, #0]
 8019146:	1c58      	adds	r0, r3, #1
 8019148:	6010      	str	r0, [r2, #0]
 801914a:	7019      	strb	r1, [r3, #0]
 801914c:	4608      	mov	r0, r1
 801914e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019152:	4770      	bx	lr

08019154 <__sfputs_r>:
 8019154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019156:	4606      	mov	r6, r0
 8019158:	460f      	mov	r7, r1
 801915a:	4614      	mov	r4, r2
 801915c:	18d5      	adds	r5, r2, r3
 801915e:	42ac      	cmp	r4, r5
 8019160:	d101      	bne.n	8019166 <__sfputs_r+0x12>
 8019162:	2000      	movs	r0, #0
 8019164:	e007      	b.n	8019176 <__sfputs_r+0x22>
 8019166:	f814 1b01 	ldrb.w	r1, [r4], #1
 801916a:	463a      	mov	r2, r7
 801916c:	4630      	mov	r0, r6
 801916e:	f7ff ffda 	bl	8019126 <__sfputc_r>
 8019172:	1c43      	adds	r3, r0, #1
 8019174:	d1f3      	bne.n	801915e <__sfputs_r+0xa>
 8019176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019178 <_vfiprintf_r>:
 8019178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801917c:	460d      	mov	r5, r1
 801917e:	b09d      	sub	sp, #116	@ 0x74
 8019180:	4614      	mov	r4, r2
 8019182:	4698      	mov	r8, r3
 8019184:	4606      	mov	r6, r0
 8019186:	b118      	cbz	r0, 8019190 <_vfiprintf_r+0x18>
 8019188:	6a03      	ldr	r3, [r0, #32]
 801918a:	b90b      	cbnz	r3, 8019190 <_vfiprintf_r+0x18>
 801918c:	f7fe fc92 	bl	8017ab4 <__sinit>
 8019190:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019192:	07d9      	lsls	r1, r3, #31
 8019194:	d405      	bmi.n	80191a2 <_vfiprintf_r+0x2a>
 8019196:	89ab      	ldrh	r3, [r5, #12]
 8019198:	059a      	lsls	r2, r3, #22
 801919a:	d402      	bmi.n	80191a2 <_vfiprintf_r+0x2a>
 801919c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801919e:	f7fe fd9a 	bl	8017cd6 <__retarget_lock_acquire_recursive>
 80191a2:	89ab      	ldrh	r3, [r5, #12]
 80191a4:	071b      	lsls	r3, r3, #28
 80191a6:	d501      	bpl.n	80191ac <_vfiprintf_r+0x34>
 80191a8:	692b      	ldr	r3, [r5, #16]
 80191aa:	b99b      	cbnz	r3, 80191d4 <_vfiprintf_r+0x5c>
 80191ac:	4629      	mov	r1, r5
 80191ae:	4630      	mov	r0, r6
 80191b0:	f000 fac6 	bl	8019740 <__swsetup_r>
 80191b4:	b170      	cbz	r0, 80191d4 <_vfiprintf_r+0x5c>
 80191b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80191b8:	07dc      	lsls	r4, r3, #31
 80191ba:	d504      	bpl.n	80191c6 <_vfiprintf_r+0x4e>
 80191bc:	f04f 30ff 	mov.w	r0, #4294967295
 80191c0:	b01d      	add	sp, #116	@ 0x74
 80191c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191c6:	89ab      	ldrh	r3, [r5, #12]
 80191c8:	0598      	lsls	r0, r3, #22
 80191ca:	d4f7      	bmi.n	80191bc <_vfiprintf_r+0x44>
 80191cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80191ce:	f7fe fd83 	bl	8017cd8 <__retarget_lock_release_recursive>
 80191d2:	e7f3      	b.n	80191bc <_vfiprintf_r+0x44>
 80191d4:	2300      	movs	r3, #0
 80191d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80191d8:	2320      	movs	r3, #32
 80191da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80191de:	f8cd 800c 	str.w	r8, [sp, #12]
 80191e2:	2330      	movs	r3, #48	@ 0x30
 80191e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8019394 <_vfiprintf_r+0x21c>
 80191e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80191ec:	f04f 0901 	mov.w	r9, #1
 80191f0:	4623      	mov	r3, r4
 80191f2:	469a      	mov	sl, r3
 80191f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80191f8:	b10a      	cbz	r2, 80191fe <_vfiprintf_r+0x86>
 80191fa:	2a25      	cmp	r2, #37	@ 0x25
 80191fc:	d1f9      	bne.n	80191f2 <_vfiprintf_r+0x7a>
 80191fe:	ebba 0b04 	subs.w	fp, sl, r4
 8019202:	d00b      	beq.n	801921c <_vfiprintf_r+0xa4>
 8019204:	465b      	mov	r3, fp
 8019206:	4622      	mov	r2, r4
 8019208:	4629      	mov	r1, r5
 801920a:	4630      	mov	r0, r6
 801920c:	f7ff ffa2 	bl	8019154 <__sfputs_r>
 8019210:	3001      	adds	r0, #1
 8019212:	f000 80a7 	beq.w	8019364 <_vfiprintf_r+0x1ec>
 8019216:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019218:	445a      	add	r2, fp
 801921a:	9209      	str	r2, [sp, #36]	@ 0x24
 801921c:	f89a 3000 	ldrb.w	r3, [sl]
 8019220:	2b00      	cmp	r3, #0
 8019222:	f000 809f 	beq.w	8019364 <_vfiprintf_r+0x1ec>
 8019226:	2300      	movs	r3, #0
 8019228:	f04f 32ff 	mov.w	r2, #4294967295
 801922c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019230:	f10a 0a01 	add.w	sl, sl, #1
 8019234:	9304      	str	r3, [sp, #16]
 8019236:	9307      	str	r3, [sp, #28]
 8019238:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801923c:	931a      	str	r3, [sp, #104]	@ 0x68
 801923e:	4654      	mov	r4, sl
 8019240:	2205      	movs	r2, #5
 8019242:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019246:	4853      	ldr	r0, [pc, #332]	@ (8019394 <_vfiprintf_r+0x21c>)
 8019248:	f7e7 f862 	bl	8000310 <memchr>
 801924c:	9a04      	ldr	r2, [sp, #16]
 801924e:	b9d8      	cbnz	r0, 8019288 <_vfiprintf_r+0x110>
 8019250:	06d1      	lsls	r1, r2, #27
 8019252:	bf44      	itt	mi
 8019254:	2320      	movmi	r3, #32
 8019256:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801925a:	0713      	lsls	r3, r2, #28
 801925c:	bf44      	itt	mi
 801925e:	232b      	movmi	r3, #43	@ 0x2b
 8019260:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019264:	f89a 3000 	ldrb.w	r3, [sl]
 8019268:	2b2a      	cmp	r3, #42	@ 0x2a
 801926a:	d015      	beq.n	8019298 <_vfiprintf_r+0x120>
 801926c:	9a07      	ldr	r2, [sp, #28]
 801926e:	4654      	mov	r4, sl
 8019270:	2000      	movs	r0, #0
 8019272:	f04f 0c0a 	mov.w	ip, #10
 8019276:	4621      	mov	r1, r4
 8019278:	f811 3b01 	ldrb.w	r3, [r1], #1
 801927c:	3b30      	subs	r3, #48	@ 0x30
 801927e:	2b09      	cmp	r3, #9
 8019280:	d94b      	bls.n	801931a <_vfiprintf_r+0x1a2>
 8019282:	b1b0      	cbz	r0, 80192b2 <_vfiprintf_r+0x13a>
 8019284:	9207      	str	r2, [sp, #28]
 8019286:	e014      	b.n	80192b2 <_vfiprintf_r+0x13a>
 8019288:	eba0 0308 	sub.w	r3, r0, r8
 801928c:	fa09 f303 	lsl.w	r3, r9, r3
 8019290:	4313      	orrs	r3, r2
 8019292:	9304      	str	r3, [sp, #16]
 8019294:	46a2      	mov	sl, r4
 8019296:	e7d2      	b.n	801923e <_vfiprintf_r+0xc6>
 8019298:	9b03      	ldr	r3, [sp, #12]
 801929a:	1d19      	adds	r1, r3, #4
 801929c:	681b      	ldr	r3, [r3, #0]
 801929e:	9103      	str	r1, [sp, #12]
 80192a0:	2b00      	cmp	r3, #0
 80192a2:	bfbb      	ittet	lt
 80192a4:	425b      	neglt	r3, r3
 80192a6:	f042 0202 	orrlt.w	r2, r2, #2
 80192aa:	9307      	strge	r3, [sp, #28]
 80192ac:	9307      	strlt	r3, [sp, #28]
 80192ae:	bfb8      	it	lt
 80192b0:	9204      	strlt	r2, [sp, #16]
 80192b2:	7823      	ldrb	r3, [r4, #0]
 80192b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80192b6:	d10a      	bne.n	80192ce <_vfiprintf_r+0x156>
 80192b8:	7863      	ldrb	r3, [r4, #1]
 80192ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80192bc:	d132      	bne.n	8019324 <_vfiprintf_r+0x1ac>
 80192be:	9b03      	ldr	r3, [sp, #12]
 80192c0:	1d1a      	adds	r2, r3, #4
 80192c2:	681b      	ldr	r3, [r3, #0]
 80192c4:	9203      	str	r2, [sp, #12]
 80192c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80192ca:	3402      	adds	r4, #2
 80192cc:	9305      	str	r3, [sp, #20]
 80192ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80193a4 <_vfiprintf_r+0x22c>
 80192d2:	7821      	ldrb	r1, [r4, #0]
 80192d4:	2203      	movs	r2, #3
 80192d6:	4650      	mov	r0, sl
 80192d8:	f7e7 f81a 	bl	8000310 <memchr>
 80192dc:	b138      	cbz	r0, 80192ee <_vfiprintf_r+0x176>
 80192de:	9b04      	ldr	r3, [sp, #16]
 80192e0:	eba0 000a 	sub.w	r0, r0, sl
 80192e4:	2240      	movs	r2, #64	@ 0x40
 80192e6:	4082      	lsls	r2, r0
 80192e8:	4313      	orrs	r3, r2
 80192ea:	3401      	adds	r4, #1
 80192ec:	9304      	str	r3, [sp, #16]
 80192ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80192f2:	4829      	ldr	r0, [pc, #164]	@ (8019398 <_vfiprintf_r+0x220>)
 80192f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80192f8:	2206      	movs	r2, #6
 80192fa:	f7e7 f809 	bl	8000310 <memchr>
 80192fe:	2800      	cmp	r0, #0
 8019300:	d03f      	beq.n	8019382 <_vfiprintf_r+0x20a>
 8019302:	4b26      	ldr	r3, [pc, #152]	@ (801939c <_vfiprintf_r+0x224>)
 8019304:	bb1b      	cbnz	r3, 801934e <_vfiprintf_r+0x1d6>
 8019306:	9b03      	ldr	r3, [sp, #12]
 8019308:	3307      	adds	r3, #7
 801930a:	f023 0307 	bic.w	r3, r3, #7
 801930e:	3308      	adds	r3, #8
 8019310:	9303      	str	r3, [sp, #12]
 8019312:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019314:	443b      	add	r3, r7
 8019316:	9309      	str	r3, [sp, #36]	@ 0x24
 8019318:	e76a      	b.n	80191f0 <_vfiprintf_r+0x78>
 801931a:	fb0c 3202 	mla	r2, ip, r2, r3
 801931e:	460c      	mov	r4, r1
 8019320:	2001      	movs	r0, #1
 8019322:	e7a8      	b.n	8019276 <_vfiprintf_r+0xfe>
 8019324:	2300      	movs	r3, #0
 8019326:	3401      	adds	r4, #1
 8019328:	9305      	str	r3, [sp, #20]
 801932a:	4619      	mov	r1, r3
 801932c:	f04f 0c0a 	mov.w	ip, #10
 8019330:	4620      	mov	r0, r4
 8019332:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019336:	3a30      	subs	r2, #48	@ 0x30
 8019338:	2a09      	cmp	r2, #9
 801933a:	d903      	bls.n	8019344 <_vfiprintf_r+0x1cc>
 801933c:	2b00      	cmp	r3, #0
 801933e:	d0c6      	beq.n	80192ce <_vfiprintf_r+0x156>
 8019340:	9105      	str	r1, [sp, #20]
 8019342:	e7c4      	b.n	80192ce <_vfiprintf_r+0x156>
 8019344:	fb0c 2101 	mla	r1, ip, r1, r2
 8019348:	4604      	mov	r4, r0
 801934a:	2301      	movs	r3, #1
 801934c:	e7f0      	b.n	8019330 <_vfiprintf_r+0x1b8>
 801934e:	ab03      	add	r3, sp, #12
 8019350:	9300      	str	r3, [sp, #0]
 8019352:	462a      	mov	r2, r5
 8019354:	4b12      	ldr	r3, [pc, #72]	@ (80193a0 <_vfiprintf_r+0x228>)
 8019356:	a904      	add	r1, sp, #16
 8019358:	4630      	mov	r0, r6
 801935a:	f3af 8000 	nop.w
 801935e:	4607      	mov	r7, r0
 8019360:	1c78      	adds	r0, r7, #1
 8019362:	d1d6      	bne.n	8019312 <_vfiprintf_r+0x19a>
 8019364:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019366:	07d9      	lsls	r1, r3, #31
 8019368:	d405      	bmi.n	8019376 <_vfiprintf_r+0x1fe>
 801936a:	89ab      	ldrh	r3, [r5, #12]
 801936c:	059a      	lsls	r2, r3, #22
 801936e:	d402      	bmi.n	8019376 <_vfiprintf_r+0x1fe>
 8019370:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019372:	f7fe fcb1 	bl	8017cd8 <__retarget_lock_release_recursive>
 8019376:	89ab      	ldrh	r3, [r5, #12]
 8019378:	065b      	lsls	r3, r3, #25
 801937a:	f53f af1f 	bmi.w	80191bc <_vfiprintf_r+0x44>
 801937e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019380:	e71e      	b.n	80191c0 <_vfiprintf_r+0x48>
 8019382:	ab03      	add	r3, sp, #12
 8019384:	9300      	str	r3, [sp, #0]
 8019386:	462a      	mov	r2, r5
 8019388:	4b05      	ldr	r3, [pc, #20]	@ (80193a0 <_vfiprintf_r+0x228>)
 801938a:	a904      	add	r1, sp, #16
 801938c:	4630      	mov	r0, r6
 801938e:	f000 f879 	bl	8019484 <_printf_i>
 8019392:	e7e4      	b.n	801935e <_vfiprintf_r+0x1e6>
 8019394:	0801a0bc 	.word	0x0801a0bc
 8019398:	0801a0c6 	.word	0x0801a0c6
 801939c:	00000000 	.word	0x00000000
 80193a0:	08019155 	.word	0x08019155
 80193a4:	0801a0c2 	.word	0x0801a0c2

080193a8 <_printf_common>:
 80193a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80193ac:	4616      	mov	r6, r2
 80193ae:	4698      	mov	r8, r3
 80193b0:	688a      	ldr	r2, [r1, #8]
 80193b2:	690b      	ldr	r3, [r1, #16]
 80193b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80193b8:	4293      	cmp	r3, r2
 80193ba:	bfb8      	it	lt
 80193bc:	4613      	movlt	r3, r2
 80193be:	6033      	str	r3, [r6, #0]
 80193c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80193c4:	4607      	mov	r7, r0
 80193c6:	460c      	mov	r4, r1
 80193c8:	b10a      	cbz	r2, 80193ce <_printf_common+0x26>
 80193ca:	3301      	adds	r3, #1
 80193cc:	6033      	str	r3, [r6, #0]
 80193ce:	6823      	ldr	r3, [r4, #0]
 80193d0:	0699      	lsls	r1, r3, #26
 80193d2:	bf42      	ittt	mi
 80193d4:	6833      	ldrmi	r3, [r6, #0]
 80193d6:	3302      	addmi	r3, #2
 80193d8:	6033      	strmi	r3, [r6, #0]
 80193da:	6825      	ldr	r5, [r4, #0]
 80193dc:	f015 0506 	ands.w	r5, r5, #6
 80193e0:	d106      	bne.n	80193f0 <_printf_common+0x48>
 80193e2:	f104 0a19 	add.w	sl, r4, #25
 80193e6:	68e3      	ldr	r3, [r4, #12]
 80193e8:	6832      	ldr	r2, [r6, #0]
 80193ea:	1a9b      	subs	r3, r3, r2
 80193ec:	42ab      	cmp	r3, r5
 80193ee:	dc26      	bgt.n	801943e <_printf_common+0x96>
 80193f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80193f4:	6822      	ldr	r2, [r4, #0]
 80193f6:	3b00      	subs	r3, #0
 80193f8:	bf18      	it	ne
 80193fa:	2301      	movne	r3, #1
 80193fc:	0692      	lsls	r2, r2, #26
 80193fe:	d42b      	bmi.n	8019458 <_printf_common+0xb0>
 8019400:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019404:	4641      	mov	r1, r8
 8019406:	4638      	mov	r0, r7
 8019408:	47c8      	blx	r9
 801940a:	3001      	adds	r0, #1
 801940c:	d01e      	beq.n	801944c <_printf_common+0xa4>
 801940e:	6823      	ldr	r3, [r4, #0]
 8019410:	6922      	ldr	r2, [r4, #16]
 8019412:	f003 0306 	and.w	r3, r3, #6
 8019416:	2b04      	cmp	r3, #4
 8019418:	bf02      	ittt	eq
 801941a:	68e5      	ldreq	r5, [r4, #12]
 801941c:	6833      	ldreq	r3, [r6, #0]
 801941e:	1aed      	subeq	r5, r5, r3
 8019420:	68a3      	ldr	r3, [r4, #8]
 8019422:	bf0c      	ite	eq
 8019424:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019428:	2500      	movne	r5, #0
 801942a:	4293      	cmp	r3, r2
 801942c:	bfc4      	itt	gt
 801942e:	1a9b      	subgt	r3, r3, r2
 8019430:	18ed      	addgt	r5, r5, r3
 8019432:	2600      	movs	r6, #0
 8019434:	341a      	adds	r4, #26
 8019436:	42b5      	cmp	r5, r6
 8019438:	d11a      	bne.n	8019470 <_printf_common+0xc8>
 801943a:	2000      	movs	r0, #0
 801943c:	e008      	b.n	8019450 <_printf_common+0xa8>
 801943e:	2301      	movs	r3, #1
 8019440:	4652      	mov	r2, sl
 8019442:	4641      	mov	r1, r8
 8019444:	4638      	mov	r0, r7
 8019446:	47c8      	blx	r9
 8019448:	3001      	adds	r0, #1
 801944a:	d103      	bne.n	8019454 <_printf_common+0xac>
 801944c:	f04f 30ff 	mov.w	r0, #4294967295
 8019450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019454:	3501      	adds	r5, #1
 8019456:	e7c6      	b.n	80193e6 <_printf_common+0x3e>
 8019458:	18e1      	adds	r1, r4, r3
 801945a:	1c5a      	adds	r2, r3, #1
 801945c:	2030      	movs	r0, #48	@ 0x30
 801945e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8019462:	4422      	add	r2, r4
 8019464:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8019468:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801946c:	3302      	adds	r3, #2
 801946e:	e7c7      	b.n	8019400 <_printf_common+0x58>
 8019470:	2301      	movs	r3, #1
 8019472:	4622      	mov	r2, r4
 8019474:	4641      	mov	r1, r8
 8019476:	4638      	mov	r0, r7
 8019478:	47c8      	blx	r9
 801947a:	3001      	adds	r0, #1
 801947c:	d0e6      	beq.n	801944c <_printf_common+0xa4>
 801947e:	3601      	adds	r6, #1
 8019480:	e7d9      	b.n	8019436 <_printf_common+0x8e>
	...

08019484 <_printf_i>:
 8019484:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019488:	7e0f      	ldrb	r7, [r1, #24]
 801948a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801948c:	2f78      	cmp	r7, #120	@ 0x78
 801948e:	4691      	mov	r9, r2
 8019490:	4680      	mov	r8, r0
 8019492:	460c      	mov	r4, r1
 8019494:	469a      	mov	sl, r3
 8019496:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801949a:	d807      	bhi.n	80194ac <_printf_i+0x28>
 801949c:	2f62      	cmp	r7, #98	@ 0x62
 801949e:	d80a      	bhi.n	80194b6 <_printf_i+0x32>
 80194a0:	2f00      	cmp	r7, #0
 80194a2:	f000 80d2 	beq.w	801964a <_printf_i+0x1c6>
 80194a6:	2f58      	cmp	r7, #88	@ 0x58
 80194a8:	f000 80b9 	beq.w	801961e <_printf_i+0x19a>
 80194ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80194b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80194b4:	e03a      	b.n	801952c <_printf_i+0xa8>
 80194b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80194ba:	2b15      	cmp	r3, #21
 80194bc:	d8f6      	bhi.n	80194ac <_printf_i+0x28>
 80194be:	a101      	add	r1, pc, #4	@ (adr r1, 80194c4 <_printf_i+0x40>)
 80194c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80194c4:	0801951d 	.word	0x0801951d
 80194c8:	08019531 	.word	0x08019531
 80194cc:	080194ad 	.word	0x080194ad
 80194d0:	080194ad 	.word	0x080194ad
 80194d4:	080194ad 	.word	0x080194ad
 80194d8:	080194ad 	.word	0x080194ad
 80194dc:	08019531 	.word	0x08019531
 80194e0:	080194ad 	.word	0x080194ad
 80194e4:	080194ad 	.word	0x080194ad
 80194e8:	080194ad 	.word	0x080194ad
 80194ec:	080194ad 	.word	0x080194ad
 80194f0:	08019631 	.word	0x08019631
 80194f4:	0801955b 	.word	0x0801955b
 80194f8:	080195eb 	.word	0x080195eb
 80194fc:	080194ad 	.word	0x080194ad
 8019500:	080194ad 	.word	0x080194ad
 8019504:	08019653 	.word	0x08019653
 8019508:	080194ad 	.word	0x080194ad
 801950c:	0801955b 	.word	0x0801955b
 8019510:	080194ad 	.word	0x080194ad
 8019514:	080194ad 	.word	0x080194ad
 8019518:	080195f3 	.word	0x080195f3
 801951c:	6833      	ldr	r3, [r6, #0]
 801951e:	1d1a      	adds	r2, r3, #4
 8019520:	681b      	ldr	r3, [r3, #0]
 8019522:	6032      	str	r2, [r6, #0]
 8019524:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019528:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801952c:	2301      	movs	r3, #1
 801952e:	e09d      	b.n	801966c <_printf_i+0x1e8>
 8019530:	6833      	ldr	r3, [r6, #0]
 8019532:	6820      	ldr	r0, [r4, #0]
 8019534:	1d19      	adds	r1, r3, #4
 8019536:	6031      	str	r1, [r6, #0]
 8019538:	0606      	lsls	r6, r0, #24
 801953a:	d501      	bpl.n	8019540 <_printf_i+0xbc>
 801953c:	681d      	ldr	r5, [r3, #0]
 801953e:	e003      	b.n	8019548 <_printf_i+0xc4>
 8019540:	0645      	lsls	r5, r0, #25
 8019542:	d5fb      	bpl.n	801953c <_printf_i+0xb8>
 8019544:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019548:	2d00      	cmp	r5, #0
 801954a:	da03      	bge.n	8019554 <_printf_i+0xd0>
 801954c:	232d      	movs	r3, #45	@ 0x2d
 801954e:	426d      	negs	r5, r5
 8019550:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019554:	4859      	ldr	r0, [pc, #356]	@ (80196bc <_printf_i+0x238>)
 8019556:	230a      	movs	r3, #10
 8019558:	e011      	b.n	801957e <_printf_i+0xfa>
 801955a:	6821      	ldr	r1, [r4, #0]
 801955c:	6833      	ldr	r3, [r6, #0]
 801955e:	0608      	lsls	r0, r1, #24
 8019560:	f853 5b04 	ldr.w	r5, [r3], #4
 8019564:	d402      	bmi.n	801956c <_printf_i+0xe8>
 8019566:	0649      	lsls	r1, r1, #25
 8019568:	bf48      	it	mi
 801956a:	b2ad      	uxthmi	r5, r5
 801956c:	2f6f      	cmp	r7, #111	@ 0x6f
 801956e:	4853      	ldr	r0, [pc, #332]	@ (80196bc <_printf_i+0x238>)
 8019570:	6033      	str	r3, [r6, #0]
 8019572:	bf14      	ite	ne
 8019574:	230a      	movne	r3, #10
 8019576:	2308      	moveq	r3, #8
 8019578:	2100      	movs	r1, #0
 801957a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801957e:	6866      	ldr	r6, [r4, #4]
 8019580:	60a6      	str	r6, [r4, #8]
 8019582:	2e00      	cmp	r6, #0
 8019584:	bfa2      	ittt	ge
 8019586:	6821      	ldrge	r1, [r4, #0]
 8019588:	f021 0104 	bicge.w	r1, r1, #4
 801958c:	6021      	strge	r1, [r4, #0]
 801958e:	b90d      	cbnz	r5, 8019594 <_printf_i+0x110>
 8019590:	2e00      	cmp	r6, #0
 8019592:	d04b      	beq.n	801962c <_printf_i+0x1a8>
 8019594:	4616      	mov	r6, r2
 8019596:	fbb5 f1f3 	udiv	r1, r5, r3
 801959a:	fb03 5711 	mls	r7, r3, r1, r5
 801959e:	5dc7      	ldrb	r7, [r0, r7]
 80195a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80195a4:	462f      	mov	r7, r5
 80195a6:	42bb      	cmp	r3, r7
 80195a8:	460d      	mov	r5, r1
 80195aa:	d9f4      	bls.n	8019596 <_printf_i+0x112>
 80195ac:	2b08      	cmp	r3, #8
 80195ae:	d10b      	bne.n	80195c8 <_printf_i+0x144>
 80195b0:	6823      	ldr	r3, [r4, #0]
 80195b2:	07df      	lsls	r7, r3, #31
 80195b4:	d508      	bpl.n	80195c8 <_printf_i+0x144>
 80195b6:	6923      	ldr	r3, [r4, #16]
 80195b8:	6861      	ldr	r1, [r4, #4]
 80195ba:	4299      	cmp	r1, r3
 80195bc:	bfde      	ittt	le
 80195be:	2330      	movle	r3, #48	@ 0x30
 80195c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80195c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80195c8:	1b92      	subs	r2, r2, r6
 80195ca:	6122      	str	r2, [r4, #16]
 80195cc:	f8cd a000 	str.w	sl, [sp]
 80195d0:	464b      	mov	r3, r9
 80195d2:	aa03      	add	r2, sp, #12
 80195d4:	4621      	mov	r1, r4
 80195d6:	4640      	mov	r0, r8
 80195d8:	f7ff fee6 	bl	80193a8 <_printf_common>
 80195dc:	3001      	adds	r0, #1
 80195de:	d14a      	bne.n	8019676 <_printf_i+0x1f2>
 80195e0:	f04f 30ff 	mov.w	r0, #4294967295
 80195e4:	b004      	add	sp, #16
 80195e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80195ea:	6823      	ldr	r3, [r4, #0]
 80195ec:	f043 0320 	orr.w	r3, r3, #32
 80195f0:	6023      	str	r3, [r4, #0]
 80195f2:	4833      	ldr	r0, [pc, #204]	@ (80196c0 <_printf_i+0x23c>)
 80195f4:	2778      	movs	r7, #120	@ 0x78
 80195f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80195fa:	6823      	ldr	r3, [r4, #0]
 80195fc:	6831      	ldr	r1, [r6, #0]
 80195fe:	061f      	lsls	r7, r3, #24
 8019600:	f851 5b04 	ldr.w	r5, [r1], #4
 8019604:	d402      	bmi.n	801960c <_printf_i+0x188>
 8019606:	065f      	lsls	r7, r3, #25
 8019608:	bf48      	it	mi
 801960a:	b2ad      	uxthmi	r5, r5
 801960c:	6031      	str	r1, [r6, #0]
 801960e:	07d9      	lsls	r1, r3, #31
 8019610:	bf44      	itt	mi
 8019612:	f043 0320 	orrmi.w	r3, r3, #32
 8019616:	6023      	strmi	r3, [r4, #0]
 8019618:	b11d      	cbz	r5, 8019622 <_printf_i+0x19e>
 801961a:	2310      	movs	r3, #16
 801961c:	e7ac      	b.n	8019578 <_printf_i+0xf4>
 801961e:	4827      	ldr	r0, [pc, #156]	@ (80196bc <_printf_i+0x238>)
 8019620:	e7e9      	b.n	80195f6 <_printf_i+0x172>
 8019622:	6823      	ldr	r3, [r4, #0]
 8019624:	f023 0320 	bic.w	r3, r3, #32
 8019628:	6023      	str	r3, [r4, #0]
 801962a:	e7f6      	b.n	801961a <_printf_i+0x196>
 801962c:	4616      	mov	r6, r2
 801962e:	e7bd      	b.n	80195ac <_printf_i+0x128>
 8019630:	6833      	ldr	r3, [r6, #0]
 8019632:	6825      	ldr	r5, [r4, #0]
 8019634:	6961      	ldr	r1, [r4, #20]
 8019636:	1d18      	adds	r0, r3, #4
 8019638:	6030      	str	r0, [r6, #0]
 801963a:	062e      	lsls	r6, r5, #24
 801963c:	681b      	ldr	r3, [r3, #0]
 801963e:	d501      	bpl.n	8019644 <_printf_i+0x1c0>
 8019640:	6019      	str	r1, [r3, #0]
 8019642:	e002      	b.n	801964a <_printf_i+0x1c6>
 8019644:	0668      	lsls	r0, r5, #25
 8019646:	d5fb      	bpl.n	8019640 <_printf_i+0x1bc>
 8019648:	8019      	strh	r1, [r3, #0]
 801964a:	2300      	movs	r3, #0
 801964c:	6123      	str	r3, [r4, #16]
 801964e:	4616      	mov	r6, r2
 8019650:	e7bc      	b.n	80195cc <_printf_i+0x148>
 8019652:	6833      	ldr	r3, [r6, #0]
 8019654:	1d1a      	adds	r2, r3, #4
 8019656:	6032      	str	r2, [r6, #0]
 8019658:	681e      	ldr	r6, [r3, #0]
 801965a:	6862      	ldr	r2, [r4, #4]
 801965c:	2100      	movs	r1, #0
 801965e:	4630      	mov	r0, r6
 8019660:	f7e6 fe56 	bl	8000310 <memchr>
 8019664:	b108      	cbz	r0, 801966a <_printf_i+0x1e6>
 8019666:	1b80      	subs	r0, r0, r6
 8019668:	6060      	str	r0, [r4, #4]
 801966a:	6863      	ldr	r3, [r4, #4]
 801966c:	6123      	str	r3, [r4, #16]
 801966e:	2300      	movs	r3, #0
 8019670:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019674:	e7aa      	b.n	80195cc <_printf_i+0x148>
 8019676:	6923      	ldr	r3, [r4, #16]
 8019678:	4632      	mov	r2, r6
 801967a:	4649      	mov	r1, r9
 801967c:	4640      	mov	r0, r8
 801967e:	47d0      	blx	sl
 8019680:	3001      	adds	r0, #1
 8019682:	d0ad      	beq.n	80195e0 <_printf_i+0x15c>
 8019684:	6823      	ldr	r3, [r4, #0]
 8019686:	079b      	lsls	r3, r3, #30
 8019688:	d413      	bmi.n	80196b2 <_printf_i+0x22e>
 801968a:	68e0      	ldr	r0, [r4, #12]
 801968c:	9b03      	ldr	r3, [sp, #12]
 801968e:	4298      	cmp	r0, r3
 8019690:	bfb8      	it	lt
 8019692:	4618      	movlt	r0, r3
 8019694:	e7a6      	b.n	80195e4 <_printf_i+0x160>
 8019696:	2301      	movs	r3, #1
 8019698:	4632      	mov	r2, r6
 801969a:	4649      	mov	r1, r9
 801969c:	4640      	mov	r0, r8
 801969e:	47d0      	blx	sl
 80196a0:	3001      	adds	r0, #1
 80196a2:	d09d      	beq.n	80195e0 <_printf_i+0x15c>
 80196a4:	3501      	adds	r5, #1
 80196a6:	68e3      	ldr	r3, [r4, #12]
 80196a8:	9903      	ldr	r1, [sp, #12]
 80196aa:	1a5b      	subs	r3, r3, r1
 80196ac:	42ab      	cmp	r3, r5
 80196ae:	dcf2      	bgt.n	8019696 <_printf_i+0x212>
 80196b0:	e7eb      	b.n	801968a <_printf_i+0x206>
 80196b2:	2500      	movs	r5, #0
 80196b4:	f104 0619 	add.w	r6, r4, #25
 80196b8:	e7f5      	b.n	80196a6 <_printf_i+0x222>
 80196ba:	bf00      	nop
 80196bc:	0801a0cd 	.word	0x0801a0cd
 80196c0:	0801a0de 	.word	0x0801a0de

080196c4 <__swbuf_r>:
 80196c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196c6:	460e      	mov	r6, r1
 80196c8:	4614      	mov	r4, r2
 80196ca:	4605      	mov	r5, r0
 80196cc:	b118      	cbz	r0, 80196d6 <__swbuf_r+0x12>
 80196ce:	6a03      	ldr	r3, [r0, #32]
 80196d0:	b90b      	cbnz	r3, 80196d6 <__swbuf_r+0x12>
 80196d2:	f7fe f9ef 	bl	8017ab4 <__sinit>
 80196d6:	69a3      	ldr	r3, [r4, #24]
 80196d8:	60a3      	str	r3, [r4, #8]
 80196da:	89a3      	ldrh	r3, [r4, #12]
 80196dc:	071a      	lsls	r2, r3, #28
 80196de:	d501      	bpl.n	80196e4 <__swbuf_r+0x20>
 80196e0:	6923      	ldr	r3, [r4, #16]
 80196e2:	b943      	cbnz	r3, 80196f6 <__swbuf_r+0x32>
 80196e4:	4621      	mov	r1, r4
 80196e6:	4628      	mov	r0, r5
 80196e8:	f000 f82a 	bl	8019740 <__swsetup_r>
 80196ec:	b118      	cbz	r0, 80196f6 <__swbuf_r+0x32>
 80196ee:	f04f 37ff 	mov.w	r7, #4294967295
 80196f2:	4638      	mov	r0, r7
 80196f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80196f6:	6823      	ldr	r3, [r4, #0]
 80196f8:	6922      	ldr	r2, [r4, #16]
 80196fa:	1a98      	subs	r0, r3, r2
 80196fc:	6963      	ldr	r3, [r4, #20]
 80196fe:	b2f6      	uxtb	r6, r6
 8019700:	4283      	cmp	r3, r0
 8019702:	4637      	mov	r7, r6
 8019704:	dc05      	bgt.n	8019712 <__swbuf_r+0x4e>
 8019706:	4621      	mov	r1, r4
 8019708:	4628      	mov	r0, r5
 801970a:	f7ff fc81 	bl	8019010 <_fflush_r>
 801970e:	2800      	cmp	r0, #0
 8019710:	d1ed      	bne.n	80196ee <__swbuf_r+0x2a>
 8019712:	68a3      	ldr	r3, [r4, #8]
 8019714:	3b01      	subs	r3, #1
 8019716:	60a3      	str	r3, [r4, #8]
 8019718:	6823      	ldr	r3, [r4, #0]
 801971a:	1c5a      	adds	r2, r3, #1
 801971c:	6022      	str	r2, [r4, #0]
 801971e:	701e      	strb	r6, [r3, #0]
 8019720:	6962      	ldr	r2, [r4, #20]
 8019722:	1c43      	adds	r3, r0, #1
 8019724:	429a      	cmp	r2, r3
 8019726:	d004      	beq.n	8019732 <__swbuf_r+0x6e>
 8019728:	89a3      	ldrh	r3, [r4, #12]
 801972a:	07db      	lsls	r3, r3, #31
 801972c:	d5e1      	bpl.n	80196f2 <__swbuf_r+0x2e>
 801972e:	2e0a      	cmp	r6, #10
 8019730:	d1df      	bne.n	80196f2 <__swbuf_r+0x2e>
 8019732:	4621      	mov	r1, r4
 8019734:	4628      	mov	r0, r5
 8019736:	f7ff fc6b 	bl	8019010 <_fflush_r>
 801973a:	2800      	cmp	r0, #0
 801973c:	d0d9      	beq.n	80196f2 <__swbuf_r+0x2e>
 801973e:	e7d6      	b.n	80196ee <__swbuf_r+0x2a>

08019740 <__swsetup_r>:
 8019740:	b538      	push	{r3, r4, r5, lr}
 8019742:	4b29      	ldr	r3, [pc, #164]	@ (80197e8 <__swsetup_r+0xa8>)
 8019744:	4605      	mov	r5, r0
 8019746:	6818      	ldr	r0, [r3, #0]
 8019748:	460c      	mov	r4, r1
 801974a:	b118      	cbz	r0, 8019754 <__swsetup_r+0x14>
 801974c:	6a03      	ldr	r3, [r0, #32]
 801974e:	b90b      	cbnz	r3, 8019754 <__swsetup_r+0x14>
 8019750:	f7fe f9b0 	bl	8017ab4 <__sinit>
 8019754:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019758:	0719      	lsls	r1, r3, #28
 801975a:	d422      	bmi.n	80197a2 <__swsetup_r+0x62>
 801975c:	06da      	lsls	r2, r3, #27
 801975e:	d407      	bmi.n	8019770 <__swsetup_r+0x30>
 8019760:	2209      	movs	r2, #9
 8019762:	602a      	str	r2, [r5, #0]
 8019764:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019768:	81a3      	strh	r3, [r4, #12]
 801976a:	f04f 30ff 	mov.w	r0, #4294967295
 801976e:	e033      	b.n	80197d8 <__swsetup_r+0x98>
 8019770:	0758      	lsls	r0, r3, #29
 8019772:	d512      	bpl.n	801979a <__swsetup_r+0x5a>
 8019774:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019776:	b141      	cbz	r1, 801978a <__swsetup_r+0x4a>
 8019778:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801977c:	4299      	cmp	r1, r3
 801977e:	d002      	beq.n	8019786 <__swsetup_r+0x46>
 8019780:	4628      	mov	r0, r5
 8019782:	f7fe fac1 	bl	8017d08 <_free_r>
 8019786:	2300      	movs	r3, #0
 8019788:	6363      	str	r3, [r4, #52]	@ 0x34
 801978a:	89a3      	ldrh	r3, [r4, #12]
 801978c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8019790:	81a3      	strh	r3, [r4, #12]
 8019792:	2300      	movs	r3, #0
 8019794:	6063      	str	r3, [r4, #4]
 8019796:	6923      	ldr	r3, [r4, #16]
 8019798:	6023      	str	r3, [r4, #0]
 801979a:	89a3      	ldrh	r3, [r4, #12]
 801979c:	f043 0308 	orr.w	r3, r3, #8
 80197a0:	81a3      	strh	r3, [r4, #12]
 80197a2:	6923      	ldr	r3, [r4, #16]
 80197a4:	b94b      	cbnz	r3, 80197ba <__swsetup_r+0x7a>
 80197a6:	89a3      	ldrh	r3, [r4, #12]
 80197a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80197ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80197b0:	d003      	beq.n	80197ba <__swsetup_r+0x7a>
 80197b2:	4621      	mov	r1, r4
 80197b4:	4628      	mov	r0, r5
 80197b6:	f000 f883 	bl	80198c0 <__smakebuf_r>
 80197ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80197be:	f013 0201 	ands.w	r2, r3, #1
 80197c2:	d00a      	beq.n	80197da <__swsetup_r+0x9a>
 80197c4:	2200      	movs	r2, #0
 80197c6:	60a2      	str	r2, [r4, #8]
 80197c8:	6962      	ldr	r2, [r4, #20]
 80197ca:	4252      	negs	r2, r2
 80197cc:	61a2      	str	r2, [r4, #24]
 80197ce:	6922      	ldr	r2, [r4, #16]
 80197d0:	b942      	cbnz	r2, 80197e4 <__swsetup_r+0xa4>
 80197d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80197d6:	d1c5      	bne.n	8019764 <__swsetup_r+0x24>
 80197d8:	bd38      	pop	{r3, r4, r5, pc}
 80197da:	0799      	lsls	r1, r3, #30
 80197dc:	bf58      	it	pl
 80197de:	6962      	ldrpl	r2, [r4, #20]
 80197e0:	60a2      	str	r2, [r4, #8]
 80197e2:	e7f4      	b.n	80197ce <__swsetup_r+0x8e>
 80197e4:	2000      	movs	r0, #0
 80197e6:	e7f7      	b.n	80197d8 <__swsetup_r+0x98>
 80197e8:	24000240 	.word	0x24000240

080197ec <_raise_r>:
 80197ec:	291f      	cmp	r1, #31
 80197ee:	b538      	push	{r3, r4, r5, lr}
 80197f0:	4605      	mov	r5, r0
 80197f2:	460c      	mov	r4, r1
 80197f4:	d904      	bls.n	8019800 <_raise_r+0x14>
 80197f6:	2316      	movs	r3, #22
 80197f8:	6003      	str	r3, [r0, #0]
 80197fa:	f04f 30ff 	mov.w	r0, #4294967295
 80197fe:	bd38      	pop	{r3, r4, r5, pc}
 8019800:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8019802:	b112      	cbz	r2, 801980a <_raise_r+0x1e>
 8019804:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019808:	b94b      	cbnz	r3, 801981e <_raise_r+0x32>
 801980a:	4628      	mov	r0, r5
 801980c:	f000 f830 	bl	8019870 <_getpid_r>
 8019810:	4622      	mov	r2, r4
 8019812:	4601      	mov	r1, r0
 8019814:	4628      	mov	r0, r5
 8019816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801981a:	f000 b817 	b.w	801984c <_kill_r>
 801981e:	2b01      	cmp	r3, #1
 8019820:	d00a      	beq.n	8019838 <_raise_r+0x4c>
 8019822:	1c59      	adds	r1, r3, #1
 8019824:	d103      	bne.n	801982e <_raise_r+0x42>
 8019826:	2316      	movs	r3, #22
 8019828:	6003      	str	r3, [r0, #0]
 801982a:	2001      	movs	r0, #1
 801982c:	e7e7      	b.n	80197fe <_raise_r+0x12>
 801982e:	2100      	movs	r1, #0
 8019830:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8019834:	4620      	mov	r0, r4
 8019836:	4798      	blx	r3
 8019838:	2000      	movs	r0, #0
 801983a:	e7e0      	b.n	80197fe <_raise_r+0x12>

0801983c <raise>:
 801983c:	4b02      	ldr	r3, [pc, #8]	@ (8019848 <raise+0xc>)
 801983e:	4601      	mov	r1, r0
 8019840:	6818      	ldr	r0, [r3, #0]
 8019842:	f7ff bfd3 	b.w	80197ec <_raise_r>
 8019846:	bf00      	nop
 8019848:	24000240 	.word	0x24000240

0801984c <_kill_r>:
 801984c:	b538      	push	{r3, r4, r5, lr}
 801984e:	4d07      	ldr	r5, [pc, #28]	@ (801986c <_kill_r+0x20>)
 8019850:	2300      	movs	r3, #0
 8019852:	4604      	mov	r4, r0
 8019854:	4608      	mov	r0, r1
 8019856:	4611      	mov	r1, r2
 8019858:	602b      	str	r3, [r5, #0]
 801985a:	f7e9 fe9d 	bl	8003598 <_kill>
 801985e:	1c43      	adds	r3, r0, #1
 8019860:	d102      	bne.n	8019868 <_kill_r+0x1c>
 8019862:	682b      	ldr	r3, [r5, #0]
 8019864:	b103      	cbz	r3, 8019868 <_kill_r+0x1c>
 8019866:	6023      	str	r3, [r4, #0]
 8019868:	bd38      	pop	{r3, r4, r5, pc}
 801986a:	bf00      	nop
 801986c:	24006948 	.word	0x24006948

08019870 <_getpid_r>:
 8019870:	f7e9 be8a 	b.w	8003588 <_getpid>

08019874 <__swhatbuf_r>:
 8019874:	b570      	push	{r4, r5, r6, lr}
 8019876:	460c      	mov	r4, r1
 8019878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801987c:	2900      	cmp	r1, #0
 801987e:	b096      	sub	sp, #88	@ 0x58
 8019880:	4615      	mov	r5, r2
 8019882:	461e      	mov	r6, r3
 8019884:	da0d      	bge.n	80198a2 <__swhatbuf_r+0x2e>
 8019886:	89a3      	ldrh	r3, [r4, #12]
 8019888:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801988c:	f04f 0100 	mov.w	r1, #0
 8019890:	bf14      	ite	ne
 8019892:	2340      	movne	r3, #64	@ 0x40
 8019894:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8019898:	2000      	movs	r0, #0
 801989a:	6031      	str	r1, [r6, #0]
 801989c:	602b      	str	r3, [r5, #0]
 801989e:	b016      	add	sp, #88	@ 0x58
 80198a0:	bd70      	pop	{r4, r5, r6, pc}
 80198a2:	466a      	mov	r2, sp
 80198a4:	f000 f848 	bl	8019938 <_fstat_r>
 80198a8:	2800      	cmp	r0, #0
 80198aa:	dbec      	blt.n	8019886 <__swhatbuf_r+0x12>
 80198ac:	9901      	ldr	r1, [sp, #4]
 80198ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80198b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80198b6:	4259      	negs	r1, r3
 80198b8:	4159      	adcs	r1, r3
 80198ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80198be:	e7eb      	b.n	8019898 <__swhatbuf_r+0x24>

080198c0 <__smakebuf_r>:
 80198c0:	898b      	ldrh	r3, [r1, #12]
 80198c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80198c4:	079d      	lsls	r5, r3, #30
 80198c6:	4606      	mov	r6, r0
 80198c8:	460c      	mov	r4, r1
 80198ca:	d507      	bpl.n	80198dc <__smakebuf_r+0x1c>
 80198cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80198d0:	6023      	str	r3, [r4, #0]
 80198d2:	6123      	str	r3, [r4, #16]
 80198d4:	2301      	movs	r3, #1
 80198d6:	6163      	str	r3, [r4, #20]
 80198d8:	b003      	add	sp, #12
 80198da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80198dc:	ab01      	add	r3, sp, #4
 80198de:	466a      	mov	r2, sp
 80198e0:	f7ff ffc8 	bl	8019874 <__swhatbuf_r>
 80198e4:	9f00      	ldr	r7, [sp, #0]
 80198e6:	4605      	mov	r5, r0
 80198e8:	4639      	mov	r1, r7
 80198ea:	4630      	mov	r0, r6
 80198ec:	f7fe fdb2 	bl	8018454 <_malloc_r>
 80198f0:	b948      	cbnz	r0, 8019906 <__smakebuf_r+0x46>
 80198f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80198f6:	059a      	lsls	r2, r3, #22
 80198f8:	d4ee      	bmi.n	80198d8 <__smakebuf_r+0x18>
 80198fa:	f023 0303 	bic.w	r3, r3, #3
 80198fe:	f043 0302 	orr.w	r3, r3, #2
 8019902:	81a3      	strh	r3, [r4, #12]
 8019904:	e7e2      	b.n	80198cc <__smakebuf_r+0xc>
 8019906:	89a3      	ldrh	r3, [r4, #12]
 8019908:	6020      	str	r0, [r4, #0]
 801990a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801990e:	81a3      	strh	r3, [r4, #12]
 8019910:	9b01      	ldr	r3, [sp, #4]
 8019912:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8019916:	b15b      	cbz	r3, 8019930 <__smakebuf_r+0x70>
 8019918:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801991c:	4630      	mov	r0, r6
 801991e:	f000 f81d 	bl	801995c <_isatty_r>
 8019922:	b128      	cbz	r0, 8019930 <__smakebuf_r+0x70>
 8019924:	89a3      	ldrh	r3, [r4, #12]
 8019926:	f023 0303 	bic.w	r3, r3, #3
 801992a:	f043 0301 	orr.w	r3, r3, #1
 801992e:	81a3      	strh	r3, [r4, #12]
 8019930:	89a3      	ldrh	r3, [r4, #12]
 8019932:	431d      	orrs	r5, r3
 8019934:	81a5      	strh	r5, [r4, #12]
 8019936:	e7cf      	b.n	80198d8 <__smakebuf_r+0x18>

08019938 <_fstat_r>:
 8019938:	b538      	push	{r3, r4, r5, lr}
 801993a:	4d07      	ldr	r5, [pc, #28]	@ (8019958 <_fstat_r+0x20>)
 801993c:	2300      	movs	r3, #0
 801993e:	4604      	mov	r4, r0
 8019940:	4608      	mov	r0, r1
 8019942:	4611      	mov	r1, r2
 8019944:	602b      	str	r3, [r5, #0]
 8019946:	f7e9 fe87 	bl	8003658 <_fstat>
 801994a:	1c43      	adds	r3, r0, #1
 801994c:	d102      	bne.n	8019954 <_fstat_r+0x1c>
 801994e:	682b      	ldr	r3, [r5, #0]
 8019950:	b103      	cbz	r3, 8019954 <_fstat_r+0x1c>
 8019952:	6023      	str	r3, [r4, #0]
 8019954:	bd38      	pop	{r3, r4, r5, pc}
 8019956:	bf00      	nop
 8019958:	24006948 	.word	0x24006948

0801995c <_isatty_r>:
 801995c:	b538      	push	{r3, r4, r5, lr}
 801995e:	4d06      	ldr	r5, [pc, #24]	@ (8019978 <_isatty_r+0x1c>)
 8019960:	2300      	movs	r3, #0
 8019962:	4604      	mov	r4, r0
 8019964:	4608      	mov	r0, r1
 8019966:	602b      	str	r3, [r5, #0]
 8019968:	f7e9 fe86 	bl	8003678 <_isatty>
 801996c:	1c43      	adds	r3, r0, #1
 801996e:	d102      	bne.n	8019976 <_isatty_r+0x1a>
 8019970:	682b      	ldr	r3, [r5, #0]
 8019972:	b103      	cbz	r3, 8019976 <_isatty_r+0x1a>
 8019974:	6023      	str	r3, [r4, #0]
 8019976:	bd38      	pop	{r3, r4, r5, pc}
 8019978:	24006948 	.word	0x24006948
 801997c:	00000000 	.word	0x00000000

08019980 <log>:
 8019980:	b4f0      	push	{r4, r5, r6, r7}
 8019982:	ee10 0a90 	vmov	r0, s1
 8019986:	ee10 3a10 	vmov	r3, s0
 801998a:	f04f 34ff 	mov.w	r4, #4294967295
 801998e:	429c      	cmp	r4, r3
 8019990:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 8019994:	4c70      	ldr	r4, [pc, #448]	@ (8019b58 <log+0x1d8>)
 8019996:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 801999a:	418c      	sbcs	r4, r1
 801999c:	ed2d 8b02 	vpush	{d8}
 80199a0:	ea4f 4210 	mov.w	r2, r0, lsr #16
 80199a4:	d35a      	bcc.n	8019a5c <log+0xdc>
 80199a6:	4a6d      	ldr	r2, [pc, #436]	@ (8019b5c <log+0x1dc>)
 80199a8:	4290      	cmp	r0, r2
 80199aa:	bf08      	it	eq
 80199ac:	2b00      	cmpeq	r3, #0
 80199ae:	f000 80c4 	beq.w	8019b3a <log+0x1ba>
 80199b2:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 80199b6:	ee30 0b47 	vsub.f64	d0, d0, d7
 80199ba:	4b69      	ldr	r3, [pc, #420]	@ (8019b60 <log+0x1e0>)
 80199bc:	ee20 2b00 	vmul.f64	d2, d0, d0
 80199c0:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 80199c4:	ee20 4b02 	vmul.f64	d4, d0, d2
 80199c8:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 80199cc:	eea6 7b00 	vfma.f64	d7, d6, d0
 80199d0:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 80199d4:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 80199d8:	eea6 7b02 	vfma.f64	d7, d6, d2
 80199dc:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 80199e0:	eea5 6b00 	vfma.f64	d6, d5, d0
 80199e4:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 80199e8:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 80199ec:	eea5 6b02 	vfma.f64	d6, d5, d2
 80199f0:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 80199f4:	eea3 5b00 	vfma.f64	d5, d3, d0
 80199f8:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 80199fc:	eea3 5b02 	vfma.f64	d5, d3, d2
 8019a00:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 8019a04:	eea3 5b04 	vfma.f64	d5, d3, d4
 8019a08:	eea5 6b04 	vfma.f64	d6, d5, d4
 8019a0c:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8019a10:	eea6 7b04 	vfma.f64	d7, d6, d4
 8019a14:	eeb0 2b47 	vmov.f64	d2, d7
 8019a18:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 8019b40 <log+0x1c0>
 8019a1c:	eeb0 6b40 	vmov.f64	d6, d0
 8019a20:	eeb0 3b40 	vmov.f64	d3, d0
 8019a24:	eea0 6b07 	vfma.f64	d6, d0, d7
 8019a28:	eea0 6b47 	vfms.f64	d6, d0, d7
 8019a2c:	ee30 8b46 	vsub.f64	d8, d0, d6
 8019a30:	ee26 1b06 	vmul.f64	d1, d6, d6
 8019a34:	eea1 3b05 	vfma.f64	d3, d1, d5
 8019a38:	ee30 7b43 	vsub.f64	d7, d0, d3
 8019a3c:	ee30 0b06 	vadd.f64	d0, d0, d6
 8019a40:	eea1 7b05 	vfma.f64	d7, d1, d5
 8019a44:	ee25 5b08 	vmul.f64	d5, d5, d8
 8019a48:	eea5 7b00 	vfma.f64	d7, d5, d0
 8019a4c:	eea2 7b04 	vfma.f64	d7, d2, d4
 8019a50:	ee33 0b07 	vadd.f64	d0, d3, d7
 8019a54:	ecbd 8b02 	vpop	{d8}
 8019a58:	bcf0      	pop	{r4, r5, r6, r7}
 8019a5a:	4770      	bx	lr
 8019a5c:	f1a2 0410 	sub.w	r4, r2, #16
 8019a60:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 8019a64:	428c      	cmp	r4, r1
 8019a66:	d923      	bls.n	8019ab0 <log+0x130>
 8019a68:	18d9      	adds	r1, r3, r3
 8019a6a:	eb40 0400 	adc.w	r4, r0, r0
 8019a6e:	4321      	orrs	r1, r4
 8019a70:	d105      	bne.n	8019a7e <log+0xfe>
 8019a72:	ecbd 8b02 	vpop	{d8}
 8019a76:	2001      	movs	r0, #1
 8019a78:	bcf0      	pop	{r4, r5, r6, r7}
 8019a7a:	f000 b885 	b.w	8019b88 <__math_divzero>
 8019a7e:	4939      	ldr	r1, [pc, #228]	@ (8019b64 <log+0x1e4>)
 8019a80:	4288      	cmp	r0, r1
 8019a82:	bf08      	it	eq
 8019a84:	2b00      	cmpeq	r3, #0
 8019a86:	d0e5      	beq.n	8019a54 <log+0xd4>
 8019a88:	0413      	lsls	r3, r2, #16
 8019a8a:	d403      	bmi.n	8019a94 <log+0x114>
 8019a8c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8019a90:	4393      	bics	r3, r2
 8019a92:	d104      	bne.n	8019a9e <log+0x11e>
 8019a94:	ecbd 8b02 	vpop	{d8}
 8019a98:	bcf0      	pop	{r4, r5, r6, r7}
 8019a9a:	f000 b88d 	b.w	8019bb8 <__math_invalid>
 8019a9e:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8019b48 <log+0x1c8>
 8019aa2:	ee20 7b07 	vmul.f64	d7, d0, d7
 8019aa6:	ec53 2b17 	vmov	r2, r3, d7
 8019aaa:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 8019aae:	4613      	mov	r3, r2
 8019ab0:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 8019ab4:	492a      	ldr	r1, [pc, #168]	@ (8019b60 <log+0x1e0>)
 8019ab6:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 8019aba:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 8019abe:	f3c2 3446 	ubfx	r4, r2, #13, #7
 8019ac2:	0d15      	lsrs	r5, r2, #20
 8019ac4:	eb01 1c04 	add.w	ip, r1, r4, lsl #4
 8019ac8:	052d      	lsls	r5, r5, #20
 8019aca:	ed9c 7b24 	vldr	d7, [ip, #144]	@ 0x90
 8019ace:	1e1e      	subs	r6, r3, #0
 8019ad0:	1b47      	subs	r7, r0, r5
 8019ad2:	ec47 6b16 	vmov	d6, r6, r7
 8019ad6:	1512      	asrs	r2, r2, #20
 8019ad8:	eea7 5b06 	vfma.f64	d5, d7, d6
 8019adc:	ee07 2a90 	vmov	s15, r2
 8019ae0:	ee25 2b05 	vmul.f64	d2, d5, d5
 8019ae4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8019ae8:	ed91 4b00 	vldr	d4, [r1]
 8019aec:	ee25 1b02 	vmul.f64	d1, d5, d2
 8019af0:	ed9c 7b26 	vldr	d7, [ip, #152]	@ 0x98
 8019af4:	eea4 7b06 	vfma.f64	d7, d4, d6
 8019af8:	ee35 4b07 	vadd.f64	d4, d5, d7
 8019afc:	ee37 0b44 	vsub.f64	d0, d7, d4
 8019b00:	ed91 7b02 	vldr	d7, [r1, #8]
 8019b04:	ee30 0b05 	vadd.f64	d0, d0, d5
 8019b08:	eea7 0b06 	vfma.f64	d0, d7, d6
 8019b0c:	ed91 7b04 	vldr	d7, [r1, #16]
 8019b10:	ed91 6b08 	vldr	d6, [r1, #32]
 8019b14:	eea7 0b02 	vfma.f64	d0, d7, d2
 8019b18:	ed91 7b06 	vldr	d7, [r1, #24]
 8019b1c:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 8019b20:	eea6 7b05 	vfma.f64	d7, d6, d5
 8019b24:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 8019b28:	eea3 6b05 	vfma.f64	d6, d3, d5
 8019b2c:	eea6 7b02 	vfma.f64	d7, d6, d2
 8019b30:	eea1 0b07 	vfma.f64	d0, d1, d7
 8019b34:	ee30 0b04 	vadd.f64	d0, d0, d4
 8019b38:	e78c      	b.n	8019a54 <log+0xd4>
 8019b3a:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 8019b50 <log+0x1d0>
 8019b3e:	e789      	b.n	8019a54 <log+0xd4>
 8019b40:	00000000 	.word	0x00000000
 8019b44:	41a00000 	.word	0x41a00000
 8019b48:	00000000 	.word	0x00000000
 8019b4c:	43300000 	.word	0x43300000
	...
 8019b58:	000308ff 	.word	0x000308ff
 8019b5c:	3ff00000 	.word	0x3ff00000
 8019b60:	0801a0f0 	.word	0x0801a0f0
 8019b64:	7ff00000 	.word	0x7ff00000

08019b68 <with_errno>:
 8019b68:	b510      	push	{r4, lr}
 8019b6a:	ed2d 8b02 	vpush	{d8}
 8019b6e:	eeb0 8b40 	vmov.f64	d8, d0
 8019b72:	4604      	mov	r4, r0
 8019b74:	f7fe f884 	bl	8017c80 <__errno>
 8019b78:	eeb0 0b48 	vmov.f64	d0, d8
 8019b7c:	ecbd 8b02 	vpop	{d8}
 8019b80:	6004      	str	r4, [r0, #0]
 8019b82:	bd10      	pop	{r4, pc}
 8019b84:	0000      	movs	r0, r0
	...

08019b88 <__math_divzero>:
 8019b88:	b082      	sub	sp, #8
 8019b8a:	2800      	cmp	r0, #0
 8019b8c:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8019b90:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8019b94:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8019b98:	ed8d 7b00 	vstr	d7, [sp]
 8019b9c:	ed9d 0b00 	vldr	d0, [sp]
 8019ba0:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 8019bb0 <__math_divzero+0x28>
 8019ba4:	2022      	movs	r0, #34	@ 0x22
 8019ba6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8019baa:	b002      	add	sp, #8
 8019bac:	f7ff bfdc 	b.w	8019b68 <with_errno>
	...

08019bb8 <__math_invalid>:
 8019bb8:	eeb0 7b40 	vmov.f64	d7, d0
 8019bbc:	eeb4 7b47 	vcmp.f64	d7, d7
 8019bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019bc4:	ee30 6b40 	vsub.f64	d6, d0, d0
 8019bc8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8019bcc:	d602      	bvs.n	8019bd4 <__math_invalid+0x1c>
 8019bce:	2021      	movs	r0, #33	@ 0x21
 8019bd0:	f7ff bfca 	b.w	8019b68 <with_errno>
 8019bd4:	4770      	bx	lr
	...

08019bd8 <_init>:
 8019bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019bda:	bf00      	nop
 8019bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019bde:	bc08      	pop	{r3}
 8019be0:	469e      	mov	lr, r3
 8019be2:	4770      	bx	lr

08019be4 <_fini>:
 8019be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019be6:	bf00      	nop
 8019be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019bea:	bc08      	pop	{r3}
 8019bec:	469e      	mov	lr, r3
 8019bee:	4770      	bx	lr
