
Controladora-de-vuelo-V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012678  080002b0  080002b0  000012b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df0  08012928  08012928  00013928  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013718  08013718  00014718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013720  08013720  00014720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08013724  08013724  00014724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000010c  24000000  08013728  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002a9c  2400010c  08013834  0001510c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24002ba8  08013834  00015ba8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001510c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00028668  00000000  00000000  0001513a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000510a  00000000  00000000  0003d7a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ec0  00000000  00000000  000428b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000017f1  00000000  00000000  00044770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000375a9  00000000  00000000  00045f61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00030d4b  00000000  00000000  0007d50a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00154449  00000000  00000000  000ae255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0020269e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000084a0  00000000  00000000  002026e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000068  00000000  00000000  0020ab84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	2400010c 	.word	0x2400010c
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08012910 	.word	0x08012910

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000110 	.word	0x24000110
 80002ec:	08012910 	.word	0x08012910

080002f0 <__aeabi_ldivmod>:
 80002f0:	b97b      	cbnz	r3, 8000312 <__aeabi_ldivmod+0x22>
 80002f2:	b972      	cbnz	r2, 8000312 <__aeabi_ldivmod+0x22>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bfbe      	ittt	lt
 80002f8:	2000      	movlt	r0, #0
 80002fa:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002fe:	e006      	blt.n	800030e <__aeabi_ldivmod+0x1e>
 8000300:	bf08      	it	eq
 8000302:	2800      	cmpeq	r0, #0
 8000304:	bf1c      	itt	ne
 8000306:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800030a:	f04f 30ff 	movne.w	r0, #4294967295
 800030e:	f000 b9b5 	b.w	800067c <__aeabi_idiv0>
 8000312:	f1ad 0c08 	sub.w	ip, sp, #8
 8000316:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031a:	2900      	cmp	r1, #0
 800031c:	db09      	blt.n	8000332 <__aeabi_ldivmod+0x42>
 800031e:	2b00      	cmp	r3, #0
 8000320:	db1a      	blt.n	8000358 <__aeabi_ldivmod+0x68>
 8000322:	f000 f84d 	bl	80003c0 <__udivmoddi4>
 8000326:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032e:	b004      	add	sp, #16
 8000330:	4770      	bx	lr
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	2b00      	cmp	r3, #0
 800033a:	db1b      	blt.n	8000374 <__aeabi_ldivmod+0x84>
 800033c:	f000 f840 	bl	80003c0 <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	4252      	negs	r2, r2
 8000352:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000356:	4770      	bx	lr
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	f000 f82f 	bl	80003c0 <__udivmoddi4>
 8000362:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036a:	b004      	add	sp, #16
 800036c:	4240      	negs	r0, r0
 800036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000372:	4770      	bx	lr
 8000374:	4252      	negs	r2, r2
 8000376:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037a:	f000 f821 	bl	80003c0 <__udivmoddi4>
 800037e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000386:	b004      	add	sp, #16
 8000388:	4252      	negs	r2, r2
 800038a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <BMP280_write>:
uint16_t dig_T1, dig_P1;
int16_t  dig_T2, dig_T3, dig_P2,dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;

int32_t T_raw, P_raw, t_fine;

void BMP280_write(uint8_t Address, uint8_t Data){
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	460a      	mov	r2, r1
 800068a:	71fb      	strb	r3, [r7, #7]
 800068c:	4613      	mov	r3, r2
 800068e:	71bb      	strb	r3, [r7, #6]
	BMP280_select();
 8000690:	2200      	movs	r2, #0
 8000692:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000696:	480f      	ldr	r0, [pc, #60]	@ (80006d4 <BMP280_write+0x54>)
 8000698:	f006 fc4c 	bl	8006f34 <HAL_GPIO_WritePin>
	Address &= 0x7F;
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80006a6:	1df9      	adds	r1, r7, #7
 80006a8:	2364      	movs	r3, #100	@ 0x64
 80006aa:	2201      	movs	r2, #1
 80006ac:	480a      	ldr	r0, [pc, #40]	@ (80006d8 <BMP280_write+0x58>)
 80006ae:	f009 fc8b 	bl	8009fc8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BMP280, &Data, 1, 100);
 80006b2:	1db9      	adds	r1, r7, #6
 80006b4:	2364      	movs	r3, #100	@ 0x64
 80006b6:	2201      	movs	r2, #1
 80006b8:	4807      	ldr	r0, [pc, #28]	@ (80006d8 <BMP280_write+0x58>)
 80006ba:	f009 fc85 	bl	8009fc8 <HAL_SPI_Transmit>

	BMP280_unselect();
 80006be:	2201      	movs	r2, #1
 80006c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006c4:	4803      	ldr	r0, [pc, #12]	@ (80006d4 <BMP280_write+0x54>)
 80006c6:	f006 fc35 	bl	8006f34 <HAL_GPIO_WritePin>
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	58020400 	.word	0x58020400
 80006d8:	24002368 	.word	0x24002368

080006dc <BMP280_read>:

uint8_t BMP280_read(uint8_t Address){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer = (Address|0x80);
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	73fb      	strb	r3, [r7, #15]
	BMP280_select();
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006f6:	480e      	ldr	r0, [pc, #56]	@ (8000730 <BMP280_read+0x54>)
 80006f8:	f006 fc1c 	bl	8006f34 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Buffer, 1, 100);
 80006fc:	f107 010f 	add.w	r1, r7, #15
 8000700:	2364      	movs	r3, #100	@ 0x64
 8000702:	2201      	movs	r2, #1
 8000704:	480b      	ldr	r0, [pc, #44]	@ (8000734 <BMP280_read+0x58>)
 8000706:	f009 fc5f 	bl	8009fc8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, &Buffer, 1, 100);
 800070a:	f107 010f 	add.w	r1, r7, #15
 800070e:	2364      	movs	r3, #100	@ 0x64
 8000710:	2201      	movs	r2, #1
 8000712:	4808      	ldr	r0, [pc, #32]	@ (8000734 <BMP280_read+0x58>)
 8000714:	f009 fe46 	bl	800a3a4 <HAL_SPI_Receive>
	BMP280_unselect();
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800071e:	4804      	ldr	r0, [pc, #16]	@ (8000730 <BMP280_read+0x54>)
 8000720:	f006 fc08 	bl	8006f34 <HAL_GPIO_WritePin>

	return Buffer;
 8000724:	7bfb      	ldrb	r3, [r7, #15]
}
 8000726:	4618      	mov	r0, r3
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	58020400 	.word	0x58020400
 8000734:	24002368 	.word	0x24002368

08000738 <BMP280_config>:

void BMP280_config(void){
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	BMP280_write(ctrl_meas, 0x57);
 800073c:	2157      	movs	r1, #87	@ 0x57
 800073e:	20f4      	movs	r0, #244	@ 0xf4
 8000740:	f7ff ff9e 	bl	8000680 <BMP280_write>
	BMP280_write(config, 0x10);
 8000744:	2110      	movs	r1, #16
 8000746:	20f5      	movs	r0, #245	@ 0xf5
 8000748:	f7ff ff9a 	bl	8000680 <BMP280_write>
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}

08000750 <BMP280_calibrationData>:

void BMP280_reset(void){
	BMP280_write(reset, 0xB6);
}

void BMP280_calibrationData(void){
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0
	uint8_t Address = 0x88;
 8000756:	2388      	movs	r3, #136	@ 0x88
 8000758:	77fb      	strb	r3, [r7, #31]
	uint8_t Buffer[24] = {0};
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	f107 0308 	add.w	r3, r7, #8
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]
	BMP280_select();
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000774:	4843      	ldr	r0, [pc, #268]	@ (8000884 <BMP280_calibrationData+0x134>)
 8000776:	f006 fbdd 	bl	8006f34 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 800077a:	f107 011f 	add.w	r1, r7, #31
 800077e:	2364      	movs	r3, #100	@ 0x64
 8000780:	2201      	movs	r2, #1
 8000782:	4841      	ldr	r0, [pc, #260]	@ (8000888 <BMP280_calibrationData+0x138>)
 8000784:	f009 fc20 	bl	8009fc8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 24, 100);
 8000788:	1d39      	adds	r1, r7, #4
 800078a:	2364      	movs	r3, #100	@ 0x64
 800078c:	2218      	movs	r2, #24
 800078e:	483e      	ldr	r0, [pc, #248]	@ (8000888 <BMP280_calibrationData+0x138>)
 8000790:	f009 fe08 	bl	800a3a4 <HAL_SPI_Receive>
	BMP280_unselect();
 8000794:	2201      	movs	r2, #1
 8000796:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800079a:	483a      	ldr	r0, [pc, #232]	@ (8000884 <BMP280_calibrationData+0x134>)
 800079c:	f006 fbca 	bl	8006f34 <HAL_GPIO_WritePin>

	dig_T1 = (Buffer[1]<<8)|Buffer[0];
 80007a0:	797b      	ldrb	r3, [r7, #5]
 80007a2:	021b      	lsls	r3, r3, #8
 80007a4:	b21a      	sxth	r2, r3
 80007a6:	793b      	ldrb	r3, [r7, #4]
 80007a8:	b21b      	sxth	r3, r3
 80007aa:	4313      	orrs	r3, r2
 80007ac:	b21b      	sxth	r3, r3
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	4b36      	ldr	r3, [pc, #216]	@ (800088c <BMP280_calibrationData+0x13c>)
 80007b2:	801a      	strh	r2, [r3, #0]
	dig_T2 = (Buffer[3]<<8)|Buffer[2];
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	021b      	lsls	r3, r3, #8
 80007b8:	b21a      	sxth	r2, r3
 80007ba:	79bb      	ldrb	r3, [r7, #6]
 80007bc:	b21b      	sxth	r3, r3
 80007be:	4313      	orrs	r3, r2
 80007c0:	b21a      	sxth	r2, r3
 80007c2:	4b33      	ldr	r3, [pc, #204]	@ (8000890 <BMP280_calibrationData+0x140>)
 80007c4:	801a      	strh	r2, [r3, #0]
	dig_T3 = (Buffer[5]<<8)|Buffer[4];
 80007c6:	7a7b      	ldrb	r3, [r7, #9]
 80007c8:	021b      	lsls	r3, r3, #8
 80007ca:	b21a      	sxth	r2, r3
 80007cc:	7a3b      	ldrb	r3, [r7, #8]
 80007ce:	b21b      	sxth	r3, r3
 80007d0:	4313      	orrs	r3, r2
 80007d2:	b21a      	sxth	r2, r3
 80007d4:	4b2f      	ldr	r3, [pc, #188]	@ (8000894 <BMP280_calibrationData+0x144>)
 80007d6:	801a      	strh	r2, [r3, #0]

	dig_P1 = (Buffer[7]<<8)|Buffer[6];
 80007d8:	7afb      	ldrb	r3, [r7, #11]
 80007da:	021b      	lsls	r3, r3, #8
 80007dc:	b21a      	sxth	r2, r3
 80007de:	7abb      	ldrb	r3, [r7, #10]
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	4313      	orrs	r3, r2
 80007e4:	b21b      	sxth	r3, r3
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000898 <BMP280_calibrationData+0x148>)
 80007ea:	801a      	strh	r2, [r3, #0]
	dig_P2 = (Buffer[9]<<8)|Buffer[8];
 80007ec:	7b7b      	ldrb	r3, [r7, #13]
 80007ee:	021b      	lsls	r3, r3, #8
 80007f0:	b21a      	sxth	r2, r3
 80007f2:	7b3b      	ldrb	r3, [r7, #12]
 80007f4:	b21b      	sxth	r3, r3
 80007f6:	4313      	orrs	r3, r2
 80007f8:	b21a      	sxth	r2, r3
 80007fa:	4b28      	ldr	r3, [pc, #160]	@ (800089c <BMP280_calibrationData+0x14c>)
 80007fc:	801a      	strh	r2, [r3, #0]
	dig_P3 = (Buffer[11]<<8)|Buffer[10];
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	021b      	lsls	r3, r3, #8
 8000802:	b21a      	sxth	r2, r3
 8000804:	7bbb      	ldrb	r3, [r7, #14]
 8000806:	b21b      	sxth	r3, r3
 8000808:	4313      	orrs	r3, r2
 800080a:	b21a      	sxth	r2, r3
 800080c:	4b24      	ldr	r3, [pc, #144]	@ (80008a0 <BMP280_calibrationData+0x150>)
 800080e:	801a      	strh	r2, [r3, #0]
	dig_P4 = (Buffer[13]<<8)|Buffer[12];
 8000810:	7c7b      	ldrb	r3, [r7, #17]
 8000812:	021b      	lsls	r3, r3, #8
 8000814:	b21a      	sxth	r2, r3
 8000816:	7c3b      	ldrb	r3, [r7, #16]
 8000818:	b21b      	sxth	r3, r3
 800081a:	4313      	orrs	r3, r2
 800081c:	b21a      	sxth	r2, r3
 800081e:	4b21      	ldr	r3, [pc, #132]	@ (80008a4 <BMP280_calibrationData+0x154>)
 8000820:	801a      	strh	r2, [r3, #0]
	dig_P5 = (Buffer[15]<<8)|Buffer[14];
 8000822:	7cfb      	ldrb	r3, [r7, #19]
 8000824:	021b      	lsls	r3, r3, #8
 8000826:	b21a      	sxth	r2, r3
 8000828:	7cbb      	ldrb	r3, [r7, #18]
 800082a:	b21b      	sxth	r3, r3
 800082c:	4313      	orrs	r3, r2
 800082e:	b21a      	sxth	r2, r3
 8000830:	4b1d      	ldr	r3, [pc, #116]	@ (80008a8 <BMP280_calibrationData+0x158>)
 8000832:	801a      	strh	r2, [r3, #0]
	dig_P6 = (Buffer[17]<<8)|Buffer[16];
 8000834:	7d7b      	ldrb	r3, [r7, #21]
 8000836:	021b      	lsls	r3, r3, #8
 8000838:	b21a      	sxth	r2, r3
 800083a:	7d3b      	ldrb	r3, [r7, #20]
 800083c:	b21b      	sxth	r3, r3
 800083e:	4313      	orrs	r3, r2
 8000840:	b21a      	sxth	r2, r3
 8000842:	4b1a      	ldr	r3, [pc, #104]	@ (80008ac <BMP280_calibrationData+0x15c>)
 8000844:	801a      	strh	r2, [r3, #0]
	dig_P7 = (Buffer[19]<<8)|Buffer[18];
 8000846:	7dfb      	ldrb	r3, [r7, #23]
 8000848:	021b      	lsls	r3, r3, #8
 800084a:	b21a      	sxth	r2, r3
 800084c:	7dbb      	ldrb	r3, [r7, #22]
 800084e:	b21b      	sxth	r3, r3
 8000850:	4313      	orrs	r3, r2
 8000852:	b21a      	sxth	r2, r3
 8000854:	4b16      	ldr	r3, [pc, #88]	@ (80008b0 <BMP280_calibrationData+0x160>)
 8000856:	801a      	strh	r2, [r3, #0]
	dig_P8 = (Buffer[21]<<8)|Buffer[20];
 8000858:	7e7b      	ldrb	r3, [r7, #25]
 800085a:	021b      	lsls	r3, r3, #8
 800085c:	b21a      	sxth	r2, r3
 800085e:	7e3b      	ldrb	r3, [r7, #24]
 8000860:	b21b      	sxth	r3, r3
 8000862:	4313      	orrs	r3, r2
 8000864:	b21a      	sxth	r2, r3
 8000866:	4b13      	ldr	r3, [pc, #76]	@ (80008b4 <BMP280_calibrationData+0x164>)
 8000868:	801a      	strh	r2, [r3, #0]
	dig_P9 = (Buffer[23]<<8)|Buffer[22];
 800086a:	7efb      	ldrb	r3, [r7, #27]
 800086c:	021b      	lsls	r3, r3, #8
 800086e:	b21a      	sxth	r2, r3
 8000870:	7ebb      	ldrb	r3, [r7, #26]
 8000872:	b21b      	sxth	r3, r3
 8000874:	4313      	orrs	r3, r2
 8000876:	b21a      	sxth	r2, r3
 8000878:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <BMP280_calibrationData+0x168>)
 800087a:	801a      	strh	r2, [r3, #0]
}
 800087c:	bf00      	nop
 800087e:	3720      	adds	r7, #32
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	58020400 	.word	0x58020400
 8000888:	24002368 	.word	0x24002368
 800088c:	2400013c 	.word	0x2400013c
 8000890:	24000140 	.word	0x24000140
 8000894:	24000142 	.word	0x24000142
 8000898:	2400013e 	.word	0x2400013e
 800089c:	24000144 	.word	0x24000144
 80008a0:	24000146 	.word	0x24000146
 80008a4:	24000148 	.word	0x24000148
 80008a8:	2400014a 	.word	0x2400014a
 80008ac:	2400014c 	.word	0x2400014c
 80008b0:	2400014e 	.word	0x2400014e
 80008b4:	24000150 	.word	0x24000150
 80008b8:	24000152 	.word	0x24000152

080008bc <BMP280_readRawValues>:

void BMP280_readRawValues(void){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
	uint8_t Address = press_msb;
 80008c2:	23f7      	movs	r3, #247	@ 0xf7
 80008c4:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[6] = {0};
 80008c6:	2300      	movs	r3, #0
 80008c8:	603b      	str	r3, [r7, #0]
 80008ca:	2300      	movs	r3, #0
 80008cc:	80bb      	strh	r3, [r7, #4]
	BMP280_select();
 80008ce:	2200      	movs	r2, #0
 80008d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008d4:	4817      	ldr	r0, [pc, #92]	@ (8000934 <BMP280_readRawValues+0x78>)
 80008d6:	f006 fb2d 	bl	8006f34 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80008da:	1df9      	adds	r1, r7, #7
 80008dc:	2364      	movs	r3, #100	@ 0x64
 80008de:	2201      	movs	r2, #1
 80008e0:	4815      	ldr	r0, [pc, #84]	@ (8000938 <BMP280_readRawValues+0x7c>)
 80008e2:	f009 fb71 	bl	8009fc8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 6, 100);
 80008e6:	4639      	mov	r1, r7
 80008e8:	2364      	movs	r3, #100	@ 0x64
 80008ea:	2206      	movs	r2, #6
 80008ec:	4812      	ldr	r0, [pc, #72]	@ (8000938 <BMP280_readRawValues+0x7c>)
 80008ee:	f009 fd59 	bl	800a3a4 <HAL_SPI_Receive>
	BMP280_unselect();
 80008f2:	2201      	movs	r2, #1
 80008f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008f8:	480e      	ldr	r0, [pc, #56]	@ (8000934 <BMP280_readRawValues+0x78>)
 80008fa:	f006 fb1b 	bl	8006f34 <HAL_GPIO_WritePin>

	P_raw = (Buffer[0]<<12)|(Buffer[1]<<4)|(Buffer[2]>>4);
 80008fe:	783b      	ldrb	r3, [r7, #0]
 8000900:	031a      	lsls	r2, r3, #12
 8000902:	787b      	ldrb	r3, [r7, #1]
 8000904:	011b      	lsls	r3, r3, #4
 8000906:	4313      	orrs	r3, r2
 8000908:	78ba      	ldrb	r2, [r7, #2]
 800090a:	0912      	lsrs	r2, r2, #4
 800090c:	b2d2      	uxtb	r2, r2
 800090e:	4313      	orrs	r3, r2
 8000910:	4a0a      	ldr	r2, [pc, #40]	@ (800093c <BMP280_readRawValues+0x80>)
 8000912:	6013      	str	r3, [r2, #0]
	T_raw = (Buffer[3]<<12)|(Buffer[4]<<4)|(Buffer[5]>>4);
 8000914:	78fb      	ldrb	r3, [r7, #3]
 8000916:	031a      	lsls	r2, r3, #12
 8000918:	793b      	ldrb	r3, [r7, #4]
 800091a:	011b      	lsls	r3, r3, #4
 800091c:	4313      	orrs	r3, r2
 800091e:	797a      	ldrb	r2, [r7, #5]
 8000920:	0912      	lsrs	r2, r2, #4
 8000922:	b2d2      	uxtb	r2, r2
 8000924:	4313      	orrs	r3, r2
 8000926:	4a06      	ldr	r2, [pc, #24]	@ (8000940 <BMP280_readRawValues+0x84>)
 8000928:	6013      	str	r3, [r2, #0]
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	58020400 	.word	0x58020400
 8000938:	24002368 	.word	0x24002368
 800093c:	24000158 	.word	0x24000158
 8000940:	24000154 	.word	0x24000154

08000944 <BMP280_measureT>:

int32_t BMP280_measureT(int32_t adc_T){
 8000944:	b480      	push	{r7}
 8000946:	b087      	sub	sp, #28
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 =  ((((T_raw>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 800094c:	4b1a      	ldr	r3, [pc, #104]	@ (80009b8 <BMP280_measureT+0x74>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	10da      	asrs	r2, r3, #3
 8000952:	4b1a      	ldr	r3, [pc, #104]	@ (80009bc <BMP280_measureT+0x78>)
 8000954:	881b      	ldrh	r3, [r3, #0]
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	4a19      	ldr	r2, [pc, #100]	@ (80009c0 <BMP280_measureT+0x7c>)
 800095c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000960:	fb02 f303 	mul.w	r3, r2, r3
 8000964:	12db      	asrs	r3, r3, #11
 8000966:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	111b      	asrs	r3, r3, #4
 800096c:	4a13      	ldr	r2, [pc, #76]	@ (80009bc <BMP280_measureT+0x78>)
 800096e:	8812      	ldrh	r2, [r2, #0]
 8000970:	1a9b      	subs	r3, r3, r2
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	1112      	asrs	r2, r2, #4
 8000976:	4911      	ldr	r1, [pc, #68]	@ (80009bc <BMP280_measureT+0x78>)
 8000978:	8809      	ldrh	r1, [r1, #0]
 800097a:	1a52      	subs	r2, r2, r1
 800097c:	fb02 f303 	mul.w	r3, r2, r3
 8000980:	131b      	asrs	r3, r3, #12
 8000982:	4a10      	ldr	r2, [pc, #64]	@ (80009c4 <BMP280_measureT+0x80>)
 8000984:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000988:	fb02 f303 	mul.w	r3, r2, r3
 800098c:	139b      	asrs	r3, r3, #14
 800098e:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8000990:	697a      	ldr	r2, [r7, #20]
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	4413      	add	r3, r2
 8000996:	4a0c      	ldr	r2, [pc, #48]	@ (80009c8 <BMP280_measureT+0x84>)
 8000998:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800099a:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <BMP280_measureT+0x84>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	4613      	mov	r3, r2
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	4413      	add	r3, r2
 80009a4:	3380      	adds	r3, #128	@ 0x80
 80009a6:	121b      	asrs	r3, r3, #8
 80009a8:	60fb      	str	r3, [r7, #12]
	return T;
 80009aa:	68fb      	ldr	r3, [r7, #12]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	371c      	adds	r7, #28
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	24000154 	.word	0x24000154
 80009bc:	2400013c 	.word	0x2400013c
 80009c0:	24000140 	.word	0x24000140
 80009c4:	24000142 	.word	0x24000142
 80009c8:	2400015c 	.word	0x2400015c

080009cc <BMP280_measureP>:

uint32_t BMP280_measureP(int32_t adc_P){
 80009cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80009d0:	b0ca      	sub	sp, #296	@ 0x128
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 80009d8:	4baf      	ldr	r3, [pc, #700]	@ (8000c98 <BMP280_measureP+0x2cc>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	17da      	asrs	r2, r3, #31
 80009de:	461c      	mov	r4, r3
 80009e0:	4615      	mov	r5, r2
 80009e2:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 80009e6:	f145 3bff 	adc.w	fp, r5, #4294967295
 80009ea:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 80009ee:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80009f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80009f6:	fb03 f102 	mul.w	r1, r3, r2
 80009fa:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80009fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a02:	fb02 f303 	mul.w	r3, r2, r3
 8000a06:	18ca      	adds	r2, r1, r3
 8000a08:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a0c:	fba3 8903 	umull	r8, r9, r3, r3
 8000a10:	eb02 0309 	add.w	r3, r2, r9
 8000a14:	4699      	mov	r9, r3
 8000a16:	4ba1      	ldr	r3, [pc, #644]	@ (8000c9c <BMP280_measureP+0x2d0>)
 8000a18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a1c:	b21b      	sxth	r3, r3
 8000a1e:	17da      	asrs	r2, r3, #31
 8000a20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000a24:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8000a28:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	fb03 f209 	mul.w	r2, r3, r9
 8000a32:	460b      	mov	r3, r1
 8000a34:	fb08 f303 	mul.w	r3, r8, r3
 8000a38:	4413      	add	r3, r2
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	fba8 1202 	umull	r1, r2, r8, r2
 8000a40:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8000a44:	460a      	mov	r2, r1
 8000a46:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8000a4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000a4e:	4413      	add	r3, r2
 8000a50:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000a54:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8000a58:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8000a5c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8000a60:	4b8f      	ldr	r3, [pc, #572]	@ (8000ca0 <BMP280_measureP+0x2d4>)
 8000a62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a66:	b21b      	sxth	r3, r3
 8000a68:	17da      	asrs	r2, r3, #31
 8000a6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000a6e:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8000a72:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a76:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8000a7a:	462a      	mov	r2, r5
 8000a7c:	fb02 f203 	mul.w	r2, r2, r3
 8000a80:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000a84:	4621      	mov	r1, r4
 8000a86:	fb01 f303 	mul.w	r3, r1, r3
 8000a8a:	441a      	add	r2, r3
 8000a8c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a90:	4621      	mov	r1, r4
 8000a92:	fba3 1301 	umull	r1, r3, r3, r1
 8000a96:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000a9a:	460b      	mov	r3, r1
 8000a9c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000aa4:	18d3      	adds	r3, r2, r3
 8000aa6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000aaa:	f04f 0000 	mov.w	r0, #0
 8000aae:	f04f 0100 	mov.w	r1, #0
 8000ab2:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8000ab6:	462b      	mov	r3, r5
 8000ab8:	0459      	lsls	r1, r3, #17
 8000aba:	4623      	mov	r3, r4
 8000abc:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000ac0:	4623      	mov	r3, r4
 8000ac2:	0458      	lsls	r0, r3, #17
 8000ac4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000ac8:	1814      	adds	r4, r2, r0
 8000aca:	643c      	str	r4, [r7, #64]	@ 0x40
 8000acc:	414b      	adcs	r3, r1
 8000ace:	647b      	str	r3, [r7, #68]	@ 0x44
 8000ad0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8000ad4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8000ad8:	4b72      	ldr	r3, [pc, #456]	@ (8000ca4 <BMP280_measureP+0x2d8>)
 8000ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ade:	b21b      	sxth	r3, r3
 8000ae0:	17da      	asrs	r2, r3, #31
 8000ae2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000ae6:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	f04f 0100 	mov.w	r1, #0
 8000af2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000af6:	00d9      	lsls	r1, r3, #3
 8000af8:	2000      	movs	r0, #0
 8000afa:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000afe:	1814      	adds	r4, r2, r0
 8000b00:	63bc      	str	r4, [r7, #56]	@ 0x38
 8000b02:	414b      	adcs	r3, r1
 8000b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000b06:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8000b0a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8000b0e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000b12:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b16:	fb03 f102 	mul.w	r1, r3, r2
 8000b1a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000b1e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b22:	fb02 f303 	mul.w	r3, r2, r3
 8000b26:	18ca      	adds	r2, r1, r3
 8000b28:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b2c:	fba3 1303 	umull	r1, r3, r3, r3
 8000b30:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000b34:	460b      	mov	r3, r1
 8000b36:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000b3e:	18d3      	adds	r3, r2, r3
 8000b40:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000b44:	4b58      	ldr	r3, [pc, #352]	@ (8000ca8 <BMP280_measureP+0x2dc>)
 8000b46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b4a:	b21b      	sxth	r3, r3
 8000b4c:	17da      	asrs	r2, r3, #31
 8000b4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000b52:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000b56:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8000b5a:	462b      	mov	r3, r5
 8000b5c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8000b60:	4642      	mov	r2, r8
 8000b62:	fb02 f203 	mul.w	r2, r2, r3
 8000b66:	464b      	mov	r3, r9
 8000b68:	4621      	mov	r1, r4
 8000b6a:	fb01 f303 	mul.w	r3, r1, r3
 8000b6e:	4413      	add	r3, r2
 8000b70:	4622      	mov	r2, r4
 8000b72:	4641      	mov	r1, r8
 8000b74:	fba2 1201 	umull	r1, r2, r2, r1
 8000b78:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8000b7c:	460a      	mov	r2, r1
 8000b7e:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8000b82:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000b86:	4413      	add	r3, r2
 8000b88:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	f04f 0100 	mov.w	r1, #0
 8000b94:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8000b98:	4623      	mov	r3, r4
 8000b9a:	0a18      	lsrs	r0, r3, #8
 8000b9c:	462b      	mov	r3, r5
 8000b9e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000ba2:	462b      	mov	r3, r5
 8000ba4:	1219      	asrs	r1, r3, #8
 8000ba6:	4b41      	ldr	r3, [pc, #260]	@ (8000cac <BMP280_measureP+0x2e0>)
 8000ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bac:	b21b      	sxth	r3, r3
 8000bae:	17da      	asrs	r2, r3, #31
 8000bb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000bb4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8000bb8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000bbc:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8000bc0:	464a      	mov	r2, r9
 8000bc2:	fb02 f203 	mul.w	r2, r2, r3
 8000bc6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000bca:	4644      	mov	r4, r8
 8000bcc:	fb04 f303 	mul.w	r3, r4, r3
 8000bd0:	441a      	add	r2, r3
 8000bd2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000bd6:	4644      	mov	r4, r8
 8000bd8:	fba3 4304 	umull	r4, r3, r3, r4
 8000bdc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000be0:	4623      	mov	r3, r4
 8000be2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8000be6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000bea:	18d3      	adds	r3, r2, r3
 8000bec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000bf0:	f04f 0200 	mov.w	r2, #0
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8000bfc:	464c      	mov	r4, r9
 8000bfe:	0323      	lsls	r3, r4, #12
 8000c00:	4644      	mov	r4, r8
 8000c02:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000c06:	4644      	mov	r4, r8
 8000c08:	0322      	lsls	r2, r4, #12
 8000c0a:	1884      	adds	r4, r0, r2
 8000c0c:	633c      	str	r4, [r7, #48]	@ 0x30
 8000c0e:	eb41 0303 	adc.w	r3, r1, r3
 8000c12:	637b      	str	r3, [r7, #52]	@ 0x34
 8000c14:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8000c18:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8000c1c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000c20:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8000c24:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8000c28:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8000c2c:	4b20      	ldr	r3, [pc, #128]	@ (8000cb0 <BMP280_measureP+0x2e4>)
 8000c2e:	881b      	ldrh	r3, [r3, #0]
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	2200      	movs	r2, #0
 8000c34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000c38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8000c3c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8000c40:	462b      	mov	r3, r5
 8000c42:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8000c46:	4642      	mov	r2, r8
 8000c48:	fb02 f203 	mul.w	r2, r2, r3
 8000c4c:	464b      	mov	r3, r9
 8000c4e:	4621      	mov	r1, r4
 8000c50:	fb01 f303 	mul.w	r3, r1, r3
 8000c54:	4413      	add	r3, r2
 8000c56:	4622      	mov	r2, r4
 8000c58:	4641      	mov	r1, r8
 8000c5a:	fba2 1201 	umull	r1, r2, r2, r1
 8000c5e:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8000c62:	460a      	mov	r2, r1
 8000c64:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8000c68:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000c6c:	4413      	add	r3, r2
 8000c6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8000c72:	f04f 0200 	mov.w	r2, #0
 8000c76:	f04f 0300 	mov.w	r3, #0
 8000c7a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8000c7e:	4629      	mov	r1, r5
 8000c80:	104a      	asrs	r2, r1, #1
 8000c82:	4629      	mov	r1, r5
 8000c84:	17cb      	asrs	r3, r1, #31
 8000c86:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 8000c8a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	d110      	bne.n	8000cb4 <BMP280_measureP+0x2e8>
	{
	return 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	e154      	b.n	8000f40 <BMP280_measureP+0x574>
 8000c96:	bf00      	nop
 8000c98:	2400015c 	.word	0x2400015c
 8000c9c:	2400014c 	.word	0x2400014c
 8000ca0:	2400014a 	.word	0x2400014a
 8000ca4:	24000148 	.word	0x24000148
 8000ca8:	24000146 	.word	0x24000146
 8000cac:	24000144 	.word	0x24000144
 8000cb0:	2400013e 	.word	0x2400013e
	}
	p = 1048576-adc_P;
 8000cb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000cb8:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8000cbc:	17da      	asrs	r2, r3, #31
 8000cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000cc2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8000cc6:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8000cca:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000cce:	105b      	asrs	r3, r3, #1
 8000cd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000cd4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000cd8:	07db      	lsls	r3, r3, #31
 8000cda:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000cde:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000ce2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8000ce6:	4621      	mov	r1, r4
 8000ce8:	1a89      	subs	r1, r1, r2
 8000cea:	67b9      	str	r1, [r7, #120]	@ 0x78
 8000cec:	4629      	mov	r1, r5
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000cf4:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8000cf8:	4622      	mov	r2, r4
 8000cfa:	462b      	mov	r3, r5
 8000cfc:	1891      	adds	r1, r2, r2
 8000cfe:	6239      	str	r1, [r7, #32]
 8000d00:	415b      	adcs	r3, r3
 8000d02:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d04:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000d08:	4621      	mov	r1, r4
 8000d0a:	1851      	adds	r1, r2, r1
 8000d0c:	61b9      	str	r1, [r7, #24]
 8000d0e:	4629      	mov	r1, r5
 8000d10:	414b      	adcs	r3, r1
 8000d12:	61fb      	str	r3, [r7, #28]
 8000d14:	f04f 0200 	mov.w	r2, #0
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000d20:	4649      	mov	r1, r9
 8000d22:	018b      	lsls	r3, r1, #6
 8000d24:	4641      	mov	r1, r8
 8000d26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000d2a:	4641      	mov	r1, r8
 8000d2c:	018a      	lsls	r2, r1, #6
 8000d2e:	4641      	mov	r1, r8
 8000d30:	1889      	adds	r1, r1, r2
 8000d32:	6139      	str	r1, [r7, #16]
 8000d34:	4649      	mov	r1, r9
 8000d36:	eb43 0101 	adc.w	r1, r3, r1
 8000d3a:	6179      	str	r1, [r7, #20]
 8000d3c:	f04f 0200 	mov.w	r2, #0
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000d48:	4649      	mov	r1, r9
 8000d4a:	008b      	lsls	r3, r1, #2
 8000d4c:	4641      	mov	r1, r8
 8000d4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d52:	4641      	mov	r1, r8
 8000d54:	008a      	lsls	r2, r1, #2
 8000d56:	4610      	mov	r0, r2
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	4622      	mov	r2, r4
 8000d5e:	189b      	adds	r3, r3, r2
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	460b      	mov	r3, r1
 8000d64:	462a      	mov	r2, r5
 8000d66:	eb42 0303 	adc.w	r3, r2, r3
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	f04f 0200 	mov.w	r2, #0
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000d78:	4649      	mov	r1, r9
 8000d7a:	008b      	lsls	r3, r1, #2
 8000d7c:	4641      	mov	r1, r8
 8000d7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d82:	4641      	mov	r1, r8
 8000d84:	008a      	lsls	r2, r1, #2
 8000d86:	4610      	mov	r0, r2
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	4622      	mov	r2, r4
 8000d8e:	189b      	adds	r3, r3, r2
 8000d90:	673b      	str	r3, [r7, #112]	@ 0x70
 8000d92:	462b      	mov	r3, r5
 8000d94:	460a      	mov	r2, r1
 8000d96:	eb42 0303 	adc.w	r3, r2, r3
 8000d9a:	677b      	str	r3, [r7, #116]	@ 0x74
 8000d9c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000da0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8000da4:	f7ff faa4 	bl	80002f0 <__aeabi_ldivmod>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8000db0:	4b66      	ldr	r3, [pc, #408]	@ (8000f4c <BMP280_measureP+0x580>)
 8000db2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000db6:	b21b      	sxth	r3, r3
 8000db8:	17da      	asrs	r2, r3, #31
 8000dba:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000dbc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000dbe:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000dc2:	f04f 0000 	mov.w	r0, #0
 8000dc6:	f04f 0100 	mov.w	r1, #0
 8000dca:	0b50      	lsrs	r0, r2, #13
 8000dcc:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000dd0:	1359      	asrs	r1, r3, #13
 8000dd2:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8000dd6:	462b      	mov	r3, r5
 8000dd8:	fb00 f203 	mul.w	r2, r0, r3
 8000ddc:	4623      	mov	r3, r4
 8000dde:	fb03 f301 	mul.w	r3, r3, r1
 8000de2:	4413      	add	r3, r2
 8000de4:	4622      	mov	r2, r4
 8000de6:	fba2 1200 	umull	r1, r2, r2, r0
 8000dea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8000dee:	460a      	mov	r2, r1
 8000df0:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8000df4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000df8:	4413      	add	r3, r2
 8000dfa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000dfe:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000e02:	f04f 0000 	mov.w	r0, #0
 8000e06:	f04f 0100 	mov.w	r1, #0
 8000e0a:	0b50      	lsrs	r0, r2, #13
 8000e0c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000e10:	1359      	asrs	r1, r3, #13
 8000e12:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8000e16:	462b      	mov	r3, r5
 8000e18:	fb00 f203 	mul.w	r2, r0, r3
 8000e1c:	4623      	mov	r3, r4
 8000e1e:	fb03 f301 	mul.w	r3, r3, r1
 8000e22:	4413      	add	r3, r2
 8000e24:	4622      	mov	r2, r4
 8000e26:	fba2 1200 	umull	r1, r2, r2, r0
 8000e2a:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8000e2e:	460a      	mov	r2, r1
 8000e30:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8000e34:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8000e38:	4413      	add	r3, r2
 8000e3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000e3e:	f04f 0200 	mov.w	r2, #0
 8000e42:	f04f 0300 	mov.w	r3, #0
 8000e46:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8000e4a:	4621      	mov	r1, r4
 8000e4c:	0e4a      	lsrs	r2, r1, #25
 8000e4e:	4629      	mov	r1, r5
 8000e50:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8000e54:	4629      	mov	r1, r5
 8000e56:	164b      	asrs	r3, r1, #25
 8000e58:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8000e5c:	4b3c      	ldr	r3, [pc, #240]	@ (8000f50 <BMP280_measureP+0x584>)
 8000e5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e62:	b21b      	sxth	r3, r3
 8000e64:	17da      	asrs	r2, r3, #31
 8000e66:	663b      	str	r3, [r7, #96]	@ 0x60
 8000e68:	667a      	str	r2, [r7, #100]	@ 0x64
 8000e6a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000e6e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8000e72:	462a      	mov	r2, r5
 8000e74:	fb02 f203 	mul.w	r2, r2, r3
 8000e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e7c:	4621      	mov	r1, r4
 8000e7e:	fb01 f303 	mul.w	r3, r1, r3
 8000e82:	4413      	add	r3, r2
 8000e84:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000e88:	4621      	mov	r1, r4
 8000e8a:	fba2 1201 	umull	r1, r2, r2, r1
 8000e8e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8000e92:	460a      	mov	r2, r1
 8000e94:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8000e98:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8000e9c:	4413      	add	r3, r2
 8000e9e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000ea2:	f04f 0200 	mov.w	r2, #0
 8000ea6:	f04f 0300 	mov.w	r3, #0
 8000eaa:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8000eae:	4621      	mov	r1, r4
 8000eb0:	0cca      	lsrs	r2, r1, #19
 8000eb2:	4629      	mov	r1, r5
 8000eb4:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8000eb8:	4629      	mov	r1, r5
 8000eba:	14cb      	asrs	r3, r1, #19
 8000ebc:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8000ec0:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8000ec4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000ec8:	1884      	adds	r4, r0, r2
 8000eca:	65bc      	str	r4, [r7, #88]	@ 0x58
 8000ecc:	eb41 0303 	adc.w	r3, r1, r3
 8000ed0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000ed2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000ed6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8000eda:	4621      	mov	r1, r4
 8000edc:	1889      	adds	r1, r1, r2
 8000ede:	6539      	str	r1, [r7, #80]	@ 0x50
 8000ee0:	4629      	mov	r1, r5
 8000ee2:	eb43 0101 	adc.w	r1, r3, r1
 8000ee6:	6579      	str	r1, [r7, #84]	@ 0x54
 8000ee8:	f04f 0000 	mov.w	r0, #0
 8000eec:	f04f 0100 	mov.w	r1, #0
 8000ef0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8000ef4:	4623      	mov	r3, r4
 8000ef6:	0a18      	lsrs	r0, r3, #8
 8000ef8:	462b      	mov	r3, r5
 8000efa:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000efe:	462b      	mov	r3, r5
 8000f00:	1219      	asrs	r1, r3, #8
 8000f02:	4b14      	ldr	r3, [pc, #80]	@ (8000f54 <BMP280_measureP+0x588>)
 8000f04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f08:	b21b      	sxth	r3, r3
 8000f0a:	17da      	asrs	r2, r3, #31
 8000f0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000f0e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8000f10:	f04f 0200 	mov.w	r2, #0
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8000f1c:	464c      	mov	r4, r9
 8000f1e:	0123      	lsls	r3, r4, #4
 8000f20:	4644      	mov	r4, r8
 8000f22:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000f26:	4644      	mov	r4, r8
 8000f28:	0122      	lsls	r2, r4, #4
 8000f2a:	1884      	adds	r4, r0, r2
 8000f2c:	603c      	str	r4, [r7, #0]
 8000f2e:	eb41 0303 	adc.w	r3, r1, r3
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000f38:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 8000f3c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8000f46:	46bd      	mov	sp, r7
 8000f48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000f4c:	24000152 	.word	0x24000152
 8000f50:	24000150 	.word	0x24000150
 8000f54:	2400014e 	.word	0x2400014e

08000f58 <BMP280_measureH>:

uint16_t BMP280_measureH(uint32_t Pres, int32_t Temp){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
	double var1, var2, h;

	if(Pres == 0) return 0;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d101      	bne.n	8000f6c <BMP280_measureH+0x14>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	e03d      	b.n	8000fe8 <BMP280_measureH+0x90>
	var1 = -log(((double)Pres)/101325);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	ee07 3a90 	vmov	s15, r3
 8000f72:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000f76:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8000ff0 <BMP280_measureH+0x98>
 8000f7a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000f7e:	eeb0 0b46 	vmov.f64	d0, d6
 8000f82:	f011 fb99 	bl	80126b8 <log>
 8000f86:	eeb0 7b40 	vmov.f64	d7, d0
 8000f8a:	eeb1 7b47 	vneg.f64	d7, d7
 8000f8e:	ed87 7b06 	vstr	d7, [r7, #24]

	if(var1 == 0) return 0;
 8000f92:	ed97 7b06 	vldr	d7, [r7, #24]
 8000f96:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f9e:	d101      	bne.n	8000fa4 <BMP280_measureH+0x4c>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	e021      	b.n	8000fe8 <BMP280_measureH+0x90>
	var2 = 0.0341663/((((double)Temp)/100)+273.15);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	ee07 3a90 	vmov	s15, r3
 8000faa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000fae:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8000ff8 <BMP280_measureH+0xa0>
 8000fb2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fb6:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 8001000 <BMP280_measureH+0xa8>
 8000fba:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000fbe:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8001008 <BMP280_measureH+0xb0>
 8000fc2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000fc6:	ed87 7b04 	vstr	d7, [r7, #16]
	h = var1/var2;
 8000fca:	ed97 5b06 	vldr	d5, [r7, #24]
 8000fce:	ed97 6b04 	vldr	d6, [r7, #16]
 8000fd2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000fd6:	ed87 7b02 	vstr	d7, [r7, #8]
	return (uint16_t)h;
 8000fda:	ed97 7b02 	vldr	d7, [r7, #8]
 8000fde:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fe2:	ee17 3a90 	vmov	r3, s15
 8000fe6:	b29b      	uxth	r3, r3
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3720      	adds	r7, #32
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	00000000 	.word	0x00000000
 8000ff4:	40f8bcd0 	.word	0x40f8bcd0
 8000ff8:	00000000 	.word	0x00000000
 8000ffc:	40590000 	.word	0x40590000
 8001000:	66666666 	.word	0x66666666
 8001004:	40711266 	.word	0x40711266
 8001008:	ca402a92 	.word	0xca402a92
 800100c:	3fa17e3e 	.word	0x3fa17e3e

08001010 <BMP280_init>:

void BMP280_init(void){
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	BMP280_unselect();
 8001014:	2201      	movs	r2, #1
 8001016:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800101a:	480d      	ldr	r0, [pc, #52]	@ (8001050 <BMP280_init+0x40>)
 800101c:	f005 ff8a 	bl	8006f34 <HAL_GPIO_WritePin>
	BMP280_config();
 8001020:	f7ff fb8a 	bl	8000738 <BMP280_config>
	BMP280.ID = BMP280_read(0x89);
 8001024:	2089      	movs	r0, #137	@ 0x89
 8001026:	f7ff fb59 	bl	80006dc <BMP280_read>
 800102a:	4603      	mov	r3, r0
 800102c:	461a      	mov	r2, r3
 800102e:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <BMP280_init+0x44>)
 8001030:	701a      	strb	r2, [r3, #0]
	BMP280_calibrationData();
 8001032:	f7ff fb8d 	bl	8000750 <BMP280_calibrationData>
	BMP280_readRawValues();
 8001036:	f7ff fc41 	bl	80008bc <BMP280_readRawValues>
	BMP280.Temp_inicial = BMP280_measureT(T_raw);
 800103a:	4b07      	ldr	r3, [pc, #28]	@ (8001058 <BMP280_init+0x48>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fc80 	bl	8000944 <BMP280_measureT>
 8001044:	4603      	mov	r3, r0
 8001046:	4a03      	ldr	r2, [pc, #12]	@ (8001054 <BMP280_init+0x44>)
 8001048:	6093      	str	r3, [r2, #8]
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	58020400 	.word	0x58020400
 8001054:	24000128 	.word	0x24000128
 8001058:	24000154 	.word	0x24000154

0800105c <BMP280_calculate>:

void BMP280_calculate(void){
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	//BMP280.ID = 0;
	BMP280.ID = BMP280_read(0x89);
 8001060:	2089      	movs	r0, #137	@ 0x89
 8001062:	f7ff fb3b 	bl	80006dc <BMP280_read>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	4b16      	ldr	r3, [pc, #88]	@ (80010c4 <BMP280_calculate+0x68>)
 800106c:	701a      	strb	r2, [r3, #0]
	BMP280_readRawValues();
 800106e:	f7ff fc25 	bl	80008bc <BMP280_readRawValues>
	BMP280.Temp = BMP280_measureT(T_raw);
 8001072:	4b15      	ldr	r3, [pc, #84]	@ (80010c8 <BMP280_calculate+0x6c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fc64 	bl	8000944 <BMP280_measureT>
 800107c:	4603      	mov	r3, r0
 800107e:	4a11      	ldr	r2, [pc, #68]	@ (80010c4 <BMP280_calculate+0x68>)
 8001080:	6053      	str	r3, [r2, #4]
	BMP280.Pressure    		= BMP280_measureP(P_raw)/256;
 8001082:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <BMP280_calculate+0x70>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fca0 	bl	80009cc <BMP280_measureP>
 800108c:	4603      	mov	r3, r0
 800108e:	0a1b      	lsrs	r3, r3, #8
 8001090:	4a0c      	ldr	r2, [pc, #48]	@ (80010c4 <BMP280_calculate+0x68>)
 8001092:	60d3      	str	r3, [r2, #12]
	BMP280.Barometric_Altitude = BMP280_measureH(BMP280.Pressure, BMP280.Temp_inicial);
 8001094:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <BMP280_calculate+0x68>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	4a0a      	ldr	r2, [pc, #40]	@ (80010c4 <BMP280_calculate+0x68>)
 800109a:	6892      	ldr	r2, [r2, #8]
 800109c:	4611      	mov	r1, r2
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff5a 	bl	8000f58 <BMP280_measureH>
 80010a4:	4603      	mov	r3, r0
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <BMP280_calculate+0x68>)
 80010aa:	821a      	strh	r2, [r3, #16]

	if(BMP280.Barometric_Altitude > BMP280.Max_Altitude) BMP280.Max_Altitude = BMP280.Barometric_Altitude;
 80010ac:	4b05      	ldr	r3, [pc, #20]	@ (80010c4 <BMP280_calculate+0x68>)
 80010ae:	8a1a      	ldrh	r2, [r3, #16]
 80010b0:	4b04      	ldr	r3, [pc, #16]	@ (80010c4 <BMP280_calculate+0x68>)
 80010b2:	8a5b      	ldrh	r3, [r3, #18]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d903      	bls.n	80010c0 <BMP280_calculate+0x64>
 80010b8:	4b02      	ldr	r3, [pc, #8]	@ (80010c4 <BMP280_calculate+0x68>)
 80010ba:	8a1a      	ldrh	r2, [r3, #16]
 80010bc:	4b01      	ldr	r3, [pc, #4]	@ (80010c4 <BMP280_calculate+0x68>)
 80010be:	825a      	strh	r2, [r3, #18]
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	24000128 	.word	0x24000128
 80010c8:	24000154 	.word	0x24000154
 80010cc:	24000158 	.word	0x24000158

080010d0 <LED_blink>:

		.G_LED.LED_GPIO_GPIOx = LED_5_GPIO_Port,
		.G_LED.LED_GPIO_Pin   = LED_5_Pin
};

LED_config_t LED_blink(LED_config_t LED){
 80010d0:	b084      	sub	sp, #16
 80010d2:	b590      	push	{r4, r7, lr}
 80010d4:	b083      	sub	sp, #12
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
 80010da:	f107 001c 	add.w	r0, r7, #28
 80010de:	e880 000e 	stmia.w	r0, {r1, r2, r3}

		switch (LED.Blink_status) {
 80010e2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d002      	beq.n	80010f0 <LED_blink+0x20>
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d010      	beq.n	8001110 <LED_blink+0x40>
 80010ee:	e01f      	b.n	8001130 <LED_blink+0x60>
			case 0x00:
				if(LED.count >= LED.Time_Off){
 80010f0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80010f2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d31f      	bcc.n	8001138 <LED_blink+0x68>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	8c39      	ldrh	r1, [r7, #32]
 80010fc:	2201      	movs	r2, #1
 80010fe:	4618      	mov	r0, r3
 8001100:	f005 ff18 	bl	8006f34 <HAL_GPIO_WritePin>
					LED.Blink_status = 1;
 8001104:	2301      	movs	r3, #1
 8001106:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 800110e:	e013      	b.n	8001138 <LED_blink+0x68>
			case 0x01:
				if(LED.count >= LED.Time_On){
 8001110:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001112:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001114:	429a      	cmp	r2, r3
 8001116:	d311      	bcc.n	800113c <LED_blink+0x6c>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	8c39      	ldrh	r1, [r7, #32]
 800111c:	2200      	movs	r2, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f005 ff08 	bl	8006f34 <HAL_GPIO_WritePin>
					LED.Blink_status = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 800112e:	e005      	b.n	800113c <LED_blink+0x6c>
			default:
				LED.Blink_status = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
				break;
 8001136:	e002      	b.n	800113e <LED_blink+0x6e>
				break;
 8001138:	bf00      	nop
 800113a:	e000      	b.n	800113e <LED_blink+0x6e>
				break;
 800113c:	bf00      	nop
		}

	LED.count++;
 800113e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001140:	3301      	adds	r3, #1
 8001142:	b29b      	uxth	r3, r3
 8001144:	853b      	strh	r3, [r7, #40]	@ 0x28
	return LED;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	461c      	mov	r4, r3
 800114a:	f107 031c 	add.w	r3, r7, #28
 800114e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001150:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800115e:	b004      	add	sp, #16
 8001160:	4770      	bx	lr

08001162 <LED_Rutine>:

LED_config_t LED_Rutine(LED_config_t LED){
 8001162:	b084      	sub	sp, #16
 8001164:	b590      	push	{r4, r7, lr}
 8001166:	b085      	sub	sp, #20
 8001168:	af02      	add	r7, sp, #8
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	f107 001c 	add.w	r0, r7, #28
 8001170:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(LED.LED_status == 1){
 8001174:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001178:	2b01      	cmp	r3, #1
 800117a:	d117      	bne.n	80011ac <LED_Rutine+0x4a>
		switch (LED.Sequence) {
 800117c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001180:	2b00      	cmp	r3, #0
 8001182:	d002      	beq.n	800118a <LED_Rutine+0x28>
 8001184:	2b01      	cmp	r3, #1
 8001186:	d007      	beq.n	8001198 <LED_Rutine+0x36>
				break;
			case Blink:
				LED = LED_blink(LED);
				break;
			default:
				break;
 8001188:	e018      	b.n	80011bc <LED_Rutine+0x5a>
				HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	8c39      	ldrh	r1, [r7, #32]
 800118e:	2201      	movs	r2, #1
 8001190:	4618      	mov	r0, r3
 8001192:	f005 fecf 	bl	8006f34 <HAL_GPIO_WritePin>
				break;
 8001196:	e011      	b.n	80011bc <LED_Rutine+0x5a>
				LED = LED_blink(LED);
 8001198:	f107 001c 	add.w	r0, r7, #28
 800119c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	f107 031c 	add.w	r3, r7, #28
 80011a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011a6:	f7ff ff93 	bl	80010d0 <LED_blink>
				break;
 80011aa:	e007      	b.n	80011bc <LED_Rutine+0x5a>
		}
	}
	else{
		HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	8c39      	ldrh	r1, [r7, #32]
 80011b0:	2200      	movs	r2, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f005 febe 	bl	8006f34 <HAL_GPIO_WritePin>
		LED.count = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	853b      	strh	r3, [r7, #40]	@ 0x28
	}
	return LED;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	461c      	mov	r4, r3
 80011c0:	f107 031c 	add.w	r3, r7, #28
 80011c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80011d4:	b004      	add	sp, #16
 80011d6:	4770      	bx	lr

080011d8 <LED_Tasks>:

void LED_Tasks (void){
 80011d8:	b590      	push	{r4, r7, lr}
 80011da:	b087      	sub	sp, #28
 80011dc:	af02      	add	r7, sp, #8
	LED_Info.R_LED = LED_Rutine(LED_Info.R_LED);
 80011de:	4c24      	ldr	r4, [pc, #144]	@ (8001270 <LED_Tasks+0x98>)
 80011e0:	4638      	mov	r0, r7
 80011e2:	4b23      	ldr	r3, [pc, #140]	@ (8001270 <LED_Tasks+0x98>)
 80011e4:	68da      	ldr	r2, [r3, #12]
 80011e6:	9200      	str	r2, [sp, #0]
 80011e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011ea:	f7ff ffba 	bl	8001162 <LED_Rutine>
 80011ee:	463b      	mov	r3, r7
 80011f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED1 = LED_Rutine(LED_Info.B_LED1);
 80011f6:	4c1e      	ldr	r4, [pc, #120]	@ (8001270 <LED_Tasks+0x98>)
 80011f8:	4638      	mov	r0, r7
 80011fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001270 <LED_Tasks+0x98>)
 80011fc:	69da      	ldr	r2, [r3, #28]
 80011fe:	9200      	str	r2, [sp, #0]
 8001200:	3310      	adds	r3, #16
 8001202:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001204:	f7ff ffad 	bl	8001162 <LED_Rutine>
 8001208:	3410      	adds	r4, #16
 800120a:	463b      	mov	r3, r7
 800120c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800120e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED2 = LED_Rutine(LED_Info.B_LED2);
 8001212:	4c17      	ldr	r4, [pc, #92]	@ (8001270 <LED_Tasks+0x98>)
 8001214:	4638      	mov	r0, r7
 8001216:	4b16      	ldr	r3, [pc, #88]	@ (8001270 <LED_Tasks+0x98>)
 8001218:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800121a:	9200      	str	r2, [sp, #0]
 800121c:	3320      	adds	r3, #32
 800121e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001220:	f7ff ff9f 	bl	8001162 <LED_Rutine>
 8001224:	3420      	adds	r4, #32
 8001226:	463b      	mov	r3, r7
 8001228:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800122a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED3 = LED_Rutine(LED_Info.B_LED3);
 800122e:	4c10      	ldr	r4, [pc, #64]	@ (8001270 <LED_Tasks+0x98>)
 8001230:	4638      	mov	r0, r7
 8001232:	4b0f      	ldr	r3, [pc, #60]	@ (8001270 <LED_Tasks+0x98>)
 8001234:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001236:	9200      	str	r2, [sp, #0]
 8001238:	3330      	adds	r3, #48	@ 0x30
 800123a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800123c:	f7ff ff91 	bl	8001162 <LED_Rutine>
 8001240:	3430      	adds	r4, #48	@ 0x30
 8001242:	463b      	mov	r3, r7
 8001244:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001246:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.G_LED = LED_Rutine(LED_Info.G_LED);
 800124a:	4c09      	ldr	r4, [pc, #36]	@ (8001270 <LED_Tasks+0x98>)
 800124c:	4638      	mov	r0, r7
 800124e:	4b08      	ldr	r3, [pc, #32]	@ (8001270 <LED_Tasks+0x98>)
 8001250:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001252:	9200      	str	r2, [sp, #0]
 8001254:	3340      	adds	r3, #64	@ 0x40
 8001256:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001258:	f7ff ff83 	bl	8001162 <LED_Rutine>
 800125c:	3440      	adds	r4, #64	@ 0x40
 800125e:	463b      	mov	r3, r7
 8001260:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001262:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001266:	bf00      	nop
 8001268:	3714      	adds	r7, #20
 800126a:	46bd      	mov	sp, r7
 800126c:	bd90      	pop	{r4, r7, pc}
 800126e:	bf00      	nop
 8001270:	24000000 	.word	0x24000000

08001274 <PWM_Assing>:
		.Canal_8  = 1500,
		.Canal_9  = 1500,
		.Canal_10 = 1500,
};

void PWM_Assing(void){
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	TIM2->CCR1 = PWM_Output.Canal_1;
 8001278:	4b2a      	ldr	r3, [pc, #168]	@ (8001324 <PWM_Assing+0xb0>)
 800127a:	881a      	ldrh	r2, [r3, #0]
 800127c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001280:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2->CCR2 = PWM_Output.Canal_2;
 8001282:	4b28      	ldr	r3, [pc, #160]	@ (8001324 <PWM_Assing+0xb0>)
 8001284:	885a      	ldrh	r2, [r3, #2]
 8001286:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800128a:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM3->CCR1 = PWM_Output.Canal_3;
 800128c:	4b25      	ldr	r3, [pc, #148]	@ (8001324 <PWM_Assing+0xb0>)
 800128e:	889a      	ldrh	r2, [r3, #4]
 8001290:	4b25      	ldr	r3, [pc, #148]	@ (8001328 <PWM_Assing+0xb4>)
 8001292:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = PWM_Output.Canal_4;
 8001294:	4b23      	ldr	r3, [pc, #140]	@ (8001324 <PWM_Assing+0xb0>)
 8001296:	88da      	ldrh	r2, [r3, #6]
 8001298:	4b23      	ldr	r3, [pc, #140]	@ (8001328 <PWM_Assing+0xb4>)
 800129a:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM4->CCR1 = PWM_Output.Canal_5;
 800129c:	4b21      	ldr	r3, [pc, #132]	@ (8001324 <PWM_Assing+0xb0>)
 800129e:	891a      	ldrh	r2, [r3, #8]
 80012a0:	4b22      	ldr	r3, [pc, #136]	@ (800132c <PWM_Assing+0xb8>)
 80012a2:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM4->CCR2 = PWM_Output.Canal_6;
 80012a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001324 <PWM_Assing+0xb0>)
 80012a6:	895a      	ldrh	r2, [r3, #10]
 80012a8:	4b20      	ldr	r3, [pc, #128]	@ (800132c <PWM_Assing+0xb8>)
 80012aa:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM4->CCR3 = PWM_Output.Canal_7;
 80012ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001324 <PWM_Assing+0xb0>)
 80012ae:	899a      	ldrh	r2, [r3, #12]
 80012b0:	4b1e      	ldr	r3, [pc, #120]	@ (800132c <PWM_Assing+0xb8>)
 80012b2:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM4->CCR4 = PWM_Output.Canal_8;
 80012b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001324 <PWM_Assing+0xb0>)
 80012b6:	89da      	ldrh	r2, [r3, #14]
 80012b8:	4b1c      	ldr	r3, [pc, #112]	@ (800132c <PWM_Assing+0xb8>)
 80012ba:	641a      	str	r2, [r3, #64]	@ 0x40

	TIM2->CCR4 = PWM_Output.Canal_9;
 80012bc:	4b19      	ldr	r3, [pc, #100]	@ (8001324 <PWM_Assing+0xb0>)
 80012be:	8a1a      	ldrh	r2, [r3, #16]
 80012c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012c4:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM2->CCR3 = PWM_Output.Canal_10;
 80012c6:	4b17      	ldr	r3, [pc, #92]	@ (8001324 <PWM_Assing+0xb0>)
 80012c8:	8a5a      	ldrh	r2, [r3, #18]
 80012ca:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012ce:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80012d0:	2100      	movs	r1, #0
 80012d2:	4817      	ldr	r0, [pc, #92]	@ (8001330 <PWM_Assing+0xbc>)
 80012d4:	f00a f822 	bl	800b31c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80012d8:	2104      	movs	r1, #4
 80012da:	4815      	ldr	r0, [pc, #84]	@ (8001330 <PWM_Assing+0xbc>)
 80012dc:	f00a f81e 	bl	800b31c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80012e0:	2108      	movs	r1, #8
 80012e2:	4813      	ldr	r0, [pc, #76]	@ (8001330 <PWM_Assing+0xbc>)
 80012e4:	f00a f81a 	bl	800b31c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80012e8:	210c      	movs	r1, #12
 80012ea:	4811      	ldr	r0, [pc, #68]	@ (8001330 <PWM_Assing+0xbc>)
 80012ec:	f00a f816 	bl	800b31c <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80012f0:	2100      	movs	r1, #0
 80012f2:	4810      	ldr	r0, [pc, #64]	@ (8001334 <PWM_Assing+0xc0>)
 80012f4:	f00a f812 	bl	800b31c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80012f8:	2104      	movs	r1, #4
 80012fa:	480e      	ldr	r0, [pc, #56]	@ (8001334 <PWM_Assing+0xc0>)
 80012fc:	f00a f80e 	bl	800b31c <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001300:	2100      	movs	r1, #0
 8001302:	480d      	ldr	r0, [pc, #52]	@ (8001338 <PWM_Assing+0xc4>)
 8001304:	f00a f80a 	bl	800b31c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001308:	2104      	movs	r1, #4
 800130a:	480b      	ldr	r0, [pc, #44]	@ (8001338 <PWM_Assing+0xc4>)
 800130c:	f00a f806 	bl	800b31c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001310:	2108      	movs	r1, #8
 8001312:	4809      	ldr	r0, [pc, #36]	@ (8001338 <PWM_Assing+0xc4>)
 8001314:	f00a f802 	bl	800b31c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001318:	210c      	movs	r1, #12
 800131a:	4807      	ldr	r0, [pc, #28]	@ (8001338 <PWM_Assing+0xc4>)
 800131c:	f009 fffe 	bl	800b31c <HAL_TIM_PWM_Start>
}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}
 8001324:	24000050 	.word	0x24000050
 8001328:	40000400 	.word	0x40000400
 800132c:	40000800 	.word	0x40000800
 8001330:	24002478 	.word	0x24002478
 8001334:	240024c4 	.word	0x240024c4
 8001338:	24002510 	.word	0x24002510

0800133c <SBUS_init>:

extern UART_HandleTypeDef huart1;
#define SBUS_UART_handler &huart1


void SBUS_init(void){
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(SBUS_UART_handler, &SBUS_RxBuffer, 1);
 8001340:	2201      	movs	r2, #1
 8001342:	4903      	ldr	r1, [pc, #12]	@ (8001350 <SBUS_init+0x14>)
 8001344:	4803      	ldr	r0, [pc, #12]	@ (8001354 <SBUS_init+0x18>)
 8001346:	f00a ffd9 	bl	800c2fc <HAL_UART_Receive_DMA>

}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	24000179 	.word	0x24000179
 8001354:	24002688 	.word	0x24002688

08001358 <SBUS_Receive>:

void SBUS_Receive(uint8_t SBUS_RxBuffer){
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
	static uint8_t Actual_status = 0;
	static uint8_t RxCount;

	switch (Actual_status) {
 8001362:	4b20      	ldr	r3, [pc, #128]	@ (80013e4 <SBUS_Receive+0x8c>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d002      	beq.n	8001370 <SBUS_Receive+0x18>
 800136a:	2b01      	cmp	r3, #1
 800136c:	d017      	beq.n	800139e <SBUS_Receive+0x46>
 800136e:	e02f      	b.n	80013d0 <SBUS_Receive+0x78>
		case 0:
			if(SBUS_RxBuffer == 0x0F){
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	2b0f      	cmp	r3, #15
 8001374:	d10f      	bne.n	8001396 <SBUS_Receive+0x3e>
				SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 8001376:	4b1c      	ldr	r3, [pc, #112]	@ (80013e8 <SBUS_Receive+0x90>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	4619      	mov	r1, r3
 800137c:	4a1b      	ldr	r2, [pc, #108]	@ (80013ec <SBUS_Receive+0x94>)
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	5453      	strb	r3, [r2, r1]
				Actual_status = 1;
 8001382:	4b18      	ldr	r3, [pc, #96]	@ (80013e4 <SBUS_Receive+0x8c>)
 8001384:	2201      	movs	r2, #1
 8001386:	701a      	strb	r2, [r3, #0]
				RxCount++;
 8001388:	4b17      	ldr	r3, [pc, #92]	@ (80013e8 <SBUS_Receive+0x90>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	3301      	adds	r3, #1
 800138e:	b2da      	uxtb	r2, r3
 8001390:	4b15      	ldr	r3, [pc, #84]	@ (80013e8 <SBUS_Receive+0x90>)
 8001392:	701a      	strb	r2, [r3, #0]
			}
			else{
				RxCount = 0;
			}
			break;
 8001394:	e021      	b.n	80013da <SBUS_Receive+0x82>
				RxCount = 0;
 8001396:	4b14      	ldr	r3, [pc, #80]	@ (80013e8 <SBUS_Receive+0x90>)
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
			break;
 800139c:	e01d      	b.n	80013da <SBUS_Receive+0x82>
		case 1:
			SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 800139e:	4b12      	ldr	r3, [pc, #72]	@ (80013e8 <SBUS_Receive+0x90>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	4619      	mov	r1, r3
 80013a4:	4a11      	ldr	r2, [pc, #68]	@ (80013ec <SBUS_Receive+0x94>)
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	5453      	strb	r3, [r2, r1]
			RxCount++;
 80013aa:	4b0f      	ldr	r3, [pc, #60]	@ (80013e8 <SBUS_Receive+0x90>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	3301      	adds	r3, #1
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4b0d      	ldr	r3, [pc, #52]	@ (80013e8 <SBUS_Receive+0x90>)
 80013b4:	701a      	strb	r2, [r3, #0]
			if(RxCount == 24){
 80013b6:	4b0c      	ldr	r3, [pc, #48]	@ (80013e8 <SBUS_Receive+0x90>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b18      	cmp	r3, #24
 80013bc:	d10c      	bne.n	80013d8 <SBUS_Receive+0x80>
				RxCount = 0;
 80013be:	4b0a      	ldr	r3, [pc, #40]	@ (80013e8 <SBUS_Receive+0x90>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	701a      	strb	r2, [r3, #0]
				Actual_status = 0;
 80013c4:	4b07      	ldr	r3, [pc, #28]	@ (80013e4 <SBUS_Receive+0x8c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	701a      	strb	r2, [r3, #0]
				SBUS_getData();
 80013ca:	f000 f843 	bl	8001454 <SBUS_getData>
			}
			break;
 80013ce:	e003      	b.n	80013d8 <SBUS_Receive+0x80>
		default:
			Actual_status = 0;
 80013d0:	4b04      	ldr	r3, [pc, #16]	@ (80013e4 <SBUS_Receive+0x8c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	701a      	strb	r2, [r3, #0]
			break;
 80013d6:	e000      	b.n	80013da <SBUS_Receive+0x82>
			break;
 80013d8:	bf00      	nop
	}
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	2400017a 	.word	0x2400017a
 80013e8:	2400017b 	.word	0x2400017b
 80013ec:	24000160 	.word	0x24000160

080013f0 <Temp_BypassFunct>:

void Temp_BypassFunct (void){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
	PWM_Output.Canal_1  = Radio_input.Canal_1;
 80013f4:	4b15      	ldr	r3, [pc, #84]	@ (800144c <Temp_BypassFunct+0x5c>)
 80013f6:	881a      	ldrh	r2, [r3, #0]
 80013f8:	4b15      	ldr	r3, [pc, #84]	@ (8001450 <Temp_BypassFunct+0x60>)
 80013fa:	801a      	strh	r2, [r3, #0]
	PWM_Output.Canal_2  = Radio_input.Canal_2;
 80013fc:	4b13      	ldr	r3, [pc, #76]	@ (800144c <Temp_BypassFunct+0x5c>)
 80013fe:	885a      	ldrh	r2, [r3, #2]
 8001400:	4b13      	ldr	r3, [pc, #76]	@ (8001450 <Temp_BypassFunct+0x60>)
 8001402:	805a      	strh	r2, [r3, #2]
	PWM_Output.Canal_3  = Radio_input.Canal_3;
 8001404:	4b11      	ldr	r3, [pc, #68]	@ (800144c <Temp_BypassFunct+0x5c>)
 8001406:	889a      	ldrh	r2, [r3, #4]
 8001408:	4b11      	ldr	r3, [pc, #68]	@ (8001450 <Temp_BypassFunct+0x60>)
 800140a:	809a      	strh	r2, [r3, #4]
	PWM_Output.Canal_4  = Radio_input.Canal_4;
 800140c:	4b0f      	ldr	r3, [pc, #60]	@ (800144c <Temp_BypassFunct+0x5c>)
 800140e:	88da      	ldrh	r2, [r3, #6]
 8001410:	4b0f      	ldr	r3, [pc, #60]	@ (8001450 <Temp_BypassFunct+0x60>)
 8001412:	80da      	strh	r2, [r3, #6]
	PWM_Output.Canal_5  = Radio_input.Canal_5;
 8001414:	4b0d      	ldr	r3, [pc, #52]	@ (800144c <Temp_BypassFunct+0x5c>)
 8001416:	891a      	ldrh	r2, [r3, #8]
 8001418:	4b0d      	ldr	r3, [pc, #52]	@ (8001450 <Temp_BypassFunct+0x60>)
 800141a:	811a      	strh	r2, [r3, #8]
	PWM_Output.Canal_6  = Radio_input.Canal_6;
 800141c:	4b0b      	ldr	r3, [pc, #44]	@ (800144c <Temp_BypassFunct+0x5c>)
 800141e:	895a      	ldrh	r2, [r3, #10]
 8001420:	4b0b      	ldr	r3, [pc, #44]	@ (8001450 <Temp_BypassFunct+0x60>)
 8001422:	815a      	strh	r2, [r3, #10]
	PWM_Output.Canal_7  = Radio_input.Canal_7;
 8001424:	4b09      	ldr	r3, [pc, #36]	@ (800144c <Temp_BypassFunct+0x5c>)
 8001426:	899a      	ldrh	r2, [r3, #12]
 8001428:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <Temp_BypassFunct+0x60>)
 800142a:	819a      	strh	r2, [r3, #12]
	PWM_Output.Canal_8  = Radio_input.Canal_8;
 800142c:	4b07      	ldr	r3, [pc, #28]	@ (800144c <Temp_BypassFunct+0x5c>)
 800142e:	89da      	ldrh	r2, [r3, #14]
 8001430:	4b07      	ldr	r3, [pc, #28]	@ (8001450 <Temp_BypassFunct+0x60>)
 8001432:	81da      	strh	r2, [r3, #14]
	PWM_Output.Canal_9  = Radio_input.Canal_9;
 8001434:	4b05      	ldr	r3, [pc, #20]	@ (800144c <Temp_BypassFunct+0x5c>)
 8001436:	8a1a      	ldrh	r2, [r3, #16]
 8001438:	4b05      	ldr	r3, [pc, #20]	@ (8001450 <Temp_BypassFunct+0x60>)
 800143a:	821a      	strh	r2, [r3, #16]
	PWM_Output.Canal_10 = Radio_input.Canal_10;
 800143c:	4b03      	ldr	r3, [pc, #12]	@ (800144c <Temp_BypassFunct+0x5c>)
 800143e:	8a5a      	ldrh	r2, [r3, #18]
 8001440:	4b03      	ldr	r3, [pc, #12]	@ (8001450 <Temp_BypassFunct+0x60>)
 8001442:	825a      	strh	r2, [r3, #18]

	PWM_Assing();
 8001444:	f7ff ff16 	bl	8001274 <PWM_Assing>
}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}
 800144c:	24000064 	.word	0x24000064
 8001450:	24000050 	.word	0x24000050

08001454 <SBUS_getData>:

void SBUS_getData(void){
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
	//Se hace el corrimiento de bits para dar la estructura de los 16 canales, donde cada canal esta compuesto por 11 bits
	//pero cada paquete es de 1 byte. Para cada canal se utilizan los 8 bits (O los que correspondan) de el byte 1
	//(O el que corresponda) como los bits menos significativos del canal 1, y los tres bits faltantes se toman los 3 bits
	// menos significativos (O los que correspondan) del byte 2 y se colocan como los 3 bits más significativos del canal 1.
	Radio_input.Canal_1 = ((SBUS_UART_Rx[1] | SBUS_UART_Rx[2] << 8) & 0x07FF);
 8001458:	4b95      	ldr	r3, [pc, #596]	@ (80016b0 <SBUS_getData+0x25c>)
 800145a:	785b      	ldrb	r3, [r3, #1]
 800145c:	b21a      	sxth	r2, r3
 800145e:	4b94      	ldr	r3, [pc, #592]	@ (80016b0 <SBUS_getData+0x25c>)
 8001460:	789b      	ldrb	r3, [r3, #2]
 8001462:	021b      	lsls	r3, r3, #8
 8001464:	b21b      	sxth	r3, r3
 8001466:	4313      	orrs	r3, r2
 8001468:	b21b      	sxth	r3, r3
 800146a:	b29b      	uxth	r3, r3
 800146c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001470:	b29a      	uxth	r2, r3
 8001472:	4b90      	ldr	r3, [pc, #576]	@ (80016b4 <SBUS_getData+0x260>)
 8001474:	801a      	strh	r2, [r3, #0]
	Radio_input.Canal_2 = ((SBUS_UART_Rx[2] >> 3 | SBUS_UART_Rx[3] << 5) & 0x07FF);
 8001476:	4b8e      	ldr	r3, [pc, #568]	@ (80016b0 <SBUS_getData+0x25c>)
 8001478:	789b      	ldrb	r3, [r3, #2]
 800147a:	08db      	lsrs	r3, r3, #3
 800147c:	b2db      	uxtb	r3, r3
 800147e:	b21a      	sxth	r2, r3
 8001480:	4b8b      	ldr	r3, [pc, #556]	@ (80016b0 <SBUS_getData+0x25c>)
 8001482:	78db      	ldrb	r3, [r3, #3]
 8001484:	015b      	lsls	r3, r3, #5
 8001486:	b21b      	sxth	r3, r3
 8001488:	4313      	orrs	r3, r2
 800148a:	b21b      	sxth	r3, r3
 800148c:	b29b      	uxth	r3, r3
 800148e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001492:	b29a      	uxth	r2, r3
 8001494:	4b87      	ldr	r3, [pc, #540]	@ (80016b4 <SBUS_getData+0x260>)
 8001496:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_3 = ((SBUS_UART_Rx[3] >> 6 | SBUS_UART_Rx[4] << 2 | SBUS_UART_Rx[5] << 10) & 0x07FF);
 8001498:	4b85      	ldr	r3, [pc, #532]	@ (80016b0 <SBUS_getData+0x25c>)
 800149a:	78db      	ldrb	r3, [r3, #3]
 800149c:	099b      	lsrs	r3, r3, #6
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	b21a      	sxth	r2, r3
 80014a2:	4b83      	ldr	r3, [pc, #524]	@ (80016b0 <SBUS_getData+0x25c>)
 80014a4:	791b      	ldrb	r3, [r3, #4]
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	b21b      	sxth	r3, r3
 80014aa:	4313      	orrs	r3, r2
 80014ac:	b21a      	sxth	r2, r3
 80014ae:	4b80      	ldr	r3, [pc, #512]	@ (80016b0 <SBUS_getData+0x25c>)
 80014b0:	795b      	ldrb	r3, [r3, #5]
 80014b2:	029b      	lsls	r3, r3, #10
 80014b4:	b21b      	sxth	r3, r3
 80014b6:	4313      	orrs	r3, r2
 80014b8:	b21b      	sxth	r3, r3
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	4b7c      	ldr	r3, [pc, #496]	@ (80016b4 <SBUS_getData+0x260>)
 80014c4:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_4 = ((SBUS_UART_Rx[5] >> 1 | SBUS_UART_Rx[6] << 7) & 0x07FF);
 80014c6:	4b7a      	ldr	r3, [pc, #488]	@ (80016b0 <SBUS_getData+0x25c>)
 80014c8:	795b      	ldrb	r3, [r3, #5]
 80014ca:	085b      	lsrs	r3, r3, #1
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	b21a      	sxth	r2, r3
 80014d0:	4b77      	ldr	r3, [pc, #476]	@ (80016b0 <SBUS_getData+0x25c>)
 80014d2:	799b      	ldrb	r3, [r3, #6]
 80014d4:	01db      	lsls	r3, r3, #7
 80014d6:	b21b      	sxth	r3, r3
 80014d8:	4313      	orrs	r3, r2
 80014da:	b21b      	sxth	r3, r3
 80014dc:	b29b      	uxth	r3, r3
 80014de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	4b73      	ldr	r3, [pc, #460]	@ (80016b4 <SBUS_getData+0x260>)
 80014e6:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_5 = ((SBUS_UART_Rx[6] >> 4 | SBUS_UART_Rx[7] << 4) & 0x07FF);
 80014e8:	4b71      	ldr	r3, [pc, #452]	@ (80016b0 <SBUS_getData+0x25c>)
 80014ea:	799b      	ldrb	r3, [r3, #6]
 80014ec:	091b      	lsrs	r3, r3, #4
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	b21a      	sxth	r2, r3
 80014f2:	4b6f      	ldr	r3, [pc, #444]	@ (80016b0 <SBUS_getData+0x25c>)
 80014f4:	79db      	ldrb	r3, [r3, #7]
 80014f6:	011b      	lsls	r3, r3, #4
 80014f8:	b21b      	sxth	r3, r3
 80014fa:	4313      	orrs	r3, r2
 80014fc:	b21b      	sxth	r3, r3
 80014fe:	b29b      	uxth	r3, r3
 8001500:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001504:	b29a      	uxth	r2, r3
 8001506:	4b6b      	ldr	r3, [pc, #428]	@ (80016b4 <SBUS_getData+0x260>)
 8001508:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_6 = ((SBUS_UART_Rx[7] >> 7 | SBUS_UART_Rx[8] << 1 | SBUS_UART_Rx[9] << 9) & 0x07FF);
 800150a:	4b69      	ldr	r3, [pc, #420]	@ (80016b0 <SBUS_getData+0x25c>)
 800150c:	79db      	ldrb	r3, [r3, #7]
 800150e:	09db      	lsrs	r3, r3, #7
 8001510:	b2db      	uxtb	r3, r3
 8001512:	b21a      	sxth	r2, r3
 8001514:	4b66      	ldr	r3, [pc, #408]	@ (80016b0 <SBUS_getData+0x25c>)
 8001516:	7a1b      	ldrb	r3, [r3, #8]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	b21b      	sxth	r3, r3
 800151c:	4313      	orrs	r3, r2
 800151e:	b21a      	sxth	r2, r3
 8001520:	4b63      	ldr	r3, [pc, #396]	@ (80016b0 <SBUS_getData+0x25c>)
 8001522:	7a5b      	ldrb	r3, [r3, #9]
 8001524:	025b      	lsls	r3, r3, #9
 8001526:	b21b      	sxth	r3, r3
 8001528:	4313      	orrs	r3, r2
 800152a:	b21b      	sxth	r3, r3
 800152c:	b29b      	uxth	r3, r3
 800152e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001532:	b29a      	uxth	r2, r3
 8001534:	4b5f      	ldr	r3, [pc, #380]	@ (80016b4 <SBUS_getData+0x260>)
 8001536:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_7 = ((SBUS_UART_Rx[9] >> 2 | SBUS_UART_Rx[10] << 6) & 0x07FF);
 8001538:	4b5d      	ldr	r3, [pc, #372]	@ (80016b0 <SBUS_getData+0x25c>)
 800153a:	7a5b      	ldrb	r3, [r3, #9]
 800153c:	089b      	lsrs	r3, r3, #2
 800153e:	b2db      	uxtb	r3, r3
 8001540:	b21a      	sxth	r2, r3
 8001542:	4b5b      	ldr	r3, [pc, #364]	@ (80016b0 <SBUS_getData+0x25c>)
 8001544:	7a9b      	ldrb	r3, [r3, #10]
 8001546:	019b      	lsls	r3, r3, #6
 8001548:	b21b      	sxth	r3, r3
 800154a:	4313      	orrs	r3, r2
 800154c:	b21b      	sxth	r3, r3
 800154e:	b29b      	uxth	r3, r3
 8001550:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001554:	b29a      	uxth	r2, r3
 8001556:	4b57      	ldr	r3, [pc, #348]	@ (80016b4 <SBUS_getData+0x260>)
 8001558:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_8 = ((SBUS_UART_Rx[10] >> 5 | SBUS_UART_Rx[11] << 3) & 0x07FF);
 800155a:	4b55      	ldr	r3, [pc, #340]	@ (80016b0 <SBUS_getData+0x25c>)
 800155c:	7a9b      	ldrb	r3, [r3, #10]
 800155e:	095b      	lsrs	r3, r3, #5
 8001560:	b2db      	uxtb	r3, r3
 8001562:	b21a      	sxth	r2, r3
 8001564:	4b52      	ldr	r3, [pc, #328]	@ (80016b0 <SBUS_getData+0x25c>)
 8001566:	7adb      	ldrb	r3, [r3, #11]
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	b21b      	sxth	r3, r3
 800156c:	4313      	orrs	r3, r2
 800156e:	b21b      	sxth	r3, r3
 8001570:	b29b      	uxth	r3, r3
 8001572:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001576:	b29a      	uxth	r2, r3
 8001578:	4b4e      	ldr	r3, [pc, #312]	@ (80016b4 <SBUS_getData+0x260>)
 800157a:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_9 = ((SBUS_UART_Rx[12] | SBUS_UART_Rx[13] << 8) & 0x07FF);
 800157c:	4b4c      	ldr	r3, [pc, #304]	@ (80016b0 <SBUS_getData+0x25c>)
 800157e:	7b1b      	ldrb	r3, [r3, #12]
 8001580:	b21a      	sxth	r2, r3
 8001582:	4b4b      	ldr	r3, [pc, #300]	@ (80016b0 <SBUS_getData+0x25c>)
 8001584:	7b5b      	ldrb	r3, [r3, #13]
 8001586:	021b      	lsls	r3, r3, #8
 8001588:	b21b      	sxth	r3, r3
 800158a:	4313      	orrs	r3, r2
 800158c:	b21b      	sxth	r3, r3
 800158e:	b29b      	uxth	r3, r3
 8001590:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001594:	b29a      	uxth	r2, r3
 8001596:	4b47      	ldr	r3, [pc, #284]	@ (80016b4 <SBUS_getData+0x260>)
 8001598:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_10 = ((SBUS_UART_Rx[13] >> 3 | SBUS_UART_Rx[14] << 5) & 0x07FF);
 800159a:	4b45      	ldr	r3, [pc, #276]	@ (80016b0 <SBUS_getData+0x25c>)
 800159c:	7b5b      	ldrb	r3, [r3, #13]
 800159e:	08db      	lsrs	r3, r3, #3
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	b21a      	sxth	r2, r3
 80015a4:	4b42      	ldr	r3, [pc, #264]	@ (80016b0 <SBUS_getData+0x25c>)
 80015a6:	7b9b      	ldrb	r3, [r3, #14]
 80015a8:	015b      	lsls	r3, r3, #5
 80015aa:	b21b      	sxth	r3, r3
 80015ac:	4313      	orrs	r3, r2
 80015ae:	b21b      	sxth	r3, r3
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	4b3e      	ldr	r3, [pc, #248]	@ (80016b4 <SBUS_getData+0x260>)
 80015ba:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_11 = ((SBUS_UART_Rx[14] >> 6 | SBUS_UART_Rx[15] << 2 | SBUS_UART_Rx[16] << 10) & 0x07FF);
 80015bc:	4b3c      	ldr	r3, [pc, #240]	@ (80016b0 <SBUS_getData+0x25c>)
 80015be:	7b9b      	ldrb	r3, [r3, #14]
 80015c0:	099b      	lsrs	r3, r3, #6
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	b21a      	sxth	r2, r3
 80015c6:	4b3a      	ldr	r3, [pc, #232]	@ (80016b0 <SBUS_getData+0x25c>)
 80015c8:	7bdb      	ldrb	r3, [r3, #15]
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	b21b      	sxth	r3, r3
 80015ce:	4313      	orrs	r3, r2
 80015d0:	b21a      	sxth	r2, r3
 80015d2:	4b37      	ldr	r3, [pc, #220]	@ (80016b0 <SBUS_getData+0x25c>)
 80015d4:	7c1b      	ldrb	r3, [r3, #16]
 80015d6:	029b      	lsls	r3, r3, #10
 80015d8:	b21b      	sxth	r3, r3
 80015da:	4313      	orrs	r3, r2
 80015dc:	b21b      	sxth	r3, r3
 80015de:	b29b      	uxth	r3, r3
 80015e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	4b33      	ldr	r3, [pc, #204]	@ (80016b4 <SBUS_getData+0x260>)
 80015e8:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_12 = ((SBUS_UART_Rx[16] >> 1 | SBUS_UART_Rx[17] << 7) & 0x07FF);
 80015ea:	4b31      	ldr	r3, [pc, #196]	@ (80016b0 <SBUS_getData+0x25c>)
 80015ec:	7c1b      	ldrb	r3, [r3, #16]
 80015ee:	085b      	lsrs	r3, r3, #1
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	b21a      	sxth	r2, r3
 80015f4:	4b2e      	ldr	r3, [pc, #184]	@ (80016b0 <SBUS_getData+0x25c>)
 80015f6:	7c5b      	ldrb	r3, [r3, #17]
 80015f8:	01db      	lsls	r3, r3, #7
 80015fa:	b21b      	sxth	r3, r3
 80015fc:	4313      	orrs	r3, r2
 80015fe:	b21b      	sxth	r3, r3
 8001600:	b29b      	uxth	r3, r3
 8001602:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001606:	b29a      	uxth	r2, r3
 8001608:	4b2a      	ldr	r3, [pc, #168]	@ (80016b4 <SBUS_getData+0x260>)
 800160a:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_13 = ((SBUS_UART_Rx[17] >> 4 | SBUS_UART_Rx[18] << 4) & 0x07FF);
 800160c:	4b28      	ldr	r3, [pc, #160]	@ (80016b0 <SBUS_getData+0x25c>)
 800160e:	7c5b      	ldrb	r3, [r3, #17]
 8001610:	091b      	lsrs	r3, r3, #4
 8001612:	b2db      	uxtb	r3, r3
 8001614:	b21a      	sxth	r2, r3
 8001616:	4b26      	ldr	r3, [pc, #152]	@ (80016b0 <SBUS_getData+0x25c>)
 8001618:	7c9b      	ldrb	r3, [r3, #18]
 800161a:	011b      	lsls	r3, r3, #4
 800161c:	b21b      	sxth	r3, r3
 800161e:	4313      	orrs	r3, r2
 8001620:	b21b      	sxth	r3, r3
 8001622:	b29b      	uxth	r3, r3
 8001624:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001628:	b29a      	uxth	r2, r3
 800162a:	4b22      	ldr	r3, [pc, #136]	@ (80016b4 <SBUS_getData+0x260>)
 800162c:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_14 = ((SBUS_UART_Rx[18] >> 7 | SBUS_UART_Rx[19] << 1 | SBUS_UART_Rx[20] << 9) & 0x07FF);
 800162e:	4b20      	ldr	r3, [pc, #128]	@ (80016b0 <SBUS_getData+0x25c>)
 8001630:	7c9b      	ldrb	r3, [r3, #18]
 8001632:	09db      	lsrs	r3, r3, #7
 8001634:	b2db      	uxtb	r3, r3
 8001636:	b21a      	sxth	r2, r3
 8001638:	4b1d      	ldr	r3, [pc, #116]	@ (80016b0 <SBUS_getData+0x25c>)
 800163a:	7cdb      	ldrb	r3, [r3, #19]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	b21b      	sxth	r3, r3
 8001640:	4313      	orrs	r3, r2
 8001642:	b21a      	sxth	r2, r3
 8001644:	4b1a      	ldr	r3, [pc, #104]	@ (80016b0 <SBUS_getData+0x25c>)
 8001646:	7d1b      	ldrb	r3, [r3, #20]
 8001648:	025b      	lsls	r3, r3, #9
 800164a:	b21b      	sxth	r3, r3
 800164c:	4313      	orrs	r3, r2
 800164e:	b21b      	sxth	r3, r3
 8001650:	b29b      	uxth	r3, r3
 8001652:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001656:	b29a      	uxth	r2, r3
 8001658:	4b16      	ldr	r3, [pc, #88]	@ (80016b4 <SBUS_getData+0x260>)
 800165a:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_15 = ((SBUS_UART_Rx[20] >> 2 | SBUS_UART_Rx[21] << 6) & 0x07FF);
 800165c:	4b14      	ldr	r3, [pc, #80]	@ (80016b0 <SBUS_getData+0x25c>)
 800165e:	7d1b      	ldrb	r3, [r3, #20]
 8001660:	089b      	lsrs	r3, r3, #2
 8001662:	b2db      	uxtb	r3, r3
 8001664:	b21a      	sxth	r2, r3
 8001666:	4b12      	ldr	r3, [pc, #72]	@ (80016b0 <SBUS_getData+0x25c>)
 8001668:	7d5b      	ldrb	r3, [r3, #21]
 800166a:	019b      	lsls	r3, r3, #6
 800166c:	b21b      	sxth	r3, r3
 800166e:	4313      	orrs	r3, r2
 8001670:	b21b      	sxth	r3, r3
 8001672:	b29b      	uxth	r3, r3
 8001674:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001678:	b29a      	uxth	r2, r3
 800167a:	4b0e      	ldr	r3, [pc, #56]	@ (80016b4 <SBUS_getData+0x260>)
 800167c:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_16 = ((SBUS_UART_Rx[21] >> 5 | SBUS_UART_Rx[22] << 3) & 0x07FF);
 800167e:	4b0c      	ldr	r3, [pc, #48]	@ (80016b0 <SBUS_getData+0x25c>)
 8001680:	7d5b      	ldrb	r3, [r3, #21]
 8001682:	095b      	lsrs	r3, r3, #5
 8001684:	b2db      	uxtb	r3, r3
 8001686:	b21a      	sxth	r2, r3
 8001688:	4b09      	ldr	r3, [pc, #36]	@ (80016b0 <SBUS_getData+0x25c>)
 800168a:	7d9b      	ldrb	r3, [r3, #22]
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	b21b      	sxth	r3, r3
 8001690:	4313      	orrs	r3, r2
 8001692:	b21b      	sxth	r3, r3
 8001694:	b29b      	uxth	r3, r3
 8001696:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800169a:	b29a      	uxth	r2, r3
 800169c:	4b05      	ldr	r3, [pc, #20]	@ (80016b4 <SBUS_getData+0x260>)
 800169e:	83da      	strh	r2, [r3, #30]

	Radio_input.Canal_1 = (uint16_t)((((float)Radio_input.Canal_1 - 352) /1344 ) * 1000) + 1000;
 80016a0:	4b04      	ldr	r3, [pc, #16]	@ (80016b4 <SBUS_getData+0x260>)
 80016a2:	881b      	ldrh	r3, [r3, #0]
 80016a4:	ee07 3a90 	vmov	s15, r3
 80016a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016ac:	e00a      	b.n	80016c4 <SBUS_getData+0x270>
 80016ae:	bf00      	nop
 80016b0:	24000160 	.word	0x24000160
 80016b4:	24000064 	.word	0x24000064
 80016b8:	43b00000 	.word	0x43b00000
 80016bc:	44a80000 	.word	0x44a80000
 80016c0:	447a0000 	.word	0x447a0000
 80016c4:	ed1f 7a04 	vldr	s14, [pc, #-16]	@ 80016b8 <SBUS_getData+0x264>
 80016c8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80016cc:	ed5f 6a05 	vldr	s13, [pc, #-20]	@ 80016bc <SBUS_getData+0x268>
 80016d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016d4:	ed1f 7a06 	vldr	s14, [pc, #-24]	@ 80016c0 <SBUS_getData+0x26c>
 80016d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016e0:	ee17 3a90 	vmov	r3, s15
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	4bd1      	ldr	r3, [pc, #836]	@ (8001a34 <SBUS_getData+0x5e0>)
 80016ee:	801a      	strh	r2, [r3, #0]
	Radio_input.Canal_2 = (uint16_t)((((float)Radio_input.Canal_2 - 352) /1344 ) * 1000) + 1000;
 80016f0:	4bd0      	ldr	r3, [pc, #832]	@ (8001a34 <SBUS_getData+0x5e0>)
 80016f2:	885b      	ldrh	r3, [r3, #2]
 80016f4:	ee07 3a90 	vmov	s15, r3
 80016f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016fc:	ed9f 7ace 	vldr	s14, [pc, #824]	@ 8001a38 <SBUS_getData+0x5e4>
 8001700:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001704:	eddf 6acd 	vldr	s13, [pc, #820]	@ 8001a3c <SBUS_getData+0x5e8>
 8001708:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800170c:	ed9f 7acc 	vldr	s14, [pc, #816]	@ 8001a40 <SBUS_getData+0x5ec>
 8001710:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001714:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001718:	ee17 3a90 	vmov	r3, s15
 800171c:	b29b      	uxth	r3, r3
 800171e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001722:	b29a      	uxth	r2, r3
 8001724:	4bc3      	ldr	r3, [pc, #780]	@ (8001a34 <SBUS_getData+0x5e0>)
 8001726:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_3 = (uint16_t)((((float)Radio_input.Canal_3 - 352) /1344 ) * 1000) + 1000;
 8001728:	4bc2      	ldr	r3, [pc, #776]	@ (8001a34 <SBUS_getData+0x5e0>)
 800172a:	889b      	ldrh	r3, [r3, #4]
 800172c:	ee07 3a90 	vmov	s15, r3
 8001730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001734:	ed9f 7ac0 	vldr	s14, [pc, #768]	@ 8001a38 <SBUS_getData+0x5e4>
 8001738:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800173c:	eddf 6abf 	vldr	s13, [pc, #764]	@ 8001a3c <SBUS_getData+0x5e8>
 8001740:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001744:	ed9f 7abe 	vldr	s14, [pc, #760]	@ 8001a40 <SBUS_getData+0x5ec>
 8001748:	ee67 7a87 	vmul.f32	s15, s15, s14
 800174c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001750:	ee17 3a90 	vmov	r3, s15
 8001754:	b29b      	uxth	r3, r3
 8001756:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800175a:	b29a      	uxth	r2, r3
 800175c:	4bb5      	ldr	r3, [pc, #724]	@ (8001a34 <SBUS_getData+0x5e0>)
 800175e:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_4 = (uint16_t)((((float)Radio_input.Canal_4 - 352) /1344 ) * 1000) + 1000;
 8001760:	4bb4      	ldr	r3, [pc, #720]	@ (8001a34 <SBUS_getData+0x5e0>)
 8001762:	88db      	ldrh	r3, [r3, #6]
 8001764:	ee07 3a90 	vmov	s15, r3
 8001768:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800176c:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 8001a38 <SBUS_getData+0x5e4>
 8001770:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001774:	eddf 6ab1 	vldr	s13, [pc, #708]	@ 8001a3c <SBUS_getData+0x5e8>
 8001778:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800177c:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8001a40 <SBUS_getData+0x5ec>
 8001780:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001784:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001788:	ee17 3a90 	vmov	r3, s15
 800178c:	b29b      	uxth	r3, r3
 800178e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001792:	b29a      	uxth	r2, r3
 8001794:	4ba7      	ldr	r3, [pc, #668]	@ (8001a34 <SBUS_getData+0x5e0>)
 8001796:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_5 = (uint16_t)((((float)Radio_input.Canal_5 - 352) /1344 ) * 1000) + 1000;
 8001798:	4ba6      	ldr	r3, [pc, #664]	@ (8001a34 <SBUS_getData+0x5e0>)
 800179a:	891b      	ldrh	r3, [r3, #8]
 800179c:	ee07 3a90 	vmov	s15, r3
 80017a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017a4:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 8001a38 <SBUS_getData+0x5e4>
 80017a8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80017ac:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8001a3c <SBUS_getData+0x5e8>
 80017b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017b4:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8001a40 <SBUS_getData+0x5ec>
 80017b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017c0:	ee17 3a90 	vmov	r3, s15
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	4b99      	ldr	r3, [pc, #612]	@ (8001a34 <SBUS_getData+0x5e0>)
 80017ce:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_6 = (uint16_t)((((float)Radio_input.Canal_6 - 352) /1344 ) * 1000) + 1000;
 80017d0:	4b98      	ldr	r3, [pc, #608]	@ (8001a34 <SBUS_getData+0x5e0>)
 80017d2:	895b      	ldrh	r3, [r3, #10]
 80017d4:	ee07 3a90 	vmov	s15, r3
 80017d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017dc:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8001a38 <SBUS_getData+0x5e4>
 80017e0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80017e4:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8001a3c <SBUS_getData+0x5e8>
 80017e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017ec:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8001a40 <SBUS_getData+0x5ec>
 80017f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017f8:	ee17 3a90 	vmov	r3, s15
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001802:	b29a      	uxth	r2, r3
 8001804:	4b8b      	ldr	r3, [pc, #556]	@ (8001a34 <SBUS_getData+0x5e0>)
 8001806:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_7 = (uint16_t)((((float)Radio_input.Canal_7 - 352) /1344 ) * 1000) + 1000;
 8001808:	4b8a      	ldr	r3, [pc, #552]	@ (8001a34 <SBUS_getData+0x5e0>)
 800180a:	899b      	ldrh	r3, [r3, #12]
 800180c:	ee07 3a90 	vmov	s15, r3
 8001810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001814:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8001a38 <SBUS_getData+0x5e4>
 8001818:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800181c:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8001a3c <SBUS_getData+0x5e8>
 8001820:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001824:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8001a40 <SBUS_getData+0x5ec>
 8001828:	ee67 7a87 	vmul.f32	s15, s15, s14
 800182c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001830:	ee17 3a90 	vmov	r3, s15
 8001834:	b29b      	uxth	r3, r3
 8001836:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800183a:	b29a      	uxth	r2, r3
 800183c:	4b7d      	ldr	r3, [pc, #500]	@ (8001a34 <SBUS_getData+0x5e0>)
 800183e:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_8 = (uint16_t)((((float)Radio_input.Canal_8 - 352) /1344 ) * 1000) + 1000;
 8001840:	4b7c      	ldr	r3, [pc, #496]	@ (8001a34 <SBUS_getData+0x5e0>)
 8001842:	89db      	ldrh	r3, [r3, #14]
 8001844:	ee07 3a90 	vmov	s15, r3
 8001848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800184c:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8001a38 <SBUS_getData+0x5e4>
 8001850:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001854:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8001a3c <SBUS_getData+0x5e8>
 8001858:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800185c:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8001a40 <SBUS_getData+0x5ec>
 8001860:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001864:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001868:	ee17 3a90 	vmov	r3, s15
 800186c:	b29b      	uxth	r3, r3
 800186e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001872:	b29a      	uxth	r2, r3
 8001874:	4b6f      	ldr	r3, [pc, #444]	@ (8001a34 <SBUS_getData+0x5e0>)
 8001876:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_9 = (uint16_t)((((float)Radio_input.Canal_9 - 352) /1344 ) * 1000) + 1000;
 8001878:	4b6e      	ldr	r3, [pc, #440]	@ (8001a34 <SBUS_getData+0x5e0>)
 800187a:	8a1b      	ldrh	r3, [r3, #16]
 800187c:	ee07 3a90 	vmov	s15, r3
 8001880:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001884:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8001a38 <SBUS_getData+0x5e4>
 8001888:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800188c:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8001a3c <SBUS_getData+0x5e8>
 8001890:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001894:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 8001a40 <SBUS_getData+0x5ec>
 8001898:	ee67 7a87 	vmul.f32	s15, s15, s14
 800189c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018a0:	ee17 3a90 	vmov	r3, s15
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	4b61      	ldr	r3, [pc, #388]	@ (8001a34 <SBUS_getData+0x5e0>)
 80018ae:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_10 = (uint16_t)((((float)Radio_input.Canal_10 - 352) /1344 ) * 1000) + 1000;
 80018b0:	4b60      	ldr	r3, [pc, #384]	@ (8001a34 <SBUS_getData+0x5e0>)
 80018b2:	8a5b      	ldrh	r3, [r3, #18]
 80018b4:	ee07 3a90 	vmov	s15, r3
 80018b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018bc:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8001a38 <SBUS_getData+0x5e4>
 80018c0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80018c4:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8001a3c <SBUS_getData+0x5e8>
 80018c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018cc:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8001a40 <SBUS_getData+0x5ec>
 80018d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018d8:	ee17 3a90 	vmov	r3, s15
 80018dc:	b29b      	uxth	r3, r3
 80018de:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	4b53      	ldr	r3, [pc, #332]	@ (8001a34 <SBUS_getData+0x5e0>)
 80018e6:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_11 = (uint16_t)((((float)Radio_input.Canal_11 - 352) /1344 ) * 1000) + 1000;
 80018e8:	4b52      	ldr	r3, [pc, #328]	@ (8001a34 <SBUS_getData+0x5e0>)
 80018ea:	8a9b      	ldrh	r3, [r3, #20]
 80018ec:	ee07 3a90 	vmov	s15, r3
 80018f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018f4:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8001a38 <SBUS_getData+0x5e4>
 80018f8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80018fc:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8001a3c <SBUS_getData+0x5e8>
 8001900:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001904:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8001a40 <SBUS_getData+0x5ec>
 8001908:	ee67 7a87 	vmul.f32	s15, s15, s14
 800190c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001910:	ee17 3a90 	vmov	r3, s15
 8001914:	b29b      	uxth	r3, r3
 8001916:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800191a:	b29a      	uxth	r2, r3
 800191c:	4b45      	ldr	r3, [pc, #276]	@ (8001a34 <SBUS_getData+0x5e0>)
 800191e:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_12 = (uint16_t)((((float)Radio_input.Canal_12 - 352) /1344 ) * 1000) + 1000;
 8001920:	4b44      	ldr	r3, [pc, #272]	@ (8001a34 <SBUS_getData+0x5e0>)
 8001922:	8adb      	ldrh	r3, [r3, #22]
 8001924:	ee07 3a90 	vmov	s15, r3
 8001928:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800192c:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8001a38 <SBUS_getData+0x5e4>
 8001930:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001934:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8001a3c <SBUS_getData+0x5e8>
 8001938:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800193c:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8001a40 <SBUS_getData+0x5ec>
 8001940:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001944:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001948:	ee17 3a90 	vmov	r3, s15
 800194c:	b29b      	uxth	r3, r3
 800194e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001952:	b29a      	uxth	r2, r3
 8001954:	4b37      	ldr	r3, [pc, #220]	@ (8001a34 <SBUS_getData+0x5e0>)
 8001956:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_13 = (uint16_t)((((float)Radio_input.Canal_13 - 352) /1344 ) * 1000) + 1000;
 8001958:	4b36      	ldr	r3, [pc, #216]	@ (8001a34 <SBUS_getData+0x5e0>)
 800195a:	8b1b      	ldrh	r3, [r3, #24]
 800195c:	ee07 3a90 	vmov	s15, r3
 8001960:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001964:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8001a38 <SBUS_getData+0x5e4>
 8001968:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800196c:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8001a3c <SBUS_getData+0x5e8>
 8001970:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001974:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001a40 <SBUS_getData+0x5ec>
 8001978:	ee67 7a87 	vmul.f32	s15, s15, s14
 800197c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001980:	ee17 3a90 	vmov	r3, s15
 8001984:	b29b      	uxth	r3, r3
 8001986:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800198a:	b29a      	uxth	r2, r3
 800198c:	4b29      	ldr	r3, [pc, #164]	@ (8001a34 <SBUS_getData+0x5e0>)
 800198e:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_14 = (uint16_t)((((float)Radio_input.Canal_14 - 352) /1344 ) * 1000) + 1000;
 8001990:	4b28      	ldr	r3, [pc, #160]	@ (8001a34 <SBUS_getData+0x5e0>)
 8001992:	8b5b      	ldrh	r3, [r3, #26]
 8001994:	ee07 3a90 	vmov	s15, r3
 8001998:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800199c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001a38 <SBUS_getData+0x5e4>
 80019a0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80019a4:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8001a3c <SBUS_getData+0x5e8>
 80019a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019ac:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001a40 <SBUS_getData+0x5ec>
 80019b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019b8:	ee17 3a90 	vmov	r3, s15
 80019bc:	b29b      	uxth	r3, r3
 80019be:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a34 <SBUS_getData+0x5e0>)
 80019c6:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_15 = (uint16_t)((((float)Radio_input.Canal_15 - 352) /1344 ) * 1000) + 1000;
 80019c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a34 <SBUS_getData+0x5e0>)
 80019ca:	8b9b      	ldrh	r3, [r3, #28]
 80019cc:	ee07 3a90 	vmov	s15, r3
 80019d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019d4:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001a38 <SBUS_getData+0x5e4>
 80019d8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80019dc:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8001a3c <SBUS_getData+0x5e8>
 80019e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019e4:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001a40 <SBUS_getData+0x5ec>
 80019e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019f0:	ee17 3a90 	vmov	r3, s15
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001a34 <SBUS_getData+0x5e0>)
 80019fe:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_16 = (uint16_t)((((float)Radio_input.Canal_16 - 352) /1344 ) * 1000) + 1000;
 8001a00:	4b0c      	ldr	r3, [pc, #48]	@ (8001a34 <SBUS_getData+0x5e0>)
 8001a02:	8bdb      	ldrh	r3, [r3, #30]
 8001a04:	ee07 3a90 	vmov	s15, r3
 8001a08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a0c:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001a38 <SBUS_getData+0x5e4>
 8001a10:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001a14:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8001a3c <SBUS_getData+0x5e8>
 8001a18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a1c:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8001a40 <SBUS_getData+0x5ec>
 8001a20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a28:	ee17 3a90 	vmov	r3, s15
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001a32:	e007      	b.n	8001a44 <SBUS_getData+0x5f0>
 8001a34:	24000064 	.word	0x24000064
 8001a38:	43b00000 	.word	0x43b00000
 8001a3c:	44a80000 	.word	0x44a80000
 8001a40:	447a0000 	.word	0x447a0000
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	4b22      	ldr	r3, [pc, #136]	@ (8001ad0 <SBUS_getData+0x67c>)
 8001a48:	83da      	strh	r2, [r3, #30]

	//En el caso del byte 24, el primer bit menos significativo corresponde al canal 17, el segundo al canal 18, el tercero a el fail safe y
	//el cuarto a la perdida de paquetes. Los 4 restantes no se utilizan.
	if(SBUS_UART_Rx[23]>=8){
 8001a4a:	4b22      	ldr	r3, [pc, #136]	@ (8001ad4 <SBUS_getData+0x680>)
 8001a4c:	7ddb      	ldrb	r3, [r3, #23]
 8001a4e:	2b07      	cmp	r3, #7
 8001a50:	d90a      	bls.n	8001a68 <SBUS_getData+0x614>
		SBUS_UART_Rx[23]-=8;
 8001a52:	4b20      	ldr	r3, [pc, #128]	@ (8001ad4 <SBUS_getData+0x680>)
 8001a54:	7ddb      	ldrb	r3, [r3, #23]
 8001a56:	3b08      	subs	r3, #8
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad4 <SBUS_getData+0x680>)
 8001a5c:	75da      	strb	r2, [r3, #23]
		Radio_input.fail_safe = 1;
 8001a5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad0 <SBUS_getData+0x67c>)
 8001a60:	2201      	movs	r2, #1
 8001a62:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 8001a66:	e003      	b.n	8001a70 <SBUS_getData+0x61c>
	}else Radio_input.fail_safe= 0;
 8001a68:	4b19      	ldr	r3, [pc, #100]	@ (8001ad0 <SBUS_getData+0x67c>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

	if(SBUS_UART_Rx[23]>=4){
 8001a70:	4b18      	ldr	r3, [pc, #96]	@ (8001ad4 <SBUS_getData+0x680>)
 8001a72:	7ddb      	ldrb	r3, [r3, #23]
 8001a74:	2b03      	cmp	r3, #3
 8001a76:	d90a      	bls.n	8001a8e <SBUS_getData+0x63a>
		SBUS_UART_Rx[23]-=4;
 8001a78:	4b16      	ldr	r3, [pc, #88]	@ (8001ad4 <SBUS_getData+0x680>)
 8001a7a:	7ddb      	ldrb	r3, [r3, #23]
 8001a7c:	3b04      	subs	r3, #4
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	4b14      	ldr	r3, [pc, #80]	@ (8001ad4 <SBUS_getData+0x680>)
 8001a82:	75da      	strb	r2, [r3, #23]
		Radio_input.pkg_lost = 1;
 8001a84:	4b12      	ldr	r3, [pc, #72]	@ (8001ad0 <SBUS_getData+0x67c>)
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8001a8c:	e003      	b.n	8001a96 <SBUS_getData+0x642>
	}else Radio_input.pkg_lost=0;
 8001a8e:	4b10      	ldr	r3, [pc, #64]	@ (8001ad0 <SBUS_getData+0x67c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

	if(SBUS_UART_Rx[23]>=2){
 8001a96:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad4 <SBUS_getData+0x680>)
 8001a98:	7ddb      	ldrb	r3, [r3, #23]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d90a      	bls.n	8001ab4 <SBUS_getData+0x660>
		SBUS_UART_Rx[23]-=2;
 8001a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad4 <SBUS_getData+0x680>)
 8001aa0:	7ddb      	ldrb	r3, [r3, #23]
 8001aa2:	3b02      	subs	r3, #2
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad4 <SBUS_getData+0x680>)
 8001aa8:	75da      	strb	r2, [r3, #23]
		Radio_input.Interruptor_2=1;
 8001aaa:	4b09      	ldr	r3, [pc, #36]	@ (8001ad0 <SBUS_getData+0x67c>)
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8001ab2:	e003      	b.n	8001abc <SBUS_getData+0x668>
	}else Radio_input.Interruptor_2=0;
 8001ab4:	4b06      	ldr	r3, [pc, #24]	@ (8001ad0 <SBUS_getData+0x67c>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21


	Radio_input.Interruptor_1=SBUS_UART_Rx[23];
 8001abc:	4b05      	ldr	r3, [pc, #20]	@ (8001ad4 <SBUS_getData+0x680>)
 8001abe:	7dda      	ldrb	r2, [r3, #23]
 8001ac0:	4b03      	ldr	r3, [pc, #12]	@ (8001ad0 <SBUS_getData+0x67c>)
 8001ac2:	f883 2020 	strb.w	r2, [r3, #32]


	Temp_BypassFunct();
 8001ac6:	f7ff fc93 	bl	80013f0 <Temp_BypassFunct>

}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	24000064 	.word	0x24000064
 8001ad4:	24000160 	.word	0x24000160

08001ad8 <SD_init>:
UINT br, bw;  // File read/write count

char pahtName[7] = "Data000";
char fileName[] = "FD000.csv";

void SD_init(void){
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
	  fresult = f_mount(&fs, "/", 1);
 8001adc:	2201      	movs	r2, #1
 8001ade:	4910      	ldr	r1, [pc, #64]	@ (8001b20 <SD_init+0x48>)
 8001ae0:	4810      	ldr	r0, [pc, #64]	@ (8001b24 <SD_init+0x4c>)
 8001ae2:	f00f fb81 	bl	80111e8 <f_mount>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	461a      	mov	r2, r3
 8001aea:	4b0f      	ldr	r3, [pc, #60]	@ (8001b28 <SD_init+0x50>)
 8001aec:	701a      	strb	r2, [r3, #0]
	  //Get_NewDir();
	  f_open(&fil, fileName, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001aee:	2213      	movs	r2, #19
 8001af0:	490e      	ldr	r1, [pc, #56]	@ (8001b2c <SD_init+0x54>)
 8001af2:	480f      	ldr	r0, [pc, #60]	@ (8001b30 <SD_init+0x58>)
 8001af4:	f00f fbbe 	bl	8011274 <f_open>
	  fresult = f_lseek(&fil , f_size(&fil));
 8001af8:	4b0d      	ldr	r3, [pc, #52]	@ (8001b30 <SD_init+0x58>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	4619      	mov	r1, r3
 8001afe:	480c      	ldr	r0, [pc, #48]	@ (8001b30 <SD_init+0x58>)
 8001b00:	f00f ffbc 	bl	8011a7c <f_lseek>
 8001b04:	4603      	mov	r3, r0
 8001b06:	461a      	mov	r2, r3
 8001b08:	4b07      	ldr	r3, [pc, #28]	@ (8001b28 <SD_init+0x50>)
 8001b0a:	701a      	strb	r2, [r3, #0]
	  f_printf(&fil,"Nmsg,AccX,AccY,AccZ,GyroX,GyroY,GyroZ,Pitch,Roll,Yaw,Alt,Pressure,Temp\n");
 8001b0c:	4909      	ldr	r1, [pc, #36]	@ (8001b34 <SD_init+0x5c>)
 8001b0e:	4808      	ldr	r0, [pc, #32]	@ (8001b30 <SD_init+0x58>)
 8001b10:	f010 fa50 	bl	8011fb4 <f_printf>
	  f_close(&fil);
 8001b14:	4806      	ldr	r0, [pc, #24]	@ (8001b30 <SD_init+0x58>)
 8001b16:	f00f ff87 	bl	8011a28 <f_close>

	  }
	  else{
		  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, SET);
	  }
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	08012928 	.word	0x08012928
 8001b24:	2400017c 	.word	0x2400017c
 8001b28:	240021e8 	.word	0x240021e8
 8001b2c:	24000088 	.word	0x24000088
 8001b30:	240011b8 	.word	0x240011b8
 8001b34:	0801292c 	.word	0x0801292c

08001b38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b74 <MX_DMA_Init+0x3c>)
 8001b40:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001b44:	4a0b      	ldr	r2, [pc, #44]	@ (8001b74 <MX_DMA_Init+0x3c>)
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8001b4e:	4b09      	ldr	r3, [pc, #36]	@ (8001b74 <MX_DMA_Init+0x3c>)
 8001b50:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	607b      	str	r3, [r7, #4]
 8001b5a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2100      	movs	r1, #0
 8001b60:	200b      	movs	r0, #11
 8001b62:	f001 fd48 	bl	80035f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001b66:	200b      	movs	r0, #11
 8001b68:	f001 fd5f 	bl	800362a <HAL_NVIC_EnableIRQ>

}
 8001b6c:	bf00      	nop
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	58024400 	.word	0x58024400

08001b78 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001b7c:	4b2e      	ldr	r3, [pc, #184]	@ (8001c38 <MX_FDCAN1_Init+0xc0>)
 8001b7e:	4a2f      	ldr	r2, [pc, #188]	@ (8001c3c <MX_FDCAN1_Init+0xc4>)
 8001b80:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001b82:	4b2d      	ldr	r3, [pc, #180]	@ (8001c38 <MX_FDCAN1_Init+0xc0>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001b88:	4b2b      	ldr	r3, [pc, #172]	@ (8001c38 <MX_FDCAN1_Init+0xc0>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001b8e:	4b2a      	ldr	r3, [pc, #168]	@ (8001c38 <MX_FDCAN1_Init+0xc0>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001b94:	4b28      	ldr	r3, [pc, #160]	@ (8001c38 <MX_FDCAN1_Init+0xc0>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001b9a:	4b27      	ldr	r3, [pc, #156]	@ (8001c38 <MX_FDCAN1_Init+0xc0>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8001ba0:	4b25      	ldr	r3, [pc, #148]	@ (8001c38 <MX_FDCAN1_Init+0xc0>)
 8001ba2:	2210      	movs	r2, #16
 8001ba4:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001ba6:	4b24      	ldr	r3, [pc, #144]	@ (8001c38 <MX_FDCAN1_Init+0xc0>)
 8001ba8:	2201      	movs	r2, #1
 8001baa:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001bac:	4b22      	ldr	r3, [pc, #136]	@ (8001c38 <MX_FDCAN1_Init+0xc0>)
 8001bae:	2202      	movs	r2, #2
 8001bb0:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001bb2:	4b21      	ldr	r3, [pc, #132]	@ (8001c38 <MX_FDCAN1_Init+0xc0>)
 8001bb4:	2202      	movs	r2, #2
 8001bb6:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001bb8:	4b1f      	ldr	r3, [pc, #124]	@ (8001c38 <MX_FDCAN1_Init+0xc0>)
 8001bba:	2201      	movs	r2, #1
 8001bbc:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001bbe:	4b1e      	ldr	r3, [pc, #120]	@ (8001c38 <MX_FDCAN1_Init+0xc0>)
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001bc4:	4b1c      	ldr	r3, [pc, #112]	@ (8001c38 <MX_FDCAN1_Init+0xc0>)
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001bca:	4b1b      	ldr	r3, [pc, #108]	@ (8001c38 <MX_FDCAN1_Init+0xc0>)
 8001bcc:	2201      	movs	r2, #1
 8001bce:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001bd0:	4b19      	ldr	r3, [pc, #100]	@ (8001c38 <MX_FDCAN1_Init+0xc0>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8001bd6:	4b18      	ldr	r3, [pc, #96]	@ (8001c38 <MX_FDCAN1_Init+0xc0>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001bdc:	4b16      	ldr	r3, [pc, #88]	@ (8001c38 <MX_FDCAN1_Init+0xc0>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8001be2:	4b15      	ldr	r3, [pc, #84]	@ (8001c38 <MX_FDCAN1_Init+0xc0>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001be8:	4b13      	ldr	r3, [pc, #76]	@ (8001c38 <MX_FDCAN1_Init+0xc0>)
 8001bea:	2204      	movs	r2, #4
 8001bec:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001bee:	4b12      	ldr	r3, [pc, #72]	@ (8001c38 <MX_FDCAN1_Init+0xc0>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001bf4:	4b10      	ldr	r3, [pc, #64]	@ (8001c38 <MX_FDCAN1_Init+0xc0>)
 8001bf6:	2204      	movs	r2, #4
 8001bf8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8001c38 <MX_FDCAN1_Init+0xc0>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001c00:	4b0d      	ldr	r3, [pc, #52]	@ (8001c38 <MX_FDCAN1_Init+0xc0>)
 8001c02:	2204      	movs	r2, #4
 8001c04:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001c06:	4b0c      	ldr	r3, [pc, #48]	@ (8001c38 <MX_FDCAN1_Init+0xc0>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c38 <MX_FDCAN1_Init+0xc0>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8001c12:	4b09      	ldr	r3, [pc, #36]	@ (8001c38 <MX_FDCAN1_Init+0xc0>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001c18:	4b07      	ldr	r3, [pc, #28]	@ (8001c38 <MX_FDCAN1_Init+0xc0>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001c1e:	4b06      	ldr	r3, [pc, #24]	@ (8001c38 <MX_FDCAN1_Init+0xc0>)
 8001c20:	2204      	movs	r2, #4
 8001c22:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001c24:	4804      	ldr	r0, [pc, #16]	@ (8001c38 <MX_FDCAN1_Init+0xc0>)
 8001c26:	f004 fc71 	bl	800650c <HAL_FDCAN_Init>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8001c30:	f000 fafe 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	240021ec 	.word	0x240021ec
 8001c3c:	4000a000 	.word	0x4000a000

08001c40 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b0ba      	sub	sp, #232	@ 0xe8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c48:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c58:	f107 0310 	add.w	r3, r7, #16
 8001c5c:	22c0      	movs	r2, #192	@ 0xc0
 8001c5e:	2100      	movs	r1, #0
 8001c60:	4618      	mov	r0, r3
 8001c62:	f010 fce7 	bl	8012634 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a2f      	ldr	r2, [pc, #188]	@ (8001d28 <HAL_FDCAN_MspInit+0xe8>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d157      	bne.n	8001d20 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001c70:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001c74:	f04f 0300 	mov.w	r3, #0
 8001c78:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001c7c:	2304      	movs	r3, #4
 8001c7e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 8;
 8001c80:	2308      	movs	r3, #8
 8001c82:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001c84:	2302      	movs	r3, #2
 8001c86:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001c90:	23c0      	movs	r3, #192	@ 0xc0
 8001c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001c94:	2300      	movs	r3, #0
 8001c96:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8001c9c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001ca0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ca4:	f107 0310 	add.w	r3, r7, #16
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f006 fa89 	bl	80081c0 <HAL_RCCEx_PeriphCLKConfig>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 8001cb4:	f000 fabc 	bl	8002230 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001cb8:	4b1c      	ldr	r3, [pc, #112]	@ (8001d2c <HAL_FDCAN_MspInit+0xec>)
 8001cba:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8001cbe:	4a1b      	ldr	r2, [pc, #108]	@ (8001d2c <HAL_FDCAN_MspInit+0xec>)
 8001cc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cc4:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 8001cc8:	4b18      	ldr	r3, [pc, #96]	@ (8001d2c <HAL_FDCAN_MspInit+0xec>)
 8001cca:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8001cce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd6:	4b15      	ldr	r3, [pc, #84]	@ (8001d2c <HAL_FDCAN_MspInit+0xec>)
 8001cd8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001cdc:	4a13      	ldr	r2, [pc, #76]	@ (8001d2c <HAL_FDCAN_MspInit+0xec>)
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001ce6:	4b11      	ldr	r3, [pc, #68]	@ (8001d2c <HAL_FDCAN_MspInit+0xec>)
 8001ce8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	60bb      	str	r3, [r7, #8]
 8001cf2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001cf4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001cf8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001d0e:	2309      	movs	r3, #9
 8001d10:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d14:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4805      	ldr	r0, [pc, #20]	@ (8001d30 <HAL_FDCAN_MspInit+0xf0>)
 8001d1c:	f004 ff5a 	bl	8006bd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001d20:	bf00      	nop
 8001d22:	37e8      	adds	r7, #232	@ 0xe8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	4000a000 	.word	0x4000a000
 8001d2c:	58024400 	.word	0x58024400
 8001d30:	58020000 	.word	0x58020000

08001d34 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08a      	sub	sp, #40	@ 0x28
 8001d38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3a:	f107 0314 	add.w	r3, r7, #20
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	605a      	str	r2, [r3, #4]
 8001d44:	609a      	str	r2, [r3, #8]
 8001d46:	60da      	str	r2, [r3, #12]
 8001d48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d4a:	4b48      	ldr	r3, [pc, #288]	@ (8001e6c <MX_GPIO_Init+0x138>)
 8001d4c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001d50:	4a46      	ldr	r2, [pc, #280]	@ (8001e6c <MX_GPIO_Init+0x138>)
 8001d52:	f043 0304 	orr.w	r3, r3, #4
 8001d56:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001d5a:	4b44      	ldr	r3, [pc, #272]	@ (8001e6c <MX_GPIO_Init+0x138>)
 8001d5c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	613b      	str	r3, [r7, #16]
 8001d66:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d68:	4b40      	ldr	r3, [pc, #256]	@ (8001e6c <MX_GPIO_Init+0x138>)
 8001d6a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001d6e:	4a3f      	ldr	r2, [pc, #252]	@ (8001e6c <MX_GPIO_Init+0x138>)
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001d78:	4b3c      	ldr	r3, [pc, #240]	@ (8001e6c <MX_GPIO_Init+0x138>)
 8001d7a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d86:	4b39      	ldr	r3, [pc, #228]	@ (8001e6c <MX_GPIO_Init+0x138>)
 8001d88:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001d8c:	4a37      	ldr	r2, [pc, #220]	@ (8001e6c <MX_GPIO_Init+0x138>)
 8001d8e:	f043 0302 	orr.w	r3, r3, #2
 8001d92:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001d96:	4b35      	ldr	r3, [pc, #212]	@ (8001e6c <MX_GPIO_Init+0x138>)
 8001d98:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	60bb      	str	r3, [r7, #8]
 8001da2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001da4:	4b31      	ldr	r3, [pc, #196]	@ (8001e6c <MX_GPIO_Init+0x138>)
 8001da6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001daa:	4a30      	ldr	r2, [pc, #192]	@ (8001e6c <MX_GPIO_Init+0x138>)
 8001dac:	f043 0308 	orr.w	r3, r3, #8
 8001db0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001db4:	4b2d      	ldr	r3, [pc, #180]	@ (8001e6c <MX_GPIO_Init+0x138>)
 8001db6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001dba:	f003 0308 	and.w	r3, r3, #8
 8001dbe:	607b      	str	r3, [r7, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f242 010f 	movw	r1, #8207	@ 0x200f
 8001dc8:	4829      	ldr	r0, [pc, #164]	@ (8001e70 <MX_GPIO_Init+0x13c>)
 8001dca:	f005 f8b3 	bl	8006f34 <HAL_GPIO_WritePin>
                          |LED_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_NSS_GPIO_Port, SD_NSS_Pin, GPIO_PIN_RESET);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2110      	movs	r1, #16
 8001dd2:	4828      	ldr	r0, [pc, #160]	@ (8001e74 <MX_GPIO_Init+0x140>)
 8001dd4:	f005 f8ae 	bl	8006f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BME_NSS_GPIO_Port, BME_NSS_Pin, GPIO_PIN_RESET);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001dde:	4826      	ldr	r0, [pc, #152]	@ (8001e78 <MX_GPIO_Init+0x144>)
 8001de0:	f005 f8a8 	bl	8006f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_INT_GPIO_Port, IMU_INT_Pin, GPIO_PIN_RESET);
 8001de4:	2200      	movs	r2, #0
 8001de6:	2104      	movs	r1, #4
 8001de8:	4824      	ldr	r0, [pc, #144]	@ (8001e7c <MX_GPIO_Init+0x148>)
 8001dea:	f005 f8a3 	bl	8006f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8001dee:	f242 030f 	movw	r3, #8207	@ 0x200f
 8001df2:	617b      	str	r3, [r7, #20]
                          |LED_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df4:	2301      	movs	r3, #1
 8001df6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e00:	f107 0314 	add.w	r3, r7, #20
 8001e04:	4619      	mov	r1, r3
 8001e06:	481a      	ldr	r0, [pc, #104]	@ (8001e70 <MX_GPIO_Init+0x13c>)
 8001e08:	f004 fee4 	bl	8006bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_NSS_Pin;
 8001e0c:	2310      	movs	r3, #16
 8001e0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e10:	2301      	movs	r3, #1
 8001e12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_NSS_GPIO_Port, &GPIO_InitStruct);
 8001e1c:	f107 0314 	add.w	r3, r7, #20
 8001e20:	4619      	mov	r1, r3
 8001e22:	4814      	ldr	r0, [pc, #80]	@ (8001e74 <MX_GPIO_Init+0x140>)
 8001e24:	f004 fed6 	bl	8006bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BME_NSS_Pin;
 8001e28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e36:	2300      	movs	r3, #0
 8001e38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BME_NSS_GPIO_Port, &GPIO_InitStruct);
 8001e3a:	f107 0314 	add.w	r3, r7, #20
 8001e3e:	4619      	mov	r1, r3
 8001e40:	480d      	ldr	r0, [pc, #52]	@ (8001e78 <MX_GPIO_Init+0x144>)
 8001e42:	f004 fec7 	bl	8006bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8001e46:	2304      	movs	r3, #4
 8001e48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e52:	2300      	movs	r3, #0
 8001e54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8001e56:	f107 0314 	add.w	r3, r7, #20
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4807      	ldr	r0, [pc, #28]	@ (8001e7c <MX_GPIO_Init+0x148>)
 8001e5e:	f004 feb9 	bl	8006bd4 <HAL_GPIO_Init>

}
 8001e62:	bf00      	nop
 8001e64:	3728      	adds	r7, #40	@ 0x28
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	58024400 	.word	0x58024400
 8001e70:	58020800 	.word	0x58020800
 8001e74:	58020000 	.word	0x58020000
 8001e78:	58020400 	.word	0x58020400
 8001e7c:	58020c00 	.word	0x58020c00

08001e80 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001e84:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef4 <MX_I2C3_Init+0x74>)
 8001e86:	4a1c      	ldr	r2, [pc, #112]	@ (8001ef8 <MX_I2C3_Init+0x78>)
 8001e88:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20B0CCFF;
 8001e8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef4 <MX_I2C3_Init+0x74>)
 8001e8c:	4a1b      	ldr	r2, [pc, #108]	@ (8001efc <MX_I2C3_Init+0x7c>)
 8001e8e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001e90:	4b18      	ldr	r3, [pc, #96]	@ (8001ef4 <MX_I2C3_Init+0x74>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e96:	4b17      	ldr	r3, [pc, #92]	@ (8001ef4 <MX_I2C3_Init+0x74>)
 8001e98:	2201      	movs	r2, #1
 8001e9a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e9c:	4b15      	ldr	r3, [pc, #84]	@ (8001ef4 <MX_I2C3_Init+0x74>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001ea2:	4b14      	ldr	r3, [pc, #80]	@ (8001ef4 <MX_I2C3_Init+0x74>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ea8:	4b12      	ldr	r3, [pc, #72]	@ (8001ef4 <MX_I2C3_Init+0x74>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001eae:	4b11      	ldr	r3, [pc, #68]	@ (8001ef4 <MX_I2C3_Init+0x74>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef4 <MX_I2C3_Init+0x74>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001eba:	480e      	ldr	r0, [pc, #56]	@ (8001ef4 <MX_I2C3_Init+0x74>)
 8001ebc:	f005 f854 	bl	8006f68 <HAL_I2C_Init>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001ec6:	f000 f9b3 	bl	8002230 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001eca:	2100      	movs	r1, #0
 8001ecc:	4809      	ldr	r0, [pc, #36]	@ (8001ef4 <MX_I2C3_Init+0x74>)
 8001ece:	f005 f8e7 	bl	80070a0 <HAL_I2CEx_ConfigAnalogFilter>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001ed8:	f000 f9aa 	bl	8002230 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001edc:	2100      	movs	r1, #0
 8001ede:	4805      	ldr	r0, [pc, #20]	@ (8001ef4 <MX_I2C3_Init+0x74>)
 8001ee0:	f005 f929 	bl	8007136 <HAL_I2CEx_ConfigDigitalFilter>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001eea:	f000 f9a1 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	2400228c 	.word	0x2400228c
 8001ef8:	40005c00 	.word	0x40005c00
 8001efc:	20b0ccff 	.word	0x20b0ccff

08001f00 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b0bc      	sub	sp, #240	@ 0xf0
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f08:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	60da      	str	r2, [r3, #12]
 8001f16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f18:	f107 0318 	add.w	r3, r7, #24
 8001f1c:	22c0      	movs	r2, #192	@ 0xc0
 8001f1e:	2100      	movs	r1, #0
 8001f20:	4618      	mov	r0, r3
 8001f22:	f010 fb87 	bl	8012634 <memset>
  if(i2cHandle->Instance==I2C3)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a39      	ldr	r2, [pc, #228]	@ (8002010 <HAL_I2C_MspInit+0x110>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d16b      	bne.n	8002008 <HAL_I2C_MspInit+0x108>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001f30:	f04f 0208 	mov.w	r2, #8
 8001f34:	f04f 0300 	mov.w	r3, #0
 8001f38:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f42:	f107 0318 	add.w	r3, r7, #24
 8001f46:	4618      	mov	r0, r3
 8001f48:	f006 f93a 	bl	80081c0 <HAL_RCCEx_PeriphCLKConfig>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001f52:	f000 f96d 	bl	8002230 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f56:	4b2f      	ldr	r3, [pc, #188]	@ (8002014 <HAL_I2C_MspInit+0x114>)
 8001f58:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f5c:	4a2d      	ldr	r2, [pc, #180]	@ (8002014 <HAL_I2C_MspInit+0x114>)
 8001f5e:	f043 0304 	orr.w	r3, r3, #4
 8001f62:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001f66:	4b2b      	ldr	r3, [pc, #172]	@ (8002014 <HAL_I2C_MspInit+0x114>)
 8001f68:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	617b      	str	r3, [r7, #20]
 8001f72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f74:	4b27      	ldr	r3, [pc, #156]	@ (8002014 <HAL_I2C_MspInit+0x114>)
 8001f76:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f7a:	4a26      	ldr	r2, [pc, #152]	@ (8002014 <HAL_I2C_MspInit+0x114>)
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001f84:	4b23      	ldr	r3, [pc, #140]	@ (8002014 <HAL_I2C_MspInit+0x114>)
 8001f86:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	613b      	str	r3, [r7, #16]
 8001f90:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f9a:	2312      	movs	r3, #18
 8001f9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001fac:	2304      	movs	r3, #4
 8001fae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fb2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4817      	ldr	r0, [pc, #92]	@ (8002018 <HAL_I2C_MspInit+0x118>)
 8001fba:	f004 fe0b 	bl	8006bd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001fbe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fc2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fc6:	2312      	movs	r3, #18
 8001fc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001fd8:	2304      	movs	r3, #4
 8001fda:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fde:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	480d      	ldr	r0, [pc, #52]	@ (800201c <HAL_I2C_MspInit+0x11c>)
 8001fe6:	f004 fdf5 	bl	8006bd4 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001fea:	4b0a      	ldr	r3, [pc, #40]	@ (8002014 <HAL_I2C_MspInit+0x114>)
 8001fec:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001ff0:	4a08      	ldr	r2, [pc, #32]	@ (8002014 <HAL_I2C_MspInit+0x114>)
 8001ff2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001ff6:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001ffa:	4b06      	ldr	r3, [pc, #24]	@ (8002014 <HAL_I2C_MspInit+0x114>)
 8001ffc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002000:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002008:	bf00      	nop
 800200a:	37f0      	adds	r7, #240	@ 0xf0
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40005c00 	.word	0x40005c00
 8002014:	58024400 	.word	0x58024400
 8002018:	58020800 	.word	0x58020800
 800201c:	58020000 	.word	0x58020000

08002020 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8002024:	f000 f8d8 	bl	80021d8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002028:	f001 f954 	bl	80032d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800202c:	f000 f82e 	bl	800208c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002030:	f7ff fe80 	bl	8001d34 <MX_GPIO_Init>
  MX_DMA_Init();
 8002034:	f7ff fd80 	bl	8001b38 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8002038:	f7ff fd9e 	bl	8001b78 <MX_FDCAN1_Init>
  MX_I2C3_Init();
 800203c:	f7ff ff20 	bl	8001e80 <MX_I2C3_Init>
  MX_SPI1_Init();
 8002040:	f000 f8fc 	bl	800223c <MX_SPI1_Init>
  MX_SPI2_Init();
 8002044:	f000 f950 	bl	80022e8 <MX_SPI2_Init>
  MX_SPI3_Init();
 8002048:	f000 f9a4 	bl	8002394 <MX_SPI3_Init>
  MX_TIM2_Init();
 800204c:	f000 fbfa 	bl	8002844 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002050:	f000 fc74 	bl	800293c <MX_TIM3_Init>
  MX_TIM4_Init();
 8002054:	f000 fcd8 	bl	8002a08 <MX_TIM4_Init>
  MX_UART4_Init();
 8002058:	f000 fee8 	bl	8002e2c <MX_UART4_Init>
  MX_USART1_UART_Init();
 800205c:	f000 ff32 	bl	8002ec4 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8002060:	f000 ff80 	bl	8002f64 <MX_USART6_UART_Init>
  MX_TIM13_Init();
 8002064:	f000 fd86 	bl	8002b74 <MX_TIM13_Init>
  MX_FATFS_Init();
 8002068:	f00c f942 	bl	800e2f0 <MX_FATFS_Init>
  MX_TIM6_Init();
 800206c:	f000 fd48 	bl	8002b00 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  BMP280_init();
 8002070:	f7fe ffce 	bl	8001010 <BMP280_init>
  SD_init();
 8002074:	f7ff fd30 	bl	8001ad8 <SD_init>
  SBUS_init();
 8002078:	f7ff f960 	bl	800133c <SBUS_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BMP280_calculate();
 800207c:	f7fe ffee 	bl	800105c <BMP280_calculate>

	  HAL_Delay(50);
 8002080:	2032      	movs	r0, #50	@ 0x32
 8002082:	f001 f9b9 	bl	80033f8 <HAL_Delay>
	  BMP280_calculate();
 8002086:	bf00      	nop
 8002088:	e7f8      	b.n	800207c <main+0x5c>
	...

0800208c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b09c      	sub	sp, #112	@ 0x70
 8002090:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002092:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002096:	224c      	movs	r2, #76	@ 0x4c
 8002098:	2100      	movs	r1, #0
 800209a:	4618      	mov	r0, r3
 800209c:	f010 faca 	bl	8012634 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020a0:	1d3b      	adds	r3, r7, #4
 80020a2:	2220      	movs	r2, #32
 80020a4:	2100      	movs	r1, #0
 80020a6:	4618      	mov	r0, r3
 80020a8:	f010 fac4 	bl	8012634 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80020ac:	4b30      	ldr	r3, [pc, #192]	@ (8002170 <SystemClock_Config+0xe4>)
 80020ae:	f04f 32ff 	mov.w	r2, #4294967295
 80020b2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80020b6:	2002      	movs	r0, #2
 80020b8:	f005 f88a 	bl	80071d0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80020bc:	2300      	movs	r3, #0
 80020be:	603b      	str	r3, [r7, #0]
 80020c0:	4b2c      	ldr	r3, [pc, #176]	@ (8002174 <SystemClock_Config+0xe8>)
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	4a2b      	ldr	r2, [pc, #172]	@ (8002174 <SystemClock_Config+0xe8>)
 80020c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80020ca:	6193      	str	r3, [r2, #24]
 80020cc:	4b29      	ldr	r3, [pc, #164]	@ (8002174 <SystemClock_Config+0xe8>)
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80020d4:	603b      	str	r3, [r7, #0]
 80020d6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80020d8:	bf00      	nop
 80020da:	4b26      	ldr	r3, [pc, #152]	@ (8002174 <SystemClock_Config+0xe8>)
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020e6:	d1f8      	bne.n	80020da <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020e8:	2302      	movs	r3, #2
 80020ea:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80020ec:	2301      	movs	r3, #1
 80020ee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80020f0:	2340      	movs	r3, #64	@ 0x40
 80020f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020f4:	2302      	movs	r3, #2
 80020f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80020f8:	2300      	movs	r3, #0
 80020fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80020fc:	2304      	movs	r3, #4
 80020fe:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8002100:	2323      	movs	r3, #35	@ 0x23
 8002102:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002104:	2302      	movs	r3, #2
 8002106:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002108:	2302      	movs	r3, #2
 800210a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800210c:	2302      	movs	r3, #2
 800210e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002110:	230c      	movs	r3, #12
 8002112:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002114:	2300      	movs	r3, #0
 8002116:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002118:	2300      	movs	r3, #0
 800211a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800211c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002120:	4618      	mov	r0, r3
 8002122:	f005 f88f 	bl	8007244 <HAL_RCC_OscConfig>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800212c:	f000 f880 	bl	8002230 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002130:	233f      	movs	r3, #63	@ 0x3f
 8002132:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002134:	2303      	movs	r3, #3
 8002136:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002138:	2300      	movs	r3, #0
 800213a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800213c:	2300      	movs	r3, #0
 800213e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002140:	2340      	movs	r3, #64	@ 0x40
 8002142:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002144:	2340      	movs	r3, #64	@ 0x40
 8002146:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002148:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800214c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800214e:	2340      	movs	r3, #64	@ 0x40
 8002150:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8002152:	1d3b      	adds	r3, r7, #4
 8002154:	2106      	movs	r1, #6
 8002156:	4618      	mov	r0, r3
 8002158:	f005 fca6 	bl	8007aa8 <HAL_RCC_ClockConfig>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8002162:	f000 f865 	bl	8002230 <Error_Handler>
  }
}
 8002166:	bf00      	nop
 8002168:	3770      	adds	r7, #112	@ 0x70
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	58024400 	.word	0x58024400
 8002174:	58024800 	.word	0x58024800

08002178 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == USART1){
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a08      	ldr	r2, [pc, #32]	@ (80021a8 <HAL_UART_RxCpltCallback+0x30>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d109      	bne.n	800219e <HAL_UART_RxCpltCallback+0x26>
		SBUS_Receive(SBUS_RxBuffer);
 800218a:	4b08      	ldr	r3, [pc, #32]	@ (80021ac <HAL_UART_RxCpltCallback+0x34>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff f8e2 	bl	8001358 <SBUS_Receive>
		HAL_UART_Receive_DMA(&huart1, &SBUS_RxBuffer, 1);
 8002194:	2201      	movs	r2, #1
 8002196:	4905      	ldr	r1, [pc, #20]	@ (80021ac <HAL_UART_RxCpltCallback+0x34>)
 8002198:	4805      	ldr	r0, [pc, #20]	@ (80021b0 <HAL_UART_RxCpltCallback+0x38>)
 800219a:	f00a f8af 	bl	800c2fc <HAL_UART_Receive_DMA>
	}


}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40011000 	.word	0x40011000
 80021ac:	24000179 	.word	0x24000179
 80021b0:	24002688 	.word	0x24002688

080021b4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
	//Interrupción cada 1 ms
	if (htim -> Instance == TIM6){
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a04      	ldr	r2, [pc, #16]	@ (80021d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d101      	bne.n	80021ca <HAL_TIM_PeriodElapsedCallback+0x16>
		LED_Tasks();
 80021c6:	f7ff f807 	bl	80011d8 <LED_Tasks>
	}

}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40001000 	.word	0x40001000

080021d8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80021de:	463b      	mov	r3, r7
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80021ea:	f001 fa39 	bl	8003660 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80021ee:	2301      	movs	r3, #1
 80021f0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80021f2:	2300      	movs	r3, #0
 80021f4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80021f6:	2300      	movs	r3, #0
 80021f8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80021fa:	231f      	movs	r3, #31
 80021fc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80021fe:	2387      	movs	r3, #135	@ 0x87
 8002200:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002202:	2300      	movs	r3, #0
 8002204:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8002206:	2300      	movs	r3, #0
 8002208:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800220a:	2301      	movs	r3, #1
 800220c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800220e:	2301      	movs	r3, #1
 8002210:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002212:	2300      	movs	r3, #0
 8002214:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002216:	2300      	movs	r3, #0
 8002218:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800221a:	463b      	mov	r3, r7
 800221c:	4618      	mov	r0, r3
 800221e:	f001 fa57 	bl	80036d0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002222:	2004      	movs	r0, #4
 8002224:	f001 fa34 	bl	8003690 <HAL_MPU_Enable>

}
 8002228:	bf00      	nop
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002234:	b672      	cpsid	i
}
 8002236:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002238:	bf00      	nop
 800223a:	e7fd      	b.n	8002238 <Error_Handler+0x8>

0800223c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002240:	4b27      	ldr	r3, [pc, #156]	@ (80022e0 <MX_SPI1_Init+0xa4>)
 8002242:	4a28      	ldr	r2, [pc, #160]	@ (80022e4 <MX_SPI1_Init+0xa8>)
 8002244:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002246:	4b26      	ldr	r3, [pc, #152]	@ (80022e0 <MX_SPI1_Init+0xa4>)
 8002248:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800224c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800224e:	4b24      	ldr	r3, [pc, #144]	@ (80022e0 <MX_SPI1_Init+0xa4>)
 8002250:	2200      	movs	r2, #0
 8002252:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002254:	4b22      	ldr	r3, [pc, #136]	@ (80022e0 <MX_SPI1_Init+0xa4>)
 8002256:	2207      	movs	r2, #7
 8002258:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800225a:	4b21      	ldr	r3, [pc, #132]	@ (80022e0 <MX_SPI1_Init+0xa4>)
 800225c:	2200      	movs	r2, #0
 800225e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002260:	4b1f      	ldr	r3, [pc, #124]	@ (80022e0 <MX_SPI1_Init+0xa4>)
 8002262:	2200      	movs	r2, #0
 8002264:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002266:	4b1e      	ldr	r3, [pc, #120]	@ (80022e0 <MX_SPI1_Init+0xa4>)
 8002268:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800226c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800226e:	4b1c      	ldr	r3, [pc, #112]	@ (80022e0 <MX_SPI1_Init+0xa4>)
 8002270:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 8002274:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002276:	4b1a      	ldr	r3, [pc, #104]	@ (80022e0 <MX_SPI1_Init+0xa4>)
 8002278:	2200      	movs	r2, #0
 800227a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800227c:	4b18      	ldr	r3, [pc, #96]	@ (80022e0 <MX_SPI1_Init+0xa4>)
 800227e:	2200      	movs	r2, #0
 8002280:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002282:	4b17      	ldr	r3, [pc, #92]	@ (80022e0 <MX_SPI1_Init+0xa4>)
 8002284:	2200      	movs	r2, #0
 8002286:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002288:	4b15      	ldr	r3, [pc, #84]	@ (80022e0 <MX_SPI1_Init+0xa4>)
 800228a:	2200      	movs	r2, #0
 800228c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800228e:	4b14      	ldr	r3, [pc, #80]	@ (80022e0 <MX_SPI1_Init+0xa4>)
 8002290:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002294:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002296:	4b12      	ldr	r3, [pc, #72]	@ (80022e0 <MX_SPI1_Init+0xa4>)
 8002298:	2200      	movs	r2, #0
 800229a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800229c:	4b10      	ldr	r3, [pc, #64]	@ (80022e0 <MX_SPI1_Init+0xa4>)
 800229e:	2200      	movs	r2, #0
 80022a0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80022a2:	4b0f      	ldr	r3, [pc, #60]	@ (80022e0 <MX_SPI1_Init+0xa4>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80022a8:	4b0d      	ldr	r3, [pc, #52]	@ (80022e0 <MX_SPI1_Init+0xa4>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80022ae:	4b0c      	ldr	r3, [pc, #48]	@ (80022e0 <MX_SPI1_Init+0xa4>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80022b4:	4b0a      	ldr	r3, [pc, #40]	@ (80022e0 <MX_SPI1_Init+0xa4>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80022ba:	4b09      	ldr	r3, [pc, #36]	@ (80022e0 <MX_SPI1_Init+0xa4>)
 80022bc:	2200      	movs	r2, #0
 80022be:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80022c0:	4b07      	ldr	r3, [pc, #28]	@ (80022e0 <MX_SPI1_Init+0xa4>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80022c6:	4b06      	ldr	r3, [pc, #24]	@ (80022e0 <MX_SPI1_Init+0xa4>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022cc:	4804      	ldr	r0, [pc, #16]	@ (80022e0 <MX_SPI1_Init+0xa4>)
 80022ce:	f007 fd57 	bl	8009d80 <HAL_SPI_Init>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80022d8:	f7ff ffaa 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80022dc:	bf00      	nop
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	240022e0 	.word	0x240022e0
 80022e4:	40013000 	.word	0x40013000

080022e8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80022ec:	4b27      	ldr	r3, [pc, #156]	@ (800238c <MX_SPI2_Init+0xa4>)
 80022ee:	4a28      	ldr	r2, [pc, #160]	@ (8002390 <MX_SPI2_Init+0xa8>)
 80022f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80022f2:	4b26      	ldr	r3, [pc, #152]	@ (800238c <MX_SPI2_Init+0xa4>)
 80022f4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80022f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80022fa:	4b24      	ldr	r3, [pc, #144]	@ (800238c <MX_SPI2_Init+0xa4>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002300:	4b22      	ldr	r3, [pc, #136]	@ (800238c <MX_SPI2_Init+0xa4>)
 8002302:	2207      	movs	r2, #7
 8002304:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002306:	4b21      	ldr	r3, [pc, #132]	@ (800238c <MX_SPI2_Init+0xa4>)
 8002308:	2200      	movs	r2, #0
 800230a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800230c:	4b1f      	ldr	r3, [pc, #124]	@ (800238c <MX_SPI2_Init+0xa4>)
 800230e:	2200      	movs	r2, #0
 8002310:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002312:	4b1e      	ldr	r3, [pc, #120]	@ (800238c <MX_SPI2_Init+0xa4>)
 8002314:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002318:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800231a:	4b1c      	ldr	r3, [pc, #112]	@ (800238c <MX_SPI2_Init+0xa4>)
 800231c:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8002320:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002322:	4b1a      	ldr	r3, [pc, #104]	@ (800238c <MX_SPI2_Init+0xa4>)
 8002324:	2200      	movs	r2, #0
 8002326:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002328:	4b18      	ldr	r3, [pc, #96]	@ (800238c <MX_SPI2_Init+0xa4>)
 800232a:	2200      	movs	r2, #0
 800232c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800232e:	4b17      	ldr	r3, [pc, #92]	@ (800238c <MX_SPI2_Init+0xa4>)
 8002330:	2200      	movs	r2, #0
 8002332:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002334:	4b15      	ldr	r3, [pc, #84]	@ (800238c <MX_SPI2_Init+0xa4>)
 8002336:	2200      	movs	r2, #0
 8002338:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800233a:	4b14      	ldr	r3, [pc, #80]	@ (800238c <MX_SPI2_Init+0xa4>)
 800233c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002340:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002342:	4b12      	ldr	r3, [pc, #72]	@ (800238c <MX_SPI2_Init+0xa4>)
 8002344:	2200      	movs	r2, #0
 8002346:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002348:	4b10      	ldr	r3, [pc, #64]	@ (800238c <MX_SPI2_Init+0xa4>)
 800234a:	2200      	movs	r2, #0
 800234c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800234e:	4b0f      	ldr	r3, [pc, #60]	@ (800238c <MX_SPI2_Init+0xa4>)
 8002350:	2200      	movs	r2, #0
 8002352:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002354:	4b0d      	ldr	r3, [pc, #52]	@ (800238c <MX_SPI2_Init+0xa4>)
 8002356:	2200      	movs	r2, #0
 8002358:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800235a:	4b0c      	ldr	r3, [pc, #48]	@ (800238c <MX_SPI2_Init+0xa4>)
 800235c:	2200      	movs	r2, #0
 800235e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002360:	4b0a      	ldr	r3, [pc, #40]	@ (800238c <MX_SPI2_Init+0xa4>)
 8002362:	2200      	movs	r2, #0
 8002364:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002366:	4b09      	ldr	r3, [pc, #36]	@ (800238c <MX_SPI2_Init+0xa4>)
 8002368:	2200      	movs	r2, #0
 800236a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800236c:	4b07      	ldr	r3, [pc, #28]	@ (800238c <MX_SPI2_Init+0xa4>)
 800236e:	2200      	movs	r2, #0
 8002370:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002372:	4b06      	ldr	r3, [pc, #24]	@ (800238c <MX_SPI2_Init+0xa4>)
 8002374:	2200      	movs	r2, #0
 8002376:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002378:	4804      	ldr	r0, [pc, #16]	@ (800238c <MX_SPI2_Init+0xa4>)
 800237a:	f007 fd01 	bl	8009d80 <HAL_SPI_Init>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8002384:	f7ff ff54 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002388:	bf00      	nop
 800238a:	bd80      	pop	{r7, pc}
 800238c:	24002368 	.word	0x24002368
 8002390:	40003800 	.word	0x40003800

08002394 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8002398:	4b27      	ldr	r3, [pc, #156]	@ (8002438 <MX_SPI3_Init+0xa4>)
 800239a:	4a28      	ldr	r2, [pc, #160]	@ (800243c <MX_SPI3_Init+0xa8>)
 800239c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800239e:	4b26      	ldr	r3, [pc, #152]	@ (8002438 <MX_SPI3_Init+0xa4>)
 80023a0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80023a4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80023a6:	4b24      	ldr	r3, [pc, #144]	@ (8002438 <MX_SPI3_Init+0xa4>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80023ac:	4b22      	ldr	r3, [pc, #136]	@ (8002438 <MX_SPI3_Init+0xa4>)
 80023ae:	2207      	movs	r2, #7
 80023b0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023b2:	4b21      	ldr	r3, [pc, #132]	@ (8002438 <MX_SPI3_Init+0xa4>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002438 <MX_SPI3_Init+0xa4>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80023be:	4b1e      	ldr	r3, [pc, #120]	@ (8002438 <MX_SPI3_Init+0xa4>)
 80023c0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80023c4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80023c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002438 <MX_SPI3_Init+0xa4>)
 80023c8:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 80023cc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002438 <MX_SPI3_Init+0xa4>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80023d4:	4b18      	ldr	r3, [pc, #96]	@ (8002438 <MX_SPI3_Init+0xa4>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023da:	4b17      	ldr	r3, [pc, #92]	@ (8002438 <MX_SPI3_Init+0xa4>)
 80023dc:	2200      	movs	r2, #0
 80023de:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80023e0:	4b15      	ldr	r3, [pc, #84]	@ (8002438 <MX_SPI3_Init+0xa4>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80023e6:	4b14      	ldr	r3, [pc, #80]	@ (8002438 <MX_SPI3_Init+0xa4>)
 80023e8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80023ec:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80023ee:	4b12      	ldr	r3, [pc, #72]	@ (8002438 <MX_SPI3_Init+0xa4>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80023f4:	4b10      	ldr	r3, [pc, #64]	@ (8002438 <MX_SPI3_Init+0xa4>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80023fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002438 <MX_SPI3_Init+0xa4>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002400:	4b0d      	ldr	r3, [pc, #52]	@ (8002438 <MX_SPI3_Init+0xa4>)
 8002402:	2200      	movs	r2, #0
 8002404:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002406:	4b0c      	ldr	r3, [pc, #48]	@ (8002438 <MX_SPI3_Init+0xa4>)
 8002408:	2200      	movs	r2, #0
 800240a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800240c:	4b0a      	ldr	r3, [pc, #40]	@ (8002438 <MX_SPI3_Init+0xa4>)
 800240e:	2200      	movs	r2, #0
 8002410:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002412:	4b09      	ldr	r3, [pc, #36]	@ (8002438 <MX_SPI3_Init+0xa4>)
 8002414:	2200      	movs	r2, #0
 8002416:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002418:	4b07      	ldr	r3, [pc, #28]	@ (8002438 <MX_SPI3_Init+0xa4>)
 800241a:	2200      	movs	r2, #0
 800241c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800241e:	4b06      	ldr	r3, [pc, #24]	@ (8002438 <MX_SPI3_Init+0xa4>)
 8002420:	2200      	movs	r2, #0
 8002422:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002424:	4804      	ldr	r0, [pc, #16]	@ (8002438 <MX_SPI3_Init+0xa4>)
 8002426:	f007 fcab 	bl	8009d80 <HAL_SPI_Init>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8002430:	f7ff fefe 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002434:	bf00      	nop
 8002436:	bd80      	pop	{r7, pc}
 8002438:	240023f0 	.word	0x240023f0
 800243c:	40003c00 	.word	0x40003c00

08002440 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b0be      	sub	sp, #248	@ 0xf8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002448:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	60da      	str	r2, [r3, #12]
 8002456:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002458:	f107 0320 	add.w	r3, r7, #32
 800245c:	22c0      	movs	r2, #192	@ 0xc0
 800245e:	2100      	movs	r1, #0
 8002460:	4618      	mov	r0, r3
 8002462:	f010 f8e7 	bl	8012634 <memset>
  if(spiHandle->Instance==SPI1)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a73      	ldr	r2, [pc, #460]	@ (8002638 <HAL_SPI_MspInit+0x1f8>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d146      	bne.n	80024fe <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002470:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002474:	f04f 0300 	mov.w	r3, #0
 8002478:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800247c:	2300      	movs	r3, #0
 800247e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002482:	f107 0320 	add.w	r3, r7, #32
 8002486:	4618      	mov	r0, r3
 8002488:	f005 fe9a 	bl	80081c0 <HAL_RCCEx_PeriphCLKConfig>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8002492:	f7ff fecd 	bl	8002230 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002496:	4b69      	ldr	r3, [pc, #420]	@ (800263c <HAL_SPI_MspInit+0x1fc>)
 8002498:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800249c:	4a67      	ldr	r2, [pc, #412]	@ (800263c <HAL_SPI_MspInit+0x1fc>)
 800249e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80024a2:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80024a6:	4b65      	ldr	r3, [pc, #404]	@ (800263c <HAL_SPI_MspInit+0x1fc>)
 80024a8:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80024ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024b0:	61fb      	str	r3, [r7, #28]
 80024b2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b4:	4b61      	ldr	r3, [pc, #388]	@ (800263c <HAL_SPI_MspInit+0x1fc>)
 80024b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80024ba:	4a60      	ldr	r2, [pc, #384]	@ (800263c <HAL_SPI_MspInit+0x1fc>)
 80024bc:	f043 0301 	orr.w	r3, r3, #1
 80024c0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80024c4:	4b5d      	ldr	r3, [pc, #372]	@ (800263c <HAL_SPI_MspInit+0x1fc>)
 80024c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	61bb      	str	r3, [r7, #24]
 80024d0:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 80024d2:	23e0      	movs	r3, #224	@ 0xe0
 80024d4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d8:	2302      	movs	r3, #2
 80024da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024de:	2300      	movs	r3, #0
 80024e0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e4:	2300      	movs	r3, #0
 80024e6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024ea:	2305      	movs	r3, #5
 80024ec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80024f4:	4619      	mov	r1, r3
 80024f6:	4852      	ldr	r0, [pc, #328]	@ (8002640 <HAL_SPI_MspInit+0x200>)
 80024f8:	f004 fb6c 	bl	8006bd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80024fc:	e098      	b.n	8002630 <HAL_SPI_MspInit+0x1f0>
  else if(spiHandle->Instance==SPI2)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a50      	ldr	r2, [pc, #320]	@ (8002644 <HAL_SPI_MspInit+0x204>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d147      	bne.n	8002598 <HAL_SPI_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002508:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800250c:	f04f 0300 	mov.w	r3, #0
 8002510:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002514:	2300      	movs	r3, #0
 8002516:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800251a:	f107 0320 	add.w	r3, r7, #32
 800251e:	4618      	mov	r0, r3
 8002520:	f005 fe4e 	bl	80081c0 <HAL_RCCEx_PeriphCLKConfig>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <HAL_SPI_MspInit+0xee>
      Error_Handler();
 800252a:	f7ff fe81 	bl	8002230 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800252e:	4b43      	ldr	r3, [pc, #268]	@ (800263c <HAL_SPI_MspInit+0x1fc>)
 8002530:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002534:	4a41      	ldr	r2, [pc, #260]	@ (800263c <HAL_SPI_MspInit+0x1fc>)
 8002536:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800253a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800253e:	4b3f      	ldr	r3, [pc, #252]	@ (800263c <HAL_SPI_MspInit+0x1fc>)
 8002540:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002544:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002548:	617b      	str	r3, [r7, #20]
 800254a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800254c:	4b3b      	ldr	r3, [pc, #236]	@ (800263c <HAL_SPI_MspInit+0x1fc>)
 800254e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002552:	4a3a      	ldr	r2, [pc, #232]	@ (800263c <HAL_SPI_MspInit+0x1fc>)
 8002554:	f043 0302 	orr.w	r3, r3, #2
 8002558:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800255c:	4b37      	ldr	r3, [pc, #220]	@ (800263c <HAL_SPI_MspInit+0x1fc>)
 800255e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	613b      	str	r3, [r7, #16]
 8002568:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BMP_SCK_Pin|BMP_MISO_Pin|BMP_MOSI_Pin;
 800256a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800256e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002572:	2302      	movs	r3, #2
 8002574:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	2300      	movs	r3, #0
 800257a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257e:	2300      	movs	r3, #0
 8002580:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002584:	2305      	movs	r3, #5
 8002586:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800258a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800258e:	4619      	mov	r1, r3
 8002590:	482d      	ldr	r0, [pc, #180]	@ (8002648 <HAL_SPI_MspInit+0x208>)
 8002592:	f004 fb1f 	bl	8006bd4 <HAL_GPIO_Init>
}
 8002596:	e04b      	b.n	8002630 <HAL_SPI_MspInit+0x1f0>
  else if(spiHandle->Instance==SPI3)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a2b      	ldr	r2, [pc, #172]	@ (800264c <HAL_SPI_MspInit+0x20c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d146      	bne.n	8002630 <HAL_SPI_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80025a2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80025a6:	f04f 0300 	mov.w	r3, #0
 80025aa:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025b4:	f107 0320 	add.w	r3, r7, #32
 80025b8:	4618      	mov	r0, r3
 80025ba:	f005 fe01 	bl	80081c0 <HAL_RCCEx_PeriphCLKConfig>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <HAL_SPI_MspInit+0x188>
      Error_Handler();
 80025c4:	f7ff fe34 	bl	8002230 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80025c8:	4b1c      	ldr	r3, [pc, #112]	@ (800263c <HAL_SPI_MspInit+0x1fc>)
 80025ca:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80025ce:	4a1b      	ldr	r2, [pc, #108]	@ (800263c <HAL_SPI_MspInit+0x1fc>)
 80025d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025d4:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80025d8:	4b18      	ldr	r3, [pc, #96]	@ (800263c <HAL_SPI_MspInit+0x1fc>)
 80025da:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80025de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025e6:	4b15      	ldr	r3, [pc, #84]	@ (800263c <HAL_SPI_MspInit+0x1fc>)
 80025e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80025ec:	4a13      	ldr	r2, [pc, #76]	@ (800263c <HAL_SPI_MspInit+0x1fc>)
 80025ee:	f043 0304 	orr.w	r3, r3, #4
 80025f2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80025f6:	4b11      	ldr	r3, [pc, #68]	@ (800263c <HAL_SPI_MspInit+0x1fc>)
 80025f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	60bb      	str	r3, [r7, #8]
 8002602:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IMU_SCK_Pin|IMU_MISO_Pin|IMU_MOSI_Pin;
 8002604:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002608:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260c:	2302      	movs	r3, #2
 800260e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002612:	2300      	movs	r3, #0
 8002614:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002618:	2300      	movs	r3, #0
 800261a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800261e:	2306      	movs	r3, #6
 8002620:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002624:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002628:	4619      	mov	r1, r3
 800262a:	4809      	ldr	r0, [pc, #36]	@ (8002650 <HAL_SPI_MspInit+0x210>)
 800262c:	f004 fad2 	bl	8006bd4 <HAL_GPIO_Init>
}
 8002630:	bf00      	nop
 8002632:	37f8      	adds	r7, #248	@ 0xf8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40013000 	.word	0x40013000
 800263c:	58024400 	.word	0x58024400
 8002640:	58020000 	.word	0x58020000
 8002644:	40003800 	.word	0x40003800
 8002648:	58020400 	.word	0x58020400
 800264c:	40003c00 	.word	0x40003c00
 8002650:	58020800 	.word	0x58020800

08002654 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800265a:	4b0a      	ldr	r3, [pc, #40]	@ (8002684 <HAL_MspInit+0x30>)
 800265c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002660:	4a08      	ldr	r2, [pc, #32]	@ (8002684 <HAL_MspInit+0x30>)
 8002662:	f043 0302 	orr.w	r3, r3, #2
 8002666:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800266a:	4b06      	ldr	r3, [pc, #24]	@ (8002684 <HAL_MspInit+0x30>)
 800266c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	607b      	str	r3, [r7, #4]
 8002676:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	58024400 	.word	0x58024400

08002688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800268c:	bf00      	nop
 800268e:	e7fd      	b.n	800268c <NMI_Handler+0x4>

08002690 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002694:	bf00      	nop
 8002696:	e7fd      	b.n	8002694 <HardFault_Handler+0x4>

08002698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800269c:	bf00      	nop
 800269e:	e7fd      	b.n	800269c <MemManage_Handler+0x4>

080026a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026a4:	bf00      	nop
 80026a6:	e7fd      	b.n	80026a4 <BusFault_Handler+0x4>

080026a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026ac:	bf00      	nop
 80026ae:	e7fd      	b.n	80026ac <UsageFault_Handler+0x4>

080026b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026b4:	bf00      	nop
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026be:	b480      	push	{r7}
 80026c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026c2:	bf00      	nop
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026d0:	bf00      	nop
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
	...

080026dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  if(Timer1 > 0)
 80026e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002710 <SysTick_Handler+0x34>)
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d005      	beq.n	80026f4 <SysTick_Handler+0x18>
	    Timer1--;
 80026e8:	4b09      	ldr	r3, [pc, #36]	@ (8002710 <SysTick_Handler+0x34>)
 80026ea:	881b      	ldrh	r3, [r3, #0]
 80026ec:	3b01      	subs	r3, #1
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	4b07      	ldr	r3, [pc, #28]	@ (8002710 <SysTick_Handler+0x34>)
 80026f2:	801a      	strh	r2, [r3, #0]
	  if(Timer2 > 0)
 80026f4:	4b07      	ldr	r3, [pc, #28]	@ (8002714 <SysTick_Handler+0x38>)
 80026f6:	881b      	ldrh	r3, [r3, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d005      	beq.n	8002708 <SysTick_Handler+0x2c>
	    Timer2--;
 80026fc:	4b05      	ldr	r3, [pc, #20]	@ (8002714 <SysTick_Handler+0x38>)
 80026fe:	881b      	ldrh	r3, [r3, #0]
 8002700:	3b01      	subs	r3, #1
 8002702:	b29a      	uxth	r2, r3
 8002704:	4b03      	ldr	r3, [pc, #12]	@ (8002714 <SysTick_Handler+0x38>)
 8002706:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002708:	f000 fe56 	bl	80033b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800270c:	bf00      	nop
 800270e:	bd80      	pop	{r7, pc}
 8002710:	24002834 	.word	0x24002834
 8002714:	24002836 	.word	0x24002836

08002718 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800271c:	4802      	ldr	r0, [pc, #8]	@ (8002728 <DMA1_Stream0_IRQHandler+0x10>)
 800271e:	f002 fb73 	bl	8004e08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002722:	bf00      	nop
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	240027b0 	.word	0x240027b0

0800272c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002730:	4802      	ldr	r0, [pc, #8]	@ (800273c <USART1_IRQHandler+0x10>)
 8002732:	f009 fe2f 	bl	800c394 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	24002688 	.word	0x24002688

08002740 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002744:	4802      	ldr	r0, [pc, #8]	@ (8002750 <TIM6_DAC_IRQHandler+0x10>)
 8002746:	f008 fef7 	bl	800b538 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	2400255c 	.word	0x2400255c

08002754 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002758:	4b32      	ldr	r3, [pc, #200]	@ (8002824 <SystemInit+0xd0>)
 800275a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800275e:	4a31      	ldr	r2, [pc, #196]	@ (8002824 <SystemInit+0xd0>)
 8002760:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002764:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002768:	4b2f      	ldr	r3, [pc, #188]	@ (8002828 <SystemInit+0xd4>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 030f 	and.w	r3, r3, #15
 8002770:	2b02      	cmp	r3, #2
 8002772:	d807      	bhi.n	8002784 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002774:	4b2c      	ldr	r3, [pc, #176]	@ (8002828 <SystemInit+0xd4>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f023 030f 	bic.w	r3, r3, #15
 800277c:	4a2a      	ldr	r2, [pc, #168]	@ (8002828 <SystemInit+0xd4>)
 800277e:	f043 0303 	orr.w	r3, r3, #3
 8002782:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002784:	4b29      	ldr	r3, [pc, #164]	@ (800282c <SystemInit+0xd8>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a28      	ldr	r2, [pc, #160]	@ (800282c <SystemInit+0xd8>)
 800278a:	f043 0301 	orr.w	r3, r3, #1
 800278e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002790:	4b26      	ldr	r3, [pc, #152]	@ (800282c <SystemInit+0xd8>)
 8002792:	2200      	movs	r2, #0
 8002794:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002796:	4b25      	ldr	r3, [pc, #148]	@ (800282c <SystemInit+0xd8>)
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	4924      	ldr	r1, [pc, #144]	@ (800282c <SystemInit+0xd8>)
 800279c:	4b24      	ldr	r3, [pc, #144]	@ (8002830 <SystemInit+0xdc>)
 800279e:	4013      	ands	r3, r2
 80027a0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80027a2:	4b21      	ldr	r3, [pc, #132]	@ (8002828 <SystemInit+0xd4>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 030c 	and.w	r3, r3, #12
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d007      	beq.n	80027be <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80027ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002828 <SystemInit+0xd4>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f023 030f 	bic.w	r3, r3, #15
 80027b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002828 <SystemInit+0xd4>)
 80027b8:	f043 0303 	orr.w	r3, r3, #3
 80027bc:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80027be:	4b1b      	ldr	r3, [pc, #108]	@ (800282c <SystemInit+0xd8>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80027c4:	4b19      	ldr	r3, [pc, #100]	@ (800282c <SystemInit+0xd8>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80027ca:	4b18      	ldr	r3, [pc, #96]	@ (800282c <SystemInit+0xd8>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80027d0:	4b16      	ldr	r3, [pc, #88]	@ (800282c <SystemInit+0xd8>)
 80027d2:	4a18      	ldr	r2, [pc, #96]	@ (8002834 <SystemInit+0xe0>)
 80027d4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80027d6:	4b15      	ldr	r3, [pc, #84]	@ (800282c <SystemInit+0xd8>)
 80027d8:	4a17      	ldr	r2, [pc, #92]	@ (8002838 <SystemInit+0xe4>)
 80027da:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80027dc:	4b13      	ldr	r3, [pc, #76]	@ (800282c <SystemInit+0xd8>)
 80027de:	4a17      	ldr	r2, [pc, #92]	@ (800283c <SystemInit+0xe8>)
 80027e0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80027e2:	4b12      	ldr	r3, [pc, #72]	@ (800282c <SystemInit+0xd8>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80027e8:	4b10      	ldr	r3, [pc, #64]	@ (800282c <SystemInit+0xd8>)
 80027ea:	4a14      	ldr	r2, [pc, #80]	@ (800283c <SystemInit+0xe8>)
 80027ec:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80027ee:	4b0f      	ldr	r3, [pc, #60]	@ (800282c <SystemInit+0xd8>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80027f4:	4b0d      	ldr	r3, [pc, #52]	@ (800282c <SystemInit+0xd8>)
 80027f6:	4a11      	ldr	r2, [pc, #68]	@ (800283c <SystemInit+0xe8>)
 80027f8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80027fa:	4b0c      	ldr	r3, [pc, #48]	@ (800282c <SystemInit+0xd8>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002800:	4b0a      	ldr	r3, [pc, #40]	@ (800282c <SystemInit+0xd8>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a09      	ldr	r2, [pc, #36]	@ (800282c <SystemInit+0xd8>)
 8002806:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800280a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800280c:	4b07      	ldr	r3, [pc, #28]	@ (800282c <SystemInit+0xd8>)
 800280e:	2200      	movs	r2, #0
 8002810:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002812:	4b0b      	ldr	r3, [pc, #44]	@ (8002840 <SystemInit+0xec>)
 8002814:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002818:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800281a:	bf00      	nop
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	e000ed00 	.word	0xe000ed00
 8002828:	52002000 	.word	0x52002000
 800282c:	58024400 	.word	0x58024400
 8002830:	eaf6ed7f 	.word	0xeaf6ed7f
 8002834:	02020200 	.word	0x02020200
 8002838:	01ff0000 	.word	0x01ff0000
 800283c:	01010280 	.word	0x01010280
 8002840:	52004000 	.word	0x52004000

08002844 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b08a      	sub	sp, #40	@ 0x28
 8002848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800284a:	f107 031c 	add.w	r3, r7, #28
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	605a      	str	r2, [r3, #4]
 8002854:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002856:	463b      	mov	r3, r7
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	609a      	str	r2, [r3, #8]
 8002860:	60da      	str	r2, [r3, #12]
 8002862:	611a      	str	r2, [r3, #16]
 8002864:	615a      	str	r2, [r3, #20]
 8002866:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002868:	4b33      	ldr	r3, [pc, #204]	@ (8002938 <MX_TIM2_Init+0xf4>)
 800286a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800286e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 280-1;
 8002870:	4b31      	ldr	r3, [pc, #196]	@ (8002938 <MX_TIM2_Init+0xf4>)
 8002872:	f240 1217 	movw	r2, #279	@ 0x117
 8002876:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002878:	4b2f      	ldr	r3, [pc, #188]	@ (8002938 <MX_TIM2_Init+0xf4>)
 800287a:	2200      	movs	r2, #0
 800287c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7000;
 800287e:	4b2e      	ldr	r3, [pc, #184]	@ (8002938 <MX_TIM2_Init+0xf4>)
 8002880:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8002884:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002886:	4b2c      	ldr	r3, [pc, #176]	@ (8002938 <MX_TIM2_Init+0xf4>)
 8002888:	2200      	movs	r2, #0
 800288a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800288c:	4b2a      	ldr	r3, [pc, #168]	@ (8002938 <MX_TIM2_Init+0xf4>)
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002892:	4829      	ldr	r0, [pc, #164]	@ (8002938 <MX_TIM2_Init+0xf4>)
 8002894:	f008 fcea 	bl	800b26c <HAL_TIM_PWM_Init>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 800289e:	f7ff fcc7 	bl	8002230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028a2:	2300      	movs	r3, #0
 80028a4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028a6:	2300      	movs	r3, #0
 80028a8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028aa:	f107 031c 	add.w	r3, r7, #28
 80028ae:	4619      	mov	r1, r3
 80028b0:	4821      	ldr	r0, [pc, #132]	@ (8002938 <MX_TIM2_Init+0xf4>)
 80028b2:	f009 fc27 	bl	800c104 <HAL_TIMEx_MasterConfigSynchronization>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80028bc:	f7ff fcb8 	bl	8002230 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028c0:	2360      	movs	r3, #96	@ 0x60
 80028c2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80028c4:	2300      	movs	r3, #0
 80028c6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028c8:	2300      	movs	r3, #0
 80028ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028cc:	2300      	movs	r3, #0
 80028ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028d0:	463b      	mov	r3, r7
 80028d2:	2200      	movs	r2, #0
 80028d4:	4619      	mov	r1, r3
 80028d6:	4818      	ldr	r0, [pc, #96]	@ (8002938 <MX_TIM2_Init+0xf4>)
 80028d8:	f008 ff36 	bl	800b748 <HAL_TIM_PWM_ConfigChannel>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80028e2:	f7ff fca5 	bl	8002230 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028e6:	463b      	mov	r3, r7
 80028e8:	2204      	movs	r2, #4
 80028ea:	4619      	mov	r1, r3
 80028ec:	4812      	ldr	r0, [pc, #72]	@ (8002938 <MX_TIM2_Init+0xf4>)
 80028ee:	f008 ff2b 	bl	800b748 <HAL_TIM_PWM_ConfigChannel>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 80028f8:	f7ff fc9a 	bl	8002230 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80028fc:	463b      	mov	r3, r7
 80028fe:	2208      	movs	r2, #8
 8002900:	4619      	mov	r1, r3
 8002902:	480d      	ldr	r0, [pc, #52]	@ (8002938 <MX_TIM2_Init+0xf4>)
 8002904:	f008 ff20 	bl	800b748 <HAL_TIM_PWM_ConfigChannel>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 800290e:	f7ff fc8f 	bl	8002230 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002912:	463b      	mov	r3, r7
 8002914:	220c      	movs	r2, #12
 8002916:	4619      	mov	r1, r3
 8002918:	4807      	ldr	r0, [pc, #28]	@ (8002938 <MX_TIM2_Init+0xf4>)
 800291a:	f008 ff15 	bl	800b748 <HAL_TIM_PWM_ConfigChannel>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 8002924:	f7ff fc84 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002928:	4803      	ldr	r0, [pc, #12]	@ (8002938 <MX_TIM2_Init+0xf4>)
 800292a:	f000 f9d5 	bl	8002cd8 <HAL_TIM_MspPostInit>

}
 800292e:	bf00      	nop
 8002930:	3728      	adds	r7, #40	@ 0x28
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	24002478 	.word	0x24002478

0800293c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b08a      	sub	sp, #40	@ 0x28
 8002940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002942:	f107 031c 	add.w	r3, r7, #28
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	605a      	str	r2, [r3, #4]
 800294c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800294e:	463b      	mov	r3, r7
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	611a      	str	r2, [r3, #16]
 800295c:	615a      	str	r2, [r3, #20]
 800295e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002960:	4b27      	ldr	r3, [pc, #156]	@ (8002a00 <MX_TIM3_Init+0xc4>)
 8002962:	4a28      	ldr	r2, [pc, #160]	@ (8002a04 <MX_TIM3_Init+0xc8>)
 8002964:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 280-1;
 8002966:	4b26      	ldr	r3, [pc, #152]	@ (8002a00 <MX_TIM3_Init+0xc4>)
 8002968:	f240 1217 	movw	r2, #279	@ 0x117
 800296c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800296e:	4b24      	ldr	r3, [pc, #144]	@ (8002a00 <MX_TIM3_Init+0xc4>)
 8002970:	2200      	movs	r2, #0
 8002972:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7000;
 8002974:	4b22      	ldr	r3, [pc, #136]	@ (8002a00 <MX_TIM3_Init+0xc4>)
 8002976:	f641 3258 	movw	r2, #7000	@ 0x1b58
 800297a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800297c:	4b20      	ldr	r3, [pc, #128]	@ (8002a00 <MX_TIM3_Init+0xc4>)
 800297e:	2200      	movs	r2, #0
 8002980:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002982:	4b1f      	ldr	r3, [pc, #124]	@ (8002a00 <MX_TIM3_Init+0xc4>)
 8002984:	2280      	movs	r2, #128	@ 0x80
 8002986:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002988:	481d      	ldr	r0, [pc, #116]	@ (8002a00 <MX_TIM3_Init+0xc4>)
 800298a:	f008 fc6f 	bl	800b26c <HAL_TIM_PWM_Init>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8002994:	f7ff fc4c 	bl	8002230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002998:	2300      	movs	r3, #0
 800299a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800299c:	2300      	movs	r3, #0
 800299e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029a0:	f107 031c 	add.w	r3, r7, #28
 80029a4:	4619      	mov	r1, r3
 80029a6:	4816      	ldr	r0, [pc, #88]	@ (8002a00 <MX_TIM3_Init+0xc4>)
 80029a8:	f009 fbac 	bl	800c104 <HAL_TIMEx_MasterConfigSynchronization>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80029b2:	f7ff fc3d 	bl	8002230 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029b6:	2360      	movs	r3, #96	@ 0x60
 80029b8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80029ba:	2300      	movs	r3, #0
 80029bc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029be:	2300      	movs	r3, #0
 80029c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029c2:	2300      	movs	r3, #0
 80029c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029c6:	463b      	mov	r3, r7
 80029c8:	2200      	movs	r2, #0
 80029ca:	4619      	mov	r1, r3
 80029cc:	480c      	ldr	r0, [pc, #48]	@ (8002a00 <MX_TIM3_Init+0xc4>)
 80029ce:	f008 febb 	bl	800b748 <HAL_TIM_PWM_ConfigChannel>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 80029d8:	f7ff fc2a 	bl	8002230 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80029dc:	463b      	mov	r3, r7
 80029de:	2204      	movs	r2, #4
 80029e0:	4619      	mov	r1, r3
 80029e2:	4807      	ldr	r0, [pc, #28]	@ (8002a00 <MX_TIM3_Init+0xc4>)
 80029e4:	f008 feb0 	bl	800b748 <HAL_TIM_PWM_ConfigChannel>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 80029ee:	f7ff fc1f 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80029f2:	4803      	ldr	r0, [pc, #12]	@ (8002a00 <MX_TIM3_Init+0xc4>)
 80029f4:	f000 f970 	bl	8002cd8 <HAL_TIM_MspPostInit>

}
 80029f8:	bf00      	nop
 80029fa:	3728      	adds	r7, #40	@ 0x28
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	240024c4 	.word	0x240024c4
 8002a04:	40000400 	.word	0x40000400

08002a08 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b08a      	sub	sp, #40	@ 0x28
 8002a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a0e:	f107 031c 	add.w	r3, r7, #28
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	605a      	str	r2, [r3, #4]
 8002a18:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a1a:	463b      	mov	r3, r7
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	605a      	str	r2, [r3, #4]
 8002a22:	609a      	str	r2, [r3, #8]
 8002a24:	60da      	str	r2, [r3, #12]
 8002a26:	611a      	str	r2, [r3, #16]
 8002a28:	615a      	str	r2, [r3, #20]
 8002a2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002a2c:	4b32      	ldr	r3, [pc, #200]	@ (8002af8 <MX_TIM4_Init+0xf0>)
 8002a2e:	4a33      	ldr	r2, [pc, #204]	@ (8002afc <MX_TIM4_Init+0xf4>)
 8002a30:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 280-1;
 8002a32:	4b31      	ldr	r3, [pc, #196]	@ (8002af8 <MX_TIM4_Init+0xf0>)
 8002a34:	f240 1217 	movw	r2, #279	@ 0x117
 8002a38:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a3a:	4b2f      	ldr	r3, [pc, #188]	@ (8002af8 <MX_TIM4_Init+0xf0>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7000;
 8002a40:	4b2d      	ldr	r3, [pc, #180]	@ (8002af8 <MX_TIM4_Init+0xf0>)
 8002a42:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8002a46:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a48:	4b2b      	ldr	r3, [pc, #172]	@ (8002af8 <MX_TIM4_Init+0xf0>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a4e:	4b2a      	ldr	r3, [pc, #168]	@ (8002af8 <MX_TIM4_Init+0xf0>)
 8002a50:	2280      	movs	r2, #128	@ 0x80
 8002a52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002a54:	4828      	ldr	r0, [pc, #160]	@ (8002af8 <MX_TIM4_Init+0xf0>)
 8002a56:	f008 fc09 	bl	800b26c <HAL_TIM_PWM_Init>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8002a60:	f7ff fbe6 	bl	8002230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a64:	2300      	movs	r3, #0
 8002a66:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002a6c:	f107 031c 	add.w	r3, r7, #28
 8002a70:	4619      	mov	r1, r3
 8002a72:	4821      	ldr	r0, [pc, #132]	@ (8002af8 <MX_TIM4_Init+0xf0>)
 8002a74:	f009 fb46 	bl	800c104 <HAL_TIMEx_MasterConfigSynchronization>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8002a7e:	f7ff fbd7 	bl	8002230 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a82:	2360      	movs	r3, #96	@ 0x60
 8002a84:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002a86:	2300      	movs	r3, #0
 8002a88:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a92:	463b      	mov	r3, r7
 8002a94:	2200      	movs	r2, #0
 8002a96:	4619      	mov	r1, r3
 8002a98:	4817      	ldr	r0, [pc, #92]	@ (8002af8 <MX_TIM4_Init+0xf0>)
 8002a9a:	f008 fe55 	bl	800b748 <HAL_TIM_PWM_ConfigChannel>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8002aa4:	f7ff fbc4 	bl	8002230 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002aa8:	463b      	mov	r3, r7
 8002aaa:	2204      	movs	r2, #4
 8002aac:	4619      	mov	r1, r3
 8002aae:	4812      	ldr	r0, [pc, #72]	@ (8002af8 <MX_TIM4_Init+0xf0>)
 8002ab0:	f008 fe4a 	bl	800b748 <HAL_TIM_PWM_ConfigChannel>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8002aba:	f7ff fbb9 	bl	8002230 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002abe:	463b      	mov	r3, r7
 8002ac0:	2208      	movs	r2, #8
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	480c      	ldr	r0, [pc, #48]	@ (8002af8 <MX_TIM4_Init+0xf0>)
 8002ac6:	f008 fe3f 	bl	800b748 <HAL_TIM_PWM_ConfigChannel>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8002ad0:	f7ff fbae 	bl	8002230 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002ad4:	463b      	mov	r3, r7
 8002ad6:	220c      	movs	r2, #12
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4807      	ldr	r0, [pc, #28]	@ (8002af8 <MX_TIM4_Init+0xf0>)
 8002adc:	f008 fe34 	bl	800b748 <HAL_TIM_PWM_ConfigChannel>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 8002ae6:	f7ff fba3 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002aea:	4803      	ldr	r0, [pc, #12]	@ (8002af8 <MX_TIM4_Init+0xf0>)
 8002aec:	f000 f8f4 	bl	8002cd8 <HAL_TIM_MspPostInit>

}
 8002af0:	bf00      	nop
 8002af2:	3728      	adds	r7, #40	@ 0x28
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	24002510 	.word	0x24002510
 8002afc:	40000800 	.word	0x40000800

08002b00 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b06:	1d3b      	adds	r3, r7, #4
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	605a      	str	r2, [r3, #4]
 8002b0e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002b10:	4b16      	ldr	r3, [pc, #88]	@ (8002b6c <MX_TIM6_Init+0x6c>)
 8002b12:	4a17      	ldr	r2, [pc, #92]	@ (8002b70 <MX_TIM6_Init+0x70>)
 8002b14:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 999;
 8002b16:	4b15      	ldr	r3, [pc, #84]	@ (8002b6c <MX_TIM6_Init+0x6c>)
 8002b18:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002b1c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b1e:	4b13      	ldr	r3, [pc, #76]	@ (8002b6c <MX_TIM6_Init+0x6c>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 279;
 8002b24:	4b11      	ldr	r3, [pc, #68]	@ (8002b6c <MX_TIM6_Init+0x6c>)
 8002b26:	f240 1217 	movw	r2, #279	@ 0x117
 8002b2a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8002b6c <MX_TIM6_Init+0x6c>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002b32:	480e      	ldr	r0, [pc, #56]	@ (8002b6c <MX_TIM6_Init+0x6c>)
 8002b34:	f008 facb 	bl	800b0ce <HAL_TIM_Base_Init>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002b3e:	f7ff fb77 	bl	8002230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b42:	2300      	movs	r3, #0
 8002b44:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b46:	2300      	movs	r3, #0
 8002b48:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002b4a:	1d3b      	adds	r3, r7, #4
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	4807      	ldr	r0, [pc, #28]	@ (8002b6c <MX_TIM6_Init+0x6c>)
 8002b50:	f009 fad8 	bl	800c104 <HAL_TIMEx_MasterConfigSynchronization>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002b5a:	f7ff fb69 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8002b5e:	4803      	ldr	r0, [pc, #12]	@ (8002b6c <MX_TIM6_Init+0x6c>)
 8002b60:	f008 fb0c 	bl	800b17c <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM6_Init 2 */

}
 8002b64:	bf00      	nop
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	2400255c 	.word	0x2400255c
 8002b70:	40001000 	.word	0x40001000

08002b74 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002b78:	4b0e      	ldr	r3, [pc, #56]	@ (8002bb4 <MX_TIM13_Init+0x40>)
 8002b7a:	4a0f      	ldr	r2, [pc, #60]	@ (8002bb8 <MX_TIM13_Init+0x44>)
 8002b7c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 280-1;
 8002b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002bb4 <MX_TIM13_Init+0x40>)
 8002b80:	f240 1217 	movw	r2, #279	@ 0x117
 8002b84:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b86:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb4 <MX_TIM13_Init+0x40>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8002b8c:	4b09      	ldr	r3, [pc, #36]	@ (8002bb4 <MX_TIM13_Init+0x40>)
 8002b8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b92:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b94:	4b07      	ldr	r3, [pc, #28]	@ (8002bb4 <MX_TIM13_Init+0x40>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b9a:	4b06      	ldr	r3, [pc, #24]	@ (8002bb4 <MX_TIM13_Init+0x40>)
 8002b9c:	2280      	movs	r2, #128	@ 0x80
 8002b9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002ba0:	4804      	ldr	r0, [pc, #16]	@ (8002bb4 <MX_TIM13_Init+0x40>)
 8002ba2:	f008 fa94 	bl	800b0ce <HAL_TIM_Base_Init>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8002bac:	f7ff fb40 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002bb0:	bf00      	nop
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	240025a8 	.word	0x240025a8
 8002bb8:	40001c00 	.word	0x40001c00

08002bbc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b087      	sub	sp, #28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bcc:	d10f      	bne.n	8002bee <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bce:	4b1f      	ldr	r3, [pc, #124]	@ (8002c4c <HAL_TIM_PWM_MspInit+0x90>)
 8002bd0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002bd4:	4a1d      	ldr	r2, [pc, #116]	@ (8002c4c <HAL_TIM_PWM_MspInit+0x90>)
 8002bd6:	f043 0301 	orr.w	r3, r3, #1
 8002bda:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002bde:	4b1b      	ldr	r3, [pc, #108]	@ (8002c4c <HAL_TIM_PWM_MspInit+0x90>)
 8002be0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	617b      	str	r3, [r7, #20]
 8002bea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002bec:	e028      	b.n	8002c40 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM3)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a17      	ldr	r2, [pc, #92]	@ (8002c50 <HAL_TIM_PWM_MspInit+0x94>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d10f      	bne.n	8002c18 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bf8:	4b14      	ldr	r3, [pc, #80]	@ (8002c4c <HAL_TIM_PWM_MspInit+0x90>)
 8002bfa:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002bfe:	4a13      	ldr	r2, [pc, #76]	@ (8002c4c <HAL_TIM_PWM_MspInit+0x90>)
 8002c00:	f043 0302 	orr.w	r3, r3, #2
 8002c04:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002c08:	4b10      	ldr	r3, [pc, #64]	@ (8002c4c <HAL_TIM_PWM_MspInit+0x90>)
 8002c0a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	613b      	str	r3, [r7, #16]
 8002c14:	693b      	ldr	r3, [r7, #16]
}
 8002c16:	e013      	b.n	8002c40 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM4)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a0d      	ldr	r2, [pc, #52]	@ (8002c54 <HAL_TIM_PWM_MspInit+0x98>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d10e      	bne.n	8002c40 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c22:	4b0a      	ldr	r3, [pc, #40]	@ (8002c4c <HAL_TIM_PWM_MspInit+0x90>)
 8002c24:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002c28:	4a08      	ldr	r2, [pc, #32]	@ (8002c4c <HAL_TIM_PWM_MspInit+0x90>)
 8002c2a:	f043 0304 	orr.w	r3, r3, #4
 8002c2e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002c32:	4b06      	ldr	r3, [pc, #24]	@ (8002c4c <HAL_TIM_PWM_MspInit+0x90>)
 8002c34:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	60fb      	str	r3, [r7, #12]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
}
 8002c40:	bf00      	nop
 8002c42:	371c      	adds	r7, #28
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	58024400 	.word	0x58024400
 8002c50:	40000400 	.word	0x40000400
 8002c54:	40000800 	.word	0x40000800

08002c58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a19      	ldr	r2, [pc, #100]	@ (8002ccc <HAL_TIM_Base_MspInit+0x74>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d117      	bne.n	8002c9a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002c6a:	4b19      	ldr	r3, [pc, #100]	@ (8002cd0 <HAL_TIM_Base_MspInit+0x78>)
 8002c6c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002c70:	4a17      	ldr	r2, [pc, #92]	@ (8002cd0 <HAL_TIM_Base_MspInit+0x78>)
 8002c72:	f043 0310 	orr.w	r3, r3, #16
 8002c76:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002c7a:	4b15      	ldr	r3, [pc, #84]	@ (8002cd0 <HAL_TIM_Base_MspInit+0x78>)
 8002c7c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002c80:	f003 0310 	and.w	r3, r3, #16
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002c88:	2200      	movs	r2, #0
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	2036      	movs	r0, #54	@ 0x36
 8002c8e:	f000 fcb2 	bl	80035f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002c92:	2036      	movs	r0, #54	@ 0x36
 8002c94:	f000 fcc9 	bl	800362a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8002c98:	e013      	b.n	8002cc2 <HAL_TIM_Base_MspInit+0x6a>
  else if(tim_baseHandle->Instance==TIM13)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a0d      	ldr	r2, [pc, #52]	@ (8002cd4 <HAL_TIM_Base_MspInit+0x7c>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d10e      	bne.n	8002cc2 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd0 <HAL_TIM_Base_MspInit+0x78>)
 8002ca6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002caa:	4a09      	ldr	r2, [pc, #36]	@ (8002cd0 <HAL_TIM_Base_MspInit+0x78>)
 8002cac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cb0:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002cb4:	4b06      	ldr	r3, [pc, #24]	@ (8002cd0 <HAL_TIM_Base_MspInit+0x78>)
 8002cb6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002cba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cbe:	60bb      	str	r3, [r7, #8]
 8002cc0:	68bb      	ldr	r3, [r7, #8]
}
 8002cc2:	bf00      	nop
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	40001000 	.word	0x40001000
 8002cd0:	58024400 	.word	0x58024400
 8002cd4:	40001c00 	.word	0x40001c00

08002cd8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b08c      	sub	sp, #48	@ 0x30
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce0:	f107 031c 	add.w	r3, r7, #28
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	605a      	str	r2, [r3, #4]
 8002cea:	609a      	str	r2, [r3, #8]
 8002cec:	60da      	str	r2, [r3, #12]
 8002cee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cf8:	d13f      	bne.n	8002d7a <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cfa:	4b47      	ldr	r3, [pc, #284]	@ (8002e18 <HAL_TIM_MspPostInit+0x140>)
 8002cfc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002d00:	4a45      	ldr	r2, [pc, #276]	@ (8002e18 <HAL_TIM_MspPostInit+0x140>)
 8002d02:	f043 0301 	orr.w	r3, r3, #1
 8002d06:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002d0a:	4b43      	ldr	r3, [pc, #268]	@ (8002e18 <HAL_TIM_MspPostInit+0x140>)
 8002d0c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	61bb      	str	r3, [r7, #24]
 8002d16:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d18:	4b3f      	ldr	r3, [pc, #252]	@ (8002e18 <HAL_TIM_MspPostInit+0x140>)
 8002d1a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002d1e:	4a3e      	ldr	r2, [pc, #248]	@ (8002e18 <HAL_TIM_MspPostInit+0x140>)
 8002d20:	f043 0302 	orr.w	r3, r3, #2
 8002d24:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002d28:	4b3b      	ldr	r3, [pc, #236]	@ (8002e18 <HAL_TIM_MspPostInit+0x140>)
 8002d2a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	617b      	str	r3, [r7, #20]
 8002d34:	697b      	ldr	r3, [r7, #20]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 8002d36:	f248 030c 	movw	r3, #32780	@ 0x800c
 8002d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d40:	2300      	movs	r3, #0
 8002d42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d44:	2300      	movs	r3, #0
 8002d46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d4c:	f107 031c 	add.w	r3, r7, #28
 8002d50:	4619      	mov	r1, r3
 8002d52:	4832      	ldr	r0, [pc, #200]	@ (8002e1c <HAL_TIM_MspPostInit+0x144>)
 8002d54:	f003 ff3e 	bl	8006bd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002d58:	2308      	movs	r3, #8
 8002d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d60:	2300      	movs	r3, #0
 8002d62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d64:	2300      	movs	r3, #0
 8002d66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d6c:	f107 031c 	add.w	r3, r7, #28
 8002d70:	4619      	mov	r1, r3
 8002d72:	482b      	ldr	r0, [pc, #172]	@ (8002e20 <HAL_TIM_MspPostInit+0x148>)
 8002d74:	f003 ff2e 	bl	8006bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002d78:	e049      	b.n	8002e0e <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM3)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a29      	ldr	r2, [pc, #164]	@ (8002e24 <HAL_TIM_MspPostInit+0x14c>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d11f      	bne.n	8002dc4 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d84:	4b24      	ldr	r3, [pc, #144]	@ (8002e18 <HAL_TIM_MspPostInit+0x140>)
 8002d86:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002d8a:	4a23      	ldr	r2, [pc, #140]	@ (8002e18 <HAL_TIM_MspPostInit+0x140>)
 8002d8c:	f043 0302 	orr.w	r3, r3, #2
 8002d90:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002d94:	4b20      	ldr	r3, [pc, #128]	@ (8002e18 <HAL_TIM_MspPostInit+0x140>)
 8002d96:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	613b      	str	r3, [r7, #16]
 8002da0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002da2:	2330      	movs	r3, #48	@ 0x30
 8002da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da6:	2302      	movs	r3, #2
 8002da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002daa:	2300      	movs	r3, #0
 8002dac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dae:	2300      	movs	r3, #0
 8002db0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002db2:	2302      	movs	r3, #2
 8002db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002db6:	f107 031c 	add.w	r3, r7, #28
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4818      	ldr	r0, [pc, #96]	@ (8002e20 <HAL_TIM_MspPostInit+0x148>)
 8002dbe:	f003 ff09 	bl	8006bd4 <HAL_GPIO_Init>
}
 8002dc2:	e024      	b.n	8002e0e <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM4)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a17      	ldr	r2, [pc, #92]	@ (8002e28 <HAL_TIM_MspPostInit+0x150>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d11f      	bne.n	8002e0e <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dce:	4b12      	ldr	r3, [pc, #72]	@ (8002e18 <HAL_TIM_MspPostInit+0x140>)
 8002dd0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002dd4:	4a10      	ldr	r2, [pc, #64]	@ (8002e18 <HAL_TIM_MspPostInit+0x140>)
 8002dd6:	f043 0302 	orr.w	r3, r3, #2
 8002dda:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002dde:	4b0e      	ldr	r3, [pc, #56]	@ (8002e18 <HAL_TIM_MspPostInit+0x140>)
 8002de0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	60fb      	str	r3, [r7, #12]
 8002dea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002dec:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df2:	2302      	movs	r3, #2
 8002df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df6:	2300      	movs	r3, #0
 8002df8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002dfe:	2302      	movs	r3, #2
 8002e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e02:	f107 031c 	add.w	r3, r7, #28
 8002e06:	4619      	mov	r1, r3
 8002e08:	4805      	ldr	r0, [pc, #20]	@ (8002e20 <HAL_TIM_MspPostInit+0x148>)
 8002e0a:	f003 fee3 	bl	8006bd4 <HAL_GPIO_Init>
}
 8002e0e:	bf00      	nop
 8002e10:	3730      	adds	r7, #48	@ 0x30
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	58024400 	.word	0x58024400
 8002e1c:	58020000 	.word	0x58020000
 8002e20:	58020400 	.word	0x58020400
 8002e24:	40000400 	.word	0x40000400
 8002e28:	40000800 	.word	0x40000800

08002e2c <MX_UART4_Init>:
UART_HandleTypeDef huart6;
DMA_HandleTypeDef hdma_usart1_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002e30:	4b22      	ldr	r3, [pc, #136]	@ (8002ebc <MX_UART4_Init+0x90>)
 8002e32:	4a23      	ldr	r2, [pc, #140]	@ (8002ec0 <MX_UART4_Init+0x94>)
 8002e34:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002e36:	4b21      	ldr	r3, [pc, #132]	@ (8002ebc <MX_UART4_Init+0x90>)
 8002e38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e3c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002e3e:	4b1f      	ldr	r3, [pc, #124]	@ (8002ebc <MX_UART4_Init+0x90>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002e44:	4b1d      	ldr	r3, [pc, #116]	@ (8002ebc <MX_UART4_Init+0x90>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002e4a:	4b1c      	ldr	r3, [pc, #112]	@ (8002ebc <MX_UART4_Init+0x90>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002e50:	4b1a      	ldr	r3, [pc, #104]	@ (8002ebc <MX_UART4_Init+0x90>)
 8002e52:	220c      	movs	r2, #12
 8002e54:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e56:	4b19      	ldr	r3, [pc, #100]	@ (8002ebc <MX_UART4_Init+0x90>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e5c:	4b17      	ldr	r3, [pc, #92]	@ (8002ebc <MX_UART4_Init+0x90>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e62:	4b16      	ldr	r3, [pc, #88]	@ (8002ebc <MX_UART4_Init+0x90>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e68:	4b14      	ldr	r3, [pc, #80]	@ (8002ebc <MX_UART4_Init+0x90>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e6e:	4b13      	ldr	r3, [pc, #76]	@ (8002ebc <MX_UART4_Init+0x90>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002e74:	4811      	ldr	r0, [pc, #68]	@ (8002ebc <MX_UART4_Init+0x90>)
 8002e76:	f009 f9f1 	bl	800c25c <HAL_UART_Init>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002e80:	f7ff f9d6 	bl	8002230 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e84:	2100      	movs	r1, #0
 8002e86:	480d      	ldr	r0, [pc, #52]	@ (8002ebc <MX_UART4_Init+0x90>)
 8002e88:	f00b f967 	bl	800e15a <HAL_UARTEx_SetTxFifoThreshold>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002e92:	f7ff f9cd 	bl	8002230 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e96:	2100      	movs	r1, #0
 8002e98:	4808      	ldr	r0, [pc, #32]	@ (8002ebc <MX_UART4_Init+0x90>)
 8002e9a:	f00b f99c 	bl	800e1d6 <HAL_UARTEx_SetRxFifoThreshold>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002ea4:	f7ff f9c4 	bl	8002230 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002ea8:	4804      	ldr	r0, [pc, #16]	@ (8002ebc <MX_UART4_Init+0x90>)
 8002eaa:	f00b f91d 	bl	800e0e8 <HAL_UARTEx_DisableFifoMode>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002eb4:	f7ff f9bc 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002eb8:	bf00      	nop
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	240025f4 	.word	0x240025f4
 8002ec0:	40004c00 	.word	0x40004c00

08002ec4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ec8:	4b23      	ldr	r3, [pc, #140]	@ (8002f58 <MX_USART1_UART_Init+0x94>)
 8002eca:	4a24      	ldr	r2, [pc, #144]	@ (8002f5c <MX_USART1_UART_Init+0x98>)
 8002ecc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8002ece:	4b22      	ldr	r3, [pc, #136]	@ (8002f58 <MX_USART1_UART_Init+0x94>)
 8002ed0:	4a23      	ldr	r2, [pc, #140]	@ (8002f60 <MX_USART1_UART_Init+0x9c>)
 8002ed2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8002ed4:	4b20      	ldr	r3, [pc, #128]	@ (8002f58 <MX_USART1_UART_Init+0x94>)
 8002ed6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002eda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002edc:	4b1e      	ldr	r3, [pc, #120]	@ (8002f58 <MX_USART1_UART_Init+0x94>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8002ee2:	4b1d      	ldr	r3, [pc, #116]	@ (8002f58 <MX_USART1_UART_Init+0x94>)
 8002ee4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ee8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002eea:	4b1b      	ldr	r3, [pc, #108]	@ (8002f58 <MX_USART1_UART_Init+0x94>)
 8002eec:	220c      	movs	r2, #12
 8002eee:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ef0:	4b19      	ldr	r3, [pc, #100]	@ (8002f58 <MX_USART1_UART_Init+0x94>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ef6:	4b18      	ldr	r3, [pc, #96]	@ (8002f58 <MX_USART1_UART_Init+0x94>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002efc:	4b16      	ldr	r3, [pc, #88]	@ (8002f58 <MX_USART1_UART_Init+0x94>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f02:	4b15      	ldr	r3, [pc, #84]	@ (8002f58 <MX_USART1_UART_Init+0x94>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f08:	4b13      	ldr	r3, [pc, #76]	@ (8002f58 <MX_USART1_UART_Init+0x94>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f0e:	4812      	ldr	r0, [pc, #72]	@ (8002f58 <MX_USART1_UART_Init+0x94>)
 8002f10:	f009 f9a4 	bl	800c25c <HAL_UART_Init>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002f1a:	f7ff f989 	bl	8002230 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f1e:	2100      	movs	r1, #0
 8002f20:	480d      	ldr	r0, [pc, #52]	@ (8002f58 <MX_USART1_UART_Init+0x94>)
 8002f22:	f00b f91a 	bl	800e15a <HAL_UARTEx_SetTxFifoThreshold>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002f2c:	f7ff f980 	bl	8002230 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f30:	2100      	movs	r1, #0
 8002f32:	4809      	ldr	r0, [pc, #36]	@ (8002f58 <MX_USART1_UART_Init+0x94>)
 8002f34:	f00b f94f 	bl	800e1d6 <HAL_UARTEx_SetRxFifoThreshold>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002f3e:	f7ff f977 	bl	8002230 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002f42:	4805      	ldr	r0, [pc, #20]	@ (8002f58 <MX_USART1_UART_Init+0x94>)
 8002f44:	f00b f8d0 	bl	800e0e8 <HAL_UARTEx_DisableFifoMode>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8002f4e:	f7ff f96f 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f52:	bf00      	nop
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	24002688 	.word	0x24002688
 8002f5c:	40011000 	.word	0x40011000
 8002f60:	000186a0 	.word	0x000186a0

08002f64 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002f68:	4b22      	ldr	r3, [pc, #136]	@ (8002ff4 <MX_USART6_UART_Init+0x90>)
 8002f6a:	4a23      	ldr	r2, [pc, #140]	@ (8002ff8 <MX_USART6_UART_Init+0x94>)
 8002f6c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002f6e:	4b21      	ldr	r3, [pc, #132]	@ (8002ff4 <MX_USART6_UART_Init+0x90>)
 8002f70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f74:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002f76:	4b1f      	ldr	r3, [pc, #124]	@ (8002ff4 <MX_USART6_UART_Init+0x90>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002f7c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ff4 <MX_USART6_UART_Init+0x90>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002f82:	4b1c      	ldr	r3, [pc, #112]	@ (8002ff4 <MX_USART6_UART_Init+0x90>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002f88:	4b1a      	ldr	r3, [pc, #104]	@ (8002ff4 <MX_USART6_UART_Init+0x90>)
 8002f8a:	220c      	movs	r2, #12
 8002f8c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f8e:	4b19      	ldr	r3, [pc, #100]	@ (8002ff4 <MX_USART6_UART_Init+0x90>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f94:	4b17      	ldr	r3, [pc, #92]	@ (8002ff4 <MX_USART6_UART_Init+0x90>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f9a:	4b16      	ldr	r3, [pc, #88]	@ (8002ff4 <MX_USART6_UART_Init+0x90>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002fa0:	4b14      	ldr	r3, [pc, #80]	@ (8002ff4 <MX_USART6_UART_Init+0x90>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fa6:	4b13      	ldr	r3, [pc, #76]	@ (8002ff4 <MX_USART6_UART_Init+0x90>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002fac:	4811      	ldr	r0, [pc, #68]	@ (8002ff4 <MX_USART6_UART_Init+0x90>)
 8002fae:	f009 f955 	bl	800c25c <HAL_UART_Init>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8002fb8:	f7ff f93a 	bl	8002230 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	480d      	ldr	r0, [pc, #52]	@ (8002ff4 <MX_USART6_UART_Init+0x90>)
 8002fc0:	f00b f8cb 	bl	800e15a <HAL_UARTEx_SetTxFifoThreshold>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8002fca:	f7ff f931 	bl	8002230 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fce:	2100      	movs	r1, #0
 8002fd0:	4808      	ldr	r0, [pc, #32]	@ (8002ff4 <MX_USART6_UART_Init+0x90>)
 8002fd2:	f00b f900 	bl	800e1d6 <HAL_UARTEx_SetRxFifoThreshold>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8002fdc:	f7ff f928 	bl	8002230 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8002fe0:	4804      	ldr	r0, [pc, #16]	@ (8002ff4 <MX_USART6_UART_Init+0x90>)
 8002fe2:	f00b f881 	bl	800e0e8 <HAL_UARTEx_DisableFifoMode>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8002fec:	f7ff f920 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002ff0:	bf00      	nop
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	2400271c 	.word	0x2400271c
 8002ff8:	40011400 	.word	0x40011400

08002ffc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b0be      	sub	sp, #248	@ 0xf8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003004:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	605a      	str	r2, [r3, #4]
 800300e:	609a      	str	r2, [r3, #8]
 8003010:	60da      	str	r2, [r3, #12]
 8003012:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003014:	f107 0320 	add.w	r3, r7, #32
 8003018:	22c0      	movs	r2, #192	@ 0xc0
 800301a:	2100      	movs	r1, #0
 800301c:	4618      	mov	r0, r3
 800301e:	f00f fb09 	bl	8012634 <memset>
  if(uartHandle->Instance==UART4)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a8e      	ldr	r2, [pc, #568]	@ (8003260 <HAL_UART_MspInit+0x264>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d146      	bne.n	80030ba <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800302c:	f04f 0202 	mov.w	r2, #2
 8003030:	f04f 0300 	mov.w	r3, #0
 8003034:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003038:	2300      	movs	r3, #0
 800303a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800303e:	f107 0320 	add.w	r3, r7, #32
 8003042:	4618      	mov	r0, r3
 8003044:	f005 f8bc 	bl	80081c0 <HAL_RCCEx_PeriphCLKConfig>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800304e:	f7ff f8ef 	bl	8002230 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003052:	4b84      	ldr	r3, [pc, #528]	@ (8003264 <HAL_UART_MspInit+0x268>)
 8003054:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003058:	4a82      	ldr	r2, [pc, #520]	@ (8003264 <HAL_UART_MspInit+0x268>)
 800305a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800305e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003062:	4b80      	ldr	r3, [pc, #512]	@ (8003264 <HAL_UART_MspInit+0x268>)
 8003064:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003068:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800306c:	61fb      	str	r3, [r7, #28]
 800306e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003070:	4b7c      	ldr	r3, [pc, #496]	@ (8003264 <HAL_UART_MspInit+0x268>)
 8003072:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003076:	4a7b      	ldr	r2, [pc, #492]	@ (8003264 <HAL_UART_MspInit+0x268>)
 8003078:	f043 0301 	orr.w	r3, r3, #1
 800307c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003080:	4b78      	ldr	r3, [pc, #480]	@ (8003264 <HAL_UART_MspInit+0x268>)
 8003082:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	61bb      	str	r3, [r7, #24]
 800308c:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800308e:	2303      	movs	r3, #3
 8003090:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003094:	2302      	movs	r3, #2
 8003096:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309a:	2300      	movs	r3, #0
 800309c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a0:	2300      	movs	r3, #0
 80030a2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80030a6:	2308      	movs	r3, #8
 80030a8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ac:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80030b0:	4619      	mov	r1, r3
 80030b2:	486d      	ldr	r0, [pc, #436]	@ (8003268 <HAL_UART_MspInit+0x26c>)
 80030b4:	f003 fd8e 	bl	8006bd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80030b8:	e0ce      	b.n	8003258 <HAL_UART_MspInit+0x25c>
  else if(uartHandle->Instance==USART1)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a6b      	ldr	r2, [pc, #428]	@ (800326c <HAL_UART_MspInit+0x270>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d17e      	bne.n	80031c2 <HAL_UART_MspInit+0x1c6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80030c4:	f04f 0201 	mov.w	r2, #1
 80030c8:	f04f 0300 	mov.w	r3, #0
 80030cc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80030d0:	2300      	movs	r3, #0
 80030d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030d6:	f107 0320 	add.w	r3, r7, #32
 80030da:	4618      	mov	r0, r3
 80030dc:	f005 f870 	bl	80081c0 <HAL_RCCEx_PeriphCLKConfig>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <HAL_UART_MspInit+0xee>
      Error_Handler();
 80030e6:	f7ff f8a3 	bl	8002230 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80030ea:	4b5e      	ldr	r3, [pc, #376]	@ (8003264 <HAL_UART_MspInit+0x268>)
 80030ec:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80030f0:	4a5c      	ldr	r2, [pc, #368]	@ (8003264 <HAL_UART_MspInit+0x268>)
 80030f2:	f043 0310 	orr.w	r3, r3, #16
 80030f6:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80030fa:	4b5a      	ldr	r3, [pc, #360]	@ (8003264 <HAL_UART_MspInit+0x268>)
 80030fc:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8003100:	f003 0310 	and.w	r3, r3, #16
 8003104:	617b      	str	r3, [r7, #20]
 8003106:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003108:	4b56      	ldr	r3, [pc, #344]	@ (8003264 <HAL_UART_MspInit+0x268>)
 800310a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800310e:	4a55      	ldr	r2, [pc, #340]	@ (8003264 <HAL_UART_MspInit+0x268>)
 8003110:	f043 0301 	orr.w	r3, r3, #1
 8003114:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003118:	4b52      	ldr	r3, [pc, #328]	@ (8003264 <HAL_UART_MspInit+0x268>)
 800311a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	613b      	str	r3, [r7, #16]
 8003124:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|SBUS_RX_Pin;
 8003126:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800312a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800312e:	2302      	movs	r3, #2
 8003130:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003134:	2300      	movs	r3, #0
 8003136:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800313a:	2300      	movs	r3, #0
 800313c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003140:	2307      	movs	r3, #7
 8003142:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003146:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800314a:	4619      	mov	r1, r3
 800314c:	4846      	ldr	r0, [pc, #280]	@ (8003268 <HAL_UART_MspInit+0x26c>)
 800314e:	f003 fd41 	bl	8006bd4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8003152:	4b47      	ldr	r3, [pc, #284]	@ (8003270 <HAL_UART_MspInit+0x274>)
 8003154:	4a47      	ldr	r2, [pc, #284]	@ (8003274 <HAL_UART_MspInit+0x278>)
 8003156:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003158:	4b45      	ldr	r3, [pc, #276]	@ (8003270 <HAL_UART_MspInit+0x274>)
 800315a:	2229      	movs	r2, #41	@ 0x29
 800315c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800315e:	4b44      	ldr	r3, [pc, #272]	@ (8003270 <HAL_UART_MspInit+0x274>)
 8003160:	2200      	movs	r2, #0
 8003162:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003164:	4b42      	ldr	r3, [pc, #264]	@ (8003270 <HAL_UART_MspInit+0x274>)
 8003166:	2200      	movs	r2, #0
 8003168:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800316a:	4b41      	ldr	r3, [pc, #260]	@ (8003270 <HAL_UART_MspInit+0x274>)
 800316c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003170:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003172:	4b3f      	ldr	r3, [pc, #252]	@ (8003270 <HAL_UART_MspInit+0x274>)
 8003174:	2200      	movs	r2, #0
 8003176:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003178:	4b3d      	ldr	r3, [pc, #244]	@ (8003270 <HAL_UART_MspInit+0x274>)
 800317a:	2200      	movs	r2, #0
 800317c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800317e:	4b3c      	ldr	r3, [pc, #240]	@ (8003270 <HAL_UART_MspInit+0x274>)
 8003180:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003184:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003186:	4b3a      	ldr	r3, [pc, #232]	@ (8003270 <HAL_UART_MspInit+0x274>)
 8003188:	2200      	movs	r2, #0
 800318a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800318c:	4b38      	ldr	r3, [pc, #224]	@ (8003270 <HAL_UART_MspInit+0x274>)
 800318e:	2200      	movs	r2, #0
 8003190:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003192:	4837      	ldr	r0, [pc, #220]	@ (8003270 <HAL_UART_MspInit+0x274>)
 8003194:	f000 fadc 	bl	8003750 <HAL_DMA_Init>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <HAL_UART_MspInit+0x1a6>
      Error_Handler();
 800319e:	f7ff f847 	bl	8002230 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a32      	ldr	r2, [pc, #200]	@ (8003270 <HAL_UART_MspInit+0x274>)
 80031a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80031aa:	4a31      	ldr	r2, [pc, #196]	@ (8003270 <HAL_UART_MspInit+0x274>)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80031b0:	2200      	movs	r2, #0
 80031b2:	2100      	movs	r1, #0
 80031b4:	2025      	movs	r0, #37	@ 0x25
 80031b6:	f000 fa1e 	bl	80035f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80031ba:	2025      	movs	r0, #37	@ 0x25
 80031bc:	f000 fa35 	bl	800362a <HAL_NVIC_EnableIRQ>
}
 80031c0:	e04a      	b.n	8003258 <HAL_UART_MspInit+0x25c>
  else if(uartHandle->Instance==USART6)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a2c      	ldr	r2, [pc, #176]	@ (8003278 <HAL_UART_MspInit+0x27c>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d145      	bne.n	8003258 <HAL_UART_MspInit+0x25c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80031cc:	f04f 0201 	mov.w	r2, #1
 80031d0:	f04f 0300 	mov.w	r3, #0
 80031d4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80031d8:	2300      	movs	r3, #0
 80031da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031de:	f107 0320 	add.w	r3, r7, #32
 80031e2:	4618      	mov	r0, r3
 80031e4:	f004 ffec 	bl	80081c0 <HAL_RCCEx_PeriphCLKConfig>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <HAL_UART_MspInit+0x1f6>
      Error_Handler();
 80031ee:	f7ff f81f 	bl	8002230 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80031f2:	4b1c      	ldr	r3, [pc, #112]	@ (8003264 <HAL_UART_MspInit+0x268>)
 80031f4:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80031f8:	4a1a      	ldr	r2, [pc, #104]	@ (8003264 <HAL_UART_MspInit+0x268>)
 80031fa:	f043 0320 	orr.w	r3, r3, #32
 80031fe:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8003202:	4b18      	ldr	r3, [pc, #96]	@ (8003264 <HAL_UART_MspInit+0x268>)
 8003204:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8003208:	f003 0320 	and.w	r3, r3, #32
 800320c:	60fb      	str	r3, [r7, #12]
 800320e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003210:	4b14      	ldr	r3, [pc, #80]	@ (8003264 <HAL_UART_MspInit+0x268>)
 8003212:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003216:	4a13      	ldr	r2, [pc, #76]	@ (8003264 <HAL_UART_MspInit+0x268>)
 8003218:	f043 0304 	orr.w	r3, r3, #4
 800321c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003220:	4b10      	ldr	r3, [pc, #64]	@ (8003264 <HAL_UART_MspInit+0x268>)
 8003222:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003226:	f003 0304 	and.w	r3, r3, #4
 800322a:	60bb      	str	r3, [r7, #8]
 800322c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800322e:	23c0      	movs	r3, #192	@ 0xc0
 8003230:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003234:	2302      	movs	r3, #2
 8003236:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323a:	2300      	movs	r3, #0
 800323c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003240:	2300      	movs	r3, #0
 8003242:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8003246:	2307      	movs	r3, #7
 8003248:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800324c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8003250:	4619      	mov	r1, r3
 8003252:	480a      	ldr	r0, [pc, #40]	@ (800327c <HAL_UART_MspInit+0x280>)
 8003254:	f003 fcbe 	bl	8006bd4 <HAL_GPIO_Init>
}
 8003258:	bf00      	nop
 800325a:	37f8      	adds	r7, #248	@ 0xf8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40004c00 	.word	0x40004c00
 8003264:	58024400 	.word	0x58024400
 8003268:	58020000 	.word	0x58020000
 800326c:	40011000 	.word	0x40011000
 8003270:	240027b0 	.word	0x240027b0
 8003274:	40020010 	.word	0x40020010
 8003278:	40011400 	.word	0x40011400
 800327c:	58020800 	.word	0x58020800

08003280 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003280:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80032b8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003284:	f7ff fa66 	bl	8002754 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003288:	480c      	ldr	r0, [pc, #48]	@ (80032bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800328a:	490d      	ldr	r1, [pc, #52]	@ (80032c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800328c:	4a0d      	ldr	r2, [pc, #52]	@ (80032c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800328e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003290:	e002      	b.n	8003298 <LoopCopyDataInit>

08003292 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003292:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003294:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003296:	3304      	adds	r3, #4

08003298 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8003298:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800329a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800329c:	d3f9      	bcc.n	8003292 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800329e:	4a0a      	ldr	r2, [pc, #40]	@ (80032c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80032a0:	4c0a      	ldr	r4, [pc, #40]	@ (80032cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80032a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032a4:	e001      	b.n	80032aa <LoopFillZerobss>

080032a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032a8:	3204      	adds	r2, #4

080032aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032ac:	d3fb      	bcc.n	80032a6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80032ae:	f00f f9cf 	bl	8012650 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032b2:	f7fe feb5 	bl	8002020 <main>
  bx  lr
 80032b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80032b8:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80032bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80032c0:	2400010c 	.word	0x2400010c
  ldr r2, =_sidata
 80032c4:	08013728 	.word	0x08013728
  ldr r2, =_sbss
 80032c8:	2400010c 	.word	0x2400010c
  ldr r4, =_ebss
 80032cc:	24002ba8 	.word	0x24002ba8

080032d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032d0:	e7fe      	b.n	80032d0 <ADC_IRQHandler>
	...

080032d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032da:	2003      	movs	r0, #3
 80032dc:	f000 f980 	bl	80035e0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80032e0:	f004 fd98 	bl	8007e14 <HAL_RCC_GetSysClockFreq>
 80032e4:	4602      	mov	r2, r0
 80032e6:	4b15      	ldr	r3, [pc, #84]	@ (800333c <HAL_Init+0x68>)
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	0a1b      	lsrs	r3, r3, #8
 80032ec:	f003 030f 	and.w	r3, r3, #15
 80032f0:	4913      	ldr	r1, [pc, #76]	@ (8003340 <HAL_Init+0x6c>)
 80032f2:	5ccb      	ldrb	r3, [r1, r3]
 80032f4:	f003 031f 	and.w	r3, r3, #31
 80032f8:	fa22 f303 	lsr.w	r3, r2, r3
 80032fc:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80032fe:	4b0f      	ldr	r3, [pc, #60]	@ (800333c <HAL_Init+0x68>)
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	4a0e      	ldr	r2, [pc, #56]	@ (8003340 <HAL_Init+0x6c>)
 8003308:	5cd3      	ldrb	r3, [r2, r3]
 800330a:	f003 031f 	and.w	r3, r3, #31
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	fa22 f303 	lsr.w	r3, r2, r3
 8003314:	4a0b      	ldr	r2, [pc, #44]	@ (8003344 <HAL_Init+0x70>)
 8003316:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003318:	4a0b      	ldr	r2, [pc, #44]	@ (8003348 <HAL_Init+0x74>)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800331e:	200f      	movs	r0, #15
 8003320:	f000 f814 	bl	800334c <HAL_InitTick>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e002      	b.n	8003334 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800332e:	f7ff f991 	bl	8002654 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3708      	adds	r7, #8
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	58024400 	.word	0x58024400
 8003340:	08012a08 	.word	0x08012a08
 8003344:	24000098 	.word	0x24000098
 8003348:	24000094 	.word	0x24000094

0800334c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003354:	4b15      	ldr	r3, [pc, #84]	@ (80033ac <HAL_InitTick+0x60>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e021      	b.n	80033a4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003360:	4b13      	ldr	r3, [pc, #76]	@ (80033b0 <HAL_InitTick+0x64>)
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	4b11      	ldr	r3, [pc, #68]	@ (80033ac <HAL_InitTick+0x60>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	4619      	mov	r1, r3
 800336a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800336e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003372:	fbb2 f3f3 	udiv	r3, r2, r3
 8003376:	4618      	mov	r0, r3
 8003378:	f000 f965 	bl	8003646 <HAL_SYSTICK_Config>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e00e      	b.n	80033a4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b0f      	cmp	r3, #15
 800338a:	d80a      	bhi.n	80033a2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800338c:	2200      	movs	r2, #0
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	f04f 30ff 	mov.w	r0, #4294967295
 8003394:	f000 f92f 	bl	80035f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003398:	4a06      	ldr	r2, [pc, #24]	@ (80033b4 <HAL_InitTick+0x68>)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800339e:	2300      	movs	r3, #0
 80033a0:	e000      	b.n	80033a4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	240000a0 	.word	0x240000a0
 80033b0:	24000094 	.word	0x24000094
 80033b4:	2400009c 	.word	0x2400009c

080033b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80033bc:	4b06      	ldr	r3, [pc, #24]	@ (80033d8 <HAL_IncTick+0x20>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	461a      	mov	r2, r3
 80033c2:	4b06      	ldr	r3, [pc, #24]	@ (80033dc <HAL_IncTick+0x24>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4413      	add	r3, r2
 80033c8:	4a04      	ldr	r2, [pc, #16]	@ (80033dc <HAL_IncTick+0x24>)
 80033ca:	6013      	str	r3, [r2, #0]
}
 80033cc:	bf00      	nop
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	240000a0 	.word	0x240000a0
 80033dc:	24002828 	.word	0x24002828

080033e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
  return uwTick;
 80033e4:	4b03      	ldr	r3, [pc, #12]	@ (80033f4 <HAL_GetTick+0x14>)
 80033e6:	681b      	ldr	r3, [r3, #0]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	24002828 	.word	0x24002828

080033f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003400:	f7ff ffee 	bl	80033e0 <HAL_GetTick>
 8003404:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003410:	d005      	beq.n	800341e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003412:	4b0a      	ldr	r3, [pc, #40]	@ (800343c <HAL_Delay+0x44>)
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	461a      	mov	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4413      	add	r3, r2
 800341c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800341e:	bf00      	nop
 8003420:	f7ff ffde 	bl	80033e0 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	429a      	cmp	r2, r3
 800342e:	d8f7      	bhi.n	8003420 <HAL_Delay+0x28>
  {
  }
}
 8003430:	bf00      	nop
 8003432:	bf00      	nop
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	240000a0 	.word	0x240000a0

08003440 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003450:	4b0b      	ldr	r3, [pc, #44]	@ (8003480 <__NVIC_SetPriorityGrouping+0x40>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800345c:	4013      	ands	r3, r2
 800345e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003468:	4b06      	ldr	r3, [pc, #24]	@ (8003484 <__NVIC_SetPriorityGrouping+0x44>)
 800346a:	4313      	orrs	r3, r2
 800346c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800346e:	4a04      	ldr	r2, [pc, #16]	@ (8003480 <__NVIC_SetPriorityGrouping+0x40>)
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	60d3      	str	r3, [r2, #12]
}
 8003474:	bf00      	nop
 8003476:	3714      	adds	r7, #20
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	e000ed00 	.word	0xe000ed00
 8003484:	05fa0000 	.word	0x05fa0000

08003488 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800348c:	4b04      	ldr	r3, [pc, #16]	@ (80034a0 <__NVIC_GetPriorityGrouping+0x18>)
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	0a1b      	lsrs	r3, r3, #8
 8003492:	f003 0307 	and.w	r3, r3, #7
}
 8003496:	4618      	mov	r0, r3
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr
 80034a0:	e000ed00 	.word	0xe000ed00

080034a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	4603      	mov	r3, r0
 80034ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80034ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	db0b      	blt.n	80034ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034b6:	88fb      	ldrh	r3, [r7, #6]
 80034b8:	f003 021f 	and.w	r2, r3, #31
 80034bc:	4907      	ldr	r1, [pc, #28]	@ (80034dc <__NVIC_EnableIRQ+0x38>)
 80034be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034c2:	095b      	lsrs	r3, r3, #5
 80034c4:	2001      	movs	r0, #1
 80034c6:	fa00 f202 	lsl.w	r2, r0, r2
 80034ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034ce:	bf00      	nop
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	e000e100 	.word	0xe000e100

080034e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	4603      	mov	r3, r0
 80034e8:	6039      	str	r1, [r7, #0]
 80034ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80034ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	db0a      	blt.n	800350a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	b2da      	uxtb	r2, r3
 80034f8:	490c      	ldr	r1, [pc, #48]	@ (800352c <__NVIC_SetPriority+0x4c>)
 80034fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034fe:	0112      	lsls	r2, r2, #4
 8003500:	b2d2      	uxtb	r2, r2
 8003502:	440b      	add	r3, r1
 8003504:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003508:	e00a      	b.n	8003520 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	b2da      	uxtb	r2, r3
 800350e:	4908      	ldr	r1, [pc, #32]	@ (8003530 <__NVIC_SetPriority+0x50>)
 8003510:	88fb      	ldrh	r3, [r7, #6]
 8003512:	f003 030f 	and.w	r3, r3, #15
 8003516:	3b04      	subs	r3, #4
 8003518:	0112      	lsls	r2, r2, #4
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	440b      	add	r3, r1
 800351e:	761a      	strb	r2, [r3, #24]
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	e000e100 	.word	0xe000e100
 8003530:	e000ed00 	.word	0xe000ed00

08003534 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003534:	b480      	push	{r7}
 8003536:	b089      	sub	sp, #36	@ 0x24
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f003 0307 	and.w	r3, r3, #7
 8003546:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	f1c3 0307 	rsb	r3, r3, #7
 800354e:	2b04      	cmp	r3, #4
 8003550:	bf28      	it	cs
 8003552:	2304      	movcs	r3, #4
 8003554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	3304      	adds	r3, #4
 800355a:	2b06      	cmp	r3, #6
 800355c:	d902      	bls.n	8003564 <NVIC_EncodePriority+0x30>
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	3b03      	subs	r3, #3
 8003562:	e000      	b.n	8003566 <NVIC_EncodePriority+0x32>
 8003564:	2300      	movs	r3, #0
 8003566:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003568:	f04f 32ff 	mov.w	r2, #4294967295
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	fa02 f303 	lsl.w	r3, r2, r3
 8003572:	43da      	mvns	r2, r3
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	401a      	ands	r2, r3
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800357c:	f04f 31ff 	mov.w	r1, #4294967295
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	fa01 f303 	lsl.w	r3, r1, r3
 8003586:	43d9      	mvns	r1, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800358c:	4313      	orrs	r3, r2
         );
}
 800358e:	4618      	mov	r0, r3
 8003590:	3724      	adds	r7, #36	@ 0x24
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
	...

0800359c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3b01      	subs	r3, #1
 80035a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035ac:	d301      	bcc.n	80035b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035ae:	2301      	movs	r3, #1
 80035b0:	e00f      	b.n	80035d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035b2:	4a0a      	ldr	r2, [pc, #40]	@ (80035dc <SysTick_Config+0x40>)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3b01      	subs	r3, #1
 80035b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035ba:	210f      	movs	r1, #15
 80035bc:	f04f 30ff 	mov.w	r0, #4294967295
 80035c0:	f7ff ff8e 	bl	80034e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035c4:	4b05      	ldr	r3, [pc, #20]	@ (80035dc <SysTick_Config+0x40>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035ca:	4b04      	ldr	r3, [pc, #16]	@ (80035dc <SysTick_Config+0x40>)
 80035cc:	2207      	movs	r2, #7
 80035ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	e000e010 	.word	0xe000e010

080035e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f7ff ff29 	bl	8003440 <__NVIC_SetPriorityGrouping>
}
 80035ee:	bf00      	nop
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b086      	sub	sp, #24
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	4603      	mov	r3, r0
 80035fe:	60b9      	str	r1, [r7, #8]
 8003600:	607a      	str	r2, [r7, #4]
 8003602:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003604:	f7ff ff40 	bl	8003488 <__NVIC_GetPriorityGrouping>
 8003608:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	68b9      	ldr	r1, [r7, #8]
 800360e:	6978      	ldr	r0, [r7, #20]
 8003610:	f7ff ff90 	bl	8003534 <NVIC_EncodePriority>
 8003614:	4602      	mov	r2, r0
 8003616:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800361a:	4611      	mov	r1, r2
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff ff5f 	bl	80034e0 <__NVIC_SetPriority>
}
 8003622:	bf00      	nop
 8003624:	3718      	adds	r7, #24
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b082      	sub	sp, #8
 800362e:	af00      	add	r7, sp, #0
 8003630:	4603      	mov	r3, r0
 8003632:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003634:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003638:	4618      	mov	r0, r3
 800363a:	f7ff ff33 	bl	80034a4 <__NVIC_EnableIRQ>
}
 800363e:	bf00      	nop
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b082      	sub	sp, #8
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7ff ffa4 	bl	800359c <SysTick_Config>
 8003654:	4603      	mov	r3, r0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
	...

08003660 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003664:	f3bf 8f5f 	dmb	sy
}
 8003668:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800366a:	4b07      	ldr	r3, [pc, #28]	@ (8003688 <HAL_MPU_Disable+0x28>)
 800366c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366e:	4a06      	ldr	r2, [pc, #24]	@ (8003688 <HAL_MPU_Disable+0x28>)
 8003670:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003674:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003676:	4b05      	ldr	r3, [pc, #20]	@ (800368c <HAL_MPU_Disable+0x2c>)
 8003678:	2200      	movs	r2, #0
 800367a:	605a      	str	r2, [r3, #4]
}
 800367c:	bf00      	nop
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	e000ed00 	.word	0xe000ed00
 800368c:	e000ed90 	.word	0xe000ed90

08003690 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003698:	4a0b      	ldr	r2, [pc, #44]	@ (80036c8 <HAL_MPU_Enable+0x38>)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f043 0301 	orr.w	r3, r3, #1
 80036a0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80036a2:	4b0a      	ldr	r3, [pc, #40]	@ (80036cc <HAL_MPU_Enable+0x3c>)
 80036a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a6:	4a09      	ldr	r2, [pc, #36]	@ (80036cc <HAL_MPU_Enable+0x3c>)
 80036a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036ac:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80036ae:	f3bf 8f4f 	dsb	sy
}
 80036b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80036b4:	f3bf 8f6f 	isb	sy
}
 80036b8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	e000ed90 	.word	0xe000ed90
 80036cc:	e000ed00 	.word	0xe000ed00

080036d0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	785a      	ldrb	r2, [r3, #1]
 80036dc:	4b1b      	ldr	r3, [pc, #108]	@ (800374c <HAL_MPU_ConfigRegion+0x7c>)
 80036de:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80036e0:	4b1a      	ldr	r3, [pc, #104]	@ (800374c <HAL_MPU_ConfigRegion+0x7c>)
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	4a19      	ldr	r2, [pc, #100]	@ (800374c <HAL_MPU_ConfigRegion+0x7c>)
 80036e6:	f023 0301 	bic.w	r3, r3, #1
 80036ea:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80036ec:	4a17      	ldr	r2, [pc, #92]	@ (800374c <HAL_MPU_ConfigRegion+0x7c>)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	7b1b      	ldrb	r3, [r3, #12]
 80036f8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	7adb      	ldrb	r3, [r3, #11]
 80036fe:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003700:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	7a9b      	ldrb	r3, [r3, #10]
 8003706:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003708:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	7b5b      	ldrb	r3, [r3, #13]
 800370e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003710:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	7b9b      	ldrb	r3, [r3, #14]
 8003716:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003718:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	7bdb      	ldrb	r3, [r3, #15]
 800371e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003720:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	7a5b      	ldrb	r3, [r3, #9]
 8003726:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003728:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	7a1b      	ldrb	r3, [r3, #8]
 800372e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003730:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	7812      	ldrb	r2, [r2, #0]
 8003736:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003738:	4a04      	ldr	r2, [pc, #16]	@ (800374c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800373a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800373c:	6113      	str	r3, [r2, #16]
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	e000ed90 	.word	0xe000ed90

08003750 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003758:	f7ff fe42 	bl	80033e0 <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e37d      	b.n	8003e64 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a66      	ldr	r2, [pc, #408]	@ (8003908 <HAL_DMA_Init+0x1b8>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d04a      	beq.n	8003808 <HAL_DMA_Init+0xb8>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a65      	ldr	r2, [pc, #404]	@ (800390c <HAL_DMA_Init+0x1bc>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d045      	beq.n	8003808 <HAL_DMA_Init+0xb8>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a63      	ldr	r2, [pc, #396]	@ (8003910 <HAL_DMA_Init+0x1c0>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d040      	beq.n	8003808 <HAL_DMA_Init+0xb8>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a62      	ldr	r2, [pc, #392]	@ (8003914 <HAL_DMA_Init+0x1c4>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d03b      	beq.n	8003808 <HAL_DMA_Init+0xb8>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a60      	ldr	r2, [pc, #384]	@ (8003918 <HAL_DMA_Init+0x1c8>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d036      	beq.n	8003808 <HAL_DMA_Init+0xb8>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a5f      	ldr	r2, [pc, #380]	@ (800391c <HAL_DMA_Init+0x1cc>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d031      	beq.n	8003808 <HAL_DMA_Init+0xb8>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a5d      	ldr	r2, [pc, #372]	@ (8003920 <HAL_DMA_Init+0x1d0>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d02c      	beq.n	8003808 <HAL_DMA_Init+0xb8>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a5c      	ldr	r2, [pc, #368]	@ (8003924 <HAL_DMA_Init+0x1d4>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d027      	beq.n	8003808 <HAL_DMA_Init+0xb8>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a5a      	ldr	r2, [pc, #360]	@ (8003928 <HAL_DMA_Init+0x1d8>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d022      	beq.n	8003808 <HAL_DMA_Init+0xb8>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a59      	ldr	r2, [pc, #356]	@ (800392c <HAL_DMA_Init+0x1dc>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d01d      	beq.n	8003808 <HAL_DMA_Init+0xb8>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a57      	ldr	r2, [pc, #348]	@ (8003930 <HAL_DMA_Init+0x1e0>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d018      	beq.n	8003808 <HAL_DMA_Init+0xb8>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a56      	ldr	r2, [pc, #344]	@ (8003934 <HAL_DMA_Init+0x1e4>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d013      	beq.n	8003808 <HAL_DMA_Init+0xb8>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a54      	ldr	r2, [pc, #336]	@ (8003938 <HAL_DMA_Init+0x1e8>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d00e      	beq.n	8003808 <HAL_DMA_Init+0xb8>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a53      	ldr	r2, [pc, #332]	@ (800393c <HAL_DMA_Init+0x1ec>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d009      	beq.n	8003808 <HAL_DMA_Init+0xb8>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a51      	ldr	r2, [pc, #324]	@ (8003940 <HAL_DMA_Init+0x1f0>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d004      	beq.n	8003808 <HAL_DMA_Init+0xb8>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a50      	ldr	r2, [pc, #320]	@ (8003944 <HAL_DMA_Init+0x1f4>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d101      	bne.n	800380c <HAL_DMA_Init+0xbc>
 8003808:	2301      	movs	r3, #1
 800380a:	e000      	b.n	800380e <HAL_DMA_Init+0xbe>
 800380c:	2300      	movs	r3, #0
 800380e:	2b00      	cmp	r3, #0
 8003810:	f000 813c 	beq.w	8003a8c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2202      	movs	r2, #2
 8003818:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a37      	ldr	r2, [pc, #220]	@ (8003908 <HAL_DMA_Init+0x1b8>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d04a      	beq.n	80038c4 <HAL_DMA_Init+0x174>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a36      	ldr	r2, [pc, #216]	@ (800390c <HAL_DMA_Init+0x1bc>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d045      	beq.n	80038c4 <HAL_DMA_Init+0x174>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a34      	ldr	r2, [pc, #208]	@ (8003910 <HAL_DMA_Init+0x1c0>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d040      	beq.n	80038c4 <HAL_DMA_Init+0x174>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a33      	ldr	r2, [pc, #204]	@ (8003914 <HAL_DMA_Init+0x1c4>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d03b      	beq.n	80038c4 <HAL_DMA_Init+0x174>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a31      	ldr	r2, [pc, #196]	@ (8003918 <HAL_DMA_Init+0x1c8>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d036      	beq.n	80038c4 <HAL_DMA_Init+0x174>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a30      	ldr	r2, [pc, #192]	@ (800391c <HAL_DMA_Init+0x1cc>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d031      	beq.n	80038c4 <HAL_DMA_Init+0x174>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a2e      	ldr	r2, [pc, #184]	@ (8003920 <HAL_DMA_Init+0x1d0>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d02c      	beq.n	80038c4 <HAL_DMA_Init+0x174>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a2d      	ldr	r2, [pc, #180]	@ (8003924 <HAL_DMA_Init+0x1d4>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d027      	beq.n	80038c4 <HAL_DMA_Init+0x174>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a2b      	ldr	r2, [pc, #172]	@ (8003928 <HAL_DMA_Init+0x1d8>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d022      	beq.n	80038c4 <HAL_DMA_Init+0x174>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a2a      	ldr	r2, [pc, #168]	@ (800392c <HAL_DMA_Init+0x1dc>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d01d      	beq.n	80038c4 <HAL_DMA_Init+0x174>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a28      	ldr	r2, [pc, #160]	@ (8003930 <HAL_DMA_Init+0x1e0>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d018      	beq.n	80038c4 <HAL_DMA_Init+0x174>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a27      	ldr	r2, [pc, #156]	@ (8003934 <HAL_DMA_Init+0x1e4>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d013      	beq.n	80038c4 <HAL_DMA_Init+0x174>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a25      	ldr	r2, [pc, #148]	@ (8003938 <HAL_DMA_Init+0x1e8>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d00e      	beq.n	80038c4 <HAL_DMA_Init+0x174>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a24      	ldr	r2, [pc, #144]	@ (800393c <HAL_DMA_Init+0x1ec>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d009      	beq.n	80038c4 <HAL_DMA_Init+0x174>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a22      	ldr	r2, [pc, #136]	@ (8003940 <HAL_DMA_Init+0x1f0>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d004      	beq.n	80038c4 <HAL_DMA_Init+0x174>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a21      	ldr	r2, [pc, #132]	@ (8003944 <HAL_DMA_Init+0x1f4>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d108      	bne.n	80038d6 <HAL_DMA_Init+0x186>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0201 	bic.w	r2, r2, #1
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	e007      	b.n	80038e6 <HAL_DMA_Init+0x196>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0201 	bic.w	r2, r2, #1
 80038e4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80038e6:	e02f      	b.n	8003948 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038e8:	f7ff fd7a 	bl	80033e0 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b05      	cmp	r3, #5
 80038f4:	d928      	bls.n	8003948 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2220      	movs	r2, #32
 80038fa:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2203      	movs	r2, #3
 8003900:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e2ad      	b.n	8003e64 <HAL_DMA_Init+0x714>
 8003908:	40020010 	.word	0x40020010
 800390c:	40020028 	.word	0x40020028
 8003910:	40020040 	.word	0x40020040
 8003914:	40020058 	.word	0x40020058
 8003918:	40020070 	.word	0x40020070
 800391c:	40020088 	.word	0x40020088
 8003920:	400200a0 	.word	0x400200a0
 8003924:	400200b8 	.word	0x400200b8
 8003928:	40020410 	.word	0x40020410
 800392c:	40020428 	.word	0x40020428
 8003930:	40020440 	.word	0x40020440
 8003934:	40020458 	.word	0x40020458
 8003938:	40020470 	.word	0x40020470
 800393c:	40020488 	.word	0x40020488
 8003940:	400204a0 	.word	0x400204a0
 8003944:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1c8      	bne.n	80038e8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	4b73      	ldr	r3, [pc, #460]	@ (8003b30 <HAL_DMA_Init+0x3e0>)
 8003962:	4013      	ands	r3, r2
 8003964:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800396e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800397a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003986:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	4313      	orrs	r3, r2
 8003992:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003998:	2b04      	cmp	r3, #4
 800399a:	d107      	bne.n	80039ac <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a4:	4313      	orrs	r3, r2
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	2b28      	cmp	r3, #40	@ 0x28
 80039b2:	d903      	bls.n	80039bc <HAL_DMA_Init+0x26c>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80039ba:	d91f      	bls.n	80039fc <HAL_DMA_Init+0x2ac>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	2b3e      	cmp	r3, #62	@ 0x3e
 80039c2:	d903      	bls.n	80039cc <HAL_DMA_Init+0x27c>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	2b42      	cmp	r3, #66	@ 0x42
 80039ca:	d917      	bls.n	80039fc <HAL_DMA_Init+0x2ac>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	2b46      	cmp	r3, #70	@ 0x46
 80039d2:	d903      	bls.n	80039dc <HAL_DMA_Init+0x28c>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	2b48      	cmp	r3, #72	@ 0x48
 80039da:	d90f      	bls.n	80039fc <HAL_DMA_Init+0x2ac>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	2b4e      	cmp	r3, #78	@ 0x4e
 80039e2:	d903      	bls.n	80039ec <HAL_DMA_Init+0x29c>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	2b52      	cmp	r3, #82	@ 0x52
 80039ea:	d907      	bls.n	80039fc <HAL_DMA_Init+0x2ac>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	2b73      	cmp	r3, #115	@ 0x73
 80039f2:	d905      	bls.n	8003a00 <HAL_DMA_Init+0x2b0>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	2b77      	cmp	r3, #119	@ 0x77
 80039fa:	d801      	bhi.n	8003a00 <HAL_DMA_Init+0x2b0>
 80039fc:	2301      	movs	r3, #1
 80039fe:	e000      	b.n	8003a02 <HAL_DMA_Init+0x2b2>
 8003a00:	2300      	movs	r3, #0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a0c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f023 0307 	bic.w	r3, r3, #7
 8003a24:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a34:	2b04      	cmp	r3, #4
 8003a36:	d117      	bne.n	8003a68 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00e      	beq.n	8003a68 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f002 fbd4 	bl	80061f8 <DMA_CheckFifoParam>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d008      	beq.n	8003a68 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2240      	movs	r2, #64	@ 0x40
 8003a5a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e1fd      	b.n	8003e64 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f002 fb0f 	bl	8006094 <DMA_CalcBaseAndBitshift>
 8003a76:	4603      	mov	r3, r0
 8003a78:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a7e:	f003 031f 	and.w	r3, r3, #31
 8003a82:	223f      	movs	r2, #63	@ 0x3f
 8003a84:	409a      	lsls	r2, r3
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	609a      	str	r2, [r3, #8]
 8003a8a:	e0fd      	b.n	8003c88 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a28      	ldr	r2, [pc, #160]	@ (8003b34 <HAL_DMA_Init+0x3e4>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d04a      	beq.n	8003b2c <HAL_DMA_Init+0x3dc>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a27      	ldr	r2, [pc, #156]	@ (8003b38 <HAL_DMA_Init+0x3e8>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d045      	beq.n	8003b2c <HAL_DMA_Init+0x3dc>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a25      	ldr	r2, [pc, #148]	@ (8003b3c <HAL_DMA_Init+0x3ec>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d040      	beq.n	8003b2c <HAL_DMA_Init+0x3dc>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a24      	ldr	r2, [pc, #144]	@ (8003b40 <HAL_DMA_Init+0x3f0>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d03b      	beq.n	8003b2c <HAL_DMA_Init+0x3dc>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a22      	ldr	r2, [pc, #136]	@ (8003b44 <HAL_DMA_Init+0x3f4>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d036      	beq.n	8003b2c <HAL_DMA_Init+0x3dc>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a21      	ldr	r2, [pc, #132]	@ (8003b48 <HAL_DMA_Init+0x3f8>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d031      	beq.n	8003b2c <HAL_DMA_Init+0x3dc>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a1f      	ldr	r2, [pc, #124]	@ (8003b4c <HAL_DMA_Init+0x3fc>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d02c      	beq.n	8003b2c <HAL_DMA_Init+0x3dc>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a1e      	ldr	r2, [pc, #120]	@ (8003b50 <HAL_DMA_Init+0x400>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d027      	beq.n	8003b2c <HAL_DMA_Init+0x3dc>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a1c      	ldr	r2, [pc, #112]	@ (8003b54 <HAL_DMA_Init+0x404>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d022      	beq.n	8003b2c <HAL_DMA_Init+0x3dc>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a1b      	ldr	r2, [pc, #108]	@ (8003b58 <HAL_DMA_Init+0x408>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d01d      	beq.n	8003b2c <HAL_DMA_Init+0x3dc>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a19      	ldr	r2, [pc, #100]	@ (8003b5c <HAL_DMA_Init+0x40c>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d018      	beq.n	8003b2c <HAL_DMA_Init+0x3dc>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a18      	ldr	r2, [pc, #96]	@ (8003b60 <HAL_DMA_Init+0x410>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d013      	beq.n	8003b2c <HAL_DMA_Init+0x3dc>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a16      	ldr	r2, [pc, #88]	@ (8003b64 <HAL_DMA_Init+0x414>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d00e      	beq.n	8003b2c <HAL_DMA_Init+0x3dc>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a15      	ldr	r2, [pc, #84]	@ (8003b68 <HAL_DMA_Init+0x418>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d009      	beq.n	8003b2c <HAL_DMA_Init+0x3dc>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a13      	ldr	r2, [pc, #76]	@ (8003b6c <HAL_DMA_Init+0x41c>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d004      	beq.n	8003b2c <HAL_DMA_Init+0x3dc>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a12      	ldr	r2, [pc, #72]	@ (8003b70 <HAL_DMA_Init+0x420>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d123      	bne.n	8003b74 <HAL_DMA_Init+0x424>
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e022      	b.n	8003b76 <HAL_DMA_Init+0x426>
 8003b30:	fe10803f 	.word	0xfe10803f
 8003b34:	48022c08 	.word	0x48022c08
 8003b38:	48022c1c 	.word	0x48022c1c
 8003b3c:	48022c30 	.word	0x48022c30
 8003b40:	48022c44 	.word	0x48022c44
 8003b44:	48022c58 	.word	0x48022c58
 8003b48:	48022c6c 	.word	0x48022c6c
 8003b4c:	48022c80 	.word	0x48022c80
 8003b50:	48022c94 	.word	0x48022c94
 8003b54:	58025408 	.word	0x58025408
 8003b58:	5802541c 	.word	0x5802541c
 8003b5c:	58025430 	.word	0x58025430
 8003b60:	58025444 	.word	0x58025444
 8003b64:	58025458 	.word	0x58025458
 8003b68:	5802546c 	.word	0x5802546c
 8003b6c:	58025480 	.word	0x58025480
 8003b70:	58025494 	.word	0x58025494
 8003b74:	2300      	movs	r3, #0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d07d      	beq.n	8003c76 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a7f      	ldr	r2, [pc, #508]	@ (8003d7c <HAL_DMA_Init+0x62c>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d021      	beq.n	8003bc8 <HAL_DMA_Init+0x478>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a7d      	ldr	r2, [pc, #500]	@ (8003d80 <HAL_DMA_Init+0x630>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d01c      	beq.n	8003bc8 <HAL_DMA_Init+0x478>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a7c      	ldr	r2, [pc, #496]	@ (8003d84 <HAL_DMA_Init+0x634>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d017      	beq.n	8003bc8 <HAL_DMA_Init+0x478>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a7a      	ldr	r2, [pc, #488]	@ (8003d88 <HAL_DMA_Init+0x638>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d012      	beq.n	8003bc8 <HAL_DMA_Init+0x478>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a79      	ldr	r2, [pc, #484]	@ (8003d8c <HAL_DMA_Init+0x63c>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d00d      	beq.n	8003bc8 <HAL_DMA_Init+0x478>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a77      	ldr	r2, [pc, #476]	@ (8003d90 <HAL_DMA_Init+0x640>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d008      	beq.n	8003bc8 <HAL_DMA_Init+0x478>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a76      	ldr	r2, [pc, #472]	@ (8003d94 <HAL_DMA_Init+0x644>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d003      	beq.n	8003bc8 <HAL_DMA_Init+0x478>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a74      	ldr	r2, [pc, #464]	@ (8003d98 <HAL_DMA_Init+0x648>)
 8003bc6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2202      	movs	r2, #2
 8003bcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	4b6e      	ldr	r3, [pc, #440]	@ (8003d9c <HAL_DMA_Init+0x64c>)
 8003be4:	4013      	ands	r3, r2
 8003be6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	2b40      	cmp	r3, #64	@ 0x40
 8003bee:	d008      	beq.n	8003c02 <HAL_DMA_Init+0x4b2>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	2b80      	cmp	r3, #128	@ 0x80
 8003bf6:	d102      	bne.n	8003bfe <HAL_DMA_Init+0x4ae>
 8003bf8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003bfc:	e002      	b.n	8003c04 <HAL_DMA_Init+0x4b4>
 8003bfe:	2300      	movs	r3, #0
 8003c00:	e000      	b.n	8003c04 <HAL_DMA_Init+0x4b4>
 8003c02:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	68d2      	ldr	r2, [r2, #12]
 8003c08:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c0a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003c12:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003c1a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003c22:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	69db      	ldr	r3, [r3, #28]
 8003c28:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003c2a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003c32:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	461a      	mov	r2, r3
 8003c48:	4b55      	ldr	r3, [pc, #340]	@ (8003da0 <HAL_DMA_Init+0x650>)
 8003c4a:	4413      	add	r3, r2
 8003c4c:	4a55      	ldr	r2, [pc, #340]	@ (8003da4 <HAL_DMA_Init+0x654>)
 8003c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c52:	091b      	lsrs	r3, r3, #4
 8003c54:	009a      	lsls	r2, r3, #2
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f002 fa1a 	bl	8006094 <DMA_CalcBaseAndBitshift>
 8003c60:	4603      	mov	r3, r0
 8003c62:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c68:	f003 031f 	and.w	r3, r3, #31
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	409a      	lsls	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	605a      	str	r2, [r3, #4]
 8003c74:	e008      	b.n	8003c88 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2240      	movs	r2, #64	@ 0x40
 8003c7a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2203      	movs	r2, #3
 8003c80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e0ed      	b.n	8003e64 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a46      	ldr	r2, [pc, #280]	@ (8003da8 <HAL_DMA_Init+0x658>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d072      	beq.n	8003d78 <HAL_DMA_Init+0x628>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a45      	ldr	r2, [pc, #276]	@ (8003dac <HAL_DMA_Init+0x65c>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d06d      	beq.n	8003d78 <HAL_DMA_Init+0x628>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a43      	ldr	r2, [pc, #268]	@ (8003db0 <HAL_DMA_Init+0x660>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d068      	beq.n	8003d78 <HAL_DMA_Init+0x628>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a42      	ldr	r2, [pc, #264]	@ (8003db4 <HAL_DMA_Init+0x664>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d063      	beq.n	8003d78 <HAL_DMA_Init+0x628>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a40      	ldr	r2, [pc, #256]	@ (8003db8 <HAL_DMA_Init+0x668>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d05e      	beq.n	8003d78 <HAL_DMA_Init+0x628>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a3f      	ldr	r2, [pc, #252]	@ (8003dbc <HAL_DMA_Init+0x66c>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d059      	beq.n	8003d78 <HAL_DMA_Init+0x628>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a3d      	ldr	r2, [pc, #244]	@ (8003dc0 <HAL_DMA_Init+0x670>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d054      	beq.n	8003d78 <HAL_DMA_Init+0x628>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a3c      	ldr	r2, [pc, #240]	@ (8003dc4 <HAL_DMA_Init+0x674>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d04f      	beq.n	8003d78 <HAL_DMA_Init+0x628>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a3a      	ldr	r2, [pc, #232]	@ (8003dc8 <HAL_DMA_Init+0x678>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d04a      	beq.n	8003d78 <HAL_DMA_Init+0x628>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a39      	ldr	r2, [pc, #228]	@ (8003dcc <HAL_DMA_Init+0x67c>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d045      	beq.n	8003d78 <HAL_DMA_Init+0x628>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a37      	ldr	r2, [pc, #220]	@ (8003dd0 <HAL_DMA_Init+0x680>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d040      	beq.n	8003d78 <HAL_DMA_Init+0x628>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a36      	ldr	r2, [pc, #216]	@ (8003dd4 <HAL_DMA_Init+0x684>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d03b      	beq.n	8003d78 <HAL_DMA_Init+0x628>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a34      	ldr	r2, [pc, #208]	@ (8003dd8 <HAL_DMA_Init+0x688>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d036      	beq.n	8003d78 <HAL_DMA_Init+0x628>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a33      	ldr	r2, [pc, #204]	@ (8003ddc <HAL_DMA_Init+0x68c>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d031      	beq.n	8003d78 <HAL_DMA_Init+0x628>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a31      	ldr	r2, [pc, #196]	@ (8003de0 <HAL_DMA_Init+0x690>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d02c      	beq.n	8003d78 <HAL_DMA_Init+0x628>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a30      	ldr	r2, [pc, #192]	@ (8003de4 <HAL_DMA_Init+0x694>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d027      	beq.n	8003d78 <HAL_DMA_Init+0x628>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a13      	ldr	r2, [pc, #76]	@ (8003d7c <HAL_DMA_Init+0x62c>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d022      	beq.n	8003d78 <HAL_DMA_Init+0x628>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a12      	ldr	r2, [pc, #72]	@ (8003d80 <HAL_DMA_Init+0x630>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d01d      	beq.n	8003d78 <HAL_DMA_Init+0x628>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a10      	ldr	r2, [pc, #64]	@ (8003d84 <HAL_DMA_Init+0x634>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d018      	beq.n	8003d78 <HAL_DMA_Init+0x628>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a0f      	ldr	r2, [pc, #60]	@ (8003d88 <HAL_DMA_Init+0x638>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d013      	beq.n	8003d78 <HAL_DMA_Init+0x628>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a0d      	ldr	r2, [pc, #52]	@ (8003d8c <HAL_DMA_Init+0x63c>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d00e      	beq.n	8003d78 <HAL_DMA_Init+0x628>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a0c      	ldr	r2, [pc, #48]	@ (8003d90 <HAL_DMA_Init+0x640>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d009      	beq.n	8003d78 <HAL_DMA_Init+0x628>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a0a      	ldr	r2, [pc, #40]	@ (8003d94 <HAL_DMA_Init+0x644>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d004      	beq.n	8003d78 <HAL_DMA_Init+0x628>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a09      	ldr	r2, [pc, #36]	@ (8003d98 <HAL_DMA_Init+0x648>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d137      	bne.n	8003de8 <HAL_DMA_Init+0x698>
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e036      	b.n	8003dea <HAL_DMA_Init+0x69a>
 8003d7c:	58025408 	.word	0x58025408
 8003d80:	5802541c 	.word	0x5802541c
 8003d84:	58025430 	.word	0x58025430
 8003d88:	58025444 	.word	0x58025444
 8003d8c:	58025458 	.word	0x58025458
 8003d90:	5802546c 	.word	0x5802546c
 8003d94:	58025480 	.word	0x58025480
 8003d98:	58025494 	.word	0x58025494
 8003d9c:	fffe000f 	.word	0xfffe000f
 8003da0:	a7fdabf8 	.word	0xa7fdabf8
 8003da4:	cccccccd 	.word	0xcccccccd
 8003da8:	40020010 	.word	0x40020010
 8003dac:	40020028 	.word	0x40020028
 8003db0:	40020040 	.word	0x40020040
 8003db4:	40020058 	.word	0x40020058
 8003db8:	40020070 	.word	0x40020070
 8003dbc:	40020088 	.word	0x40020088
 8003dc0:	400200a0 	.word	0x400200a0
 8003dc4:	400200b8 	.word	0x400200b8
 8003dc8:	40020410 	.word	0x40020410
 8003dcc:	40020428 	.word	0x40020428
 8003dd0:	40020440 	.word	0x40020440
 8003dd4:	40020458 	.word	0x40020458
 8003dd8:	40020470 	.word	0x40020470
 8003ddc:	40020488 	.word	0x40020488
 8003de0:	400204a0 	.word	0x400204a0
 8003de4:	400204b8 	.word	0x400204b8
 8003de8:	2300      	movs	r3, #0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d032      	beq.n	8003e54 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f002 fa7e 	bl	80062f0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	2b80      	cmp	r3, #128	@ 0x80
 8003dfa:	d102      	bne.n	8003e02 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685a      	ldr	r2, [r3, #4]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e0a:	b2d2      	uxtb	r2, r2
 8003e0c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003e16:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d010      	beq.n	8003e42 <HAL_DMA_Init+0x6f2>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	2b08      	cmp	r3, #8
 8003e26:	d80c      	bhi.n	8003e42 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f002 fafb 	bl	8006424 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e32:	2200      	movs	r2, #0
 8003e34:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003e3e:	605a      	str	r2, [r3, #4]
 8003e40:	e008      	b.n	8003e54 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3718      	adds	r7, #24
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
 8003e78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e226      	b.n	80042d6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d101      	bne.n	8003e96 <HAL_DMA_Start_IT+0x2a>
 8003e92:	2302      	movs	r3, #2
 8003e94:	e21f      	b.n	80042d6 <HAL_DMA_Start_IT+0x46a>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	f040 820a 	bne.w	80042c0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2202      	movs	r2, #2
 8003eb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a68      	ldr	r2, [pc, #416]	@ (8004060 <HAL_DMA_Start_IT+0x1f4>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d04a      	beq.n	8003f5a <HAL_DMA_Start_IT+0xee>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a66      	ldr	r2, [pc, #408]	@ (8004064 <HAL_DMA_Start_IT+0x1f8>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d045      	beq.n	8003f5a <HAL_DMA_Start_IT+0xee>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a65      	ldr	r2, [pc, #404]	@ (8004068 <HAL_DMA_Start_IT+0x1fc>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d040      	beq.n	8003f5a <HAL_DMA_Start_IT+0xee>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a63      	ldr	r2, [pc, #396]	@ (800406c <HAL_DMA_Start_IT+0x200>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d03b      	beq.n	8003f5a <HAL_DMA_Start_IT+0xee>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a62      	ldr	r2, [pc, #392]	@ (8004070 <HAL_DMA_Start_IT+0x204>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d036      	beq.n	8003f5a <HAL_DMA_Start_IT+0xee>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a60      	ldr	r2, [pc, #384]	@ (8004074 <HAL_DMA_Start_IT+0x208>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d031      	beq.n	8003f5a <HAL_DMA_Start_IT+0xee>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a5f      	ldr	r2, [pc, #380]	@ (8004078 <HAL_DMA_Start_IT+0x20c>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d02c      	beq.n	8003f5a <HAL_DMA_Start_IT+0xee>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a5d      	ldr	r2, [pc, #372]	@ (800407c <HAL_DMA_Start_IT+0x210>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d027      	beq.n	8003f5a <HAL_DMA_Start_IT+0xee>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a5c      	ldr	r2, [pc, #368]	@ (8004080 <HAL_DMA_Start_IT+0x214>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d022      	beq.n	8003f5a <HAL_DMA_Start_IT+0xee>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a5a      	ldr	r2, [pc, #360]	@ (8004084 <HAL_DMA_Start_IT+0x218>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d01d      	beq.n	8003f5a <HAL_DMA_Start_IT+0xee>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a59      	ldr	r2, [pc, #356]	@ (8004088 <HAL_DMA_Start_IT+0x21c>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d018      	beq.n	8003f5a <HAL_DMA_Start_IT+0xee>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a57      	ldr	r2, [pc, #348]	@ (800408c <HAL_DMA_Start_IT+0x220>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d013      	beq.n	8003f5a <HAL_DMA_Start_IT+0xee>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a56      	ldr	r2, [pc, #344]	@ (8004090 <HAL_DMA_Start_IT+0x224>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d00e      	beq.n	8003f5a <HAL_DMA_Start_IT+0xee>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a54      	ldr	r2, [pc, #336]	@ (8004094 <HAL_DMA_Start_IT+0x228>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d009      	beq.n	8003f5a <HAL_DMA_Start_IT+0xee>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a53      	ldr	r2, [pc, #332]	@ (8004098 <HAL_DMA_Start_IT+0x22c>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d004      	beq.n	8003f5a <HAL_DMA_Start_IT+0xee>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a51      	ldr	r2, [pc, #324]	@ (800409c <HAL_DMA_Start_IT+0x230>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d108      	bne.n	8003f6c <HAL_DMA_Start_IT+0x100>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 0201 	bic.w	r2, r2, #1
 8003f68:	601a      	str	r2, [r3, #0]
 8003f6a:	e007      	b.n	8003f7c <HAL_DMA_Start_IT+0x110>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f022 0201 	bic.w	r2, r2, #1
 8003f7a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	68b9      	ldr	r1, [r7, #8]
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f001 fea2 	bl	8005ccc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a34      	ldr	r2, [pc, #208]	@ (8004060 <HAL_DMA_Start_IT+0x1f4>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d04a      	beq.n	8004028 <HAL_DMA_Start_IT+0x1bc>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a33      	ldr	r2, [pc, #204]	@ (8004064 <HAL_DMA_Start_IT+0x1f8>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d045      	beq.n	8004028 <HAL_DMA_Start_IT+0x1bc>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a31      	ldr	r2, [pc, #196]	@ (8004068 <HAL_DMA_Start_IT+0x1fc>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d040      	beq.n	8004028 <HAL_DMA_Start_IT+0x1bc>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a30      	ldr	r2, [pc, #192]	@ (800406c <HAL_DMA_Start_IT+0x200>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d03b      	beq.n	8004028 <HAL_DMA_Start_IT+0x1bc>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a2e      	ldr	r2, [pc, #184]	@ (8004070 <HAL_DMA_Start_IT+0x204>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d036      	beq.n	8004028 <HAL_DMA_Start_IT+0x1bc>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a2d      	ldr	r2, [pc, #180]	@ (8004074 <HAL_DMA_Start_IT+0x208>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d031      	beq.n	8004028 <HAL_DMA_Start_IT+0x1bc>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a2b      	ldr	r2, [pc, #172]	@ (8004078 <HAL_DMA_Start_IT+0x20c>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d02c      	beq.n	8004028 <HAL_DMA_Start_IT+0x1bc>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a2a      	ldr	r2, [pc, #168]	@ (800407c <HAL_DMA_Start_IT+0x210>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d027      	beq.n	8004028 <HAL_DMA_Start_IT+0x1bc>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a28      	ldr	r2, [pc, #160]	@ (8004080 <HAL_DMA_Start_IT+0x214>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d022      	beq.n	8004028 <HAL_DMA_Start_IT+0x1bc>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a27      	ldr	r2, [pc, #156]	@ (8004084 <HAL_DMA_Start_IT+0x218>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d01d      	beq.n	8004028 <HAL_DMA_Start_IT+0x1bc>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a25      	ldr	r2, [pc, #148]	@ (8004088 <HAL_DMA_Start_IT+0x21c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d018      	beq.n	8004028 <HAL_DMA_Start_IT+0x1bc>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a24      	ldr	r2, [pc, #144]	@ (800408c <HAL_DMA_Start_IT+0x220>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d013      	beq.n	8004028 <HAL_DMA_Start_IT+0x1bc>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a22      	ldr	r2, [pc, #136]	@ (8004090 <HAL_DMA_Start_IT+0x224>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d00e      	beq.n	8004028 <HAL_DMA_Start_IT+0x1bc>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a21      	ldr	r2, [pc, #132]	@ (8004094 <HAL_DMA_Start_IT+0x228>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d009      	beq.n	8004028 <HAL_DMA_Start_IT+0x1bc>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a1f      	ldr	r2, [pc, #124]	@ (8004098 <HAL_DMA_Start_IT+0x22c>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d004      	beq.n	8004028 <HAL_DMA_Start_IT+0x1bc>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a1e      	ldr	r2, [pc, #120]	@ (800409c <HAL_DMA_Start_IT+0x230>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d101      	bne.n	800402c <HAL_DMA_Start_IT+0x1c0>
 8004028:	2301      	movs	r3, #1
 800402a:	e000      	b.n	800402e <HAL_DMA_Start_IT+0x1c2>
 800402c:	2300      	movs	r3, #0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d036      	beq.n	80040a0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f023 021e 	bic.w	r2, r3, #30
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f042 0216 	orr.w	r2, r2, #22
 8004044:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404a:	2b00      	cmp	r3, #0
 800404c:	d03e      	beq.n	80040cc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f042 0208 	orr.w	r2, r2, #8
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	e035      	b.n	80040cc <HAL_DMA_Start_IT+0x260>
 8004060:	40020010 	.word	0x40020010
 8004064:	40020028 	.word	0x40020028
 8004068:	40020040 	.word	0x40020040
 800406c:	40020058 	.word	0x40020058
 8004070:	40020070 	.word	0x40020070
 8004074:	40020088 	.word	0x40020088
 8004078:	400200a0 	.word	0x400200a0
 800407c:	400200b8 	.word	0x400200b8
 8004080:	40020410 	.word	0x40020410
 8004084:	40020428 	.word	0x40020428
 8004088:	40020440 	.word	0x40020440
 800408c:	40020458 	.word	0x40020458
 8004090:	40020470 	.word	0x40020470
 8004094:	40020488 	.word	0x40020488
 8004098:	400204a0 	.word	0x400204a0
 800409c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f023 020e 	bic.w	r2, r3, #14
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f042 020a 	orr.w	r2, r2, #10
 80040b2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d007      	beq.n	80040cc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f042 0204 	orr.w	r2, r2, #4
 80040ca:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a83      	ldr	r2, [pc, #524]	@ (80042e0 <HAL_DMA_Start_IT+0x474>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d072      	beq.n	80041bc <HAL_DMA_Start_IT+0x350>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a82      	ldr	r2, [pc, #520]	@ (80042e4 <HAL_DMA_Start_IT+0x478>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d06d      	beq.n	80041bc <HAL_DMA_Start_IT+0x350>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a80      	ldr	r2, [pc, #512]	@ (80042e8 <HAL_DMA_Start_IT+0x47c>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d068      	beq.n	80041bc <HAL_DMA_Start_IT+0x350>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a7f      	ldr	r2, [pc, #508]	@ (80042ec <HAL_DMA_Start_IT+0x480>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d063      	beq.n	80041bc <HAL_DMA_Start_IT+0x350>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a7d      	ldr	r2, [pc, #500]	@ (80042f0 <HAL_DMA_Start_IT+0x484>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d05e      	beq.n	80041bc <HAL_DMA_Start_IT+0x350>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a7c      	ldr	r2, [pc, #496]	@ (80042f4 <HAL_DMA_Start_IT+0x488>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d059      	beq.n	80041bc <HAL_DMA_Start_IT+0x350>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a7a      	ldr	r2, [pc, #488]	@ (80042f8 <HAL_DMA_Start_IT+0x48c>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d054      	beq.n	80041bc <HAL_DMA_Start_IT+0x350>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a79      	ldr	r2, [pc, #484]	@ (80042fc <HAL_DMA_Start_IT+0x490>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d04f      	beq.n	80041bc <HAL_DMA_Start_IT+0x350>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a77      	ldr	r2, [pc, #476]	@ (8004300 <HAL_DMA_Start_IT+0x494>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d04a      	beq.n	80041bc <HAL_DMA_Start_IT+0x350>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a76      	ldr	r2, [pc, #472]	@ (8004304 <HAL_DMA_Start_IT+0x498>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d045      	beq.n	80041bc <HAL_DMA_Start_IT+0x350>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a74      	ldr	r2, [pc, #464]	@ (8004308 <HAL_DMA_Start_IT+0x49c>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d040      	beq.n	80041bc <HAL_DMA_Start_IT+0x350>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a73      	ldr	r2, [pc, #460]	@ (800430c <HAL_DMA_Start_IT+0x4a0>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d03b      	beq.n	80041bc <HAL_DMA_Start_IT+0x350>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a71      	ldr	r2, [pc, #452]	@ (8004310 <HAL_DMA_Start_IT+0x4a4>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d036      	beq.n	80041bc <HAL_DMA_Start_IT+0x350>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a70      	ldr	r2, [pc, #448]	@ (8004314 <HAL_DMA_Start_IT+0x4a8>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d031      	beq.n	80041bc <HAL_DMA_Start_IT+0x350>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a6e      	ldr	r2, [pc, #440]	@ (8004318 <HAL_DMA_Start_IT+0x4ac>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d02c      	beq.n	80041bc <HAL_DMA_Start_IT+0x350>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a6d      	ldr	r2, [pc, #436]	@ (800431c <HAL_DMA_Start_IT+0x4b0>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d027      	beq.n	80041bc <HAL_DMA_Start_IT+0x350>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a6b      	ldr	r2, [pc, #428]	@ (8004320 <HAL_DMA_Start_IT+0x4b4>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d022      	beq.n	80041bc <HAL_DMA_Start_IT+0x350>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a6a      	ldr	r2, [pc, #424]	@ (8004324 <HAL_DMA_Start_IT+0x4b8>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d01d      	beq.n	80041bc <HAL_DMA_Start_IT+0x350>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a68      	ldr	r2, [pc, #416]	@ (8004328 <HAL_DMA_Start_IT+0x4bc>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d018      	beq.n	80041bc <HAL_DMA_Start_IT+0x350>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a67      	ldr	r2, [pc, #412]	@ (800432c <HAL_DMA_Start_IT+0x4c0>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d013      	beq.n	80041bc <HAL_DMA_Start_IT+0x350>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a65      	ldr	r2, [pc, #404]	@ (8004330 <HAL_DMA_Start_IT+0x4c4>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d00e      	beq.n	80041bc <HAL_DMA_Start_IT+0x350>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a64      	ldr	r2, [pc, #400]	@ (8004334 <HAL_DMA_Start_IT+0x4c8>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d009      	beq.n	80041bc <HAL_DMA_Start_IT+0x350>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a62      	ldr	r2, [pc, #392]	@ (8004338 <HAL_DMA_Start_IT+0x4cc>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d004      	beq.n	80041bc <HAL_DMA_Start_IT+0x350>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a61      	ldr	r2, [pc, #388]	@ (800433c <HAL_DMA_Start_IT+0x4d0>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d101      	bne.n	80041c0 <HAL_DMA_Start_IT+0x354>
 80041bc:	2301      	movs	r3, #1
 80041be:	e000      	b.n	80041c2 <HAL_DMA_Start_IT+0x356>
 80041c0:	2300      	movs	r3, #0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d01a      	beq.n	80041fc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d007      	beq.n	80041e4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041e2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d007      	beq.n	80041fc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041fa:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a37      	ldr	r2, [pc, #220]	@ (80042e0 <HAL_DMA_Start_IT+0x474>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d04a      	beq.n	800429c <HAL_DMA_Start_IT+0x430>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a36      	ldr	r2, [pc, #216]	@ (80042e4 <HAL_DMA_Start_IT+0x478>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d045      	beq.n	800429c <HAL_DMA_Start_IT+0x430>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a34      	ldr	r2, [pc, #208]	@ (80042e8 <HAL_DMA_Start_IT+0x47c>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d040      	beq.n	800429c <HAL_DMA_Start_IT+0x430>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a33      	ldr	r2, [pc, #204]	@ (80042ec <HAL_DMA_Start_IT+0x480>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d03b      	beq.n	800429c <HAL_DMA_Start_IT+0x430>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a31      	ldr	r2, [pc, #196]	@ (80042f0 <HAL_DMA_Start_IT+0x484>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d036      	beq.n	800429c <HAL_DMA_Start_IT+0x430>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a30      	ldr	r2, [pc, #192]	@ (80042f4 <HAL_DMA_Start_IT+0x488>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d031      	beq.n	800429c <HAL_DMA_Start_IT+0x430>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a2e      	ldr	r2, [pc, #184]	@ (80042f8 <HAL_DMA_Start_IT+0x48c>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d02c      	beq.n	800429c <HAL_DMA_Start_IT+0x430>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a2d      	ldr	r2, [pc, #180]	@ (80042fc <HAL_DMA_Start_IT+0x490>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d027      	beq.n	800429c <HAL_DMA_Start_IT+0x430>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a2b      	ldr	r2, [pc, #172]	@ (8004300 <HAL_DMA_Start_IT+0x494>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d022      	beq.n	800429c <HAL_DMA_Start_IT+0x430>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a2a      	ldr	r2, [pc, #168]	@ (8004304 <HAL_DMA_Start_IT+0x498>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d01d      	beq.n	800429c <HAL_DMA_Start_IT+0x430>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a28      	ldr	r2, [pc, #160]	@ (8004308 <HAL_DMA_Start_IT+0x49c>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d018      	beq.n	800429c <HAL_DMA_Start_IT+0x430>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a27      	ldr	r2, [pc, #156]	@ (800430c <HAL_DMA_Start_IT+0x4a0>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d013      	beq.n	800429c <HAL_DMA_Start_IT+0x430>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a25      	ldr	r2, [pc, #148]	@ (8004310 <HAL_DMA_Start_IT+0x4a4>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d00e      	beq.n	800429c <HAL_DMA_Start_IT+0x430>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a24      	ldr	r2, [pc, #144]	@ (8004314 <HAL_DMA_Start_IT+0x4a8>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d009      	beq.n	800429c <HAL_DMA_Start_IT+0x430>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a22      	ldr	r2, [pc, #136]	@ (8004318 <HAL_DMA_Start_IT+0x4ac>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d004      	beq.n	800429c <HAL_DMA_Start_IT+0x430>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a21      	ldr	r2, [pc, #132]	@ (800431c <HAL_DMA_Start_IT+0x4b0>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d108      	bne.n	80042ae <HAL_DMA_Start_IT+0x442>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f042 0201 	orr.w	r2, r2, #1
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	e012      	b.n	80042d4 <HAL_DMA_Start_IT+0x468>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f042 0201 	orr.w	r2, r2, #1
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	e009      	b.n	80042d4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80042c6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80042d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3718      	adds	r7, #24
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	40020010 	.word	0x40020010
 80042e4:	40020028 	.word	0x40020028
 80042e8:	40020040 	.word	0x40020040
 80042ec:	40020058 	.word	0x40020058
 80042f0:	40020070 	.word	0x40020070
 80042f4:	40020088 	.word	0x40020088
 80042f8:	400200a0 	.word	0x400200a0
 80042fc:	400200b8 	.word	0x400200b8
 8004300:	40020410 	.word	0x40020410
 8004304:	40020428 	.word	0x40020428
 8004308:	40020440 	.word	0x40020440
 800430c:	40020458 	.word	0x40020458
 8004310:	40020470 	.word	0x40020470
 8004314:	40020488 	.word	0x40020488
 8004318:	400204a0 	.word	0x400204a0
 800431c:	400204b8 	.word	0x400204b8
 8004320:	58025408 	.word	0x58025408
 8004324:	5802541c 	.word	0x5802541c
 8004328:	58025430 	.word	0x58025430
 800432c:	58025444 	.word	0x58025444
 8004330:	58025458 	.word	0x58025458
 8004334:	5802546c 	.word	0x5802546c
 8004338:	58025480 	.word	0x58025480
 800433c:	58025494 	.word	0x58025494

08004340 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004348:	f7ff f84a 	bl	80033e0 <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d101      	bne.n	8004358 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e2dc      	b.n	8004912 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d008      	beq.n	8004376 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2280      	movs	r2, #128	@ 0x80
 8004368:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e2cd      	b.n	8004912 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a76      	ldr	r2, [pc, #472]	@ (8004554 <HAL_DMA_Abort+0x214>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d04a      	beq.n	8004416 <HAL_DMA_Abort+0xd6>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a74      	ldr	r2, [pc, #464]	@ (8004558 <HAL_DMA_Abort+0x218>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d045      	beq.n	8004416 <HAL_DMA_Abort+0xd6>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a73      	ldr	r2, [pc, #460]	@ (800455c <HAL_DMA_Abort+0x21c>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d040      	beq.n	8004416 <HAL_DMA_Abort+0xd6>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a71      	ldr	r2, [pc, #452]	@ (8004560 <HAL_DMA_Abort+0x220>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d03b      	beq.n	8004416 <HAL_DMA_Abort+0xd6>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a70      	ldr	r2, [pc, #448]	@ (8004564 <HAL_DMA_Abort+0x224>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d036      	beq.n	8004416 <HAL_DMA_Abort+0xd6>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a6e      	ldr	r2, [pc, #440]	@ (8004568 <HAL_DMA_Abort+0x228>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d031      	beq.n	8004416 <HAL_DMA_Abort+0xd6>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a6d      	ldr	r2, [pc, #436]	@ (800456c <HAL_DMA_Abort+0x22c>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d02c      	beq.n	8004416 <HAL_DMA_Abort+0xd6>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a6b      	ldr	r2, [pc, #428]	@ (8004570 <HAL_DMA_Abort+0x230>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d027      	beq.n	8004416 <HAL_DMA_Abort+0xd6>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a6a      	ldr	r2, [pc, #424]	@ (8004574 <HAL_DMA_Abort+0x234>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d022      	beq.n	8004416 <HAL_DMA_Abort+0xd6>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a68      	ldr	r2, [pc, #416]	@ (8004578 <HAL_DMA_Abort+0x238>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d01d      	beq.n	8004416 <HAL_DMA_Abort+0xd6>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a67      	ldr	r2, [pc, #412]	@ (800457c <HAL_DMA_Abort+0x23c>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d018      	beq.n	8004416 <HAL_DMA_Abort+0xd6>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a65      	ldr	r2, [pc, #404]	@ (8004580 <HAL_DMA_Abort+0x240>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d013      	beq.n	8004416 <HAL_DMA_Abort+0xd6>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a64      	ldr	r2, [pc, #400]	@ (8004584 <HAL_DMA_Abort+0x244>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d00e      	beq.n	8004416 <HAL_DMA_Abort+0xd6>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a62      	ldr	r2, [pc, #392]	@ (8004588 <HAL_DMA_Abort+0x248>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d009      	beq.n	8004416 <HAL_DMA_Abort+0xd6>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a61      	ldr	r2, [pc, #388]	@ (800458c <HAL_DMA_Abort+0x24c>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d004      	beq.n	8004416 <HAL_DMA_Abort+0xd6>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a5f      	ldr	r2, [pc, #380]	@ (8004590 <HAL_DMA_Abort+0x250>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d101      	bne.n	800441a <HAL_DMA_Abort+0xda>
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <HAL_DMA_Abort+0xdc>
 800441a:	2300      	movs	r3, #0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d013      	beq.n	8004448 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 021e 	bic.w	r2, r2, #30
 800442e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	695a      	ldr	r2, [r3, #20]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800443e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	617b      	str	r3, [r7, #20]
 8004446:	e00a      	b.n	800445e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f022 020e 	bic.w	r2, r2, #14
 8004456:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a3c      	ldr	r2, [pc, #240]	@ (8004554 <HAL_DMA_Abort+0x214>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d072      	beq.n	800454e <HAL_DMA_Abort+0x20e>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a3a      	ldr	r2, [pc, #232]	@ (8004558 <HAL_DMA_Abort+0x218>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d06d      	beq.n	800454e <HAL_DMA_Abort+0x20e>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a39      	ldr	r2, [pc, #228]	@ (800455c <HAL_DMA_Abort+0x21c>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d068      	beq.n	800454e <HAL_DMA_Abort+0x20e>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a37      	ldr	r2, [pc, #220]	@ (8004560 <HAL_DMA_Abort+0x220>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d063      	beq.n	800454e <HAL_DMA_Abort+0x20e>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a36      	ldr	r2, [pc, #216]	@ (8004564 <HAL_DMA_Abort+0x224>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d05e      	beq.n	800454e <HAL_DMA_Abort+0x20e>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a34      	ldr	r2, [pc, #208]	@ (8004568 <HAL_DMA_Abort+0x228>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d059      	beq.n	800454e <HAL_DMA_Abort+0x20e>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a33      	ldr	r2, [pc, #204]	@ (800456c <HAL_DMA_Abort+0x22c>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d054      	beq.n	800454e <HAL_DMA_Abort+0x20e>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a31      	ldr	r2, [pc, #196]	@ (8004570 <HAL_DMA_Abort+0x230>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d04f      	beq.n	800454e <HAL_DMA_Abort+0x20e>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a30      	ldr	r2, [pc, #192]	@ (8004574 <HAL_DMA_Abort+0x234>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d04a      	beq.n	800454e <HAL_DMA_Abort+0x20e>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a2e      	ldr	r2, [pc, #184]	@ (8004578 <HAL_DMA_Abort+0x238>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d045      	beq.n	800454e <HAL_DMA_Abort+0x20e>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a2d      	ldr	r2, [pc, #180]	@ (800457c <HAL_DMA_Abort+0x23c>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d040      	beq.n	800454e <HAL_DMA_Abort+0x20e>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a2b      	ldr	r2, [pc, #172]	@ (8004580 <HAL_DMA_Abort+0x240>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d03b      	beq.n	800454e <HAL_DMA_Abort+0x20e>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a2a      	ldr	r2, [pc, #168]	@ (8004584 <HAL_DMA_Abort+0x244>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d036      	beq.n	800454e <HAL_DMA_Abort+0x20e>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a28      	ldr	r2, [pc, #160]	@ (8004588 <HAL_DMA_Abort+0x248>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d031      	beq.n	800454e <HAL_DMA_Abort+0x20e>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a27      	ldr	r2, [pc, #156]	@ (800458c <HAL_DMA_Abort+0x24c>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d02c      	beq.n	800454e <HAL_DMA_Abort+0x20e>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a25      	ldr	r2, [pc, #148]	@ (8004590 <HAL_DMA_Abort+0x250>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d027      	beq.n	800454e <HAL_DMA_Abort+0x20e>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a24      	ldr	r2, [pc, #144]	@ (8004594 <HAL_DMA_Abort+0x254>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d022      	beq.n	800454e <HAL_DMA_Abort+0x20e>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a22      	ldr	r2, [pc, #136]	@ (8004598 <HAL_DMA_Abort+0x258>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d01d      	beq.n	800454e <HAL_DMA_Abort+0x20e>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a21      	ldr	r2, [pc, #132]	@ (800459c <HAL_DMA_Abort+0x25c>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d018      	beq.n	800454e <HAL_DMA_Abort+0x20e>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a1f      	ldr	r2, [pc, #124]	@ (80045a0 <HAL_DMA_Abort+0x260>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d013      	beq.n	800454e <HAL_DMA_Abort+0x20e>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a1e      	ldr	r2, [pc, #120]	@ (80045a4 <HAL_DMA_Abort+0x264>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d00e      	beq.n	800454e <HAL_DMA_Abort+0x20e>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a1c      	ldr	r2, [pc, #112]	@ (80045a8 <HAL_DMA_Abort+0x268>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d009      	beq.n	800454e <HAL_DMA_Abort+0x20e>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a1b      	ldr	r2, [pc, #108]	@ (80045ac <HAL_DMA_Abort+0x26c>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d004      	beq.n	800454e <HAL_DMA_Abort+0x20e>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a19      	ldr	r2, [pc, #100]	@ (80045b0 <HAL_DMA_Abort+0x270>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d132      	bne.n	80045b4 <HAL_DMA_Abort+0x274>
 800454e:	2301      	movs	r3, #1
 8004550:	e031      	b.n	80045b6 <HAL_DMA_Abort+0x276>
 8004552:	bf00      	nop
 8004554:	40020010 	.word	0x40020010
 8004558:	40020028 	.word	0x40020028
 800455c:	40020040 	.word	0x40020040
 8004560:	40020058 	.word	0x40020058
 8004564:	40020070 	.word	0x40020070
 8004568:	40020088 	.word	0x40020088
 800456c:	400200a0 	.word	0x400200a0
 8004570:	400200b8 	.word	0x400200b8
 8004574:	40020410 	.word	0x40020410
 8004578:	40020428 	.word	0x40020428
 800457c:	40020440 	.word	0x40020440
 8004580:	40020458 	.word	0x40020458
 8004584:	40020470 	.word	0x40020470
 8004588:	40020488 	.word	0x40020488
 800458c:	400204a0 	.word	0x400204a0
 8004590:	400204b8 	.word	0x400204b8
 8004594:	58025408 	.word	0x58025408
 8004598:	5802541c 	.word	0x5802541c
 800459c:	58025430 	.word	0x58025430
 80045a0:	58025444 	.word	0x58025444
 80045a4:	58025458 	.word	0x58025458
 80045a8:	5802546c 	.word	0x5802546c
 80045ac:	58025480 	.word	0x58025480
 80045b0:	58025494 	.word	0x58025494
 80045b4:	2300      	movs	r3, #0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d007      	beq.n	80045ca <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80045c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a6d      	ldr	r2, [pc, #436]	@ (8004784 <HAL_DMA_Abort+0x444>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d04a      	beq.n	800466a <HAL_DMA_Abort+0x32a>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a6b      	ldr	r2, [pc, #428]	@ (8004788 <HAL_DMA_Abort+0x448>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d045      	beq.n	800466a <HAL_DMA_Abort+0x32a>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a6a      	ldr	r2, [pc, #424]	@ (800478c <HAL_DMA_Abort+0x44c>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d040      	beq.n	800466a <HAL_DMA_Abort+0x32a>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a68      	ldr	r2, [pc, #416]	@ (8004790 <HAL_DMA_Abort+0x450>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d03b      	beq.n	800466a <HAL_DMA_Abort+0x32a>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a67      	ldr	r2, [pc, #412]	@ (8004794 <HAL_DMA_Abort+0x454>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d036      	beq.n	800466a <HAL_DMA_Abort+0x32a>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a65      	ldr	r2, [pc, #404]	@ (8004798 <HAL_DMA_Abort+0x458>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d031      	beq.n	800466a <HAL_DMA_Abort+0x32a>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a64      	ldr	r2, [pc, #400]	@ (800479c <HAL_DMA_Abort+0x45c>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d02c      	beq.n	800466a <HAL_DMA_Abort+0x32a>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a62      	ldr	r2, [pc, #392]	@ (80047a0 <HAL_DMA_Abort+0x460>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d027      	beq.n	800466a <HAL_DMA_Abort+0x32a>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a61      	ldr	r2, [pc, #388]	@ (80047a4 <HAL_DMA_Abort+0x464>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d022      	beq.n	800466a <HAL_DMA_Abort+0x32a>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a5f      	ldr	r2, [pc, #380]	@ (80047a8 <HAL_DMA_Abort+0x468>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d01d      	beq.n	800466a <HAL_DMA_Abort+0x32a>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a5e      	ldr	r2, [pc, #376]	@ (80047ac <HAL_DMA_Abort+0x46c>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d018      	beq.n	800466a <HAL_DMA_Abort+0x32a>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a5c      	ldr	r2, [pc, #368]	@ (80047b0 <HAL_DMA_Abort+0x470>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d013      	beq.n	800466a <HAL_DMA_Abort+0x32a>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a5b      	ldr	r2, [pc, #364]	@ (80047b4 <HAL_DMA_Abort+0x474>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d00e      	beq.n	800466a <HAL_DMA_Abort+0x32a>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a59      	ldr	r2, [pc, #356]	@ (80047b8 <HAL_DMA_Abort+0x478>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d009      	beq.n	800466a <HAL_DMA_Abort+0x32a>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a58      	ldr	r2, [pc, #352]	@ (80047bc <HAL_DMA_Abort+0x47c>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d004      	beq.n	800466a <HAL_DMA_Abort+0x32a>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a56      	ldr	r2, [pc, #344]	@ (80047c0 <HAL_DMA_Abort+0x480>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d108      	bne.n	800467c <HAL_DMA_Abort+0x33c>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 0201 	bic.w	r2, r2, #1
 8004678:	601a      	str	r2, [r3, #0]
 800467a:	e007      	b.n	800468c <HAL_DMA_Abort+0x34c>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f022 0201 	bic.w	r2, r2, #1
 800468a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800468c:	e013      	b.n	80046b6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800468e:	f7fe fea7 	bl	80033e0 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	2b05      	cmp	r3, #5
 800469a:	d90c      	bls.n	80046b6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2220      	movs	r2, #32
 80046a0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2203      	movs	r2, #3
 80046a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e12d      	b.n	8004912 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1e5      	bne.n	800468e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a2f      	ldr	r2, [pc, #188]	@ (8004784 <HAL_DMA_Abort+0x444>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d04a      	beq.n	8004762 <HAL_DMA_Abort+0x422>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a2d      	ldr	r2, [pc, #180]	@ (8004788 <HAL_DMA_Abort+0x448>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d045      	beq.n	8004762 <HAL_DMA_Abort+0x422>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a2c      	ldr	r2, [pc, #176]	@ (800478c <HAL_DMA_Abort+0x44c>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d040      	beq.n	8004762 <HAL_DMA_Abort+0x422>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a2a      	ldr	r2, [pc, #168]	@ (8004790 <HAL_DMA_Abort+0x450>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d03b      	beq.n	8004762 <HAL_DMA_Abort+0x422>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a29      	ldr	r2, [pc, #164]	@ (8004794 <HAL_DMA_Abort+0x454>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d036      	beq.n	8004762 <HAL_DMA_Abort+0x422>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a27      	ldr	r2, [pc, #156]	@ (8004798 <HAL_DMA_Abort+0x458>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d031      	beq.n	8004762 <HAL_DMA_Abort+0x422>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a26      	ldr	r2, [pc, #152]	@ (800479c <HAL_DMA_Abort+0x45c>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d02c      	beq.n	8004762 <HAL_DMA_Abort+0x422>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a24      	ldr	r2, [pc, #144]	@ (80047a0 <HAL_DMA_Abort+0x460>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d027      	beq.n	8004762 <HAL_DMA_Abort+0x422>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a23      	ldr	r2, [pc, #140]	@ (80047a4 <HAL_DMA_Abort+0x464>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d022      	beq.n	8004762 <HAL_DMA_Abort+0x422>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a21      	ldr	r2, [pc, #132]	@ (80047a8 <HAL_DMA_Abort+0x468>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d01d      	beq.n	8004762 <HAL_DMA_Abort+0x422>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a20      	ldr	r2, [pc, #128]	@ (80047ac <HAL_DMA_Abort+0x46c>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d018      	beq.n	8004762 <HAL_DMA_Abort+0x422>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a1e      	ldr	r2, [pc, #120]	@ (80047b0 <HAL_DMA_Abort+0x470>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d013      	beq.n	8004762 <HAL_DMA_Abort+0x422>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a1d      	ldr	r2, [pc, #116]	@ (80047b4 <HAL_DMA_Abort+0x474>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d00e      	beq.n	8004762 <HAL_DMA_Abort+0x422>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a1b      	ldr	r2, [pc, #108]	@ (80047b8 <HAL_DMA_Abort+0x478>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d009      	beq.n	8004762 <HAL_DMA_Abort+0x422>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a1a      	ldr	r2, [pc, #104]	@ (80047bc <HAL_DMA_Abort+0x47c>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d004      	beq.n	8004762 <HAL_DMA_Abort+0x422>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a18      	ldr	r2, [pc, #96]	@ (80047c0 <HAL_DMA_Abort+0x480>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d101      	bne.n	8004766 <HAL_DMA_Abort+0x426>
 8004762:	2301      	movs	r3, #1
 8004764:	e000      	b.n	8004768 <HAL_DMA_Abort+0x428>
 8004766:	2300      	movs	r3, #0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d02b      	beq.n	80047c4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004770:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004776:	f003 031f 	and.w	r3, r3, #31
 800477a:	223f      	movs	r2, #63	@ 0x3f
 800477c:	409a      	lsls	r2, r3
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	609a      	str	r2, [r3, #8]
 8004782:	e02a      	b.n	80047da <HAL_DMA_Abort+0x49a>
 8004784:	40020010 	.word	0x40020010
 8004788:	40020028 	.word	0x40020028
 800478c:	40020040 	.word	0x40020040
 8004790:	40020058 	.word	0x40020058
 8004794:	40020070 	.word	0x40020070
 8004798:	40020088 	.word	0x40020088
 800479c:	400200a0 	.word	0x400200a0
 80047a0:	400200b8 	.word	0x400200b8
 80047a4:	40020410 	.word	0x40020410
 80047a8:	40020428 	.word	0x40020428
 80047ac:	40020440 	.word	0x40020440
 80047b0:	40020458 	.word	0x40020458
 80047b4:	40020470 	.word	0x40020470
 80047b8:	40020488 	.word	0x40020488
 80047bc:	400204a0 	.word	0x400204a0
 80047c0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047c8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047ce:	f003 031f 	and.w	r3, r3, #31
 80047d2:	2201      	movs	r2, #1
 80047d4:	409a      	lsls	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a4f      	ldr	r2, [pc, #316]	@ (800491c <HAL_DMA_Abort+0x5dc>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d072      	beq.n	80048ca <HAL_DMA_Abort+0x58a>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a4d      	ldr	r2, [pc, #308]	@ (8004920 <HAL_DMA_Abort+0x5e0>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d06d      	beq.n	80048ca <HAL_DMA_Abort+0x58a>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a4c      	ldr	r2, [pc, #304]	@ (8004924 <HAL_DMA_Abort+0x5e4>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d068      	beq.n	80048ca <HAL_DMA_Abort+0x58a>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a4a      	ldr	r2, [pc, #296]	@ (8004928 <HAL_DMA_Abort+0x5e8>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d063      	beq.n	80048ca <HAL_DMA_Abort+0x58a>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a49      	ldr	r2, [pc, #292]	@ (800492c <HAL_DMA_Abort+0x5ec>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d05e      	beq.n	80048ca <HAL_DMA_Abort+0x58a>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a47      	ldr	r2, [pc, #284]	@ (8004930 <HAL_DMA_Abort+0x5f0>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d059      	beq.n	80048ca <HAL_DMA_Abort+0x58a>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a46      	ldr	r2, [pc, #280]	@ (8004934 <HAL_DMA_Abort+0x5f4>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d054      	beq.n	80048ca <HAL_DMA_Abort+0x58a>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a44      	ldr	r2, [pc, #272]	@ (8004938 <HAL_DMA_Abort+0x5f8>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d04f      	beq.n	80048ca <HAL_DMA_Abort+0x58a>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a43      	ldr	r2, [pc, #268]	@ (800493c <HAL_DMA_Abort+0x5fc>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d04a      	beq.n	80048ca <HAL_DMA_Abort+0x58a>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a41      	ldr	r2, [pc, #260]	@ (8004940 <HAL_DMA_Abort+0x600>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d045      	beq.n	80048ca <HAL_DMA_Abort+0x58a>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a40      	ldr	r2, [pc, #256]	@ (8004944 <HAL_DMA_Abort+0x604>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d040      	beq.n	80048ca <HAL_DMA_Abort+0x58a>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a3e      	ldr	r2, [pc, #248]	@ (8004948 <HAL_DMA_Abort+0x608>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d03b      	beq.n	80048ca <HAL_DMA_Abort+0x58a>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a3d      	ldr	r2, [pc, #244]	@ (800494c <HAL_DMA_Abort+0x60c>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d036      	beq.n	80048ca <HAL_DMA_Abort+0x58a>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a3b      	ldr	r2, [pc, #236]	@ (8004950 <HAL_DMA_Abort+0x610>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d031      	beq.n	80048ca <HAL_DMA_Abort+0x58a>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a3a      	ldr	r2, [pc, #232]	@ (8004954 <HAL_DMA_Abort+0x614>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d02c      	beq.n	80048ca <HAL_DMA_Abort+0x58a>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a38      	ldr	r2, [pc, #224]	@ (8004958 <HAL_DMA_Abort+0x618>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d027      	beq.n	80048ca <HAL_DMA_Abort+0x58a>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a37      	ldr	r2, [pc, #220]	@ (800495c <HAL_DMA_Abort+0x61c>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d022      	beq.n	80048ca <HAL_DMA_Abort+0x58a>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a35      	ldr	r2, [pc, #212]	@ (8004960 <HAL_DMA_Abort+0x620>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d01d      	beq.n	80048ca <HAL_DMA_Abort+0x58a>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a34      	ldr	r2, [pc, #208]	@ (8004964 <HAL_DMA_Abort+0x624>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d018      	beq.n	80048ca <HAL_DMA_Abort+0x58a>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a32      	ldr	r2, [pc, #200]	@ (8004968 <HAL_DMA_Abort+0x628>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d013      	beq.n	80048ca <HAL_DMA_Abort+0x58a>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a31      	ldr	r2, [pc, #196]	@ (800496c <HAL_DMA_Abort+0x62c>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d00e      	beq.n	80048ca <HAL_DMA_Abort+0x58a>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a2f      	ldr	r2, [pc, #188]	@ (8004970 <HAL_DMA_Abort+0x630>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d009      	beq.n	80048ca <HAL_DMA_Abort+0x58a>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a2e      	ldr	r2, [pc, #184]	@ (8004974 <HAL_DMA_Abort+0x634>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d004      	beq.n	80048ca <HAL_DMA_Abort+0x58a>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a2c      	ldr	r2, [pc, #176]	@ (8004978 <HAL_DMA_Abort+0x638>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d101      	bne.n	80048ce <HAL_DMA_Abort+0x58e>
 80048ca:	2301      	movs	r3, #1
 80048cc:	e000      	b.n	80048d0 <HAL_DMA_Abort+0x590>
 80048ce:	2300      	movs	r3, #0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d015      	beq.n	8004900 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80048dc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00c      	beq.n	8004900 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048f4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80048fe:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3718      	adds	r7, #24
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	40020010 	.word	0x40020010
 8004920:	40020028 	.word	0x40020028
 8004924:	40020040 	.word	0x40020040
 8004928:	40020058 	.word	0x40020058
 800492c:	40020070 	.word	0x40020070
 8004930:	40020088 	.word	0x40020088
 8004934:	400200a0 	.word	0x400200a0
 8004938:	400200b8 	.word	0x400200b8
 800493c:	40020410 	.word	0x40020410
 8004940:	40020428 	.word	0x40020428
 8004944:	40020440 	.word	0x40020440
 8004948:	40020458 	.word	0x40020458
 800494c:	40020470 	.word	0x40020470
 8004950:	40020488 	.word	0x40020488
 8004954:	400204a0 	.word	0x400204a0
 8004958:	400204b8 	.word	0x400204b8
 800495c:	58025408 	.word	0x58025408
 8004960:	5802541c 	.word	0x5802541c
 8004964:	58025430 	.word	0x58025430
 8004968:	58025444 	.word	0x58025444
 800496c:	58025458 	.word	0x58025458
 8004970:	5802546c 	.word	0x5802546c
 8004974:	58025480 	.word	0x58025480
 8004978:	58025494 	.word	0x58025494

0800497c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e237      	b.n	8004dfe <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b02      	cmp	r3, #2
 8004998:	d004      	beq.n	80049a4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2280      	movs	r2, #128	@ 0x80
 800499e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e22c      	b.n	8004dfe <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a5c      	ldr	r2, [pc, #368]	@ (8004b1c <HAL_DMA_Abort_IT+0x1a0>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d04a      	beq.n	8004a44 <HAL_DMA_Abort_IT+0xc8>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a5b      	ldr	r2, [pc, #364]	@ (8004b20 <HAL_DMA_Abort_IT+0x1a4>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d045      	beq.n	8004a44 <HAL_DMA_Abort_IT+0xc8>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a59      	ldr	r2, [pc, #356]	@ (8004b24 <HAL_DMA_Abort_IT+0x1a8>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d040      	beq.n	8004a44 <HAL_DMA_Abort_IT+0xc8>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a58      	ldr	r2, [pc, #352]	@ (8004b28 <HAL_DMA_Abort_IT+0x1ac>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d03b      	beq.n	8004a44 <HAL_DMA_Abort_IT+0xc8>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a56      	ldr	r2, [pc, #344]	@ (8004b2c <HAL_DMA_Abort_IT+0x1b0>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d036      	beq.n	8004a44 <HAL_DMA_Abort_IT+0xc8>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a55      	ldr	r2, [pc, #340]	@ (8004b30 <HAL_DMA_Abort_IT+0x1b4>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d031      	beq.n	8004a44 <HAL_DMA_Abort_IT+0xc8>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a53      	ldr	r2, [pc, #332]	@ (8004b34 <HAL_DMA_Abort_IT+0x1b8>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d02c      	beq.n	8004a44 <HAL_DMA_Abort_IT+0xc8>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a52      	ldr	r2, [pc, #328]	@ (8004b38 <HAL_DMA_Abort_IT+0x1bc>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d027      	beq.n	8004a44 <HAL_DMA_Abort_IT+0xc8>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a50      	ldr	r2, [pc, #320]	@ (8004b3c <HAL_DMA_Abort_IT+0x1c0>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d022      	beq.n	8004a44 <HAL_DMA_Abort_IT+0xc8>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a4f      	ldr	r2, [pc, #316]	@ (8004b40 <HAL_DMA_Abort_IT+0x1c4>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d01d      	beq.n	8004a44 <HAL_DMA_Abort_IT+0xc8>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a4d      	ldr	r2, [pc, #308]	@ (8004b44 <HAL_DMA_Abort_IT+0x1c8>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d018      	beq.n	8004a44 <HAL_DMA_Abort_IT+0xc8>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a4c      	ldr	r2, [pc, #304]	@ (8004b48 <HAL_DMA_Abort_IT+0x1cc>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d013      	beq.n	8004a44 <HAL_DMA_Abort_IT+0xc8>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a4a      	ldr	r2, [pc, #296]	@ (8004b4c <HAL_DMA_Abort_IT+0x1d0>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d00e      	beq.n	8004a44 <HAL_DMA_Abort_IT+0xc8>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a49      	ldr	r2, [pc, #292]	@ (8004b50 <HAL_DMA_Abort_IT+0x1d4>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d009      	beq.n	8004a44 <HAL_DMA_Abort_IT+0xc8>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a47      	ldr	r2, [pc, #284]	@ (8004b54 <HAL_DMA_Abort_IT+0x1d8>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d004      	beq.n	8004a44 <HAL_DMA_Abort_IT+0xc8>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a46      	ldr	r2, [pc, #280]	@ (8004b58 <HAL_DMA_Abort_IT+0x1dc>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d101      	bne.n	8004a48 <HAL_DMA_Abort_IT+0xcc>
 8004a44:	2301      	movs	r3, #1
 8004a46:	e000      	b.n	8004a4a <HAL_DMA_Abort_IT+0xce>
 8004a48:	2300      	movs	r3, #0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f000 8086 	beq.w	8004b5c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2204      	movs	r2, #4
 8004a54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a2f      	ldr	r2, [pc, #188]	@ (8004b1c <HAL_DMA_Abort_IT+0x1a0>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d04a      	beq.n	8004af8 <HAL_DMA_Abort_IT+0x17c>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a2e      	ldr	r2, [pc, #184]	@ (8004b20 <HAL_DMA_Abort_IT+0x1a4>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d045      	beq.n	8004af8 <HAL_DMA_Abort_IT+0x17c>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a2c      	ldr	r2, [pc, #176]	@ (8004b24 <HAL_DMA_Abort_IT+0x1a8>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d040      	beq.n	8004af8 <HAL_DMA_Abort_IT+0x17c>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a2b      	ldr	r2, [pc, #172]	@ (8004b28 <HAL_DMA_Abort_IT+0x1ac>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d03b      	beq.n	8004af8 <HAL_DMA_Abort_IT+0x17c>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a29      	ldr	r2, [pc, #164]	@ (8004b2c <HAL_DMA_Abort_IT+0x1b0>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d036      	beq.n	8004af8 <HAL_DMA_Abort_IT+0x17c>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a28      	ldr	r2, [pc, #160]	@ (8004b30 <HAL_DMA_Abort_IT+0x1b4>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d031      	beq.n	8004af8 <HAL_DMA_Abort_IT+0x17c>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a26      	ldr	r2, [pc, #152]	@ (8004b34 <HAL_DMA_Abort_IT+0x1b8>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d02c      	beq.n	8004af8 <HAL_DMA_Abort_IT+0x17c>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a25      	ldr	r2, [pc, #148]	@ (8004b38 <HAL_DMA_Abort_IT+0x1bc>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d027      	beq.n	8004af8 <HAL_DMA_Abort_IT+0x17c>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a23      	ldr	r2, [pc, #140]	@ (8004b3c <HAL_DMA_Abort_IT+0x1c0>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d022      	beq.n	8004af8 <HAL_DMA_Abort_IT+0x17c>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a22      	ldr	r2, [pc, #136]	@ (8004b40 <HAL_DMA_Abort_IT+0x1c4>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d01d      	beq.n	8004af8 <HAL_DMA_Abort_IT+0x17c>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a20      	ldr	r2, [pc, #128]	@ (8004b44 <HAL_DMA_Abort_IT+0x1c8>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d018      	beq.n	8004af8 <HAL_DMA_Abort_IT+0x17c>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a1f      	ldr	r2, [pc, #124]	@ (8004b48 <HAL_DMA_Abort_IT+0x1cc>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d013      	beq.n	8004af8 <HAL_DMA_Abort_IT+0x17c>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a1d      	ldr	r2, [pc, #116]	@ (8004b4c <HAL_DMA_Abort_IT+0x1d0>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d00e      	beq.n	8004af8 <HAL_DMA_Abort_IT+0x17c>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a1c      	ldr	r2, [pc, #112]	@ (8004b50 <HAL_DMA_Abort_IT+0x1d4>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d009      	beq.n	8004af8 <HAL_DMA_Abort_IT+0x17c>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a1a      	ldr	r2, [pc, #104]	@ (8004b54 <HAL_DMA_Abort_IT+0x1d8>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d004      	beq.n	8004af8 <HAL_DMA_Abort_IT+0x17c>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a19      	ldr	r2, [pc, #100]	@ (8004b58 <HAL_DMA_Abort_IT+0x1dc>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d108      	bne.n	8004b0a <HAL_DMA_Abort_IT+0x18e>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 0201 	bic.w	r2, r2, #1
 8004b06:	601a      	str	r2, [r3, #0]
 8004b08:	e178      	b.n	8004dfc <HAL_DMA_Abort_IT+0x480>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f022 0201 	bic.w	r2, r2, #1
 8004b18:	601a      	str	r2, [r3, #0]
 8004b1a:	e16f      	b.n	8004dfc <HAL_DMA_Abort_IT+0x480>
 8004b1c:	40020010 	.word	0x40020010
 8004b20:	40020028 	.word	0x40020028
 8004b24:	40020040 	.word	0x40020040
 8004b28:	40020058 	.word	0x40020058
 8004b2c:	40020070 	.word	0x40020070
 8004b30:	40020088 	.word	0x40020088
 8004b34:	400200a0 	.word	0x400200a0
 8004b38:	400200b8 	.word	0x400200b8
 8004b3c:	40020410 	.word	0x40020410
 8004b40:	40020428 	.word	0x40020428
 8004b44:	40020440 	.word	0x40020440
 8004b48:	40020458 	.word	0x40020458
 8004b4c:	40020470 	.word	0x40020470
 8004b50:	40020488 	.word	0x40020488
 8004b54:	400204a0 	.word	0x400204a0
 8004b58:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f022 020e 	bic.w	r2, r2, #14
 8004b6a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a6c      	ldr	r2, [pc, #432]	@ (8004d24 <HAL_DMA_Abort_IT+0x3a8>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d04a      	beq.n	8004c0c <HAL_DMA_Abort_IT+0x290>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a6b      	ldr	r2, [pc, #428]	@ (8004d28 <HAL_DMA_Abort_IT+0x3ac>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d045      	beq.n	8004c0c <HAL_DMA_Abort_IT+0x290>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a69      	ldr	r2, [pc, #420]	@ (8004d2c <HAL_DMA_Abort_IT+0x3b0>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d040      	beq.n	8004c0c <HAL_DMA_Abort_IT+0x290>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a68      	ldr	r2, [pc, #416]	@ (8004d30 <HAL_DMA_Abort_IT+0x3b4>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d03b      	beq.n	8004c0c <HAL_DMA_Abort_IT+0x290>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a66      	ldr	r2, [pc, #408]	@ (8004d34 <HAL_DMA_Abort_IT+0x3b8>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d036      	beq.n	8004c0c <HAL_DMA_Abort_IT+0x290>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a65      	ldr	r2, [pc, #404]	@ (8004d38 <HAL_DMA_Abort_IT+0x3bc>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d031      	beq.n	8004c0c <HAL_DMA_Abort_IT+0x290>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a63      	ldr	r2, [pc, #396]	@ (8004d3c <HAL_DMA_Abort_IT+0x3c0>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d02c      	beq.n	8004c0c <HAL_DMA_Abort_IT+0x290>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a62      	ldr	r2, [pc, #392]	@ (8004d40 <HAL_DMA_Abort_IT+0x3c4>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d027      	beq.n	8004c0c <HAL_DMA_Abort_IT+0x290>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a60      	ldr	r2, [pc, #384]	@ (8004d44 <HAL_DMA_Abort_IT+0x3c8>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d022      	beq.n	8004c0c <HAL_DMA_Abort_IT+0x290>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a5f      	ldr	r2, [pc, #380]	@ (8004d48 <HAL_DMA_Abort_IT+0x3cc>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d01d      	beq.n	8004c0c <HAL_DMA_Abort_IT+0x290>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a5d      	ldr	r2, [pc, #372]	@ (8004d4c <HAL_DMA_Abort_IT+0x3d0>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d018      	beq.n	8004c0c <HAL_DMA_Abort_IT+0x290>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a5c      	ldr	r2, [pc, #368]	@ (8004d50 <HAL_DMA_Abort_IT+0x3d4>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d013      	beq.n	8004c0c <HAL_DMA_Abort_IT+0x290>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a5a      	ldr	r2, [pc, #360]	@ (8004d54 <HAL_DMA_Abort_IT+0x3d8>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d00e      	beq.n	8004c0c <HAL_DMA_Abort_IT+0x290>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a59      	ldr	r2, [pc, #356]	@ (8004d58 <HAL_DMA_Abort_IT+0x3dc>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d009      	beq.n	8004c0c <HAL_DMA_Abort_IT+0x290>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a57      	ldr	r2, [pc, #348]	@ (8004d5c <HAL_DMA_Abort_IT+0x3e0>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d004      	beq.n	8004c0c <HAL_DMA_Abort_IT+0x290>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a56      	ldr	r2, [pc, #344]	@ (8004d60 <HAL_DMA_Abort_IT+0x3e4>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d108      	bne.n	8004c1e <HAL_DMA_Abort_IT+0x2a2>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 0201 	bic.w	r2, r2, #1
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	e007      	b.n	8004c2e <HAL_DMA_Abort_IT+0x2b2>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f022 0201 	bic.w	r2, r2, #1
 8004c2c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a3c      	ldr	r2, [pc, #240]	@ (8004d24 <HAL_DMA_Abort_IT+0x3a8>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d072      	beq.n	8004d1e <HAL_DMA_Abort_IT+0x3a2>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a3a      	ldr	r2, [pc, #232]	@ (8004d28 <HAL_DMA_Abort_IT+0x3ac>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d06d      	beq.n	8004d1e <HAL_DMA_Abort_IT+0x3a2>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a39      	ldr	r2, [pc, #228]	@ (8004d2c <HAL_DMA_Abort_IT+0x3b0>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d068      	beq.n	8004d1e <HAL_DMA_Abort_IT+0x3a2>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a37      	ldr	r2, [pc, #220]	@ (8004d30 <HAL_DMA_Abort_IT+0x3b4>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d063      	beq.n	8004d1e <HAL_DMA_Abort_IT+0x3a2>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a36      	ldr	r2, [pc, #216]	@ (8004d34 <HAL_DMA_Abort_IT+0x3b8>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d05e      	beq.n	8004d1e <HAL_DMA_Abort_IT+0x3a2>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a34      	ldr	r2, [pc, #208]	@ (8004d38 <HAL_DMA_Abort_IT+0x3bc>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d059      	beq.n	8004d1e <HAL_DMA_Abort_IT+0x3a2>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a33      	ldr	r2, [pc, #204]	@ (8004d3c <HAL_DMA_Abort_IT+0x3c0>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d054      	beq.n	8004d1e <HAL_DMA_Abort_IT+0x3a2>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a31      	ldr	r2, [pc, #196]	@ (8004d40 <HAL_DMA_Abort_IT+0x3c4>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d04f      	beq.n	8004d1e <HAL_DMA_Abort_IT+0x3a2>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a30      	ldr	r2, [pc, #192]	@ (8004d44 <HAL_DMA_Abort_IT+0x3c8>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d04a      	beq.n	8004d1e <HAL_DMA_Abort_IT+0x3a2>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a2e      	ldr	r2, [pc, #184]	@ (8004d48 <HAL_DMA_Abort_IT+0x3cc>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d045      	beq.n	8004d1e <HAL_DMA_Abort_IT+0x3a2>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a2d      	ldr	r2, [pc, #180]	@ (8004d4c <HAL_DMA_Abort_IT+0x3d0>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d040      	beq.n	8004d1e <HAL_DMA_Abort_IT+0x3a2>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a2b      	ldr	r2, [pc, #172]	@ (8004d50 <HAL_DMA_Abort_IT+0x3d4>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d03b      	beq.n	8004d1e <HAL_DMA_Abort_IT+0x3a2>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a2a      	ldr	r2, [pc, #168]	@ (8004d54 <HAL_DMA_Abort_IT+0x3d8>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d036      	beq.n	8004d1e <HAL_DMA_Abort_IT+0x3a2>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a28      	ldr	r2, [pc, #160]	@ (8004d58 <HAL_DMA_Abort_IT+0x3dc>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d031      	beq.n	8004d1e <HAL_DMA_Abort_IT+0x3a2>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a27      	ldr	r2, [pc, #156]	@ (8004d5c <HAL_DMA_Abort_IT+0x3e0>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d02c      	beq.n	8004d1e <HAL_DMA_Abort_IT+0x3a2>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a25      	ldr	r2, [pc, #148]	@ (8004d60 <HAL_DMA_Abort_IT+0x3e4>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d027      	beq.n	8004d1e <HAL_DMA_Abort_IT+0x3a2>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a24      	ldr	r2, [pc, #144]	@ (8004d64 <HAL_DMA_Abort_IT+0x3e8>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d022      	beq.n	8004d1e <HAL_DMA_Abort_IT+0x3a2>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a22      	ldr	r2, [pc, #136]	@ (8004d68 <HAL_DMA_Abort_IT+0x3ec>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d01d      	beq.n	8004d1e <HAL_DMA_Abort_IT+0x3a2>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a21      	ldr	r2, [pc, #132]	@ (8004d6c <HAL_DMA_Abort_IT+0x3f0>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d018      	beq.n	8004d1e <HAL_DMA_Abort_IT+0x3a2>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a1f      	ldr	r2, [pc, #124]	@ (8004d70 <HAL_DMA_Abort_IT+0x3f4>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d013      	beq.n	8004d1e <HAL_DMA_Abort_IT+0x3a2>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a1e      	ldr	r2, [pc, #120]	@ (8004d74 <HAL_DMA_Abort_IT+0x3f8>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d00e      	beq.n	8004d1e <HAL_DMA_Abort_IT+0x3a2>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a1c      	ldr	r2, [pc, #112]	@ (8004d78 <HAL_DMA_Abort_IT+0x3fc>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d009      	beq.n	8004d1e <HAL_DMA_Abort_IT+0x3a2>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a1b      	ldr	r2, [pc, #108]	@ (8004d7c <HAL_DMA_Abort_IT+0x400>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d004      	beq.n	8004d1e <HAL_DMA_Abort_IT+0x3a2>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a19      	ldr	r2, [pc, #100]	@ (8004d80 <HAL_DMA_Abort_IT+0x404>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d132      	bne.n	8004d84 <HAL_DMA_Abort_IT+0x408>
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e031      	b.n	8004d86 <HAL_DMA_Abort_IT+0x40a>
 8004d22:	bf00      	nop
 8004d24:	40020010 	.word	0x40020010
 8004d28:	40020028 	.word	0x40020028
 8004d2c:	40020040 	.word	0x40020040
 8004d30:	40020058 	.word	0x40020058
 8004d34:	40020070 	.word	0x40020070
 8004d38:	40020088 	.word	0x40020088
 8004d3c:	400200a0 	.word	0x400200a0
 8004d40:	400200b8 	.word	0x400200b8
 8004d44:	40020410 	.word	0x40020410
 8004d48:	40020428 	.word	0x40020428
 8004d4c:	40020440 	.word	0x40020440
 8004d50:	40020458 	.word	0x40020458
 8004d54:	40020470 	.word	0x40020470
 8004d58:	40020488 	.word	0x40020488
 8004d5c:	400204a0 	.word	0x400204a0
 8004d60:	400204b8 	.word	0x400204b8
 8004d64:	58025408 	.word	0x58025408
 8004d68:	5802541c 	.word	0x5802541c
 8004d6c:	58025430 	.word	0x58025430
 8004d70:	58025444 	.word	0x58025444
 8004d74:	58025458 	.word	0x58025458
 8004d78:	5802546c 	.word	0x5802546c
 8004d7c:	58025480 	.word	0x58025480
 8004d80:	58025494 	.word	0x58025494
 8004d84:	2300      	movs	r3, #0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d028      	beq.n	8004ddc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d98:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d9e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004da4:	f003 031f 	and.w	r3, r3, #31
 8004da8:	2201      	movs	r2, #1
 8004daa:	409a      	lsls	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004db8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00c      	beq.n	8004ddc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dcc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004dd0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004dda:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d003      	beq.n	8004dfc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop

08004e08 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b08a      	sub	sp, #40	@ 0x28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004e10:	2300      	movs	r3, #0
 8004e12:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004e14:	4b67      	ldr	r3, [pc, #412]	@ (8004fb4 <HAL_DMA_IRQHandler+0x1ac>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a67      	ldr	r2, [pc, #412]	@ (8004fb8 <HAL_DMA_IRQHandler+0x1b0>)
 8004e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1e:	0a9b      	lsrs	r3, r3, #10
 8004e20:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e26:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e2c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004e2e:	6a3b      	ldr	r3, [r7, #32]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a5f      	ldr	r2, [pc, #380]	@ (8004fbc <HAL_DMA_IRQHandler+0x1b4>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d04a      	beq.n	8004eda <HAL_DMA_IRQHandler+0xd2>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a5d      	ldr	r2, [pc, #372]	@ (8004fc0 <HAL_DMA_IRQHandler+0x1b8>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d045      	beq.n	8004eda <HAL_DMA_IRQHandler+0xd2>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a5c      	ldr	r2, [pc, #368]	@ (8004fc4 <HAL_DMA_IRQHandler+0x1bc>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d040      	beq.n	8004eda <HAL_DMA_IRQHandler+0xd2>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a5a      	ldr	r2, [pc, #360]	@ (8004fc8 <HAL_DMA_IRQHandler+0x1c0>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d03b      	beq.n	8004eda <HAL_DMA_IRQHandler+0xd2>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a59      	ldr	r2, [pc, #356]	@ (8004fcc <HAL_DMA_IRQHandler+0x1c4>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d036      	beq.n	8004eda <HAL_DMA_IRQHandler+0xd2>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a57      	ldr	r2, [pc, #348]	@ (8004fd0 <HAL_DMA_IRQHandler+0x1c8>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d031      	beq.n	8004eda <HAL_DMA_IRQHandler+0xd2>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a56      	ldr	r2, [pc, #344]	@ (8004fd4 <HAL_DMA_IRQHandler+0x1cc>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d02c      	beq.n	8004eda <HAL_DMA_IRQHandler+0xd2>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a54      	ldr	r2, [pc, #336]	@ (8004fd8 <HAL_DMA_IRQHandler+0x1d0>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d027      	beq.n	8004eda <HAL_DMA_IRQHandler+0xd2>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a53      	ldr	r2, [pc, #332]	@ (8004fdc <HAL_DMA_IRQHandler+0x1d4>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d022      	beq.n	8004eda <HAL_DMA_IRQHandler+0xd2>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a51      	ldr	r2, [pc, #324]	@ (8004fe0 <HAL_DMA_IRQHandler+0x1d8>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d01d      	beq.n	8004eda <HAL_DMA_IRQHandler+0xd2>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a50      	ldr	r2, [pc, #320]	@ (8004fe4 <HAL_DMA_IRQHandler+0x1dc>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d018      	beq.n	8004eda <HAL_DMA_IRQHandler+0xd2>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a4e      	ldr	r2, [pc, #312]	@ (8004fe8 <HAL_DMA_IRQHandler+0x1e0>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d013      	beq.n	8004eda <HAL_DMA_IRQHandler+0xd2>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a4d      	ldr	r2, [pc, #308]	@ (8004fec <HAL_DMA_IRQHandler+0x1e4>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d00e      	beq.n	8004eda <HAL_DMA_IRQHandler+0xd2>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a4b      	ldr	r2, [pc, #300]	@ (8004ff0 <HAL_DMA_IRQHandler+0x1e8>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d009      	beq.n	8004eda <HAL_DMA_IRQHandler+0xd2>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a4a      	ldr	r2, [pc, #296]	@ (8004ff4 <HAL_DMA_IRQHandler+0x1ec>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d004      	beq.n	8004eda <HAL_DMA_IRQHandler+0xd2>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a48      	ldr	r2, [pc, #288]	@ (8004ff8 <HAL_DMA_IRQHandler+0x1f0>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d101      	bne.n	8004ede <HAL_DMA_IRQHandler+0xd6>
 8004eda:	2301      	movs	r3, #1
 8004edc:	e000      	b.n	8004ee0 <HAL_DMA_IRQHandler+0xd8>
 8004ede:	2300      	movs	r3, #0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f000 842b 	beq.w	800573c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eea:	f003 031f 	and.w	r3, r3, #31
 8004eee:	2208      	movs	r2, #8
 8004ef0:	409a      	lsls	r2, r3
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f000 80a2 	beq.w	8005040 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a2e      	ldr	r2, [pc, #184]	@ (8004fbc <HAL_DMA_IRQHandler+0x1b4>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d04a      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x194>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a2d      	ldr	r2, [pc, #180]	@ (8004fc0 <HAL_DMA_IRQHandler+0x1b8>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d045      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x194>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a2b      	ldr	r2, [pc, #172]	@ (8004fc4 <HAL_DMA_IRQHandler+0x1bc>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d040      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x194>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a2a      	ldr	r2, [pc, #168]	@ (8004fc8 <HAL_DMA_IRQHandler+0x1c0>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d03b      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x194>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a28      	ldr	r2, [pc, #160]	@ (8004fcc <HAL_DMA_IRQHandler+0x1c4>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d036      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x194>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a27      	ldr	r2, [pc, #156]	@ (8004fd0 <HAL_DMA_IRQHandler+0x1c8>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d031      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x194>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a25      	ldr	r2, [pc, #148]	@ (8004fd4 <HAL_DMA_IRQHandler+0x1cc>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d02c      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x194>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a24      	ldr	r2, [pc, #144]	@ (8004fd8 <HAL_DMA_IRQHandler+0x1d0>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d027      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x194>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a22      	ldr	r2, [pc, #136]	@ (8004fdc <HAL_DMA_IRQHandler+0x1d4>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d022      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x194>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a21      	ldr	r2, [pc, #132]	@ (8004fe0 <HAL_DMA_IRQHandler+0x1d8>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d01d      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x194>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a1f      	ldr	r2, [pc, #124]	@ (8004fe4 <HAL_DMA_IRQHandler+0x1dc>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d018      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x194>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a1e      	ldr	r2, [pc, #120]	@ (8004fe8 <HAL_DMA_IRQHandler+0x1e0>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d013      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x194>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a1c      	ldr	r2, [pc, #112]	@ (8004fec <HAL_DMA_IRQHandler+0x1e4>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d00e      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x194>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a1b      	ldr	r2, [pc, #108]	@ (8004ff0 <HAL_DMA_IRQHandler+0x1e8>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d009      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x194>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a19      	ldr	r2, [pc, #100]	@ (8004ff4 <HAL_DMA_IRQHandler+0x1ec>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d004      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x194>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a18      	ldr	r2, [pc, #96]	@ (8004ff8 <HAL_DMA_IRQHandler+0x1f0>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d12f      	bne.n	8004ffc <HAL_DMA_IRQHandler+0x1f4>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0304 	and.w	r3, r3, #4
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	bf14      	ite	ne
 8004faa:	2301      	movne	r3, #1
 8004fac:	2300      	moveq	r3, #0
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	e02e      	b.n	8005010 <HAL_DMA_IRQHandler+0x208>
 8004fb2:	bf00      	nop
 8004fb4:	24000094 	.word	0x24000094
 8004fb8:	1b4e81b5 	.word	0x1b4e81b5
 8004fbc:	40020010 	.word	0x40020010
 8004fc0:	40020028 	.word	0x40020028
 8004fc4:	40020040 	.word	0x40020040
 8004fc8:	40020058 	.word	0x40020058
 8004fcc:	40020070 	.word	0x40020070
 8004fd0:	40020088 	.word	0x40020088
 8004fd4:	400200a0 	.word	0x400200a0
 8004fd8:	400200b8 	.word	0x400200b8
 8004fdc:	40020410 	.word	0x40020410
 8004fe0:	40020428 	.word	0x40020428
 8004fe4:	40020440 	.word	0x40020440
 8004fe8:	40020458 	.word	0x40020458
 8004fec:	40020470 	.word	0x40020470
 8004ff0:	40020488 	.word	0x40020488
 8004ff4:	400204a0 	.word	0x400204a0
 8004ff8:	400204b8 	.word	0x400204b8
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0308 	and.w	r3, r3, #8
 8005006:	2b00      	cmp	r3, #0
 8005008:	bf14      	ite	ne
 800500a:	2301      	movne	r3, #1
 800500c:	2300      	moveq	r3, #0
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b00      	cmp	r3, #0
 8005012:	d015      	beq.n	8005040 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 0204 	bic.w	r2, r2, #4
 8005022:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005028:	f003 031f 	and.w	r3, r3, #31
 800502c:	2208      	movs	r2, #8
 800502e:	409a      	lsls	r2, r3
 8005030:	6a3b      	ldr	r3, [r7, #32]
 8005032:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005038:	f043 0201 	orr.w	r2, r3, #1
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005044:	f003 031f 	and.w	r3, r3, #31
 8005048:	69ba      	ldr	r2, [r7, #24]
 800504a:	fa22 f303 	lsr.w	r3, r2, r3
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	d06e      	beq.n	8005134 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a69      	ldr	r2, [pc, #420]	@ (8005200 <HAL_DMA_IRQHandler+0x3f8>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d04a      	beq.n	80050f6 <HAL_DMA_IRQHandler+0x2ee>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a67      	ldr	r2, [pc, #412]	@ (8005204 <HAL_DMA_IRQHandler+0x3fc>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d045      	beq.n	80050f6 <HAL_DMA_IRQHandler+0x2ee>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a66      	ldr	r2, [pc, #408]	@ (8005208 <HAL_DMA_IRQHandler+0x400>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d040      	beq.n	80050f6 <HAL_DMA_IRQHandler+0x2ee>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a64      	ldr	r2, [pc, #400]	@ (800520c <HAL_DMA_IRQHandler+0x404>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d03b      	beq.n	80050f6 <HAL_DMA_IRQHandler+0x2ee>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a63      	ldr	r2, [pc, #396]	@ (8005210 <HAL_DMA_IRQHandler+0x408>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d036      	beq.n	80050f6 <HAL_DMA_IRQHandler+0x2ee>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a61      	ldr	r2, [pc, #388]	@ (8005214 <HAL_DMA_IRQHandler+0x40c>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d031      	beq.n	80050f6 <HAL_DMA_IRQHandler+0x2ee>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a60      	ldr	r2, [pc, #384]	@ (8005218 <HAL_DMA_IRQHandler+0x410>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d02c      	beq.n	80050f6 <HAL_DMA_IRQHandler+0x2ee>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a5e      	ldr	r2, [pc, #376]	@ (800521c <HAL_DMA_IRQHandler+0x414>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d027      	beq.n	80050f6 <HAL_DMA_IRQHandler+0x2ee>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a5d      	ldr	r2, [pc, #372]	@ (8005220 <HAL_DMA_IRQHandler+0x418>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d022      	beq.n	80050f6 <HAL_DMA_IRQHandler+0x2ee>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a5b      	ldr	r2, [pc, #364]	@ (8005224 <HAL_DMA_IRQHandler+0x41c>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d01d      	beq.n	80050f6 <HAL_DMA_IRQHandler+0x2ee>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a5a      	ldr	r2, [pc, #360]	@ (8005228 <HAL_DMA_IRQHandler+0x420>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d018      	beq.n	80050f6 <HAL_DMA_IRQHandler+0x2ee>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a58      	ldr	r2, [pc, #352]	@ (800522c <HAL_DMA_IRQHandler+0x424>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d013      	beq.n	80050f6 <HAL_DMA_IRQHandler+0x2ee>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a57      	ldr	r2, [pc, #348]	@ (8005230 <HAL_DMA_IRQHandler+0x428>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d00e      	beq.n	80050f6 <HAL_DMA_IRQHandler+0x2ee>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a55      	ldr	r2, [pc, #340]	@ (8005234 <HAL_DMA_IRQHandler+0x42c>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d009      	beq.n	80050f6 <HAL_DMA_IRQHandler+0x2ee>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a54      	ldr	r2, [pc, #336]	@ (8005238 <HAL_DMA_IRQHandler+0x430>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d004      	beq.n	80050f6 <HAL_DMA_IRQHandler+0x2ee>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a52      	ldr	r2, [pc, #328]	@ (800523c <HAL_DMA_IRQHandler+0x434>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d10a      	bne.n	800510c <HAL_DMA_IRQHandler+0x304>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	695b      	ldr	r3, [r3, #20]
 80050fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005100:	2b00      	cmp	r3, #0
 8005102:	bf14      	ite	ne
 8005104:	2301      	movne	r3, #1
 8005106:	2300      	moveq	r3, #0
 8005108:	b2db      	uxtb	r3, r3
 800510a:	e003      	b.n	8005114 <HAL_DMA_IRQHandler+0x30c>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2300      	movs	r3, #0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00d      	beq.n	8005134 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800511c:	f003 031f 	and.w	r3, r3, #31
 8005120:	2201      	movs	r2, #1
 8005122:	409a      	lsls	r2, r3
 8005124:	6a3b      	ldr	r3, [r7, #32]
 8005126:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800512c:	f043 0202 	orr.w	r2, r3, #2
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005138:	f003 031f 	and.w	r3, r3, #31
 800513c:	2204      	movs	r2, #4
 800513e:	409a      	lsls	r2, r3
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	4013      	ands	r3, r2
 8005144:	2b00      	cmp	r3, #0
 8005146:	f000 808f 	beq.w	8005268 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a2c      	ldr	r2, [pc, #176]	@ (8005200 <HAL_DMA_IRQHandler+0x3f8>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d04a      	beq.n	80051ea <HAL_DMA_IRQHandler+0x3e2>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a2a      	ldr	r2, [pc, #168]	@ (8005204 <HAL_DMA_IRQHandler+0x3fc>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d045      	beq.n	80051ea <HAL_DMA_IRQHandler+0x3e2>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a29      	ldr	r2, [pc, #164]	@ (8005208 <HAL_DMA_IRQHandler+0x400>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d040      	beq.n	80051ea <HAL_DMA_IRQHandler+0x3e2>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a27      	ldr	r2, [pc, #156]	@ (800520c <HAL_DMA_IRQHandler+0x404>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d03b      	beq.n	80051ea <HAL_DMA_IRQHandler+0x3e2>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a26      	ldr	r2, [pc, #152]	@ (8005210 <HAL_DMA_IRQHandler+0x408>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d036      	beq.n	80051ea <HAL_DMA_IRQHandler+0x3e2>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a24      	ldr	r2, [pc, #144]	@ (8005214 <HAL_DMA_IRQHandler+0x40c>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d031      	beq.n	80051ea <HAL_DMA_IRQHandler+0x3e2>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a23      	ldr	r2, [pc, #140]	@ (8005218 <HAL_DMA_IRQHandler+0x410>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d02c      	beq.n	80051ea <HAL_DMA_IRQHandler+0x3e2>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a21      	ldr	r2, [pc, #132]	@ (800521c <HAL_DMA_IRQHandler+0x414>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d027      	beq.n	80051ea <HAL_DMA_IRQHandler+0x3e2>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a20      	ldr	r2, [pc, #128]	@ (8005220 <HAL_DMA_IRQHandler+0x418>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d022      	beq.n	80051ea <HAL_DMA_IRQHandler+0x3e2>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a1e      	ldr	r2, [pc, #120]	@ (8005224 <HAL_DMA_IRQHandler+0x41c>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d01d      	beq.n	80051ea <HAL_DMA_IRQHandler+0x3e2>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a1d      	ldr	r2, [pc, #116]	@ (8005228 <HAL_DMA_IRQHandler+0x420>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d018      	beq.n	80051ea <HAL_DMA_IRQHandler+0x3e2>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a1b      	ldr	r2, [pc, #108]	@ (800522c <HAL_DMA_IRQHandler+0x424>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d013      	beq.n	80051ea <HAL_DMA_IRQHandler+0x3e2>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a1a      	ldr	r2, [pc, #104]	@ (8005230 <HAL_DMA_IRQHandler+0x428>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d00e      	beq.n	80051ea <HAL_DMA_IRQHandler+0x3e2>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a18      	ldr	r2, [pc, #96]	@ (8005234 <HAL_DMA_IRQHandler+0x42c>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d009      	beq.n	80051ea <HAL_DMA_IRQHandler+0x3e2>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a17      	ldr	r2, [pc, #92]	@ (8005238 <HAL_DMA_IRQHandler+0x430>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d004      	beq.n	80051ea <HAL_DMA_IRQHandler+0x3e2>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a15      	ldr	r2, [pc, #84]	@ (800523c <HAL_DMA_IRQHandler+0x434>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d12a      	bne.n	8005240 <HAL_DMA_IRQHandler+0x438>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0302 	and.w	r3, r3, #2
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	bf14      	ite	ne
 80051f8:	2301      	movne	r3, #1
 80051fa:	2300      	moveq	r3, #0
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	e023      	b.n	8005248 <HAL_DMA_IRQHandler+0x440>
 8005200:	40020010 	.word	0x40020010
 8005204:	40020028 	.word	0x40020028
 8005208:	40020040 	.word	0x40020040
 800520c:	40020058 	.word	0x40020058
 8005210:	40020070 	.word	0x40020070
 8005214:	40020088 	.word	0x40020088
 8005218:	400200a0 	.word	0x400200a0
 800521c:	400200b8 	.word	0x400200b8
 8005220:	40020410 	.word	0x40020410
 8005224:	40020428 	.word	0x40020428
 8005228:	40020440 	.word	0x40020440
 800522c:	40020458 	.word	0x40020458
 8005230:	40020470 	.word	0x40020470
 8005234:	40020488 	.word	0x40020488
 8005238:	400204a0 	.word	0x400204a0
 800523c:	400204b8 	.word	0x400204b8
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2300      	movs	r3, #0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00d      	beq.n	8005268 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005250:	f003 031f 	and.w	r3, r3, #31
 8005254:	2204      	movs	r2, #4
 8005256:	409a      	lsls	r2, r3
 8005258:	6a3b      	ldr	r3, [r7, #32]
 800525a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005260:	f043 0204 	orr.w	r2, r3, #4
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800526c:	f003 031f 	and.w	r3, r3, #31
 8005270:	2210      	movs	r2, #16
 8005272:	409a      	lsls	r2, r3
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	4013      	ands	r3, r2
 8005278:	2b00      	cmp	r3, #0
 800527a:	f000 80a6 	beq.w	80053ca <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a85      	ldr	r2, [pc, #532]	@ (8005498 <HAL_DMA_IRQHandler+0x690>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d04a      	beq.n	800531e <HAL_DMA_IRQHandler+0x516>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a83      	ldr	r2, [pc, #524]	@ (800549c <HAL_DMA_IRQHandler+0x694>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d045      	beq.n	800531e <HAL_DMA_IRQHandler+0x516>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a82      	ldr	r2, [pc, #520]	@ (80054a0 <HAL_DMA_IRQHandler+0x698>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d040      	beq.n	800531e <HAL_DMA_IRQHandler+0x516>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a80      	ldr	r2, [pc, #512]	@ (80054a4 <HAL_DMA_IRQHandler+0x69c>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d03b      	beq.n	800531e <HAL_DMA_IRQHandler+0x516>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a7f      	ldr	r2, [pc, #508]	@ (80054a8 <HAL_DMA_IRQHandler+0x6a0>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d036      	beq.n	800531e <HAL_DMA_IRQHandler+0x516>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a7d      	ldr	r2, [pc, #500]	@ (80054ac <HAL_DMA_IRQHandler+0x6a4>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d031      	beq.n	800531e <HAL_DMA_IRQHandler+0x516>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a7c      	ldr	r2, [pc, #496]	@ (80054b0 <HAL_DMA_IRQHandler+0x6a8>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d02c      	beq.n	800531e <HAL_DMA_IRQHandler+0x516>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a7a      	ldr	r2, [pc, #488]	@ (80054b4 <HAL_DMA_IRQHandler+0x6ac>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d027      	beq.n	800531e <HAL_DMA_IRQHandler+0x516>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a79      	ldr	r2, [pc, #484]	@ (80054b8 <HAL_DMA_IRQHandler+0x6b0>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d022      	beq.n	800531e <HAL_DMA_IRQHandler+0x516>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a77      	ldr	r2, [pc, #476]	@ (80054bc <HAL_DMA_IRQHandler+0x6b4>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d01d      	beq.n	800531e <HAL_DMA_IRQHandler+0x516>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a76      	ldr	r2, [pc, #472]	@ (80054c0 <HAL_DMA_IRQHandler+0x6b8>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d018      	beq.n	800531e <HAL_DMA_IRQHandler+0x516>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a74      	ldr	r2, [pc, #464]	@ (80054c4 <HAL_DMA_IRQHandler+0x6bc>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d013      	beq.n	800531e <HAL_DMA_IRQHandler+0x516>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a73      	ldr	r2, [pc, #460]	@ (80054c8 <HAL_DMA_IRQHandler+0x6c0>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d00e      	beq.n	800531e <HAL_DMA_IRQHandler+0x516>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a71      	ldr	r2, [pc, #452]	@ (80054cc <HAL_DMA_IRQHandler+0x6c4>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d009      	beq.n	800531e <HAL_DMA_IRQHandler+0x516>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a70      	ldr	r2, [pc, #448]	@ (80054d0 <HAL_DMA_IRQHandler+0x6c8>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d004      	beq.n	800531e <HAL_DMA_IRQHandler+0x516>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a6e      	ldr	r2, [pc, #440]	@ (80054d4 <HAL_DMA_IRQHandler+0x6cc>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d10a      	bne.n	8005334 <HAL_DMA_IRQHandler+0x52c>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0308 	and.w	r3, r3, #8
 8005328:	2b00      	cmp	r3, #0
 800532a:	bf14      	ite	ne
 800532c:	2301      	movne	r3, #1
 800532e:	2300      	moveq	r3, #0
 8005330:	b2db      	uxtb	r3, r3
 8005332:	e009      	b.n	8005348 <HAL_DMA_IRQHandler+0x540>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0304 	and.w	r3, r3, #4
 800533e:	2b00      	cmp	r3, #0
 8005340:	bf14      	ite	ne
 8005342:	2301      	movne	r3, #1
 8005344:	2300      	moveq	r3, #0
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2b00      	cmp	r3, #0
 800534a:	d03e      	beq.n	80053ca <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005350:	f003 031f 	and.w	r3, r3, #31
 8005354:	2210      	movs	r2, #16
 8005356:	409a      	lsls	r2, r3
 8005358:	6a3b      	ldr	r3, [r7, #32]
 800535a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d018      	beq.n	800539c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d108      	bne.n	800538a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800537c:	2b00      	cmp	r3, #0
 800537e:	d024      	beq.n	80053ca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	4798      	blx	r3
 8005388:	e01f      	b.n	80053ca <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800538e:	2b00      	cmp	r3, #0
 8005390:	d01b      	beq.n	80053ca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	4798      	blx	r3
 800539a:	e016      	b.n	80053ca <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d107      	bne.n	80053ba <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f022 0208 	bic.w	r2, r2, #8
 80053b8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d003      	beq.n	80053ca <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053ce:	f003 031f 	and.w	r3, r3, #31
 80053d2:	2220      	movs	r2, #32
 80053d4:	409a      	lsls	r2, r3
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	4013      	ands	r3, r2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f000 8110 	beq.w	8005600 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a2c      	ldr	r2, [pc, #176]	@ (8005498 <HAL_DMA_IRQHandler+0x690>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d04a      	beq.n	8005480 <HAL_DMA_IRQHandler+0x678>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a2b      	ldr	r2, [pc, #172]	@ (800549c <HAL_DMA_IRQHandler+0x694>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d045      	beq.n	8005480 <HAL_DMA_IRQHandler+0x678>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a29      	ldr	r2, [pc, #164]	@ (80054a0 <HAL_DMA_IRQHandler+0x698>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d040      	beq.n	8005480 <HAL_DMA_IRQHandler+0x678>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a28      	ldr	r2, [pc, #160]	@ (80054a4 <HAL_DMA_IRQHandler+0x69c>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d03b      	beq.n	8005480 <HAL_DMA_IRQHandler+0x678>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a26      	ldr	r2, [pc, #152]	@ (80054a8 <HAL_DMA_IRQHandler+0x6a0>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d036      	beq.n	8005480 <HAL_DMA_IRQHandler+0x678>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a25      	ldr	r2, [pc, #148]	@ (80054ac <HAL_DMA_IRQHandler+0x6a4>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d031      	beq.n	8005480 <HAL_DMA_IRQHandler+0x678>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a23      	ldr	r2, [pc, #140]	@ (80054b0 <HAL_DMA_IRQHandler+0x6a8>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d02c      	beq.n	8005480 <HAL_DMA_IRQHandler+0x678>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a22      	ldr	r2, [pc, #136]	@ (80054b4 <HAL_DMA_IRQHandler+0x6ac>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d027      	beq.n	8005480 <HAL_DMA_IRQHandler+0x678>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a20      	ldr	r2, [pc, #128]	@ (80054b8 <HAL_DMA_IRQHandler+0x6b0>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d022      	beq.n	8005480 <HAL_DMA_IRQHandler+0x678>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a1f      	ldr	r2, [pc, #124]	@ (80054bc <HAL_DMA_IRQHandler+0x6b4>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d01d      	beq.n	8005480 <HAL_DMA_IRQHandler+0x678>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a1d      	ldr	r2, [pc, #116]	@ (80054c0 <HAL_DMA_IRQHandler+0x6b8>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d018      	beq.n	8005480 <HAL_DMA_IRQHandler+0x678>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a1c      	ldr	r2, [pc, #112]	@ (80054c4 <HAL_DMA_IRQHandler+0x6bc>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d013      	beq.n	8005480 <HAL_DMA_IRQHandler+0x678>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a1a      	ldr	r2, [pc, #104]	@ (80054c8 <HAL_DMA_IRQHandler+0x6c0>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d00e      	beq.n	8005480 <HAL_DMA_IRQHandler+0x678>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a19      	ldr	r2, [pc, #100]	@ (80054cc <HAL_DMA_IRQHandler+0x6c4>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d009      	beq.n	8005480 <HAL_DMA_IRQHandler+0x678>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a17      	ldr	r2, [pc, #92]	@ (80054d0 <HAL_DMA_IRQHandler+0x6c8>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d004      	beq.n	8005480 <HAL_DMA_IRQHandler+0x678>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a16      	ldr	r2, [pc, #88]	@ (80054d4 <HAL_DMA_IRQHandler+0x6cc>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d12b      	bne.n	80054d8 <HAL_DMA_IRQHandler+0x6d0>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0310 	and.w	r3, r3, #16
 800548a:	2b00      	cmp	r3, #0
 800548c:	bf14      	ite	ne
 800548e:	2301      	movne	r3, #1
 8005490:	2300      	moveq	r3, #0
 8005492:	b2db      	uxtb	r3, r3
 8005494:	e02a      	b.n	80054ec <HAL_DMA_IRQHandler+0x6e4>
 8005496:	bf00      	nop
 8005498:	40020010 	.word	0x40020010
 800549c:	40020028 	.word	0x40020028
 80054a0:	40020040 	.word	0x40020040
 80054a4:	40020058 	.word	0x40020058
 80054a8:	40020070 	.word	0x40020070
 80054ac:	40020088 	.word	0x40020088
 80054b0:	400200a0 	.word	0x400200a0
 80054b4:	400200b8 	.word	0x400200b8
 80054b8:	40020410 	.word	0x40020410
 80054bc:	40020428 	.word	0x40020428
 80054c0:	40020440 	.word	0x40020440
 80054c4:	40020458 	.word	0x40020458
 80054c8:	40020470 	.word	0x40020470
 80054cc:	40020488 	.word	0x40020488
 80054d0:	400204a0 	.word	0x400204a0
 80054d4:	400204b8 	.word	0x400204b8
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0302 	and.w	r3, r3, #2
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	bf14      	ite	ne
 80054e6:	2301      	movne	r3, #1
 80054e8:	2300      	moveq	r3, #0
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f000 8087 	beq.w	8005600 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054f6:	f003 031f 	and.w	r3, r3, #31
 80054fa:	2220      	movs	r2, #32
 80054fc:	409a      	lsls	r2, r3
 80054fe:	6a3b      	ldr	r3, [r7, #32]
 8005500:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b04      	cmp	r3, #4
 800550c:	d139      	bne.n	8005582 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 0216 	bic.w	r2, r2, #22
 800551c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	695a      	ldr	r2, [r3, #20]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800552c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005532:	2b00      	cmp	r3, #0
 8005534:	d103      	bne.n	800553e <HAL_DMA_IRQHandler+0x736>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800553a:	2b00      	cmp	r3, #0
 800553c:	d007      	beq.n	800554e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f022 0208 	bic.w	r2, r2, #8
 800554c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005552:	f003 031f 	and.w	r3, r3, #31
 8005556:	223f      	movs	r2, #63	@ 0x3f
 8005558:	409a      	lsls	r2, r3
 800555a:	6a3b      	ldr	r3, [r7, #32]
 800555c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005572:	2b00      	cmp	r3, #0
 8005574:	f000 8382 	beq.w	8005c7c <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	4798      	blx	r3
          }
          return;
 8005580:	e37c      	b.n	8005c7c <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d018      	beq.n	80055c2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d108      	bne.n	80055b0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d02c      	beq.n	8005600 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	4798      	blx	r3
 80055ae:	e027      	b.n	8005600 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d023      	beq.n	8005600 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	4798      	blx	r3
 80055c0:	e01e      	b.n	8005600 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d10f      	bne.n	80055f0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f022 0210 	bic.w	r2, r2, #16
 80055de:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d003      	beq.n	8005600 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005604:	2b00      	cmp	r3, #0
 8005606:	f000 833e 	beq.w	8005c86 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b00      	cmp	r3, #0
 8005614:	f000 8088 	beq.w	8005728 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2204      	movs	r2, #4
 800561c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a89      	ldr	r2, [pc, #548]	@ (800584c <HAL_DMA_IRQHandler+0xa44>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d04a      	beq.n	80056c0 <HAL_DMA_IRQHandler+0x8b8>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a88      	ldr	r2, [pc, #544]	@ (8005850 <HAL_DMA_IRQHandler+0xa48>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d045      	beq.n	80056c0 <HAL_DMA_IRQHandler+0x8b8>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a86      	ldr	r2, [pc, #536]	@ (8005854 <HAL_DMA_IRQHandler+0xa4c>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d040      	beq.n	80056c0 <HAL_DMA_IRQHandler+0x8b8>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a85      	ldr	r2, [pc, #532]	@ (8005858 <HAL_DMA_IRQHandler+0xa50>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d03b      	beq.n	80056c0 <HAL_DMA_IRQHandler+0x8b8>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a83      	ldr	r2, [pc, #524]	@ (800585c <HAL_DMA_IRQHandler+0xa54>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d036      	beq.n	80056c0 <HAL_DMA_IRQHandler+0x8b8>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a82      	ldr	r2, [pc, #520]	@ (8005860 <HAL_DMA_IRQHandler+0xa58>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d031      	beq.n	80056c0 <HAL_DMA_IRQHandler+0x8b8>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a80      	ldr	r2, [pc, #512]	@ (8005864 <HAL_DMA_IRQHandler+0xa5c>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d02c      	beq.n	80056c0 <HAL_DMA_IRQHandler+0x8b8>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a7f      	ldr	r2, [pc, #508]	@ (8005868 <HAL_DMA_IRQHandler+0xa60>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d027      	beq.n	80056c0 <HAL_DMA_IRQHandler+0x8b8>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a7d      	ldr	r2, [pc, #500]	@ (800586c <HAL_DMA_IRQHandler+0xa64>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d022      	beq.n	80056c0 <HAL_DMA_IRQHandler+0x8b8>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a7c      	ldr	r2, [pc, #496]	@ (8005870 <HAL_DMA_IRQHandler+0xa68>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d01d      	beq.n	80056c0 <HAL_DMA_IRQHandler+0x8b8>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a7a      	ldr	r2, [pc, #488]	@ (8005874 <HAL_DMA_IRQHandler+0xa6c>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d018      	beq.n	80056c0 <HAL_DMA_IRQHandler+0x8b8>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a79      	ldr	r2, [pc, #484]	@ (8005878 <HAL_DMA_IRQHandler+0xa70>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d013      	beq.n	80056c0 <HAL_DMA_IRQHandler+0x8b8>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a77      	ldr	r2, [pc, #476]	@ (800587c <HAL_DMA_IRQHandler+0xa74>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d00e      	beq.n	80056c0 <HAL_DMA_IRQHandler+0x8b8>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a76      	ldr	r2, [pc, #472]	@ (8005880 <HAL_DMA_IRQHandler+0xa78>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d009      	beq.n	80056c0 <HAL_DMA_IRQHandler+0x8b8>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a74      	ldr	r2, [pc, #464]	@ (8005884 <HAL_DMA_IRQHandler+0xa7c>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d004      	beq.n	80056c0 <HAL_DMA_IRQHandler+0x8b8>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a73      	ldr	r2, [pc, #460]	@ (8005888 <HAL_DMA_IRQHandler+0xa80>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d108      	bne.n	80056d2 <HAL_DMA_IRQHandler+0x8ca>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f022 0201 	bic.w	r2, r2, #1
 80056ce:	601a      	str	r2, [r3, #0]
 80056d0:	e007      	b.n	80056e2 <HAL_DMA_IRQHandler+0x8da>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f022 0201 	bic.w	r2, r2, #1
 80056e0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	3301      	adds	r3, #1
 80056e6:	60fb      	str	r3, [r7, #12]
 80056e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d307      	bcc.n	80056fe <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0301 	and.w	r3, r3, #1
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1f2      	bne.n	80056e2 <HAL_DMA_IRQHandler+0x8da>
 80056fc:	e000      	b.n	8005700 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80056fe:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	2b00      	cmp	r3, #0
 800570c:	d004      	beq.n	8005718 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2203      	movs	r2, #3
 8005712:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005716:	e003      	b.n	8005720 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800572c:	2b00      	cmp	r3, #0
 800572e:	f000 82aa 	beq.w	8005c86 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	4798      	blx	r3
 800573a:	e2a4      	b.n	8005c86 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a52      	ldr	r2, [pc, #328]	@ (800588c <HAL_DMA_IRQHandler+0xa84>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d04a      	beq.n	80057dc <HAL_DMA_IRQHandler+0x9d4>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a51      	ldr	r2, [pc, #324]	@ (8005890 <HAL_DMA_IRQHandler+0xa88>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d045      	beq.n	80057dc <HAL_DMA_IRQHandler+0x9d4>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a4f      	ldr	r2, [pc, #316]	@ (8005894 <HAL_DMA_IRQHandler+0xa8c>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d040      	beq.n	80057dc <HAL_DMA_IRQHandler+0x9d4>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a4e      	ldr	r2, [pc, #312]	@ (8005898 <HAL_DMA_IRQHandler+0xa90>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d03b      	beq.n	80057dc <HAL_DMA_IRQHandler+0x9d4>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a4c      	ldr	r2, [pc, #304]	@ (800589c <HAL_DMA_IRQHandler+0xa94>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d036      	beq.n	80057dc <HAL_DMA_IRQHandler+0x9d4>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a4b      	ldr	r2, [pc, #300]	@ (80058a0 <HAL_DMA_IRQHandler+0xa98>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d031      	beq.n	80057dc <HAL_DMA_IRQHandler+0x9d4>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a49      	ldr	r2, [pc, #292]	@ (80058a4 <HAL_DMA_IRQHandler+0xa9c>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d02c      	beq.n	80057dc <HAL_DMA_IRQHandler+0x9d4>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a48      	ldr	r2, [pc, #288]	@ (80058a8 <HAL_DMA_IRQHandler+0xaa0>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d027      	beq.n	80057dc <HAL_DMA_IRQHandler+0x9d4>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a46      	ldr	r2, [pc, #280]	@ (80058ac <HAL_DMA_IRQHandler+0xaa4>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d022      	beq.n	80057dc <HAL_DMA_IRQHandler+0x9d4>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a45      	ldr	r2, [pc, #276]	@ (80058b0 <HAL_DMA_IRQHandler+0xaa8>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d01d      	beq.n	80057dc <HAL_DMA_IRQHandler+0x9d4>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a43      	ldr	r2, [pc, #268]	@ (80058b4 <HAL_DMA_IRQHandler+0xaac>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d018      	beq.n	80057dc <HAL_DMA_IRQHandler+0x9d4>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a42      	ldr	r2, [pc, #264]	@ (80058b8 <HAL_DMA_IRQHandler+0xab0>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d013      	beq.n	80057dc <HAL_DMA_IRQHandler+0x9d4>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a40      	ldr	r2, [pc, #256]	@ (80058bc <HAL_DMA_IRQHandler+0xab4>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d00e      	beq.n	80057dc <HAL_DMA_IRQHandler+0x9d4>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a3f      	ldr	r2, [pc, #252]	@ (80058c0 <HAL_DMA_IRQHandler+0xab8>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d009      	beq.n	80057dc <HAL_DMA_IRQHandler+0x9d4>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a3d      	ldr	r2, [pc, #244]	@ (80058c4 <HAL_DMA_IRQHandler+0xabc>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d004      	beq.n	80057dc <HAL_DMA_IRQHandler+0x9d4>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a3c      	ldr	r2, [pc, #240]	@ (80058c8 <HAL_DMA_IRQHandler+0xac0>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d101      	bne.n	80057e0 <HAL_DMA_IRQHandler+0x9d8>
 80057dc:	2301      	movs	r3, #1
 80057de:	e000      	b.n	80057e2 <HAL_DMA_IRQHandler+0x9da>
 80057e0:	2300      	movs	r3, #0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f000 824f 	beq.w	8005c86 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057f4:	f003 031f 	and.w	r3, r3, #31
 80057f8:	2204      	movs	r2, #4
 80057fa:	409a      	lsls	r2, r3
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	4013      	ands	r3, r2
 8005800:	2b00      	cmp	r3, #0
 8005802:	f000 80dd 	beq.w	80059c0 <HAL_DMA_IRQHandler+0xbb8>
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	f003 0304 	and.w	r3, r3, #4
 800580c:	2b00      	cmp	r3, #0
 800580e:	f000 80d7 	beq.w	80059c0 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005816:	f003 031f 	and.w	r3, r3, #31
 800581a:	2204      	movs	r2, #4
 800581c:	409a      	lsls	r2, r3
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d059      	beq.n	80058e0 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d14a      	bne.n	80058cc <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800583a:	2b00      	cmp	r3, #0
 800583c:	f000 8220 	beq.w	8005c80 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005848:	e21a      	b.n	8005c80 <HAL_DMA_IRQHandler+0xe78>
 800584a:	bf00      	nop
 800584c:	40020010 	.word	0x40020010
 8005850:	40020028 	.word	0x40020028
 8005854:	40020040 	.word	0x40020040
 8005858:	40020058 	.word	0x40020058
 800585c:	40020070 	.word	0x40020070
 8005860:	40020088 	.word	0x40020088
 8005864:	400200a0 	.word	0x400200a0
 8005868:	400200b8 	.word	0x400200b8
 800586c:	40020410 	.word	0x40020410
 8005870:	40020428 	.word	0x40020428
 8005874:	40020440 	.word	0x40020440
 8005878:	40020458 	.word	0x40020458
 800587c:	40020470 	.word	0x40020470
 8005880:	40020488 	.word	0x40020488
 8005884:	400204a0 	.word	0x400204a0
 8005888:	400204b8 	.word	0x400204b8
 800588c:	48022c08 	.word	0x48022c08
 8005890:	48022c1c 	.word	0x48022c1c
 8005894:	48022c30 	.word	0x48022c30
 8005898:	48022c44 	.word	0x48022c44
 800589c:	48022c58 	.word	0x48022c58
 80058a0:	48022c6c 	.word	0x48022c6c
 80058a4:	48022c80 	.word	0x48022c80
 80058a8:	48022c94 	.word	0x48022c94
 80058ac:	58025408 	.word	0x58025408
 80058b0:	5802541c 	.word	0x5802541c
 80058b4:	58025430 	.word	0x58025430
 80058b8:	58025444 	.word	0x58025444
 80058bc:	58025458 	.word	0x58025458
 80058c0:	5802546c 	.word	0x5802546c
 80058c4:	58025480 	.word	0x58025480
 80058c8:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f000 81d5 	beq.w	8005c80 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058de:	e1cf      	b.n	8005c80 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	f003 0320 	and.w	r3, r3, #32
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d160      	bne.n	80059ac <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a7f      	ldr	r2, [pc, #508]	@ (8005aec <HAL_DMA_IRQHandler+0xce4>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d04a      	beq.n	800598a <HAL_DMA_IRQHandler+0xb82>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a7d      	ldr	r2, [pc, #500]	@ (8005af0 <HAL_DMA_IRQHandler+0xce8>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d045      	beq.n	800598a <HAL_DMA_IRQHandler+0xb82>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a7c      	ldr	r2, [pc, #496]	@ (8005af4 <HAL_DMA_IRQHandler+0xcec>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d040      	beq.n	800598a <HAL_DMA_IRQHandler+0xb82>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a7a      	ldr	r2, [pc, #488]	@ (8005af8 <HAL_DMA_IRQHandler+0xcf0>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d03b      	beq.n	800598a <HAL_DMA_IRQHandler+0xb82>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a79      	ldr	r2, [pc, #484]	@ (8005afc <HAL_DMA_IRQHandler+0xcf4>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d036      	beq.n	800598a <HAL_DMA_IRQHandler+0xb82>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a77      	ldr	r2, [pc, #476]	@ (8005b00 <HAL_DMA_IRQHandler+0xcf8>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d031      	beq.n	800598a <HAL_DMA_IRQHandler+0xb82>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a76      	ldr	r2, [pc, #472]	@ (8005b04 <HAL_DMA_IRQHandler+0xcfc>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d02c      	beq.n	800598a <HAL_DMA_IRQHandler+0xb82>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a74      	ldr	r2, [pc, #464]	@ (8005b08 <HAL_DMA_IRQHandler+0xd00>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d027      	beq.n	800598a <HAL_DMA_IRQHandler+0xb82>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a73      	ldr	r2, [pc, #460]	@ (8005b0c <HAL_DMA_IRQHandler+0xd04>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d022      	beq.n	800598a <HAL_DMA_IRQHandler+0xb82>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a71      	ldr	r2, [pc, #452]	@ (8005b10 <HAL_DMA_IRQHandler+0xd08>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d01d      	beq.n	800598a <HAL_DMA_IRQHandler+0xb82>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a70      	ldr	r2, [pc, #448]	@ (8005b14 <HAL_DMA_IRQHandler+0xd0c>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d018      	beq.n	800598a <HAL_DMA_IRQHandler+0xb82>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a6e      	ldr	r2, [pc, #440]	@ (8005b18 <HAL_DMA_IRQHandler+0xd10>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d013      	beq.n	800598a <HAL_DMA_IRQHandler+0xb82>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a6d      	ldr	r2, [pc, #436]	@ (8005b1c <HAL_DMA_IRQHandler+0xd14>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d00e      	beq.n	800598a <HAL_DMA_IRQHandler+0xb82>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a6b      	ldr	r2, [pc, #428]	@ (8005b20 <HAL_DMA_IRQHandler+0xd18>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d009      	beq.n	800598a <HAL_DMA_IRQHandler+0xb82>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a6a      	ldr	r2, [pc, #424]	@ (8005b24 <HAL_DMA_IRQHandler+0xd1c>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d004      	beq.n	800598a <HAL_DMA_IRQHandler+0xb82>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a68      	ldr	r2, [pc, #416]	@ (8005b28 <HAL_DMA_IRQHandler+0xd20>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d108      	bne.n	800599c <HAL_DMA_IRQHandler+0xb94>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f022 0208 	bic.w	r2, r2, #8
 8005998:	601a      	str	r2, [r3, #0]
 800599a:	e007      	b.n	80059ac <HAL_DMA_IRQHandler+0xba4>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f022 0204 	bic.w	r2, r2, #4
 80059aa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f000 8165 	beq.w	8005c80 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80059be:	e15f      	b.n	8005c80 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059c4:	f003 031f 	and.w	r3, r3, #31
 80059c8:	2202      	movs	r2, #2
 80059ca:	409a      	lsls	r2, r3
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	4013      	ands	r3, r2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	f000 80c5 	beq.w	8005b60 <HAL_DMA_IRQHandler+0xd58>
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	f003 0302 	and.w	r3, r3, #2
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f000 80bf 	beq.w	8005b60 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059e6:	f003 031f 	and.w	r3, r3, #31
 80059ea:	2202      	movs	r2, #2
 80059ec:	409a      	lsls	r2, r3
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d018      	beq.n	8005a2e <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d109      	bne.n	8005a1a <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	f000 813a 	beq.w	8005c84 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a18:	e134      	b.n	8005c84 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f000 8130 	beq.w	8005c84 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a2c:	e12a      	b.n	8005c84 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	f003 0320 	and.w	r3, r3, #32
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f040 8089 	bne.w	8005b4c <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a2b      	ldr	r2, [pc, #172]	@ (8005aec <HAL_DMA_IRQHandler+0xce4>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d04a      	beq.n	8005ada <HAL_DMA_IRQHandler+0xcd2>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a29      	ldr	r2, [pc, #164]	@ (8005af0 <HAL_DMA_IRQHandler+0xce8>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d045      	beq.n	8005ada <HAL_DMA_IRQHandler+0xcd2>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a28      	ldr	r2, [pc, #160]	@ (8005af4 <HAL_DMA_IRQHandler+0xcec>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d040      	beq.n	8005ada <HAL_DMA_IRQHandler+0xcd2>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a26      	ldr	r2, [pc, #152]	@ (8005af8 <HAL_DMA_IRQHandler+0xcf0>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d03b      	beq.n	8005ada <HAL_DMA_IRQHandler+0xcd2>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a25      	ldr	r2, [pc, #148]	@ (8005afc <HAL_DMA_IRQHandler+0xcf4>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d036      	beq.n	8005ada <HAL_DMA_IRQHandler+0xcd2>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a23      	ldr	r2, [pc, #140]	@ (8005b00 <HAL_DMA_IRQHandler+0xcf8>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d031      	beq.n	8005ada <HAL_DMA_IRQHandler+0xcd2>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a22      	ldr	r2, [pc, #136]	@ (8005b04 <HAL_DMA_IRQHandler+0xcfc>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d02c      	beq.n	8005ada <HAL_DMA_IRQHandler+0xcd2>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a20      	ldr	r2, [pc, #128]	@ (8005b08 <HAL_DMA_IRQHandler+0xd00>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d027      	beq.n	8005ada <HAL_DMA_IRQHandler+0xcd2>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a1f      	ldr	r2, [pc, #124]	@ (8005b0c <HAL_DMA_IRQHandler+0xd04>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d022      	beq.n	8005ada <HAL_DMA_IRQHandler+0xcd2>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a1d      	ldr	r2, [pc, #116]	@ (8005b10 <HAL_DMA_IRQHandler+0xd08>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d01d      	beq.n	8005ada <HAL_DMA_IRQHandler+0xcd2>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a1c      	ldr	r2, [pc, #112]	@ (8005b14 <HAL_DMA_IRQHandler+0xd0c>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d018      	beq.n	8005ada <HAL_DMA_IRQHandler+0xcd2>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a1a      	ldr	r2, [pc, #104]	@ (8005b18 <HAL_DMA_IRQHandler+0xd10>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d013      	beq.n	8005ada <HAL_DMA_IRQHandler+0xcd2>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a19      	ldr	r2, [pc, #100]	@ (8005b1c <HAL_DMA_IRQHandler+0xd14>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d00e      	beq.n	8005ada <HAL_DMA_IRQHandler+0xcd2>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a17      	ldr	r2, [pc, #92]	@ (8005b20 <HAL_DMA_IRQHandler+0xd18>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d009      	beq.n	8005ada <HAL_DMA_IRQHandler+0xcd2>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a16      	ldr	r2, [pc, #88]	@ (8005b24 <HAL_DMA_IRQHandler+0xd1c>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d004      	beq.n	8005ada <HAL_DMA_IRQHandler+0xcd2>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a14      	ldr	r2, [pc, #80]	@ (8005b28 <HAL_DMA_IRQHandler+0xd20>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d128      	bne.n	8005b2c <HAL_DMA_IRQHandler+0xd24>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f022 0214 	bic.w	r2, r2, #20
 8005ae8:	601a      	str	r2, [r3, #0]
 8005aea:	e027      	b.n	8005b3c <HAL_DMA_IRQHandler+0xd34>
 8005aec:	40020010 	.word	0x40020010
 8005af0:	40020028 	.word	0x40020028
 8005af4:	40020040 	.word	0x40020040
 8005af8:	40020058 	.word	0x40020058
 8005afc:	40020070 	.word	0x40020070
 8005b00:	40020088 	.word	0x40020088
 8005b04:	400200a0 	.word	0x400200a0
 8005b08:	400200b8 	.word	0x400200b8
 8005b0c:	40020410 	.word	0x40020410
 8005b10:	40020428 	.word	0x40020428
 8005b14:	40020440 	.word	0x40020440
 8005b18:	40020458 	.word	0x40020458
 8005b1c:	40020470 	.word	0x40020470
 8005b20:	40020488 	.word	0x40020488
 8005b24:	400204a0 	.word	0x400204a0
 8005b28:	400204b8 	.word	0x400204b8
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f022 020a 	bic.w	r2, r2, #10
 8005b3a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f000 8097 	beq.w	8005c84 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b5e:	e091      	b.n	8005c84 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b64:	f003 031f 	and.w	r3, r3, #31
 8005b68:	2208      	movs	r2, #8
 8005b6a:	409a      	lsls	r2, r3
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	4013      	ands	r3, r2
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f000 8088 	beq.w	8005c86 <HAL_DMA_IRQHandler+0xe7e>
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	f003 0308 	and.w	r3, r3, #8
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f000 8082 	beq.w	8005c86 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a41      	ldr	r2, [pc, #260]	@ (8005c8c <HAL_DMA_IRQHandler+0xe84>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d04a      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xe1a>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a3f      	ldr	r2, [pc, #252]	@ (8005c90 <HAL_DMA_IRQHandler+0xe88>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d045      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xe1a>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a3e      	ldr	r2, [pc, #248]	@ (8005c94 <HAL_DMA_IRQHandler+0xe8c>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d040      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xe1a>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a3c      	ldr	r2, [pc, #240]	@ (8005c98 <HAL_DMA_IRQHandler+0xe90>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d03b      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xe1a>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a3b      	ldr	r2, [pc, #236]	@ (8005c9c <HAL_DMA_IRQHandler+0xe94>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d036      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xe1a>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a39      	ldr	r2, [pc, #228]	@ (8005ca0 <HAL_DMA_IRQHandler+0xe98>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d031      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xe1a>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a38      	ldr	r2, [pc, #224]	@ (8005ca4 <HAL_DMA_IRQHandler+0xe9c>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d02c      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xe1a>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a36      	ldr	r2, [pc, #216]	@ (8005ca8 <HAL_DMA_IRQHandler+0xea0>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d027      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xe1a>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a35      	ldr	r2, [pc, #212]	@ (8005cac <HAL_DMA_IRQHandler+0xea4>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d022      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xe1a>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a33      	ldr	r2, [pc, #204]	@ (8005cb0 <HAL_DMA_IRQHandler+0xea8>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d01d      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xe1a>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a32      	ldr	r2, [pc, #200]	@ (8005cb4 <HAL_DMA_IRQHandler+0xeac>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d018      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xe1a>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a30      	ldr	r2, [pc, #192]	@ (8005cb8 <HAL_DMA_IRQHandler+0xeb0>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d013      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xe1a>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a2f      	ldr	r2, [pc, #188]	@ (8005cbc <HAL_DMA_IRQHandler+0xeb4>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d00e      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xe1a>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a2d      	ldr	r2, [pc, #180]	@ (8005cc0 <HAL_DMA_IRQHandler+0xeb8>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d009      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xe1a>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a2c      	ldr	r2, [pc, #176]	@ (8005cc4 <HAL_DMA_IRQHandler+0xebc>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d004      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xe1a>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a2a      	ldr	r2, [pc, #168]	@ (8005cc8 <HAL_DMA_IRQHandler+0xec0>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d108      	bne.n	8005c34 <HAL_DMA_IRQHandler+0xe2c>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f022 021c 	bic.w	r2, r2, #28
 8005c30:	601a      	str	r2, [r3, #0]
 8005c32:	e007      	b.n	8005c44 <HAL_DMA_IRQHandler+0xe3c>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f022 020e 	bic.w	r2, r2, #14
 8005c42:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c48:	f003 031f 	and.w	r3, r3, #31
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	409a      	lsls	r2, r3
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d009      	beq.n	8005c86 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	4798      	blx	r3
 8005c7a:	e004      	b.n	8005c86 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8005c7c:	bf00      	nop
 8005c7e:	e002      	b.n	8005c86 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c80:	bf00      	nop
 8005c82:	e000      	b.n	8005c86 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c84:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005c86:	3728      	adds	r7, #40	@ 0x28
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	40020010 	.word	0x40020010
 8005c90:	40020028 	.word	0x40020028
 8005c94:	40020040 	.word	0x40020040
 8005c98:	40020058 	.word	0x40020058
 8005c9c:	40020070 	.word	0x40020070
 8005ca0:	40020088 	.word	0x40020088
 8005ca4:	400200a0 	.word	0x400200a0
 8005ca8:	400200b8 	.word	0x400200b8
 8005cac:	40020410 	.word	0x40020410
 8005cb0:	40020428 	.word	0x40020428
 8005cb4:	40020440 	.word	0x40020440
 8005cb8:	40020458 	.word	0x40020458
 8005cbc:	40020470 	.word	0x40020470
 8005cc0:	40020488 	.word	0x40020488
 8005cc4:	400204a0 	.word	0x400204a0
 8005cc8:	400204b8 	.word	0x400204b8

08005ccc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b087      	sub	sp, #28
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]
 8005cd8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cde:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ce4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a7f      	ldr	r2, [pc, #508]	@ (8005ee8 <DMA_SetConfig+0x21c>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d072      	beq.n	8005dd6 <DMA_SetConfig+0x10a>
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a7d      	ldr	r2, [pc, #500]	@ (8005eec <DMA_SetConfig+0x220>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d06d      	beq.n	8005dd6 <DMA_SetConfig+0x10a>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a7c      	ldr	r2, [pc, #496]	@ (8005ef0 <DMA_SetConfig+0x224>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d068      	beq.n	8005dd6 <DMA_SetConfig+0x10a>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a7a      	ldr	r2, [pc, #488]	@ (8005ef4 <DMA_SetConfig+0x228>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d063      	beq.n	8005dd6 <DMA_SetConfig+0x10a>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a79      	ldr	r2, [pc, #484]	@ (8005ef8 <DMA_SetConfig+0x22c>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d05e      	beq.n	8005dd6 <DMA_SetConfig+0x10a>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a77      	ldr	r2, [pc, #476]	@ (8005efc <DMA_SetConfig+0x230>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d059      	beq.n	8005dd6 <DMA_SetConfig+0x10a>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a76      	ldr	r2, [pc, #472]	@ (8005f00 <DMA_SetConfig+0x234>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d054      	beq.n	8005dd6 <DMA_SetConfig+0x10a>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a74      	ldr	r2, [pc, #464]	@ (8005f04 <DMA_SetConfig+0x238>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d04f      	beq.n	8005dd6 <DMA_SetConfig+0x10a>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a73      	ldr	r2, [pc, #460]	@ (8005f08 <DMA_SetConfig+0x23c>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d04a      	beq.n	8005dd6 <DMA_SetConfig+0x10a>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a71      	ldr	r2, [pc, #452]	@ (8005f0c <DMA_SetConfig+0x240>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d045      	beq.n	8005dd6 <DMA_SetConfig+0x10a>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a70      	ldr	r2, [pc, #448]	@ (8005f10 <DMA_SetConfig+0x244>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d040      	beq.n	8005dd6 <DMA_SetConfig+0x10a>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a6e      	ldr	r2, [pc, #440]	@ (8005f14 <DMA_SetConfig+0x248>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d03b      	beq.n	8005dd6 <DMA_SetConfig+0x10a>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a6d      	ldr	r2, [pc, #436]	@ (8005f18 <DMA_SetConfig+0x24c>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d036      	beq.n	8005dd6 <DMA_SetConfig+0x10a>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a6b      	ldr	r2, [pc, #428]	@ (8005f1c <DMA_SetConfig+0x250>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d031      	beq.n	8005dd6 <DMA_SetConfig+0x10a>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a6a      	ldr	r2, [pc, #424]	@ (8005f20 <DMA_SetConfig+0x254>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d02c      	beq.n	8005dd6 <DMA_SetConfig+0x10a>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a68      	ldr	r2, [pc, #416]	@ (8005f24 <DMA_SetConfig+0x258>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d027      	beq.n	8005dd6 <DMA_SetConfig+0x10a>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a67      	ldr	r2, [pc, #412]	@ (8005f28 <DMA_SetConfig+0x25c>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d022      	beq.n	8005dd6 <DMA_SetConfig+0x10a>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a65      	ldr	r2, [pc, #404]	@ (8005f2c <DMA_SetConfig+0x260>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d01d      	beq.n	8005dd6 <DMA_SetConfig+0x10a>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a64      	ldr	r2, [pc, #400]	@ (8005f30 <DMA_SetConfig+0x264>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d018      	beq.n	8005dd6 <DMA_SetConfig+0x10a>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a62      	ldr	r2, [pc, #392]	@ (8005f34 <DMA_SetConfig+0x268>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d013      	beq.n	8005dd6 <DMA_SetConfig+0x10a>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a61      	ldr	r2, [pc, #388]	@ (8005f38 <DMA_SetConfig+0x26c>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d00e      	beq.n	8005dd6 <DMA_SetConfig+0x10a>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a5f      	ldr	r2, [pc, #380]	@ (8005f3c <DMA_SetConfig+0x270>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d009      	beq.n	8005dd6 <DMA_SetConfig+0x10a>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a5e      	ldr	r2, [pc, #376]	@ (8005f40 <DMA_SetConfig+0x274>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d004      	beq.n	8005dd6 <DMA_SetConfig+0x10a>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a5c      	ldr	r2, [pc, #368]	@ (8005f44 <DMA_SetConfig+0x278>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d101      	bne.n	8005dda <DMA_SetConfig+0x10e>
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e000      	b.n	8005ddc <DMA_SetConfig+0x110>
 8005dda:	2300      	movs	r3, #0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d00d      	beq.n	8005dfc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005de8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d004      	beq.n	8005dfc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005dfa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a39      	ldr	r2, [pc, #228]	@ (8005ee8 <DMA_SetConfig+0x21c>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d04a      	beq.n	8005e9c <DMA_SetConfig+0x1d0>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a38      	ldr	r2, [pc, #224]	@ (8005eec <DMA_SetConfig+0x220>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d045      	beq.n	8005e9c <DMA_SetConfig+0x1d0>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a36      	ldr	r2, [pc, #216]	@ (8005ef0 <DMA_SetConfig+0x224>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d040      	beq.n	8005e9c <DMA_SetConfig+0x1d0>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a35      	ldr	r2, [pc, #212]	@ (8005ef4 <DMA_SetConfig+0x228>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d03b      	beq.n	8005e9c <DMA_SetConfig+0x1d0>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a33      	ldr	r2, [pc, #204]	@ (8005ef8 <DMA_SetConfig+0x22c>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d036      	beq.n	8005e9c <DMA_SetConfig+0x1d0>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a32      	ldr	r2, [pc, #200]	@ (8005efc <DMA_SetConfig+0x230>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d031      	beq.n	8005e9c <DMA_SetConfig+0x1d0>
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a30      	ldr	r2, [pc, #192]	@ (8005f00 <DMA_SetConfig+0x234>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d02c      	beq.n	8005e9c <DMA_SetConfig+0x1d0>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a2f      	ldr	r2, [pc, #188]	@ (8005f04 <DMA_SetConfig+0x238>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d027      	beq.n	8005e9c <DMA_SetConfig+0x1d0>
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a2d      	ldr	r2, [pc, #180]	@ (8005f08 <DMA_SetConfig+0x23c>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d022      	beq.n	8005e9c <DMA_SetConfig+0x1d0>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a2c      	ldr	r2, [pc, #176]	@ (8005f0c <DMA_SetConfig+0x240>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d01d      	beq.n	8005e9c <DMA_SetConfig+0x1d0>
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a2a      	ldr	r2, [pc, #168]	@ (8005f10 <DMA_SetConfig+0x244>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d018      	beq.n	8005e9c <DMA_SetConfig+0x1d0>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a29      	ldr	r2, [pc, #164]	@ (8005f14 <DMA_SetConfig+0x248>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d013      	beq.n	8005e9c <DMA_SetConfig+0x1d0>
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a27      	ldr	r2, [pc, #156]	@ (8005f18 <DMA_SetConfig+0x24c>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d00e      	beq.n	8005e9c <DMA_SetConfig+0x1d0>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a26      	ldr	r2, [pc, #152]	@ (8005f1c <DMA_SetConfig+0x250>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d009      	beq.n	8005e9c <DMA_SetConfig+0x1d0>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a24      	ldr	r2, [pc, #144]	@ (8005f20 <DMA_SetConfig+0x254>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d004      	beq.n	8005e9c <DMA_SetConfig+0x1d0>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a23      	ldr	r2, [pc, #140]	@ (8005f24 <DMA_SetConfig+0x258>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d101      	bne.n	8005ea0 <DMA_SetConfig+0x1d4>
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e000      	b.n	8005ea2 <DMA_SetConfig+0x1d6>
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d059      	beq.n	8005f5a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eaa:	f003 031f 	and.w	r3, r3, #31
 8005eae:	223f      	movs	r2, #63	@ 0x3f
 8005eb0:	409a      	lsls	r2, r3
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005ec4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	683a      	ldr	r2, [r7, #0]
 8005ecc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	2b40      	cmp	r3, #64	@ 0x40
 8005ed4:	d138      	bne.n	8005f48 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005ee6:	e0ae      	b.n	8006046 <DMA_SetConfig+0x37a>
 8005ee8:	40020010 	.word	0x40020010
 8005eec:	40020028 	.word	0x40020028
 8005ef0:	40020040 	.word	0x40020040
 8005ef4:	40020058 	.word	0x40020058
 8005ef8:	40020070 	.word	0x40020070
 8005efc:	40020088 	.word	0x40020088
 8005f00:	400200a0 	.word	0x400200a0
 8005f04:	400200b8 	.word	0x400200b8
 8005f08:	40020410 	.word	0x40020410
 8005f0c:	40020428 	.word	0x40020428
 8005f10:	40020440 	.word	0x40020440
 8005f14:	40020458 	.word	0x40020458
 8005f18:	40020470 	.word	0x40020470
 8005f1c:	40020488 	.word	0x40020488
 8005f20:	400204a0 	.word	0x400204a0
 8005f24:	400204b8 	.word	0x400204b8
 8005f28:	58025408 	.word	0x58025408
 8005f2c:	5802541c 	.word	0x5802541c
 8005f30:	58025430 	.word	0x58025430
 8005f34:	58025444 	.word	0x58025444
 8005f38:	58025458 	.word	0x58025458
 8005f3c:	5802546c 	.word	0x5802546c
 8005f40:	58025480 	.word	0x58025480
 8005f44:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68ba      	ldr	r2, [r7, #8]
 8005f4e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	60da      	str	r2, [r3, #12]
}
 8005f58:	e075      	b.n	8006046 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a3d      	ldr	r2, [pc, #244]	@ (8006054 <DMA_SetConfig+0x388>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d04a      	beq.n	8005ffa <DMA_SetConfig+0x32e>
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a3b      	ldr	r2, [pc, #236]	@ (8006058 <DMA_SetConfig+0x38c>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d045      	beq.n	8005ffa <DMA_SetConfig+0x32e>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a3a      	ldr	r2, [pc, #232]	@ (800605c <DMA_SetConfig+0x390>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d040      	beq.n	8005ffa <DMA_SetConfig+0x32e>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a38      	ldr	r2, [pc, #224]	@ (8006060 <DMA_SetConfig+0x394>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d03b      	beq.n	8005ffa <DMA_SetConfig+0x32e>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a37      	ldr	r2, [pc, #220]	@ (8006064 <DMA_SetConfig+0x398>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d036      	beq.n	8005ffa <DMA_SetConfig+0x32e>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a35      	ldr	r2, [pc, #212]	@ (8006068 <DMA_SetConfig+0x39c>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d031      	beq.n	8005ffa <DMA_SetConfig+0x32e>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a34      	ldr	r2, [pc, #208]	@ (800606c <DMA_SetConfig+0x3a0>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d02c      	beq.n	8005ffa <DMA_SetConfig+0x32e>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a32      	ldr	r2, [pc, #200]	@ (8006070 <DMA_SetConfig+0x3a4>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d027      	beq.n	8005ffa <DMA_SetConfig+0x32e>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a31      	ldr	r2, [pc, #196]	@ (8006074 <DMA_SetConfig+0x3a8>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d022      	beq.n	8005ffa <DMA_SetConfig+0x32e>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a2f      	ldr	r2, [pc, #188]	@ (8006078 <DMA_SetConfig+0x3ac>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d01d      	beq.n	8005ffa <DMA_SetConfig+0x32e>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a2e      	ldr	r2, [pc, #184]	@ (800607c <DMA_SetConfig+0x3b0>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d018      	beq.n	8005ffa <DMA_SetConfig+0x32e>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a2c      	ldr	r2, [pc, #176]	@ (8006080 <DMA_SetConfig+0x3b4>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d013      	beq.n	8005ffa <DMA_SetConfig+0x32e>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a2b      	ldr	r2, [pc, #172]	@ (8006084 <DMA_SetConfig+0x3b8>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d00e      	beq.n	8005ffa <DMA_SetConfig+0x32e>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a29      	ldr	r2, [pc, #164]	@ (8006088 <DMA_SetConfig+0x3bc>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d009      	beq.n	8005ffa <DMA_SetConfig+0x32e>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a28      	ldr	r2, [pc, #160]	@ (800608c <DMA_SetConfig+0x3c0>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d004      	beq.n	8005ffa <DMA_SetConfig+0x32e>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a26      	ldr	r2, [pc, #152]	@ (8006090 <DMA_SetConfig+0x3c4>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d101      	bne.n	8005ffe <DMA_SetConfig+0x332>
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e000      	b.n	8006000 <DMA_SetConfig+0x334>
 8005ffe:	2300      	movs	r3, #0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d020      	beq.n	8006046 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006008:	f003 031f 	and.w	r3, r3, #31
 800600c:	2201      	movs	r2, #1
 800600e:	409a      	lsls	r2, r3
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	2b40      	cmp	r3, #64	@ 0x40
 8006022:	d108      	bne.n	8006036 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	60da      	str	r2, [r3, #12]
}
 8006034:	e007      	b.n	8006046 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68ba      	ldr	r2, [r7, #8]
 800603c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	60da      	str	r2, [r3, #12]
}
 8006046:	bf00      	nop
 8006048:	371c      	adds	r7, #28
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	48022c08 	.word	0x48022c08
 8006058:	48022c1c 	.word	0x48022c1c
 800605c:	48022c30 	.word	0x48022c30
 8006060:	48022c44 	.word	0x48022c44
 8006064:	48022c58 	.word	0x48022c58
 8006068:	48022c6c 	.word	0x48022c6c
 800606c:	48022c80 	.word	0x48022c80
 8006070:	48022c94 	.word	0x48022c94
 8006074:	58025408 	.word	0x58025408
 8006078:	5802541c 	.word	0x5802541c
 800607c:	58025430 	.word	0x58025430
 8006080:	58025444 	.word	0x58025444
 8006084:	58025458 	.word	0x58025458
 8006088:	5802546c 	.word	0x5802546c
 800608c:	58025480 	.word	0x58025480
 8006090:	58025494 	.word	0x58025494

08006094 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a42      	ldr	r2, [pc, #264]	@ (80061ac <DMA_CalcBaseAndBitshift+0x118>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d04a      	beq.n	800613c <DMA_CalcBaseAndBitshift+0xa8>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a41      	ldr	r2, [pc, #260]	@ (80061b0 <DMA_CalcBaseAndBitshift+0x11c>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d045      	beq.n	800613c <DMA_CalcBaseAndBitshift+0xa8>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a3f      	ldr	r2, [pc, #252]	@ (80061b4 <DMA_CalcBaseAndBitshift+0x120>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d040      	beq.n	800613c <DMA_CalcBaseAndBitshift+0xa8>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a3e      	ldr	r2, [pc, #248]	@ (80061b8 <DMA_CalcBaseAndBitshift+0x124>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d03b      	beq.n	800613c <DMA_CalcBaseAndBitshift+0xa8>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a3c      	ldr	r2, [pc, #240]	@ (80061bc <DMA_CalcBaseAndBitshift+0x128>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d036      	beq.n	800613c <DMA_CalcBaseAndBitshift+0xa8>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a3b      	ldr	r2, [pc, #236]	@ (80061c0 <DMA_CalcBaseAndBitshift+0x12c>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d031      	beq.n	800613c <DMA_CalcBaseAndBitshift+0xa8>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a39      	ldr	r2, [pc, #228]	@ (80061c4 <DMA_CalcBaseAndBitshift+0x130>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d02c      	beq.n	800613c <DMA_CalcBaseAndBitshift+0xa8>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a38      	ldr	r2, [pc, #224]	@ (80061c8 <DMA_CalcBaseAndBitshift+0x134>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d027      	beq.n	800613c <DMA_CalcBaseAndBitshift+0xa8>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a36      	ldr	r2, [pc, #216]	@ (80061cc <DMA_CalcBaseAndBitshift+0x138>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d022      	beq.n	800613c <DMA_CalcBaseAndBitshift+0xa8>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a35      	ldr	r2, [pc, #212]	@ (80061d0 <DMA_CalcBaseAndBitshift+0x13c>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d01d      	beq.n	800613c <DMA_CalcBaseAndBitshift+0xa8>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a33      	ldr	r2, [pc, #204]	@ (80061d4 <DMA_CalcBaseAndBitshift+0x140>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d018      	beq.n	800613c <DMA_CalcBaseAndBitshift+0xa8>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a32      	ldr	r2, [pc, #200]	@ (80061d8 <DMA_CalcBaseAndBitshift+0x144>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d013      	beq.n	800613c <DMA_CalcBaseAndBitshift+0xa8>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a30      	ldr	r2, [pc, #192]	@ (80061dc <DMA_CalcBaseAndBitshift+0x148>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d00e      	beq.n	800613c <DMA_CalcBaseAndBitshift+0xa8>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a2f      	ldr	r2, [pc, #188]	@ (80061e0 <DMA_CalcBaseAndBitshift+0x14c>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d009      	beq.n	800613c <DMA_CalcBaseAndBitshift+0xa8>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a2d      	ldr	r2, [pc, #180]	@ (80061e4 <DMA_CalcBaseAndBitshift+0x150>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d004      	beq.n	800613c <DMA_CalcBaseAndBitshift+0xa8>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a2c      	ldr	r2, [pc, #176]	@ (80061e8 <DMA_CalcBaseAndBitshift+0x154>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d101      	bne.n	8006140 <DMA_CalcBaseAndBitshift+0xac>
 800613c:	2301      	movs	r3, #1
 800613e:	e000      	b.n	8006142 <DMA_CalcBaseAndBitshift+0xae>
 8006140:	2300      	movs	r3, #0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d024      	beq.n	8006190 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	b2db      	uxtb	r3, r3
 800614c:	3b10      	subs	r3, #16
 800614e:	4a27      	ldr	r2, [pc, #156]	@ (80061ec <DMA_CalcBaseAndBitshift+0x158>)
 8006150:	fba2 2303 	umull	r2, r3, r2, r3
 8006154:	091b      	lsrs	r3, r3, #4
 8006156:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f003 0307 	and.w	r3, r3, #7
 800615e:	4a24      	ldr	r2, [pc, #144]	@ (80061f0 <DMA_CalcBaseAndBitshift+0x15c>)
 8006160:	5cd3      	ldrb	r3, [r2, r3]
 8006162:	461a      	mov	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2b03      	cmp	r3, #3
 800616c:	d908      	bls.n	8006180 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	461a      	mov	r2, r3
 8006174:	4b1f      	ldr	r3, [pc, #124]	@ (80061f4 <DMA_CalcBaseAndBitshift+0x160>)
 8006176:	4013      	ands	r3, r2
 8006178:	1d1a      	adds	r2, r3, #4
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	659a      	str	r2, [r3, #88]	@ 0x58
 800617e:	e00d      	b.n	800619c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	461a      	mov	r2, r3
 8006186:	4b1b      	ldr	r3, [pc, #108]	@ (80061f4 <DMA_CalcBaseAndBitshift+0x160>)
 8006188:	4013      	ands	r3, r2
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	6593      	str	r3, [r2, #88]	@ 0x58
 800618e:	e005      	b.n	800619c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3714      	adds	r7, #20
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr
 80061ac:	40020010 	.word	0x40020010
 80061b0:	40020028 	.word	0x40020028
 80061b4:	40020040 	.word	0x40020040
 80061b8:	40020058 	.word	0x40020058
 80061bc:	40020070 	.word	0x40020070
 80061c0:	40020088 	.word	0x40020088
 80061c4:	400200a0 	.word	0x400200a0
 80061c8:	400200b8 	.word	0x400200b8
 80061cc:	40020410 	.word	0x40020410
 80061d0:	40020428 	.word	0x40020428
 80061d4:	40020440 	.word	0x40020440
 80061d8:	40020458 	.word	0x40020458
 80061dc:	40020470 	.word	0x40020470
 80061e0:	40020488 	.word	0x40020488
 80061e4:	400204a0 	.word	0x400204a0
 80061e8:	400204b8 	.word	0x400204b8
 80061ec:	aaaaaaab 	.word	0xaaaaaaab
 80061f0:	08012a18 	.word	0x08012a18
 80061f4:	fffffc00 	.word	0xfffffc00

080061f8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b085      	sub	sp, #20
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006200:	2300      	movs	r3, #0
 8006202:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d120      	bne.n	800624e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006210:	2b03      	cmp	r3, #3
 8006212:	d858      	bhi.n	80062c6 <DMA_CheckFifoParam+0xce>
 8006214:	a201      	add	r2, pc, #4	@ (adr r2, 800621c <DMA_CheckFifoParam+0x24>)
 8006216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800621a:	bf00      	nop
 800621c:	0800622d 	.word	0x0800622d
 8006220:	0800623f 	.word	0x0800623f
 8006224:	0800622d 	.word	0x0800622d
 8006228:	080062c7 	.word	0x080062c7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006230:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006234:	2b00      	cmp	r3, #0
 8006236:	d048      	beq.n	80062ca <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800623c:	e045      	b.n	80062ca <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006242:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006246:	d142      	bne.n	80062ce <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800624c:	e03f      	b.n	80062ce <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006256:	d123      	bne.n	80062a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800625c:	2b03      	cmp	r3, #3
 800625e:	d838      	bhi.n	80062d2 <DMA_CheckFifoParam+0xda>
 8006260:	a201      	add	r2, pc, #4	@ (adr r2, 8006268 <DMA_CheckFifoParam+0x70>)
 8006262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006266:	bf00      	nop
 8006268:	08006279 	.word	0x08006279
 800626c:	0800627f 	.word	0x0800627f
 8006270:	08006279 	.word	0x08006279
 8006274:	08006291 	.word	0x08006291
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	73fb      	strb	r3, [r7, #15]
        break;
 800627c:	e030      	b.n	80062e0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006282:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d025      	beq.n	80062d6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800628e:	e022      	b.n	80062d6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006294:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006298:	d11f      	bne.n	80062da <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800629e:	e01c      	b.n	80062da <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d902      	bls.n	80062ae <DMA_CheckFifoParam+0xb6>
 80062a8:	2b03      	cmp	r3, #3
 80062aa:	d003      	beq.n	80062b4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80062ac:	e018      	b.n	80062e0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	73fb      	strb	r3, [r7, #15]
        break;
 80062b2:	e015      	b.n	80062e0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00e      	beq.n	80062de <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	73fb      	strb	r3, [r7, #15]
    break;
 80062c4:	e00b      	b.n	80062de <DMA_CheckFifoParam+0xe6>
        break;
 80062c6:	bf00      	nop
 80062c8:	e00a      	b.n	80062e0 <DMA_CheckFifoParam+0xe8>
        break;
 80062ca:	bf00      	nop
 80062cc:	e008      	b.n	80062e0 <DMA_CheckFifoParam+0xe8>
        break;
 80062ce:	bf00      	nop
 80062d0:	e006      	b.n	80062e0 <DMA_CheckFifoParam+0xe8>
        break;
 80062d2:	bf00      	nop
 80062d4:	e004      	b.n	80062e0 <DMA_CheckFifoParam+0xe8>
        break;
 80062d6:	bf00      	nop
 80062d8:	e002      	b.n	80062e0 <DMA_CheckFifoParam+0xe8>
        break;
 80062da:	bf00      	nop
 80062dc:	e000      	b.n	80062e0 <DMA_CheckFifoParam+0xe8>
    break;
 80062de:	bf00      	nop
    }
  }

  return status;
 80062e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3714      	adds	r7, #20
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop

080062f0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b085      	sub	sp, #20
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a38      	ldr	r2, [pc, #224]	@ (80063e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d022      	beq.n	800634e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a36      	ldr	r2, [pc, #216]	@ (80063e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d01d      	beq.n	800634e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a35      	ldr	r2, [pc, #212]	@ (80063ec <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d018      	beq.n	800634e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a33      	ldr	r2, [pc, #204]	@ (80063f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d013      	beq.n	800634e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a32      	ldr	r2, [pc, #200]	@ (80063f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d00e      	beq.n	800634e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a30      	ldr	r2, [pc, #192]	@ (80063f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d009      	beq.n	800634e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a2f      	ldr	r2, [pc, #188]	@ (80063fc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d004      	beq.n	800634e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a2d      	ldr	r2, [pc, #180]	@ (8006400 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d101      	bne.n	8006352 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800634e:	2301      	movs	r3, #1
 8006350:	e000      	b.n	8006354 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006352:	2300      	movs	r3, #0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d01a      	beq.n	800638e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	b2db      	uxtb	r3, r3
 800635e:	3b08      	subs	r3, #8
 8006360:	4a28      	ldr	r2, [pc, #160]	@ (8006404 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006362:	fba2 2303 	umull	r2, r3, r2, r3
 8006366:	091b      	lsrs	r3, r3, #4
 8006368:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	4b26      	ldr	r3, [pc, #152]	@ (8006408 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800636e:	4413      	add	r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	461a      	mov	r2, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a24      	ldr	r2, [pc, #144]	@ (800640c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800637c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f003 031f 	and.w	r3, r3, #31
 8006384:	2201      	movs	r2, #1
 8006386:	409a      	lsls	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800638c:	e024      	b.n	80063d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	b2db      	uxtb	r3, r3
 8006394:	3b10      	subs	r3, #16
 8006396:	4a1e      	ldr	r2, [pc, #120]	@ (8006410 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006398:	fba2 2303 	umull	r2, r3, r2, r3
 800639c:	091b      	lsrs	r3, r3, #4
 800639e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	4a1c      	ldr	r2, [pc, #112]	@ (8006414 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d806      	bhi.n	80063b6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	4a1b      	ldr	r2, [pc, #108]	@ (8006418 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d902      	bls.n	80063b6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	3308      	adds	r3, #8
 80063b4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	4b18      	ldr	r3, [pc, #96]	@ (800641c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80063ba:	4413      	add	r3, r2
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	461a      	mov	r2, r3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a16      	ldr	r2, [pc, #88]	@ (8006420 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80063c8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f003 031f 	and.w	r3, r3, #31
 80063d0:	2201      	movs	r2, #1
 80063d2:	409a      	lsls	r2, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80063d8:	bf00      	nop
 80063da:	3714      	adds	r7, #20
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr
 80063e4:	58025408 	.word	0x58025408
 80063e8:	5802541c 	.word	0x5802541c
 80063ec:	58025430 	.word	0x58025430
 80063f0:	58025444 	.word	0x58025444
 80063f4:	58025458 	.word	0x58025458
 80063f8:	5802546c 	.word	0x5802546c
 80063fc:	58025480 	.word	0x58025480
 8006400:	58025494 	.word	0x58025494
 8006404:	cccccccd 	.word	0xcccccccd
 8006408:	16009600 	.word	0x16009600
 800640c:	58025880 	.word	0x58025880
 8006410:	aaaaaaab 	.word	0xaaaaaaab
 8006414:	400204b8 	.word	0x400204b8
 8006418:	4002040f 	.word	0x4002040f
 800641c:	10008200 	.word	0x10008200
 8006420:	40020880 	.word	0x40020880

08006424 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	b2db      	uxtb	r3, r3
 8006432:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d04a      	beq.n	80064d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2b08      	cmp	r3, #8
 800643e:	d847      	bhi.n	80064d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a25      	ldr	r2, [pc, #148]	@ (80064dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d022      	beq.n	8006490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a24      	ldr	r2, [pc, #144]	@ (80064e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d01d      	beq.n	8006490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a22      	ldr	r2, [pc, #136]	@ (80064e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d018      	beq.n	8006490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a21      	ldr	r2, [pc, #132]	@ (80064e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d013      	beq.n	8006490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a1f      	ldr	r2, [pc, #124]	@ (80064ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d00e      	beq.n	8006490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a1e      	ldr	r2, [pc, #120]	@ (80064f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d009      	beq.n	8006490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a1c      	ldr	r2, [pc, #112]	@ (80064f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d004      	beq.n	8006490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a1b      	ldr	r2, [pc, #108]	@ (80064f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d101      	bne.n	8006494 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006490:	2301      	movs	r3, #1
 8006492:	e000      	b.n	8006496 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006494:	2300      	movs	r3, #0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00a      	beq.n	80064b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	4b17      	ldr	r3, [pc, #92]	@ (80064fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800649e:	4413      	add	r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	461a      	mov	r2, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a15      	ldr	r2, [pc, #84]	@ (8006500 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80064ac:	671a      	str	r2, [r3, #112]	@ 0x70
 80064ae:	e009      	b.n	80064c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	4b14      	ldr	r3, [pc, #80]	@ (8006504 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80064b4:	4413      	add	r3, r2
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	461a      	mov	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a11      	ldr	r2, [pc, #68]	@ (8006508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80064c2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	3b01      	subs	r3, #1
 80064c8:	2201      	movs	r2, #1
 80064ca:	409a      	lsls	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80064d0:	bf00      	nop
 80064d2:	3714      	adds	r7, #20
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr
 80064dc:	58025408 	.word	0x58025408
 80064e0:	5802541c 	.word	0x5802541c
 80064e4:	58025430 	.word	0x58025430
 80064e8:	58025444 	.word	0x58025444
 80064ec:	58025458 	.word	0x58025458
 80064f0:	5802546c 	.word	0x5802546c
 80064f4:	58025480 	.word	0x58025480
 80064f8:	58025494 	.word	0x58025494
 80064fc:	1600963f 	.word	0x1600963f
 8006500:	58025940 	.word	0x58025940
 8006504:	1000823f 	.word	0x1000823f
 8006508:	40020940 	.word	0x40020940

0800650c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b098      	sub	sp, #96	@ 0x60
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8006514:	4a84      	ldr	r2, [pc, #528]	@ (8006728 <HAL_FDCAN_Init+0x21c>)
 8006516:	f107 030c 	add.w	r3, r7, #12
 800651a:	4611      	mov	r1, r2
 800651c:	224c      	movs	r2, #76	@ 0x4c
 800651e:	4618      	mov	r0, r3
 8006520:	f00c f8ba 	bl	8012698 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d101      	bne.n	800652e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e1c6      	b.n	80068bc <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a7e      	ldr	r2, [pc, #504]	@ (800672c <HAL_FDCAN_Init+0x220>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d106      	bne.n	8006546 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006540:	461a      	mov	r2, r3
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800654c:	b2db      	uxtb	r3, r3
 800654e:	2b00      	cmp	r3, #0
 8006550:	d106      	bne.n	8006560 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f7fb fb70 	bl	8001c40 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	699a      	ldr	r2, [r3, #24]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f022 0210 	bic.w	r2, r2, #16
 800656e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006570:	f7fc ff36 	bl	80033e0 <HAL_GetTick>
 8006574:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006576:	e014      	b.n	80065a2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006578:	f7fc ff32 	bl	80033e0 <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	2b0a      	cmp	r3, #10
 8006584:	d90d      	bls.n	80065a2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800658c:	f043 0201 	orr.w	r2, r3, #1
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2203      	movs	r2, #3
 800659a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e18c      	b.n	80068bc <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	699b      	ldr	r3, [r3, #24]
 80065a8:	f003 0308 	and.w	r3, r3, #8
 80065ac:	2b08      	cmp	r3, #8
 80065ae:	d0e3      	beq.n	8006578 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	699a      	ldr	r2, [r3, #24]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f042 0201 	orr.w	r2, r2, #1
 80065be:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80065c0:	f7fc ff0e 	bl	80033e0 <HAL_GetTick>
 80065c4:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80065c6:	e014      	b.n	80065f2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80065c8:	f7fc ff0a 	bl	80033e0 <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	2b0a      	cmp	r3, #10
 80065d4:	d90d      	bls.n	80065f2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80065dc:	f043 0201 	orr.w	r2, r3, #1
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2203      	movs	r2, #3
 80065ea:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e164      	b.n	80068bc <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	f003 0301 	and.w	r3, r3, #1
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d0e3      	beq.n	80065c8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	699a      	ldr	r2, [r3, #24]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f042 0202 	orr.w	r2, r2, #2
 800660e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	7c1b      	ldrb	r3, [r3, #16]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d108      	bne.n	800662a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	699a      	ldr	r2, [r3, #24]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006626:	619a      	str	r2, [r3, #24]
 8006628:	e007      	b.n	800663a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	699a      	ldr	r2, [r3, #24]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006638:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	7c5b      	ldrb	r3, [r3, #17]
 800663e:	2b01      	cmp	r3, #1
 8006640:	d108      	bne.n	8006654 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	699a      	ldr	r2, [r3, #24]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006650:	619a      	str	r2, [r3, #24]
 8006652:	e007      	b.n	8006664 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	699a      	ldr	r2, [r3, #24]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006662:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	7c9b      	ldrb	r3, [r3, #18]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d108      	bne.n	800667e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	699a      	ldr	r2, [r3, #24]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800667a:	619a      	str	r2, [r3, #24]
 800667c:	e007      	b.n	800668e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	699a      	ldr	r2, [r3, #24]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800668c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	689a      	ldr	r2, [r3, #8]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	430a      	orrs	r2, r1
 80066a2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	699a      	ldr	r2, [r3, #24]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80066b2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	691a      	ldr	r2, [r3, #16]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f022 0210 	bic.w	r2, r2, #16
 80066c2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d108      	bne.n	80066de <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	699a      	ldr	r2, [r3, #24]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f042 0204 	orr.w	r2, r2, #4
 80066da:	619a      	str	r2, [r3, #24]
 80066dc:	e030      	b.n	8006740 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d02c      	beq.n	8006740 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d020      	beq.n	8006730 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	699a      	ldr	r2, [r3, #24]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80066fc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	691a      	ldr	r2, [r3, #16]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f042 0210 	orr.w	r2, r2, #16
 800670c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	2b03      	cmp	r3, #3
 8006714:	d114      	bne.n	8006740 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	699a      	ldr	r2, [r3, #24]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f042 0220 	orr.w	r2, r2, #32
 8006724:	619a      	str	r2, [r3, #24]
 8006726:	e00b      	b.n	8006740 <HAL_FDCAN_Init+0x234>
 8006728:	08012974 	.word	0x08012974
 800672c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	699a      	ldr	r2, [r3, #24]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f042 0220 	orr.w	r2, r2, #32
 800673e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	3b01      	subs	r3, #1
 8006746:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	69db      	ldr	r3, [r3, #28]
 800674c:	3b01      	subs	r3, #1
 800674e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006750:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006758:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	695b      	ldr	r3, [r3, #20]
 8006760:	3b01      	subs	r3, #1
 8006762:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006768:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800676a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006774:	d115      	bne.n	80067a2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800677a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006780:	3b01      	subs	r3, #1
 8006782:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006784:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800678a:	3b01      	subs	r3, #1
 800678c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800678e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006796:	3b01      	subs	r3, #1
 8006798:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800679e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80067a0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00a      	beq.n	80067c0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	430a      	orrs	r2, r1
 80067bc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067c8:	4413      	add	r3, r2
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d011      	beq.n	80067f2 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80067d6:	f023 0107 	bic.w	r1, r3, #7
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	3360      	adds	r3, #96	@ 0x60
 80067e2:	443b      	add	r3, r7
 80067e4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	430a      	orrs	r2, r1
 80067ee:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d011      	beq.n	800681e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006802:	f023 0107 	bic.w	r1, r3, #7
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	3360      	adds	r3, #96	@ 0x60
 800680e:	443b      	add	r3, r7
 8006810:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	430a      	orrs	r2, r1
 800681a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006822:	2b00      	cmp	r3, #0
 8006824:	d012      	beq.n	800684c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800682e:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	3360      	adds	r3, #96	@ 0x60
 800683a:	443b      	add	r3, r7
 800683c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006840:	011a      	lsls	r2, r3, #4
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	430a      	orrs	r2, r1
 8006848:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006850:	2b00      	cmp	r3, #0
 8006852:	d012      	beq.n	800687a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800685c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	3360      	adds	r3, #96	@ 0x60
 8006868:	443b      	add	r3, r7
 800686a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800686e:	021a      	lsls	r2, r3, #8
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	430a      	orrs	r2, r1
 8006876:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a11      	ldr	r2, [pc, #68]	@ (80068c4 <HAL_FDCAN_Init+0x3b8>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d107      	bne.n	8006894 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	689a      	ldr	r2, [r3, #8]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	f022 0203 	bic.w	r2, r2, #3
 8006892:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 f80b 	bl	80068c8 <FDCAN_CalcultateRamBlockAddresses>
 80068b2:	4603      	mov	r3, r0
 80068b4:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 80068b8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3760      	adds	r7, #96	@ 0x60
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	4000a000 	.word	0x4000a000

080068c8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b085      	sub	sp, #20
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068d4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80068de:	4ba7      	ldr	r3, [pc, #668]	@ (8006b7c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80068e0:	4013      	ands	r3, r2
 80068e2:	68ba      	ldr	r2, [r7, #8]
 80068e4:	0091      	lsls	r1, r2, #2
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	6812      	ldr	r2, [r2, #0]
 80068ea:	430b      	orrs	r3, r1
 80068ec:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068f8:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006900:	041a      	lsls	r2, r3, #16
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	430a      	orrs	r2, r1
 8006908:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006910:	68ba      	ldr	r2, [r7, #8]
 8006912:	4413      	add	r3, r2
 8006914:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800691e:	4b97      	ldr	r3, [pc, #604]	@ (8006b7c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006920:	4013      	ands	r3, r2
 8006922:	68ba      	ldr	r2, [r7, #8]
 8006924:	0091      	lsls	r1, r2, #2
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	6812      	ldr	r2, [r2, #0]
 800692a:	430b      	orrs	r3, r1
 800692c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006938:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006940:	041a      	lsls	r2, r3, #16
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	430a      	orrs	r2, r1
 8006948:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006950:	005b      	lsls	r3, r3, #1
 8006952:	68ba      	ldr	r2, [r7, #8]
 8006954:	4413      	add	r3, r2
 8006956:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006960:	4b86      	ldr	r3, [pc, #536]	@ (8006b7c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006962:	4013      	ands	r3, r2
 8006964:	68ba      	ldr	r2, [r7, #8]
 8006966:	0091      	lsls	r1, r2, #2
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	6812      	ldr	r2, [r2, #0]
 800696c:	430b      	orrs	r3, r1
 800696e:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800697a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006982:	041a      	lsls	r2, r3, #16
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	430a      	orrs	r2, r1
 800698a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006996:	fb02 f303 	mul.w	r3, r2, r3
 800699a:	68ba      	ldr	r2, [r7, #8]
 800699c:	4413      	add	r3, r2
 800699e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80069a8:	4b74      	ldr	r3, [pc, #464]	@ (8006b7c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80069aa:	4013      	ands	r3, r2
 80069ac:	68ba      	ldr	r2, [r7, #8]
 80069ae:	0091      	lsls	r1, r2, #2
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	6812      	ldr	r2, [r2, #0]
 80069b4:	430b      	orrs	r3, r1
 80069b6:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80069c2:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069ca:	041a      	lsls	r2, r3, #16
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	430a      	orrs	r2, r1
 80069d2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80069de:	fb02 f303 	mul.w	r3, r2, r3
 80069e2:	68ba      	ldr	r2, [r7, #8]
 80069e4:	4413      	add	r3, r2
 80069e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80069f0:	4b62      	ldr	r3, [pc, #392]	@ (8006b7c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80069f2:	4013      	ands	r3, r2
 80069f4:	68ba      	ldr	r2, [r7, #8]
 80069f6:	0091      	lsls	r1, r2, #2
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	6812      	ldr	r2, [r2, #0]
 80069fc:	430b      	orrs	r3, r1
 80069fe:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8006a0a:	fb02 f303 	mul.w	r3, r2, r3
 8006a0e:	68ba      	ldr	r2, [r7, #8]
 8006a10:	4413      	add	r3, r2
 8006a12:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8006a1c:	4b57      	ldr	r3, [pc, #348]	@ (8006b7c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006a1e:	4013      	ands	r3, r2
 8006a20:	68ba      	ldr	r2, [r7, #8]
 8006a22:	0091      	lsls	r1, r2, #2
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	6812      	ldr	r2, [r2, #0]
 8006a28:	430b      	orrs	r3, r1
 8006a2a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a36:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a3e:	041a      	lsls	r2, r3, #16
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	430a      	orrs	r2, r1
 8006a46:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a4e:	005b      	lsls	r3, r3, #1
 8006a50:	68ba      	ldr	r2, [r7, #8]
 8006a52:	4413      	add	r3, r2
 8006a54:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8006a5e:	4b47      	ldr	r3, [pc, #284]	@ (8006b7c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006a60:	4013      	ands	r3, r2
 8006a62:	68ba      	ldr	r2, [r7, #8]
 8006a64:	0091      	lsls	r1, r2, #2
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	6812      	ldr	r2, [r2, #0]
 8006a6a:	430b      	orrs	r3, r1
 8006a6c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006a78:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a80:	041a      	lsls	r2, r3, #16
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	430a      	orrs	r2, r1
 8006a88:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006a94:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a9c:	061a      	lsls	r2, r3, #24
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	430a      	orrs	r2, r1
 8006aa4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006aac:	4b34      	ldr	r3, [pc, #208]	@ (8006b80 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8006aae:	4413      	add	r3, r2
 8006ab0:	009a      	lsls	r2, r3, #2
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	441a      	add	r2, r3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ace:	00db      	lsls	r3, r3, #3
 8006ad0:	441a      	add	r2, r3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ade:	6879      	ldr	r1, [r7, #4]
 8006ae0:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8006ae2:	fb01 f303 	mul.w	r3, r1, r3
 8006ae6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8006ae8:	441a      	add	r2, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006af6:	6879      	ldr	r1, [r7, #4]
 8006af8:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8006afa:	fb01 f303 	mul.w	r3, r1, r3
 8006afe:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8006b00:	441a      	add	r2, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b0e:	6879      	ldr	r1, [r7, #4]
 8006b10:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8006b12:	fb01 f303 	mul.w	r3, r1, r3
 8006b16:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8006b18:	441a      	add	r2, r3
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b2a:	00db      	lsls	r3, r3, #3
 8006b2c:	441a      	add	r2, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b3e:	6879      	ldr	r1, [r7, #4]
 8006b40:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8006b42:	fb01 f303 	mul.w	r3, r1, r3
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	441a      	add	r2, r3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b5a:	6879      	ldr	r1, [r7, #4]
 8006b5c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8006b5e:	fb01 f303 	mul.w	r3, r1, r3
 8006b62:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8006b64:	441a      	add	r2, r3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b72:	4a04      	ldr	r2, [pc, #16]	@ (8006b84 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d915      	bls.n	8006ba4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8006b78:	e006      	b.n	8006b88 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8006b7a:	bf00      	nop
 8006b7c:	ffff0003 	.word	0xffff0003
 8006b80:	10002b00 	.word	0x10002b00
 8006b84:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006b8e:	f043 0220 	orr.w	r2, r3, #32
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2203      	movs	r2, #3
 8006b9c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e010      	b.n	8006bc6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ba8:	60fb      	str	r3, [r7, #12]
 8006baa:	e005      	b.n	8006bb8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	3304      	adds	r3, #4
 8006bb6:	60fb      	str	r3, [r7, #12]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d3f3      	bcc.n	8006bac <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3714      	adds	r7, #20
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop

08006bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b089      	sub	sp, #36	@ 0x24
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006bde:	2300      	movs	r3, #0
 8006be0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006be2:	4b89      	ldr	r3, [pc, #548]	@ (8006e08 <HAL_GPIO_Init+0x234>)
 8006be4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006be6:	e194      	b.n	8006f12 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	2101      	movs	r1, #1
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f000 8186 	beq.w	8006f0c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	f003 0303 	and.w	r3, r3, #3
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d005      	beq.n	8006c18 <HAL_GPIO_Init+0x44>
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	f003 0303 	and.w	r3, r3, #3
 8006c14:	2b02      	cmp	r3, #2
 8006c16:	d130      	bne.n	8006c7a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	005b      	lsls	r3, r3, #1
 8006c22:	2203      	movs	r2, #3
 8006c24:	fa02 f303 	lsl.w	r3, r2, r3
 8006c28:	43db      	mvns	r3, r3
 8006c2a:	69ba      	ldr	r2, [r7, #24]
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	68da      	ldr	r2, [r3, #12]
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	005b      	lsls	r3, r3, #1
 8006c38:	fa02 f303 	lsl.w	r3, r2, r3
 8006c3c:	69ba      	ldr	r2, [r7, #24]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	69ba      	ldr	r2, [r7, #24]
 8006c46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006c4e:	2201      	movs	r2, #1
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	fa02 f303 	lsl.w	r3, r2, r3
 8006c56:	43db      	mvns	r3, r3
 8006c58:	69ba      	ldr	r2, [r7, #24]
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	091b      	lsrs	r3, r3, #4
 8006c64:	f003 0201 	and.w	r2, r3, #1
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c6e:	69ba      	ldr	r2, [r7, #24]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	69ba      	ldr	r2, [r7, #24]
 8006c78:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	f003 0303 	and.w	r3, r3, #3
 8006c82:	2b03      	cmp	r3, #3
 8006c84:	d017      	beq.n	8006cb6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	005b      	lsls	r3, r3, #1
 8006c90:	2203      	movs	r2, #3
 8006c92:	fa02 f303 	lsl.w	r3, r2, r3
 8006c96:	43db      	mvns	r3, r3
 8006c98:	69ba      	ldr	r2, [r7, #24]
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	689a      	ldr	r2, [r3, #8]
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	005b      	lsls	r3, r3, #1
 8006ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8006caa:	69ba      	ldr	r2, [r7, #24]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	69ba      	ldr	r2, [r7, #24]
 8006cb4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	f003 0303 	and.w	r3, r3, #3
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	d123      	bne.n	8006d0a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	08da      	lsrs	r2, r3, #3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	3208      	adds	r2, #8
 8006cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	f003 0307 	and.w	r3, r3, #7
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	220f      	movs	r2, #15
 8006cda:	fa02 f303 	lsl.w	r3, r2, r3
 8006cde:	43db      	mvns	r3, r3
 8006ce0:	69ba      	ldr	r2, [r7, #24]
 8006ce2:	4013      	ands	r3, r2
 8006ce4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	691a      	ldr	r2, [r3, #16]
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	f003 0307 	and.w	r3, r3, #7
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf6:	69ba      	ldr	r2, [r7, #24]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	08da      	lsrs	r2, r3, #3
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	3208      	adds	r2, #8
 8006d04:	69b9      	ldr	r1, [r7, #24]
 8006d06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	005b      	lsls	r3, r3, #1
 8006d14:	2203      	movs	r2, #3
 8006d16:	fa02 f303 	lsl.w	r3, r2, r3
 8006d1a:	43db      	mvns	r3, r3
 8006d1c:	69ba      	ldr	r2, [r7, #24]
 8006d1e:	4013      	ands	r3, r2
 8006d20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	f003 0203 	and.w	r2, r3, #3
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	005b      	lsls	r3, r3, #1
 8006d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d32:	69ba      	ldr	r2, [r7, #24]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	69ba      	ldr	r2, [r7, #24]
 8006d3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	f000 80e0 	beq.w	8006f0c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d4c:	4b2f      	ldr	r3, [pc, #188]	@ (8006e0c <HAL_GPIO_Init+0x238>)
 8006d4e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8006d52:	4a2e      	ldr	r2, [pc, #184]	@ (8006e0c <HAL_GPIO_Init+0x238>)
 8006d54:	f043 0302 	orr.w	r3, r3, #2
 8006d58:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8006d5c:	4b2b      	ldr	r3, [pc, #172]	@ (8006e0c <HAL_GPIO_Init+0x238>)
 8006d5e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8006d62:	f003 0302 	and.w	r3, r3, #2
 8006d66:	60fb      	str	r3, [r7, #12]
 8006d68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006d6a:	4a29      	ldr	r2, [pc, #164]	@ (8006e10 <HAL_GPIO_Init+0x23c>)
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	089b      	lsrs	r3, r3, #2
 8006d70:	3302      	adds	r3, #2
 8006d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	f003 0303 	and.w	r3, r3, #3
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	220f      	movs	r2, #15
 8006d82:	fa02 f303 	lsl.w	r3, r2, r3
 8006d86:	43db      	mvns	r3, r3
 8006d88:	69ba      	ldr	r2, [r7, #24]
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a20      	ldr	r2, [pc, #128]	@ (8006e14 <HAL_GPIO_Init+0x240>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d052      	beq.n	8006e3c <HAL_GPIO_Init+0x268>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a1f      	ldr	r2, [pc, #124]	@ (8006e18 <HAL_GPIO_Init+0x244>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d031      	beq.n	8006e02 <HAL_GPIO_Init+0x22e>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a1e      	ldr	r2, [pc, #120]	@ (8006e1c <HAL_GPIO_Init+0x248>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d02b      	beq.n	8006dfe <HAL_GPIO_Init+0x22a>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a1d      	ldr	r2, [pc, #116]	@ (8006e20 <HAL_GPIO_Init+0x24c>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d025      	beq.n	8006dfa <HAL_GPIO_Init+0x226>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a1c      	ldr	r2, [pc, #112]	@ (8006e24 <HAL_GPIO_Init+0x250>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d01f      	beq.n	8006df6 <HAL_GPIO_Init+0x222>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a1b      	ldr	r2, [pc, #108]	@ (8006e28 <HAL_GPIO_Init+0x254>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d019      	beq.n	8006df2 <HAL_GPIO_Init+0x21e>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a1a      	ldr	r2, [pc, #104]	@ (8006e2c <HAL_GPIO_Init+0x258>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d013      	beq.n	8006dee <HAL_GPIO_Init+0x21a>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a19      	ldr	r2, [pc, #100]	@ (8006e30 <HAL_GPIO_Init+0x25c>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d00d      	beq.n	8006dea <HAL_GPIO_Init+0x216>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a18      	ldr	r2, [pc, #96]	@ (8006e34 <HAL_GPIO_Init+0x260>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d007      	beq.n	8006de6 <HAL_GPIO_Init+0x212>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a17      	ldr	r2, [pc, #92]	@ (8006e38 <HAL_GPIO_Init+0x264>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d101      	bne.n	8006de2 <HAL_GPIO_Init+0x20e>
 8006dde:	2309      	movs	r3, #9
 8006de0:	e02d      	b.n	8006e3e <HAL_GPIO_Init+0x26a>
 8006de2:	230a      	movs	r3, #10
 8006de4:	e02b      	b.n	8006e3e <HAL_GPIO_Init+0x26a>
 8006de6:	2308      	movs	r3, #8
 8006de8:	e029      	b.n	8006e3e <HAL_GPIO_Init+0x26a>
 8006dea:	2307      	movs	r3, #7
 8006dec:	e027      	b.n	8006e3e <HAL_GPIO_Init+0x26a>
 8006dee:	2306      	movs	r3, #6
 8006df0:	e025      	b.n	8006e3e <HAL_GPIO_Init+0x26a>
 8006df2:	2305      	movs	r3, #5
 8006df4:	e023      	b.n	8006e3e <HAL_GPIO_Init+0x26a>
 8006df6:	2304      	movs	r3, #4
 8006df8:	e021      	b.n	8006e3e <HAL_GPIO_Init+0x26a>
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	e01f      	b.n	8006e3e <HAL_GPIO_Init+0x26a>
 8006dfe:	2302      	movs	r3, #2
 8006e00:	e01d      	b.n	8006e3e <HAL_GPIO_Init+0x26a>
 8006e02:	2301      	movs	r3, #1
 8006e04:	e01b      	b.n	8006e3e <HAL_GPIO_Init+0x26a>
 8006e06:	bf00      	nop
 8006e08:	58000080 	.word	0x58000080
 8006e0c:	58024400 	.word	0x58024400
 8006e10:	58000400 	.word	0x58000400
 8006e14:	58020000 	.word	0x58020000
 8006e18:	58020400 	.word	0x58020400
 8006e1c:	58020800 	.word	0x58020800
 8006e20:	58020c00 	.word	0x58020c00
 8006e24:	58021000 	.word	0x58021000
 8006e28:	58021400 	.word	0x58021400
 8006e2c:	58021800 	.word	0x58021800
 8006e30:	58021c00 	.word	0x58021c00
 8006e34:	58022000 	.word	0x58022000
 8006e38:	58022400 	.word	0x58022400
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	69fa      	ldr	r2, [r7, #28]
 8006e40:	f002 0203 	and.w	r2, r2, #3
 8006e44:	0092      	lsls	r2, r2, #2
 8006e46:	4093      	lsls	r3, r2
 8006e48:	69ba      	ldr	r2, [r7, #24]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006e4e:	4938      	ldr	r1, [pc, #224]	@ (8006f30 <HAL_GPIO_Init+0x35c>)
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	089b      	lsrs	r3, r3, #2
 8006e54:	3302      	adds	r3, #2
 8006e56:	69ba      	ldr	r2, [r7, #24]
 8006e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006e5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	43db      	mvns	r3, r3
 8006e68:	69ba      	ldr	r2, [r7, #24]
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d003      	beq.n	8006e82 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006e7a:	69ba      	ldr	r2, [r7, #24]
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006e82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006e8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	43db      	mvns	r3, r3
 8006e96:	69ba      	ldr	r2, [r7, #24]
 8006e98:	4013      	ands	r3, r2
 8006e9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d003      	beq.n	8006eb0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006ea8:	69ba      	ldr	r2, [r7, #24]
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006eb0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	43db      	mvns	r3, r3
 8006ec2:	69ba      	ldr	r2, [r7, #24]
 8006ec4:	4013      	ands	r3, r2
 8006ec6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d003      	beq.n	8006edc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006ed4:	69ba      	ldr	r2, [r7, #24]
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	69ba      	ldr	r2, [r7, #24]
 8006ee0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	43db      	mvns	r3, r3
 8006eec:	69ba      	ldr	r2, [r7, #24]
 8006eee:	4013      	ands	r3, r2
 8006ef0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d003      	beq.n	8006f06 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006efe:	69ba      	ldr	r2, [r7, #24]
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	69ba      	ldr	r2, [r7, #24]
 8006f0a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	fa22 f303 	lsr.w	r3, r2, r3
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f47f ae63 	bne.w	8006be8 <HAL_GPIO_Init+0x14>
  }
}
 8006f22:	bf00      	nop
 8006f24:	bf00      	nop
 8006f26:	3724      	adds	r7, #36	@ 0x24
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr
 8006f30:	58000400 	.word	0x58000400

08006f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	807b      	strh	r3, [r7, #2]
 8006f40:	4613      	mov	r3, r2
 8006f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006f44:	787b      	ldrb	r3, [r7, #1]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d003      	beq.n	8006f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006f4a:	887a      	ldrh	r2, [r7, #2]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006f50:	e003      	b.n	8006f5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006f52:	887b      	ldrh	r3, [r7, #2]
 8006f54:	041a      	lsls	r2, r3, #16
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	619a      	str	r2, [r3, #24]
}
 8006f5a:	bf00      	nop
 8006f5c:	370c      	adds	r7, #12
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
	...

08006f68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d101      	bne.n	8006f7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e08b      	b.n	8007092 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d106      	bne.n	8006f94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f7fa ffb6 	bl	8001f00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2224      	movs	r2, #36	@ 0x24
 8006f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f022 0201 	bic.w	r2, r2, #1
 8006faa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	685a      	ldr	r2, [r3, #4]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006fb8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	689a      	ldr	r2, [r3, #8]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006fc8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d107      	bne.n	8006fe2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	689a      	ldr	r2, [r3, #8]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006fde:	609a      	str	r2, [r3, #8]
 8006fe0:	e006      	b.n	8006ff0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	689a      	ldr	r2, [r3, #8]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006fee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	d108      	bne.n	800700a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	685a      	ldr	r2, [r3, #4]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007006:	605a      	str	r2, [r3, #4]
 8007008:	e007      	b.n	800701a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	685a      	ldr	r2, [r3, #4]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007018:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	6859      	ldr	r1, [r3, #4]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	4b1d      	ldr	r3, [pc, #116]	@ (800709c <HAL_I2C_Init+0x134>)
 8007026:	430b      	orrs	r3, r1
 8007028:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	68da      	ldr	r2, [r3, #12]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007038:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	691a      	ldr	r2, [r3, #16]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	695b      	ldr	r3, [r3, #20]
 8007042:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	699b      	ldr	r3, [r3, #24]
 800704a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	430a      	orrs	r2, r1
 8007052:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	69d9      	ldr	r1, [r3, #28]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6a1a      	ldr	r2, [r3, #32]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	430a      	orrs	r2, r1
 8007062:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f042 0201 	orr.w	r2, r2, #1
 8007072:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2220      	movs	r2, #32
 800707e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3708      	adds	r7, #8
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	02008000 	.word	0x02008000

080070a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	2b20      	cmp	r3, #32
 80070b4:	d138      	bne.n	8007128 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d101      	bne.n	80070c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80070c0:	2302      	movs	r3, #2
 80070c2:	e032      	b.n	800712a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2224      	movs	r2, #36	@ 0x24
 80070d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f022 0201 	bic.w	r2, r2, #1
 80070e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80070f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	6819      	ldr	r1, [r3, #0]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	683a      	ldr	r2, [r7, #0]
 8007100:	430a      	orrs	r2, r1
 8007102:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f042 0201 	orr.w	r2, r2, #1
 8007112:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2220      	movs	r2, #32
 8007118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007124:	2300      	movs	r3, #0
 8007126:	e000      	b.n	800712a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007128:	2302      	movs	r3, #2
  }
}
 800712a:	4618      	mov	r0, r3
 800712c:	370c      	adds	r7, #12
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr

08007136 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007136:	b480      	push	{r7}
 8007138:	b085      	sub	sp, #20
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
 800713e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007146:	b2db      	uxtb	r3, r3
 8007148:	2b20      	cmp	r3, #32
 800714a:	d139      	bne.n	80071c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007152:	2b01      	cmp	r3, #1
 8007154:	d101      	bne.n	800715a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007156:	2302      	movs	r3, #2
 8007158:	e033      	b.n	80071c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2201      	movs	r2, #1
 800715e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2224      	movs	r2, #36	@ 0x24
 8007166:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f022 0201 	bic.w	r2, r2, #1
 8007178:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007188:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	021b      	lsls	r3, r3, #8
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	4313      	orrs	r3, r2
 8007192:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	68fa      	ldr	r2, [r7, #12]
 800719a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f042 0201 	orr.w	r2, r2, #1
 80071aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2220      	movs	r2, #32
 80071b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80071bc:	2300      	movs	r3, #0
 80071be:	e000      	b.n	80071c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80071c0:	2302      	movs	r3, #2
  }
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3714      	adds	r7, #20
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
	...

080071d0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80071d8:	4b19      	ldr	r3, [pc, #100]	@ (8007240 <HAL_PWREx_ConfigSupply+0x70>)
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	f003 0304 	and.w	r3, r3, #4
 80071e0:	2b04      	cmp	r3, #4
 80071e2:	d00a      	beq.n	80071fa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80071e4:	4b16      	ldr	r3, [pc, #88]	@ (8007240 <HAL_PWREx_ConfigSupply+0x70>)
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	f003 0307 	and.w	r3, r3, #7
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d001      	beq.n	80071f6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e01f      	b.n	8007236 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80071f6:	2300      	movs	r3, #0
 80071f8:	e01d      	b.n	8007236 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80071fa:	4b11      	ldr	r3, [pc, #68]	@ (8007240 <HAL_PWREx_ConfigSupply+0x70>)
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	f023 0207 	bic.w	r2, r3, #7
 8007202:	490f      	ldr	r1, [pc, #60]	@ (8007240 <HAL_PWREx_ConfigSupply+0x70>)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	4313      	orrs	r3, r2
 8007208:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800720a:	f7fc f8e9 	bl	80033e0 <HAL_GetTick>
 800720e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007210:	e009      	b.n	8007226 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007212:	f7fc f8e5 	bl	80033e0 <HAL_GetTick>
 8007216:	4602      	mov	r2, r0
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	1ad3      	subs	r3, r2, r3
 800721c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007220:	d901      	bls.n	8007226 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e007      	b.n	8007236 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007226:	4b06      	ldr	r3, [pc, #24]	@ (8007240 <HAL_PWREx_ConfigSupply+0x70>)
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800722e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007232:	d1ee      	bne.n	8007212 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3710      	adds	r7, #16
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	58024800 	.word	0x58024800

08007244 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b08c      	sub	sp, #48	@ 0x30
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d102      	bne.n	8007258 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	f000 bc1f 	b.w	8007a96 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 0301 	and.w	r3, r3, #1
 8007260:	2b00      	cmp	r3, #0
 8007262:	f000 80b3 	beq.w	80073cc <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007266:	4b95      	ldr	r3, [pc, #596]	@ (80074bc <HAL_RCC_OscConfig+0x278>)
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800726e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007270:	4b92      	ldr	r3, [pc, #584]	@ (80074bc <HAL_RCC_OscConfig+0x278>)
 8007272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007274:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007278:	2b10      	cmp	r3, #16
 800727a:	d007      	beq.n	800728c <HAL_RCC_OscConfig+0x48>
 800727c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800727e:	2b18      	cmp	r3, #24
 8007280:	d112      	bne.n	80072a8 <HAL_RCC_OscConfig+0x64>
 8007282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007284:	f003 0303 	and.w	r3, r3, #3
 8007288:	2b02      	cmp	r3, #2
 800728a:	d10d      	bne.n	80072a8 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800728c:	4b8b      	ldr	r3, [pc, #556]	@ (80074bc <HAL_RCC_OscConfig+0x278>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007294:	2b00      	cmp	r3, #0
 8007296:	f000 8098 	beq.w	80073ca <HAL_RCC_OscConfig+0x186>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	f040 8093 	bne.w	80073ca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	e3f6      	b.n	8007a96 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072b0:	d106      	bne.n	80072c0 <HAL_RCC_OscConfig+0x7c>
 80072b2:	4b82      	ldr	r3, [pc, #520]	@ (80074bc <HAL_RCC_OscConfig+0x278>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a81      	ldr	r2, [pc, #516]	@ (80074bc <HAL_RCC_OscConfig+0x278>)
 80072b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072bc:	6013      	str	r3, [r2, #0]
 80072be:	e058      	b.n	8007372 <HAL_RCC_OscConfig+0x12e>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d112      	bne.n	80072ee <HAL_RCC_OscConfig+0xaa>
 80072c8:	4b7c      	ldr	r3, [pc, #496]	@ (80074bc <HAL_RCC_OscConfig+0x278>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a7b      	ldr	r2, [pc, #492]	@ (80074bc <HAL_RCC_OscConfig+0x278>)
 80072ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072d2:	6013      	str	r3, [r2, #0]
 80072d4:	4b79      	ldr	r3, [pc, #484]	@ (80074bc <HAL_RCC_OscConfig+0x278>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a78      	ldr	r2, [pc, #480]	@ (80074bc <HAL_RCC_OscConfig+0x278>)
 80072da:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80072de:	6013      	str	r3, [r2, #0]
 80072e0:	4b76      	ldr	r3, [pc, #472]	@ (80074bc <HAL_RCC_OscConfig+0x278>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a75      	ldr	r2, [pc, #468]	@ (80074bc <HAL_RCC_OscConfig+0x278>)
 80072e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80072ea:	6013      	str	r3, [r2, #0]
 80072ec:	e041      	b.n	8007372 <HAL_RCC_OscConfig+0x12e>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80072f6:	d112      	bne.n	800731e <HAL_RCC_OscConfig+0xda>
 80072f8:	4b70      	ldr	r3, [pc, #448]	@ (80074bc <HAL_RCC_OscConfig+0x278>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a6f      	ldr	r2, [pc, #444]	@ (80074bc <HAL_RCC_OscConfig+0x278>)
 80072fe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007302:	6013      	str	r3, [r2, #0]
 8007304:	4b6d      	ldr	r3, [pc, #436]	@ (80074bc <HAL_RCC_OscConfig+0x278>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a6c      	ldr	r2, [pc, #432]	@ (80074bc <HAL_RCC_OscConfig+0x278>)
 800730a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800730e:	6013      	str	r3, [r2, #0]
 8007310:	4b6a      	ldr	r3, [pc, #424]	@ (80074bc <HAL_RCC_OscConfig+0x278>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a69      	ldr	r2, [pc, #420]	@ (80074bc <HAL_RCC_OscConfig+0x278>)
 8007316:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800731a:	6013      	str	r3, [r2, #0]
 800731c:	e029      	b.n	8007372 <HAL_RCC_OscConfig+0x12e>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8007326:	d112      	bne.n	800734e <HAL_RCC_OscConfig+0x10a>
 8007328:	4b64      	ldr	r3, [pc, #400]	@ (80074bc <HAL_RCC_OscConfig+0x278>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a63      	ldr	r2, [pc, #396]	@ (80074bc <HAL_RCC_OscConfig+0x278>)
 800732e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007332:	6013      	str	r3, [r2, #0]
 8007334:	4b61      	ldr	r3, [pc, #388]	@ (80074bc <HAL_RCC_OscConfig+0x278>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a60      	ldr	r2, [pc, #384]	@ (80074bc <HAL_RCC_OscConfig+0x278>)
 800733a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800733e:	6013      	str	r3, [r2, #0]
 8007340:	4b5e      	ldr	r3, [pc, #376]	@ (80074bc <HAL_RCC_OscConfig+0x278>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a5d      	ldr	r2, [pc, #372]	@ (80074bc <HAL_RCC_OscConfig+0x278>)
 8007346:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800734a:	6013      	str	r3, [r2, #0]
 800734c:	e011      	b.n	8007372 <HAL_RCC_OscConfig+0x12e>
 800734e:	4b5b      	ldr	r3, [pc, #364]	@ (80074bc <HAL_RCC_OscConfig+0x278>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a5a      	ldr	r2, [pc, #360]	@ (80074bc <HAL_RCC_OscConfig+0x278>)
 8007354:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007358:	6013      	str	r3, [r2, #0]
 800735a:	4b58      	ldr	r3, [pc, #352]	@ (80074bc <HAL_RCC_OscConfig+0x278>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a57      	ldr	r2, [pc, #348]	@ (80074bc <HAL_RCC_OscConfig+0x278>)
 8007360:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007364:	6013      	str	r3, [r2, #0]
 8007366:	4b55      	ldr	r3, [pc, #340]	@ (80074bc <HAL_RCC_OscConfig+0x278>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a54      	ldr	r2, [pc, #336]	@ (80074bc <HAL_RCC_OscConfig+0x278>)
 800736c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007370:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d013      	beq.n	80073a2 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800737a:	f7fc f831 	bl	80033e0 <HAL_GetTick>
 800737e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007380:	e008      	b.n	8007394 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007382:	f7fc f82d 	bl	80033e0 <HAL_GetTick>
 8007386:	4602      	mov	r2, r0
 8007388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800738a:	1ad3      	subs	r3, r2, r3
 800738c:	2b64      	cmp	r3, #100	@ 0x64
 800738e:	d901      	bls.n	8007394 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8007390:	2303      	movs	r3, #3
 8007392:	e380      	b.n	8007a96 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007394:	4b49      	ldr	r3, [pc, #292]	@ (80074bc <HAL_RCC_OscConfig+0x278>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800739c:	2b00      	cmp	r3, #0
 800739e:	d0f0      	beq.n	8007382 <HAL_RCC_OscConfig+0x13e>
 80073a0:	e014      	b.n	80073cc <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073a2:	f7fc f81d 	bl	80033e0 <HAL_GetTick>
 80073a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80073a8:	e008      	b.n	80073bc <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80073aa:	f7fc f819 	bl	80033e0 <HAL_GetTick>
 80073ae:	4602      	mov	r2, r0
 80073b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b2:	1ad3      	subs	r3, r2, r3
 80073b4:	2b64      	cmp	r3, #100	@ 0x64
 80073b6:	d901      	bls.n	80073bc <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80073b8:	2303      	movs	r3, #3
 80073ba:	e36c      	b.n	8007a96 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80073bc:	4b3f      	ldr	r3, [pc, #252]	@ (80074bc <HAL_RCC_OscConfig+0x278>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d1f0      	bne.n	80073aa <HAL_RCC_OscConfig+0x166>
 80073c8:	e000      	b.n	80073cc <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073ca:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 0302 	and.w	r3, r3, #2
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f000 808c 	beq.w	80074f2 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80073da:	4b38      	ldr	r3, [pc, #224]	@ (80074bc <HAL_RCC_OscConfig+0x278>)
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80073e2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80073e4:	4b35      	ldr	r3, [pc, #212]	@ (80074bc <HAL_RCC_OscConfig+0x278>)
 80073e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e8:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80073ea:	6a3b      	ldr	r3, [r7, #32]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d007      	beq.n	8007400 <HAL_RCC_OscConfig+0x1bc>
 80073f0:	6a3b      	ldr	r3, [r7, #32]
 80073f2:	2b18      	cmp	r3, #24
 80073f4:	d137      	bne.n	8007466 <HAL_RCC_OscConfig+0x222>
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	f003 0303 	and.w	r3, r3, #3
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d132      	bne.n	8007466 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007400:	4b2e      	ldr	r3, [pc, #184]	@ (80074bc <HAL_RCC_OscConfig+0x278>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 0304 	and.w	r3, r3, #4
 8007408:	2b00      	cmp	r3, #0
 800740a:	d005      	beq.n	8007418 <HAL_RCC_OscConfig+0x1d4>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d101      	bne.n	8007418 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	e33e      	b.n	8007a96 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007418:	4b28      	ldr	r3, [pc, #160]	@ (80074bc <HAL_RCC_OscConfig+0x278>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f023 0219 	bic.w	r2, r3, #25
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	4925      	ldr	r1, [pc, #148]	@ (80074bc <HAL_RCC_OscConfig+0x278>)
 8007426:	4313      	orrs	r3, r2
 8007428:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800742a:	f7fb ffd9 	bl	80033e0 <HAL_GetTick>
 800742e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007430:	e008      	b.n	8007444 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007432:	f7fb ffd5 	bl	80033e0 <HAL_GetTick>
 8007436:	4602      	mov	r2, r0
 8007438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800743a:	1ad3      	subs	r3, r2, r3
 800743c:	2b02      	cmp	r3, #2
 800743e:	d901      	bls.n	8007444 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8007440:	2303      	movs	r3, #3
 8007442:	e328      	b.n	8007a96 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007444:	4b1d      	ldr	r3, [pc, #116]	@ (80074bc <HAL_RCC_OscConfig+0x278>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 0304 	and.w	r3, r3, #4
 800744c:	2b00      	cmp	r3, #0
 800744e:	d0f0      	beq.n	8007432 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007450:	4b1a      	ldr	r3, [pc, #104]	@ (80074bc <HAL_RCC_OscConfig+0x278>)
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	061b      	lsls	r3, r3, #24
 800745e:	4917      	ldr	r1, [pc, #92]	@ (80074bc <HAL_RCC_OscConfig+0x278>)
 8007460:	4313      	orrs	r3, r2
 8007462:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007464:	e045      	b.n	80074f2 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d028      	beq.n	80074c0 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800746e:	4b13      	ldr	r3, [pc, #76]	@ (80074bc <HAL_RCC_OscConfig+0x278>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f023 0219 	bic.w	r2, r3, #25
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	4910      	ldr	r1, [pc, #64]	@ (80074bc <HAL_RCC_OscConfig+0x278>)
 800747c:	4313      	orrs	r3, r2
 800747e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007480:	f7fb ffae 	bl	80033e0 <HAL_GetTick>
 8007484:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007486:	e008      	b.n	800749a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007488:	f7fb ffaa 	bl	80033e0 <HAL_GetTick>
 800748c:	4602      	mov	r2, r0
 800748e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	2b02      	cmp	r3, #2
 8007494:	d901      	bls.n	800749a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8007496:	2303      	movs	r3, #3
 8007498:	e2fd      	b.n	8007a96 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800749a:	4b08      	ldr	r3, [pc, #32]	@ (80074bc <HAL_RCC_OscConfig+0x278>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 0304 	and.w	r3, r3, #4
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d0f0      	beq.n	8007488 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074a6:	4b05      	ldr	r3, [pc, #20]	@ (80074bc <HAL_RCC_OscConfig+0x278>)
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	691b      	ldr	r3, [r3, #16]
 80074b2:	061b      	lsls	r3, r3, #24
 80074b4:	4901      	ldr	r1, [pc, #4]	@ (80074bc <HAL_RCC_OscConfig+0x278>)
 80074b6:	4313      	orrs	r3, r2
 80074b8:	604b      	str	r3, [r1, #4]
 80074ba:	e01a      	b.n	80074f2 <HAL_RCC_OscConfig+0x2ae>
 80074bc:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80074c0:	4b97      	ldr	r3, [pc, #604]	@ (8007720 <HAL_RCC_OscConfig+0x4dc>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a96      	ldr	r2, [pc, #600]	@ (8007720 <HAL_RCC_OscConfig+0x4dc>)
 80074c6:	f023 0301 	bic.w	r3, r3, #1
 80074ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074cc:	f7fb ff88 	bl	80033e0 <HAL_GetTick>
 80074d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80074d2:	e008      	b.n	80074e6 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074d4:	f7fb ff84 	bl	80033e0 <HAL_GetTick>
 80074d8:	4602      	mov	r2, r0
 80074da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074dc:	1ad3      	subs	r3, r2, r3
 80074de:	2b02      	cmp	r3, #2
 80074e0:	d901      	bls.n	80074e6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80074e2:	2303      	movs	r3, #3
 80074e4:	e2d7      	b.n	8007a96 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80074e6:	4b8e      	ldr	r3, [pc, #568]	@ (8007720 <HAL_RCC_OscConfig+0x4dc>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 0304 	and.w	r3, r3, #4
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d1f0      	bne.n	80074d4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 0310 	and.w	r3, r3, #16
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d06a      	beq.n	80075d4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074fe:	4b88      	ldr	r3, [pc, #544]	@ (8007720 <HAL_RCC_OscConfig+0x4dc>)
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007506:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007508:	4b85      	ldr	r3, [pc, #532]	@ (8007720 <HAL_RCC_OscConfig+0x4dc>)
 800750a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800750c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	2b08      	cmp	r3, #8
 8007512:	d007      	beq.n	8007524 <HAL_RCC_OscConfig+0x2e0>
 8007514:	69bb      	ldr	r3, [r7, #24]
 8007516:	2b18      	cmp	r3, #24
 8007518:	d11b      	bne.n	8007552 <HAL_RCC_OscConfig+0x30e>
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	f003 0303 	and.w	r3, r3, #3
 8007520:	2b01      	cmp	r3, #1
 8007522:	d116      	bne.n	8007552 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007524:	4b7e      	ldr	r3, [pc, #504]	@ (8007720 <HAL_RCC_OscConfig+0x4dc>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800752c:	2b00      	cmp	r3, #0
 800752e:	d005      	beq.n	800753c <HAL_RCC_OscConfig+0x2f8>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	69db      	ldr	r3, [r3, #28]
 8007534:	2b80      	cmp	r3, #128	@ 0x80
 8007536:	d001      	beq.n	800753c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	e2ac      	b.n	8007a96 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800753c:	4b78      	ldr	r3, [pc, #480]	@ (8007720 <HAL_RCC_OscConfig+0x4dc>)
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6a1b      	ldr	r3, [r3, #32]
 8007548:	061b      	lsls	r3, r3, #24
 800754a:	4975      	ldr	r1, [pc, #468]	@ (8007720 <HAL_RCC_OscConfig+0x4dc>)
 800754c:	4313      	orrs	r3, r2
 800754e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007550:	e040      	b.n	80075d4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	69db      	ldr	r3, [r3, #28]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d023      	beq.n	80075a2 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800755a:	4b71      	ldr	r3, [pc, #452]	@ (8007720 <HAL_RCC_OscConfig+0x4dc>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a70      	ldr	r2, [pc, #448]	@ (8007720 <HAL_RCC_OscConfig+0x4dc>)
 8007560:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007564:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007566:	f7fb ff3b 	bl	80033e0 <HAL_GetTick>
 800756a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800756c:	e008      	b.n	8007580 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800756e:	f7fb ff37 	bl	80033e0 <HAL_GetTick>
 8007572:	4602      	mov	r2, r0
 8007574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007576:	1ad3      	subs	r3, r2, r3
 8007578:	2b02      	cmp	r3, #2
 800757a:	d901      	bls.n	8007580 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800757c:	2303      	movs	r3, #3
 800757e:	e28a      	b.n	8007a96 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007580:	4b67      	ldr	r3, [pc, #412]	@ (8007720 <HAL_RCC_OscConfig+0x4dc>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007588:	2b00      	cmp	r3, #0
 800758a:	d0f0      	beq.n	800756e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800758c:	4b64      	ldr	r3, [pc, #400]	@ (8007720 <HAL_RCC_OscConfig+0x4dc>)
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a1b      	ldr	r3, [r3, #32]
 8007598:	061b      	lsls	r3, r3, #24
 800759a:	4961      	ldr	r1, [pc, #388]	@ (8007720 <HAL_RCC_OscConfig+0x4dc>)
 800759c:	4313      	orrs	r3, r2
 800759e:	60cb      	str	r3, [r1, #12]
 80075a0:	e018      	b.n	80075d4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80075a2:	4b5f      	ldr	r3, [pc, #380]	@ (8007720 <HAL_RCC_OscConfig+0x4dc>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a5e      	ldr	r2, [pc, #376]	@ (8007720 <HAL_RCC_OscConfig+0x4dc>)
 80075a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075ae:	f7fb ff17 	bl	80033e0 <HAL_GetTick>
 80075b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80075b4:	e008      	b.n	80075c8 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80075b6:	f7fb ff13 	bl	80033e0 <HAL_GetTick>
 80075ba:	4602      	mov	r2, r0
 80075bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075be:	1ad3      	subs	r3, r2, r3
 80075c0:	2b02      	cmp	r3, #2
 80075c2:	d901      	bls.n	80075c8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80075c4:	2303      	movs	r3, #3
 80075c6:	e266      	b.n	8007a96 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80075c8:	4b55      	ldr	r3, [pc, #340]	@ (8007720 <HAL_RCC_OscConfig+0x4dc>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d1f0      	bne.n	80075b6 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f003 0308 	and.w	r3, r3, #8
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d036      	beq.n	800764e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	695b      	ldr	r3, [r3, #20]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d019      	beq.n	800761c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80075e8:	4b4d      	ldr	r3, [pc, #308]	@ (8007720 <HAL_RCC_OscConfig+0x4dc>)
 80075ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075ec:	4a4c      	ldr	r2, [pc, #304]	@ (8007720 <HAL_RCC_OscConfig+0x4dc>)
 80075ee:	f043 0301 	orr.w	r3, r3, #1
 80075f2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075f4:	f7fb fef4 	bl	80033e0 <HAL_GetTick>
 80075f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80075fa:	e008      	b.n	800760e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075fc:	f7fb fef0 	bl	80033e0 <HAL_GetTick>
 8007600:	4602      	mov	r2, r0
 8007602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	2b02      	cmp	r3, #2
 8007608:	d901      	bls.n	800760e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800760a:	2303      	movs	r3, #3
 800760c:	e243      	b.n	8007a96 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800760e:	4b44      	ldr	r3, [pc, #272]	@ (8007720 <HAL_RCC_OscConfig+0x4dc>)
 8007610:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007612:	f003 0302 	and.w	r3, r3, #2
 8007616:	2b00      	cmp	r3, #0
 8007618:	d0f0      	beq.n	80075fc <HAL_RCC_OscConfig+0x3b8>
 800761a:	e018      	b.n	800764e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800761c:	4b40      	ldr	r3, [pc, #256]	@ (8007720 <HAL_RCC_OscConfig+0x4dc>)
 800761e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007620:	4a3f      	ldr	r2, [pc, #252]	@ (8007720 <HAL_RCC_OscConfig+0x4dc>)
 8007622:	f023 0301 	bic.w	r3, r3, #1
 8007626:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007628:	f7fb feda 	bl	80033e0 <HAL_GetTick>
 800762c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800762e:	e008      	b.n	8007642 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007630:	f7fb fed6 	bl	80033e0 <HAL_GetTick>
 8007634:	4602      	mov	r2, r0
 8007636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007638:	1ad3      	subs	r3, r2, r3
 800763a:	2b02      	cmp	r3, #2
 800763c:	d901      	bls.n	8007642 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800763e:	2303      	movs	r3, #3
 8007640:	e229      	b.n	8007a96 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007642:	4b37      	ldr	r3, [pc, #220]	@ (8007720 <HAL_RCC_OscConfig+0x4dc>)
 8007644:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007646:	f003 0302 	and.w	r3, r3, #2
 800764a:	2b00      	cmp	r3, #0
 800764c:	d1f0      	bne.n	8007630 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 0320 	and.w	r3, r3, #32
 8007656:	2b00      	cmp	r3, #0
 8007658:	d036      	beq.n	80076c8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	699b      	ldr	r3, [r3, #24]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d019      	beq.n	8007696 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007662:	4b2f      	ldr	r3, [pc, #188]	@ (8007720 <HAL_RCC_OscConfig+0x4dc>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a2e      	ldr	r2, [pc, #184]	@ (8007720 <HAL_RCC_OscConfig+0x4dc>)
 8007668:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800766c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800766e:	f7fb feb7 	bl	80033e0 <HAL_GetTick>
 8007672:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007674:	e008      	b.n	8007688 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007676:	f7fb feb3 	bl	80033e0 <HAL_GetTick>
 800767a:	4602      	mov	r2, r0
 800767c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800767e:	1ad3      	subs	r3, r2, r3
 8007680:	2b02      	cmp	r3, #2
 8007682:	d901      	bls.n	8007688 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8007684:	2303      	movs	r3, #3
 8007686:	e206      	b.n	8007a96 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007688:	4b25      	ldr	r3, [pc, #148]	@ (8007720 <HAL_RCC_OscConfig+0x4dc>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007690:	2b00      	cmp	r3, #0
 8007692:	d0f0      	beq.n	8007676 <HAL_RCC_OscConfig+0x432>
 8007694:	e018      	b.n	80076c8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007696:	4b22      	ldr	r3, [pc, #136]	@ (8007720 <HAL_RCC_OscConfig+0x4dc>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a21      	ldr	r2, [pc, #132]	@ (8007720 <HAL_RCC_OscConfig+0x4dc>)
 800769c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80076a0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80076a2:	f7fb fe9d 	bl	80033e0 <HAL_GetTick>
 80076a6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80076a8:	e008      	b.n	80076bc <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80076aa:	f7fb fe99 	bl	80033e0 <HAL_GetTick>
 80076ae:	4602      	mov	r2, r0
 80076b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	d901      	bls.n	80076bc <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80076b8:	2303      	movs	r3, #3
 80076ba:	e1ec      	b.n	8007a96 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80076bc:	4b18      	ldr	r3, [pc, #96]	@ (8007720 <HAL_RCC_OscConfig+0x4dc>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d1f0      	bne.n	80076aa <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 0304 	and.w	r3, r3, #4
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f000 80af 	beq.w	8007834 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80076d6:	4b13      	ldr	r3, [pc, #76]	@ (8007724 <HAL_RCC_OscConfig+0x4e0>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a12      	ldr	r2, [pc, #72]	@ (8007724 <HAL_RCC_OscConfig+0x4e0>)
 80076dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80076e2:	f7fb fe7d 	bl	80033e0 <HAL_GetTick>
 80076e6:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80076e8:	e008      	b.n	80076fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076ea:	f7fb fe79 	bl	80033e0 <HAL_GetTick>
 80076ee:	4602      	mov	r2, r0
 80076f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f2:	1ad3      	subs	r3, r2, r3
 80076f4:	2b64      	cmp	r3, #100	@ 0x64
 80076f6:	d901      	bls.n	80076fc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80076f8:	2303      	movs	r3, #3
 80076fa:	e1cc      	b.n	8007a96 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80076fc:	4b09      	ldr	r3, [pc, #36]	@ (8007724 <HAL_RCC_OscConfig+0x4e0>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007704:	2b00      	cmp	r3, #0
 8007706:	d0f0      	beq.n	80076ea <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	2b01      	cmp	r3, #1
 800770e:	d10b      	bne.n	8007728 <HAL_RCC_OscConfig+0x4e4>
 8007710:	4b03      	ldr	r3, [pc, #12]	@ (8007720 <HAL_RCC_OscConfig+0x4dc>)
 8007712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007714:	4a02      	ldr	r2, [pc, #8]	@ (8007720 <HAL_RCC_OscConfig+0x4dc>)
 8007716:	f043 0301 	orr.w	r3, r3, #1
 800771a:	6713      	str	r3, [r2, #112]	@ 0x70
 800771c:	e05b      	b.n	80077d6 <HAL_RCC_OscConfig+0x592>
 800771e:	bf00      	nop
 8007720:	58024400 	.word	0x58024400
 8007724:	58024800 	.word	0x58024800
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d112      	bne.n	8007756 <HAL_RCC_OscConfig+0x512>
 8007730:	4b9d      	ldr	r3, [pc, #628]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 8007732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007734:	4a9c      	ldr	r2, [pc, #624]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 8007736:	f023 0301 	bic.w	r3, r3, #1
 800773a:	6713      	str	r3, [r2, #112]	@ 0x70
 800773c:	4b9a      	ldr	r3, [pc, #616]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 800773e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007740:	4a99      	ldr	r2, [pc, #612]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 8007742:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007746:	6713      	str	r3, [r2, #112]	@ 0x70
 8007748:	4b97      	ldr	r3, [pc, #604]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 800774a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800774c:	4a96      	ldr	r2, [pc, #600]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 800774e:	f023 0304 	bic.w	r3, r3, #4
 8007752:	6713      	str	r3, [r2, #112]	@ 0x70
 8007754:	e03f      	b.n	80077d6 <HAL_RCC_OscConfig+0x592>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	2b05      	cmp	r3, #5
 800775c:	d112      	bne.n	8007784 <HAL_RCC_OscConfig+0x540>
 800775e:	4b92      	ldr	r3, [pc, #584]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 8007760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007762:	4a91      	ldr	r2, [pc, #580]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 8007764:	f043 0304 	orr.w	r3, r3, #4
 8007768:	6713      	str	r3, [r2, #112]	@ 0x70
 800776a:	4b8f      	ldr	r3, [pc, #572]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 800776c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800776e:	4a8e      	ldr	r2, [pc, #568]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 8007770:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007774:	6713      	str	r3, [r2, #112]	@ 0x70
 8007776:	4b8c      	ldr	r3, [pc, #560]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 8007778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800777a:	4a8b      	ldr	r2, [pc, #556]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 800777c:	f043 0301 	orr.w	r3, r3, #1
 8007780:	6713      	str	r3, [r2, #112]	@ 0x70
 8007782:	e028      	b.n	80077d6 <HAL_RCC_OscConfig+0x592>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	2b85      	cmp	r3, #133	@ 0x85
 800778a:	d112      	bne.n	80077b2 <HAL_RCC_OscConfig+0x56e>
 800778c:	4b86      	ldr	r3, [pc, #536]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 800778e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007790:	4a85      	ldr	r2, [pc, #532]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 8007792:	f043 0304 	orr.w	r3, r3, #4
 8007796:	6713      	str	r3, [r2, #112]	@ 0x70
 8007798:	4b83      	ldr	r3, [pc, #524]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 800779a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800779c:	4a82      	ldr	r2, [pc, #520]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 800779e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80077a4:	4b80      	ldr	r3, [pc, #512]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 80077a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077a8:	4a7f      	ldr	r2, [pc, #508]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 80077aa:	f043 0301 	orr.w	r3, r3, #1
 80077ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80077b0:	e011      	b.n	80077d6 <HAL_RCC_OscConfig+0x592>
 80077b2:	4b7d      	ldr	r3, [pc, #500]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 80077b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077b6:	4a7c      	ldr	r2, [pc, #496]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 80077b8:	f023 0301 	bic.w	r3, r3, #1
 80077bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80077be:	4b7a      	ldr	r3, [pc, #488]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 80077c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077c2:	4a79      	ldr	r2, [pc, #484]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 80077c4:	f023 0304 	bic.w	r3, r3, #4
 80077c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80077ca:	4b77      	ldr	r3, [pc, #476]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 80077cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077ce:	4a76      	ldr	r2, [pc, #472]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 80077d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80077d4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d015      	beq.n	800780a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077de:	f7fb fdff 	bl	80033e0 <HAL_GetTick>
 80077e2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80077e4:	e00a      	b.n	80077fc <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077e6:	f7fb fdfb 	bl	80033e0 <HAL_GetTick>
 80077ea:	4602      	mov	r2, r0
 80077ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ee:	1ad3      	subs	r3, r2, r3
 80077f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d901      	bls.n	80077fc <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80077f8:	2303      	movs	r3, #3
 80077fa:	e14c      	b.n	8007a96 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80077fc:	4b6a      	ldr	r3, [pc, #424]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 80077fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007800:	f003 0302 	and.w	r3, r3, #2
 8007804:	2b00      	cmp	r3, #0
 8007806:	d0ee      	beq.n	80077e6 <HAL_RCC_OscConfig+0x5a2>
 8007808:	e014      	b.n	8007834 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800780a:	f7fb fde9 	bl	80033e0 <HAL_GetTick>
 800780e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007810:	e00a      	b.n	8007828 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007812:	f7fb fde5 	bl	80033e0 <HAL_GetTick>
 8007816:	4602      	mov	r2, r0
 8007818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800781a:	1ad3      	subs	r3, r2, r3
 800781c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007820:	4293      	cmp	r3, r2
 8007822:	d901      	bls.n	8007828 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8007824:	2303      	movs	r3, #3
 8007826:	e136      	b.n	8007a96 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007828:	4b5f      	ldr	r3, [pc, #380]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 800782a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800782c:	f003 0302 	and.w	r3, r3, #2
 8007830:	2b00      	cmp	r3, #0
 8007832:	d1ee      	bne.n	8007812 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007838:	2b00      	cmp	r3, #0
 800783a:	f000 812b 	beq.w	8007a94 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800783e:	4b5a      	ldr	r3, [pc, #360]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007846:	2b18      	cmp	r3, #24
 8007848:	f000 80bb 	beq.w	80079c2 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007850:	2b02      	cmp	r3, #2
 8007852:	f040 8095 	bne.w	8007980 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007856:	4b54      	ldr	r3, [pc, #336]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a53      	ldr	r2, [pc, #332]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 800785c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007860:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007862:	f7fb fdbd 	bl	80033e0 <HAL_GetTick>
 8007866:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007868:	e008      	b.n	800787c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800786a:	f7fb fdb9 	bl	80033e0 <HAL_GetTick>
 800786e:	4602      	mov	r2, r0
 8007870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007872:	1ad3      	subs	r3, r2, r3
 8007874:	2b02      	cmp	r3, #2
 8007876:	d901      	bls.n	800787c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8007878:	2303      	movs	r3, #3
 800787a:	e10c      	b.n	8007a96 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800787c:	4b4a      	ldr	r3, [pc, #296]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1f0      	bne.n	800786a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007888:	4b47      	ldr	r3, [pc, #284]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 800788a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800788c:	4b47      	ldr	r3, [pc, #284]	@ (80079ac <HAL_RCC_OscConfig+0x768>)
 800788e:	4013      	ands	r3, r2
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007898:	0112      	lsls	r2, r2, #4
 800789a:	430a      	orrs	r2, r1
 800789c:	4942      	ldr	r1, [pc, #264]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 800789e:	4313      	orrs	r3, r2
 80078a0:	628b      	str	r3, [r1, #40]	@ 0x28
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078a6:	3b01      	subs	r3, #1
 80078a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078b0:	3b01      	subs	r3, #1
 80078b2:	025b      	lsls	r3, r3, #9
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	431a      	orrs	r2, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078bc:	3b01      	subs	r3, #1
 80078be:	041b      	lsls	r3, r3, #16
 80078c0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80078c4:	431a      	orrs	r2, r3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078ca:	3b01      	subs	r3, #1
 80078cc:	061b      	lsls	r3, r3, #24
 80078ce:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80078d2:	4935      	ldr	r1, [pc, #212]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 80078d4:	4313      	orrs	r3, r2
 80078d6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80078d8:	4b33      	ldr	r3, [pc, #204]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 80078da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078dc:	4a32      	ldr	r2, [pc, #200]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 80078de:	f023 0301 	bic.w	r3, r3, #1
 80078e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80078e4:	4b30      	ldr	r3, [pc, #192]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 80078e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80078e8:	4b31      	ldr	r3, [pc, #196]	@ (80079b0 <HAL_RCC_OscConfig+0x76c>)
 80078ea:	4013      	ands	r3, r2
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80078f0:	00d2      	lsls	r2, r2, #3
 80078f2:	492d      	ldr	r1, [pc, #180]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 80078f4:	4313      	orrs	r3, r2
 80078f6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80078f8:	4b2b      	ldr	r3, [pc, #172]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 80078fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078fc:	f023 020c 	bic.w	r2, r3, #12
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007904:	4928      	ldr	r1, [pc, #160]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 8007906:	4313      	orrs	r3, r2
 8007908:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800790a:	4b27      	ldr	r3, [pc, #156]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 800790c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800790e:	f023 0202 	bic.w	r2, r3, #2
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007916:	4924      	ldr	r1, [pc, #144]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 8007918:	4313      	orrs	r3, r2
 800791a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800791c:	4b22      	ldr	r3, [pc, #136]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 800791e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007920:	4a21      	ldr	r2, [pc, #132]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 8007922:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007926:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007928:	4b1f      	ldr	r3, [pc, #124]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 800792a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800792c:	4a1e      	ldr	r2, [pc, #120]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 800792e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007932:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007934:	4b1c      	ldr	r3, [pc, #112]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 8007936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007938:	4a1b      	ldr	r2, [pc, #108]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 800793a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800793e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007940:	4b19      	ldr	r3, [pc, #100]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 8007942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007944:	4a18      	ldr	r2, [pc, #96]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 8007946:	f043 0301 	orr.w	r3, r3, #1
 800794a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800794c:	4b16      	ldr	r3, [pc, #88]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a15      	ldr	r2, [pc, #84]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 8007952:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007956:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007958:	f7fb fd42 	bl	80033e0 <HAL_GetTick>
 800795c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800795e:	e008      	b.n	8007972 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007960:	f7fb fd3e 	bl	80033e0 <HAL_GetTick>
 8007964:	4602      	mov	r2, r0
 8007966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007968:	1ad3      	subs	r3, r2, r3
 800796a:	2b02      	cmp	r3, #2
 800796c:	d901      	bls.n	8007972 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800796e:	2303      	movs	r3, #3
 8007970:	e091      	b.n	8007a96 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007972:	4b0d      	ldr	r3, [pc, #52]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800797a:	2b00      	cmp	r3, #0
 800797c:	d0f0      	beq.n	8007960 <HAL_RCC_OscConfig+0x71c>
 800797e:	e089      	b.n	8007a94 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007980:	4b09      	ldr	r3, [pc, #36]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a08      	ldr	r2, [pc, #32]	@ (80079a8 <HAL_RCC_OscConfig+0x764>)
 8007986:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800798a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800798c:	f7fb fd28 	bl	80033e0 <HAL_GetTick>
 8007990:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007992:	e00f      	b.n	80079b4 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007994:	f7fb fd24 	bl	80033e0 <HAL_GetTick>
 8007998:	4602      	mov	r2, r0
 800799a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800799c:	1ad3      	subs	r3, r2, r3
 800799e:	2b02      	cmp	r3, #2
 80079a0:	d908      	bls.n	80079b4 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80079a2:	2303      	movs	r3, #3
 80079a4:	e077      	b.n	8007a96 <HAL_RCC_OscConfig+0x852>
 80079a6:	bf00      	nop
 80079a8:	58024400 	.word	0x58024400
 80079ac:	fffffc0c 	.word	0xfffffc0c
 80079b0:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80079b4:	4b3a      	ldr	r3, [pc, #232]	@ (8007aa0 <HAL_RCC_OscConfig+0x85c>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d1e9      	bne.n	8007994 <HAL_RCC_OscConfig+0x750>
 80079c0:	e068      	b.n	8007a94 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80079c2:	4b37      	ldr	r3, [pc, #220]	@ (8007aa0 <HAL_RCC_OscConfig+0x85c>)
 80079c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079c6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80079c8:	4b35      	ldr	r3, [pc, #212]	@ (8007aa0 <HAL_RCC_OscConfig+0x85c>)
 80079ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079cc:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d031      	beq.n	8007a3a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	f003 0203 	and.w	r2, r3, #3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d12a      	bne.n	8007a3a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	091b      	lsrs	r3, r3, #4
 80079e8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d122      	bne.n	8007a3a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079fe:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d11a      	bne.n	8007a3a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	0a5b      	lsrs	r3, r3, #9
 8007a08:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a10:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d111      	bne.n	8007a3a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	0c1b      	lsrs	r3, r3, #16
 8007a1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a22:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d108      	bne.n	8007a3a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	0e1b      	lsrs	r3, r3, #24
 8007a2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a34:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d001      	beq.n	8007a3e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e02b      	b.n	8007a96 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007a3e:	4b18      	ldr	r3, [pc, #96]	@ (8007aa0 <HAL_RCC_OscConfig+0x85c>)
 8007a40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a42:	08db      	lsrs	r3, r3, #3
 8007a44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a48:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a4e:	693a      	ldr	r2, [r7, #16]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d01f      	beq.n	8007a94 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007a54:	4b12      	ldr	r3, [pc, #72]	@ (8007aa0 <HAL_RCC_OscConfig+0x85c>)
 8007a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a58:	4a11      	ldr	r2, [pc, #68]	@ (8007aa0 <HAL_RCC_OscConfig+0x85c>)
 8007a5a:	f023 0301 	bic.w	r3, r3, #1
 8007a5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007a60:	f7fb fcbe 	bl	80033e0 <HAL_GetTick>
 8007a64:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007a66:	bf00      	nop
 8007a68:	f7fb fcba 	bl	80033e0 <HAL_GetTick>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d0f9      	beq.n	8007a68 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007a74:	4b0a      	ldr	r3, [pc, #40]	@ (8007aa0 <HAL_RCC_OscConfig+0x85c>)
 8007a76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a78:	4b0a      	ldr	r3, [pc, #40]	@ (8007aa4 <HAL_RCC_OscConfig+0x860>)
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007a80:	00d2      	lsls	r2, r2, #3
 8007a82:	4907      	ldr	r1, [pc, #28]	@ (8007aa0 <HAL_RCC_OscConfig+0x85c>)
 8007a84:	4313      	orrs	r3, r2
 8007a86:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007a88:	4b05      	ldr	r3, [pc, #20]	@ (8007aa0 <HAL_RCC_OscConfig+0x85c>)
 8007a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a8c:	4a04      	ldr	r2, [pc, #16]	@ (8007aa0 <HAL_RCC_OscConfig+0x85c>)
 8007a8e:	f043 0301 	orr.w	r3, r3, #1
 8007a92:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3730      	adds	r7, #48	@ 0x30
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	58024400 	.word	0x58024400
 8007aa4:	ffff0007 	.word	0xffff0007

08007aa8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b086      	sub	sp, #24
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d101      	bne.n	8007abc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e19c      	b.n	8007df6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007abc:	4b8a      	ldr	r3, [pc, #552]	@ (8007ce8 <HAL_RCC_ClockConfig+0x240>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 030f 	and.w	r3, r3, #15
 8007ac4:	683a      	ldr	r2, [r7, #0]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d910      	bls.n	8007aec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007aca:	4b87      	ldr	r3, [pc, #540]	@ (8007ce8 <HAL_RCC_ClockConfig+0x240>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f023 020f 	bic.w	r2, r3, #15
 8007ad2:	4985      	ldr	r1, [pc, #532]	@ (8007ce8 <HAL_RCC_ClockConfig+0x240>)
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ada:	4b83      	ldr	r3, [pc, #524]	@ (8007ce8 <HAL_RCC_ClockConfig+0x240>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f003 030f 	and.w	r3, r3, #15
 8007ae2:	683a      	ldr	r2, [r7, #0]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d001      	beq.n	8007aec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e184      	b.n	8007df6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f003 0304 	and.w	r3, r3, #4
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d010      	beq.n	8007b1a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	691a      	ldr	r2, [r3, #16]
 8007afc:	4b7b      	ldr	r3, [pc, #492]	@ (8007cec <HAL_RCC_ClockConfig+0x244>)
 8007afe:	699b      	ldr	r3, [r3, #24]
 8007b00:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d908      	bls.n	8007b1a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007b08:	4b78      	ldr	r3, [pc, #480]	@ (8007cec <HAL_RCC_ClockConfig+0x244>)
 8007b0a:	699b      	ldr	r3, [r3, #24]
 8007b0c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	691b      	ldr	r3, [r3, #16]
 8007b14:	4975      	ldr	r1, [pc, #468]	@ (8007cec <HAL_RCC_ClockConfig+0x244>)
 8007b16:	4313      	orrs	r3, r2
 8007b18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f003 0308 	and.w	r3, r3, #8
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d010      	beq.n	8007b48 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	695a      	ldr	r2, [r3, #20]
 8007b2a:	4b70      	ldr	r3, [pc, #448]	@ (8007cec <HAL_RCC_ClockConfig+0x244>)
 8007b2c:	69db      	ldr	r3, [r3, #28]
 8007b2e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d908      	bls.n	8007b48 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007b36:	4b6d      	ldr	r3, [pc, #436]	@ (8007cec <HAL_RCC_ClockConfig+0x244>)
 8007b38:	69db      	ldr	r3, [r3, #28]
 8007b3a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	695b      	ldr	r3, [r3, #20]
 8007b42:	496a      	ldr	r1, [pc, #424]	@ (8007cec <HAL_RCC_ClockConfig+0x244>)
 8007b44:	4313      	orrs	r3, r2
 8007b46:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f003 0310 	and.w	r3, r3, #16
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d010      	beq.n	8007b76 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	699a      	ldr	r2, [r3, #24]
 8007b58:	4b64      	ldr	r3, [pc, #400]	@ (8007cec <HAL_RCC_ClockConfig+0x244>)
 8007b5a:	69db      	ldr	r3, [r3, #28]
 8007b5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d908      	bls.n	8007b76 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007b64:	4b61      	ldr	r3, [pc, #388]	@ (8007cec <HAL_RCC_ClockConfig+0x244>)
 8007b66:	69db      	ldr	r3, [r3, #28]
 8007b68:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	699b      	ldr	r3, [r3, #24]
 8007b70:	495e      	ldr	r1, [pc, #376]	@ (8007cec <HAL_RCC_ClockConfig+0x244>)
 8007b72:	4313      	orrs	r3, r2
 8007b74:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f003 0320 	and.w	r3, r3, #32
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d010      	beq.n	8007ba4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	69da      	ldr	r2, [r3, #28]
 8007b86:	4b59      	ldr	r3, [pc, #356]	@ (8007cec <HAL_RCC_ClockConfig+0x244>)
 8007b88:	6a1b      	ldr	r3, [r3, #32]
 8007b8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d908      	bls.n	8007ba4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007b92:	4b56      	ldr	r3, [pc, #344]	@ (8007cec <HAL_RCC_ClockConfig+0x244>)
 8007b94:	6a1b      	ldr	r3, [r3, #32]
 8007b96:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	69db      	ldr	r3, [r3, #28]
 8007b9e:	4953      	ldr	r1, [pc, #332]	@ (8007cec <HAL_RCC_ClockConfig+0x244>)
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f003 0302 	and.w	r3, r3, #2
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d010      	beq.n	8007bd2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	68da      	ldr	r2, [r3, #12]
 8007bb4:	4b4d      	ldr	r3, [pc, #308]	@ (8007cec <HAL_RCC_ClockConfig+0x244>)
 8007bb6:	699b      	ldr	r3, [r3, #24]
 8007bb8:	f003 030f 	and.w	r3, r3, #15
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d908      	bls.n	8007bd2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007bc0:	4b4a      	ldr	r3, [pc, #296]	@ (8007cec <HAL_RCC_ClockConfig+0x244>)
 8007bc2:	699b      	ldr	r3, [r3, #24]
 8007bc4:	f023 020f 	bic.w	r2, r3, #15
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	4947      	ldr	r1, [pc, #284]	@ (8007cec <HAL_RCC_ClockConfig+0x244>)
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f003 0301 	and.w	r3, r3, #1
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d055      	beq.n	8007c8a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007bde:	4b43      	ldr	r3, [pc, #268]	@ (8007cec <HAL_RCC_ClockConfig+0x244>)
 8007be0:	699b      	ldr	r3, [r3, #24]
 8007be2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	4940      	ldr	r1, [pc, #256]	@ (8007cec <HAL_RCC_ClockConfig+0x244>)
 8007bec:	4313      	orrs	r3, r2
 8007bee:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	d107      	bne.n	8007c08 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007bf8:	4b3c      	ldr	r3, [pc, #240]	@ (8007cec <HAL_RCC_ClockConfig+0x244>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d121      	bne.n	8007c48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	e0f6      	b.n	8007df6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	2b03      	cmp	r3, #3
 8007c0e:	d107      	bne.n	8007c20 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007c10:	4b36      	ldr	r3, [pc, #216]	@ (8007cec <HAL_RCC_ClockConfig+0x244>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d115      	bne.n	8007c48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e0ea      	b.n	8007df6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d107      	bne.n	8007c38 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007c28:	4b30      	ldr	r3, [pc, #192]	@ (8007cec <HAL_RCC_ClockConfig+0x244>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d109      	bne.n	8007c48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	e0de      	b.n	8007df6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c38:	4b2c      	ldr	r3, [pc, #176]	@ (8007cec <HAL_RCC_ClockConfig+0x244>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f003 0304 	and.w	r3, r3, #4
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d101      	bne.n	8007c48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007c44:	2301      	movs	r3, #1
 8007c46:	e0d6      	b.n	8007df6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007c48:	4b28      	ldr	r3, [pc, #160]	@ (8007cec <HAL_RCC_ClockConfig+0x244>)
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	f023 0207 	bic.w	r2, r3, #7
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	4925      	ldr	r1, [pc, #148]	@ (8007cec <HAL_RCC_ClockConfig+0x244>)
 8007c56:	4313      	orrs	r3, r2
 8007c58:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c5a:	f7fb fbc1 	bl	80033e0 <HAL_GetTick>
 8007c5e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c60:	e00a      	b.n	8007c78 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c62:	f7fb fbbd 	bl	80033e0 <HAL_GetTick>
 8007c66:	4602      	mov	r2, r0
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	1ad3      	subs	r3, r2, r3
 8007c6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d901      	bls.n	8007c78 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007c74:	2303      	movs	r3, #3
 8007c76:	e0be      	b.n	8007df6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c78:	4b1c      	ldr	r3, [pc, #112]	@ (8007cec <HAL_RCC_ClockConfig+0x244>)
 8007c7a:	691b      	ldr	r3, [r3, #16]
 8007c7c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	00db      	lsls	r3, r3, #3
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d1eb      	bne.n	8007c62 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f003 0302 	and.w	r3, r3, #2
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d010      	beq.n	8007cb8 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	68da      	ldr	r2, [r3, #12]
 8007c9a:	4b14      	ldr	r3, [pc, #80]	@ (8007cec <HAL_RCC_ClockConfig+0x244>)
 8007c9c:	699b      	ldr	r3, [r3, #24]
 8007c9e:	f003 030f 	and.w	r3, r3, #15
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d208      	bcs.n	8007cb8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ca6:	4b11      	ldr	r3, [pc, #68]	@ (8007cec <HAL_RCC_ClockConfig+0x244>)
 8007ca8:	699b      	ldr	r3, [r3, #24]
 8007caa:	f023 020f 	bic.w	r2, r3, #15
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	68db      	ldr	r3, [r3, #12]
 8007cb2:	490e      	ldr	r1, [pc, #56]	@ (8007cec <HAL_RCC_ClockConfig+0x244>)
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8007ce8 <HAL_RCC_ClockConfig+0x240>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f003 030f 	and.w	r3, r3, #15
 8007cc0:	683a      	ldr	r2, [r7, #0]
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d214      	bcs.n	8007cf0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cc6:	4b08      	ldr	r3, [pc, #32]	@ (8007ce8 <HAL_RCC_ClockConfig+0x240>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f023 020f 	bic.w	r2, r3, #15
 8007cce:	4906      	ldr	r1, [pc, #24]	@ (8007ce8 <HAL_RCC_ClockConfig+0x240>)
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cd6:	4b04      	ldr	r3, [pc, #16]	@ (8007ce8 <HAL_RCC_ClockConfig+0x240>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f003 030f 	and.w	r3, r3, #15
 8007cde:	683a      	ldr	r2, [r7, #0]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d005      	beq.n	8007cf0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e086      	b.n	8007df6 <HAL_RCC_ClockConfig+0x34e>
 8007ce8:	52002000 	.word	0x52002000
 8007cec:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f003 0304 	and.w	r3, r3, #4
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d010      	beq.n	8007d1e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	691a      	ldr	r2, [r3, #16]
 8007d00:	4b3f      	ldr	r3, [pc, #252]	@ (8007e00 <HAL_RCC_ClockConfig+0x358>)
 8007d02:	699b      	ldr	r3, [r3, #24]
 8007d04:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d208      	bcs.n	8007d1e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007d0c:	4b3c      	ldr	r3, [pc, #240]	@ (8007e00 <HAL_RCC_ClockConfig+0x358>)
 8007d0e:	699b      	ldr	r3, [r3, #24]
 8007d10:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	691b      	ldr	r3, [r3, #16]
 8007d18:	4939      	ldr	r1, [pc, #228]	@ (8007e00 <HAL_RCC_ClockConfig+0x358>)
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f003 0308 	and.w	r3, r3, #8
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d010      	beq.n	8007d4c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	695a      	ldr	r2, [r3, #20]
 8007d2e:	4b34      	ldr	r3, [pc, #208]	@ (8007e00 <HAL_RCC_ClockConfig+0x358>)
 8007d30:	69db      	ldr	r3, [r3, #28]
 8007d32:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d208      	bcs.n	8007d4c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007d3a:	4b31      	ldr	r3, [pc, #196]	@ (8007e00 <HAL_RCC_ClockConfig+0x358>)
 8007d3c:	69db      	ldr	r3, [r3, #28]
 8007d3e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	695b      	ldr	r3, [r3, #20]
 8007d46:	492e      	ldr	r1, [pc, #184]	@ (8007e00 <HAL_RCC_ClockConfig+0x358>)
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f003 0310 	and.w	r3, r3, #16
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d010      	beq.n	8007d7a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	699a      	ldr	r2, [r3, #24]
 8007d5c:	4b28      	ldr	r3, [pc, #160]	@ (8007e00 <HAL_RCC_ClockConfig+0x358>)
 8007d5e:	69db      	ldr	r3, [r3, #28]
 8007d60:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d208      	bcs.n	8007d7a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007d68:	4b25      	ldr	r3, [pc, #148]	@ (8007e00 <HAL_RCC_ClockConfig+0x358>)
 8007d6a:	69db      	ldr	r3, [r3, #28]
 8007d6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	699b      	ldr	r3, [r3, #24]
 8007d74:	4922      	ldr	r1, [pc, #136]	@ (8007e00 <HAL_RCC_ClockConfig+0x358>)
 8007d76:	4313      	orrs	r3, r2
 8007d78:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f003 0320 	and.w	r3, r3, #32
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d010      	beq.n	8007da8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	69da      	ldr	r2, [r3, #28]
 8007d8a:	4b1d      	ldr	r3, [pc, #116]	@ (8007e00 <HAL_RCC_ClockConfig+0x358>)
 8007d8c:	6a1b      	ldr	r3, [r3, #32]
 8007d8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d208      	bcs.n	8007da8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007d96:	4b1a      	ldr	r3, [pc, #104]	@ (8007e00 <HAL_RCC_ClockConfig+0x358>)
 8007d98:	6a1b      	ldr	r3, [r3, #32]
 8007d9a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	69db      	ldr	r3, [r3, #28]
 8007da2:	4917      	ldr	r1, [pc, #92]	@ (8007e00 <HAL_RCC_ClockConfig+0x358>)
 8007da4:	4313      	orrs	r3, r2
 8007da6:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8007da8:	f000 f834 	bl	8007e14 <HAL_RCC_GetSysClockFreq>
 8007dac:	4602      	mov	r2, r0
 8007dae:	4b14      	ldr	r3, [pc, #80]	@ (8007e00 <HAL_RCC_ClockConfig+0x358>)
 8007db0:	699b      	ldr	r3, [r3, #24]
 8007db2:	0a1b      	lsrs	r3, r3, #8
 8007db4:	f003 030f 	and.w	r3, r3, #15
 8007db8:	4912      	ldr	r1, [pc, #72]	@ (8007e04 <HAL_RCC_ClockConfig+0x35c>)
 8007dba:	5ccb      	ldrb	r3, [r1, r3]
 8007dbc:	f003 031f 	and.w	r3, r3, #31
 8007dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8007dc4:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8007e00 <HAL_RCC_ClockConfig+0x358>)
 8007dc8:	699b      	ldr	r3, [r3, #24]
 8007dca:	f003 030f 	and.w	r3, r3, #15
 8007dce:	4a0d      	ldr	r2, [pc, #52]	@ (8007e04 <HAL_RCC_ClockConfig+0x35c>)
 8007dd0:	5cd3      	ldrb	r3, [r2, r3]
 8007dd2:	f003 031f 	and.w	r3, r3, #31
 8007dd6:	693a      	ldr	r2, [r7, #16]
 8007dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8007ddc:	4a0a      	ldr	r2, [pc, #40]	@ (8007e08 <HAL_RCC_ClockConfig+0x360>)
 8007dde:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007de0:	4a0a      	ldr	r2, [pc, #40]	@ (8007e0c <HAL_RCC_ClockConfig+0x364>)
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007de6:	4b0a      	ldr	r3, [pc, #40]	@ (8007e10 <HAL_RCC_ClockConfig+0x368>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4618      	mov	r0, r3
 8007dec:	f7fb faae 	bl	800334c <HAL_InitTick>
 8007df0:	4603      	mov	r3, r0
 8007df2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3718      	adds	r7, #24
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	58024400 	.word	0x58024400
 8007e04:	08012a08 	.word	0x08012a08
 8007e08:	24000098 	.word	0x24000098
 8007e0c:	24000094 	.word	0x24000094
 8007e10:	2400009c 	.word	0x2400009c

08007e14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b089      	sub	sp, #36	@ 0x24
 8007e18:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e1a:	4bb3      	ldr	r3, [pc, #716]	@ (80080e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e22:	2b18      	cmp	r3, #24
 8007e24:	f200 8155 	bhi.w	80080d2 <HAL_RCC_GetSysClockFreq+0x2be>
 8007e28:	a201      	add	r2, pc, #4	@ (adr r2, 8007e30 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e2e:	bf00      	nop
 8007e30:	08007e95 	.word	0x08007e95
 8007e34:	080080d3 	.word	0x080080d3
 8007e38:	080080d3 	.word	0x080080d3
 8007e3c:	080080d3 	.word	0x080080d3
 8007e40:	080080d3 	.word	0x080080d3
 8007e44:	080080d3 	.word	0x080080d3
 8007e48:	080080d3 	.word	0x080080d3
 8007e4c:	080080d3 	.word	0x080080d3
 8007e50:	08007ebb 	.word	0x08007ebb
 8007e54:	080080d3 	.word	0x080080d3
 8007e58:	080080d3 	.word	0x080080d3
 8007e5c:	080080d3 	.word	0x080080d3
 8007e60:	080080d3 	.word	0x080080d3
 8007e64:	080080d3 	.word	0x080080d3
 8007e68:	080080d3 	.word	0x080080d3
 8007e6c:	080080d3 	.word	0x080080d3
 8007e70:	08007ec1 	.word	0x08007ec1
 8007e74:	080080d3 	.word	0x080080d3
 8007e78:	080080d3 	.word	0x080080d3
 8007e7c:	080080d3 	.word	0x080080d3
 8007e80:	080080d3 	.word	0x080080d3
 8007e84:	080080d3 	.word	0x080080d3
 8007e88:	080080d3 	.word	0x080080d3
 8007e8c:	080080d3 	.word	0x080080d3
 8007e90:	08007ec7 	.word	0x08007ec7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e94:	4b94      	ldr	r3, [pc, #592]	@ (80080e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f003 0320 	and.w	r3, r3, #32
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d009      	beq.n	8007eb4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ea0:	4b91      	ldr	r3, [pc, #580]	@ (80080e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	08db      	lsrs	r3, r3, #3
 8007ea6:	f003 0303 	and.w	r3, r3, #3
 8007eaa:	4a90      	ldr	r2, [pc, #576]	@ (80080ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007eac:	fa22 f303 	lsr.w	r3, r2, r3
 8007eb0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007eb2:	e111      	b.n	80080d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007eb4:	4b8d      	ldr	r3, [pc, #564]	@ (80080ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007eb6:	61bb      	str	r3, [r7, #24]
      break;
 8007eb8:	e10e      	b.n	80080d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007eba:	4b8d      	ldr	r3, [pc, #564]	@ (80080f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007ebc:	61bb      	str	r3, [r7, #24]
      break;
 8007ebe:	e10b      	b.n	80080d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007ec0:	4b8c      	ldr	r3, [pc, #560]	@ (80080f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007ec2:	61bb      	str	r3, [r7, #24]
      break;
 8007ec4:	e108      	b.n	80080d8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007ec6:	4b88      	ldr	r3, [pc, #544]	@ (80080e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eca:	f003 0303 	and.w	r3, r3, #3
 8007ece:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007ed0:	4b85      	ldr	r3, [pc, #532]	@ (80080e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ed4:	091b      	lsrs	r3, r3, #4
 8007ed6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007eda:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007edc:	4b82      	ldr	r3, [pc, #520]	@ (80080e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ee0:	f003 0301 	and.w	r3, r3, #1
 8007ee4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007ee6:	4b80      	ldr	r3, [pc, #512]	@ (80080e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007eea:	08db      	lsrs	r3, r3, #3
 8007eec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ef0:	68fa      	ldr	r2, [r7, #12]
 8007ef2:	fb02 f303 	mul.w	r3, r2, r3
 8007ef6:	ee07 3a90 	vmov	s15, r3
 8007efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007efe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f000 80e1 	beq.w	80080cc <HAL_RCC_GetSysClockFreq+0x2b8>
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	2b02      	cmp	r3, #2
 8007f0e:	f000 8083 	beq.w	8008018 <HAL_RCC_GetSysClockFreq+0x204>
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	2b02      	cmp	r3, #2
 8007f16:	f200 80a1 	bhi.w	800805c <HAL_RCC_GetSysClockFreq+0x248>
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d003      	beq.n	8007f28 <HAL_RCC_GetSysClockFreq+0x114>
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d056      	beq.n	8007fd4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007f26:	e099      	b.n	800805c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f28:	4b6f      	ldr	r3, [pc, #444]	@ (80080e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f003 0320 	and.w	r3, r3, #32
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d02d      	beq.n	8007f90 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f34:	4b6c      	ldr	r3, [pc, #432]	@ (80080e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	08db      	lsrs	r3, r3, #3
 8007f3a:	f003 0303 	and.w	r3, r3, #3
 8007f3e:	4a6b      	ldr	r2, [pc, #428]	@ (80080ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007f40:	fa22 f303 	lsr.w	r3, r2, r3
 8007f44:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	ee07 3a90 	vmov	s15, r3
 8007f4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	ee07 3a90 	vmov	s15, r3
 8007f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f5e:	4b62      	ldr	r3, [pc, #392]	@ (80080e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f66:	ee07 3a90 	vmov	s15, r3
 8007f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f72:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80080f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f8a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007f8e:	e087      	b.n	80080a0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	ee07 3a90 	vmov	s15, r3
 8007f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f9a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80080fc <HAL_RCC_GetSysClockFreq+0x2e8>
 8007f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fa2:	4b51      	ldr	r3, [pc, #324]	@ (80080e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007faa:	ee07 3a90 	vmov	s15, r3
 8007fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8007fb6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80080f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007fd2:	e065      	b.n	80080a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	ee07 3a90 	vmov	s15, r3
 8007fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fde:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008100 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fe6:	4b40      	ldr	r3, [pc, #256]	@ (80080e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fee:	ee07 3a90 	vmov	s15, r3
 8007ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ff6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ffa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80080f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008006:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800800a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800800e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008012:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008016:	e043      	b.n	80080a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	ee07 3a90 	vmov	s15, r3
 800801e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008022:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008104 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800802a:	4b2f      	ldr	r3, [pc, #188]	@ (80080e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800802c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800802e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008032:	ee07 3a90 	vmov	s15, r3
 8008036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800803a:	ed97 6a02 	vldr	s12, [r7, #8]
 800803e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80080f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800804a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800804e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008056:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800805a:	e021      	b.n	80080a0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	ee07 3a90 	vmov	s15, r3
 8008062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008066:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008100 <HAL_RCC_GetSysClockFreq+0x2ec>
 800806a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800806e:	4b1e      	ldr	r3, [pc, #120]	@ (80080e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008076:	ee07 3a90 	vmov	s15, r3
 800807a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800807e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008082:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80080f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800808a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800808e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800809a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800809e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80080a0:	4b11      	ldr	r3, [pc, #68]	@ (80080e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080a4:	0a5b      	lsrs	r3, r3, #9
 80080a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080aa:	3301      	adds	r3, #1
 80080ac:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	ee07 3a90 	vmov	s15, r3
 80080b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80080b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80080bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080c4:	ee17 3a90 	vmov	r3, s15
 80080c8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80080ca:	e005      	b.n	80080d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80080cc:	2300      	movs	r3, #0
 80080ce:	61bb      	str	r3, [r7, #24]
      break;
 80080d0:	e002      	b.n	80080d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80080d2:	4b07      	ldr	r3, [pc, #28]	@ (80080f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80080d4:	61bb      	str	r3, [r7, #24]
      break;
 80080d6:	bf00      	nop
  }

  return sysclockfreq;
 80080d8:	69bb      	ldr	r3, [r7, #24]
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3724      	adds	r7, #36	@ 0x24
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr
 80080e6:	bf00      	nop
 80080e8:	58024400 	.word	0x58024400
 80080ec:	03d09000 	.word	0x03d09000
 80080f0:	003d0900 	.word	0x003d0900
 80080f4:	016e3600 	.word	0x016e3600
 80080f8:	46000000 	.word	0x46000000
 80080fc:	4c742400 	.word	0x4c742400
 8008100:	4a742400 	.word	0x4a742400
 8008104:	4bb71b00 	.word	0x4bb71b00

08008108 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800810e:	f7ff fe81 	bl	8007e14 <HAL_RCC_GetSysClockFreq>
 8008112:	4602      	mov	r2, r0
 8008114:	4b10      	ldr	r3, [pc, #64]	@ (8008158 <HAL_RCC_GetHCLKFreq+0x50>)
 8008116:	699b      	ldr	r3, [r3, #24]
 8008118:	0a1b      	lsrs	r3, r3, #8
 800811a:	f003 030f 	and.w	r3, r3, #15
 800811e:	490f      	ldr	r1, [pc, #60]	@ (800815c <HAL_RCC_GetHCLKFreq+0x54>)
 8008120:	5ccb      	ldrb	r3, [r1, r3]
 8008122:	f003 031f 	and.w	r3, r3, #31
 8008126:	fa22 f303 	lsr.w	r3, r2, r3
 800812a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800812c:	4b0a      	ldr	r3, [pc, #40]	@ (8008158 <HAL_RCC_GetHCLKFreq+0x50>)
 800812e:	699b      	ldr	r3, [r3, #24]
 8008130:	f003 030f 	and.w	r3, r3, #15
 8008134:	4a09      	ldr	r2, [pc, #36]	@ (800815c <HAL_RCC_GetHCLKFreq+0x54>)
 8008136:	5cd3      	ldrb	r3, [r2, r3]
 8008138:	f003 031f 	and.w	r3, r3, #31
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	fa22 f303 	lsr.w	r3, r2, r3
 8008142:	4a07      	ldr	r2, [pc, #28]	@ (8008160 <HAL_RCC_GetHCLKFreq+0x58>)
 8008144:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008146:	4a07      	ldr	r2, [pc, #28]	@ (8008164 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800814c:	4b04      	ldr	r3, [pc, #16]	@ (8008160 <HAL_RCC_GetHCLKFreq+0x58>)
 800814e:	681b      	ldr	r3, [r3, #0]
}
 8008150:	4618      	mov	r0, r3
 8008152:	3708      	adds	r7, #8
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	58024400 	.word	0x58024400
 800815c:	08012a08 	.word	0x08012a08
 8008160:	24000098 	.word	0x24000098
 8008164:	24000094 	.word	0x24000094

08008168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800816c:	f7ff ffcc 	bl	8008108 <HAL_RCC_GetHCLKFreq>
 8008170:	4602      	mov	r2, r0
 8008172:	4b06      	ldr	r3, [pc, #24]	@ (800818c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008174:	69db      	ldr	r3, [r3, #28]
 8008176:	091b      	lsrs	r3, r3, #4
 8008178:	f003 0307 	and.w	r3, r3, #7
 800817c:	4904      	ldr	r1, [pc, #16]	@ (8008190 <HAL_RCC_GetPCLK1Freq+0x28>)
 800817e:	5ccb      	ldrb	r3, [r1, r3]
 8008180:	f003 031f 	and.w	r3, r3, #31
 8008184:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008188:	4618      	mov	r0, r3
 800818a:	bd80      	pop	{r7, pc}
 800818c:	58024400 	.word	0x58024400
 8008190:	08012a08 	.word	0x08012a08

08008194 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8008198:	f7ff ffb6 	bl	8008108 <HAL_RCC_GetHCLKFreq>
 800819c:	4602      	mov	r2, r0
 800819e:	4b06      	ldr	r3, [pc, #24]	@ (80081b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80081a0:	69db      	ldr	r3, [r3, #28]
 80081a2:	0a1b      	lsrs	r3, r3, #8
 80081a4:	f003 0307 	and.w	r3, r3, #7
 80081a8:	4904      	ldr	r1, [pc, #16]	@ (80081bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80081aa:	5ccb      	ldrb	r3, [r1, r3]
 80081ac:	f003 031f 	and.w	r3, r3, #31
 80081b0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	bd80      	pop	{r7, pc}
 80081b8:	58024400 	.word	0x58024400
 80081bc:	08012a08 	.word	0x08012a08

080081c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80081c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081c4:	b0c8      	sub	sp, #288	@ 0x120
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80081cc:	2300      	movs	r3, #0
 80081ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80081d2:	2300      	movs	r3, #0
 80081d4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80081d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80081e4:	2500      	movs	r5, #0
 80081e6:	ea54 0305 	orrs.w	r3, r4, r5
 80081ea:	d049      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80081ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081f2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80081f6:	d02f      	beq.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80081f8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80081fc:	d828      	bhi.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80081fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008202:	d01a      	beq.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008204:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008208:	d822      	bhi.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800820a:	2b00      	cmp	r3, #0
 800820c:	d003      	beq.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800820e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008212:	d007      	beq.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008214:	e01c      	b.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008216:	4ba7      	ldr	r3, [pc, #668]	@ (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800821a:	4aa6      	ldr	r2, [pc, #664]	@ (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800821c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008220:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008222:	e01a      	b.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008224:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008228:	3308      	adds	r3, #8
 800822a:	2102      	movs	r1, #2
 800822c:	4618      	mov	r0, r3
 800822e:	f001 fc43 	bl	8009ab8 <RCCEx_PLL2_Config>
 8008232:	4603      	mov	r3, r0
 8008234:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008238:	e00f      	b.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800823a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800823e:	3328      	adds	r3, #40	@ 0x28
 8008240:	2102      	movs	r1, #2
 8008242:	4618      	mov	r0, r3
 8008244:	f001 fcea 	bl	8009c1c <RCCEx_PLL3_Config>
 8008248:	4603      	mov	r3, r0
 800824a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800824e:	e004      	b.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008256:	e000      	b.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008258:	bf00      	nop
    }

    if (ret == HAL_OK)
 800825a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800825e:	2b00      	cmp	r3, #0
 8008260:	d10a      	bne.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008262:	4b94      	ldr	r3, [pc, #592]	@ (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008264:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008266:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800826a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800826e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008270:	4a90      	ldr	r2, [pc, #576]	@ (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008272:	430b      	orrs	r3, r1
 8008274:	6513      	str	r3, [r2, #80]	@ 0x50
 8008276:	e003      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008278:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800827c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008280:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008288:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800828c:	f04f 0900 	mov.w	r9, #0
 8008290:	ea58 0309 	orrs.w	r3, r8, r9
 8008294:	d047      	beq.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008296:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800829a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800829c:	2b04      	cmp	r3, #4
 800829e:	d82a      	bhi.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80082a0:	a201      	add	r2, pc, #4	@ (adr r2, 80082a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80082a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a6:	bf00      	nop
 80082a8:	080082bd 	.word	0x080082bd
 80082ac:	080082cb 	.word	0x080082cb
 80082b0:	080082e1 	.word	0x080082e1
 80082b4:	080082ff 	.word	0x080082ff
 80082b8:	080082ff 	.word	0x080082ff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082bc:	4b7d      	ldr	r3, [pc, #500]	@ (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80082be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082c0:	4a7c      	ldr	r2, [pc, #496]	@ (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80082c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80082c8:	e01a      	b.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80082ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082ce:	3308      	adds	r3, #8
 80082d0:	2100      	movs	r1, #0
 80082d2:	4618      	mov	r0, r3
 80082d4:	f001 fbf0 	bl	8009ab8 <RCCEx_PLL2_Config>
 80082d8:	4603      	mov	r3, r0
 80082da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80082de:	e00f      	b.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80082e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082e4:	3328      	adds	r3, #40	@ 0x28
 80082e6:	2100      	movs	r1, #0
 80082e8:	4618      	mov	r0, r3
 80082ea:	f001 fc97 	bl	8009c1c <RCCEx_PLL3_Config>
 80082ee:	4603      	mov	r3, r0
 80082f0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80082f4:	e004      	b.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80082fc:	e000      	b.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80082fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008300:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008304:	2b00      	cmp	r3, #0
 8008306:	d10a      	bne.n	800831e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008308:	4b6a      	ldr	r3, [pc, #424]	@ (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800830a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800830c:	f023 0107 	bic.w	r1, r3, #7
 8008310:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008316:	4a67      	ldr	r2, [pc, #412]	@ (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008318:	430b      	orrs	r3, r1
 800831a:	6513      	str	r3, [r2, #80]	@ 0x50
 800831c:	e003      	b.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800831e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008322:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8008326:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800832a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8008332:	f04f 0b00 	mov.w	fp, #0
 8008336:	ea5a 030b 	orrs.w	r3, sl, fp
 800833a:	d054      	beq.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800833c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008342:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8008346:	d036      	beq.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8008348:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800834c:	d82f      	bhi.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800834e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008352:	d032      	beq.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008354:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008358:	d829      	bhi.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800835a:	2bc0      	cmp	r3, #192	@ 0xc0
 800835c:	d02f      	beq.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800835e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008360:	d825      	bhi.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008362:	2b80      	cmp	r3, #128	@ 0x80
 8008364:	d018      	beq.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8008366:	2b80      	cmp	r3, #128	@ 0x80
 8008368:	d821      	bhi.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800836a:	2b00      	cmp	r3, #0
 800836c:	d002      	beq.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800836e:	2b40      	cmp	r3, #64	@ 0x40
 8008370:	d007      	beq.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8008372:	e01c      	b.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008374:	4b4f      	ldr	r3, [pc, #316]	@ (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008378:	4a4e      	ldr	r2, [pc, #312]	@ (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800837a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800837e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8008380:	e01e      	b.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008382:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008386:	3308      	adds	r3, #8
 8008388:	2100      	movs	r1, #0
 800838a:	4618      	mov	r0, r3
 800838c:	f001 fb94 	bl	8009ab8 <RCCEx_PLL2_Config>
 8008390:	4603      	mov	r3, r0
 8008392:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8008396:	e013      	b.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008398:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800839c:	3328      	adds	r3, #40	@ 0x28
 800839e:	2100      	movs	r1, #0
 80083a0:	4618      	mov	r0, r3
 80083a2:	f001 fc3b 	bl	8009c1c <RCCEx_PLL3_Config>
 80083a6:	4603      	mov	r3, r0
 80083a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80083ac:	e008      	b.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083ae:	2301      	movs	r3, #1
 80083b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80083b4:	e004      	b.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80083b6:	bf00      	nop
 80083b8:	e002      	b.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80083ba:	bf00      	nop
 80083bc:	e000      	b.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80083be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d10a      	bne.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80083c8:	4b3a      	ldr	r3, [pc, #232]	@ (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80083ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083cc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80083d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083d6:	4a37      	ldr	r2, [pc, #220]	@ (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80083d8:	430b      	orrs	r3, r1
 80083da:	6513      	str	r3, [r2, #80]	@ 0x50
 80083dc:	e003      	b.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083de:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083e2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80083e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ee:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80083f2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80083f6:	2300      	movs	r3, #0
 80083f8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80083fc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008400:	460b      	mov	r3, r1
 8008402:	4313      	orrs	r3, r2
 8008404:	d05c      	beq.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8008406:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800840a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800840c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008410:	d03b      	beq.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008412:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008416:	d834      	bhi.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008418:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800841c:	d037      	beq.n	800848e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800841e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008422:	d82e      	bhi.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008424:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008428:	d033      	beq.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800842a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800842e:	d828      	bhi.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008430:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008434:	d01a      	beq.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8008436:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800843a:	d822      	bhi.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800843c:	2b00      	cmp	r3, #0
 800843e:	d003      	beq.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8008440:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008444:	d007      	beq.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8008446:	e01c      	b.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008448:	4b1a      	ldr	r3, [pc, #104]	@ (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800844a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800844c:	4a19      	ldr	r2, [pc, #100]	@ (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800844e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008452:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8008454:	e01e      	b.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008456:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800845a:	3308      	adds	r3, #8
 800845c:	2100      	movs	r1, #0
 800845e:	4618      	mov	r0, r3
 8008460:	f001 fb2a 	bl	8009ab8 <RCCEx_PLL2_Config>
 8008464:	4603      	mov	r3, r0
 8008466:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800846a:	e013      	b.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800846c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008470:	3328      	adds	r3, #40	@ 0x28
 8008472:	2100      	movs	r1, #0
 8008474:	4618      	mov	r0, r3
 8008476:	f001 fbd1 	bl	8009c1c <RCCEx_PLL3_Config>
 800847a:	4603      	mov	r3, r0
 800847c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8008480:	e008      	b.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008488:	e004      	b.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800848a:	bf00      	nop
 800848c:	e002      	b.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800848e:	bf00      	nop
 8008490:	e000      	b.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8008492:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008494:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008498:	2b00      	cmp	r3, #0
 800849a:	d10d      	bne.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800849c:	4b05      	ldr	r3, [pc, #20]	@ (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800849e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084a0:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80084a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084aa:	4a02      	ldr	r2, [pc, #8]	@ (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084ac:	430b      	orrs	r3, r1
 80084ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80084b0:	e006      	b.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80084b2:	bf00      	nop
 80084b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084bc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80084c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80084cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80084d0:	2300      	movs	r3, #0
 80084d2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80084d6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80084da:	460b      	mov	r3, r1
 80084dc:	4313      	orrs	r3, r2
 80084de:	d03a      	beq.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80084e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084e6:	2b30      	cmp	r3, #48	@ 0x30
 80084e8:	d01f      	beq.n	800852a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80084ea:	2b30      	cmp	r3, #48	@ 0x30
 80084ec:	d819      	bhi.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80084ee:	2b20      	cmp	r3, #32
 80084f0:	d00c      	beq.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80084f2:	2b20      	cmp	r3, #32
 80084f4:	d815      	bhi.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d019      	beq.n	800852e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80084fa:	2b10      	cmp	r3, #16
 80084fc:	d111      	bne.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084fe:	4bae      	ldr	r3, [pc, #696]	@ (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008502:	4aad      	ldr	r2, [pc, #692]	@ (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008504:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008508:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800850a:	e011      	b.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800850c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008510:	3308      	adds	r3, #8
 8008512:	2102      	movs	r1, #2
 8008514:	4618      	mov	r0, r3
 8008516:	f001 facf 	bl	8009ab8 <RCCEx_PLL2_Config>
 800851a:	4603      	mov	r3, r0
 800851c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008520:	e006      	b.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008528:	e002      	b.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800852a:	bf00      	nop
 800852c:	e000      	b.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800852e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008530:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008534:	2b00      	cmp	r3, #0
 8008536:	d10a      	bne.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008538:	4b9f      	ldr	r3, [pc, #636]	@ (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800853a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800853c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008540:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008546:	4a9c      	ldr	r2, [pc, #624]	@ (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008548:	430b      	orrs	r3, r1
 800854a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800854c:	e003      	b.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800854e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008552:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008556:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800855a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008562:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008566:	2300      	movs	r3, #0
 8008568:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800856c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008570:	460b      	mov	r3, r1
 8008572:	4313      	orrs	r3, r2
 8008574:	d051      	beq.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008576:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800857a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800857c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008580:	d035      	beq.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8008582:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008586:	d82e      	bhi.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008588:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800858c:	d031      	beq.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800858e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008592:	d828      	bhi.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008594:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008598:	d01a      	beq.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800859a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800859e:	d822      	bhi.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d003      	beq.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80085a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085a8:	d007      	beq.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80085aa:	e01c      	b.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085ac:	4b82      	ldr	r3, [pc, #520]	@ (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80085ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085b0:	4a81      	ldr	r2, [pc, #516]	@ (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80085b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80085b8:	e01c      	b.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085be:	3308      	adds	r3, #8
 80085c0:	2100      	movs	r1, #0
 80085c2:	4618      	mov	r0, r3
 80085c4:	f001 fa78 	bl	8009ab8 <RCCEx_PLL2_Config>
 80085c8:	4603      	mov	r3, r0
 80085ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80085ce:	e011      	b.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80085d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085d4:	3328      	adds	r3, #40	@ 0x28
 80085d6:	2100      	movs	r1, #0
 80085d8:	4618      	mov	r0, r3
 80085da:	f001 fb1f 	bl	8009c1c <RCCEx_PLL3_Config>
 80085de:	4603      	mov	r3, r0
 80085e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80085e4:	e006      	b.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80085ec:	e002      	b.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80085ee:	bf00      	nop
 80085f0:	e000      	b.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80085f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d10a      	bne.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80085fc:	4b6e      	ldr	r3, [pc, #440]	@ (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80085fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008600:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008604:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008608:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800860a:	4a6b      	ldr	r2, [pc, #428]	@ (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800860c:	430b      	orrs	r3, r1
 800860e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008610:	e003      	b.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008612:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008616:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800861a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800861e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008622:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008626:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800862a:	2300      	movs	r3, #0
 800862c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008630:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008634:	460b      	mov	r3, r1
 8008636:	4313      	orrs	r3, r2
 8008638:	d053      	beq.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800863a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800863e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008640:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008644:	d033      	beq.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8008646:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800864a:	d82c      	bhi.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800864c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008650:	d02f      	beq.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8008652:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008656:	d826      	bhi.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008658:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800865c:	d02b      	beq.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800865e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008662:	d820      	bhi.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008664:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008668:	d012      	beq.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800866a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800866e:	d81a      	bhi.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008670:	2b00      	cmp	r3, #0
 8008672:	d022      	beq.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8008674:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008678:	d115      	bne.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800867a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800867e:	3308      	adds	r3, #8
 8008680:	2101      	movs	r1, #1
 8008682:	4618      	mov	r0, r3
 8008684:	f001 fa18 	bl	8009ab8 <RCCEx_PLL2_Config>
 8008688:	4603      	mov	r3, r0
 800868a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800868e:	e015      	b.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008690:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008694:	3328      	adds	r3, #40	@ 0x28
 8008696:	2101      	movs	r1, #1
 8008698:	4618      	mov	r0, r3
 800869a:	f001 fabf 	bl	8009c1c <RCCEx_PLL3_Config>
 800869e:	4603      	mov	r3, r0
 80086a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80086a4:	e00a      	b.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80086ac:	e006      	b.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80086ae:	bf00      	nop
 80086b0:	e004      	b.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80086b2:	bf00      	nop
 80086b4:	e002      	b.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80086b6:	bf00      	nop
 80086b8:	e000      	b.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80086ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d10a      	bne.n	80086da <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80086c4:	4b3c      	ldr	r3, [pc, #240]	@ (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80086c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086c8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80086cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80086d2:	4a39      	ldr	r2, [pc, #228]	@ (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80086d4:	430b      	orrs	r3, r1
 80086d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80086d8:	e003      	b.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80086de:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80086e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ea:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80086ee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80086f2:	2300      	movs	r3, #0
 80086f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80086f8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80086fc:	460b      	mov	r3, r1
 80086fe:	4313      	orrs	r3, r2
 8008700:	d060      	beq.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008702:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008706:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800870a:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800870e:	d039      	beq.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8008710:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8008714:	d832      	bhi.n	800877c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008716:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800871a:	d035      	beq.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800871c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008720:	d82c      	bhi.n	800877c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008722:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008726:	d031      	beq.n	800878c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8008728:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800872c:	d826      	bhi.n	800877c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800872e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008732:	d02d      	beq.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8008734:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008738:	d820      	bhi.n	800877c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800873a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800873e:	d012      	beq.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008740:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008744:	d81a      	bhi.n	800877c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008746:	2b00      	cmp	r3, #0
 8008748:	d024      	beq.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800874a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800874e:	d115      	bne.n	800877c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008750:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008754:	3308      	adds	r3, #8
 8008756:	2101      	movs	r1, #1
 8008758:	4618      	mov	r0, r3
 800875a:	f001 f9ad 	bl	8009ab8 <RCCEx_PLL2_Config>
 800875e:	4603      	mov	r3, r0
 8008760:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008764:	e017      	b.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008766:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800876a:	3328      	adds	r3, #40	@ 0x28
 800876c:	2101      	movs	r1, #1
 800876e:	4618      	mov	r0, r3
 8008770:	f001 fa54 	bl	8009c1c <RCCEx_PLL3_Config>
 8008774:	4603      	mov	r3, r0
 8008776:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800877a:	e00c      	b.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008782:	e008      	b.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008784:	bf00      	nop
 8008786:	e006      	b.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008788:	bf00      	nop
 800878a:	e004      	b.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800878c:	bf00      	nop
 800878e:	e002      	b.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008790:	bf00      	nop
 8008792:	e000      	b.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008794:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008796:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800879a:	2b00      	cmp	r3, #0
 800879c:	d10e      	bne.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800879e:	4b06      	ldr	r3, [pc, #24]	@ (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80087a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087a2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80087a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80087ae:	4a02      	ldr	r2, [pc, #8]	@ (80087b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80087b0:	430b      	orrs	r3, r1
 80087b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80087b4:	e006      	b.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80087b6:	bf00      	nop
 80087b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80087c0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80087c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087cc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80087d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80087d4:	2300      	movs	r3, #0
 80087d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80087da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80087de:	460b      	mov	r3, r1
 80087e0:	4313      	orrs	r3, r2
 80087e2:	d037      	beq.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80087e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80087ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087ee:	d00e      	beq.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80087f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087f4:	d816      	bhi.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d018      	beq.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80087fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80087fe:	d111      	bne.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008800:	4bc4      	ldr	r3, [pc, #784]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008804:	4ac3      	ldr	r2, [pc, #780]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008806:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800880a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800880c:	e00f      	b.n	800882e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800880e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008812:	3308      	adds	r3, #8
 8008814:	2101      	movs	r1, #1
 8008816:	4618      	mov	r0, r3
 8008818:	f001 f94e 	bl	8009ab8 <RCCEx_PLL2_Config>
 800881c:	4603      	mov	r3, r0
 800881e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008822:	e004      	b.n	800882e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008824:	2301      	movs	r3, #1
 8008826:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800882a:	e000      	b.n	800882e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800882c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800882e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008832:	2b00      	cmp	r3, #0
 8008834:	d10a      	bne.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008836:	4bb7      	ldr	r3, [pc, #732]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008838:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800883a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800883e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008842:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008844:	4ab3      	ldr	r2, [pc, #716]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008846:	430b      	orrs	r3, r1
 8008848:	6513      	str	r3, [r2, #80]	@ 0x50
 800884a:	e003      	b.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800884c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008850:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008854:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800885c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008860:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008864:	2300      	movs	r3, #0
 8008866:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800886a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800886e:	460b      	mov	r3, r1
 8008870:	4313      	orrs	r3, r2
 8008872:	d039      	beq.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008874:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008878:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800887a:	2b03      	cmp	r3, #3
 800887c:	d81c      	bhi.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800887e:	a201      	add	r2, pc, #4	@ (adr r2, 8008884 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8008880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008884:	080088c1 	.word	0x080088c1
 8008888:	08008895 	.word	0x08008895
 800888c:	080088a3 	.word	0x080088a3
 8008890:	080088c1 	.word	0x080088c1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008894:	4b9f      	ldr	r3, [pc, #636]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008898:	4a9e      	ldr	r2, [pc, #632]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800889a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800889e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80088a0:	e00f      	b.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80088a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088a6:	3308      	adds	r3, #8
 80088a8:	2102      	movs	r1, #2
 80088aa:	4618      	mov	r0, r3
 80088ac:	f001 f904 	bl	8009ab8 <RCCEx_PLL2_Config>
 80088b0:	4603      	mov	r3, r0
 80088b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80088b6:	e004      	b.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80088b8:	2301      	movs	r3, #1
 80088ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80088be:	e000      	b.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80088c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d10a      	bne.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80088ca:	4b92      	ldr	r3, [pc, #584]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80088cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088ce:	f023 0103 	bic.w	r1, r3, #3
 80088d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088d8:	4a8e      	ldr	r2, [pc, #568]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80088da:	430b      	orrs	r3, r1
 80088dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80088de:	e003      	b.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80088e4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80088e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80088f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80088f8:	2300      	movs	r3, #0
 80088fa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80088fe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008902:	460b      	mov	r3, r1
 8008904:	4313      	orrs	r3, r2
 8008906:	f000 8099 	beq.w	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800890a:	4b83      	ldr	r3, [pc, #524]	@ (8008b18 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a82      	ldr	r2, [pc, #520]	@ (8008b18 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008910:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008914:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008916:	f7fa fd63 	bl	80033e0 <HAL_GetTick>
 800891a:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800891e:	e00b      	b.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008920:	f7fa fd5e 	bl	80033e0 <HAL_GetTick>
 8008924:	4602      	mov	r2, r0
 8008926:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800892a:	1ad3      	subs	r3, r2, r3
 800892c:	2b64      	cmp	r3, #100	@ 0x64
 800892e:	d903      	bls.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8008930:	2303      	movs	r3, #3
 8008932:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008936:	e005      	b.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008938:	4b77      	ldr	r3, [pc, #476]	@ (8008b18 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008940:	2b00      	cmp	r3, #0
 8008942:	d0ed      	beq.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8008944:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008948:	2b00      	cmp	r3, #0
 800894a:	d173      	bne.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800894c:	4b71      	ldr	r3, [pc, #452]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800894e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008950:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008954:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008958:	4053      	eors	r3, r2
 800895a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800895e:	2b00      	cmp	r3, #0
 8008960:	d015      	beq.n	800898e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008962:	4b6c      	ldr	r3, [pc, #432]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008966:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800896a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800896e:	4b69      	ldr	r3, [pc, #420]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008972:	4a68      	ldr	r2, [pc, #416]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008974:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008978:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800897a:	4b66      	ldr	r3, [pc, #408]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800897c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800897e:	4a65      	ldr	r2, [pc, #404]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008980:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008984:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008986:	4a63      	ldr	r2, [pc, #396]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800898c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800898e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008992:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008996:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800899a:	d118      	bne.n	80089ce <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800899c:	f7fa fd20 	bl	80033e0 <HAL_GetTick>
 80089a0:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089a4:	e00d      	b.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089a6:	f7fa fd1b 	bl	80033e0 <HAL_GetTick>
 80089aa:	4602      	mov	r2, r0
 80089ac:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80089b0:	1ad2      	subs	r2, r2, r3
 80089b2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d903      	bls.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80089ba:	2303      	movs	r3, #3
 80089bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 80089c0:	e005      	b.n	80089ce <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089c2:	4b54      	ldr	r3, [pc, #336]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80089c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089c6:	f003 0302 	and.w	r3, r3, #2
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d0eb      	beq.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80089ce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d129      	bne.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80089d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80089de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80089e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80089e6:	d10e      	bne.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80089e8:	4b4a      	ldr	r3, [pc, #296]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80089ea:	691b      	ldr	r3, [r3, #16]
 80089ec:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80089f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80089f8:	091a      	lsrs	r2, r3, #4
 80089fa:	4b48      	ldr	r3, [pc, #288]	@ (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80089fc:	4013      	ands	r3, r2
 80089fe:	4a45      	ldr	r2, [pc, #276]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a00:	430b      	orrs	r3, r1
 8008a02:	6113      	str	r3, [r2, #16]
 8008a04:	e005      	b.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8008a06:	4b43      	ldr	r3, [pc, #268]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a08:	691b      	ldr	r3, [r3, #16]
 8008a0a:	4a42      	ldr	r2, [pc, #264]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a0c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008a10:	6113      	str	r3, [r2, #16]
 8008a12:	4b40      	ldr	r3, [pc, #256]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a14:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008a16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a1a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008a1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a22:	4a3c      	ldr	r2, [pc, #240]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a24:	430b      	orrs	r3, r1
 8008a26:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a28:	e008      	b.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008a2a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a2e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8008a32:	e003      	b.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a34:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a38:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008a3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a44:	f002 0301 	and.w	r3, r2, #1
 8008a48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008a52:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008a56:	460b      	mov	r3, r1
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	f000 8090 	beq.w	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008a5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a66:	2b28      	cmp	r3, #40	@ 0x28
 8008a68:	d870      	bhi.n	8008b4c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8008a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8008a70 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8008a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a70:	08008b55 	.word	0x08008b55
 8008a74:	08008b4d 	.word	0x08008b4d
 8008a78:	08008b4d 	.word	0x08008b4d
 8008a7c:	08008b4d 	.word	0x08008b4d
 8008a80:	08008b4d 	.word	0x08008b4d
 8008a84:	08008b4d 	.word	0x08008b4d
 8008a88:	08008b4d 	.word	0x08008b4d
 8008a8c:	08008b4d 	.word	0x08008b4d
 8008a90:	08008b21 	.word	0x08008b21
 8008a94:	08008b4d 	.word	0x08008b4d
 8008a98:	08008b4d 	.word	0x08008b4d
 8008a9c:	08008b4d 	.word	0x08008b4d
 8008aa0:	08008b4d 	.word	0x08008b4d
 8008aa4:	08008b4d 	.word	0x08008b4d
 8008aa8:	08008b4d 	.word	0x08008b4d
 8008aac:	08008b4d 	.word	0x08008b4d
 8008ab0:	08008b37 	.word	0x08008b37
 8008ab4:	08008b4d 	.word	0x08008b4d
 8008ab8:	08008b4d 	.word	0x08008b4d
 8008abc:	08008b4d 	.word	0x08008b4d
 8008ac0:	08008b4d 	.word	0x08008b4d
 8008ac4:	08008b4d 	.word	0x08008b4d
 8008ac8:	08008b4d 	.word	0x08008b4d
 8008acc:	08008b4d 	.word	0x08008b4d
 8008ad0:	08008b55 	.word	0x08008b55
 8008ad4:	08008b4d 	.word	0x08008b4d
 8008ad8:	08008b4d 	.word	0x08008b4d
 8008adc:	08008b4d 	.word	0x08008b4d
 8008ae0:	08008b4d 	.word	0x08008b4d
 8008ae4:	08008b4d 	.word	0x08008b4d
 8008ae8:	08008b4d 	.word	0x08008b4d
 8008aec:	08008b4d 	.word	0x08008b4d
 8008af0:	08008b55 	.word	0x08008b55
 8008af4:	08008b4d 	.word	0x08008b4d
 8008af8:	08008b4d 	.word	0x08008b4d
 8008afc:	08008b4d 	.word	0x08008b4d
 8008b00:	08008b4d 	.word	0x08008b4d
 8008b04:	08008b4d 	.word	0x08008b4d
 8008b08:	08008b4d 	.word	0x08008b4d
 8008b0c:	08008b4d 	.word	0x08008b4d
 8008b10:	08008b55 	.word	0x08008b55
 8008b14:	58024400 	.word	0x58024400
 8008b18:	58024800 	.word	0x58024800
 8008b1c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008b20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b24:	3308      	adds	r3, #8
 8008b26:	2101      	movs	r1, #1
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f000 ffc5 	bl	8009ab8 <RCCEx_PLL2_Config>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008b34:	e00f      	b.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008b36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b3a:	3328      	adds	r3, #40	@ 0x28
 8008b3c:	2101      	movs	r1, #1
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f001 f86c 	bl	8009c1c <RCCEx_PLL3_Config>
 8008b44:	4603      	mov	r3, r0
 8008b46:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008b4a:	e004      	b.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008b52:	e000      	b.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8008b54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b56:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d10b      	bne.n	8008b76 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008b5e:	4bc0      	ldr	r3, [pc, #768]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008b60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b62:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008b66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b6e:	4abc      	ldr	r2, [pc, #752]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008b70:	430b      	orrs	r3, r1
 8008b72:	6553      	str	r3, [r2, #84]	@ 0x54
 8008b74:	e003      	b.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b76:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b7a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008b7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b86:	f002 0302 	and.w	r3, r2, #2
 8008b8a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008b8e:	2300      	movs	r3, #0
 8008b90:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008b94:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008b98:	460b      	mov	r3, r1
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	d043      	beq.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008b9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ba6:	2b05      	cmp	r3, #5
 8008ba8:	d824      	bhi.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8008baa:	a201      	add	r2, pc, #4	@ (adr r2, 8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8008bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bb0:	08008bfd 	.word	0x08008bfd
 8008bb4:	08008bc9 	.word	0x08008bc9
 8008bb8:	08008bdf 	.word	0x08008bdf
 8008bbc:	08008bfd 	.word	0x08008bfd
 8008bc0:	08008bfd 	.word	0x08008bfd
 8008bc4:	08008bfd 	.word	0x08008bfd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008bc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bcc:	3308      	adds	r3, #8
 8008bce:	2101      	movs	r1, #1
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f000 ff71 	bl	8009ab8 <RCCEx_PLL2_Config>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008bdc:	e00f      	b.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008bde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008be2:	3328      	adds	r3, #40	@ 0x28
 8008be4:	2101      	movs	r1, #1
 8008be6:	4618      	mov	r0, r3
 8008be8:	f001 f818 	bl	8009c1c <RCCEx_PLL3_Config>
 8008bec:	4603      	mov	r3, r0
 8008bee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008bf2:	e004      	b.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008bfa:	e000      	b.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8008bfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bfe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d10b      	bne.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008c06:	4b96      	ldr	r3, [pc, #600]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c0a:	f023 0107 	bic.w	r1, r3, #7
 8008c0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c16:	4a92      	ldr	r2, [pc, #584]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008c18:	430b      	orrs	r3, r1
 8008c1a:	6553      	str	r3, [r2, #84]	@ 0x54
 8008c1c:	e003      	b.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c1e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c22:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008c26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c2e:	f002 0304 	and.w	r3, r2, #4
 8008c32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008c36:	2300      	movs	r3, #0
 8008c38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008c3c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008c40:	460b      	mov	r3, r1
 8008c42:	4313      	orrs	r3, r2
 8008c44:	d043      	beq.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008c46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008c4e:	2b05      	cmp	r3, #5
 8008c50:	d824      	bhi.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8008c52:	a201      	add	r2, pc, #4	@ (adr r2, 8008c58 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8008c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c58:	08008ca5 	.word	0x08008ca5
 8008c5c:	08008c71 	.word	0x08008c71
 8008c60:	08008c87 	.word	0x08008c87
 8008c64:	08008ca5 	.word	0x08008ca5
 8008c68:	08008ca5 	.word	0x08008ca5
 8008c6c:	08008ca5 	.word	0x08008ca5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008c70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c74:	3308      	adds	r3, #8
 8008c76:	2101      	movs	r1, #1
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f000 ff1d 	bl	8009ab8 <RCCEx_PLL2_Config>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008c84:	e00f      	b.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008c86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c8a:	3328      	adds	r3, #40	@ 0x28
 8008c8c:	2101      	movs	r1, #1
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f000 ffc4 	bl	8009c1c <RCCEx_PLL3_Config>
 8008c94:	4603      	mov	r3, r0
 8008c96:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008c9a:	e004      	b.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008ca2:	e000      	b.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8008ca4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ca6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d10b      	bne.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008cae:	4b6c      	ldr	r3, [pc, #432]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cb2:	f023 0107 	bic.w	r1, r3, #7
 8008cb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008cbe:	4a68      	ldr	r2, [pc, #416]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008cc0:	430b      	orrs	r3, r1
 8008cc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8008cc4:	e003      	b.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cc6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008cca:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008cce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd6:	f002 0320 	and.w	r3, r2, #32
 8008cda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008cde:	2300      	movs	r3, #0
 8008ce0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008ce4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008ce8:	460b      	mov	r3, r1
 8008cea:	4313      	orrs	r3, r2
 8008cec:	d055      	beq.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008cee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008cf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008cfa:	d033      	beq.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8008cfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008d00:	d82c      	bhi.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008d02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d06:	d02f      	beq.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8008d08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d0c:	d826      	bhi.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008d0e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008d12:	d02b      	beq.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8008d14:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008d18:	d820      	bhi.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008d1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d1e:	d012      	beq.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8008d20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d24:	d81a      	bhi.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d022      	beq.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8008d2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d2e:	d115      	bne.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d34:	3308      	adds	r3, #8
 8008d36:	2100      	movs	r1, #0
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f000 febd 	bl	8009ab8 <RCCEx_PLL2_Config>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008d44:	e015      	b.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008d46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d4a:	3328      	adds	r3, #40	@ 0x28
 8008d4c:	2102      	movs	r1, #2
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f000 ff64 	bl	8009c1c <RCCEx_PLL3_Config>
 8008d54:	4603      	mov	r3, r0
 8008d56:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008d5a:	e00a      	b.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008d62:	e006      	b.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008d64:	bf00      	nop
 8008d66:	e004      	b.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008d68:	bf00      	nop
 8008d6a:	e002      	b.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008d6c:	bf00      	nop
 8008d6e:	e000      	b.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008d70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d72:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d10b      	bne.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008d7a:	4b39      	ldr	r3, [pc, #228]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008d7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d7e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008d82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008d8a:	4a35      	ldr	r2, [pc, #212]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008d8c:	430b      	orrs	r3, r1
 8008d8e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008d90:	e003      	b.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d92:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d96:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008d9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008da6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008daa:	2300      	movs	r3, #0
 8008dac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008db0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008db4:	460b      	mov	r3, r1
 8008db6:	4313      	orrs	r3, r2
 8008db8:	d058      	beq.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008dba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dbe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008dc2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008dc6:	d033      	beq.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008dc8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008dcc:	d82c      	bhi.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008dce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008dd2:	d02f      	beq.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008dd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008dd8:	d826      	bhi.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008dda:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008dde:	d02b      	beq.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8008de0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008de4:	d820      	bhi.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008de6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008dea:	d012      	beq.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8008dec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008df0:	d81a      	bhi.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d022      	beq.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8008df6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008dfa:	d115      	bne.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008dfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e00:	3308      	adds	r3, #8
 8008e02:	2100      	movs	r1, #0
 8008e04:	4618      	mov	r0, r3
 8008e06:	f000 fe57 	bl	8009ab8 <RCCEx_PLL2_Config>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008e10:	e015      	b.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008e12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e16:	3328      	adds	r3, #40	@ 0x28
 8008e18:	2102      	movs	r1, #2
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f000 fefe 	bl	8009c1c <RCCEx_PLL3_Config>
 8008e20:	4603      	mov	r3, r0
 8008e22:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008e26:	e00a      	b.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008e2e:	e006      	b.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008e30:	bf00      	nop
 8008e32:	e004      	b.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008e34:	bf00      	nop
 8008e36:	e002      	b.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008e38:	bf00      	nop
 8008e3a:	e000      	b.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008e3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e3e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d10e      	bne.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008e46:	4b06      	ldr	r3, [pc, #24]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e4a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008e4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e52:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008e56:	4a02      	ldr	r2, [pc, #8]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008e58:	430b      	orrs	r3, r1
 8008e5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e5c:	e006      	b.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8008e5e:	bf00      	nop
 8008e60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e64:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e68:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008e6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e74:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008e78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008e82:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008e86:	460b      	mov	r3, r1
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	d055      	beq.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008e8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e90:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008e94:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008e98:	d033      	beq.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8008e9a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008e9e:	d82c      	bhi.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008ea0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ea4:	d02f      	beq.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8008ea6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008eaa:	d826      	bhi.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008eac:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008eb0:	d02b      	beq.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008eb2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008eb6:	d820      	bhi.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008eb8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008ebc:	d012      	beq.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8008ebe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008ec2:	d81a      	bhi.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d022      	beq.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8008ec8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ecc:	d115      	bne.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ece:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ed2:	3308      	adds	r3, #8
 8008ed4:	2100      	movs	r1, #0
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f000 fdee 	bl	8009ab8 <RCCEx_PLL2_Config>
 8008edc:	4603      	mov	r3, r0
 8008ede:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008ee2:	e015      	b.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008ee4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ee8:	3328      	adds	r3, #40	@ 0x28
 8008eea:	2102      	movs	r1, #2
 8008eec:	4618      	mov	r0, r3
 8008eee:	f000 fe95 	bl	8009c1c <RCCEx_PLL3_Config>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008ef8:	e00a      	b.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008efa:	2301      	movs	r3, #1
 8008efc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008f00:	e006      	b.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008f02:	bf00      	nop
 8008f04:	e004      	b.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008f06:	bf00      	nop
 8008f08:	e002      	b.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008f0a:	bf00      	nop
 8008f0c:	e000      	b.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008f0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f10:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d10b      	bne.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008f18:	4ba1      	ldr	r3, [pc, #644]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f1c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008f20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f24:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008f28:	4a9d      	ldr	r2, [pc, #628]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008f2a:	430b      	orrs	r3, r1
 8008f2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8008f2e:	e003      	b.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f30:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f34:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008f38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f40:	f002 0308 	and.w	r3, r2, #8
 8008f44:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008f48:	2300      	movs	r3, #0
 8008f4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008f4e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008f52:	460b      	mov	r3, r1
 8008f54:	4313      	orrs	r3, r2
 8008f56:	d01e      	beq.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008f58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f64:	d10c      	bne.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008f66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f6a:	3328      	adds	r3, #40	@ 0x28
 8008f6c:	2102      	movs	r1, #2
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f000 fe54 	bl	8009c1c <RCCEx_PLL3_Config>
 8008f74:	4603      	mov	r3, r0
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d002      	beq.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008f80:	4b87      	ldr	r3, [pc, #540]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008f82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f84:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008f88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f90:	4a83      	ldr	r2, [pc, #524]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008f92:	430b      	orrs	r3, r1
 8008f94:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008f96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f9e:	f002 0310 	and.w	r3, r2, #16
 8008fa2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008fac:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	d01e      	beq.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008fb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008fbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fc2:	d10c      	bne.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008fc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fc8:	3328      	adds	r3, #40	@ 0x28
 8008fca:	2102      	movs	r1, #2
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f000 fe25 	bl	8009c1c <RCCEx_PLL3_Config>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d002      	beq.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008fde:	4b70      	ldr	r3, [pc, #448]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fe2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008fe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008fee:	4a6c      	ldr	r2, [pc, #432]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008ff0:	430b      	orrs	r3, r1
 8008ff2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008ff4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ffc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009000:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009004:	2300      	movs	r3, #0
 8009006:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800900a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800900e:	460b      	mov	r3, r1
 8009010:	4313      	orrs	r3, r2
 8009012:	d03e      	beq.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009014:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009018:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800901c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009020:	d022      	beq.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8009022:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009026:	d81b      	bhi.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8009028:	2b00      	cmp	r3, #0
 800902a:	d003      	beq.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800902c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009030:	d00b      	beq.n	800904a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8009032:	e015      	b.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009034:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009038:	3308      	adds	r3, #8
 800903a:	2100      	movs	r1, #0
 800903c:	4618      	mov	r0, r3
 800903e:	f000 fd3b 	bl	8009ab8 <RCCEx_PLL2_Config>
 8009042:	4603      	mov	r3, r0
 8009044:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009048:	e00f      	b.n	800906a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800904a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800904e:	3328      	adds	r3, #40	@ 0x28
 8009050:	2102      	movs	r1, #2
 8009052:	4618      	mov	r0, r3
 8009054:	f000 fde2 	bl	8009c1c <RCCEx_PLL3_Config>
 8009058:	4603      	mov	r3, r0
 800905a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800905e:	e004      	b.n	800906a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009060:	2301      	movs	r3, #1
 8009062:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009066:	e000      	b.n	800906a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8009068:	bf00      	nop
    }

    if (ret == HAL_OK)
 800906a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800906e:	2b00      	cmp	r3, #0
 8009070:	d10b      	bne.n	800908a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009072:	4b4b      	ldr	r3, [pc, #300]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009076:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800907a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800907e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009082:	4a47      	ldr	r2, [pc, #284]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009084:	430b      	orrs	r3, r1
 8009086:	6593      	str	r3, [r2, #88]	@ 0x58
 8009088:	e003      	b.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800908a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800908e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009092:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800909a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800909e:	67bb      	str	r3, [r7, #120]	@ 0x78
 80090a0:	2300      	movs	r3, #0
 80090a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80090a4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80090a8:	460b      	mov	r3, r1
 80090aa:	4313      	orrs	r3, r2
 80090ac:	d03b      	beq.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80090ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80090ba:	d01f      	beq.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80090bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80090c0:	d818      	bhi.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80090c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80090c6:	d003      	beq.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80090c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80090cc:	d007      	beq.n	80090de <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80090ce:	e011      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090d0:	4b33      	ldr	r3, [pc, #204]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80090d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090d4:	4a32      	ldr	r2, [pc, #200]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80090d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80090da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80090dc:	e00f      	b.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80090de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090e2:	3328      	adds	r3, #40	@ 0x28
 80090e4:	2101      	movs	r1, #1
 80090e6:	4618      	mov	r0, r3
 80090e8:	f000 fd98 	bl	8009c1c <RCCEx_PLL3_Config>
 80090ec:	4603      	mov	r3, r0
 80090ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80090f2:	e004      	b.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090f4:	2301      	movs	r3, #1
 80090f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80090fa:	e000      	b.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80090fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009102:	2b00      	cmp	r3, #0
 8009104:	d10b      	bne.n	800911e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009106:	4b26      	ldr	r3, [pc, #152]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800910a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800910e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009116:	4a22      	ldr	r2, [pc, #136]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009118:	430b      	orrs	r3, r1
 800911a:	6553      	str	r3, [r2, #84]	@ 0x54
 800911c:	e003      	b.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800911e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009122:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009126:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800912a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009132:	673b      	str	r3, [r7, #112]	@ 0x70
 8009134:	2300      	movs	r3, #0
 8009136:	677b      	str	r3, [r7, #116]	@ 0x74
 8009138:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800913c:	460b      	mov	r3, r1
 800913e:	4313      	orrs	r3, r2
 8009140:	d034      	beq.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009142:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009146:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009148:	2b00      	cmp	r3, #0
 800914a:	d003      	beq.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800914c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009150:	d007      	beq.n	8009162 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8009152:	e011      	b.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009154:	4b12      	ldr	r3, [pc, #72]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009158:	4a11      	ldr	r2, [pc, #68]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800915a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800915e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009160:	e00e      	b.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009162:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009166:	3308      	adds	r3, #8
 8009168:	2102      	movs	r1, #2
 800916a:	4618      	mov	r0, r3
 800916c:	f000 fca4 	bl	8009ab8 <RCCEx_PLL2_Config>
 8009170:	4603      	mov	r3, r0
 8009172:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009176:	e003      	b.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8009178:	2301      	movs	r3, #1
 800917a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800917e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009180:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009184:	2b00      	cmp	r3, #0
 8009186:	d10d      	bne.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009188:	4b05      	ldr	r3, [pc, #20]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800918a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800918c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009190:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009194:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009196:	4a02      	ldr	r2, [pc, #8]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009198:	430b      	orrs	r3, r1
 800919a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800919c:	e006      	b.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800919e:	bf00      	nop
 80091a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80091a8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80091ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80091b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80091ba:	2300      	movs	r3, #0
 80091bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80091be:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80091c2:	460b      	mov	r3, r1
 80091c4:	4313      	orrs	r3, r2
 80091c6:	d00c      	beq.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80091c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091cc:	3328      	adds	r3, #40	@ 0x28
 80091ce:	2102      	movs	r1, #2
 80091d0:	4618      	mov	r0, r3
 80091d2:	f000 fd23 	bl	8009c1c <RCCEx_PLL3_Config>
 80091d6:	4603      	mov	r3, r0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d002      	beq.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80091dc:	2301      	movs	r3, #1
 80091de:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80091e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ea:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80091ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80091f0:	2300      	movs	r3, #0
 80091f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80091f4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80091f8:	460b      	mov	r3, r1
 80091fa:	4313      	orrs	r3, r2
 80091fc:	d038      	beq.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80091fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009206:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800920a:	d018      	beq.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800920c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009210:	d811      	bhi.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8009212:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009216:	d014      	beq.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8009218:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800921c:	d80b      	bhi.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800921e:	2b00      	cmp	r3, #0
 8009220:	d011      	beq.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8009222:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009226:	d106      	bne.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009228:	4bc3      	ldr	r3, [pc, #780]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800922a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800922c:	4ac2      	ldr	r2, [pc, #776]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800922e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009232:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009234:	e008      	b.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009236:	2301      	movs	r3, #1
 8009238:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800923c:	e004      	b.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800923e:	bf00      	nop
 8009240:	e002      	b.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8009242:	bf00      	nop
 8009244:	e000      	b.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8009246:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009248:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800924c:	2b00      	cmp	r3, #0
 800924e:	d10b      	bne.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009250:	4bb9      	ldr	r3, [pc, #740]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009254:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009258:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800925c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009260:	4ab5      	ldr	r2, [pc, #724]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009262:	430b      	orrs	r3, r1
 8009264:	6553      	str	r3, [r2, #84]	@ 0x54
 8009266:	e003      	b.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009268:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800926c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009270:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009278:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800927c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800927e:	2300      	movs	r3, #0
 8009280:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009282:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009286:	460b      	mov	r3, r1
 8009288:	4313      	orrs	r3, r2
 800928a:	d009      	beq.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800928c:	4baa      	ldr	r3, [pc, #680]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800928e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009290:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009294:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009298:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800929a:	4aa7      	ldr	r2, [pc, #668]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800929c:	430b      	orrs	r3, r1
 800929e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80092a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80092ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80092ae:	2300      	movs	r3, #0
 80092b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80092b2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80092b6:	460b      	mov	r3, r1
 80092b8:	4313      	orrs	r3, r2
 80092ba:	d009      	beq.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80092bc:	4b9e      	ldr	r3, [pc, #632]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80092be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092c0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80092c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092ca:	4a9b      	ldr	r2, [pc, #620]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80092cc:	430b      	orrs	r3, r1
 80092ce:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80092d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80092dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80092de:	2300      	movs	r3, #0
 80092e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80092e2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80092e6:	460b      	mov	r3, r1
 80092e8:	4313      	orrs	r3, r2
 80092ea:	d009      	beq.n	8009300 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80092ec:	4b92      	ldr	r3, [pc, #584]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80092ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092f0:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 80092f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092fa:	4a8f      	ldr	r2, [pc, #572]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80092fc:	430b      	orrs	r3, r1
 80092fe:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009300:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009308:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800930c:	643b      	str	r3, [r7, #64]	@ 0x40
 800930e:	2300      	movs	r3, #0
 8009310:	647b      	str	r3, [r7, #68]	@ 0x44
 8009312:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009316:	460b      	mov	r3, r1
 8009318:	4313      	orrs	r3, r2
 800931a:	d00e      	beq.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800931c:	4b86      	ldr	r3, [pc, #536]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800931e:	691b      	ldr	r3, [r3, #16]
 8009320:	4a85      	ldr	r2, [pc, #532]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009322:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009326:	6113      	str	r3, [r2, #16]
 8009328:	4b83      	ldr	r3, [pc, #524]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800932a:	6919      	ldr	r1, [r3, #16]
 800932c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009330:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009334:	4a80      	ldr	r2, [pc, #512]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009336:	430b      	orrs	r3, r1
 8009338:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800933a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800933e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009342:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009346:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009348:	2300      	movs	r3, #0
 800934a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800934c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009350:	460b      	mov	r3, r1
 8009352:	4313      	orrs	r3, r2
 8009354:	d009      	beq.n	800936a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009356:	4b78      	ldr	r3, [pc, #480]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800935a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800935e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009364:	4a74      	ldr	r2, [pc, #464]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009366:	430b      	orrs	r3, r1
 8009368:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800936a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800936e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009372:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009376:	633b      	str	r3, [r7, #48]	@ 0x30
 8009378:	2300      	movs	r3, #0
 800937a:	637b      	str	r3, [r7, #52]	@ 0x34
 800937c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009380:	460b      	mov	r3, r1
 8009382:	4313      	orrs	r3, r2
 8009384:	d00a      	beq.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009386:	4b6c      	ldr	r3, [pc, #432]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800938a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800938e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009392:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009396:	4a68      	ldr	r2, [pc, #416]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009398:	430b      	orrs	r3, r1
 800939a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800939c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a4:	2100      	movs	r1, #0
 80093a6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80093a8:	f003 0301 	and.w	r3, r3, #1
 80093ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80093ae:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80093b2:	460b      	mov	r3, r1
 80093b4:	4313      	orrs	r3, r2
 80093b6:	d011      	beq.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80093b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093bc:	3308      	adds	r3, #8
 80093be:	2100      	movs	r1, #0
 80093c0:	4618      	mov	r0, r3
 80093c2:	f000 fb79 	bl	8009ab8 <RCCEx_PLL2_Config>
 80093c6:	4603      	mov	r3, r0
 80093c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80093cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d003      	beq.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80093d8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80093dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e4:	2100      	movs	r1, #0
 80093e6:	6239      	str	r1, [r7, #32]
 80093e8:	f003 0302 	and.w	r3, r3, #2
 80093ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80093ee:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80093f2:	460b      	mov	r3, r1
 80093f4:	4313      	orrs	r3, r2
 80093f6:	d011      	beq.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80093f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093fc:	3308      	adds	r3, #8
 80093fe:	2101      	movs	r1, #1
 8009400:	4618      	mov	r0, r3
 8009402:	f000 fb59 	bl	8009ab8 <RCCEx_PLL2_Config>
 8009406:	4603      	mov	r3, r0
 8009408:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800940c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009410:	2b00      	cmp	r3, #0
 8009412:	d003      	beq.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009414:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009418:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800941c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009424:	2100      	movs	r1, #0
 8009426:	61b9      	str	r1, [r7, #24]
 8009428:	f003 0304 	and.w	r3, r3, #4
 800942c:	61fb      	str	r3, [r7, #28]
 800942e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009432:	460b      	mov	r3, r1
 8009434:	4313      	orrs	r3, r2
 8009436:	d011      	beq.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009438:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800943c:	3308      	adds	r3, #8
 800943e:	2102      	movs	r1, #2
 8009440:	4618      	mov	r0, r3
 8009442:	f000 fb39 	bl	8009ab8 <RCCEx_PLL2_Config>
 8009446:	4603      	mov	r3, r0
 8009448:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800944c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009450:	2b00      	cmp	r3, #0
 8009452:	d003      	beq.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009454:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009458:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800945c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009464:	2100      	movs	r1, #0
 8009466:	6139      	str	r1, [r7, #16]
 8009468:	f003 0308 	and.w	r3, r3, #8
 800946c:	617b      	str	r3, [r7, #20]
 800946e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009472:	460b      	mov	r3, r1
 8009474:	4313      	orrs	r3, r2
 8009476:	d011      	beq.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009478:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800947c:	3328      	adds	r3, #40	@ 0x28
 800947e:	2100      	movs	r1, #0
 8009480:	4618      	mov	r0, r3
 8009482:	f000 fbcb 	bl	8009c1c <RCCEx_PLL3_Config>
 8009486:	4603      	mov	r3, r0
 8009488:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800948c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009490:	2b00      	cmp	r3, #0
 8009492:	d003      	beq.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009494:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009498:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800949c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a4:	2100      	movs	r1, #0
 80094a6:	60b9      	str	r1, [r7, #8]
 80094a8:	f003 0310 	and.w	r3, r3, #16
 80094ac:	60fb      	str	r3, [r7, #12]
 80094ae:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80094b2:	460b      	mov	r3, r1
 80094b4:	4313      	orrs	r3, r2
 80094b6:	d011      	beq.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80094b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094bc:	3328      	adds	r3, #40	@ 0x28
 80094be:	2101      	movs	r1, #1
 80094c0:	4618      	mov	r0, r3
 80094c2:	f000 fbab 	bl	8009c1c <RCCEx_PLL3_Config>
 80094c6:	4603      	mov	r3, r0
 80094c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80094cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d003      	beq.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80094d8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80094dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e4:	2100      	movs	r1, #0
 80094e6:	6039      	str	r1, [r7, #0]
 80094e8:	f003 0320 	and.w	r3, r3, #32
 80094ec:	607b      	str	r3, [r7, #4]
 80094ee:	e9d7 1200 	ldrd	r1, r2, [r7]
 80094f2:	460b      	mov	r3, r1
 80094f4:	4313      	orrs	r3, r2
 80094f6:	d011      	beq.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80094f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094fc:	3328      	adds	r3, #40	@ 0x28
 80094fe:	2102      	movs	r1, #2
 8009500:	4618      	mov	r0, r3
 8009502:	f000 fb8b 	bl	8009c1c <RCCEx_PLL3_Config>
 8009506:	4603      	mov	r3, r0
 8009508:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800950c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009510:	2b00      	cmp	r3, #0
 8009512:	d003      	beq.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009514:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009518:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800951c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8009520:	2b00      	cmp	r3, #0
 8009522:	d101      	bne.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8009524:	2300      	movs	r3, #0
 8009526:	e000      	b.n	800952a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8009528:	2301      	movs	r3, #1
}
 800952a:	4618      	mov	r0, r3
 800952c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8009530:	46bd      	mov	sp, r7
 8009532:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009536:	bf00      	nop
 8009538:	58024400 	.word	0x58024400

0800953c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8009540:	f7fe fde2 	bl	8008108 <HAL_RCC_GetHCLKFreq>
 8009544:	4602      	mov	r2, r0
 8009546:	4b06      	ldr	r3, [pc, #24]	@ (8009560 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009548:	6a1b      	ldr	r3, [r3, #32]
 800954a:	091b      	lsrs	r3, r3, #4
 800954c:	f003 0307 	and.w	r3, r3, #7
 8009550:	4904      	ldr	r1, [pc, #16]	@ (8009564 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009552:	5ccb      	ldrb	r3, [r1, r3]
 8009554:	f003 031f 	and.w	r3, r3, #31
 8009558:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800955c:	4618      	mov	r0, r3
 800955e:	bd80      	pop	{r7, pc}
 8009560:	58024400 	.word	0x58024400
 8009564:	08012a08 	.word	0x08012a08

08009568 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009568:	b480      	push	{r7}
 800956a:	b089      	sub	sp, #36	@ 0x24
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009570:	4ba1      	ldr	r3, [pc, #644]	@ (80097f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009574:	f003 0303 	and.w	r3, r3, #3
 8009578:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800957a:	4b9f      	ldr	r3, [pc, #636]	@ (80097f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800957c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800957e:	0b1b      	lsrs	r3, r3, #12
 8009580:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009584:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009586:	4b9c      	ldr	r3, [pc, #624]	@ (80097f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800958a:	091b      	lsrs	r3, r3, #4
 800958c:	f003 0301 	and.w	r3, r3, #1
 8009590:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009592:	4b99      	ldr	r3, [pc, #612]	@ (80097f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009596:	08db      	lsrs	r3, r3, #3
 8009598:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800959c:	693a      	ldr	r2, [r7, #16]
 800959e:	fb02 f303 	mul.w	r3, r2, r3
 80095a2:	ee07 3a90 	vmov	s15, r3
 80095a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	f000 8111 	beq.w	80097d8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80095b6:	69bb      	ldr	r3, [r7, #24]
 80095b8:	2b02      	cmp	r3, #2
 80095ba:	f000 8083 	beq.w	80096c4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80095be:	69bb      	ldr	r3, [r7, #24]
 80095c0:	2b02      	cmp	r3, #2
 80095c2:	f200 80a1 	bhi.w	8009708 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80095c6:	69bb      	ldr	r3, [r7, #24]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d003      	beq.n	80095d4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80095cc:	69bb      	ldr	r3, [r7, #24]
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d056      	beq.n	8009680 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80095d2:	e099      	b.n	8009708 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095d4:	4b88      	ldr	r3, [pc, #544]	@ (80097f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f003 0320 	and.w	r3, r3, #32
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d02d      	beq.n	800963c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80095e0:	4b85      	ldr	r3, [pc, #532]	@ (80097f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	08db      	lsrs	r3, r3, #3
 80095e6:	f003 0303 	and.w	r3, r3, #3
 80095ea:	4a84      	ldr	r2, [pc, #528]	@ (80097fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80095ec:	fa22 f303 	lsr.w	r3, r2, r3
 80095f0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	ee07 3a90 	vmov	s15, r3
 80095f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	ee07 3a90 	vmov	s15, r3
 8009602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800960a:	4b7b      	ldr	r3, [pc, #492]	@ (80097f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800960c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800960e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009612:	ee07 3a90 	vmov	s15, r3
 8009616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800961a:	ed97 6a03 	vldr	s12, [r7, #12]
 800961e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009800 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800962a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800962e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009636:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800963a:	e087      	b.n	800974c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	ee07 3a90 	vmov	s15, r3
 8009642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009646:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009804 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800964a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800964e:	4b6a      	ldr	r3, [pc, #424]	@ (80097f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009656:	ee07 3a90 	vmov	s15, r3
 800965a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800965e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009662:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009800 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800966a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800966e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800967a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800967e:	e065      	b.n	800974c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	ee07 3a90 	vmov	s15, r3
 8009686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800968a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009808 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800968e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009692:	4b59      	ldr	r3, [pc, #356]	@ (80097f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800969a:	ee07 3a90 	vmov	s15, r3
 800969e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80096a6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009800 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80096aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096c2:	e043      	b.n	800974c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	ee07 3a90 	vmov	s15, r3
 80096ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800980c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80096d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096d6:	4b48      	ldr	r3, [pc, #288]	@ (80097f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096de:	ee07 3a90 	vmov	s15, r3
 80096e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80096ea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009800 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80096ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009702:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009706:	e021      	b.n	800974c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	ee07 3a90 	vmov	s15, r3
 800970e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009712:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009808 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800971a:	4b37      	ldr	r3, [pc, #220]	@ (80097f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800971c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800971e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009722:	ee07 3a90 	vmov	s15, r3
 8009726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800972a:	ed97 6a03 	vldr	s12, [r7, #12]
 800972e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009800 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800973a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800973e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009746:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800974a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800974c:	4b2a      	ldr	r3, [pc, #168]	@ (80097f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800974e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009750:	0a5b      	lsrs	r3, r3, #9
 8009752:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009756:	ee07 3a90 	vmov	s15, r3
 800975a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800975e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009762:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009766:	edd7 6a07 	vldr	s13, [r7, #28]
 800976a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800976e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009772:	ee17 2a90 	vmov	r2, s15
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800977a:	4b1f      	ldr	r3, [pc, #124]	@ (80097f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800977c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800977e:	0c1b      	lsrs	r3, r3, #16
 8009780:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009784:	ee07 3a90 	vmov	s15, r3
 8009788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800978c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009790:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009794:	edd7 6a07 	vldr	s13, [r7, #28]
 8009798:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800979c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097a0:	ee17 2a90 	vmov	r2, s15
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80097a8:	4b13      	ldr	r3, [pc, #76]	@ (80097f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097ac:	0e1b      	lsrs	r3, r3, #24
 80097ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097b2:	ee07 3a90 	vmov	s15, r3
 80097b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80097be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80097c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097ce:	ee17 2a90 	vmov	r2, s15
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80097d6:	e008      	b.n	80097ea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2200      	movs	r2, #0
 80097dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2200      	movs	r2, #0
 80097e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2200      	movs	r2, #0
 80097e8:	609a      	str	r2, [r3, #8]
}
 80097ea:	bf00      	nop
 80097ec:	3724      	adds	r7, #36	@ 0x24
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr
 80097f6:	bf00      	nop
 80097f8:	58024400 	.word	0x58024400
 80097fc:	03d09000 	.word	0x03d09000
 8009800:	46000000 	.word	0x46000000
 8009804:	4c742400 	.word	0x4c742400
 8009808:	4a742400 	.word	0x4a742400
 800980c:	4bb71b00 	.word	0x4bb71b00

08009810 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009810:	b480      	push	{r7}
 8009812:	b089      	sub	sp, #36	@ 0x24
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009818:	4ba1      	ldr	r3, [pc, #644]	@ (8009aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800981a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800981c:	f003 0303 	and.w	r3, r3, #3
 8009820:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009822:	4b9f      	ldr	r3, [pc, #636]	@ (8009aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009826:	0d1b      	lsrs	r3, r3, #20
 8009828:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800982c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800982e:	4b9c      	ldr	r3, [pc, #624]	@ (8009aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009832:	0a1b      	lsrs	r3, r3, #8
 8009834:	f003 0301 	and.w	r3, r3, #1
 8009838:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800983a:	4b99      	ldr	r3, [pc, #612]	@ (8009aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800983c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800983e:	08db      	lsrs	r3, r3, #3
 8009840:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009844:	693a      	ldr	r2, [r7, #16]
 8009846:	fb02 f303 	mul.w	r3, r2, r3
 800984a:	ee07 3a90 	vmov	s15, r3
 800984e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009852:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	2b00      	cmp	r3, #0
 800985a:	f000 8111 	beq.w	8009a80 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800985e:	69bb      	ldr	r3, [r7, #24]
 8009860:	2b02      	cmp	r3, #2
 8009862:	f000 8083 	beq.w	800996c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009866:	69bb      	ldr	r3, [r7, #24]
 8009868:	2b02      	cmp	r3, #2
 800986a:	f200 80a1 	bhi.w	80099b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800986e:	69bb      	ldr	r3, [r7, #24]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d003      	beq.n	800987c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009874:	69bb      	ldr	r3, [r7, #24]
 8009876:	2b01      	cmp	r3, #1
 8009878:	d056      	beq.n	8009928 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800987a:	e099      	b.n	80099b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800987c:	4b88      	ldr	r3, [pc, #544]	@ (8009aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f003 0320 	and.w	r3, r3, #32
 8009884:	2b00      	cmp	r3, #0
 8009886:	d02d      	beq.n	80098e4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009888:	4b85      	ldr	r3, [pc, #532]	@ (8009aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	08db      	lsrs	r3, r3, #3
 800988e:	f003 0303 	and.w	r3, r3, #3
 8009892:	4a84      	ldr	r2, [pc, #528]	@ (8009aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009894:	fa22 f303 	lsr.w	r3, r2, r3
 8009898:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	ee07 3a90 	vmov	s15, r3
 80098a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	ee07 3a90 	vmov	s15, r3
 80098aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098b2:	4b7b      	ldr	r3, [pc, #492]	@ (8009aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098ba:	ee07 3a90 	vmov	s15, r3
 80098be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80098c6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80098ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80098d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80098e2:	e087      	b.n	80099f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	ee07 3a90 	vmov	s15, r3
 80098ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098ee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009aac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80098f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098f6:	4b6a      	ldr	r3, [pc, #424]	@ (8009aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098fe:	ee07 3a90 	vmov	s15, r3
 8009902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009906:	ed97 6a03 	vldr	s12, [r7, #12]
 800990a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800990e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009916:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800991a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800991e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009922:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009926:	e065      	b.n	80099f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	ee07 3a90 	vmov	s15, r3
 800992e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009932:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800993a:	4b59      	ldr	r3, [pc, #356]	@ (8009aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800993c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800993e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009942:	ee07 3a90 	vmov	s15, r3
 8009946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800994a:	ed97 6a03 	vldr	s12, [r7, #12]
 800994e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800995a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800995e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009966:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800996a:	e043      	b.n	80099f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	ee07 3a90 	vmov	s15, r3
 8009972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009976:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800997a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800997e:	4b48      	ldr	r3, [pc, #288]	@ (8009aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009986:	ee07 3a90 	vmov	s15, r3
 800998a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800998e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009992:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800999a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800999e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80099a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099ae:	e021      	b.n	80099f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	ee07 3a90 	vmov	s15, r3
 80099b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80099be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099c2:	4b37      	ldr	r3, [pc, #220]	@ (8009aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099ca:	ee07 3a90 	vmov	s15, r3
 80099ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80099d6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80099da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80099e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099f2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80099f4:	4b2a      	ldr	r3, [pc, #168]	@ (8009aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099f8:	0a5b      	lsrs	r3, r3, #9
 80099fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099fe:	ee07 3a90 	vmov	s15, r3
 8009a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a1a:	ee17 2a90 	vmov	r2, s15
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009a22:	4b1f      	ldr	r3, [pc, #124]	@ (8009aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a26:	0c1b      	lsrs	r3, r3, #16
 8009a28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a2c:	ee07 3a90 	vmov	s15, r3
 8009a30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a48:	ee17 2a90 	vmov	r2, s15
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009a50:	4b13      	ldr	r3, [pc, #76]	@ (8009aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a54:	0e1b      	lsrs	r3, r3, #24
 8009a56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a5a:	ee07 3a90 	vmov	s15, r3
 8009a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a76:	ee17 2a90 	vmov	r2, s15
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009a7e:	e008      	b.n	8009a92 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2200      	movs	r2, #0
 8009a84:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	609a      	str	r2, [r3, #8]
}
 8009a92:	bf00      	nop
 8009a94:	3724      	adds	r7, #36	@ 0x24
 8009a96:	46bd      	mov	sp, r7
 8009a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9c:	4770      	bx	lr
 8009a9e:	bf00      	nop
 8009aa0:	58024400 	.word	0x58024400
 8009aa4:	03d09000 	.word	0x03d09000
 8009aa8:	46000000 	.word	0x46000000
 8009aac:	4c742400 	.word	0x4c742400
 8009ab0:	4a742400 	.word	0x4a742400
 8009ab4:	4bb71b00 	.word	0x4bb71b00

08009ab8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b084      	sub	sp, #16
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009ac6:	4b53      	ldr	r3, [pc, #332]	@ (8009c14 <RCCEx_PLL2_Config+0x15c>)
 8009ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aca:	f003 0303 	and.w	r3, r3, #3
 8009ace:	2b03      	cmp	r3, #3
 8009ad0:	d101      	bne.n	8009ad6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	e099      	b.n	8009c0a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009ad6:	4b4f      	ldr	r3, [pc, #316]	@ (8009c14 <RCCEx_PLL2_Config+0x15c>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4a4e      	ldr	r2, [pc, #312]	@ (8009c14 <RCCEx_PLL2_Config+0x15c>)
 8009adc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009ae0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ae2:	f7f9 fc7d 	bl	80033e0 <HAL_GetTick>
 8009ae6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009ae8:	e008      	b.n	8009afc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009aea:	f7f9 fc79 	bl	80033e0 <HAL_GetTick>
 8009aee:	4602      	mov	r2, r0
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	1ad3      	subs	r3, r2, r3
 8009af4:	2b02      	cmp	r3, #2
 8009af6:	d901      	bls.n	8009afc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009af8:	2303      	movs	r3, #3
 8009afa:	e086      	b.n	8009c0a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009afc:	4b45      	ldr	r3, [pc, #276]	@ (8009c14 <RCCEx_PLL2_Config+0x15c>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d1f0      	bne.n	8009aea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009b08:	4b42      	ldr	r3, [pc, #264]	@ (8009c14 <RCCEx_PLL2_Config+0x15c>)
 8009b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b0c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	031b      	lsls	r3, r3, #12
 8009b16:	493f      	ldr	r1, [pc, #252]	@ (8009c14 <RCCEx_PLL2_Config+0x15c>)
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	628b      	str	r3, [r1, #40]	@ 0x28
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	3b01      	subs	r3, #1
 8009b22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	689b      	ldr	r3, [r3, #8]
 8009b2a:	3b01      	subs	r3, #1
 8009b2c:	025b      	lsls	r3, r3, #9
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	431a      	orrs	r2, r3
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	68db      	ldr	r3, [r3, #12]
 8009b36:	3b01      	subs	r3, #1
 8009b38:	041b      	lsls	r3, r3, #16
 8009b3a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009b3e:	431a      	orrs	r2, r3
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	691b      	ldr	r3, [r3, #16]
 8009b44:	3b01      	subs	r3, #1
 8009b46:	061b      	lsls	r3, r3, #24
 8009b48:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009b4c:	4931      	ldr	r1, [pc, #196]	@ (8009c14 <RCCEx_PLL2_Config+0x15c>)
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009b52:	4b30      	ldr	r3, [pc, #192]	@ (8009c14 <RCCEx_PLL2_Config+0x15c>)
 8009b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b56:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	695b      	ldr	r3, [r3, #20]
 8009b5e:	492d      	ldr	r1, [pc, #180]	@ (8009c14 <RCCEx_PLL2_Config+0x15c>)
 8009b60:	4313      	orrs	r3, r2
 8009b62:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009b64:	4b2b      	ldr	r3, [pc, #172]	@ (8009c14 <RCCEx_PLL2_Config+0x15c>)
 8009b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b68:	f023 0220 	bic.w	r2, r3, #32
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	699b      	ldr	r3, [r3, #24]
 8009b70:	4928      	ldr	r1, [pc, #160]	@ (8009c14 <RCCEx_PLL2_Config+0x15c>)
 8009b72:	4313      	orrs	r3, r2
 8009b74:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009b76:	4b27      	ldr	r3, [pc, #156]	@ (8009c14 <RCCEx_PLL2_Config+0x15c>)
 8009b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b7a:	4a26      	ldr	r2, [pc, #152]	@ (8009c14 <RCCEx_PLL2_Config+0x15c>)
 8009b7c:	f023 0310 	bic.w	r3, r3, #16
 8009b80:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009b82:	4b24      	ldr	r3, [pc, #144]	@ (8009c14 <RCCEx_PLL2_Config+0x15c>)
 8009b84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009b86:	4b24      	ldr	r3, [pc, #144]	@ (8009c18 <RCCEx_PLL2_Config+0x160>)
 8009b88:	4013      	ands	r3, r2
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	69d2      	ldr	r2, [r2, #28]
 8009b8e:	00d2      	lsls	r2, r2, #3
 8009b90:	4920      	ldr	r1, [pc, #128]	@ (8009c14 <RCCEx_PLL2_Config+0x15c>)
 8009b92:	4313      	orrs	r3, r2
 8009b94:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009b96:	4b1f      	ldr	r3, [pc, #124]	@ (8009c14 <RCCEx_PLL2_Config+0x15c>)
 8009b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b9a:	4a1e      	ldr	r2, [pc, #120]	@ (8009c14 <RCCEx_PLL2_Config+0x15c>)
 8009b9c:	f043 0310 	orr.w	r3, r3, #16
 8009ba0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d106      	bne.n	8009bb6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8009c14 <RCCEx_PLL2_Config+0x15c>)
 8009baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bac:	4a19      	ldr	r2, [pc, #100]	@ (8009c14 <RCCEx_PLL2_Config+0x15c>)
 8009bae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009bb2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009bb4:	e00f      	b.n	8009bd6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d106      	bne.n	8009bca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009bbc:	4b15      	ldr	r3, [pc, #84]	@ (8009c14 <RCCEx_PLL2_Config+0x15c>)
 8009bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bc0:	4a14      	ldr	r2, [pc, #80]	@ (8009c14 <RCCEx_PLL2_Config+0x15c>)
 8009bc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009bc6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009bc8:	e005      	b.n	8009bd6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009bca:	4b12      	ldr	r3, [pc, #72]	@ (8009c14 <RCCEx_PLL2_Config+0x15c>)
 8009bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bce:	4a11      	ldr	r2, [pc, #68]	@ (8009c14 <RCCEx_PLL2_Config+0x15c>)
 8009bd0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009bd4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8009c14 <RCCEx_PLL2_Config+0x15c>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a0e      	ldr	r2, [pc, #56]	@ (8009c14 <RCCEx_PLL2_Config+0x15c>)
 8009bdc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009be0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009be2:	f7f9 fbfd 	bl	80033e0 <HAL_GetTick>
 8009be6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009be8:	e008      	b.n	8009bfc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009bea:	f7f9 fbf9 	bl	80033e0 <HAL_GetTick>
 8009bee:	4602      	mov	r2, r0
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	1ad3      	subs	r3, r2, r3
 8009bf4:	2b02      	cmp	r3, #2
 8009bf6:	d901      	bls.n	8009bfc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009bf8:	2303      	movs	r3, #3
 8009bfa:	e006      	b.n	8009c0a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009bfc:	4b05      	ldr	r3, [pc, #20]	@ (8009c14 <RCCEx_PLL2_Config+0x15c>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d0f0      	beq.n	8009bea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3710      	adds	r7, #16
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
 8009c12:	bf00      	nop
 8009c14:	58024400 	.word	0x58024400
 8009c18:	ffff0007 	.word	0xffff0007

08009c1c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b084      	sub	sp, #16
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009c26:	2300      	movs	r3, #0
 8009c28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009c2a:	4b53      	ldr	r3, [pc, #332]	@ (8009d78 <RCCEx_PLL3_Config+0x15c>)
 8009c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c2e:	f003 0303 	and.w	r3, r3, #3
 8009c32:	2b03      	cmp	r3, #3
 8009c34:	d101      	bne.n	8009c3a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009c36:	2301      	movs	r3, #1
 8009c38:	e099      	b.n	8009d6e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009c3a:	4b4f      	ldr	r3, [pc, #316]	@ (8009d78 <RCCEx_PLL3_Config+0x15c>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	4a4e      	ldr	r2, [pc, #312]	@ (8009d78 <RCCEx_PLL3_Config+0x15c>)
 8009c40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009c44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c46:	f7f9 fbcb 	bl	80033e0 <HAL_GetTick>
 8009c4a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009c4c:	e008      	b.n	8009c60 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009c4e:	f7f9 fbc7 	bl	80033e0 <HAL_GetTick>
 8009c52:	4602      	mov	r2, r0
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	1ad3      	subs	r3, r2, r3
 8009c58:	2b02      	cmp	r3, #2
 8009c5a:	d901      	bls.n	8009c60 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009c5c:	2303      	movs	r3, #3
 8009c5e:	e086      	b.n	8009d6e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009c60:	4b45      	ldr	r3, [pc, #276]	@ (8009d78 <RCCEx_PLL3_Config+0x15c>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d1f0      	bne.n	8009c4e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009c6c:	4b42      	ldr	r3, [pc, #264]	@ (8009d78 <RCCEx_PLL3_Config+0x15c>)
 8009c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c70:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	051b      	lsls	r3, r3, #20
 8009c7a:	493f      	ldr	r1, [pc, #252]	@ (8009d78 <RCCEx_PLL3_Config+0x15c>)
 8009c7c:	4313      	orrs	r3, r2
 8009c7e:	628b      	str	r3, [r1, #40]	@ 0x28
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	3b01      	subs	r3, #1
 8009c86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	689b      	ldr	r3, [r3, #8]
 8009c8e:	3b01      	subs	r3, #1
 8009c90:	025b      	lsls	r3, r3, #9
 8009c92:	b29b      	uxth	r3, r3
 8009c94:	431a      	orrs	r2, r3
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	68db      	ldr	r3, [r3, #12]
 8009c9a:	3b01      	subs	r3, #1
 8009c9c:	041b      	lsls	r3, r3, #16
 8009c9e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009ca2:	431a      	orrs	r2, r3
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	691b      	ldr	r3, [r3, #16]
 8009ca8:	3b01      	subs	r3, #1
 8009caa:	061b      	lsls	r3, r3, #24
 8009cac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009cb0:	4931      	ldr	r1, [pc, #196]	@ (8009d78 <RCCEx_PLL3_Config+0x15c>)
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009cb6:	4b30      	ldr	r3, [pc, #192]	@ (8009d78 <RCCEx_PLL3_Config+0x15c>)
 8009cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	695b      	ldr	r3, [r3, #20]
 8009cc2:	492d      	ldr	r1, [pc, #180]	@ (8009d78 <RCCEx_PLL3_Config+0x15c>)
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009cc8:	4b2b      	ldr	r3, [pc, #172]	@ (8009d78 <RCCEx_PLL3_Config+0x15c>)
 8009cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ccc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	699b      	ldr	r3, [r3, #24]
 8009cd4:	4928      	ldr	r1, [pc, #160]	@ (8009d78 <RCCEx_PLL3_Config+0x15c>)
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009cda:	4b27      	ldr	r3, [pc, #156]	@ (8009d78 <RCCEx_PLL3_Config+0x15c>)
 8009cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cde:	4a26      	ldr	r2, [pc, #152]	@ (8009d78 <RCCEx_PLL3_Config+0x15c>)
 8009ce0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ce4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009ce6:	4b24      	ldr	r3, [pc, #144]	@ (8009d78 <RCCEx_PLL3_Config+0x15c>)
 8009ce8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009cea:	4b24      	ldr	r3, [pc, #144]	@ (8009d7c <RCCEx_PLL3_Config+0x160>)
 8009cec:	4013      	ands	r3, r2
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	69d2      	ldr	r2, [r2, #28]
 8009cf2:	00d2      	lsls	r2, r2, #3
 8009cf4:	4920      	ldr	r1, [pc, #128]	@ (8009d78 <RCCEx_PLL3_Config+0x15c>)
 8009cf6:	4313      	orrs	r3, r2
 8009cf8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009cfa:	4b1f      	ldr	r3, [pc, #124]	@ (8009d78 <RCCEx_PLL3_Config+0x15c>)
 8009cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cfe:	4a1e      	ldr	r2, [pc, #120]	@ (8009d78 <RCCEx_PLL3_Config+0x15c>)
 8009d00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009d04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d106      	bne.n	8009d1a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8009d78 <RCCEx_PLL3_Config+0x15c>)
 8009d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d10:	4a19      	ldr	r2, [pc, #100]	@ (8009d78 <RCCEx_PLL3_Config+0x15c>)
 8009d12:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009d16:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009d18:	e00f      	b.n	8009d3a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d106      	bne.n	8009d2e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009d20:	4b15      	ldr	r3, [pc, #84]	@ (8009d78 <RCCEx_PLL3_Config+0x15c>)
 8009d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d24:	4a14      	ldr	r2, [pc, #80]	@ (8009d78 <RCCEx_PLL3_Config+0x15c>)
 8009d26:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009d2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009d2c:	e005      	b.n	8009d3a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009d2e:	4b12      	ldr	r3, [pc, #72]	@ (8009d78 <RCCEx_PLL3_Config+0x15c>)
 8009d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d32:	4a11      	ldr	r2, [pc, #68]	@ (8009d78 <RCCEx_PLL3_Config+0x15c>)
 8009d34:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009d38:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8009d78 <RCCEx_PLL3_Config+0x15c>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4a0e      	ldr	r2, [pc, #56]	@ (8009d78 <RCCEx_PLL3_Config+0x15c>)
 8009d40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d46:	f7f9 fb4b 	bl	80033e0 <HAL_GetTick>
 8009d4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009d4c:	e008      	b.n	8009d60 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009d4e:	f7f9 fb47 	bl	80033e0 <HAL_GetTick>
 8009d52:	4602      	mov	r2, r0
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	1ad3      	subs	r3, r2, r3
 8009d58:	2b02      	cmp	r3, #2
 8009d5a:	d901      	bls.n	8009d60 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009d5c:	2303      	movs	r3, #3
 8009d5e:	e006      	b.n	8009d6e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009d60:	4b05      	ldr	r3, [pc, #20]	@ (8009d78 <RCCEx_PLL3_Config+0x15c>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d0f0      	beq.n	8009d4e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3710      	adds	r7, #16
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
 8009d76:	bf00      	nop
 8009d78:	58024400 	.word	0x58024400
 8009d7c:	ffff0007 	.word	0xffff0007

08009d80 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b084      	sub	sp, #16
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d101      	bne.n	8009d92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009d8e:	2301      	movs	r3, #1
 8009d90:	e10f      	b.n	8009fb2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a87      	ldr	r2, [pc, #540]	@ (8009fbc <HAL_SPI_Init+0x23c>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d00f      	beq.n	8009dc2 <HAL_SPI_Init+0x42>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4a86      	ldr	r2, [pc, #536]	@ (8009fc0 <HAL_SPI_Init+0x240>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d00a      	beq.n	8009dc2 <HAL_SPI_Init+0x42>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4a84      	ldr	r2, [pc, #528]	@ (8009fc4 <HAL_SPI_Init+0x244>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d005      	beq.n	8009dc2 <HAL_SPI_Init+0x42>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	68db      	ldr	r3, [r3, #12]
 8009dba:	2b0f      	cmp	r3, #15
 8009dbc:	d901      	bls.n	8009dc2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	e0f7      	b.n	8009fb2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f001 f968 	bl	800b098 <SPI_GetPacketSize>
 8009dc8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	4a7b      	ldr	r2, [pc, #492]	@ (8009fbc <HAL_SPI_Init+0x23c>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d00c      	beq.n	8009dee <HAL_SPI_Init+0x6e>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4a79      	ldr	r2, [pc, #484]	@ (8009fc0 <HAL_SPI_Init+0x240>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d007      	beq.n	8009dee <HAL_SPI_Init+0x6e>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	4a78      	ldr	r2, [pc, #480]	@ (8009fc4 <HAL_SPI_Init+0x244>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d002      	beq.n	8009dee <HAL_SPI_Init+0x6e>
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2b08      	cmp	r3, #8
 8009dec:	d811      	bhi.n	8009e12 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009df2:	4a72      	ldr	r2, [pc, #456]	@ (8009fbc <HAL_SPI_Init+0x23c>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d009      	beq.n	8009e0c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4a70      	ldr	r2, [pc, #448]	@ (8009fc0 <HAL_SPI_Init+0x240>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d004      	beq.n	8009e0c <HAL_SPI_Init+0x8c>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4a6f      	ldr	r2, [pc, #444]	@ (8009fc4 <HAL_SPI_Init+0x244>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d104      	bne.n	8009e16 <HAL_SPI_Init+0x96>
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2b10      	cmp	r3, #16
 8009e10:	d901      	bls.n	8009e16 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009e12:	2301      	movs	r3, #1
 8009e14:	e0cd      	b.n	8009fb2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009e1c:	b2db      	uxtb	r3, r3
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d106      	bne.n	8009e30 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2200      	movs	r2, #0
 8009e26:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f7f8 fb08 	bl	8002440 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2202      	movs	r2, #2
 8009e34:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	681a      	ldr	r2, [r3, #0]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f022 0201 	bic.w	r2, r2, #1
 8009e46:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	689b      	ldr	r3, [r3, #8]
 8009e4e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8009e52:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	699b      	ldr	r3, [r3, #24]
 8009e58:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009e5c:	d119      	bne.n	8009e92 <HAL_SPI_Init+0x112>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	685b      	ldr	r3, [r3, #4]
 8009e62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009e66:	d103      	bne.n	8009e70 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d008      	beq.n	8009e82 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d10c      	bne.n	8009e92 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009e7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e80:	d107      	bne.n	8009e92 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	681a      	ldr	r2, [r3, #0]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009e90:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	685b      	ldr	r3, [r3, #4]
 8009e96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d00f      	beq.n	8009ebe <HAL_SPI_Init+0x13e>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	2b06      	cmp	r3, #6
 8009ea4:	d90b      	bls.n	8009ebe <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	430a      	orrs	r2, r1
 8009eba:	601a      	str	r2, [r3, #0]
 8009ebc:	e007      	b.n	8009ece <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	681a      	ldr	r2, [r3, #0]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009ecc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	69da      	ldr	r2, [r3, #28]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ed6:	431a      	orrs	r2, r3
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	431a      	orrs	r2, r3
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ee0:	ea42 0103 	orr.w	r1, r2, r3
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	68da      	ldr	r2, [r3, #12]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	430a      	orrs	r2, r1
 8009eee:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ef8:	431a      	orrs	r2, r3
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009efe:	431a      	orrs	r2, r3
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	699b      	ldr	r3, [r3, #24]
 8009f04:	431a      	orrs	r2, r3
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	691b      	ldr	r3, [r3, #16]
 8009f0a:	431a      	orrs	r2, r3
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	695b      	ldr	r3, [r3, #20]
 8009f10:	431a      	orrs	r2, r3
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6a1b      	ldr	r3, [r3, #32]
 8009f16:	431a      	orrs	r2, r3
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	431a      	orrs	r2, r3
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f22:	431a      	orrs	r2, r3
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	689b      	ldr	r3, [r3, #8]
 8009f28:	431a      	orrs	r2, r3
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f2e:	ea42 0103 	orr.w	r1, r2, r3
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	430a      	orrs	r2, r1
 8009f3c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	685b      	ldr	r3, [r3, #4]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d113      	bne.n	8009f6e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	689b      	ldr	r3, [r3, #8]
 8009f4c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009f58:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	689b      	ldr	r3, [r3, #8]
 8009f60:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009f6c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f022 0201 	bic.w	r2, r2, #1
 8009f7c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d00a      	beq.n	8009fa0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	68db      	ldr	r3, [r3, #12]
 8009f90:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	430a      	orrs	r2, r1
 8009f9e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2201      	movs	r2, #1
 8009fac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8009fb0:	2300      	movs	r3, #0
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3710      	adds	r7, #16
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}
 8009fba:	bf00      	nop
 8009fbc:	40013000 	.word	0x40013000
 8009fc0:	40003800 	.word	0x40003800
 8009fc4:	40003c00 	.word	0x40003c00

08009fc8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b088      	sub	sp, #32
 8009fcc:	af02      	add	r7, sp, #8
 8009fce:	60f8      	str	r0, [r7, #12]
 8009fd0:	60b9      	str	r1, [r7, #8]
 8009fd2:	603b      	str	r3, [r7, #0]
 8009fd4:	4613      	mov	r3, r2
 8009fd6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	3320      	adds	r3, #32
 8009fde:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009fe0:	f7f9 f9fe 	bl	80033e0 <HAL_GetTick>
 8009fe4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009fec:	b2db      	uxtb	r3, r3
 8009fee:	2b01      	cmp	r3, #1
 8009ff0:	d001      	beq.n	8009ff6 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8009ff2:	2302      	movs	r3, #2
 8009ff4:	e1d1      	b.n	800a39a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d002      	beq.n	800a002 <HAL_SPI_Transmit+0x3a>
 8009ffc:	88fb      	ldrh	r3, [r7, #6]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d101      	bne.n	800a006 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800a002:	2301      	movs	r3, #1
 800a004:	e1c9      	b.n	800a39a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a00c:	2b01      	cmp	r3, #1
 800a00e:	d101      	bne.n	800a014 <HAL_SPI_Transmit+0x4c>
 800a010:	2302      	movs	r3, #2
 800a012:	e1c2      	b.n	800a39a <HAL_SPI_Transmit+0x3d2>
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2201      	movs	r2, #1
 800a018:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	2203      	movs	r2, #3
 800a020:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2200      	movs	r2, #0
 800a028:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	68ba      	ldr	r2, [r7, #8]
 800a030:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	88fa      	ldrh	r2, [r7, #6]
 800a036:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	88fa      	ldrh	r2, [r7, #6]
 800a03e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2200      	movs	r2, #0
 800a046:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	2200      	movs	r2, #0
 800a04c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	2200      	movs	r2, #0
 800a054:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2200      	movs	r2, #0
 800a05c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	2200      	movs	r2, #0
 800a062:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	689b      	ldr	r3, [r3, #8]
 800a068:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a06c:	d108      	bne.n	800a080 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	681a      	ldr	r2, [r3, #0]
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a07c:	601a      	str	r2, [r3, #0]
 800a07e:	e009      	b.n	800a094 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	68db      	ldr	r3, [r3, #12]
 800a086:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800a092:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	685a      	ldr	r2, [r3, #4]
 800a09a:	4b96      	ldr	r3, [pc, #600]	@ (800a2f4 <HAL_SPI_Transmit+0x32c>)
 800a09c:	4013      	ands	r3, r2
 800a09e:	88f9      	ldrh	r1, [r7, #6]
 800a0a0:	68fa      	ldr	r2, [r7, #12]
 800a0a2:	6812      	ldr	r2, [r2, #0]
 800a0a4:	430b      	orrs	r3, r1
 800a0a6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	681a      	ldr	r2, [r3, #0]
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f042 0201 	orr.w	r2, r2, #1
 800a0b6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	685b      	ldr	r3, [r3, #4]
 800a0bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a0c0:	d107      	bne.n	800a0d2 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	681a      	ldr	r2, [r3, #0]
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a0d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	68db      	ldr	r3, [r3, #12]
 800a0d6:	2b0f      	cmp	r3, #15
 800a0d8:	d947      	bls.n	800a16a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a0da:	e03f      	b.n	800a15c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	695b      	ldr	r3, [r3, #20]
 800a0e2:	f003 0302 	and.w	r3, r3, #2
 800a0e6:	2b02      	cmp	r3, #2
 800a0e8:	d114      	bne.n	800a114 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	6812      	ldr	r2, [r2, #0]
 800a0f4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a0fa:	1d1a      	adds	r2, r3, #4
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a106:	b29b      	uxth	r3, r3
 800a108:	3b01      	subs	r3, #1
 800a10a:	b29a      	uxth	r2, r3
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a112:	e023      	b.n	800a15c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a114:	f7f9 f964 	bl	80033e0 <HAL_GetTick>
 800a118:	4602      	mov	r2, r0
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	1ad3      	subs	r3, r2, r3
 800a11e:	683a      	ldr	r2, [r7, #0]
 800a120:	429a      	cmp	r2, r3
 800a122:	d803      	bhi.n	800a12c <HAL_SPI_Transmit+0x164>
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a12a:	d102      	bne.n	800a132 <HAL_SPI_Transmit+0x16a>
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d114      	bne.n	800a15c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a132:	68f8      	ldr	r0, [r7, #12]
 800a134:	f000 fee2 	bl	800aefc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a13e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	2201      	movs	r2, #1
 800a14c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2200      	movs	r2, #0
 800a154:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a158:	2303      	movs	r3, #3
 800a15a:	e11e      	b.n	800a39a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a162:	b29b      	uxth	r3, r3
 800a164:	2b00      	cmp	r3, #0
 800a166:	d1b9      	bne.n	800a0dc <HAL_SPI_Transmit+0x114>
 800a168:	e0f1      	b.n	800a34e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	68db      	ldr	r3, [r3, #12]
 800a16e:	2b07      	cmp	r3, #7
 800a170:	f240 80e6 	bls.w	800a340 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a174:	e05d      	b.n	800a232 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	695b      	ldr	r3, [r3, #20]
 800a17c:	f003 0302 	and.w	r3, r3, #2
 800a180:	2b02      	cmp	r3, #2
 800a182:	d132      	bne.n	800a1ea <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a18a:	b29b      	uxth	r3, r3
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	d918      	bls.n	800a1c2 <HAL_SPI_Transmit+0x1fa>
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a194:	2b00      	cmp	r3, #0
 800a196:	d014      	beq.n	800a1c2 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	6812      	ldr	r2, [r2, #0]
 800a1a2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a1a8:	1d1a      	adds	r2, r3, #4
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a1b4:	b29b      	uxth	r3, r3
 800a1b6:	3b02      	subs	r3, #2
 800a1b8:	b29a      	uxth	r2, r3
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a1c0:	e037      	b.n	800a232 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a1c6:	881a      	ldrh	r2, [r3, #0]
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a1d0:	1c9a      	adds	r2, r3, #2
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a1dc:	b29b      	uxth	r3, r3
 800a1de:	3b01      	subs	r3, #1
 800a1e0:	b29a      	uxth	r2, r3
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a1e8:	e023      	b.n	800a232 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a1ea:	f7f9 f8f9 	bl	80033e0 <HAL_GetTick>
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	1ad3      	subs	r3, r2, r3
 800a1f4:	683a      	ldr	r2, [r7, #0]
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	d803      	bhi.n	800a202 <HAL_SPI_Transmit+0x23a>
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a200:	d102      	bne.n	800a208 <HAL_SPI_Transmit+0x240>
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d114      	bne.n	800a232 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a208:	68f8      	ldr	r0, [r7, #12]
 800a20a:	f000 fe77 	bl	800aefc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a214:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	2201      	movs	r2, #1
 800a222:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2200      	movs	r2, #0
 800a22a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a22e:	2303      	movs	r3, #3
 800a230:	e0b3      	b.n	800a39a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a238:	b29b      	uxth	r3, r3
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d19b      	bne.n	800a176 <HAL_SPI_Transmit+0x1ae>
 800a23e:	e086      	b.n	800a34e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	695b      	ldr	r3, [r3, #20]
 800a246:	f003 0302 	and.w	r3, r3, #2
 800a24a:	2b02      	cmp	r3, #2
 800a24c:	d154      	bne.n	800a2f8 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a254:	b29b      	uxth	r3, r3
 800a256:	2b03      	cmp	r3, #3
 800a258:	d918      	bls.n	800a28c <HAL_SPI_Transmit+0x2c4>
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a25e:	2b40      	cmp	r3, #64	@ 0x40
 800a260:	d914      	bls.n	800a28c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	6812      	ldr	r2, [r2, #0]
 800a26c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a272:	1d1a      	adds	r2, r3, #4
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a27e:	b29b      	uxth	r3, r3
 800a280:	3b04      	subs	r3, #4
 800a282:	b29a      	uxth	r2, r3
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a28a:	e059      	b.n	800a340 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a292:	b29b      	uxth	r3, r3
 800a294:	2b01      	cmp	r3, #1
 800a296:	d917      	bls.n	800a2c8 <HAL_SPI_Transmit+0x300>
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d013      	beq.n	800a2c8 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a2a4:	881a      	ldrh	r2, [r3, #0]
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a2ae:	1c9a      	adds	r2, r3, #2
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	3b02      	subs	r3, #2
 800a2be:	b29a      	uxth	r2, r3
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a2c6:	e03b      	b.n	800a340 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	3320      	adds	r3, #32
 800a2d2:	7812      	ldrb	r2, [r2, #0]
 800a2d4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a2da:	1c5a      	adds	r2, r3, #1
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	3b01      	subs	r3, #1
 800a2ea:	b29a      	uxth	r2, r3
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a2f2:	e025      	b.n	800a340 <HAL_SPI_Transmit+0x378>
 800a2f4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a2f8:	f7f9 f872 	bl	80033e0 <HAL_GetTick>
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	1ad3      	subs	r3, r2, r3
 800a302:	683a      	ldr	r2, [r7, #0]
 800a304:	429a      	cmp	r2, r3
 800a306:	d803      	bhi.n	800a310 <HAL_SPI_Transmit+0x348>
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a30e:	d102      	bne.n	800a316 <HAL_SPI_Transmit+0x34e>
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d114      	bne.n	800a340 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a316:	68f8      	ldr	r0, [r7, #12]
 800a318:	f000 fdf0 	bl	800aefc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a322:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	2201      	movs	r2, #1
 800a330:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2200      	movs	r2, #0
 800a338:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a33c:	2303      	movs	r3, #3
 800a33e:	e02c      	b.n	800a39a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a346:	b29b      	uxth	r3, r3
 800a348:	2b00      	cmp	r3, #0
 800a34a:	f47f af79 	bne.w	800a240 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	9300      	str	r3, [sp, #0]
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	2200      	movs	r2, #0
 800a356:	2108      	movs	r1, #8
 800a358:	68f8      	ldr	r0, [r7, #12]
 800a35a:	f000 fe6f 	bl	800b03c <SPI_WaitOnFlagUntilTimeout>
 800a35e:	4603      	mov	r3, r0
 800a360:	2b00      	cmp	r3, #0
 800a362:	d007      	beq.n	800a374 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a36a:	f043 0220 	orr.w	r2, r3, #32
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a374:	68f8      	ldr	r0, [r7, #12]
 800a376:	f000 fdc1 	bl	800aefc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	2201      	movs	r2, #1
 800a37e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2200      	movs	r2, #0
 800a386:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a390:	2b00      	cmp	r3, #0
 800a392:	d001      	beq.n	800a398 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800a394:	2301      	movs	r3, #1
 800a396:	e000      	b.n	800a39a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800a398:	2300      	movs	r3, #0
  }
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3718      	adds	r7, #24
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
 800a3a2:	bf00      	nop

0800a3a4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b088      	sub	sp, #32
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	60f8      	str	r0, [r7, #12]
 800a3ac:	60b9      	str	r1, [r7, #8]
 800a3ae:	603b      	str	r3, [r7, #0]
 800a3b0:	4613      	mov	r3, r2
 800a3b2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3b8:	095b      	lsrs	r3, r3, #5
 800a3ba:	b29b      	uxth	r3, r3
 800a3bc:	3301      	adds	r3, #1
 800a3be:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	3330      	adds	r3, #48	@ 0x30
 800a3c6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a3c8:	f7f9 f80a 	bl	80033e0 <HAL_GetTick>
 800a3cc:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a3d4:	b2db      	uxtb	r3, r3
 800a3d6:	2b01      	cmp	r3, #1
 800a3d8:	d001      	beq.n	800a3de <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800a3da:	2302      	movs	r3, #2
 800a3dc:	e250      	b.n	800a880 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d002      	beq.n	800a3ea <HAL_SPI_Receive+0x46>
 800a3e4:	88fb      	ldrh	r3, [r7, #6]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d101      	bne.n	800a3ee <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	e248      	b.n	800a880 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	d101      	bne.n	800a3fc <HAL_SPI_Receive+0x58>
 800a3f8:	2302      	movs	r3, #2
 800a3fa:	e241      	b.n	800a880 <HAL_SPI_Receive+0x4dc>
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2201      	movs	r2, #1
 800a400:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2204      	movs	r2, #4
 800a408:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2200      	movs	r2, #0
 800a410:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	68ba      	ldr	r2, [r7, #8]
 800a418:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	88fa      	ldrh	r2, [r7, #6]
 800a41e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	88fa      	ldrh	r2, [r7, #6]
 800a426:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2200      	movs	r2, #0
 800a42e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2200      	movs	r2, #0
 800a434:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	2200      	movs	r2, #0
 800a43c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2200      	movs	r2, #0
 800a444:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2200      	movs	r2, #0
 800a44a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	689b      	ldr	r3, [r3, #8]
 800a450:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a454:	d108      	bne.n	800a468 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	681a      	ldr	r2, [r3, #0]
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a464:	601a      	str	r2, [r3, #0]
 800a466:	e009      	b.n	800a47c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	68db      	ldr	r3, [r3, #12]
 800a46e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800a47a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	685a      	ldr	r2, [r3, #4]
 800a482:	4b95      	ldr	r3, [pc, #596]	@ (800a6d8 <HAL_SPI_Receive+0x334>)
 800a484:	4013      	ands	r3, r2
 800a486:	88f9      	ldrh	r1, [r7, #6]
 800a488:	68fa      	ldr	r2, [r7, #12]
 800a48a:	6812      	ldr	r2, [r2, #0]
 800a48c:	430b      	orrs	r3, r1
 800a48e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	681a      	ldr	r2, [r3, #0]
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f042 0201 	orr.w	r2, r2, #1
 800a49e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a4a8:	d107      	bne.n	800a4ba <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	681a      	ldr	r2, [r3, #0]
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a4b8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	68db      	ldr	r3, [r3, #12]
 800a4be:	2b0f      	cmp	r3, #15
 800a4c0:	d96c      	bls.n	800a59c <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a4c2:	e064      	b.n	800a58e <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	695b      	ldr	r3, [r3, #20]
 800a4ca:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	695b      	ldr	r3, [r3, #20]
 800a4d2:	f003 0301 	and.w	r3, r3, #1
 800a4d6:	2b01      	cmp	r3, #1
 800a4d8:	d114      	bne.n	800a504 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681a      	ldr	r2, [r3, #0]
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a4e2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a4e4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a4ea:	1d1a      	adds	r2, r3, #4
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a4f6:	b29b      	uxth	r3, r3
 800a4f8:	3b01      	subs	r3, #1
 800a4fa:	b29a      	uxth	r2, r3
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a502:	e044      	b.n	800a58e <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a50a:	b29b      	uxth	r3, r3
 800a50c:	8bfa      	ldrh	r2, [r7, #30]
 800a50e:	429a      	cmp	r2, r3
 800a510:	d919      	bls.n	800a546 <HAL_SPI_Receive+0x1a2>
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d014      	beq.n	800a546 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681a      	ldr	r2, [r3, #0]
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a524:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a526:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a52c:	1d1a      	adds	r2, r3, #4
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a538:	b29b      	uxth	r3, r3
 800a53a:	3b01      	subs	r3, #1
 800a53c:	b29a      	uxth	r2, r3
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a544:	e023      	b.n	800a58e <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a546:	f7f8 ff4b 	bl	80033e0 <HAL_GetTick>
 800a54a:	4602      	mov	r2, r0
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	1ad3      	subs	r3, r2, r3
 800a550:	683a      	ldr	r2, [r7, #0]
 800a552:	429a      	cmp	r2, r3
 800a554:	d803      	bhi.n	800a55e <HAL_SPI_Receive+0x1ba>
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a55c:	d102      	bne.n	800a564 <HAL_SPI_Receive+0x1c0>
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d114      	bne.n	800a58e <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a564:	68f8      	ldr	r0, [r7, #12]
 800a566:	f000 fcc9 	bl	800aefc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a570:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2201      	movs	r2, #1
 800a57e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2200      	movs	r2, #0
 800a586:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a58a:	2303      	movs	r3, #3
 800a58c:	e178      	b.n	800a880 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a594:	b29b      	uxth	r3, r3
 800a596:	2b00      	cmp	r3, #0
 800a598:	d194      	bne.n	800a4c4 <HAL_SPI_Receive+0x120>
 800a59a:	e15e      	b.n	800a85a <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	68db      	ldr	r3, [r3, #12]
 800a5a0:	2b07      	cmp	r3, #7
 800a5a2:	f240 8153 	bls.w	800a84c <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a5a6:	e08f      	b.n	800a6c8 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	695b      	ldr	r3, [r3, #20]
 800a5ae:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	695b      	ldr	r3, [r3, #20]
 800a5b6:	f003 0301 	and.w	r3, r3, #1
 800a5ba:	2b01      	cmp	r3, #1
 800a5bc:	d114      	bne.n	800a5e8 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a5c2:	69ba      	ldr	r2, [r7, #24]
 800a5c4:	8812      	ldrh	r2, [r2, #0]
 800a5c6:	b292      	uxth	r2, r2
 800a5c8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a5ce:	1c9a      	adds	r2, r3, #2
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	3b01      	subs	r3, #1
 800a5de:	b29a      	uxth	r2, r3
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a5e6:	e06f      	b.n	800a6c8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a5ee:	b29b      	uxth	r3, r3
 800a5f0:	8bfa      	ldrh	r2, [r7, #30]
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d924      	bls.n	800a640 <HAL_SPI_Receive+0x29c>
 800a5f6:	693b      	ldr	r3, [r7, #16]
 800a5f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d01f      	beq.n	800a640 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a604:	69ba      	ldr	r2, [r7, #24]
 800a606:	8812      	ldrh	r2, [r2, #0]
 800a608:	b292      	uxth	r2, r2
 800a60a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a610:	1c9a      	adds	r2, r3, #2
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a61a:	69ba      	ldr	r2, [r7, #24]
 800a61c:	8812      	ldrh	r2, [r2, #0]
 800a61e:	b292      	uxth	r2, r2
 800a620:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a626:	1c9a      	adds	r2, r3, #2
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a632:	b29b      	uxth	r3, r3
 800a634:	3b02      	subs	r3, #2
 800a636:	b29a      	uxth	r2, r3
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a63e:	e043      	b.n	800a6c8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a646:	b29b      	uxth	r3, r3
 800a648:	2b01      	cmp	r3, #1
 800a64a:	d119      	bne.n	800a680 <HAL_SPI_Receive+0x2dc>
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a652:	2b00      	cmp	r3, #0
 800a654:	d014      	beq.n	800a680 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a65a:	69ba      	ldr	r2, [r7, #24]
 800a65c:	8812      	ldrh	r2, [r2, #0]
 800a65e:	b292      	uxth	r2, r2
 800a660:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a666:	1c9a      	adds	r2, r3, #2
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a672:	b29b      	uxth	r3, r3
 800a674:	3b01      	subs	r3, #1
 800a676:	b29a      	uxth	r2, r3
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a67e:	e023      	b.n	800a6c8 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a680:	f7f8 feae 	bl	80033e0 <HAL_GetTick>
 800a684:	4602      	mov	r2, r0
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	1ad3      	subs	r3, r2, r3
 800a68a:	683a      	ldr	r2, [r7, #0]
 800a68c:	429a      	cmp	r2, r3
 800a68e:	d803      	bhi.n	800a698 <HAL_SPI_Receive+0x2f4>
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a696:	d102      	bne.n	800a69e <HAL_SPI_Receive+0x2fa>
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d114      	bne.n	800a6c8 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a69e:	68f8      	ldr	r0, [r7, #12]
 800a6a0:	f000 fc2c 	bl	800aefc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a6aa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	2201      	movs	r2, #1
 800a6b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a6c4:	2303      	movs	r3, #3
 800a6c6:	e0db      	b.n	800a880 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a6ce:	b29b      	uxth	r3, r3
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	f47f af69 	bne.w	800a5a8 <HAL_SPI_Receive+0x204>
 800a6d6:	e0c0      	b.n	800a85a <HAL_SPI_Receive+0x4b6>
 800a6d8:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	695b      	ldr	r3, [r3, #20]
 800a6e2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	695b      	ldr	r3, [r3, #20]
 800a6ea:	f003 0301 	and.w	r3, r3, #1
 800a6ee:	2b01      	cmp	r3, #1
 800a6f0:	d117      	bne.n	800a722 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6fe:	7812      	ldrb	r2, [r2, #0]
 800a700:	b2d2      	uxtb	r2, r2
 800a702:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a708:	1c5a      	adds	r2, r3, #1
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a714:	b29b      	uxth	r3, r3
 800a716:	3b01      	subs	r3, #1
 800a718:	b29a      	uxth	r2, r3
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a720:	e094      	b.n	800a84c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a728:	b29b      	uxth	r3, r3
 800a72a:	8bfa      	ldrh	r2, [r7, #30]
 800a72c:	429a      	cmp	r2, r3
 800a72e:	d946      	bls.n	800a7be <HAL_SPI_Receive+0x41a>
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a736:	2b00      	cmp	r3, #0
 800a738:	d041      	beq.n	800a7be <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a746:	7812      	ldrb	r2, [r2, #0]
 800a748:	b2d2      	uxtb	r2, r2
 800a74a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a750:	1c5a      	adds	r2, r3, #1
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a762:	7812      	ldrb	r2, [r2, #0]
 800a764:	b2d2      	uxtb	r2, r2
 800a766:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a76c:	1c5a      	adds	r2, r3, #1
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a77e:	7812      	ldrb	r2, [r2, #0]
 800a780:	b2d2      	uxtb	r2, r2
 800a782:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a788:	1c5a      	adds	r2, r3, #1
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a79a:	7812      	ldrb	r2, [r2, #0]
 800a79c:	b2d2      	uxtb	r2, r2
 800a79e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7a4:	1c5a      	adds	r2, r3, #1
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a7b0:	b29b      	uxth	r3, r3
 800a7b2:	3b04      	subs	r3, #4
 800a7b4:	b29a      	uxth	r2, r3
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a7bc:	e046      	b.n	800a84c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a7c4:	b29b      	uxth	r3, r3
 800a7c6:	2b03      	cmp	r3, #3
 800a7c8:	d81c      	bhi.n	800a804 <HAL_SPI_Receive+0x460>
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d017      	beq.n	800a804 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7e0:	7812      	ldrb	r2, [r2, #0]
 800a7e2:	b2d2      	uxtb	r2, r2
 800a7e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7ea:	1c5a      	adds	r2, r3, #1
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a7f6:	b29b      	uxth	r3, r3
 800a7f8:	3b01      	subs	r3, #1
 800a7fa:	b29a      	uxth	r2, r3
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a802:	e023      	b.n	800a84c <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a804:	f7f8 fdec 	bl	80033e0 <HAL_GetTick>
 800a808:	4602      	mov	r2, r0
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	1ad3      	subs	r3, r2, r3
 800a80e:	683a      	ldr	r2, [r7, #0]
 800a810:	429a      	cmp	r2, r3
 800a812:	d803      	bhi.n	800a81c <HAL_SPI_Receive+0x478>
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a81a:	d102      	bne.n	800a822 <HAL_SPI_Receive+0x47e>
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d114      	bne.n	800a84c <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a822:	68f8      	ldr	r0, [r7, #12]
 800a824:	f000 fb6a 	bl	800aefc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a82e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2201      	movs	r2, #1
 800a83c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2200      	movs	r2, #0
 800a844:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a848:	2303      	movs	r3, #3
 800a84a:	e019      	b.n	800a880 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a852:	b29b      	uxth	r3, r3
 800a854:	2b00      	cmp	r3, #0
 800a856:	f47f af41 	bne.w	800a6dc <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a85a:	68f8      	ldr	r0, [r7, #12]
 800a85c:	f000 fb4e 	bl	800aefc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	2201      	movs	r2, #1
 800a864:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2200      	movs	r2, #0
 800a86c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a876:	2b00      	cmp	r3, #0
 800a878:	d001      	beq.n	800a87e <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800a87a:	2301      	movs	r3, #1
 800a87c:	e000      	b.n	800a880 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800a87e:	2300      	movs	r3, #0
  }
}
 800a880:	4618      	mov	r0, r3
 800a882:	3720      	adds	r7, #32
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b08e      	sub	sp, #56	@ 0x38
 800a88c:	af02      	add	r7, sp, #8
 800a88e:	60f8      	str	r0, [r7, #12]
 800a890:	60b9      	str	r1, [r7, #8]
 800a892:	607a      	str	r2, [r7, #4]
 800a894:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	3320      	adds	r3, #32
 800a89c:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	3330      	adds	r3, #48	@ 0x30
 800a8a4:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8aa:	095b      	lsrs	r3, r3, #5
 800a8ac:	b29b      	uxth	r3, r3
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a8b2:	f7f8 fd95 	bl	80033e0 <HAL_GetTick>
 800a8b6:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800a8b8:	887b      	ldrh	r3, [r7, #2]
 800a8ba:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800a8bc:	887b      	ldrh	r3, [r7, #2]
 800a8be:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a8c6:	b2db      	uxtb	r3, r3
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	d001      	beq.n	800a8d0 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800a8cc:	2302      	movs	r3, #2
 800a8ce:	e310      	b.n	800aef2 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d005      	beq.n	800a8e2 <HAL_SPI_TransmitReceive+0x5a>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d002      	beq.n	800a8e2 <HAL_SPI_TransmitReceive+0x5a>
 800a8dc:	887b      	ldrh	r3, [r7, #2]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d101      	bne.n	800a8e6 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	e305      	b.n	800aef2 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d101      	bne.n	800a8f4 <HAL_SPI_TransmitReceive+0x6c>
 800a8f0:	2302      	movs	r3, #2
 800a8f2:	e2fe      	b.n	800aef2 <HAL_SPI_TransmitReceive+0x66a>
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	2205      	movs	r2, #5
 800a900:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2200      	movs	r2, #0
 800a908:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	687a      	ldr	r2, [r7, #4]
 800a910:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	887a      	ldrh	r2, [r7, #2]
 800a916:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	887a      	ldrh	r2, [r7, #2]
 800a91e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	68ba      	ldr	r2, [r7, #8]
 800a926:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	887a      	ldrh	r2, [r7, #2]
 800a92c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	887a      	ldrh	r2, [r7, #2]
 800a934:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	2200      	movs	r2, #0
 800a93c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	2200      	movs	r2, #0
 800a942:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	68da      	ldr	r2, [r3, #12]
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800a952:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	4a70      	ldr	r2, [pc, #448]	@ (800ab1c <HAL_SPI_TransmitReceive+0x294>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d009      	beq.n	800a972 <HAL_SPI_TransmitReceive+0xea>
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	4a6f      	ldr	r2, [pc, #444]	@ (800ab20 <HAL_SPI_TransmitReceive+0x298>)
 800a964:	4293      	cmp	r3, r2
 800a966:	d004      	beq.n	800a972 <HAL_SPI_TransmitReceive+0xea>
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	4a6d      	ldr	r2, [pc, #436]	@ (800ab24 <HAL_SPI_TransmitReceive+0x29c>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d102      	bne.n	800a978 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800a972:	2310      	movs	r3, #16
 800a974:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a976:	e001      	b.n	800a97c <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800a978:	2308      	movs	r3, #8
 800a97a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	685a      	ldr	r2, [r3, #4]
 800a982:	4b69      	ldr	r3, [pc, #420]	@ (800ab28 <HAL_SPI_TransmitReceive+0x2a0>)
 800a984:	4013      	ands	r3, r2
 800a986:	8879      	ldrh	r1, [r7, #2]
 800a988:	68fa      	ldr	r2, [r7, #12]
 800a98a:	6812      	ldr	r2, [r2, #0]
 800a98c:	430b      	orrs	r3, r1
 800a98e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	681a      	ldr	r2, [r3, #0]
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f042 0201 	orr.w	r2, r2, #1
 800a99e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	685b      	ldr	r3, [r3, #4]
 800a9a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a9a8:	d107      	bne.n	800a9ba <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	681a      	ldr	r2, [r3, #0]
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a9b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	68db      	ldr	r3, [r3, #12]
 800a9be:	2b0f      	cmp	r3, #15
 800a9c0:	f240 80a2 	bls.w	800ab08 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800a9c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9c6:	089b      	lsrs	r3, r3, #2
 800a9c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a9ca:	e094      	b.n	800aaf6 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	695b      	ldr	r3, [r3, #20]
 800a9d2:	f003 0302 	and.w	r3, r3, #2
 800a9d6:	2b02      	cmp	r3, #2
 800a9d8:	d120      	bne.n	800aa1c <HAL_SPI_TransmitReceive+0x194>
 800a9da:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d01d      	beq.n	800aa1c <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800a9e0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a9e2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800a9e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9e6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	d217      	bcs.n	800aa1c <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	6812      	ldr	r2, [r2, #0]
 800a9f6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a9fc:	1d1a      	adds	r2, r3, #4
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800aa08:	b29b      	uxth	r3, r3
 800aa0a:	3b01      	subs	r3, #1
 800aa0c:	b29a      	uxth	r2, r3
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800aa1a:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	695b      	ldr	r3, [r3, #20]
 800aa22:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800aa24:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d065      	beq.n	800aaf6 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	695b      	ldr	r3, [r3, #20]
 800aa30:	f003 0301 	and.w	r3, r3, #1
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	d118      	bne.n	800aa6a <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681a      	ldr	r2, [r3, #0]
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa40:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800aa42:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa48:	1d1a      	adds	r2, r3, #4
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aa54:	b29b      	uxth	r3, r3
 800aa56:	3b01      	subs	r3, #1
 800aa58:	b29a      	uxth	r2, r3
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aa66:	853b      	strh	r3, [r7, #40]	@ 0x28
 800aa68:	e045      	b.n	800aaf6 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800aa6a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800aa6c:	8bfb      	ldrh	r3, [r7, #30]
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d21d      	bcs.n	800aaae <HAL_SPI_TransmitReceive+0x226>
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d018      	beq.n	800aaae <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681a      	ldr	r2, [r3, #0]
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa84:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800aa86:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa8c:	1d1a      	adds	r2, r3, #4
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aa98:	b29b      	uxth	r3, r3
 800aa9a:	3b01      	subs	r3, #1
 800aa9c:	b29a      	uxth	r2, r3
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aaaa:	853b      	strh	r3, [r7, #40]	@ 0x28
 800aaac:	e023      	b.n	800aaf6 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aaae:	f7f8 fc97 	bl	80033e0 <HAL_GetTick>
 800aab2:	4602      	mov	r2, r0
 800aab4:	69bb      	ldr	r3, [r7, #24]
 800aab6:	1ad3      	subs	r3, r2, r3
 800aab8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aaba:	429a      	cmp	r2, r3
 800aabc:	d803      	bhi.n	800aac6 <HAL_SPI_TransmitReceive+0x23e>
 800aabe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aac4:	d102      	bne.n	800aacc <HAL_SPI_TransmitReceive+0x244>
 800aac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d114      	bne.n	800aaf6 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800aacc:	68f8      	ldr	r0, [r7, #12]
 800aace:	f000 fa15 	bl	800aefc <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aad8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	2201      	movs	r2, #1
 800aae6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	2200      	movs	r2, #0
 800aaee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800aaf2:	2303      	movs	r3, #3
 800aaf4:	e1fd      	b.n	800aef2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800aaf6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	f47f af67 	bne.w	800a9cc <HAL_SPI_TransmitReceive+0x144>
 800aafe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	f47f af63 	bne.w	800a9cc <HAL_SPI_TransmitReceive+0x144>
 800ab06:	e1ce      	b.n	800aea6 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	68db      	ldr	r3, [r3, #12]
 800ab0c:	2b07      	cmp	r3, #7
 800ab0e:	f240 81c2 	bls.w	800ae96 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800ab12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab14:	085b      	lsrs	r3, r3, #1
 800ab16:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ab18:	e0c9      	b.n	800acae <HAL_SPI_TransmitReceive+0x426>
 800ab1a:	bf00      	nop
 800ab1c:	40013000 	.word	0x40013000
 800ab20:	40003800 	.word	0x40003800
 800ab24:	40003c00 	.word	0x40003c00
 800ab28:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	695b      	ldr	r3, [r3, #20]
 800ab32:	f003 0302 	and.w	r3, r3, #2
 800ab36:	2b02      	cmp	r3, #2
 800ab38:	d11f      	bne.n	800ab7a <HAL_SPI_TransmitReceive+0x2f2>
 800ab3a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d01c      	beq.n	800ab7a <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800ab40:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ab42:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800ab44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab46:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	d216      	bcs.n	800ab7a <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ab50:	881a      	ldrh	r2, [r3, #0]
 800ab52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab54:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ab5a:	1c9a      	adds	r2, r3, #2
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ab66:	b29b      	uxth	r3, r3
 800ab68:	3b01      	subs	r3, #1
 800ab6a:	b29a      	uxth	r2, r3
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ab78:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	695b      	ldr	r3, [r3, #20]
 800ab80:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800ab82:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	f000 8092 	beq.w	800acae <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	695b      	ldr	r3, [r3, #20]
 800ab90:	f003 0301 	and.w	r3, r3, #1
 800ab94:	2b01      	cmp	r3, #1
 800ab96:	d118      	bne.n	800abca <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab9c:	6a3a      	ldr	r2, [r7, #32]
 800ab9e:	8812      	ldrh	r2, [r2, #0]
 800aba0:	b292      	uxth	r2, r2
 800aba2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aba8:	1c9a      	adds	r2, r3, #2
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800abb4:	b29b      	uxth	r3, r3
 800abb6:	3b01      	subs	r3, #1
 800abb8:	b29a      	uxth	r2, r3
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800abc6:	853b      	strh	r3, [r7, #40]	@ 0x28
 800abc8:	e071      	b.n	800acae <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800abca:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800abcc:	8bfb      	ldrh	r3, [r7, #30]
 800abce:	429a      	cmp	r2, r3
 800abd0:	d228      	bcs.n	800ac24 <HAL_SPI_TransmitReceive+0x39c>
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d023      	beq.n	800ac24 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800abe0:	6a3a      	ldr	r2, [r7, #32]
 800abe2:	8812      	ldrh	r2, [r2, #0]
 800abe4:	b292      	uxth	r2, r2
 800abe6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800abec:	1c9a      	adds	r2, r3, #2
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800abf6:	6a3a      	ldr	r2, [r7, #32]
 800abf8:	8812      	ldrh	r2, [r2, #0]
 800abfa:	b292      	uxth	r2, r2
 800abfc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac02:	1c9a      	adds	r2, r3, #2
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ac0e:	b29b      	uxth	r3, r3
 800ac10:	3b02      	subs	r3, #2
 800ac12:	b29a      	uxth	r2, r3
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ac20:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ac22:	e044      	b.n	800acae <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800ac24:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ac26:	2b01      	cmp	r3, #1
 800ac28:	d11d      	bne.n	800ac66 <HAL_SPI_TransmitReceive+0x3de>
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d018      	beq.n	800ac66 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac38:	6a3a      	ldr	r2, [r7, #32]
 800ac3a:	8812      	ldrh	r2, [r2, #0]
 800ac3c:	b292      	uxth	r2, r2
 800ac3e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac44:	1c9a      	adds	r2, r3, #2
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ac50:	b29b      	uxth	r3, r3
 800ac52:	3b01      	subs	r3, #1
 800ac54:	b29a      	uxth	r2, r3
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ac62:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ac64:	e023      	b.n	800acae <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ac66:	f7f8 fbbb 	bl	80033e0 <HAL_GetTick>
 800ac6a:	4602      	mov	r2, r0
 800ac6c:	69bb      	ldr	r3, [r7, #24]
 800ac6e:	1ad3      	subs	r3, r2, r3
 800ac70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d803      	bhi.n	800ac7e <HAL_SPI_TransmitReceive+0x3f6>
 800ac76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac7c:	d102      	bne.n	800ac84 <HAL_SPI_TransmitReceive+0x3fc>
 800ac7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d114      	bne.n	800acae <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800ac84:	68f8      	ldr	r0, [r7, #12]
 800ac86:	f000 f939 	bl	800aefc <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac90:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	2200      	movs	r2, #0
 800aca6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800acaa:	2303      	movs	r3, #3
 800acac:	e121      	b.n	800aef2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800acae:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	f47f af3b 	bne.w	800ab2c <HAL_SPI_TransmitReceive+0x2a4>
 800acb6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800acb8:	2b00      	cmp	r3, #0
 800acba:	f47f af37 	bne.w	800ab2c <HAL_SPI_TransmitReceive+0x2a4>
 800acbe:	e0f2      	b.n	800aea6 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	695b      	ldr	r3, [r3, #20]
 800acc6:	f003 0302 	and.w	r3, r3, #2
 800acca:	2b02      	cmp	r3, #2
 800accc:	d121      	bne.n	800ad12 <HAL_SPI_TransmitReceive+0x48a>
 800acce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d01e      	beq.n	800ad12 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800acd4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800acd6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800acd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acda:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800acdc:	429a      	cmp	r2, r3
 800acde:	d218      	bcs.n	800ad12 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	3320      	adds	r3, #32
 800acea:	7812      	ldrb	r2, [r2, #0]
 800acec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800acf2:	1c5a      	adds	r2, r3, #1
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	3b01      	subs	r3, #1
 800ad02:	b29a      	uxth	r2, r3
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ad10:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	695b      	ldr	r3, [r3, #20]
 800ad18:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800ad1a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	f000 80ba 	beq.w	800ae96 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	695b      	ldr	r3, [r3, #20]
 800ad28:	f003 0301 	and.w	r3, r3, #1
 800ad2c:	2b01      	cmp	r3, #1
 800ad2e:	d11b      	bne.n	800ad68 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad3c:	7812      	ldrb	r2, [r2, #0]
 800ad3e:	b2d2      	uxtb	r2, r2
 800ad40:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad46:	1c5a      	adds	r2, r3, #1
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ad52:	b29b      	uxth	r3, r3
 800ad54:	3b01      	subs	r3, #1
 800ad56:	b29a      	uxth	r2, r3
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ad64:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ad66:	e096      	b.n	800ae96 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ad68:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ad6a:	8bfb      	ldrh	r3, [r7, #30]
 800ad6c:	429a      	cmp	r2, r3
 800ad6e:	d24a      	bcs.n	800ae06 <HAL_SPI_TransmitReceive+0x57e>
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d045      	beq.n	800ae06 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad86:	7812      	ldrb	r2, [r2, #0]
 800ad88:	b2d2      	uxtb	r2, r2
 800ad8a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad90:	1c5a      	adds	r2, r3, #1
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ada2:	7812      	ldrb	r2, [r2, #0]
 800ada4:	b2d2      	uxtb	r2, r2
 800ada6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800adac:	1c5a      	adds	r2, r3, #1
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800adbe:	7812      	ldrb	r2, [r2, #0]
 800adc0:	b2d2      	uxtb	r2, r2
 800adc2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800adc8:	1c5a      	adds	r2, r3, #1
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800adda:	7812      	ldrb	r2, [r2, #0]
 800addc:	b2d2      	uxtb	r2, r2
 800adde:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ade4:	1c5a      	adds	r2, r3, #1
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800adf0:	b29b      	uxth	r3, r3
 800adf2:	3b04      	subs	r3, #4
 800adf4:	b29a      	uxth	r2, r3
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ae02:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ae04:	e047      	b.n	800ae96 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800ae06:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ae08:	2b03      	cmp	r3, #3
 800ae0a:	d820      	bhi.n	800ae4e <HAL_SPI_TransmitReceive+0x5c6>
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d01b      	beq.n	800ae4e <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae22:	7812      	ldrb	r2, [r2, #0]
 800ae24:	b2d2      	uxtb	r2, r2
 800ae26:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae2c:	1c5a      	adds	r2, r3, #1
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ae38:	b29b      	uxth	r3, r3
 800ae3a:	3b01      	subs	r3, #1
 800ae3c:	b29a      	uxth	r2, r3
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ae4a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ae4c:	e023      	b.n	800ae96 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ae4e:	f7f8 fac7 	bl	80033e0 <HAL_GetTick>
 800ae52:	4602      	mov	r2, r0
 800ae54:	69bb      	ldr	r3, [r7, #24]
 800ae56:	1ad3      	subs	r3, r2, r3
 800ae58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	d803      	bhi.n	800ae66 <HAL_SPI_TransmitReceive+0x5de>
 800ae5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae64:	d102      	bne.n	800ae6c <HAL_SPI_TransmitReceive+0x5e4>
 800ae66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d114      	bne.n	800ae96 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800ae6c:	68f8      	ldr	r0, [r7, #12]
 800ae6e:	f000 f845 	bl	800aefc <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ae78:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	2201      	movs	r2, #1
 800ae86:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800ae92:	2303      	movs	r3, #3
 800ae94:	e02d      	b.n	800aef2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ae96:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	f47f af11 	bne.w	800acc0 <HAL_SPI_TransmitReceive+0x438>
 800ae9e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	f47f af0d 	bne.w	800acc0 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800aea6:	69bb      	ldr	r3, [r7, #24]
 800aea8:	9300      	str	r3, [sp, #0]
 800aeaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeac:	2200      	movs	r2, #0
 800aeae:	2108      	movs	r1, #8
 800aeb0:	68f8      	ldr	r0, [r7, #12]
 800aeb2:	f000 f8c3 	bl	800b03c <SPI_WaitOnFlagUntilTimeout>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d007      	beq.n	800aecc <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aec2:	f043 0220 	orr.w	r2, r3, #32
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800aecc:	68f8      	ldr	r0, [r7, #12]
 800aece:	f000 f815 	bl	800aefc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2201      	movs	r2, #1
 800aed6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	2200      	movs	r2, #0
 800aede:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d001      	beq.n	800aef0 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800aeec:	2301      	movs	r3, #1
 800aeee:	e000      	b.n	800aef2 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800aef0:	2300      	movs	r3, #0
  }
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3730      	adds	r7, #48	@ 0x30
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}
 800aefa:	bf00      	nop

0800aefc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b085      	sub	sp, #20
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	695b      	ldr	r3, [r3, #20]
 800af0a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	699a      	ldr	r2, [r3, #24]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f042 0208 	orr.w	r2, r2, #8
 800af1a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	699a      	ldr	r2, [r3, #24]
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f042 0210 	orr.w	r2, r2, #16
 800af2a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	681a      	ldr	r2, [r3, #0]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f022 0201 	bic.w	r2, r2, #1
 800af3a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	6919      	ldr	r1, [r3, #16]
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681a      	ldr	r2, [r3, #0]
 800af46:	4b3c      	ldr	r3, [pc, #240]	@ (800b038 <SPI_CloseTransfer+0x13c>)
 800af48:	400b      	ands	r3, r1
 800af4a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	689a      	ldr	r2, [r3, #8]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800af5a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800af62:	b2db      	uxtb	r3, r3
 800af64:	2b04      	cmp	r3, #4
 800af66:	d014      	beq.n	800af92 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	f003 0320 	and.w	r3, r3, #32
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d00f      	beq.n	800af92 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af78:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	699a      	ldr	r2, [r3, #24]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	f042 0220 	orr.w	r2, r2, #32
 800af90:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800af98:	b2db      	uxtb	r3, r3
 800af9a:	2b03      	cmp	r3, #3
 800af9c:	d014      	beq.n	800afc8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d00f      	beq.n	800afc8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800afae:	f043 0204 	orr.w	r2, r3, #4
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	699a      	ldr	r2, [r3, #24]
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800afc6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d00f      	beq.n	800aff2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800afd8:	f043 0201 	orr.w	r2, r3, #1
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	699a      	ldr	r2, [r3, #24]
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aff0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d00f      	beq.n	800b01c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b002:	f043 0208 	orr.w	r2, r3, #8
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	699a      	ldr	r2, [r3, #24]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b01a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2200      	movs	r2, #0
 800b020:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2200      	movs	r2, #0
 800b028:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800b02c:	bf00      	nop
 800b02e:	3714      	adds	r7, #20
 800b030:	46bd      	mov	sp, r7
 800b032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b036:	4770      	bx	lr
 800b038:	fffffc90 	.word	0xfffffc90

0800b03c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b084      	sub	sp, #16
 800b040:	af00      	add	r7, sp, #0
 800b042:	60f8      	str	r0, [r7, #12]
 800b044:	60b9      	str	r1, [r7, #8]
 800b046:	603b      	str	r3, [r7, #0]
 800b048:	4613      	mov	r3, r2
 800b04a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b04c:	e010      	b.n	800b070 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b04e:	f7f8 f9c7 	bl	80033e0 <HAL_GetTick>
 800b052:	4602      	mov	r2, r0
 800b054:	69bb      	ldr	r3, [r7, #24]
 800b056:	1ad3      	subs	r3, r2, r3
 800b058:	683a      	ldr	r2, [r7, #0]
 800b05a:	429a      	cmp	r2, r3
 800b05c:	d803      	bhi.n	800b066 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b064:	d102      	bne.n	800b06c <SPI_WaitOnFlagUntilTimeout+0x30>
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d101      	bne.n	800b070 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800b06c:	2303      	movs	r3, #3
 800b06e:	e00f      	b.n	800b090 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	695a      	ldr	r2, [r3, #20]
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	4013      	ands	r3, r2
 800b07a:	68ba      	ldr	r2, [r7, #8]
 800b07c:	429a      	cmp	r2, r3
 800b07e:	bf0c      	ite	eq
 800b080:	2301      	moveq	r3, #1
 800b082:	2300      	movne	r3, #0
 800b084:	b2db      	uxtb	r3, r3
 800b086:	461a      	mov	r2, r3
 800b088:	79fb      	ldrb	r3, [r7, #7]
 800b08a:	429a      	cmp	r2, r3
 800b08c:	d0df      	beq.n	800b04e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800b08e:	2300      	movs	r3, #0
}
 800b090:	4618      	mov	r0, r3
 800b092:	3710      	adds	r7, #16
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}

0800b098 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800b098:	b480      	push	{r7}
 800b09a:	b085      	sub	sp, #20
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0a4:	095b      	lsrs	r3, r3, #5
 800b0a6:	3301      	adds	r3, #1
 800b0a8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	68db      	ldr	r3, [r3, #12]
 800b0ae:	3301      	adds	r3, #1
 800b0b0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	3307      	adds	r3, #7
 800b0b6:	08db      	lsrs	r3, r3, #3
 800b0b8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	68fa      	ldr	r2, [r7, #12]
 800b0be:	fb02 f303 	mul.w	r3, r2, r3
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3714      	adds	r7, #20
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0cc:	4770      	bx	lr

0800b0ce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b0ce:	b580      	push	{r7, lr}
 800b0d0:	b082      	sub	sp, #8
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d101      	bne.n	800b0e0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b0dc:	2301      	movs	r3, #1
 800b0de:	e049      	b.n	800b174 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d106      	bne.n	800b0fa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f7f7 fdaf 	bl	8002c58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2202      	movs	r2, #2
 800b0fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681a      	ldr	r2, [r3, #0]
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	3304      	adds	r3, #4
 800b10a:	4619      	mov	r1, r3
 800b10c:	4610      	mov	r0, r2
 800b10e:	f000 fc57 	bl	800b9c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2201      	movs	r2, #1
 800b116:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2201      	movs	r2, #1
 800b11e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2201      	movs	r2, #1
 800b126:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2201      	movs	r2, #1
 800b12e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2201      	movs	r2, #1
 800b136:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2201      	movs	r2, #1
 800b13e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2201      	movs	r2, #1
 800b146:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2201      	movs	r2, #1
 800b14e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2201      	movs	r2, #1
 800b156:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2201      	movs	r2, #1
 800b15e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2201      	movs	r2, #1
 800b166:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2201      	movs	r2, #1
 800b16e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b172:	2300      	movs	r3, #0
}
 800b174:	4618      	mov	r0, r3
 800b176:	3708      	adds	r7, #8
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}

0800b17c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b17c:	b480      	push	{r7}
 800b17e:	b085      	sub	sp, #20
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b18a:	b2db      	uxtb	r3, r3
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	d001      	beq.n	800b194 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b190:	2301      	movs	r3, #1
 800b192:	e054      	b.n	800b23e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2202      	movs	r2, #2
 800b198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	68da      	ldr	r2, [r3, #12]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f042 0201 	orr.w	r2, r2, #1
 800b1aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	4a26      	ldr	r2, [pc, #152]	@ (800b24c <HAL_TIM_Base_Start_IT+0xd0>)
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d022      	beq.n	800b1fc <HAL_TIM_Base_Start_IT+0x80>
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1be:	d01d      	beq.n	800b1fc <HAL_TIM_Base_Start_IT+0x80>
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	4a22      	ldr	r2, [pc, #136]	@ (800b250 <HAL_TIM_Base_Start_IT+0xd4>)
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	d018      	beq.n	800b1fc <HAL_TIM_Base_Start_IT+0x80>
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	4a21      	ldr	r2, [pc, #132]	@ (800b254 <HAL_TIM_Base_Start_IT+0xd8>)
 800b1d0:	4293      	cmp	r3, r2
 800b1d2:	d013      	beq.n	800b1fc <HAL_TIM_Base_Start_IT+0x80>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	4a1f      	ldr	r2, [pc, #124]	@ (800b258 <HAL_TIM_Base_Start_IT+0xdc>)
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	d00e      	beq.n	800b1fc <HAL_TIM_Base_Start_IT+0x80>
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	4a1e      	ldr	r2, [pc, #120]	@ (800b25c <HAL_TIM_Base_Start_IT+0xe0>)
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d009      	beq.n	800b1fc <HAL_TIM_Base_Start_IT+0x80>
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	4a1c      	ldr	r2, [pc, #112]	@ (800b260 <HAL_TIM_Base_Start_IT+0xe4>)
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d004      	beq.n	800b1fc <HAL_TIM_Base_Start_IT+0x80>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	4a1b      	ldr	r2, [pc, #108]	@ (800b264 <HAL_TIM_Base_Start_IT+0xe8>)
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d115      	bne.n	800b228 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	689a      	ldr	r2, [r3, #8]
 800b202:	4b19      	ldr	r3, [pc, #100]	@ (800b268 <HAL_TIM_Base_Start_IT+0xec>)
 800b204:	4013      	ands	r3, r2
 800b206:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	2b06      	cmp	r3, #6
 800b20c:	d015      	beq.n	800b23a <HAL_TIM_Base_Start_IT+0xbe>
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b214:	d011      	beq.n	800b23a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	681a      	ldr	r2, [r3, #0]
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f042 0201 	orr.w	r2, r2, #1
 800b224:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b226:	e008      	b.n	800b23a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	681a      	ldr	r2, [r3, #0]
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f042 0201 	orr.w	r2, r2, #1
 800b236:	601a      	str	r2, [r3, #0]
 800b238:	e000      	b.n	800b23c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b23a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b23c:	2300      	movs	r3, #0
}
 800b23e:	4618      	mov	r0, r3
 800b240:	3714      	adds	r7, #20
 800b242:	46bd      	mov	sp, r7
 800b244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b248:	4770      	bx	lr
 800b24a:	bf00      	nop
 800b24c:	40010000 	.word	0x40010000
 800b250:	40000400 	.word	0x40000400
 800b254:	40000800 	.word	0x40000800
 800b258:	40000c00 	.word	0x40000c00
 800b25c:	40010400 	.word	0x40010400
 800b260:	40001800 	.word	0x40001800
 800b264:	40014000 	.word	0x40014000
 800b268:	00010007 	.word	0x00010007

0800b26c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b082      	sub	sp, #8
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d101      	bne.n	800b27e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b27a:	2301      	movs	r3, #1
 800b27c:	e049      	b.n	800b312 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b284:	b2db      	uxtb	r3, r3
 800b286:	2b00      	cmp	r3, #0
 800b288:	d106      	bne.n	800b298 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2200      	movs	r2, #0
 800b28e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f7f7 fc92 	bl	8002bbc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2202      	movs	r2, #2
 800b29c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681a      	ldr	r2, [r3, #0]
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	3304      	adds	r3, #4
 800b2a8:	4619      	mov	r1, r3
 800b2aa:	4610      	mov	r0, r2
 800b2ac:	f000 fb88 	bl	800b9c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2201      	movs	r2, #1
 800b2b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2201      	movs	r2, #1
 800b2c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2201      	movs	r2, #1
 800b2d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2201      	movs	r2, #1
 800b2dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2201      	movs	r2, #1
 800b2f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2201      	movs	r2, #1
 800b2fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2201      	movs	r2, #1
 800b304:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2201      	movs	r2, #1
 800b30c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b310:	2300      	movs	r3, #0
}
 800b312:	4618      	mov	r0, r3
 800b314:	3708      	adds	r7, #8
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}
	...

0800b31c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b084      	sub	sp, #16
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
 800b324:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d109      	bne.n	800b340 <HAL_TIM_PWM_Start+0x24>
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b332:	b2db      	uxtb	r3, r3
 800b334:	2b01      	cmp	r3, #1
 800b336:	bf14      	ite	ne
 800b338:	2301      	movne	r3, #1
 800b33a:	2300      	moveq	r3, #0
 800b33c:	b2db      	uxtb	r3, r3
 800b33e:	e03c      	b.n	800b3ba <HAL_TIM_PWM_Start+0x9e>
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	2b04      	cmp	r3, #4
 800b344:	d109      	bne.n	800b35a <HAL_TIM_PWM_Start+0x3e>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b34c:	b2db      	uxtb	r3, r3
 800b34e:	2b01      	cmp	r3, #1
 800b350:	bf14      	ite	ne
 800b352:	2301      	movne	r3, #1
 800b354:	2300      	moveq	r3, #0
 800b356:	b2db      	uxtb	r3, r3
 800b358:	e02f      	b.n	800b3ba <HAL_TIM_PWM_Start+0x9e>
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	2b08      	cmp	r3, #8
 800b35e:	d109      	bne.n	800b374 <HAL_TIM_PWM_Start+0x58>
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b366:	b2db      	uxtb	r3, r3
 800b368:	2b01      	cmp	r3, #1
 800b36a:	bf14      	ite	ne
 800b36c:	2301      	movne	r3, #1
 800b36e:	2300      	moveq	r3, #0
 800b370:	b2db      	uxtb	r3, r3
 800b372:	e022      	b.n	800b3ba <HAL_TIM_PWM_Start+0x9e>
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	2b0c      	cmp	r3, #12
 800b378:	d109      	bne.n	800b38e <HAL_TIM_PWM_Start+0x72>
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b380:	b2db      	uxtb	r3, r3
 800b382:	2b01      	cmp	r3, #1
 800b384:	bf14      	ite	ne
 800b386:	2301      	movne	r3, #1
 800b388:	2300      	moveq	r3, #0
 800b38a:	b2db      	uxtb	r3, r3
 800b38c:	e015      	b.n	800b3ba <HAL_TIM_PWM_Start+0x9e>
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	2b10      	cmp	r3, #16
 800b392:	d109      	bne.n	800b3a8 <HAL_TIM_PWM_Start+0x8c>
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b39a:	b2db      	uxtb	r3, r3
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	bf14      	ite	ne
 800b3a0:	2301      	movne	r3, #1
 800b3a2:	2300      	moveq	r3, #0
 800b3a4:	b2db      	uxtb	r3, r3
 800b3a6:	e008      	b.n	800b3ba <HAL_TIM_PWM_Start+0x9e>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b3ae:	b2db      	uxtb	r3, r3
 800b3b0:	2b01      	cmp	r3, #1
 800b3b2:	bf14      	ite	ne
 800b3b4:	2301      	movne	r3, #1
 800b3b6:	2300      	moveq	r3, #0
 800b3b8:	b2db      	uxtb	r3, r3
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d001      	beq.n	800b3c2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b3be:	2301      	movs	r3, #1
 800b3c0:	e0a1      	b.n	800b506 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d104      	bne.n	800b3d2 <HAL_TIM_PWM_Start+0xb6>
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2202      	movs	r2, #2
 800b3cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b3d0:	e023      	b.n	800b41a <HAL_TIM_PWM_Start+0xfe>
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	2b04      	cmp	r3, #4
 800b3d6:	d104      	bne.n	800b3e2 <HAL_TIM_PWM_Start+0xc6>
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2202      	movs	r2, #2
 800b3dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b3e0:	e01b      	b.n	800b41a <HAL_TIM_PWM_Start+0xfe>
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	2b08      	cmp	r3, #8
 800b3e6:	d104      	bne.n	800b3f2 <HAL_TIM_PWM_Start+0xd6>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2202      	movs	r2, #2
 800b3ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b3f0:	e013      	b.n	800b41a <HAL_TIM_PWM_Start+0xfe>
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	2b0c      	cmp	r3, #12
 800b3f6:	d104      	bne.n	800b402 <HAL_TIM_PWM_Start+0xe6>
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2202      	movs	r2, #2
 800b3fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b400:	e00b      	b.n	800b41a <HAL_TIM_PWM_Start+0xfe>
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	2b10      	cmp	r3, #16
 800b406:	d104      	bne.n	800b412 <HAL_TIM_PWM_Start+0xf6>
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2202      	movs	r2, #2
 800b40c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b410:	e003      	b.n	800b41a <HAL_TIM_PWM_Start+0xfe>
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2202      	movs	r2, #2
 800b416:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	2201      	movs	r2, #1
 800b420:	6839      	ldr	r1, [r7, #0]
 800b422:	4618      	mov	r0, r3
 800b424:	f000 fe48 	bl	800c0b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	4a38      	ldr	r2, [pc, #224]	@ (800b510 <HAL_TIM_PWM_Start+0x1f4>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d013      	beq.n	800b45a <HAL_TIM_PWM_Start+0x13e>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	4a37      	ldr	r2, [pc, #220]	@ (800b514 <HAL_TIM_PWM_Start+0x1f8>)
 800b438:	4293      	cmp	r3, r2
 800b43a:	d00e      	beq.n	800b45a <HAL_TIM_PWM_Start+0x13e>
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4a35      	ldr	r2, [pc, #212]	@ (800b518 <HAL_TIM_PWM_Start+0x1fc>)
 800b442:	4293      	cmp	r3, r2
 800b444:	d009      	beq.n	800b45a <HAL_TIM_PWM_Start+0x13e>
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4a34      	ldr	r2, [pc, #208]	@ (800b51c <HAL_TIM_PWM_Start+0x200>)
 800b44c:	4293      	cmp	r3, r2
 800b44e:	d004      	beq.n	800b45a <HAL_TIM_PWM_Start+0x13e>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	4a32      	ldr	r2, [pc, #200]	@ (800b520 <HAL_TIM_PWM_Start+0x204>)
 800b456:	4293      	cmp	r3, r2
 800b458:	d101      	bne.n	800b45e <HAL_TIM_PWM_Start+0x142>
 800b45a:	2301      	movs	r3, #1
 800b45c:	e000      	b.n	800b460 <HAL_TIM_PWM_Start+0x144>
 800b45e:	2300      	movs	r3, #0
 800b460:	2b00      	cmp	r3, #0
 800b462:	d007      	beq.n	800b474 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b472:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	4a25      	ldr	r2, [pc, #148]	@ (800b510 <HAL_TIM_PWM_Start+0x1f4>)
 800b47a:	4293      	cmp	r3, r2
 800b47c:	d022      	beq.n	800b4c4 <HAL_TIM_PWM_Start+0x1a8>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b486:	d01d      	beq.n	800b4c4 <HAL_TIM_PWM_Start+0x1a8>
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	4a25      	ldr	r2, [pc, #148]	@ (800b524 <HAL_TIM_PWM_Start+0x208>)
 800b48e:	4293      	cmp	r3, r2
 800b490:	d018      	beq.n	800b4c4 <HAL_TIM_PWM_Start+0x1a8>
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	4a24      	ldr	r2, [pc, #144]	@ (800b528 <HAL_TIM_PWM_Start+0x20c>)
 800b498:	4293      	cmp	r3, r2
 800b49a:	d013      	beq.n	800b4c4 <HAL_TIM_PWM_Start+0x1a8>
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	4a22      	ldr	r2, [pc, #136]	@ (800b52c <HAL_TIM_PWM_Start+0x210>)
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	d00e      	beq.n	800b4c4 <HAL_TIM_PWM_Start+0x1a8>
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	4a1a      	ldr	r2, [pc, #104]	@ (800b514 <HAL_TIM_PWM_Start+0x1f8>)
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d009      	beq.n	800b4c4 <HAL_TIM_PWM_Start+0x1a8>
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	4a1e      	ldr	r2, [pc, #120]	@ (800b530 <HAL_TIM_PWM_Start+0x214>)
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	d004      	beq.n	800b4c4 <HAL_TIM_PWM_Start+0x1a8>
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	4a16      	ldr	r2, [pc, #88]	@ (800b518 <HAL_TIM_PWM_Start+0x1fc>)
 800b4c0:	4293      	cmp	r3, r2
 800b4c2:	d115      	bne.n	800b4f0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	689a      	ldr	r2, [r3, #8]
 800b4ca:	4b1a      	ldr	r3, [pc, #104]	@ (800b534 <HAL_TIM_PWM_Start+0x218>)
 800b4cc:	4013      	ands	r3, r2
 800b4ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	2b06      	cmp	r3, #6
 800b4d4:	d015      	beq.n	800b502 <HAL_TIM_PWM_Start+0x1e6>
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b4dc:	d011      	beq.n	800b502 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	681a      	ldr	r2, [r3, #0]
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f042 0201 	orr.w	r2, r2, #1
 800b4ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4ee:	e008      	b.n	800b502 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	681a      	ldr	r2, [r3, #0]
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f042 0201 	orr.w	r2, r2, #1
 800b4fe:	601a      	str	r2, [r3, #0]
 800b500:	e000      	b.n	800b504 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b502:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b504:	2300      	movs	r3, #0
}
 800b506:	4618      	mov	r0, r3
 800b508:	3710      	adds	r7, #16
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}
 800b50e:	bf00      	nop
 800b510:	40010000 	.word	0x40010000
 800b514:	40010400 	.word	0x40010400
 800b518:	40014000 	.word	0x40014000
 800b51c:	40014400 	.word	0x40014400
 800b520:	40014800 	.word	0x40014800
 800b524:	40000400 	.word	0x40000400
 800b528:	40000800 	.word	0x40000800
 800b52c:	40000c00 	.word	0x40000c00
 800b530:	40001800 	.word	0x40001800
 800b534:	00010007 	.word	0x00010007

0800b538 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b084      	sub	sp, #16
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	68db      	ldr	r3, [r3, #12]
 800b546:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	691b      	ldr	r3, [r3, #16]
 800b54e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	f003 0302 	and.w	r3, r3, #2
 800b556:	2b00      	cmp	r3, #0
 800b558:	d020      	beq.n	800b59c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	f003 0302 	and.w	r3, r3, #2
 800b560:	2b00      	cmp	r3, #0
 800b562:	d01b      	beq.n	800b59c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f06f 0202 	mvn.w	r2, #2
 800b56c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2201      	movs	r2, #1
 800b572:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	699b      	ldr	r3, [r3, #24]
 800b57a:	f003 0303 	and.w	r3, r3, #3
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d003      	beq.n	800b58a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f000 f9fe 	bl	800b984 <HAL_TIM_IC_CaptureCallback>
 800b588:	e005      	b.n	800b596 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f000 f9f0 	bl	800b970 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f000 fa01 	bl	800b998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2200      	movs	r2, #0
 800b59a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	f003 0304 	and.w	r3, r3, #4
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d020      	beq.n	800b5e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	f003 0304 	and.w	r3, r3, #4
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d01b      	beq.n	800b5e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	f06f 0204 	mvn.w	r2, #4
 800b5b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2202      	movs	r2, #2
 800b5be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	699b      	ldr	r3, [r3, #24]
 800b5c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d003      	beq.n	800b5d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f000 f9d8 	bl	800b984 <HAL_TIM_IC_CaptureCallback>
 800b5d4:	e005      	b.n	800b5e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f000 f9ca 	bl	800b970 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f000 f9db 	bl	800b998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	f003 0308 	and.w	r3, r3, #8
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d020      	beq.n	800b634 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	f003 0308 	and.w	r3, r3, #8
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d01b      	beq.n	800b634 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f06f 0208 	mvn.w	r2, #8
 800b604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2204      	movs	r2, #4
 800b60a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	69db      	ldr	r3, [r3, #28]
 800b612:	f003 0303 	and.w	r3, r3, #3
 800b616:	2b00      	cmp	r3, #0
 800b618:	d003      	beq.n	800b622 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f000 f9b2 	bl	800b984 <HAL_TIM_IC_CaptureCallback>
 800b620:	e005      	b.n	800b62e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f000 f9a4 	bl	800b970 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f000 f9b5 	bl	800b998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2200      	movs	r2, #0
 800b632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	f003 0310 	and.w	r3, r3, #16
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d020      	beq.n	800b680 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	f003 0310 	and.w	r3, r3, #16
 800b644:	2b00      	cmp	r3, #0
 800b646:	d01b      	beq.n	800b680 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	f06f 0210 	mvn.w	r2, #16
 800b650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2208      	movs	r2, #8
 800b656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	69db      	ldr	r3, [r3, #28]
 800b65e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b662:	2b00      	cmp	r3, #0
 800b664:	d003      	beq.n	800b66e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f000 f98c 	bl	800b984 <HAL_TIM_IC_CaptureCallback>
 800b66c:	e005      	b.n	800b67a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f000 f97e 	bl	800b970 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f000 f98f 	bl	800b998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2200      	movs	r2, #0
 800b67e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	f003 0301 	and.w	r3, r3, #1
 800b686:	2b00      	cmp	r3, #0
 800b688:	d00c      	beq.n	800b6a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	f003 0301 	and.w	r3, r3, #1
 800b690:	2b00      	cmp	r3, #0
 800b692:	d007      	beq.n	800b6a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f06f 0201 	mvn.w	r2, #1
 800b69c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f7f6 fd88 	bl	80021b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d104      	bne.n	800b6b8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d00c      	beq.n	800b6d2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d007      	beq.n	800b6d2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b6ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f000 fdb1 	bl	800c234 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d00c      	beq.n	800b6f6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d007      	beq.n	800b6f6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b6ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f000 fda9 	bl	800c248 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d00c      	beq.n	800b71a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b706:	2b00      	cmp	r3, #0
 800b708:	d007      	beq.n	800b71a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b712:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f000 f949 	bl	800b9ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	f003 0320 	and.w	r3, r3, #32
 800b720:	2b00      	cmp	r3, #0
 800b722:	d00c      	beq.n	800b73e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	f003 0320 	and.w	r3, r3, #32
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d007      	beq.n	800b73e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f06f 0220 	mvn.w	r2, #32
 800b736:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f000 fd71 	bl	800c220 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b73e:	bf00      	nop
 800b740:	3710      	adds	r7, #16
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}
	...

0800b748 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b086      	sub	sp, #24
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	60f8      	str	r0, [r7, #12]
 800b750:	60b9      	str	r1, [r7, #8]
 800b752:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b754:	2300      	movs	r3, #0
 800b756:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b75e:	2b01      	cmp	r3, #1
 800b760:	d101      	bne.n	800b766 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b762:	2302      	movs	r3, #2
 800b764:	e0ff      	b.n	800b966 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	2201      	movs	r2, #1
 800b76a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2b14      	cmp	r3, #20
 800b772:	f200 80f0 	bhi.w	800b956 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b776:	a201      	add	r2, pc, #4	@ (adr r2, 800b77c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b77c:	0800b7d1 	.word	0x0800b7d1
 800b780:	0800b957 	.word	0x0800b957
 800b784:	0800b957 	.word	0x0800b957
 800b788:	0800b957 	.word	0x0800b957
 800b78c:	0800b811 	.word	0x0800b811
 800b790:	0800b957 	.word	0x0800b957
 800b794:	0800b957 	.word	0x0800b957
 800b798:	0800b957 	.word	0x0800b957
 800b79c:	0800b853 	.word	0x0800b853
 800b7a0:	0800b957 	.word	0x0800b957
 800b7a4:	0800b957 	.word	0x0800b957
 800b7a8:	0800b957 	.word	0x0800b957
 800b7ac:	0800b893 	.word	0x0800b893
 800b7b0:	0800b957 	.word	0x0800b957
 800b7b4:	0800b957 	.word	0x0800b957
 800b7b8:	0800b957 	.word	0x0800b957
 800b7bc:	0800b8d5 	.word	0x0800b8d5
 800b7c0:	0800b957 	.word	0x0800b957
 800b7c4:	0800b957 	.word	0x0800b957
 800b7c8:	0800b957 	.word	0x0800b957
 800b7cc:	0800b915 	.word	0x0800b915
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	68b9      	ldr	r1, [r7, #8]
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f000 f998 	bl	800bb0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	699a      	ldr	r2, [r3, #24]
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	f042 0208 	orr.w	r2, r2, #8
 800b7ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	699a      	ldr	r2, [r3, #24]
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f022 0204 	bic.w	r2, r2, #4
 800b7fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	6999      	ldr	r1, [r3, #24]
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	691a      	ldr	r2, [r3, #16]
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	430a      	orrs	r2, r1
 800b80c:	619a      	str	r2, [r3, #24]
      break;
 800b80e:	e0a5      	b.n	800b95c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	68b9      	ldr	r1, [r7, #8]
 800b816:	4618      	mov	r0, r3
 800b818:	f000 fa08 	bl	800bc2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	699a      	ldr	r2, [r3, #24]
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b82a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	699a      	ldr	r2, [r3, #24]
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b83a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	6999      	ldr	r1, [r3, #24]
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	691b      	ldr	r3, [r3, #16]
 800b846:	021a      	lsls	r2, r3, #8
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	430a      	orrs	r2, r1
 800b84e:	619a      	str	r2, [r3, #24]
      break;
 800b850:	e084      	b.n	800b95c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	68b9      	ldr	r1, [r7, #8]
 800b858:	4618      	mov	r0, r3
 800b85a:	f000 fa71 	bl	800bd40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	69da      	ldr	r2, [r3, #28]
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f042 0208 	orr.w	r2, r2, #8
 800b86c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	69da      	ldr	r2, [r3, #28]
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f022 0204 	bic.w	r2, r2, #4
 800b87c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	69d9      	ldr	r1, [r3, #28]
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	691a      	ldr	r2, [r3, #16]
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	430a      	orrs	r2, r1
 800b88e:	61da      	str	r2, [r3, #28]
      break;
 800b890:	e064      	b.n	800b95c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	68b9      	ldr	r1, [r7, #8]
 800b898:	4618      	mov	r0, r3
 800b89a:	f000 fad9 	bl	800be50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	69da      	ldr	r2, [r3, #28]
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b8ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	69da      	ldr	r2, [r3, #28]
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b8bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	69d9      	ldr	r1, [r3, #28]
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	691b      	ldr	r3, [r3, #16]
 800b8c8:	021a      	lsls	r2, r3, #8
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	430a      	orrs	r2, r1
 800b8d0:	61da      	str	r2, [r3, #28]
      break;
 800b8d2:	e043      	b.n	800b95c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	68b9      	ldr	r1, [r7, #8]
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f000 fb22 	bl	800bf24 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f042 0208 	orr.w	r2, r2, #8
 800b8ee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f022 0204 	bic.w	r2, r2, #4
 800b8fe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	691a      	ldr	r2, [r3, #16]
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	430a      	orrs	r2, r1
 800b910:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b912:	e023      	b.n	800b95c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	68b9      	ldr	r1, [r7, #8]
 800b91a:	4618      	mov	r0, r3
 800b91c:	f000 fb66 	bl	800bfec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b92e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b93e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	691b      	ldr	r3, [r3, #16]
 800b94a:	021a      	lsls	r2, r3, #8
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	430a      	orrs	r2, r1
 800b952:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b954:	e002      	b.n	800b95c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b956:	2301      	movs	r3, #1
 800b958:	75fb      	strb	r3, [r7, #23]
      break;
 800b95a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	2200      	movs	r2, #0
 800b960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b964:	7dfb      	ldrb	r3, [r7, #23]
}
 800b966:	4618      	mov	r0, r3
 800b968:	3718      	adds	r7, #24
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}
 800b96e:	bf00      	nop

0800b970 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b970:	b480      	push	{r7}
 800b972:	b083      	sub	sp, #12
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b978:	bf00      	nop
 800b97a:	370c      	adds	r7, #12
 800b97c:	46bd      	mov	sp, r7
 800b97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b982:	4770      	bx	lr

0800b984 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b984:	b480      	push	{r7}
 800b986:	b083      	sub	sp, #12
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b98c:	bf00      	nop
 800b98e:	370c      	adds	r7, #12
 800b990:	46bd      	mov	sp, r7
 800b992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b996:	4770      	bx	lr

0800b998 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b998:	b480      	push	{r7}
 800b99a:	b083      	sub	sp, #12
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b9a0:	bf00      	nop
 800b9a2:	370c      	adds	r7, #12
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9aa:	4770      	bx	lr

0800b9ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b083      	sub	sp, #12
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b9b4:	bf00      	nop
 800b9b6:	370c      	adds	r7, #12
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr

0800b9c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b085      	sub	sp, #20
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	4a46      	ldr	r2, [pc, #280]	@ (800baec <TIM_Base_SetConfig+0x12c>)
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	d013      	beq.n	800ba00 <TIM_Base_SetConfig+0x40>
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9de:	d00f      	beq.n	800ba00 <TIM_Base_SetConfig+0x40>
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	4a43      	ldr	r2, [pc, #268]	@ (800baf0 <TIM_Base_SetConfig+0x130>)
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	d00b      	beq.n	800ba00 <TIM_Base_SetConfig+0x40>
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	4a42      	ldr	r2, [pc, #264]	@ (800baf4 <TIM_Base_SetConfig+0x134>)
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	d007      	beq.n	800ba00 <TIM_Base_SetConfig+0x40>
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	4a41      	ldr	r2, [pc, #260]	@ (800baf8 <TIM_Base_SetConfig+0x138>)
 800b9f4:	4293      	cmp	r3, r2
 800b9f6:	d003      	beq.n	800ba00 <TIM_Base_SetConfig+0x40>
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	4a40      	ldr	r2, [pc, #256]	@ (800bafc <TIM_Base_SetConfig+0x13c>)
 800b9fc:	4293      	cmp	r3, r2
 800b9fe:	d108      	bne.n	800ba12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	685b      	ldr	r3, [r3, #4]
 800ba0c:	68fa      	ldr	r2, [r7, #12]
 800ba0e:	4313      	orrs	r3, r2
 800ba10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	4a35      	ldr	r2, [pc, #212]	@ (800baec <TIM_Base_SetConfig+0x12c>)
 800ba16:	4293      	cmp	r3, r2
 800ba18:	d01f      	beq.n	800ba5a <TIM_Base_SetConfig+0x9a>
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba20:	d01b      	beq.n	800ba5a <TIM_Base_SetConfig+0x9a>
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	4a32      	ldr	r2, [pc, #200]	@ (800baf0 <TIM_Base_SetConfig+0x130>)
 800ba26:	4293      	cmp	r3, r2
 800ba28:	d017      	beq.n	800ba5a <TIM_Base_SetConfig+0x9a>
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	4a31      	ldr	r2, [pc, #196]	@ (800baf4 <TIM_Base_SetConfig+0x134>)
 800ba2e:	4293      	cmp	r3, r2
 800ba30:	d013      	beq.n	800ba5a <TIM_Base_SetConfig+0x9a>
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	4a30      	ldr	r2, [pc, #192]	@ (800baf8 <TIM_Base_SetConfig+0x138>)
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d00f      	beq.n	800ba5a <TIM_Base_SetConfig+0x9a>
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	4a2f      	ldr	r2, [pc, #188]	@ (800bafc <TIM_Base_SetConfig+0x13c>)
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	d00b      	beq.n	800ba5a <TIM_Base_SetConfig+0x9a>
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	4a2e      	ldr	r2, [pc, #184]	@ (800bb00 <TIM_Base_SetConfig+0x140>)
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d007      	beq.n	800ba5a <TIM_Base_SetConfig+0x9a>
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	4a2d      	ldr	r2, [pc, #180]	@ (800bb04 <TIM_Base_SetConfig+0x144>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d003      	beq.n	800ba5a <TIM_Base_SetConfig+0x9a>
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	4a2c      	ldr	r2, [pc, #176]	@ (800bb08 <TIM_Base_SetConfig+0x148>)
 800ba56:	4293      	cmp	r3, r2
 800ba58:	d108      	bne.n	800ba6c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ba60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	68db      	ldr	r3, [r3, #12]
 800ba66:	68fa      	ldr	r2, [r7, #12]
 800ba68:	4313      	orrs	r3, r2
 800ba6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	695b      	ldr	r3, [r3, #20]
 800ba76:	4313      	orrs	r3, r2
 800ba78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	68fa      	ldr	r2, [r7, #12]
 800ba7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	689a      	ldr	r2, [r3, #8]
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	681a      	ldr	r2, [r3, #0]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	4a16      	ldr	r2, [pc, #88]	@ (800baec <TIM_Base_SetConfig+0x12c>)
 800ba94:	4293      	cmp	r3, r2
 800ba96:	d00f      	beq.n	800bab8 <TIM_Base_SetConfig+0xf8>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	4a18      	ldr	r2, [pc, #96]	@ (800bafc <TIM_Base_SetConfig+0x13c>)
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d00b      	beq.n	800bab8 <TIM_Base_SetConfig+0xf8>
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	4a17      	ldr	r2, [pc, #92]	@ (800bb00 <TIM_Base_SetConfig+0x140>)
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d007      	beq.n	800bab8 <TIM_Base_SetConfig+0xf8>
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	4a16      	ldr	r2, [pc, #88]	@ (800bb04 <TIM_Base_SetConfig+0x144>)
 800baac:	4293      	cmp	r3, r2
 800baae:	d003      	beq.n	800bab8 <TIM_Base_SetConfig+0xf8>
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	4a15      	ldr	r2, [pc, #84]	@ (800bb08 <TIM_Base_SetConfig+0x148>)
 800bab4:	4293      	cmp	r3, r2
 800bab6:	d103      	bne.n	800bac0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	691a      	ldr	r2, [r3, #16]
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2201      	movs	r2, #1
 800bac4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	691b      	ldr	r3, [r3, #16]
 800baca:	f003 0301 	and.w	r3, r3, #1
 800bace:	2b01      	cmp	r3, #1
 800bad0:	d105      	bne.n	800bade <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	691b      	ldr	r3, [r3, #16]
 800bad6:	f023 0201 	bic.w	r2, r3, #1
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	611a      	str	r2, [r3, #16]
  }
}
 800bade:	bf00      	nop
 800bae0:	3714      	adds	r7, #20
 800bae2:	46bd      	mov	sp, r7
 800bae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae8:	4770      	bx	lr
 800baea:	bf00      	nop
 800baec:	40010000 	.word	0x40010000
 800baf0:	40000400 	.word	0x40000400
 800baf4:	40000800 	.word	0x40000800
 800baf8:	40000c00 	.word	0x40000c00
 800bafc:	40010400 	.word	0x40010400
 800bb00:	40014000 	.word	0x40014000
 800bb04:	40014400 	.word	0x40014400
 800bb08:	40014800 	.word	0x40014800

0800bb0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b087      	sub	sp, #28
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
 800bb14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6a1b      	ldr	r3, [r3, #32]
 800bb1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6a1b      	ldr	r3, [r3, #32]
 800bb20:	f023 0201 	bic.w	r2, r3, #1
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	685b      	ldr	r3, [r3, #4]
 800bb2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	699b      	ldr	r3, [r3, #24]
 800bb32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bb34:	68fa      	ldr	r2, [r7, #12]
 800bb36:	4b37      	ldr	r3, [pc, #220]	@ (800bc14 <TIM_OC1_SetConfig+0x108>)
 800bb38:	4013      	ands	r3, r2
 800bb3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	f023 0303 	bic.w	r3, r3, #3
 800bb42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	68fa      	ldr	r2, [r7, #12]
 800bb4a:	4313      	orrs	r3, r2
 800bb4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	f023 0302 	bic.w	r3, r3, #2
 800bb54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	689b      	ldr	r3, [r3, #8]
 800bb5a:	697a      	ldr	r2, [r7, #20]
 800bb5c:	4313      	orrs	r3, r2
 800bb5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	4a2d      	ldr	r2, [pc, #180]	@ (800bc18 <TIM_OC1_SetConfig+0x10c>)
 800bb64:	4293      	cmp	r3, r2
 800bb66:	d00f      	beq.n	800bb88 <TIM_OC1_SetConfig+0x7c>
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	4a2c      	ldr	r2, [pc, #176]	@ (800bc1c <TIM_OC1_SetConfig+0x110>)
 800bb6c:	4293      	cmp	r3, r2
 800bb6e:	d00b      	beq.n	800bb88 <TIM_OC1_SetConfig+0x7c>
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	4a2b      	ldr	r2, [pc, #172]	@ (800bc20 <TIM_OC1_SetConfig+0x114>)
 800bb74:	4293      	cmp	r3, r2
 800bb76:	d007      	beq.n	800bb88 <TIM_OC1_SetConfig+0x7c>
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	4a2a      	ldr	r2, [pc, #168]	@ (800bc24 <TIM_OC1_SetConfig+0x118>)
 800bb7c:	4293      	cmp	r3, r2
 800bb7e:	d003      	beq.n	800bb88 <TIM_OC1_SetConfig+0x7c>
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	4a29      	ldr	r2, [pc, #164]	@ (800bc28 <TIM_OC1_SetConfig+0x11c>)
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d10c      	bne.n	800bba2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	f023 0308 	bic.w	r3, r3, #8
 800bb8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	68db      	ldr	r3, [r3, #12]
 800bb94:	697a      	ldr	r2, [r7, #20]
 800bb96:	4313      	orrs	r3, r2
 800bb98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	f023 0304 	bic.w	r3, r3, #4
 800bba0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	4a1c      	ldr	r2, [pc, #112]	@ (800bc18 <TIM_OC1_SetConfig+0x10c>)
 800bba6:	4293      	cmp	r3, r2
 800bba8:	d00f      	beq.n	800bbca <TIM_OC1_SetConfig+0xbe>
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	4a1b      	ldr	r2, [pc, #108]	@ (800bc1c <TIM_OC1_SetConfig+0x110>)
 800bbae:	4293      	cmp	r3, r2
 800bbb0:	d00b      	beq.n	800bbca <TIM_OC1_SetConfig+0xbe>
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	4a1a      	ldr	r2, [pc, #104]	@ (800bc20 <TIM_OC1_SetConfig+0x114>)
 800bbb6:	4293      	cmp	r3, r2
 800bbb8:	d007      	beq.n	800bbca <TIM_OC1_SetConfig+0xbe>
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	4a19      	ldr	r2, [pc, #100]	@ (800bc24 <TIM_OC1_SetConfig+0x118>)
 800bbbe:	4293      	cmp	r3, r2
 800bbc0:	d003      	beq.n	800bbca <TIM_OC1_SetConfig+0xbe>
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	4a18      	ldr	r2, [pc, #96]	@ (800bc28 <TIM_OC1_SetConfig+0x11c>)
 800bbc6:	4293      	cmp	r3, r2
 800bbc8:	d111      	bne.n	800bbee <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bbd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bbd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	695b      	ldr	r3, [r3, #20]
 800bbde:	693a      	ldr	r2, [r7, #16]
 800bbe0:	4313      	orrs	r3, r2
 800bbe2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	699b      	ldr	r3, [r3, #24]
 800bbe8:	693a      	ldr	r2, [r7, #16]
 800bbea:	4313      	orrs	r3, r2
 800bbec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	693a      	ldr	r2, [r7, #16]
 800bbf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	68fa      	ldr	r2, [r7, #12]
 800bbf8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	685a      	ldr	r2, [r3, #4]
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	697a      	ldr	r2, [r7, #20]
 800bc06:	621a      	str	r2, [r3, #32]
}
 800bc08:	bf00      	nop
 800bc0a:	371c      	adds	r7, #28
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc12:	4770      	bx	lr
 800bc14:	fffeff8f 	.word	0xfffeff8f
 800bc18:	40010000 	.word	0x40010000
 800bc1c:	40010400 	.word	0x40010400
 800bc20:	40014000 	.word	0x40014000
 800bc24:	40014400 	.word	0x40014400
 800bc28:	40014800 	.word	0x40014800

0800bc2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	b087      	sub	sp, #28
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
 800bc34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6a1b      	ldr	r3, [r3, #32]
 800bc3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6a1b      	ldr	r3, [r3, #32]
 800bc40:	f023 0210 	bic.w	r2, r3, #16
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	685b      	ldr	r3, [r3, #4]
 800bc4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	699b      	ldr	r3, [r3, #24]
 800bc52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bc54:	68fa      	ldr	r2, [r7, #12]
 800bc56:	4b34      	ldr	r3, [pc, #208]	@ (800bd28 <TIM_OC2_SetConfig+0xfc>)
 800bc58:	4013      	ands	r3, r2
 800bc5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bc62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	021b      	lsls	r3, r3, #8
 800bc6a:	68fa      	ldr	r2, [r7, #12]
 800bc6c:	4313      	orrs	r3, r2
 800bc6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	f023 0320 	bic.w	r3, r3, #32
 800bc76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	689b      	ldr	r3, [r3, #8]
 800bc7c:	011b      	lsls	r3, r3, #4
 800bc7e:	697a      	ldr	r2, [r7, #20]
 800bc80:	4313      	orrs	r3, r2
 800bc82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	4a29      	ldr	r2, [pc, #164]	@ (800bd2c <TIM_OC2_SetConfig+0x100>)
 800bc88:	4293      	cmp	r3, r2
 800bc8a:	d003      	beq.n	800bc94 <TIM_OC2_SetConfig+0x68>
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	4a28      	ldr	r2, [pc, #160]	@ (800bd30 <TIM_OC2_SetConfig+0x104>)
 800bc90:	4293      	cmp	r3, r2
 800bc92:	d10d      	bne.n	800bcb0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bc94:	697b      	ldr	r3, [r7, #20]
 800bc96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bc9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	68db      	ldr	r3, [r3, #12]
 800bca0:	011b      	lsls	r3, r3, #4
 800bca2:	697a      	ldr	r2, [r7, #20]
 800bca4:	4313      	orrs	r3, r2
 800bca6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bcae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	4a1e      	ldr	r2, [pc, #120]	@ (800bd2c <TIM_OC2_SetConfig+0x100>)
 800bcb4:	4293      	cmp	r3, r2
 800bcb6:	d00f      	beq.n	800bcd8 <TIM_OC2_SetConfig+0xac>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	4a1d      	ldr	r2, [pc, #116]	@ (800bd30 <TIM_OC2_SetConfig+0x104>)
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	d00b      	beq.n	800bcd8 <TIM_OC2_SetConfig+0xac>
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	4a1c      	ldr	r2, [pc, #112]	@ (800bd34 <TIM_OC2_SetConfig+0x108>)
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	d007      	beq.n	800bcd8 <TIM_OC2_SetConfig+0xac>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	4a1b      	ldr	r2, [pc, #108]	@ (800bd38 <TIM_OC2_SetConfig+0x10c>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d003      	beq.n	800bcd8 <TIM_OC2_SetConfig+0xac>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	4a1a      	ldr	r2, [pc, #104]	@ (800bd3c <TIM_OC2_SetConfig+0x110>)
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	d113      	bne.n	800bd00 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bcd8:	693b      	ldr	r3, [r7, #16]
 800bcda:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bcde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bce0:	693b      	ldr	r3, [r7, #16]
 800bce2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bce6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	695b      	ldr	r3, [r3, #20]
 800bcec:	009b      	lsls	r3, r3, #2
 800bcee:	693a      	ldr	r2, [r7, #16]
 800bcf0:	4313      	orrs	r3, r2
 800bcf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	699b      	ldr	r3, [r3, #24]
 800bcf8:	009b      	lsls	r3, r3, #2
 800bcfa:	693a      	ldr	r2, [r7, #16]
 800bcfc:	4313      	orrs	r3, r2
 800bcfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	693a      	ldr	r2, [r7, #16]
 800bd04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	68fa      	ldr	r2, [r7, #12]
 800bd0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	685a      	ldr	r2, [r3, #4]
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	697a      	ldr	r2, [r7, #20]
 800bd18:	621a      	str	r2, [r3, #32]
}
 800bd1a:	bf00      	nop
 800bd1c:	371c      	adds	r7, #28
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd24:	4770      	bx	lr
 800bd26:	bf00      	nop
 800bd28:	feff8fff 	.word	0xfeff8fff
 800bd2c:	40010000 	.word	0x40010000
 800bd30:	40010400 	.word	0x40010400
 800bd34:	40014000 	.word	0x40014000
 800bd38:	40014400 	.word	0x40014400
 800bd3c:	40014800 	.word	0x40014800

0800bd40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bd40:	b480      	push	{r7}
 800bd42:	b087      	sub	sp, #28
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
 800bd48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6a1b      	ldr	r3, [r3, #32]
 800bd4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6a1b      	ldr	r3, [r3, #32]
 800bd54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	685b      	ldr	r3, [r3, #4]
 800bd60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	69db      	ldr	r3, [r3, #28]
 800bd66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bd68:	68fa      	ldr	r2, [r7, #12]
 800bd6a:	4b33      	ldr	r3, [pc, #204]	@ (800be38 <TIM_OC3_SetConfig+0xf8>)
 800bd6c:	4013      	ands	r3, r2
 800bd6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	f023 0303 	bic.w	r3, r3, #3
 800bd76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	68fa      	ldr	r2, [r7, #12]
 800bd7e:	4313      	orrs	r3, r2
 800bd80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bd82:	697b      	ldr	r3, [r7, #20]
 800bd84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bd88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	689b      	ldr	r3, [r3, #8]
 800bd8e:	021b      	lsls	r3, r3, #8
 800bd90:	697a      	ldr	r2, [r7, #20]
 800bd92:	4313      	orrs	r3, r2
 800bd94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	4a28      	ldr	r2, [pc, #160]	@ (800be3c <TIM_OC3_SetConfig+0xfc>)
 800bd9a:	4293      	cmp	r3, r2
 800bd9c:	d003      	beq.n	800bda6 <TIM_OC3_SetConfig+0x66>
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	4a27      	ldr	r2, [pc, #156]	@ (800be40 <TIM_OC3_SetConfig+0x100>)
 800bda2:	4293      	cmp	r3, r2
 800bda4:	d10d      	bne.n	800bdc2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bdac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	68db      	ldr	r3, [r3, #12]
 800bdb2:	021b      	lsls	r3, r3, #8
 800bdb4:	697a      	ldr	r2, [r7, #20]
 800bdb6:	4313      	orrs	r3, r2
 800bdb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bdc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	4a1d      	ldr	r2, [pc, #116]	@ (800be3c <TIM_OC3_SetConfig+0xfc>)
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	d00f      	beq.n	800bdea <TIM_OC3_SetConfig+0xaa>
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	4a1c      	ldr	r2, [pc, #112]	@ (800be40 <TIM_OC3_SetConfig+0x100>)
 800bdce:	4293      	cmp	r3, r2
 800bdd0:	d00b      	beq.n	800bdea <TIM_OC3_SetConfig+0xaa>
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	4a1b      	ldr	r2, [pc, #108]	@ (800be44 <TIM_OC3_SetConfig+0x104>)
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	d007      	beq.n	800bdea <TIM_OC3_SetConfig+0xaa>
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	4a1a      	ldr	r2, [pc, #104]	@ (800be48 <TIM_OC3_SetConfig+0x108>)
 800bdde:	4293      	cmp	r3, r2
 800bde0:	d003      	beq.n	800bdea <TIM_OC3_SetConfig+0xaa>
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	4a19      	ldr	r2, [pc, #100]	@ (800be4c <TIM_OC3_SetConfig+0x10c>)
 800bde6:	4293      	cmp	r3, r2
 800bde8:	d113      	bne.n	800be12 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bdf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bdf2:	693b      	ldr	r3, [r7, #16]
 800bdf4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bdf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	695b      	ldr	r3, [r3, #20]
 800bdfe:	011b      	lsls	r3, r3, #4
 800be00:	693a      	ldr	r2, [r7, #16]
 800be02:	4313      	orrs	r3, r2
 800be04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	699b      	ldr	r3, [r3, #24]
 800be0a:	011b      	lsls	r3, r3, #4
 800be0c:	693a      	ldr	r2, [r7, #16]
 800be0e:	4313      	orrs	r3, r2
 800be10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	693a      	ldr	r2, [r7, #16]
 800be16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	68fa      	ldr	r2, [r7, #12]
 800be1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	685a      	ldr	r2, [r3, #4]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	697a      	ldr	r2, [r7, #20]
 800be2a:	621a      	str	r2, [r3, #32]
}
 800be2c:	bf00      	nop
 800be2e:	371c      	adds	r7, #28
 800be30:	46bd      	mov	sp, r7
 800be32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be36:	4770      	bx	lr
 800be38:	fffeff8f 	.word	0xfffeff8f
 800be3c:	40010000 	.word	0x40010000
 800be40:	40010400 	.word	0x40010400
 800be44:	40014000 	.word	0x40014000
 800be48:	40014400 	.word	0x40014400
 800be4c:	40014800 	.word	0x40014800

0800be50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800be50:	b480      	push	{r7}
 800be52:	b087      	sub	sp, #28
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
 800be58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6a1b      	ldr	r3, [r3, #32]
 800be5e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6a1b      	ldr	r3, [r3, #32]
 800be64:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	685b      	ldr	r3, [r3, #4]
 800be70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	69db      	ldr	r3, [r3, #28]
 800be76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800be78:	68fa      	ldr	r2, [r7, #12]
 800be7a:	4b24      	ldr	r3, [pc, #144]	@ (800bf0c <TIM_OC4_SetConfig+0xbc>)
 800be7c:	4013      	ands	r3, r2
 800be7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800be86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	021b      	lsls	r3, r3, #8
 800be8e:	68fa      	ldr	r2, [r7, #12]
 800be90:	4313      	orrs	r3, r2
 800be92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800be94:	693b      	ldr	r3, [r7, #16]
 800be96:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800be9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	689b      	ldr	r3, [r3, #8]
 800bea0:	031b      	lsls	r3, r3, #12
 800bea2:	693a      	ldr	r2, [r7, #16]
 800bea4:	4313      	orrs	r3, r2
 800bea6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	4a19      	ldr	r2, [pc, #100]	@ (800bf10 <TIM_OC4_SetConfig+0xc0>)
 800beac:	4293      	cmp	r3, r2
 800beae:	d00f      	beq.n	800bed0 <TIM_OC4_SetConfig+0x80>
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	4a18      	ldr	r2, [pc, #96]	@ (800bf14 <TIM_OC4_SetConfig+0xc4>)
 800beb4:	4293      	cmp	r3, r2
 800beb6:	d00b      	beq.n	800bed0 <TIM_OC4_SetConfig+0x80>
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	4a17      	ldr	r2, [pc, #92]	@ (800bf18 <TIM_OC4_SetConfig+0xc8>)
 800bebc:	4293      	cmp	r3, r2
 800bebe:	d007      	beq.n	800bed0 <TIM_OC4_SetConfig+0x80>
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	4a16      	ldr	r2, [pc, #88]	@ (800bf1c <TIM_OC4_SetConfig+0xcc>)
 800bec4:	4293      	cmp	r3, r2
 800bec6:	d003      	beq.n	800bed0 <TIM_OC4_SetConfig+0x80>
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	4a15      	ldr	r2, [pc, #84]	@ (800bf20 <TIM_OC4_SetConfig+0xd0>)
 800becc:	4293      	cmp	r3, r2
 800bece:	d109      	bne.n	800bee4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bed0:	697b      	ldr	r3, [r7, #20]
 800bed2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bed6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	695b      	ldr	r3, [r3, #20]
 800bedc:	019b      	lsls	r3, r3, #6
 800bede:	697a      	ldr	r2, [r7, #20]
 800bee0:	4313      	orrs	r3, r2
 800bee2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	697a      	ldr	r2, [r7, #20]
 800bee8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	68fa      	ldr	r2, [r7, #12]
 800beee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	685a      	ldr	r2, [r3, #4]
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	693a      	ldr	r2, [r7, #16]
 800befc:	621a      	str	r2, [r3, #32]
}
 800befe:	bf00      	nop
 800bf00:	371c      	adds	r7, #28
 800bf02:	46bd      	mov	sp, r7
 800bf04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf08:	4770      	bx	lr
 800bf0a:	bf00      	nop
 800bf0c:	feff8fff 	.word	0xfeff8fff
 800bf10:	40010000 	.word	0x40010000
 800bf14:	40010400 	.word	0x40010400
 800bf18:	40014000 	.word	0x40014000
 800bf1c:	40014400 	.word	0x40014400
 800bf20:	40014800 	.word	0x40014800

0800bf24 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bf24:	b480      	push	{r7}
 800bf26:	b087      	sub	sp, #28
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
 800bf2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6a1b      	ldr	r3, [r3, #32]
 800bf32:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	6a1b      	ldr	r3, [r3, #32]
 800bf38:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	685b      	ldr	r3, [r3, #4]
 800bf44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bf4c:	68fa      	ldr	r2, [r7, #12]
 800bf4e:	4b21      	ldr	r3, [pc, #132]	@ (800bfd4 <TIM_OC5_SetConfig+0xb0>)
 800bf50:	4013      	ands	r3, r2
 800bf52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	68fa      	ldr	r2, [r7, #12]
 800bf5a:	4313      	orrs	r3, r2
 800bf5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bf5e:	693b      	ldr	r3, [r7, #16]
 800bf60:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800bf64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	689b      	ldr	r3, [r3, #8]
 800bf6a:	041b      	lsls	r3, r3, #16
 800bf6c:	693a      	ldr	r2, [r7, #16]
 800bf6e:	4313      	orrs	r3, r2
 800bf70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	4a18      	ldr	r2, [pc, #96]	@ (800bfd8 <TIM_OC5_SetConfig+0xb4>)
 800bf76:	4293      	cmp	r3, r2
 800bf78:	d00f      	beq.n	800bf9a <TIM_OC5_SetConfig+0x76>
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	4a17      	ldr	r2, [pc, #92]	@ (800bfdc <TIM_OC5_SetConfig+0xb8>)
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	d00b      	beq.n	800bf9a <TIM_OC5_SetConfig+0x76>
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	4a16      	ldr	r2, [pc, #88]	@ (800bfe0 <TIM_OC5_SetConfig+0xbc>)
 800bf86:	4293      	cmp	r3, r2
 800bf88:	d007      	beq.n	800bf9a <TIM_OC5_SetConfig+0x76>
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	4a15      	ldr	r2, [pc, #84]	@ (800bfe4 <TIM_OC5_SetConfig+0xc0>)
 800bf8e:	4293      	cmp	r3, r2
 800bf90:	d003      	beq.n	800bf9a <TIM_OC5_SetConfig+0x76>
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	4a14      	ldr	r2, [pc, #80]	@ (800bfe8 <TIM_OC5_SetConfig+0xc4>)
 800bf96:	4293      	cmp	r3, r2
 800bf98:	d109      	bne.n	800bfae <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bf9a:	697b      	ldr	r3, [r7, #20]
 800bf9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bfa0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	695b      	ldr	r3, [r3, #20]
 800bfa6:	021b      	lsls	r3, r3, #8
 800bfa8:	697a      	ldr	r2, [r7, #20]
 800bfaa:	4313      	orrs	r3, r2
 800bfac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	697a      	ldr	r2, [r7, #20]
 800bfb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	68fa      	ldr	r2, [r7, #12]
 800bfb8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	685a      	ldr	r2, [r3, #4]
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	693a      	ldr	r2, [r7, #16]
 800bfc6:	621a      	str	r2, [r3, #32]
}
 800bfc8:	bf00      	nop
 800bfca:	371c      	adds	r7, #28
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd2:	4770      	bx	lr
 800bfd4:	fffeff8f 	.word	0xfffeff8f
 800bfd8:	40010000 	.word	0x40010000
 800bfdc:	40010400 	.word	0x40010400
 800bfe0:	40014000 	.word	0x40014000
 800bfe4:	40014400 	.word	0x40014400
 800bfe8:	40014800 	.word	0x40014800

0800bfec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bfec:	b480      	push	{r7}
 800bfee:	b087      	sub	sp, #28
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
 800bff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6a1b      	ldr	r3, [r3, #32]
 800bffa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6a1b      	ldr	r3, [r3, #32]
 800c000:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	685b      	ldr	r3, [r3, #4]
 800c00c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c014:	68fa      	ldr	r2, [r7, #12]
 800c016:	4b22      	ldr	r3, [pc, #136]	@ (800c0a0 <TIM_OC6_SetConfig+0xb4>)
 800c018:	4013      	ands	r3, r2
 800c01a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	021b      	lsls	r3, r3, #8
 800c022:	68fa      	ldr	r2, [r7, #12]
 800c024:	4313      	orrs	r3, r2
 800c026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c028:	693b      	ldr	r3, [r7, #16]
 800c02a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c02e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	689b      	ldr	r3, [r3, #8]
 800c034:	051b      	lsls	r3, r3, #20
 800c036:	693a      	ldr	r2, [r7, #16]
 800c038:	4313      	orrs	r3, r2
 800c03a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	4a19      	ldr	r2, [pc, #100]	@ (800c0a4 <TIM_OC6_SetConfig+0xb8>)
 800c040:	4293      	cmp	r3, r2
 800c042:	d00f      	beq.n	800c064 <TIM_OC6_SetConfig+0x78>
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	4a18      	ldr	r2, [pc, #96]	@ (800c0a8 <TIM_OC6_SetConfig+0xbc>)
 800c048:	4293      	cmp	r3, r2
 800c04a:	d00b      	beq.n	800c064 <TIM_OC6_SetConfig+0x78>
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	4a17      	ldr	r2, [pc, #92]	@ (800c0ac <TIM_OC6_SetConfig+0xc0>)
 800c050:	4293      	cmp	r3, r2
 800c052:	d007      	beq.n	800c064 <TIM_OC6_SetConfig+0x78>
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	4a16      	ldr	r2, [pc, #88]	@ (800c0b0 <TIM_OC6_SetConfig+0xc4>)
 800c058:	4293      	cmp	r3, r2
 800c05a:	d003      	beq.n	800c064 <TIM_OC6_SetConfig+0x78>
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	4a15      	ldr	r2, [pc, #84]	@ (800c0b4 <TIM_OC6_SetConfig+0xc8>)
 800c060:	4293      	cmp	r3, r2
 800c062:	d109      	bne.n	800c078 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c064:	697b      	ldr	r3, [r7, #20]
 800c066:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c06a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	695b      	ldr	r3, [r3, #20]
 800c070:	029b      	lsls	r3, r3, #10
 800c072:	697a      	ldr	r2, [r7, #20]
 800c074:	4313      	orrs	r3, r2
 800c076:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	697a      	ldr	r2, [r7, #20]
 800c07c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	68fa      	ldr	r2, [r7, #12]
 800c082:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	685a      	ldr	r2, [r3, #4]
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	693a      	ldr	r2, [r7, #16]
 800c090:	621a      	str	r2, [r3, #32]
}
 800c092:	bf00      	nop
 800c094:	371c      	adds	r7, #28
 800c096:	46bd      	mov	sp, r7
 800c098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09c:	4770      	bx	lr
 800c09e:	bf00      	nop
 800c0a0:	feff8fff 	.word	0xfeff8fff
 800c0a4:	40010000 	.word	0x40010000
 800c0a8:	40010400 	.word	0x40010400
 800c0ac:	40014000 	.word	0x40014000
 800c0b0:	40014400 	.word	0x40014400
 800c0b4:	40014800 	.word	0x40014800

0800c0b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c0b8:	b480      	push	{r7}
 800c0ba:	b087      	sub	sp, #28
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	60f8      	str	r0, [r7, #12]
 800c0c0:	60b9      	str	r1, [r7, #8]
 800c0c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	f003 031f 	and.w	r3, r3, #31
 800c0ca:	2201      	movs	r2, #1
 800c0cc:	fa02 f303 	lsl.w	r3, r2, r3
 800c0d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	6a1a      	ldr	r2, [r3, #32]
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	43db      	mvns	r3, r3
 800c0da:	401a      	ands	r2, r3
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	6a1a      	ldr	r2, [r3, #32]
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	f003 031f 	and.w	r3, r3, #31
 800c0ea:	6879      	ldr	r1, [r7, #4]
 800c0ec:	fa01 f303 	lsl.w	r3, r1, r3
 800c0f0:	431a      	orrs	r2, r3
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	621a      	str	r2, [r3, #32]
}
 800c0f6:	bf00      	nop
 800c0f8:	371c      	adds	r7, #28
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c100:	4770      	bx	lr
	...

0800c104 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c104:	b480      	push	{r7}
 800c106:	b085      	sub	sp, #20
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
 800c10c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c114:	2b01      	cmp	r3, #1
 800c116:	d101      	bne.n	800c11c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c118:	2302      	movs	r3, #2
 800c11a:	e06d      	b.n	800c1f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2201      	movs	r2, #1
 800c120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2202      	movs	r2, #2
 800c128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	685b      	ldr	r3, [r3, #4]
 800c132:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	689b      	ldr	r3, [r3, #8]
 800c13a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	4a30      	ldr	r2, [pc, #192]	@ (800c204 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c142:	4293      	cmp	r3, r2
 800c144:	d004      	beq.n	800c150 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	4a2f      	ldr	r2, [pc, #188]	@ (800c208 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c14c:	4293      	cmp	r3, r2
 800c14e:	d108      	bne.n	800c162 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c156:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	685b      	ldr	r3, [r3, #4]
 800c15c:	68fa      	ldr	r2, [r7, #12]
 800c15e:	4313      	orrs	r3, r2
 800c160:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c168:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	68fa      	ldr	r2, [r7, #12]
 800c170:	4313      	orrs	r3, r2
 800c172:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	68fa      	ldr	r2, [r7, #12]
 800c17a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	4a20      	ldr	r2, [pc, #128]	@ (800c204 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c182:	4293      	cmp	r3, r2
 800c184:	d022      	beq.n	800c1cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c18e:	d01d      	beq.n	800c1cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	4a1d      	ldr	r2, [pc, #116]	@ (800c20c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c196:	4293      	cmp	r3, r2
 800c198:	d018      	beq.n	800c1cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	4a1c      	ldr	r2, [pc, #112]	@ (800c210 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c1a0:	4293      	cmp	r3, r2
 800c1a2:	d013      	beq.n	800c1cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	4a1a      	ldr	r2, [pc, #104]	@ (800c214 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c1aa:	4293      	cmp	r3, r2
 800c1ac:	d00e      	beq.n	800c1cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	4a15      	ldr	r2, [pc, #84]	@ (800c208 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c1b4:	4293      	cmp	r3, r2
 800c1b6:	d009      	beq.n	800c1cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	4a16      	ldr	r2, [pc, #88]	@ (800c218 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	d004      	beq.n	800c1cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	4a15      	ldr	r2, [pc, #84]	@ (800c21c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d10c      	bne.n	800c1e6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c1d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	689b      	ldr	r3, [r3, #8]
 800c1d8:	68ba      	ldr	r2, [r7, #8]
 800c1da:	4313      	orrs	r3, r2
 800c1dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	68ba      	ldr	r2, [r7, #8]
 800c1e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2201      	movs	r2, #1
 800c1ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c1f6:	2300      	movs	r3, #0
}
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	3714      	adds	r7, #20
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c202:	4770      	bx	lr
 800c204:	40010000 	.word	0x40010000
 800c208:	40010400 	.word	0x40010400
 800c20c:	40000400 	.word	0x40000400
 800c210:	40000800 	.word	0x40000800
 800c214:	40000c00 	.word	0x40000c00
 800c218:	40001800 	.word	0x40001800
 800c21c:	40014000 	.word	0x40014000

0800c220 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c220:	b480      	push	{r7}
 800c222:	b083      	sub	sp, #12
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c228:	bf00      	nop
 800c22a:	370c      	adds	r7, #12
 800c22c:	46bd      	mov	sp, r7
 800c22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c232:	4770      	bx	lr

0800c234 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c234:	b480      	push	{r7}
 800c236:	b083      	sub	sp, #12
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c23c:	bf00      	nop
 800c23e:	370c      	adds	r7, #12
 800c240:	46bd      	mov	sp, r7
 800c242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c246:	4770      	bx	lr

0800c248 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c248:	b480      	push	{r7}
 800c24a:	b083      	sub	sp, #12
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c250:	bf00      	nop
 800c252:	370c      	adds	r7, #12
 800c254:	46bd      	mov	sp, r7
 800c256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25a:	4770      	bx	lr

0800c25c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b082      	sub	sp, #8
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d101      	bne.n	800c26e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c26a:	2301      	movs	r3, #1
 800c26c:	e042      	b.n	800c2f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c274:	2b00      	cmp	r3, #0
 800c276:	d106      	bne.n	800c286 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2200      	movs	r2, #0
 800c27c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c280:	6878      	ldr	r0, [r7, #4]
 800c282:	f7f6 febb 	bl	8002ffc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2224      	movs	r2, #36	@ 0x24
 800c28a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	681a      	ldr	r2, [r3, #0]
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	f022 0201 	bic.w	r2, r2, #1
 800c29c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d002      	beq.n	800c2ac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f001 fac4 	bl	800d834 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	f000 fc55 	bl	800cb5c <UART_SetConfig>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	2b01      	cmp	r3, #1
 800c2b6:	d101      	bne.n	800c2bc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	e01b      	b.n	800c2f4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	685a      	ldr	r2, [r3, #4]
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c2ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	689a      	ldr	r2, [r3, #8]
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c2da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	681a      	ldr	r2, [r3, #0]
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	f042 0201 	orr.w	r2, r2, #1
 800c2ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f001 fb43 	bl	800d978 <UART_CheckIdleState>
 800c2f2:	4603      	mov	r3, r0
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	3708      	adds	r7, #8
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}

0800c2fc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b08a      	sub	sp, #40	@ 0x28
 800c300:	af00      	add	r7, sp, #0
 800c302:	60f8      	str	r0, [r7, #12]
 800c304:	60b9      	str	r1, [r7, #8]
 800c306:	4613      	mov	r3, r2
 800c308:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c310:	2b20      	cmp	r3, #32
 800c312:	d137      	bne.n	800c384 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d002      	beq.n	800c320 <HAL_UART_Receive_DMA+0x24>
 800c31a:	88fb      	ldrh	r3, [r7, #6]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d101      	bne.n	800c324 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c320:	2301      	movs	r3, #1
 800c322:	e030      	b.n	800c386 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	2200      	movs	r2, #0
 800c328:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	4a18      	ldr	r2, [pc, #96]	@ (800c390 <HAL_UART_Receive_DMA+0x94>)
 800c330:	4293      	cmp	r3, r2
 800c332:	d01f      	beq.n	800c374 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	685b      	ldr	r3, [r3, #4]
 800c33a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d018      	beq.n	800c374 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	e853 3f00 	ldrex	r3, [r3]
 800c34e:	613b      	str	r3, [r7, #16]
   return(result);
 800c350:	693b      	ldr	r3, [r7, #16]
 800c352:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c356:	627b      	str	r3, [r7, #36]	@ 0x24
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	461a      	mov	r2, r3
 800c35e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c360:	623b      	str	r3, [r7, #32]
 800c362:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c364:	69f9      	ldr	r1, [r7, #28]
 800c366:	6a3a      	ldr	r2, [r7, #32]
 800c368:	e841 2300 	strex	r3, r2, [r1]
 800c36c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c36e:	69bb      	ldr	r3, [r7, #24]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d1e6      	bne.n	800c342 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c374:	88fb      	ldrh	r3, [r7, #6]
 800c376:	461a      	mov	r2, r3
 800c378:	68b9      	ldr	r1, [r7, #8]
 800c37a:	68f8      	ldr	r0, [r7, #12]
 800c37c:	f001 fc14 	bl	800dba8 <UART_Start_Receive_DMA>
 800c380:	4603      	mov	r3, r0
 800c382:	e000      	b.n	800c386 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c384:	2302      	movs	r3, #2
  }
}
 800c386:	4618      	mov	r0, r3
 800c388:	3728      	adds	r7, #40	@ 0x28
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}
 800c38e:	bf00      	nop
 800c390:	58000c00 	.word	0x58000c00

0800c394 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b0ba      	sub	sp, #232	@ 0xe8
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	69db      	ldr	r3, [r3, #28]
 800c3a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	689b      	ldr	r3, [r3, #8]
 800c3b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c3ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c3be:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c3c2:	4013      	ands	r3, r2
 800c3c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c3c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d11b      	bne.n	800c408 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c3d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c3d4:	f003 0320 	and.w	r3, r3, #32
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d015      	beq.n	800c408 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c3dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c3e0:	f003 0320 	and.w	r3, r3, #32
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d105      	bne.n	800c3f4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c3e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c3ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d009      	beq.n	800c408 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	f000 8377 	beq.w	800caec <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	4798      	blx	r3
      }
      return;
 800c406:	e371      	b.n	800caec <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c408:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	f000 8123 	beq.w	800c658 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c412:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c416:	4b8d      	ldr	r3, [pc, #564]	@ (800c64c <HAL_UART_IRQHandler+0x2b8>)
 800c418:	4013      	ands	r3, r2
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d106      	bne.n	800c42c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c41e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c422:	4b8b      	ldr	r3, [pc, #556]	@ (800c650 <HAL_UART_IRQHandler+0x2bc>)
 800c424:	4013      	ands	r3, r2
 800c426:	2b00      	cmp	r3, #0
 800c428:	f000 8116 	beq.w	800c658 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c42c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c430:	f003 0301 	and.w	r3, r3, #1
 800c434:	2b00      	cmp	r3, #0
 800c436:	d011      	beq.n	800c45c <HAL_UART_IRQHandler+0xc8>
 800c438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c43c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c440:	2b00      	cmp	r3, #0
 800c442:	d00b      	beq.n	800c45c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	2201      	movs	r2, #1
 800c44a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c452:	f043 0201 	orr.w	r2, r3, #1
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c45c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c460:	f003 0302 	and.w	r3, r3, #2
 800c464:	2b00      	cmp	r3, #0
 800c466:	d011      	beq.n	800c48c <HAL_UART_IRQHandler+0xf8>
 800c468:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c46c:	f003 0301 	and.w	r3, r3, #1
 800c470:	2b00      	cmp	r3, #0
 800c472:	d00b      	beq.n	800c48c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	2202      	movs	r2, #2
 800c47a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c482:	f043 0204 	orr.w	r2, r3, #4
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c48c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c490:	f003 0304 	and.w	r3, r3, #4
 800c494:	2b00      	cmp	r3, #0
 800c496:	d011      	beq.n	800c4bc <HAL_UART_IRQHandler+0x128>
 800c498:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c49c:	f003 0301 	and.w	r3, r3, #1
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d00b      	beq.n	800c4bc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	2204      	movs	r2, #4
 800c4aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4b2:	f043 0202 	orr.w	r2, r3, #2
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c4bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4c0:	f003 0308 	and.w	r3, r3, #8
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d017      	beq.n	800c4f8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c4c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c4cc:	f003 0320 	and.w	r3, r3, #32
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d105      	bne.n	800c4e0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c4d4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c4d8:	4b5c      	ldr	r3, [pc, #368]	@ (800c64c <HAL_UART_IRQHandler+0x2b8>)
 800c4da:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d00b      	beq.n	800c4f8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	2208      	movs	r2, #8
 800c4e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4ee:	f043 0208 	orr.w	r2, r3, #8
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c4f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c500:	2b00      	cmp	r3, #0
 800c502:	d012      	beq.n	800c52a <HAL_UART_IRQHandler+0x196>
 800c504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c508:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d00c      	beq.n	800c52a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c518:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c520:	f043 0220 	orr.w	r2, r3, #32
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c530:	2b00      	cmp	r3, #0
 800c532:	f000 82dd 	beq.w	800caf0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c53a:	f003 0320 	and.w	r3, r3, #32
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d013      	beq.n	800c56a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c542:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c546:	f003 0320 	and.w	r3, r3, #32
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d105      	bne.n	800c55a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c54e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c556:	2b00      	cmp	r3, #0
 800c558:	d007      	beq.n	800c56a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d003      	beq.n	800c56a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c570:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	689b      	ldr	r3, [r3, #8]
 800c57a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c57e:	2b40      	cmp	r3, #64	@ 0x40
 800c580:	d005      	beq.n	800c58e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c582:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c586:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d054      	beq.n	800c638 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	f001 fbf2 	bl	800dd78 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	689b      	ldr	r3, [r3, #8]
 800c59a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c59e:	2b40      	cmp	r3, #64	@ 0x40
 800c5a0:	d146      	bne.n	800c630 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	3308      	adds	r3, #8
 800c5a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c5b0:	e853 3f00 	ldrex	r3, [r3]
 800c5b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c5b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c5bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c5c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	3308      	adds	r3, #8
 800c5ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c5ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c5d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c5da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c5de:	e841 2300 	strex	r3, r2, [r1]
 800c5e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c5e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d1d9      	bne.n	800c5a2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d017      	beq.n	800c628 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c5fe:	4a15      	ldr	r2, [pc, #84]	@ (800c654 <HAL_UART_IRQHandler+0x2c0>)
 800c600:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c608:	4618      	mov	r0, r3
 800c60a:	f7f8 f9b7 	bl	800497c <HAL_DMA_Abort_IT>
 800c60e:	4603      	mov	r3, r0
 800c610:	2b00      	cmp	r3, #0
 800c612:	d019      	beq.n	800c648 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c61a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c61c:	687a      	ldr	r2, [r7, #4]
 800c61e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c622:	4610      	mov	r0, r2
 800c624:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c626:	e00f      	b.n	800c648 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f000 fa81 	bl	800cb30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c62e:	e00b      	b.n	800c648 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f000 fa7d 	bl	800cb30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c636:	e007      	b.n	800c648 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f000 fa79 	bl	800cb30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2200      	movs	r2, #0
 800c642:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800c646:	e253      	b.n	800caf0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c648:	bf00      	nop
    return;
 800c64a:	e251      	b.n	800caf0 <HAL_UART_IRQHandler+0x75c>
 800c64c:	10000001 	.word	0x10000001
 800c650:	04000120 	.word	0x04000120
 800c654:	0800e02b 	.word	0x0800e02b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c65c:	2b01      	cmp	r3, #1
 800c65e:	f040 81e7 	bne.w	800ca30 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c666:	f003 0310 	and.w	r3, r3, #16
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	f000 81e0 	beq.w	800ca30 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c674:	f003 0310 	and.w	r3, r3, #16
 800c678:	2b00      	cmp	r3, #0
 800c67a:	f000 81d9 	beq.w	800ca30 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	2210      	movs	r2, #16
 800c684:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	689b      	ldr	r3, [r3, #8]
 800c68c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c690:	2b40      	cmp	r3, #64	@ 0x40
 800c692:	f040 8151 	bne.w	800c938 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	4a96      	ldr	r2, [pc, #600]	@ (800c8f8 <HAL_UART_IRQHandler+0x564>)
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	d068      	beq.n	800c776 <HAL_UART_IRQHandler+0x3e2>
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	4a93      	ldr	r2, [pc, #588]	@ (800c8fc <HAL_UART_IRQHandler+0x568>)
 800c6ae:	4293      	cmp	r3, r2
 800c6b0:	d061      	beq.n	800c776 <HAL_UART_IRQHandler+0x3e2>
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	4a91      	ldr	r2, [pc, #580]	@ (800c900 <HAL_UART_IRQHandler+0x56c>)
 800c6bc:	4293      	cmp	r3, r2
 800c6be:	d05a      	beq.n	800c776 <HAL_UART_IRQHandler+0x3e2>
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	4a8e      	ldr	r2, [pc, #568]	@ (800c904 <HAL_UART_IRQHandler+0x570>)
 800c6ca:	4293      	cmp	r3, r2
 800c6cc:	d053      	beq.n	800c776 <HAL_UART_IRQHandler+0x3e2>
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	4a8c      	ldr	r2, [pc, #560]	@ (800c908 <HAL_UART_IRQHandler+0x574>)
 800c6d8:	4293      	cmp	r3, r2
 800c6da:	d04c      	beq.n	800c776 <HAL_UART_IRQHandler+0x3e2>
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	4a89      	ldr	r2, [pc, #548]	@ (800c90c <HAL_UART_IRQHandler+0x578>)
 800c6e6:	4293      	cmp	r3, r2
 800c6e8:	d045      	beq.n	800c776 <HAL_UART_IRQHandler+0x3e2>
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	4a87      	ldr	r2, [pc, #540]	@ (800c910 <HAL_UART_IRQHandler+0x57c>)
 800c6f4:	4293      	cmp	r3, r2
 800c6f6:	d03e      	beq.n	800c776 <HAL_UART_IRQHandler+0x3e2>
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	4a84      	ldr	r2, [pc, #528]	@ (800c914 <HAL_UART_IRQHandler+0x580>)
 800c702:	4293      	cmp	r3, r2
 800c704:	d037      	beq.n	800c776 <HAL_UART_IRQHandler+0x3e2>
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	4a82      	ldr	r2, [pc, #520]	@ (800c918 <HAL_UART_IRQHandler+0x584>)
 800c710:	4293      	cmp	r3, r2
 800c712:	d030      	beq.n	800c776 <HAL_UART_IRQHandler+0x3e2>
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	4a7f      	ldr	r2, [pc, #508]	@ (800c91c <HAL_UART_IRQHandler+0x588>)
 800c71e:	4293      	cmp	r3, r2
 800c720:	d029      	beq.n	800c776 <HAL_UART_IRQHandler+0x3e2>
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	4a7d      	ldr	r2, [pc, #500]	@ (800c920 <HAL_UART_IRQHandler+0x58c>)
 800c72c:	4293      	cmp	r3, r2
 800c72e:	d022      	beq.n	800c776 <HAL_UART_IRQHandler+0x3e2>
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	4a7a      	ldr	r2, [pc, #488]	@ (800c924 <HAL_UART_IRQHandler+0x590>)
 800c73a:	4293      	cmp	r3, r2
 800c73c:	d01b      	beq.n	800c776 <HAL_UART_IRQHandler+0x3e2>
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	4a78      	ldr	r2, [pc, #480]	@ (800c928 <HAL_UART_IRQHandler+0x594>)
 800c748:	4293      	cmp	r3, r2
 800c74a:	d014      	beq.n	800c776 <HAL_UART_IRQHandler+0x3e2>
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	4a75      	ldr	r2, [pc, #468]	@ (800c92c <HAL_UART_IRQHandler+0x598>)
 800c756:	4293      	cmp	r3, r2
 800c758:	d00d      	beq.n	800c776 <HAL_UART_IRQHandler+0x3e2>
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	4a73      	ldr	r2, [pc, #460]	@ (800c930 <HAL_UART_IRQHandler+0x59c>)
 800c764:	4293      	cmp	r3, r2
 800c766:	d006      	beq.n	800c776 <HAL_UART_IRQHandler+0x3e2>
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	4a70      	ldr	r2, [pc, #448]	@ (800c934 <HAL_UART_IRQHandler+0x5a0>)
 800c772:	4293      	cmp	r3, r2
 800c774:	d106      	bne.n	800c784 <HAL_UART_IRQHandler+0x3f0>
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	685b      	ldr	r3, [r3, #4]
 800c780:	b29b      	uxth	r3, r3
 800c782:	e005      	b.n	800c790 <HAL_UART_IRQHandler+0x3fc>
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	685b      	ldr	r3, [r3, #4]
 800c78e:	b29b      	uxth	r3, r3
 800c790:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c794:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c798:	2b00      	cmp	r3, #0
 800c79a:	f000 81ab 	beq.w	800caf4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c7a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c7a8:	429a      	cmp	r2, r3
 800c7aa:	f080 81a3 	bcs.w	800caf4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c7b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c7be:	69db      	ldr	r3, [r3, #28]
 800c7c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c7c4:	f000 8087 	beq.w	800c8d6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c7d4:	e853 3f00 	ldrex	r3, [r3]
 800c7d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c7dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c7e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c7e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	461a      	mov	r2, r3
 800c7ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c7f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c7f6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c7fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c802:	e841 2300 	strex	r3, r2, [r1]
 800c806:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c80a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d1da      	bne.n	800c7c8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	3308      	adds	r3, #8
 800c818:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c81a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c81c:	e853 3f00 	ldrex	r3, [r3]
 800c820:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c822:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c824:	f023 0301 	bic.w	r3, r3, #1
 800c828:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	3308      	adds	r3, #8
 800c832:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c836:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c83a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c83c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c83e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c842:	e841 2300 	strex	r3, r2, [r1]
 800c846:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c848:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d1e1      	bne.n	800c812 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	3308      	adds	r3, #8
 800c854:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c856:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c858:	e853 3f00 	ldrex	r3, [r3]
 800c85c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c85e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c860:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c864:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	3308      	adds	r3, #8
 800c86e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c872:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c874:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c876:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c878:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c87a:	e841 2300 	strex	r3, r2, [r1]
 800c87e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c880:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c882:	2b00      	cmp	r3, #0
 800c884:	d1e3      	bne.n	800c84e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2220      	movs	r2, #32
 800c88a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2200      	movs	r2, #0
 800c892:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c89a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c89c:	e853 3f00 	ldrex	r3, [r3]
 800c8a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c8a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c8a4:	f023 0310 	bic.w	r3, r3, #16
 800c8a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	461a      	mov	r2, r3
 800c8b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c8b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c8b8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c8bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c8be:	e841 2300 	strex	r3, r2, [r1]
 800c8c2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c8c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d1e4      	bne.n	800c894 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	f7f7 fd35 	bl	8004340 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2202      	movs	r2, #2
 800c8da:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c8e8:	b29b      	uxth	r3, r3
 800c8ea:	1ad3      	subs	r3, r2, r3
 800c8ec:	b29b      	uxth	r3, r3
 800c8ee:	4619      	mov	r1, r3
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f000 f927 	bl	800cb44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c8f6:	e0fd      	b.n	800caf4 <HAL_UART_IRQHandler+0x760>
 800c8f8:	40020010 	.word	0x40020010
 800c8fc:	40020028 	.word	0x40020028
 800c900:	40020040 	.word	0x40020040
 800c904:	40020058 	.word	0x40020058
 800c908:	40020070 	.word	0x40020070
 800c90c:	40020088 	.word	0x40020088
 800c910:	400200a0 	.word	0x400200a0
 800c914:	400200b8 	.word	0x400200b8
 800c918:	40020410 	.word	0x40020410
 800c91c:	40020428 	.word	0x40020428
 800c920:	40020440 	.word	0x40020440
 800c924:	40020458 	.word	0x40020458
 800c928:	40020470 	.word	0x40020470
 800c92c:	40020488 	.word	0x40020488
 800c930:	400204a0 	.word	0x400204a0
 800c934:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c944:	b29b      	uxth	r3, r3
 800c946:	1ad3      	subs	r3, r2, r3
 800c948:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c952:	b29b      	uxth	r3, r3
 800c954:	2b00      	cmp	r3, #0
 800c956:	f000 80cf 	beq.w	800caf8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800c95a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c95e:	2b00      	cmp	r3, #0
 800c960:	f000 80ca 	beq.w	800caf8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c96a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c96c:	e853 3f00 	ldrex	r3, [r3]
 800c970:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c974:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c978:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	461a      	mov	r2, r3
 800c982:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c986:	647b      	str	r3, [r7, #68]	@ 0x44
 800c988:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c98a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c98c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c98e:	e841 2300 	strex	r3, r2, [r1]
 800c992:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c994:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c996:	2b00      	cmp	r3, #0
 800c998:	d1e4      	bne.n	800c964 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	3308      	adds	r3, #8
 800c9a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9a4:	e853 3f00 	ldrex	r3, [r3]
 800c9a8:	623b      	str	r3, [r7, #32]
   return(result);
 800c9aa:	6a3a      	ldr	r2, [r7, #32]
 800c9ac:	4b55      	ldr	r3, [pc, #340]	@ (800cb04 <HAL_UART_IRQHandler+0x770>)
 800c9ae:	4013      	ands	r3, r2
 800c9b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	3308      	adds	r3, #8
 800c9ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c9be:	633a      	str	r2, [r7, #48]	@ 0x30
 800c9c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c9c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c9c6:	e841 2300 	strex	r3, r2, [r1]
 800c9ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c9cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d1e3      	bne.n	800c99a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2220      	movs	r2, #32
 800c9d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2200      	movs	r2, #0
 800c9de:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9ec:	693b      	ldr	r3, [r7, #16]
 800c9ee:	e853 3f00 	ldrex	r3, [r3]
 800c9f2:	60fb      	str	r3, [r7, #12]
   return(result);
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	f023 0310 	bic.w	r3, r3, #16
 800c9fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	461a      	mov	r2, r3
 800ca04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ca08:	61fb      	str	r3, [r7, #28]
 800ca0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca0c:	69b9      	ldr	r1, [r7, #24]
 800ca0e:	69fa      	ldr	r2, [r7, #28]
 800ca10:	e841 2300 	strex	r3, r2, [r1]
 800ca14:	617b      	str	r3, [r7, #20]
   return(result);
 800ca16:	697b      	ldr	r3, [r7, #20]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d1e4      	bne.n	800c9e6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2202      	movs	r2, #2
 800ca20:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ca22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ca26:	4619      	mov	r1, r3
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f000 f88b 	bl	800cb44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ca2e:	e063      	b.n	800caf8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ca30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d00e      	beq.n	800ca5a <HAL_UART_IRQHandler+0x6c6>
 800ca3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ca40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d008      	beq.n	800ca5a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800ca50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f001 fb2a 	bl	800e0ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ca58:	e051      	b.n	800cafe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ca5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d014      	beq.n	800ca90 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ca66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d105      	bne.n	800ca7e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ca72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ca76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d008      	beq.n	800ca90 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d03a      	beq.n	800cafc <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	4798      	blx	r3
    }
    return;
 800ca8e:	e035      	b.n	800cafc <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ca90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d009      	beq.n	800cab0 <HAL_UART_IRQHandler+0x71c>
 800ca9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800caa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d003      	beq.n	800cab0 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f001 fad4 	bl	800e056 <UART_EndTransmit_IT>
    return;
 800caae:	e026      	b.n	800cafe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cab4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d009      	beq.n	800cad0 <HAL_UART_IRQHandler+0x73c>
 800cabc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cac0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d003      	beq.n	800cad0 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800cac8:	6878      	ldr	r0, [r7, #4]
 800caca:	f001 fb03 	bl	800e0d4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cace:	e016      	b.n	800cafe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cad4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d010      	beq.n	800cafe <HAL_UART_IRQHandler+0x76a>
 800cadc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	da0c      	bge.n	800cafe <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f001 faeb 	bl	800e0c0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800caea:	e008      	b.n	800cafe <HAL_UART_IRQHandler+0x76a>
      return;
 800caec:	bf00      	nop
 800caee:	e006      	b.n	800cafe <HAL_UART_IRQHandler+0x76a>
    return;
 800caf0:	bf00      	nop
 800caf2:	e004      	b.n	800cafe <HAL_UART_IRQHandler+0x76a>
      return;
 800caf4:	bf00      	nop
 800caf6:	e002      	b.n	800cafe <HAL_UART_IRQHandler+0x76a>
      return;
 800caf8:	bf00      	nop
 800cafa:	e000      	b.n	800cafe <HAL_UART_IRQHandler+0x76a>
    return;
 800cafc:	bf00      	nop
  }
}
 800cafe:	37e8      	adds	r7, #232	@ 0xe8
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}
 800cb04:	effffffe 	.word	0xeffffffe

0800cb08 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cb08:	b480      	push	{r7}
 800cb0a:	b083      	sub	sp, #12
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cb10:	bf00      	nop
 800cb12:	370c      	adds	r7, #12
 800cb14:	46bd      	mov	sp, r7
 800cb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1a:	4770      	bx	lr

0800cb1c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cb1c:	b480      	push	{r7}
 800cb1e:	b083      	sub	sp, #12
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800cb24:	bf00      	nop
 800cb26:	370c      	adds	r7, #12
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2e:	4770      	bx	lr

0800cb30 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cb30:	b480      	push	{r7}
 800cb32:	b083      	sub	sp, #12
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cb38:	bf00      	nop
 800cb3a:	370c      	adds	r7, #12
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb42:	4770      	bx	lr

0800cb44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cb44:	b480      	push	{r7}
 800cb46:	b083      	sub	sp, #12
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	460b      	mov	r3, r1
 800cb4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cb50:	bf00      	nop
 800cb52:	370c      	adds	r7, #12
 800cb54:	46bd      	mov	sp, r7
 800cb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5a:	4770      	bx	lr

0800cb5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cb5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cb60:	b092      	sub	sp, #72	@ 0x48
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cb66:	2300      	movs	r3, #0
 800cb68:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cb6c:	697b      	ldr	r3, [r7, #20]
 800cb6e:	689a      	ldr	r2, [r3, #8]
 800cb70:	697b      	ldr	r3, [r7, #20]
 800cb72:	691b      	ldr	r3, [r3, #16]
 800cb74:	431a      	orrs	r2, r3
 800cb76:	697b      	ldr	r3, [r7, #20]
 800cb78:	695b      	ldr	r3, [r3, #20]
 800cb7a:	431a      	orrs	r2, r3
 800cb7c:	697b      	ldr	r3, [r7, #20]
 800cb7e:	69db      	ldr	r3, [r3, #28]
 800cb80:	4313      	orrs	r3, r2
 800cb82:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cb84:	697b      	ldr	r3, [r7, #20]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	681a      	ldr	r2, [r3, #0]
 800cb8a:	4bbe      	ldr	r3, [pc, #760]	@ (800ce84 <UART_SetConfig+0x328>)
 800cb8c:	4013      	ands	r3, r2
 800cb8e:	697a      	ldr	r2, [r7, #20]
 800cb90:	6812      	ldr	r2, [r2, #0]
 800cb92:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cb94:	430b      	orrs	r3, r1
 800cb96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cb98:	697b      	ldr	r3, [r7, #20]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	685b      	ldr	r3, [r3, #4]
 800cb9e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cba2:	697b      	ldr	r3, [r7, #20]
 800cba4:	68da      	ldr	r2, [r3, #12]
 800cba6:	697b      	ldr	r3, [r7, #20]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	430a      	orrs	r2, r1
 800cbac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cbae:	697b      	ldr	r3, [r7, #20]
 800cbb0:	699b      	ldr	r3, [r3, #24]
 800cbb2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cbb4:	697b      	ldr	r3, [r7, #20]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	4ab3      	ldr	r2, [pc, #716]	@ (800ce88 <UART_SetConfig+0x32c>)
 800cbba:	4293      	cmp	r3, r2
 800cbbc:	d004      	beq.n	800cbc8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cbbe:	697b      	ldr	r3, [r7, #20]
 800cbc0:	6a1b      	ldr	r3, [r3, #32]
 800cbc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cbc4:	4313      	orrs	r3, r2
 800cbc6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cbc8:	697b      	ldr	r3, [r7, #20]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	689a      	ldr	r2, [r3, #8]
 800cbce:	4baf      	ldr	r3, [pc, #700]	@ (800ce8c <UART_SetConfig+0x330>)
 800cbd0:	4013      	ands	r3, r2
 800cbd2:	697a      	ldr	r2, [r7, #20]
 800cbd4:	6812      	ldr	r2, [r2, #0]
 800cbd6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cbd8:	430b      	orrs	r3, r1
 800cbda:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cbdc:	697b      	ldr	r3, [r7, #20]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbe2:	f023 010f 	bic.w	r1, r3, #15
 800cbe6:	697b      	ldr	r3, [r7, #20]
 800cbe8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cbea:	697b      	ldr	r3, [r7, #20]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	430a      	orrs	r2, r1
 800cbf0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cbf2:	697b      	ldr	r3, [r7, #20]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	4aa6      	ldr	r2, [pc, #664]	@ (800ce90 <UART_SetConfig+0x334>)
 800cbf8:	4293      	cmp	r3, r2
 800cbfa:	d177      	bne.n	800ccec <UART_SetConfig+0x190>
 800cbfc:	4ba5      	ldr	r3, [pc, #660]	@ (800ce94 <UART_SetConfig+0x338>)
 800cbfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc00:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cc04:	2b28      	cmp	r3, #40	@ 0x28
 800cc06:	d86d      	bhi.n	800cce4 <UART_SetConfig+0x188>
 800cc08:	a201      	add	r2, pc, #4	@ (adr r2, 800cc10 <UART_SetConfig+0xb4>)
 800cc0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc0e:	bf00      	nop
 800cc10:	0800ccb5 	.word	0x0800ccb5
 800cc14:	0800cce5 	.word	0x0800cce5
 800cc18:	0800cce5 	.word	0x0800cce5
 800cc1c:	0800cce5 	.word	0x0800cce5
 800cc20:	0800cce5 	.word	0x0800cce5
 800cc24:	0800cce5 	.word	0x0800cce5
 800cc28:	0800cce5 	.word	0x0800cce5
 800cc2c:	0800cce5 	.word	0x0800cce5
 800cc30:	0800ccbd 	.word	0x0800ccbd
 800cc34:	0800cce5 	.word	0x0800cce5
 800cc38:	0800cce5 	.word	0x0800cce5
 800cc3c:	0800cce5 	.word	0x0800cce5
 800cc40:	0800cce5 	.word	0x0800cce5
 800cc44:	0800cce5 	.word	0x0800cce5
 800cc48:	0800cce5 	.word	0x0800cce5
 800cc4c:	0800cce5 	.word	0x0800cce5
 800cc50:	0800ccc5 	.word	0x0800ccc5
 800cc54:	0800cce5 	.word	0x0800cce5
 800cc58:	0800cce5 	.word	0x0800cce5
 800cc5c:	0800cce5 	.word	0x0800cce5
 800cc60:	0800cce5 	.word	0x0800cce5
 800cc64:	0800cce5 	.word	0x0800cce5
 800cc68:	0800cce5 	.word	0x0800cce5
 800cc6c:	0800cce5 	.word	0x0800cce5
 800cc70:	0800cccd 	.word	0x0800cccd
 800cc74:	0800cce5 	.word	0x0800cce5
 800cc78:	0800cce5 	.word	0x0800cce5
 800cc7c:	0800cce5 	.word	0x0800cce5
 800cc80:	0800cce5 	.word	0x0800cce5
 800cc84:	0800cce5 	.word	0x0800cce5
 800cc88:	0800cce5 	.word	0x0800cce5
 800cc8c:	0800cce5 	.word	0x0800cce5
 800cc90:	0800ccd5 	.word	0x0800ccd5
 800cc94:	0800cce5 	.word	0x0800cce5
 800cc98:	0800cce5 	.word	0x0800cce5
 800cc9c:	0800cce5 	.word	0x0800cce5
 800cca0:	0800cce5 	.word	0x0800cce5
 800cca4:	0800cce5 	.word	0x0800cce5
 800cca8:	0800cce5 	.word	0x0800cce5
 800ccac:	0800cce5 	.word	0x0800cce5
 800ccb0:	0800ccdd 	.word	0x0800ccdd
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccba:	e326      	b.n	800d30a <UART_SetConfig+0x7ae>
 800ccbc:	2304      	movs	r3, #4
 800ccbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccc2:	e322      	b.n	800d30a <UART_SetConfig+0x7ae>
 800ccc4:	2308      	movs	r3, #8
 800ccc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccca:	e31e      	b.n	800d30a <UART_SetConfig+0x7ae>
 800cccc:	2310      	movs	r3, #16
 800ccce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccd2:	e31a      	b.n	800d30a <UART_SetConfig+0x7ae>
 800ccd4:	2320      	movs	r3, #32
 800ccd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccda:	e316      	b.n	800d30a <UART_SetConfig+0x7ae>
 800ccdc:	2340      	movs	r3, #64	@ 0x40
 800ccde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cce2:	e312      	b.n	800d30a <UART_SetConfig+0x7ae>
 800cce4:	2380      	movs	r3, #128	@ 0x80
 800cce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccea:	e30e      	b.n	800d30a <UART_SetConfig+0x7ae>
 800ccec:	697b      	ldr	r3, [r7, #20]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	4a69      	ldr	r2, [pc, #420]	@ (800ce98 <UART_SetConfig+0x33c>)
 800ccf2:	4293      	cmp	r3, r2
 800ccf4:	d130      	bne.n	800cd58 <UART_SetConfig+0x1fc>
 800ccf6:	4b67      	ldr	r3, [pc, #412]	@ (800ce94 <UART_SetConfig+0x338>)
 800ccf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ccfa:	f003 0307 	and.w	r3, r3, #7
 800ccfe:	2b05      	cmp	r3, #5
 800cd00:	d826      	bhi.n	800cd50 <UART_SetConfig+0x1f4>
 800cd02:	a201      	add	r2, pc, #4	@ (adr r2, 800cd08 <UART_SetConfig+0x1ac>)
 800cd04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd08:	0800cd21 	.word	0x0800cd21
 800cd0c:	0800cd29 	.word	0x0800cd29
 800cd10:	0800cd31 	.word	0x0800cd31
 800cd14:	0800cd39 	.word	0x0800cd39
 800cd18:	0800cd41 	.word	0x0800cd41
 800cd1c:	0800cd49 	.word	0x0800cd49
 800cd20:	2300      	movs	r3, #0
 800cd22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd26:	e2f0      	b.n	800d30a <UART_SetConfig+0x7ae>
 800cd28:	2304      	movs	r3, #4
 800cd2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd2e:	e2ec      	b.n	800d30a <UART_SetConfig+0x7ae>
 800cd30:	2308      	movs	r3, #8
 800cd32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd36:	e2e8      	b.n	800d30a <UART_SetConfig+0x7ae>
 800cd38:	2310      	movs	r3, #16
 800cd3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd3e:	e2e4      	b.n	800d30a <UART_SetConfig+0x7ae>
 800cd40:	2320      	movs	r3, #32
 800cd42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd46:	e2e0      	b.n	800d30a <UART_SetConfig+0x7ae>
 800cd48:	2340      	movs	r3, #64	@ 0x40
 800cd4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd4e:	e2dc      	b.n	800d30a <UART_SetConfig+0x7ae>
 800cd50:	2380      	movs	r3, #128	@ 0x80
 800cd52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd56:	e2d8      	b.n	800d30a <UART_SetConfig+0x7ae>
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	4a4f      	ldr	r2, [pc, #316]	@ (800ce9c <UART_SetConfig+0x340>)
 800cd5e:	4293      	cmp	r3, r2
 800cd60:	d130      	bne.n	800cdc4 <UART_SetConfig+0x268>
 800cd62:	4b4c      	ldr	r3, [pc, #304]	@ (800ce94 <UART_SetConfig+0x338>)
 800cd64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd66:	f003 0307 	and.w	r3, r3, #7
 800cd6a:	2b05      	cmp	r3, #5
 800cd6c:	d826      	bhi.n	800cdbc <UART_SetConfig+0x260>
 800cd6e:	a201      	add	r2, pc, #4	@ (adr r2, 800cd74 <UART_SetConfig+0x218>)
 800cd70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd74:	0800cd8d 	.word	0x0800cd8d
 800cd78:	0800cd95 	.word	0x0800cd95
 800cd7c:	0800cd9d 	.word	0x0800cd9d
 800cd80:	0800cda5 	.word	0x0800cda5
 800cd84:	0800cdad 	.word	0x0800cdad
 800cd88:	0800cdb5 	.word	0x0800cdb5
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd92:	e2ba      	b.n	800d30a <UART_SetConfig+0x7ae>
 800cd94:	2304      	movs	r3, #4
 800cd96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd9a:	e2b6      	b.n	800d30a <UART_SetConfig+0x7ae>
 800cd9c:	2308      	movs	r3, #8
 800cd9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cda2:	e2b2      	b.n	800d30a <UART_SetConfig+0x7ae>
 800cda4:	2310      	movs	r3, #16
 800cda6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdaa:	e2ae      	b.n	800d30a <UART_SetConfig+0x7ae>
 800cdac:	2320      	movs	r3, #32
 800cdae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdb2:	e2aa      	b.n	800d30a <UART_SetConfig+0x7ae>
 800cdb4:	2340      	movs	r3, #64	@ 0x40
 800cdb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdba:	e2a6      	b.n	800d30a <UART_SetConfig+0x7ae>
 800cdbc:	2380      	movs	r3, #128	@ 0x80
 800cdbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdc2:	e2a2      	b.n	800d30a <UART_SetConfig+0x7ae>
 800cdc4:	697b      	ldr	r3, [r7, #20]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	4a35      	ldr	r2, [pc, #212]	@ (800cea0 <UART_SetConfig+0x344>)
 800cdca:	4293      	cmp	r3, r2
 800cdcc:	d130      	bne.n	800ce30 <UART_SetConfig+0x2d4>
 800cdce:	4b31      	ldr	r3, [pc, #196]	@ (800ce94 <UART_SetConfig+0x338>)
 800cdd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cdd2:	f003 0307 	and.w	r3, r3, #7
 800cdd6:	2b05      	cmp	r3, #5
 800cdd8:	d826      	bhi.n	800ce28 <UART_SetConfig+0x2cc>
 800cdda:	a201      	add	r2, pc, #4	@ (adr r2, 800cde0 <UART_SetConfig+0x284>)
 800cddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cde0:	0800cdf9 	.word	0x0800cdf9
 800cde4:	0800ce01 	.word	0x0800ce01
 800cde8:	0800ce09 	.word	0x0800ce09
 800cdec:	0800ce11 	.word	0x0800ce11
 800cdf0:	0800ce19 	.word	0x0800ce19
 800cdf4:	0800ce21 	.word	0x0800ce21
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdfe:	e284      	b.n	800d30a <UART_SetConfig+0x7ae>
 800ce00:	2304      	movs	r3, #4
 800ce02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce06:	e280      	b.n	800d30a <UART_SetConfig+0x7ae>
 800ce08:	2308      	movs	r3, #8
 800ce0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce0e:	e27c      	b.n	800d30a <UART_SetConfig+0x7ae>
 800ce10:	2310      	movs	r3, #16
 800ce12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce16:	e278      	b.n	800d30a <UART_SetConfig+0x7ae>
 800ce18:	2320      	movs	r3, #32
 800ce1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce1e:	e274      	b.n	800d30a <UART_SetConfig+0x7ae>
 800ce20:	2340      	movs	r3, #64	@ 0x40
 800ce22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce26:	e270      	b.n	800d30a <UART_SetConfig+0x7ae>
 800ce28:	2380      	movs	r3, #128	@ 0x80
 800ce2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce2e:	e26c      	b.n	800d30a <UART_SetConfig+0x7ae>
 800ce30:	697b      	ldr	r3, [r7, #20]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	4a1b      	ldr	r2, [pc, #108]	@ (800cea4 <UART_SetConfig+0x348>)
 800ce36:	4293      	cmp	r3, r2
 800ce38:	d142      	bne.n	800cec0 <UART_SetConfig+0x364>
 800ce3a:	4b16      	ldr	r3, [pc, #88]	@ (800ce94 <UART_SetConfig+0x338>)
 800ce3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce3e:	f003 0307 	and.w	r3, r3, #7
 800ce42:	2b05      	cmp	r3, #5
 800ce44:	d838      	bhi.n	800ceb8 <UART_SetConfig+0x35c>
 800ce46:	a201      	add	r2, pc, #4	@ (adr r2, 800ce4c <UART_SetConfig+0x2f0>)
 800ce48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce4c:	0800ce65 	.word	0x0800ce65
 800ce50:	0800ce6d 	.word	0x0800ce6d
 800ce54:	0800ce75 	.word	0x0800ce75
 800ce58:	0800ce7d 	.word	0x0800ce7d
 800ce5c:	0800cea9 	.word	0x0800cea9
 800ce60:	0800ceb1 	.word	0x0800ceb1
 800ce64:	2300      	movs	r3, #0
 800ce66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce6a:	e24e      	b.n	800d30a <UART_SetConfig+0x7ae>
 800ce6c:	2304      	movs	r3, #4
 800ce6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce72:	e24a      	b.n	800d30a <UART_SetConfig+0x7ae>
 800ce74:	2308      	movs	r3, #8
 800ce76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce7a:	e246      	b.n	800d30a <UART_SetConfig+0x7ae>
 800ce7c:	2310      	movs	r3, #16
 800ce7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce82:	e242      	b.n	800d30a <UART_SetConfig+0x7ae>
 800ce84:	cfff69f3 	.word	0xcfff69f3
 800ce88:	58000c00 	.word	0x58000c00
 800ce8c:	11fff4ff 	.word	0x11fff4ff
 800ce90:	40011000 	.word	0x40011000
 800ce94:	58024400 	.word	0x58024400
 800ce98:	40004400 	.word	0x40004400
 800ce9c:	40004800 	.word	0x40004800
 800cea0:	40004c00 	.word	0x40004c00
 800cea4:	40005000 	.word	0x40005000
 800cea8:	2320      	movs	r3, #32
 800ceaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ceae:	e22c      	b.n	800d30a <UART_SetConfig+0x7ae>
 800ceb0:	2340      	movs	r3, #64	@ 0x40
 800ceb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ceb6:	e228      	b.n	800d30a <UART_SetConfig+0x7ae>
 800ceb8:	2380      	movs	r3, #128	@ 0x80
 800ceba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cebe:	e224      	b.n	800d30a <UART_SetConfig+0x7ae>
 800cec0:	697b      	ldr	r3, [r7, #20]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	4ab1      	ldr	r2, [pc, #708]	@ (800d18c <UART_SetConfig+0x630>)
 800cec6:	4293      	cmp	r3, r2
 800cec8:	d176      	bne.n	800cfb8 <UART_SetConfig+0x45c>
 800ceca:	4bb1      	ldr	r3, [pc, #708]	@ (800d190 <UART_SetConfig+0x634>)
 800cecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cece:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ced2:	2b28      	cmp	r3, #40	@ 0x28
 800ced4:	d86c      	bhi.n	800cfb0 <UART_SetConfig+0x454>
 800ced6:	a201      	add	r2, pc, #4	@ (adr r2, 800cedc <UART_SetConfig+0x380>)
 800ced8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cedc:	0800cf81 	.word	0x0800cf81
 800cee0:	0800cfb1 	.word	0x0800cfb1
 800cee4:	0800cfb1 	.word	0x0800cfb1
 800cee8:	0800cfb1 	.word	0x0800cfb1
 800ceec:	0800cfb1 	.word	0x0800cfb1
 800cef0:	0800cfb1 	.word	0x0800cfb1
 800cef4:	0800cfb1 	.word	0x0800cfb1
 800cef8:	0800cfb1 	.word	0x0800cfb1
 800cefc:	0800cf89 	.word	0x0800cf89
 800cf00:	0800cfb1 	.word	0x0800cfb1
 800cf04:	0800cfb1 	.word	0x0800cfb1
 800cf08:	0800cfb1 	.word	0x0800cfb1
 800cf0c:	0800cfb1 	.word	0x0800cfb1
 800cf10:	0800cfb1 	.word	0x0800cfb1
 800cf14:	0800cfb1 	.word	0x0800cfb1
 800cf18:	0800cfb1 	.word	0x0800cfb1
 800cf1c:	0800cf91 	.word	0x0800cf91
 800cf20:	0800cfb1 	.word	0x0800cfb1
 800cf24:	0800cfb1 	.word	0x0800cfb1
 800cf28:	0800cfb1 	.word	0x0800cfb1
 800cf2c:	0800cfb1 	.word	0x0800cfb1
 800cf30:	0800cfb1 	.word	0x0800cfb1
 800cf34:	0800cfb1 	.word	0x0800cfb1
 800cf38:	0800cfb1 	.word	0x0800cfb1
 800cf3c:	0800cf99 	.word	0x0800cf99
 800cf40:	0800cfb1 	.word	0x0800cfb1
 800cf44:	0800cfb1 	.word	0x0800cfb1
 800cf48:	0800cfb1 	.word	0x0800cfb1
 800cf4c:	0800cfb1 	.word	0x0800cfb1
 800cf50:	0800cfb1 	.word	0x0800cfb1
 800cf54:	0800cfb1 	.word	0x0800cfb1
 800cf58:	0800cfb1 	.word	0x0800cfb1
 800cf5c:	0800cfa1 	.word	0x0800cfa1
 800cf60:	0800cfb1 	.word	0x0800cfb1
 800cf64:	0800cfb1 	.word	0x0800cfb1
 800cf68:	0800cfb1 	.word	0x0800cfb1
 800cf6c:	0800cfb1 	.word	0x0800cfb1
 800cf70:	0800cfb1 	.word	0x0800cfb1
 800cf74:	0800cfb1 	.word	0x0800cfb1
 800cf78:	0800cfb1 	.word	0x0800cfb1
 800cf7c:	0800cfa9 	.word	0x0800cfa9
 800cf80:	2301      	movs	r3, #1
 800cf82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf86:	e1c0      	b.n	800d30a <UART_SetConfig+0x7ae>
 800cf88:	2304      	movs	r3, #4
 800cf8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf8e:	e1bc      	b.n	800d30a <UART_SetConfig+0x7ae>
 800cf90:	2308      	movs	r3, #8
 800cf92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf96:	e1b8      	b.n	800d30a <UART_SetConfig+0x7ae>
 800cf98:	2310      	movs	r3, #16
 800cf9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf9e:	e1b4      	b.n	800d30a <UART_SetConfig+0x7ae>
 800cfa0:	2320      	movs	r3, #32
 800cfa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfa6:	e1b0      	b.n	800d30a <UART_SetConfig+0x7ae>
 800cfa8:	2340      	movs	r3, #64	@ 0x40
 800cfaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfae:	e1ac      	b.n	800d30a <UART_SetConfig+0x7ae>
 800cfb0:	2380      	movs	r3, #128	@ 0x80
 800cfb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfb6:	e1a8      	b.n	800d30a <UART_SetConfig+0x7ae>
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	4a75      	ldr	r2, [pc, #468]	@ (800d194 <UART_SetConfig+0x638>)
 800cfbe:	4293      	cmp	r3, r2
 800cfc0:	d130      	bne.n	800d024 <UART_SetConfig+0x4c8>
 800cfc2:	4b73      	ldr	r3, [pc, #460]	@ (800d190 <UART_SetConfig+0x634>)
 800cfc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cfc6:	f003 0307 	and.w	r3, r3, #7
 800cfca:	2b05      	cmp	r3, #5
 800cfcc:	d826      	bhi.n	800d01c <UART_SetConfig+0x4c0>
 800cfce:	a201      	add	r2, pc, #4	@ (adr r2, 800cfd4 <UART_SetConfig+0x478>)
 800cfd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfd4:	0800cfed 	.word	0x0800cfed
 800cfd8:	0800cff5 	.word	0x0800cff5
 800cfdc:	0800cffd 	.word	0x0800cffd
 800cfe0:	0800d005 	.word	0x0800d005
 800cfe4:	0800d00d 	.word	0x0800d00d
 800cfe8:	0800d015 	.word	0x0800d015
 800cfec:	2300      	movs	r3, #0
 800cfee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cff2:	e18a      	b.n	800d30a <UART_SetConfig+0x7ae>
 800cff4:	2304      	movs	r3, #4
 800cff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cffa:	e186      	b.n	800d30a <UART_SetConfig+0x7ae>
 800cffc:	2308      	movs	r3, #8
 800cffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d002:	e182      	b.n	800d30a <UART_SetConfig+0x7ae>
 800d004:	2310      	movs	r3, #16
 800d006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d00a:	e17e      	b.n	800d30a <UART_SetConfig+0x7ae>
 800d00c:	2320      	movs	r3, #32
 800d00e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d012:	e17a      	b.n	800d30a <UART_SetConfig+0x7ae>
 800d014:	2340      	movs	r3, #64	@ 0x40
 800d016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d01a:	e176      	b.n	800d30a <UART_SetConfig+0x7ae>
 800d01c:	2380      	movs	r3, #128	@ 0x80
 800d01e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d022:	e172      	b.n	800d30a <UART_SetConfig+0x7ae>
 800d024:	697b      	ldr	r3, [r7, #20]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	4a5b      	ldr	r2, [pc, #364]	@ (800d198 <UART_SetConfig+0x63c>)
 800d02a:	4293      	cmp	r3, r2
 800d02c:	d130      	bne.n	800d090 <UART_SetConfig+0x534>
 800d02e:	4b58      	ldr	r3, [pc, #352]	@ (800d190 <UART_SetConfig+0x634>)
 800d030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d032:	f003 0307 	and.w	r3, r3, #7
 800d036:	2b05      	cmp	r3, #5
 800d038:	d826      	bhi.n	800d088 <UART_SetConfig+0x52c>
 800d03a:	a201      	add	r2, pc, #4	@ (adr r2, 800d040 <UART_SetConfig+0x4e4>)
 800d03c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d040:	0800d059 	.word	0x0800d059
 800d044:	0800d061 	.word	0x0800d061
 800d048:	0800d069 	.word	0x0800d069
 800d04c:	0800d071 	.word	0x0800d071
 800d050:	0800d079 	.word	0x0800d079
 800d054:	0800d081 	.word	0x0800d081
 800d058:	2300      	movs	r3, #0
 800d05a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d05e:	e154      	b.n	800d30a <UART_SetConfig+0x7ae>
 800d060:	2304      	movs	r3, #4
 800d062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d066:	e150      	b.n	800d30a <UART_SetConfig+0x7ae>
 800d068:	2308      	movs	r3, #8
 800d06a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d06e:	e14c      	b.n	800d30a <UART_SetConfig+0x7ae>
 800d070:	2310      	movs	r3, #16
 800d072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d076:	e148      	b.n	800d30a <UART_SetConfig+0x7ae>
 800d078:	2320      	movs	r3, #32
 800d07a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d07e:	e144      	b.n	800d30a <UART_SetConfig+0x7ae>
 800d080:	2340      	movs	r3, #64	@ 0x40
 800d082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d086:	e140      	b.n	800d30a <UART_SetConfig+0x7ae>
 800d088:	2380      	movs	r3, #128	@ 0x80
 800d08a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d08e:	e13c      	b.n	800d30a <UART_SetConfig+0x7ae>
 800d090:	697b      	ldr	r3, [r7, #20]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	4a41      	ldr	r2, [pc, #260]	@ (800d19c <UART_SetConfig+0x640>)
 800d096:	4293      	cmp	r3, r2
 800d098:	f040 8082 	bne.w	800d1a0 <UART_SetConfig+0x644>
 800d09c:	4b3c      	ldr	r3, [pc, #240]	@ (800d190 <UART_SetConfig+0x634>)
 800d09e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d0a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d0a4:	2b28      	cmp	r3, #40	@ 0x28
 800d0a6:	d86d      	bhi.n	800d184 <UART_SetConfig+0x628>
 800d0a8:	a201      	add	r2, pc, #4	@ (adr r2, 800d0b0 <UART_SetConfig+0x554>)
 800d0aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0ae:	bf00      	nop
 800d0b0:	0800d155 	.word	0x0800d155
 800d0b4:	0800d185 	.word	0x0800d185
 800d0b8:	0800d185 	.word	0x0800d185
 800d0bc:	0800d185 	.word	0x0800d185
 800d0c0:	0800d185 	.word	0x0800d185
 800d0c4:	0800d185 	.word	0x0800d185
 800d0c8:	0800d185 	.word	0x0800d185
 800d0cc:	0800d185 	.word	0x0800d185
 800d0d0:	0800d15d 	.word	0x0800d15d
 800d0d4:	0800d185 	.word	0x0800d185
 800d0d8:	0800d185 	.word	0x0800d185
 800d0dc:	0800d185 	.word	0x0800d185
 800d0e0:	0800d185 	.word	0x0800d185
 800d0e4:	0800d185 	.word	0x0800d185
 800d0e8:	0800d185 	.word	0x0800d185
 800d0ec:	0800d185 	.word	0x0800d185
 800d0f0:	0800d165 	.word	0x0800d165
 800d0f4:	0800d185 	.word	0x0800d185
 800d0f8:	0800d185 	.word	0x0800d185
 800d0fc:	0800d185 	.word	0x0800d185
 800d100:	0800d185 	.word	0x0800d185
 800d104:	0800d185 	.word	0x0800d185
 800d108:	0800d185 	.word	0x0800d185
 800d10c:	0800d185 	.word	0x0800d185
 800d110:	0800d16d 	.word	0x0800d16d
 800d114:	0800d185 	.word	0x0800d185
 800d118:	0800d185 	.word	0x0800d185
 800d11c:	0800d185 	.word	0x0800d185
 800d120:	0800d185 	.word	0x0800d185
 800d124:	0800d185 	.word	0x0800d185
 800d128:	0800d185 	.word	0x0800d185
 800d12c:	0800d185 	.word	0x0800d185
 800d130:	0800d175 	.word	0x0800d175
 800d134:	0800d185 	.word	0x0800d185
 800d138:	0800d185 	.word	0x0800d185
 800d13c:	0800d185 	.word	0x0800d185
 800d140:	0800d185 	.word	0x0800d185
 800d144:	0800d185 	.word	0x0800d185
 800d148:	0800d185 	.word	0x0800d185
 800d14c:	0800d185 	.word	0x0800d185
 800d150:	0800d17d 	.word	0x0800d17d
 800d154:	2301      	movs	r3, #1
 800d156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d15a:	e0d6      	b.n	800d30a <UART_SetConfig+0x7ae>
 800d15c:	2304      	movs	r3, #4
 800d15e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d162:	e0d2      	b.n	800d30a <UART_SetConfig+0x7ae>
 800d164:	2308      	movs	r3, #8
 800d166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d16a:	e0ce      	b.n	800d30a <UART_SetConfig+0x7ae>
 800d16c:	2310      	movs	r3, #16
 800d16e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d172:	e0ca      	b.n	800d30a <UART_SetConfig+0x7ae>
 800d174:	2320      	movs	r3, #32
 800d176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d17a:	e0c6      	b.n	800d30a <UART_SetConfig+0x7ae>
 800d17c:	2340      	movs	r3, #64	@ 0x40
 800d17e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d182:	e0c2      	b.n	800d30a <UART_SetConfig+0x7ae>
 800d184:	2380      	movs	r3, #128	@ 0x80
 800d186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d18a:	e0be      	b.n	800d30a <UART_SetConfig+0x7ae>
 800d18c:	40011400 	.word	0x40011400
 800d190:	58024400 	.word	0x58024400
 800d194:	40007800 	.word	0x40007800
 800d198:	40007c00 	.word	0x40007c00
 800d19c:	40011800 	.word	0x40011800
 800d1a0:	697b      	ldr	r3, [r7, #20]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	4aad      	ldr	r2, [pc, #692]	@ (800d45c <UART_SetConfig+0x900>)
 800d1a6:	4293      	cmp	r3, r2
 800d1a8:	d176      	bne.n	800d298 <UART_SetConfig+0x73c>
 800d1aa:	4bad      	ldr	r3, [pc, #692]	@ (800d460 <UART_SetConfig+0x904>)
 800d1ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d1ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d1b2:	2b28      	cmp	r3, #40	@ 0x28
 800d1b4:	d86c      	bhi.n	800d290 <UART_SetConfig+0x734>
 800d1b6:	a201      	add	r2, pc, #4	@ (adr r2, 800d1bc <UART_SetConfig+0x660>)
 800d1b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1bc:	0800d261 	.word	0x0800d261
 800d1c0:	0800d291 	.word	0x0800d291
 800d1c4:	0800d291 	.word	0x0800d291
 800d1c8:	0800d291 	.word	0x0800d291
 800d1cc:	0800d291 	.word	0x0800d291
 800d1d0:	0800d291 	.word	0x0800d291
 800d1d4:	0800d291 	.word	0x0800d291
 800d1d8:	0800d291 	.word	0x0800d291
 800d1dc:	0800d269 	.word	0x0800d269
 800d1e0:	0800d291 	.word	0x0800d291
 800d1e4:	0800d291 	.word	0x0800d291
 800d1e8:	0800d291 	.word	0x0800d291
 800d1ec:	0800d291 	.word	0x0800d291
 800d1f0:	0800d291 	.word	0x0800d291
 800d1f4:	0800d291 	.word	0x0800d291
 800d1f8:	0800d291 	.word	0x0800d291
 800d1fc:	0800d271 	.word	0x0800d271
 800d200:	0800d291 	.word	0x0800d291
 800d204:	0800d291 	.word	0x0800d291
 800d208:	0800d291 	.word	0x0800d291
 800d20c:	0800d291 	.word	0x0800d291
 800d210:	0800d291 	.word	0x0800d291
 800d214:	0800d291 	.word	0x0800d291
 800d218:	0800d291 	.word	0x0800d291
 800d21c:	0800d279 	.word	0x0800d279
 800d220:	0800d291 	.word	0x0800d291
 800d224:	0800d291 	.word	0x0800d291
 800d228:	0800d291 	.word	0x0800d291
 800d22c:	0800d291 	.word	0x0800d291
 800d230:	0800d291 	.word	0x0800d291
 800d234:	0800d291 	.word	0x0800d291
 800d238:	0800d291 	.word	0x0800d291
 800d23c:	0800d281 	.word	0x0800d281
 800d240:	0800d291 	.word	0x0800d291
 800d244:	0800d291 	.word	0x0800d291
 800d248:	0800d291 	.word	0x0800d291
 800d24c:	0800d291 	.word	0x0800d291
 800d250:	0800d291 	.word	0x0800d291
 800d254:	0800d291 	.word	0x0800d291
 800d258:	0800d291 	.word	0x0800d291
 800d25c:	0800d289 	.word	0x0800d289
 800d260:	2301      	movs	r3, #1
 800d262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d266:	e050      	b.n	800d30a <UART_SetConfig+0x7ae>
 800d268:	2304      	movs	r3, #4
 800d26a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d26e:	e04c      	b.n	800d30a <UART_SetConfig+0x7ae>
 800d270:	2308      	movs	r3, #8
 800d272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d276:	e048      	b.n	800d30a <UART_SetConfig+0x7ae>
 800d278:	2310      	movs	r3, #16
 800d27a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d27e:	e044      	b.n	800d30a <UART_SetConfig+0x7ae>
 800d280:	2320      	movs	r3, #32
 800d282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d286:	e040      	b.n	800d30a <UART_SetConfig+0x7ae>
 800d288:	2340      	movs	r3, #64	@ 0x40
 800d28a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d28e:	e03c      	b.n	800d30a <UART_SetConfig+0x7ae>
 800d290:	2380      	movs	r3, #128	@ 0x80
 800d292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d296:	e038      	b.n	800d30a <UART_SetConfig+0x7ae>
 800d298:	697b      	ldr	r3, [r7, #20]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	4a71      	ldr	r2, [pc, #452]	@ (800d464 <UART_SetConfig+0x908>)
 800d29e:	4293      	cmp	r3, r2
 800d2a0:	d130      	bne.n	800d304 <UART_SetConfig+0x7a8>
 800d2a2:	4b6f      	ldr	r3, [pc, #444]	@ (800d460 <UART_SetConfig+0x904>)
 800d2a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d2a6:	f003 0307 	and.w	r3, r3, #7
 800d2aa:	2b05      	cmp	r3, #5
 800d2ac:	d826      	bhi.n	800d2fc <UART_SetConfig+0x7a0>
 800d2ae:	a201      	add	r2, pc, #4	@ (adr r2, 800d2b4 <UART_SetConfig+0x758>)
 800d2b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2b4:	0800d2cd 	.word	0x0800d2cd
 800d2b8:	0800d2d5 	.word	0x0800d2d5
 800d2bc:	0800d2dd 	.word	0x0800d2dd
 800d2c0:	0800d2e5 	.word	0x0800d2e5
 800d2c4:	0800d2ed 	.word	0x0800d2ed
 800d2c8:	0800d2f5 	.word	0x0800d2f5
 800d2cc:	2302      	movs	r3, #2
 800d2ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2d2:	e01a      	b.n	800d30a <UART_SetConfig+0x7ae>
 800d2d4:	2304      	movs	r3, #4
 800d2d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2da:	e016      	b.n	800d30a <UART_SetConfig+0x7ae>
 800d2dc:	2308      	movs	r3, #8
 800d2de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2e2:	e012      	b.n	800d30a <UART_SetConfig+0x7ae>
 800d2e4:	2310      	movs	r3, #16
 800d2e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2ea:	e00e      	b.n	800d30a <UART_SetConfig+0x7ae>
 800d2ec:	2320      	movs	r3, #32
 800d2ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2f2:	e00a      	b.n	800d30a <UART_SetConfig+0x7ae>
 800d2f4:	2340      	movs	r3, #64	@ 0x40
 800d2f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2fa:	e006      	b.n	800d30a <UART_SetConfig+0x7ae>
 800d2fc:	2380      	movs	r3, #128	@ 0x80
 800d2fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d302:	e002      	b.n	800d30a <UART_SetConfig+0x7ae>
 800d304:	2380      	movs	r3, #128	@ 0x80
 800d306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d30a:	697b      	ldr	r3, [r7, #20]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	4a55      	ldr	r2, [pc, #340]	@ (800d464 <UART_SetConfig+0x908>)
 800d310:	4293      	cmp	r3, r2
 800d312:	f040 80f8 	bne.w	800d506 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d316:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d31a:	2b20      	cmp	r3, #32
 800d31c:	dc46      	bgt.n	800d3ac <UART_SetConfig+0x850>
 800d31e:	2b02      	cmp	r3, #2
 800d320:	db75      	blt.n	800d40e <UART_SetConfig+0x8b2>
 800d322:	3b02      	subs	r3, #2
 800d324:	2b1e      	cmp	r3, #30
 800d326:	d872      	bhi.n	800d40e <UART_SetConfig+0x8b2>
 800d328:	a201      	add	r2, pc, #4	@ (adr r2, 800d330 <UART_SetConfig+0x7d4>)
 800d32a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d32e:	bf00      	nop
 800d330:	0800d3b3 	.word	0x0800d3b3
 800d334:	0800d40f 	.word	0x0800d40f
 800d338:	0800d3bb 	.word	0x0800d3bb
 800d33c:	0800d40f 	.word	0x0800d40f
 800d340:	0800d40f 	.word	0x0800d40f
 800d344:	0800d40f 	.word	0x0800d40f
 800d348:	0800d3cb 	.word	0x0800d3cb
 800d34c:	0800d40f 	.word	0x0800d40f
 800d350:	0800d40f 	.word	0x0800d40f
 800d354:	0800d40f 	.word	0x0800d40f
 800d358:	0800d40f 	.word	0x0800d40f
 800d35c:	0800d40f 	.word	0x0800d40f
 800d360:	0800d40f 	.word	0x0800d40f
 800d364:	0800d40f 	.word	0x0800d40f
 800d368:	0800d3db 	.word	0x0800d3db
 800d36c:	0800d40f 	.word	0x0800d40f
 800d370:	0800d40f 	.word	0x0800d40f
 800d374:	0800d40f 	.word	0x0800d40f
 800d378:	0800d40f 	.word	0x0800d40f
 800d37c:	0800d40f 	.word	0x0800d40f
 800d380:	0800d40f 	.word	0x0800d40f
 800d384:	0800d40f 	.word	0x0800d40f
 800d388:	0800d40f 	.word	0x0800d40f
 800d38c:	0800d40f 	.word	0x0800d40f
 800d390:	0800d40f 	.word	0x0800d40f
 800d394:	0800d40f 	.word	0x0800d40f
 800d398:	0800d40f 	.word	0x0800d40f
 800d39c:	0800d40f 	.word	0x0800d40f
 800d3a0:	0800d40f 	.word	0x0800d40f
 800d3a4:	0800d40f 	.word	0x0800d40f
 800d3a8:	0800d401 	.word	0x0800d401
 800d3ac:	2b40      	cmp	r3, #64	@ 0x40
 800d3ae:	d02a      	beq.n	800d406 <UART_SetConfig+0x8aa>
 800d3b0:	e02d      	b.n	800d40e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d3b2:	f7fc f8c3 	bl	800953c <HAL_RCCEx_GetD3PCLK1Freq>
 800d3b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d3b8:	e02f      	b.n	800d41a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d3ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d3be:	4618      	mov	r0, r3
 800d3c0:	f7fc f8d2 	bl	8009568 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d3c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d3c8:	e027      	b.n	800d41a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d3ca:	f107 0318 	add.w	r3, r7, #24
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	f7fc fa1e 	bl	8009810 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d3d4:	69fb      	ldr	r3, [r7, #28]
 800d3d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d3d8:	e01f      	b.n	800d41a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d3da:	4b21      	ldr	r3, [pc, #132]	@ (800d460 <UART_SetConfig+0x904>)
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	f003 0320 	and.w	r3, r3, #32
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d009      	beq.n	800d3fa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d3e6:	4b1e      	ldr	r3, [pc, #120]	@ (800d460 <UART_SetConfig+0x904>)
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	08db      	lsrs	r3, r3, #3
 800d3ec:	f003 0303 	and.w	r3, r3, #3
 800d3f0:	4a1d      	ldr	r2, [pc, #116]	@ (800d468 <UART_SetConfig+0x90c>)
 800d3f2:	fa22 f303 	lsr.w	r3, r2, r3
 800d3f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d3f8:	e00f      	b.n	800d41a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d3fa:	4b1b      	ldr	r3, [pc, #108]	@ (800d468 <UART_SetConfig+0x90c>)
 800d3fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d3fe:	e00c      	b.n	800d41a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d400:	4b1a      	ldr	r3, [pc, #104]	@ (800d46c <UART_SetConfig+0x910>)
 800d402:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d404:	e009      	b.n	800d41a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d406:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d40a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d40c:	e005      	b.n	800d41a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d40e:	2300      	movs	r3, #0
 800d410:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d412:	2301      	movs	r3, #1
 800d414:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d418:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d41a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	f000 81ee 	beq.w	800d7fe <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d422:	697b      	ldr	r3, [r7, #20]
 800d424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d426:	4a12      	ldr	r2, [pc, #72]	@ (800d470 <UART_SetConfig+0x914>)
 800d428:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d42c:	461a      	mov	r2, r3
 800d42e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d430:	fbb3 f3f2 	udiv	r3, r3, r2
 800d434:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d436:	697b      	ldr	r3, [r7, #20]
 800d438:	685a      	ldr	r2, [r3, #4]
 800d43a:	4613      	mov	r3, r2
 800d43c:	005b      	lsls	r3, r3, #1
 800d43e:	4413      	add	r3, r2
 800d440:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d442:	429a      	cmp	r2, r3
 800d444:	d305      	bcc.n	800d452 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d446:	697b      	ldr	r3, [r7, #20]
 800d448:	685b      	ldr	r3, [r3, #4]
 800d44a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d44c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d44e:	429a      	cmp	r2, r3
 800d450:	d910      	bls.n	800d474 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800d452:	2301      	movs	r3, #1
 800d454:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d458:	e1d1      	b.n	800d7fe <UART_SetConfig+0xca2>
 800d45a:	bf00      	nop
 800d45c:	40011c00 	.word	0x40011c00
 800d460:	58024400 	.word	0x58024400
 800d464:	58000c00 	.word	0x58000c00
 800d468:	03d09000 	.word	0x03d09000
 800d46c:	003d0900 	.word	0x003d0900
 800d470:	08012a20 	.word	0x08012a20
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d474:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d476:	2200      	movs	r2, #0
 800d478:	60bb      	str	r3, [r7, #8]
 800d47a:	60fa      	str	r2, [r7, #12]
 800d47c:	697b      	ldr	r3, [r7, #20]
 800d47e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d480:	4ac0      	ldr	r2, [pc, #768]	@ (800d784 <UART_SetConfig+0xc28>)
 800d482:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d486:	b29b      	uxth	r3, r3
 800d488:	2200      	movs	r2, #0
 800d48a:	603b      	str	r3, [r7, #0]
 800d48c:	607a      	str	r2, [r7, #4]
 800d48e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d492:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d496:	f7f2 ff7b 	bl	8000390 <__aeabi_uldivmod>
 800d49a:	4602      	mov	r2, r0
 800d49c:	460b      	mov	r3, r1
 800d49e:	4610      	mov	r0, r2
 800d4a0:	4619      	mov	r1, r3
 800d4a2:	f04f 0200 	mov.w	r2, #0
 800d4a6:	f04f 0300 	mov.w	r3, #0
 800d4aa:	020b      	lsls	r3, r1, #8
 800d4ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d4b0:	0202      	lsls	r2, r0, #8
 800d4b2:	6979      	ldr	r1, [r7, #20]
 800d4b4:	6849      	ldr	r1, [r1, #4]
 800d4b6:	0849      	lsrs	r1, r1, #1
 800d4b8:	2000      	movs	r0, #0
 800d4ba:	460c      	mov	r4, r1
 800d4bc:	4605      	mov	r5, r0
 800d4be:	eb12 0804 	adds.w	r8, r2, r4
 800d4c2:	eb43 0905 	adc.w	r9, r3, r5
 800d4c6:	697b      	ldr	r3, [r7, #20]
 800d4c8:	685b      	ldr	r3, [r3, #4]
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	469a      	mov	sl, r3
 800d4ce:	4693      	mov	fp, r2
 800d4d0:	4652      	mov	r2, sl
 800d4d2:	465b      	mov	r3, fp
 800d4d4:	4640      	mov	r0, r8
 800d4d6:	4649      	mov	r1, r9
 800d4d8:	f7f2 ff5a 	bl	8000390 <__aeabi_uldivmod>
 800d4dc:	4602      	mov	r2, r0
 800d4de:	460b      	mov	r3, r1
 800d4e0:	4613      	mov	r3, r2
 800d4e2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d4e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d4ea:	d308      	bcc.n	800d4fe <UART_SetConfig+0x9a2>
 800d4ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d4f2:	d204      	bcs.n	800d4fe <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800d4f4:	697b      	ldr	r3, [r7, #20]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d4fa:	60da      	str	r2, [r3, #12]
 800d4fc:	e17f      	b.n	800d7fe <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800d4fe:	2301      	movs	r3, #1
 800d500:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d504:	e17b      	b.n	800d7fe <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d506:	697b      	ldr	r3, [r7, #20]
 800d508:	69db      	ldr	r3, [r3, #28]
 800d50a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d50e:	f040 80bd 	bne.w	800d68c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800d512:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d516:	2b20      	cmp	r3, #32
 800d518:	dc48      	bgt.n	800d5ac <UART_SetConfig+0xa50>
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	db7b      	blt.n	800d616 <UART_SetConfig+0xaba>
 800d51e:	2b20      	cmp	r3, #32
 800d520:	d879      	bhi.n	800d616 <UART_SetConfig+0xaba>
 800d522:	a201      	add	r2, pc, #4	@ (adr r2, 800d528 <UART_SetConfig+0x9cc>)
 800d524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d528:	0800d5b3 	.word	0x0800d5b3
 800d52c:	0800d5bb 	.word	0x0800d5bb
 800d530:	0800d617 	.word	0x0800d617
 800d534:	0800d617 	.word	0x0800d617
 800d538:	0800d5c3 	.word	0x0800d5c3
 800d53c:	0800d617 	.word	0x0800d617
 800d540:	0800d617 	.word	0x0800d617
 800d544:	0800d617 	.word	0x0800d617
 800d548:	0800d5d3 	.word	0x0800d5d3
 800d54c:	0800d617 	.word	0x0800d617
 800d550:	0800d617 	.word	0x0800d617
 800d554:	0800d617 	.word	0x0800d617
 800d558:	0800d617 	.word	0x0800d617
 800d55c:	0800d617 	.word	0x0800d617
 800d560:	0800d617 	.word	0x0800d617
 800d564:	0800d617 	.word	0x0800d617
 800d568:	0800d5e3 	.word	0x0800d5e3
 800d56c:	0800d617 	.word	0x0800d617
 800d570:	0800d617 	.word	0x0800d617
 800d574:	0800d617 	.word	0x0800d617
 800d578:	0800d617 	.word	0x0800d617
 800d57c:	0800d617 	.word	0x0800d617
 800d580:	0800d617 	.word	0x0800d617
 800d584:	0800d617 	.word	0x0800d617
 800d588:	0800d617 	.word	0x0800d617
 800d58c:	0800d617 	.word	0x0800d617
 800d590:	0800d617 	.word	0x0800d617
 800d594:	0800d617 	.word	0x0800d617
 800d598:	0800d617 	.word	0x0800d617
 800d59c:	0800d617 	.word	0x0800d617
 800d5a0:	0800d617 	.word	0x0800d617
 800d5a4:	0800d617 	.word	0x0800d617
 800d5a8:	0800d609 	.word	0x0800d609
 800d5ac:	2b40      	cmp	r3, #64	@ 0x40
 800d5ae:	d02e      	beq.n	800d60e <UART_SetConfig+0xab2>
 800d5b0:	e031      	b.n	800d616 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d5b2:	f7fa fdd9 	bl	8008168 <HAL_RCC_GetPCLK1Freq>
 800d5b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d5b8:	e033      	b.n	800d622 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d5ba:	f7fa fdeb 	bl	8008194 <HAL_RCC_GetPCLK2Freq>
 800d5be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d5c0:	e02f      	b.n	800d622 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d5c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f7fb ffce 	bl	8009568 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d5cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d5d0:	e027      	b.n	800d622 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d5d2:	f107 0318 	add.w	r3, r7, #24
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f7fc f91a 	bl	8009810 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d5dc:	69fb      	ldr	r3, [r7, #28]
 800d5de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d5e0:	e01f      	b.n	800d622 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d5e2:	4b69      	ldr	r3, [pc, #420]	@ (800d788 <UART_SetConfig+0xc2c>)
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	f003 0320 	and.w	r3, r3, #32
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d009      	beq.n	800d602 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d5ee:	4b66      	ldr	r3, [pc, #408]	@ (800d788 <UART_SetConfig+0xc2c>)
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	08db      	lsrs	r3, r3, #3
 800d5f4:	f003 0303 	and.w	r3, r3, #3
 800d5f8:	4a64      	ldr	r2, [pc, #400]	@ (800d78c <UART_SetConfig+0xc30>)
 800d5fa:	fa22 f303 	lsr.w	r3, r2, r3
 800d5fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d600:	e00f      	b.n	800d622 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800d602:	4b62      	ldr	r3, [pc, #392]	@ (800d78c <UART_SetConfig+0xc30>)
 800d604:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d606:	e00c      	b.n	800d622 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d608:	4b61      	ldr	r3, [pc, #388]	@ (800d790 <UART_SetConfig+0xc34>)
 800d60a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d60c:	e009      	b.n	800d622 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d60e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d614:	e005      	b.n	800d622 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800d616:	2300      	movs	r3, #0
 800d618:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d61a:	2301      	movs	r3, #1
 800d61c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d620:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d624:	2b00      	cmp	r3, #0
 800d626:	f000 80ea 	beq.w	800d7fe <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d62e:	4a55      	ldr	r2, [pc, #340]	@ (800d784 <UART_SetConfig+0xc28>)
 800d630:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d634:	461a      	mov	r2, r3
 800d636:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d638:	fbb3 f3f2 	udiv	r3, r3, r2
 800d63c:	005a      	lsls	r2, r3, #1
 800d63e:	697b      	ldr	r3, [r7, #20]
 800d640:	685b      	ldr	r3, [r3, #4]
 800d642:	085b      	lsrs	r3, r3, #1
 800d644:	441a      	add	r2, r3
 800d646:	697b      	ldr	r3, [r7, #20]
 800d648:	685b      	ldr	r3, [r3, #4]
 800d64a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d64e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d652:	2b0f      	cmp	r3, #15
 800d654:	d916      	bls.n	800d684 <UART_SetConfig+0xb28>
 800d656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d658:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d65c:	d212      	bcs.n	800d684 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d65e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d660:	b29b      	uxth	r3, r3
 800d662:	f023 030f 	bic.w	r3, r3, #15
 800d666:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d66a:	085b      	lsrs	r3, r3, #1
 800d66c:	b29b      	uxth	r3, r3
 800d66e:	f003 0307 	and.w	r3, r3, #7
 800d672:	b29a      	uxth	r2, r3
 800d674:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d676:	4313      	orrs	r3, r2
 800d678:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800d67a:	697b      	ldr	r3, [r7, #20]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d680:	60da      	str	r2, [r3, #12]
 800d682:	e0bc      	b.n	800d7fe <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d684:	2301      	movs	r3, #1
 800d686:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d68a:	e0b8      	b.n	800d7fe <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d68c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d690:	2b20      	cmp	r3, #32
 800d692:	dc4b      	bgt.n	800d72c <UART_SetConfig+0xbd0>
 800d694:	2b00      	cmp	r3, #0
 800d696:	f2c0 8087 	blt.w	800d7a8 <UART_SetConfig+0xc4c>
 800d69a:	2b20      	cmp	r3, #32
 800d69c:	f200 8084 	bhi.w	800d7a8 <UART_SetConfig+0xc4c>
 800d6a0:	a201      	add	r2, pc, #4	@ (adr r2, 800d6a8 <UART_SetConfig+0xb4c>)
 800d6a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6a6:	bf00      	nop
 800d6a8:	0800d733 	.word	0x0800d733
 800d6ac:	0800d73b 	.word	0x0800d73b
 800d6b0:	0800d7a9 	.word	0x0800d7a9
 800d6b4:	0800d7a9 	.word	0x0800d7a9
 800d6b8:	0800d743 	.word	0x0800d743
 800d6bc:	0800d7a9 	.word	0x0800d7a9
 800d6c0:	0800d7a9 	.word	0x0800d7a9
 800d6c4:	0800d7a9 	.word	0x0800d7a9
 800d6c8:	0800d753 	.word	0x0800d753
 800d6cc:	0800d7a9 	.word	0x0800d7a9
 800d6d0:	0800d7a9 	.word	0x0800d7a9
 800d6d4:	0800d7a9 	.word	0x0800d7a9
 800d6d8:	0800d7a9 	.word	0x0800d7a9
 800d6dc:	0800d7a9 	.word	0x0800d7a9
 800d6e0:	0800d7a9 	.word	0x0800d7a9
 800d6e4:	0800d7a9 	.word	0x0800d7a9
 800d6e8:	0800d763 	.word	0x0800d763
 800d6ec:	0800d7a9 	.word	0x0800d7a9
 800d6f0:	0800d7a9 	.word	0x0800d7a9
 800d6f4:	0800d7a9 	.word	0x0800d7a9
 800d6f8:	0800d7a9 	.word	0x0800d7a9
 800d6fc:	0800d7a9 	.word	0x0800d7a9
 800d700:	0800d7a9 	.word	0x0800d7a9
 800d704:	0800d7a9 	.word	0x0800d7a9
 800d708:	0800d7a9 	.word	0x0800d7a9
 800d70c:	0800d7a9 	.word	0x0800d7a9
 800d710:	0800d7a9 	.word	0x0800d7a9
 800d714:	0800d7a9 	.word	0x0800d7a9
 800d718:	0800d7a9 	.word	0x0800d7a9
 800d71c:	0800d7a9 	.word	0x0800d7a9
 800d720:	0800d7a9 	.word	0x0800d7a9
 800d724:	0800d7a9 	.word	0x0800d7a9
 800d728:	0800d79b 	.word	0x0800d79b
 800d72c:	2b40      	cmp	r3, #64	@ 0x40
 800d72e:	d037      	beq.n	800d7a0 <UART_SetConfig+0xc44>
 800d730:	e03a      	b.n	800d7a8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d732:	f7fa fd19 	bl	8008168 <HAL_RCC_GetPCLK1Freq>
 800d736:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d738:	e03c      	b.n	800d7b4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d73a:	f7fa fd2b 	bl	8008194 <HAL_RCC_GetPCLK2Freq>
 800d73e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d740:	e038      	b.n	800d7b4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d742:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d746:	4618      	mov	r0, r3
 800d748:	f7fb ff0e 	bl	8009568 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d74c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d74e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d750:	e030      	b.n	800d7b4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d752:	f107 0318 	add.w	r3, r7, #24
 800d756:	4618      	mov	r0, r3
 800d758:	f7fc f85a 	bl	8009810 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d75c:	69fb      	ldr	r3, [r7, #28]
 800d75e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d760:	e028      	b.n	800d7b4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d762:	4b09      	ldr	r3, [pc, #36]	@ (800d788 <UART_SetConfig+0xc2c>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	f003 0320 	and.w	r3, r3, #32
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d012      	beq.n	800d794 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d76e:	4b06      	ldr	r3, [pc, #24]	@ (800d788 <UART_SetConfig+0xc2c>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	08db      	lsrs	r3, r3, #3
 800d774:	f003 0303 	and.w	r3, r3, #3
 800d778:	4a04      	ldr	r2, [pc, #16]	@ (800d78c <UART_SetConfig+0xc30>)
 800d77a:	fa22 f303 	lsr.w	r3, r2, r3
 800d77e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d780:	e018      	b.n	800d7b4 <UART_SetConfig+0xc58>
 800d782:	bf00      	nop
 800d784:	08012a20 	.word	0x08012a20
 800d788:	58024400 	.word	0x58024400
 800d78c:	03d09000 	.word	0x03d09000
 800d790:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800d794:	4b24      	ldr	r3, [pc, #144]	@ (800d828 <UART_SetConfig+0xccc>)
 800d796:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d798:	e00c      	b.n	800d7b4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d79a:	4b24      	ldr	r3, [pc, #144]	@ (800d82c <UART_SetConfig+0xcd0>)
 800d79c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d79e:	e009      	b.n	800d7b4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d7a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d7a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7a6:	e005      	b.n	800d7b4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d7ac:	2301      	movs	r3, #1
 800d7ae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d7b2:	bf00      	nop
    }

    if (pclk != 0U)
 800d7b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d021      	beq.n	800d7fe <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d7ba:	697b      	ldr	r3, [r7, #20]
 800d7bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7be:	4a1c      	ldr	r2, [pc, #112]	@ (800d830 <UART_SetConfig+0xcd4>)
 800d7c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7c4:	461a      	mov	r2, r3
 800d7c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7c8:	fbb3 f2f2 	udiv	r2, r3, r2
 800d7cc:	697b      	ldr	r3, [r7, #20]
 800d7ce:	685b      	ldr	r3, [r3, #4]
 800d7d0:	085b      	lsrs	r3, r3, #1
 800d7d2:	441a      	add	r2, r3
 800d7d4:	697b      	ldr	r3, [r7, #20]
 800d7d6:	685b      	ldr	r3, [r3, #4]
 800d7d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7dc:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d7de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7e0:	2b0f      	cmp	r3, #15
 800d7e2:	d909      	bls.n	800d7f8 <UART_SetConfig+0xc9c>
 800d7e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d7ea:	d205      	bcs.n	800d7f8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d7ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7ee:	b29a      	uxth	r2, r3
 800d7f0:	697b      	ldr	r3, [r7, #20]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	60da      	str	r2, [r3, #12]
 800d7f6:	e002      	b.n	800d7fe <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d7f8:	2301      	movs	r3, #1
 800d7fa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d7fe:	697b      	ldr	r3, [r7, #20]
 800d800:	2201      	movs	r2, #1
 800d802:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d806:	697b      	ldr	r3, [r7, #20]
 800d808:	2201      	movs	r2, #1
 800d80a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d80e:	697b      	ldr	r3, [r7, #20]
 800d810:	2200      	movs	r2, #0
 800d812:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d814:	697b      	ldr	r3, [r7, #20]
 800d816:	2200      	movs	r2, #0
 800d818:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d81a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800d81e:	4618      	mov	r0, r3
 800d820:	3748      	adds	r7, #72	@ 0x48
 800d822:	46bd      	mov	sp, r7
 800d824:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d828:	03d09000 	.word	0x03d09000
 800d82c:	003d0900 	.word	0x003d0900
 800d830:	08012a20 	.word	0x08012a20

0800d834 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d834:	b480      	push	{r7}
 800d836:	b083      	sub	sp, #12
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d840:	f003 0308 	and.w	r3, r3, #8
 800d844:	2b00      	cmp	r3, #0
 800d846:	d00a      	beq.n	800d85e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	685b      	ldr	r3, [r3, #4]
 800d84e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	430a      	orrs	r2, r1
 800d85c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d862:	f003 0301 	and.w	r3, r3, #1
 800d866:	2b00      	cmp	r3, #0
 800d868:	d00a      	beq.n	800d880 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	685b      	ldr	r3, [r3, #4]
 800d870:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	430a      	orrs	r2, r1
 800d87e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d884:	f003 0302 	and.w	r3, r3, #2
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d00a      	beq.n	800d8a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	685b      	ldr	r3, [r3, #4]
 800d892:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	430a      	orrs	r2, r1
 800d8a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8a6:	f003 0304 	and.w	r3, r3, #4
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d00a      	beq.n	800d8c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	685b      	ldr	r3, [r3, #4]
 800d8b4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	430a      	orrs	r2, r1
 800d8c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8c8:	f003 0310 	and.w	r3, r3, #16
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d00a      	beq.n	800d8e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	689b      	ldr	r3, [r3, #8]
 800d8d6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	430a      	orrs	r2, r1
 800d8e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8ea:	f003 0320 	and.w	r3, r3, #32
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d00a      	beq.n	800d908 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	689b      	ldr	r3, [r3, #8]
 800d8f8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	430a      	orrs	r2, r1
 800d906:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d90c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d910:	2b00      	cmp	r3, #0
 800d912:	d01a      	beq.n	800d94a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	685b      	ldr	r3, [r3, #4]
 800d91a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	430a      	orrs	r2, r1
 800d928:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d92e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d932:	d10a      	bne.n	800d94a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	685b      	ldr	r3, [r3, #4]
 800d93a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	430a      	orrs	r2, r1
 800d948:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d94e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d952:	2b00      	cmp	r3, #0
 800d954:	d00a      	beq.n	800d96c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	685b      	ldr	r3, [r3, #4]
 800d95c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	430a      	orrs	r2, r1
 800d96a:	605a      	str	r2, [r3, #4]
  }
}
 800d96c:	bf00      	nop
 800d96e:	370c      	adds	r7, #12
 800d970:	46bd      	mov	sp, r7
 800d972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d976:	4770      	bx	lr

0800d978 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b098      	sub	sp, #96	@ 0x60
 800d97c:	af02      	add	r7, sp, #8
 800d97e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2200      	movs	r2, #0
 800d984:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d988:	f7f5 fd2a 	bl	80033e0 <HAL_GetTick>
 800d98c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	f003 0308 	and.w	r3, r3, #8
 800d998:	2b08      	cmp	r3, #8
 800d99a:	d12f      	bne.n	800d9fc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d99c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d9a0:	9300      	str	r3, [sp, #0]
 800d9a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f000 f88e 	bl	800dacc <UART_WaitOnFlagUntilTimeout>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d022      	beq.n	800d9fc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9be:	e853 3f00 	ldrex	r3, [r3]
 800d9c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d9c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d9ca:	653b      	str	r3, [r7, #80]	@ 0x50
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	461a      	mov	r2, r3
 800d9d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d9d4:	647b      	str	r3, [r7, #68]	@ 0x44
 800d9d6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d9da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d9dc:	e841 2300 	strex	r3, r2, [r1]
 800d9e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d9e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d1e6      	bne.n	800d9b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	2220      	movs	r2, #32
 800d9ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d9f8:	2303      	movs	r3, #3
 800d9fa:	e063      	b.n	800dac4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	f003 0304 	and.w	r3, r3, #4
 800da06:	2b04      	cmp	r3, #4
 800da08:	d149      	bne.n	800da9e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800da0a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800da0e:	9300      	str	r3, [sp, #0]
 800da10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da12:	2200      	movs	r2, #0
 800da14:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800da18:	6878      	ldr	r0, [r7, #4]
 800da1a:	f000 f857 	bl	800dacc <UART_WaitOnFlagUntilTimeout>
 800da1e:	4603      	mov	r3, r0
 800da20:	2b00      	cmp	r3, #0
 800da22:	d03c      	beq.n	800da9e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da2c:	e853 3f00 	ldrex	r3, [r3]
 800da30:	623b      	str	r3, [r7, #32]
   return(result);
 800da32:	6a3b      	ldr	r3, [r7, #32]
 800da34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800da38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	461a      	mov	r2, r3
 800da40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800da42:	633b      	str	r3, [r7, #48]	@ 0x30
 800da44:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800da48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da4a:	e841 2300 	strex	r3, r2, [r1]
 800da4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800da50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da52:	2b00      	cmp	r3, #0
 800da54:	d1e6      	bne.n	800da24 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	3308      	adds	r3, #8
 800da5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da5e:	693b      	ldr	r3, [r7, #16]
 800da60:	e853 3f00 	ldrex	r3, [r3]
 800da64:	60fb      	str	r3, [r7, #12]
   return(result);
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	f023 0301 	bic.w	r3, r3, #1
 800da6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	3308      	adds	r3, #8
 800da74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800da76:	61fa      	str	r2, [r7, #28]
 800da78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da7a:	69b9      	ldr	r1, [r7, #24]
 800da7c:	69fa      	ldr	r2, [r7, #28]
 800da7e:	e841 2300 	strex	r3, r2, [r1]
 800da82:	617b      	str	r3, [r7, #20]
   return(result);
 800da84:	697b      	ldr	r3, [r7, #20]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d1e5      	bne.n	800da56 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	2220      	movs	r2, #32
 800da8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2200      	movs	r2, #0
 800da96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800da9a:	2303      	movs	r3, #3
 800da9c:	e012      	b.n	800dac4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2220      	movs	r2, #32
 800daa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	2220      	movs	r2, #32
 800daaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	2200      	movs	r2, #0
 800dab2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2200      	movs	r2, #0
 800dab8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2200      	movs	r2, #0
 800dabe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dac2:	2300      	movs	r3, #0
}
 800dac4:	4618      	mov	r0, r3
 800dac6:	3758      	adds	r7, #88	@ 0x58
 800dac8:	46bd      	mov	sp, r7
 800daca:	bd80      	pop	{r7, pc}

0800dacc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b084      	sub	sp, #16
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	60f8      	str	r0, [r7, #12]
 800dad4:	60b9      	str	r1, [r7, #8]
 800dad6:	603b      	str	r3, [r7, #0]
 800dad8:	4613      	mov	r3, r2
 800dada:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dadc:	e04f      	b.n	800db7e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dade:	69bb      	ldr	r3, [r7, #24]
 800dae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dae4:	d04b      	beq.n	800db7e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dae6:	f7f5 fc7b 	bl	80033e0 <HAL_GetTick>
 800daea:	4602      	mov	r2, r0
 800daec:	683b      	ldr	r3, [r7, #0]
 800daee:	1ad3      	subs	r3, r2, r3
 800daf0:	69ba      	ldr	r2, [r7, #24]
 800daf2:	429a      	cmp	r2, r3
 800daf4:	d302      	bcc.n	800dafc <UART_WaitOnFlagUntilTimeout+0x30>
 800daf6:	69bb      	ldr	r3, [r7, #24]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d101      	bne.n	800db00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800dafc:	2303      	movs	r3, #3
 800dafe:	e04e      	b.n	800db9e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	f003 0304 	and.w	r3, r3, #4
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d037      	beq.n	800db7e <UART_WaitOnFlagUntilTimeout+0xb2>
 800db0e:	68bb      	ldr	r3, [r7, #8]
 800db10:	2b80      	cmp	r3, #128	@ 0x80
 800db12:	d034      	beq.n	800db7e <UART_WaitOnFlagUntilTimeout+0xb2>
 800db14:	68bb      	ldr	r3, [r7, #8]
 800db16:	2b40      	cmp	r3, #64	@ 0x40
 800db18:	d031      	beq.n	800db7e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	69db      	ldr	r3, [r3, #28]
 800db20:	f003 0308 	and.w	r3, r3, #8
 800db24:	2b08      	cmp	r3, #8
 800db26:	d110      	bne.n	800db4a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	2208      	movs	r2, #8
 800db2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800db30:	68f8      	ldr	r0, [r7, #12]
 800db32:	f000 f921 	bl	800dd78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	2208      	movs	r2, #8
 800db3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	2200      	movs	r2, #0
 800db42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800db46:	2301      	movs	r3, #1
 800db48:	e029      	b.n	800db9e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	69db      	ldr	r3, [r3, #28]
 800db50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800db54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800db58:	d111      	bne.n	800db7e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800db62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800db64:	68f8      	ldr	r0, [r7, #12]
 800db66:	f000 f907 	bl	800dd78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	2220      	movs	r2, #32
 800db6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	2200      	movs	r2, #0
 800db76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800db7a:	2303      	movs	r3, #3
 800db7c:	e00f      	b.n	800db9e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	69da      	ldr	r2, [r3, #28]
 800db84:	68bb      	ldr	r3, [r7, #8]
 800db86:	4013      	ands	r3, r2
 800db88:	68ba      	ldr	r2, [r7, #8]
 800db8a:	429a      	cmp	r2, r3
 800db8c:	bf0c      	ite	eq
 800db8e:	2301      	moveq	r3, #1
 800db90:	2300      	movne	r3, #0
 800db92:	b2db      	uxtb	r3, r3
 800db94:	461a      	mov	r2, r3
 800db96:	79fb      	ldrb	r3, [r7, #7]
 800db98:	429a      	cmp	r2, r3
 800db9a:	d0a0      	beq.n	800dade <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800db9c:	2300      	movs	r3, #0
}
 800db9e:	4618      	mov	r0, r3
 800dba0:	3710      	adds	r7, #16
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}
	...

0800dba8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b096      	sub	sp, #88	@ 0x58
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	60f8      	str	r0, [r7, #12]
 800dbb0:	60b9      	str	r1, [r7, #8]
 800dbb2:	4613      	mov	r3, r2
 800dbb4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	68ba      	ldr	r2, [r7, #8]
 800dbba:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	88fa      	ldrh	r2, [r7, #6]
 800dbc0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	2222      	movs	r2, #34	@ 0x22
 800dbd0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d02d      	beq.n	800dc3a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dbe4:	4a40      	ldr	r2, [pc, #256]	@ (800dce8 <UART_Start_Receive_DMA+0x140>)
 800dbe6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dbee:	4a3f      	ldr	r2, [pc, #252]	@ (800dcec <UART_Start_Receive_DMA+0x144>)
 800dbf0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dbf8:	4a3d      	ldr	r2, [pc, #244]	@ (800dcf0 <UART_Start_Receive_DMA+0x148>)
 800dbfa:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dc02:	2200      	movs	r2, #0
 800dc04:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	3324      	adds	r3, #36	@ 0x24
 800dc12:	4619      	mov	r1, r3
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dc18:	461a      	mov	r2, r3
 800dc1a:	88fb      	ldrh	r3, [r7, #6]
 800dc1c:	f7f6 f926 	bl	8003e6c <HAL_DMA_Start_IT>
 800dc20:	4603      	mov	r3, r0
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d009      	beq.n	800dc3a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	2210      	movs	r2, #16
 800dc2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	2220      	movs	r2, #32
 800dc32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800dc36:	2301      	movs	r3, #1
 800dc38:	e051      	b.n	800dcde <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	691b      	ldr	r3, [r3, #16]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d018      	beq.n	800dc74 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc4a:	e853 3f00 	ldrex	r3, [r3]
 800dc4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dc50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dc56:	657b      	str	r3, [r7, #84]	@ 0x54
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	461a      	mov	r2, r3
 800dc5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dc60:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dc62:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc64:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800dc66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dc68:	e841 2300 	strex	r3, r2, [r1]
 800dc6c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800dc6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d1e6      	bne.n	800dc42 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	3308      	adds	r3, #8
 800dc7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc7e:	e853 3f00 	ldrex	r3, [r3]
 800dc82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dc84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc86:	f043 0301 	orr.w	r3, r3, #1
 800dc8a:	653b      	str	r3, [r7, #80]	@ 0x50
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	3308      	adds	r3, #8
 800dc92:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800dc94:	637a      	str	r2, [r7, #52]	@ 0x34
 800dc96:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc98:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800dc9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dc9c:	e841 2300 	strex	r3, r2, [r1]
 800dca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800dca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d1e5      	bne.n	800dc74 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	3308      	adds	r3, #8
 800dcae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcb0:	697b      	ldr	r3, [r7, #20]
 800dcb2:	e853 3f00 	ldrex	r3, [r3]
 800dcb6:	613b      	str	r3, [r7, #16]
   return(result);
 800dcb8:	693b      	ldr	r3, [r7, #16]
 800dcba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dcbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	3308      	adds	r3, #8
 800dcc6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dcc8:	623a      	str	r2, [r7, #32]
 800dcca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dccc:	69f9      	ldr	r1, [r7, #28]
 800dcce:	6a3a      	ldr	r2, [r7, #32]
 800dcd0:	e841 2300 	strex	r3, r2, [r1]
 800dcd4:	61bb      	str	r3, [r7, #24]
   return(result);
 800dcd6:	69bb      	ldr	r3, [r7, #24]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d1e5      	bne.n	800dca8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800dcdc:	2300      	movs	r3, #0
}
 800dcde:	4618      	mov	r0, r3
 800dce0:	3758      	adds	r7, #88	@ 0x58
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}
 800dce6:	bf00      	nop
 800dce8:	0800de45 	.word	0x0800de45
 800dcec:	0800df6d 	.word	0x0800df6d
 800dcf0:	0800dfab 	.word	0x0800dfab

0800dcf4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800dcf4:	b480      	push	{r7}
 800dcf6:	b08f      	sub	sp, #60	@ 0x3c
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd02:	6a3b      	ldr	r3, [r7, #32]
 800dd04:	e853 3f00 	ldrex	r3, [r3]
 800dd08:	61fb      	str	r3, [r7, #28]
   return(result);
 800dd0a:	69fb      	ldr	r3, [r7, #28]
 800dd0c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800dd10:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	461a      	mov	r2, r3
 800dd18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dd1c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dd20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dd22:	e841 2300 	strex	r3, r2, [r1]
 800dd26:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dd28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d1e6      	bne.n	800dcfc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	3308      	adds	r3, #8
 800dd34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	e853 3f00 	ldrex	r3, [r3]
 800dd3c:	60bb      	str	r3, [r7, #8]
   return(result);
 800dd3e:	68bb      	ldr	r3, [r7, #8]
 800dd40:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800dd44:	633b      	str	r3, [r7, #48]	@ 0x30
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	3308      	adds	r3, #8
 800dd4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd4e:	61ba      	str	r2, [r7, #24]
 800dd50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd52:	6979      	ldr	r1, [r7, #20]
 800dd54:	69ba      	ldr	r2, [r7, #24]
 800dd56:	e841 2300 	strex	r3, r2, [r1]
 800dd5a:	613b      	str	r3, [r7, #16]
   return(result);
 800dd5c:	693b      	ldr	r3, [r7, #16]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d1e5      	bne.n	800dd2e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	2220      	movs	r2, #32
 800dd66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800dd6a:	bf00      	nop
 800dd6c:	373c      	adds	r7, #60	@ 0x3c
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd74:	4770      	bx	lr
	...

0800dd78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dd78:	b480      	push	{r7}
 800dd7a:	b095      	sub	sp, #84	@ 0x54
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd88:	e853 3f00 	ldrex	r3, [r3]
 800dd8c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dd8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dd94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	461a      	mov	r2, r3
 800dd9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dd9e:	643b      	str	r3, [r7, #64]	@ 0x40
 800dda0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dda2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dda4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dda6:	e841 2300 	strex	r3, r2, [r1]
 800ddaa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ddac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d1e6      	bne.n	800dd80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	3308      	adds	r3, #8
 800ddb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddba:	6a3b      	ldr	r3, [r7, #32]
 800ddbc:	e853 3f00 	ldrex	r3, [r3]
 800ddc0:	61fb      	str	r3, [r7, #28]
   return(result);
 800ddc2:	69fa      	ldr	r2, [r7, #28]
 800ddc4:	4b1e      	ldr	r3, [pc, #120]	@ (800de40 <UART_EndRxTransfer+0xc8>)
 800ddc6:	4013      	ands	r3, r2
 800ddc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	3308      	adds	r3, #8
 800ddd0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ddd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ddd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddd6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ddd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ddda:	e841 2300 	strex	r3, r2, [r1]
 800ddde:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dde0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d1e5      	bne.n	800ddb2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ddea:	2b01      	cmp	r3, #1
 800ddec:	d118      	bne.n	800de20 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	e853 3f00 	ldrex	r3, [r3]
 800ddfa:	60bb      	str	r3, [r7, #8]
   return(result);
 800ddfc:	68bb      	ldr	r3, [r7, #8]
 800ddfe:	f023 0310 	bic.w	r3, r3, #16
 800de02:	647b      	str	r3, [r7, #68]	@ 0x44
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	461a      	mov	r2, r3
 800de0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800de0c:	61bb      	str	r3, [r7, #24]
 800de0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de10:	6979      	ldr	r1, [r7, #20]
 800de12:	69ba      	ldr	r2, [r7, #24]
 800de14:	e841 2300 	strex	r3, r2, [r1]
 800de18:	613b      	str	r3, [r7, #16]
   return(result);
 800de1a:	693b      	ldr	r3, [r7, #16]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d1e6      	bne.n	800ddee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2220      	movs	r2, #32
 800de24:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	2200      	movs	r2, #0
 800de2c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	2200      	movs	r2, #0
 800de32:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800de34:	bf00      	nop
 800de36:	3754      	adds	r7, #84	@ 0x54
 800de38:	46bd      	mov	sp, r7
 800de3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3e:	4770      	bx	lr
 800de40:	effffffe 	.word	0xeffffffe

0800de44 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b09c      	sub	sp, #112	@ 0x70
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de50:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	69db      	ldr	r3, [r3, #28]
 800de56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800de5a:	d071      	beq.n	800df40 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800de5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800de5e:	2200      	movs	r2, #0
 800de60:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800de64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de6c:	e853 3f00 	ldrex	r3, [r3]
 800de70:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800de72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800de74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800de78:	66bb      	str	r3, [r7, #104]	@ 0x68
 800de7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	461a      	mov	r2, r3
 800de80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800de82:	65bb      	str	r3, [r7, #88]	@ 0x58
 800de84:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de86:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800de88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800de8a:	e841 2300 	strex	r3, r2, [r1]
 800de8e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800de90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de92:	2b00      	cmp	r3, #0
 800de94:	d1e6      	bne.n	800de64 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	3308      	adds	r3, #8
 800de9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dea0:	e853 3f00 	ldrex	r3, [r3]
 800dea4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800dea6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dea8:	f023 0301 	bic.w	r3, r3, #1
 800deac:	667b      	str	r3, [r7, #100]	@ 0x64
 800deae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	3308      	adds	r3, #8
 800deb4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800deb6:	647a      	str	r2, [r7, #68]	@ 0x44
 800deb8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800debc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800debe:	e841 2300 	strex	r3, r2, [r1]
 800dec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800dec4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d1e5      	bne.n	800de96 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800deca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	3308      	adds	r3, #8
 800ded0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ded2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ded4:	e853 3f00 	ldrex	r3, [r3]
 800ded8:	623b      	str	r3, [r7, #32]
   return(result);
 800deda:	6a3b      	ldr	r3, [r7, #32]
 800dedc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dee0:	663b      	str	r3, [r7, #96]	@ 0x60
 800dee2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	3308      	adds	r3, #8
 800dee8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800deea:	633a      	str	r2, [r7, #48]	@ 0x30
 800deec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800def0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800def2:	e841 2300 	strex	r3, r2, [r1]
 800def6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800def8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800defa:	2b00      	cmp	r3, #0
 800defc:	d1e5      	bne.n	800deca <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800defe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800df00:	2220      	movs	r2, #32
 800df02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800df08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df0a:	2b01      	cmp	r3, #1
 800df0c:	d118      	bne.n	800df40 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df14:	693b      	ldr	r3, [r7, #16]
 800df16:	e853 3f00 	ldrex	r3, [r3]
 800df1a:	60fb      	str	r3, [r7, #12]
   return(result);
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	f023 0310 	bic.w	r3, r3, #16
 800df22:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800df24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	461a      	mov	r2, r3
 800df2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800df2c:	61fb      	str	r3, [r7, #28]
 800df2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df30:	69b9      	ldr	r1, [r7, #24]
 800df32:	69fa      	ldr	r2, [r7, #28]
 800df34:	e841 2300 	strex	r3, r2, [r1]
 800df38:	617b      	str	r3, [r7, #20]
   return(result);
 800df3a:	697b      	ldr	r3, [r7, #20]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d1e6      	bne.n	800df0e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800df40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800df42:	2200      	movs	r2, #0
 800df44:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800df48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df4a:	2b01      	cmp	r3, #1
 800df4c:	d107      	bne.n	800df5e <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800df4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800df50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800df54:	4619      	mov	r1, r3
 800df56:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800df58:	f7fe fdf4 	bl	800cb44 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800df5c:	e002      	b.n	800df64 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800df5e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800df60:	f7f4 f90a 	bl	8002178 <HAL_UART_RxCpltCallback>
}
 800df64:	bf00      	nop
 800df66:	3770      	adds	r7, #112	@ 0x70
 800df68:	46bd      	mov	sp, r7
 800df6a:	bd80      	pop	{r7, pc}

0800df6c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b084      	sub	sp, #16
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df78:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	2201      	movs	r2, #1
 800df7e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df84:	2b01      	cmp	r3, #1
 800df86:	d109      	bne.n	800df9c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800df8e:	085b      	lsrs	r3, r3, #1
 800df90:	b29b      	uxth	r3, r3
 800df92:	4619      	mov	r1, r3
 800df94:	68f8      	ldr	r0, [r7, #12]
 800df96:	f7fe fdd5 	bl	800cb44 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800df9a:	e002      	b.n	800dfa2 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800df9c:	68f8      	ldr	r0, [r7, #12]
 800df9e:	f7fe fdbd 	bl	800cb1c <HAL_UART_RxHalfCpltCallback>
}
 800dfa2:	bf00      	nop
 800dfa4:	3710      	adds	r7, #16
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}

0800dfaa <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800dfaa:	b580      	push	{r7, lr}
 800dfac:	b086      	sub	sp, #24
 800dfae:	af00      	add	r7, sp, #0
 800dfb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dfb6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800dfb8:	697b      	ldr	r3, [r7, #20]
 800dfba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dfbe:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800dfc0:	697b      	ldr	r3, [r7, #20]
 800dfc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dfc6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800dfc8:	697b      	ldr	r3, [r7, #20]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	689b      	ldr	r3, [r3, #8]
 800dfce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dfd2:	2b80      	cmp	r3, #128	@ 0x80
 800dfd4:	d109      	bne.n	800dfea <UART_DMAError+0x40>
 800dfd6:	693b      	ldr	r3, [r7, #16]
 800dfd8:	2b21      	cmp	r3, #33	@ 0x21
 800dfda:	d106      	bne.n	800dfea <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800dfdc:	697b      	ldr	r3, [r7, #20]
 800dfde:	2200      	movs	r2, #0
 800dfe0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800dfe4:	6978      	ldr	r0, [r7, #20]
 800dfe6:	f7ff fe85 	bl	800dcf4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800dfea:	697b      	ldr	r3, [r7, #20]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	689b      	ldr	r3, [r3, #8]
 800dff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dff4:	2b40      	cmp	r3, #64	@ 0x40
 800dff6:	d109      	bne.n	800e00c <UART_DMAError+0x62>
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	2b22      	cmp	r3, #34	@ 0x22
 800dffc:	d106      	bne.n	800e00c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800dffe:	697b      	ldr	r3, [r7, #20]
 800e000:	2200      	movs	r2, #0
 800e002:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800e006:	6978      	ldr	r0, [r7, #20]
 800e008:	f7ff feb6 	bl	800dd78 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e00c:	697b      	ldr	r3, [r7, #20]
 800e00e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e012:	f043 0210 	orr.w	r2, r3, #16
 800e016:	697b      	ldr	r3, [r7, #20]
 800e018:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e01c:	6978      	ldr	r0, [r7, #20]
 800e01e:	f7fe fd87 	bl	800cb30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e022:	bf00      	nop
 800e024:	3718      	adds	r7, #24
 800e026:	46bd      	mov	sp, r7
 800e028:	bd80      	pop	{r7, pc}

0800e02a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e02a:	b580      	push	{r7, lr}
 800e02c:	b084      	sub	sp, #16
 800e02e:	af00      	add	r7, sp, #0
 800e030:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e036:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	2200      	movs	r2, #0
 800e03c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	2200      	movs	r2, #0
 800e044:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e048:	68f8      	ldr	r0, [r7, #12]
 800e04a:	f7fe fd71 	bl	800cb30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e04e:	bf00      	nop
 800e050:	3710      	adds	r7, #16
 800e052:	46bd      	mov	sp, r7
 800e054:	bd80      	pop	{r7, pc}

0800e056 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e056:	b580      	push	{r7, lr}
 800e058:	b088      	sub	sp, #32
 800e05a:	af00      	add	r7, sp, #0
 800e05c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	e853 3f00 	ldrex	r3, [r3]
 800e06a:	60bb      	str	r3, [r7, #8]
   return(result);
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e072:	61fb      	str	r3, [r7, #28]
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	461a      	mov	r2, r3
 800e07a:	69fb      	ldr	r3, [r7, #28]
 800e07c:	61bb      	str	r3, [r7, #24]
 800e07e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e080:	6979      	ldr	r1, [r7, #20]
 800e082:	69ba      	ldr	r2, [r7, #24]
 800e084:	e841 2300 	strex	r3, r2, [r1]
 800e088:	613b      	str	r3, [r7, #16]
   return(result);
 800e08a:	693b      	ldr	r3, [r7, #16]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d1e6      	bne.n	800e05e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2220      	movs	r2, #32
 800e094:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	2200      	movs	r2, #0
 800e09c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	f7fe fd32 	bl	800cb08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e0a4:	bf00      	nop
 800e0a6:	3720      	adds	r7, #32
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	bd80      	pop	{r7, pc}

0800e0ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e0ac:	b480      	push	{r7}
 800e0ae:	b083      	sub	sp, #12
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e0b4:	bf00      	nop
 800e0b6:	370c      	adds	r7, #12
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0be:	4770      	bx	lr

0800e0c0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e0c0:	b480      	push	{r7}
 800e0c2:	b083      	sub	sp, #12
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e0c8:	bf00      	nop
 800e0ca:	370c      	adds	r7, #12
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d2:	4770      	bx	lr

0800e0d4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e0d4:	b480      	push	{r7}
 800e0d6:	b083      	sub	sp, #12
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e0dc:	bf00      	nop
 800e0de:	370c      	adds	r7, #12
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e6:	4770      	bx	lr

0800e0e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e0e8:	b480      	push	{r7}
 800e0ea:	b085      	sub	sp, #20
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e0f6:	2b01      	cmp	r3, #1
 800e0f8:	d101      	bne.n	800e0fe <HAL_UARTEx_DisableFifoMode+0x16>
 800e0fa:	2302      	movs	r3, #2
 800e0fc:	e027      	b.n	800e14e <HAL_UARTEx_DisableFifoMode+0x66>
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	2201      	movs	r2, #1
 800e102:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	2224      	movs	r2, #36	@ 0x24
 800e10a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	681a      	ldr	r2, [r3, #0]
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	f022 0201 	bic.w	r2, r2, #1
 800e124:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e12c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	2200      	movs	r2, #0
 800e132:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	68fa      	ldr	r2, [r7, #12]
 800e13a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2220      	movs	r2, #32
 800e140:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	2200      	movs	r2, #0
 800e148:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e14c:	2300      	movs	r3, #0
}
 800e14e:	4618      	mov	r0, r3
 800e150:	3714      	adds	r7, #20
 800e152:	46bd      	mov	sp, r7
 800e154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e158:	4770      	bx	lr

0800e15a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e15a:	b580      	push	{r7, lr}
 800e15c:	b084      	sub	sp, #16
 800e15e:	af00      	add	r7, sp, #0
 800e160:	6078      	str	r0, [r7, #4]
 800e162:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e16a:	2b01      	cmp	r3, #1
 800e16c:	d101      	bne.n	800e172 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e16e:	2302      	movs	r3, #2
 800e170:	e02d      	b.n	800e1ce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	2201      	movs	r2, #1
 800e176:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	2224      	movs	r2, #36	@ 0x24
 800e17e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	681a      	ldr	r2, [r3, #0]
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	f022 0201 	bic.w	r2, r2, #1
 800e198:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	689b      	ldr	r3, [r3, #8]
 800e1a0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	683a      	ldr	r2, [r7, #0]
 800e1aa:	430a      	orrs	r2, r1
 800e1ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e1ae:	6878      	ldr	r0, [r7, #4]
 800e1b0:	f000 f850 	bl	800e254 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	68fa      	ldr	r2, [r7, #12]
 800e1ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	2220      	movs	r2, #32
 800e1c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e1cc:	2300      	movs	r3, #0
}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	3710      	adds	r7, #16
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}

0800e1d6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e1d6:	b580      	push	{r7, lr}
 800e1d8:	b084      	sub	sp, #16
 800e1da:	af00      	add	r7, sp, #0
 800e1dc:	6078      	str	r0, [r7, #4]
 800e1de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e1e6:	2b01      	cmp	r3, #1
 800e1e8:	d101      	bne.n	800e1ee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e1ea:	2302      	movs	r3, #2
 800e1ec:	e02d      	b.n	800e24a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	2201      	movs	r2, #1
 800e1f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	2224      	movs	r2, #36	@ 0x24
 800e1fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	681a      	ldr	r2, [r3, #0]
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	f022 0201 	bic.w	r2, r2, #1
 800e214:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	689b      	ldr	r3, [r3, #8]
 800e21c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	683a      	ldr	r2, [r7, #0]
 800e226:	430a      	orrs	r2, r1
 800e228:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e22a:	6878      	ldr	r0, [r7, #4]
 800e22c:	f000 f812 	bl	800e254 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	68fa      	ldr	r2, [r7, #12]
 800e236:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	2220      	movs	r2, #32
 800e23c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2200      	movs	r2, #0
 800e244:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e248:	2300      	movs	r3, #0
}
 800e24a:	4618      	mov	r0, r3
 800e24c:	3710      	adds	r7, #16
 800e24e:	46bd      	mov	sp, r7
 800e250:	bd80      	pop	{r7, pc}
	...

0800e254 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e254:	b480      	push	{r7}
 800e256:	b085      	sub	sp, #20
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e260:	2b00      	cmp	r3, #0
 800e262:	d108      	bne.n	800e276 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	2201      	movs	r2, #1
 800e268:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	2201      	movs	r2, #1
 800e270:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e274:	e031      	b.n	800e2da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e276:	2310      	movs	r3, #16
 800e278:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e27a:	2310      	movs	r3, #16
 800e27c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	689b      	ldr	r3, [r3, #8]
 800e284:	0e5b      	lsrs	r3, r3, #25
 800e286:	b2db      	uxtb	r3, r3
 800e288:	f003 0307 	and.w	r3, r3, #7
 800e28c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	689b      	ldr	r3, [r3, #8]
 800e294:	0f5b      	lsrs	r3, r3, #29
 800e296:	b2db      	uxtb	r3, r3
 800e298:	f003 0307 	and.w	r3, r3, #7
 800e29c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e29e:	7bbb      	ldrb	r3, [r7, #14]
 800e2a0:	7b3a      	ldrb	r2, [r7, #12]
 800e2a2:	4911      	ldr	r1, [pc, #68]	@ (800e2e8 <UARTEx_SetNbDataToProcess+0x94>)
 800e2a4:	5c8a      	ldrb	r2, [r1, r2]
 800e2a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e2aa:	7b3a      	ldrb	r2, [r7, #12]
 800e2ac:	490f      	ldr	r1, [pc, #60]	@ (800e2ec <UARTEx_SetNbDataToProcess+0x98>)
 800e2ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e2b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800e2b4:	b29a      	uxth	r2, r3
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e2bc:	7bfb      	ldrb	r3, [r7, #15]
 800e2be:	7b7a      	ldrb	r2, [r7, #13]
 800e2c0:	4909      	ldr	r1, [pc, #36]	@ (800e2e8 <UARTEx_SetNbDataToProcess+0x94>)
 800e2c2:	5c8a      	ldrb	r2, [r1, r2]
 800e2c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e2c8:	7b7a      	ldrb	r2, [r7, #13]
 800e2ca:	4908      	ldr	r1, [pc, #32]	@ (800e2ec <UARTEx_SetNbDataToProcess+0x98>)
 800e2cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e2ce:	fb93 f3f2 	sdiv	r3, r3, r2
 800e2d2:	b29a      	uxth	r2, r3
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e2da:	bf00      	nop
 800e2dc:	3714      	adds	r7, #20
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e4:	4770      	bx	lr
 800e2e6:	bf00      	nop
 800e2e8:	08012a38 	.word	0x08012a38
 800e2ec:	08012a40 	.word	0x08012a40

0800e2f0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800e2f4:	4904      	ldr	r1, [pc, #16]	@ (800e308 <MX_FATFS_Init+0x18>)
 800e2f6:	4805      	ldr	r0, [pc, #20]	@ (800e30c <MX_FATFS_Init+0x1c>)
 800e2f8:	f004 f8c6 	bl	8012488 <FATFS_LinkDriver>
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	461a      	mov	r2, r3
 800e300:	4b03      	ldr	r3, [pc, #12]	@ (800e310 <MX_FATFS_Init+0x20>)
 800e302:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e304:	bf00      	nop
 800e306:	bd80      	pop	{r7, pc}
 800e308:	24002830 	.word	0x24002830
 800e30c:	240000a4 	.word	0x240000a4
 800e310:	2400282c 	.word	0x2400282c

0800e314 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800e314:	b480      	push	{r7}
 800e316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800e318:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800e31a:	4618      	mov	r0, r3
 800e31c:	46bd      	mov	sp, r7
 800e31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e322:	4770      	bx	lr

0800e324 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b082      	sub	sp, #8
 800e328:	af00      	add	r7, sp, #0
 800e32a:	4603      	mov	r3, r0
 800e32c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800e32e:	79fb      	ldrb	r3, [r7, #7]
 800e330:	4618      	mov	r0, r3
 800e332:	f000 f9fd 	bl	800e730 <SD_disk_initialize>
 800e336:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800e338:	4618      	mov	r0, r3
 800e33a:	3708      	adds	r7, #8
 800e33c:	46bd      	mov	sp, r7
 800e33e:	bd80      	pop	{r7, pc}

0800e340 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b082      	sub	sp, #8
 800e344:	af00      	add	r7, sp, #0
 800e346:	4603      	mov	r3, r0
 800e348:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800e34a:	79fb      	ldrb	r3, [r7, #7]
 800e34c:	4618      	mov	r0, r3
 800e34e:	f000 fad5 	bl	800e8fc <SD_disk_status>
 800e352:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800e354:	4618      	mov	r0, r3
 800e356:	3708      	adds	r7, #8
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}

0800e35c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b084      	sub	sp, #16
 800e360:	af00      	add	r7, sp, #0
 800e362:	60b9      	str	r1, [r7, #8]
 800e364:	607a      	str	r2, [r7, #4]
 800e366:	603b      	str	r3, [r7, #0]
 800e368:	4603      	mov	r3, r0
 800e36a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800e36c:	7bf8      	ldrb	r0, [r7, #15]
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	687a      	ldr	r2, [r7, #4]
 800e372:	68b9      	ldr	r1, [r7, #8]
 800e374:	f000 fad8 	bl	800e928 <SD_disk_read>
 800e378:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800e37a:	4618      	mov	r0, r3
 800e37c:	3710      	adds	r7, #16
 800e37e:	46bd      	mov	sp, r7
 800e380:	bd80      	pop	{r7, pc}

0800e382 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800e382:	b580      	push	{r7, lr}
 800e384:	b084      	sub	sp, #16
 800e386:	af00      	add	r7, sp, #0
 800e388:	60b9      	str	r1, [r7, #8]
 800e38a:	607a      	str	r2, [r7, #4]
 800e38c:	603b      	str	r3, [r7, #0]
 800e38e:	4603      	mov	r3, r0
 800e390:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800e392:	7bf8      	ldrb	r0, [r7, #15]
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	687a      	ldr	r2, [r7, #4]
 800e398:	68b9      	ldr	r1, [r7, #8]
 800e39a:	f000 fb2f 	bl	800e9fc <SD_disk_write>
 800e39e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	3710      	adds	r7, #16
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	bd80      	pop	{r7, pc}

0800e3a8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b082      	sub	sp, #8
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	603a      	str	r2, [r7, #0]
 800e3b2:	71fb      	strb	r3, [r7, #7]
 800e3b4:	460b      	mov	r3, r1
 800e3b6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 800e3b8:	79b9      	ldrb	r1, [r7, #6]
 800e3ba:	79fb      	ldrb	r3, [r7, #7]
 800e3bc:	683a      	ldr	r2, [r7, #0]
 800e3be:	4618      	mov	r0, r3
 800e3c0:	f000 fba0 	bl	800eb04 <SD_disk_ioctl>
 800e3c4:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	3708      	adds	r7, #8
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}
	...

0800e3d0 <SELECT>:

//-----[ SPI Functions ]-----

/* slave select */
static void SELECT(void)
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	2110      	movs	r1, #16
 800e3d8:	4802      	ldr	r0, [pc, #8]	@ (800e3e4 <SELECT+0x14>)
 800e3da:	f7f8 fdab 	bl	8006f34 <HAL_GPIO_WritePin>
}
 800e3de:	bf00      	nop
 800e3e0:	bd80      	pop	{r7, pc}
 800e3e2:	bf00      	nop
 800e3e4:	58020000 	.word	0x58020000

0800e3e8 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800e3ec:	2201      	movs	r2, #1
 800e3ee:	2110      	movs	r1, #16
 800e3f0:	4802      	ldr	r0, [pc, #8]	@ (800e3fc <DESELECT+0x14>)
 800e3f2:	f7f8 fd9f 	bl	8006f34 <HAL_GPIO_WritePin>
}
 800e3f6:	bf00      	nop
 800e3f8:	bd80      	pop	{r7, pc}
 800e3fa:	bf00      	nop
 800e3fc:	58020000 	.word	0x58020000

0800e400 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b082      	sub	sp, #8
 800e404:	af00      	add	r7, sp, #0
 800e406:	4603      	mov	r3, r0
 800e408:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800e40a:	bf00      	nop
 800e40c:	4b08      	ldr	r3, [pc, #32]	@ (800e430 <SPI_TxByte+0x30>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	695b      	ldr	r3, [r3, #20]
 800e412:	f003 0302 	and.w	r3, r3, #2
 800e416:	2b02      	cmp	r3, #2
 800e418:	d1f8      	bne.n	800e40c <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800e41a:	1df9      	adds	r1, r7, #7
 800e41c:	2364      	movs	r3, #100	@ 0x64
 800e41e:	2201      	movs	r2, #1
 800e420:	4803      	ldr	r0, [pc, #12]	@ (800e430 <SPI_TxByte+0x30>)
 800e422:	f7fb fdd1 	bl	8009fc8 <HAL_SPI_Transmit>
}
 800e426:	bf00      	nop
 800e428:	3708      	adds	r7, #8
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd80      	pop	{r7, pc}
 800e42e:	bf00      	nop
 800e430:	240022e0 	.word	0x240022e0

0800e434 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b082      	sub	sp, #8
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
 800e43c:	460b      	mov	r3, r1
 800e43e:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800e440:	bf00      	nop
 800e442:	4b08      	ldr	r3, [pc, #32]	@ (800e464 <SPI_TxBuffer+0x30>)
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	695b      	ldr	r3, [r3, #20]
 800e448:	f003 0302 	and.w	r3, r3, #2
 800e44c:	2b02      	cmp	r3, #2
 800e44e:	d1f8      	bne.n	800e442 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800e450:	887a      	ldrh	r2, [r7, #2]
 800e452:	2364      	movs	r3, #100	@ 0x64
 800e454:	6879      	ldr	r1, [r7, #4]
 800e456:	4803      	ldr	r0, [pc, #12]	@ (800e464 <SPI_TxBuffer+0x30>)
 800e458:	f7fb fdb6 	bl	8009fc8 <HAL_SPI_Transmit>
}
 800e45c:	bf00      	nop
 800e45e:	3708      	adds	r7, #8
 800e460:	46bd      	mov	sp, r7
 800e462:	bd80      	pop	{r7, pc}
 800e464:	240022e0 	.word	0x240022e0

0800e468 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	b084      	sub	sp, #16
 800e46c:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800e46e:	23ff      	movs	r3, #255	@ 0xff
 800e470:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800e472:	bf00      	nop
 800e474:	4b09      	ldr	r3, [pc, #36]	@ (800e49c <SPI_RxByte+0x34>)
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	695b      	ldr	r3, [r3, #20]
 800e47a:	f003 0302 	and.w	r3, r3, #2
 800e47e:	2b02      	cmp	r3, #2
 800e480:	d1f8      	bne.n	800e474 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800e482:	1dba      	adds	r2, r7, #6
 800e484:	1df9      	adds	r1, r7, #7
 800e486:	2364      	movs	r3, #100	@ 0x64
 800e488:	9300      	str	r3, [sp, #0]
 800e48a:	2301      	movs	r3, #1
 800e48c:	4803      	ldr	r0, [pc, #12]	@ (800e49c <SPI_RxByte+0x34>)
 800e48e:	f7fc f9fb 	bl	800a888 <HAL_SPI_TransmitReceive>
  return data;
 800e492:	79bb      	ldrb	r3, [r7, #6]
}
 800e494:	4618      	mov	r0, r3
 800e496:	3708      	adds	r7, #8
 800e498:	46bd      	mov	sp, r7
 800e49a:	bd80      	pop	{r7, pc}
 800e49c:	240022e0 	.word	0x240022e0

0800e4a0 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b082      	sub	sp, #8
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 800e4a8:	f7ff ffde 	bl	800e468 <SPI_RxByte>
 800e4ac:	4603      	mov	r3, r0
 800e4ae:	461a      	mov	r2, r3
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	701a      	strb	r2, [r3, #0]
}
 800e4b4:	bf00      	nop
 800e4b6:	3708      	adds	r7, #8
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bd80      	pop	{r7, pc}

0800e4bc <SD_ReadyWait>:

//-----[ SD Card Functions ]-----

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b082      	sub	sp, #8
 800e4c0:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 800e4c2:	4b0a      	ldr	r3, [pc, #40]	@ (800e4ec <SD_ReadyWait+0x30>)
 800e4c4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800e4c8:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 800e4ca:	f7ff ffcd 	bl	800e468 <SPI_RxByte>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800e4d2:	79fb      	ldrb	r3, [r7, #7]
 800e4d4:	2bff      	cmp	r3, #255	@ 0xff
 800e4d6:	d003      	beq.n	800e4e0 <SD_ReadyWait+0x24>
 800e4d8:	4b04      	ldr	r3, [pc, #16]	@ (800e4ec <SD_ReadyWait+0x30>)
 800e4da:	881b      	ldrh	r3, [r3, #0]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d1f4      	bne.n	800e4ca <SD_ReadyWait+0xe>
  return res;
 800e4e0:	79fb      	ldrb	r3, [r7, #7]
}
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	3708      	adds	r7, #8
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	bd80      	pop	{r7, pc}
 800e4ea:	bf00      	nop
 800e4ec:	24002836 	.word	0x24002836

0800e4f0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b084      	sub	sp, #16
 800e4f4:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 800e4f6:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800e4fa:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 800e4fc:	f7ff ff74 	bl	800e3e8 <DESELECT>
  for(int i = 0; i < 10; i++)
 800e500:	2300      	movs	r3, #0
 800e502:	60bb      	str	r3, [r7, #8]
 800e504:	e005      	b.n	800e512 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800e506:	20ff      	movs	r0, #255	@ 0xff
 800e508:	f7ff ff7a 	bl	800e400 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800e50c:	68bb      	ldr	r3, [r7, #8]
 800e50e:	3301      	adds	r3, #1
 800e510:	60bb      	str	r3, [r7, #8]
 800e512:	68bb      	ldr	r3, [r7, #8]
 800e514:	2b09      	cmp	r3, #9
 800e516:	ddf6      	ble.n	800e506 <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 800e518:	f7ff ff5a 	bl	800e3d0 <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 800e51c:	2340      	movs	r3, #64	@ 0x40
 800e51e:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 800e520:	2300      	movs	r3, #0
 800e522:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 800e524:	2300      	movs	r3, #0
 800e526:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 800e528:	2300      	movs	r3, #0
 800e52a:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 800e52c:	2300      	movs	r3, #0
 800e52e:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 800e530:	2395      	movs	r3, #149	@ 0x95
 800e532:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 800e534:	463b      	mov	r3, r7
 800e536:	2106      	movs	r1, #6
 800e538:	4618      	mov	r0, r3
 800e53a:	f7ff ff7b 	bl	800e434 <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 800e53e:	e002      	b.n	800e546 <SD_PowerOn+0x56>
  {
    cnt--;
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	3b01      	subs	r3, #1
 800e544:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 800e546:	f7ff ff8f 	bl	800e468 <SPI_RxByte>
 800e54a:	4603      	mov	r3, r0
 800e54c:	2b01      	cmp	r3, #1
 800e54e:	d002      	beq.n	800e556 <SD_PowerOn+0x66>
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d1f4      	bne.n	800e540 <SD_PowerOn+0x50>
  }
  DESELECT();
 800e556:	f7ff ff47 	bl	800e3e8 <DESELECT>
  SPI_TxByte(0XFF);
 800e55a:	20ff      	movs	r0, #255	@ 0xff
 800e55c:	f7ff ff50 	bl	800e400 <SPI_TxByte>
  PowerFlag = 1;
 800e560:	4b03      	ldr	r3, [pc, #12]	@ (800e570 <SD_PowerOn+0x80>)
 800e562:	2201      	movs	r2, #1
 800e564:	701a      	strb	r2, [r3, #0]
}
 800e566:	bf00      	nop
 800e568:	3710      	adds	r7, #16
 800e56a:	46bd      	mov	sp, r7
 800e56c:	bd80      	pop	{r7, pc}
 800e56e:	bf00      	nop
 800e570:	24002839 	.word	0x24002839

0800e574 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 800e574:	b480      	push	{r7}
 800e576:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800e578:	4b03      	ldr	r3, [pc, #12]	@ (800e588 <SD_PowerOff+0x14>)
 800e57a:	2200      	movs	r2, #0
 800e57c:	701a      	strb	r2, [r3, #0]
}
 800e57e:	bf00      	nop
 800e580:	46bd      	mov	sp, r7
 800e582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e586:	4770      	bx	lr
 800e588:	24002839 	.word	0x24002839

0800e58c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 800e58c:	b480      	push	{r7}
 800e58e:	af00      	add	r7, sp, #0
  return PowerFlag;
 800e590:	4b03      	ldr	r3, [pc, #12]	@ (800e5a0 <SD_CheckPower+0x14>)
 800e592:	781b      	ldrb	r3, [r3, #0]
}
 800e594:	4618      	mov	r0, r3
 800e596:	46bd      	mov	sp, r7
 800e598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e59c:	4770      	bx	lr
 800e59e:	bf00      	nop
 800e5a0:	24002839 	.word	0x24002839

0800e5a4 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b084      	sub	sp, #16
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
 800e5ac:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 800e5ae:	4b13      	ldr	r3, [pc, #76]	@ (800e5fc <SD_RxDataBlock+0x58>)
 800e5b0:	22c8      	movs	r2, #200	@ 0xc8
 800e5b2:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 800e5b4:	f7ff ff58 	bl	800e468 <SPI_RxByte>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 800e5bc:	7bfb      	ldrb	r3, [r7, #15]
 800e5be:	2bff      	cmp	r3, #255	@ 0xff
 800e5c0:	d103      	bne.n	800e5ca <SD_RxDataBlock+0x26>
 800e5c2:	4b0e      	ldr	r3, [pc, #56]	@ (800e5fc <SD_RxDataBlock+0x58>)
 800e5c4:	881b      	ldrh	r3, [r3, #0]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d1f4      	bne.n	800e5b4 <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 800e5ca:	7bfb      	ldrb	r3, [r7, #15]
 800e5cc:	2bfe      	cmp	r3, #254	@ 0xfe
 800e5ce:	d001      	beq.n	800e5d4 <SD_RxDataBlock+0x30>
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	e00f      	b.n	800e5f4 <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	1c5a      	adds	r2, r3, #1
 800e5d8:	607a      	str	r2, [r7, #4]
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f7ff ff60 	bl	800e4a0 <SPI_RxBytePtr>
  } while(len--);
 800e5e0:	683b      	ldr	r3, [r7, #0]
 800e5e2:	1e5a      	subs	r2, r3, #1
 800e5e4:	603a      	str	r2, [r7, #0]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d1f4      	bne.n	800e5d4 <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 800e5ea:	f7ff ff3d 	bl	800e468 <SPI_RxByte>
  SPI_RxByte();
 800e5ee:	f7ff ff3b 	bl	800e468 <SPI_RxByte>
  return TRUE;
 800e5f2:	2301      	movs	r3, #1
}
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	3710      	adds	r7, #16
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	bd80      	pop	{r7, pc}
 800e5fc:	24002834 	.word	0x24002834

0800e600 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b084      	sub	sp, #16
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
 800e608:	460b      	mov	r3, r1
 800e60a:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 800e60c:	2300      	movs	r3, #0
 800e60e:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 800e610:	f7ff ff54 	bl	800e4bc <SD_ReadyWait>
 800e614:	4603      	mov	r3, r0
 800e616:	2bff      	cmp	r3, #255	@ 0xff
 800e618:	d001      	beq.n	800e61e <SD_TxDataBlock+0x1e>
 800e61a:	2300      	movs	r3, #0
 800e61c:	e02f      	b.n	800e67e <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 800e61e:	78fb      	ldrb	r3, [r7, #3]
 800e620:	4618      	mov	r0, r3
 800e622:	f7ff feed 	bl	800e400 <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 800e626:	78fb      	ldrb	r3, [r7, #3]
 800e628:	2bfd      	cmp	r3, #253	@ 0xfd
 800e62a:	d020      	beq.n	800e66e <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 800e62c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e630:	6878      	ldr	r0, [r7, #4]
 800e632:	f7ff feff 	bl	800e434 <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 800e636:	f7ff ff17 	bl	800e468 <SPI_RxByte>
    SPI_RxByte();
 800e63a:	f7ff ff15 	bl	800e468 <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 800e63e:	e00b      	b.n	800e658 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 800e640:	f7ff ff12 	bl	800e468 <SPI_RxByte>
 800e644:	4603      	mov	r3, r0
 800e646:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 800e648:	7bfb      	ldrb	r3, [r7, #15]
 800e64a:	f003 031f 	and.w	r3, r3, #31
 800e64e:	2b05      	cmp	r3, #5
 800e650:	d006      	beq.n	800e660 <SD_TxDataBlock+0x60>
      i++;
 800e652:	7bbb      	ldrb	r3, [r7, #14]
 800e654:	3301      	adds	r3, #1
 800e656:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 800e658:	7bbb      	ldrb	r3, [r7, #14]
 800e65a:	2b40      	cmp	r3, #64	@ 0x40
 800e65c:	d9f0      	bls.n	800e640 <SD_TxDataBlock+0x40>
 800e65e:	e000      	b.n	800e662 <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 800e660:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 800e662:	bf00      	nop
 800e664:	f7ff ff00 	bl	800e468 <SPI_RxByte>
 800e668:	4603      	mov	r3, r0
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d0fa      	beq.n	800e664 <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 800e66e:	7bfb      	ldrb	r3, [r7, #15]
 800e670:	f003 031f 	and.w	r3, r3, #31
 800e674:	2b05      	cmp	r3, #5
 800e676:	d101      	bne.n	800e67c <SD_TxDataBlock+0x7c>
 800e678:	2301      	movs	r3, #1
 800e67a:	e000      	b.n	800e67e <SD_TxDataBlock+0x7e>

  return FALSE;
 800e67c:	2300      	movs	r3, #0
}
 800e67e:	4618      	mov	r0, r3
 800e680:	3710      	adds	r7, #16
 800e682:	46bd      	mov	sp, r7
 800e684:	bd80      	pop	{r7, pc}

0800e686 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800e686:	b580      	push	{r7, lr}
 800e688:	b084      	sub	sp, #16
 800e68a:	af00      	add	r7, sp, #0
 800e68c:	4603      	mov	r3, r0
 800e68e:	6039      	str	r1, [r7, #0]
 800e690:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 800e692:	f7ff ff13 	bl	800e4bc <SD_ReadyWait>
 800e696:	4603      	mov	r3, r0
 800e698:	2bff      	cmp	r3, #255	@ 0xff
 800e69a:	d001      	beq.n	800e6a0 <SD_SendCmd+0x1a>
 800e69c:	23ff      	movs	r3, #255	@ 0xff
 800e69e:	e042      	b.n	800e726 <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 800e6a0:	79fb      	ldrb	r3, [r7, #7]
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	f7ff feac 	bl	800e400 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	0e1b      	lsrs	r3, r3, #24
 800e6ac:	b2db      	uxtb	r3, r3
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	f7ff fea6 	bl	800e400 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 800e6b4:	683b      	ldr	r3, [r7, #0]
 800e6b6:	0c1b      	lsrs	r3, r3, #16
 800e6b8:	b2db      	uxtb	r3, r3
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f7ff fea0 	bl	800e400 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 800e6c0:	683b      	ldr	r3, [r7, #0]
 800e6c2:	0a1b      	lsrs	r3, r3, #8
 800e6c4:	b2db      	uxtb	r3, r3
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	f7ff fe9a 	bl	800e400 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 800e6cc:	683b      	ldr	r3, [r7, #0]
 800e6ce:	b2db      	uxtb	r3, r3
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	f7ff fe95 	bl	800e400 <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 800e6d6:	79fb      	ldrb	r3, [r7, #7]
 800e6d8:	2b40      	cmp	r3, #64	@ 0x40
 800e6da:	d102      	bne.n	800e6e2 <SD_SendCmd+0x5c>
 800e6dc:	2395      	movs	r3, #149	@ 0x95
 800e6de:	73fb      	strb	r3, [r7, #15]
 800e6e0:	e007      	b.n	800e6f2 <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 800e6e2:	79fb      	ldrb	r3, [r7, #7]
 800e6e4:	2b48      	cmp	r3, #72	@ 0x48
 800e6e6:	d102      	bne.n	800e6ee <SD_SendCmd+0x68>
 800e6e8:	2387      	movs	r3, #135	@ 0x87
 800e6ea:	73fb      	strb	r3, [r7, #15]
 800e6ec:	e001      	b.n	800e6f2 <SD_SendCmd+0x6c>
  else crc = 1;
 800e6ee:	2301      	movs	r3, #1
 800e6f0:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 800e6f2:	7bfb      	ldrb	r3, [r7, #15]
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	f7ff fe83 	bl	800e400 <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 800e6fa:	79fb      	ldrb	r3, [r7, #7]
 800e6fc:	2b4c      	cmp	r3, #76	@ 0x4c
 800e6fe:	d101      	bne.n	800e704 <SD_SendCmd+0x7e>
 800e700:	f7ff feb2 	bl	800e468 <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 800e704:	230a      	movs	r3, #10
 800e706:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 800e708:	f7ff feae 	bl	800e468 <SPI_RxByte>
 800e70c:	4603      	mov	r3, r0
 800e70e:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800e710:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800e714:	2b00      	cmp	r3, #0
 800e716:	da05      	bge.n	800e724 <SD_SendCmd+0x9e>
 800e718:	7bbb      	ldrb	r3, [r7, #14]
 800e71a:	3b01      	subs	r3, #1
 800e71c:	73bb      	strb	r3, [r7, #14]
 800e71e:	7bbb      	ldrb	r3, [r7, #14]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d1f1      	bne.n	800e708 <SD_SendCmd+0x82>

  return res;
 800e724:	7b7b      	ldrb	r3, [r7, #13]
}
 800e726:	4618      	mov	r0, r3
 800e728:	3710      	adds	r7, #16
 800e72a:	46bd      	mov	sp, r7
 800e72c:	bd80      	pop	{r7, pc}
	...

0800e730 <SD_disk_initialize>:

//-----[ user_diskio.c Functions ]-----

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 800e730:	b590      	push	{r4, r7, lr}
 800e732:	b085      	sub	sp, #20
 800e734:	af00      	add	r7, sp, #0
 800e736:	4603      	mov	r3, r0
 800e738:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 800e73a:	79fb      	ldrb	r3, [r7, #7]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d001      	beq.n	800e744 <SD_disk_initialize+0x14>
 800e740:	2301      	movs	r3, #1
 800e742:	e0d1      	b.n	800e8e8 <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 800e744:	4b6a      	ldr	r3, [pc, #424]	@ (800e8f0 <SD_disk_initialize+0x1c0>)
 800e746:	781b      	ldrb	r3, [r3, #0]
 800e748:	b2db      	uxtb	r3, r3
 800e74a:	f003 0302 	and.w	r3, r3, #2
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d003      	beq.n	800e75a <SD_disk_initialize+0x2a>
 800e752:	4b67      	ldr	r3, [pc, #412]	@ (800e8f0 <SD_disk_initialize+0x1c0>)
 800e754:	781b      	ldrb	r3, [r3, #0]
 800e756:	b2db      	uxtb	r3, r3
 800e758:	e0c6      	b.n	800e8e8 <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 800e75a:	f7ff fec9 	bl	800e4f0 <SD_PowerOn>
  /* slave select */
  SELECT();
 800e75e:	f7ff fe37 	bl	800e3d0 <SELECT>
  /* check disk type */
  type = 0;
 800e762:	2300      	movs	r3, #0
 800e764:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 800e766:	2100      	movs	r1, #0
 800e768:	2040      	movs	r0, #64	@ 0x40
 800e76a:	f7ff ff8c 	bl	800e686 <SD_SendCmd>
 800e76e:	4603      	mov	r3, r0
 800e770:	2b01      	cmp	r3, #1
 800e772:	f040 80a1 	bne.w	800e8b8 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 800e776:	4b5f      	ldr	r3, [pc, #380]	@ (800e8f4 <SD_disk_initialize+0x1c4>)
 800e778:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e77c:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800e77e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800e782:	2048      	movs	r0, #72	@ 0x48
 800e784:	f7ff ff7f 	bl	800e686 <SD_SendCmd>
 800e788:	4603      	mov	r3, r0
 800e78a:	2b01      	cmp	r3, #1
 800e78c:	d155      	bne.n	800e83a <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 800e78e:	2300      	movs	r3, #0
 800e790:	73fb      	strb	r3, [r7, #15]
 800e792:	e00c      	b.n	800e7ae <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 800e794:	7bfc      	ldrb	r4, [r7, #15]
 800e796:	f7ff fe67 	bl	800e468 <SPI_RxByte>
 800e79a:	4603      	mov	r3, r0
 800e79c:	461a      	mov	r2, r3
 800e79e:	f104 0310 	add.w	r3, r4, #16
 800e7a2:	443b      	add	r3, r7
 800e7a4:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800e7a8:	7bfb      	ldrb	r3, [r7, #15]
 800e7aa:	3301      	adds	r3, #1
 800e7ac:	73fb      	strb	r3, [r7, #15]
 800e7ae:	7bfb      	ldrb	r3, [r7, #15]
 800e7b0:	2b03      	cmp	r3, #3
 800e7b2:	d9ef      	bls.n	800e794 <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800e7b4:	7abb      	ldrb	r3, [r7, #10]
 800e7b6:	2b01      	cmp	r3, #1
 800e7b8:	d17e      	bne.n	800e8b8 <SD_disk_initialize+0x188>
 800e7ba:	7afb      	ldrb	r3, [r7, #11]
 800e7bc:	2baa      	cmp	r3, #170	@ 0xaa
 800e7be:	d17b      	bne.n	800e8b8 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800e7c0:	2100      	movs	r1, #0
 800e7c2:	2077      	movs	r0, #119	@ 0x77
 800e7c4:	f7ff ff5f 	bl	800e686 <SD_SendCmd>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	2b01      	cmp	r3, #1
 800e7cc:	d807      	bhi.n	800e7de <SD_disk_initialize+0xae>
 800e7ce:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800e7d2:	2069      	movs	r0, #105	@ 0x69
 800e7d4:	f7ff ff57 	bl	800e686 <SD_SendCmd>
 800e7d8:	4603      	mov	r3, r0
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d004      	beq.n	800e7e8 <SD_disk_initialize+0xb8>
        } while (Timer1);
 800e7de:	4b45      	ldr	r3, [pc, #276]	@ (800e8f4 <SD_disk_initialize+0x1c4>)
 800e7e0:	881b      	ldrh	r3, [r3, #0]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d1ec      	bne.n	800e7c0 <SD_disk_initialize+0x90>
 800e7e6:	e000      	b.n	800e7ea <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800e7e8:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800e7ea:	4b42      	ldr	r3, [pc, #264]	@ (800e8f4 <SD_disk_initialize+0x1c4>)
 800e7ec:	881b      	ldrh	r3, [r3, #0]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d062      	beq.n	800e8b8 <SD_disk_initialize+0x188>
 800e7f2:	2100      	movs	r1, #0
 800e7f4:	207a      	movs	r0, #122	@ 0x7a
 800e7f6:	f7ff ff46 	bl	800e686 <SD_SendCmd>
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d15b      	bne.n	800e8b8 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 800e800:	2300      	movs	r3, #0
 800e802:	73fb      	strb	r3, [r7, #15]
 800e804:	e00c      	b.n	800e820 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 800e806:	7bfc      	ldrb	r4, [r7, #15]
 800e808:	f7ff fe2e 	bl	800e468 <SPI_RxByte>
 800e80c:	4603      	mov	r3, r0
 800e80e:	461a      	mov	r2, r3
 800e810:	f104 0310 	add.w	r3, r4, #16
 800e814:	443b      	add	r3, r7
 800e816:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800e81a:	7bfb      	ldrb	r3, [r7, #15]
 800e81c:	3301      	adds	r3, #1
 800e81e:	73fb      	strb	r3, [r7, #15]
 800e820:	7bfb      	ldrb	r3, [r7, #15]
 800e822:	2b03      	cmp	r3, #3
 800e824:	d9ef      	bls.n	800e806 <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800e826:	7a3b      	ldrb	r3, [r7, #8]
 800e828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d001      	beq.n	800e834 <SD_disk_initialize+0x104>
 800e830:	230c      	movs	r3, #12
 800e832:	e000      	b.n	800e836 <SD_disk_initialize+0x106>
 800e834:	2304      	movs	r3, #4
 800e836:	73bb      	strb	r3, [r7, #14]
 800e838:	e03e      	b.n	800e8b8 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800e83a:	2100      	movs	r1, #0
 800e83c:	2077      	movs	r0, #119	@ 0x77
 800e83e:	f7ff ff22 	bl	800e686 <SD_SendCmd>
 800e842:	4603      	mov	r3, r0
 800e844:	2b01      	cmp	r3, #1
 800e846:	d808      	bhi.n	800e85a <SD_disk_initialize+0x12a>
 800e848:	2100      	movs	r1, #0
 800e84a:	2069      	movs	r0, #105	@ 0x69
 800e84c:	f7ff ff1b 	bl	800e686 <SD_SendCmd>
 800e850:	4603      	mov	r3, r0
 800e852:	2b01      	cmp	r3, #1
 800e854:	d801      	bhi.n	800e85a <SD_disk_initialize+0x12a>
 800e856:	2302      	movs	r3, #2
 800e858:	e000      	b.n	800e85c <SD_disk_initialize+0x12c>
 800e85a:	2301      	movs	r3, #1
 800e85c:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 800e85e:	7bbb      	ldrb	r3, [r7, #14]
 800e860:	2b02      	cmp	r3, #2
 800e862:	d10e      	bne.n	800e882 <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800e864:	2100      	movs	r1, #0
 800e866:	2077      	movs	r0, #119	@ 0x77
 800e868:	f7ff ff0d 	bl	800e686 <SD_SendCmd>
 800e86c:	4603      	mov	r3, r0
 800e86e:	2b01      	cmp	r3, #1
 800e870:	d80e      	bhi.n	800e890 <SD_disk_initialize+0x160>
 800e872:	2100      	movs	r1, #0
 800e874:	2069      	movs	r0, #105	@ 0x69
 800e876:	f7ff ff06 	bl	800e686 <SD_SendCmd>
 800e87a:	4603      	mov	r3, r0
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d107      	bne.n	800e890 <SD_disk_initialize+0x160>
 800e880:	e00c      	b.n	800e89c <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800e882:	2100      	movs	r1, #0
 800e884:	2041      	movs	r0, #65	@ 0x41
 800e886:	f7ff fefe 	bl	800e686 <SD_SendCmd>
 800e88a:	4603      	mov	r3, r0
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d004      	beq.n	800e89a <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 800e890:	4b18      	ldr	r3, [pc, #96]	@ (800e8f4 <SD_disk_initialize+0x1c4>)
 800e892:	881b      	ldrh	r3, [r3, #0]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d1e2      	bne.n	800e85e <SD_disk_initialize+0x12e>
 800e898:	e000      	b.n	800e89c <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800e89a:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800e89c:	4b15      	ldr	r3, [pc, #84]	@ (800e8f4 <SD_disk_initialize+0x1c4>)
 800e89e:	881b      	ldrh	r3, [r3, #0]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d007      	beq.n	800e8b4 <SD_disk_initialize+0x184>
 800e8a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e8a8:	2050      	movs	r0, #80	@ 0x50
 800e8aa:	f7ff feec 	bl	800e686 <SD_SendCmd>
 800e8ae:	4603      	mov	r3, r0
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d001      	beq.n	800e8b8 <SD_disk_initialize+0x188>
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 800e8b8:	4a0f      	ldr	r2, [pc, #60]	@ (800e8f8 <SD_disk_initialize+0x1c8>)
 800e8ba:	7bbb      	ldrb	r3, [r7, #14]
 800e8bc:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 800e8be:	f7ff fd93 	bl	800e3e8 <DESELECT>
  SPI_RxByte();
 800e8c2:	f7ff fdd1 	bl	800e468 <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 800e8c6:	7bbb      	ldrb	r3, [r7, #14]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d008      	beq.n	800e8de <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 800e8cc:	4b08      	ldr	r3, [pc, #32]	@ (800e8f0 <SD_disk_initialize+0x1c0>)
 800e8ce:	781b      	ldrb	r3, [r3, #0]
 800e8d0:	b2db      	uxtb	r3, r3
 800e8d2:	f023 0301 	bic.w	r3, r3, #1
 800e8d6:	b2da      	uxtb	r2, r3
 800e8d8:	4b05      	ldr	r3, [pc, #20]	@ (800e8f0 <SD_disk_initialize+0x1c0>)
 800e8da:	701a      	strb	r2, [r3, #0]
 800e8dc:	e001      	b.n	800e8e2 <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800e8de:	f7ff fe49 	bl	800e574 <SD_PowerOff>
  }
  return Stat;
 800e8e2:	4b03      	ldr	r3, [pc, #12]	@ (800e8f0 <SD_disk_initialize+0x1c0>)
 800e8e4:	781b      	ldrb	r3, [r3, #0]
 800e8e6:	b2db      	uxtb	r3, r3
}
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	3714      	adds	r7, #20
 800e8ec:	46bd      	mov	sp, r7
 800e8ee:	bd90      	pop	{r4, r7, pc}
 800e8f0:	240000b8 	.word	0x240000b8
 800e8f4:	24002834 	.word	0x24002834
 800e8f8:	24002838 	.word	0x24002838

0800e8fc <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 800e8fc:	b480      	push	{r7}
 800e8fe:	b083      	sub	sp, #12
 800e900:	af00      	add	r7, sp, #0
 800e902:	4603      	mov	r3, r0
 800e904:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 800e906:	79fb      	ldrb	r3, [r7, #7]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d001      	beq.n	800e910 <SD_disk_status+0x14>
 800e90c:	2301      	movs	r3, #1
 800e90e:	e002      	b.n	800e916 <SD_disk_status+0x1a>
  return Stat;
 800e910:	4b04      	ldr	r3, [pc, #16]	@ (800e924 <SD_disk_status+0x28>)
 800e912:	781b      	ldrb	r3, [r3, #0]
 800e914:	b2db      	uxtb	r3, r3
}
 800e916:	4618      	mov	r0, r3
 800e918:	370c      	adds	r7, #12
 800e91a:	46bd      	mov	sp, r7
 800e91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e920:	4770      	bx	lr
 800e922:	bf00      	nop
 800e924:	240000b8 	.word	0x240000b8

0800e928 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b084      	sub	sp, #16
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	60b9      	str	r1, [r7, #8]
 800e930:	607a      	str	r2, [r7, #4]
 800e932:	603b      	str	r3, [r7, #0]
 800e934:	4603      	mov	r3, r0
 800e936:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800e938:	7bfb      	ldrb	r3, [r7, #15]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d102      	bne.n	800e944 <SD_disk_read+0x1c>
 800e93e:	683b      	ldr	r3, [r7, #0]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d101      	bne.n	800e948 <SD_disk_read+0x20>
 800e944:	2304      	movs	r3, #4
 800e946:	e051      	b.n	800e9ec <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e948:	4b2a      	ldr	r3, [pc, #168]	@ (800e9f4 <SD_disk_read+0xcc>)
 800e94a:	781b      	ldrb	r3, [r3, #0]
 800e94c:	b2db      	uxtb	r3, r3
 800e94e:	f003 0301 	and.w	r3, r3, #1
 800e952:	2b00      	cmp	r3, #0
 800e954:	d001      	beq.n	800e95a <SD_disk_read+0x32>
 800e956:	2303      	movs	r3, #3
 800e958:	e048      	b.n	800e9ec <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800e95a:	4b27      	ldr	r3, [pc, #156]	@ (800e9f8 <SD_disk_read+0xd0>)
 800e95c:	781b      	ldrb	r3, [r3, #0]
 800e95e:	f003 0304 	and.w	r3, r3, #4
 800e962:	2b00      	cmp	r3, #0
 800e964:	d102      	bne.n	800e96c <SD_disk_read+0x44>
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	025b      	lsls	r3, r3, #9
 800e96a:	607b      	str	r3, [r7, #4]

  SELECT();
 800e96c:	f7ff fd30 	bl	800e3d0 <SELECT>

  if (count == 1)
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	2b01      	cmp	r3, #1
 800e974:	d111      	bne.n	800e99a <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800e976:	6879      	ldr	r1, [r7, #4]
 800e978:	2051      	movs	r0, #81	@ 0x51
 800e97a:	f7ff fe84 	bl	800e686 <SD_SendCmd>
 800e97e:	4603      	mov	r3, r0
 800e980:	2b00      	cmp	r3, #0
 800e982:	d129      	bne.n	800e9d8 <SD_disk_read+0xb0>
 800e984:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e988:	68b8      	ldr	r0, [r7, #8]
 800e98a:	f7ff fe0b 	bl	800e5a4 <SD_RxDataBlock>
 800e98e:	4603      	mov	r3, r0
 800e990:	2b00      	cmp	r3, #0
 800e992:	d021      	beq.n	800e9d8 <SD_disk_read+0xb0>
 800e994:	2300      	movs	r3, #0
 800e996:	603b      	str	r3, [r7, #0]
 800e998:	e01e      	b.n	800e9d8 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 800e99a:	6879      	ldr	r1, [r7, #4]
 800e99c:	2052      	movs	r0, #82	@ 0x52
 800e99e:	f7ff fe72 	bl	800e686 <SD_SendCmd>
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d117      	bne.n	800e9d8 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 800e9a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e9ac:	68b8      	ldr	r0, [r7, #8]
 800e9ae:	f7ff fdf9 	bl	800e5a4 <SD_RxDataBlock>
 800e9b2:	4603      	mov	r3, r0
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d00a      	beq.n	800e9ce <SD_disk_read+0xa6>
        buff += 512;
 800e9b8:	68bb      	ldr	r3, [r7, #8]
 800e9ba:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800e9be:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800e9c0:	683b      	ldr	r3, [r7, #0]
 800e9c2:	3b01      	subs	r3, #1
 800e9c4:	603b      	str	r3, [r7, #0]
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d1ed      	bne.n	800e9a8 <SD_disk_read+0x80>
 800e9cc:	e000      	b.n	800e9d0 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 800e9ce:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 800e9d0:	2100      	movs	r1, #0
 800e9d2:	204c      	movs	r0, #76	@ 0x4c
 800e9d4:	f7ff fe57 	bl	800e686 <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 800e9d8:	f7ff fd06 	bl	800e3e8 <DESELECT>
  SPI_RxByte();
 800e9dc:	f7ff fd44 	bl	800e468 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	bf14      	ite	ne
 800e9e6:	2301      	movne	r3, #1
 800e9e8:	2300      	moveq	r3, #0
 800e9ea:	b2db      	uxtb	r3, r3
}
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	3710      	adds	r7, #16
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	bd80      	pop	{r7, pc}
 800e9f4:	240000b8 	.word	0x240000b8
 800e9f8:	24002838 	.word	0x24002838

0800e9fc <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b084      	sub	sp, #16
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	60b9      	str	r1, [r7, #8]
 800ea04:	607a      	str	r2, [r7, #4]
 800ea06:	603b      	str	r3, [r7, #0]
 800ea08:	4603      	mov	r3, r0
 800ea0a:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800ea0c:	7bfb      	ldrb	r3, [r7, #15]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d102      	bne.n	800ea18 <SD_disk_write+0x1c>
 800ea12:	683b      	ldr	r3, [r7, #0]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d101      	bne.n	800ea1c <SD_disk_write+0x20>
 800ea18:	2304      	movs	r3, #4
 800ea1a:	e06b      	b.n	800eaf4 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ea1c:	4b37      	ldr	r3, [pc, #220]	@ (800eafc <SD_disk_write+0x100>)
 800ea1e:	781b      	ldrb	r3, [r3, #0]
 800ea20:	b2db      	uxtb	r3, r3
 800ea22:	f003 0301 	and.w	r3, r3, #1
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d001      	beq.n	800ea2e <SD_disk_write+0x32>
 800ea2a:	2303      	movs	r3, #3
 800ea2c:	e062      	b.n	800eaf4 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 800ea2e:	4b33      	ldr	r3, [pc, #204]	@ (800eafc <SD_disk_write+0x100>)
 800ea30:	781b      	ldrb	r3, [r3, #0]
 800ea32:	b2db      	uxtb	r3, r3
 800ea34:	f003 0304 	and.w	r3, r3, #4
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d001      	beq.n	800ea40 <SD_disk_write+0x44>
 800ea3c:	2302      	movs	r3, #2
 800ea3e:	e059      	b.n	800eaf4 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800ea40:	4b2f      	ldr	r3, [pc, #188]	@ (800eb00 <SD_disk_write+0x104>)
 800ea42:	781b      	ldrb	r3, [r3, #0]
 800ea44:	f003 0304 	and.w	r3, r3, #4
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d102      	bne.n	800ea52 <SD_disk_write+0x56>
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	025b      	lsls	r3, r3, #9
 800ea50:	607b      	str	r3, [r7, #4]

  SELECT();
 800ea52:	f7ff fcbd 	bl	800e3d0 <SELECT>

  if (count == 1)
 800ea56:	683b      	ldr	r3, [r7, #0]
 800ea58:	2b01      	cmp	r3, #1
 800ea5a:	d110      	bne.n	800ea7e <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800ea5c:	6879      	ldr	r1, [r7, #4]
 800ea5e:	2058      	movs	r0, #88	@ 0x58
 800ea60:	f7ff fe11 	bl	800e686 <SD_SendCmd>
 800ea64:	4603      	mov	r3, r0
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d13a      	bne.n	800eae0 <SD_disk_write+0xe4>
 800ea6a:	21fe      	movs	r1, #254	@ 0xfe
 800ea6c:	68b8      	ldr	r0, [r7, #8]
 800ea6e:	f7ff fdc7 	bl	800e600 <SD_TxDataBlock>
 800ea72:	4603      	mov	r3, r0
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d033      	beq.n	800eae0 <SD_disk_write+0xe4>
      count = 0;
 800ea78:	2300      	movs	r3, #0
 800ea7a:	603b      	str	r3, [r7, #0]
 800ea7c:	e030      	b.n	800eae0 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 800ea7e:	4b20      	ldr	r3, [pc, #128]	@ (800eb00 <SD_disk_write+0x104>)
 800ea80:	781b      	ldrb	r3, [r3, #0]
 800ea82:	f003 0302 	and.w	r3, r3, #2
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d007      	beq.n	800ea9a <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800ea8a:	2100      	movs	r1, #0
 800ea8c:	2077      	movs	r0, #119	@ 0x77
 800ea8e:	f7ff fdfa 	bl	800e686 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800ea92:	6839      	ldr	r1, [r7, #0]
 800ea94:	2057      	movs	r0, #87	@ 0x57
 800ea96:	f7ff fdf6 	bl	800e686 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800ea9a:	6879      	ldr	r1, [r7, #4]
 800ea9c:	2059      	movs	r0, #89	@ 0x59
 800ea9e:	f7ff fdf2 	bl	800e686 <SD_SendCmd>
 800eaa2:	4603      	mov	r3, r0
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d11b      	bne.n	800eae0 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 800eaa8:	21fc      	movs	r1, #252	@ 0xfc
 800eaaa:	68b8      	ldr	r0, [r7, #8]
 800eaac:	f7ff fda8 	bl	800e600 <SD_TxDataBlock>
 800eab0:	4603      	mov	r3, r0
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d00a      	beq.n	800eacc <SD_disk_write+0xd0>
        buff += 512;
 800eab6:	68bb      	ldr	r3, [r7, #8]
 800eab8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800eabc:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800eabe:	683b      	ldr	r3, [r7, #0]
 800eac0:	3b01      	subs	r3, #1
 800eac2:	603b      	str	r3, [r7, #0]
 800eac4:	683b      	ldr	r3, [r7, #0]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d1ee      	bne.n	800eaa8 <SD_disk_write+0xac>
 800eaca:	e000      	b.n	800eace <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 800eacc:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 800eace:	21fd      	movs	r1, #253	@ 0xfd
 800ead0:	2000      	movs	r0, #0
 800ead2:	f7ff fd95 	bl	800e600 <SD_TxDataBlock>
 800ead6:	4603      	mov	r3, r0
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d101      	bne.n	800eae0 <SD_disk_write+0xe4>
      {
        count = 1;
 800eadc:	2301      	movs	r3, #1
 800eade:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 800eae0:	f7ff fc82 	bl	800e3e8 <DESELECT>
  SPI_RxByte();
 800eae4:	f7ff fcc0 	bl	800e468 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800eae8:	683b      	ldr	r3, [r7, #0]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	bf14      	ite	ne
 800eaee:	2301      	movne	r3, #1
 800eaf0:	2300      	moveq	r3, #0
 800eaf2:	b2db      	uxtb	r3, r3
}
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	3710      	adds	r7, #16
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	bd80      	pop	{r7, pc}
 800eafc:	240000b8 	.word	0x240000b8
 800eb00:	24002838 	.word	0x24002838

0800eb04 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 800eb04:	b590      	push	{r4, r7, lr}
 800eb06:	b08b      	sub	sp, #44	@ 0x2c
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	603a      	str	r2, [r7, #0]
 800eb0e:	71fb      	strb	r3, [r7, #7]
 800eb10:	460b      	mov	r3, r1
 800eb12:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 800eb14:	683b      	ldr	r3, [r7, #0]
 800eb16:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 800eb18:	79fb      	ldrb	r3, [r7, #7]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d001      	beq.n	800eb22 <SD_disk_ioctl+0x1e>
 800eb1e:	2304      	movs	r3, #4
 800eb20:	e113      	b.n	800ed4a <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 800eb22:	2301      	movs	r3, #1
 800eb24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 800eb28:	79bb      	ldrb	r3, [r7, #6]
 800eb2a:	2b05      	cmp	r3, #5
 800eb2c:	d124      	bne.n	800eb78 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 800eb2e:	6a3b      	ldr	r3, [r7, #32]
 800eb30:	781b      	ldrb	r3, [r3, #0]
 800eb32:	2b02      	cmp	r3, #2
 800eb34:	d012      	beq.n	800eb5c <SD_disk_ioctl+0x58>
 800eb36:	2b02      	cmp	r3, #2
 800eb38:	dc1a      	bgt.n	800eb70 <SD_disk_ioctl+0x6c>
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d002      	beq.n	800eb44 <SD_disk_ioctl+0x40>
 800eb3e:	2b01      	cmp	r3, #1
 800eb40:	d006      	beq.n	800eb50 <SD_disk_ioctl+0x4c>
 800eb42:	e015      	b.n	800eb70 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 800eb44:	f7ff fd16 	bl	800e574 <SD_PowerOff>
      res = RES_OK;
 800eb48:	2300      	movs	r3, #0
 800eb4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800eb4e:	e0fa      	b.n	800ed46 <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 800eb50:	f7ff fcce 	bl	800e4f0 <SD_PowerOn>
      res = RES_OK;
 800eb54:	2300      	movs	r3, #0
 800eb56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800eb5a:	e0f4      	b.n	800ed46 <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 800eb5c:	6a3b      	ldr	r3, [r7, #32]
 800eb5e:	1c5c      	adds	r4, r3, #1
 800eb60:	f7ff fd14 	bl	800e58c <SD_CheckPower>
 800eb64:	4603      	mov	r3, r0
 800eb66:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 800eb68:	2300      	movs	r3, #0
 800eb6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800eb6e:	e0ea      	b.n	800ed46 <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 800eb70:	2304      	movs	r3, #4
 800eb72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800eb76:	e0e6      	b.n	800ed46 <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT){
 800eb78:	4b76      	ldr	r3, [pc, #472]	@ (800ed54 <SD_disk_ioctl+0x250>)
 800eb7a:	781b      	ldrb	r3, [r3, #0]
 800eb7c:	b2db      	uxtb	r3, r3
 800eb7e:	f003 0301 	and.w	r3, r3, #1
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d001      	beq.n	800eb8a <SD_disk_ioctl+0x86>
    	return RES_NOTRDY;
 800eb86:	2303      	movs	r3, #3
 800eb88:	e0df      	b.n	800ed4a <SD_disk_ioctl+0x246>
    }
    SELECT();
 800eb8a:	f7ff fc21 	bl	800e3d0 <SELECT>
    switch (ctrl)
 800eb8e:	79bb      	ldrb	r3, [r7, #6]
 800eb90:	2b0d      	cmp	r3, #13
 800eb92:	f200 80c9 	bhi.w	800ed28 <SD_disk_ioctl+0x224>
 800eb96:	a201      	add	r2, pc, #4	@ (adr r2, 800eb9c <SD_disk_ioctl+0x98>)
 800eb98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb9c:	0800ec93 	.word	0x0800ec93
 800eba0:	0800ebd5 	.word	0x0800ebd5
 800eba4:	0800ec83 	.word	0x0800ec83
 800eba8:	0800ed29 	.word	0x0800ed29
 800ebac:	0800ed29 	.word	0x0800ed29
 800ebb0:	0800ed29 	.word	0x0800ed29
 800ebb4:	0800ed29 	.word	0x0800ed29
 800ebb8:	0800ed29 	.word	0x0800ed29
 800ebbc:	0800ed29 	.word	0x0800ed29
 800ebc0:	0800ed29 	.word	0x0800ed29
 800ebc4:	0800ed29 	.word	0x0800ed29
 800ebc8:	0800eca5 	.word	0x0800eca5
 800ebcc:	0800ecc9 	.word	0x0800ecc9
 800ebd0:	0800eced 	.word	0x0800eced
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800ebd4:	2100      	movs	r1, #0
 800ebd6:	2049      	movs	r0, #73	@ 0x49
 800ebd8:	f7ff fd55 	bl	800e686 <SD_SendCmd>
 800ebdc:	4603      	mov	r3, r0
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	f040 80a6 	bne.w	800ed30 <SD_disk_ioctl+0x22c>
 800ebe4:	f107 030c 	add.w	r3, r7, #12
 800ebe8:	2110      	movs	r1, #16
 800ebea:	4618      	mov	r0, r3
 800ebec:	f7ff fcda 	bl	800e5a4 <SD_RxDataBlock>
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	f000 809c 	beq.w	800ed30 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 800ebf8:	7b3b      	ldrb	r3, [r7, #12]
 800ebfa:	099b      	lsrs	r3, r3, #6
 800ebfc:	b2db      	uxtb	r3, r3
 800ebfe:	2b01      	cmp	r3, #1
 800ec00:	d10d      	bne.n	800ec1e <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800ec02:	7d7b      	ldrb	r3, [r7, #21]
 800ec04:	461a      	mov	r2, r3
 800ec06:	7d3b      	ldrb	r3, [r7, #20]
 800ec08:	021b      	lsls	r3, r3, #8
 800ec0a:	b29b      	uxth	r3, r3
 800ec0c:	4413      	add	r3, r2
 800ec0e:	b29b      	uxth	r3, r3
 800ec10:	3301      	adds	r3, #1
 800ec12:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 800ec14:	8bfb      	ldrh	r3, [r7, #30]
 800ec16:	029a      	lsls	r2, r3, #10
 800ec18:	683b      	ldr	r3, [r7, #0]
 800ec1a:	601a      	str	r2, [r3, #0]
 800ec1c:	e02d      	b.n	800ec7a <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800ec1e:	7c7b      	ldrb	r3, [r7, #17]
 800ec20:	f003 030f 	and.w	r3, r3, #15
 800ec24:	b2da      	uxtb	r2, r3
 800ec26:	7dbb      	ldrb	r3, [r7, #22]
 800ec28:	09db      	lsrs	r3, r3, #7
 800ec2a:	b2db      	uxtb	r3, r3
 800ec2c:	4413      	add	r3, r2
 800ec2e:	b2da      	uxtb	r2, r3
 800ec30:	7d7b      	ldrb	r3, [r7, #21]
 800ec32:	005b      	lsls	r3, r3, #1
 800ec34:	b2db      	uxtb	r3, r3
 800ec36:	f003 0306 	and.w	r3, r3, #6
 800ec3a:	b2db      	uxtb	r3, r3
 800ec3c:	4413      	add	r3, r2
 800ec3e:	b2db      	uxtb	r3, r3
 800ec40:	3302      	adds	r3, #2
 800ec42:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800ec46:	7d3b      	ldrb	r3, [r7, #20]
 800ec48:	099b      	lsrs	r3, r3, #6
 800ec4a:	b2db      	uxtb	r3, r3
 800ec4c:	461a      	mov	r2, r3
 800ec4e:	7cfb      	ldrb	r3, [r7, #19]
 800ec50:	009b      	lsls	r3, r3, #2
 800ec52:	b29b      	uxth	r3, r3
 800ec54:	4413      	add	r3, r2
 800ec56:	b29a      	uxth	r2, r3
 800ec58:	7cbb      	ldrb	r3, [r7, #18]
 800ec5a:	029b      	lsls	r3, r3, #10
 800ec5c:	b29b      	uxth	r3, r3
 800ec5e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ec62:	b29b      	uxth	r3, r3
 800ec64:	4413      	add	r3, r2
 800ec66:	b29b      	uxth	r3, r3
 800ec68:	3301      	adds	r3, #1
 800ec6a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 800ec6c:	8bfa      	ldrh	r2, [r7, #30]
 800ec6e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ec72:	3b09      	subs	r3, #9
 800ec74:	409a      	lsls	r2, r3
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 800ec80:	e056      	b.n	800ed30 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 800ec82:	683b      	ldr	r3, [r7, #0]
 800ec84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ec88:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800ec90:	e055      	b.n	800ed3e <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800ec92:	f7ff fc13 	bl	800e4bc <SD_ReadyWait>
 800ec96:	4603      	mov	r3, r0
 800ec98:	2bff      	cmp	r3, #255	@ 0xff
 800ec9a:	d14b      	bne.n	800ed34 <SD_disk_ioctl+0x230>
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800eca2:	e047      	b.n	800ed34 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800eca4:	2100      	movs	r1, #0
 800eca6:	2049      	movs	r0, #73	@ 0x49
 800eca8:	f7ff fced 	bl	800e686 <SD_SendCmd>
 800ecac:	4603      	mov	r3, r0
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d142      	bne.n	800ed38 <SD_disk_ioctl+0x234>
 800ecb2:	2110      	movs	r1, #16
 800ecb4:	6a38      	ldr	r0, [r7, #32]
 800ecb6:	f7ff fc75 	bl	800e5a4 <SD_RxDataBlock>
 800ecba:	4603      	mov	r3, r0
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d03b      	beq.n	800ed38 <SD_disk_ioctl+0x234>
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800ecc6:	e037      	b.n	800ed38 <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800ecc8:	2100      	movs	r1, #0
 800ecca:	204a      	movs	r0, #74	@ 0x4a
 800eccc:	f7ff fcdb 	bl	800e686 <SD_SendCmd>
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d132      	bne.n	800ed3c <SD_disk_ioctl+0x238>
 800ecd6:	2110      	movs	r1, #16
 800ecd8:	6a38      	ldr	r0, [r7, #32]
 800ecda:	f7ff fc63 	bl	800e5a4 <SD_RxDataBlock>
 800ecde:	4603      	mov	r3, r0
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d02b      	beq.n	800ed3c <SD_disk_ioctl+0x238>
 800ece4:	2300      	movs	r3, #0
 800ece6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800ecea:	e027      	b.n	800ed3c <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 800ecec:	2100      	movs	r1, #0
 800ecee:	207a      	movs	r0, #122	@ 0x7a
 800ecf0:	f7ff fcc9 	bl	800e686 <SD_SendCmd>
 800ecf4:	4603      	mov	r3, r0
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d116      	bne.n	800ed28 <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ed00:	e00b      	b.n	800ed1a <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 800ed02:	6a3c      	ldr	r4, [r7, #32]
 800ed04:	1c63      	adds	r3, r4, #1
 800ed06:	623b      	str	r3, [r7, #32]
 800ed08:	f7ff fbae 	bl	800e468 <SPI_RxByte>
 800ed0c:	4603      	mov	r3, r0
 800ed0e:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 800ed10:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ed14:	3301      	adds	r3, #1
 800ed16:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ed1a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ed1e:	2b03      	cmp	r3, #3
 800ed20:	d9ef      	bls.n	800ed02 <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 800ed22:	2300      	movs	r3, #0
 800ed24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 800ed28:	2304      	movs	r3, #4
 800ed2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ed2e:	e006      	b.n	800ed3e <SD_disk_ioctl+0x23a>
      break;
 800ed30:	bf00      	nop
 800ed32:	e004      	b.n	800ed3e <SD_disk_ioctl+0x23a>
      break;
 800ed34:	bf00      	nop
 800ed36:	e002      	b.n	800ed3e <SD_disk_ioctl+0x23a>
      break;
 800ed38:	bf00      	nop
 800ed3a:	e000      	b.n	800ed3e <SD_disk_ioctl+0x23a>
      break;
 800ed3c:	bf00      	nop
    }
    DESELECT();
 800ed3e:	f7ff fb53 	bl	800e3e8 <DESELECT>
    SPI_RxByte();
 800ed42:	f7ff fb91 	bl	800e468 <SPI_RxByte>
  }
  return res;
 800ed46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	372c      	adds	r7, #44	@ 0x2c
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bd90      	pop	{r4, r7, pc}
 800ed52:	bf00      	nop
 800ed54:	240000b8 	.word	0x240000b8

0800ed58 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b084      	sub	sp, #16
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	4603      	mov	r3, r0
 800ed60:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ed62:	79fb      	ldrb	r3, [r7, #7]
 800ed64:	4a08      	ldr	r2, [pc, #32]	@ (800ed88 <disk_status+0x30>)
 800ed66:	009b      	lsls	r3, r3, #2
 800ed68:	4413      	add	r3, r2
 800ed6a:	685b      	ldr	r3, [r3, #4]
 800ed6c:	685b      	ldr	r3, [r3, #4]
 800ed6e:	79fa      	ldrb	r2, [r7, #7]
 800ed70:	4905      	ldr	r1, [pc, #20]	@ (800ed88 <disk_status+0x30>)
 800ed72:	440a      	add	r2, r1
 800ed74:	7a12      	ldrb	r2, [r2, #8]
 800ed76:	4610      	mov	r0, r2
 800ed78:	4798      	blx	r3
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ed7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed80:	4618      	mov	r0, r3
 800ed82:	3710      	adds	r7, #16
 800ed84:	46bd      	mov	sp, r7
 800ed86:	bd80      	pop	{r7, pc}
 800ed88:	24002a64 	.word	0x24002a64

0800ed8c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b084      	sub	sp, #16
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	4603      	mov	r3, r0
 800ed94:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ed96:	2300      	movs	r3, #0
 800ed98:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ed9a:	79fb      	ldrb	r3, [r7, #7]
 800ed9c:	4a0e      	ldr	r2, [pc, #56]	@ (800edd8 <disk_initialize+0x4c>)
 800ed9e:	5cd3      	ldrb	r3, [r2, r3]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d114      	bne.n	800edce <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800eda4:	79fb      	ldrb	r3, [r7, #7]
 800eda6:	4a0c      	ldr	r2, [pc, #48]	@ (800edd8 <disk_initialize+0x4c>)
 800eda8:	009b      	lsls	r3, r3, #2
 800edaa:	4413      	add	r3, r2
 800edac:	685b      	ldr	r3, [r3, #4]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	79fa      	ldrb	r2, [r7, #7]
 800edb2:	4909      	ldr	r1, [pc, #36]	@ (800edd8 <disk_initialize+0x4c>)
 800edb4:	440a      	add	r2, r1
 800edb6:	7a12      	ldrb	r2, [r2, #8]
 800edb8:	4610      	mov	r0, r2
 800edba:	4798      	blx	r3
 800edbc:	4603      	mov	r3, r0
 800edbe:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800edc0:	7bfb      	ldrb	r3, [r7, #15]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d103      	bne.n	800edce <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800edc6:	79fb      	ldrb	r3, [r7, #7]
 800edc8:	4a03      	ldr	r2, [pc, #12]	@ (800edd8 <disk_initialize+0x4c>)
 800edca:	2101      	movs	r1, #1
 800edcc:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800edce:	7bfb      	ldrb	r3, [r7, #15]
}
 800edd0:	4618      	mov	r0, r3
 800edd2:	3710      	adds	r7, #16
 800edd4:	46bd      	mov	sp, r7
 800edd6:	bd80      	pop	{r7, pc}
 800edd8:	24002a64 	.word	0x24002a64

0800eddc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800eddc:	b590      	push	{r4, r7, lr}
 800edde:	b087      	sub	sp, #28
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	60b9      	str	r1, [r7, #8]
 800ede4:	607a      	str	r2, [r7, #4]
 800ede6:	603b      	str	r3, [r7, #0]
 800ede8:	4603      	mov	r3, r0
 800edea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800edec:	7bfb      	ldrb	r3, [r7, #15]
 800edee:	4a0a      	ldr	r2, [pc, #40]	@ (800ee18 <disk_read+0x3c>)
 800edf0:	009b      	lsls	r3, r3, #2
 800edf2:	4413      	add	r3, r2
 800edf4:	685b      	ldr	r3, [r3, #4]
 800edf6:	689c      	ldr	r4, [r3, #8]
 800edf8:	7bfb      	ldrb	r3, [r7, #15]
 800edfa:	4a07      	ldr	r2, [pc, #28]	@ (800ee18 <disk_read+0x3c>)
 800edfc:	4413      	add	r3, r2
 800edfe:	7a18      	ldrb	r0, [r3, #8]
 800ee00:	683b      	ldr	r3, [r7, #0]
 800ee02:	687a      	ldr	r2, [r7, #4]
 800ee04:	68b9      	ldr	r1, [r7, #8]
 800ee06:	47a0      	blx	r4
 800ee08:	4603      	mov	r3, r0
 800ee0a:	75fb      	strb	r3, [r7, #23]
  return res;
 800ee0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee0e:	4618      	mov	r0, r3
 800ee10:	371c      	adds	r7, #28
 800ee12:	46bd      	mov	sp, r7
 800ee14:	bd90      	pop	{r4, r7, pc}
 800ee16:	bf00      	nop
 800ee18:	24002a64 	.word	0x24002a64

0800ee1c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ee1c:	b590      	push	{r4, r7, lr}
 800ee1e:	b087      	sub	sp, #28
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	60b9      	str	r1, [r7, #8]
 800ee24:	607a      	str	r2, [r7, #4]
 800ee26:	603b      	str	r3, [r7, #0]
 800ee28:	4603      	mov	r3, r0
 800ee2a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ee2c:	7bfb      	ldrb	r3, [r7, #15]
 800ee2e:	4a0a      	ldr	r2, [pc, #40]	@ (800ee58 <disk_write+0x3c>)
 800ee30:	009b      	lsls	r3, r3, #2
 800ee32:	4413      	add	r3, r2
 800ee34:	685b      	ldr	r3, [r3, #4]
 800ee36:	68dc      	ldr	r4, [r3, #12]
 800ee38:	7bfb      	ldrb	r3, [r7, #15]
 800ee3a:	4a07      	ldr	r2, [pc, #28]	@ (800ee58 <disk_write+0x3c>)
 800ee3c:	4413      	add	r3, r2
 800ee3e:	7a18      	ldrb	r0, [r3, #8]
 800ee40:	683b      	ldr	r3, [r7, #0]
 800ee42:	687a      	ldr	r2, [r7, #4]
 800ee44:	68b9      	ldr	r1, [r7, #8]
 800ee46:	47a0      	blx	r4
 800ee48:	4603      	mov	r3, r0
 800ee4a:	75fb      	strb	r3, [r7, #23]
  return res;
 800ee4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee4e:	4618      	mov	r0, r3
 800ee50:	371c      	adds	r7, #28
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd90      	pop	{r4, r7, pc}
 800ee56:	bf00      	nop
 800ee58:	24002a64 	.word	0x24002a64

0800ee5c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b084      	sub	sp, #16
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	4603      	mov	r3, r0
 800ee64:	603a      	str	r2, [r7, #0]
 800ee66:	71fb      	strb	r3, [r7, #7]
 800ee68:	460b      	mov	r3, r1
 800ee6a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ee6c:	79fb      	ldrb	r3, [r7, #7]
 800ee6e:	4a09      	ldr	r2, [pc, #36]	@ (800ee94 <disk_ioctl+0x38>)
 800ee70:	009b      	lsls	r3, r3, #2
 800ee72:	4413      	add	r3, r2
 800ee74:	685b      	ldr	r3, [r3, #4]
 800ee76:	691b      	ldr	r3, [r3, #16]
 800ee78:	79fa      	ldrb	r2, [r7, #7]
 800ee7a:	4906      	ldr	r1, [pc, #24]	@ (800ee94 <disk_ioctl+0x38>)
 800ee7c:	440a      	add	r2, r1
 800ee7e:	7a10      	ldrb	r0, [r2, #8]
 800ee80:	79b9      	ldrb	r1, [r7, #6]
 800ee82:	683a      	ldr	r2, [r7, #0]
 800ee84:	4798      	blx	r3
 800ee86:	4603      	mov	r3, r0
 800ee88:	73fb      	strb	r3, [r7, #15]
  return res;
 800ee8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	3710      	adds	r7, #16
 800ee90:	46bd      	mov	sp, r7
 800ee92:	bd80      	pop	{r7, pc}
 800ee94:	24002a64 	.word	0x24002a64

0800ee98 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ee98:	b480      	push	{r7}
 800ee9a:	b085      	sub	sp, #20
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	3301      	adds	r3, #1
 800eea4:	781b      	ldrb	r3, [r3, #0]
 800eea6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800eea8:	89fb      	ldrh	r3, [r7, #14]
 800eeaa:	021b      	lsls	r3, r3, #8
 800eeac:	b21a      	sxth	r2, r3
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	781b      	ldrb	r3, [r3, #0]
 800eeb2:	b21b      	sxth	r3, r3
 800eeb4:	4313      	orrs	r3, r2
 800eeb6:	b21b      	sxth	r3, r3
 800eeb8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800eeba:	89fb      	ldrh	r3, [r7, #14]
}
 800eebc:	4618      	mov	r0, r3
 800eebe:	3714      	adds	r7, #20
 800eec0:	46bd      	mov	sp, r7
 800eec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec6:	4770      	bx	lr

0800eec8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800eec8:	b480      	push	{r7}
 800eeca:	b085      	sub	sp, #20
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	3303      	adds	r3, #3
 800eed4:	781b      	ldrb	r3, [r3, #0]
 800eed6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	021b      	lsls	r3, r3, #8
 800eedc:	687a      	ldr	r2, [r7, #4]
 800eede:	3202      	adds	r2, #2
 800eee0:	7812      	ldrb	r2, [r2, #0]
 800eee2:	4313      	orrs	r3, r2
 800eee4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	021b      	lsls	r3, r3, #8
 800eeea:	687a      	ldr	r2, [r7, #4]
 800eeec:	3201      	adds	r2, #1
 800eeee:	7812      	ldrb	r2, [r2, #0]
 800eef0:	4313      	orrs	r3, r2
 800eef2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	021b      	lsls	r3, r3, #8
 800eef8:	687a      	ldr	r2, [r7, #4]
 800eefa:	7812      	ldrb	r2, [r2, #0]
 800eefc:	4313      	orrs	r3, r2
 800eefe:	60fb      	str	r3, [r7, #12]
	return rv;
 800ef00:	68fb      	ldr	r3, [r7, #12]
}
 800ef02:	4618      	mov	r0, r3
 800ef04:	3714      	adds	r7, #20
 800ef06:	46bd      	mov	sp, r7
 800ef08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0c:	4770      	bx	lr

0800ef0e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ef0e:	b480      	push	{r7}
 800ef10:	b083      	sub	sp, #12
 800ef12:	af00      	add	r7, sp, #0
 800ef14:	6078      	str	r0, [r7, #4]
 800ef16:	460b      	mov	r3, r1
 800ef18:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	1c5a      	adds	r2, r3, #1
 800ef1e:	607a      	str	r2, [r7, #4]
 800ef20:	887a      	ldrh	r2, [r7, #2]
 800ef22:	b2d2      	uxtb	r2, r2
 800ef24:	701a      	strb	r2, [r3, #0]
 800ef26:	887b      	ldrh	r3, [r7, #2]
 800ef28:	0a1b      	lsrs	r3, r3, #8
 800ef2a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	1c5a      	adds	r2, r3, #1
 800ef30:	607a      	str	r2, [r7, #4]
 800ef32:	887a      	ldrh	r2, [r7, #2]
 800ef34:	b2d2      	uxtb	r2, r2
 800ef36:	701a      	strb	r2, [r3, #0]
}
 800ef38:	bf00      	nop
 800ef3a:	370c      	adds	r7, #12
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef42:	4770      	bx	lr

0800ef44 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ef44:	b480      	push	{r7}
 800ef46:	b083      	sub	sp, #12
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
 800ef4c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	1c5a      	adds	r2, r3, #1
 800ef52:	607a      	str	r2, [r7, #4]
 800ef54:	683a      	ldr	r2, [r7, #0]
 800ef56:	b2d2      	uxtb	r2, r2
 800ef58:	701a      	strb	r2, [r3, #0]
 800ef5a:	683b      	ldr	r3, [r7, #0]
 800ef5c:	0a1b      	lsrs	r3, r3, #8
 800ef5e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	1c5a      	adds	r2, r3, #1
 800ef64:	607a      	str	r2, [r7, #4]
 800ef66:	683a      	ldr	r2, [r7, #0]
 800ef68:	b2d2      	uxtb	r2, r2
 800ef6a:	701a      	strb	r2, [r3, #0]
 800ef6c:	683b      	ldr	r3, [r7, #0]
 800ef6e:	0a1b      	lsrs	r3, r3, #8
 800ef70:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	1c5a      	adds	r2, r3, #1
 800ef76:	607a      	str	r2, [r7, #4]
 800ef78:	683a      	ldr	r2, [r7, #0]
 800ef7a:	b2d2      	uxtb	r2, r2
 800ef7c:	701a      	strb	r2, [r3, #0]
 800ef7e:	683b      	ldr	r3, [r7, #0]
 800ef80:	0a1b      	lsrs	r3, r3, #8
 800ef82:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	1c5a      	adds	r2, r3, #1
 800ef88:	607a      	str	r2, [r7, #4]
 800ef8a:	683a      	ldr	r2, [r7, #0]
 800ef8c:	b2d2      	uxtb	r2, r2
 800ef8e:	701a      	strb	r2, [r3, #0]
}
 800ef90:	bf00      	nop
 800ef92:	370c      	adds	r7, #12
 800ef94:	46bd      	mov	sp, r7
 800ef96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9a:	4770      	bx	lr

0800ef9c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ef9c:	b480      	push	{r7}
 800ef9e:	b087      	sub	sp, #28
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	60f8      	str	r0, [r7, #12]
 800efa4:	60b9      	str	r1, [r7, #8]
 800efa6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800efac:	68bb      	ldr	r3, [r7, #8]
 800efae:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d00d      	beq.n	800efd2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800efb6:	693a      	ldr	r2, [r7, #16]
 800efb8:	1c53      	adds	r3, r2, #1
 800efba:	613b      	str	r3, [r7, #16]
 800efbc:	697b      	ldr	r3, [r7, #20]
 800efbe:	1c59      	adds	r1, r3, #1
 800efc0:	6179      	str	r1, [r7, #20]
 800efc2:	7812      	ldrb	r2, [r2, #0]
 800efc4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	3b01      	subs	r3, #1
 800efca:	607b      	str	r3, [r7, #4]
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d1f1      	bne.n	800efb6 <mem_cpy+0x1a>
	}
}
 800efd2:	bf00      	nop
 800efd4:	371c      	adds	r7, #28
 800efd6:	46bd      	mov	sp, r7
 800efd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efdc:	4770      	bx	lr

0800efde <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800efde:	b480      	push	{r7}
 800efe0:	b087      	sub	sp, #28
 800efe2:	af00      	add	r7, sp, #0
 800efe4:	60f8      	str	r0, [r7, #12]
 800efe6:	60b9      	str	r1, [r7, #8]
 800efe8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800efee:	697b      	ldr	r3, [r7, #20]
 800eff0:	1c5a      	adds	r2, r3, #1
 800eff2:	617a      	str	r2, [r7, #20]
 800eff4:	68ba      	ldr	r2, [r7, #8]
 800eff6:	b2d2      	uxtb	r2, r2
 800eff8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	3b01      	subs	r3, #1
 800effe:	607b      	str	r3, [r7, #4]
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d1f3      	bne.n	800efee <mem_set+0x10>
}
 800f006:	bf00      	nop
 800f008:	bf00      	nop
 800f00a:	371c      	adds	r7, #28
 800f00c:	46bd      	mov	sp, r7
 800f00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f012:	4770      	bx	lr

0800f014 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f014:	b480      	push	{r7}
 800f016:	b089      	sub	sp, #36	@ 0x24
 800f018:	af00      	add	r7, sp, #0
 800f01a:	60f8      	str	r0, [r7, #12]
 800f01c:	60b9      	str	r1, [r7, #8]
 800f01e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	61fb      	str	r3, [r7, #28]
 800f024:	68bb      	ldr	r3, [r7, #8]
 800f026:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f028:	2300      	movs	r3, #0
 800f02a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f02c:	69fb      	ldr	r3, [r7, #28]
 800f02e:	1c5a      	adds	r2, r3, #1
 800f030:	61fa      	str	r2, [r7, #28]
 800f032:	781b      	ldrb	r3, [r3, #0]
 800f034:	4619      	mov	r1, r3
 800f036:	69bb      	ldr	r3, [r7, #24]
 800f038:	1c5a      	adds	r2, r3, #1
 800f03a:	61ba      	str	r2, [r7, #24]
 800f03c:	781b      	ldrb	r3, [r3, #0]
 800f03e:	1acb      	subs	r3, r1, r3
 800f040:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	3b01      	subs	r3, #1
 800f046:	607b      	str	r3, [r7, #4]
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d002      	beq.n	800f054 <mem_cmp+0x40>
 800f04e:	697b      	ldr	r3, [r7, #20]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d0eb      	beq.n	800f02c <mem_cmp+0x18>

	return r;
 800f054:	697b      	ldr	r3, [r7, #20]
}
 800f056:	4618      	mov	r0, r3
 800f058:	3724      	adds	r7, #36	@ 0x24
 800f05a:	46bd      	mov	sp, r7
 800f05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f060:	4770      	bx	lr

0800f062 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f062:	b480      	push	{r7}
 800f064:	b083      	sub	sp, #12
 800f066:	af00      	add	r7, sp, #0
 800f068:	6078      	str	r0, [r7, #4]
 800f06a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f06c:	e002      	b.n	800f074 <chk_chr+0x12>
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	3301      	adds	r3, #1
 800f072:	607b      	str	r3, [r7, #4]
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	781b      	ldrb	r3, [r3, #0]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d005      	beq.n	800f088 <chk_chr+0x26>
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	781b      	ldrb	r3, [r3, #0]
 800f080:	461a      	mov	r2, r3
 800f082:	683b      	ldr	r3, [r7, #0]
 800f084:	4293      	cmp	r3, r2
 800f086:	d1f2      	bne.n	800f06e <chk_chr+0xc>
	return *str;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	781b      	ldrb	r3, [r3, #0]
}
 800f08c:	4618      	mov	r0, r3
 800f08e:	370c      	adds	r7, #12
 800f090:	46bd      	mov	sp, r7
 800f092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f096:	4770      	bx	lr

0800f098 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f098:	b480      	push	{r7}
 800f09a:	b085      	sub	sp, #20
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]
 800f0a0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	60bb      	str	r3, [r7, #8]
 800f0a6:	68bb      	ldr	r3, [r7, #8]
 800f0a8:	60fb      	str	r3, [r7, #12]
 800f0aa:	e029      	b.n	800f100 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f0ac:	4a27      	ldr	r2, [pc, #156]	@ (800f14c <chk_lock+0xb4>)
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	011b      	lsls	r3, r3, #4
 800f0b2:	4413      	add	r3, r2
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d01d      	beq.n	800f0f6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f0ba:	4a24      	ldr	r2, [pc, #144]	@ (800f14c <chk_lock+0xb4>)
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	011b      	lsls	r3, r3, #4
 800f0c0:	4413      	add	r3, r2
 800f0c2:	681a      	ldr	r2, [r3, #0]
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	429a      	cmp	r2, r3
 800f0ca:	d116      	bne.n	800f0fa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f0cc:	4a1f      	ldr	r2, [pc, #124]	@ (800f14c <chk_lock+0xb4>)
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	011b      	lsls	r3, r3, #4
 800f0d2:	4413      	add	r3, r2
 800f0d4:	3304      	adds	r3, #4
 800f0d6:	681a      	ldr	r2, [r3, #0]
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f0dc:	429a      	cmp	r2, r3
 800f0de:	d10c      	bne.n	800f0fa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f0e0:	4a1a      	ldr	r2, [pc, #104]	@ (800f14c <chk_lock+0xb4>)
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	011b      	lsls	r3, r3, #4
 800f0e6:	4413      	add	r3, r2
 800f0e8:	3308      	adds	r3, #8
 800f0ea:	681a      	ldr	r2, [r3, #0]
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800f0f0:	429a      	cmp	r2, r3
 800f0f2:	d102      	bne.n	800f0fa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f0f4:	e007      	b.n	800f106 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800f0f6:	2301      	movs	r3, #1
 800f0f8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	3301      	adds	r3, #1
 800f0fe:	60fb      	str	r3, [r7, #12]
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	2b01      	cmp	r3, #1
 800f104:	d9d2      	bls.n	800f0ac <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	2b02      	cmp	r3, #2
 800f10a:	d109      	bne.n	800f120 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f10c:	68bb      	ldr	r3, [r7, #8]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d102      	bne.n	800f118 <chk_lock+0x80>
 800f112:	683b      	ldr	r3, [r7, #0]
 800f114:	2b02      	cmp	r3, #2
 800f116:	d101      	bne.n	800f11c <chk_lock+0x84>
 800f118:	2300      	movs	r3, #0
 800f11a:	e010      	b.n	800f13e <chk_lock+0xa6>
 800f11c:	2312      	movs	r3, #18
 800f11e:	e00e      	b.n	800f13e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d108      	bne.n	800f138 <chk_lock+0xa0>
 800f126:	4a09      	ldr	r2, [pc, #36]	@ (800f14c <chk_lock+0xb4>)
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	011b      	lsls	r3, r3, #4
 800f12c:	4413      	add	r3, r2
 800f12e:	330c      	adds	r3, #12
 800f130:	881b      	ldrh	r3, [r3, #0]
 800f132:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f136:	d101      	bne.n	800f13c <chk_lock+0xa4>
 800f138:	2310      	movs	r3, #16
 800f13a:	e000      	b.n	800f13e <chk_lock+0xa6>
 800f13c:	2300      	movs	r3, #0
}
 800f13e:	4618      	mov	r0, r3
 800f140:	3714      	adds	r7, #20
 800f142:	46bd      	mov	sp, r7
 800f144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f148:	4770      	bx	lr
 800f14a:	bf00      	nop
 800f14c:	24002844 	.word	0x24002844

0800f150 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800f150:	b480      	push	{r7}
 800f152:	b083      	sub	sp, #12
 800f154:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f156:	2300      	movs	r3, #0
 800f158:	607b      	str	r3, [r7, #4]
 800f15a:	e002      	b.n	800f162 <enq_lock+0x12>
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	3301      	adds	r3, #1
 800f160:	607b      	str	r3, [r7, #4]
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	2b01      	cmp	r3, #1
 800f166:	d806      	bhi.n	800f176 <enq_lock+0x26>
 800f168:	4a09      	ldr	r2, [pc, #36]	@ (800f190 <enq_lock+0x40>)
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	011b      	lsls	r3, r3, #4
 800f16e:	4413      	add	r3, r2
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d1f2      	bne.n	800f15c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	2b02      	cmp	r3, #2
 800f17a:	bf14      	ite	ne
 800f17c:	2301      	movne	r3, #1
 800f17e:	2300      	moveq	r3, #0
 800f180:	b2db      	uxtb	r3, r3
}
 800f182:	4618      	mov	r0, r3
 800f184:	370c      	adds	r7, #12
 800f186:	46bd      	mov	sp, r7
 800f188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18c:	4770      	bx	lr
 800f18e:	bf00      	nop
 800f190:	24002844 	.word	0x24002844

0800f194 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f194:	b480      	push	{r7}
 800f196:	b085      	sub	sp, #20
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
 800f19c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f19e:	2300      	movs	r3, #0
 800f1a0:	60fb      	str	r3, [r7, #12]
 800f1a2:	e01f      	b.n	800f1e4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800f1a4:	4a41      	ldr	r2, [pc, #260]	@ (800f2ac <inc_lock+0x118>)
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	011b      	lsls	r3, r3, #4
 800f1aa:	4413      	add	r3, r2
 800f1ac:	681a      	ldr	r2, [r3, #0]
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	429a      	cmp	r2, r3
 800f1b4:	d113      	bne.n	800f1de <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800f1b6:	4a3d      	ldr	r2, [pc, #244]	@ (800f2ac <inc_lock+0x118>)
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	011b      	lsls	r3, r3, #4
 800f1bc:	4413      	add	r3, r2
 800f1be:	3304      	adds	r3, #4
 800f1c0:	681a      	ldr	r2, [r3, #0]
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800f1c6:	429a      	cmp	r2, r3
 800f1c8:	d109      	bne.n	800f1de <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800f1ca:	4a38      	ldr	r2, [pc, #224]	@ (800f2ac <inc_lock+0x118>)
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	011b      	lsls	r3, r3, #4
 800f1d0:	4413      	add	r3, r2
 800f1d2:	3308      	adds	r3, #8
 800f1d4:	681a      	ldr	r2, [r3, #0]
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800f1da:	429a      	cmp	r2, r3
 800f1dc:	d006      	beq.n	800f1ec <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	3301      	adds	r3, #1
 800f1e2:	60fb      	str	r3, [r7, #12]
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	2b01      	cmp	r3, #1
 800f1e8:	d9dc      	bls.n	800f1a4 <inc_lock+0x10>
 800f1ea:	e000      	b.n	800f1ee <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800f1ec:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	2b02      	cmp	r3, #2
 800f1f2:	d132      	bne.n	800f25a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	60fb      	str	r3, [r7, #12]
 800f1f8:	e002      	b.n	800f200 <inc_lock+0x6c>
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	3301      	adds	r3, #1
 800f1fe:	60fb      	str	r3, [r7, #12]
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	2b01      	cmp	r3, #1
 800f204:	d806      	bhi.n	800f214 <inc_lock+0x80>
 800f206:	4a29      	ldr	r2, [pc, #164]	@ (800f2ac <inc_lock+0x118>)
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	011b      	lsls	r3, r3, #4
 800f20c:	4413      	add	r3, r2
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d1f2      	bne.n	800f1fa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	2b02      	cmp	r3, #2
 800f218:	d101      	bne.n	800f21e <inc_lock+0x8a>
 800f21a:	2300      	movs	r3, #0
 800f21c:	e040      	b.n	800f2a0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	681a      	ldr	r2, [r3, #0]
 800f222:	4922      	ldr	r1, [pc, #136]	@ (800f2ac <inc_lock+0x118>)
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	011b      	lsls	r3, r3, #4
 800f228:	440b      	add	r3, r1
 800f22a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	689a      	ldr	r2, [r3, #8]
 800f230:	491e      	ldr	r1, [pc, #120]	@ (800f2ac <inc_lock+0x118>)
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	011b      	lsls	r3, r3, #4
 800f236:	440b      	add	r3, r1
 800f238:	3304      	adds	r3, #4
 800f23a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	695a      	ldr	r2, [r3, #20]
 800f240:	491a      	ldr	r1, [pc, #104]	@ (800f2ac <inc_lock+0x118>)
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	011b      	lsls	r3, r3, #4
 800f246:	440b      	add	r3, r1
 800f248:	3308      	adds	r3, #8
 800f24a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800f24c:	4a17      	ldr	r2, [pc, #92]	@ (800f2ac <inc_lock+0x118>)
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	011b      	lsls	r3, r3, #4
 800f252:	4413      	add	r3, r2
 800f254:	330c      	adds	r3, #12
 800f256:	2200      	movs	r2, #0
 800f258:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f25a:	683b      	ldr	r3, [r7, #0]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d009      	beq.n	800f274 <inc_lock+0xe0>
 800f260:	4a12      	ldr	r2, [pc, #72]	@ (800f2ac <inc_lock+0x118>)
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	011b      	lsls	r3, r3, #4
 800f266:	4413      	add	r3, r2
 800f268:	330c      	adds	r3, #12
 800f26a:	881b      	ldrh	r3, [r3, #0]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d001      	beq.n	800f274 <inc_lock+0xe0>
 800f270:	2300      	movs	r3, #0
 800f272:	e015      	b.n	800f2a0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f274:	683b      	ldr	r3, [r7, #0]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d108      	bne.n	800f28c <inc_lock+0xf8>
 800f27a:	4a0c      	ldr	r2, [pc, #48]	@ (800f2ac <inc_lock+0x118>)
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	011b      	lsls	r3, r3, #4
 800f280:	4413      	add	r3, r2
 800f282:	330c      	adds	r3, #12
 800f284:	881b      	ldrh	r3, [r3, #0]
 800f286:	3301      	adds	r3, #1
 800f288:	b29a      	uxth	r2, r3
 800f28a:	e001      	b.n	800f290 <inc_lock+0xfc>
 800f28c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f290:	4906      	ldr	r1, [pc, #24]	@ (800f2ac <inc_lock+0x118>)
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	011b      	lsls	r3, r3, #4
 800f296:	440b      	add	r3, r1
 800f298:	330c      	adds	r3, #12
 800f29a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	3301      	adds	r3, #1
}
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	3714      	adds	r7, #20
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2aa:	4770      	bx	lr
 800f2ac:	24002844 	.word	0x24002844

0800f2b0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800f2b0:	b480      	push	{r7}
 800f2b2:	b085      	sub	sp, #20
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	3b01      	subs	r3, #1
 800f2bc:	607b      	str	r3, [r7, #4]
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	2b01      	cmp	r3, #1
 800f2c2:	d825      	bhi.n	800f310 <dec_lock+0x60>
		n = Files[i].ctr;
 800f2c4:	4a17      	ldr	r2, [pc, #92]	@ (800f324 <dec_lock+0x74>)
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	011b      	lsls	r3, r3, #4
 800f2ca:	4413      	add	r3, r2
 800f2cc:	330c      	adds	r3, #12
 800f2ce:	881b      	ldrh	r3, [r3, #0]
 800f2d0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f2d2:	89fb      	ldrh	r3, [r7, #14]
 800f2d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f2d8:	d101      	bne.n	800f2de <dec_lock+0x2e>
 800f2da:	2300      	movs	r3, #0
 800f2dc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800f2de:	89fb      	ldrh	r3, [r7, #14]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d002      	beq.n	800f2ea <dec_lock+0x3a>
 800f2e4:	89fb      	ldrh	r3, [r7, #14]
 800f2e6:	3b01      	subs	r3, #1
 800f2e8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800f2ea:	4a0e      	ldr	r2, [pc, #56]	@ (800f324 <dec_lock+0x74>)
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	011b      	lsls	r3, r3, #4
 800f2f0:	4413      	add	r3, r2
 800f2f2:	330c      	adds	r3, #12
 800f2f4:	89fa      	ldrh	r2, [r7, #14]
 800f2f6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f2f8:	89fb      	ldrh	r3, [r7, #14]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d105      	bne.n	800f30a <dec_lock+0x5a>
 800f2fe:	4a09      	ldr	r2, [pc, #36]	@ (800f324 <dec_lock+0x74>)
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	011b      	lsls	r3, r3, #4
 800f304:	4413      	add	r3, r2
 800f306:	2200      	movs	r2, #0
 800f308:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800f30a:	2300      	movs	r3, #0
 800f30c:	737b      	strb	r3, [r7, #13]
 800f30e:	e001      	b.n	800f314 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800f310:	2302      	movs	r3, #2
 800f312:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800f314:	7b7b      	ldrb	r3, [r7, #13]
}
 800f316:	4618      	mov	r0, r3
 800f318:	3714      	adds	r7, #20
 800f31a:	46bd      	mov	sp, r7
 800f31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f320:	4770      	bx	lr
 800f322:	bf00      	nop
 800f324:	24002844 	.word	0x24002844

0800f328 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f328:	b480      	push	{r7}
 800f32a:	b085      	sub	sp, #20
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f330:	2300      	movs	r3, #0
 800f332:	60fb      	str	r3, [r7, #12]
 800f334:	e010      	b.n	800f358 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f336:	4a0d      	ldr	r2, [pc, #52]	@ (800f36c <clear_lock+0x44>)
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	011b      	lsls	r3, r3, #4
 800f33c:	4413      	add	r3, r2
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	687a      	ldr	r2, [r7, #4]
 800f342:	429a      	cmp	r2, r3
 800f344:	d105      	bne.n	800f352 <clear_lock+0x2a>
 800f346:	4a09      	ldr	r2, [pc, #36]	@ (800f36c <clear_lock+0x44>)
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	011b      	lsls	r3, r3, #4
 800f34c:	4413      	add	r3, r2
 800f34e:	2200      	movs	r2, #0
 800f350:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	3301      	adds	r3, #1
 800f356:	60fb      	str	r3, [r7, #12]
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	2b01      	cmp	r3, #1
 800f35c:	d9eb      	bls.n	800f336 <clear_lock+0xe>
	}
}
 800f35e:	bf00      	nop
 800f360:	bf00      	nop
 800f362:	3714      	adds	r7, #20
 800f364:	46bd      	mov	sp, r7
 800f366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36a:	4770      	bx	lr
 800f36c:	24002844 	.word	0x24002844

0800f370 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f370:	b580      	push	{r7, lr}
 800f372:	b086      	sub	sp, #24
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f378:	2300      	movs	r3, #0
 800f37a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	78db      	ldrb	r3, [r3, #3]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d034      	beq.n	800f3ee <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f388:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	7858      	ldrb	r0, [r3, #1]
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f394:	2301      	movs	r3, #1
 800f396:	697a      	ldr	r2, [r7, #20]
 800f398:	f7ff fd40 	bl	800ee1c <disk_write>
 800f39c:	4603      	mov	r3, r0
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d002      	beq.n	800f3a8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800f3a2:	2301      	movs	r3, #1
 800f3a4:	73fb      	strb	r3, [r7, #15]
 800f3a6:	e022      	b.n	800f3ee <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3b2:	697a      	ldr	r2, [r7, #20]
 800f3b4:	1ad2      	subs	r2, r2, r3
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3ba:	429a      	cmp	r2, r3
 800f3bc:	d217      	bcs.n	800f3ee <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	789b      	ldrb	r3, [r3, #2]
 800f3c2:	613b      	str	r3, [r7, #16]
 800f3c4:	e010      	b.n	800f3e8 <sync_window+0x78>
					wsect += fs->fsize;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3ca:	697a      	ldr	r2, [r7, #20]
 800f3cc:	4413      	add	r3, r2
 800f3ce:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	7858      	ldrb	r0, [r3, #1]
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f3da:	2301      	movs	r3, #1
 800f3dc:	697a      	ldr	r2, [r7, #20]
 800f3de:	f7ff fd1d 	bl	800ee1c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f3e2:	693b      	ldr	r3, [r7, #16]
 800f3e4:	3b01      	subs	r3, #1
 800f3e6:	613b      	str	r3, [r7, #16]
 800f3e8:	693b      	ldr	r3, [r7, #16]
 800f3ea:	2b01      	cmp	r3, #1
 800f3ec:	d8eb      	bhi.n	800f3c6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800f3ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	3718      	adds	r7, #24
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	bd80      	pop	{r7, pc}

0800f3f8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b084      	sub	sp, #16
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	6078      	str	r0, [r7, #4]
 800f400:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800f402:	2300      	movs	r3, #0
 800f404:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f40a:	683a      	ldr	r2, [r7, #0]
 800f40c:	429a      	cmp	r2, r3
 800f40e:	d01b      	beq.n	800f448 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800f410:	6878      	ldr	r0, [r7, #4]
 800f412:	f7ff ffad 	bl	800f370 <sync_window>
 800f416:	4603      	mov	r3, r0
 800f418:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800f41a:	7bfb      	ldrb	r3, [r7, #15]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d113      	bne.n	800f448 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	7858      	ldrb	r0, [r3, #1]
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f42a:	2301      	movs	r3, #1
 800f42c:	683a      	ldr	r2, [r7, #0]
 800f42e:	f7ff fcd5 	bl	800eddc <disk_read>
 800f432:	4603      	mov	r3, r0
 800f434:	2b00      	cmp	r3, #0
 800f436:	d004      	beq.n	800f442 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800f438:	f04f 33ff 	mov.w	r3, #4294967295
 800f43c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800f43e:	2301      	movs	r3, #1
 800f440:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	683a      	ldr	r2, [r7, #0]
 800f446:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
	return res;
 800f448:	7bfb      	ldrb	r3, [r7, #15]
}
 800f44a:	4618      	mov	r0, r3
 800f44c:	3710      	adds	r7, #16
 800f44e:	46bd      	mov	sp, r7
 800f450:	bd80      	pop	{r7, pc}
	...

0800f454 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b084      	sub	sp, #16
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800f45c:	6878      	ldr	r0, [r7, #4]
 800f45e:	f7ff ff87 	bl	800f370 <sync_window>
 800f462:	4603      	mov	r3, r0
 800f464:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f466:	7bfb      	ldrb	r3, [r7, #15]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d159      	bne.n	800f520 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	781b      	ldrb	r3, [r3, #0]
 800f470:	2b03      	cmp	r3, #3
 800f472:	d149      	bne.n	800f508 <sync_fs+0xb4>
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	791b      	ldrb	r3, [r3, #4]
 800f478:	2b01      	cmp	r3, #1
 800f47a:	d145      	bne.n	800f508 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	899b      	ldrh	r3, [r3, #12]
 800f486:	461a      	mov	r2, r3
 800f488:	2100      	movs	r1, #0
 800f48a:	f7ff fda8 	bl	800efde <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	333c      	adds	r3, #60	@ 0x3c
 800f492:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f496:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800f49a:	4618      	mov	r0, r3
 800f49c:	f7ff fd37 	bl	800ef0e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	333c      	adds	r3, #60	@ 0x3c
 800f4a4:	4921      	ldr	r1, [pc, #132]	@ (800f52c <sync_fs+0xd8>)
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	f7ff fd4c 	bl	800ef44 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	333c      	adds	r3, #60	@ 0x3c
 800f4b0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800f4b4:	491e      	ldr	r1, [pc, #120]	@ (800f530 <sync_fs+0xdc>)
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	f7ff fd44 	bl	800ef44 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	333c      	adds	r3, #60	@ 0x3c
 800f4c0:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	699b      	ldr	r3, [r3, #24]
 800f4c8:	4619      	mov	r1, r3
 800f4ca:	4610      	mov	r0, r2
 800f4cc:	f7ff fd3a 	bl	800ef44 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	333c      	adds	r3, #60	@ 0x3c
 800f4d4:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	695b      	ldr	r3, [r3, #20]
 800f4dc:	4619      	mov	r1, r3
 800f4de:	4610      	mov	r0, r2
 800f4e0:	f7ff fd30 	bl	800ef44 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f4e8:	1c5a      	adds	r2, r3, #1
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	639a      	str	r2, [r3, #56]	@ 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	7858      	ldrb	r0, [r3, #1]
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f4fc:	2301      	movs	r3, #1
 800f4fe:	f7ff fc8d 	bl	800ee1c <disk_write>
			fs->fsi_flag = 0;
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	2200      	movs	r2, #0
 800f506:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	785b      	ldrb	r3, [r3, #1]
 800f50c:	2200      	movs	r2, #0
 800f50e:	2100      	movs	r1, #0
 800f510:	4618      	mov	r0, r3
 800f512:	f7ff fca3 	bl	800ee5c <disk_ioctl>
 800f516:	4603      	mov	r3, r0
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d001      	beq.n	800f520 <sync_fs+0xcc>
 800f51c:	2301      	movs	r3, #1
 800f51e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f520:	7bfb      	ldrb	r3, [r7, #15]
}
 800f522:	4618      	mov	r0, r3
 800f524:	3710      	adds	r7, #16
 800f526:	46bd      	mov	sp, r7
 800f528:	bd80      	pop	{r7, pc}
 800f52a:	bf00      	nop
 800f52c:	41615252 	.word	0x41615252
 800f530:	61417272 	.word	0x61417272

0800f534 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f534:	b480      	push	{r7}
 800f536:	b083      	sub	sp, #12
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
 800f53c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f53e:	683b      	ldr	r3, [r7, #0]
 800f540:	3b02      	subs	r3, #2
 800f542:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	6a1b      	ldr	r3, [r3, #32]
 800f548:	3b02      	subs	r3, #2
 800f54a:	683a      	ldr	r2, [r7, #0]
 800f54c:	429a      	cmp	r2, r3
 800f54e:	d301      	bcc.n	800f554 <clust2sect+0x20>
 800f550:	2300      	movs	r3, #0
 800f552:	e008      	b.n	800f566 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	895b      	ldrh	r3, [r3, #10]
 800f558:	461a      	mov	r2, r3
 800f55a:	683b      	ldr	r3, [r7, #0]
 800f55c:	fb03 f202 	mul.w	r2, r3, r2
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f564:	4413      	add	r3, r2
}
 800f566:	4618      	mov	r0, r3
 800f568:	370c      	adds	r7, #12
 800f56a:	46bd      	mov	sp, r7
 800f56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f570:	4770      	bx	lr

0800f572 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800f572:	b580      	push	{r7, lr}
 800f574:	b086      	sub	sp, #24
 800f576:	af00      	add	r7, sp, #0
 800f578:	6078      	str	r0, [r7, #4]
 800f57a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f582:	683b      	ldr	r3, [r7, #0]
 800f584:	2b01      	cmp	r3, #1
 800f586:	d904      	bls.n	800f592 <get_fat+0x20>
 800f588:	693b      	ldr	r3, [r7, #16]
 800f58a:	6a1b      	ldr	r3, [r3, #32]
 800f58c:	683a      	ldr	r2, [r7, #0]
 800f58e:	429a      	cmp	r2, r3
 800f590:	d302      	bcc.n	800f598 <get_fat+0x26>
		val = 1;	/* Internal error */
 800f592:	2301      	movs	r3, #1
 800f594:	617b      	str	r3, [r7, #20]
 800f596:	e0ba      	b.n	800f70e <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f598:	f04f 33ff 	mov.w	r3, #4294967295
 800f59c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f59e:	693b      	ldr	r3, [r7, #16]
 800f5a0:	781b      	ldrb	r3, [r3, #0]
 800f5a2:	2b03      	cmp	r3, #3
 800f5a4:	f000 8082 	beq.w	800f6ac <get_fat+0x13a>
 800f5a8:	2b03      	cmp	r3, #3
 800f5aa:	f300 80a6 	bgt.w	800f6fa <get_fat+0x188>
 800f5ae:	2b01      	cmp	r3, #1
 800f5b0:	d002      	beq.n	800f5b8 <get_fat+0x46>
 800f5b2:	2b02      	cmp	r3, #2
 800f5b4:	d055      	beq.n	800f662 <get_fat+0xf0>
 800f5b6:	e0a0      	b.n	800f6fa <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f5b8:	683b      	ldr	r3, [r7, #0]
 800f5ba:	60fb      	str	r3, [r7, #12]
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	085b      	lsrs	r3, r3, #1
 800f5c0:	68fa      	ldr	r2, [r7, #12]
 800f5c2:	4413      	add	r3, r2
 800f5c4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f5c6:	693b      	ldr	r3, [r7, #16]
 800f5c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f5ca:	693b      	ldr	r3, [r7, #16]
 800f5cc:	899b      	ldrh	r3, [r3, #12]
 800f5ce:	4619      	mov	r1, r3
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	fbb3 f3f1 	udiv	r3, r3, r1
 800f5d6:	4413      	add	r3, r2
 800f5d8:	4619      	mov	r1, r3
 800f5da:	6938      	ldr	r0, [r7, #16]
 800f5dc:	f7ff ff0c 	bl	800f3f8 <move_window>
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	f040 808c 	bne.w	800f700 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	1c5a      	adds	r2, r3, #1
 800f5ec:	60fa      	str	r2, [r7, #12]
 800f5ee:	693a      	ldr	r2, [r7, #16]
 800f5f0:	8992      	ldrh	r2, [r2, #12]
 800f5f2:	fbb3 f1f2 	udiv	r1, r3, r2
 800f5f6:	fb01 f202 	mul.w	r2, r1, r2
 800f5fa:	1a9b      	subs	r3, r3, r2
 800f5fc:	693a      	ldr	r2, [r7, #16]
 800f5fe:	4413      	add	r3, r2
 800f600:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f604:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f606:	693b      	ldr	r3, [r7, #16]
 800f608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f60a:	693b      	ldr	r3, [r7, #16]
 800f60c:	899b      	ldrh	r3, [r3, #12]
 800f60e:	4619      	mov	r1, r3
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	fbb3 f3f1 	udiv	r3, r3, r1
 800f616:	4413      	add	r3, r2
 800f618:	4619      	mov	r1, r3
 800f61a:	6938      	ldr	r0, [r7, #16]
 800f61c:	f7ff feec 	bl	800f3f8 <move_window>
 800f620:	4603      	mov	r3, r0
 800f622:	2b00      	cmp	r3, #0
 800f624:	d16e      	bne.n	800f704 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f626:	693b      	ldr	r3, [r7, #16]
 800f628:	899b      	ldrh	r3, [r3, #12]
 800f62a:	461a      	mov	r2, r3
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	fbb3 f1f2 	udiv	r1, r3, r2
 800f632:	fb01 f202 	mul.w	r2, r1, r2
 800f636:	1a9b      	subs	r3, r3, r2
 800f638:	693a      	ldr	r2, [r7, #16]
 800f63a:	4413      	add	r3, r2
 800f63c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f640:	021b      	lsls	r3, r3, #8
 800f642:	68ba      	ldr	r2, [r7, #8]
 800f644:	4313      	orrs	r3, r2
 800f646:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	f003 0301 	and.w	r3, r3, #1
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d002      	beq.n	800f658 <get_fat+0xe6>
 800f652:	68bb      	ldr	r3, [r7, #8]
 800f654:	091b      	lsrs	r3, r3, #4
 800f656:	e002      	b.n	800f65e <get_fat+0xec>
 800f658:	68bb      	ldr	r3, [r7, #8]
 800f65a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f65e:	617b      	str	r3, [r7, #20]
			break;
 800f660:	e055      	b.n	800f70e <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f662:	693b      	ldr	r3, [r7, #16]
 800f664:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f666:	693b      	ldr	r3, [r7, #16]
 800f668:	899b      	ldrh	r3, [r3, #12]
 800f66a:	085b      	lsrs	r3, r3, #1
 800f66c:	b29b      	uxth	r3, r3
 800f66e:	4619      	mov	r1, r3
 800f670:	683b      	ldr	r3, [r7, #0]
 800f672:	fbb3 f3f1 	udiv	r3, r3, r1
 800f676:	4413      	add	r3, r2
 800f678:	4619      	mov	r1, r3
 800f67a:	6938      	ldr	r0, [r7, #16]
 800f67c:	f7ff febc 	bl	800f3f8 <move_window>
 800f680:	4603      	mov	r3, r0
 800f682:	2b00      	cmp	r3, #0
 800f684:	d140      	bne.n	800f708 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f686:	693b      	ldr	r3, [r7, #16]
 800f688:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f68c:	683b      	ldr	r3, [r7, #0]
 800f68e:	005b      	lsls	r3, r3, #1
 800f690:	693a      	ldr	r2, [r7, #16]
 800f692:	8992      	ldrh	r2, [r2, #12]
 800f694:	fbb3 f0f2 	udiv	r0, r3, r2
 800f698:	fb00 f202 	mul.w	r2, r0, r2
 800f69c:	1a9b      	subs	r3, r3, r2
 800f69e:	440b      	add	r3, r1
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	f7ff fbf9 	bl	800ee98 <ld_word>
 800f6a6:	4603      	mov	r3, r0
 800f6a8:	617b      	str	r3, [r7, #20]
			break;
 800f6aa:	e030      	b.n	800f70e <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f6ac:	693b      	ldr	r3, [r7, #16]
 800f6ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f6b0:	693b      	ldr	r3, [r7, #16]
 800f6b2:	899b      	ldrh	r3, [r3, #12]
 800f6b4:	089b      	lsrs	r3, r3, #2
 800f6b6:	b29b      	uxth	r3, r3
 800f6b8:	4619      	mov	r1, r3
 800f6ba:	683b      	ldr	r3, [r7, #0]
 800f6bc:	fbb3 f3f1 	udiv	r3, r3, r1
 800f6c0:	4413      	add	r3, r2
 800f6c2:	4619      	mov	r1, r3
 800f6c4:	6938      	ldr	r0, [r7, #16]
 800f6c6:	f7ff fe97 	bl	800f3f8 <move_window>
 800f6ca:	4603      	mov	r3, r0
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d11d      	bne.n	800f70c <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f6d0:	693b      	ldr	r3, [r7, #16]
 800f6d2:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f6d6:	683b      	ldr	r3, [r7, #0]
 800f6d8:	009b      	lsls	r3, r3, #2
 800f6da:	693a      	ldr	r2, [r7, #16]
 800f6dc:	8992      	ldrh	r2, [r2, #12]
 800f6de:	fbb3 f0f2 	udiv	r0, r3, r2
 800f6e2:	fb00 f202 	mul.w	r2, r0, r2
 800f6e6:	1a9b      	subs	r3, r3, r2
 800f6e8:	440b      	add	r3, r1
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	f7ff fbec 	bl	800eec8 <ld_dword>
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800f6f6:	617b      	str	r3, [r7, #20]
			break;
 800f6f8:	e009      	b.n	800f70e <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f6fa:	2301      	movs	r3, #1
 800f6fc:	617b      	str	r3, [r7, #20]
 800f6fe:	e006      	b.n	800f70e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f700:	bf00      	nop
 800f702:	e004      	b.n	800f70e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f704:	bf00      	nop
 800f706:	e002      	b.n	800f70e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f708:	bf00      	nop
 800f70a:	e000      	b.n	800f70e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f70c:	bf00      	nop
		}
	}

	return val;
 800f70e:	697b      	ldr	r3, [r7, #20]
}
 800f710:	4618      	mov	r0, r3
 800f712:	3718      	adds	r7, #24
 800f714:	46bd      	mov	sp, r7
 800f716:	bd80      	pop	{r7, pc}

0800f718 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f718:	b590      	push	{r4, r7, lr}
 800f71a:	b089      	sub	sp, #36	@ 0x24
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	60f8      	str	r0, [r7, #12]
 800f720:	60b9      	str	r1, [r7, #8]
 800f722:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f724:	2302      	movs	r3, #2
 800f726:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f728:	68bb      	ldr	r3, [r7, #8]
 800f72a:	2b01      	cmp	r3, #1
 800f72c:	f240 8109 	bls.w	800f942 <put_fat+0x22a>
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	6a1b      	ldr	r3, [r3, #32]
 800f734:	68ba      	ldr	r2, [r7, #8]
 800f736:	429a      	cmp	r2, r3
 800f738:	f080 8103 	bcs.w	800f942 <put_fat+0x22a>
		switch (fs->fs_type) {
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	781b      	ldrb	r3, [r3, #0]
 800f740:	2b03      	cmp	r3, #3
 800f742:	f000 80b6 	beq.w	800f8b2 <put_fat+0x19a>
 800f746:	2b03      	cmp	r3, #3
 800f748:	f300 80fb 	bgt.w	800f942 <put_fat+0x22a>
 800f74c:	2b01      	cmp	r3, #1
 800f74e:	d003      	beq.n	800f758 <put_fat+0x40>
 800f750:	2b02      	cmp	r3, #2
 800f752:	f000 8083 	beq.w	800f85c <put_fat+0x144>
 800f756:	e0f4      	b.n	800f942 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f758:	68bb      	ldr	r3, [r7, #8]
 800f75a:	61bb      	str	r3, [r7, #24]
 800f75c:	69bb      	ldr	r3, [r7, #24]
 800f75e:	085b      	lsrs	r3, r3, #1
 800f760:	69ba      	ldr	r2, [r7, #24]
 800f762:	4413      	add	r3, r2
 800f764:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	899b      	ldrh	r3, [r3, #12]
 800f76e:	4619      	mov	r1, r3
 800f770:	69bb      	ldr	r3, [r7, #24]
 800f772:	fbb3 f3f1 	udiv	r3, r3, r1
 800f776:	4413      	add	r3, r2
 800f778:	4619      	mov	r1, r3
 800f77a:	68f8      	ldr	r0, [r7, #12]
 800f77c:	f7ff fe3c 	bl	800f3f8 <move_window>
 800f780:	4603      	mov	r3, r0
 800f782:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f784:	7ffb      	ldrb	r3, [r7, #31]
 800f786:	2b00      	cmp	r3, #0
 800f788:	f040 80d4 	bne.w	800f934 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f792:	69bb      	ldr	r3, [r7, #24]
 800f794:	1c5a      	adds	r2, r3, #1
 800f796:	61ba      	str	r2, [r7, #24]
 800f798:	68fa      	ldr	r2, [r7, #12]
 800f79a:	8992      	ldrh	r2, [r2, #12]
 800f79c:	fbb3 f0f2 	udiv	r0, r3, r2
 800f7a0:	fb00 f202 	mul.w	r2, r0, r2
 800f7a4:	1a9b      	subs	r3, r3, r2
 800f7a6:	440b      	add	r3, r1
 800f7a8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f7aa:	68bb      	ldr	r3, [r7, #8]
 800f7ac:	f003 0301 	and.w	r3, r3, #1
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d00d      	beq.n	800f7d0 <put_fat+0xb8>
 800f7b4:	697b      	ldr	r3, [r7, #20]
 800f7b6:	781b      	ldrb	r3, [r3, #0]
 800f7b8:	b25b      	sxtb	r3, r3
 800f7ba:	f003 030f 	and.w	r3, r3, #15
 800f7be:	b25a      	sxtb	r2, r3
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	b2db      	uxtb	r3, r3
 800f7c4:	011b      	lsls	r3, r3, #4
 800f7c6:	b25b      	sxtb	r3, r3
 800f7c8:	4313      	orrs	r3, r2
 800f7ca:	b25b      	sxtb	r3, r3
 800f7cc:	b2db      	uxtb	r3, r3
 800f7ce:	e001      	b.n	800f7d4 <put_fat+0xbc>
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	b2db      	uxtb	r3, r3
 800f7d4:	697a      	ldr	r2, [r7, #20]
 800f7d6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	2201      	movs	r2, #1
 800f7dc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	899b      	ldrh	r3, [r3, #12]
 800f7e6:	4619      	mov	r1, r3
 800f7e8:	69bb      	ldr	r3, [r7, #24]
 800f7ea:	fbb3 f3f1 	udiv	r3, r3, r1
 800f7ee:	4413      	add	r3, r2
 800f7f0:	4619      	mov	r1, r3
 800f7f2:	68f8      	ldr	r0, [r7, #12]
 800f7f4:	f7ff fe00 	bl	800f3f8 <move_window>
 800f7f8:	4603      	mov	r3, r0
 800f7fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f7fc:	7ffb      	ldrb	r3, [r7, #31]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	f040 809a 	bne.w	800f938 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	899b      	ldrh	r3, [r3, #12]
 800f80e:	461a      	mov	r2, r3
 800f810:	69bb      	ldr	r3, [r7, #24]
 800f812:	fbb3 f0f2 	udiv	r0, r3, r2
 800f816:	fb00 f202 	mul.w	r2, r0, r2
 800f81a:	1a9b      	subs	r3, r3, r2
 800f81c:	440b      	add	r3, r1
 800f81e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f820:	68bb      	ldr	r3, [r7, #8]
 800f822:	f003 0301 	and.w	r3, r3, #1
 800f826:	2b00      	cmp	r3, #0
 800f828:	d003      	beq.n	800f832 <put_fat+0x11a>
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	091b      	lsrs	r3, r3, #4
 800f82e:	b2db      	uxtb	r3, r3
 800f830:	e00e      	b.n	800f850 <put_fat+0x138>
 800f832:	697b      	ldr	r3, [r7, #20]
 800f834:	781b      	ldrb	r3, [r3, #0]
 800f836:	b25b      	sxtb	r3, r3
 800f838:	f023 030f 	bic.w	r3, r3, #15
 800f83c:	b25a      	sxtb	r2, r3
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	0a1b      	lsrs	r3, r3, #8
 800f842:	b25b      	sxtb	r3, r3
 800f844:	f003 030f 	and.w	r3, r3, #15
 800f848:	b25b      	sxtb	r3, r3
 800f84a:	4313      	orrs	r3, r2
 800f84c:	b25b      	sxtb	r3, r3
 800f84e:	b2db      	uxtb	r3, r3
 800f850:	697a      	ldr	r2, [r7, #20]
 800f852:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	2201      	movs	r2, #1
 800f858:	70da      	strb	r2, [r3, #3]
			break;
 800f85a:	e072      	b.n	800f942 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	899b      	ldrh	r3, [r3, #12]
 800f864:	085b      	lsrs	r3, r3, #1
 800f866:	b29b      	uxth	r3, r3
 800f868:	4619      	mov	r1, r3
 800f86a:	68bb      	ldr	r3, [r7, #8]
 800f86c:	fbb3 f3f1 	udiv	r3, r3, r1
 800f870:	4413      	add	r3, r2
 800f872:	4619      	mov	r1, r3
 800f874:	68f8      	ldr	r0, [r7, #12]
 800f876:	f7ff fdbf 	bl	800f3f8 <move_window>
 800f87a:	4603      	mov	r3, r0
 800f87c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f87e:	7ffb      	ldrb	r3, [r7, #31]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d15b      	bne.n	800f93c <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f88a:	68bb      	ldr	r3, [r7, #8]
 800f88c:	005b      	lsls	r3, r3, #1
 800f88e:	68fa      	ldr	r2, [r7, #12]
 800f890:	8992      	ldrh	r2, [r2, #12]
 800f892:	fbb3 f0f2 	udiv	r0, r3, r2
 800f896:	fb00 f202 	mul.w	r2, r0, r2
 800f89a:	1a9b      	subs	r3, r3, r2
 800f89c:	440b      	add	r3, r1
 800f89e:	687a      	ldr	r2, [r7, #4]
 800f8a0:	b292      	uxth	r2, r2
 800f8a2:	4611      	mov	r1, r2
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	f7ff fb32 	bl	800ef0e <st_word>
			fs->wflag = 1;
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	2201      	movs	r2, #1
 800f8ae:	70da      	strb	r2, [r3, #3]
			break;
 800f8b0:	e047      	b.n	800f942 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	899b      	ldrh	r3, [r3, #12]
 800f8ba:	089b      	lsrs	r3, r3, #2
 800f8bc:	b29b      	uxth	r3, r3
 800f8be:	4619      	mov	r1, r3
 800f8c0:	68bb      	ldr	r3, [r7, #8]
 800f8c2:	fbb3 f3f1 	udiv	r3, r3, r1
 800f8c6:	4413      	add	r3, r2
 800f8c8:	4619      	mov	r1, r3
 800f8ca:	68f8      	ldr	r0, [r7, #12]
 800f8cc:	f7ff fd94 	bl	800f3f8 <move_window>
 800f8d0:	4603      	mov	r3, r0
 800f8d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f8d4:	7ffb      	ldrb	r3, [r7, #31]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d132      	bne.n	800f940 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f8e6:	68bb      	ldr	r3, [r7, #8]
 800f8e8:	009b      	lsls	r3, r3, #2
 800f8ea:	68fa      	ldr	r2, [r7, #12]
 800f8ec:	8992      	ldrh	r2, [r2, #12]
 800f8ee:	fbb3 f0f2 	udiv	r0, r3, r2
 800f8f2:	fb00 f202 	mul.w	r2, r0, r2
 800f8f6:	1a9b      	subs	r3, r3, r2
 800f8f8:	440b      	add	r3, r1
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	f7ff fae4 	bl	800eec8 <ld_dword>
 800f900:	4603      	mov	r3, r0
 800f902:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800f906:	4323      	orrs	r3, r4
 800f908:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f910:	68bb      	ldr	r3, [r7, #8]
 800f912:	009b      	lsls	r3, r3, #2
 800f914:	68fa      	ldr	r2, [r7, #12]
 800f916:	8992      	ldrh	r2, [r2, #12]
 800f918:	fbb3 f0f2 	udiv	r0, r3, r2
 800f91c:	fb00 f202 	mul.w	r2, r0, r2
 800f920:	1a9b      	subs	r3, r3, r2
 800f922:	440b      	add	r3, r1
 800f924:	6879      	ldr	r1, [r7, #4]
 800f926:	4618      	mov	r0, r3
 800f928:	f7ff fb0c 	bl	800ef44 <st_dword>
			fs->wflag = 1;
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	2201      	movs	r2, #1
 800f930:	70da      	strb	r2, [r3, #3]
			break;
 800f932:	e006      	b.n	800f942 <put_fat+0x22a>
			if (res != FR_OK) break;
 800f934:	bf00      	nop
 800f936:	e004      	b.n	800f942 <put_fat+0x22a>
			if (res != FR_OK) break;
 800f938:	bf00      	nop
 800f93a:	e002      	b.n	800f942 <put_fat+0x22a>
			if (res != FR_OK) break;
 800f93c:	bf00      	nop
 800f93e:	e000      	b.n	800f942 <put_fat+0x22a>
			if (res != FR_OK) break;
 800f940:	bf00      	nop
		}
	}
	return res;
 800f942:	7ffb      	ldrb	r3, [r7, #31]
}
 800f944:	4618      	mov	r0, r3
 800f946:	3724      	adds	r7, #36	@ 0x24
 800f948:	46bd      	mov	sp, r7
 800f94a:	bd90      	pop	{r4, r7, pc}

0800f94c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b088      	sub	sp, #32
 800f950:	af00      	add	r7, sp, #0
 800f952:	60f8      	str	r0, [r7, #12]
 800f954:	60b9      	str	r1, [r7, #8]
 800f956:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f958:	2300      	movs	r3, #0
 800f95a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f962:	68bb      	ldr	r3, [r7, #8]
 800f964:	2b01      	cmp	r3, #1
 800f966:	d904      	bls.n	800f972 <remove_chain+0x26>
 800f968:	69bb      	ldr	r3, [r7, #24]
 800f96a:	6a1b      	ldr	r3, [r3, #32]
 800f96c:	68ba      	ldr	r2, [r7, #8]
 800f96e:	429a      	cmp	r2, r3
 800f970:	d301      	bcc.n	800f976 <remove_chain+0x2a>
 800f972:	2302      	movs	r3, #2
 800f974:	e04b      	b.n	800fa0e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d00c      	beq.n	800f996 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f97c:	f04f 32ff 	mov.w	r2, #4294967295
 800f980:	6879      	ldr	r1, [r7, #4]
 800f982:	69b8      	ldr	r0, [r7, #24]
 800f984:	f7ff fec8 	bl	800f718 <put_fat>
 800f988:	4603      	mov	r3, r0
 800f98a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f98c:	7ffb      	ldrb	r3, [r7, #31]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d001      	beq.n	800f996 <remove_chain+0x4a>
 800f992:	7ffb      	ldrb	r3, [r7, #31]
 800f994:	e03b      	b.n	800fa0e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f996:	68b9      	ldr	r1, [r7, #8]
 800f998:	68f8      	ldr	r0, [r7, #12]
 800f99a:	f7ff fdea 	bl	800f572 <get_fat>
 800f99e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f9a0:	697b      	ldr	r3, [r7, #20]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d031      	beq.n	800fa0a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f9a6:	697b      	ldr	r3, [r7, #20]
 800f9a8:	2b01      	cmp	r3, #1
 800f9aa:	d101      	bne.n	800f9b0 <remove_chain+0x64>
 800f9ac:	2302      	movs	r3, #2
 800f9ae:	e02e      	b.n	800fa0e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f9b0:	697b      	ldr	r3, [r7, #20]
 800f9b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9b6:	d101      	bne.n	800f9bc <remove_chain+0x70>
 800f9b8:	2301      	movs	r3, #1
 800f9ba:	e028      	b.n	800fa0e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f9bc:	2200      	movs	r2, #0
 800f9be:	68b9      	ldr	r1, [r7, #8]
 800f9c0:	69b8      	ldr	r0, [r7, #24]
 800f9c2:	f7ff fea9 	bl	800f718 <put_fat>
 800f9c6:	4603      	mov	r3, r0
 800f9c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f9ca:	7ffb      	ldrb	r3, [r7, #31]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d001      	beq.n	800f9d4 <remove_chain+0x88>
 800f9d0:	7ffb      	ldrb	r3, [r7, #31]
 800f9d2:	e01c      	b.n	800fa0e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f9d4:	69bb      	ldr	r3, [r7, #24]
 800f9d6:	699a      	ldr	r2, [r3, #24]
 800f9d8:	69bb      	ldr	r3, [r7, #24]
 800f9da:	6a1b      	ldr	r3, [r3, #32]
 800f9dc:	3b02      	subs	r3, #2
 800f9de:	429a      	cmp	r2, r3
 800f9e0:	d20b      	bcs.n	800f9fa <remove_chain+0xae>
			fs->free_clst++;
 800f9e2:	69bb      	ldr	r3, [r7, #24]
 800f9e4:	699b      	ldr	r3, [r3, #24]
 800f9e6:	1c5a      	adds	r2, r3, #1
 800f9e8:	69bb      	ldr	r3, [r7, #24]
 800f9ea:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800f9ec:	69bb      	ldr	r3, [r7, #24]
 800f9ee:	791b      	ldrb	r3, [r3, #4]
 800f9f0:	f043 0301 	orr.w	r3, r3, #1
 800f9f4:	b2da      	uxtb	r2, r3
 800f9f6:	69bb      	ldr	r3, [r7, #24]
 800f9f8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f9fa:	697b      	ldr	r3, [r7, #20]
 800f9fc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f9fe:	69bb      	ldr	r3, [r7, #24]
 800fa00:	6a1b      	ldr	r3, [r3, #32]
 800fa02:	68ba      	ldr	r2, [r7, #8]
 800fa04:	429a      	cmp	r2, r3
 800fa06:	d3c6      	bcc.n	800f996 <remove_chain+0x4a>
 800fa08:	e000      	b.n	800fa0c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800fa0a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800fa0c:	2300      	movs	r3, #0
}
 800fa0e:	4618      	mov	r0, r3
 800fa10:	3720      	adds	r7, #32
 800fa12:	46bd      	mov	sp, r7
 800fa14:	bd80      	pop	{r7, pc}

0800fa16 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800fa16:	b580      	push	{r7, lr}
 800fa18:	b088      	sub	sp, #32
 800fa1a:	af00      	add	r7, sp, #0
 800fa1c:	6078      	str	r0, [r7, #4]
 800fa1e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800fa26:	683b      	ldr	r3, [r7, #0]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d10d      	bne.n	800fa48 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800fa2c:	693b      	ldr	r3, [r7, #16]
 800fa2e:	695b      	ldr	r3, [r3, #20]
 800fa30:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800fa32:	69bb      	ldr	r3, [r7, #24]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d004      	beq.n	800fa42 <create_chain+0x2c>
 800fa38:	693b      	ldr	r3, [r7, #16]
 800fa3a:	6a1b      	ldr	r3, [r3, #32]
 800fa3c:	69ba      	ldr	r2, [r7, #24]
 800fa3e:	429a      	cmp	r2, r3
 800fa40:	d31b      	bcc.n	800fa7a <create_chain+0x64>
 800fa42:	2301      	movs	r3, #1
 800fa44:	61bb      	str	r3, [r7, #24]
 800fa46:	e018      	b.n	800fa7a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800fa48:	6839      	ldr	r1, [r7, #0]
 800fa4a:	6878      	ldr	r0, [r7, #4]
 800fa4c:	f7ff fd91 	bl	800f572 <get_fat>
 800fa50:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	2b01      	cmp	r3, #1
 800fa56:	d801      	bhi.n	800fa5c <create_chain+0x46>
 800fa58:	2301      	movs	r3, #1
 800fa5a:	e070      	b.n	800fb3e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa62:	d101      	bne.n	800fa68 <create_chain+0x52>
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	e06a      	b.n	800fb3e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800fa68:	693b      	ldr	r3, [r7, #16]
 800fa6a:	6a1b      	ldr	r3, [r3, #32]
 800fa6c:	68fa      	ldr	r2, [r7, #12]
 800fa6e:	429a      	cmp	r2, r3
 800fa70:	d201      	bcs.n	800fa76 <create_chain+0x60>
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	e063      	b.n	800fb3e <create_chain+0x128>
		scl = clst;
 800fa76:	683b      	ldr	r3, [r7, #0]
 800fa78:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800fa7a:	69bb      	ldr	r3, [r7, #24]
 800fa7c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800fa7e:	69fb      	ldr	r3, [r7, #28]
 800fa80:	3301      	adds	r3, #1
 800fa82:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800fa84:	693b      	ldr	r3, [r7, #16]
 800fa86:	6a1b      	ldr	r3, [r3, #32]
 800fa88:	69fa      	ldr	r2, [r7, #28]
 800fa8a:	429a      	cmp	r2, r3
 800fa8c:	d307      	bcc.n	800fa9e <create_chain+0x88>
				ncl = 2;
 800fa8e:	2302      	movs	r3, #2
 800fa90:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800fa92:	69fa      	ldr	r2, [r7, #28]
 800fa94:	69bb      	ldr	r3, [r7, #24]
 800fa96:	429a      	cmp	r2, r3
 800fa98:	d901      	bls.n	800fa9e <create_chain+0x88>
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	e04f      	b.n	800fb3e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800fa9e:	69f9      	ldr	r1, [r7, #28]
 800faa0:	6878      	ldr	r0, [r7, #4]
 800faa2:	f7ff fd66 	bl	800f572 <get_fat>
 800faa6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d00e      	beq.n	800facc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	2b01      	cmp	r3, #1
 800fab2:	d003      	beq.n	800fabc <create_chain+0xa6>
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800faba:	d101      	bne.n	800fac0 <create_chain+0xaa>
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	e03e      	b.n	800fb3e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800fac0:	69fa      	ldr	r2, [r7, #28]
 800fac2:	69bb      	ldr	r3, [r7, #24]
 800fac4:	429a      	cmp	r2, r3
 800fac6:	d1da      	bne.n	800fa7e <create_chain+0x68>
 800fac8:	2300      	movs	r3, #0
 800faca:	e038      	b.n	800fb3e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800facc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800face:	f04f 32ff 	mov.w	r2, #4294967295
 800fad2:	69f9      	ldr	r1, [r7, #28]
 800fad4:	6938      	ldr	r0, [r7, #16]
 800fad6:	f7ff fe1f 	bl	800f718 <put_fat>
 800fada:	4603      	mov	r3, r0
 800fadc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800fade:	7dfb      	ldrb	r3, [r7, #23]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d109      	bne.n	800faf8 <create_chain+0xe2>
 800fae4:	683b      	ldr	r3, [r7, #0]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d006      	beq.n	800faf8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800faea:	69fa      	ldr	r2, [r7, #28]
 800faec:	6839      	ldr	r1, [r7, #0]
 800faee:	6938      	ldr	r0, [r7, #16]
 800faf0:	f7ff fe12 	bl	800f718 <put_fat>
 800faf4:	4603      	mov	r3, r0
 800faf6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800faf8:	7dfb      	ldrb	r3, [r7, #23]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d116      	bne.n	800fb2c <create_chain+0x116>
		fs->last_clst = ncl;
 800fafe:	693b      	ldr	r3, [r7, #16]
 800fb00:	69fa      	ldr	r2, [r7, #28]
 800fb02:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800fb04:	693b      	ldr	r3, [r7, #16]
 800fb06:	699a      	ldr	r2, [r3, #24]
 800fb08:	693b      	ldr	r3, [r7, #16]
 800fb0a:	6a1b      	ldr	r3, [r3, #32]
 800fb0c:	3b02      	subs	r3, #2
 800fb0e:	429a      	cmp	r2, r3
 800fb10:	d804      	bhi.n	800fb1c <create_chain+0x106>
 800fb12:	693b      	ldr	r3, [r7, #16]
 800fb14:	699b      	ldr	r3, [r3, #24]
 800fb16:	1e5a      	subs	r2, r3, #1
 800fb18:	693b      	ldr	r3, [r7, #16]
 800fb1a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800fb1c:	693b      	ldr	r3, [r7, #16]
 800fb1e:	791b      	ldrb	r3, [r3, #4]
 800fb20:	f043 0301 	orr.w	r3, r3, #1
 800fb24:	b2da      	uxtb	r2, r3
 800fb26:	693b      	ldr	r3, [r7, #16]
 800fb28:	711a      	strb	r2, [r3, #4]
 800fb2a:	e007      	b.n	800fb3c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800fb2c:	7dfb      	ldrb	r3, [r7, #23]
 800fb2e:	2b01      	cmp	r3, #1
 800fb30:	d102      	bne.n	800fb38 <create_chain+0x122>
 800fb32:	f04f 33ff 	mov.w	r3, #4294967295
 800fb36:	e000      	b.n	800fb3a <create_chain+0x124>
 800fb38:	2301      	movs	r3, #1
 800fb3a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800fb3c:	69fb      	ldr	r3, [r7, #28]
}
 800fb3e:	4618      	mov	r0, r3
 800fb40:	3720      	adds	r7, #32
 800fb42:	46bd      	mov	sp, r7
 800fb44:	bd80      	pop	{r7, pc}

0800fb46 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800fb46:	b480      	push	{r7}
 800fb48:	b087      	sub	sp, #28
 800fb4a:	af00      	add	r7, sp, #0
 800fb4c:	6078      	str	r0, [r7, #4]
 800fb4e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb5a:	3304      	adds	r3, #4
 800fb5c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	899b      	ldrh	r3, [r3, #12]
 800fb62:	461a      	mov	r2, r3
 800fb64:	683b      	ldr	r3, [r7, #0]
 800fb66:	fbb3 f3f2 	udiv	r3, r3, r2
 800fb6a:	68fa      	ldr	r2, [r7, #12]
 800fb6c:	8952      	ldrh	r2, [r2, #10]
 800fb6e:	fbb3 f3f2 	udiv	r3, r3, r2
 800fb72:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800fb74:	693b      	ldr	r3, [r7, #16]
 800fb76:	1d1a      	adds	r2, r3, #4
 800fb78:	613a      	str	r2, [r7, #16]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800fb7e:	68bb      	ldr	r3, [r7, #8]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d101      	bne.n	800fb88 <clmt_clust+0x42>
 800fb84:	2300      	movs	r3, #0
 800fb86:	e010      	b.n	800fbaa <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800fb88:	697a      	ldr	r2, [r7, #20]
 800fb8a:	68bb      	ldr	r3, [r7, #8]
 800fb8c:	429a      	cmp	r2, r3
 800fb8e:	d307      	bcc.n	800fba0 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800fb90:	697a      	ldr	r2, [r7, #20]
 800fb92:	68bb      	ldr	r3, [r7, #8]
 800fb94:	1ad3      	subs	r3, r2, r3
 800fb96:	617b      	str	r3, [r7, #20]
 800fb98:	693b      	ldr	r3, [r7, #16]
 800fb9a:	3304      	adds	r3, #4
 800fb9c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800fb9e:	e7e9      	b.n	800fb74 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800fba0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800fba2:	693b      	ldr	r3, [r7, #16]
 800fba4:	681a      	ldr	r2, [r3, #0]
 800fba6:	697b      	ldr	r3, [r7, #20]
 800fba8:	4413      	add	r3, r2
}
 800fbaa:	4618      	mov	r0, r3
 800fbac:	371c      	adds	r7, #28
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb4:	4770      	bx	lr

0800fbb6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800fbb6:	b580      	push	{r7, lr}
 800fbb8:	b086      	sub	sp, #24
 800fbba:	af00      	add	r7, sp, #0
 800fbbc:	6078      	str	r0, [r7, #4]
 800fbbe:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800fbc6:	683b      	ldr	r3, [r7, #0]
 800fbc8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800fbcc:	d204      	bcs.n	800fbd8 <dir_sdi+0x22>
 800fbce:	683b      	ldr	r3, [r7, #0]
 800fbd0:	f003 031f 	and.w	r3, r3, #31
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d001      	beq.n	800fbdc <dir_sdi+0x26>
		return FR_INT_ERR;
 800fbd8:	2302      	movs	r3, #2
 800fbda:	e071      	b.n	800fcc0 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	683a      	ldr	r2, [r7, #0]
 800fbe0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	689b      	ldr	r3, [r3, #8]
 800fbe6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800fbe8:	697b      	ldr	r3, [r7, #20]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d106      	bne.n	800fbfc <dir_sdi+0x46>
 800fbee:	693b      	ldr	r3, [r7, #16]
 800fbf0:	781b      	ldrb	r3, [r3, #0]
 800fbf2:	2b02      	cmp	r3, #2
 800fbf4:	d902      	bls.n	800fbfc <dir_sdi+0x46>
		clst = fs->dirbase;
 800fbf6:	693b      	ldr	r3, [r7, #16]
 800fbf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fbfa:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800fbfc:	697b      	ldr	r3, [r7, #20]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d10c      	bne.n	800fc1c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800fc02:	683b      	ldr	r3, [r7, #0]
 800fc04:	095b      	lsrs	r3, r3, #5
 800fc06:	693a      	ldr	r2, [r7, #16]
 800fc08:	8912      	ldrh	r2, [r2, #8]
 800fc0a:	4293      	cmp	r3, r2
 800fc0c:	d301      	bcc.n	800fc12 <dir_sdi+0x5c>
 800fc0e:	2302      	movs	r3, #2
 800fc10:	e056      	b.n	800fcc0 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800fc12:	693b      	ldr	r3, [r7, #16]
 800fc14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	61da      	str	r2, [r3, #28]
 800fc1a:	e02d      	b.n	800fc78 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800fc1c:	693b      	ldr	r3, [r7, #16]
 800fc1e:	895b      	ldrh	r3, [r3, #10]
 800fc20:	461a      	mov	r2, r3
 800fc22:	693b      	ldr	r3, [r7, #16]
 800fc24:	899b      	ldrh	r3, [r3, #12]
 800fc26:	fb02 f303 	mul.w	r3, r2, r3
 800fc2a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800fc2c:	e019      	b.n	800fc62 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	6979      	ldr	r1, [r7, #20]
 800fc32:	4618      	mov	r0, r3
 800fc34:	f7ff fc9d 	bl	800f572 <get_fat>
 800fc38:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800fc3a:	697b      	ldr	r3, [r7, #20]
 800fc3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc40:	d101      	bne.n	800fc46 <dir_sdi+0x90>
 800fc42:	2301      	movs	r3, #1
 800fc44:	e03c      	b.n	800fcc0 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800fc46:	697b      	ldr	r3, [r7, #20]
 800fc48:	2b01      	cmp	r3, #1
 800fc4a:	d904      	bls.n	800fc56 <dir_sdi+0xa0>
 800fc4c:	693b      	ldr	r3, [r7, #16]
 800fc4e:	6a1b      	ldr	r3, [r3, #32]
 800fc50:	697a      	ldr	r2, [r7, #20]
 800fc52:	429a      	cmp	r2, r3
 800fc54:	d301      	bcc.n	800fc5a <dir_sdi+0xa4>
 800fc56:	2302      	movs	r3, #2
 800fc58:	e032      	b.n	800fcc0 <dir_sdi+0x10a>
			ofs -= csz;
 800fc5a:	683a      	ldr	r2, [r7, #0]
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	1ad3      	subs	r3, r2, r3
 800fc60:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800fc62:	683a      	ldr	r2, [r7, #0]
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	429a      	cmp	r2, r3
 800fc68:	d2e1      	bcs.n	800fc2e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800fc6a:	6979      	ldr	r1, [r7, #20]
 800fc6c:	6938      	ldr	r0, [r7, #16]
 800fc6e:	f7ff fc61 	bl	800f534 <clust2sect>
 800fc72:	4602      	mov	r2, r0
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	697a      	ldr	r2, [r7, #20]
 800fc7c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	69db      	ldr	r3, [r3, #28]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d101      	bne.n	800fc8a <dir_sdi+0xd4>
 800fc86:	2302      	movs	r3, #2
 800fc88:	e01a      	b.n	800fcc0 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	69da      	ldr	r2, [r3, #28]
 800fc8e:	693b      	ldr	r3, [r7, #16]
 800fc90:	899b      	ldrh	r3, [r3, #12]
 800fc92:	4619      	mov	r1, r3
 800fc94:	683b      	ldr	r3, [r7, #0]
 800fc96:	fbb3 f3f1 	udiv	r3, r3, r1
 800fc9a:	441a      	add	r2, r3
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800fca0:	693b      	ldr	r3, [r7, #16]
 800fca2:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800fca6:	693b      	ldr	r3, [r7, #16]
 800fca8:	899b      	ldrh	r3, [r3, #12]
 800fcaa:	461a      	mov	r2, r3
 800fcac:	683b      	ldr	r3, [r7, #0]
 800fcae:	fbb3 f0f2 	udiv	r0, r3, r2
 800fcb2:	fb00 f202 	mul.w	r2, r0, r2
 800fcb6:	1a9b      	subs	r3, r3, r2
 800fcb8:	18ca      	adds	r2, r1, r3
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800fcbe:	2300      	movs	r3, #0
}
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	3718      	adds	r7, #24
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	bd80      	pop	{r7, pc}

0800fcc8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	b086      	sub	sp, #24
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
 800fcd0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	695b      	ldr	r3, [r3, #20]
 800fcdc:	3320      	adds	r3, #32
 800fcde:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	69db      	ldr	r3, [r3, #28]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d003      	beq.n	800fcf0 <dir_next+0x28>
 800fce8:	68bb      	ldr	r3, [r7, #8]
 800fcea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800fcee:	d301      	bcc.n	800fcf4 <dir_next+0x2c>
 800fcf0:	2304      	movs	r3, #4
 800fcf2:	e0bb      	b.n	800fe6c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	899b      	ldrh	r3, [r3, #12]
 800fcf8:	461a      	mov	r2, r3
 800fcfa:	68bb      	ldr	r3, [r7, #8]
 800fcfc:	fbb3 f1f2 	udiv	r1, r3, r2
 800fd00:	fb01 f202 	mul.w	r2, r1, r2
 800fd04:	1a9b      	subs	r3, r3, r2
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	f040 809d 	bne.w	800fe46 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	69db      	ldr	r3, [r3, #28]
 800fd10:	1c5a      	adds	r2, r3, #1
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	699b      	ldr	r3, [r3, #24]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d10b      	bne.n	800fd36 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800fd1e:	68bb      	ldr	r3, [r7, #8]
 800fd20:	095b      	lsrs	r3, r3, #5
 800fd22:	68fa      	ldr	r2, [r7, #12]
 800fd24:	8912      	ldrh	r2, [r2, #8]
 800fd26:	4293      	cmp	r3, r2
 800fd28:	f0c0 808d 	bcc.w	800fe46 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	2200      	movs	r2, #0
 800fd30:	61da      	str	r2, [r3, #28]
 800fd32:	2304      	movs	r3, #4
 800fd34:	e09a      	b.n	800fe6c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	899b      	ldrh	r3, [r3, #12]
 800fd3a:	461a      	mov	r2, r3
 800fd3c:	68bb      	ldr	r3, [r7, #8]
 800fd3e:	fbb3 f3f2 	udiv	r3, r3, r2
 800fd42:	68fa      	ldr	r2, [r7, #12]
 800fd44:	8952      	ldrh	r2, [r2, #10]
 800fd46:	3a01      	subs	r2, #1
 800fd48:	4013      	ands	r3, r2
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d17b      	bne.n	800fe46 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800fd4e:	687a      	ldr	r2, [r7, #4]
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	699b      	ldr	r3, [r3, #24]
 800fd54:	4619      	mov	r1, r3
 800fd56:	4610      	mov	r0, r2
 800fd58:	f7ff fc0b 	bl	800f572 <get_fat>
 800fd5c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800fd5e:	697b      	ldr	r3, [r7, #20]
 800fd60:	2b01      	cmp	r3, #1
 800fd62:	d801      	bhi.n	800fd68 <dir_next+0xa0>
 800fd64:	2302      	movs	r3, #2
 800fd66:	e081      	b.n	800fe6c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800fd68:	697b      	ldr	r3, [r7, #20]
 800fd6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd6e:	d101      	bne.n	800fd74 <dir_next+0xac>
 800fd70:	2301      	movs	r3, #1
 800fd72:	e07b      	b.n	800fe6c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	6a1b      	ldr	r3, [r3, #32]
 800fd78:	697a      	ldr	r2, [r7, #20]
 800fd7a:	429a      	cmp	r2, r3
 800fd7c:	d359      	bcc.n	800fe32 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800fd7e:	683b      	ldr	r3, [r7, #0]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d104      	bne.n	800fd8e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	2200      	movs	r2, #0
 800fd88:	61da      	str	r2, [r3, #28]
 800fd8a:	2304      	movs	r3, #4
 800fd8c:	e06e      	b.n	800fe6c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800fd8e:	687a      	ldr	r2, [r7, #4]
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	699b      	ldr	r3, [r3, #24]
 800fd94:	4619      	mov	r1, r3
 800fd96:	4610      	mov	r0, r2
 800fd98:	f7ff fe3d 	bl	800fa16 <create_chain>
 800fd9c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800fd9e:	697b      	ldr	r3, [r7, #20]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d101      	bne.n	800fda8 <dir_next+0xe0>
 800fda4:	2307      	movs	r3, #7
 800fda6:	e061      	b.n	800fe6c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800fda8:	697b      	ldr	r3, [r7, #20]
 800fdaa:	2b01      	cmp	r3, #1
 800fdac:	d101      	bne.n	800fdb2 <dir_next+0xea>
 800fdae:	2302      	movs	r3, #2
 800fdb0:	e05c      	b.n	800fe6c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800fdb2:	697b      	ldr	r3, [r7, #20]
 800fdb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdb8:	d101      	bne.n	800fdbe <dir_next+0xf6>
 800fdba:	2301      	movs	r3, #1
 800fdbc:	e056      	b.n	800fe6c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800fdbe:	68f8      	ldr	r0, [r7, #12]
 800fdc0:	f7ff fad6 	bl	800f370 <sync_window>
 800fdc4:	4603      	mov	r3, r0
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d001      	beq.n	800fdce <dir_next+0x106>
 800fdca:	2301      	movs	r3, #1
 800fdcc:	e04e      	b.n	800fe6c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	899b      	ldrh	r3, [r3, #12]
 800fdd8:	461a      	mov	r2, r3
 800fdda:	2100      	movs	r1, #0
 800fddc:	f7ff f8ff 	bl	800efde <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800fde0:	2300      	movs	r3, #0
 800fde2:	613b      	str	r3, [r7, #16]
 800fde4:	6979      	ldr	r1, [r7, #20]
 800fde6:	68f8      	ldr	r0, [r7, #12]
 800fde8:	f7ff fba4 	bl	800f534 <clust2sect>
 800fdec:	4602      	mov	r2, r0
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	639a      	str	r2, [r3, #56]	@ 0x38
 800fdf2:	e012      	b.n	800fe1a <dir_next+0x152>
						fs->wflag = 1;
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	2201      	movs	r2, #1
 800fdf8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800fdfa:	68f8      	ldr	r0, [r7, #12]
 800fdfc:	f7ff fab8 	bl	800f370 <sync_window>
 800fe00:	4603      	mov	r3, r0
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d001      	beq.n	800fe0a <dir_next+0x142>
 800fe06:	2301      	movs	r3, #1
 800fe08:	e030      	b.n	800fe6c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800fe0a:	693b      	ldr	r3, [r7, #16]
 800fe0c:	3301      	adds	r3, #1
 800fe0e:	613b      	str	r3, [r7, #16]
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe14:	1c5a      	adds	r2, r3, #1
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	639a      	str	r2, [r3, #56]	@ 0x38
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	895b      	ldrh	r3, [r3, #10]
 800fe1e:	461a      	mov	r2, r3
 800fe20:	693b      	ldr	r3, [r7, #16]
 800fe22:	4293      	cmp	r3, r2
 800fe24:	d3e6      	bcc.n	800fdf4 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fe2a:	693b      	ldr	r3, [r7, #16]
 800fe2c:	1ad2      	subs	r2, r2, r3
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	639a      	str	r2, [r3, #56]	@ 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	697a      	ldr	r2, [r7, #20]
 800fe36:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800fe38:	6979      	ldr	r1, [r7, #20]
 800fe3a:	68f8      	ldr	r0, [r7, #12]
 800fe3c:	f7ff fb7a 	bl	800f534 <clust2sect>
 800fe40:	4602      	mov	r2, r0
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	68ba      	ldr	r2, [r7, #8]
 800fe4a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	899b      	ldrh	r3, [r3, #12]
 800fe56:	461a      	mov	r2, r3
 800fe58:	68bb      	ldr	r3, [r7, #8]
 800fe5a:	fbb3 f0f2 	udiv	r0, r3, r2
 800fe5e:	fb00 f202 	mul.w	r2, r0, r2
 800fe62:	1a9b      	subs	r3, r3, r2
 800fe64:	18ca      	adds	r2, r1, r3
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800fe6a:	2300      	movs	r3, #0
}
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	3718      	adds	r7, #24
 800fe70:	46bd      	mov	sp, r7
 800fe72:	bd80      	pop	{r7, pc}

0800fe74 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b086      	sub	sp, #24
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
 800fe7c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800fe84:	2100      	movs	r1, #0
 800fe86:	6878      	ldr	r0, [r7, #4]
 800fe88:	f7ff fe95 	bl	800fbb6 <dir_sdi>
 800fe8c:	4603      	mov	r3, r0
 800fe8e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fe90:	7dfb      	ldrb	r3, [r7, #23]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d12b      	bne.n	800feee <dir_alloc+0x7a>
		n = 0;
 800fe96:	2300      	movs	r3, #0
 800fe98:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	69db      	ldr	r3, [r3, #28]
 800fe9e:	4619      	mov	r1, r3
 800fea0:	68f8      	ldr	r0, [r7, #12]
 800fea2:	f7ff faa9 	bl	800f3f8 <move_window>
 800fea6:	4603      	mov	r3, r0
 800fea8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800feaa:	7dfb      	ldrb	r3, [r7, #23]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d11d      	bne.n	800feec <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	6a1b      	ldr	r3, [r3, #32]
 800feb4:	781b      	ldrb	r3, [r3, #0]
 800feb6:	2be5      	cmp	r3, #229	@ 0xe5
 800feb8:	d004      	beq.n	800fec4 <dir_alloc+0x50>
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	6a1b      	ldr	r3, [r3, #32]
 800febe:	781b      	ldrb	r3, [r3, #0]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d107      	bne.n	800fed4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800fec4:	693b      	ldr	r3, [r7, #16]
 800fec6:	3301      	adds	r3, #1
 800fec8:	613b      	str	r3, [r7, #16]
 800feca:	693a      	ldr	r2, [r7, #16]
 800fecc:	683b      	ldr	r3, [r7, #0]
 800fece:	429a      	cmp	r2, r3
 800fed0:	d102      	bne.n	800fed8 <dir_alloc+0x64>
 800fed2:	e00c      	b.n	800feee <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800fed4:	2300      	movs	r3, #0
 800fed6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800fed8:	2101      	movs	r1, #1
 800feda:	6878      	ldr	r0, [r7, #4]
 800fedc:	f7ff fef4 	bl	800fcc8 <dir_next>
 800fee0:	4603      	mov	r3, r0
 800fee2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800fee4:	7dfb      	ldrb	r3, [r7, #23]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d0d7      	beq.n	800fe9a <dir_alloc+0x26>
 800feea:	e000      	b.n	800feee <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800feec:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800feee:	7dfb      	ldrb	r3, [r7, #23]
 800fef0:	2b04      	cmp	r3, #4
 800fef2:	d101      	bne.n	800fef8 <dir_alloc+0x84>
 800fef4:	2307      	movs	r3, #7
 800fef6:	75fb      	strb	r3, [r7, #23]
	return res;
 800fef8:	7dfb      	ldrb	r3, [r7, #23]
}
 800fefa:	4618      	mov	r0, r3
 800fefc:	3718      	adds	r7, #24
 800fefe:	46bd      	mov	sp, r7
 800ff00:	bd80      	pop	{r7, pc}

0800ff02 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ff02:	b580      	push	{r7, lr}
 800ff04:	b084      	sub	sp, #16
 800ff06:	af00      	add	r7, sp, #0
 800ff08:	6078      	str	r0, [r7, #4]
 800ff0a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ff0c:	683b      	ldr	r3, [r7, #0]
 800ff0e:	331a      	adds	r3, #26
 800ff10:	4618      	mov	r0, r3
 800ff12:	f7fe ffc1 	bl	800ee98 <ld_word>
 800ff16:	4603      	mov	r3, r0
 800ff18:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	781b      	ldrb	r3, [r3, #0]
 800ff1e:	2b03      	cmp	r3, #3
 800ff20:	d109      	bne.n	800ff36 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ff22:	683b      	ldr	r3, [r7, #0]
 800ff24:	3314      	adds	r3, #20
 800ff26:	4618      	mov	r0, r3
 800ff28:	f7fe ffb6 	bl	800ee98 <ld_word>
 800ff2c:	4603      	mov	r3, r0
 800ff2e:	041b      	lsls	r3, r3, #16
 800ff30:	68fa      	ldr	r2, [r7, #12]
 800ff32:	4313      	orrs	r3, r2
 800ff34:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ff36:	68fb      	ldr	r3, [r7, #12]
}
 800ff38:	4618      	mov	r0, r3
 800ff3a:	3710      	adds	r7, #16
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	bd80      	pop	{r7, pc}

0800ff40 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b084      	sub	sp, #16
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	60f8      	str	r0, [r7, #12]
 800ff48:	60b9      	str	r1, [r7, #8]
 800ff4a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ff4c:	68bb      	ldr	r3, [r7, #8]
 800ff4e:	331a      	adds	r3, #26
 800ff50:	687a      	ldr	r2, [r7, #4]
 800ff52:	b292      	uxth	r2, r2
 800ff54:	4611      	mov	r1, r2
 800ff56:	4618      	mov	r0, r3
 800ff58:	f7fe ffd9 	bl	800ef0e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	781b      	ldrb	r3, [r3, #0]
 800ff60:	2b03      	cmp	r3, #3
 800ff62:	d109      	bne.n	800ff78 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ff64:	68bb      	ldr	r3, [r7, #8]
 800ff66:	f103 0214 	add.w	r2, r3, #20
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	0c1b      	lsrs	r3, r3, #16
 800ff6e:	b29b      	uxth	r3, r3
 800ff70:	4619      	mov	r1, r3
 800ff72:	4610      	mov	r0, r2
 800ff74:	f7fe ffcb 	bl	800ef0e <st_word>
	}
}
 800ff78:	bf00      	nop
 800ff7a:	3710      	adds	r7, #16
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	bd80      	pop	{r7, pc}

0800ff80 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800ff80:	b590      	push	{r4, r7, lr}
 800ff82:	b087      	sub	sp, #28
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
 800ff88:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800ff8a:	683b      	ldr	r3, [r7, #0]
 800ff8c:	331a      	adds	r3, #26
 800ff8e:	4618      	mov	r0, r3
 800ff90:	f7fe ff82 	bl	800ee98 <ld_word>
 800ff94:	4603      	mov	r3, r0
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d001      	beq.n	800ff9e <cmp_lfn+0x1e>
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	e059      	b.n	8010052 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800ff9e:	683b      	ldr	r3, [r7, #0]
 800ffa0:	781b      	ldrb	r3, [r3, #0]
 800ffa2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ffa6:	1e5a      	subs	r2, r3, #1
 800ffa8:	4613      	mov	r3, r2
 800ffaa:	005b      	lsls	r3, r3, #1
 800ffac:	4413      	add	r3, r2
 800ffae:	009b      	lsls	r3, r3, #2
 800ffb0:	4413      	add	r3, r2
 800ffb2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ffb4:	2301      	movs	r3, #1
 800ffb6:	81fb      	strh	r3, [r7, #14]
 800ffb8:	2300      	movs	r3, #0
 800ffba:	613b      	str	r3, [r7, #16]
 800ffbc:	e033      	b.n	8010026 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ffbe:	4a27      	ldr	r2, [pc, #156]	@ (801005c <cmp_lfn+0xdc>)
 800ffc0:	693b      	ldr	r3, [r7, #16]
 800ffc2:	4413      	add	r3, r2
 800ffc4:	781b      	ldrb	r3, [r3, #0]
 800ffc6:	461a      	mov	r2, r3
 800ffc8:	683b      	ldr	r3, [r7, #0]
 800ffca:	4413      	add	r3, r2
 800ffcc:	4618      	mov	r0, r3
 800ffce:	f7fe ff63 	bl	800ee98 <ld_word>
 800ffd2:	4603      	mov	r3, r0
 800ffd4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ffd6:	89fb      	ldrh	r3, [r7, #14]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d01a      	beq.n	8010012 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ffdc:	697b      	ldr	r3, [r7, #20]
 800ffde:	2bfe      	cmp	r3, #254	@ 0xfe
 800ffe0:	d812      	bhi.n	8010008 <cmp_lfn+0x88>
 800ffe2:	89bb      	ldrh	r3, [r7, #12]
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	f002 fa9b 	bl	8012520 <ff_wtoupper>
 800ffea:	4603      	mov	r3, r0
 800ffec:	461c      	mov	r4, r3
 800ffee:	697b      	ldr	r3, [r7, #20]
 800fff0:	1c5a      	adds	r2, r3, #1
 800fff2:	617a      	str	r2, [r7, #20]
 800fff4:	005b      	lsls	r3, r3, #1
 800fff6:	687a      	ldr	r2, [r7, #4]
 800fff8:	4413      	add	r3, r2
 800fffa:	881b      	ldrh	r3, [r3, #0]
 800fffc:	4618      	mov	r0, r3
 800fffe:	f002 fa8f 	bl	8012520 <ff_wtoupper>
 8010002:	4603      	mov	r3, r0
 8010004:	429c      	cmp	r4, r3
 8010006:	d001      	beq.n	801000c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8010008:	2300      	movs	r3, #0
 801000a:	e022      	b.n	8010052 <cmp_lfn+0xd2>
			}
			wc = uc;
 801000c:	89bb      	ldrh	r3, [r7, #12]
 801000e:	81fb      	strh	r3, [r7, #14]
 8010010:	e006      	b.n	8010020 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8010012:	89bb      	ldrh	r3, [r7, #12]
 8010014:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010018:	4293      	cmp	r3, r2
 801001a:	d001      	beq.n	8010020 <cmp_lfn+0xa0>
 801001c:	2300      	movs	r3, #0
 801001e:	e018      	b.n	8010052 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8010020:	693b      	ldr	r3, [r7, #16]
 8010022:	3301      	adds	r3, #1
 8010024:	613b      	str	r3, [r7, #16]
 8010026:	693b      	ldr	r3, [r7, #16]
 8010028:	2b0c      	cmp	r3, #12
 801002a:	d9c8      	bls.n	800ffbe <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801002c:	683b      	ldr	r3, [r7, #0]
 801002e:	781b      	ldrb	r3, [r3, #0]
 8010030:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010034:	2b00      	cmp	r3, #0
 8010036:	d00b      	beq.n	8010050 <cmp_lfn+0xd0>
 8010038:	89fb      	ldrh	r3, [r7, #14]
 801003a:	2b00      	cmp	r3, #0
 801003c:	d008      	beq.n	8010050 <cmp_lfn+0xd0>
 801003e:	697b      	ldr	r3, [r7, #20]
 8010040:	005b      	lsls	r3, r3, #1
 8010042:	687a      	ldr	r2, [r7, #4]
 8010044:	4413      	add	r3, r2
 8010046:	881b      	ldrh	r3, [r3, #0]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d001      	beq.n	8010050 <cmp_lfn+0xd0>
 801004c:	2300      	movs	r3, #0
 801004e:	e000      	b.n	8010052 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8010050:	2301      	movs	r3, #1
}
 8010052:	4618      	mov	r0, r3
 8010054:	371c      	adds	r7, #28
 8010056:	46bd      	mov	sp, r7
 8010058:	bd90      	pop	{r4, r7, pc}
 801005a:	bf00      	nop
 801005c:	08012ac8 	.word	0x08012ac8

08010060 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8010060:	b580      	push	{r7, lr}
 8010062:	b088      	sub	sp, #32
 8010064:	af00      	add	r7, sp, #0
 8010066:	60f8      	str	r0, [r7, #12]
 8010068:	60b9      	str	r1, [r7, #8]
 801006a:	4611      	mov	r1, r2
 801006c:	461a      	mov	r2, r3
 801006e:	460b      	mov	r3, r1
 8010070:	71fb      	strb	r3, [r7, #7]
 8010072:	4613      	mov	r3, r2
 8010074:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8010076:	68bb      	ldr	r3, [r7, #8]
 8010078:	330d      	adds	r3, #13
 801007a:	79ba      	ldrb	r2, [r7, #6]
 801007c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801007e:	68bb      	ldr	r3, [r7, #8]
 8010080:	330b      	adds	r3, #11
 8010082:	220f      	movs	r2, #15
 8010084:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8010086:	68bb      	ldr	r3, [r7, #8]
 8010088:	330c      	adds	r3, #12
 801008a:	2200      	movs	r2, #0
 801008c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801008e:	68bb      	ldr	r3, [r7, #8]
 8010090:	331a      	adds	r3, #26
 8010092:	2100      	movs	r1, #0
 8010094:	4618      	mov	r0, r3
 8010096:	f7fe ff3a 	bl	800ef0e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801009a:	79fb      	ldrb	r3, [r7, #7]
 801009c:	1e5a      	subs	r2, r3, #1
 801009e:	4613      	mov	r3, r2
 80100a0:	005b      	lsls	r3, r3, #1
 80100a2:	4413      	add	r3, r2
 80100a4:	009b      	lsls	r3, r3, #2
 80100a6:	4413      	add	r3, r2
 80100a8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80100aa:	2300      	movs	r3, #0
 80100ac:	82fb      	strh	r3, [r7, #22]
 80100ae:	2300      	movs	r3, #0
 80100b0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80100b2:	8afb      	ldrh	r3, [r7, #22]
 80100b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80100b8:	4293      	cmp	r3, r2
 80100ba:	d007      	beq.n	80100cc <put_lfn+0x6c>
 80100bc:	69fb      	ldr	r3, [r7, #28]
 80100be:	1c5a      	adds	r2, r3, #1
 80100c0:	61fa      	str	r2, [r7, #28]
 80100c2:	005b      	lsls	r3, r3, #1
 80100c4:	68fa      	ldr	r2, [r7, #12]
 80100c6:	4413      	add	r3, r2
 80100c8:	881b      	ldrh	r3, [r3, #0]
 80100ca:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80100cc:	4a17      	ldr	r2, [pc, #92]	@ (801012c <put_lfn+0xcc>)
 80100ce:	69bb      	ldr	r3, [r7, #24]
 80100d0:	4413      	add	r3, r2
 80100d2:	781b      	ldrb	r3, [r3, #0]
 80100d4:	461a      	mov	r2, r3
 80100d6:	68bb      	ldr	r3, [r7, #8]
 80100d8:	4413      	add	r3, r2
 80100da:	8afa      	ldrh	r2, [r7, #22]
 80100dc:	4611      	mov	r1, r2
 80100de:	4618      	mov	r0, r3
 80100e0:	f7fe ff15 	bl	800ef0e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80100e4:	8afb      	ldrh	r3, [r7, #22]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d102      	bne.n	80100f0 <put_lfn+0x90>
 80100ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80100ee:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80100f0:	69bb      	ldr	r3, [r7, #24]
 80100f2:	3301      	adds	r3, #1
 80100f4:	61bb      	str	r3, [r7, #24]
 80100f6:	69bb      	ldr	r3, [r7, #24]
 80100f8:	2b0c      	cmp	r3, #12
 80100fa:	d9da      	bls.n	80100b2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80100fc:	8afb      	ldrh	r3, [r7, #22]
 80100fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010102:	4293      	cmp	r3, r2
 8010104:	d006      	beq.n	8010114 <put_lfn+0xb4>
 8010106:	69fb      	ldr	r3, [r7, #28]
 8010108:	005b      	lsls	r3, r3, #1
 801010a:	68fa      	ldr	r2, [r7, #12]
 801010c:	4413      	add	r3, r2
 801010e:	881b      	ldrh	r3, [r3, #0]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d103      	bne.n	801011c <put_lfn+0xbc>
 8010114:	79fb      	ldrb	r3, [r7, #7]
 8010116:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801011a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801011c:	68bb      	ldr	r3, [r7, #8]
 801011e:	79fa      	ldrb	r2, [r7, #7]
 8010120:	701a      	strb	r2, [r3, #0]
}
 8010122:	bf00      	nop
 8010124:	3720      	adds	r7, #32
 8010126:	46bd      	mov	sp, r7
 8010128:	bd80      	pop	{r7, pc}
 801012a:	bf00      	nop
 801012c:	08012ac8 	.word	0x08012ac8

08010130 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b08c      	sub	sp, #48	@ 0x30
 8010134:	af00      	add	r7, sp, #0
 8010136:	60f8      	str	r0, [r7, #12]
 8010138:	60b9      	str	r1, [r7, #8]
 801013a:	607a      	str	r2, [r7, #4]
 801013c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801013e:	220b      	movs	r2, #11
 8010140:	68b9      	ldr	r1, [r7, #8]
 8010142:	68f8      	ldr	r0, [r7, #12]
 8010144:	f7fe ff2a 	bl	800ef9c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8010148:	683b      	ldr	r3, [r7, #0]
 801014a:	2b05      	cmp	r3, #5
 801014c:	d929      	bls.n	80101a2 <gen_numname+0x72>
		sr = seq;
 801014e:	683b      	ldr	r3, [r7, #0]
 8010150:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8010152:	e020      	b.n	8010196 <gen_numname+0x66>
			wc = *lfn++;
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	1c9a      	adds	r2, r3, #2
 8010158:	607a      	str	r2, [r7, #4]
 801015a:	881b      	ldrh	r3, [r3, #0]
 801015c:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 801015e:	2300      	movs	r3, #0
 8010160:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010162:	e015      	b.n	8010190 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8010164:	69fb      	ldr	r3, [r7, #28]
 8010166:	005a      	lsls	r2, r3, #1
 8010168:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801016a:	f003 0301 	and.w	r3, r3, #1
 801016e:	4413      	add	r3, r2
 8010170:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8010172:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010174:	085b      	lsrs	r3, r3, #1
 8010176:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8010178:	69fb      	ldr	r3, [r7, #28]
 801017a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801017e:	2b00      	cmp	r3, #0
 8010180:	d003      	beq.n	801018a <gen_numname+0x5a>
 8010182:	69fa      	ldr	r2, [r7, #28]
 8010184:	4b30      	ldr	r3, [pc, #192]	@ (8010248 <gen_numname+0x118>)
 8010186:	4053      	eors	r3, r2
 8010188:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801018a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801018c:	3301      	adds	r3, #1
 801018e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010192:	2b0f      	cmp	r3, #15
 8010194:	d9e6      	bls.n	8010164 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	881b      	ldrh	r3, [r3, #0]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d1da      	bne.n	8010154 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801019e:	69fb      	ldr	r3, [r7, #28]
 80101a0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80101a2:	2307      	movs	r3, #7
 80101a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80101a6:	683b      	ldr	r3, [r7, #0]
 80101a8:	b2db      	uxtb	r3, r3
 80101aa:	f003 030f 	and.w	r3, r3, #15
 80101ae:	b2db      	uxtb	r3, r3
 80101b0:	3330      	adds	r3, #48	@ 0x30
 80101b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 80101b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80101ba:	2b39      	cmp	r3, #57	@ 0x39
 80101bc:	d904      	bls.n	80101c8 <gen_numname+0x98>
 80101be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80101c2:	3307      	adds	r3, #7
 80101c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80101c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101ca:	1e5a      	subs	r2, r3, #1
 80101cc:	62ba      	str	r2, [r7, #40]	@ 0x28
 80101ce:	3330      	adds	r3, #48	@ 0x30
 80101d0:	443b      	add	r3, r7
 80101d2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80101d6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80101da:	683b      	ldr	r3, [r7, #0]
 80101dc:	091b      	lsrs	r3, r3, #4
 80101de:	603b      	str	r3, [r7, #0]
	} while (seq);
 80101e0:	683b      	ldr	r3, [r7, #0]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d1df      	bne.n	80101a6 <gen_numname+0x76>
	ns[i] = '~';
 80101e6:	f107 0214 	add.w	r2, r7, #20
 80101ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101ec:	4413      	add	r3, r2
 80101ee:	227e      	movs	r2, #126	@ 0x7e
 80101f0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80101f2:	2300      	movs	r3, #0
 80101f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80101f6:	e002      	b.n	80101fe <gen_numname+0xce>
 80101f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101fa:	3301      	adds	r3, #1
 80101fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80101fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010202:	429a      	cmp	r2, r3
 8010204:	d205      	bcs.n	8010212 <gen_numname+0xe2>
 8010206:	68fa      	ldr	r2, [r7, #12]
 8010208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801020a:	4413      	add	r3, r2
 801020c:	781b      	ldrb	r3, [r3, #0]
 801020e:	2b20      	cmp	r3, #32
 8010210:	d1f2      	bne.n	80101f8 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8010212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010214:	2b07      	cmp	r3, #7
 8010216:	d807      	bhi.n	8010228 <gen_numname+0xf8>
 8010218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801021a:	1c5a      	adds	r2, r3, #1
 801021c:	62ba      	str	r2, [r7, #40]	@ 0x28
 801021e:	3330      	adds	r3, #48	@ 0x30
 8010220:	443b      	add	r3, r7
 8010222:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8010226:	e000      	b.n	801022a <gen_numname+0xfa>
 8010228:	2120      	movs	r1, #32
 801022a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801022c:	1c5a      	adds	r2, r3, #1
 801022e:	627a      	str	r2, [r7, #36]	@ 0x24
 8010230:	68fa      	ldr	r2, [r7, #12]
 8010232:	4413      	add	r3, r2
 8010234:	460a      	mov	r2, r1
 8010236:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8010238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801023a:	2b07      	cmp	r3, #7
 801023c:	d9e9      	bls.n	8010212 <gen_numname+0xe2>
}
 801023e:	bf00      	nop
 8010240:	bf00      	nop
 8010242:	3730      	adds	r7, #48	@ 0x30
 8010244:	46bd      	mov	sp, r7
 8010246:	bd80      	pop	{r7, pc}
 8010248:	00011021 	.word	0x00011021

0801024c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801024c:	b480      	push	{r7}
 801024e:	b085      	sub	sp, #20
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8010254:	2300      	movs	r3, #0
 8010256:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8010258:	230b      	movs	r3, #11
 801025a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801025c:	7bfb      	ldrb	r3, [r7, #15]
 801025e:	b2da      	uxtb	r2, r3
 8010260:	0852      	lsrs	r2, r2, #1
 8010262:	01db      	lsls	r3, r3, #7
 8010264:	4313      	orrs	r3, r2
 8010266:	b2da      	uxtb	r2, r3
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	1c59      	adds	r1, r3, #1
 801026c:	6079      	str	r1, [r7, #4]
 801026e:	781b      	ldrb	r3, [r3, #0]
 8010270:	4413      	add	r3, r2
 8010272:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8010274:	68bb      	ldr	r3, [r7, #8]
 8010276:	3b01      	subs	r3, #1
 8010278:	60bb      	str	r3, [r7, #8]
 801027a:	68bb      	ldr	r3, [r7, #8]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d1ed      	bne.n	801025c <sum_sfn+0x10>
	return sum;
 8010280:	7bfb      	ldrb	r3, [r7, #15]
}
 8010282:	4618      	mov	r0, r3
 8010284:	3714      	adds	r7, #20
 8010286:	46bd      	mov	sp, r7
 8010288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028c:	4770      	bx	lr

0801028e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801028e:	b580      	push	{r7, lr}
 8010290:	b086      	sub	sp, #24
 8010292:	af00      	add	r7, sp, #0
 8010294:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801029c:	2100      	movs	r1, #0
 801029e:	6878      	ldr	r0, [r7, #4]
 80102a0:	f7ff fc89 	bl	800fbb6 <dir_sdi>
 80102a4:	4603      	mov	r3, r0
 80102a6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80102a8:	7dfb      	ldrb	r3, [r7, #23]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d001      	beq.n	80102b2 <dir_find+0x24>
 80102ae:	7dfb      	ldrb	r3, [r7, #23]
 80102b0:	e0a9      	b.n	8010406 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80102b2:	23ff      	movs	r3, #255	@ 0xff
 80102b4:	753b      	strb	r3, [r7, #20]
 80102b6:	7d3b      	ldrb	r3, [r7, #20]
 80102b8:	757b      	strb	r3, [r7, #21]
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	f04f 32ff 	mov.w	r2, #4294967295
 80102c0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	69db      	ldr	r3, [r3, #28]
 80102c6:	4619      	mov	r1, r3
 80102c8:	6938      	ldr	r0, [r7, #16]
 80102ca:	f7ff f895 	bl	800f3f8 <move_window>
 80102ce:	4603      	mov	r3, r0
 80102d0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80102d2:	7dfb      	ldrb	r3, [r7, #23]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	f040 8090 	bne.w	80103fa <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	6a1b      	ldr	r3, [r3, #32]
 80102de:	781b      	ldrb	r3, [r3, #0]
 80102e0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80102e2:	7dbb      	ldrb	r3, [r7, #22]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d102      	bne.n	80102ee <dir_find+0x60>
 80102e8:	2304      	movs	r3, #4
 80102ea:	75fb      	strb	r3, [r7, #23]
 80102ec:	e08a      	b.n	8010404 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	6a1b      	ldr	r3, [r3, #32]
 80102f2:	330b      	adds	r3, #11
 80102f4:	781b      	ldrb	r3, [r3, #0]
 80102f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80102fa:	73fb      	strb	r3, [r7, #15]
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	7bfa      	ldrb	r2, [r7, #15]
 8010300:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8010302:	7dbb      	ldrb	r3, [r7, #22]
 8010304:	2be5      	cmp	r3, #229	@ 0xe5
 8010306:	d007      	beq.n	8010318 <dir_find+0x8a>
 8010308:	7bfb      	ldrb	r3, [r7, #15]
 801030a:	f003 0308 	and.w	r3, r3, #8
 801030e:	2b00      	cmp	r3, #0
 8010310:	d009      	beq.n	8010326 <dir_find+0x98>
 8010312:	7bfb      	ldrb	r3, [r7, #15]
 8010314:	2b0f      	cmp	r3, #15
 8010316:	d006      	beq.n	8010326 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8010318:	23ff      	movs	r3, #255	@ 0xff
 801031a:	757b      	strb	r3, [r7, #21]
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	f04f 32ff 	mov.w	r2, #4294967295
 8010322:	631a      	str	r2, [r3, #48]	@ 0x30
 8010324:	e05e      	b.n	80103e4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8010326:	7bfb      	ldrb	r3, [r7, #15]
 8010328:	2b0f      	cmp	r3, #15
 801032a:	d136      	bne.n	801039a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8010332:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010336:	2b00      	cmp	r3, #0
 8010338:	d154      	bne.n	80103e4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801033a:	7dbb      	ldrb	r3, [r7, #22]
 801033c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010340:	2b00      	cmp	r3, #0
 8010342:	d00d      	beq.n	8010360 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	6a1b      	ldr	r3, [r3, #32]
 8010348:	7b5b      	ldrb	r3, [r3, #13]
 801034a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801034c:	7dbb      	ldrb	r3, [r7, #22]
 801034e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010352:	75bb      	strb	r3, [r7, #22]
 8010354:	7dbb      	ldrb	r3, [r7, #22]
 8010356:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	695a      	ldr	r2, [r3, #20]
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8010360:	7dba      	ldrb	r2, [r7, #22]
 8010362:	7d7b      	ldrb	r3, [r7, #21]
 8010364:	429a      	cmp	r2, r3
 8010366:	d115      	bne.n	8010394 <dir_find+0x106>
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	6a1b      	ldr	r3, [r3, #32]
 801036c:	330d      	adds	r3, #13
 801036e:	781b      	ldrb	r3, [r3, #0]
 8010370:	7d3a      	ldrb	r2, [r7, #20]
 8010372:	429a      	cmp	r2, r3
 8010374:	d10e      	bne.n	8010394 <dir_find+0x106>
 8010376:	693b      	ldr	r3, [r7, #16]
 8010378:	691a      	ldr	r2, [r3, #16]
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	6a1b      	ldr	r3, [r3, #32]
 801037e:	4619      	mov	r1, r3
 8010380:	4610      	mov	r0, r2
 8010382:	f7ff fdfd 	bl	800ff80 <cmp_lfn>
 8010386:	4603      	mov	r3, r0
 8010388:	2b00      	cmp	r3, #0
 801038a:	d003      	beq.n	8010394 <dir_find+0x106>
 801038c:	7d7b      	ldrb	r3, [r7, #21]
 801038e:	3b01      	subs	r3, #1
 8010390:	b2db      	uxtb	r3, r3
 8010392:	e000      	b.n	8010396 <dir_find+0x108>
 8010394:	23ff      	movs	r3, #255	@ 0xff
 8010396:	757b      	strb	r3, [r7, #21]
 8010398:	e024      	b.n	80103e4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801039a:	7d7b      	ldrb	r3, [r7, #21]
 801039c:	2b00      	cmp	r3, #0
 801039e:	d109      	bne.n	80103b4 <dir_find+0x126>
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	6a1b      	ldr	r3, [r3, #32]
 80103a4:	4618      	mov	r0, r3
 80103a6:	f7ff ff51 	bl	801024c <sum_sfn>
 80103aa:	4603      	mov	r3, r0
 80103ac:	461a      	mov	r2, r3
 80103ae:	7d3b      	ldrb	r3, [r7, #20]
 80103b0:	4293      	cmp	r3, r2
 80103b2:	d024      	beq.n	80103fe <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80103ba:	f003 0301 	and.w	r3, r3, #1
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d10a      	bne.n	80103d8 <dir_find+0x14a>
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	6a18      	ldr	r0, [r3, #32]
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	3324      	adds	r3, #36	@ 0x24
 80103ca:	220b      	movs	r2, #11
 80103cc:	4619      	mov	r1, r3
 80103ce:	f7fe fe21 	bl	800f014 <mem_cmp>
 80103d2:	4603      	mov	r3, r0
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d014      	beq.n	8010402 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80103d8:	23ff      	movs	r3, #255	@ 0xff
 80103da:	757b      	strb	r3, [r7, #21]
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	f04f 32ff 	mov.w	r2, #4294967295
 80103e2:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80103e4:	2100      	movs	r1, #0
 80103e6:	6878      	ldr	r0, [r7, #4]
 80103e8:	f7ff fc6e 	bl	800fcc8 <dir_next>
 80103ec:	4603      	mov	r3, r0
 80103ee:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80103f0:	7dfb      	ldrb	r3, [r7, #23]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	f43f af65 	beq.w	80102c2 <dir_find+0x34>
 80103f8:	e004      	b.n	8010404 <dir_find+0x176>
		if (res != FR_OK) break;
 80103fa:	bf00      	nop
 80103fc:	e002      	b.n	8010404 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80103fe:	bf00      	nop
 8010400:	e000      	b.n	8010404 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8010402:	bf00      	nop

	return res;
 8010404:	7dfb      	ldrb	r3, [r7, #23]
}
 8010406:	4618      	mov	r0, r3
 8010408:	3718      	adds	r7, #24
 801040a:	46bd      	mov	sp, r7
 801040c:	bd80      	pop	{r7, pc}
	...

08010410 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8010410:	b580      	push	{r7, lr}
 8010412:	b08c      	sub	sp, #48	@ 0x30
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8010424:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8010428:	2b00      	cmp	r3, #0
 801042a:	d001      	beq.n	8010430 <dir_register+0x20>
 801042c:	2306      	movs	r3, #6
 801042e:	e0e0      	b.n	80105f2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8010430:	2300      	movs	r3, #0
 8010432:	627b      	str	r3, [r7, #36]	@ 0x24
 8010434:	e002      	b.n	801043c <dir_register+0x2c>
 8010436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010438:	3301      	adds	r3, #1
 801043a:	627b      	str	r3, [r7, #36]	@ 0x24
 801043c:	69fb      	ldr	r3, [r7, #28]
 801043e:	691a      	ldr	r2, [r3, #16]
 8010440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010442:	005b      	lsls	r3, r3, #1
 8010444:	4413      	add	r3, r2
 8010446:	881b      	ldrh	r3, [r3, #0]
 8010448:	2b00      	cmp	r3, #0
 801044a:	d1f4      	bne.n	8010436 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8010452:	f107 030c 	add.w	r3, r7, #12
 8010456:	220c      	movs	r2, #12
 8010458:	4618      	mov	r0, r3
 801045a:	f7fe fd9f 	bl	800ef9c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801045e:	7dfb      	ldrb	r3, [r7, #23]
 8010460:	f003 0301 	and.w	r3, r3, #1
 8010464:	2b00      	cmp	r3, #0
 8010466:	d032      	beq.n	80104ce <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	2240      	movs	r2, #64	@ 0x40
 801046c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8010470:	2301      	movs	r3, #1
 8010472:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010474:	e016      	b.n	80104a4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 801047c:	69fb      	ldr	r3, [r7, #28]
 801047e:	691a      	ldr	r2, [r3, #16]
 8010480:	f107 010c 	add.w	r1, r7, #12
 8010484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010486:	f7ff fe53 	bl	8010130 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801048a:	6878      	ldr	r0, [r7, #4]
 801048c:	f7ff feff 	bl	801028e <dir_find>
 8010490:	4603      	mov	r3, r0
 8010492:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8010496:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801049a:	2b00      	cmp	r3, #0
 801049c:	d106      	bne.n	80104ac <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801049e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104a0:	3301      	adds	r3, #1
 80104a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80104a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104a6:	2b63      	cmp	r3, #99	@ 0x63
 80104a8:	d9e5      	bls.n	8010476 <dir_register+0x66>
 80104aa:	e000      	b.n	80104ae <dir_register+0x9e>
			if (res != FR_OK) break;
 80104ac:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80104ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104b0:	2b64      	cmp	r3, #100	@ 0x64
 80104b2:	d101      	bne.n	80104b8 <dir_register+0xa8>
 80104b4:	2307      	movs	r3, #7
 80104b6:	e09c      	b.n	80105f2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80104b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80104bc:	2b04      	cmp	r3, #4
 80104be:	d002      	beq.n	80104c6 <dir_register+0xb6>
 80104c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80104c4:	e095      	b.n	80105f2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80104c6:	7dfa      	ldrb	r2, [r7, #23]
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80104ce:	7dfb      	ldrb	r3, [r7, #23]
 80104d0:	f003 0302 	and.w	r3, r3, #2
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d007      	beq.n	80104e8 <dir_register+0xd8>
 80104d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104da:	330c      	adds	r3, #12
 80104dc:	4a47      	ldr	r2, [pc, #284]	@ (80105fc <dir_register+0x1ec>)
 80104de:	fba2 2303 	umull	r2, r3, r2, r3
 80104e2:	089b      	lsrs	r3, r3, #2
 80104e4:	3301      	adds	r3, #1
 80104e6:	e000      	b.n	80104ea <dir_register+0xda>
 80104e8:	2301      	movs	r3, #1
 80104ea:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80104ec:	6a39      	ldr	r1, [r7, #32]
 80104ee:	6878      	ldr	r0, [r7, #4]
 80104f0:	f7ff fcc0 	bl	800fe74 <dir_alloc>
 80104f4:	4603      	mov	r3, r0
 80104f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80104fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d148      	bne.n	8010594 <dir_register+0x184>
 8010502:	6a3b      	ldr	r3, [r7, #32]
 8010504:	3b01      	subs	r3, #1
 8010506:	623b      	str	r3, [r7, #32]
 8010508:	6a3b      	ldr	r3, [r7, #32]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d042      	beq.n	8010594 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	695a      	ldr	r2, [r3, #20]
 8010512:	6a3b      	ldr	r3, [r7, #32]
 8010514:	015b      	lsls	r3, r3, #5
 8010516:	1ad3      	subs	r3, r2, r3
 8010518:	4619      	mov	r1, r3
 801051a:	6878      	ldr	r0, [r7, #4]
 801051c:	f7ff fb4b 	bl	800fbb6 <dir_sdi>
 8010520:	4603      	mov	r3, r0
 8010522:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8010526:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801052a:	2b00      	cmp	r3, #0
 801052c:	d132      	bne.n	8010594 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	3324      	adds	r3, #36	@ 0x24
 8010532:	4618      	mov	r0, r3
 8010534:	f7ff fe8a 	bl	801024c <sum_sfn>
 8010538:	4603      	mov	r3, r0
 801053a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	69db      	ldr	r3, [r3, #28]
 8010540:	4619      	mov	r1, r3
 8010542:	69f8      	ldr	r0, [r7, #28]
 8010544:	f7fe ff58 	bl	800f3f8 <move_window>
 8010548:	4603      	mov	r3, r0
 801054a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 801054e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010552:	2b00      	cmp	r3, #0
 8010554:	d11d      	bne.n	8010592 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8010556:	69fb      	ldr	r3, [r7, #28]
 8010558:	6918      	ldr	r0, [r3, #16]
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	6a19      	ldr	r1, [r3, #32]
 801055e:	6a3b      	ldr	r3, [r7, #32]
 8010560:	b2da      	uxtb	r2, r3
 8010562:	7efb      	ldrb	r3, [r7, #27]
 8010564:	f7ff fd7c 	bl	8010060 <put_lfn>
				fs->wflag = 1;
 8010568:	69fb      	ldr	r3, [r7, #28]
 801056a:	2201      	movs	r2, #1
 801056c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801056e:	2100      	movs	r1, #0
 8010570:	6878      	ldr	r0, [r7, #4]
 8010572:	f7ff fba9 	bl	800fcc8 <dir_next>
 8010576:	4603      	mov	r3, r0
 8010578:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 801057c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010580:	2b00      	cmp	r3, #0
 8010582:	d107      	bne.n	8010594 <dir_register+0x184>
 8010584:	6a3b      	ldr	r3, [r7, #32]
 8010586:	3b01      	subs	r3, #1
 8010588:	623b      	str	r3, [r7, #32]
 801058a:	6a3b      	ldr	r3, [r7, #32]
 801058c:	2b00      	cmp	r3, #0
 801058e:	d1d5      	bne.n	801053c <dir_register+0x12c>
 8010590:	e000      	b.n	8010594 <dir_register+0x184>
				if (res != FR_OK) break;
 8010592:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010594:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010598:	2b00      	cmp	r3, #0
 801059a:	d128      	bne.n	80105ee <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	69db      	ldr	r3, [r3, #28]
 80105a0:	4619      	mov	r1, r3
 80105a2:	69f8      	ldr	r0, [r7, #28]
 80105a4:	f7fe ff28 	bl	800f3f8 <move_window>
 80105a8:	4603      	mov	r3, r0
 80105aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80105ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d11b      	bne.n	80105ee <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	6a1b      	ldr	r3, [r3, #32]
 80105ba:	2220      	movs	r2, #32
 80105bc:	2100      	movs	r1, #0
 80105be:	4618      	mov	r0, r3
 80105c0:	f7fe fd0d 	bl	800efde <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	6a18      	ldr	r0, [r3, #32]
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	3324      	adds	r3, #36	@ 0x24
 80105cc:	220b      	movs	r2, #11
 80105ce:	4619      	mov	r1, r3
 80105d0:	f7fe fce4 	bl	800ef9c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	6a1b      	ldr	r3, [r3, #32]
 80105de:	330c      	adds	r3, #12
 80105e0:	f002 0218 	and.w	r2, r2, #24
 80105e4:	b2d2      	uxtb	r2, r2
 80105e6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80105e8:	69fb      	ldr	r3, [r7, #28]
 80105ea:	2201      	movs	r2, #1
 80105ec:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80105ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80105f2:	4618      	mov	r0, r3
 80105f4:	3730      	adds	r7, #48	@ 0x30
 80105f6:	46bd      	mov	sp, r7
 80105f8:	bd80      	pop	{r7, pc}
 80105fa:	bf00      	nop
 80105fc:	4ec4ec4f 	.word	0x4ec4ec4f

08010600 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010600:	b580      	push	{r7, lr}
 8010602:	b08a      	sub	sp, #40	@ 0x28
 8010604:	af00      	add	r7, sp, #0
 8010606:	6078      	str	r0, [r7, #4]
 8010608:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801060a:	683b      	ldr	r3, [r7, #0]
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	613b      	str	r3, [r7, #16]
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	691b      	ldr	r3, [r3, #16]
 8010616:	60fb      	str	r3, [r7, #12]
 8010618:	2300      	movs	r3, #0
 801061a:	617b      	str	r3, [r7, #20]
 801061c:	697b      	ldr	r3, [r7, #20]
 801061e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8010620:	69bb      	ldr	r3, [r7, #24]
 8010622:	1c5a      	adds	r2, r3, #1
 8010624:	61ba      	str	r2, [r7, #24]
 8010626:	693a      	ldr	r2, [r7, #16]
 8010628:	4413      	add	r3, r2
 801062a:	781b      	ldrb	r3, [r3, #0]
 801062c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801062e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010630:	2b1f      	cmp	r3, #31
 8010632:	d940      	bls.n	80106b6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8010634:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010636:	2b2f      	cmp	r3, #47	@ 0x2f
 8010638:	d006      	beq.n	8010648 <create_name+0x48>
 801063a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801063c:	2b5c      	cmp	r3, #92	@ 0x5c
 801063e:	d110      	bne.n	8010662 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010640:	e002      	b.n	8010648 <create_name+0x48>
 8010642:	69bb      	ldr	r3, [r7, #24]
 8010644:	3301      	adds	r3, #1
 8010646:	61bb      	str	r3, [r7, #24]
 8010648:	693a      	ldr	r2, [r7, #16]
 801064a:	69bb      	ldr	r3, [r7, #24]
 801064c:	4413      	add	r3, r2
 801064e:	781b      	ldrb	r3, [r3, #0]
 8010650:	2b2f      	cmp	r3, #47	@ 0x2f
 8010652:	d0f6      	beq.n	8010642 <create_name+0x42>
 8010654:	693a      	ldr	r2, [r7, #16]
 8010656:	69bb      	ldr	r3, [r7, #24]
 8010658:	4413      	add	r3, r2
 801065a:	781b      	ldrb	r3, [r3, #0]
 801065c:	2b5c      	cmp	r3, #92	@ 0x5c
 801065e:	d0f0      	beq.n	8010642 <create_name+0x42>
			break;
 8010660:	e02a      	b.n	80106b8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8010662:	697b      	ldr	r3, [r7, #20]
 8010664:	2bfe      	cmp	r3, #254	@ 0xfe
 8010666:	d901      	bls.n	801066c <create_name+0x6c>
 8010668:	2306      	movs	r3, #6
 801066a:	e1ca      	b.n	8010a02 <create_name+0x402>
#if !_LFN_UNICODE
		w &= 0xFF;
 801066c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801066e:	b2db      	uxtb	r3, r3
 8010670:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8010672:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010674:	2101      	movs	r1, #1
 8010676:	4618      	mov	r0, r3
 8010678:	f001 ff16 	bl	80124a8 <ff_convert>
 801067c:	4603      	mov	r3, r0
 801067e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8010680:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010682:	2b00      	cmp	r3, #0
 8010684:	d101      	bne.n	801068a <create_name+0x8a>
 8010686:	2306      	movs	r3, #6
 8010688:	e1bb      	b.n	8010a02 <create_name+0x402>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801068a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801068c:	2b7f      	cmp	r3, #127	@ 0x7f
 801068e:	d809      	bhi.n	80106a4 <create_name+0xa4>
 8010690:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010692:	4619      	mov	r1, r3
 8010694:	489e      	ldr	r0, [pc, #632]	@ (8010910 <create_name+0x310>)
 8010696:	f7fe fce4 	bl	800f062 <chk_chr>
 801069a:	4603      	mov	r3, r0
 801069c:	2b00      	cmp	r3, #0
 801069e:	d001      	beq.n	80106a4 <create_name+0xa4>
 80106a0:	2306      	movs	r3, #6
 80106a2:	e1ae      	b.n	8010a02 <create_name+0x402>
		lfn[di++] = w;					/* Store the Unicode character */
 80106a4:	697b      	ldr	r3, [r7, #20]
 80106a6:	1c5a      	adds	r2, r3, #1
 80106a8:	617a      	str	r2, [r7, #20]
 80106aa:	005b      	lsls	r3, r3, #1
 80106ac:	68fa      	ldr	r2, [r7, #12]
 80106ae:	4413      	add	r3, r2
 80106b0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80106b2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80106b4:	e7b4      	b.n	8010620 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80106b6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80106b8:	693a      	ldr	r2, [r7, #16]
 80106ba:	69bb      	ldr	r3, [r7, #24]
 80106bc:	441a      	add	r2, r3
 80106be:	683b      	ldr	r3, [r7, #0]
 80106c0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80106c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80106c4:	2b1f      	cmp	r3, #31
 80106c6:	d801      	bhi.n	80106cc <create_name+0xcc>
 80106c8:	2304      	movs	r3, #4
 80106ca:	e000      	b.n	80106ce <create_name+0xce>
 80106cc:	2300      	movs	r3, #0
 80106ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 80106d2:	697b      	ldr	r3, [r7, #20]
 80106d4:	2b01      	cmp	r3, #1
 80106d6:	d109      	bne.n	80106ec <create_name+0xec>
 80106d8:	697a      	ldr	r2, [r7, #20]
 80106da:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80106de:	4413      	add	r3, r2
 80106e0:	005b      	lsls	r3, r3, #1
 80106e2:	68fa      	ldr	r2, [r7, #12]
 80106e4:	4413      	add	r3, r2
 80106e6:	881b      	ldrh	r3, [r3, #0]
 80106e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80106ea:	d015      	beq.n	8010718 <create_name+0x118>
 80106ec:	697b      	ldr	r3, [r7, #20]
 80106ee:	2b02      	cmp	r3, #2
 80106f0:	d14d      	bne.n	801078e <create_name+0x18e>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 80106f2:	697a      	ldr	r2, [r7, #20]
 80106f4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80106f8:	4413      	add	r3, r2
 80106fa:	005b      	lsls	r3, r3, #1
 80106fc:	68fa      	ldr	r2, [r7, #12]
 80106fe:	4413      	add	r3, r2
 8010700:	881b      	ldrh	r3, [r3, #0]
 8010702:	2b2e      	cmp	r3, #46	@ 0x2e
 8010704:	d143      	bne.n	801078e <create_name+0x18e>
 8010706:	697a      	ldr	r2, [r7, #20]
 8010708:	4b82      	ldr	r3, [pc, #520]	@ (8010914 <create_name+0x314>)
 801070a:	4413      	add	r3, r2
 801070c:	005b      	lsls	r3, r3, #1
 801070e:	68fa      	ldr	r2, [r7, #12]
 8010710:	4413      	add	r3, r2
 8010712:	881b      	ldrh	r3, [r3, #0]
 8010714:	2b2e      	cmp	r3, #46	@ 0x2e
 8010716:	d13a      	bne.n	801078e <create_name+0x18e>
		lfn[di] = 0;
 8010718:	697b      	ldr	r3, [r7, #20]
 801071a:	005b      	lsls	r3, r3, #1
 801071c:	68fa      	ldr	r2, [r7, #12]
 801071e:	4413      	add	r3, r2
 8010720:	2200      	movs	r2, #0
 8010722:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 8010724:	2300      	movs	r3, #0
 8010726:	623b      	str	r3, [r7, #32]
 8010728:	e00f      	b.n	801074a <create_name+0x14a>
			dp->fn[i] = (i < di) ? '.' : ' ';
 801072a:	6a3a      	ldr	r2, [r7, #32]
 801072c:	697b      	ldr	r3, [r7, #20]
 801072e:	429a      	cmp	r2, r3
 8010730:	d201      	bcs.n	8010736 <create_name+0x136>
 8010732:	212e      	movs	r1, #46	@ 0x2e
 8010734:	e000      	b.n	8010738 <create_name+0x138>
 8010736:	2120      	movs	r1, #32
 8010738:	687a      	ldr	r2, [r7, #4]
 801073a:	6a3b      	ldr	r3, [r7, #32]
 801073c:	4413      	add	r3, r2
 801073e:	3324      	adds	r3, #36	@ 0x24
 8010740:	460a      	mov	r2, r1
 8010742:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 8010744:	6a3b      	ldr	r3, [r7, #32]
 8010746:	3301      	adds	r3, #1
 8010748:	623b      	str	r3, [r7, #32]
 801074a:	6a3b      	ldr	r3, [r7, #32]
 801074c:	2b0a      	cmp	r3, #10
 801074e:	d9ec      	bls.n	801072a <create_name+0x12a>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 8010750:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010754:	f043 0320 	orr.w	r3, r3, #32
 8010758:	b2d9      	uxtb	r1, r3
 801075a:	687a      	ldr	r2, [r7, #4]
 801075c:	6a3b      	ldr	r3, [r7, #32]
 801075e:	4413      	add	r3, r2
 8010760:	3324      	adds	r3, #36	@ 0x24
 8010762:	460a      	mov	r2, r1
 8010764:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8010766:	2300      	movs	r3, #0
 8010768:	e14b      	b.n	8010a02 <create_name+0x402>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 801076a:	697a      	ldr	r2, [r7, #20]
 801076c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010770:	4413      	add	r3, r2
 8010772:	005b      	lsls	r3, r3, #1
 8010774:	68fa      	ldr	r2, [r7, #12]
 8010776:	4413      	add	r3, r2
 8010778:	881b      	ldrh	r3, [r3, #0]
 801077a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 801077c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801077e:	2b20      	cmp	r3, #32
 8010780:	d002      	beq.n	8010788 <create_name+0x188>
 8010782:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010784:	2b2e      	cmp	r3, #46	@ 0x2e
 8010786:	d106      	bne.n	8010796 <create_name+0x196>
		di--;
 8010788:	697b      	ldr	r3, [r7, #20]
 801078a:	3b01      	subs	r3, #1
 801078c:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801078e:	697b      	ldr	r3, [r7, #20]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d1ea      	bne.n	801076a <create_name+0x16a>
 8010794:	e000      	b.n	8010798 <create_name+0x198>
		if (w != ' ' && w != '.') break;
 8010796:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8010798:	697b      	ldr	r3, [r7, #20]
 801079a:	005b      	lsls	r3, r3, #1
 801079c:	68fa      	ldr	r2, [r7, #12]
 801079e:	4413      	add	r3, r2
 80107a0:	2200      	movs	r2, #0
 80107a2:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80107a4:	697b      	ldr	r3, [r7, #20]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d101      	bne.n	80107ae <create_name+0x1ae>
 80107aa:	2306      	movs	r3, #6
 80107ac:	e129      	b.n	8010a02 <create_name+0x402>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	3324      	adds	r3, #36	@ 0x24
 80107b2:	220b      	movs	r2, #11
 80107b4:	2120      	movs	r1, #32
 80107b6:	4618      	mov	r0, r3
 80107b8:	f7fe fc11 	bl	800efde <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80107bc:	2300      	movs	r3, #0
 80107be:	61bb      	str	r3, [r7, #24]
 80107c0:	e002      	b.n	80107c8 <create_name+0x1c8>
 80107c2:	69bb      	ldr	r3, [r7, #24]
 80107c4:	3301      	adds	r3, #1
 80107c6:	61bb      	str	r3, [r7, #24]
 80107c8:	69bb      	ldr	r3, [r7, #24]
 80107ca:	005b      	lsls	r3, r3, #1
 80107cc:	68fa      	ldr	r2, [r7, #12]
 80107ce:	4413      	add	r3, r2
 80107d0:	881b      	ldrh	r3, [r3, #0]
 80107d2:	2b20      	cmp	r3, #32
 80107d4:	d0f5      	beq.n	80107c2 <create_name+0x1c2>
 80107d6:	69bb      	ldr	r3, [r7, #24]
 80107d8:	005b      	lsls	r3, r3, #1
 80107da:	68fa      	ldr	r2, [r7, #12]
 80107dc:	4413      	add	r3, r2
 80107de:	881b      	ldrh	r3, [r3, #0]
 80107e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80107e2:	d0ee      	beq.n	80107c2 <create_name+0x1c2>
	if (si) cf |= NS_LOSS | NS_LFN;
 80107e4:	69bb      	ldr	r3, [r7, #24]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d009      	beq.n	80107fe <create_name+0x1fe>
 80107ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80107ee:	f043 0303 	orr.w	r3, r3, #3
 80107f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80107f6:	e002      	b.n	80107fe <create_name+0x1fe>
 80107f8:	697b      	ldr	r3, [r7, #20]
 80107fa:	3b01      	subs	r3, #1
 80107fc:	617b      	str	r3, [r7, #20]
 80107fe:	697b      	ldr	r3, [r7, #20]
 8010800:	2b00      	cmp	r3, #0
 8010802:	d009      	beq.n	8010818 <create_name+0x218>
 8010804:	697a      	ldr	r2, [r7, #20]
 8010806:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801080a:	4413      	add	r3, r2
 801080c:	005b      	lsls	r3, r3, #1
 801080e:	68fa      	ldr	r2, [r7, #12]
 8010810:	4413      	add	r3, r2
 8010812:	881b      	ldrh	r3, [r3, #0]
 8010814:	2b2e      	cmp	r3, #46	@ 0x2e
 8010816:	d1ef      	bne.n	80107f8 <create_name+0x1f8>

	i = b = 0; ni = 8;
 8010818:	2300      	movs	r3, #0
 801081a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801081e:	2300      	movs	r3, #0
 8010820:	623b      	str	r3, [r7, #32]
 8010822:	2308      	movs	r3, #8
 8010824:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8010826:	69bb      	ldr	r3, [r7, #24]
 8010828:	1c5a      	adds	r2, r3, #1
 801082a:	61ba      	str	r2, [r7, #24]
 801082c:	005b      	lsls	r3, r3, #1
 801082e:	68fa      	ldr	r2, [r7, #12]
 8010830:	4413      	add	r3, r2
 8010832:	881b      	ldrh	r3, [r3, #0]
 8010834:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8010836:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010838:	2b00      	cmp	r3, #0
 801083a:	f000 8098 	beq.w	801096e <create_name+0x36e>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801083e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010840:	2b20      	cmp	r3, #32
 8010842:	d006      	beq.n	8010852 <create_name+0x252>
 8010844:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010846:	2b2e      	cmp	r3, #46	@ 0x2e
 8010848:	d10a      	bne.n	8010860 <create_name+0x260>
 801084a:	69ba      	ldr	r2, [r7, #24]
 801084c:	697b      	ldr	r3, [r7, #20]
 801084e:	429a      	cmp	r2, r3
 8010850:	d006      	beq.n	8010860 <create_name+0x260>
			cf |= NS_LOSS | NS_LFN; continue;
 8010852:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010856:	f043 0303 	orr.w	r3, r3, #3
 801085a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801085e:	e085      	b.n	801096c <create_name+0x36c>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8010860:	6a3a      	ldr	r2, [r7, #32]
 8010862:	69fb      	ldr	r3, [r7, #28]
 8010864:	429a      	cmp	r2, r3
 8010866:	d203      	bcs.n	8010870 <create_name+0x270>
 8010868:	69ba      	ldr	r2, [r7, #24]
 801086a:	697b      	ldr	r3, [r7, #20]
 801086c:	429a      	cmp	r2, r3
 801086e:	d123      	bne.n	80108b8 <create_name+0x2b8>
			if (ni == 11) {				/* Long extension */
 8010870:	69fb      	ldr	r3, [r7, #28]
 8010872:	2b0b      	cmp	r3, #11
 8010874:	d106      	bne.n	8010884 <create_name+0x284>
				cf |= NS_LOSS | NS_LFN; break;
 8010876:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801087a:	f043 0303 	orr.w	r3, r3, #3
 801087e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010882:	e077      	b.n	8010974 <create_name+0x374>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8010884:	69ba      	ldr	r2, [r7, #24]
 8010886:	697b      	ldr	r3, [r7, #20]
 8010888:	429a      	cmp	r2, r3
 801088a:	d005      	beq.n	8010898 <create_name+0x298>
 801088c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010890:	f043 0303 	orr.w	r3, r3, #3
 8010894:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8010898:	69ba      	ldr	r2, [r7, #24]
 801089a:	697b      	ldr	r3, [r7, #20]
 801089c:	429a      	cmp	r2, r3
 801089e:	d868      	bhi.n	8010972 <create_name+0x372>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80108a0:	697b      	ldr	r3, [r7, #20]
 80108a2:	61bb      	str	r3, [r7, #24]
 80108a4:	2308      	movs	r3, #8
 80108a6:	623b      	str	r3, [r7, #32]
 80108a8:	230b      	movs	r3, #11
 80108aa:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80108ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80108b0:	009b      	lsls	r3, r3, #2
 80108b2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80108b6:	e059      	b.n	801096c <create_name+0x36c>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80108b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80108ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80108bc:	d914      	bls.n	80108e8 <create_name+0x2e8>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80108be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80108c0:	2100      	movs	r1, #0
 80108c2:	4618      	mov	r0, r3
 80108c4:	f001 fdf0 	bl	80124a8 <ff_convert>
 80108c8:	4603      	mov	r3, r0
 80108ca:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80108cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d004      	beq.n	80108dc <create_name+0x2dc>
 80108d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80108d4:	3b80      	subs	r3, #128	@ 0x80
 80108d6:	4a10      	ldr	r2, [pc, #64]	@ (8010918 <create_name+0x318>)
 80108d8:	5cd3      	ldrb	r3, [r2, r3]
 80108da:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80108dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80108e0:	f043 0302 	orr.w	r3, r3, #2
 80108e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80108e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d007      	beq.n	80108fe <create_name+0x2fe>
 80108ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80108f0:	4619      	mov	r1, r3
 80108f2:	480a      	ldr	r0, [pc, #40]	@ (801091c <create_name+0x31c>)
 80108f4:	f7fe fbb5 	bl	800f062 <chk_chr>
 80108f8:	4603      	mov	r3, r0
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d010      	beq.n	8010920 <create_name+0x320>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80108fe:	235f      	movs	r3, #95	@ 0x5f
 8010900:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8010902:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010906:	f043 0303 	orr.w	r3, r3, #3
 801090a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801090e:	e023      	b.n	8010958 <create_name+0x358>
 8010910:	080129c0 	.word	0x080129c0
 8010914:	7ffffffe 	.word	0x7ffffffe
 8010918:	08012a48 	.word	0x08012a48
 801091c:	080129cc 	.word	0x080129cc
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8010920:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010922:	2b40      	cmp	r3, #64	@ 0x40
 8010924:	d909      	bls.n	801093a <create_name+0x33a>
 8010926:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010928:	2b5a      	cmp	r3, #90	@ 0x5a
 801092a:	d806      	bhi.n	801093a <create_name+0x33a>
					b |= 2;
 801092c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010930:	f043 0302 	orr.w	r3, r3, #2
 8010934:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010938:	e00e      	b.n	8010958 <create_name+0x358>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801093a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801093c:	2b60      	cmp	r3, #96	@ 0x60
 801093e:	d90b      	bls.n	8010958 <create_name+0x358>
 8010940:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010942:	2b7a      	cmp	r3, #122	@ 0x7a
 8010944:	d808      	bhi.n	8010958 <create_name+0x358>
						b |= 1; w -= 0x20;
 8010946:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801094a:	f043 0301 	orr.w	r3, r3, #1
 801094e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010952:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010954:	3b20      	subs	r3, #32
 8010956:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8010958:	6a3b      	ldr	r3, [r7, #32]
 801095a:	1c5a      	adds	r2, r3, #1
 801095c:	623a      	str	r2, [r7, #32]
 801095e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010960:	b2d1      	uxtb	r1, r2
 8010962:	687a      	ldr	r2, [r7, #4]
 8010964:	4413      	add	r3, r2
 8010966:	460a      	mov	r2, r1
 8010968:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 801096c:	e75b      	b.n	8010826 <create_name+0x226>
		if (!w) break;					/* Break on end of the LFN */
 801096e:	bf00      	nop
 8010970:	e000      	b.n	8010974 <create_name+0x374>
			if (si > di) break;			/* No extension */
 8010972:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801097a:	2be5      	cmp	r3, #229	@ 0xe5
 801097c:	d103      	bne.n	8010986 <create_name+0x386>
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	2205      	movs	r2, #5
 8010982:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8010986:	69fb      	ldr	r3, [r7, #28]
 8010988:	2b08      	cmp	r3, #8
 801098a:	d104      	bne.n	8010996 <create_name+0x396>
 801098c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010990:	009b      	lsls	r3, r3, #2
 8010992:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8010996:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801099a:	f003 030c 	and.w	r3, r3, #12
 801099e:	2b0c      	cmp	r3, #12
 80109a0:	d005      	beq.n	80109ae <create_name+0x3ae>
 80109a2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80109a6:	f003 0303 	and.w	r3, r3, #3
 80109aa:	2b03      	cmp	r3, #3
 80109ac:	d105      	bne.n	80109ba <create_name+0x3ba>
 80109ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80109b2:	f043 0302 	orr.w	r3, r3, #2
 80109b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80109ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80109be:	f003 0302 	and.w	r3, r3, #2
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d117      	bne.n	80109f6 <create_name+0x3f6>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80109c6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80109ca:	f003 0303 	and.w	r3, r3, #3
 80109ce:	2b01      	cmp	r3, #1
 80109d0:	d105      	bne.n	80109de <create_name+0x3de>
 80109d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80109d6:	f043 0310 	orr.w	r3, r3, #16
 80109da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80109de:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80109e2:	f003 030c 	and.w	r3, r3, #12
 80109e6:	2b04      	cmp	r3, #4
 80109e8:	d105      	bne.n	80109f6 <create_name+0x3f6>
 80109ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80109ee:	f043 0308 	orr.w	r3, r3, #8
 80109f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80109fc:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8010a00:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8010a02:	4618      	mov	r0, r3
 8010a04:	3728      	adds	r7, #40	@ 0x28
 8010a06:	46bd      	mov	sp, r7
 8010a08:	bd80      	pop	{r7, pc}
 8010a0a:	bf00      	nop

08010a0c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b086      	sub	sp, #24
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]
 8010a14:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8010a1a:	693b      	ldr	r3, [r7, #16]
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8010a20:	683b      	ldr	r3, [r7, #0]
 8010a22:	781b      	ldrb	r3, [r3, #0]
 8010a24:	2b2f      	cmp	r3, #47	@ 0x2f
 8010a26:	d00b      	beq.n	8010a40 <follow_path+0x34>
 8010a28:	683b      	ldr	r3, [r7, #0]
 8010a2a:	781b      	ldrb	r3, [r3, #0]
 8010a2c:	2b5c      	cmp	r3, #92	@ 0x5c
 8010a2e:	d007      	beq.n	8010a40 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	69da      	ldr	r2, [r3, #28]
 8010a34:	693b      	ldr	r3, [r7, #16]
 8010a36:	609a      	str	r2, [r3, #8]
 8010a38:	e00d      	b.n	8010a56 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010a3a:	683b      	ldr	r3, [r7, #0]
 8010a3c:	3301      	adds	r3, #1
 8010a3e:	603b      	str	r3, [r7, #0]
 8010a40:	683b      	ldr	r3, [r7, #0]
 8010a42:	781b      	ldrb	r3, [r3, #0]
 8010a44:	2b2f      	cmp	r3, #47	@ 0x2f
 8010a46:	d0f8      	beq.n	8010a3a <follow_path+0x2e>
 8010a48:	683b      	ldr	r3, [r7, #0]
 8010a4a:	781b      	ldrb	r3, [r3, #0]
 8010a4c:	2b5c      	cmp	r3, #92	@ 0x5c
 8010a4e:	d0f4      	beq.n	8010a3a <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8010a50:	693b      	ldr	r3, [r7, #16]
 8010a52:	2200      	movs	r2, #0
 8010a54:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010a56:	683b      	ldr	r3, [r7, #0]
 8010a58:	781b      	ldrb	r3, [r3, #0]
 8010a5a:	2b1f      	cmp	r3, #31
 8010a5c:	d80a      	bhi.n	8010a74 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	2280      	movs	r2, #128	@ 0x80
 8010a62:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8010a66:	2100      	movs	r1, #0
 8010a68:	6878      	ldr	r0, [r7, #4]
 8010a6a:	f7ff f8a4 	bl	800fbb6 <dir_sdi>
 8010a6e:	4603      	mov	r3, r0
 8010a70:	75fb      	strb	r3, [r7, #23]
 8010a72:	e05b      	b.n	8010b2c <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010a74:	463b      	mov	r3, r7
 8010a76:	4619      	mov	r1, r3
 8010a78:	6878      	ldr	r0, [r7, #4]
 8010a7a:	f7ff fdc1 	bl	8010600 <create_name>
 8010a7e:	4603      	mov	r3, r0
 8010a80:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010a82:	7dfb      	ldrb	r3, [r7, #23]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d14c      	bne.n	8010b22 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8010a88:	6878      	ldr	r0, [r7, #4]
 8010a8a:	f7ff fc00 	bl	801028e <dir_find>
 8010a8e:	4603      	mov	r3, r0
 8010a90:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8010a98:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8010a9a:	7dfb      	ldrb	r3, [r7, #23]
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d01b      	beq.n	8010ad8 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010aa0:	7dfb      	ldrb	r3, [r7, #23]
 8010aa2:	2b04      	cmp	r3, #4
 8010aa4:	d13f      	bne.n	8010b26 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8010aa6:	7afb      	ldrb	r3, [r7, #11]
 8010aa8:	f003 0320 	and.w	r3, r3, #32
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d00b      	beq.n	8010ac8 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8010ab0:	7afb      	ldrb	r3, [r7, #11]
 8010ab2:	f003 0304 	and.w	r3, r3, #4
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d031      	beq.n	8010b1e <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	2280      	movs	r2, #128	@ 0x80
 8010abe:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
						res = FR_OK;
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8010ac6:	e02e      	b.n	8010b26 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010ac8:	7afb      	ldrb	r3, [r7, #11]
 8010aca:	f003 0304 	and.w	r3, r3, #4
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d129      	bne.n	8010b26 <follow_path+0x11a>
 8010ad2:	2305      	movs	r3, #5
 8010ad4:	75fb      	strb	r3, [r7, #23]
				break;
 8010ad6:	e026      	b.n	8010b26 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010ad8:	7afb      	ldrb	r3, [r7, #11]
 8010ada:	f003 0304 	and.w	r3, r3, #4
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d123      	bne.n	8010b2a <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010ae2:	693b      	ldr	r3, [r7, #16]
 8010ae4:	799b      	ldrb	r3, [r3, #6]
 8010ae6:	f003 0310 	and.w	r3, r3, #16
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d102      	bne.n	8010af4 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8010aee:	2305      	movs	r3, #5
 8010af0:	75fb      	strb	r3, [r7, #23]
 8010af2:	e01b      	b.n	8010b2c <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	695b      	ldr	r3, [r3, #20]
 8010afe:	68fa      	ldr	r2, [r7, #12]
 8010b00:	8992      	ldrh	r2, [r2, #12]
 8010b02:	fbb3 f0f2 	udiv	r0, r3, r2
 8010b06:	fb00 f202 	mul.w	r2, r0, r2
 8010b0a:	1a9b      	subs	r3, r3, r2
 8010b0c:	440b      	add	r3, r1
 8010b0e:	4619      	mov	r1, r3
 8010b10:	68f8      	ldr	r0, [r7, #12]
 8010b12:	f7ff f9f6 	bl	800ff02 <ld_clust>
 8010b16:	4602      	mov	r2, r0
 8010b18:	693b      	ldr	r3, [r7, #16]
 8010b1a:	609a      	str	r2, [r3, #8]
 8010b1c:	e7aa      	b.n	8010a74 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8010b1e:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010b20:	e7a8      	b.n	8010a74 <follow_path+0x68>
			if (res != FR_OK) break;
 8010b22:	bf00      	nop
 8010b24:	e002      	b.n	8010b2c <follow_path+0x120>
				break;
 8010b26:	bf00      	nop
 8010b28:	e000      	b.n	8010b2c <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010b2a:	bf00      	nop
			}
		}
	}

	return res;
 8010b2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b2e:	4618      	mov	r0, r3
 8010b30:	3718      	adds	r7, #24
 8010b32:	46bd      	mov	sp, r7
 8010b34:	bd80      	pop	{r7, pc}

08010b36 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010b36:	b480      	push	{r7}
 8010b38:	b087      	sub	sp, #28
 8010b3a:	af00      	add	r7, sp, #0
 8010b3c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8010b42:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d031      	beq.n	8010bb0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	617b      	str	r3, [r7, #20]
 8010b52:	e002      	b.n	8010b5a <get_ldnumber+0x24>
 8010b54:	697b      	ldr	r3, [r7, #20]
 8010b56:	3301      	adds	r3, #1
 8010b58:	617b      	str	r3, [r7, #20]
 8010b5a:	697b      	ldr	r3, [r7, #20]
 8010b5c:	781b      	ldrb	r3, [r3, #0]
 8010b5e:	2b1f      	cmp	r3, #31
 8010b60:	d903      	bls.n	8010b6a <get_ldnumber+0x34>
 8010b62:	697b      	ldr	r3, [r7, #20]
 8010b64:	781b      	ldrb	r3, [r3, #0]
 8010b66:	2b3a      	cmp	r3, #58	@ 0x3a
 8010b68:	d1f4      	bne.n	8010b54 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010b6a:	697b      	ldr	r3, [r7, #20]
 8010b6c:	781b      	ldrb	r3, [r3, #0]
 8010b6e:	2b3a      	cmp	r3, #58	@ 0x3a
 8010b70:	d11c      	bne.n	8010bac <get_ldnumber+0x76>
			tp = *path;
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	1c5a      	adds	r2, r3, #1
 8010b7c:	60fa      	str	r2, [r7, #12]
 8010b7e:	781b      	ldrb	r3, [r3, #0]
 8010b80:	3b30      	subs	r3, #48	@ 0x30
 8010b82:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010b84:	68bb      	ldr	r3, [r7, #8]
 8010b86:	2b09      	cmp	r3, #9
 8010b88:	d80e      	bhi.n	8010ba8 <get_ldnumber+0x72>
 8010b8a:	68fa      	ldr	r2, [r7, #12]
 8010b8c:	697b      	ldr	r3, [r7, #20]
 8010b8e:	429a      	cmp	r2, r3
 8010b90:	d10a      	bne.n	8010ba8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010b92:	68bb      	ldr	r3, [r7, #8]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d107      	bne.n	8010ba8 <get_ldnumber+0x72>
					vol = (int)i;
 8010b98:	68bb      	ldr	r3, [r7, #8]
 8010b9a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010b9c:	697b      	ldr	r3, [r7, #20]
 8010b9e:	3301      	adds	r3, #1
 8010ba0:	617b      	str	r3, [r7, #20]
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	697a      	ldr	r2, [r7, #20]
 8010ba6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010ba8:	693b      	ldr	r3, [r7, #16]
 8010baa:	e002      	b.n	8010bb2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010bac:	2300      	movs	r3, #0
 8010bae:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010bb0:	693b      	ldr	r3, [r7, #16]
}
 8010bb2:	4618      	mov	r0, r3
 8010bb4:	371c      	adds	r7, #28
 8010bb6:	46bd      	mov	sp, r7
 8010bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bbc:	4770      	bx	lr
	...

08010bc0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b082      	sub	sp, #8
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
 8010bc8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	2200      	movs	r2, #0
 8010bce:	70da      	strb	r2, [r3, #3]
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8010bd6:	639a      	str	r2, [r3, #56]	@ 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010bd8:	6839      	ldr	r1, [r7, #0]
 8010bda:	6878      	ldr	r0, [r7, #4]
 8010bdc:	f7fe fc0c 	bl	800f3f8 <move_window>
 8010be0:	4603      	mov	r3, r0
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d001      	beq.n	8010bea <check_fs+0x2a>
 8010be6:	2304      	movs	r3, #4
 8010be8:	e038      	b.n	8010c5c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	333c      	adds	r3, #60	@ 0x3c
 8010bee:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	f7fe f950 	bl	800ee98 <ld_word>
 8010bf8:	4603      	mov	r3, r0
 8010bfa:	461a      	mov	r2, r3
 8010bfc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8010c00:	429a      	cmp	r2, r3
 8010c02:	d001      	beq.n	8010c08 <check_fs+0x48>
 8010c04:	2303      	movs	r3, #3
 8010c06:	e029      	b.n	8010c5c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010c0e:	2be9      	cmp	r3, #233	@ 0xe9
 8010c10:	d009      	beq.n	8010c26 <check_fs+0x66>
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010c18:	2beb      	cmp	r3, #235	@ 0xeb
 8010c1a:	d11e      	bne.n	8010c5a <check_fs+0x9a>
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8010c22:	2b90      	cmp	r3, #144	@ 0x90
 8010c24:	d119      	bne.n	8010c5a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	333c      	adds	r3, #60	@ 0x3c
 8010c2a:	3336      	adds	r3, #54	@ 0x36
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	f7fe f94b 	bl	800eec8 <ld_dword>
 8010c32:	4603      	mov	r3, r0
 8010c34:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8010c38:	4a0a      	ldr	r2, [pc, #40]	@ (8010c64 <check_fs+0xa4>)
 8010c3a:	4293      	cmp	r3, r2
 8010c3c:	d101      	bne.n	8010c42 <check_fs+0x82>
 8010c3e:	2300      	movs	r3, #0
 8010c40:	e00c      	b.n	8010c5c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	333c      	adds	r3, #60	@ 0x3c
 8010c46:	3352      	adds	r3, #82	@ 0x52
 8010c48:	4618      	mov	r0, r3
 8010c4a:	f7fe f93d 	bl	800eec8 <ld_dword>
 8010c4e:	4603      	mov	r3, r0
 8010c50:	4a05      	ldr	r2, [pc, #20]	@ (8010c68 <check_fs+0xa8>)
 8010c52:	4293      	cmp	r3, r2
 8010c54:	d101      	bne.n	8010c5a <check_fs+0x9a>
 8010c56:	2300      	movs	r3, #0
 8010c58:	e000      	b.n	8010c5c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010c5a:	2302      	movs	r3, #2
}
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	3708      	adds	r7, #8
 8010c60:	46bd      	mov	sp, r7
 8010c62:	bd80      	pop	{r7, pc}
 8010c64:	00544146 	.word	0x00544146
 8010c68:	33544146 	.word	0x33544146

08010c6c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010c6c:	b580      	push	{r7, lr}
 8010c6e:	b096      	sub	sp, #88	@ 0x58
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	60f8      	str	r0, [r7, #12]
 8010c74:	60b9      	str	r1, [r7, #8]
 8010c76:	4613      	mov	r3, r2
 8010c78:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010c7a:	68bb      	ldr	r3, [r7, #8]
 8010c7c:	2200      	movs	r2, #0
 8010c7e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010c80:	68f8      	ldr	r0, [r7, #12]
 8010c82:	f7ff ff58 	bl	8010b36 <get_ldnumber>
 8010c86:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010c88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	da01      	bge.n	8010c92 <find_volume+0x26>
 8010c8e:	230b      	movs	r3, #11
 8010c90:	e268      	b.n	8011164 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010c92:	4a9f      	ldr	r2, [pc, #636]	@ (8010f10 <find_volume+0x2a4>)
 8010c94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010c9a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d101      	bne.n	8010ca6 <find_volume+0x3a>
 8010ca2:	230c      	movs	r3, #12
 8010ca4:	e25e      	b.n	8011164 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8010ca6:	68bb      	ldr	r3, [r7, #8]
 8010ca8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010caa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010cac:	79fb      	ldrb	r3, [r7, #7]
 8010cae:	f023 0301 	bic.w	r3, r3, #1
 8010cb2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cb6:	781b      	ldrb	r3, [r3, #0]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d01a      	beq.n	8010cf2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8010cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cbe:	785b      	ldrb	r3, [r3, #1]
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	f7fe f849 	bl	800ed58 <disk_status>
 8010cc6:	4603      	mov	r3, r0
 8010cc8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010ccc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010cd0:	f003 0301 	and.w	r3, r3, #1
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d10c      	bne.n	8010cf2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010cd8:	79fb      	ldrb	r3, [r7, #7]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d007      	beq.n	8010cee <find_volume+0x82>
 8010cde:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010ce2:	f003 0304 	and.w	r3, r3, #4
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d001      	beq.n	8010cee <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8010cea:	230a      	movs	r3, #10
 8010cec:	e23a      	b.n	8011164 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8010cee:	2300      	movs	r3, #0
 8010cf0:	e238      	b.n	8011164 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cf4:	2200      	movs	r2, #0
 8010cf6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010cf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010cfa:	b2da      	uxtb	r2, r3
 8010cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cfe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d02:	785b      	ldrb	r3, [r3, #1]
 8010d04:	4618      	mov	r0, r3
 8010d06:	f7fe f841 	bl	800ed8c <disk_initialize>
 8010d0a:	4603      	mov	r3, r0
 8010d0c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010d10:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010d14:	f003 0301 	and.w	r3, r3, #1
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d001      	beq.n	8010d20 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010d1c:	2303      	movs	r3, #3
 8010d1e:	e221      	b.n	8011164 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010d20:	79fb      	ldrb	r3, [r7, #7]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d007      	beq.n	8010d36 <find_volume+0xca>
 8010d26:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010d2a:	f003 0304 	and.w	r3, r3, #4
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d001      	beq.n	8010d36 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8010d32:	230a      	movs	r3, #10
 8010d34:	e216      	b.n	8011164 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8010d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d38:	7858      	ldrb	r0, [r3, #1]
 8010d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d3c:	330c      	adds	r3, #12
 8010d3e:	461a      	mov	r2, r3
 8010d40:	2102      	movs	r1, #2
 8010d42:	f7fe f88b 	bl	800ee5c <disk_ioctl>
 8010d46:	4603      	mov	r3, r0
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d001      	beq.n	8010d50 <find_volume+0xe4>
 8010d4c:	2301      	movs	r3, #1
 8010d4e:	e209      	b.n	8011164 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8010d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d52:	899b      	ldrh	r3, [r3, #12]
 8010d54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010d58:	d80d      	bhi.n	8010d76 <find_volume+0x10a>
 8010d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d5c:	899b      	ldrh	r3, [r3, #12]
 8010d5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010d62:	d308      	bcc.n	8010d76 <find_volume+0x10a>
 8010d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d66:	899b      	ldrh	r3, [r3, #12]
 8010d68:	461a      	mov	r2, r3
 8010d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d6c:	899b      	ldrh	r3, [r3, #12]
 8010d6e:	3b01      	subs	r3, #1
 8010d70:	4013      	ands	r3, r2
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d001      	beq.n	8010d7a <find_volume+0x10e>
 8010d76:	2301      	movs	r3, #1
 8010d78:	e1f4      	b.n	8011164 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010d7a:	2300      	movs	r3, #0
 8010d7c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010d7e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010d80:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010d82:	f7ff ff1d 	bl	8010bc0 <check_fs>
 8010d86:	4603      	mov	r3, r0
 8010d88:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010d8c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010d90:	2b02      	cmp	r3, #2
 8010d92:	d149      	bne.n	8010e28 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010d94:	2300      	movs	r3, #0
 8010d96:	643b      	str	r3, [r7, #64]	@ 0x40
 8010d98:	e01e      	b.n	8010dd8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d9c:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8010da0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010da2:	011b      	lsls	r3, r3, #4
 8010da4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8010da8:	4413      	add	r3, r2
 8010daa:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010dae:	3304      	adds	r3, #4
 8010db0:	781b      	ldrb	r3, [r3, #0]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d006      	beq.n	8010dc4 <find_volume+0x158>
 8010db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010db8:	3308      	adds	r3, #8
 8010dba:	4618      	mov	r0, r3
 8010dbc:	f7fe f884 	bl	800eec8 <ld_dword>
 8010dc0:	4602      	mov	r2, r0
 8010dc2:	e000      	b.n	8010dc6 <find_volume+0x15a>
 8010dc4:	2200      	movs	r2, #0
 8010dc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010dc8:	009b      	lsls	r3, r3, #2
 8010dca:	3358      	adds	r3, #88	@ 0x58
 8010dcc:	443b      	add	r3, r7
 8010dce:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010dd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010dd4:	3301      	adds	r3, #1
 8010dd6:	643b      	str	r3, [r7, #64]	@ 0x40
 8010dd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010dda:	2b03      	cmp	r3, #3
 8010ddc:	d9dd      	bls.n	8010d9a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010dde:	2300      	movs	r3, #0
 8010de0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8010de2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d002      	beq.n	8010dee <find_volume+0x182>
 8010de8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010dea:	3b01      	subs	r3, #1
 8010dec:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010dee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010df0:	009b      	lsls	r3, r3, #2
 8010df2:	3358      	adds	r3, #88	@ 0x58
 8010df4:	443b      	add	r3, r7
 8010df6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010dfa:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010dfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d005      	beq.n	8010e0e <find_volume+0x1a2>
 8010e02:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010e04:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010e06:	f7ff fedb 	bl	8010bc0 <check_fs>
 8010e0a:	4603      	mov	r3, r0
 8010e0c:	e000      	b.n	8010e10 <find_volume+0x1a4>
 8010e0e:	2303      	movs	r3, #3
 8010e10:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010e14:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010e18:	2b01      	cmp	r3, #1
 8010e1a:	d905      	bls.n	8010e28 <find_volume+0x1bc>
 8010e1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010e1e:	3301      	adds	r3, #1
 8010e20:	643b      	str	r3, [r7, #64]	@ 0x40
 8010e22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010e24:	2b03      	cmp	r3, #3
 8010e26:	d9e2      	bls.n	8010dee <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010e28:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010e2c:	2b04      	cmp	r3, #4
 8010e2e:	d101      	bne.n	8010e34 <find_volume+0x1c8>
 8010e30:	2301      	movs	r3, #1
 8010e32:	e197      	b.n	8011164 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010e34:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010e38:	2b01      	cmp	r3, #1
 8010e3a:	d901      	bls.n	8010e40 <find_volume+0x1d4>
 8010e3c:	230d      	movs	r3, #13
 8010e3e:	e191      	b.n	8011164 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e42:	333c      	adds	r3, #60	@ 0x3c
 8010e44:	330b      	adds	r3, #11
 8010e46:	4618      	mov	r0, r3
 8010e48:	f7fe f826 	bl	800ee98 <ld_word>
 8010e4c:	4603      	mov	r3, r0
 8010e4e:	461a      	mov	r2, r3
 8010e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e52:	899b      	ldrh	r3, [r3, #12]
 8010e54:	429a      	cmp	r2, r3
 8010e56:	d001      	beq.n	8010e5c <find_volume+0x1f0>
 8010e58:	230d      	movs	r3, #13
 8010e5a:	e183      	b.n	8011164 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e5e:	333c      	adds	r3, #60	@ 0x3c
 8010e60:	3316      	adds	r3, #22
 8010e62:	4618      	mov	r0, r3
 8010e64:	f7fe f818 	bl	800ee98 <ld_word>
 8010e68:	4603      	mov	r3, r0
 8010e6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010e6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d106      	bne.n	8010e80 <find_volume+0x214>
 8010e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e74:	333c      	adds	r3, #60	@ 0x3c
 8010e76:	3324      	adds	r3, #36	@ 0x24
 8010e78:	4618      	mov	r0, r3
 8010e7a:	f7fe f825 	bl	800eec8 <ld_dword>
 8010e7e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8010e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e82:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010e84:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e88:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 8010e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e8e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e92:	789b      	ldrb	r3, [r3, #2]
 8010e94:	2b01      	cmp	r3, #1
 8010e96:	d005      	beq.n	8010ea4 <find_volume+0x238>
 8010e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e9a:	789b      	ldrb	r3, [r3, #2]
 8010e9c:	2b02      	cmp	r3, #2
 8010e9e:	d001      	beq.n	8010ea4 <find_volume+0x238>
 8010ea0:	230d      	movs	r3, #13
 8010ea2:	e15f      	b.n	8011164 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ea6:	789b      	ldrb	r3, [r3, #2]
 8010ea8:	461a      	mov	r2, r3
 8010eaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010eac:	fb02 f303 	mul.w	r3, r2, r3
 8010eb0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010eb4:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8010eb8:	461a      	mov	r2, r3
 8010eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ebc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ec0:	895b      	ldrh	r3, [r3, #10]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d008      	beq.n	8010ed8 <find_volume+0x26c>
 8010ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ec8:	895b      	ldrh	r3, [r3, #10]
 8010eca:	461a      	mov	r2, r3
 8010ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ece:	895b      	ldrh	r3, [r3, #10]
 8010ed0:	3b01      	subs	r3, #1
 8010ed2:	4013      	ands	r3, r2
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d001      	beq.n	8010edc <find_volume+0x270>
 8010ed8:	230d      	movs	r3, #13
 8010eda:	e143      	b.n	8011164 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ede:	333c      	adds	r3, #60	@ 0x3c
 8010ee0:	3311      	adds	r3, #17
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	f7fd ffd8 	bl	800ee98 <ld_word>
 8010ee8:	4603      	mov	r3, r0
 8010eea:	461a      	mov	r2, r3
 8010eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010eee:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ef2:	891b      	ldrh	r3, [r3, #8]
 8010ef4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010ef6:	8992      	ldrh	r2, [r2, #12]
 8010ef8:	0952      	lsrs	r2, r2, #5
 8010efa:	b292      	uxth	r2, r2
 8010efc:	fbb3 f1f2 	udiv	r1, r3, r2
 8010f00:	fb01 f202 	mul.w	r2, r1, r2
 8010f04:	1a9b      	subs	r3, r3, r2
 8010f06:	b29b      	uxth	r3, r3
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d003      	beq.n	8010f14 <find_volume+0x2a8>
 8010f0c:	230d      	movs	r3, #13
 8010f0e:	e129      	b.n	8011164 <find_volume+0x4f8>
 8010f10:	2400283c 	.word	0x2400283c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f16:	333c      	adds	r3, #60	@ 0x3c
 8010f18:	3313      	adds	r3, #19
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	f7fd ffbc 	bl	800ee98 <ld_word>
 8010f20:	4603      	mov	r3, r0
 8010f22:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010f24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d106      	bne.n	8010f38 <find_volume+0x2cc>
 8010f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f2c:	333c      	adds	r3, #60	@ 0x3c
 8010f2e:	3320      	adds	r3, #32
 8010f30:	4618      	mov	r0, r3
 8010f32:	f7fd ffc9 	bl	800eec8 <ld_dword>
 8010f36:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f3a:	333c      	adds	r3, #60	@ 0x3c
 8010f3c:	330e      	adds	r3, #14
 8010f3e:	4618      	mov	r0, r3
 8010f40:	f7fd ffaa 	bl	800ee98 <ld_word>
 8010f44:	4603      	mov	r3, r0
 8010f46:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010f48:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d101      	bne.n	8010f52 <find_volume+0x2e6>
 8010f4e:	230d      	movs	r3, #13
 8010f50:	e108      	b.n	8011164 <find_volume+0x4f8>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010f52:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010f54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010f56:	4413      	add	r3, r2
 8010f58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010f5a:	8911      	ldrh	r1, [r2, #8]
 8010f5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010f5e:	8992      	ldrh	r2, [r2, #12]
 8010f60:	0952      	lsrs	r2, r2, #5
 8010f62:	b292      	uxth	r2, r2
 8010f64:	fbb1 f2f2 	udiv	r2, r1, r2
 8010f68:	b292      	uxth	r2, r2
 8010f6a:	4413      	add	r3, r2
 8010f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010f6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f72:	429a      	cmp	r2, r3
 8010f74:	d201      	bcs.n	8010f7a <find_volume+0x30e>
 8010f76:	230d      	movs	r3, #13
 8010f78:	e0f4      	b.n	8011164 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010f7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f7e:	1ad3      	subs	r3, r2, r3
 8010f80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010f82:	8952      	ldrh	r2, [r2, #10]
 8010f84:	fbb3 f3f2 	udiv	r3, r3, r2
 8010f88:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d101      	bne.n	8010f94 <find_volume+0x328>
 8010f90:	230d      	movs	r3, #13
 8010f92:	e0e7      	b.n	8011164 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8010f94:	2303      	movs	r3, #3
 8010f96:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f9c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8010fa0:	4293      	cmp	r3, r2
 8010fa2:	d802      	bhi.n	8010faa <find_volume+0x33e>
 8010fa4:	2302      	movs	r3, #2
 8010fa6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fac:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8010fb0:	4293      	cmp	r3, r2
 8010fb2:	d802      	bhi.n	8010fba <find_volume+0x34e>
 8010fb4:	2301      	movs	r3, #1
 8010fb6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fbc:	1c9a      	adds	r2, r3, #2
 8010fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fc0:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 8010fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fc4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010fc6:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010fc8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010fca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010fcc:	441a      	add	r2, r3
 8010fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fd0:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 8010fd2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fd6:	441a      	add	r2, r3
 8010fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fda:	635a      	str	r2, [r3, #52]	@ 0x34
		if (fmt == FS_FAT32) {
 8010fdc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010fe0:	2b03      	cmp	r3, #3
 8010fe2:	d11e      	bne.n	8011022 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fe6:	333c      	adds	r3, #60	@ 0x3c
 8010fe8:	332a      	adds	r3, #42	@ 0x2a
 8010fea:	4618      	mov	r0, r3
 8010fec:	f7fd ff54 	bl	800ee98 <ld_word>
 8010ff0:	4603      	mov	r3, r0
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d001      	beq.n	8010ffa <find_volume+0x38e>
 8010ff6:	230d      	movs	r3, #13
 8010ff8:	e0b4      	b.n	8011164 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ffc:	891b      	ldrh	r3, [r3, #8]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d001      	beq.n	8011006 <find_volume+0x39a>
 8011002:	230d      	movs	r3, #13
 8011004:	e0ae      	b.n	8011164 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011008:	333c      	adds	r3, #60	@ 0x3c
 801100a:	332c      	adds	r3, #44	@ 0x2c
 801100c:	4618      	mov	r0, r3
 801100e:	f7fd ff5b 	bl	800eec8 <ld_dword>
 8011012:	4602      	mov	r2, r0
 8011014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011016:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801101a:	6a1b      	ldr	r3, [r3, #32]
 801101c:	009b      	lsls	r3, r3, #2
 801101e:	647b      	str	r3, [r7, #68]	@ 0x44
 8011020:	e01f      	b.n	8011062 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8011022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011024:	891b      	ldrh	r3, [r3, #8]
 8011026:	2b00      	cmp	r3, #0
 8011028:	d101      	bne.n	801102e <find_volume+0x3c2>
 801102a:	230d      	movs	r3, #13
 801102c:	e09a      	b.n	8011164 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801102e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011030:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011032:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011034:	441a      	add	r2, r3
 8011036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011038:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801103a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801103e:	2b02      	cmp	r3, #2
 8011040:	d103      	bne.n	801104a <find_volume+0x3de>
 8011042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011044:	6a1b      	ldr	r3, [r3, #32]
 8011046:	005b      	lsls	r3, r3, #1
 8011048:	e00a      	b.n	8011060 <find_volume+0x3f4>
 801104a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801104c:	6a1a      	ldr	r2, [r3, #32]
 801104e:	4613      	mov	r3, r2
 8011050:	005b      	lsls	r3, r3, #1
 8011052:	4413      	add	r3, r2
 8011054:	085a      	lsrs	r2, r3, #1
 8011056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011058:	6a1b      	ldr	r3, [r3, #32]
 801105a:	f003 0301 	and.w	r3, r3, #1
 801105e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8011060:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8011062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011064:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011068:	899b      	ldrh	r3, [r3, #12]
 801106a:	4619      	mov	r1, r3
 801106c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801106e:	440b      	add	r3, r1
 8011070:	3b01      	subs	r3, #1
 8011072:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011074:	8989      	ldrh	r1, [r1, #12]
 8011076:	fbb3 f3f1 	udiv	r3, r3, r1
 801107a:	429a      	cmp	r2, r3
 801107c:	d201      	bcs.n	8011082 <find_volume+0x416>
 801107e:	230d      	movs	r3, #13
 8011080:	e070      	b.n	8011164 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8011082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011084:	f04f 32ff 	mov.w	r2, #4294967295
 8011088:	619a      	str	r2, [r3, #24]
 801108a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801108c:	699a      	ldr	r2, [r3, #24]
 801108e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011090:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8011092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011094:	2280      	movs	r2, #128	@ 0x80
 8011096:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8011098:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801109c:	2b03      	cmp	r3, #3
 801109e:	d149      	bne.n	8011134 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80110a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110a2:	333c      	adds	r3, #60	@ 0x3c
 80110a4:	3330      	adds	r3, #48	@ 0x30
 80110a6:	4618      	mov	r0, r3
 80110a8:	f7fd fef6 	bl	800ee98 <ld_word>
 80110ac:	4603      	mov	r3, r0
 80110ae:	2b01      	cmp	r3, #1
 80110b0:	d140      	bne.n	8011134 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80110b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80110b4:	3301      	adds	r3, #1
 80110b6:	4619      	mov	r1, r3
 80110b8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80110ba:	f7fe f99d 	bl	800f3f8 <move_window>
 80110be:	4603      	mov	r3, r0
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d137      	bne.n	8011134 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80110c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110c6:	2200      	movs	r2, #0
 80110c8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80110ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110cc:	333c      	adds	r3, #60	@ 0x3c
 80110ce:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80110d2:	4618      	mov	r0, r3
 80110d4:	f7fd fee0 	bl	800ee98 <ld_word>
 80110d8:	4603      	mov	r3, r0
 80110da:	461a      	mov	r2, r3
 80110dc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80110e0:	429a      	cmp	r2, r3
 80110e2:	d127      	bne.n	8011134 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80110e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110e6:	333c      	adds	r3, #60	@ 0x3c
 80110e8:	4618      	mov	r0, r3
 80110ea:	f7fd feed 	bl	800eec8 <ld_dword>
 80110ee:	4603      	mov	r3, r0
 80110f0:	4a1e      	ldr	r2, [pc, #120]	@ (801116c <find_volume+0x500>)
 80110f2:	4293      	cmp	r3, r2
 80110f4:	d11e      	bne.n	8011134 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80110f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110f8:	333c      	adds	r3, #60	@ 0x3c
 80110fa:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80110fe:	4618      	mov	r0, r3
 8011100:	f7fd fee2 	bl	800eec8 <ld_dword>
 8011104:	4603      	mov	r3, r0
 8011106:	4a1a      	ldr	r2, [pc, #104]	@ (8011170 <find_volume+0x504>)
 8011108:	4293      	cmp	r3, r2
 801110a:	d113      	bne.n	8011134 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801110c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801110e:	333c      	adds	r3, #60	@ 0x3c
 8011110:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8011114:	4618      	mov	r0, r3
 8011116:	f7fd fed7 	bl	800eec8 <ld_dword>
 801111a:	4602      	mov	r2, r0
 801111c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801111e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8011120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011122:	333c      	adds	r3, #60	@ 0x3c
 8011124:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8011128:	4618      	mov	r0, r3
 801112a:	f7fd fecd 	bl	800eec8 <ld_dword>
 801112e:	4602      	mov	r2, r0
 8011130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011132:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8011134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011136:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801113a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801113c:	4b0d      	ldr	r3, [pc, #52]	@ (8011174 <find_volume+0x508>)
 801113e:	881b      	ldrh	r3, [r3, #0]
 8011140:	3301      	adds	r3, #1
 8011142:	b29a      	uxth	r2, r3
 8011144:	4b0b      	ldr	r3, [pc, #44]	@ (8011174 <find_volume+0x508>)
 8011146:	801a      	strh	r2, [r3, #0]
 8011148:	4b0a      	ldr	r3, [pc, #40]	@ (8011174 <find_volume+0x508>)
 801114a:	881a      	ldrh	r2, [r3, #0]
 801114c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801114e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8011150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011152:	4a09      	ldr	r2, [pc, #36]	@ (8011178 <find_volume+0x50c>)
 8011154:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8011156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011158:	2200      	movs	r2, #0
 801115a:	61da      	str	r2, [r3, #28]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801115c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801115e:	f7fe f8e3 	bl	800f328 <clear_lock>
#endif
	return FR_OK;
 8011162:	2300      	movs	r3, #0
}
 8011164:	4618      	mov	r0, r3
 8011166:	3758      	adds	r7, #88	@ 0x58
 8011168:	46bd      	mov	sp, r7
 801116a:	bd80      	pop	{r7, pc}
 801116c:	41615252 	.word	0x41615252
 8011170:	61417272 	.word	0x61417272
 8011174:	24002840 	.word	0x24002840
 8011178:	24002864 	.word	0x24002864

0801117c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801117c:	b580      	push	{r7, lr}
 801117e:	b084      	sub	sp, #16
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
 8011184:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8011186:	2309      	movs	r3, #9
 8011188:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d01c      	beq.n	80111ca <validate+0x4e>
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	2b00      	cmp	r3, #0
 8011196:	d018      	beq.n	80111ca <validate+0x4e>
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	781b      	ldrb	r3, [r3, #0]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d013      	beq.n	80111ca <validate+0x4e>
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	889a      	ldrh	r2, [r3, #4]
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	88db      	ldrh	r3, [r3, #6]
 80111ac:	429a      	cmp	r2, r3
 80111ae:	d10c      	bne.n	80111ca <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	785b      	ldrb	r3, [r3, #1]
 80111b6:	4618      	mov	r0, r3
 80111b8:	f7fd fdce 	bl	800ed58 <disk_status>
 80111bc:	4603      	mov	r3, r0
 80111be:	f003 0301 	and.w	r3, r3, #1
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d101      	bne.n	80111ca <validate+0x4e>
			res = FR_OK;
 80111c6:	2300      	movs	r3, #0
 80111c8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80111ca:	7bfb      	ldrb	r3, [r7, #15]
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d102      	bne.n	80111d6 <validate+0x5a>
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	e000      	b.n	80111d8 <validate+0x5c>
 80111d6:	2300      	movs	r3, #0
 80111d8:	683a      	ldr	r2, [r7, #0]
 80111da:	6013      	str	r3, [r2, #0]
	return res;
 80111dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80111de:	4618      	mov	r0, r3
 80111e0:	3710      	adds	r7, #16
 80111e2:	46bd      	mov	sp, r7
 80111e4:	bd80      	pop	{r7, pc}
	...

080111e8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80111e8:	b580      	push	{r7, lr}
 80111ea:	b088      	sub	sp, #32
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	60f8      	str	r0, [r7, #12]
 80111f0:	60b9      	str	r1, [r7, #8]
 80111f2:	4613      	mov	r3, r2
 80111f4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80111f6:	68bb      	ldr	r3, [r7, #8]
 80111f8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80111fa:	f107 0310 	add.w	r3, r7, #16
 80111fe:	4618      	mov	r0, r3
 8011200:	f7ff fc99 	bl	8010b36 <get_ldnumber>
 8011204:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011206:	69fb      	ldr	r3, [r7, #28]
 8011208:	2b00      	cmp	r3, #0
 801120a:	da01      	bge.n	8011210 <f_mount+0x28>
 801120c:	230b      	movs	r3, #11
 801120e:	e02b      	b.n	8011268 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011210:	4a17      	ldr	r2, [pc, #92]	@ (8011270 <f_mount+0x88>)
 8011212:	69fb      	ldr	r3, [r7, #28]
 8011214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011218:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801121a:	69bb      	ldr	r3, [r7, #24]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d005      	beq.n	801122c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011220:	69b8      	ldr	r0, [r7, #24]
 8011222:	f7fe f881 	bl	800f328 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011226:	69bb      	ldr	r3, [r7, #24]
 8011228:	2200      	movs	r2, #0
 801122a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d002      	beq.n	8011238 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	2200      	movs	r2, #0
 8011236:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011238:	68fa      	ldr	r2, [r7, #12]
 801123a:	490d      	ldr	r1, [pc, #52]	@ (8011270 <f_mount+0x88>)
 801123c:	69fb      	ldr	r3, [r7, #28]
 801123e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	2b00      	cmp	r3, #0
 8011246:	d002      	beq.n	801124e <f_mount+0x66>
 8011248:	79fb      	ldrb	r3, [r7, #7]
 801124a:	2b01      	cmp	r3, #1
 801124c:	d001      	beq.n	8011252 <f_mount+0x6a>
 801124e:	2300      	movs	r3, #0
 8011250:	e00a      	b.n	8011268 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8011252:	f107 010c 	add.w	r1, r7, #12
 8011256:	f107 0308 	add.w	r3, r7, #8
 801125a:	2200      	movs	r2, #0
 801125c:	4618      	mov	r0, r3
 801125e:	f7ff fd05 	bl	8010c6c <find_volume>
 8011262:	4603      	mov	r3, r0
 8011264:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8011266:	7dfb      	ldrb	r3, [r7, #23]
}
 8011268:	4618      	mov	r0, r3
 801126a:	3720      	adds	r7, #32
 801126c:	46bd      	mov	sp, r7
 801126e:	bd80      	pop	{r7, pc}
 8011270:	2400283c 	.word	0x2400283c

08011274 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8011274:	b580      	push	{r7, lr}
 8011276:	b09a      	sub	sp, #104	@ 0x68
 8011278:	af00      	add	r7, sp, #0
 801127a:	60f8      	str	r0, [r7, #12]
 801127c:	60b9      	str	r1, [r7, #8]
 801127e:	4613      	mov	r3, r2
 8011280:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d101      	bne.n	801128c <f_open+0x18>
 8011288:	2309      	movs	r3, #9
 801128a:	e1b7      	b.n	80115fc <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801128c:	79fb      	ldrb	r3, [r7, #7]
 801128e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011292:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8011294:	79fa      	ldrb	r2, [r7, #7]
 8011296:	f107 0114 	add.w	r1, r7, #20
 801129a:	f107 0308 	add.w	r3, r7, #8
 801129e:	4618      	mov	r0, r3
 80112a0:	f7ff fce4 	bl	8010c6c <find_volume>
 80112a4:	4603      	mov	r3, r0
 80112a6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 80112aa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	f040 819b 	bne.w	80115ea <f_open+0x376>
		dj.obj.fs = fs;
 80112b4:	697b      	ldr	r3, [r7, #20]
 80112b6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80112b8:	68ba      	ldr	r2, [r7, #8]
 80112ba:	f107 0318 	add.w	r3, r7, #24
 80112be:	4611      	mov	r1, r2
 80112c0:	4618      	mov	r0, r3
 80112c2:	f7ff fba3 	bl	8010a0c <follow_path>
 80112c6:	4603      	mov	r3, r0
 80112c8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80112cc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d118      	bne.n	8011306 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80112d4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80112d8:	b25b      	sxtb	r3, r3
 80112da:	2b00      	cmp	r3, #0
 80112dc:	da03      	bge.n	80112e6 <f_open+0x72>
				res = FR_INVALID_NAME;
 80112de:	2306      	movs	r3, #6
 80112e0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80112e4:	e00f      	b.n	8011306 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80112e6:	79fb      	ldrb	r3, [r7, #7]
 80112e8:	2b01      	cmp	r3, #1
 80112ea:	bf8c      	ite	hi
 80112ec:	2301      	movhi	r3, #1
 80112ee:	2300      	movls	r3, #0
 80112f0:	b2db      	uxtb	r3, r3
 80112f2:	461a      	mov	r2, r3
 80112f4:	f107 0318 	add.w	r3, r7, #24
 80112f8:	4611      	mov	r1, r2
 80112fa:	4618      	mov	r0, r3
 80112fc:	f7fd fecc 	bl	800f098 <chk_lock>
 8011300:	4603      	mov	r3, r0
 8011302:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8011306:	79fb      	ldrb	r3, [r7, #7]
 8011308:	f003 031c 	and.w	r3, r3, #28
 801130c:	2b00      	cmp	r3, #0
 801130e:	d07f      	beq.n	8011410 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8011310:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011314:	2b00      	cmp	r3, #0
 8011316:	d017      	beq.n	8011348 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8011318:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801131c:	2b04      	cmp	r3, #4
 801131e:	d10e      	bne.n	801133e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8011320:	f7fd ff16 	bl	800f150 <enq_lock>
 8011324:	4603      	mov	r3, r0
 8011326:	2b00      	cmp	r3, #0
 8011328:	d006      	beq.n	8011338 <f_open+0xc4>
 801132a:	f107 0318 	add.w	r3, r7, #24
 801132e:	4618      	mov	r0, r3
 8011330:	f7ff f86e 	bl	8010410 <dir_register>
 8011334:	4603      	mov	r3, r0
 8011336:	e000      	b.n	801133a <f_open+0xc6>
 8011338:	2312      	movs	r3, #18
 801133a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801133e:	79fb      	ldrb	r3, [r7, #7]
 8011340:	f043 0308 	orr.w	r3, r3, #8
 8011344:	71fb      	strb	r3, [r7, #7]
 8011346:	e010      	b.n	801136a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8011348:	7fbb      	ldrb	r3, [r7, #30]
 801134a:	f003 0311 	and.w	r3, r3, #17
 801134e:	2b00      	cmp	r3, #0
 8011350:	d003      	beq.n	801135a <f_open+0xe6>
					res = FR_DENIED;
 8011352:	2307      	movs	r3, #7
 8011354:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8011358:	e007      	b.n	801136a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801135a:	79fb      	ldrb	r3, [r7, #7]
 801135c:	f003 0304 	and.w	r3, r3, #4
 8011360:	2b00      	cmp	r3, #0
 8011362:	d002      	beq.n	801136a <f_open+0xf6>
 8011364:	2308      	movs	r3, #8
 8011366:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801136a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801136e:	2b00      	cmp	r3, #0
 8011370:	d168      	bne.n	8011444 <f_open+0x1d0>
 8011372:	79fb      	ldrb	r3, [r7, #7]
 8011374:	f003 0308 	and.w	r3, r3, #8
 8011378:	2b00      	cmp	r3, #0
 801137a:	d063      	beq.n	8011444 <f_open+0x1d0>
				dw = GET_FATTIME();
 801137c:	f7fc ffca 	bl	800e314 <get_fattime>
 8011380:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8011382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011384:	330e      	adds	r3, #14
 8011386:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011388:	4618      	mov	r0, r3
 801138a:	f7fd fddb 	bl	800ef44 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801138e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011390:	3316      	adds	r3, #22
 8011392:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011394:	4618      	mov	r0, r3
 8011396:	f7fd fdd5 	bl	800ef44 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801139a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801139c:	330b      	adds	r3, #11
 801139e:	2220      	movs	r2, #32
 80113a0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80113a2:	697b      	ldr	r3, [r7, #20]
 80113a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80113a6:	4611      	mov	r1, r2
 80113a8:	4618      	mov	r0, r3
 80113aa:	f7fe fdaa 	bl	800ff02 <ld_clust>
 80113ae:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80113b0:	697b      	ldr	r3, [r7, #20]
 80113b2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80113b4:	2200      	movs	r2, #0
 80113b6:	4618      	mov	r0, r3
 80113b8:	f7fe fdc2 	bl	800ff40 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80113bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113be:	331c      	adds	r3, #28
 80113c0:	2100      	movs	r1, #0
 80113c2:	4618      	mov	r0, r3
 80113c4:	f7fd fdbe 	bl	800ef44 <st_dword>
					fs->wflag = 1;
 80113c8:	697b      	ldr	r3, [r7, #20]
 80113ca:	2201      	movs	r2, #1
 80113cc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80113ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d037      	beq.n	8011444 <f_open+0x1d0>
						dw = fs->winsect;
 80113d4:	697b      	ldr	r3, [r7, #20]
 80113d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80113d8:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80113da:	f107 0318 	add.w	r3, r7, #24
 80113de:	2200      	movs	r2, #0
 80113e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80113e2:	4618      	mov	r0, r3
 80113e4:	f7fe fab2 	bl	800f94c <remove_chain>
 80113e8:	4603      	mov	r3, r0
 80113ea:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 80113ee:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d126      	bne.n	8011444 <f_open+0x1d0>
							res = move_window(fs, dw);
 80113f6:	697b      	ldr	r3, [r7, #20]
 80113f8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80113fa:	4618      	mov	r0, r3
 80113fc:	f7fd fffc 	bl	800f3f8 <move_window>
 8011400:	4603      	mov	r3, r0
 8011402:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8011406:	697b      	ldr	r3, [r7, #20]
 8011408:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801140a:	3a01      	subs	r2, #1
 801140c:	615a      	str	r2, [r3, #20]
 801140e:	e019      	b.n	8011444 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8011410:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011414:	2b00      	cmp	r3, #0
 8011416:	d115      	bne.n	8011444 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8011418:	7fbb      	ldrb	r3, [r7, #30]
 801141a:	f003 0310 	and.w	r3, r3, #16
 801141e:	2b00      	cmp	r3, #0
 8011420:	d003      	beq.n	801142a <f_open+0x1b6>
					res = FR_NO_FILE;
 8011422:	2304      	movs	r3, #4
 8011424:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8011428:	e00c      	b.n	8011444 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801142a:	79fb      	ldrb	r3, [r7, #7]
 801142c:	f003 0302 	and.w	r3, r3, #2
 8011430:	2b00      	cmp	r3, #0
 8011432:	d007      	beq.n	8011444 <f_open+0x1d0>
 8011434:	7fbb      	ldrb	r3, [r7, #30]
 8011436:	f003 0301 	and.w	r3, r3, #1
 801143a:	2b00      	cmp	r3, #0
 801143c:	d002      	beq.n	8011444 <f_open+0x1d0>
						res = FR_DENIED;
 801143e:	2307      	movs	r3, #7
 8011440:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8011444:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011448:	2b00      	cmp	r3, #0
 801144a:	d126      	bne.n	801149a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801144c:	79fb      	ldrb	r3, [r7, #7]
 801144e:	f003 0308 	and.w	r3, r3, #8
 8011452:	2b00      	cmp	r3, #0
 8011454:	d003      	beq.n	801145e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8011456:	79fb      	ldrb	r3, [r7, #7]
 8011458:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801145c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801145e:	697b      	ldr	r3, [r7, #20]
 8011460:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8011466:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801146c:	79fb      	ldrb	r3, [r7, #7]
 801146e:	2b01      	cmp	r3, #1
 8011470:	bf8c      	ite	hi
 8011472:	2301      	movhi	r3, #1
 8011474:	2300      	movls	r3, #0
 8011476:	b2db      	uxtb	r3, r3
 8011478:	461a      	mov	r2, r3
 801147a:	f107 0318 	add.w	r3, r7, #24
 801147e:	4611      	mov	r1, r2
 8011480:	4618      	mov	r0, r3
 8011482:	f7fd fe87 	bl	800f194 <inc_lock>
 8011486:	4602      	mov	r2, r0
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	691b      	ldr	r3, [r3, #16]
 8011490:	2b00      	cmp	r3, #0
 8011492:	d102      	bne.n	801149a <f_open+0x226>
 8011494:	2302      	movs	r3, #2
 8011496:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801149a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801149e:	2b00      	cmp	r3, #0
 80114a0:	f040 80a3 	bne.w	80115ea <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80114a4:	697b      	ldr	r3, [r7, #20]
 80114a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80114a8:	4611      	mov	r1, r2
 80114aa:	4618      	mov	r0, r3
 80114ac:	f7fe fd29 	bl	800ff02 <ld_clust>
 80114b0:	4602      	mov	r2, r0
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80114b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114b8:	331c      	adds	r3, #28
 80114ba:	4618      	mov	r0, r3
 80114bc:	f7fd fd04 	bl	800eec8 <ld_dword>
 80114c0:	4602      	mov	r2, r0
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	2200      	movs	r2, #0
 80114ca:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80114cc:	697a      	ldr	r2, [r7, #20]
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80114d2:	697b      	ldr	r3, [r7, #20]
 80114d4:	88da      	ldrh	r2, [r3, #6]
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	79fa      	ldrb	r2, [r7, #7]
 80114de:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	2200      	movs	r2, #0
 80114e4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	2200      	movs	r2, #0
 80114ea:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	2200      	movs	r2, #0
 80114f0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	3330      	adds	r3, #48	@ 0x30
 80114f6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80114fa:	2100      	movs	r1, #0
 80114fc:	4618      	mov	r0, r3
 80114fe:	f7fd fd6e 	bl	800efde <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8011502:	79fb      	ldrb	r3, [r7, #7]
 8011504:	f003 0320 	and.w	r3, r3, #32
 8011508:	2b00      	cmp	r3, #0
 801150a:	d06e      	beq.n	80115ea <f_open+0x376>
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	68db      	ldr	r3, [r3, #12]
 8011510:	2b00      	cmp	r3, #0
 8011512:	d06a      	beq.n	80115ea <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	68da      	ldr	r2, [r3, #12]
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801151c:	697b      	ldr	r3, [r7, #20]
 801151e:	895b      	ldrh	r3, [r3, #10]
 8011520:	461a      	mov	r2, r3
 8011522:	697b      	ldr	r3, [r7, #20]
 8011524:	899b      	ldrh	r3, [r3, #12]
 8011526:	fb02 f303 	mul.w	r3, r2, r3
 801152a:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	689b      	ldr	r3, [r3, #8]
 8011530:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	68db      	ldr	r3, [r3, #12]
 8011536:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011538:	e016      	b.n	8011568 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801153e:	4618      	mov	r0, r3
 8011540:	f7fe f817 	bl	800f572 <get_fat>
 8011544:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8011546:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011548:	2b01      	cmp	r3, #1
 801154a:	d802      	bhi.n	8011552 <f_open+0x2de>
 801154c:	2302      	movs	r3, #2
 801154e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011552:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011558:	d102      	bne.n	8011560 <f_open+0x2ec>
 801155a:	2301      	movs	r3, #1
 801155c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011560:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011562:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011564:	1ad3      	subs	r3, r2, r3
 8011566:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011568:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801156c:	2b00      	cmp	r3, #0
 801156e:	d103      	bne.n	8011578 <f_open+0x304>
 8011570:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011572:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011574:	429a      	cmp	r2, r3
 8011576:	d8e0      	bhi.n	801153a <f_open+0x2c6>
				}
				fp->clust = clst;
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801157c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801157e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011582:	2b00      	cmp	r3, #0
 8011584:	d131      	bne.n	80115ea <f_open+0x376>
 8011586:	697b      	ldr	r3, [r7, #20]
 8011588:	899b      	ldrh	r3, [r3, #12]
 801158a:	461a      	mov	r2, r3
 801158c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801158e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011592:	fb01 f202 	mul.w	r2, r1, r2
 8011596:	1a9b      	subs	r3, r3, r2
 8011598:	2b00      	cmp	r3, #0
 801159a:	d026      	beq.n	80115ea <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801159c:	697b      	ldr	r3, [r7, #20]
 801159e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80115a0:	4618      	mov	r0, r3
 80115a2:	f7fd ffc7 	bl	800f534 <clust2sect>
 80115a6:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80115a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d103      	bne.n	80115b6 <f_open+0x342>
						res = FR_INT_ERR;
 80115ae:	2302      	movs	r3, #2
 80115b0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80115b4:	e019      	b.n	80115ea <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80115b6:	697b      	ldr	r3, [r7, #20]
 80115b8:	899b      	ldrh	r3, [r3, #12]
 80115ba:	461a      	mov	r2, r3
 80115bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80115be:	fbb3 f2f2 	udiv	r2, r3, r2
 80115c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80115c4:	441a      	add	r2, r3
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80115ca:	697b      	ldr	r3, [r7, #20]
 80115cc:	7858      	ldrb	r0, [r3, #1]
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	6a1a      	ldr	r2, [r3, #32]
 80115d8:	2301      	movs	r3, #1
 80115da:	f7fd fbff 	bl	800eddc <disk_read>
 80115de:	4603      	mov	r3, r0
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d002      	beq.n	80115ea <f_open+0x376>
 80115e4:	2301      	movs	r3, #1
 80115e6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80115ea:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d002      	beq.n	80115f8 <f_open+0x384>
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	2200      	movs	r2, #0
 80115f6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80115f8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80115fc:	4618      	mov	r0, r3
 80115fe:	3768      	adds	r7, #104	@ 0x68
 8011600:	46bd      	mov	sp, r7
 8011602:	bd80      	pop	{r7, pc}

08011604 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8011604:	b580      	push	{r7, lr}
 8011606:	b08c      	sub	sp, #48	@ 0x30
 8011608:	af00      	add	r7, sp, #0
 801160a:	60f8      	str	r0, [r7, #12]
 801160c:	60b9      	str	r1, [r7, #8]
 801160e:	607a      	str	r2, [r7, #4]
 8011610:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8011612:	68bb      	ldr	r3, [r7, #8]
 8011614:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8011616:	683b      	ldr	r3, [r7, #0]
 8011618:	2200      	movs	r2, #0
 801161a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	f107 0210 	add.w	r2, r7, #16
 8011622:	4611      	mov	r1, r2
 8011624:	4618      	mov	r0, r3
 8011626:	f7ff fda9 	bl	801117c <validate>
 801162a:	4603      	mov	r3, r0
 801162c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011630:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011634:	2b00      	cmp	r3, #0
 8011636:	d107      	bne.n	8011648 <f_write+0x44>
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	7d5b      	ldrb	r3, [r3, #21]
 801163c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8011640:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011644:	2b00      	cmp	r3, #0
 8011646:	d002      	beq.n	801164e <f_write+0x4a>
 8011648:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801164c:	e16a      	b.n	8011924 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	7d1b      	ldrb	r3, [r3, #20]
 8011652:	f003 0302 	and.w	r3, r3, #2
 8011656:	2b00      	cmp	r3, #0
 8011658:	d101      	bne.n	801165e <f_write+0x5a>
 801165a:	2307      	movs	r3, #7
 801165c:	e162      	b.n	8011924 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	699a      	ldr	r2, [r3, #24]
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	441a      	add	r2, r3
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	699b      	ldr	r3, [r3, #24]
 801166a:	429a      	cmp	r2, r3
 801166c:	f080 814c 	bcs.w	8011908 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	699b      	ldr	r3, [r3, #24]
 8011674:	43db      	mvns	r3, r3
 8011676:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8011678:	e146      	b.n	8011908 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	699b      	ldr	r3, [r3, #24]
 801167e:	693a      	ldr	r2, [r7, #16]
 8011680:	8992      	ldrh	r2, [r2, #12]
 8011682:	fbb3 f1f2 	udiv	r1, r3, r2
 8011686:	fb01 f202 	mul.w	r2, r1, r2
 801168a:	1a9b      	subs	r3, r3, r2
 801168c:	2b00      	cmp	r3, #0
 801168e:	f040 80f1 	bne.w	8011874 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	699b      	ldr	r3, [r3, #24]
 8011696:	693a      	ldr	r2, [r7, #16]
 8011698:	8992      	ldrh	r2, [r2, #12]
 801169a:	fbb3 f3f2 	udiv	r3, r3, r2
 801169e:	693a      	ldr	r2, [r7, #16]
 80116a0:	8952      	ldrh	r2, [r2, #10]
 80116a2:	3a01      	subs	r2, #1
 80116a4:	4013      	ands	r3, r2
 80116a6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80116a8:	69bb      	ldr	r3, [r7, #24]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d143      	bne.n	8011736 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	699b      	ldr	r3, [r3, #24]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d10c      	bne.n	80116d0 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	689b      	ldr	r3, [r3, #8]
 80116ba:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80116bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d11a      	bne.n	80116f8 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	2100      	movs	r1, #0
 80116c6:	4618      	mov	r0, r3
 80116c8:	f7fe f9a5 	bl	800fa16 <create_chain>
 80116cc:	62b8      	str	r0, [r7, #40]	@ 0x28
 80116ce:	e013      	b.n	80116f8 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d007      	beq.n	80116e8 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	699b      	ldr	r3, [r3, #24]
 80116dc:	4619      	mov	r1, r3
 80116de:	68f8      	ldr	r0, [r7, #12]
 80116e0:	f7fe fa31 	bl	800fb46 <clmt_clust>
 80116e4:	62b8      	str	r0, [r7, #40]	@ 0x28
 80116e6:	e007      	b.n	80116f8 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80116e8:	68fa      	ldr	r2, [r7, #12]
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	69db      	ldr	r3, [r3, #28]
 80116ee:	4619      	mov	r1, r3
 80116f0:	4610      	mov	r0, r2
 80116f2:	f7fe f990 	bl	800fa16 <create_chain>
 80116f6:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80116f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	f000 8109 	beq.w	8011912 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011702:	2b01      	cmp	r3, #1
 8011704:	d104      	bne.n	8011710 <f_write+0x10c>
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	2202      	movs	r2, #2
 801170a:	755a      	strb	r2, [r3, #21]
 801170c:	2302      	movs	r3, #2
 801170e:	e109      	b.n	8011924 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011716:	d104      	bne.n	8011722 <f_write+0x11e>
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	2201      	movs	r2, #1
 801171c:	755a      	strb	r2, [r3, #21]
 801171e:	2301      	movs	r3, #1
 8011720:	e100      	b.n	8011924 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011726:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	689b      	ldr	r3, [r3, #8]
 801172c:	2b00      	cmp	r3, #0
 801172e:	d102      	bne.n	8011736 <f_write+0x132>
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011734:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	7d1b      	ldrb	r3, [r3, #20]
 801173a:	b25b      	sxtb	r3, r3
 801173c:	2b00      	cmp	r3, #0
 801173e:	da18      	bge.n	8011772 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011740:	693b      	ldr	r3, [r7, #16]
 8011742:	7858      	ldrb	r0, [r3, #1]
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	6a1a      	ldr	r2, [r3, #32]
 801174e:	2301      	movs	r3, #1
 8011750:	f7fd fb64 	bl	800ee1c <disk_write>
 8011754:	4603      	mov	r3, r0
 8011756:	2b00      	cmp	r3, #0
 8011758:	d004      	beq.n	8011764 <f_write+0x160>
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	2201      	movs	r2, #1
 801175e:	755a      	strb	r2, [r3, #21]
 8011760:	2301      	movs	r3, #1
 8011762:	e0df      	b.n	8011924 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	7d1b      	ldrb	r3, [r3, #20]
 8011768:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801176c:	b2da      	uxtb	r2, r3
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011772:	693a      	ldr	r2, [r7, #16]
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	69db      	ldr	r3, [r3, #28]
 8011778:	4619      	mov	r1, r3
 801177a:	4610      	mov	r0, r2
 801177c:	f7fd feda 	bl	800f534 <clust2sect>
 8011780:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011782:	697b      	ldr	r3, [r7, #20]
 8011784:	2b00      	cmp	r3, #0
 8011786:	d104      	bne.n	8011792 <f_write+0x18e>
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	2202      	movs	r2, #2
 801178c:	755a      	strb	r2, [r3, #21]
 801178e:	2302      	movs	r3, #2
 8011790:	e0c8      	b.n	8011924 <f_write+0x320>
			sect += csect;
 8011792:	697a      	ldr	r2, [r7, #20]
 8011794:	69bb      	ldr	r3, [r7, #24]
 8011796:	4413      	add	r3, r2
 8011798:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801179a:	693b      	ldr	r3, [r7, #16]
 801179c:	899b      	ldrh	r3, [r3, #12]
 801179e:	461a      	mov	r2, r3
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80117a6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80117a8:	6a3b      	ldr	r3, [r7, #32]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d043      	beq.n	8011836 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80117ae:	69ba      	ldr	r2, [r7, #24]
 80117b0:	6a3b      	ldr	r3, [r7, #32]
 80117b2:	4413      	add	r3, r2
 80117b4:	693a      	ldr	r2, [r7, #16]
 80117b6:	8952      	ldrh	r2, [r2, #10]
 80117b8:	4293      	cmp	r3, r2
 80117ba:	d905      	bls.n	80117c8 <f_write+0x1c4>
					cc = fs->csize - csect;
 80117bc:	693b      	ldr	r3, [r7, #16]
 80117be:	895b      	ldrh	r3, [r3, #10]
 80117c0:	461a      	mov	r2, r3
 80117c2:	69bb      	ldr	r3, [r7, #24]
 80117c4:	1ad3      	subs	r3, r2, r3
 80117c6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80117c8:	693b      	ldr	r3, [r7, #16]
 80117ca:	7858      	ldrb	r0, [r3, #1]
 80117cc:	6a3b      	ldr	r3, [r7, #32]
 80117ce:	697a      	ldr	r2, [r7, #20]
 80117d0:	69f9      	ldr	r1, [r7, #28]
 80117d2:	f7fd fb23 	bl	800ee1c <disk_write>
 80117d6:	4603      	mov	r3, r0
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d004      	beq.n	80117e6 <f_write+0x1e2>
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	2201      	movs	r2, #1
 80117e0:	755a      	strb	r2, [r3, #21]
 80117e2:	2301      	movs	r3, #1
 80117e4:	e09e      	b.n	8011924 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	6a1a      	ldr	r2, [r3, #32]
 80117ea:	697b      	ldr	r3, [r7, #20]
 80117ec:	1ad3      	subs	r3, r2, r3
 80117ee:	6a3a      	ldr	r2, [r7, #32]
 80117f0:	429a      	cmp	r2, r3
 80117f2:	d918      	bls.n	8011826 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	6a1a      	ldr	r2, [r3, #32]
 80117fe:	697b      	ldr	r3, [r7, #20]
 8011800:	1ad3      	subs	r3, r2, r3
 8011802:	693a      	ldr	r2, [r7, #16]
 8011804:	8992      	ldrh	r2, [r2, #12]
 8011806:	fb02 f303 	mul.w	r3, r2, r3
 801180a:	69fa      	ldr	r2, [r7, #28]
 801180c:	18d1      	adds	r1, r2, r3
 801180e:	693b      	ldr	r3, [r7, #16]
 8011810:	899b      	ldrh	r3, [r3, #12]
 8011812:	461a      	mov	r2, r3
 8011814:	f7fd fbc2 	bl	800ef9c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	7d1b      	ldrb	r3, [r3, #20]
 801181c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011820:	b2da      	uxtb	r2, r3
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011826:	693b      	ldr	r3, [r7, #16]
 8011828:	899b      	ldrh	r3, [r3, #12]
 801182a:	461a      	mov	r2, r3
 801182c:	6a3b      	ldr	r3, [r7, #32]
 801182e:	fb02 f303 	mul.w	r3, r2, r3
 8011832:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8011834:	e04b      	b.n	80118ce <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	6a1b      	ldr	r3, [r3, #32]
 801183a:	697a      	ldr	r2, [r7, #20]
 801183c:	429a      	cmp	r2, r3
 801183e:	d016      	beq.n	801186e <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	699a      	ldr	r2, [r3, #24]
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011848:	429a      	cmp	r2, r3
 801184a:	d210      	bcs.n	801186e <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801184c:	693b      	ldr	r3, [r7, #16]
 801184e:	7858      	ldrb	r0, [r3, #1]
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011856:	2301      	movs	r3, #1
 8011858:	697a      	ldr	r2, [r7, #20]
 801185a:	f7fd fabf 	bl	800eddc <disk_read>
 801185e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8011860:	2b00      	cmp	r3, #0
 8011862:	d004      	beq.n	801186e <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	2201      	movs	r2, #1
 8011868:	755a      	strb	r2, [r3, #21]
 801186a:	2301      	movs	r3, #1
 801186c:	e05a      	b.n	8011924 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	697a      	ldr	r2, [r7, #20]
 8011872:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011874:	693b      	ldr	r3, [r7, #16]
 8011876:	899b      	ldrh	r3, [r3, #12]
 8011878:	4618      	mov	r0, r3
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	699b      	ldr	r3, [r3, #24]
 801187e:	693a      	ldr	r2, [r7, #16]
 8011880:	8992      	ldrh	r2, [r2, #12]
 8011882:	fbb3 f1f2 	udiv	r1, r3, r2
 8011886:	fb01 f202 	mul.w	r2, r1, r2
 801188a:	1a9b      	subs	r3, r3, r2
 801188c:	1ac3      	subs	r3, r0, r3
 801188e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8011890:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	429a      	cmp	r2, r3
 8011896:	d901      	bls.n	801189c <f_write+0x298>
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	699b      	ldr	r3, [r3, #24]
 80118a6:	693a      	ldr	r2, [r7, #16]
 80118a8:	8992      	ldrh	r2, [r2, #12]
 80118aa:	fbb3 f0f2 	udiv	r0, r3, r2
 80118ae:	fb00 f202 	mul.w	r2, r0, r2
 80118b2:	1a9b      	subs	r3, r3, r2
 80118b4:	440b      	add	r3, r1
 80118b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80118b8:	69f9      	ldr	r1, [r7, #28]
 80118ba:	4618      	mov	r0, r3
 80118bc:	f7fd fb6e 	bl	800ef9c <mem_cpy>
		fp->flag |= FA_DIRTY;
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	7d1b      	ldrb	r3, [r3, #20]
 80118c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80118c8:	b2da      	uxtb	r2, r3
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80118ce:	69fa      	ldr	r2, [r7, #28]
 80118d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118d2:	4413      	add	r3, r2
 80118d4:	61fb      	str	r3, [r7, #28]
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	699a      	ldr	r2, [r3, #24]
 80118da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118dc:	441a      	add	r2, r3
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	619a      	str	r2, [r3, #24]
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	68da      	ldr	r2, [r3, #12]
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	699b      	ldr	r3, [r3, #24]
 80118ea:	429a      	cmp	r2, r3
 80118ec:	bf38      	it	cc
 80118ee:	461a      	movcc	r2, r3
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	60da      	str	r2, [r3, #12]
 80118f4:	683b      	ldr	r3, [r7, #0]
 80118f6:	681a      	ldr	r2, [r3, #0]
 80118f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118fa:	441a      	add	r2, r3
 80118fc:	683b      	ldr	r3, [r7, #0]
 80118fe:	601a      	str	r2, [r3, #0]
 8011900:	687a      	ldr	r2, [r7, #4]
 8011902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011904:	1ad3      	subs	r3, r2, r3
 8011906:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	2b00      	cmp	r3, #0
 801190c:	f47f aeb5 	bne.w	801167a <f_write+0x76>
 8011910:	e000      	b.n	8011914 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011912:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	7d1b      	ldrb	r3, [r3, #20]
 8011918:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801191c:	b2da      	uxtb	r2, r3
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8011922:	2300      	movs	r3, #0
}
 8011924:	4618      	mov	r0, r3
 8011926:	3730      	adds	r7, #48	@ 0x30
 8011928:	46bd      	mov	sp, r7
 801192a:	bd80      	pop	{r7, pc}

0801192c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801192c:	b580      	push	{r7, lr}
 801192e:	b086      	sub	sp, #24
 8011930:	af00      	add	r7, sp, #0
 8011932:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	f107 0208 	add.w	r2, r7, #8
 801193a:	4611      	mov	r1, r2
 801193c:	4618      	mov	r0, r3
 801193e:	f7ff fc1d 	bl	801117c <validate>
 8011942:	4603      	mov	r3, r0
 8011944:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011946:	7dfb      	ldrb	r3, [r7, #23]
 8011948:	2b00      	cmp	r3, #0
 801194a:	d168      	bne.n	8011a1e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	7d1b      	ldrb	r3, [r3, #20]
 8011950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011954:	2b00      	cmp	r3, #0
 8011956:	d062      	beq.n	8011a1e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	7d1b      	ldrb	r3, [r3, #20]
 801195c:	b25b      	sxtb	r3, r3
 801195e:	2b00      	cmp	r3, #0
 8011960:	da15      	bge.n	801198e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011962:	68bb      	ldr	r3, [r7, #8]
 8011964:	7858      	ldrb	r0, [r3, #1]
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	6a1a      	ldr	r2, [r3, #32]
 8011970:	2301      	movs	r3, #1
 8011972:	f7fd fa53 	bl	800ee1c <disk_write>
 8011976:	4603      	mov	r3, r0
 8011978:	2b00      	cmp	r3, #0
 801197a:	d001      	beq.n	8011980 <f_sync+0x54>
 801197c:	2301      	movs	r3, #1
 801197e:	e04f      	b.n	8011a20 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	7d1b      	ldrb	r3, [r3, #20]
 8011984:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011988:	b2da      	uxtb	r2, r3
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801198e:	f7fc fcc1 	bl	800e314 <get_fattime>
 8011992:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011994:	68ba      	ldr	r2, [r7, #8]
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801199a:	4619      	mov	r1, r3
 801199c:	4610      	mov	r0, r2
 801199e:	f7fd fd2b 	bl	800f3f8 <move_window>
 80119a2:	4603      	mov	r3, r0
 80119a4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80119a6:	7dfb      	ldrb	r3, [r7, #23]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d138      	bne.n	8011a1e <f_sync+0xf2>
					dir = fp->dir_ptr;
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80119b0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	330b      	adds	r3, #11
 80119b6:	781a      	ldrb	r2, [r3, #0]
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	330b      	adds	r3, #11
 80119bc:	f042 0220 	orr.w	r2, r2, #32
 80119c0:	b2d2      	uxtb	r2, r2
 80119c2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	6818      	ldr	r0, [r3, #0]
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	689b      	ldr	r3, [r3, #8]
 80119cc:	461a      	mov	r2, r3
 80119ce:	68f9      	ldr	r1, [r7, #12]
 80119d0:	f7fe fab6 	bl	800ff40 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	f103 021c 	add.w	r2, r3, #28
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	68db      	ldr	r3, [r3, #12]
 80119de:	4619      	mov	r1, r3
 80119e0:	4610      	mov	r0, r2
 80119e2:	f7fd faaf 	bl	800ef44 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	3316      	adds	r3, #22
 80119ea:	6939      	ldr	r1, [r7, #16]
 80119ec:	4618      	mov	r0, r3
 80119ee:	f7fd faa9 	bl	800ef44 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	3312      	adds	r3, #18
 80119f6:	2100      	movs	r1, #0
 80119f8:	4618      	mov	r0, r3
 80119fa:	f7fd fa88 	bl	800ef0e <st_word>
					fs->wflag = 1;
 80119fe:	68bb      	ldr	r3, [r7, #8]
 8011a00:	2201      	movs	r2, #1
 8011a02:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011a04:	68bb      	ldr	r3, [r7, #8]
 8011a06:	4618      	mov	r0, r3
 8011a08:	f7fd fd24 	bl	800f454 <sync_fs>
 8011a0c:	4603      	mov	r3, r0
 8011a0e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	7d1b      	ldrb	r3, [r3, #20]
 8011a14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011a18:	b2da      	uxtb	r2, r3
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a20:	4618      	mov	r0, r3
 8011a22:	3718      	adds	r7, #24
 8011a24:	46bd      	mov	sp, r7
 8011a26:	bd80      	pop	{r7, pc}

08011a28 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011a28:	b580      	push	{r7, lr}
 8011a2a:	b084      	sub	sp, #16
 8011a2c:	af00      	add	r7, sp, #0
 8011a2e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011a30:	6878      	ldr	r0, [r7, #4]
 8011a32:	f7ff ff7b 	bl	801192c <f_sync>
 8011a36:	4603      	mov	r3, r0
 8011a38:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011a3a:	7bfb      	ldrb	r3, [r7, #15]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d118      	bne.n	8011a72 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	f107 0208 	add.w	r2, r7, #8
 8011a46:	4611      	mov	r1, r2
 8011a48:	4618      	mov	r0, r3
 8011a4a:	f7ff fb97 	bl	801117c <validate>
 8011a4e:	4603      	mov	r3, r0
 8011a50:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011a52:	7bfb      	ldrb	r3, [r7, #15]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d10c      	bne.n	8011a72 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	691b      	ldr	r3, [r3, #16]
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	f7fd fc27 	bl	800f2b0 <dec_lock>
 8011a62:	4603      	mov	r3, r0
 8011a64:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011a66:	7bfb      	ldrb	r3, [r7, #15]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d102      	bne.n	8011a72 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	2200      	movs	r2, #0
 8011a70:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8011a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a74:	4618      	mov	r0, r3
 8011a76:	3710      	adds	r7, #16
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	bd80      	pop	{r7, pc}

08011a7c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8011a7c:	b580      	push	{r7, lr}
 8011a7e:	b090      	sub	sp, #64	@ 0x40
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	6078      	str	r0, [r7, #4]
 8011a84:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	f107 0208 	add.w	r2, r7, #8
 8011a8c:	4611      	mov	r1, r2
 8011a8e:	4618      	mov	r0, r3
 8011a90:	f7ff fb74 	bl	801117c <validate>
 8011a94:	4603      	mov	r3, r0
 8011a96:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8011a9a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d103      	bne.n	8011aaa <f_lseek+0x2e>
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	7d5b      	ldrb	r3, [r3, #21]
 8011aa6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8011aaa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d002      	beq.n	8011ab8 <f_lseek+0x3c>
 8011ab2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011ab6:	e201      	b.n	8011ebc <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	f000 80d9 	beq.w	8011c74 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8011ac2:	683b      	ldr	r3, [r7, #0]
 8011ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ac8:	d15a      	bne.n	8011b80 <f_lseek+0x104>
			tbl = fp->cltbl;
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ace:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8011ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ad2:	1d1a      	adds	r2, r3, #4
 8011ad4:	627a      	str	r2, [r7, #36]	@ 0x24
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	617b      	str	r3, [r7, #20]
 8011ada:	2302      	movs	r3, #2
 8011adc:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	689b      	ldr	r3, [r3, #8]
 8011ae2:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8011ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d03a      	beq.n	8011b60 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8011aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011aec:	613b      	str	r3, [r7, #16]
 8011aee:	2300      	movs	r3, #0
 8011af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011af4:	3302      	adds	r3, #2
 8011af6:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8011af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011afa:	60fb      	str	r3, [r7, #12]
 8011afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011afe:	3301      	adds	r3, #1
 8011b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011b06:	4618      	mov	r0, r3
 8011b08:	f7fd fd33 	bl	800f572 <get_fat>
 8011b0c:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8011b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b10:	2b01      	cmp	r3, #1
 8011b12:	d804      	bhi.n	8011b1e <f_lseek+0xa2>
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	2202      	movs	r2, #2
 8011b18:	755a      	strb	r2, [r3, #21]
 8011b1a:	2302      	movs	r3, #2
 8011b1c:	e1ce      	b.n	8011ebc <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b24:	d104      	bne.n	8011b30 <f_lseek+0xb4>
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	2201      	movs	r2, #1
 8011b2a:	755a      	strb	r2, [r3, #21]
 8011b2c:	2301      	movs	r3, #1
 8011b2e:	e1c5      	b.n	8011ebc <f_lseek+0x440>
					} while (cl == pcl + 1);
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	3301      	adds	r3, #1
 8011b34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011b36:	429a      	cmp	r2, r3
 8011b38:	d0de      	beq.n	8011af8 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8011b3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011b3c:	697b      	ldr	r3, [r7, #20]
 8011b3e:	429a      	cmp	r2, r3
 8011b40:	d809      	bhi.n	8011b56 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8011b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b44:	1d1a      	adds	r2, r3, #4
 8011b46:	627a      	str	r2, [r7, #36]	@ 0x24
 8011b48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011b4a:	601a      	str	r2, [r3, #0]
 8011b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b4e:	1d1a      	adds	r2, r3, #4
 8011b50:	627a      	str	r2, [r7, #36]	@ 0x24
 8011b52:	693a      	ldr	r2, [r7, #16]
 8011b54:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8011b56:	68bb      	ldr	r3, [r7, #8]
 8011b58:	6a1b      	ldr	r3, [r3, #32]
 8011b5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011b5c:	429a      	cmp	r2, r3
 8011b5e:	d3c4      	bcc.n	8011aea <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011b66:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8011b68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011b6a:	697b      	ldr	r3, [r7, #20]
 8011b6c:	429a      	cmp	r2, r3
 8011b6e:	d803      	bhi.n	8011b78 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8011b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b72:	2200      	movs	r2, #0
 8011b74:	601a      	str	r2, [r3, #0]
 8011b76:	e19f      	b.n	8011eb8 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8011b78:	2311      	movs	r3, #17
 8011b7a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8011b7e:	e19b      	b.n	8011eb8 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	68db      	ldr	r3, [r3, #12]
 8011b84:	683a      	ldr	r2, [r7, #0]
 8011b86:	429a      	cmp	r2, r3
 8011b88:	d902      	bls.n	8011b90 <f_lseek+0x114>
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	68db      	ldr	r3, [r3, #12]
 8011b8e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	683a      	ldr	r2, [r7, #0]
 8011b94:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8011b96:	683b      	ldr	r3, [r7, #0]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	f000 818d 	beq.w	8011eb8 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8011b9e:	683b      	ldr	r3, [r7, #0]
 8011ba0:	3b01      	subs	r3, #1
 8011ba2:	4619      	mov	r1, r3
 8011ba4:	6878      	ldr	r0, [r7, #4]
 8011ba6:	f7fd ffce 	bl	800fb46 <clmt_clust>
 8011baa:	4602      	mov	r2, r0
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8011bb0:	68ba      	ldr	r2, [r7, #8]
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	69db      	ldr	r3, [r3, #28]
 8011bb6:	4619      	mov	r1, r3
 8011bb8:	4610      	mov	r0, r2
 8011bba:	f7fd fcbb 	bl	800f534 <clust2sect>
 8011bbe:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8011bc0:	69bb      	ldr	r3, [r7, #24]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d104      	bne.n	8011bd0 <f_lseek+0x154>
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	2202      	movs	r2, #2
 8011bca:	755a      	strb	r2, [r3, #21]
 8011bcc:	2302      	movs	r3, #2
 8011bce:	e175      	b.n	8011ebc <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8011bd0:	683b      	ldr	r3, [r7, #0]
 8011bd2:	3b01      	subs	r3, #1
 8011bd4:	68ba      	ldr	r2, [r7, #8]
 8011bd6:	8992      	ldrh	r2, [r2, #12]
 8011bd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8011bdc:	68ba      	ldr	r2, [r7, #8]
 8011bde:	8952      	ldrh	r2, [r2, #10]
 8011be0:	3a01      	subs	r2, #1
 8011be2:	4013      	ands	r3, r2
 8011be4:	69ba      	ldr	r2, [r7, #24]
 8011be6:	4413      	add	r3, r2
 8011be8:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	699b      	ldr	r3, [r3, #24]
 8011bee:	68ba      	ldr	r2, [r7, #8]
 8011bf0:	8992      	ldrh	r2, [r2, #12]
 8011bf2:	fbb3 f1f2 	udiv	r1, r3, r2
 8011bf6:	fb01 f202 	mul.w	r2, r1, r2
 8011bfa:	1a9b      	subs	r3, r3, r2
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	f000 815b 	beq.w	8011eb8 <f_lseek+0x43c>
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	6a1b      	ldr	r3, [r3, #32]
 8011c06:	69ba      	ldr	r2, [r7, #24]
 8011c08:	429a      	cmp	r2, r3
 8011c0a:	f000 8155 	beq.w	8011eb8 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	7d1b      	ldrb	r3, [r3, #20]
 8011c12:	b25b      	sxtb	r3, r3
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	da18      	bge.n	8011c4a <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011c18:	68bb      	ldr	r3, [r7, #8]
 8011c1a:	7858      	ldrb	r0, [r3, #1]
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	6a1a      	ldr	r2, [r3, #32]
 8011c26:	2301      	movs	r3, #1
 8011c28:	f7fd f8f8 	bl	800ee1c <disk_write>
 8011c2c:	4603      	mov	r3, r0
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d004      	beq.n	8011c3c <f_lseek+0x1c0>
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	2201      	movs	r2, #1
 8011c36:	755a      	strb	r2, [r3, #21]
 8011c38:	2301      	movs	r3, #1
 8011c3a:	e13f      	b.n	8011ebc <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	7d1b      	ldrb	r3, [r3, #20]
 8011c40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011c44:	b2da      	uxtb	r2, r3
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8011c4a:	68bb      	ldr	r3, [r7, #8]
 8011c4c:	7858      	ldrb	r0, [r3, #1]
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011c54:	2301      	movs	r3, #1
 8011c56:	69ba      	ldr	r2, [r7, #24]
 8011c58:	f7fd f8c0 	bl	800eddc <disk_read>
 8011c5c:	4603      	mov	r3, r0
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d004      	beq.n	8011c6c <f_lseek+0x1f0>
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	2201      	movs	r2, #1
 8011c66:	755a      	strb	r2, [r3, #21]
 8011c68:	2301      	movs	r3, #1
 8011c6a:	e127      	b.n	8011ebc <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	69ba      	ldr	r2, [r7, #24]
 8011c70:	621a      	str	r2, [r3, #32]
 8011c72:	e121      	b.n	8011eb8 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	68db      	ldr	r3, [r3, #12]
 8011c78:	683a      	ldr	r2, [r7, #0]
 8011c7a:	429a      	cmp	r2, r3
 8011c7c:	d908      	bls.n	8011c90 <f_lseek+0x214>
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	7d1b      	ldrb	r3, [r3, #20]
 8011c82:	f003 0302 	and.w	r3, r3, #2
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d102      	bne.n	8011c90 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	68db      	ldr	r3, [r3, #12]
 8011c8e:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	699b      	ldr	r3, [r3, #24]
 8011c94:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8011c96:	2300      	movs	r3, #0
 8011c98:	637b      	str	r3, [r7, #52]	@ 0x34
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011c9e:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8011ca0:	683b      	ldr	r3, [r7, #0]
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	f000 80b5 	beq.w	8011e12 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8011ca8:	68bb      	ldr	r3, [r7, #8]
 8011caa:	895b      	ldrh	r3, [r3, #10]
 8011cac:	461a      	mov	r2, r3
 8011cae:	68bb      	ldr	r3, [r7, #8]
 8011cb0:	899b      	ldrh	r3, [r3, #12]
 8011cb2:	fb02 f303 	mul.w	r3, r2, r3
 8011cb6:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8011cb8:	6a3b      	ldr	r3, [r7, #32]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d01b      	beq.n	8011cf6 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8011cbe:	683b      	ldr	r3, [r7, #0]
 8011cc0:	1e5a      	subs	r2, r3, #1
 8011cc2:	69fb      	ldr	r3, [r7, #28]
 8011cc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8011cc8:	6a3b      	ldr	r3, [r7, #32]
 8011cca:	1e59      	subs	r1, r3, #1
 8011ccc:	69fb      	ldr	r3, [r7, #28]
 8011cce:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8011cd2:	429a      	cmp	r2, r3
 8011cd4:	d30f      	bcc.n	8011cf6 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8011cd6:	6a3b      	ldr	r3, [r7, #32]
 8011cd8:	1e5a      	subs	r2, r3, #1
 8011cda:	69fb      	ldr	r3, [r7, #28]
 8011cdc:	425b      	negs	r3, r3
 8011cde:	401a      	ands	r2, r3
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	699b      	ldr	r3, [r3, #24]
 8011ce8:	683a      	ldr	r2, [r7, #0]
 8011cea:	1ad3      	subs	r3, r2, r3
 8011cec:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	69db      	ldr	r3, [r3, #28]
 8011cf2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011cf4:	e022      	b.n	8011d3c <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	689b      	ldr	r3, [r3, #8]
 8011cfa:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8011cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d119      	bne.n	8011d36 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	2100      	movs	r1, #0
 8011d06:	4618      	mov	r0, r3
 8011d08:	f7fd fe85 	bl	800fa16 <create_chain>
 8011d0c:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d10:	2b01      	cmp	r3, #1
 8011d12:	d104      	bne.n	8011d1e <f_lseek+0x2a2>
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	2202      	movs	r2, #2
 8011d18:	755a      	strb	r2, [r3, #21]
 8011d1a:	2302      	movs	r3, #2
 8011d1c:	e0ce      	b.n	8011ebc <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d24:	d104      	bne.n	8011d30 <f_lseek+0x2b4>
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	2201      	movs	r2, #1
 8011d2a:	755a      	strb	r2, [r3, #21]
 8011d2c:	2301      	movs	r3, #1
 8011d2e:	e0c5      	b.n	8011ebc <f_lseek+0x440>
					fp->obj.sclust = clst;
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011d34:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011d3a:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8011d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d067      	beq.n	8011e12 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8011d42:	e03a      	b.n	8011dba <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8011d44:	683a      	ldr	r2, [r7, #0]
 8011d46:	69fb      	ldr	r3, [r7, #28]
 8011d48:	1ad3      	subs	r3, r2, r3
 8011d4a:	603b      	str	r3, [r7, #0]
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	699a      	ldr	r2, [r3, #24]
 8011d50:	69fb      	ldr	r3, [r7, #28]
 8011d52:	441a      	add	r2, r3
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	7d1b      	ldrb	r3, [r3, #20]
 8011d5c:	f003 0302 	and.w	r3, r3, #2
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d00b      	beq.n	8011d7c <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011d68:	4618      	mov	r0, r3
 8011d6a:	f7fd fe54 	bl	800fa16 <create_chain>
 8011d6e:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8011d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d108      	bne.n	8011d88 <f_lseek+0x30c>
							ofs = 0; break;
 8011d76:	2300      	movs	r3, #0
 8011d78:	603b      	str	r3, [r7, #0]
 8011d7a:	e022      	b.n	8011dc2 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011d80:	4618      	mov	r0, r3
 8011d82:	f7fd fbf6 	bl	800f572 <get_fat>
 8011d86:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d8e:	d104      	bne.n	8011d9a <f_lseek+0x31e>
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	2201      	movs	r2, #1
 8011d94:	755a      	strb	r2, [r3, #21]
 8011d96:	2301      	movs	r3, #1
 8011d98:	e090      	b.n	8011ebc <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8011d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d9c:	2b01      	cmp	r3, #1
 8011d9e:	d904      	bls.n	8011daa <f_lseek+0x32e>
 8011da0:	68bb      	ldr	r3, [r7, #8]
 8011da2:	6a1b      	ldr	r3, [r3, #32]
 8011da4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011da6:	429a      	cmp	r2, r3
 8011da8:	d304      	bcc.n	8011db4 <f_lseek+0x338>
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	2202      	movs	r2, #2
 8011dae:	755a      	strb	r2, [r3, #21]
 8011db0:	2302      	movs	r3, #2
 8011db2:	e083      	b.n	8011ebc <f_lseek+0x440>
					fp->clust = clst;
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011db8:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8011dba:	683a      	ldr	r2, [r7, #0]
 8011dbc:	69fb      	ldr	r3, [r7, #28]
 8011dbe:	429a      	cmp	r2, r3
 8011dc0:	d8c0      	bhi.n	8011d44 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	699a      	ldr	r2, [r3, #24]
 8011dc6:	683b      	ldr	r3, [r7, #0]
 8011dc8:	441a      	add	r2, r3
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8011dce:	68bb      	ldr	r3, [r7, #8]
 8011dd0:	899b      	ldrh	r3, [r3, #12]
 8011dd2:	461a      	mov	r2, r3
 8011dd4:	683b      	ldr	r3, [r7, #0]
 8011dd6:	fbb3 f1f2 	udiv	r1, r3, r2
 8011dda:	fb01 f202 	mul.w	r2, r1, r2
 8011dde:	1a9b      	subs	r3, r3, r2
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d016      	beq.n	8011e12 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8011de4:	68bb      	ldr	r3, [r7, #8]
 8011de6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011de8:	4618      	mov	r0, r3
 8011dea:	f7fd fba3 	bl	800f534 <clust2sect>
 8011dee:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8011df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d104      	bne.n	8011e00 <f_lseek+0x384>
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	2202      	movs	r2, #2
 8011dfa:	755a      	strb	r2, [r3, #21]
 8011dfc:	2302      	movs	r3, #2
 8011dfe:	e05d      	b.n	8011ebc <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8011e00:	68bb      	ldr	r3, [r7, #8]
 8011e02:	899b      	ldrh	r3, [r3, #12]
 8011e04:	461a      	mov	r2, r3
 8011e06:	683b      	ldr	r3, [r7, #0]
 8011e08:	fbb3 f3f2 	udiv	r3, r3, r2
 8011e0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011e0e:	4413      	add	r3, r2
 8011e10:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	699a      	ldr	r2, [r3, #24]
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	68db      	ldr	r3, [r3, #12]
 8011e1a:	429a      	cmp	r2, r3
 8011e1c:	d90a      	bls.n	8011e34 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	699a      	ldr	r2, [r3, #24]
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	7d1b      	ldrb	r3, [r3, #20]
 8011e2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e2e:	b2da      	uxtb	r2, r3
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	699b      	ldr	r3, [r3, #24]
 8011e38:	68ba      	ldr	r2, [r7, #8]
 8011e3a:	8992      	ldrh	r2, [r2, #12]
 8011e3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011e40:	fb01 f202 	mul.w	r2, r1, r2
 8011e44:	1a9b      	subs	r3, r3, r2
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d036      	beq.n	8011eb8 <f_lseek+0x43c>
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	6a1b      	ldr	r3, [r3, #32]
 8011e4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011e50:	429a      	cmp	r2, r3
 8011e52:	d031      	beq.n	8011eb8 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	7d1b      	ldrb	r3, [r3, #20]
 8011e58:	b25b      	sxtb	r3, r3
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	da18      	bge.n	8011e90 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011e5e:	68bb      	ldr	r3, [r7, #8]
 8011e60:	7858      	ldrb	r0, [r3, #1]
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	6a1a      	ldr	r2, [r3, #32]
 8011e6c:	2301      	movs	r3, #1
 8011e6e:	f7fc ffd5 	bl	800ee1c <disk_write>
 8011e72:	4603      	mov	r3, r0
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d004      	beq.n	8011e82 <f_lseek+0x406>
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	2201      	movs	r2, #1
 8011e7c:	755a      	strb	r2, [r3, #21]
 8011e7e:	2301      	movs	r3, #1
 8011e80:	e01c      	b.n	8011ebc <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	7d1b      	ldrb	r3, [r3, #20]
 8011e86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011e8a:	b2da      	uxtb	r2, r3
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011e90:	68bb      	ldr	r3, [r7, #8]
 8011e92:	7858      	ldrb	r0, [r3, #1]
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011e9a:	2301      	movs	r3, #1
 8011e9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011e9e:	f7fc ff9d 	bl	800eddc <disk_read>
 8011ea2:	4603      	mov	r3, r0
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d004      	beq.n	8011eb2 <f_lseek+0x436>
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	2201      	movs	r2, #1
 8011eac:	755a      	strb	r2, [r3, #21]
 8011eae:	2301      	movs	r3, #1
 8011eb0:	e004      	b.n	8011ebc <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011eb6:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8011eb8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	3740      	adds	r7, #64	@ 0x40
 8011ec0:	46bd      	mov	sp, r7
 8011ec2:	bd80      	pop	{r7, pc}

08011ec4 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8011ec4:	b580      	push	{r7, lr}
 8011ec6:	b084      	sub	sp, #16
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	6078      	str	r0, [r7, #4]
 8011ecc:	460b      	mov	r3, r1
 8011ece:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8011ed0:	78fb      	ldrb	r3, [r7, #3]
 8011ed2:	2b0a      	cmp	r3, #10
 8011ed4:	d103      	bne.n	8011ede <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8011ed6:	210d      	movs	r1, #13
 8011ed8:	6878      	ldr	r0, [r7, #4]
 8011eda:	f7ff fff3 	bl	8011ec4 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	685b      	ldr	r3, [r3, #4]
 8011ee2:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	db25      	blt.n	8011f36 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	1c5a      	adds	r2, r3, #1
 8011eee:	60fa      	str	r2, [r7, #12]
 8011ef0:	687a      	ldr	r2, [r7, #4]
 8011ef2:	4413      	add	r3, r2
 8011ef4:	78fa      	ldrb	r2, [r7, #3]
 8011ef6:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	2b3c      	cmp	r3, #60	@ 0x3c
 8011efc:	dd12      	ble.n	8011f24 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	6818      	ldr	r0, [r3, #0]
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	f103 010c 	add.w	r1, r3, #12
 8011f08:	68fa      	ldr	r2, [r7, #12]
 8011f0a:	f107 0308 	add.w	r3, r7, #8
 8011f0e:	f7ff fb79 	bl	8011604 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8011f12:	68ba      	ldr	r2, [r7, #8]
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	429a      	cmp	r2, r3
 8011f18:	d101      	bne.n	8011f1e <putc_bfd+0x5a>
 8011f1a:	2300      	movs	r3, #0
 8011f1c:	e001      	b.n	8011f22 <putc_bfd+0x5e>
 8011f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8011f22:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	68fa      	ldr	r2, [r7, #12]
 8011f28:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	689b      	ldr	r3, [r3, #8]
 8011f2e:	1c5a      	adds	r2, r3, #1
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	609a      	str	r2, [r3, #8]
 8011f34:	e000      	b.n	8011f38 <putc_bfd+0x74>
	if (i < 0) return;
 8011f36:	bf00      	nop
}
 8011f38:	3710      	adds	r7, #16
 8011f3a:	46bd      	mov	sp, r7
 8011f3c:	bd80      	pop	{r7, pc}

08011f3e <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8011f3e:	b580      	push	{r7, lr}
 8011f40:	b084      	sub	sp, #16
 8011f42:	af00      	add	r7, sp, #0
 8011f44:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	685b      	ldr	r3, [r3, #4]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	db16      	blt.n	8011f7c <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	6818      	ldr	r0, [r3, #0]
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	f103 010c 	add.w	r1, r3, #12
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	685b      	ldr	r3, [r3, #4]
 8011f5c:	461a      	mov	r2, r3
 8011f5e:	f107 030c 	add.w	r3, r7, #12
 8011f62:	f7ff fb4f 	bl	8011604 <f_write>
 8011f66:	4603      	mov	r3, r0
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d107      	bne.n	8011f7c <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	685b      	ldr	r3, [r3, #4]
 8011f70:	68fa      	ldr	r2, [r7, #12]
 8011f72:	4293      	cmp	r3, r2
 8011f74:	d102      	bne.n	8011f7c <putc_flush+0x3e>
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	689b      	ldr	r3, [r3, #8]
 8011f7a:	e001      	b.n	8011f80 <putc_flush+0x42>
	return EOF;
 8011f7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011f80:	4618      	mov	r0, r3
 8011f82:	3710      	adds	r7, #16
 8011f84:	46bd      	mov	sp, r7
 8011f86:	bd80      	pop	{r7, pc}

08011f88 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8011f88:	b480      	push	{r7}
 8011f8a:	b083      	sub	sp, #12
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	6078      	str	r0, [r7, #4]
 8011f90:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	683a      	ldr	r2, [r7, #0]
 8011f96:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	2200      	movs	r2, #0
 8011f9c:	605a      	str	r2, [r3, #4]
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	685a      	ldr	r2, [r3, #4]
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	609a      	str	r2, [r3, #8]
}
 8011fa6:	bf00      	nop
 8011fa8:	370c      	adds	r7, #12
 8011faa:	46bd      	mov	sp, r7
 8011fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb0:	4770      	bx	lr
	...

08011fb4 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8011fb4:	b40e      	push	{r1, r2, r3}
 8011fb6:	b580      	push	{r7, lr}
 8011fb8:	b0a7      	sub	sp, #156	@ 0x9c
 8011fba:	af00      	add	r7, sp, #0
 8011fbc:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8011fbe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011fc2:	6879      	ldr	r1, [r7, #4]
 8011fc4:	4618      	mov	r0, r3
 8011fc6:	f7ff ffdf 	bl	8011f88 <putc_init>

	va_start(arp, fmt);
 8011fca:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8011fce:	67bb      	str	r3, [r7, #120]	@ 0x78

	for (;;) {
		c = *fmt++;
 8011fd0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011fd4:	1c5a      	adds	r2, r3, #1
 8011fd6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011fda:	781b      	ldrb	r3, [r3, #0]
 8011fdc:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == 0) break;			/* End of string */
 8011fe0:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	f000 81f2 	beq.w	80123ce <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 8011fea:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011fee:	2b25      	cmp	r3, #37	@ 0x25
 8011ff0:	d008      	beq.n	8012004 <f_printf+0x50>
			putc_bfd(&pb, c);
 8011ff2:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 8011ff6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011ffa:	4611      	mov	r1, r2
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	f7ff ff61 	bl	8011ec4 <putc_bfd>
			continue;
 8012002:	e1e3      	b.n	80123cc <f_printf+0x418>
		}
		w = f = 0;
 8012004:	2300      	movs	r3, #0
 8012006:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 801200a:	2300      	movs	r3, #0
 801200c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		c = *fmt++;
 8012010:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012014:	1c5a      	adds	r2, r3, #1
 8012016:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801201a:	781b      	ldrb	r3, [r3, #0]
 801201c:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8012020:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8012024:	2b30      	cmp	r3, #48	@ 0x30
 8012026:	d10b      	bne.n	8012040 <f_printf+0x8c>
			f = 1; c = *fmt++;
 8012028:	2301      	movs	r3, #1
 801202a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 801202e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012032:	1c5a      	adds	r2, r3, #1
 8012034:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8012038:	781b      	ldrb	r3, [r3, #0]
 801203a:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 801203e:	e024      	b.n	801208a <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8012040:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8012044:	2b2d      	cmp	r3, #45	@ 0x2d
 8012046:	d120      	bne.n	801208a <f_printf+0xd6>
				f = 2; c = *fmt++;
 8012048:	2302      	movs	r3, #2
 801204a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 801204e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012052:	1c5a      	adds	r2, r3, #1
 8012054:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8012058:	781b      	ldrb	r3, [r3, #0]
 801205a:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 801205e:	e014      	b.n	801208a <f_printf+0xd6>
			w = w * 10 + c - '0';
 8012060:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012064:	4613      	mov	r3, r2
 8012066:	009b      	lsls	r3, r3, #2
 8012068:	4413      	add	r3, r2
 801206a:	005b      	lsls	r3, r3, #1
 801206c:	461a      	mov	r2, r3
 801206e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8012072:	4413      	add	r3, r2
 8012074:	3b30      	subs	r3, #48	@ 0x30
 8012076:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			c = *fmt++;
 801207a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801207e:	1c5a      	adds	r2, r3, #1
 8012080:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8012084:	781b      	ldrb	r3, [r3, #0]
 8012086:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		while (IsDigit(c)) {		/* Precision */
 801208a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801208e:	2b2f      	cmp	r3, #47	@ 0x2f
 8012090:	d903      	bls.n	801209a <f_printf+0xe6>
 8012092:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8012096:	2b39      	cmp	r3, #57	@ 0x39
 8012098:	d9e2      	bls.n	8012060 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 801209a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801209e:	2b6c      	cmp	r3, #108	@ 0x6c
 80120a0:	d003      	beq.n	80120aa <f_printf+0xf6>
 80120a2:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80120a6:	2b4c      	cmp	r3, #76	@ 0x4c
 80120a8:	d10d      	bne.n	80120c6 <f_printf+0x112>
			f |= 4; c = *fmt++;
 80120aa:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80120ae:	f043 0304 	orr.w	r3, r3, #4
 80120b2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80120b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80120ba:	1c5a      	adds	r2, r3, #1
 80120bc:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80120c0:	781b      	ldrb	r3, [r3, #0]
 80120c2:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		}
		if (!c) break;
 80120c6:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	f000 8181 	beq.w	80123d2 <f_printf+0x41e>
		d = c;
 80120d0:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80120d4:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		if (IsLower(d)) d -= 0x20;
 80120d8:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80120dc:	2b60      	cmp	r3, #96	@ 0x60
 80120de:	d908      	bls.n	80120f2 <f_printf+0x13e>
 80120e0:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80120e4:	2b7a      	cmp	r3, #122	@ 0x7a
 80120e6:	d804      	bhi.n	80120f2 <f_printf+0x13e>
 80120e8:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80120ec:	3b20      	subs	r3, #32
 80120ee:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		switch (d) {				/* Type is... */
 80120f2:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80120f6:	3b42      	subs	r3, #66	@ 0x42
 80120f8:	2b16      	cmp	r3, #22
 80120fa:	f200 8098 	bhi.w	801222e <f_printf+0x27a>
 80120fe:	a201      	add	r2, pc, #4	@ (adr r2, 8012104 <f_printf+0x150>)
 8012100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012104:	0801220f 	.word	0x0801220f
 8012108:	080121f7 	.word	0x080121f7
 801210c:	0801221f 	.word	0x0801221f
 8012110:	0801222f 	.word	0x0801222f
 8012114:	0801222f 	.word	0x0801222f
 8012118:	0801222f 	.word	0x0801222f
 801211c:	0801222f 	.word	0x0801222f
 8012120:	0801222f 	.word	0x0801222f
 8012124:	0801222f 	.word	0x0801222f
 8012128:	0801222f 	.word	0x0801222f
 801212c:	0801222f 	.word	0x0801222f
 8012130:	0801222f 	.word	0x0801222f
 8012134:	0801222f 	.word	0x0801222f
 8012138:	08012217 	.word	0x08012217
 801213c:	0801222f 	.word	0x0801222f
 8012140:	0801222f 	.word	0x0801222f
 8012144:	0801222f 	.word	0x0801222f
 8012148:	08012161 	.word	0x08012161
 801214c:	0801222f 	.word	0x0801222f
 8012150:	0801221f 	.word	0x0801221f
 8012154:	0801222f 	.word	0x0801222f
 8012158:	0801222f 	.word	0x0801222f
 801215c:	08012227 	.word	0x08012227
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8012160:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012162:	1d1a      	adds	r2, r3, #4
 8012164:	67ba      	str	r2, [r7, #120]	@ 0x78
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	67fb      	str	r3, [r7, #124]	@ 0x7c
			for (j = 0; p[j]; j++) ;
 801216a:	2300      	movs	r3, #0
 801216c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8012170:	e004      	b.n	801217c <f_printf+0x1c8>
 8012172:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012176:	3301      	adds	r3, #1
 8012178:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801217c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801217e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012182:	4413      	add	r3, r2
 8012184:	781b      	ldrb	r3, [r3, #0]
 8012186:	2b00      	cmp	r3, #0
 8012188:	d1f3      	bne.n	8012172 <f_printf+0x1be>
			if (!(f & 2)) {
 801218a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 801218e:	f003 0302 	and.w	r3, r3, #2
 8012192:	2b00      	cmp	r3, #0
 8012194:	d11a      	bne.n	80121cc <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8012196:	e005      	b.n	80121a4 <f_printf+0x1f0>
 8012198:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801219c:	2120      	movs	r1, #32
 801219e:	4618      	mov	r0, r3
 80121a0:	f7ff fe90 	bl	8011ec4 <putc_bfd>
 80121a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80121a8:	1c5a      	adds	r2, r3, #1
 80121aa:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80121ae:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80121b2:	429a      	cmp	r2, r3
 80121b4:	d8f0      	bhi.n	8012198 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 80121b6:	e009      	b.n	80121cc <f_printf+0x218>
 80121b8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80121ba:	1c5a      	adds	r2, r3, #1
 80121bc:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80121be:	781a      	ldrb	r2, [r3, #0]
 80121c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80121c4:	4611      	mov	r1, r2
 80121c6:	4618      	mov	r0, r3
 80121c8:	f7ff fe7c 	bl	8011ec4 <putc_bfd>
 80121cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80121ce:	781b      	ldrb	r3, [r3, #0]
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d1f1      	bne.n	80121b8 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 80121d4:	e005      	b.n	80121e2 <f_printf+0x22e>
 80121d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80121da:	2120      	movs	r1, #32
 80121dc:	4618      	mov	r0, r3
 80121de:	f7ff fe71 	bl	8011ec4 <putc_bfd>
 80121e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80121e6:	1c5a      	adds	r2, r3, #1
 80121e8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80121ec:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80121f0:	429a      	cmp	r2, r3
 80121f2:	d8f0      	bhi.n	80121d6 <f_printf+0x222>
			continue;
 80121f4:	e0ea      	b.n	80123cc <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 80121f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80121f8:	1d1a      	adds	r2, r3, #4
 80121fa:	67ba      	str	r2, [r7, #120]	@ 0x78
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	b2da      	uxtb	r2, r3
 8012200:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012204:	4611      	mov	r1, r2
 8012206:	4618      	mov	r0, r3
 8012208:	f7ff fe5c 	bl	8011ec4 <putc_bfd>
 801220c:	e0de      	b.n	80123cc <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 801220e:	2302      	movs	r3, #2
 8012210:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8012214:	e014      	b.n	8012240 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8012216:	2308      	movs	r3, #8
 8012218:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 801221c:	e010      	b.n	8012240 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 801221e:	230a      	movs	r3, #10
 8012220:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8012224:	e00c      	b.n	8012240 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8012226:	2310      	movs	r3, #16
 8012228:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 801222c:	e008      	b.n	8012240 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 801222e:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 8012232:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012236:	4611      	mov	r1, r2
 8012238:	4618      	mov	r0, r3
 801223a:	f7ff fe43 	bl	8011ec4 <putc_bfd>
 801223e:	e0c5      	b.n	80123cc <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8012240:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8012244:	f003 0304 	and.w	r3, r3, #4
 8012248:	2b00      	cmp	r3, #0
 801224a:	d004      	beq.n	8012256 <f_printf+0x2a2>
 801224c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801224e:	1d1a      	adds	r2, r3, #4
 8012250:	67ba      	str	r2, [r7, #120]	@ 0x78
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	e00c      	b.n	8012270 <f_printf+0x2bc>
 8012256:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 801225a:	2b44      	cmp	r3, #68	@ 0x44
 801225c:	d104      	bne.n	8012268 <f_printf+0x2b4>
 801225e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012260:	1d1a      	adds	r2, r3, #4
 8012262:	67ba      	str	r2, [r7, #120]	@ 0x78
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	e003      	b.n	8012270 <f_printf+0x2bc>
 8012268:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801226a:	1d1a      	adds	r2, r3, #4
 801226c:	67ba      	str	r2, [r7, #120]	@ 0x78
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8012274:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8012278:	2b44      	cmp	r3, #68	@ 0x44
 801227a:	d10e      	bne.n	801229a <f_printf+0x2e6>
 801227c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012280:	2b00      	cmp	r3, #0
 8012282:	da0a      	bge.n	801229a <f_printf+0x2e6>
			v = 0 - v;
 8012284:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012288:	425b      	negs	r3, r3
 801228a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			f |= 8;
 801228e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8012292:	f043 0308 	orr.w	r3, r3, #8
 8012296:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}
		i = 0;
 801229a:	2300      	movs	r3, #0
 801229c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 80122a0:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 80122a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80122a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80122ac:	fb01 f202 	mul.w	r2, r1, r2
 80122b0:	1a9b      	subs	r3, r3, r2
 80122b2:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 80122b6:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 80122ba:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80122be:	fbb2 f3f3 	udiv	r3, r2, r3
 80122c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 80122c6:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80122ca:	2b09      	cmp	r3, #9
 80122cc:	d90b      	bls.n	80122e6 <f_printf+0x332>
 80122ce:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80122d2:	2b78      	cmp	r3, #120	@ 0x78
 80122d4:	d101      	bne.n	80122da <f_printf+0x326>
 80122d6:	2227      	movs	r2, #39	@ 0x27
 80122d8:	e000      	b.n	80122dc <f_printf+0x328>
 80122da:	2207      	movs	r2, #7
 80122dc:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80122e0:	4413      	add	r3, r2
 80122e2:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
			str[i++] = d + '0';
 80122e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80122ea:	1c5a      	adds	r2, r3, #1
 80122ec:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80122f0:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 80122f4:	3230      	adds	r2, #48	@ 0x30
 80122f6:	b2d2      	uxtb	r2, r2
 80122f8:	3398      	adds	r3, #152	@ 0x98
 80122fa:	443b      	add	r3, r7
 80122fc:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8012300:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012304:	2b00      	cmp	r3, #0
 8012306:	d003      	beq.n	8012310 <f_printf+0x35c>
 8012308:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801230c:	2b1f      	cmp	r3, #31
 801230e:	d9c7      	bls.n	80122a0 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8012310:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8012314:	f003 0308 	and.w	r3, r3, #8
 8012318:	2b00      	cmp	r3, #0
 801231a:	d009      	beq.n	8012330 <f_printf+0x37c>
 801231c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012320:	1c5a      	adds	r2, r3, #1
 8012322:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8012326:	3398      	adds	r3, #152	@ 0x98
 8012328:	443b      	add	r3, r7
 801232a:	222d      	movs	r2, #45	@ 0x2d
 801232c:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8012330:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012334:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8012338:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 801233c:	f003 0301 	and.w	r3, r3, #1
 8012340:	2b00      	cmp	r3, #0
 8012342:	d001      	beq.n	8012348 <f_printf+0x394>
 8012344:	2330      	movs	r3, #48	@ 0x30
 8012346:	e000      	b.n	801234a <f_printf+0x396>
 8012348:	2320      	movs	r3, #32
 801234a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 801234e:	e007      	b.n	8012360 <f_printf+0x3ac>
 8012350:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8012354:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012358:	4611      	mov	r1, r2
 801235a:	4618      	mov	r0, r3
 801235c:	f7ff fdb2 	bl	8011ec4 <putc_bfd>
 8012360:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8012364:	f003 0302 	and.w	r3, r3, #2
 8012368:	2b00      	cmp	r3, #0
 801236a:	d108      	bne.n	801237e <f_printf+0x3ca>
 801236c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012370:	1c5a      	adds	r2, r3, #1
 8012372:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8012376:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801237a:	429a      	cmp	r2, r3
 801237c:	d8e8      	bhi.n	8012350 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 801237e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012382:	3b01      	subs	r3, #1
 8012384:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012388:	f107 020c 	add.w	r2, r7, #12
 801238c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012390:	4413      	add	r3, r2
 8012392:	781a      	ldrb	r2, [r3, #0]
 8012394:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012398:	4611      	mov	r1, r2
 801239a:	4618      	mov	r0, r3
 801239c:	f7ff fd92 	bl	8011ec4 <putc_bfd>
		} while (i);
 80123a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d1ea      	bne.n	801237e <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 80123a8:	e007      	b.n	80123ba <f_printf+0x406>
 80123aa:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 80123ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80123b2:	4611      	mov	r1, r2
 80123b4:	4618      	mov	r0, r3
 80123b6:	f7ff fd85 	bl	8011ec4 <putc_bfd>
 80123ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80123be:	1c5a      	adds	r2, r3, #1
 80123c0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80123c4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80123c8:	429a      	cmp	r2, r3
 80123ca:	d8ee      	bhi.n	80123aa <f_printf+0x3f6>
		c = *fmt++;
 80123cc:	e600      	b.n	8011fd0 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 80123ce:	bf00      	nop
 80123d0:	e000      	b.n	80123d4 <f_printf+0x420>
		if (!c) break;
 80123d2:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 80123d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80123d8:	4618      	mov	r0, r3
 80123da:	f7ff fdb0 	bl	8011f3e <putc_flush>
 80123de:	4603      	mov	r3, r0
}
 80123e0:	4618      	mov	r0, r3
 80123e2:	379c      	adds	r7, #156	@ 0x9c
 80123e4:	46bd      	mov	sp, r7
 80123e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80123ea:	b003      	add	sp, #12
 80123ec:	4770      	bx	lr
 80123ee:	bf00      	nop

080123f0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80123f0:	b480      	push	{r7}
 80123f2:	b087      	sub	sp, #28
 80123f4:	af00      	add	r7, sp, #0
 80123f6:	60f8      	str	r0, [r7, #12]
 80123f8:	60b9      	str	r1, [r7, #8]
 80123fa:	4613      	mov	r3, r2
 80123fc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80123fe:	2301      	movs	r3, #1
 8012400:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012402:	2300      	movs	r3, #0
 8012404:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8012406:	4b1f      	ldr	r3, [pc, #124]	@ (8012484 <FATFS_LinkDriverEx+0x94>)
 8012408:	7a5b      	ldrb	r3, [r3, #9]
 801240a:	b2db      	uxtb	r3, r3
 801240c:	2b00      	cmp	r3, #0
 801240e:	d131      	bne.n	8012474 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012410:	4b1c      	ldr	r3, [pc, #112]	@ (8012484 <FATFS_LinkDriverEx+0x94>)
 8012412:	7a5b      	ldrb	r3, [r3, #9]
 8012414:	b2db      	uxtb	r3, r3
 8012416:	461a      	mov	r2, r3
 8012418:	4b1a      	ldr	r3, [pc, #104]	@ (8012484 <FATFS_LinkDriverEx+0x94>)
 801241a:	2100      	movs	r1, #0
 801241c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801241e:	4b19      	ldr	r3, [pc, #100]	@ (8012484 <FATFS_LinkDriverEx+0x94>)
 8012420:	7a5b      	ldrb	r3, [r3, #9]
 8012422:	b2db      	uxtb	r3, r3
 8012424:	4a17      	ldr	r2, [pc, #92]	@ (8012484 <FATFS_LinkDriverEx+0x94>)
 8012426:	009b      	lsls	r3, r3, #2
 8012428:	4413      	add	r3, r2
 801242a:	68fa      	ldr	r2, [r7, #12]
 801242c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801242e:	4b15      	ldr	r3, [pc, #84]	@ (8012484 <FATFS_LinkDriverEx+0x94>)
 8012430:	7a5b      	ldrb	r3, [r3, #9]
 8012432:	b2db      	uxtb	r3, r3
 8012434:	461a      	mov	r2, r3
 8012436:	4b13      	ldr	r3, [pc, #76]	@ (8012484 <FATFS_LinkDriverEx+0x94>)
 8012438:	4413      	add	r3, r2
 801243a:	79fa      	ldrb	r2, [r7, #7]
 801243c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801243e:	4b11      	ldr	r3, [pc, #68]	@ (8012484 <FATFS_LinkDriverEx+0x94>)
 8012440:	7a5b      	ldrb	r3, [r3, #9]
 8012442:	b2db      	uxtb	r3, r3
 8012444:	1c5a      	adds	r2, r3, #1
 8012446:	b2d1      	uxtb	r1, r2
 8012448:	4a0e      	ldr	r2, [pc, #56]	@ (8012484 <FATFS_LinkDriverEx+0x94>)
 801244a:	7251      	strb	r1, [r2, #9]
 801244c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801244e:	7dbb      	ldrb	r3, [r7, #22]
 8012450:	3330      	adds	r3, #48	@ 0x30
 8012452:	b2da      	uxtb	r2, r3
 8012454:	68bb      	ldr	r3, [r7, #8]
 8012456:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012458:	68bb      	ldr	r3, [r7, #8]
 801245a:	3301      	adds	r3, #1
 801245c:	223a      	movs	r2, #58	@ 0x3a
 801245e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012460:	68bb      	ldr	r3, [r7, #8]
 8012462:	3302      	adds	r3, #2
 8012464:	222f      	movs	r2, #47	@ 0x2f
 8012466:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012468:	68bb      	ldr	r3, [r7, #8]
 801246a:	3303      	adds	r3, #3
 801246c:	2200      	movs	r2, #0
 801246e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012470:	2300      	movs	r3, #0
 8012472:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012474:	7dfb      	ldrb	r3, [r7, #23]
}
 8012476:	4618      	mov	r0, r3
 8012478:	371c      	adds	r7, #28
 801247a:	46bd      	mov	sp, r7
 801247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012480:	4770      	bx	lr
 8012482:	bf00      	nop
 8012484:	24002a64 	.word	0x24002a64

08012488 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012488:	b580      	push	{r7, lr}
 801248a:	b082      	sub	sp, #8
 801248c:	af00      	add	r7, sp, #0
 801248e:	6078      	str	r0, [r7, #4]
 8012490:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012492:	2200      	movs	r2, #0
 8012494:	6839      	ldr	r1, [r7, #0]
 8012496:	6878      	ldr	r0, [r7, #4]
 8012498:	f7ff ffaa 	bl	80123f0 <FATFS_LinkDriverEx>
 801249c:	4603      	mov	r3, r0
}
 801249e:	4618      	mov	r0, r3
 80124a0:	3708      	adds	r7, #8
 80124a2:	46bd      	mov	sp, r7
 80124a4:	bd80      	pop	{r7, pc}
	...

080124a8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80124a8:	b480      	push	{r7}
 80124aa:	b085      	sub	sp, #20
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	4603      	mov	r3, r0
 80124b0:	6039      	str	r1, [r7, #0]
 80124b2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80124b4:	88fb      	ldrh	r3, [r7, #6]
 80124b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80124b8:	d802      	bhi.n	80124c0 <ff_convert+0x18>
		c = chr;
 80124ba:	88fb      	ldrh	r3, [r7, #6]
 80124bc:	81fb      	strh	r3, [r7, #14]
 80124be:	e025      	b.n	801250c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80124c0:	683b      	ldr	r3, [r7, #0]
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d00b      	beq.n	80124de <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80124c6:	88fb      	ldrh	r3, [r7, #6]
 80124c8:	2bff      	cmp	r3, #255	@ 0xff
 80124ca:	d805      	bhi.n	80124d8 <ff_convert+0x30>
 80124cc:	88fb      	ldrh	r3, [r7, #6]
 80124ce:	3b80      	subs	r3, #128	@ 0x80
 80124d0:	4a12      	ldr	r2, [pc, #72]	@ (801251c <ff_convert+0x74>)
 80124d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80124d6:	e000      	b.n	80124da <ff_convert+0x32>
 80124d8:	2300      	movs	r3, #0
 80124da:	81fb      	strh	r3, [r7, #14]
 80124dc:	e016      	b.n	801250c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80124de:	2300      	movs	r3, #0
 80124e0:	81fb      	strh	r3, [r7, #14]
 80124e2:	e009      	b.n	80124f8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80124e4:	89fb      	ldrh	r3, [r7, #14]
 80124e6:	4a0d      	ldr	r2, [pc, #52]	@ (801251c <ff_convert+0x74>)
 80124e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80124ec:	88fa      	ldrh	r2, [r7, #6]
 80124ee:	429a      	cmp	r2, r3
 80124f0:	d006      	beq.n	8012500 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80124f2:	89fb      	ldrh	r3, [r7, #14]
 80124f4:	3301      	adds	r3, #1
 80124f6:	81fb      	strh	r3, [r7, #14]
 80124f8:	89fb      	ldrh	r3, [r7, #14]
 80124fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80124fc:	d9f2      	bls.n	80124e4 <ff_convert+0x3c>
 80124fe:	e000      	b.n	8012502 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8012500:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8012502:	89fb      	ldrh	r3, [r7, #14]
 8012504:	3380      	adds	r3, #128	@ 0x80
 8012506:	b29b      	uxth	r3, r3
 8012508:	b2db      	uxtb	r3, r3
 801250a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801250c:	89fb      	ldrh	r3, [r7, #14]
}
 801250e:	4618      	mov	r0, r3
 8012510:	3714      	adds	r7, #20
 8012512:	46bd      	mov	sp, r7
 8012514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012518:	4770      	bx	lr
 801251a:	bf00      	nop
 801251c:	08012ad8 	.word	0x08012ad8

08012520 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8012520:	b480      	push	{r7}
 8012522:	b087      	sub	sp, #28
 8012524:	af00      	add	r7, sp, #0
 8012526:	4603      	mov	r3, r0
 8012528:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801252a:	88fb      	ldrh	r3, [r7, #6]
 801252c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012530:	d201      	bcs.n	8012536 <ff_wtoupper+0x16>
 8012532:	4b3e      	ldr	r3, [pc, #248]	@ (801262c <ff_wtoupper+0x10c>)
 8012534:	e000      	b.n	8012538 <ff_wtoupper+0x18>
 8012536:	4b3e      	ldr	r3, [pc, #248]	@ (8012630 <ff_wtoupper+0x110>)
 8012538:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801253a:	697b      	ldr	r3, [r7, #20]
 801253c:	1c9a      	adds	r2, r3, #2
 801253e:	617a      	str	r2, [r7, #20]
 8012540:	881b      	ldrh	r3, [r3, #0]
 8012542:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8012544:	8a7b      	ldrh	r3, [r7, #18]
 8012546:	2b00      	cmp	r3, #0
 8012548:	d068      	beq.n	801261c <ff_wtoupper+0xfc>
 801254a:	88fa      	ldrh	r2, [r7, #6]
 801254c:	8a7b      	ldrh	r3, [r7, #18]
 801254e:	429a      	cmp	r2, r3
 8012550:	d364      	bcc.n	801261c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8012552:	697b      	ldr	r3, [r7, #20]
 8012554:	1c9a      	adds	r2, r3, #2
 8012556:	617a      	str	r2, [r7, #20]
 8012558:	881b      	ldrh	r3, [r3, #0]
 801255a:	823b      	strh	r3, [r7, #16]
 801255c:	8a3b      	ldrh	r3, [r7, #16]
 801255e:	0a1b      	lsrs	r3, r3, #8
 8012560:	81fb      	strh	r3, [r7, #14]
 8012562:	8a3b      	ldrh	r3, [r7, #16]
 8012564:	b2db      	uxtb	r3, r3
 8012566:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8012568:	88fa      	ldrh	r2, [r7, #6]
 801256a:	8a79      	ldrh	r1, [r7, #18]
 801256c:	8a3b      	ldrh	r3, [r7, #16]
 801256e:	440b      	add	r3, r1
 8012570:	429a      	cmp	r2, r3
 8012572:	da49      	bge.n	8012608 <ff_wtoupper+0xe8>
			switch (cmd) {
 8012574:	89fb      	ldrh	r3, [r7, #14]
 8012576:	2b08      	cmp	r3, #8
 8012578:	d84f      	bhi.n	801261a <ff_wtoupper+0xfa>
 801257a:	a201      	add	r2, pc, #4	@ (adr r2, 8012580 <ff_wtoupper+0x60>)
 801257c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012580:	080125a5 	.word	0x080125a5
 8012584:	080125b7 	.word	0x080125b7
 8012588:	080125cd 	.word	0x080125cd
 801258c:	080125d5 	.word	0x080125d5
 8012590:	080125dd 	.word	0x080125dd
 8012594:	080125e5 	.word	0x080125e5
 8012598:	080125ed 	.word	0x080125ed
 801259c:	080125f5 	.word	0x080125f5
 80125a0:	080125fd 	.word	0x080125fd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80125a4:	88fa      	ldrh	r2, [r7, #6]
 80125a6:	8a7b      	ldrh	r3, [r7, #18]
 80125a8:	1ad3      	subs	r3, r2, r3
 80125aa:	005b      	lsls	r3, r3, #1
 80125ac:	697a      	ldr	r2, [r7, #20]
 80125ae:	4413      	add	r3, r2
 80125b0:	881b      	ldrh	r3, [r3, #0]
 80125b2:	80fb      	strh	r3, [r7, #6]
 80125b4:	e027      	b.n	8012606 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80125b6:	88fa      	ldrh	r2, [r7, #6]
 80125b8:	8a7b      	ldrh	r3, [r7, #18]
 80125ba:	1ad3      	subs	r3, r2, r3
 80125bc:	b29b      	uxth	r3, r3
 80125be:	f003 0301 	and.w	r3, r3, #1
 80125c2:	b29b      	uxth	r3, r3
 80125c4:	88fa      	ldrh	r2, [r7, #6]
 80125c6:	1ad3      	subs	r3, r2, r3
 80125c8:	80fb      	strh	r3, [r7, #6]
 80125ca:	e01c      	b.n	8012606 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80125cc:	88fb      	ldrh	r3, [r7, #6]
 80125ce:	3b10      	subs	r3, #16
 80125d0:	80fb      	strh	r3, [r7, #6]
 80125d2:	e018      	b.n	8012606 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80125d4:	88fb      	ldrh	r3, [r7, #6]
 80125d6:	3b20      	subs	r3, #32
 80125d8:	80fb      	strh	r3, [r7, #6]
 80125da:	e014      	b.n	8012606 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80125dc:	88fb      	ldrh	r3, [r7, #6]
 80125de:	3b30      	subs	r3, #48	@ 0x30
 80125e0:	80fb      	strh	r3, [r7, #6]
 80125e2:	e010      	b.n	8012606 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80125e4:	88fb      	ldrh	r3, [r7, #6]
 80125e6:	3b1a      	subs	r3, #26
 80125e8:	80fb      	strh	r3, [r7, #6]
 80125ea:	e00c      	b.n	8012606 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80125ec:	88fb      	ldrh	r3, [r7, #6]
 80125ee:	3308      	adds	r3, #8
 80125f0:	80fb      	strh	r3, [r7, #6]
 80125f2:	e008      	b.n	8012606 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80125f4:	88fb      	ldrh	r3, [r7, #6]
 80125f6:	3b50      	subs	r3, #80	@ 0x50
 80125f8:	80fb      	strh	r3, [r7, #6]
 80125fa:	e004      	b.n	8012606 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80125fc:	88fb      	ldrh	r3, [r7, #6]
 80125fe:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8012602:	80fb      	strh	r3, [r7, #6]
 8012604:	bf00      	nop
			}
			break;
 8012606:	e008      	b.n	801261a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8012608:	89fb      	ldrh	r3, [r7, #14]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d195      	bne.n	801253a <ff_wtoupper+0x1a>
 801260e:	8a3b      	ldrh	r3, [r7, #16]
 8012610:	005b      	lsls	r3, r3, #1
 8012612:	697a      	ldr	r2, [r7, #20]
 8012614:	4413      	add	r3, r2
 8012616:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8012618:	e78f      	b.n	801253a <ff_wtoupper+0x1a>
			break;
 801261a:	bf00      	nop
	}

	return chr;
 801261c:	88fb      	ldrh	r3, [r7, #6]
}
 801261e:	4618      	mov	r0, r3
 8012620:	371c      	adds	r7, #28
 8012622:	46bd      	mov	sp, r7
 8012624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012628:	4770      	bx	lr
 801262a:	bf00      	nop
 801262c:	08012bd8 	.word	0x08012bd8
 8012630:	08012dcc 	.word	0x08012dcc

08012634 <memset>:
 8012634:	4402      	add	r2, r0
 8012636:	4603      	mov	r3, r0
 8012638:	4293      	cmp	r3, r2
 801263a:	d100      	bne.n	801263e <memset+0xa>
 801263c:	4770      	bx	lr
 801263e:	f803 1b01 	strb.w	r1, [r3], #1
 8012642:	e7f9      	b.n	8012638 <memset+0x4>

08012644 <__errno>:
 8012644:	4b01      	ldr	r3, [pc, #4]	@ (801264c <__errno+0x8>)
 8012646:	6818      	ldr	r0, [r3, #0]
 8012648:	4770      	bx	lr
 801264a:	bf00      	nop
 801264c:	240000bc 	.word	0x240000bc

08012650 <__libc_init_array>:
 8012650:	b570      	push	{r4, r5, r6, lr}
 8012652:	4d0d      	ldr	r5, [pc, #52]	@ (8012688 <__libc_init_array+0x38>)
 8012654:	4c0d      	ldr	r4, [pc, #52]	@ (801268c <__libc_init_array+0x3c>)
 8012656:	1b64      	subs	r4, r4, r5
 8012658:	10a4      	asrs	r4, r4, #2
 801265a:	2600      	movs	r6, #0
 801265c:	42a6      	cmp	r6, r4
 801265e:	d109      	bne.n	8012674 <__libc_init_array+0x24>
 8012660:	4d0b      	ldr	r5, [pc, #44]	@ (8012690 <__libc_init_array+0x40>)
 8012662:	4c0c      	ldr	r4, [pc, #48]	@ (8012694 <__libc_init_array+0x44>)
 8012664:	f000 f954 	bl	8012910 <_init>
 8012668:	1b64      	subs	r4, r4, r5
 801266a:	10a4      	asrs	r4, r4, #2
 801266c:	2600      	movs	r6, #0
 801266e:	42a6      	cmp	r6, r4
 8012670:	d105      	bne.n	801267e <__libc_init_array+0x2e>
 8012672:	bd70      	pop	{r4, r5, r6, pc}
 8012674:	f855 3b04 	ldr.w	r3, [r5], #4
 8012678:	4798      	blx	r3
 801267a:	3601      	adds	r6, #1
 801267c:	e7ee      	b.n	801265c <__libc_init_array+0xc>
 801267e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012682:	4798      	blx	r3
 8012684:	3601      	adds	r6, #1
 8012686:	e7f2      	b.n	801266e <__libc_init_array+0x1e>
 8012688:	08013720 	.word	0x08013720
 801268c:	08013720 	.word	0x08013720
 8012690:	08013720 	.word	0x08013720
 8012694:	08013724 	.word	0x08013724

08012698 <memcpy>:
 8012698:	440a      	add	r2, r1
 801269a:	4291      	cmp	r1, r2
 801269c:	f100 33ff 	add.w	r3, r0, #4294967295
 80126a0:	d100      	bne.n	80126a4 <memcpy+0xc>
 80126a2:	4770      	bx	lr
 80126a4:	b510      	push	{r4, lr}
 80126a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80126aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80126ae:	4291      	cmp	r1, r2
 80126b0:	d1f9      	bne.n	80126a6 <memcpy+0xe>
 80126b2:	bd10      	pop	{r4, pc}
 80126b4:	0000      	movs	r0, r0
	...

080126b8 <log>:
 80126b8:	b4f0      	push	{r4, r5, r6, r7}
 80126ba:	ee10 0a90 	vmov	r0, s1
 80126be:	ee10 3a10 	vmov	r3, s0
 80126c2:	f04f 34ff 	mov.w	r4, #4294967295
 80126c6:	429c      	cmp	r4, r3
 80126c8:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 80126cc:	4c70      	ldr	r4, [pc, #448]	@ (8012890 <log+0x1d8>)
 80126ce:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 80126d2:	418c      	sbcs	r4, r1
 80126d4:	ed2d 8b02 	vpush	{d8}
 80126d8:	ea4f 4210 	mov.w	r2, r0, lsr #16
 80126dc:	d35a      	bcc.n	8012794 <log+0xdc>
 80126de:	4a6d      	ldr	r2, [pc, #436]	@ (8012894 <log+0x1dc>)
 80126e0:	4290      	cmp	r0, r2
 80126e2:	bf08      	it	eq
 80126e4:	2b00      	cmpeq	r3, #0
 80126e6:	f000 80c4 	beq.w	8012872 <log+0x1ba>
 80126ea:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 80126ee:	ee30 0b47 	vsub.f64	d0, d0, d7
 80126f2:	4b69      	ldr	r3, [pc, #420]	@ (8012898 <log+0x1e0>)
 80126f4:	ee20 2b00 	vmul.f64	d2, d0, d0
 80126f8:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 80126fc:	ee20 4b02 	vmul.f64	d4, d0, d2
 8012700:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8012704:	eea6 7b00 	vfma.f64	d7, d6, d0
 8012708:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 801270c:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 8012710:	eea6 7b02 	vfma.f64	d7, d6, d2
 8012714:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 8012718:	eea5 6b00 	vfma.f64	d6, d5, d0
 801271c:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 8012720:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 8012724:	eea5 6b02 	vfma.f64	d6, d5, d2
 8012728:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 801272c:	eea3 5b00 	vfma.f64	d5, d3, d0
 8012730:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 8012734:	eea3 5b02 	vfma.f64	d5, d3, d2
 8012738:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 801273c:	eea3 5b04 	vfma.f64	d5, d3, d4
 8012740:	eea5 6b04 	vfma.f64	d6, d5, d4
 8012744:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8012748:	eea6 7b04 	vfma.f64	d7, d6, d4
 801274c:	eeb0 2b47 	vmov.f64	d2, d7
 8012750:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 8012878 <log+0x1c0>
 8012754:	eeb0 6b40 	vmov.f64	d6, d0
 8012758:	eeb0 3b40 	vmov.f64	d3, d0
 801275c:	eea0 6b07 	vfma.f64	d6, d0, d7
 8012760:	eea0 6b47 	vfms.f64	d6, d0, d7
 8012764:	ee30 8b46 	vsub.f64	d8, d0, d6
 8012768:	ee26 1b06 	vmul.f64	d1, d6, d6
 801276c:	eea1 3b05 	vfma.f64	d3, d1, d5
 8012770:	ee30 7b43 	vsub.f64	d7, d0, d3
 8012774:	ee30 0b06 	vadd.f64	d0, d0, d6
 8012778:	eea1 7b05 	vfma.f64	d7, d1, d5
 801277c:	ee25 5b08 	vmul.f64	d5, d5, d8
 8012780:	eea5 7b00 	vfma.f64	d7, d5, d0
 8012784:	eea2 7b04 	vfma.f64	d7, d2, d4
 8012788:	ee33 0b07 	vadd.f64	d0, d3, d7
 801278c:	ecbd 8b02 	vpop	{d8}
 8012790:	bcf0      	pop	{r4, r5, r6, r7}
 8012792:	4770      	bx	lr
 8012794:	f1a2 0410 	sub.w	r4, r2, #16
 8012798:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 801279c:	428c      	cmp	r4, r1
 801279e:	d923      	bls.n	80127e8 <log+0x130>
 80127a0:	18d9      	adds	r1, r3, r3
 80127a2:	eb40 0400 	adc.w	r4, r0, r0
 80127a6:	4321      	orrs	r1, r4
 80127a8:	d105      	bne.n	80127b6 <log+0xfe>
 80127aa:	ecbd 8b02 	vpop	{d8}
 80127ae:	2001      	movs	r0, #1
 80127b0:	bcf0      	pop	{r4, r5, r6, r7}
 80127b2:	f000 b885 	b.w	80128c0 <__math_divzero>
 80127b6:	4939      	ldr	r1, [pc, #228]	@ (801289c <log+0x1e4>)
 80127b8:	4288      	cmp	r0, r1
 80127ba:	bf08      	it	eq
 80127bc:	2b00      	cmpeq	r3, #0
 80127be:	d0e5      	beq.n	801278c <log+0xd4>
 80127c0:	0413      	lsls	r3, r2, #16
 80127c2:	d403      	bmi.n	80127cc <log+0x114>
 80127c4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80127c8:	4393      	bics	r3, r2
 80127ca:	d104      	bne.n	80127d6 <log+0x11e>
 80127cc:	ecbd 8b02 	vpop	{d8}
 80127d0:	bcf0      	pop	{r4, r5, r6, r7}
 80127d2:	f000 b88d 	b.w	80128f0 <__math_invalid>
 80127d6:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8012880 <log+0x1c8>
 80127da:	ee20 7b07 	vmul.f64	d7, d0, d7
 80127de:	ec53 2b17 	vmov	r2, r3, d7
 80127e2:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 80127e6:	4613      	mov	r3, r2
 80127e8:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 80127ec:	492a      	ldr	r1, [pc, #168]	@ (8012898 <log+0x1e0>)
 80127ee:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 80127f2:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 80127f6:	f3c2 3446 	ubfx	r4, r2, #13, #7
 80127fa:	0d15      	lsrs	r5, r2, #20
 80127fc:	eb01 1c04 	add.w	ip, r1, r4, lsl #4
 8012800:	052d      	lsls	r5, r5, #20
 8012802:	ed9c 7b24 	vldr	d7, [ip, #144]	@ 0x90
 8012806:	1e1e      	subs	r6, r3, #0
 8012808:	1b47      	subs	r7, r0, r5
 801280a:	ec47 6b16 	vmov	d6, r6, r7
 801280e:	1512      	asrs	r2, r2, #20
 8012810:	eea7 5b06 	vfma.f64	d5, d7, d6
 8012814:	ee07 2a90 	vmov	s15, r2
 8012818:	ee25 2b05 	vmul.f64	d2, d5, d5
 801281c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8012820:	ed91 4b00 	vldr	d4, [r1]
 8012824:	ee25 1b02 	vmul.f64	d1, d5, d2
 8012828:	ed9c 7b26 	vldr	d7, [ip, #152]	@ 0x98
 801282c:	eea4 7b06 	vfma.f64	d7, d4, d6
 8012830:	ee35 4b07 	vadd.f64	d4, d5, d7
 8012834:	ee37 0b44 	vsub.f64	d0, d7, d4
 8012838:	ed91 7b02 	vldr	d7, [r1, #8]
 801283c:	ee30 0b05 	vadd.f64	d0, d0, d5
 8012840:	eea7 0b06 	vfma.f64	d0, d7, d6
 8012844:	ed91 7b04 	vldr	d7, [r1, #16]
 8012848:	ed91 6b08 	vldr	d6, [r1, #32]
 801284c:	eea7 0b02 	vfma.f64	d0, d7, d2
 8012850:	ed91 7b06 	vldr	d7, [r1, #24]
 8012854:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 8012858:	eea6 7b05 	vfma.f64	d7, d6, d5
 801285c:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 8012860:	eea3 6b05 	vfma.f64	d6, d3, d5
 8012864:	eea6 7b02 	vfma.f64	d7, d6, d2
 8012868:	eea1 0b07 	vfma.f64	d0, d1, d7
 801286c:	ee30 0b04 	vadd.f64	d0, d0, d4
 8012870:	e78c      	b.n	801278c <log+0xd4>
 8012872:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 8012888 <log+0x1d0>
 8012876:	e789      	b.n	801278c <log+0xd4>
 8012878:	00000000 	.word	0x00000000
 801287c:	41a00000 	.word	0x41a00000
 8012880:	00000000 	.word	0x00000000
 8012884:	43300000 	.word	0x43300000
	...
 8012890:	000308ff 	.word	0x000308ff
 8012894:	3ff00000 	.word	0x3ff00000
 8012898:	08012e88 	.word	0x08012e88
 801289c:	7ff00000 	.word	0x7ff00000

080128a0 <with_errno>:
 80128a0:	b510      	push	{r4, lr}
 80128a2:	ed2d 8b02 	vpush	{d8}
 80128a6:	eeb0 8b40 	vmov.f64	d8, d0
 80128aa:	4604      	mov	r4, r0
 80128ac:	f7ff feca 	bl	8012644 <__errno>
 80128b0:	eeb0 0b48 	vmov.f64	d0, d8
 80128b4:	ecbd 8b02 	vpop	{d8}
 80128b8:	6004      	str	r4, [r0, #0]
 80128ba:	bd10      	pop	{r4, pc}
 80128bc:	0000      	movs	r0, r0
	...

080128c0 <__math_divzero>:
 80128c0:	b082      	sub	sp, #8
 80128c2:	2800      	cmp	r0, #0
 80128c4:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 80128c8:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 80128cc:	fe07 7b06 	vseleq.f64	d7, d7, d6
 80128d0:	ed8d 7b00 	vstr	d7, [sp]
 80128d4:	ed9d 0b00 	vldr	d0, [sp]
 80128d8:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 80128e8 <__math_divzero+0x28>
 80128dc:	2022      	movs	r0, #34	@ 0x22
 80128de:	ee80 0b07 	vdiv.f64	d0, d0, d7
 80128e2:	b002      	add	sp, #8
 80128e4:	f7ff bfdc 	b.w	80128a0 <with_errno>
	...

080128f0 <__math_invalid>:
 80128f0:	eeb0 7b40 	vmov.f64	d7, d0
 80128f4:	eeb4 7b47 	vcmp.f64	d7, d7
 80128f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128fc:	ee30 6b40 	vsub.f64	d6, d0, d0
 8012900:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8012904:	d602      	bvs.n	801290c <__math_invalid+0x1c>
 8012906:	2021      	movs	r0, #33	@ 0x21
 8012908:	f7ff bfca 	b.w	80128a0 <with_errno>
 801290c:	4770      	bx	lr
	...

08012910 <_init>:
 8012910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012912:	bf00      	nop
 8012914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012916:	bc08      	pop	{r3}
 8012918:	469e      	mov	lr, r3
 801291a:	4770      	bx	lr

0801291c <_fini>:
 801291c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801291e:	bf00      	nop
 8012920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012922:	bc08      	pop	{r3}
 8012924:	469e      	mov	lr, r3
 8012926:	4770      	bx	lr
