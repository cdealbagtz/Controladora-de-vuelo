
Controladora-de-vuelo-V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013080  080002b0  080002b0  000012b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df0  08013330  08013330  00014330  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014120  08014120  00015120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014128  08014128  00015128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801412c  0801412c  0001512c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000110  24000000  08014130  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002d30  24000110  08014240  00016110  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24002e40  08014240  00016e40  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00016110  2**0
                  CONTENTS, READONLY
 10 .debug_info   000297d8  00000000  00000000  0001613e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005401  00000000  00000000  0003f916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001fa0  00000000  00000000  00044d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001898  00000000  00000000  00046cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037f27  00000000  00000000  00048550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00031c71  00000000  00000000  00080477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00155640  00000000  00000000  000b20e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00207728  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000087c0  00000000  00000000  0020776c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000066  00000000  00000000  0020ff2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000110 	.word	0x24000110
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08013318 	.word	0x08013318

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000114 	.word	0x24000114
 80002ec:	08013318 	.word	0x08013318

080002f0 <__aeabi_ldivmod>:
 80002f0:	b97b      	cbnz	r3, 8000312 <__aeabi_ldivmod+0x22>
 80002f2:	b972      	cbnz	r2, 8000312 <__aeabi_ldivmod+0x22>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bfbe      	ittt	lt
 80002f8:	2000      	movlt	r0, #0
 80002fa:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002fe:	e006      	blt.n	800030e <__aeabi_ldivmod+0x1e>
 8000300:	bf08      	it	eq
 8000302:	2800      	cmpeq	r0, #0
 8000304:	bf1c      	itt	ne
 8000306:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800030a:	f04f 30ff 	movne.w	r0, #4294967295
 800030e:	f000 b9b5 	b.w	800067c <__aeabi_idiv0>
 8000312:	f1ad 0c08 	sub.w	ip, sp, #8
 8000316:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031a:	2900      	cmp	r1, #0
 800031c:	db09      	blt.n	8000332 <__aeabi_ldivmod+0x42>
 800031e:	2b00      	cmp	r3, #0
 8000320:	db1a      	blt.n	8000358 <__aeabi_ldivmod+0x68>
 8000322:	f000 f84d 	bl	80003c0 <__udivmoddi4>
 8000326:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032e:	b004      	add	sp, #16
 8000330:	4770      	bx	lr
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	2b00      	cmp	r3, #0
 800033a:	db1b      	blt.n	8000374 <__aeabi_ldivmod+0x84>
 800033c:	f000 f840 	bl	80003c0 <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	4252      	negs	r2, r2
 8000352:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000356:	4770      	bx	lr
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	f000 f82f 	bl	80003c0 <__udivmoddi4>
 8000362:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036a:	b004      	add	sp, #16
 800036c:	4240      	negs	r0, r0
 800036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000372:	4770      	bx	lr
 8000374:	4252      	negs	r2, r2
 8000376:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037a:	f000 f821 	bl	80003c0 <__udivmoddi4>
 800037e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000386:	b004      	add	sp, #16
 8000388:	4252      	negs	r2, r2
 800038a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <BMP280_write>:
uint16_t dig_T1, dig_P1;
int16_t  dig_T2, dig_T3, dig_P2,dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;

int32_t T_raw, P_raw, t_fine;

void BMP280_write(uint8_t Address, uint8_t Data){
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	460a      	mov	r2, r1
 800068a:	71fb      	strb	r3, [r7, #7]
 800068c:	4613      	mov	r3, r2
 800068e:	71bb      	strb	r3, [r7, #6]
	BMP280_select();
 8000690:	2200      	movs	r2, #0
 8000692:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000696:	480f      	ldr	r0, [pc, #60]	@ (80006d4 <BMP280_write+0x54>)
 8000698:	f007 f8c2 	bl	8007820 <HAL_GPIO_WritePin>
	Address &= 0x7F;
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80006a6:	1df9      	adds	r1, r7, #7
 80006a8:	2364      	movs	r3, #100	@ 0x64
 80006aa:	2201      	movs	r2, #1
 80006ac:	480a      	ldr	r0, [pc, #40]	@ (80006d8 <BMP280_write+0x58>)
 80006ae:	f00a f901 	bl	800a8b4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BMP280, &Data, 1, 100);
 80006b2:	1db9      	adds	r1, r7, #6
 80006b4:	2364      	movs	r3, #100	@ 0x64
 80006b6:	2201      	movs	r2, #1
 80006b8:	4807      	ldr	r0, [pc, #28]	@ (80006d8 <BMP280_write+0x58>)
 80006ba:	f00a f8fb 	bl	800a8b4 <HAL_SPI_Transmit>

	BMP280_unselect();
 80006be:	2201      	movs	r2, #1
 80006c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006c4:	4803      	ldr	r0, [pc, #12]	@ (80006d4 <BMP280_write+0x54>)
 80006c6:	f007 f8ab 	bl	8007820 <HAL_GPIO_WritePin>
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	58020400 	.word	0x58020400
 80006d8:	24002530 	.word	0x24002530

080006dc <BMP280_read>:

uint8_t BMP280_read(uint8_t Address){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer = (Address|0x80);
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	73fb      	strb	r3, [r7, #15]
	BMP280_select();
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006f6:	480e      	ldr	r0, [pc, #56]	@ (8000730 <BMP280_read+0x54>)
 80006f8:	f007 f892 	bl	8007820 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Buffer, 1, 100);
 80006fc:	f107 010f 	add.w	r1, r7, #15
 8000700:	2364      	movs	r3, #100	@ 0x64
 8000702:	2201      	movs	r2, #1
 8000704:	480b      	ldr	r0, [pc, #44]	@ (8000734 <BMP280_read+0x58>)
 8000706:	f00a f8d5 	bl	800a8b4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, &Buffer, 1, 100);
 800070a:	f107 010f 	add.w	r1, r7, #15
 800070e:	2364      	movs	r3, #100	@ 0x64
 8000710:	2201      	movs	r2, #1
 8000712:	4808      	ldr	r0, [pc, #32]	@ (8000734 <BMP280_read+0x58>)
 8000714:	f00a fabc 	bl	800ac90 <HAL_SPI_Receive>
	BMP280_unselect();
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800071e:	4804      	ldr	r0, [pc, #16]	@ (8000730 <BMP280_read+0x54>)
 8000720:	f007 f87e 	bl	8007820 <HAL_GPIO_WritePin>

	return Buffer;
 8000724:	7bfb      	ldrb	r3, [r7, #15]
}
 8000726:	4618      	mov	r0, r3
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	58020400 	.word	0x58020400
 8000734:	24002530 	.word	0x24002530

08000738 <BMP280_config>:

void BMP280_config(void){
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	BMP280_write(ctrl_meas, 0x57);
 800073c:	2157      	movs	r1, #87	@ 0x57
 800073e:	20f4      	movs	r0, #244	@ 0xf4
 8000740:	f7ff ff9e 	bl	8000680 <BMP280_write>
	BMP280_write(config, 0x10);
 8000744:	2110      	movs	r1, #16
 8000746:	20f5      	movs	r0, #245	@ 0xf5
 8000748:	f7ff ff9a 	bl	8000680 <BMP280_write>
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}

08000750 <BMP280_calibrationData>:

void BMP280_reset(void){
	BMP280_write(reset, 0xB6);
}

void BMP280_calibrationData(void){
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0
	uint8_t Address = 0x88;
 8000756:	2388      	movs	r3, #136	@ 0x88
 8000758:	77fb      	strb	r3, [r7, #31]
	uint8_t Buffer[24] = {0};
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	f107 0308 	add.w	r3, r7, #8
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]
	BMP280_select();
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000774:	4843      	ldr	r0, [pc, #268]	@ (8000884 <BMP280_calibrationData+0x134>)
 8000776:	f007 f853 	bl	8007820 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 800077a:	f107 011f 	add.w	r1, r7, #31
 800077e:	2364      	movs	r3, #100	@ 0x64
 8000780:	2201      	movs	r2, #1
 8000782:	4841      	ldr	r0, [pc, #260]	@ (8000888 <BMP280_calibrationData+0x138>)
 8000784:	f00a f896 	bl	800a8b4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 24, 100);
 8000788:	1d39      	adds	r1, r7, #4
 800078a:	2364      	movs	r3, #100	@ 0x64
 800078c:	2218      	movs	r2, #24
 800078e:	483e      	ldr	r0, [pc, #248]	@ (8000888 <BMP280_calibrationData+0x138>)
 8000790:	f00a fa7e 	bl	800ac90 <HAL_SPI_Receive>
	BMP280_unselect();
 8000794:	2201      	movs	r2, #1
 8000796:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800079a:	483a      	ldr	r0, [pc, #232]	@ (8000884 <BMP280_calibrationData+0x134>)
 800079c:	f007 f840 	bl	8007820 <HAL_GPIO_WritePin>

	dig_T1 = (Buffer[1]<<8)|Buffer[0];
 80007a0:	797b      	ldrb	r3, [r7, #5]
 80007a2:	021b      	lsls	r3, r3, #8
 80007a4:	b21a      	sxth	r2, r3
 80007a6:	793b      	ldrb	r3, [r7, #4]
 80007a8:	b21b      	sxth	r3, r3
 80007aa:	4313      	orrs	r3, r2
 80007ac:	b21b      	sxth	r3, r3
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	4b36      	ldr	r3, [pc, #216]	@ (800088c <BMP280_calibrationData+0x13c>)
 80007b2:	801a      	strh	r2, [r3, #0]
	dig_T2 = (Buffer[3]<<8)|Buffer[2];
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	021b      	lsls	r3, r3, #8
 80007b8:	b21a      	sxth	r2, r3
 80007ba:	79bb      	ldrb	r3, [r7, #6]
 80007bc:	b21b      	sxth	r3, r3
 80007be:	4313      	orrs	r3, r2
 80007c0:	b21a      	sxth	r2, r3
 80007c2:	4b33      	ldr	r3, [pc, #204]	@ (8000890 <BMP280_calibrationData+0x140>)
 80007c4:	801a      	strh	r2, [r3, #0]
	dig_T3 = (Buffer[5]<<8)|Buffer[4];
 80007c6:	7a7b      	ldrb	r3, [r7, #9]
 80007c8:	021b      	lsls	r3, r3, #8
 80007ca:	b21a      	sxth	r2, r3
 80007cc:	7a3b      	ldrb	r3, [r7, #8]
 80007ce:	b21b      	sxth	r3, r3
 80007d0:	4313      	orrs	r3, r2
 80007d2:	b21a      	sxth	r2, r3
 80007d4:	4b2f      	ldr	r3, [pc, #188]	@ (8000894 <BMP280_calibrationData+0x144>)
 80007d6:	801a      	strh	r2, [r3, #0]

	dig_P1 = (Buffer[7]<<8)|Buffer[6];
 80007d8:	7afb      	ldrb	r3, [r7, #11]
 80007da:	021b      	lsls	r3, r3, #8
 80007dc:	b21a      	sxth	r2, r3
 80007de:	7abb      	ldrb	r3, [r7, #10]
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	4313      	orrs	r3, r2
 80007e4:	b21b      	sxth	r3, r3
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000898 <BMP280_calibrationData+0x148>)
 80007ea:	801a      	strh	r2, [r3, #0]
	dig_P2 = (Buffer[9]<<8)|Buffer[8];
 80007ec:	7b7b      	ldrb	r3, [r7, #13]
 80007ee:	021b      	lsls	r3, r3, #8
 80007f0:	b21a      	sxth	r2, r3
 80007f2:	7b3b      	ldrb	r3, [r7, #12]
 80007f4:	b21b      	sxth	r3, r3
 80007f6:	4313      	orrs	r3, r2
 80007f8:	b21a      	sxth	r2, r3
 80007fa:	4b28      	ldr	r3, [pc, #160]	@ (800089c <BMP280_calibrationData+0x14c>)
 80007fc:	801a      	strh	r2, [r3, #0]
	dig_P3 = (Buffer[11]<<8)|Buffer[10];
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	021b      	lsls	r3, r3, #8
 8000802:	b21a      	sxth	r2, r3
 8000804:	7bbb      	ldrb	r3, [r7, #14]
 8000806:	b21b      	sxth	r3, r3
 8000808:	4313      	orrs	r3, r2
 800080a:	b21a      	sxth	r2, r3
 800080c:	4b24      	ldr	r3, [pc, #144]	@ (80008a0 <BMP280_calibrationData+0x150>)
 800080e:	801a      	strh	r2, [r3, #0]
	dig_P4 = (Buffer[13]<<8)|Buffer[12];
 8000810:	7c7b      	ldrb	r3, [r7, #17]
 8000812:	021b      	lsls	r3, r3, #8
 8000814:	b21a      	sxth	r2, r3
 8000816:	7c3b      	ldrb	r3, [r7, #16]
 8000818:	b21b      	sxth	r3, r3
 800081a:	4313      	orrs	r3, r2
 800081c:	b21a      	sxth	r2, r3
 800081e:	4b21      	ldr	r3, [pc, #132]	@ (80008a4 <BMP280_calibrationData+0x154>)
 8000820:	801a      	strh	r2, [r3, #0]
	dig_P5 = (Buffer[15]<<8)|Buffer[14];
 8000822:	7cfb      	ldrb	r3, [r7, #19]
 8000824:	021b      	lsls	r3, r3, #8
 8000826:	b21a      	sxth	r2, r3
 8000828:	7cbb      	ldrb	r3, [r7, #18]
 800082a:	b21b      	sxth	r3, r3
 800082c:	4313      	orrs	r3, r2
 800082e:	b21a      	sxth	r2, r3
 8000830:	4b1d      	ldr	r3, [pc, #116]	@ (80008a8 <BMP280_calibrationData+0x158>)
 8000832:	801a      	strh	r2, [r3, #0]
	dig_P6 = (Buffer[17]<<8)|Buffer[16];
 8000834:	7d7b      	ldrb	r3, [r7, #21]
 8000836:	021b      	lsls	r3, r3, #8
 8000838:	b21a      	sxth	r2, r3
 800083a:	7d3b      	ldrb	r3, [r7, #20]
 800083c:	b21b      	sxth	r3, r3
 800083e:	4313      	orrs	r3, r2
 8000840:	b21a      	sxth	r2, r3
 8000842:	4b1a      	ldr	r3, [pc, #104]	@ (80008ac <BMP280_calibrationData+0x15c>)
 8000844:	801a      	strh	r2, [r3, #0]
	dig_P7 = (Buffer[19]<<8)|Buffer[18];
 8000846:	7dfb      	ldrb	r3, [r7, #23]
 8000848:	021b      	lsls	r3, r3, #8
 800084a:	b21a      	sxth	r2, r3
 800084c:	7dbb      	ldrb	r3, [r7, #22]
 800084e:	b21b      	sxth	r3, r3
 8000850:	4313      	orrs	r3, r2
 8000852:	b21a      	sxth	r2, r3
 8000854:	4b16      	ldr	r3, [pc, #88]	@ (80008b0 <BMP280_calibrationData+0x160>)
 8000856:	801a      	strh	r2, [r3, #0]
	dig_P8 = (Buffer[21]<<8)|Buffer[20];
 8000858:	7e7b      	ldrb	r3, [r7, #25]
 800085a:	021b      	lsls	r3, r3, #8
 800085c:	b21a      	sxth	r2, r3
 800085e:	7e3b      	ldrb	r3, [r7, #24]
 8000860:	b21b      	sxth	r3, r3
 8000862:	4313      	orrs	r3, r2
 8000864:	b21a      	sxth	r2, r3
 8000866:	4b13      	ldr	r3, [pc, #76]	@ (80008b4 <BMP280_calibrationData+0x164>)
 8000868:	801a      	strh	r2, [r3, #0]
	dig_P9 = (Buffer[23]<<8)|Buffer[22];
 800086a:	7efb      	ldrb	r3, [r7, #27]
 800086c:	021b      	lsls	r3, r3, #8
 800086e:	b21a      	sxth	r2, r3
 8000870:	7ebb      	ldrb	r3, [r7, #26]
 8000872:	b21b      	sxth	r3, r3
 8000874:	4313      	orrs	r3, r2
 8000876:	b21a      	sxth	r2, r3
 8000878:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <BMP280_calibrationData+0x168>)
 800087a:	801a      	strh	r2, [r3, #0]
}
 800087c:	bf00      	nop
 800087e:	3720      	adds	r7, #32
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	58020400 	.word	0x58020400
 8000888:	24002530 	.word	0x24002530
 800088c:	24000140 	.word	0x24000140
 8000890:	24000144 	.word	0x24000144
 8000894:	24000146 	.word	0x24000146
 8000898:	24000142 	.word	0x24000142
 800089c:	24000148 	.word	0x24000148
 80008a0:	2400014a 	.word	0x2400014a
 80008a4:	2400014c 	.word	0x2400014c
 80008a8:	2400014e 	.word	0x2400014e
 80008ac:	24000150 	.word	0x24000150
 80008b0:	24000152 	.word	0x24000152
 80008b4:	24000154 	.word	0x24000154
 80008b8:	24000156 	.word	0x24000156

080008bc <BMP280_readRawValues>:

void BMP280_readRawValues(void){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
	uint8_t Address = press_msb;
 80008c2:	23f7      	movs	r3, #247	@ 0xf7
 80008c4:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[6] = {0};
 80008c6:	2300      	movs	r3, #0
 80008c8:	603b      	str	r3, [r7, #0]
 80008ca:	2300      	movs	r3, #0
 80008cc:	80bb      	strh	r3, [r7, #4]
	BMP280_select();
 80008ce:	2200      	movs	r2, #0
 80008d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008d4:	4817      	ldr	r0, [pc, #92]	@ (8000934 <BMP280_readRawValues+0x78>)
 80008d6:	f006 ffa3 	bl	8007820 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80008da:	1df9      	adds	r1, r7, #7
 80008dc:	2364      	movs	r3, #100	@ 0x64
 80008de:	2201      	movs	r2, #1
 80008e0:	4815      	ldr	r0, [pc, #84]	@ (8000938 <BMP280_readRawValues+0x7c>)
 80008e2:	f009 ffe7 	bl	800a8b4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 6, 100);
 80008e6:	4639      	mov	r1, r7
 80008e8:	2364      	movs	r3, #100	@ 0x64
 80008ea:	2206      	movs	r2, #6
 80008ec:	4812      	ldr	r0, [pc, #72]	@ (8000938 <BMP280_readRawValues+0x7c>)
 80008ee:	f00a f9cf 	bl	800ac90 <HAL_SPI_Receive>
	BMP280_unselect();
 80008f2:	2201      	movs	r2, #1
 80008f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008f8:	480e      	ldr	r0, [pc, #56]	@ (8000934 <BMP280_readRawValues+0x78>)
 80008fa:	f006 ff91 	bl	8007820 <HAL_GPIO_WritePin>

	P_raw = (Buffer[0]<<12)|(Buffer[1]<<4)|(Buffer[2]>>4);
 80008fe:	783b      	ldrb	r3, [r7, #0]
 8000900:	031a      	lsls	r2, r3, #12
 8000902:	787b      	ldrb	r3, [r7, #1]
 8000904:	011b      	lsls	r3, r3, #4
 8000906:	4313      	orrs	r3, r2
 8000908:	78ba      	ldrb	r2, [r7, #2]
 800090a:	0912      	lsrs	r2, r2, #4
 800090c:	b2d2      	uxtb	r2, r2
 800090e:	4313      	orrs	r3, r2
 8000910:	4a0a      	ldr	r2, [pc, #40]	@ (800093c <BMP280_readRawValues+0x80>)
 8000912:	6013      	str	r3, [r2, #0]
	T_raw = (Buffer[3]<<12)|(Buffer[4]<<4)|(Buffer[5]>>4);
 8000914:	78fb      	ldrb	r3, [r7, #3]
 8000916:	031a      	lsls	r2, r3, #12
 8000918:	793b      	ldrb	r3, [r7, #4]
 800091a:	011b      	lsls	r3, r3, #4
 800091c:	4313      	orrs	r3, r2
 800091e:	797a      	ldrb	r2, [r7, #5]
 8000920:	0912      	lsrs	r2, r2, #4
 8000922:	b2d2      	uxtb	r2, r2
 8000924:	4313      	orrs	r3, r2
 8000926:	4a06      	ldr	r2, [pc, #24]	@ (8000940 <BMP280_readRawValues+0x84>)
 8000928:	6013      	str	r3, [r2, #0]
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	58020400 	.word	0x58020400
 8000938:	24002530 	.word	0x24002530
 800093c:	2400015c 	.word	0x2400015c
 8000940:	24000158 	.word	0x24000158

08000944 <BMP280_measureT>:

int32_t BMP280_measureT(int32_t adc_T){
 8000944:	b480      	push	{r7}
 8000946:	b087      	sub	sp, #28
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 =  ((((T_raw>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 800094c:	4b1a      	ldr	r3, [pc, #104]	@ (80009b8 <BMP280_measureT+0x74>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	10da      	asrs	r2, r3, #3
 8000952:	4b1a      	ldr	r3, [pc, #104]	@ (80009bc <BMP280_measureT+0x78>)
 8000954:	881b      	ldrh	r3, [r3, #0]
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	4a19      	ldr	r2, [pc, #100]	@ (80009c0 <BMP280_measureT+0x7c>)
 800095c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000960:	fb02 f303 	mul.w	r3, r2, r3
 8000964:	12db      	asrs	r3, r3, #11
 8000966:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	111b      	asrs	r3, r3, #4
 800096c:	4a13      	ldr	r2, [pc, #76]	@ (80009bc <BMP280_measureT+0x78>)
 800096e:	8812      	ldrh	r2, [r2, #0]
 8000970:	1a9b      	subs	r3, r3, r2
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	1112      	asrs	r2, r2, #4
 8000976:	4911      	ldr	r1, [pc, #68]	@ (80009bc <BMP280_measureT+0x78>)
 8000978:	8809      	ldrh	r1, [r1, #0]
 800097a:	1a52      	subs	r2, r2, r1
 800097c:	fb02 f303 	mul.w	r3, r2, r3
 8000980:	131b      	asrs	r3, r3, #12
 8000982:	4a10      	ldr	r2, [pc, #64]	@ (80009c4 <BMP280_measureT+0x80>)
 8000984:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000988:	fb02 f303 	mul.w	r3, r2, r3
 800098c:	139b      	asrs	r3, r3, #14
 800098e:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8000990:	697a      	ldr	r2, [r7, #20]
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	4413      	add	r3, r2
 8000996:	4a0c      	ldr	r2, [pc, #48]	@ (80009c8 <BMP280_measureT+0x84>)
 8000998:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800099a:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <BMP280_measureT+0x84>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	4613      	mov	r3, r2
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	4413      	add	r3, r2
 80009a4:	3380      	adds	r3, #128	@ 0x80
 80009a6:	121b      	asrs	r3, r3, #8
 80009a8:	60fb      	str	r3, [r7, #12]
	return T;
 80009aa:	68fb      	ldr	r3, [r7, #12]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	371c      	adds	r7, #28
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	24000158 	.word	0x24000158
 80009bc:	24000140 	.word	0x24000140
 80009c0:	24000144 	.word	0x24000144
 80009c4:	24000146 	.word	0x24000146
 80009c8:	24000160 	.word	0x24000160

080009cc <BMP280_measureP>:

uint32_t BMP280_measureP(int32_t adc_P){
 80009cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80009d0:	b0ca      	sub	sp, #296	@ 0x128
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 80009d8:	4baf      	ldr	r3, [pc, #700]	@ (8000c98 <BMP280_measureP+0x2cc>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	17da      	asrs	r2, r3, #31
 80009de:	461c      	mov	r4, r3
 80009e0:	4615      	mov	r5, r2
 80009e2:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 80009e6:	f145 3bff 	adc.w	fp, r5, #4294967295
 80009ea:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 80009ee:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80009f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80009f6:	fb03 f102 	mul.w	r1, r3, r2
 80009fa:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80009fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a02:	fb02 f303 	mul.w	r3, r2, r3
 8000a06:	18ca      	adds	r2, r1, r3
 8000a08:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a0c:	fba3 8903 	umull	r8, r9, r3, r3
 8000a10:	eb02 0309 	add.w	r3, r2, r9
 8000a14:	4699      	mov	r9, r3
 8000a16:	4ba1      	ldr	r3, [pc, #644]	@ (8000c9c <BMP280_measureP+0x2d0>)
 8000a18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a1c:	b21b      	sxth	r3, r3
 8000a1e:	17da      	asrs	r2, r3, #31
 8000a20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000a24:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8000a28:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	fb03 f209 	mul.w	r2, r3, r9
 8000a32:	460b      	mov	r3, r1
 8000a34:	fb08 f303 	mul.w	r3, r8, r3
 8000a38:	4413      	add	r3, r2
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	fba8 1202 	umull	r1, r2, r8, r2
 8000a40:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8000a44:	460a      	mov	r2, r1
 8000a46:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8000a4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000a4e:	4413      	add	r3, r2
 8000a50:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000a54:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8000a58:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8000a5c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8000a60:	4b8f      	ldr	r3, [pc, #572]	@ (8000ca0 <BMP280_measureP+0x2d4>)
 8000a62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a66:	b21b      	sxth	r3, r3
 8000a68:	17da      	asrs	r2, r3, #31
 8000a6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000a6e:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8000a72:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a76:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8000a7a:	462a      	mov	r2, r5
 8000a7c:	fb02 f203 	mul.w	r2, r2, r3
 8000a80:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000a84:	4621      	mov	r1, r4
 8000a86:	fb01 f303 	mul.w	r3, r1, r3
 8000a8a:	441a      	add	r2, r3
 8000a8c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a90:	4621      	mov	r1, r4
 8000a92:	fba3 1301 	umull	r1, r3, r3, r1
 8000a96:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000a9a:	460b      	mov	r3, r1
 8000a9c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000aa4:	18d3      	adds	r3, r2, r3
 8000aa6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000aaa:	f04f 0000 	mov.w	r0, #0
 8000aae:	f04f 0100 	mov.w	r1, #0
 8000ab2:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8000ab6:	462b      	mov	r3, r5
 8000ab8:	0459      	lsls	r1, r3, #17
 8000aba:	4623      	mov	r3, r4
 8000abc:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000ac0:	4623      	mov	r3, r4
 8000ac2:	0458      	lsls	r0, r3, #17
 8000ac4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000ac8:	1814      	adds	r4, r2, r0
 8000aca:	643c      	str	r4, [r7, #64]	@ 0x40
 8000acc:	414b      	adcs	r3, r1
 8000ace:	647b      	str	r3, [r7, #68]	@ 0x44
 8000ad0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8000ad4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8000ad8:	4b72      	ldr	r3, [pc, #456]	@ (8000ca4 <BMP280_measureP+0x2d8>)
 8000ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ade:	b21b      	sxth	r3, r3
 8000ae0:	17da      	asrs	r2, r3, #31
 8000ae2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000ae6:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	f04f 0100 	mov.w	r1, #0
 8000af2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000af6:	00d9      	lsls	r1, r3, #3
 8000af8:	2000      	movs	r0, #0
 8000afa:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000afe:	1814      	adds	r4, r2, r0
 8000b00:	63bc      	str	r4, [r7, #56]	@ 0x38
 8000b02:	414b      	adcs	r3, r1
 8000b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000b06:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8000b0a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8000b0e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000b12:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b16:	fb03 f102 	mul.w	r1, r3, r2
 8000b1a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000b1e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b22:	fb02 f303 	mul.w	r3, r2, r3
 8000b26:	18ca      	adds	r2, r1, r3
 8000b28:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b2c:	fba3 1303 	umull	r1, r3, r3, r3
 8000b30:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000b34:	460b      	mov	r3, r1
 8000b36:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000b3e:	18d3      	adds	r3, r2, r3
 8000b40:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000b44:	4b58      	ldr	r3, [pc, #352]	@ (8000ca8 <BMP280_measureP+0x2dc>)
 8000b46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b4a:	b21b      	sxth	r3, r3
 8000b4c:	17da      	asrs	r2, r3, #31
 8000b4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000b52:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000b56:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8000b5a:	462b      	mov	r3, r5
 8000b5c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8000b60:	4642      	mov	r2, r8
 8000b62:	fb02 f203 	mul.w	r2, r2, r3
 8000b66:	464b      	mov	r3, r9
 8000b68:	4621      	mov	r1, r4
 8000b6a:	fb01 f303 	mul.w	r3, r1, r3
 8000b6e:	4413      	add	r3, r2
 8000b70:	4622      	mov	r2, r4
 8000b72:	4641      	mov	r1, r8
 8000b74:	fba2 1201 	umull	r1, r2, r2, r1
 8000b78:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8000b7c:	460a      	mov	r2, r1
 8000b7e:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8000b82:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000b86:	4413      	add	r3, r2
 8000b88:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	f04f 0100 	mov.w	r1, #0
 8000b94:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8000b98:	4623      	mov	r3, r4
 8000b9a:	0a18      	lsrs	r0, r3, #8
 8000b9c:	462b      	mov	r3, r5
 8000b9e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000ba2:	462b      	mov	r3, r5
 8000ba4:	1219      	asrs	r1, r3, #8
 8000ba6:	4b41      	ldr	r3, [pc, #260]	@ (8000cac <BMP280_measureP+0x2e0>)
 8000ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bac:	b21b      	sxth	r3, r3
 8000bae:	17da      	asrs	r2, r3, #31
 8000bb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000bb4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8000bb8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000bbc:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8000bc0:	464a      	mov	r2, r9
 8000bc2:	fb02 f203 	mul.w	r2, r2, r3
 8000bc6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000bca:	4644      	mov	r4, r8
 8000bcc:	fb04 f303 	mul.w	r3, r4, r3
 8000bd0:	441a      	add	r2, r3
 8000bd2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000bd6:	4644      	mov	r4, r8
 8000bd8:	fba3 4304 	umull	r4, r3, r3, r4
 8000bdc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000be0:	4623      	mov	r3, r4
 8000be2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8000be6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000bea:	18d3      	adds	r3, r2, r3
 8000bec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000bf0:	f04f 0200 	mov.w	r2, #0
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8000bfc:	464c      	mov	r4, r9
 8000bfe:	0323      	lsls	r3, r4, #12
 8000c00:	4644      	mov	r4, r8
 8000c02:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000c06:	4644      	mov	r4, r8
 8000c08:	0322      	lsls	r2, r4, #12
 8000c0a:	1884      	adds	r4, r0, r2
 8000c0c:	633c      	str	r4, [r7, #48]	@ 0x30
 8000c0e:	eb41 0303 	adc.w	r3, r1, r3
 8000c12:	637b      	str	r3, [r7, #52]	@ 0x34
 8000c14:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8000c18:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8000c1c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000c20:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8000c24:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8000c28:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8000c2c:	4b20      	ldr	r3, [pc, #128]	@ (8000cb0 <BMP280_measureP+0x2e4>)
 8000c2e:	881b      	ldrh	r3, [r3, #0]
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	2200      	movs	r2, #0
 8000c34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000c38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8000c3c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8000c40:	462b      	mov	r3, r5
 8000c42:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8000c46:	4642      	mov	r2, r8
 8000c48:	fb02 f203 	mul.w	r2, r2, r3
 8000c4c:	464b      	mov	r3, r9
 8000c4e:	4621      	mov	r1, r4
 8000c50:	fb01 f303 	mul.w	r3, r1, r3
 8000c54:	4413      	add	r3, r2
 8000c56:	4622      	mov	r2, r4
 8000c58:	4641      	mov	r1, r8
 8000c5a:	fba2 1201 	umull	r1, r2, r2, r1
 8000c5e:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8000c62:	460a      	mov	r2, r1
 8000c64:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8000c68:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000c6c:	4413      	add	r3, r2
 8000c6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8000c72:	f04f 0200 	mov.w	r2, #0
 8000c76:	f04f 0300 	mov.w	r3, #0
 8000c7a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8000c7e:	4629      	mov	r1, r5
 8000c80:	104a      	asrs	r2, r1, #1
 8000c82:	4629      	mov	r1, r5
 8000c84:	17cb      	asrs	r3, r1, #31
 8000c86:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 8000c8a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	d110      	bne.n	8000cb4 <BMP280_measureP+0x2e8>
	{
	return 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	e154      	b.n	8000f40 <BMP280_measureP+0x574>
 8000c96:	bf00      	nop
 8000c98:	24000160 	.word	0x24000160
 8000c9c:	24000150 	.word	0x24000150
 8000ca0:	2400014e 	.word	0x2400014e
 8000ca4:	2400014c 	.word	0x2400014c
 8000ca8:	2400014a 	.word	0x2400014a
 8000cac:	24000148 	.word	0x24000148
 8000cb0:	24000142 	.word	0x24000142
	}
	p = 1048576-adc_P;
 8000cb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000cb8:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8000cbc:	17da      	asrs	r2, r3, #31
 8000cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000cc2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8000cc6:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8000cca:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000cce:	105b      	asrs	r3, r3, #1
 8000cd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000cd4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000cd8:	07db      	lsls	r3, r3, #31
 8000cda:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000cde:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000ce2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8000ce6:	4621      	mov	r1, r4
 8000ce8:	1a89      	subs	r1, r1, r2
 8000cea:	67b9      	str	r1, [r7, #120]	@ 0x78
 8000cec:	4629      	mov	r1, r5
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000cf4:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8000cf8:	4622      	mov	r2, r4
 8000cfa:	462b      	mov	r3, r5
 8000cfc:	1891      	adds	r1, r2, r2
 8000cfe:	6239      	str	r1, [r7, #32]
 8000d00:	415b      	adcs	r3, r3
 8000d02:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d04:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000d08:	4621      	mov	r1, r4
 8000d0a:	1851      	adds	r1, r2, r1
 8000d0c:	61b9      	str	r1, [r7, #24]
 8000d0e:	4629      	mov	r1, r5
 8000d10:	414b      	adcs	r3, r1
 8000d12:	61fb      	str	r3, [r7, #28]
 8000d14:	f04f 0200 	mov.w	r2, #0
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000d20:	4649      	mov	r1, r9
 8000d22:	018b      	lsls	r3, r1, #6
 8000d24:	4641      	mov	r1, r8
 8000d26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000d2a:	4641      	mov	r1, r8
 8000d2c:	018a      	lsls	r2, r1, #6
 8000d2e:	4641      	mov	r1, r8
 8000d30:	1889      	adds	r1, r1, r2
 8000d32:	6139      	str	r1, [r7, #16]
 8000d34:	4649      	mov	r1, r9
 8000d36:	eb43 0101 	adc.w	r1, r3, r1
 8000d3a:	6179      	str	r1, [r7, #20]
 8000d3c:	f04f 0200 	mov.w	r2, #0
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000d48:	4649      	mov	r1, r9
 8000d4a:	008b      	lsls	r3, r1, #2
 8000d4c:	4641      	mov	r1, r8
 8000d4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d52:	4641      	mov	r1, r8
 8000d54:	008a      	lsls	r2, r1, #2
 8000d56:	4610      	mov	r0, r2
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	4622      	mov	r2, r4
 8000d5e:	189b      	adds	r3, r3, r2
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	460b      	mov	r3, r1
 8000d64:	462a      	mov	r2, r5
 8000d66:	eb42 0303 	adc.w	r3, r2, r3
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	f04f 0200 	mov.w	r2, #0
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000d78:	4649      	mov	r1, r9
 8000d7a:	008b      	lsls	r3, r1, #2
 8000d7c:	4641      	mov	r1, r8
 8000d7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d82:	4641      	mov	r1, r8
 8000d84:	008a      	lsls	r2, r1, #2
 8000d86:	4610      	mov	r0, r2
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	4622      	mov	r2, r4
 8000d8e:	189b      	adds	r3, r3, r2
 8000d90:	673b      	str	r3, [r7, #112]	@ 0x70
 8000d92:	462b      	mov	r3, r5
 8000d94:	460a      	mov	r2, r1
 8000d96:	eb42 0303 	adc.w	r3, r2, r3
 8000d9a:	677b      	str	r3, [r7, #116]	@ 0x74
 8000d9c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000da0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8000da4:	f7ff faa4 	bl	80002f0 <__aeabi_ldivmod>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8000db0:	4b66      	ldr	r3, [pc, #408]	@ (8000f4c <BMP280_measureP+0x580>)
 8000db2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000db6:	b21b      	sxth	r3, r3
 8000db8:	17da      	asrs	r2, r3, #31
 8000dba:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000dbc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000dbe:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000dc2:	f04f 0000 	mov.w	r0, #0
 8000dc6:	f04f 0100 	mov.w	r1, #0
 8000dca:	0b50      	lsrs	r0, r2, #13
 8000dcc:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000dd0:	1359      	asrs	r1, r3, #13
 8000dd2:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8000dd6:	462b      	mov	r3, r5
 8000dd8:	fb00 f203 	mul.w	r2, r0, r3
 8000ddc:	4623      	mov	r3, r4
 8000dde:	fb03 f301 	mul.w	r3, r3, r1
 8000de2:	4413      	add	r3, r2
 8000de4:	4622      	mov	r2, r4
 8000de6:	fba2 1200 	umull	r1, r2, r2, r0
 8000dea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8000dee:	460a      	mov	r2, r1
 8000df0:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8000df4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000df8:	4413      	add	r3, r2
 8000dfa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000dfe:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000e02:	f04f 0000 	mov.w	r0, #0
 8000e06:	f04f 0100 	mov.w	r1, #0
 8000e0a:	0b50      	lsrs	r0, r2, #13
 8000e0c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000e10:	1359      	asrs	r1, r3, #13
 8000e12:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8000e16:	462b      	mov	r3, r5
 8000e18:	fb00 f203 	mul.w	r2, r0, r3
 8000e1c:	4623      	mov	r3, r4
 8000e1e:	fb03 f301 	mul.w	r3, r3, r1
 8000e22:	4413      	add	r3, r2
 8000e24:	4622      	mov	r2, r4
 8000e26:	fba2 1200 	umull	r1, r2, r2, r0
 8000e2a:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8000e2e:	460a      	mov	r2, r1
 8000e30:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8000e34:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8000e38:	4413      	add	r3, r2
 8000e3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000e3e:	f04f 0200 	mov.w	r2, #0
 8000e42:	f04f 0300 	mov.w	r3, #0
 8000e46:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8000e4a:	4621      	mov	r1, r4
 8000e4c:	0e4a      	lsrs	r2, r1, #25
 8000e4e:	4629      	mov	r1, r5
 8000e50:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8000e54:	4629      	mov	r1, r5
 8000e56:	164b      	asrs	r3, r1, #25
 8000e58:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8000e5c:	4b3c      	ldr	r3, [pc, #240]	@ (8000f50 <BMP280_measureP+0x584>)
 8000e5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e62:	b21b      	sxth	r3, r3
 8000e64:	17da      	asrs	r2, r3, #31
 8000e66:	663b      	str	r3, [r7, #96]	@ 0x60
 8000e68:	667a      	str	r2, [r7, #100]	@ 0x64
 8000e6a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000e6e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8000e72:	462a      	mov	r2, r5
 8000e74:	fb02 f203 	mul.w	r2, r2, r3
 8000e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e7c:	4621      	mov	r1, r4
 8000e7e:	fb01 f303 	mul.w	r3, r1, r3
 8000e82:	4413      	add	r3, r2
 8000e84:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000e88:	4621      	mov	r1, r4
 8000e8a:	fba2 1201 	umull	r1, r2, r2, r1
 8000e8e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8000e92:	460a      	mov	r2, r1
 8000e94:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8000e98:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8000e9c:	4413      	add	r3, r2
 8000e9e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000ea2:	f04f 0200 	mov.w	r2, #0
 8000ea6:	f04f 0300 	mov.w	r3, #0
 8000eaa:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8000eae:	4621      	mov	r1, r4
 8000eb0:	0cca      	lsrs	r2, r1, #19
 8000eb2:	4629      	mov	r1, r5
 8000eb4:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8000eb8:	4629      	mov	r1, r5
 8000eba:	14cb      	asrs	r3, r1, #19
 8000ebc:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8000ec0:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8000ec4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000ec8:	1884      	adds	r4, r0, r2
 8000eca:	65bc      	str	r4, [r7, #88]	@ 0x58
 8000ecc:	eb41 0303 	adc.w	r3, r1, r3
 8000ed0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000ed2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000ed6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8000eda:	4621      	mov	r1, r4
 8000edc:	1889      	adds	r1, r1, r2
 8000ede:	6539      	str	r1, [r7, #80]	@ 0x50
 8000ee0:	4629      	mov	r1, r5
 8000ee2:	eb43 0101 	adc.w	r1, r3, r1
 8000ee6:	6579      	str	r1, [r7, #84]	@ 0x54
 8000ee8:	f04f 0000 	mov.w	r0, #0
 8000eec:	f04f 0100 	mov.w	r1, #0
 8000ef0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8000ef4:	4623      	mov	r3, r4
 8000ef6:	0a18      	lsrs	r0, r3, #8
 8000ef8:	462b      	mov	r3, r5
 8000efa:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000efe:	462b      	mov	r3, r5
 8000f00:	1219      	asrs	r1, r3, #8
 8000f02:	4b14      	ldr	r3, [pc, #80]	@ (8000f54 <BMP280_measureP+0x588>)
 8000f04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f08:	b21b      	sxth	r3, r3
 8000f0a:	17da      	asrs	r2, r3, #31
 8000f0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000f0e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8000f10:	f04f 0200 	mov.w	r2, #0
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8000f1c:	464c      	mov	r4, r9
 8000f1e:	0123      	lsls	r3, r4, #4
 8000f20:	4644      	mov	r4, r8
 8000f22:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000f26:	4644      	mov	r4, r8
 8000f28:	0122      	lsls	r2, r4, #4
 8000f2a:	1884      	adds	r4, r0, r2
 8000f2c:	603c      	str	r4, [r7, #0]
 8000f2e:	eb41 0303 	adc.w	r3, r1, r3
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000f38:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 8000f3c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8000f46:	46bd      	mov	sp, r7
 8000f48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000f4c:	24000156 	.word	0x24000156
 8000f50:	24000154 	.word	0x24000154
 8000f54:	24000152 	.word	0x24000152

08000f58 <BMP280_measureH>:

uint16_t BMP280_measureH(uint32_t Pres, int32_t Temp){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
	double var1, var2, h;

	if(Pres == 0) return 0;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d101      	bne.n	8000f6c <BMP280_measureH+0x14>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	e03d      	b.n	8000fe8 <BMP280_measureH+0x90>
	var1 = -log(((double)Pres)/101325);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	ee07 3a90 	vmov	s15, r3
 8000f72:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000f76:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8000ff0 <BMP280_measureH+0x98>
 8000f7a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000f7e:	eeb0 0b46 	vmov.f64	d0, d6
 8000f82:	f012 f89d 	bl	80130c0 <log>
 8000f86:	eeb0 7b40 	vmov.f64	d7, d0
 8000f8a:	eeb1 7b47 	vneg.f64	d7, d7
 8000f8e:	ed87 7b06 	vstr	d7, [r7, #24]

	if(var1 == 0) return 0;
 8000f92:	ed97 7b06 	vldr	d7, [r7, #24]
 8000f96:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f9e:	d101      	bne.n	8000fa4 <BMP280_measureH+0x4c>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	e021      	b.n	8000fe8 <BMP280_measureH+0x90>
	var2 = 0.0341663/((((double)Temp)/100)+273.15);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	ee07 3a90 	vmov	s15, r3
 8000faa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000fae:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8000ff8 <BMP280_measureH+0xa0>
 8000fb2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fb6:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 8001000 <BMP280_measureH+0xa8>
 8000fba:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000fbe:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8001008 <BMP280_measureH+0xb0>
 8000fc2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000fc6:	ed87 7b04 	vstr	d7, [r7, #16]
	h = var1/var2;
 8000fca:	ed97 5b06 	vldr	d5, [r7, #24]
 8000fce:	ed97 6b04 	vldr	d6, [r7, #16]
 8000fd2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000fd6:	ed87 7b02 	vstr	d7, [r7, #8]
	return (uint16_t)h;
 8000fda:	ed97 7b02 	vldr	d7, [r7, #8]
 8000fde:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fe2:	ee17 3a90 	vmov	r3, s15
 8000fe6:	b29b      	uxth	r3, r3
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3720      	adds	r7, #32
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	00000000 	.word	0x00000000
 8000ff4:	40f8bcd0 	.word	0x40f8bcd0
 8000ff8:	00000000 	.word	0x00000000
 8000ffc:	40590000 	.word	0x40590000
 8001000:	66666666 	.word	0x66666666
 8001004:	40711266 	.word	0x40711266
 8001008:	ca402a92 	.word	0xca402a92
 800100c:	3fa17e3e 	.word	0x3fa17e3e

08001010 <BMP280_init>:

void BMP280_init(void){
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	BMP280_unselect();
 8001014:	2201      	movs	r2, #1
 8001016:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800101a:	480d      	ldr	r0, [pc, #52]	@ (8001050 <BMP280_init+0x40>)
 800101c:	f006 fc00 	bl	8007820 <HAL_GPIO_WritePin>
	BMP280_config();
 8001020:	f7ff fb8a 	bl	8000738 <BMP280_config>
	BMP280.ID = BMP280_read(0x89);
 8001024:	2089      	movs	r0, #137	@ 0x89
 8001026:	f7ff fb59 	bl	80006dc <BMP280_read>
 800102a:	4603      	mov	r3, r0
 800102c:	461a      	mov	r2, r3
 800102e:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <BMP280_init+0x44>)
 8001030:	701a      	strb	r2, [r3, #0]
	BMP280_calibrationData();
 8001032:	f7ff fb8d 	bl	8000750 <BMP280_calibrationData>
	BMP280_readRawValues();
 8001036:	f7ff fc41 	bl	80008bc <BMP280_readRawValues>
	BMP280.Temp_inicial = BMP280_measureT(T_raw);
 800103a:	4b07      	ldr	r3, [pc, #28]	@ (8001058 <BMP280_init+0x48>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fc80 	bl	8000944 <BMP280_measureT>
 8001044:	4603      	mov	r3, r0
 8001046:	4a03      	ldr	r2, [pc, #12]	@ (8001054 <BMP280_init+0x44>)
 8001048:	6093      	str	r3, [r2, #8]
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	58020400 	.word	0x58020400
 8001054:	2400012c 	.word	0x2400012c
 8001058:	24000158 	.word	0x24000158

0800105c <BMP280_calculate>:

void BMP280_calculate(void){
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	//BMP280.ID = 0;
	BMP280.ID = BMP280_read(0x89);
 8001060:	2089      	movs	r0, #137	@ 0x89
 8001062:	f7ff fb3b 	bl	80006dc <BMP280_read>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	4b16      	ldr	r3, [pc, #88]	@ (80010c4 <BMP280_calculate+0x68>)
 800106c:	701a      	strb	r2, [r3, #0]
	BMP280_readRawValues();
 800106e:	f7ff fc25 	bl	80008bc <BMP280_readRawValues>
	BMP280.Temp = BMP280_measureT(T_raw);
 8001072:	4b15      	ldr	r3, [pc, #84]	@ (80010c8 <BMP280_calculate+0x6c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fc64 	bl	8000944 <BMP280_measureT>
 800107c:	4603      	mov	r3, r0
 800107e:	4a11      	ldr	r2, [pc, #68]	@ (80010c4 <BMP280_calculate+0x68>)
 8001080:	6053      	str	r3, [r2, #4]
	BMP280.Pressure    		= BMP280_measureP(P_raw)/256;
 8001082:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <BMP280_calculate+0x70>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fca0 	bl	80009cc <BMP280_measureP>
 800108c:	4603      	mov	r3, r0
 800108e:	0a1b      	lsrs	r3, r3, #8
 8001090:	4a0c      	ldr	r2, [pc, #48]	@ (80010c4 <BMP280_calculate+0x68>)
 8001092:	60d3      	str	r3, [r2, #12]
	BMP280.Barometric_Altitude = BMP280_measureH(BMP280.Pressure, BMP280.Temp_inicial);
 8001094:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <BMP280_calculate+0x68>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	4a0a      	ldr	r2, [pc, #40]	@ (80010c4 <BMP280_calculate+0x68>)
 800109a:	6892      	ldr	r2, [r2, #8]
 800109c:	4611      	mov	r1, r2
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff5a 	bl	8000f58 <BMP280_measureH>
 80010a4:	4603      	mov	r3, r0
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <BMP280_calculate+0x68>)
 80010aa:	821a      	strh	r2, [r3, #16]

	if(BMP280.Barometric_Altitude > BMP280.Max_Altitude) BMP280.Max_Altitude = BMP280.Barometric_Altitude;
 80010ac:	4b05      	ldr	r3, [pc, #20]	@ (80010c4 <BMP280_calculate+0x68>)
 80010ae:	8a1a      	ldrh	r2, [r3, #16]
 80010b0:	4b04      	ldr	r3, [pc, #16]	@ (80010c4 <BMP280_calculate+0x68>)
 80010b2:	8a5b      	ldrh	r3, [r3, #18]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d903      	bls.n	80010c0 <BMP280_calculate+0x64>
 80010b8:	4b02      	ldr	r3, [pc, #8]	@ (80010c4 <BMP280_calculate+0x68>)
 80010ba:	8a1a      	ldrh	r2, [r3, #16]
 80010bc:	4b01      	ldr	r3, [pc, #4]	@ (80010c4 <BMP280_calculate+0x68>)
 80010be:	825a      	strh	r2, [r3, #18]
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	2400012c 	.word	0x2400012c
 80010c8:	24000158 	.word	0x24000158
 80010cc:	2400015c 	.word	0x2400015c

080010d0 <bno055_delay>:

BNO_CurrentState_e BNO_CurrentState = Init;

IMU_t IMU;

void bno055_delay(uint8_t time) {
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
	BNO_DelayCounter = time;
 80010da:	4a04      	ldr	r2, [pc, #16]	@ (80010ec <bno055_delay+0x1c>)
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	7013      	strb	r3, [r2, #0]
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	24000267 	.word	0x24000267

080010f0 <BNO_Read>:

HAL_StatusTypeDef BNO_Read(uint8_t Address,uint8_t Size){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	460a      	mov	r2, r1
 80010fa:	71fb      	strb	r3, [r7, #7]
 80010fc:	4613      	mov	r3, r2
 80010fe:	71bb      	strb	r3, [r7, #6]
	uint8_t ReadCommand[4] = {0xAA, 0x01, Address, Size};
 8001100:	23aa      	movs	r3, #170	@ 0xaa
 8001102:	723b      	strb	r3, [r7, #8]
 8001104:	2301      	movs	r3, #1
 8001106:	727b      	strb	r3, [r7, #9]
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	72bb      	strb	r3, [r7, #10]
 800110c:	79bb      	ldrb	r3, [r7, #6]
 800110e:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef uartError;

	BNO_RxBuffer[0] = Address;
 8001110:	4a08      	ldr	r2, [pc, #32]	@ (8001134 <BNO_Read+0x44>)
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	7013      	strb	r3, [r2, #0]

	uartError = HAL_UART_Transmit(&huart3, ReadCommand, 4,100);
 8001116:	f107 0108 	add.w	r1, r7, #8
 800111a:	2364      	movs	r3, #100	@ 0x64
 800111c:	2204      	movs	r2, #4
 800111e:	4806      	ldr	r0, [pc, #24]	@ (8001138 <BNO_Read+0x48>)
 8001120:	f00b fd62 	bl	800cbe8 <HAL_UART_Transmit>
 8001124:	4603      	mov	r3, r0
 8001126:	73fb      	strb	r3, [r7, #15]
	return uartError;
 8001128:	7bfb      	ldrb	r3, [r7, #15]
}
 800112a:	4618      	mov	r0, r3
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	24000164 	.word	0x24000164
 8001138:	240028a8 	.word	0x240028a8

0800113c <BNO_Write>:

HAL_StatusTypeDef BNO_Write(uint8_t Address,uint8_t Data){
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	460a      	mov	r2, r1
 8001146:	71fb      	strb	r3, [r7, #7]
 8001148:	4613      	mov	r3, r2
 800114a:	71bb      	strb	r3, [r7, #6]
	uint8_t WriteCommand[5];
	HAL_StatusTypeDef uartError;

	WriteCommand[0] = 0xAA;
 800114c:	23aa      	movs	r3, #170	@ 0xaa
 800114e:	723b      	strb	r3, [r7, #8]
	WriteCommand[1] = 0x00;
 8001150:	2300      	movs	r3, #0
 8001152:	727b      	strb	r3, [r7, #9]
	WriteCommand[2] = Address;
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	72bb      	strb	r3, [r7, #10]
	WriteCommand[3] = 1;
 8001158:	2301      	movs	r3, #1
 800115a:	72fb      	strb	r3, [r7, #11]
	WriteCommand[4] = Data;
 800115c:	79bb      	ldrb	r3, [r7, #6]
 800115e:	733b      	strb	r3, [r7, #12]

	uartError = HAL_UART_Transmit(&huart3, WriteCommand,5,100);
 8001160:	f107 0108 	add.w	r1, r7, #8
 8001164:	2364      	movs	r3, #100	@ 0x64
 8001166:	2205      	movs	r2, #5
 8001168:	4804      	ldr	r0, [pc, #16]	@ (800117c <BNO_Write+0x40>)
 800116a:	f00b fd3d 	bl	800cbe8 <HAL_UART_Transmit>
 800116e:	4603      	mov	r3, r0
 8001170:	73fb      	strb	r3, [r7, #15]
	return uartError;
 8001172:	7bfb      	ldrb	r3, [r7, #15]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	240028a8 	.word	0x240028a8

08001180 <BNO_Page0Adress>:

void BNO_Page0Adress(void){
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
	switch (BNO_RxBuffer[0]) {
 8001184:	4b92      	ldr	r3, [pc, #584]	@ (80013d0 <BNO_Page0Adress+0x250>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b55      	cmp	r3, #85	@ 0x55
 800118a:	f300 8167 	bgt.w	800145c <BNO_Page0Adress+0x2dc>
 800118e:	2b35      	cmp	r3, #53	@ 0x35
 8001190:	da0a      	bge.n	80011a8 <BNO_Page0Adress+0x28>
 8001192:	2b1a      	cmp	r3, #26
 8001194:	f000 8122 	beq.w	80013dc <BNO_Page0Adress+0x25c>
 8001198:	2b1a      	cmp	r3, #26
 800119a:	f300 815f 	bgt.w	800145c <BNO_Page0Adress+0x2dc>
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d04c      	beq.n	800123c <BNO_Page0Adress+0xbc>
 80011a2:	2b07      	cmp	r3, #7
 80011a4:	d060      	beq.n	8001268 <BNO_Page0Adress+0xe8>
			IMU.Pitch = ((double)((int16_t)((BNO_RxBuffer[6] << 8) | BNO_RxBuffer[5])))/16;

			BNO_ErrorHandler = ReadSucces;
			break;
		default:
			break;
 80011a6:	e159      	b.n	800145c <BNO_Page0Adress+0x2dc>
	switch (BNO_RxBuffer[0]) {
 80011a8:	3b35      	subs	r3, #53	@ 0x35
 80011aa:	2b20      	cmp	r3, #32
 80011ac:	f200 8156 	bhi.w	800145c <BNO_Page0Adress+0x2dc>
 80011b0:	a201      	add	r2, pc, #4	@ (adr r2, 80011b8 <BNO_Page0Adress+0x38>)
 80011b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b6:	bf00      	nop
 80011b8:	080012b1 	.word	0x080012b1
 80011bc:	0800145d 	.word	0x0800145d
 80011c0:	0800145d 	.word	0x0800145d
 80011c4:	0800145d 	.word	0x0800145d
 80011c8:	0800128d 	.word	0x0800128d
 80011cc:	0800145d 	.word	0x0800145d
 80011d0:	0800127b 	.word	0x0800127b
 80011d4:	0800145d 	.word	0x0800145d
 80011d8:	0800129f 	.word	0x0800129f
 80011dc:	0800145d 	.word	0x0800145d
 80011e0:	0800145d 	.word	0x0800145d
 80011e4:	0800145d 	.word	0x0800145d
 80011e8:	0800145d 	.word	0x0800145d
 80011ec:	0800145d 	.word	0x0800145d
 80011f0:	0800145d 	.word	0x0800145d
 80011f4:	0800145d 	.word	0x0800145d
 80011f8:	0800145d 	.word	0x0800145d
 80011fc:	0800145d 	.word	0x0800145d
 8001200:	0800145d 	.word	0x0800145d
 8001204:	0800145d 	.word	0x0800145d
 8001208:	0800145d 	.word	0x0800145d
 800120c:	0800145d 	.word	0x0800145d
 8001210:	0800145d 	.word	0x0800145d
 8001214:	0800145d 	.word	0x0800145d
 8001218:	0800145d 	.word	0x0800145d
 800121c:	0800145d 	.word	0x0800145d
 8001220:	0800145d 	.word	0x0800145d
 8001224:	0800145d 	.word	0x0800145d
 8001228:	0800145d 	.word	0x0800145d
 800122c:	0800145d 	.word	0x0800145d
 8001230:	0800145d 	.word	0x0800145d
 8001234:	0800145d 	.word	0x0800145d
 8001238:	080012c3 	.word	0x080012c3
			IMU.ID = BNO_RxBuffer[1];
 800123c:	4b64      	ldr	r3, [pc, #400]	@ (80013d0 <BNO_Page0Adress+0x250>)
 800123e:	785a      	ldrb	r2, [r3, #1]
 8001240:	4b64      	ldr	r3, [pc, #400]	@ (80013d4 <BNO_Page0Adress+0x254>)
 8001242:	701a      	strb	r2, [r3, #0]
			IMU.ACC.ID = BNO_RxBuffer[2];
 8001244:	4b62      	ldr	r3, [pc, #392]	@ (80013d0 <BNO_Page0Adress+0x250>)
 8001246:	789a      	ldrb	r2, [r3, #2]
 8001248:	4b62      	ldr	r3, [pc, #392]	@ (80013d4 <BNO_Page0Adress+0x254>)
 800124a:	721a      	strb	r2, [r3, #8]
			IMU.MAG.ID = BNO_RxBuffer[3];
 800124c:	4b60      	ldr	r3, [pc, #384]	@ (80013d0 <BNO_Page0Adress+0x250>)
 800124e:	78da      	ldrb	r2, [r3, #3]
 8001250:	4b60      	ldr	r3, [pc, #384]	@ (80013d4 <BNO_Page0Adress+0x254>)
 8001252:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			IMU.GYR.ID = BNO_RxBuffer[4];
 8001256:	4b5e      	ldr	r3, [pc, #376]	@ (80013d0 <BNO_Page0Adress+0x250>)
 8001258:	791a      	ldrb	r2, [r3, #4]
 800125a:	4b5e      	ldr	r3, [pc, #376]	@ (80013d4 <BNO_Page0Adress+0x254>)
 800125c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
			BNO_ErrorHandler = ReadSucces;
 8001260:	4b5d      	ldr	r3, [pc, #372]	@ (80013d8 <BNO_Page0Adress+0x258>)
 8001262:	220b      	movs	r2, #11
 8001264:	701a      	strb	r2, [r3, #0]
			break;
 8001266:	e0fa      	b.n	800145e <BNO_Page0Adress+0x2de>
			IMU.Page = BNO_RxBuffer[1];
 8001268:	4b59      	ldr	r3, [pc, #356]	@ (80013d0 <BNO_Page0Adress+0x250>)
 800126a:	785a      	ldrb	r2, [r3, #1]
 800126c:	4b59      	ldr	r3, [pc, #356]	@ (80013d4 <BNO_Page0Adress+0x254>)
 800126e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			BNO_ErrorHandler = ReadSucces;
 8001272:	4b59      	ldr	r3, [pc, #356]	@ (80013d8 <BNO_Page0Adress+0x258>)
 8001274:	220b      	movs	r2, #11
 8001276:	701a      	strb	r2, [r3, #0]
			break;
 8001278:	e0f1      	b.n	800145e <BNO_Page0Adress+0x2de>
			IMU.Unit_Select = BNO_RxBuffer[1];
 800127a:	4b55      	ldr	r3, [pc, #340]	@ (80013d0 <BNO_Page0Adress+0x250>)
 800127c:	785a      	ldrb	r2, [r3, #1]
 800127e:	4b55      	ldr	r3, [pc, #340]	@ (80013d4 <BNO_Page0Adress+0x254>)
 8001280:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
			BNO_ErrorHandler = ReadSucces;
 8001284:	4b54      	ldr	r3, [pc, #336]	@ (80013d8 <BNO_Page0Adress+0x258>)
 8001286:	220b      	movs	r2, #11
 8001288:	701a      	strb	r2, [r3, #0]
			break;
 800128a:	e0e8      	b.n	800145e <BNO_Page0Adress+0x2de>
			IMU.System_Status = BNO_RxBuffer[1];
 800128c:	4b50      	ldr	r3, [pc, #320]	@ (80013d0 <BNO_Page0Adress+0x250>)
 800128e:	785a      	ldrb	r2, [r3, #1]
 8001290:	4b50      	ldr	r3, [pc, #320]	@ (80013d4 <BNO_Page0Adress+0x254>)
 8001292:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
			BNO_ErrorHandler = ReadSucces;
 8001296:	4b50      	ldr	r3, [pc, #320]	@ (80013d8 <BNO_Page0Adress+0x258>)
 8001298:	220b      	movs	r2, #11
 800129a:	701a      	strb	r2, [r3, #0]
			break;
 800129c:	e0df      	b.n	800145e <BNO_Page0Adress+0x2de>
			IMU.Op_Mode = BNO_RxBuffer[1];
 800129e:	4b4c      	ldr	r3, [pc, #304]	@ (80013d0 <BNO_Page0Adress+0x250>)
 80012a0:	785a      	ldrb	r2, [r3, #1]
 80012a2:	4b4c      	ldr	r3, [pc, #304]	@ (80013d4 <BNO_Page0Adress+0x254>)
 80012a4:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
			BNO_ErrorHandler = ReadSucces;
 80012a8:	4b4b      	ldr	r3, [pc, #300]	@ (80013d8 <BNO_Page0Adress+0x258>)
 80012aa:	220b      	movs	r2, #11
 80012ac:	701a      	strb	r2, [r3, #0]
			break;
 80012ae:	e0d6      	b.n	800145e <BNO_Page0Adress+0x2de>
			IMU.SysCalibration = BNO_RxBuffer[1];
 80012b0:	4b47      	ldr	r3, [pc, #284]	@ (80013d0 <BNO_Page0Adress+0x250>)
 80012b2:	785a      	ldrb	r2, [r3, #1]
 80012b4:	4b47      	ldr	r3, [pc, #284]	@ (80013d4 <BNO_Page0Adress+0x254>)
 80012b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
			BNO_ErrorHandler = ReadSucces;
 80012ba:	4b47      	ldr	r3, [pc, #284]	@ (80013d8 <BNO_Page0Adress+0x258>)
 80012bc:	220b      	movs	r2, #11
 80012be:	701a      	strb	r2, [r3, #0]
			break;
 80012c0:	e0cd      	b.n	800145e <BNO_Page0Adress+0x2de>
			IMU.Calibration_Data.offset.accel.x = (int16_t)((BNO_RxBuffer[2] << 8) | BNO_RxBuffer[1]);
 80012c2:	4b43      	ldr	r3, [pc, #268]	@ (80013d0 <BNO_Page0Adress+0x250>)
 80012c4:	789b      	ldrb	r3, [r3, #2]
 80012c6:	021b      	lsls	r3, r3, #8
 80012c8:	b21a      	sxth	r2, r3
 80012ca:	4b41      	ldr	r3, [pc, #260]	@ (80013d0 <BNO_Page0Adress+0x250>)
 80012cc:	785b      	ldrb	r3, [r3, #1]
 80012ce:	b21b      	sxth	r3, r3
 80012d0:	4313      	orrs	r3, r2
 80012d2:	b21a      	sxth	r2, r3
 80012d4:	4b3f      	ldr	r3, [pc, #252]	@ (80013d4 <BNO_Page0Adress+0x254>)
 80012d6:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
			IMU.Calibration_Data.offset.accel.y = (int16_t)((BNO_RxBuffer[4] << 8) | BNO_RxBuffer[3]);
 80012da:	4b3d      	ldr	r3, [pc, #244]	@ (80013d0 <BNO_Page0Adress+0x250>)
 80012dc:	791b      	ldrb	r3, [r3, #4]
 80012de:	021b      	lsls	r3, r3, #8
 80012e0:	b21a      	sxth	r2, r3
 80012e2:	4b3b      	ldr	r3, [pc, #236]	@ (80013d0 <BNO_Page0Adress+0x250>)
 80012e4:	78db      	ldrb	r3, [r3, #3]
 80012e6:	b21b      	sxth	r3, r3
 80012e8:	4313      	orrs	r3, r2
 80012ea:	b21a      	sxth	r2, r3
 80012ec:	4b39      	ldr	r3, [pc, #228]	@ (80013d4 <BNO_Page0Adress+0x254>)
 80012ee:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
			IMU.Calibration_Data.offset.accel.z = (int16_t)((BNO_RxBuffer[6] << 8) | BNO_RxBuffer[5]);
 80012f2:	4b37      	ldr	r3, [pc, #220]	@ (80013d0 <BNO_Page0Adress+0x250>)
 80012f4:	799b      	ldrb	r3, [r3, #6]
 80012f6:	021b      	lsls	r3, r3, #8
 80012f8:	b21a      	sxth	r2, r3
 80012fa:	4b35      	ldr	r3, [pc, #212]	@ (80013d0 <BNO_Page0Adress+0x250>)
 80012fc:	795b      	ldrb	r3, [r3, #5]
 80012fe:	b21b      	sxth	r3, r3
 8001300:	4313      	orrs	r3, r2
 8001302:	b21a      	sxth	r2, r3
 8001304:	4b33      	ldr	r3, [pc, #204]	@ (80013d4 <BNO_Page0Adress+0x254>)
 8001306:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
			IMU.Calibration_Data.offset.mag.x = (int16_t)((BNO_RxBuffer[8] << 8) | BNO_RxBuffer[7]);
 800130a:	4b31      	ldr	r3, [pc, #196]	@ (80013d0 <BNO_Page0Adress+0x250>)
 800130c:	7a1b      	ldrb	r3, [r3, #8]
 800130e:	021b      	lsls	r3, r3, #8
 8001310:	b21a      	sxth	r2, r3
 8001312:	4b2f      	ldr	r3, [pc, #188]	@ (80013d0 <BNO_Page0Adress+0x250>)
 8001314:	79db      	ldrb	r3, [r3, #7]
 8001316:	b21b      	sxth	r3, r3
 8001318:	4313      	orrs	r3, r2
 800131a:	b21a      	sxth	r2, r3
 800131c:	4b2d      	ldr	r3, [pc, #180]	@ (80013d4 <BNO_Page0Adress+0x254>)
 800131e:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
			IMU.Calibration_Data.offset.mag.y = (int16_t)((BNO_RxBuffer[10] << 8) | BNO_RxBuffer[9]);
 8001322:	4b2b      	ldr	r3, [pc, #172]	@ (80013d0 <BNO_Page0Adress+0x250>)
 8001324:	7a9b      	ldrb	r3, [r3, #10]
 8001326:	021b      	lsls	r3, r3, #8
 8001328:	b21a      	sxth	r2, r3
 800132a:	4b29      	ldr	r3, [pc, #164]	@ (80013d0 <BNO_Page0Adress+0x250>)
 800132c:	7a5b      	ldrb	r3, [r3, #9]
 800132e:	b21b      	sxth	r3, r3
 8001330:	4313      	orrs	r3, r2
 8001332:	b21a      	sxth	r2, r3
 8001334:	4b27      	ldr	r3, [pc, #156]	@ (80013d4 <BNO_Page0Adress+0x254>)
 8001336:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
			IMU.Calibration_Data.offset.mag.z = (int16_t)((BNO_RxBuffer[12] << 8) | BNO_RxBuffer[11]);
 800133a:	4b25      	ldr	r3, [pc, #148]	@ (80013d0 <BNO_Page0Adress+0x250>)
 800133c:	7b1b      	ldrb	r3, [r3, #12]
 800133e:	021b      	lsls	r3, r3, #8
 8001340:	b21a      	sxth	r2, r3
 8001342:	4b23      	ldr	r3, [pc, #140]	@ (80013d0 <BNO_Page0Adress+0x250>)
 8001344:	7adb      	ldrb	r3, [r3, #11]
 8001346:	b21b      	sxth	r3, r3
 8001348:	4313      	orrs	r3, r2
 800134a:	b21a      	sxth	r2, r3
 800134c:	4b21      	ldr	r3, [pc, #132]	@ (80013d4 <BNO_Page0Adress+0x254>)
 800134e:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
			IMU.Calibration_Data.offset.gyro.x = (int16_t)((BNO_RxBuffer[14] << 8) | BNO_RxBuffer[13]);
 8001352:	4b1f      	ldr	r3, [pc, #124]	@ (80013d0 <BNO_Page0Adress+0x250>)
 8001354:	7b9b      	ldrb	r3, [r3, #14]
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	b21a      	sxth	r2, r3
 800135a:	4b1d      	ldr	r3, [pc, #116]	@ (80013d0 <BNO_Page0Adress+0x250>)
 800135c:	7b5b      	ldrb	r3, [r3, #13]
 800135e:	b21b      	sxth	r3, r3
 8001360:	4313      	orrs	r3, r2
 8001362:	b21a      	sxth	r2, r3
 8001364:	4b1b      	ldr	r3, [pc, #108]	@ (80013d4 <BNO_Page0Adress+0x254>)
 8001366:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
			IMU.Calibration_Data.offset.gyro.y = (int16_t)((BNO_RxBuffer[16] << 8) | BNO_RxBuffer[15]);
 800136a:	4b19      	ldr	r3, [pc, #100]	@ (80013d0 <BNO_Page0Adress+0x250>)
 800136c:	7c1b      	ldrb	r3, [r3, #16]
 800136e:	021b      	lsls	r3, r3, #8
 8001370:	b21a      	sxth	r2, r3
 8001372:	4b17      	ldr	r3, [pc, #92]	@ (80013d0 <BNO_Page0Adress+0x250>)
 8001374:	7bdb      	ldrb	r3, [r3, #15]
 8001376:	b21b      	sxth	r3, r3
 8001378:	4313      	orrs	r3, r2
 800137a:	b21a      	sxth	r2, r3
 800137c:	4b15      	ldr	r3, [pc, #84]	@ (80013d4 <BNO_Page0Adress+0x254>)
 800137e:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
			IMU.Calibration_Data.offset.gyro.z = (int16_t)((BNO_RxBuffer[18] << 8) | BNO_RxBuffer[17]);
 8001382:	4b13      	ldr	r3, [pc, #76]	@ (80013d0 <BNO_Page0Adress+0x250>)
 8001384:	7c9b      	ldrb	r3, [r3, #18]
 8001386:	021b      	lsls	r3, r3, #8
 8001388:	b21a      	sxth	r2, r3
 800138a:	4b11      	ldr	r3, [pc, #68]	@ (80013d0 <BNO_Page0Adress+0x250>)
 800138c:	7c5b      	ldrb	r3, [r3, #17]
 800138e:	b21b      	sxth	r3, r3
 8001390:	4313      	orrs	r3, r2
 8001392:	b21a      	sxth	r2, r3
 8001394:	4b0f      	ldr	r3, [pc, #60]	@ (80013d4 <BNO_Page0Adress+0x254>)
 8001396:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
			IMU.Calibration_Data.radius.accel = (uint16_t)((BNO_RxBuffer[20] << 8) | BNO_RxBuffer[19]);
 800139a:	4b0d      	ldr	r3, [pc, #52]	@ (80013d0 <BNO_Page0Adress+0x250>)
 800139c:	7d1b      	ldrb	r3, [r3, #20]
 800139e:	021b      	lsls	r3, r3, #8
 80013a0:	b21a      	sxth	r2, r3
 80013a2:	4b0b      	ldr	r3, [pc, #44]	@ (80013d0 <BNO_Page0Adress+0x250>)
 80013a4:	7cdb      	ldrb	r3, [r3, #19]
 80013a6:	b21b      	sxth	r3, r3
 80013a8:	4313      	orrs	r3, r2
 80013aa:	b21b      	sxth	r3, r3
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	4b09      	ldr	r3, [pc, #36]	@ (80013d4 <BNO_Page0Adress+0x254>)
 80013b0:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
			IMU.Calibration_Data.radius.mag   = (uint16_t)((BNO_RxBuffer[22] << 8) | BNO_RxBuffer[21]);
 80013b4:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <BNO_Page0Adress+0x250>)
 80013b6:	7d9b      	ldrb	r3, [r3, #22]
 80013b8:	021b      	lsls	r3, r3, #8
 80013ba:	b21a      	sxth	r2, r3
 80013bc:	4b04      	ldr	r3, [pc, #16]	@ (80013d0 <BNO_Page0Adress+0x250>)
 80013be:	7d5b      	ldrb	r3, [r3, #21]
 80013c0:	b21b      	sxth	r3, r3
 80013c2:	4313      	orrs	r3, r2
 80013c4:	b21b      	sxth	r3, r3
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	4b02      	ldr	r3, [pc, #8]	@ (80013d4 <BNO_Page0Adress+0x254>)
 80013ca:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
			break;
 80013ce:	e046      	b.n	800145e <BNO_Page0Adress+0x2de>
 80013d0:	24000164 	.word	0x24000164
 80013d4:	24000270 	.word	0x24000270
 80013d8:	24000265 	.word	0x24000265
			IMU.Heading = ((double)((int16_t)((BNO_RxBuffer[2] << 8) | BNO_RxBuffer[1])))/16;
 80013dc:	4b22      	ldr	r3, [pc, #136]	@ (8001468 <BNO_Page0Adress+0x2e8>)
 80013de:	789b      	ldrb	r3, [r3, #2]
 80013e0:	021b      	lsls	r3, r3, #8
 80013e2:	b21a      	sxth	r2, r3
 80013e4:	4b20      	ldr	r3, [pc, #128]	@ (8001468 <BNO_Page0Adress+0x2e8>)
 80013e6:	785b      	ldrb	r3, [r3, #1]
 80013e8:	b21b      	sxth	r3, r3
 80013ea:	4313      	orrs	r3, r2
 80013ec:	b21b      	sxth	r3, r3
 80013ee:	ee07 3a90 	vmov	s15, r3
 80013f2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80013f6:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 80013fa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80013fe:	4b1b      	ldr	r3, [pc, #108]	@ (800146c <BNO_Page0Adress+0x2ec>)
 8001400:	ed83 7b1a 	vstr	d7, [r3, #104]	@ 0x68
			IMU.Roll = ((double)((int16_t)((BNO_RxBuffer[4] << 8) | BNO_RxBuffer[3])))/16;
 8001404:	4b18      	ldr	r3, [pc, #96]	@ (8001468 <BNO_Page0Adress+0x2e8>)
 8001406:	791b      	ldrb	r3, [r3, #4]
 8001408:	021b      	lsls	r3, r3, #8
 800140a:	b21a      	sxth	r2, r3
 800140c:	4b16      	ldr	r3, [pc, #88]	@ (8001468 <BNO_Page0Adress+0x2e8>)
 800140e:	78db      	ldrb	r3, [r3, #3]
 8001410:	b21b      	sxth	r3, r3
 8001412:	4313      	orrs	r3, r2
 8001414:	b21b      	sxth	r3, r3
 8001416:	ee07 3a90 	vmov	s15, r3
 800141a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800141e:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001422:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001426:	4b11      	ldr	r3, [pc, #68]	@ (800146c <BNO_Page0Adress+0x2ec>)
 8001428:	ed83 7b1e 	vstr	d7, [r3, #120]	@ 0x78
			IMU.Pitch = ((double)((int16_t)((BNO_RxBuffer[6] << 8) | BNO_RxBuffer[5])))/16;
 800142c:	4b0e      	ldr	r3, [pc, #56]	@ (8001468 <BNO_Page0Adress+0x2e8>)
 800142e:	799b      	ldrb	r3, [r3, #6]
 8001430:	021b      	lsls	r3, r3, #8
 8001432:	b21a      	sxth	r2, r3
 8001434:	4b0c      	ldr	r3, [pc, #48]	@ (8001468 <BNO_Page0Adress+0x2e8>)
 8001436:	795b      	ldrb	r3, [r3, #5]
 8001438:	b21b      	sxth	r3, r3
 800143a:	4313      	orrs	r3, r2
 800143c:	b21b      	sxth	r3, r3
 800143e:	ee07 3a90 	vmov	s15, r3
 8001442:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001446:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 800144a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800144e:	4b07      	ldr	r3, [pc, #28]	@ (800146c <BNO_Page0Adress+0x2ec>)
 8001450:	ed83 7b1c 	vstr	d7, [r3, #112]	@ 0x70
			BNO_ErrorHandler = ReadSucces;
 8001454:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <BNO_Page0Adress+0x2f0>)
 8001456:	220b      	movs	r2, #11
 8001458:	701a      	strb	r2, [r3, #0]
			break;
 800145a:	e000      	b.n	800145e <BNO_Page0Adress+0x2de>
			break;
 800145c:	bf00      	nop
	}
}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	24000164 	.word	0x24000164
 800146c:	24000270 	.word	0x24000270
 8001470:	24000265 	.word	0x24000265

08001474 <BNO_Page1Adress>:

void BNO_Page1Adress(void){
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
	switch (BNO_RxBuffer[0]) {
 8001478:	4b09      	ldr	r3, [pc, #36]	@ (80014a0 <BNO_Page1Adress+0x2c>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b07      	cmp	r3, #7
 800147e:	d108      	bne.n	8001492 <BNO_Page1Adress+0x1e>
		case BNO055_PAGE_ID:
			IMU.Page = BNO_RxBuffer[1];
 8001480:	4b07      	ldr	r3, [pc, #28]	@ (80014a0 <BNO_Page1Adress+0x2c>)
 8001482:	785a      	ldrb	r2, [r3, #1]
 8001484:	4b07      	ldr	r3, [pc, #28]	@ (80014a4 <BNO_Page1Adress+0x30>)
 8001486:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			BNO_ErrorHandler = ReadSucces;
 800148a:	4b07      	ldr	r3, [pc, #28]	@ (80014a8 <BNO_Page1Adress+0x34>)
 800148c:	220b      	movs	r2, #11
 800148e:	701a      	strb	r2, [r3, #0]
			break;
 8001490:	e000      	b.n	8001494 <BNO_Page1Adress+0x20>

		default:
			break;
 8001492:	bf00      	nop
	}
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	24000164 	.word	0x24000164
 80014a4:	24000270 	.word	0x24000270
 80014a8:	24000265 	.word	0x24000265

080014ac <BNO_EmptyingBuffer>:

void BNO_EmptyingBuffer(void){
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
	switch (IMU.Page) {
 80014b0:	4b0a      	ldr	r3, [pc, #40]	@ (80014dc <BNO_EmptyingBuffer+0x30>)
 80014b2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d002      	beq.n	80014c0 <BNO_EmptyingBuffer+0x14>
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d003      	beq.n	80014c6 <BNO_EmptyingBuffer+0x1a>
			break;
		case 1:
			BNO_Page1Adress();
			break;
		default:
			break;
 80014be:	e005      	b.n	80014cc <BNO_EmptyingBuffer+0x20>
			BNO_Page0Adress();
 80014c0:	f7ff fe5e 	bl	8001180 <BNO_Page0Adress>
			break;
 80014c4:	e002      	b.n	80014cc <BNO_EmptyingBuffer+0x20>
			BNO_Page1Adress();
 80014c6:	f7ff ffd5 	bl	8001474 <BNO_Page1Adress>
			break;
 80014ca:	bf00      	nop
	}
	memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 80014cc:	22ff      	movs	r2, #255	@ 0xff
 80014ce:	2100      	movs	r1, #0
 80014d0:	4803      	ldr	r0, [pc, #12]	@ (80014e0 <BNO_EmptyingBuffer+0x34>)
 80014d2:	f011 fdb3 	bl	801303c <memset>
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	24000270 	.word	0x24000270
 80014e0:	24000164 	.word	0x24000164

080014e4 <BNO_HWReset>:
void BNO_SelectPage(uint8_t Page){
	BNO_Write(BNO055_PAGE_ID, Page);
	BNO_Read(BNO055_PAGE_ID, 1);
}

void BNO_HWReset(void){
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
	static uint8_t ResetFlag = 0;
	switch (ResetFlag) {
 80014e8:	4b13      	ldr	r3, [pc, #76]	@ (8001538 <BNO_HWReset+0x54>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d002      	beq.n	80014f6 <BNO_HWReset+0x12>
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d00f      	beq.n	8001514 <BNO_HWReset+0x30>
			bno055_delay(70);
			ResetFlag = 0;
			BNO_CurrentState = Config;
			break;
		default:
			break;
 80014f4:	e01d      	b.n	8001532 <BNO_HWReset+0x4e>
			HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, RESET);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2104      	movs	r1, #4
 80014fa:	4810      	ldr	r0, [pc, #64]	@ (800153c <BNO_HWReset+0x58>)
 80014fc:	f006 f990 	bl	8007820 <HAL_GPIO_WritePin>
			bno055_delay(1);
 8001500:	2001      	movs	r0, #1
 8001502:	f7ff fde5 	bl	80010d0 <bno055_delay>
			ResetFlag = 1;
 8001506:	4b0c      	ldr	r3, [pc, #48]	@ (8001538 <BNO_HWReset+0x54>)
 8001508:	2201      	movs	r2, #1
 800150a:	701a      	strb	r2, [r3, #0]
			IMU.ID = 0x00;
 800150c:	4b0c      	ldr	r3, [pc, #48]	@ (8001540 <BNO_HWReset+0x5c>)
 800150e:	2200      	movs	r2, #0
 8001510:	701a      	strb	r2, [r3, #0]
			break;
 8001512:	e00e      	b.n	8001532 <BNO_HWReset+0x4e>
			HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, SET);
 8001514:	2201      	movs	r2, #1
 8001516:	2104      	movs	r1, #4
 8001518:	4808      	ldr	r0, [pc, #32]	@ (800153c <BNO_HWReset+0x58>)
 800151a:	f006 f981 	bl	8007820 <HAL_GPIO_WritePin>
			bno055_delay(70);
 800151e:	2046      	movs	r0, #70	@ 0x46
 8001520:	f7ff fdd6 	bl	80010d0 <bno055_delay>
			ResetFlag = 0;
 8001524:	4b04      	ldr	r3, [pc, #16]	@ (8001538 <BNO_HWReset+0x54>)
 8001526:	2200      	movs	r2, #0
 8001528:	701a      	strb	r2, [r3, #0]
			BNO_CurrentState = Config;
 800152a:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <BNO_HWReset+0x60>)
 800152c:	2201      	movs	r2, #1
 800152e:	701a      	strb	r2, [r3, #0]
			break;
 8001530:	bf00      	nop
	}



}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	24000310 	.word	0x24000310
 800153c:	58020c00 	.word	0x58020c00
 8001540:	24000270 	.word	0x24000270
 8001544:	24000268 	.word	0x24000268

08001548 <bno055_setOperationMode>:
void BNO_SWReset(void){
	BNO_Write(BNO055_SYS_TRIGGER,0x20);
	bno055_delay(70);
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
  BNO_Write(BNO055_OPR_MODE, mode);
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	4619      	mov	r1, r3
 8001556:	203d      	movs	r0, #61	@ 0x3d
 8001558:	f7ff fdf0 	bl	800113c <BNO_Write>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d103      	bne.n	800156a <bno055_setOperationMode+0x22>
    bno055_delay(3);
 8001562:	2003      	movs	r0, #3
 8001564:	f7ff fdb4 	bl	80010d0 <bno055_delay>
  } else {
    bno055_delay(1);
  }
}
 8001568:	e002      	b.n	8001570 <bno055_setOperationMode+0x28>
    bno055_delay(1);
 800156a:	2001      	movs	r0, #1
 800156c:	f7ff fdb0 	bl	80010d0 <bno055_delay>
}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeConfig() {
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
}

void bno055_setOperationModeNDOF() {
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 800157c:	200c      	movs	r0, #12
 800157e:	f7ff ffe3 	bl	8001548 <bno055_setOperationMode>
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
	...

08001588 <BNO_CalibrationStatus>:

void BNO_GetCalibrationData(void){
	BNO_Read(BNO055_ACC_OFFSET_X_LSB, 22);
}

void BNO_CalibrationStatus(void){
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
	else{
		LED_Info.B_LED1.LED_status = RESET;
		BNO_GetCalibrationData();
	}
	 */
	BNO_Read(BNO055_OPR_MODE, 1);
 800158c:	2101      	movs	r1, #1
 800158e:	203d      	movs	r0, #61	@ 0x3d
 8001590:	f7ff fdae 	bl	80010f0 <BNO_Read>



    if(IMU.Op_Mode == BNO055_OPERATION_MODE_NDOF){
 8001594:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <BNO_CalibrationStatus+0x28>)
 8001596:	f893 3083 	ldrb.w	r3, [r3, #131]	@ 0x83
 800159a:	2b0c      	cmp	r3, #12
 800159c:	d103      	bne.n	80015a6 <BNO_CalibrationStatus+0x1e>
    	BNO_CurrentState = Operation;
 800159e:	4b05      	ldr	r3, [pc, #20]	@ (80015b4 <BNO_CalibrationStatus+0x2c>)
 80015a0:	2203      	movs	r2, #3
 80015a2:	701a      	strb	r2, [r3, #0]
    }
    else bno055_setOperationModeNDOF();
}
 80015a4:	e001      	b.n	80015aa <BNO_CalibrationStatus+0x22>
    else bno055_setOperationModeNDOF();
 80015a6:	f7ff ffe7 	bl	8001578 <bno055_setOperationModeNDOF>
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	24000270 	.word	0x24000270
 80015b4:	24000268 	.word	0x24000268

080015b8 <BNO_Init>:

void BNO_Init(void){
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, SET);
 80015bc:	2201      	movs	r2, #1
 80015be:	2104      	movs	r1, #4
 80015c0:	4808      	ldr	r0, [pc, #32]	@ (80015e4 <BNO_Init+0x2c>)
 80015c2:	f006 f92d 	bl	8007820 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IMU_BOOT_GPIO_Port, IMU_BOOT_Pin, SET);
 80015c6:	2201      	movs	r2, #1
 80015c8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015cc:	4806      	ldr	r0, [pc, #24]	@ (80015e8 <BNO_Init+0x30>)
 80015ce:	f006 f927 	bl	8007820 <HAL_GPIO_WritePin>

	bno055_delay(100);
 80015d2:	2064      	movs	r0, #100	@ 0x64
 80015d4:	f7ff fd7c 	bl	80010d0 <bno055_delay>

	BNO_CurrentState = Reset;
 80015d8:	4b04      	ldr	r3, [pc, #16]	@ (80015ec <BNO_Init+0x34>)
 80015da:	2204      	movs	r2, #4
 80015dc:	701a      	strb	r2, [r3, #0]
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	58020c00 	.word	0x58020c00
 80015e8:	58020400 	.word	0x58020400
 80015ec:	24000268 	.word	0x24000268

080015f0 <BNO_Config>:

void BNO_Config(void){
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
	BNO_Read(BNO055_CHIP_ID, 4);
 80015f4:	2104      	movs	r1, #4
 80015f6:	2000      	movs	r0, #0
 80015f8:	f7ff fd7a 	bl	80010f0 <BNO_Read>

	if(IMU.ID == BNO055_ID){
 80015fc:	4b07      	ldr	r3, [pc, #28]	@ (800161c <BNO_Config+0x2c>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2ba0      	cmp	r3, #160	@ 0xa0
 8001602:	d106      	bne.n	8001612 <BNO_Config+0x22>
		BNO_Write(BNO055_SYS_TRIGGER, 0x00);
 8001604:	2100      	movs	r1, #0
 8001606:	203f      	movs	r0, #63	@ 0x3f
 8001608:	f7ff fd98 	bl	800113c <BNO_Write>
		BNO_CurrentState = Calibration;
 800160c:	4b04      	ldr	r3, [pc, #16]	@ (8001620 <BNO_Config+0x30>)
 800160e:	2202      	movs	r2, #2
 8001610:	701a      	strb	r2, [r3, #0]
	}
	bno055_delay(3);
 8001612:	2003      	movs	r0, #3
 8001614:	f7ff fd5c 	bl	80010d0 <bno055_delay>
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}
 800161c:	24000270 	.word	0x24000270
 8001620:	24000268 	.word	0x24000268

08001624 <BNO_GetAtt>:

void BNO_GetAtt(void){
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
	BNO_Read(BNO055_EUL_HEADING_LSB, 6);
 8001628:	2106      	movs	r1, #6
 800162a:	201a      	movs	r0, #26
 800162c:	f7ff fd60 	bl	80010f0 <BNO_Read>
}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}

08001634 <BNO_Receive>:

void BNO_Receive(uint8_t Buffer){
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
	static uint8_t MsgSize = 0;
	static uint8_t Counter = 0;

	BNO_ComsCounter = 0;
 800163e:	4b2a      	ldr	r3, [pc, #168]	@ (80016e8 <BNO_Receive+0xb4>)
 8001640:	2200      	movs	r2, #0
 8001642:	701a      	strb	r2, [r3, #0]

	switch (BNO_Rx_Status) {
 8001644:	4b29      	ldr	r3, [pc, #164]	@ (80016ec <BNO_Receive+0xb8>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2bff      	cmp	r3, #255	@ 0xff
 800164a:	d022      	beq.n	8001692 <BNO_Receive+0x5e>
 800164c:	2bff      	cmp	r3, #255	@ 0xff
 800164e:	dc41      	bgt.n	80016d4 <BNO_Receive+0xa0>
 8001650:	2bee      	cmp	r3, #238	@ 0xee
 8001652:	d017      	beq.n	8001684 <BNO_Receive+0x50>
 8001654:	2bee      	cmp	r3, #238	@ 0xee
 8001656:	dc3d      	bgt.n	80016d4 <BNO_Receive+0xa0>
 8001658:	2b00      	cmp	r3, #0
 800165a:	d002      	beq.n	8001662 <BNO_Receive+0x2e>
 800165c:	2bbb      	cmp	r3, #187	@ 0xbb
 800165e:	d00a      	beq.n	8001676 <BNO_Receive+0x42>
				BNO_EmptyingBuffer();
			}

			break;
		default:
			break;
 8001660:	e038      	b.n	80016d4 <BNO_Receive+0xa0>
			if(Buffer == Read_Response || Buffer == Header) BNO_Rx_Status = Buffer;
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	2bbb      	cmp	r3, #187	@ 0xbb
 8001666:	d002      	beq.n	800166e <BNO_Receive+0x3a>
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	2bee      	cmp	r3, #238	@ 0xee
 800166c:	d134      	bne.n	80016d8 <BNO_Receive+0xa4>
 800166e:	4a1f      	ldr	r2, [pc, #124]	@ (80016ec <BNO_Receive+0xb8>)
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	7013      	strb	r3, [r2, #0]
			break;
 8001674:	e030      	b.n	80016d8 <BNO_Receive+0xa4>
			MsgSize = Buffer;
 8001676:	4a1e      	ldr	r2, [pc, #120]	@ (80016f0 <BNO_Receive+0xbc>)
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = Emptying_Buffer;
 800167c:	4b1b      	ldr	r3, [pc, #108]	@ (80016ec <BNO_Receive+0xb8>)
 800167e:	22ff      	movs	r2, #255	@ 0xff
 8001680:	701a      	strb	r2, [r3, #0]
			break;
 8001682:	e02c      	b.n	80016de <BNO_Receive+0xaa>
			BNO_ErrorHandler = Buffer;
 8001684:	4a1b      	ldr	r2, [pc, #108]	@ (80016f4 <BNO_Receive+0xc0>)
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = AwaitingMsg;
 800168a:	4b18      	ldr	r3, [pc, #96]	@ (80016ec <BNO_Receive+0xb8>)
 800168c:	2200      	movs	r2, #0
 800168e:	701a      	strb	r2, [r3, #0]
			break;
 8001690:	e025      	b.n	80016de <BNO_Receive+0xaa>
			BNO_RxBuffer[Counter + 1] = Buffer;
 8001692:	4b19      	ldr	r3, [pc, #100]	@ (80016f8 <BNO_Receive+0xc4>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	3301      	adds	r3, #1
 8001698:	4918      	ldr	r1, [pc, #96]	@ (80016fc <BNO_Receive+0xc8>)
 800169a:	79fa      	ldrb	r2, [r7, #7]
 800169c:	54ca      	strb	r2, [r1, r3]
			Counter++;
 800169e:	4b16      	ldr	r3, [pc, #88]	@ (80016f8 <BNO_Receive+0xc4>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	3301      	adds	r3, #1
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	4b14      	ldr	r3, [pc, #80]	@ (80016f8 <BNO_Receive+0xc4>)
 80016a8:	701a      	strb	r2, [r3, #0]
			if(Counter == MsgSize){
 80016aa:	4b13      	ldr	r3, [pc, #76]	@ (80016f8 <BNO_Receive+0xc4>)
 80016ac:	781a      	ldrb	r2, [r3, #0]
 80016ae:	4b10      	ldr	r3, [pc, #64]	@ (80016f0 <BNO_Receive+0xbc>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d112      	bne.n	80016dc <BNO_Receive+0xa8>
				Counter = 0;
 80016b6:	4b10      	ldr	r3, [pc, #64]	@ (80016f8 <BNO_Receive+0xc4>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	701a      	strb	r2, [r3, #0]
				MsgSize = 0;
 80016bc:	4b0c      	ldr	r3, [pc, #48]	@ (80016f0 <BNO_Receive+0xbc>)
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
				BNO_Rx_Status = AwaitingMsg;
 80016c2:	4b0a      	ldr	r3, [pc, #40]	@ (80016ec <BNO_Receive+0xb8>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]
				BNO_ErrorHandler = ReadSucces;
 80016c8:	4b0a      	ldr	r3, [pc, #40]	@ (80016f4 <BNO_Receive+0xc0>)
 80016ca:	220b      	movs	r2, #11
 80016cc:	701a      	strb	r2, [r3, #0]
				BNO_EmptyingBuffer();
 80016ce:	f7ff feed 	bl	80014ac <BNO_EmptyingBuffer>
			break;
 80016d2:	e003      	b.n	80016dc <BNO_Receive+0xa8>
			break;
 80016d4:	bf00      	nop
 80016d6:	e002      	b.n	80016de <BNO_Receive+0xaa>
			break;
 80016d8:	bf00      	nop
 80016da:	e000      	b.n	80016de <BNO_Receive+0xaa>
			break;
 80016dc:	bf00      	nop
	}
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	24000266 	.word	0x24000266
 80016ec:	24000264 	.word	0x24000264
 80016f0:	24000311 	.word	0x24000311
 80016f4:	24000265 	.word	0x24000265
 80016f8:	24000312 	.word	0x24000312
 80016fc:	24000164 	.word	0x24000164

08001700 <BNO_FaultManager>:

void BNO_FaultManager(void){
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
	if(BNO_ComsCounter > 200){
 8001704:	4b08      	ldr	r3, [pc, #32]	@ (8001728 <BNO_FaultManager+0x28>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2bc8      	cmp	r3, #200	@ 0xc8
 800170a:	d90a      	bls.n	8001722 <BNO_FaultManager+0x22>
		BNO_CurrentState = Reset;
 800170c:	4b07      	ldr	r3, [pc, #28]	@ (800172c <BNO_FaultManager+0x2c>)
 800170e:	2204      	movs	r2, #4
 8001710:	701a      	strb	r2, [r3, #0]
		BNO_ComsCounter = 0;
 8001712:	4b05      	ldr	r3, [pc, #20]	@ (8001728 <BNO_FaultManager+0x28>)
 8001714:	2200      	movs	r2, #0
 8001716:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 8001718:	2201      	movs	r2, #1
 800171a:	4905      	ldr	r1, [pc, #20]	@ (8001730 <BNO_FaultManager+0x30>)
 800171c:	4805      	ldr	r0, [pc, #20]	@ (8001734 <BNO_FaultManager+0x34>)
 800171e:	f00b faf1 	bl	800cd04 <HAL_UART_Receive_DMA>
	}
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	24000266 	.word	0x24000266
 800172c:	24000268 	.word	0x24000268
 8001730:	24000263 	.word	0x24000263
 8001734:	240028a8 	.word	0x240028a8

08001738 <BNO_Tasks>:

void BNO_Tasks(void){
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
	if(BNO_DelayCounter == 0){
 800173c:	4b1b      	ldr	r3, [pc, #108]	@ (80017ac <BNO_Tasks+0x74>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d128      	bne.n	8001796 <BNO_Tasks+0x5e>
		switch (BNO_CurrentState) {
 8001744:	4b1a      	ldr	r3, [pc, #104]	@ (80017b0 <BNO_Tasks+0x78>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b04      	cmp	r3, #4
 800174a:	d81c      	bhi.n	8001786 <BNO_Tasks+0x4e>
 800174c:	a201      	add	r2, pc, #4	@ (adr r2, 8001754 <BNO_Tasks+0x1c>)
 800174e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001752:	bf00      	nop
 8001754:	08001769 	.word	0x08001769
 8001758:	08001775 	.word	0x08001775
 800175c:	0800177b 	.word	0x0800177b
 8001760:	08001781 	.word	0x08001781
 8001764:	0800176f 	.word	0x0800176f
			case Init:
				BNO_Init();
 8001768:	f7ff ff26 	bl	80015b8 <BNO_Init>
				break;
 800176c:	e00c      	b.n	8001788 <BNO_Tasks+0x50>
			case Reset:
				BNO_HWReset();
 800176e:	f7ff feb9 	bl	80014e4 <BNO_HWReset>
			break;
 8001772:	e009      	b.n	8001788 <BNO_Tasks+0x50>
			case Config:
				BNO_Config();
 8001774:	f7ff ff3c 	bl	80015f0 <BNO_Config>
				break;
 8001778:	e006      	b.n	8001788 <BNO_Tasks+0x50>
			case Calibration:
				BNO_CalibrationStatus();
 800177a:	f7ff ff05 	bl	8001588 <BNO_CalibrationStatus>
				break;
 800177e:	e003      	b.n	8001788 <BNO_Tasks+0x50>
			case Operation:
				BNO_GetAtt();
 8001780:	f7ff ff50 	bl	8001624 <BNO_GetAtt>
				break;
 8001784:	e000      	b.n	8001788 <BNO_Tasks+0x50>

			default:
				break;
 8001786:	bf00      	nop
		}
		++BNO_ComsCounter;
 8001788:	4b0a      	ldr	r3, [pc, #40]	@ (80017b4 <BNO_Tasks+0x7c>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	3301      	adds	r3, #1
 800178e:	b2da      	uxtb	r2, r3
 8001790:	4b08      	ldr	r3, [pc, #32]	@ (80017b4 <BNO_Tasks+0x7c>)
 8001792:	701a      	strb	r2, [r3, #0]
 8001794:	e005      	b.n	80017a2 <BNO_Tasks+0x6a>
	}
	else{
		--BNO_DelayCounter;
 8001796:	4b05      	ldr	r3, [pc, #20]	@ (80017ac <BNO_Tasks+0x74>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	3b01      	subs	r3, #1
 800179c:	b2da      	uxtb	r2, r3
 800179e:	4b03      	ldr	r3, [pc, #12]	@ (80017ac <BNO_Tasks+0x74>)
 80017a0:	701a      	strb	r2, [r3, #0]
	}
	BNO_FaultManager();
 80017a2:	f7ff ffad 	bl	8001700 <BNO_FaultManager>
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	24000267 	.word	0x24000267
 80017b0:	24000268 	.word	0x24000268
 80017b4:	24000266 	.word	0x24000266

080017b8 <LED_blink>:

		.G_LED.LED_GPIO_GPIOx = LED_5_GPIO_Port,
		.G_LED.LED_GPIO_Pin   = LED_5_Pin
};

LED_config_t LED_blink(LED_config_t LED){
 80017b8:	b084      	sub	sp, #16
 80017ba:	b590      	push	{r4, r7, lr}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	f107 001c 	add.w	r0, r7, #28
 80017c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}

		switch (LED.Blink_status) {
 80017ca:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d002      	beq.n	80017d8 <LED_blink+0x20>
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d010      	beq.n	80017f8 <LED_blink+0x40>
 80017d6:	e01f      	b.n	8001818 <LED_blink+0x60>
			case 0x00:
				if(LED.count >= LED.Time_Off){
 80017d8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80017da:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80017dc:	429a      	cmp	r2, r3
 80017de:	d31f      	bcc.n	8001820 <LED_blink+0x68>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	8c39      	ldrh	r1, [r7, #32]
 80017e4:	2201      	movs	r2, #1
 80017e6:	4618      	mov	r0, r3
 80017e8:	f006 f81a 	bl	8007820 <HAL_GPIO_WritePin>
					LED.Blink_status = 1;
 80017ec:	2301      	movs	r3, #1
 80017ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 80017f6:	e013      	b.n	8001820 <LED_blink+0x68>
			case 0x01:
				if(LED.count >= LED.Time_On){
 80017f8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80017fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d311      	bcc.n	8001824 <LED_blink+0x6c>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	8c39      	ldrh	r1, [r7, #32]
 8001804:	2200      	movs	r2, #0
 8001806:	4618      	mov	r0, r3
 8001808:	f006 f80a 	bl	8007820 <HAL_GPIO_WritePin>
					LED.Blink_status = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 8001816:	e005      	b.n	8001824 <LED_blink+0x6c>
			default:
				LED.Blink_status = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
				break;
 800181e:	e002      	b.n	8001826 <LED_blink+0x6e>
				break;
 8001820:	bf00      	nop
 8001822:	e000      	b.n	8001826 <LED_blink+0x6e>
				break;
 8001824:	bf00      	nop
		}

	LED.count++;
 8001826:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001828:	3301      	adds	r3, #1
 800182a:	b29b      	uxth	r3, r3
 800182c:	853b      	strh	r3, [r7, #40]	@ 0x28
	return LED;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	461c      	mov	r4, r3
 8001832:	f107 031c 	add.w	r3, r7, #28
 8001836:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001838:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001846:	b004      	add	sp, #16
 8001848:	4770      	bx	lr

0800184a <LED_Rutine>:

LED_config_t LED_Rutine(LED_config_t LED){
 800184a:	b084      	sub	sp, #16
 800184c:	b590      	push	{r4, r7, lr}
 800184e:	b085      	sub	sp, #20
 8001850:	af02      	add	r7, sp, #8
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	f107 001c 	add.w	r0, r7, #28
 8001858:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(LED.LED_status == 1){
 800185c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001860:	2b01      	cmp	r3, #1
 8001862:	d117      	bne.n	8001894 <LED_Rutine+0x4a>
		switch (LED.Sequence) {
 8001864:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001868:	2b00      	cmp	r3, #0
 800186a:	d002      	beq.n	8001872 <LED_Rutine+0x28>
 800186c:	2b01      	cmp	r3, #1
 800186e:	d007      	beq.n	8001880 <LED_Rutine+0x36>
				break;
			case Blink:
				LED = LED_blink(LED);
				break;
			default:
				break;
 8001870:	e018      	b.n	80018a4 <LED_Rutine+0x5a>
				HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	8c39      	ldrh	r1, [r7, #32]
 8001876:	2201      	movs	r2, #1
 8001878:	4618      	mov	r0, r3
 800187a:	f005 ffd1 	bl	8007820 <HAL_GPIO_WritePin>
				break;
 800187e:	e011      	b.n	80018a4 <LED_Rutine+0x5a>
				LED = LED_blink(LED);
 8001880:	f107 001c 	add.w	r0, r7, #28
 8001884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	f107 031c 	add.w	r3, r7, #28
 800188c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800188e:	f7ff ff93 	bl	80017b8 <LED_blink>
				break;
 8001892:	e007      	b.n	80018a4 <LED_Rutine+0x5a>
		}
	}
	else{
		HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	8c39      	ldrh	r1, [r7, #32]
 8001898:	2200      	movs	r2, #0
 800189a:	4618      	mov	r0, r3
 800189c:	f005 ffc0 	bl	8007820 <HAL_GPIO_WritePin>
		LED.count = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	853b      	strh	r3, [r7, #40]	@ 0x28
	}
	return LED;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	461c      	mov	r4, r3
 80018a8:	f107 031c 	add.w	r3, r7, #28
 80018ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80018bc:	b004      	add	sp, #16
 80018be:	4770      	bx	lr

080018c0 <LED_Tasks>:

void LED_Tasks (void){
 80018c0:	b590      	push	{r4, r7, lr}
 80018c2:	b087      	sub	sp, #28
 80018c4:	af02      	add	r7, sp, #8
	LED_Info.R_LED = LED_Rutine(LED_Info.R_LED);
 80018c6:	4c24      	ldr	r4, [pc, #144]	@ (8001958 <LED_Tasks+0x98>)
 80018c8:	4638      	mov	r0, r7
 80018ca:	4b23      	ldr	r3, [pc, #140]	@ (8001958 <LED_Tasks+0x98>)
 80018cc:	68da      	ldr	r2, [r3, #12]
 80018ce:	9200      	str	r2, [sp, #0]
 80018d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018d2:	f7ff ffba 	bl	800184a <LED_Rutine>
 80018d6:	463b      	mov	r3, r7
 80018d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED1 = LED_Rutine(LED_Info.B_LED1);
 80018de:	4c1e      	ldr	r4, [pc, #120]	@ (8001958 <LED_Tasks+0x98>)
 80018e0:	4638      	mov	r0, r7
 80018e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001958 <LED_Tasks+0x98>)
 80018e4:	69da      	ldr	r2, [r3, #28]
 80018e6:	9200      	str	r2, [sp, #0]
 80018e8:	3310      	adds	r3, #16
 80018ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018ec:	f7ff ffad 	bl	800184a <LED_Rutine>
 80018f0:	3410      	adds	r4, #16
 80018f2:	463b      	mov	r3, r7
 80018f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED2 = LED_Rutine(LED_Info.B_LED2);
 80018fa:	4c17      	ldr	r4, [pc, #92]	@ (8001958 <LED_Tasks+0x98>)
 80018fc:	4638      	mov	r0, r7
 80018fe:	4b16      	ldr	r3, [pc, #88]	@ (8001958 <LED_Tasks+0x98>)
 8001900:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001902:	9200      	str	r2, [sp, #0]
 8001904:	3320      	adds	r3, #32
 8001906:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001908:	f7ff ff9f 	bl	800184a <LED_Rutine>
 800190c:	3420      	adds	r4, #32
 800190e:	463b      	mov	r3, r7
 8001910:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001912:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED3 = LED_Rutine(LED_Info.B_LED3);
 8001916:	4c10      	ldr	r4, [pc, #64]	@ (8001958 <LED_Tasks+0x98>)
 8001918:	4638      	mov	r0, r7
 800191a:	4b0f      	ldr	r3, [pc, #60]	@ (8001958 <LED_Tasks+0x98>)
 800191c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800191e:	9200      	str	r2, [sp, #0]
 8001920:	3330      	adds	r3, #48	@ 0x30
 8001922:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001924:	f7ff ff91 	bl	800184a <LED_Rutine>
 8001928:	3430      	adds	r4, #48	@ 0x30
 800192a:	463b      	mov	r3, r7
 800192c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800192e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.G_LED = LED_Rutine(LED_Info.G_LED);
 8001932:	4c09      	ldr	r4, [pc, #36]	@ (8001958 <LED_Tasks+0x98>)
 8001934:	4638      	mov	r0, r7
 8001936:	4b08      	ldr	r3, [pc, #32]	@ (8001958 <LED_Tasks+0x98>)
 8001938:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800193a:	9200      	str	r2, [sp, #0]
 800193c:	3340      	adds	r3, #64	@ 0x40
 800193e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001940:	f7ff ff83 	bl	800184a <LED_Rutine>
 8001944:	3440      	adds	r4, #64	@ 0x40
 8001946:	463b      	mov	r3, r7
 8001948:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800194a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800194e:	bf00      	nop
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	bd90      	pop	{r4, r7, pc}
 8001956:	bf00      	nop
 8001958:	24000000 	.word	0x24000000

0800195c <PWM_Assing>:
		.Canal_8  = 1500,
		.Canal_9  = 1500,
		.Canal_10 = 1500,
};

void PWM_Assing(void){
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
	TIM2->CCR1 = PWM_Output.Canal_1;
 8001960:	4b2a      	ldr	r3, [pc, #168]	@ (8001a0c <PWM_Assing+0xb0>)
 8001962:	881a      	ldrh	r2, [r3, #0]
 8001964:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001968:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2->CCR2 = PWM_Output.Canal_2;
 800196a:	4b28      	ldr	r3, [pc, #160]	@ (8001a0c <PWM_Assing+0xb0>)
 800196c:	885a      	ldrh	r2, [r3, #2]
 800196e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001972:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM3->CCR1 = PWM_Output.Canal_3;
 8001974:	4b25      	ldr	r3, [pc, #148]	@ (8001a0c <PWM_Assing+0xb0>)
 8001976:	889a      	ldrh	r2, [r3, #4]
 8001978:	4b25      	ldr	r3, [pc, #148]	@ (8001a10 <PWM_Assing+0xb4>)
 800197a:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = PWM_Output.Canal_4;
 800197c:	4b23      	ldr	r3, [pc, #140]	@ (8001a0c <PWM_Assing+0xb0>)
 800197e:	88da      	ldrh	r2, [r3, #6]
 8001980:	4b23      	ldr	r3, [pc, #140]	@ (8001a10 <PWM_Assing+0xb4>)
 8001982:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM4->CCR1 = PWM_Output.Canal_5;
 8001984:	4b21      	ldr	r3, [pc, #132]	@ (8001a0c <PWM_Assing+0xb0>)
 8001986:	891a      	ldrh	r2, [r3, #8]
 8001988:	4b22      	ldr	r3, [pc, #136]	@ (8001a14 <PWM_Assing+0xb8>)
 800198a:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM4->CCR2 = PWM_Output.Canal_6;
 800198c:	4b1f      	ldr	r3, [pc, #124]	@ (8001a0c <PWM_Assing+0xb0>)
 800198e:	895a      	ldrh	r2, [r3, #10]
 8001990:	4b20      	ldr	r3, [pc, #128]	@ (8001a14 <PWM_Assing+0xb8>)
 8001992:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM4->CCR3 = PWM_Output.Canal_7;
 8001994:	4b1d      	ldr	r3, [pc, #116]	@ (8001a0c <PWM_Assing+0xb0>)
 8001996:	899a      	ldrh	r2, [r3, #12]
 8001998:	4b1e      	ldr	r3, [pc, #120]	@ (8001a14 <PWM_Assing+0xb8>)
 800199a:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM4->CCR4 = PWM_Output.Canal_8;
 800199c:	4b1b      	ldr	r3, [pc, #108]	@ (8001a0c <PWM_Assing+0xb0>)
 800199e:	89da      	ldrh	r2, [r3, #14]
 80019a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001a14 <PWM_Assing+0xb8>)
 80019a2:	641a      	str	r2, [r3, #64]	@ 0x40

	TIM2->CCR4 = PWM_Output.Canal_9;
 80019a4:	4b19      	ldr	r3, [pc, #100]	@ (8001a0c <PWM_Assing+0xb0>)
 80019a6:	8a1a      	ldrh	r2, [r3, #16]
 80019a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019ac:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM2->CCR3 = PWM_Output.Canal_10;
 80019ae:	4b17      	ldr	r3, [pc, #92]	@ (8001a0c <PWM_Assing+0xb0>)
 80019b0:	8a5a      	ldrh	r2, [r3, #18]
 80019b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019b6:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80019b8:	2100      	movs	r1, #0
 80019ba:	4817      	ldr	r0, [pc, #92]	@ (8001a18 <PWM_Assing+0xbc>)
 80019bc:	f00a f924 	bl	800bc08 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80019c0:	2104      	movs	r1, #4
 80019c2:	4815      	ldr	r0, [pc, #84]	@ (8001a18 <PWM_Assing+0xbc>)
 80019c4:	f00a f920 	bl	800bc08 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80019c8:	2108      	movs	r1, #8
 80019ca:	4813      	ldr	r0, [pc, #76]	@ (8001a18 <PWM_Assing+0xbc>)
 80019cc:	f00a f91c 	bl	800bc08 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80019d0:	210c      	movs	r1, #12
 80019d2:	4811      	ldr	r0, [pc, #68]	@ (8001a18 <PWM_Assing+0xbc>)
 80019d4:	f00a f918 	bl	800bc08 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80019d8:	2100      	movs	r1, #0
 80019da:	4810      	ldr	r0, [pc, #64]	@ (8001a1c <PWM_Assing+0xc0>)
 80019dc:	f00a f914 	bl	800bc08 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80019e0:	2104      	movs	r1, #4
 80019e2:	480e      	ldr	r0, [pc, #56]	@ (8001a1c <PWM_Assing+0xc0>)
 80019e4:	f00a f910 	bl	800bc08 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80019e8:	2100      	movs	r1, #0
 80019ea:	480d      	ldr	r0, [pc, #52]	@ (8001a20 <PWM_Assing+0xc4>)
 80019ec:	f00a f90c 	bl	800bc08 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80019f0:	2104      	movs	r1, #4
 80019f2:	480b      	ldr	r0, [pc, #44]	@ (8001a20 <PWM_Assing+0xc4>)
 80019f4:	f00a f908 	bl	800bc08 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80019f8:	2108      	movs	r1, #8
 80019fa:	4809      	ldr	r0, [pc, #36]	@ (8001a20 <PWM_Assing+0xc4>)
 80019fc:	f00a f904 	bl	800bc08 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001a00:	210c      	movs	r1, #12
 8001a02:	4807      	ldr	r0, [pc, #28]	@ (8001a20 <PWM_Assing+0xc4>)
 8001a04:	f00a f900 	bl	800bc08 <HAL_TIM_PWM_Start>
}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	24000050 	.word	0x24000050
 8001a10:	40000400 	.word	0x40000400
 8001a14:	40000800 	.word	0x40000800
 8001a18:	240025b8 	.word	0x240025b8
 8001a1c:	24002604 	.word	0x24002604
 8001a20:	24002650 	.word	0x24002650

08001a24 <SBUS_Receive>:
void SBUS_init(void){
	HAL_UART_Receive_DMA(SBUS_UART_handler, &SBUS_RxBuffer, 1);

}

void SBUS_Receive(uint8_t SBUS_RxBuffer){
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71fb      	strb	r3, [r7, #7]
	static uint8_t Actual_status = 0;
	static uint8_t RxCount;

	switch (Actual_status) {
 8001a2e:	4b20      	ldr	r3, [pc, #128]	@ (8001ab0 <SBUS_Receive+0x8c>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d002      	beq.n	8001a3c <SBUS_Receive+0x18>
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d017      	beq.n	8001a6a <SBUS_Receive+0x46>
 8001a3a:	e02f      	b.n	8001a9c <SBUS_Receive+0x78>
		case 0:
			if(SBUS_RxBuffer == 0x0F){
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	2b0f      	cmp	r3, #15
 8001a40:	d10f      	bne.n	8001a62 <SBUS_Receive+0x3e>
				SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 8001a42:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab4 <SBUS_Receive+0x90>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	4619      	mov	r1, r3
 8001a48:	4a1b      	ldr	r2, [pc, #108]	@ (8001ab8 <SBUS_Receive+0x94>)
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	5453      	strb	r3, [r2, r1]
				Actual_status = 1;
 8001a4e:	4b18      	ldr	r3, [pc, #96]	@ (8001ab0 <SBUS_Receive+0x8c>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	701a      	strb	r2, [r3, #0]
				RxCount++;
 8001a54:	4b17      	ldr	r3, [pc, #92]	@ (8001ab4 <SBUS_Receive+0x90>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	4b15      	ldr	r3, [pc, #84]	@ (8001ab4 <SBUS_Receive+0x90>)
 8001a5e:	701a      	strb	r2, [r3, #0]
			}
			else{
				RxCount = 0;
			}
			break;
 8001a60:	e021      	b.n	8001aa6 <SBUS_Receive+0x82>
				RxCount = 0;
 8001a62:	4b14      	ldr	r3, [pc, #80]	@ (8001ab4 <SBUS_Receive+0x90>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	701a      	strb	r2, [r3, #0]
			break;
 8001a68:	e01d      	b.n	8001aa6 <SBUS_Receive+0x82>
		case 1:
			SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 8001a6a:	4b12      	ldr	r3, [pc, #72]	@ (8001ab4 <SBUS_Receive+0x90>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4a11      	ldr	r2, [pc, #68]	@ (8001ab8 <SBUS_Receive+0x94>)
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	5453      	strb	r3, [r2, r1]
			RxCount++;
 8001a76:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab4 <SBUS_Receive+0x90>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab4 <SBUS_Receive+0x90>)
 8001a80:	701a      	strb	r2, [r3, #0]
			if(RxCount == 24){
 8001a82:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab4 <SBUS_Receive+0x90>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b18      	cmp	r3, #24
 8001a88:	d10c      	bne.n	8001aa4 <SBUS_Receive+0x80>
				RxCount = 0;
 8001a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ab4 <SBUS_Receive+0x90>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	701a      	strb	r2, [r3, #0]
				Actual_status = 0;
 8001a90:	4b07      	ldr	r3, [pc, #28]	@ (8001ab0 <SBUS_Receive+0x8c>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	701a      	strb	r2, [r3, #0]
				SBUS_getData();
 8001a96:	f000 f843 	bl	8001b20 <SBUS_getData>
			}
			break;
 8001a9a:	e003      	b.n	8001aa4 <SBUS_Receive+0x80>
		default:
			Actual_status = 0;
 8001a9c:	4b04      	ldr	r3, [pc, #16]	@ (8001ab0 <SBUS_Receive+0x8c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	701a      	strb	r2, [r3, #0]
			break;
 8001aa2:	e000      	b.n	8001aa6 <SBUS_Receive+0x82>
			break;
 8001aa4:	bf00      	nop
	}
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	2400032e 	.word	0x2400032e
 8001ab4:	2400032f 	.word	0x2400032f
 8001ab8:	24000314 	.word	0x24000314

08001abc <Temp_BypassFunct>:

void Temp_BypassFunct (void){
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
	PWM_Output.Canal_1  = Radio_input.Canal_1;
 8001ac0:	4b15      	ldr	r3, [pc, #84]	@ (8001b18 <Temp_BypassFunct+0x5c>)
 8001ac2:	881a      	ldrh	r2, [r3, #0]
 8001ac4:	4b15      	ldr	r3, [pc, #84]	@ (8001b1c <Temp_BypassFunct+0x60>)
 8001ac6:	801a      	strh	r2, [r3, #0]
	PWM_Output.Canal_2  = Radio_input.Canal_2;
 8001ac8:	4b13      	ldr	r3, [pc, #76]	@ (8001b18 <Temp_BypassFunct+0x5c>)
 8001aca:	885a      	ldrh	r2, [r3, #2]
 8001acc:	4b13      	ldr	r3, [pc, #76]	@ (8001b1c <Temp_BypassFunct+0x60>)
 8001ace:	805a      	strh	r2, [r3, #2]
	PWM_Output.Canal_3  = Radio_input.Canal_3;
 8001ad0:	4b11      	ldr	r3, [pc, #68]	@ (8001b18 <Temp_BypassFunct+0x5c>)
 8001ad2:	889a      	ldrh	r2, [r3, #4]
 8001ad4:	4b11      	ldr	r3, [pc, #68]	@ (8001b1c <Temp_BypassFunct+0x60>)
 8001ad6:	809a      	strh	r2, [r3, #4]
	PWM_Output.Canal_4  = Radio_input.Canal_4;
 8001ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8001b18 <Temp_BypassFunct+0x5c>)
 8001ada:	88da      	ldrh	r2, [r3, #6]
 8001adc:	4b0f      	ldr	r3, [pc, #60]	@ (8001b1c <Temp_BypassFunct+0x60>)
 8001ade:	80da      	strh	r2, [r3, #6]
	PWM_Output.Canal_5  = Radio_input.Canal_5;
 8001ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8001b18 <Temp_BypassFunct+0x5c>)
 8001ae2:	891a      	ldrh	r2, [r3, #8]
 8001ae4:	4b0d      	ldr	r3, [pc, #52]	@ (8001b1c <Temp_BypassFunct+0x60>)
 8001ae6:	811a      	strh	r2, [r3, #8]
	PWM_Output.Canal_6  = Radio_input.Canal_6;
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8001b18 <Temp_BypassFunct+0x5c>)
 8001aea:	895a      	ldrh	r2, [r3, #10]
 8001aec:	4b0b      	ldr	r3, [pc, #44]	@ (8001b1c <Temp_BypassFunct+0x60>)
 8001aee:	815a      	strh	r2, [r3, #10]
	PWM_Output.Canal_7  = Radio_input.Canal_7;
 8001af0:	4b09      	ldr	r3, [pc, #36]	@ (8001b18 <Temp_BypassFunct+0x5c>)
 8001af2:	899a      	ldrh	r2, [r3, #12]
 8001af4:	4b09      	ldr	r3, [pc, #36]	@ (8001b1c <Temp_BypassFunct+0x60>)
 8001af6:	819a      	strh	r2, [r3, #12]
	PWM_Output.Canal_8  = Radio_input.Canal_8;
 8001af8:	4b07      	ldr	r3, [pc, #28]	@ (8001b18 <Temp_BypassFunct+0x5c>)
 8001afa:	89da      	ldrh	r2, [r3, #14]
 8001afc:	4b07      	ldr	r3, [pc, #28]	@ (8001b1c <Temp_BypassFunct+0x60>)
 8001afe:	81da      	strh	r2, [r3, #14]
	PWM_Output.Canal_9  = Radio_input.Canal_9;
 8001b00:	4b05      	ldr	r3, [pc, #20]	@ (8001b18 <Temp_BypassFunct+0x5c>)
 8001b02:	8a1a      	ldrh	r2, [r3, #16]
 8001b04:	4b05      	ldr	r3, [pc, #20]	@ (8001b1c <Temp_BypassFunct+0x60>)
 8001b06:	821a      	strh	r2, [r3, #16]
	PWM_Output.Canal_10 = Radio_input.Canal_10;
 8001b08:	4b03      	ldr	r3, [pc, #12]	@ (8001b18 <Temp_BypassFunct+0x5c>)
 8001b0a:	8a5a      	ldrh	r2, [r3, #18]
 8001b0c:	4b03      	ldr	r3, [pc, #12]	@ (8001b1c <Temp_BypassFunct+0x60>)
 8001b0e:	825a      	strh	r2, [r3, #18]

	PWM_Assing();
 8001b10:	f7ff ff24 	bl	800195c <PWM_Assing>
}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	24000064 	.word	0x24000064
 8001b1c:	24000050 	.word	0x24000050

08001b20 <SBUS_getData>:

void SBUS_getData(void){
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
	//Se hace el corrimiento de bits para dar la estructura de los 16 canales, donde cada canal esta compuesto por 11 bits
	//pero cada paquete es de 1 byte. Para cada canal se utilizan los 8 bits (O los que correspondan) de el byte 1
	//(O el que corresponda) como los bits menos significativos del canal 1, y los tres bits faltantes se toman los 3 bits
	// menos significativos (O los que correspondan) del byte 2 y se colocan como los 3 bits más significativos del canal 1.
	Radio_input.Canal_1 = ((SBUS_UART_Rx[1] | SBUS_UART_Rx[2] << 8) & 0x07FF);
 8001b24:	4b95      	ldr	r3, [pc, #596]	@ (8001d7c <SBUS_getData+0x25c>)
 8001b26:	785b      	ldrb	r3, [r3, #1]
 8001b28:	b21a      	sxth	r2, r3
 8001b2a:	4b94      	ldr	r3, [pc, #592]	@ (8001d7c <SBUS_getData+0x25c>)
 8001b2c:	789b      	ldrb	r3, [r3, #2]
 8001b2e:	021b      	lsls	r3, r3, #8
 8001b30:	b21b      	sxth	r3, r3
 8001b32:	4313      	orrs	r3, r2
 8001b34:	b21b      	sxth	r3, r3
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	4b90      	ldr	r3, [pc, #576]	@ (8001d80 <SBUS_getData+0x260>)
 8001b40:	801a      	strh	r2, [r3, #0]
	Radio_input.Canal_2 = ((SBUS_UART_Rx[2] >> 3 | SBUS_UART_Rx[3] << 5) & 0x07FF);
 8001b42:	4b8e      	ldr	r3, [pc, #568]	@ (8001d7c <SBUS_getData+0x25c>)
 8001b44:	789b      	ldrb	r3, [r3, #2]
 8001b46:	08db      	lsrs	r3, r3, #3
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	b21a      	sxth	r2, r3
 8001b4c:	4b8b      	ldr	r3, [pc, #556]	@ (8001d7c <SBUS_getData+0x25c>)
 8001b4e:	78db      	ldrb	r3, [r3, #3]
 8001b50:	015b      	lsls	r3, r3, #5
 8001b52:	b21b      	sxth	r3, r3
 8001b54:	4313      	orrs	r3, r2
 8001b56:	b21b      	sxth	r3, r3
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	4b87      	ldr	r3, [pc, #540]	@ (8001d80 <SBUS_getData+0x260>)
 8001b62:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_3 = ((SBUS_UART_Rx[3] >> 6 | SBUS_UART_Rx[4] << 2 | SBUS_UART_Rx[5] << 10) & 0x07FF);
 8001b64:	4b85      	ldr	r3, [pc, #532]	@ (8001d7c <SBUS_getData+0x25c>)
 8001b66:	78db      	ldrb	r3, [r3, #3]
 8001b68:	099b      	lsrs	r3, r3, #6
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	b21a      	sxth	r2, r3
 8001b6e:	4b83      	ldr	r3, [pc, #524]	@ (8001d7c <SBUS_getData+0x25c>)
 8001b70:	791b      	ldrb	r3, [r3, #4]
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	b21b      	sxth	r3, r3
 8001b76:	4313      	orrs	r3, r2
 8001b78:	b21a      	sxth	r2, r3
 8001b7a:	4b80      	ldr	r3, [pc, #512]	@ (8001d7c <SBUS_getData+0x25c>)
 8001b7c:	795b      	ldrb	r3, [r3, #5]
 8001b7e:	029b      	lsls	r3, r3, #10
 8001b80:	b21b      	sxth	r3, r3
 8001b82:	4313      	orrs	r3, r2
 8001b84:	b21b      	sxth	r3, r3
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	4b7c      	ldr	r3, [pc, #496]	@ (8001d80 <SBUS_getData+0x260>)
 8001b90:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_4 = ((SBUS_UART_Rx[5] >> 1 | SBUS_UART_Rx[6] << 7) & 0x07FF);
 8001b92:	4b7a      	ldr	r3, [pc, #488]	@ (8001d7c <SBUS_getData+0x25c>)
 8001b94:	795b      	ldrb	r3, [r3, #5]
 8001b96:	085b      	lsrs	r3, r3, #1
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	b21a      	sxth	r2, r3
 8001b9c:	4b77      	ldr	r3, [pc, #476]	@ (8001d7c <SBUS_getData+0x25c>)
 8001b9e:	799b      	ldrb	r3, [r3, #6]
 8001ba0:	01db      	lsls	r3, r3, #7
 8001ba2:	b21b      	sxth	r3, r3
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	b21b      	sxth	r3, r3
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	4b73      	ldr	r3, [pc, #460]	@ (8001d80 <SBUS_getData+0x260>)
 8001bb2:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_5 = ((SBUS_UART_Rx[6] >> 4 | SBUS_UART_Rx[7] << 4) & 0x07FF);
 8001bb4:	4b71      	ldr	r3, [pc, #452]	@ (8001d7c <SBUS_getData+0x25c>)
 8001bb6:	799b      	ldrb	r3, [r3, #6]
 8001bb8:	091b      	lsrs	r3, r3, #4
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	b21a      	sxth	r2, r3
 8001bbe:	4b6f      	ldr	r3, [pc, #444]	@ (8001d7c <SBUS_getData+0x25c>)
 8001bc0:	79db      	ldrb	r3, [r3, #7]
 8001bc2:	011b      	lsls	r3, r3, #4
 8001bc4:	b21b      	sxth	r3, r3
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	b21b      	sxth	r3, r3
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	4b6b      	ldr	r3, [pc, #428]	@ (8001d80 <SBUS_getData+0x260>)
 8001bd4:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_6 = ((SBUS_UART_Rx[7] >> 7 | SBUS_UART_Rx[8] << 1 | SBUS_UART_Rx[9] << 9) & 0x07FF);
 8001bd6:	4b69      	ldr	r3, [pc, #420]	@ (8001d7c <SBUS_getData+0x25c>)
 8001bd8:	79db      	ldrb	r3, [r3, #7]
 8001bda:	09db      	lsrs	r3, r3, #7
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	b21a      	sxth	r2, r3
 8001be0:	4b66      	ldr	r3, [pc, #408]	@ (8001d7c <SBUS_getData+0x25c>)
 8001be2:	7a1b      	ldrb	r3, [r3, #8]
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	b21b      	sxth	r3, r3
 8001be8:	4313      	orrs	r3, r2
 8001bea:	b21a      	sxth	r2, r3
 8001bec:	4b63      	ldr	r3, [pc, #396]	@ (8001d7c <SBUS_getData+0x25c>)
 8001bee:	7a5b      	ldrb	r3, [r3, #9]
 8001bf0:	025b      	lsls	r3, r3, #9
 8001bf2:	b21b      	sxth	r3, r3
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	b21b      	sxth	r3, r3
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	4b5f      	ldr	r3, [pc, #380]	@ (8001d80 <SBUS_getData+0x260>)
 8001c02:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_7 = ((SBUS_UART_Rx[9] >> 2 | SBUS_UART_Rx[10] << 6) & 0x07FF);
 8001c04:	4b5d      	ldr	r3, [pc, #372]	@ (8001d7c <SBUS_getData+0x25c>)
 8001c06:	7a5b      	ldrb	r3, [r3, #9]
 8001c08:	089b      	lsrs	r3, r3, #2
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	b21a      	sxth	r2, r3
 8001c0e:	4b5b      	ldr	r3, [pc, #364]	@ (8001d7c <SBUS_getData+0x25c>)
 8001c10:	7a9b      	ldrb	r3, [r3, #10]
 8001c12:	019b      	lsls	r3, r3, #6
 8001c14:	b21b      	sxth	r3, r3
 8001c16:	4313      	orrs	r3, r2
 8001c18:	b21b      	sxth	r3, r3
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	4b57      	ldr	r3, [pc, #348]	@ (8001d80 <SBUS_getData+0x260>)
 8001c24:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_8 = ((SBUS_UART_Rx[10] >> 5 | SBUS_UART_Rx[11] << 3) & 0x07FF);
 8001c26:	4b55      	ldr	r3, [pc, #340]	@ (8001d7c <SBUS_getData+0x25c>)
 8001c28:	7a9b      	ldrb	r3, [r3, #10]
 8001c2a:	095b      	lsrs	r3, r3, #5
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	b21a      	sxth	r2, r3
 8001c30:	4b52      	ldr	r3, [pc, #328]	@ (8001d7c <SBUS_getData+0x25c>)
 8001c32:	7adb      	ldrb	r3, [r3, #11]
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	b21b      	sxth	r3, r3
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	b21b      	sxth	r3, r3
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	4b4e      	ldr	r3, [pc, #312]	@ (8001d80 <SBUS_getData+0x260>)
 8001c46:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_9 = ((SBUS_UART_Rx[12] | SBUS_UART_Rx[13] << 8) & 0x07FF);
 8001c48:	4b4c      	ldr	r3, [pc, #304]	@ (8001d7c <SBUS_getData+0x25c>)
 8001c4a:	7b1b      	ldrb	r3, [r3, #12]
 8001c4c:	b21a      	sxth	r2, r3
 8001c4e:	4b4b      	ldr	r3, [pc, #300]	@ (8001d7c <SBUS_getData+0x25c>)
 8001c50:	7b5b      	ldrb	r3, [r3, #13]
 8001c52:	021b      	lsls	r3, r3, #8
 8001c54:	b21b      	sxth	r3, r3
 8001c56:	4313      	orrs	r3, r2
 8001c58:	b21b      	sxth	r3, r3
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	4b47      	ldr	r3, [pc, #284]	@ (8001d80 <SBUS_getData+0x260>)
 8001c64:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_10 = ((SBUS_UART_Rx[13] >> 3 | SBUS_UART_Rx[14] << 5) & 0x07FF);
 8001c66:	4b45      	ldr	r3, [pc, #276]	@ (8001d7c <SBUS_getData+0x25c>)
 8001c68:	7b5b      	ldrb	r3, [r3, #13]
 8001c6a:	08db      	lsrs	r3, r3, #3
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	b21a      	sxth	r2, r3
 8001c70:	4b42      	ldr	r3, [pc, #264]	@ (8001d7c <SBUS_getData+0x25c>)
 8001c72:	7b9b      	ldrb	r3, [r3, #14]
 8001c74:	015b      	lsls	r3, r3, #5
 8001c76:	b21b      	sxth	r3, r3
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	b21b      	sxth	r3, r3
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	4b3e      	ldr	r3, [pc, #248]	@ (8001d80 <SBUS_getData+0x260>)
 8001c86:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_11 = ((SBUS_UART_Rx[14] >> 6 | SBUS_UART_Rx[15] << 2 | SBUS_UART_Rx[16] << 10) & 0x07FF);
 8001c88:	4b3c      	ldr	r3, [pc, #240]	@ (8001d7c <SBUS_getData+0x25c>)
 8001c8a:	7b9b      	ldrb	r3, [r3, #14]
 8001c8c:	099b      	lsrs	r3, r3, #6
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	b21a      	sxth	r2, r3
 8001c92:	4b3a      	ldr	r3, [pc, #232]	@ (8001d7c <SBUS_getData+0x25c>)
 8001c94:	7bdb      	ldrb	r3, [r3, #15]
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	b21b      	sxth	r3, r3
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	b21a      	sxth	r2, r3
 8001c9e:	4b37      	ldr	r3, [pc, #220]	@ (8001d7c <SBUS_getData+0x25c>)
 8001ca0:	7c1b      	ldrb	r3, [r3, #16]
 8001ca2:	029b      	lsls	r3, r3, #10
 8001ca4:	b21b      	sxth	r3, r3
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	b21b      	sxth	r3, r3
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	4b33      	ldr	r3, [pc, #204]	@ (8001d80 <SBUS_getData+0x260>)
 8001cb4:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_12 = ((SBUS_UART_Rx[16] >> 1 | SBUS_UART_Rx[17] << 7) & 0x07FF);
 8001cb6:	4b31      	ldr	r3, [pc, #196]	@ (8001d7c <SBUS_getData+0x25c>)
 8001cb8:	7c1b      	ldrb	r3, [r3, #16]
 8001cba:	085b      	lsrs	r3, r3, #1
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	b21a      	sxth	r2, r3
 8001cc0:	4b2e      	ldr	r3, [pc, #184]	@ (8001d7c <SBUS_getData+0x25c>)
 8001cc2:	7c5b      	ldrb	r3, [r3, #17]
 8001cc4:	01db      	lsls	r3, r3, #7
 8001cc6:	b21b      	sxth	r3, r3
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	b21b      	sxth	r3, r3
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	4b2a      	ldr	r3, [pc, #168]	@ (8001d80 <SBUS_getData+0x260>)
 8001cd6:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_13 = ((SBUS_UART_Rx[17] >> 4 | SBUS_UART_Rx[18] << 4) & 0x07FF);
 8001cd8:	4b28      	ldr	r3, [pc, #160]	@ (8001d7c <SBUS_getData+0x25c>)
 8001cda:	7c5b      	ldrb	r3, [r3, #17]
 8001cdc:	091b      	lsrs	r3, r3, #4
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	b21a      	sxth	r2, r3
 8001ce2:	4b26      	ldr	r3, [pc, #152]	@ (8001d7c <SBUS_getData+0x25c>)
 8001ce4:	7c9b      	ldrb	r3, [r3, #18]
 8001ce6:	011b      	lsls	r3, r3, #4
 8001ce8:	b21b      	sxth	r3, r3
 8001cea:	4313      	orrs	r3, r2
 8001cec:	b21b      	sxth	r3, r3
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	4b22      	ldr	r3, [pc, #136]	@ (8001d80 <SBUS_getData+0x260>)
 8001cf8:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_14 = ((SBUS_UART_Rx[18] >> 7 | SBUS_UART_Rx[19] << 1 | SBUS_UART_Rx[20] << 9) & 0x07FF);
 8001cfa:	4b20      	ldr	r3, [pc, #128]	@ (8001d7c <SBUS_getData+0x25c>)
 8001cfc:	7c9b      	ldrb	r3, [r3, #18]
 8001cfe:	09db      	lsrs	r3, r3, #7
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	b21a      	sxth	r2, r3
 8001d04:	4b1d      	ldr	r3, [pc, #116]	@ (8001d7c <SBUS_getData+0x25c>)
 8001d06:	7cdb      	ldrb	r3, [r3, #19]
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	b21b      	sxth	r3, r3
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	b21a      	sxth	r2, r3
 8001d10:	4b1a      	ldr	r3, [pc, #104]	@ (8001d7c <SBUS_getData+0x25c>)
 8001d12:	7d1b      	ldrb	r3, [r3, #20]
 8001d14:	025b      	lsls	r3, r3, #9
 8001d16:	b21b      	sxth	r3, r3
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	b21b      	sxth	r3, r3
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	4b16      	ldr	r3, [pc, #88]	@ (8001d80 <SBUS_getData+0x260>)
 8001d26:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_15 = ((SBUS_UART_Rx[20] >> 2 | SBUS_UART_Rx[21] << 6) & 0x07FF);
 8001d28:	4b14      	ldr	r3, [pc, #80]	@ (8001d7c <SBUS_getData+0x25c>)
 8001d2a:	7d1b      	ldrb	r3, [r3, #20]
 8001d2c:	089b      	lsrs	r3, r3, #2
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	b21a      	sxth	r2, r3
 8001d32:	4b12      	ldr	r3, [pc, #72]	@ (8001d7c <SBUS_getData+0x25c>)
 8001d34:	7d5b      	ldrb	r3, [r3, #21]
 8001d36:	019b      	lsls	r3, r3, #6
 8001d38:	b21b      	sxth	r3, r3
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	b21b      	sxth	r3, r3
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	4b0e      	ldr	r3, [pc, #56]	@ (8001d80 <SBUS_getData+0x260>)
 8001d48:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_16 = ((SBUS_UART_Rx[21] >> 5 | SBUS_UART_Rx[22] << 3) & 0x07FF);
 8001d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d7c <SBUS_getData+0x25c>)
 8001d4c:	7d5b      	ldrb	r3, [r3, #21]
 8001d4e:	095b      	lsrs	r3, r3, #5
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	b21a      	sxth	r2, r3
 8001d54:	4b09      	ldr	r3, [pc, #36]	@ (8001d7c <SBUS_getData+0x25c>)
 8001d56:	7d9b      	ldrb	r3, [r3, #22]
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	b21b      	sxth	r3, r3
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	b21b      	sxth	r3, r3
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	4b05      	ldr	r3, [pc, #20]	@ (8001d80 <SBUS_getData+0x260>)
 8001d6a:	83da      	strh	r2, [r3, #30]

	Radio_input.Canal_1 = (uint16_t)((((float)Radio_input.Canal_1 - 352) /1344 ) * 1000) + 1000;
 8001d6c:	4b04      	ldr	r3, [pc, #16]	@ (8001d80 <SBUS_getData+0x260>)
 8001d6e:	881b      	ldrh	r3, [r3, #0]
 8001d70:	ee07 3a90 	vmov	s15, r3
 8001d74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d78:	e00a      	b.n	8001d90 <SBUS_getData+0x270>
 8001d7a:	bf00      	nop
 8001d7c:	24000314 	.word	0x24000314
 8001d80:	24000064 	.word	0x24000064
 8001d84:	43b00000 	.word	0x43b00000
 8001d88:	44a80000 	.word	0x44a80000
 8001d8c:	447a0000 	.word	0x447a0000
 8001d90:	ed1f 7a04 	vldr	s14, [pc, #-16]	@ 8001d84 <SBUS_getData+0x264>
 8001d94:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001d98:	ed5f 6a05 	vldr	s13, [pc, #-20]	@ 8001d88 <SBUS_getData+0x268>
 8001d9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001da0:	ed1f 7a06 	vldr	s14, [pc, #-24]	@ 8001d8c <SBUS_getData+0x26c>
 8001da4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001da8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dac:	ee17 3a90 	vmov	r3, s15
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	4bd1      	ldr	r3, [pc, #836]	@ (8002100 <SBUS_getData+0x5e0>)
 8001dba:	801a      	strh	r2, [r3, #0]
	Radio_input.Canal_2 = (uint16_t)((((float)Radio_input.Canal_2 - 352) /1344 ) * 1000) + 1000;
 8001dbc:	4bd0      	ldr	r3, [pc, #832]	@ (8002100 <SBUS_getData+0x5e0>)
 8001dbe:	885b      	ldrh	r3, [r3, #2]
 8001dc0:	ee07 3a90 	vmov	s15, r3
 8001dc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dc8:	ed9f 7ace 	vldr	s14, [pc, #824]	@ 8002104 <SBUS_getData+0x5e4>
 8001dcc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001dd0:	eddf 6acd 	vldr	s13, [pc, #820]	@ 8002108 <SBUS_getData+0x5e8>
 8001dd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dd8:	ed9f 7acc 	vldr	s14, [pc, #816]	@ 800210c <SBUS_getData+0x5ec>
 8001ddc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001de0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001de4:	ee17 3a90 	vmov	r3, s15
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	4bc3      	ldr	r3, [pc, #780]	@ (8002100 <SBUS_getData+0x5e0>)
 8001df2:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_3 = (uint16_t)((((float)Radio_input.Canal_3 - 352) /1344 ) * 1000) + 1000;
 8001df4:	4bc2      	ldr	r3, [pc, #776]	@ (8002100 <SBUS_getData+0x5e0>)
 8001df6:	889b      	ldrh	r3, [r3, #4]
 8001df8:	ee07 3a90 	vmov	s15, r3
 8001dfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e00:	ed9f 7ac0 	vldr	s14, [pc, #768]	@ 8002104 <SBUS_getData+0x5e4>
 8001e04:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001e08:	eddf 6abf 	vldr	s13, [pc, #764]	@ 8002108 <SBUS_getData+0x5e8>
 8001e0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e10:	ed9f 7abe 	vldr	s14, [pc, #760]	@ 800210c <SBUS_getData+0x5ec>
 8001e14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e1c:	ee17 3a90 	vmov	r3, s15
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	4bb5      	ldr	r3, [pc, #724]	@ (8002100 <SBUS_getData+0x5e0>)
 8001e2a:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_4 = (uint16_t)((((float)Radio_input.Canal_4 - 352) /1344 ) * 1000) + 1000;
 8001e2c:	4bb4      	ldr	r3, [pc, #720]	@ (8002100 <SBUS_getData+0x5e0>)
 8001e2e:	88db      	ldrh	r3, [r3, #6]
 8001e30:	ee07 3a90 	vmov	s15, r3
 8001e34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e38:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 8002104 <SBUS_getData+0x5e4>
 8001e3c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001e40:	eddf 6ab1 	vldr	s13, [pc, #708]	@ 8002108 <SBUS_getData+0x5e8>
 8001e44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e48:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 800210c <SBUS_getData+0x5ec>
 8001e4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e54:	ee17 3a90 	vmov	r3, s15
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	4ba7      	ldr	r3, [pc, #668]	@ (8002100 <SBUS_getData+0x5e0>)
 8001e62:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_5 = (uint16_t)((((float)Radio_input.Canal_5 - 352) /1344 ) * 1000) + 1000;
 8001e64:	4ba6      	ldr	r3, [pc, #664]	@ (8002100 <SBUS_getData+0x5e0>)
 8001e66:	891b      	ldrh	r3, [r3, #8]
 8001e68:	ee07 3a90 	vmov	s15, r3
 8001e6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e70:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 8002104 <SBUS_getData+0x5e4>
 8001e74:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001e78:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8002108 <SBUS_getData+0x5e8>
 8001e7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e80:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 800210c <SBUS_getData+0x5ec>
 8001e84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e8c:	ee17 3a90 	vmov	r3, s15
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	4b99      	ldr	r3, [pc, #612]	@ (8002100 <SBUS_getData+0x5e0>)
 8001e9a:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_6 = (uint16_t)((((float)Radio_input.Canal_6 - 352) /1344 ) * 1000) + 1000;
 8001e9c:	4b98      	ldr	r3, [pc, #608]	@ (8002100 <SBUS_getData+0x5e0>)
 8001e9e:	895b      	ldrh	r3, [r3, #10]
 8001ea0:	ee07 3a90 	vmov	s15, r3
 8001ea4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ea8:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8002104 <SBUS_getData+0x5e4>
 8001eac:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001eb0:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8002108 <SBUS_getData+0x5e8>
 8001eb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eb8:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 800210c <SBUS_getData+0x5ec>
 8001ebc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ec0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ec4:	ee17 3a90 	vmov	r3, s15
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	4b8b      	ldr	r3, [pc, #556]	@ (8002100 <SBUS_getData+0x5e0>)
 8001ed2:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_7 = (uint16_t)((((float)Radio_input.Canal_7 - 352) /1344 ) * 1000) + 1000;
 8001ed4:	4b8a      	ldr	r3, [pc, #552]	@ (8002100 <SBUS_getData+0x5e0>)
 8001ed6:	899b      	ldrh	r3, [r3, #12]
 8001ed8:	ee07 3a90 	vmov	s15, r3
 8001edc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ee0:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8002104 <SBUS_getData+0x5e4>
 8001ee4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001ee8:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8002108 <SBUS_getData+0x5e8>
 8001eec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ef0:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 800210c <SBUS_getData+0x5ec>
 8001ef4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ef8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001efc:	ee17 3a90 	vmov	r3, s15
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	4b7d      	ldr	r3, [pc, #500]	@ (8002100 <SBUS_getData+0x5e0>)
 8001f0a:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_8 = (uint16_t)((((float)Radio_input.Canal_8 - 352) /1344 ) * 1000) + 1000;
 8001f0c:	4b7c      	ldr	r3, [pc, #496]	@ (8002100 <SBUS_getData+0x5e0>)
 8001f0e:	89db      	ldrh	r3, [r3, #14]
 8001f10:	ee07 3a90 	vmov	s15, r3
 8001f14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f18:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8002104 <SBUS_getData+0x5e4>
 8001f1c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001f20:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8002108 <SBUS_getData+0x5e8>
 8001f24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f28:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 800210c <SBUS_getData+0x5ec>
 8001f2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f34:	ee17 3a90 	vmov	r3, s15
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	4b6f      	ldr	r3, [pc, #444]	@ (8002100 <SBUS_getData+0x5e0>)
 8001f42:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_9 = (uint16_t)((((float)Radio_input.Canal_9 - 352) /1344 ) * 1000) + 1000;
 8001f44:	4b6e      	ldr	r3, [pc, #440]	@ (8002100 <SBUS_getData+0x5e0>)
 8001f46:	8a1b      	ldrh	r3, [r3, #16]
 8001f48:	ee07 3a90 	vmov	s15, r3
 8001f4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f50:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8002104 <SBUS_getData+0x5e4>
 8001f54:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001f58:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8002108 <SBUS_getData+0x5e8>
 8001f5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f60:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 800210c <SBUS_getData+0x5ec>
 8001f64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f6c:	ee17 3a90 	vmov	r3, s15
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	4b61      	ldr	r3, [pc, #388]	@ (8002100 <SBUS_getData+0x5e0>)
 8001f7a:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_10 = (uint16_t)((((float)Radio_input.Canal_10 - 352) /1344 ) * 1000) + 1000;
 8001f7c:	4b60      	ldr	r3, [pc, #384]	@ (8002100 <SBUS_getData+0x5e0>)
 8001f7e:	8a5b      	ldrh	r3, [r3, #18]
 8001f80:	ee07 3a90 	vmov	s15, r3
 8001f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f88:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8002104 <SBUS_getData+0x5e4>
 8001f8c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001f90:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8002108 <SBUS_getData+0x5e8>
 8001f94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f98:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 800210c <SBUS_getData+0x5ec>
 8001f9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fa4:	ee17 3a90 	vmov	r3, s15
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	4b53      	ldr	r3, [pc, #332]	@ (8002100 <SBUS_getData+0x5e0>)
 8001fb2:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_11 = (uint16_t)((((float)Radio_input.Canal_11 - 352) /1344 ) * 1000) + 1000;
 8001fb4:	4b52      	ldr	r3, [pc, #328]	@ (8002100 <SBUS_getData+0x5e0>)
 8001fb6:	8a9b      	ldrh	r3, [r3, #20]
 8001fb8:	ee07 3a90 	vmov	s15, r3
 8001fbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fc0:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8002104 <SBUS_getData+0x5e4>
 8001fc4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001fc8:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002108 <SBUS_getData+0x5e8>
 8001fcc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fd0:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 800210c <SBUS_getData+0x5ec>
 8001fd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fdc:	ee17 3a90 	vmov	r3, s15
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	4b45      	ldr	r3, [pc, #276]	@ (8002100 <SBUS_getData+0x5e0>)
 8001fea:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_12 = (uint16_t)((((float)Radio_input.Canal_12 - 352) /1344 ) * 1000) + 1000;
 8001fec:	4b44      	ldr	r3, [pc, #272]	@ (8002100 <SBUS_getData+0x5e0>)
 8001fee:	8adb      	ldrh	r3, [r3, #22]
 8001ff0:	ee07 3a90 	vmov	s15, r3
 8001ff4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ff8:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8002104 <SBUS_getData+0x5e4>
 8001ffc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002000:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8002108 <SBUS_getData+0x5e8>
 8002004:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002008:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 800210c <SBUS_getData+0x5ec>
 800200c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002010:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002014:	ee17 3a90 	vmov	r3, s15
 8002018:	b29b      	uxth	r3, r3
 800201a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800201e:	b29a      	uxth	r2, r3
 8002020:	4b37      	ldr	r3, [pc, #220]	@ (8002100 <SBUS_getData+0x5e0>)
 8002022:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_13 = (uint16_t)((((float)Radio_input.Canal_13 - 352) /1344 ) * 1000) + 1000;
 8002024:	4b36      	ldr	r3, [pc, #216]	@ (8002100 <SBUS_getData+0x5e0>)
 8002026:	8b1b      	ldrh	r3, [r3, #24]
 8002028:	ee07 3a90 	vmov	s15, r3
 800202c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002030:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8002104 <SBUS_getData+0x5e4>
 8002034:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002038:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8002108 <SBUS_getData+0x5e8>
 800203c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002040:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800210c <SBUS_getData+0x5ec>
 8002044:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002048:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800204c:	ee17 3a90 	vmov	r3, s15
 8002050:	b29b      	uxth	r3, r3
 8002052:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002056:	b29a      	uxth	r2, r3
 8002058:	4b29      	ldr	r3, [pc, #164]	@ (8002100 <SBUS_getData+0x5e0>)
 800205a:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_14 = (uint16_t)((((float)Radio_input.Canal_14 - 352) /1344 ) * 1000) + 1000;
 800205c:	4b28      	ldr	r3, [pc, #160]	@ (8002100 <SBUS_getData+0x5e0>)
 800205e:	8b5b      	ldrh	r3, [r3, #26]
 8002060:	ee07 3a90 	vmov	s15, r3
 8002064:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002068:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8002104 <SBUS_getData+0x5e4>
 800206c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002070:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8002108 <SBUS_getData+0x5e8>
 8002074:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002078:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 800210c <SBUS_getData+0x5ec>
 800207c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002080:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002084:	ee17 3a90 	vmov	r3, s15
 8002088:	b29b      	uxth	r3, r3
 800208a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800208e:	b29a      	uxth	r2, r3
 8002090:	4b1b      	ldr	r3, [pc, #108]	@ (8002100 <SBUS_getData+0x5e0>)
 8002092:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_15 = (uint16_t)((((float)Radio_input.Canal_15 - 352) /1344 ) * 1000) + 1000;
 8002094:	4b1a      	ldr	r3, [pc, #104]	@ (8002100 <SBUS_getData+0x5e0>)
 8002096:	8b9b      	ldrh	r3, [r3, #28]
 8002098:	ee07 3a90 	vmov	s15, r3
 800209c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020a0:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8002104 <SBUS_getData+0x5e4>
 80020a4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80020a8:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8002108 <SBUS_getData+0x5e8>
 80020ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020b0:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800210c <SBUS_getData+0x5ec>
 80020b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020bc:	ee17 3a90 	vmov	r3, s15
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	4b0d      	ldr	r3, [pc, #52]	@ (8002100 <SBUS_getData+0x5e0>)
 80020ca:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_16 = (uint16_t)((((float)Radio_input.Canal_16 - 352) /1344 ) * 1000) + 1000;
 80020cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002100 <SBUS_getData+0x5e0>)
 80020ce:	8bdb      	ldrh	r3, [r3, #30]
 80020d0:	ee07 3a90 	vmov	s15, r3
 80020d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020d8:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8002104 <SBUS_getData+0x5e4>
 80020dc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80020e0:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8002108 <SBUS_getData+0x5e8>
 80020e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020e8:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800210c <SBUS_getData+0x5ec>
 80020ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020f4:	ee17 3a90 	vmov	r3, s15
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80020fe:	e007      	b.n	8002110 <SBUS_getData+0x5f0>
 8002100:	24000064 	.word	0x24000064
 8002104:	43b00000 	.word	0x43b00000
 8002108:	44a80000 	.word	0x44a80000
 800210c:	447a0000 	.word	0x447a0000
 8002110:	b29a      	uxth	r2, r3
 8002112:	4b28      	ldr	r3, [pc, #160]	@ (80021b4 <SBUS_getData+0x694>)
 8002114:	83da      	strh	r2, [r3, #30]

	//En el caso del byte 24, el primer bit menos significativo corresponde al canal 17, el segundo al canal 18, el tercero a el fail safe y
	//el cuarto a la perdida de paquetes. Los 4 restantes no se utilizan.
	if(SBUS_UART_Rx[23]>=8){
 8002116:	4b28      	ldr	r3, [pc, #160]	@ (80021b8 <SBUS_getData+0x698>)
 8002118:	7ddb      	ldrb	r3, [r3, #23]
 800211a:	2b07      	cmp	r3, #7
 800211c:	d90a      	bls.n	8002134 <SBUS_getData+0x614>
		SBUS_UART_Rx[23]-=8;
 800211e:	4b26      	ldr	r3, [pc, #152]	@ (80021b8 <SBUS_getData+0x698>)
 8002120:	7ddb      	ldrb	r3, [r3, #23]
 8002122:	3b08      	subs	r3, #8
 8002124:	b2da      	uxtb	r2, r3
 8002126:	4b24      	ldr	r3, [pc, #144]	@ (80021b8 <SBUS_getData+0x698>)
 8002128:	75da      	strb	r2, [r3, #23]
		Radio_input.fail_safe = FailSafe;
 800212a:	4b22      	ldr	r3, [pc, #136]	@ (80021b4 <SBUS_getData+0x694>)
 800212c:	2235      	movs	r2, #53	@ 0x35
 800212e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 8002132:	e003      	b.n	800213c <SBUS_getData+0x61c>
	}else Radio_input.fail_safe= Ok;
 8002134:	4b1f      	ldr	r3, [pc, #124]	@ (80021b4 <SBUS_getData+0x694>)
 8002136:	22aa      	movs	r2, #170	@ 0xaa
 8002138:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

	if(SBUS_UART_Rx[23]>=4){
 800213c:	4b1e      	ldr	r3, [pc, #120]	@ (80021b8 <SBUS_getData+0x698>)
 800213e:	7ddb      	ldrb	r3, [r3, #23]
 8002140:	2b03      	cmp	r3, #3
 8002142:	d90a      	bls.n	800215a <SBUS_getData+0x63a>
		SBUS_UART_Rx[23]-=4;
 8002144:	4b1c      	ldr	r3, [pc, #112]	@ (80021b8 <SBUS_getData+0x698>)
 8002146:	7ddb      	ldrb	r3, [r3, #23]
 8002148:	3b04      	subs	r3, #4
 800214a:	b2da      	uxtb	r2, r3
 800214c:	4b1a      	ldr	r3, [pc, #104]	@ (80021b8 <SBUS_getData+0x698>)
 800214e:	75da      	strb	r2, [r3, #23]
		Radio_input.pkg_lost = Pkg_Lost;
 8002150:	4b18      	ldr	r3, [pc, #96]	@ (80021b4 <SBUS_getData+0x694>)
 8002152:	2210      	movs	r2, #16
 8002154:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8002158:	e003      	b.n	8002162 <SBUS_getData+0x642>
	}else Radio_input.pkg_lost=Ok;
 800215a:	4b16      	ldr	r3, [pc, #88]	@ (80021b4 <SBUS_getData+0x694>)
 800215c:	22aa      	movs	r2, #170	@ 0xaa
 800215e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

	if(SBUS_UART_Rx[23]>=2){
 8002162:	4b15      	ldr	r3, [pc, #84]	@ (80021b8 <SBUS_getData+0x698>)
 8002164:	7ddb      	ldrb	r3, [r3, #23]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d90a      	bls.n	8002180 <SBUS_getData+0x660>
		SBUS_UART_Rx[23]-=2;
 800216a:	4b13      	ldr	r3, [pc, #76]	@ (80021b8 <SBUS_getData+0x698>)
 800216c:	7ddb      	ldrb	r3, [r3, #23]
 800216e:	3b02      	subs	r3, #2
 8002170:	b2da      	uxtb	r2, r3
 8002172:	4b11      	ldr	r3, [pc, #68]	@ (80021b8 <SBUS_getData+0x698>)
 8002174:	75da      	strb	r2, [r3, #23]
		Radio_input.Interruptor_2=ON;
 8002176:	4b0f      	ldr	r3, [pc, #60]	@ (80021b4 <SBUS_getData+0x694>)
 8002178:	22ff      	movs	r2, #255	@ 0xff
 800217a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 800217e:	e003      	b.n	8002188 <SBUS_getData+0x668>
	}else Radio_input.Interruptor_2=OFF;
 8002180:	4b0c      	ldr	r3, [pc, #48]	@ (80021b4 <SBUS_getData+0x694>)
 8002182:	2200      	movs	r2, #0
 8002184:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	if(SBUS_UART_Rx[23]){
 8002188:	4b0b      	ldr	r3, [pc, #44]	@ (80021b8 <SBUS_getData+0x698>)
 800218a:	7ddb      	ldrb	r3, [r3, #23]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d004      	beq.n	800219a <SBUS_getData+0x67a>
		Radio_input.Interruptor_1=ON;
 8002190:	4b08      	ldr	r3, [pc, #32]	@ (80021b4 <SBUS_getData+0x694>)
 8002192:	22ff      	movs	r2, #255	@ 0xff
 8002194:	f883 2020 	strb.w	r2, [r3, #32]
 8002198:	e003      	b.n	80021a2 <SBUS_getData+0x682>
	}else Radio_input.Interruptor_1=OFF;
 800219a:	4b06      	ldr	r3, [pc, #24]	@ (80021b4 <SBUS_getData+0x694>)
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2020 	strb.w	r2, [r3, #32]


	Radio_input.Uart_Counter = 0;
 80021a2:	4b04      	ldr	r3, [pc, #16]	@ (80021b4 <SBUS_getData+0x694>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	Temp_BypassFunct();
 80021aa:	f7ff fc87 	bl	8001abc <Temp_BypassFunct>

}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	24000064 	.word	0x24000064
 80021b8:	24000314 	.word	0x24000314

080021bc <SBUS_IntegrityVerification>:

void SBUS_IntegrityVerification(void){
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0

	if(Radio_input.Uart_Counter != 255){
 80021c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002200 <SBUS_IntegrityVerification+0x44>)
 80021c2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80021c6:	2bff      	cmp	r3, #255	@ 0xff
 80021c8:	d00c      	beq.n	80021e4 <SBUS_IntegrityVerification+0x28>
		Radio_input.Uart_Counter++;
 80021ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002200 <SBUS_IntegrityVerification+0x44>)
 80021cc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80021d0:	3301      	adds	r3, #1
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002200 <SBUS_IntegrityVerification+0x44>)
 80021d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
		Radio_input.uart_error = Ok;
 80021da:	4b09      	ldr	r3, [pc, #36]	@ (8002200 <SBUS_IntegrityVerification+0x44>)
 80021dc:	22aa      	movs	r2, #170	@ 0xaa
 80021de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	}
	else{
		Radio_input.uart_error = Uart_Error;
		Radio_input.fail_safe = FailSafe;
	}
}
 80021e2:	e007      	b.n	80021f4 <SBUS_IntegrityVerification+0x38>
		Radio_input.uart_error = Uart_Error;
 80021e4:	4b06      	ldr	r3, [pc, #24]	@ (8002200 <SBUS_IntegrityVerification+0x44>)
 80021e6:	2220      	movs	r2, #32
 80021e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		Radio_input.fail_safe = FailSafe;
 80021ec:	4b04      	ldr	r3, [pc, #16]	@ (8002200 <SBUS_IntegrityVerification+0x44>)
 80021ee:	2235      	movs	r2, #53	@ 0x35
 80021f0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
}
 80021f4:	bf00      	nop
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	24000064 	.word	0x24000064

08002204 <SD_init>:
UINT br, bw;  // File read/write count

char pahtName[7] = "Data000";
char fileName[] = "FD000.csv";

void SD_init(void){
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
	  fresult = f_mount(&fs, "/", 1);
 8002208:	2201      	movs	r2, #1
 800220a:	4910      	ldr	r1, [pc, #64]	@ (800224c <SD_init+0x48>)
 800220c:	4810      	ldr	r0, [pc, #64]	@ (8002250 <SD_init+0x4c>)
 800220e:	f00f fcef 	bl	8011bf0 <f_mount>
 8002212:	4603      	mov	r3, r0
 8002214:	461a      	mov	r2, r3
 8002216:	4b0f      	ldr	r3, [pc, #60]	@ (8002254 <SD_init+0x50>)
 8002218:	701a      	strb	r2, [r3, #0]
	  //Get_NewDir();
	  f_open(&fil, fileName, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800221a:	2213      	movs	r2, #19
 800221c:	490e      	ldr	r1, [pc, #56]	@ (8002258 <SD_init+0x54>)
 800221e:	480f      	ldr	r0, [pc, #60]	@ (800225c <SD_init+0x58>)
 8002220:	f00f fd2c 	bl	8011c7c <f_open>
	  fresult = f_lseek(&fil , f_size(&fil));
 8002224:	4b0d      	ldr	r3, [pc, #52]	@ (800225c <SD_init+0x58>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	4619      	mov	r1, r3
 800222a:	480c      	ldr	r0, [pc, #48]	@ (800225c <SD_init+0x58>)
 800222c:	f010 f92a 	bl	8012484 <f_lseek>
 8002230:	4603      	mov	r3, r0
 8002232:	461a      	mov	r2, r3
 8002234:	4b07      	ldr	r3, [pc, #28]	@ (8002254 <SD_init+0x50>)
 8002236:	701a      	strb	r2, [r3, #0]
	  f_printf(&fil,"Nmsg,AccX,AccY,AccZ,GyroX,GyroY,GyroZ,Pitch,Roll,Yaw,Alt,Pressure,Temp\n");
 8002238:	4909      	ldr	r1, [pc, #36]	@ (8002260 <SD_init+0x5c>)
 800223a:	4808      	ldr	r0, [pc, #32]	@ (800225c <SD_init+0x58>)
 800223c:	f010 fbbe 	bl	80129bc <f_printf>
	  f_close(&fil);
 8002240:	4806      	ldr	r0, [pc, #24]	@ (800225c <SD_init+0x58>)
 8002242:	f010 f8f5 	bl	8012430 <f_close>

	  }
	  else{
		  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, SET);
	  }
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	08013330 	.word	0x08013330
 8002250:	24000330 	.word	0x24000330
 8002254:	2400239c 	.word	0x2400239c
 8002258:	2400008c 	.word	0x2400008c
 800225c:	2400136c 	.word	0x2400136c
 8002260:	08013334 	.word	0x08013334

08002264 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800226a:	4b11      	ldr	r3, [pc, #68]	@ (80022b0 <MX_DMA_Init+0x4c>)
 800226c:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8002270:	4a0f      	ldr	r2, [pc, #60]	@ (80022b0 <MX_DMA_Init+0x4c>)
 8002272:	f043 0301 	orr.w	r3, r3, #1
 8002276:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 800227a:	4b0d      	ldr	r3, [pc, #52]	@ (80022b0 <MX_DMA_Init+0x4c>)
 800227c:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	607b      	str	r3, [r7, #4]
 8002286:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002288:	2200      	movs	r2, #0
 800228a:	2100      	movs	r1, #0
 800228c:	200b      	movs	r0, #11
 800228e:	f001 fe28 	bl	8003ee2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002292:	200b      	movs	r0, #11
 8002294:	f001 fe3f 	bl	8003f16 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002298:	2200      	movs	r2, #0
 800229a:	2100      	movs	r1, #0
 800229c:	200c      	movs	r0, #12
 800229e:	f001 fe20 	bl	8003ee2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80022a2:	200c      	movs	r0, #12
 80022a4:	f001 fe37 	bl	8003f16 <HAL_NVIC_EnableIRQ>

}
 80022a8:	bf00      	nop
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	58024400 	.word	0x58024400

080022b4 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80022b8:	4b2e      	ldr	r3, [pc, #184]	@ (8002374 <MX_FDCAN1_Init+0xc0>)
 80022ba:	4a2f      	ldr	r2, [pc, #188]	@ (8002378 <MX_FDCAN1_Init+0xc4>)
 80022bc:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80022be:	4b2d      	ldr	r3, [pc, #180]	@ (8002374 <MX_FDCAN1_Init+0xc0>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80022c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002374 <MX_FDCAN1_Init+0xc0>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80022ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002374 <MX_FDCAN1_Init+0xc0>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80022d0:	4b28      	ldr	r3, [pc, #160]	@ (8002374 <MX_FDCAN1_Init+0xc0>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80022d6:	4b27      	ldr	r3, [pc, #156]	@ (8002374 <MX_FDCAN1_Init+0xc0>)
 80022d8:	2200      	movs	r2, #0
 80022da:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 80022dc:	4b25      	ldr	r3, [pc, #148]	@ (8002374 <MX_FDCAN1_Init+0xc0>)
 80022de:	2210      	movs	r2, #16
 80022e0:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80022e2:	4b24      	ldr	r3, [pc, #144]	@ (8002374 <MX_FDCAN1_Init+0xc0>)
 80022e4:	2201      	movs	r2, #1
 80022e6:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80022e8:	4b22      	ldr	r3, [pc, #136]	@ (8002374 <MX_FDCAN1_Init+0xc0>)
 80022ea:	2202      	movs	r2, #2
 80022ec:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80022ee:	4b21      	ldr	r3, [pc, #132]	@ (8002374 <MX_FDCAN1_Init+0xc0>)
 80022f0:	2202      	movs	r2, #2
 80022f2:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80022f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002374 <MX_FDCAN1_Init+0xc0>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80022fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002374 <MX_FDCAN1_Init+0xc0>)
 80022fc:	2201      	movs	r2, #1
 80022fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8002300:	4b1c      	ldr	r3, [pc, #112]	@ (8002374 <MX_FDCAN1_Init+0xc0>)
 8002302:	2201      	movs	r2, #1
 8002304:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8002306:	4b1b      	ldr	r3, [pc, #108]	@ (8002374 <MX_FDCAN1_Init+0xc0>)
 8002308:	2201      	movs	r2, #1
 800230a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800230c:	4b19      	ldr	r3, [pc, #100]	@ (8002374 <MX_FDCAN1_Init+0xc0>)
 800230e:	2200      	movs	r2, #0
 8002310:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8002312:	4b18      	ldr	r3, [pc, #96]	@ (8002374 <MX_FDCAN1_Init+0xc0>)
 8002314:	2200      	movs	r2, #0
 8002316:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002318:	4b16      	ldr	r3, [pc, #88]	@ (8002374 <MX_FDCAN1_Init+0xc0>)
 800231a:	2200      	movs	r2, #0
 800231c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 800231e:	4b15      	ldr	r3, [pc, #84]	@ (8002374 <MX_FDCAN1_Init+0xc0>)
 8002320:	2200      	movs	r2, #0
 8002322:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8002324:	4b13      	ldr	r3, [pc, #76]	@ (8002374 <MX_FDCAN1_Init+0xc0>)
 8002326:	2204      	movs	r2, #4
 8002328:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800232a:	4b12      	ldr	r3, [pc, #72]	@ (8002374 <MX_FDCAN1_Init+0xc0>)
 800232c:	2200      	movs	r2, #0
 800232e:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8002330:	4b10      	ldr	r3, [pc, #64]	@ (8002374 <MX_FDCAN1_Init+0xc0>)
 8002332:	2204      	movs	r2, #4
 8002334:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8002336:	4b0f      	ldr	r3, [pc, #60]	@ (8002374 <MX_FDCAN1_Init+0xc0>)
 8002338:	2200      	movs	r2, #0
 800233a:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800233c:	4b0d      	ldr	r3, [pc, #52]	@ (8002374 <MX_FDCAN1_Init+0xc0>)
 800233e:	2204      	movs	r2, #4
 8002340:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8002342:	4b0c      	ldr	r3, [pc, #48]	@ (8002374 <MX_FDCAN1_Init+0xc0>)
 8002344:	2200      	movs	r2, #0
 8002346:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8002348:	4b0a      	ldr	r3, [pc, #40]	@ (8002374 <MX_FDCAN1_Init+0xc0>)
 800234a:	2200      	movs	r2, #0
 800234c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 800234e:	4b09      	ldr	r3, [pc, #36]	@ (8002374 <MX_FDCAN1_Init+0xc0>)
 8002350:	2200      	movs	r2, #0
 8002352:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002354:	4b07      	ldr	r3, [pc, #28]	@ (8002374 <MX_FDCAN1_Init+0xc0>)
 8002356:	2200      	movs	r2, #0
 8002358:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800235a:	4b06      	ldr	r3, [pc, #24]	@ (8002374 <MX_FDCAN1_Init+0xc0>)
 800235c:	2204      	movs	r2, #4
 800235e:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002360:	4804      	ldr	r0, [pc, #16]	@ (8002374 <MX_FDCAN1_Init+0xc0>)
 8002362:	f004 fd49 	bl	8006df8 <HAL_FDCAN_Init>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 800236c:	f000 fb54 	bl	8002a18 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8002370:	bf00      	nop
 8002372:	bd80      	pop	{r7, pc}
 8002374:	240023a0 	.word	0x240023a0
 8002378:	4000a000 	.word	0x4000a000

0800237c <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b0ba      	sub	sp, #232	@ 0xe8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002384:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	60da      	str	r2, [r3, #12]
 8002392:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002394:	f107 0310 	add.w	r3, r7, #16
 8002398:	22c0      	movs	r2, #192	@ 0xc0
 800239a:	2100      	movs	r1, #0
 800239c:	4618      	mov	r0, r3
 800239e:	f010 fe4d 	bl	801303c <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a2f      	ldr	r2, [pc, #188]	@ (8002464 <HAL_FDCAN_MspInit+0xe8>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d157      	bne.n	800245c <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80023ac:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80023b0:	f04f 0300 	mov.w	r3, #0
 80023b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80023b8:	2304      	movs	r3, #4
 80023ba:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 8;
 80023bc:	2308      	movs	r3, #8
 80023be:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80023c0:	2302      	movs	r3, #2
 80023c2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 80023c4:	2301      	movs	r3, #1
 80023c6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80023c8:	2302      	movs	r3, #2
 80023ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80023cc:	23c0      	movs	r3, #192	@ 0xc0
 80023ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80023d0:	2300      	movs	r3, #0
 80023d2:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80023d4:	2300      	movs	r3, #0
 80023d6:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 80023d8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80023dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023e0:	f107 0310 	add.w	r3, r7, #16
 80023e4:	4618      	mov	r0, r3
 80023e6:	f006 fb61 	bl	8008aac <HAL_RCCEx_PeriphCLKConfig>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 80023f0:	f000 fb12 	bl	8002a18 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80023f4:	4b1c      	ldr	r3, [pc, #112]	@ (8002468 <HAL_FDCAN_MspInit+0xec>)
 80023f6:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80023fa:	4a1b      	ldr	r2, [pc, #108]	@ (8002468 <HAL_FDCAN_MspInit+0xec>)
 80023fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002400:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 8002404:	4b18      	ldr	r3, [pc, #96]	@ (8002468 <HAL_FDCAN_MspInit+0xec>)
 8002406:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 800240a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002412:	4b15      	ldr	r3, [pc, #84]	@ (8002468 <HAL_FDCAN_MspInit+0xec>)
 8002414:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002418:	4a13      	ldr	r2, [pc, #76]	@ (8002468 <HAL_FDCAN_MspInit+0xec>)
 800241a:	f043 0301 	orr.w	r3, r3, #1
 800241e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002422:	4b11      	ldr	r3, [pc, #68]	@ (8002468 <HAL_FDCAN_MspInit+0xec>)
 8002424:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	60bb      	str	r3, [r7, #8]
 800242e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002430:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002434:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002438:	2302      	movs	r3, #2
 800243a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243e:	2300      	movs	r3, #0
 8002440:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002444:	2300      	movs	r3, #0
 8002446:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800244a:	2309      	movs	r3, #9
 800244c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002450:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002454:	4619      	mov	r1, r3
 8002456:	4805      	ldr	r0, [pc, #20]	@ (800246c <HAL_FDCAN_MspInit+0xf0>)
 8002458:	f005 f832 	bl	80074c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 800245c:	bf00      	nop
 800245e:	37e8      	adds	r7, #232	@ 0xe8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	4000a000 	.word	0x4000a000
 8002468:	58024400 	.word	0x58024400
 800246c:	58020000 	.word	0x58020000

08002470 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b08a      	sub	sp, #40	@ 0x28
 8002474:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002476:	f107 0314 	add.w	r3, r7, #20
 800247a:	2200      	movs	r2, #0
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	605a      	str	r2, [r3, #4]
 8002480:	609a      	str	r2, [r3, #8]
 8002482:	60da      	str	r2, [r3, #12]
 8002484:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002486:	4b4e      	ldr	r3, [pc, #312]	@ (80025c0 <MX_GPIO_Init+0x150>)
 8002488:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800248c:	4a4c      	ldr	r2, [pc, #304]	@ (80025c0 <MX_GPIO_Init+0x150>)
 800248e:	f043 0304 	orr.w	r3, r3, #4
 8002492:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002496:	4b4a      	ldr	r3, [pc, #296]	@ (80025c0 <MX_GPIO_Init+0x150>)
 8002498:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a4:	4b46      	ldr	r3, [pc, #280]	@ (80025c0 <MX_GPIO_Init+0x150>)
 80024a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80024aa:	4a45      	ldr	r2, [pc, #276]	@ (80025c0 <MX_GPIO_Init+0x150>)
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80024b4:	4b42      	ldr	r3, [pc, #264]	@ (80025c0 <MX_GPIO_Init+0x150>)
 80024b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024c2:	4b3f      	ldr	r3, [pc, #252]	@ (80025c0 <MX_GPIO_Init+0x150>)
 80024c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80024c8:	4a3d      	ldr	r2, [pc, #244]	@ (80025c0 <MX_GPIO_Init+0x150>)
 80024ca:	f043 0302 	orr.w	r3, r3, #2
 80024ce:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80024d2:	4b3b      	ldr	r3, [pc, #236]	@ (80025c0 <MX_GPIO_Init+0x150>)
 80024d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024e0:	4b37      	ldr	r3, [pc, #220]	@ (80025c0 <MX_GPIO_Init+0x150>)
 80024e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80024e6:	4a36      	ldr	r2, [pc, #216]	@ (80025c0 <MX_GPIO_Init+0x150>)
 80024e8:	f043 0308 	orr.w	r3, r3, #8
 80024ec:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80024f0:	4b33      	ldr	r3, [pc, #204]	@ (80025c0 <MX_GPIO_Init+0x150>)
 80024f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	607b      	str	r3, [r7, #4]
 80024fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 80024fe:	2200      	movs	r2, #0
 8002500:	f242 010f 	movw	r1, #8207	@ 0x200f
 8002504:	482f      	ldr	r0, [pc, #188]	@ (80025c4 <MX_GPIO_Init+0x154>)
 8002506:	f005 f98b 	bl	8007820 <HAL_GPIO_WritePin>
                          |LED_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_NSS_GPIO_Port, SD_NSS_Pin, GPIO_PIN_RESET);
 800250a:	2200      	movs	r2, #0
 800250c:	2110      	movs	r1, #16
 800250e:	482e      	ldr	r0, [pc, #184]	@ (80025c8 <MX_GPIO_Init+0x158>)
 8002510:	f005 f986 	bl	8007820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IMU_BOOT_Pin|BME_NSS_Pin, GPIO_PIN_RESET);
 8002514:	2200      	movs	r2, #0
 8002516:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 800251a:	482c      	ldr	r0, [pc, #176]	@ (80025cc <MX_GPIO_Init+0x15c>)
 800251c:	f005 f980 	bl	8007820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, GPIO_PIN_RESET);
 8002520:	2200      	movs	r2, #0
 8002522:	2104      	movs	r1, #4
 8002524:	482a      	ldr	r0, [pc, #168]	@ (80025d0 <MX_GPIO_Init+0x160>)
 8002526:	f005 f97b 	bl	8007820 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 800252a:	f242 030f 	movw	r3, #8207	@ 0x200f
 800252e:	617b      	str	r3, [r7, #20]
                          |LED_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002530:	2301      	movs	r3, #1
 8002532:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002534:	2300      	movs	r3, #0
 8002536:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002538:	2300      	movs	r3, #0
 800253a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800253c:	f107 0314 	add.w	r3, r7, #20
 8002540:	4619      	mov	r1, r3
 8002542:	4820      	ldr	r0, [pc, #128]	@ (80025c4 <MX_GPIO_Init+0x154>)
 8002544:	f004 ffbc 	bl	80074c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_NSS_Pin;
 8002548:	2310      	movs	r3, #16
 800254a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800254c:	2301      	movs	r3, #1
 800254e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002550:	2300      	movs	r3, #0
 8002552:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002554:	2300      	movs	r3, #0
 8002556:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_NSS_GPIO_Port, &GPIO_InitStruct);
 8002558:	f107 0314 	add.w	r3, r7, #20
 800255c:	4619      	mov	r1, r3
 800255e:	481a      	ldr	r0, [pc, #104]	@ (80025c8 <MX_GPIO_Init+0x158>)
 8002560:	f004 ffae 	bl	80074c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IMU_BOOT_Pin|BME_NSS_Pin;
 8002564:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800256a:	2301      	movs	r3, #1
 800256c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256e:	2300      	movs	r3, #0
 8002570:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002572:	2300      	movs	r3, #0
 8002574:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002576:	f107 0314 	add.w	r3, r7, #20
 800257a:	4619      	mov	r1, r3
 800257c:	4813      	ldr	r0, [pc, #76]	@ (80025cc <MX_GPIO_Init+0x15c>)
 800257e:	f004 ff9f 	bl	80074c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8002582:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002588:	2300      	movs	r3, #0
 800258a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258c:	2300      	movs	r3, #0
 800258e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8002590:	f107 0314 	add.w	r3, r7, #20
 8002594:	4619      	mov	r1, r3
 8002596:	480b      	ldr	r0, [pc, #44]	@ (80025c4 <MX_GPIO_Init+0x154>)
 8002598:	f004 ff92 	bl	80074c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_RST_Pin;
 800259c:	2304      	movs	r3, #4
 800259e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025a0:	2301      	movs	r3, #1
 80025a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a4:	2300      	movs	r3, #0
 80025a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a8:	2300      	movs	r3, #0
 80025aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_RST_GPIO_Port, &GPIO_InitStruct);
 80025ac:	f107 0314 	add.w	r3, r7, #20
 80025b0:	4619      	mov	r1, r3
 80025b2:	4807      	ldr	r0, [pc, #28]	@ (80025d0 <MX_GPIO_Init+0x160>)
 80025b4:	f004 ff84 	bl	80074c0 <HAL_GPIO_Init>

}
 80025b8:	bf00      	nop
 80025ba:	3728      	adds	r7, #40	@ 0x28
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	58024400 	.word	0x58024400
 80025c4:	58020800 	.word	0x58020800
 80025c8:	58020000 	.word	0x58020000
 80025cc:	58020400 	.word	0x58020400
 80025d0:	58020c00 	.word	0x58020c00

080025d4 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80025d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002648 <MX_I2C3_Init+0x74>)
 80025da:	4a1c      	ldr	r2, [pc, #112]	@ (800264c <MX_I2C3_Init+0x78>)
 80025dc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20B0CCFF;
 80025de:	4b1a      	ldr	r3, [pc, #104]	@ (8002648 <MX_I2C3_Init+0x74>)
 80025e0:	4a1b      	ldr	r2, [pc, #108]	@ (8002650 <MX_I2C3_Init+0x7c>)
 80025e2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80025e4:	4b18      	ldr	r3, [pc, #96]	@ (8002648 <MX_I2C3_Init+0x74>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025ea:	4b17      	ldr	r3, [pc, #92]	@ (8002648 <MX_I2C3_Init+0x74>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025f0:	4b15      	ldr	r3, [pc, #84]	@ (8002648 <MX_I2C3_Init+0x74>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80025f6:	4b14      	ldr	r3, [pc, #80]	@ (8002648 <MX_I2C3_Init+0x74>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80025fc:	4b12      	ldr	r3, [pc, #72]	@ (8002648 <MX_I2C3_Init+0x74>)
 80025fe:	2200      	movs	r2, #0
 8002600:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002602:	4b11      	ldr	r3, [pc, #68]	@ (8002648 <MX_I2C3_Init+0x74>)
 8002604:	2200      	movs	r2, #0
 8002606:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002608:	4b0f      	ldr	r3, [pc, #60]	@ (8002648 <MX_I2C3_Init+0x74>)
 800260a:	2200      	movs	r2, #0
 800260c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800260e:	480e      	ldr	r0, [pc, #56]	@ (8002648 <MX_I2C3_Init+0x74>)
 8002610:	f005 f920 	bl	8007854 <HAL_I2C_Init>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800261a:	f000 f9fd 	bl	8002a18 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800261e:	2100      	movs	r1, #0
 8002620:	4809      	ldr	r0, [pc, #36]	@ (8002648 <MX_I2C3_Init+0x74>)
 8002622:	f005 f9b3 	bl	800798c <HAL_I2CEx_ConfigAnalogFilter>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800262c:	f000 f9f4 	bl	8002a18 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002630:	2100      	movs	r1, #0
 8002632:	4805      	ldr	r0, [pc, #20]	@ (8002648 <MX_I2C3_Init+0x74>)
 8002634:	f005 f9f5 	bl	8007a22 <HAL_I2CEx_ConfigDigitalFilter>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800263e:	f000 f9eb 	bl	8002a18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	24002440 	.word	0x24002440
 800264c:	40005c00 	.word	0x40005c00
 8002650:	20b0ccff 	.word	0x20b0ccff

08002654 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b0bc      	sub	sp, #240	@ 0xf0
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800265c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	605a      	str	r2, [r3, #4]
 8002666:	609a      	str	r2, [r3, #8]
 8002668:	60da      	str	r2, [r3, #12]
 800266a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800266c:	f107 0318 	add.w	r3, r7, #24
 8002670:	22c0      	movs	r2, #192	@ 0xc0
 8002672:	2100      	movs	r1, #0
 8002674:	4618      	mov	r0, r3
 8002676:	f010 fce1 	bl	801303c <memset>
  if(i2cHandle->Instance==I2C3)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a39      	ldr	r2, [pc, #228]	@ (8002764 <HAL_I2C_MspInit+0x110>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d16b      	bne.n	800275c <HAL_I2C_MspInit+0x108>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002684:	f04f 0208 	mov.w	r2, #8
 8002688:	f04f 0300 	mov.w	r3, #0
 800268c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002690:	2300      	movs	r3, #0
 8002692:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002696:	f107 0318 	add.w	r3, r7, #24
 800269a:	4618      	mov	r0, r3
 800269c:	f006 fa06 	bl	8008aac <HAL_RCCEx_PeriphCLKConfig>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80026a6:	f000 f9b7 	bl	8002a18 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026aa:	4b2f      	ldr	r3, [pc, #188]	@ (8002768 <HAL_I2C_MspInit+0x114>)
 80026ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80026b0:	4a2d      	ldr	r2, [pc, #180]	@ (8002768 <HAL_I2C_MspInit+0x114>)
 80026b2:	f043 0304 	orr.w	r3, r3, #4
 80026b6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80026ba:	4b2b      	ldr	r3, [pc, #172]	@ (8002768 <HAL_I2C_MspInit+0x114>)
 80026bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	617b      	str	r3, [r7, #20]
 80026c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c8:	4b27      	ldr	r3, [pc, #156]	@ (8002768 <HAL_I2C_MspInit+0x114>)
 80026ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80026ce:	4a26      	ldr	r2, [pc, #152]	@ (8002768 <HAL_I2C_MspInit+0x114>)
 80026d0:	f043 0301 	orr.w	r3, r3, #1
 80026d4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80026d8:	4b23      	ldr	r3, [pc, #140]	@ (8002768 <HAL_I2C_MspInit+0x114>)
 80026da:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	613b      	str	r3, [r7, #16]
 80026e4:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80026e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026ee:	2312      	movs	r3, #18
 80026f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f4:	2300      	movs	r3, #0
 80026f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fa:	2300      	movs	r3, #0
 80026fc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002700:	2304      	movs	r3, #4
 8002702:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002706:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800270a:	4619      	mov	r1, r3
 800270c:	4817      	ldr	r0, [pc, #92]	@ (800276c <HAL_I2C_MspInit+0x118>)
 800270e:	f004 fed7 	bl	80074c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002712:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002716:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800271a:	2312      	movs	r3, #18
 800271c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002720:	2300      	movs	r3, #0
 8002722:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002726:	2300      	movs	r3, #0
 8002728:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800272c:	2304      	movs	r3, #4
 800272e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002732:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002736:	4619      	mov	r1, r3
 8002738:	480d      	ldr	r0, [pc, #52]	@ (8002770 <HAL_I2C_MspInit+0x11c>)
 800273a:	f004 fec1 	bl	80074c0 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800273e:	4b0a      	ldr	r3, [pc, #40]	@ (8002768 <HAL_I2C_MspInit+0x114>)
 8002740:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002744:	4a08      	ldr	r2, [pc, #32]	@ (8002768 <HAL_I2C_MspInit+0x114>)
 8002746:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800274a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800274e:	4b06      	ldr	r3, [pc, #24]	@ (8002768 <HAL_I2C_MspInit+0x114>)
 8002750:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002754:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002758:	60fb      	str	r3, [r7, #12]
 800275a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800275c:	bf00      	nop
 800275e:	37f0      	adds	r7, #240	@ 0xf0
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40005c00 	.word	0x40005c00
 8002768:	58024400 	.word	0x58024400
 800276c:	58020800 	.word	0x58020800
 8002770:	58020000 	.word	0x58020000

08002774 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8002778:	f000 f922 	bl	80029c0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800277c:	f001 fa44 	bl	8003c08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002780:	f000 f83c 	bl	80027fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002784:	f7ff fe74 	bl	8002470 <MX_GPIO_Init>
  MX_DMA_Init();
 8002788:	f7ff fd6c 	bl	8002264 <MX_DMA_Init>
  MX_FDCAN1_Init();
 800278c:	f7ff fd92 	bl	80022b4 <MX_FDCAN1_Init>
  MX_I2C3_Init();
 8002790:	f7ff ff20 	bl	80025d4 <MX_I2C3_Init>
  MX_SPI1_Init();
 8002794:	f000 f946 	bl	8002a24 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002798:	f000 f99a 	bl	8002ad0 <MX_SPI2_Init>
  MX_TIM2_Init();
 800279c:	f000 fbbc 	bl	8002f18 <MX_TIM2_Init>
  MX_TIM3_Init();
 80027a0:	f000 fc36 	bl	8003010 <MX_TIM3_Init>
  MX_TIM4_Init();
 80027a4:	f000 fc9a 	bl	80030dc <MX_TIM4_Init>
  MX_UART4_Init();
 80027a8:	f000 fefe 	bl	80035a8 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80027ac:	f000 ff48 	bl	8003640 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80027b0:	f000 ffe2 	bl	8003778 <MX_USART6_UART_Init>
  MX_TIM13_Init();
 80027b4:	f000 fd7e 	bl	80032b4 <MX_TIM13_Init>
  MX_FATFS_Init();
 80027b8:	f00c fa9e 	bl	800ecf8 <MX_FATFS_Init>
  MX_TIM6_Init();
 80027bc:	f000 fd0a 	bl	80031d4 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 80027c0:	f000 ff8e 	bl	80036e0 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 80027c4:	f000 fd3e 	bl	8003244 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  BMP280_init();
 80027c8:	f7fe fc22 	bl	8001010 <BMP280_init>
  SD_init();
 80027cc:	f7ff fd1a 	bl	8002204 <SD_init>
  HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 80027d0:	2201      	movs	r2, #1
 80027d2:	4906      	ldr	r1, [pc, #24]	@ (80027ec <main+0x78>)
 80027d4:	4806      	ldr	r0, [pc, #24]	@ (80027f0 <main+0x7c>)
 80027d6:	f00a fa95 	bl	800cd04 <HAL_UART_Receive_DMA>
  HAL_TIM_Base_Start_IT(&htim6);
 80027da:	4806      	ldr	r0, [pc, #24]	@ (80027f4 <main+0x80>)
 80027dc:	f009 f944 	bl	800ba68 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 80027e0:	4805      	ldr	r0, [pc, #20]	@ (80027f8 <main+0x84>)
 80027e2:	f009 f941 	bl	800ba68 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80027e6:	bf00      	nop
 80027e8:	e7fd      	b.n	80027e6 <main+0x72>
 80027ea:	bf00      	nop
 80027ec:	24000263 	.word	0x24000263
 80027f0:	240028a8 	.word	0x240028a8
 80027f4:	2400269c 	.word	0x2400269c
 80027f8:	240026e8 	.word	0x240026e8

080027fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b09c      	sub	sp, #112	@ 0x70
 8002800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002802:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002806:	224c      	movs	r2, #76	@ 0x4c
 8002808:	2100      	movs	r1, #0
 800280a:	4618      	mov	r0, r3
 800280c:	f010 fc16 	bl	801303c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002810:	1d3b      	adds	r3, r7, #4
 8002812:	2220      	movs	r2, #32
 8002814:	2100      	movs	r1, #0
 8002816:	4618      	mov	r0, r3
 8002818:	f010 fc10 	bl	801303c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 800281c:	4b30      	ldr	r3, [pc, #192]	@ (80028e0 <SystemClock_Config+0xe4>)
 800281e:	f04f 32ff 	mov.w	r2, #4294967295
 8002822:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002826:	2002      	movs	r0, #2
 8002828:	f005 f948 	bl	8007abc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800282c:	2300      	movs	r3, #0
 800282e:	603b      	str	r3, [r7, #0]
 8002830:	4b2c      	ldr	r3, [pc, #176]	@ (80028e4 <SystemClock_Config+0xe8>)
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	4a2b      	ldr	r2, [pc, #172]	@ (80028e4 <SystemClock_Config+0xe8>)
 8002836:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800283a:	6193      	str	r3, [r2, #24]
 800283c:	4b29      	ldr	r3, [pc, #164]	@ (80028e4 <SystemClock_Config+0xe8>)
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002844:	603b      	str	r3, [r7, #0]
 8002846:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002848:	bf00      	nop
 800284a:	4b26      	ldr	r3, [pc, #152]	@ (80028e4 <SystemClock_Config+0xe8>)
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002852:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002856:	d1f8      	bne.n	800284a <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002858:	2302      	movs	r3, #2
 800285a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800285c:	2301      	movs	r3, #1
 800285e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8002860:	2340      	movs	r3, #64	@ 0x40
 8002862:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002864:	2302      	movs	r3, #2
 8002866:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002868:	2300      	movs	r3, #0
 800286a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800286c:	2304      	movs	r3, #4
 800286e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8002870:	2323      	movs	r3, #35	@ 0x23
 8002872:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002874:	2302      	movs	r3, #2
 8002876:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002878:	2302      	movs	r3, #2
 800287a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800287c:	2302      	movs	r3, #2
 800287e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002880:	230c      	movs	r3, #12
 8002882:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002884:	2300      	movs	r3, #0
 8002886:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002888:	2300      	movs	r3, #0
 800288a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800288c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002890:	4618      	mov	r0, r3
 8002892:	f005 f94d 	bl	8007b30 <HAL_RCC_OscConfig>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800289c:	f000 f8bc 	bl	8002a18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028a0:	233f      	movs	r3, #63	@ 0x3f
 80028a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028a4:	2303      	movs	r3, #3
 80028a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80028a8:	2300      	movs	r3, #0
 80028aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80028ac:	2300      	movs	r3, #0
 80028ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80028b0:	2340      	movs	r3, #64	@ 0x40
 80028b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80028b4:	2340      	movs	r3, #64	@ 0x40
 80028b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80028b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028bc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80028be:	2340      	movs	r3, #64	@ 0x40
 80028c0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80028c2:	1d3b      	adds	r3, r7, #4
 80028c4:	2106      	movs	r1, #6
 80028c6:	4618      	mov	r0, r3
 80028c8:	f005 fd64 	bl	8008394 <HAL_RCC_ClockConfig>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80028d2:	f000 f8a1 	bl	8002a18 <Error_Handler>
  }
}
 80028d6:	bf00      	nop
 80028d8:	3770      	adds	r7, #112	@ 0x70
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	58024400 	.word	0x58024400
 80028e4:	58024800 	.word	0x58024800

080028e8 <HAL_UART_RxCpltCallback>:

uint64_t TimeOn_Counter = 0x00;
uint64_t TimeOn_Counter10ms = 0x00;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == USART1){
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a10      	ldr	r2, [pc, #64]	@ (8002938 <HAL_UART_RxCpltCallback+0x50>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d10a      	bne.n	8002910 <HAL_UART_RxCpltCallback+0x28>
		SBUS_Receive(SBUS_RxBuffer);
 80028fa:	4b10      	ldr	r3, [pc, #64]	@ (800293c <HAL_UART_RxCpltCallback+0x54>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff f890 	bl	8001a24 <SBUS_Receive>
		HAL_UART_Receive_DMA(&huart1, &SBUS_RxBuffer, 1);
 8002904:	2201      	movs	r2, #1
 8002906:	490d      	ldr	r1, [pc, #52]	@ (800293c <HAL_UART_RxCpltCallback+0x54>)
 8002908:	480d      	ldr	r0, [pc, #52]	@ (8002940 <HAL_UART_RxCpltCallback+0x58>)
 800290a:	f00a f9fb 	bl	800cd04 <HAL_UART_Receive_DMA>
	}
    else if (huart -> Instance == USART3){
        BNO_Receive(BNO_BufferByte);
        HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
    }
}
 800290e:	e00e      	b.n	800292e <HAL_UART_RxCpltCallback+0x46>
    else if (huart -> Instance == USART3){
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a0b      	ldr	r2, [pc, #44]	@ (8002944 <HAL_UART_RxCpltCallback+0x5c>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d109      	bne.n	800292e <HAL_UART_RxCpltCallback+0x46>
        BNO_Receive(BNO_BufferByte);
 800291a:	4b0b      	ldr	r3, [pc, #44]	@ (8002948 <HAL_UART_RxCpltCallback+0x60>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f7fe fe88 	bl	8001634 <BNO_Receive>
        HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 8002924:	2201      	movs	r2, #1
 8002926:	4908      	ldr	r1, [pc, #32]	@ (8002948 <HAL_UART_RxCpltCallback+0x60>)
 8002928:	4808      	ldr	r0, [pc, #32]	@ (800294c <HAL_UART_RxCpltCallback+0x64>)
 800292a:	f00a f9eb 	bl	800cd04 <HAL_UART_Receive_DMA>
}
 800292e:	bf00      	nop
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40011000 	.word	0x40011000
 800293c:	2400032d 	.word	0x2400032d
 8002940:	24002814 	.word	0x24002814
 8002944:	40004800 	.word	0x40004800
 8002948:	24000263 	.word	0x24000263
 800294c:	240028a8 	.word	0x240028a8

08002950 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002950:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002954:	b082      	sub	sp, #8
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
	//Interrupción cada 1 ms
	if (htim -> Instance == TIM6){
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a14      	ldr	r2, [pc, #80]	@ (80029b0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d10d      	bne.n	8002980 <HAL_TIM_PeriodElapsedCallback+0x30>
		TimeOn_Counter++;
 8002964:	4b13      	ldr	r3, [pc, #76]	@ (80029b4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800296a:	f112 0801 	adds.w	r8, r2, #1
 800296e:	f143 0900 	adc.w	r9, r3, #0
 8002972:	4b10      	ldr	r3, [pc, #64]	@ (80029b4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002974:	e9c3 8900 	strd	r8, r9, [r3]
		LED_Tasks();
 8002978:	f7fe ffa2 	bl	80018c0 <LED_Tasks>
		SBUS_IntegrityVerification();
 800297c:	f7ff fc1e 	bl	80021bc <SBUS_IntegrityVerification>
	}
	//Interrupción cada 10 ms
	if (htim -> Instance == TIM7){
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a0c      	ldr	r2, [pc, #48]	@ (80029b8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d10c      	bne.n	80029a4 <HAL_TIM_PeriodElapsedCallback+0x54>
		TimeOn_Counter10ms++;
 800298a:	4b0c      	ldr	r3, [pc, #48]	@ (80029bc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800298c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002990:	1c54      	adds	r4, r2, #1
 8002992:	f143 0500 	adc.w	r5, r3, #0
 8002996:	4b09      	ldr	r3, [pc, #36]	@ (80029bc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002998:	e9c3 4500 	strd	r4, r5, [r3]
		BNO_Tasks();
 800299c:	f7fe fecc 	bl	8001738 <BNO_Tasks>
		BMP280_calculate();
 80029a0:	f7fe fb5c 	bl	800105c <BMP280_calculate>
	}
}
 80029a4:	bf00      	nop
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80029ae:	bf00      	nop
 80029b0:	40001000 	.word	0x40001000
 80029b4:	24002498 	.word	0x24002498
 80029b8:	40001400 	.word	0x40001400
 80029bc:	240024a0 	.word	0x240024a0

080029c0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80029c6:	463b      	mov	r3, r7
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	605a      	str	r2, [r3, #4]
 80029ce:	609a      	str	r2, [r3, #8]
 80029d0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80029d2:	f001 fabb 	bl	8003f4c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80029d6:	2301      	movs	r3, #1
 80029d8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80029da:	2300      	movs	r3, #0
 80029dc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80029de:	2300      	movs	r3, #0
 80029e0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80029e2:	231f      	movs	r3, #31
 80029e4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80029e6:	2387      	movs	r3, #135	@ 0x87
 80029e8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80029ea:	2300      	movs	r3, #0
 80029ec:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80029ee:	2300      	movs	r3, #0
 80029f0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80029f2:	2301      	movs	r3, #1
 80029f4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80029f6:	2301      	movs	r3, #1
 80029f8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80029fa:	2300      	movs	r3, #0
 80029fc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80029fe:	2300      	movs	r3, #0
 8002a00:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002a02:	463b      	mov	r3, r7
 8002a04:	4618      	mov	r0, r3
 8002a06:	f001 fad9 	bl	8003fbc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002a0a:	2004      	movs	r0, #4
 8002a0c:	f001 fab6 	bl	8003f7c <HAL_MPU_Enable>

}
 8002a10:	bf00      	nop
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a1c:	b672      	cpsid	i
}
 8002a1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a20:	bf00      	nop
 8002a22:	e7fd      	b.n	8002a20 <Error_Handler+0x8>

08002a24 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002a28:	4b27      	ldr	r3, [pc, #156]	@ (8002ac8 <MX_SPI1_Init+0xa4>)
 8002a2a:	4a28      	ldr	r2, [pc, #160]	@ (8002acc <MX_SPI1_Init+0xa8>)
 8002a2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a2e:	4b26      	ldr	r3, [pc, #152]	@ (8002ac8 <MX_SPI1_Init+0xa4>)
 8002a30:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002a34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a36:	4b24      	ldr	r3, [pc, #144]	@ (8002ac8 <MX_SPI1_Init+0xa4>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a3c:	4b22      	ldr	r3, [pc, #136]	@ (8002ac8 <MX_SPI1_Init+0xa4>)
 8002a3e:	2207      	movs	r2, #7
 8002a40:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a42:	4b21      	ldr	r3, [pc, #132]	@ (8002ac8 <MX_SPI1_Init+0xa4>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a48:	4b1f      	ldr	r3, [pc, #124]	@ (8002ac8 <MX_SPI1_Init+0xa4>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a4e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ac8 <MX_SPI1_Init+0xa4>)
 8002a50:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002a54:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002a56:	4b1c      	ldr	r3, [pc, #112]	@ (8002ac8 <MX_SPI1_Init+0xa4>)
 8002a58:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 8002a5c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ac8 <MX_SPI1_Init+0xa4>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a64:	4b18      	ldr	r3, [pc, #96]	@ (8002ac8 <MX_SPI1_Init+0xa4>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a6a:	4b17      	ldr	r3, [pc, #92]	@ (8002ac8 <MX_SPI1_Init+0xa4>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002a70:	4b15      	ldr	r3, [pc, #84]	@ (8002ac8 <MX_SPI1_Init+0xa4>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a76:	4b14      	ldr	r3, [pc, #80]	@ (8002ac8 <MX_SPI1_Init+0xa4>)
 8002a78:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002a7c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002a7e:	4b12      	ldr	r3, [pc, #72]	@ (8002ac8 <MX_SPI1_Init+0xa4>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002a84:	4b10      	ldr	r3, [pc, #64]	@ (8002ac8 <MX_SPI1_Init+0xa4>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ac8 <MX_SPI1_Init+0xa4>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002a90:	4b0d      	ldr	r3, [pc, #52]	@ (8002ac8 <MX_SPI1_Init+0xa4>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002a96:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac8 <MX_SPI1_Init+0xa4>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002ac8 <MX_SPI1_Init+0xa4>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002aa2:	4b09      	ldr	r3, [pc, #36]	@ (8002ac8 <MX_SPI1_Init+0xa4>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002aa8:	4b07      	ldr	r3, [pc, #28]	@ (8002ac8 <MX_SPI1_Init+0xa4>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002aae:	4b06      	ldr	r3, [pc, #24]	@ (8002ac8 <MX_SPI1_Init+0xa4>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ab4:	4804      	ldr	r0, [pc, #16]	@ (8002ac8 <MX_SPI1_Init+0xa4>)
 8002ab6:	f007 fdd9 	bl	800a66c <HAL_SPI_Init>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8002ac0:	f7ff ffaa 	bl	8002a18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ac4:	bf00      	nop
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	240024a8 	.word	0x240024a8
 8002acc:	40013000 	.word	0x40013000

08002ad0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002ad4:	4b27      	ldr	r3, [pc, #156]	@ (8002b74 <MX_SPI2_Init+0xa4>)
 8002ad6:	4a28      	ldr	r2, [pc, #160]	@ (8002b78 <MX_SPI2_Init+0xa8>)
 8002ad8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002ada:	4b26      	ldr	r3, [pc, #152]	@ (8002b74 <MX_SPI2_Init+0xa4>)
 8002adc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002ae0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002ae2:	4b24      	ldr	r3, [pc, #144]	@ (8002b74 <MX_SPI2_Init+0xa4>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ae8:	4b22      	ldr	r3, [pc, #136]	@ (8002b74 <MX_SPI2_Init+0xa4>)
 8002aea:	2207      	movs	r2, #7
 8002aec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002aee:	4b21      	ldr	r3, [pc, #132]	@ (8002b74 <MX_SPI2_Init+0xa4>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002af4:	4b1f      	ldr	r3, [pc, #124]	@ (8002b74 <MX_SPI2_Init+0xa4>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002afa:	4b1e      	ldr	r3, [pc, #120]	@ (8002b74 <MX_SPI2_Init+0xa4>)
 8002afc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002b00:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002b02:	4b1c      	ldr	r3, [pc, #112]	@ (8002b74 <MX_SPI2_Init+0xa4>)
 8002b04:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8002b08:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b0a:	4b1a      	ldr	r3, [pc, #104]	@ (8002b74 <MX_SPI2_Init+0xa4>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b10:	4b18      	ldr	r3, [pc, #96]	@ (8002b74 <MX_SPI2_Init+0xa4>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b16:	4b17      	ldr	r3, [pc, #92]	@ (8002b74 <MX_SPI2_Init+0xa4>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002b1c:	4b15      	ldr	r3, [pc, #84]	@ (8002b74 <MX_SPI2_Init+0xa4>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002b22:	4b14      	ldr	r3, [pc, #80]	@ (8002b74 <MX_SPI2_Init+0xa4>)
 8002b24:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002b28:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002b2a:	4b12      	ldr	r3, [pc, #72]	@ (8002b74 <MX_SPI2_Init+0xa4>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002b30:	4b10      	ldr	r3, [pc, #64]	@ (8002b74 <MX_SPI2_Init+0xa4>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002b36:	4b0f      	ldr	r3, [pc, #60]	@ (8002b74 <MX_SPI2_Init+0xa4>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002b3c:	4b0d      	ldr	r3, [pc, #52]	@ (8002b74 <MX_SPI2_Init+0xa4>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002b42:	4b0c      	ldr	r3, [pc, #48]	@ (8002b74 <MX_SPI2_Init+0xa4>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002b48:	4b0a      	ldr	r3, [pc, #40]	@ (8002b74 <MX_SPI2_Init+0xa4>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002b4e:	4b09      	ldr	r3, [pc, #36]	@ (8002b74 <MX_SPI2_Init+0xa4>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002b54:	4b07      	ldr	r3, [pc, #28]	@ (8002b74 <MX_SPI2_Init+0xa4>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002b5a:	4b06      	ldr	r3, [pc, #24]	@ (8002b74 <MX_SPI2_Init+0xa4>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002b60:	4804      	ldr	r0, [pc, #16]	@ (8002b74 <MX_SPI2_Init+0xa4>)
 8002b62:	f007 fd83 	bl	800a66c <HAL_SPI_Init>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8002b6c:	f7ff ff54 	bl	8002a18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002b70:	bf00      	nop
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	24002530 	.word	0x24002530
 8002b78:	40003800 	.word	0x40003800

08002b7c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b0bc      	sub	sp, #240	@ 0xf0
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b84:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	605a      	str	r2, [r3, #4]
 8002b8e:	609a      	str	r2, [r3, #8]
 8002b90:	60da      	str	r2, [r3, #12]
 8002b92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b94:	f107 0318 	add.w	r3, r7, #24
 8002b98:	22c0      	movs	r2, #192	@ 0xc0
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f010 fa4d 	bl	801303c <memset>
  if(spiHandle->Instance==SPI1)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a4c      	ldr	r2, [pc, #304]	@ (8002cd8 <HAL_SPI_MspInit+0x15c>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d145      	bne.n	8002c38 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002bac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002bb0:	f04f 0300 	mov.w	r3, #0
 8002bb4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bbc:	f107 0318 	add.w	r3, r7, #24
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f005 ff73 	bl	8008aac <HAL_RCCEx_PeriphCLKConfig>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002bcc:	f7ff ff24 	bl	8002a18 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002bd0:	4b42      	ldr	r3, [pc, #264]	@ (8002cdc <HAL_SPI_MspInit+0x160>)
 8002bd2:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002bd6:	4a41      	ldr	r2, [pc, #260]	@ (8002cdc <HAL_SPI_MspInit+0x160>)
 8002bd8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002bdc:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8002be0:	4b3e      	ldr	r3, [pc, #248]	@ (8002cdc <HAL_SPI_MspInit+0x160>)
 8002be2:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002be6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bea:	617b      	str	r3, [r7, #20]
 8002bec:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bee:	4b3b      	ldr	r3, [pc, #236]	@ (8002cdc <HAL_SPI_MspInit+0x160>)
 8002bf0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002bf4:	4a39      	ldr	r2, [pc, #228]	@ (8002cdc <HAL_SPI_MspInit+0x160>)
 8002bf6:	f043 0301 	orr.w	r3, r3, #1
 8002bfa:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002bfe:	4b37      	ldr	r3, [pc, #220]	@ (8002cdc <HAL_SPI_MspInit+0x160>)
 8002c00:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	613b      	str	r3, [r7, #16]
 8002c0a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8002c0c:	23e0      	movs	r3, #224	@ 0xe0
 8002c0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c12:	2302      	movs	r3, #2
 8002c14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c24:	2305      	movs	r3, #5
 8002c26:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c2a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002c2e:	4619      	mov	r1, r3
 8002c30:	482b      	ldr	r0, [pc, #172]	@ (8002ce0 <HAL_SPI_MspInit+0x164>)
 8002c32:	f004 fc45 	bl	80074c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002c36:	e04a      	b.n	8002cce <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI2)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a29      	ldr	r2, [pc, #164]	@ (8002ce4 <HAL_SPI_MspInit+0x168>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d145      	bne.n	8002cce <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002c42:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002c46:	f04f 0300 	mov.w	r3, #0
 8002c4a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c52:	f107 0318 	add.w	r3, r7, #24
 8002c56:	4618      	mov	r0, r3
 8002c58:	f005 ff28 	bl	8008aac <HAL_RCCEx_PeriphCLKConfig>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8002c62:	f7ff fed9 	bl	8002a18 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002c66:	4b1d      	ldr	r3, [pc, #116]	@ (8002cdc <HAL_SPI_MspInit+0x160>)
 8002c68:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002c6c:	4a1b      	ldr	r2, [pc, #108]	@ (8002cdc <HAL_SPI_MspInit+0x160>)
 8002c6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c72:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002c76:	4b19      	ldr	r3, [pc, #100]	@ (8002cdc <HAL_SPI_MspInit+0x160>)
 8002c78:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002c7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c84:	4b15      	ldr	r3, [pc, #84]	@ (8002cdc <HAL_SPI_MspInit+0x160>)
 8002c86:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002c8a:	4a14      	ldr	r2, [pc, #80]	@ (8002cdc <HAL_SPI_MspInit+0x160>)
 8002c8c:	f043 0302 	orr.w	r3, r3, #2
 8002c90:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002c94:	4b11      	ldr	r3, [pc, #68]	@ (8002cdc <HAL_SPI_MspInit+0x160>)
 8002c96:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	60bb      	str	r3, [r7, #8]
 8002ca0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BMP_SCK_Pin|BMP_MISO_Pin|BMP_MOSI_Pin;
 8002ca2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002ca6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002caa:	2302      	movs	r3, #2
 8002cac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002cbc:	2305      	movs	r3, #5
 8002cbe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cc2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	4807      	ldr	r0, [pc, #28]	@ (8002ce8 <HAL_SPI_MspInit+0x16c>)
 8002cca:	f004 fbf9 	bl	80074c0 <HAL_GPIO_Init>
}
 8002cce:	bf00      	nop
 8002cd0:	37f0      	adds	r7, #240	@ 0xf0
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40013000 	.word	0x40013000
 8002cdc:	58024400 	.word	0x58024400
 8002ce0:	58020000 	.word	0x58020000
 8002ce4:	40003800 	.word	0x40003800
 8002ce8:	58020400 	.word	0x58020400

08002cec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8002d1c <HAL_MspInit+0x30>)
 8002cf4:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002cf8:	4a08      	ldr	r2, [pc, #32]	@ (8002d1c <HAL_MspInit+0x30>)
 8002cfa:	f043 0302 	orr.w	r3, r3, #2
 8002cfe:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8002d02:	4b06      	ldr	r3, [pc, #24]	@ (8002d1c <HAL_MspInit+0x30>)
 8002d04:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	607b      	str	r3, [r7, #4]
 8002d0e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	58024400 	.word	0x58024400

08002d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d24:	bf00      	nop
 8002d26:	e7fd      	b.n	8002d24 <NMI_Handler+0x4>

08002d28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d2c:	bf00      	nop
 8002d2e:	e7fd      	b.n	8002d2c <HardFault_Handler+0x4>

08002d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d34:	bf00      	nop
 8002d36:	e7fd      	b.n	8002d34 <MemManage_Handler+0x4>

08002d38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d3c:	bf00      	nop
 8002d3e:	e7fd      	b.n	8002d3c <BusFault_Handler+0x4>

08002d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d44:	bf00      	nop
 8002d46:	e7fd      	b.n	8002d44 <UsageFault_Handler+0x4>

08002d48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d4c:	bf00      	nop
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d56:	b480      	push	{r7}
 8002d58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d5a:	bf00      	nop
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d68:	bf00      	nop
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
	...

08002d74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  if(Timer1 > 0)
 8002d78:	4b0b      	ldr	r3, [pc, #44]	@ (8002da8 <SysTick_Handler+0x34>)
 8002d7a:	881b      	ldrh	r3, [r3, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d005      	beq.n	8002d8c <SysTick_Handler+0x18>
	    Timer1--;
 8002d80:	4b09      	ldr	r3, [pc, #36]	@ (8002da8 <SysTick_Handler+0x34>)
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	4b07      	ldr	r3, [pc, #28]	@ (8002da8 <SysTick_Handler+0x34>)
 8002d8a:	801a      	strh	r2, [r3, #0]
	  if(Timer2 > 0)
 8002d8c:	4b07      	ldr	r3, [pc, #28]	@ (8002dac <SysTick_Handler+0x38>)
 8002d8e:	881b      	ldrh	r3, [r3, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d005      	beq.n	8002da0 <SysTick_Handler+0x2c>
	    Timer2--;
 8002d94:	4b05      	ldr	r3, [pc, #20]	@ (8002dac <SysTick_Handler+0x38>)
 8002d96:	881b      	ldrh	r3, [r3, #0]
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	4b03      	ldr	r3, [pc, #12]	@ (8002dac <SysTick_Handler+0x38>)
 8002d9e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002da0:	f000 ffa4 	bl	8003cec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002da4:	bf00      	nop
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	24002acc 	.word	0x24002acc
 8002dac:	24002ace 	.word	0x24002ace

08002db0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002db4:	4802      	ldr	r0, [pc, #8]	@ (8002dc0 <DMA1_Stream0_IRQHandler+0x10>)
 8002db6:	f002 fc9d 	bl	80056f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002dba:	bf00      	nop
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	240029d0 	.word	0x240029d0

08002dc4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002dc8:	4802      	ldr	r0, [pc, #8]	@ (8002dd4 <DMA1_Stream1_IRQHandler+0x10>)
 8002dca:	f002 fc93 	bl	80056f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	24002a48 	.word	0x24002a48

08002dd8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ddc:	4802      	ldr	r0, [pc, #8]	@ (8002de8 <USART1_IRQHandler+0x10>)
 8002dde:	f009 ffdd 	bl	800cd9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002de2:	bf00      	nop
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	24002814 	.word	0x24002814

08002dec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002df0:	4802      	ldr	r0, [pc, #8]	@ (8002dfc <USART3_IRQHandler+0x10>)
 8002df2:	f009 ffd3 	bl	800cd9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002df6:	bf00      	nop
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	240028a8 	.word	0x240028a8

08002e00 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002e04:	4802      	ldr	r0, [pc, #8]	@ (8002e10 <TIM6_DAC_IRQHandler+0x10>)
 8002e06:	f009 f80d 	bl	800be24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002e0a:	bf00      	nop
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	2400269c 	.word	0x2400269c

08002e14 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002e18:	4802      	ldr	r0, [pc, #8]	@ (8002e24 <TIM7_IRQHandler+0x10>)
 8002e1a:	f009 f803 	bl	800be24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002e1e:	bf00      	nop
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	240026e8 	.word	0x240026e8

08002e28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002e2c:	4b32      	ldr	r3, [pc, #200]	@ (8002ef8 <SystemInit+0xd0>)
 8002e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e32:	4a31      	ldr	r2, [pc, #196]	@ (8002ef8 <SystemInit+0xd0>)
 8002e34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002e3c:	4b2f      	ldr	r3, [pc, #188]	@ (8002efc <SystemInit+0xd4>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 030f 	and.w	r3, r3, #15
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d807      	bhi.n	8002e58 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002e48:	4b2c      	ldr	r3, [pc, #176]	@ (8002efc <SystemInit+0xd4>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f023 030f 	bic.w	r3, r3, #15
 8002e50:	4a2a      	ldr	r2, [pc, #168]	@ (8002efc <SystemInit+0xd4>)
 8002e52:	f043 0303 	orr.w	r3, r3, #3
 8002e56:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002e58:	4b29      	ldr	r3, [pc, #164]	@ (8002f00 <SystemInit+0xd8>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a28      	ldr	r2, [pc, #160]	@ (8002f00 <SystemInit+0xd8>)
 8002e5e:	f043 0301 	orr.w	r3, r3, #1
 8002e62:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002e64:	4b26      	ldr	r3, [pc, #152]	@ (8002f00 <SystemInit+0xd8>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002e6a:	4b25      	ldr	r3, [pc, #148]	@ (8002f00 <SystemInit+0xd8>)
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	4924      	ldr	r1, [pc, #144]	@ (8002f00 <SystemInit+0xd8>)
 8002e70:	4b24      	ldr	r3, [pc, #144]	@ (8002f04 <SystemInit+0xdc>)
 8002e72:	4013      	ands	r3, r2
 8002e74:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002e76:	4b21      	ldr	r3, [pc, #132]	@ (8002efc <SystemInit+0xd4>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 030c 	and.w	r3, r3, #12
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d007      	beq.n	8002e92 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002e82:	4b1e      	ldr	r3, [pc, #120]	@ (8002efc <SystemInit+0xd4>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f023 030f 	bic.w	r3, r3, #15
 8002e8a:	4a1c      	ldr	r2, [pc, #112]	@ (8002efc <SystemInit+0xd4>)
 8002e8c:	f043 0303 	orr.w	r3, r3, #3
 8002e90:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8002e92:	4b1b      	ldr	r3, [pc, #108]	@ (8002f00 <SystemInit+0xd8>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8002e98:	4b19      	ldr	r3, [pc, #100]	@ (8002f00 <SystemInit+0xd8>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8002e9e:	4b18      	ldr	r3, [pc, #96]	@ (8002f00 <SystemInit+0xd8>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002ea4:	4b16      	ldr	r3, [pc, #88]	@ (8002f00 <SystemInit+0xd8>)
 8002ea6:	4a18      	ldr	r2, [pc, #96]	@ (8002f08 <SystemInit+0xe0>)
 8002ea8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002eaa:	4b15      	ldr	r3, [pc, #84]	@ (8002f00 <SystemInit+0xd8>)
 8002eac:	4a17      	ldr	r2, [pc, #92]	@ (8002f0c <SystemInit+0xe4>)
 8002eae:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002eb0:	4b13      	ldr	r3, [pc, #76]	@ (8002f00 <SystemInit+0xd8>)
 8002eb2:	4a17      	ldr	r2, [pc, #92]	@ (8002f10 <SystemInit+0xe8>)
 8002eb4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002eb6:	4b12      	ldr	r3, [pc, #72]	@ (8002f00 <SystemInit+0xd8>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002ebc:	4b10      	ldr	r3, [pc, #64]	@ (8002f00 <SystemInit+0xd8>)
 8002ebe:	4a14      	ldr	r2, [pc, #80]	@ (8002f10 <SystemInit+0xe8>)
 8002ec0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8002f00 <SystemInit+0xd8>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002ec8:	4b0d      	ldr	r3, [pc, #52]	@ (8002f00 <SystemInit+0xd8>)
 8002eca:	4a11      	ldr	r2, [pc, #68]	@ (8002f10 <SystemInit+0xe8>)
 8002ecc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002ece:	4b0c      	ldr	r3, [pc, #48]	@ (8002f00 <SystemInit+0xd8>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8002f00 <SystemInit+0xd8>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a09      	ldr	r2, [pc, #36]	@ (8002f00 <SystemInit+0xd8>)
 8002eda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ede:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002ee0:	4b07      	ldr	r3, [pc, #28]	@ (8002f00 <SystemInit+0xd8>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8002f14 <SystemInit+0xec>)
 8002ee8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002eec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002eee:	bf00      	nop
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	e000ed00 	.word	0xe000ed00
 8002efc:	52002000 	.word	0x52002000
 8002f00:	58024400 	.word	0x58024400
 8002f04:	eaf6ed7f 	.word	0xeaf6ed7f
 8002f08:	02020200 	.word	0x02020200
 8002f0c:	01ff0000 	.word	0x01ff0000
 8002f10:	01010280 	.word	0x01010280
 8002f14:	52004000 	.word	0x52004000

08002f18 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b08a      	sub	sp, #40	@ 0x28
 8002f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f1e:	f107 031c 	add.w	r3, r7, #28
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	605a      	str	r2, [r3, #4]
 8002f28:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f2a:	463b      	mov	r3, r7
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	605a      	str	r2, [r3, #4]
 8002f32:	609a      	str	r2, [r3, #8]
 8002f34:	60da      	str	r2, [r3, #12]
 8002f36:	611a      	str	r2, [r3, #16]
 8002f38:	615a      	str	r2, [r3, #20]
 8002f3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002f3c:	4b33      	ldr	r3, [pc, #204]	@ (800300c <MX_TIM2_Init+0xf4>)
 8002f3e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002f42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 280-1;
 8002f44:	4b31      	ldr	r3, [pc, #196]	@ (800300c <MX_TIM2_Init+0xf4>)
 8002f46:	f240 1217 	movw	r2, #279	@ 0x117
 8002f4a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f4c:	4b2f      	ldr	r3, [pc, #188]	@ (800300c <MX_TIM2_Init+0xf4>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7000;
 8002f52:	4b2e      	ldr	r3, [pc, #184]	@ (800300c <MX_TIM2_Init+0xf4>)
 8002f54:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8002f58:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f5a:	4b2c      	ldr	r3, [pc, #176]	@ (800300c <MX_TIM2_Init+0xf4>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f60:	4b2a      	ldr	r3, [pc, #168]	@ (800300c <MX_TIM2_Init+0xf4>)
 8002f62:	2280      	movs	r2, #128	@ 0x80
 8002f64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002f66:	4829      	ldr	r0, [pc, #164]	@ (800300c <MX_TIM2_Init+0xf4>)
 8002f68:	f008 fdf6 	bl	800bb58 <HAL_TIM_PWM_Init>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8002f72:	f7ff fd51 	bl	8002a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f76:	2300      	movs	r3, #0
 8002f78:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f7e:	f107 031c 	add.w	r3, r7, #28
 8002f82:	4619      	mov	r1, r3
 8002f84:	4821      	ldr	r0, [pc, #132]	@ (800300c <MX_TIM2_Init+0xf4>)
 8002f86:	f009 fd33 	bl	800c9f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8002f90:	f7ff fd42 	bl	8002a18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f94:	2360      	movs	r3, #96	@ 0x60
 8002f96:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002fa4:	463b      	mov	r3, r7
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4818      	ldr	r0, [pc, #96]	@ (800300c <MX_TIM2_Init+0xf4>)
 8002fac:	f009 f842 	bl	800c034 <HAL_TIM_PWM_ConfigChannel>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8002fb6:	f7ff fd2f 	bl	8002a18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002fba:	463b      	mov	r3, r7
 8002fbc:	2204      	movs	r2, #4
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4812      	ldr	r0, [pc, #72]	@ (800300c <MX_TIM2_Init+0xf4>)
 8002fc2:	f009 f837 	bl	800c034 <HAL_TIM_PWM_ConfigChannel>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8002fcc:	f7ff fd24 	bl	8002a18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002fd0:	463b      	mov	r3, r7
 8002fd2:	2208      	movs	r2, #8
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	480d      	ldr	r0, [pc, #52]	@ (800300c <MX_TIM2_Init+0xf4>)
 8002fd8:	f009 f82c 	bl	800c034 <HAL_TIM_PWM_ConfigChannel>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 8002fe2:	f7ff fd19 	bl	8002a18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002fe6:	463b      	mov	r3, r7
 8002fe8:	220c      	movs	r2, #12
 8002fea:	4619      	mov	r1, r3
 8002fec:	4807      	ldr	r0, [pc, #28]	@ (800300c <MX_TIM2_Init+0xf4>)
 8002fee:	f009 f821 	bl	800c034 <HAL_TIM_PWM_ConfigChannel>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 8002ff8:	f7ff fd0e 	bl	8002a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002ffc:	4803      	ldr	r0, [pc, #12]	@ (800300c <MX_TIM2_Init+0xf4>)
 8002ffe:	f000 fa29 	bl	8003454 <HAL_TIM_MspPostInit>

}
 8003002:	bf00      	nop
 8003004:	3728      	adds	r7, #40	@ 0x28
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	240025b8 	.word	0x240025b8

08003010 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b08a      	sub	sp, #40	@ 0x28
 8003014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003016:	f107 031c 	add.w	r3, r7, #28
 800301a:	2200      	movs	r2, #0
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	605a      	str	r2, [r3, #4]
 8003020:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003022:	463b      	mov	r3, r7
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	605a      	str	r2, [r3, #4]
 800302a:	609a      	str	r2, [r3, #8]
 800302c:	60da      	str	r2, [r3, #12]
 800302e:	611a      	str	r2, [r3, #16]
 8003030:	615a      	str	r2, [r3, #20]
 8003032:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003034:	4b27      	ldr	r3, [pc, #156]	@ (80030d4 <MX_TIM3_Init+0xc4>)
 8003036:	4a28      	ldr	r2, [pc, #160]	@ (80030d8 <MX_TIM3_Init+0xc8>)
 8003038:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 280-1;
 800303a:	4b26      	ldr	r3, [pc, #152]	@ (80030d4 <MX_TIM3_Init+0xc4>)
 800303c:	f240 1217 	movw	r2, #279	@ 0x117
 8003040:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003042:	4b24      	ldr	r3, [pc, #144]	@ (80030d4 <MX_TIM3_Init+0xc4>)
 8003044:	2200      	movs	r2, #0
 8003046:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7000;
 8003048:	4b22      	ldr	r3, [pc, #136]	@ (80030d4 <MX_TIM3_Init+0xc4>)
 800304a:	f641 3258 	movw	r2, #7000	@ 0x1b58
 800304e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003050:	4b20      	ldr	r3, [pc, #128]	@ (80030d4 <MX_TIM3_Init+0xc4>)
 8003052:	2200      	movs	r2, #0
 8003054:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003056:	4b1f      	ldr	r3, [pc, #124]	@ (80030d4 <MX_TIM3_Init+0xc4>)
 8003058:	2280      	movs	r2, #128	@ 0x80
 800305a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800305c:	481d      	ldr	r0, [pc, #116]	@ (80030d4 <MX_TIM3_Init+0xc4>)
 800305e:	f008 fd7b 	bl	800bb58 <HAL_TIM_PWM_Init>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8003068:	f7ff fcd6 	bl	8002a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800306c:	2300      	movs	r3, #0
 800306e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003070:	2300      	movs	r3, #0
 8003072:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003074:	f107 031c 	add.w	r3, r7, #28
 8003078:	4619      	mov	r1, r3
 800307a:	4816      	ldr	r0, [pc, #88]	@ (80030d4 <MX_TIM3_Init+0xc4>)
 800307c:	f009 fcb8 	bl	800c9f0 <HAL_TIMEx_MasterConfigSynchronization>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8003086:	f7ff fcc7 	bl	8002a18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800308a:	2360      	movs	r3, #96	@ 0x60
 800308c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800308e:	2300      	movs	r3, #0
 8003090:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003092:	2300      	movs	r3, #0
 8003094:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003096:	2300      	movs	r3, #0
 8003098:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800309a:	463b      	mov	r3, r7
 800309c:	2200      	movs	r2, #0
 800309e:	4619      	mov	r1, r3
 80030a0:	480c      	ldr	r0, [pc, #48]	@ (80030d4 <MX_TIM3_Init+0xc4>)
 80030a2:	f008 ffc7 	bl	800c034 <HAL_TIM_PWM_ConfigChannel>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 80030ac:	f7ff fcb4 	bl	8002a18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80030b0:	463b      	mov	r3, r7
 80030b2:	2204      	movs	r2, #4
 80030b4:	4619      	mov	r1, r3
 80030b6:	4807      	ldr	r0, [pc, #28]	@ (80030d4 <MX_TIM3_Init+0xc4>)
 80030b8:	f008 ffbc 	bl	800c034 <HAL_TIM_PWM_ConfigChannel>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 80030c2:	f7ff fca9 	bl	8002a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80030c6:	4803      	ldr	r0, [pc, #12]	@ (80030d4 <MX_TIM3_Init+0xc4>)
 80030c8:	f000 f9c4 	bl	8003454 <HAL_TIM_MspPostInit>

}
 80030cc:	bf00      	nop
 80030ce:	3728      	adds	r7, #40	@ 0x28
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	24002604 	.word	0x24002604
 80030d8:	40000400 	.word	0x40000400

080030dc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b08a      	sub	sp, #40	@ 0x28
 80030e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030e2:	f107 031c 	add.w	r3, r7, #28
 80030e6:	2200      	movs	r2, #0
 80030e8:	601a      	str	r2, [r3, #0]
 80030ea:	605a      	str	r2, [r3, #4]
 80030ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030ee:	463b      	mov	r3, r7
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	605a      	str	r2, [r3, #4]
 80030f6:	609a      	str	r2, [r3, #8]
 80030f8:	60da      	str	r2, [r3, #12]
 80030fa:	611a      	str	r2, [r3, #16]
 80030fc:	615a      	str	r2, [r3, #20]
 80030fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003100:	4b32      	ldr	r3, [pc, #200]	@ (80031cc <MX_TIM4_Init+0xf0>)
 8003102:	4a33      	ldr	r2, [pc, #204]	@ (80031d0 <MX_TIM4_Init+0xf4>)
 8003104:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 280-1;
 8003106:	4b31      	ldr	r3, [pc, #196]	@ (80031cc <MX_TIM4_Init+0xf0>)
 8003108:	f240 1217 	movw	r2, #279	@ 0x117
 800310c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800310e:	4b2f      	ldr	r3, [pc, #188]	@ (80031cc <MX_TIM4_Init+0xf0>)
 8003110:	2200      	movs	r2, #0
 8003112:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7000;
 8003114:	4b2d      	ldr	r3, [pc, #180]	@ (80031cc <MX_TIM4_Init+0xf0>)
 8003116:	f641 3258 	movw	r2, #7000	@ 0x1b58
 800311a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800311c:	4b2b      	ldr	r3, [pc, #172]	@ (80031cc <MX_TIM4_Init+0xf0>)
 800311e:	2200      	movs	r2, #0
 8003120:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003122:	4b2a      	ldr	r3, [pc, #168]	@ (80031cc <MX_TIM4_Init+0xf0>)
 8003124:	2280      	movs	r2, #128	@ 0x80
 8003126:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003128:	4828      	ldr	r0, [pc, #160]	@ (80031cc <MX_TIM4_Init+0xf0>)
 800312a:	f008 fd15 	bl	800bb58 <HAL_TIM_PWM_Init>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8003134:	f7ff fc70 	bl	8002a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003138:	2300      	movs	r3, #0
 800313a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800313c:	2300      	movs	r3, #0
 800313e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003140:	f107 031c 	add.w	r3, r7, #28
 8003144:	4619      	mov	r1, r3
 8003146:	4821      	ldr	r0, [pc, #132]	@ (80031cc <MX_TIM4_Init+0xf0>)
 8003148:	f009 fc52 	bl	800c9f0 <HAL_TIMEx_MasterConfigSynchronization>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8003152:	f7ff fc61 	bl	8002a18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003156:	2360      	movs	r3, #96	@ 0x60
 8003158:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800315a:	2300      	movs	r3, #0
 800315c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800315e:	2300      	movs	r3, #0
 8003160:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003162:	2300      	movs	r3, #0
 8003164:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003166:	463b      	mov	r3, r7
 8003168:	2200      	movs	r2, #0
 800316a:	4619      	mov	r1, r3
 800316c:	4817      	ldr	r0, [pc, #92]	@ (80031cc <MX_TIM4_Init+0xf0>)
 800316e:	f008 ff61 	bl	800c034 <HAL_TIM_PWM_ConfigChannel>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8003178:	f7ff fc4e 	bl	8002a18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800317c:	463b      	mov	r3, r7
 800317e:	2204      	movs	r2, #4
 8003180:	4619      	mov	r1, r3
 8003182:	4812      	ldr	r0, [pc, #72]	@ (80031cc <MX_TIM4_Init+0xf0>)
 8003184:	f008 ff56 	bl	800c034 <HAL_TIM_PWM_ConfigChannel>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 800318e:	f7ff fc43 	bl	8002a18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003192:	463b      	mov	r3, r7
 8003194:	2208      	movs	r2, #8
 8003196:	4619      	mov	r1, r3
 8003198:	480c      	ldr	r0, [pc, #48]	@ (80031cc <MX_TIM4_Init+0xf0>)
 800319a:	f008 ff4b 	bl	800c034 <HAL_TIM_PWM_ConfigChannel>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 80031a4:	f7ff fc38 	bl	8002a18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80031a8:	463b      	mov	r3, r7
 80031aa:	220c      	movs	r2, #12
 80031ac:	4619      	mov	r1, r3
 80031ae:	4807      	ldr	r0, [pc, #28]	@ (80031cc <MX_TIM4_Init+0xf0>)
 80031b0:	f008 ff40 	bl	800c034 <HAL_TIM_PWM_ConfigChannel>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 80031ba:	f7ff fc2d 	bl	8002a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80031be:	4803      	ldr	r0, [pc, #12]	@ (80031cc <MX_TIM4_Init+0xf0>)
 80031c0:	f000 f948 	bl	8003454 <HAL_TIM_MspPostInit>

}
 80031c4:	bf00      	nop
 80031c6:	3728      	adds	r7, #40	@ 0x28
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	24002650 	.word	0x24002650
 80031d0:	40000800 	.word	0x40000800

080031d4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031da:	1d3b      	adds	r3, r7, #4
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	605a      	str	r2, [r3, #4]
 80031e2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80031e4:	4b15      	ldr	r3, [pc, #84]	@ (800323c <MX_TIM6_Init+0x68>)
 80031e6:	4a16      	ldr	r2, [pc, #88]	@ (8003240 <MX_TIM6_Init+0x6c>)
 80031e8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 999;
 80031ea:	4b14      	ldr	r3, [pc, #80]	@ (800323c <MX_TIM6_Init+0x68>)
 80031ec:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80031f0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031f2:	4b12      	ldr	r3, [pc, #72]	@ (800323c <MX_TIM6_Init+0x68>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 279;
 80031f8:	4b10      	ldr	r3, [pc, #64]	@ (800323c <MX_TIM6_Init+0x68>)
 80031fa:	f240 1217 	movw	r2, #279	@ 0x117
 80031fe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003200:	4b0e      	ldr	r3, [pc, #56]	@ (800323c <MX_TIM6_Init+0x68>)
 8003202:	2200      	movs	r2, #0
 8003204:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003206:	480d      	ldr	r0, [pc, #52]	@ (800323c <MX_TIM6_Init+0x68>)
 8003208:	f008 fbd7 	bl	800b9ba <HAL_TIM_Base_Init>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8003212:	f7ff fc01 	bl	8002a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003216:	2300      	movs	r3, #0
 8003218:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800321a:	2300      	movs	r3, #0
 800321c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800321e:	1d3b      	adds	r3, r7, #4
 8003220:	4619      	mov	r1, r3
 8003222:	4806      	ldr	r0, [pc, #24]	@ (800323c <MX_TIM6_Init+0x68>)
 8003224:	f009 fbe4 	bl	800c9f0 <HAL_TIMEx_MasterConfigSynchronization>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800322e:	f7ff fbf3 	bl	8002a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  /* USER CODE END TIM6_Init 2 */

}
 8003232:	bf00      	nop
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	2400269c 	.word	0x2400269c
 8003240:	40001000 	.word	0x40001000

08003244 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800324a:	1d3b      	adds	r3, r7, #4
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	605a      	str	r2, [r3, #4]
 8003252:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003254:	4b15      	ldr	r3, [pc, #84]	@ (80032ac <MX_TIM7_Init+0x68>)
 8003256:	4a16      	ldr	r2, [pc, #88]	@ (80032b0 <MX_TIM7_Init+0x6c>)
 8003258:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9999;
 800325a:	4b14      	ldr	r3, [pc, #80]	@ (80032ac <MX_TIM7_Init+0x68>)
 800325c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003260:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003262:	4b12      	ldr	r3, [pc, #72]	@ (80032ac <MX_TIM7_Init+0x68>)
 8003264:	2200      	movs	r2, #0
 8003266:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 279;
 8003268:	4b10      	ldr	r3, [pc, #64]	@ (80032ac <MX_TIM7_Init+0x68>)
 800326a:	f240 1217 	movw	r2, #279	@ 0x117
 800326e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003270:	4b0e      	ldr	r3, [pc, #56]	@ (80032ac <MX_TIM7_Init+0x68>)
 8003272:	2200      	movs	r2, #0
 8003274:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003276:	480d      	ldr	r0, [pc, #52]	@ (80032ac <MX_TIM7_Init+0x68>)
 8003278:	f008 fb9f 	bl	800b9ba <HAL_TIM_Base_Init>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8003282:	f7ff fbc9 	bl	8002a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003286:	2300      	movs	r3, #0
 8003288:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800328a:	2300      	movs	r3, #0
 800328c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800328e:	1d3b      	adds	r3, r7, #4
 8003290:	4619      	mov	r1, r3
 8003292:	4806      	ldr	r0, [pc, #24]	@ (80032ac <MX_TIM7_Init+0x68>)
 8003294:	f009 fbac 	bl	800c9f0 <HAL_TIMEx_MasterConfigSynchronization>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800329e:	f7ff fbbb 	bl	8002a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80032a2:	bf00      	nop
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	240026e8 	.word	0x240026e8
 80032b0:	40001400 	.word	0x40001400

080032b4 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80032b8:	4b0e      	ldr	r3, [pc, #56]	@ (80032f4 <MX_TIM13_Init+0x40>)
 80032ba:	4a0f      	ldr	r2, [pc, #60]	@ (80032f8 <MX_TIM13_Init+0x44>)
 80032bc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 280-1;
 80032be:	4b0d      	ldr	r3, [pc, #52]	@ (80032f4 <MX_TIM13_Init+0x40>)
 80032c0:	f240 1217 	movw	r2, #279	@ 0x117
 80032c4:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032c6:	4b0b      	ldr	r3, [pc, #44]	@ (80032f4 <MX_TIM13_Init+0x40>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 80032cc:	4b09      	ldr	r3, [pc, #36]	@ (80032f4 <MX_TIM13_Init+0x40>)
 80032ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80032d2:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032d4:	4b07      	ldr	r3, [pc, #28]	@ (80032f4 <MX_TIM13_Init+0x40>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80032da:	4b06      	ldr	r3, [pc, #24]	@ (80032f4 <MX_TIM13_Init+0x40>)
 80032dc:	2280      	movs	r2, #128	@ 0x80
 80032de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80032e0:	4804      	ldr	r0, [pc, #16]	@ (80032f4 <MX_TIM13_Init+0x40>)
 80032e2:	f008 fb6a 	bl	800b9ba <HAL_TIM_Base_Init>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 80032ec:	f7ff fb94 	bl	8002a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80032f0:	bf00      	nop
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	24002734 	.word	0x24002734
 80032f8:	40001c00 	.word	0x40001c00

080032fc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b087      	sub	sp, #28
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800330c:	d10f      	bne.n	800332e <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800330e:	4b1f      	ldr	r3, [pc, #124]	@ (800338c <HAL_TIM_PWM_MspInit+0x90>)
 8003310:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003314:	4a1d      	ldr	r2, [pc, #116]	@ (800338c <HAL_TIM_PWM_MspInit+0x90>)
 8003316:	f043 0301 	orr.w	r3, r3, #1
 800331a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800331e:	4b1b      	ldr	r3, [pc, #108]	@ (800338c <HAL_TIM_PWM_MspInit+0x90>)
 8003320:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	617b      	str	r3, [r7, #20]
 800332a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800332c:	e028      	b.n	8003380 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM3)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a17      	ldr	r2, [pc, #92]	@ (8003390 <HAL_TIM_PWM_MspInit+0x94>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d10f      	bne.n	8003358 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003338:	4b14      	ldr	r3, [pc, #80]	@ (800338c <HAL_TIM_PWM_MspInit+0x90>)
 800333a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800333e:	4a13      	ldr	r2, [pc, #76]	@ (800338c <HAL_TIM_PWM_MspInit+0x90>)
 8003340:	f043 0302 	orr.w	r3, r3, #2
 8003344:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003348:	4b10      	ldr	r3, [pc, #64]	@ (800338c <HAL_TIM_PWM_MspInit+0x90>)
 800334a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	613b      	str	r3, [r7, #16]
 8003354:	693b      	ldr	r3, [r7, #16]
}
 8003356:	e013      	b.n	8003380 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM4)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a0d      	ldr	r2, [pc, #52]	@ (8003394 <HAL_TIM_PWM_MspInit+0x98>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d10e      	bne.n	8003380 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003362:	4b0a      	ldr	r3, [pc, #40]	@ (800338c <HAL_TIM_PWM_MspInit+0x90>)
 8003364:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003368:	4a08      	ldr	r2, [pc, #32]	@ (800338c <HAL_TIM_PWM_MspInit+0x90>)
 800336a:	f043 0304 	orr.w	r3, r3, #4
 800336e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003372:	4b06      	ldr	r3, [pc, #24]	@ (800338c <HAL_TIM_PWM_MspInit+0x90>)
 8003374:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	68fb      	ldr	r3, [r7, #12]
}
 8003380:	bf00      	nop
 8003382:	371c      	adds	r7, #28
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	58024400 	.word	0x58024400
 8003390:	40000400 	.word	0x40000400
 8003394:	40000800 	.word	0x40000800

08003398 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a27      	ldr	r2, [pc, #156]	@ (8003444 <HAL_TIM_Base_MspInit+0xac>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d117      	bne.n	80033da <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80033aa:	4b27      	ldr	r3, [pc, #156]	@ (8003448 <HAL_TIM_Base_MspInit+0xb0>)
 80033ac:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80033b0:	4a25      	ldr	r2, [pc, #148]	@ (8003448 <HAL_TIM_Base_MspInit+0xb0>)
 80033b2:	f043 0310 	orr.w	r3, r3, #16
 80033b6:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80033ba:	4b23      	ldr	r3, [pc, #140]	@ (8003448 <HAL_TIM_Base_MspInit+0xb0>)
 80033bc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80033c0:	f003 0310 	and.w	r3, r3, #16
 80033c4:	617b      	str	r3, [r7, #20]
 80033c6:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80033c8:	2200      	movs	r2, #0
 80033ca:	2100      	movs	r1, #0
 80033cc:	2036      	movs	r0, #54	@ 0x36
 80033ce:	f000 fd88 	bl	8003ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80033d2:	2036      	movs	r0, #54	@ 0x36
 80033d4:	f000 fd9f 	bl	8003f16 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 80033d8:	e030      	b.n	800343c <HAL_TIM_Base_MspInit+0xa4>
  else if(tim_baseHandle->Instance==TIM7)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a1b      	ldr	r2, [pc, #108]	@ (800344c <HAL_TIM_Base_MspInit+0xb4>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d117      	bne.n	8003414 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80033e4:	4b18      	ldr	r3, [pc, #96]	@ (8003448 <HAL_TIM_Base_MspInit+0xb0>)
 80033e6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80033ea:	4a17      	ldr	r2, [pc, #92]	@ (8003448 <HAL_TIM_Base_MspInit+0xb0>)
 80033ec:	f043 0320 	orr.w	r3, r3, #32
 80033f0:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80033f4:	4b14      	ldr	r3, [pc, #80]	@ (8003448 <HAL_TIM_Base_MspInit+0xb0>)
 80033f6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80033fa:	f003 0320 	and.w	r3, r3, #32
 80033fe:	613b      	str	r3, [r7, #16]
 8003400:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003402:	2200      	movs	r2, #0
 8003404:	2100      	movs	r1, #0
 8003406:	2037      	movs	r0, #55	@ 0x37
 8003408:	f000 fd6b 	bl	8003ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800340c:	2037      	movs	r0, #55	@ 0x37
 800340e:	f000 fd82 	bl	8003f16 <HAL_NVIC_EnableIRQ>
}
 8003412:	e013      	b.n	800343c <HAL_TIM_Base_MspInit+0xa4>
  else if(tim_baseHandle->Instance==TIM13)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a0d      	ldr	r2, [pc, #52]	@ (8003450 <HAL_TIM_Base_MspInit+0xb8>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d10e      	bne.n	800343c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800341e:	4b0a      	ldr	r3, [pc, #40]	@ (8003448 <HAL_TIM_Base_MspInit+0xb0>)
 8003420:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003424:	4a08      	ldr	r2, [pc, #32]	@ (8003448 <HAL_TIM_Base_MspInit+0xb0>)
 8003426:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800342a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800342e:	4b06      	ldr	r3, [pc, #24]	@ (8003448 <HAL_TIM_Base_MspInit+0xb0>)
 8003430:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003434:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	68fb      	ldr	r3, [r7, #12]
}
 800343c:	bf00      	nop
 800343e:	3718      	adds	r7, #24
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40001000 	.word	0x40001000
 8003448:	58024400 	.word	0x58024400
 800344c:	40001400 	.word	0x40001400
 8003450:	40001c00 	.word	0x40001c00

08003454 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b08c      	sub	sp, #48	@ 0x30
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800345c:	f107 031c 	add.w	r3, r7, #28
 8003460:	2200      	movs	r2, #0
 8003462:	601a      	str	r2, [r3, #0]
 8003464:	605a      	str	r2, [r3, #4]
 8003466:	609a      	str	r2, [r3, #8]
 8003468:	60da      	str	r2, [r3, #12]
 800346a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003474:	d13f      	bne.n	80034f6 <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003476:	4b47      	ldr	r3, [pc, #284]	@ (8003594 <HAL_TIM_MspPostInit+0x140>)
 8003478:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800347c:	4a45      	ldr	r2, [pc, #276]	@ (8003594 <HAL_TIM_MspPostInit+0x140>)
 800347e:	f043 0301 	orr.w	r3, r3, #1
 8003482:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003486:	4b43      	ldr	r3, [pc, #268]	@ (8003594 <HAL_TIM_MspPostInit+0x140>)
 8003488:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	61bb      	str	r3, [r7, #24]
 8003492:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003494:	4b3f      	ldr	r3, [pc, #252]	@ (8003594 <HAL_TIM_MspPostInit+0x140>)
 8003496:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800349a:	4a3e      	ldr	r2, [pc, #248]	@ (8003594 <HAL_TIM_MspPostInit+0x140>)
 800349c:	f043 0302 	orr.w	r3, r3, #2
 80034a0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80034a4:	4b3b      	ldr	r3, [pc, #236]	@ (8003594 <HAL_TIM_MspPostInit+0x140>)
 80034a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	617b      	str	r3, [r7, #20]
 80034b0:	697b      	ldr	r3, [r7, #20]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 80034b2:	f248 030c 	movw	r3, #32780	@ 0x800c
 80034b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b8:	2302      	movs	r3, #2
 80034ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034bc:	2300      	movs	r3, #0
 80034be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034c0:	2300      	movs	r3, #0
 80034c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80034c4:	2301      	movs	r3, #1
 80034c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034c8:	f107 031c 	add.w	r3, r7, #28
 80034cc:	4619      	mov	r1, r3
 80034ce:	4832      	ldr	r0, [pc, #200]	@ (8003598 <HAL_TIM_MspPostInit+0x144>)
 80034d0:	f003 fff6 	bl	80074c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80034d4:	2308      	movs	r3, #8
 80034d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d8:	2302      	movs	r3, #2
 80034da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034dc:	2300      	movs	r3, #0
 80034de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e0:	2300      	movs	r3, #0
 80034e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80034e4:	2301      	movs	r3, #1
 80034e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034e8:	f107 031c 	add.w	r3, r7, #28
 80034ec:	4619      	mov	r1, r3
 80034ee:	482b      	ldr	r0, [pc, #172]	@ (800359c <HAL_TIM_MspPostInit+0x148>)
 80034f0:	f003 ffe6 	bl	80074c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80034f4:	e049      	b.n	800358a <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM3)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a29      	ldr	r2, [pc, #164]	@ (80035a0 <HAL_TIM_MspPostInit+0x14c>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d11f      	bne.n	8003540 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003500:	4b24      	ldr	r3, [pc, #144]	@ (8003594 <HAL_TIM_MspPostInit+0x140>)
 8003502:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003506:	4a23      	ldr	r2, [pc, #140]	@ (8003594 <HAL_TIM_MspPostInit+0x140>)
 8003508:	f043 0302 	orr.w	r3, r3, #2
 800350c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003510:	4b20      	ldr	r3, [pc, #128]	@ (8003594 <HAL_TIM_MspPostInit+0x140>)
 8003512:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	613b      	str	r3, [r7, #16]
 800351c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800351e:	2330      	movs	r3, #48	@ 0x30
 8003520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003522:	2302      	movs	r3, #2
 8003524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003526:	2300      	movs	r3, #0
 8003528:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800352a:	2300      	movs	r3, #0
 800352c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800352e:	2302      	movs	r3, #2
 8003530:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003532:	f107 031c 	add.w	r3, r7, #28
 8003536:	4619      	mov	r1, r3
 8003538:	4818      	ldr	r0, [pc, #96]	@ (800359c <HAL_TIM_MspPostInit+0x148>)
 800353a:	f003 ffc1 	bl	80074c0 <HAL_GPIO_Init>
}
 800353e:	e024      	b.n	800358a <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM4)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a17      	ldr	r2, [pc, #92]	@ (80035a4 <HAL_TIM_MspPostInit+0x150>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d11f      	bne.n	800358a <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800354a:	4b12      	ldr	r3, [pc, #72]	@ (8003594 <HAL_TIM_MspPostInit+0x140>)
 800354c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003550:	4a10      	ldr	r2, [pc, #64]	@ (8003594 <HAL_TIM_MspPostInit+0x140>)
 8003552:	f043 0302 	orr.w	r3, r3, #2
 8003556:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800355a:	4b0e      	ldr	r3, [pc, #56]	@ (8003594 <HAL_TIM_MspPostInit+0x140>)
 800355c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	60fb      	str	r3, [r7, #12]
 8003566:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003568:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800356c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800356e:	2302      	movs	r3, #2
 8003570:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003572:	2300      	movs	r3, #0
 8003574:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003576:	2300      	movs	r3, #0
 8003578:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800357a:	2302      	movs	r3, #2
 800357c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800357e:	f107 031c 	add.w	r3, r7, #28
 8003582:	4619      	mov	r1, r3
 8003584:	4805      	ldr	r0, [pc, #20]	@ (800359c <HAL_TIM_MspPostInit+0x148>)
 8003586:	f003 ff9b 	bl	80074c0 <HAL_GPIO_Init>
}
 800358a:	bf00      	nop
 800358c:	3730      	adds	r7, #48	@ 0x30
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	58024400 	.word	0x58024400
 8003598:	58020000 	.word	0x58020000
 800359c:	58020400 	.word	0x58020400
 80035a0:	40000400 	.word	0x40000400
 80035a4:	40000800 	.word	0x40000800

080035a8 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart3_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80035ac:	4b22      	ldr	r3, [pc, #136]	@ (8003638 <MX_UART4_Init+0x90>)
 80035ae:	4a23      	ldr	r2, [pc, #140]	@ (800363c <MX_UART4_Init+0x94>)
 80035b0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80035b2:	4b21      	ldr	r3, [pc, #132]	@ (8003638 <MX_UART4_Init+0x90>)
 80035b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80035b8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80035ba:	4b1f      	ldr	r3, [pc, #124]	@ (8003638 <MX_UART4_Init+0x90>)
 80035bc:	2200      	movs	r2, #0
 80035be:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80035c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003638 <MX_UART4_Init+0x90>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80035c6:	4b1c      	ldr	r3, [pc, #112]	@ (8003638 <MX_UART4_Init+0x90>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80035cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003638 <MX_UART4_Init+0x90>)
 80035ce:	220c      	movs	r2, #12
 80035d0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035d2:	4b19      	ldr	r3, [pc, #100]	@ (8003638 <MX_UART4_Init+0x90>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80035d8:	4b17      	ldr	r3, [pc, #92]	@ (8003638 <MX_UART4_Init+0x90>)
 80035da:	2200      	movs	r2, #0
 80035dc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80035de:	4b16      	ldr	r3, [pc, #88]	@ (8003638 <MX_UART4_Init+0x90>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80035e4:	4b14      	ldr	r3, [pc, #80]	@ (8003638 <MX_UART4_Init+0x90>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80035ea:	4b13      	ldr	r3, [pc, #76]	@ (8003638 <MX_UART4_Init+0x90>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80035f0:	4811      	ldr	r0, [pc, #68]	@ (8003638 <MX_UART4_Init+0x90>)
 80035f2:	f009 faa9 	bl	800cb48 <HAL_UART_Init>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80035fc:	f7ff fa0c 	bl	8002a18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003600:	2100      	movs	r1, #0
 8003602:	480d      	ldr	r0, [pc, #52]	@ (8003638 <MX_UART4_Init+0x90>)
 8003604:	f00b faad 	bl	800eb62 <HAL_UARTEx_SetTxFifoThreshold>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800360e:	f7ff fa03 	bl	8002a18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003612:	2100      	movs	r1, #0
 8003614:	4808      	ldr	r0, [pc, #32]	@ (8003638 <MX_UART4_Init+0x90>)
 8003616:	f00b fae2 	bl	800ebde <HAL_UARTEx_SetRxFifoThreshold>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8003620:	f7ff f9fa 	bl	8002a18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8003624:	4804      	ldr	r0, [pc, #16]	@ (8003638 <MX_UART4_Init+0x90>)
 8003626:	f00b fa63 	bl	800eaf0 <HAL_UARTEx_DisableFifoMode>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8003630:	f7ff f9f2 	bl	8002a18 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003634:	bf00      	nop
 8003636:	bd80      	pop	{r7, pc}
 8003638:	24002780 	.word	0x24002780
 800363c:	40004c00 	.word	0x40004c00

08003640 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003644:	4b23      	ldr	r3, [pc, #140]	@ (80036d4 <MX_USART1_UART_Init+0x94>)
 8003646:	4a24      	ldr	r2, [pc, #144]	@ (80036d8 <MX_USART1_UART_Init+0x98>)
 8003648:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 800364a:	4b22      	ldr	r3, [pc, #136]	@ (80036d4 <MX_USART1_UART_Init+0x94>)
 800364c:	4a23      	ldr	r2, [pc, #140]	@ (80036dc <MX_USART1_UART_Init+0x9c>)
 800364e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8003650:	4b20      	ldr	r3, [pc, #128]	@ (80036d4 <MX_USART1_UART_Init+0x94>)
 8003652:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003656:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003658:	4b1e      	ldr	r3, [pc, #120]	@ (80036d4 <MX_USART1_UART_Init+0x94>)
 800365a:	2200      	movs	r2, #0
 800365c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 800365e:	4b1d      	ldr	r3, [pc, #116]	@ (80036d4 <MX_USART1_UART_Init+0x94>)
 8003660:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003664:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003666:	4b1b      	ldr	r3, [pc, #108]	@ (80036d4 <MX_USART1_UART_Init+0x94>)
 8003668:	220c      	movs	r2, #12
 800366a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800366c:	4b19      	ldr	r3, [pc, #100]	@ (80036d4 <MX_USART1_UART_Init+0x94>)
 800366e:	2200      	movs	r2, #0
 8003670:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003672:	4b18      	ldr	r3, [pc, #96]	@ (80036d4 <MX_USART1_UART_Init+0x94>)
 8003674:	2200      	movs	r2, #0
 8003676:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003678:	4b16      	ldr	r3, [pc, #88]	@ (80036d4 <MX_USART1_UART_Init+0x94>)
 800367a:	2200      	movs	r2, #0
 800367c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800367e:	4b15      	ldr	r3, [pc, #84]	@ (80036d4 <MX_USART1_UART_Init+0x94>)
 8003680:	2200      	movs	r2, #0
 8003682:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003684:	4b13      	ldr	r3, [pc, #76]	@ (80036d4 <MX_USART1_UART_Init+0x94>)
 8003686:	2200      	movs	r2, #0
 8003688:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800368a:	4812      	ldr	r0, [pc, #72]	@ (80036d4 <MX_USART1_UART_Init+0x94>)
 800368c:	f009 fa5c 	bl	800cb48 <HAL_UART_Init>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8003696:	f7ff f9bf 	bl	8002a18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800369a:	2100      	movs	r1, #0
 800369c:	480d      	ldr	r0, [pc, #52]	@ (80036d4 <MX_USART1_UART_Init+0x94>)
 800369e:	f00b fa60 	bl	800eb62 <HAL_UARTEx_SetTxFifoThreshold>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80036a8:	f7ff f9b6 	bl	8002a18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80036ac:	2100      	movs	r1, #0
 80036ae:	4809      	ldr	r0, [pc, #36]	@ (80036d4 <MX_USART1_UART_Init+0x94>)
 80036b0:	f00b fa95 	bl	800ebde <HAL_UARTEx_SetRxFifoThreshold>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80036ba:	f7ff f9ad 	bl	8002a18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80036be:	4805      	ldr	r0, [pc, #20]	@ (80036d4 <MX_USART1_UART_Init+0x94>)
 80036c0:	f00b fa16 	bl	800eaf0 <HAL_UARTEx_DisableFifoMode>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80036ca:	f7ff f9a5 	bl	8002a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80036ce:	bf00      	nop
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	24002814 	.word	0x24002814
 80036d8:	40011000 	.word	0x40011000
 80036dc:	000186a0 	.word	0x000186a0

080036e0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80036e4:	4b22      	ldr	r3, [pc, #136]	@ (8003770 <MX_USART3_UART_Init+0x90>)
 80036e6:	4a23      	ldr	r2, [pc, #140]	@ (8003774 <MX_USART3_UART_Init+0x94>)
 80036e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80036ea:	4b21      	ldr	r3, [pc, #132]	@ (8003770 <MX_USART3_UART_Init+0x90>)
 80036ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80036f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80036f2:	4b1f      	ldr	r3, [pc, #124]	@ (8003770 <MX_USART3_UART_Init+0x90>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80036f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003770 <MX_USART3_UART_Init+0x90>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80036fe:	4b1c      	ldr	r3, [pc, #112]	@ (8003770 <MX_USART3_UART_Init+0x90>)
 8003700:	2200      	movs	r2, #0
 8003702:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003704:	4b1a      	ldr	r3, [pc, #104]	@ (8003770 <MX_USART3_UART_Init+0x90>)
 8003706:	220c      	movs	r2, #12
 8003708:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800370a:	4b19      	ldr	r3, [pc, #100]	@ (8003770 <MX_USART3_UART_Init+0x90>)
 800370c:	2200      	movs	r2, #0
 800370e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003710:	4b17      	ldr	r3, [pc, #92]	@ (8003770 <MX_USART3_UART_Init+0x90>)
 8003712:	2200      	movs	r2, #0
 8003714:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003716:	4b16      	ldr	r3, [pc, #88]	@ (8003770 <MX_USART3_UART_Init+0x90>)
 8003718:	2200      	movs	r2, #0
 800371a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800371c:	4b14      	ldr	r3, [pc, #80]	@ (8003770 <MX_USART3_UART_Init+0x90>)
 800371e:	2200      	movs	r2, #0
 8003720:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003722:	4b13      	ldr	r3, [pc, #76]	@ (8003770 <MX_USART3_UART_Init+0x90>)
 8003724:	2200      	movs	r2, #0
 8003726:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003728:	4811      	ldr	r0, [pc, #68]	@ (8003770 <MX_USART3_UART_Init+0x90>)
 800372a:	f009 fa0d 	bl	800cb48 <HAL_UART_Init>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003734:	f7ff f970 	bl	8002a18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003738:	2100      	movs	r1, #0
 800373a:	480d      	ldr	r0, [pc, #52]	@ (8003770 <MX_USART3_UART_Init+0x90>)
 800373c:	f00b fa11 	bl	800eb62 <HAL_UARTEx_SetTxFifoThreshold>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8003746:	f7ff f967 	bl	8002a18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800374a:	2100      	movs	r1, #0
 800374c:	4808      	ldr	r0, [pc, #32]	@ (8003770 <MX_USART3_UART_Init+0x90>)
 800374e:	f00b fa46 	bl	800ebde <HAL_UARTEx_SetRxFifoThreshold>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8003758:	f7ff f95e 	bl	8002a18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800375c:	4804      	ldr	r0, [pc, #16]	@ (8003770 <MX_USART3_UART_Init+0x90>)
 800375e:	f00b f9c7 	bl	800eaf0 <HAL_UARTEx_DisableFifoMode>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8003768:	f7ff f956 	bl	8002a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800376c:	bf00      	nop
 800376e:	bd80      	pop	{r7, pc}
 8003770:	240028a8 	.word	0x240028a8
 8003774:	40004800 	.word	0x40004800

08003778 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800377c:	4b22      	ldr	r3, [pc, #136]	@ (8003808 <MX_USART6_UART_Init+0x90>)
 800377e:	4a23      	ldr	r2, [pc, #140]	@ (800380c <MX_USART6_UART_Init+0x94>)
 8003780:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003782:	4b21      	ldr	r3, [pc, #132]	@ (8003808 <MX_USART6_UART_Init+0x90>)
 8003784:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003788:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800378a:	4b1f      	ldr	r3, [pc, #124]	@ (8003808 <MX_USART6_UART_Init+0x90>)
 800378c:	2200      	movs	r2, #0
 800378e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003790:	4b1d      	ldr	r3, [pc, #116]	@ (8003808 <MX_USART6_UART_Init+0x90>)
 8003792:	2200      	movs	r2, #0
 8003794:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003796:	4b1c      	ldr	r3, [pc, #112]	@ (8003808 <MX_USART6_UART_Init+0x90>)
 8003798:	2200      	movs	r2, #0
 800379a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800379c:	4b1a      	ldr	r3, [pc, #104]	@ (8003808 <MX_USART6_UART_Init+0x90>)
 800379e:	220c      	movs	r2, #12
 80037a0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037a2:	4b19      	ldr	r3, [pc, #100]	@ (8003808 <MX_USART6_UART_Init+0x90>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80037a8:	4b17      	ldr	r3, [pc, #92]	@ (8003808 <MX_USART6_UART_Init+0x90>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80037ae:	4b16      	ldr	r3, [pc, #88]	@ (8003808 <MX_USART6_UART_Init+0x90>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80037b4:	4b14      	ldr	r3, [pc, #80]	@ (8003808 <MX_USART6_UART_Init+0x90>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80037ba:	4b13      	ldr	r3, [pc, #76]	@ (8003808 <MX_USART6_UART_Init+0x90>)
 80037bc:	2200      	movs	r2, #0
 80037be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80037c0:	4811      	ldr	r0, [pc, #68]	@ (8003808 <MX_USART6_UART_Init+0x90>)
 80037c2:	f009 f9c1 	bl	800cb48 <HAL_UART_Init>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80037cc:	f7ff f924 	bl	8002a18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80037d0:	2100      	movs	r1, #0
 80037d2:	480d      	ldr	r0, [pc, #52]	@ (8003808 <MX_USART6_UART_Init+0x90>)
 80037d4:	f00b f9c5 	bl	800eb62 <HAL_UARTEx_SetTxFifoThreshold>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80037de:	f7ff f91b 	bl	8002a18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80037e2:	2100      	movs	r1, #0
 80037e4:	4808      	ldr	r0, [pc, #32]	@ (8003808 <MX_USART6_UART_Init+0x90>)
 80037e6:	f00b f9fa 	bl	800ebde <HAL_UARTEx_SetRxFifoThreshold>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80037f0:	f7ff f912 	bl	8002a18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80037f4:	4804      	ldr	r0, [pc, #16]	@ (8003808 <MX_USART6_UART_Init+0x90>)
 80037f6:	f00b f97b 	bl	800eaf0 <HAL_UARTEx_DisableFifoMode>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8003800:	f7ff f90a 	bl	8002a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003804:	bf00      	nop
 8003806:	bd80      	pop	{r7, pc}
 8003808:	2400293c 	.word	0x2400293c
 800380c:	40011400 	.word	0x40011400

08003810 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b0c0      	sub	sp, #256	@ 0x100
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003818:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	605a      	str	r2, [r3, #4]
 8003822:	609a      	str	r2, [r3, #8]
 8003824:	60da      	str	r2, [r3, #12]
 8003826:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003828:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800382c:	22c0      	movs	r2, #192	@ 0xc0
 800382e:	2100      	movs	r1, #0
 8003830:	4618      	mov	r0, r3
 8003832:	f00f fc03 	bl	801303c <memset>
  if(uartHandle->Instance==UART4)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4aa9      	ldr	r2, [pc, #676]	@ (8003ae0 <HAL_UART_MspInit+0x2d0>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d146      	bne.n	80038ce <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003840:	f04f 0202 	mov.w	r2, #2
 8003844:	f04f 0300 	mov.w	r3, #0
 8003848:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800384c:	2300      	movs	r3, #0
 800384e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003852:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003856:	4618      	mov	r0, r3
 8003858:	f005 f928 	bl	8008aac <HAL_RCCEx_PeriphCLKConfig>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003862:	f7ff f8d9 	bl	8002a18 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003866:	4b9f      	ldr	r3, [pc, #636]	@ (8003ae4 <HAL_UART_MspInit+0x2d4>)
 8003868:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800386c:	4a9d      	ldr	r2, [pc, #628]	@ (8003ae4 <HAL_UART_MspInit+0x2d4>)
 800386e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003872:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003876:	4b9b      	ldr	r3, [pc, #620]	@ (8003ae4 <HAL_UART_MspInit+0x2d4>)
 8003878:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800387c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003880:	627b      	str	r3, [r7, #36]	@ 0x24
 8003882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003884:	4b97      	ldr	r3, [pc, #604]	@ (8003ae4 <HAL_UART_MspInit+0x2d4>)
 8003886:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800388a:	4a96      	ldr	r2, [pc, #600]	@ (8003ae4 <HAL_UART_MspInit+0x2d4>)
 800388c:	f043 0301 	orr.w	r3, r3, #1
 8003890:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003894:	4b93      	ldr	r3, [pc, #588]	@ (8003ae4 <HAL_UART_MspInit+0x2d4>)
 8003896:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	623b      	str	r3, [r7, #32]
 80038a0:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80038a2:	2303      	movs	r3, #3
 80038a4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038a8:	2302      	movs	r3, #2
 80038aa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ae:	2300      	movs	r3, #0
 80038b0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038b4:	2300      	movs	r3, #0
 80038b6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80038ba:	2308      	movs	r3, #8
 80038bc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038c0:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80038c4:	4619      	mov	r1, r3
 80038c6:	4888      	ldr	r0, [pc, #544]	@ (8003ae8 <HAL_UART_MspInit+0x2d8>)
 80038c8:	f003 fdfa 	bl	80074c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80038cc:	e167      	b.n	8003b9e <HAL_UART_MspInit+0x38e>
  else if(uartHandle->Instance==USART1)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a86      	ldr	r2, [pc, #536]	@ (8003aec <HAL_UART_MspInit+0x2dc>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d17f      	bne.n	80039d8 <HAL_UART_MspInit+0x1c8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80038d8:	f04f 0201 	mov.w	r2, #1
 80038dc:	f04f 0300 	mov.w	r3, #0
 80038e0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80038e4:	2300      	movs	r3, #0
 80038e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80038ee:	4618      	mov	r0, r3
 80038f0:	f005 f8dc 	bl	8008aac <HAL_RCCEx_PeriphCLKConfig>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <HAL_UART_MspInit+0xee>
      Error_Handler();
 80038fa:	f7ff f88d 	bl	8002a18 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80038fe:	4b79      	ldr	r3, [pc, #484]	@ (8003ae4 <HAL_UART_MspInit+0x2d4>)
 8003900:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8003904:	4a77      	ldr	r2, [pc, #476]	@ (8003ae4 <HAL_UART_MspInit+0x2d4>)
 8003906:	f043 0310 	orr.w	r3, r3, #16
 800390a:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 800390e:	4b75      	ldr	r3, [pc, #468]	@ (8003ae4 <HAL_UART_MspInit+0x2d4>)
 8003910:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8003914:	f003 0310 	and.w	r3, r3, #16
 8003918:	61fb      	str	r3, [r7, #28]
 800391a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800391c:	4b71      	ldr	r3, [pc, #452]	@ (8003ae4 <HAL_UART_MspInit+0x2d4>)
 800391e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003922:	4a70      	ldr	r2, [pc, #448]	@ (8003ae4 <HAL_UART_MspInit+0x2d4>)
 8003924:	f043 0301 	orr.w	r3, r3, #1
 8003928:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800392c:	4b6d      	ldr	r3, [pc, #436]	@ (8003ae4 <HAL_UART_MspInit+0x2d4>)
 800392e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	61bb      	str	r3, [r7, #24]
 8003938:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|SBUS_RX_Pin;
 800393a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800393e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003942:	2302      	movs	r3, #2
 8003944:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003948:	2300      	movs	r3, #0
 800394a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800394e:	2300      	movs	r3, #0
 8003950:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003954:	2307      	movs	r3, #7
 8003956:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800395a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800395e:	4619      	mov	r1, r3
 8003960:	4861      	ldr	r0, [pc, #388]	@ (8003ae8 <HAL_UART_MspInit+0x2d8>)
 8003962:	f003 fdad 	bl	80074c0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8003966:	4b62      	ldr	r3, [pc, #392]	@ (8003af0 <HAL_UART_MspInit+0x2e0>)
 8003968:	4a62      	ldr	r2, [pc, #392]	@ (8003af4 <HAL_UART_MspInit+0x2e4>)
 800396a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800396c:	4b60      	ldr	r3, [pc, #384]	@ (8003af0 <HAL_UART_MspInit+0x2e0>)
 800396e:	2229      	movs	r2, #41	@ 0x29
 8003970:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003972:	4b5f      	ldr	r3, [pc, #380]	@ (8003af0 <HAL_UART_MspInit+0x2e0>)
 8003974:	2200      	movs	r2, #0
 8003976:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003978:	4b5d      	ldr	r3, [pc, #372]	@ (8003af0 <HAL_UART_MspInit+0x2e0>)
 800397a:	2200      	movs	r2, #0
 800397c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800397e:	4b5c      	ldr	r3, [pc, #368]	@ (8003af0 <HAL_UART_MspInit+0x2e0>)
 8003980:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003984:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003986:	4b5a      	ldr	r3, [pc, #360]	@ (8003af0 <HAL_UART_MspInit+0x2e0>)
 8003988:	2200      	movs	r2, #0
 800398a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800398c:	4b58      	ldr	r3, [pc, #352]	@ (8003af0 <HAL_UART_MspInit+0x2e0>)
 800398e:	2200      	movs	r2, #0
 8003990:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003992:	4b57      	ldr	r3, [pc, #348]	@ (8003af0 <HAL_UART_MspInit+0x2e0>)
 8003994:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003998:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800399a:	4b55      	ldr	r3, [pc, #340]	@ (8003af0 <HAL_UART_MspInit+0x2e0>)
 800399c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80039a0:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039a2:	4b53      	ldr	r3, [pc, #332]	@ (8003af0 <HAL_UART_MspInit+0x2e0>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80039a8:	4851      	ldr	r0, [pc, #324]	@ (8003af0 <HAL_UART_MspInit+0x2e0>)
 80039aa:	f000 fb47 	bl	800403c <HAL_DMA_Init>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 80039b4:	f7ff f830 	bl	8002a18 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a4d      	ldr	r2, [pc, #308]	@ (8003af0 <HAL_UART_MspInit+0x2e0>)
 80039bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80039c0:	4a4b      	ldr	r2, [pc, #300]	@ (8003af0 <HAL_UART_MspInit+0x2e0>)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80039c6:	2200      	movs	r2, #0
 80039c8:	2100      	movs	r1, #0
 80039ca:	2025      	movs	r0, #37	@ 0x25
 80039cc:	f000 fa89 	bl	8003ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80039d0:	2025      	movs	r0, #37	@ 0x25
 80039d2:	f000 faa0 	bl	8003f16 <HAL_NVIC_EnableIRQ>
}
 80039d6:	e0e2      	b.n	8003b9e <HAL_UART_MspInit+0x38e>
  else if(uartHandle->Instance==USART3)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a46      	ldr	r2, [pc, #280]	@ (8003af8 <HAL_UART_MspInit+0x2e8>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	f040 8092 	bne.w	8003b08 <HAL_UART_MspInit+0x2f8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80039e4:	f04f 0202 	mov.w	r2, #2
 80039e8:	f04f 0300 	mov.w	r3, #0
 80039ec:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80039f0:	2300      	movs	r3, #0
 80039f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80039fa:	4618      	mov	r0, r3
 80039fc:	f005 f856 	bl	8008aac <HAL_RCCEx_PeriphCLKConfig>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <HAL_UART_MspInit+0x1fa>
      Error_Handler();
 8003a06:	f7ff f807 	bl	8002a18 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003a0a:	4b36      	ldr	r3, [pc, #216]	@ (8003ae4 <HAL_UART_MspInit+0x2d4>)
 8003a0c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003a10:	4a34      	ldr	r2, [pc, #208]	@ (8003ae4 <HAL_UART_MspInit+0x2d4>)
 8003a12:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a16:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003a1a:	4b32      	ldr	r3, [pc, #200]	@ (8003ae4 <HAL_UART_MspInit+0x2d4>)
 8003a1c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003a20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a24:	617b      	str	r3, [r7, #20]
 8003a26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a28:	4b2e      	ldr	r3, [pc, #184]	@ (8003ae4 <HAL_UART_MspInit+0x2d4>)
 8003a2a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003a2e:	4a2d      	ldr	r2, [pc, #180]	@ (8003ae4 <HAL_UART_MspInit+0x2d4>)
 8003a30:	f043 0304 	orr.w	r3, r3, #4
 8003a34:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003a38:	4b2a      	ldr	r3, [pc, #168]	@ (8003ae4 <HAL_UART_MspInit+0x2d4>)
 8003a3a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003a3e:	f003 0304 	and.w	r3, r3, #4
 8003a42:	613b      	str	r3, [r7, #16]
 8003a44:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003a46:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003a4a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a4e:	2302      	movs	r3, #2
 8003a50:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a54:	2300      	movs	r3, #0
 8003a56:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003a60:	2307      	movs	r3, #7
 8003a62:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a66:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	4823      	ldr	r0, [pc, #140]	@ (8003afc <HAL_UART_MspInit+0x2ec>)
 8003a6e:	f003 fd27 	bl	80074c0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003a72:	4b23      	ldr	r3, [pc, #140]	@ (8003b00 <HAL_UART_MspInit+0x2f0>)
 8003a74:	4a23      	ldr	r2, [pc, #140]	@ (8003b04 <HAL_UART_MspInit+0x2f4>)
 8003a76:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8003a78:	4b21      	ldr	r3, [pc, #132]	@ (8003b00 <HAL_UART_MspInit+0x2f0>)
 8003a7a:	222d      	movs	r2, #45	@ 0x2d
 8003a7c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a7e:	4b20      	ldr	r3, [pc, #128]	@ (8003b00 <HAL_UART_MspInit+0x2f0>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a84:	4b1e      	ldr	r3, [pc, #120]	@ (8003b00 <HAL_UART_MspInit+0x2f0>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a8a:	4b1d      	ldr	r3, [pc, #116]	@ (8003b00 <HAL_UART_MspInit+0x2f0>)
 8003a8c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a90:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a92:	4b1b      	ldr	r3, [pc, #108]	@ (8003b00 <HAL_UART_MspInit+0x2f0>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a98:	4b19      	ldr	r3, [pc, #100]	@ (8003b00 <HAL_UART_MspInit+0x2f0>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003a9e:	4b18      	ldr	r3, [pc, #96]	@ (8003b00 <HAL_UART_MspInit+0x2f0>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003aa4:	4b16      	ldr	r3, [pc, #88]	@ (8003b00 <HAL_UART_MspInit+0x2f0>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003aaa:	4b15      	ldr	r3, [pc, #84]	@ (8003b00 <HAL_UART_MspInit+0x2f0>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003ab0:	4813      	ldr	r0, [pc, #76]	@ (8003b00 <HAL_UART_MspInit+0x2f0>)
 8003ab2:	f000 fac3 	bl	800403c <HAL_DMA_Init>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <HAL_UART_MspInit+0x2b0>
      Error_Handler();
 8003abc:	f7fe ffac 	bl	8002a18 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a0f      	ldr	r2, [pc, #60]	@ (8003b00 <HAL_UART_MspInit+0x2f0>)
 8003ac4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003ac8:	4a0d      	ldr	r2, [pc, #52]	@ (8003b00 <HAL_UART_MspInit+0x2f0>)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003ace:	2200      	movs	r2, #0
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	2027      	movs	r0, #39	@ 0x27
 8003ad4:	f000 fa05 	bl	8003ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003ad8:	2027      	movs	r0, #39	@ 0x27
 8003ada:	f000 fa1c 	bl	8003f16 <HAL_NVIC_EnableIRQ>
}
 8003ade:	e05e      	b.n	8003b9e <HAL_UART_MspInit+0x38e>
 8003ae0:	40004c00 	.word	0x40004c00
 8003ae4:	58024400 	.word	0x58024400
 8003ae8:	58020000 	.word	0x58020000
 8003aec:	40011000 	.word	0x40011000
 8003af0:	240029d0 	.word	0x240029d0
 8003af4:	40020010 	.word	0x40020010
 8003af8:	40004800 	.word	0x40004800
 8003afc:	58020800 	.word	0x58020800
 8003b00:	24002a48 	.word	0x24002a48
 8003b04:	40020028 	.word	0x40020028
  else if(uartHandle->Instance==USART6)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a26      	ldr	r2, [pc, #152]	@ (8003ba8 <HAL_UART_MspInit+0x398>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d145      	bne.n	8003b9e <HAL_UART_MspInit+0x38e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003b12:	f04f 0201 	mov.w	r2, #1
 8003b16:	f04f 0300 	mov.w	r3, #0
 8003b1a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b24:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f004 ffbf 	bl	8008aac <HAL_RCCEx_PeriphCLKConfig>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <HAL_UART_MspInit+0x328>
      Error_Handler();
 8003b34:	f7fe ff70 	bl	8002a18 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003b38:	4b1c      	ldr	r3, [pc, #112]	@ (8003bac <HAL_UART_MspInit+0x39c>)
 8003b3a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8003b3e:	4a1b      	ldr	r2, [pc, #108]	@ (8003bac <HAL_UART_MspInit+0x39c>)
 8003b40:	f043 0320 	orr.w	r3, r3, #32
 8003b44:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8003b48:	4b18      	ldr	r3, [pc, #96]	@ (8003bac <HAL_UART_MspInit+0x39c>)
 8003b4a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8003b4e:	f003 0320 	and.w	r3, r3, #32
 8003b52:	60fb      	str	r3, [r7, #12]
 8003b54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b56:	4b15      	ldr	r3, [pc, #84]	@ (8003bac <HAL_UART_MspInit+0x39c>)
 8003b58:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003b5c:	4a13      	ldr	r2, [pc, #76]	@ (8003bac <HAL_UART_MspInit+0x39c>)
 8003b5e:	f043 0304 	orr.w	r3, r3, #4
 8003b62:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003b66:	4b11      	ldr	r3, [pc, #68]	@ (8003bac <HAL_UART_MspInit+0x39c>)
 8003b68:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	60bb      	str	r3, [r7, #8]
 8003b72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003b74:	23c0      	movs	r3, #192	@ 0xc0
 8003b76:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b80:	2300      	movs	r3, #0
 8003b82:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b86:	2300      	movs	r3, #0
 8003b88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8003b8c:	2307      	movs	r3, #7
 8003b8e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b92:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003b96:	4619      	mov	r1, r3
 8003b98:	4805      	ldr	r0, [pc, #20]	@ (8003bb0 <HAL_UART_MspInit+0x3a0>)
 8003b9a:	f003 fc91 	bl	80074c0 <HAL_GPIO_Init>
}
 8003b9e:	bf00      	nop
 8003ba0:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	40011400 	.word	0x40011400
 8003bac:	58024400 	.word	0x58024400
 8003bb0:	58020800 	.word	0x58020800

08003bb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003bb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003bec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003bb8:	f7ff f936 	bl	8002e28 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003bbc:	480c      	ldr	r0, [pc, #48]	@ (8003bf0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003bbe:	490d      	ldr	r1, [pc, #52]	@ (8003bf4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8003bf8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bc4:	e002      	b.n	8003bcc <LoopCopyDataInit>

08003bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bca:	3304      	adds	r3, #4

08003bcc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8003bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bd0:	d3f9      	bcc.n	8003bc6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8003bfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003bd4:	4c0a      	ldr	r4, [pc, #40]	@ (8003c00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bd8:	e001      	b.n	8003bde <LoopFillZerobss>

08003bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bdc:	3204      	adds	r2, #4

08003bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003be0:	d3fb      	bcc.n	8003bda <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003be2:	f00f fa39 	bl	8013058 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003be6:	f7fe fdc5 	bl	8002774 <main>
  bx  lr
 8003bea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003bec:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8003bf0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003bf4:	24000110 	.word	0x24000110
  ldr r2, =_sidata
 8003bf8:	08014130 	.word	0x08014130
  ldr r2, =_sbss
 8003bfc:	24000110 	.word	0x24000110
  ldr r4, =_ebss
 8003c00:	24002e40 	.word	0x24002e40

08003c04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c04:	e7fe      	b.n	8003c04 <ADC_IRQHandler>
	...

08003c08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c0e:	2003      	movs	r0, #3
 8003c10:	f000 f95c 	bl	8003ecc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003c14:	f004 fd74 	bl	8008700 <HAL_RCC_GetSysClockFreq>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	4b15      	ldr	r3, [pc, #84]	@ (8003c70 <HAL_Init+0x68>)
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	0a1b      	lsrs	r3, r3, #8
 8003c20:	f003 030f 	and.w	r3, r3, #15
 8003c24:	4913      	ldr	r1, [pc, #76]	@ (8003c74 <HAL_Init+0x6c>)
 8003c26:	5ccb      	ldrb	r3, [r1, r3]
 8003c28:	f003 031f 	and.w	r3, r3, #31
 8003c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c30:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003c32:	4b0f      	ldr	r3, [pc, #60]	@ (8003c70 <HAL_Init+0x68>)
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	f003 030f 	and.w	r3, r3, #15
 8003c3a:	4a0e      	ldr	r2, [pc, #56]	@ (8003c74 <HAL_Init+0x6c>)
 8003c3c:	5cd3      	ldrb	r3, [r2, r3]
 8003c3e:	f003 031f 	and.w	r3, r3, #31
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	fa22 f303 	lsr.w	r3, r2, r3
 8003c48:	4a0b      	ldr	r2, [pc, #44]	@ (8003c78 <HAL_Init+0x70>)
 8003c4a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c4c:	4a0b      	ldr	r2, [pc, #44]	@ (8003c7c <HAL_Init+0x74>)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c52:	200f      	movs	r0, #15
 8003c54:	f000 f814 	bl	8003c80 <HAL_InitTick>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e002      	b.n	8003c68 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003c62:	f7ff f843 	bl	8002cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	58024400 	.word	0x58024400
 8003c74:	08013410 	.word	0x08013410
 8003c78:	2400009c 	.word	0x2400009c
 8003c7c:	24000098 	.word	0x24000098

08003c80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003c88:	4b15      	ldr	r3, [pc, #84]	@ (8003ce0 <HAL_InitTick+0x60>)
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e021      	b.n	8003cd8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003c94:	4b13      	ldr	r3, [pc, #76]	@ (8003ce4 <HAL_InitTick+0x64>)
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	4b11      	ldr	r3, [pc, #68]	@ (8003ce0 <HAL_InitTick+0x60>)
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ca2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 f941 	bl	8003f32 <HAL_SYSTICK_Config>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e00e      	b.n	8003cd8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b0f      	cmp	r3, #15
 8003cbe:	d80a      	bhi.n	8003cd6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	6879      	ldr	r1, [r7, #4]
 8003cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cc8:	f000 f90b 	bl	8003ee2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ccc:	4a06      	ldr	r2, [pc, #24]	@ (8003ce8 <HAL_InitTick+0x68>)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	e000      	b.n	8003cd8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3708      	adds	r7, #8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	240000a4 	.word	0x240000a4
 8003ce4:	24000098 	.word	0x24000098
 8003ce8:	240000a0 	.word	0x240000a0

08003cec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003cf0:	4b06      	ldr	r3, [pc, #24]	@ (8003d0c <HAL_IncTick+0x20>)
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	4b06      	ldr	r3, [pc, #24]	@ (8003d10 <HAL_IncTick+0x24>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	4a04      	ldr	r2, [pc, #16]	@ (8003d10 <HAL_IncTick+0x24>)
 8003cfe:	6013      	str	r3, [r2, #0]
}
 8003d00:	bf00      	nop
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	240000a4 	.word	0x240000a4
 8003d10:	24002ac0 	.word	0x24002ac0

08003d14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
  return uwTick;
 8003d18:	4b03      	ldr	r3, [pc, #12]	@ (8003d28 <HAL_GetTick+0x14>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	24002ac0 	.word	0x24002ac0

08003d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f003 0307 	and.w	r3, r3, #7
 8003d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d6c <__NVIC_SetPriorityGrouping+0x40>)
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d48:	4013      	ands	r3, r2
 8003d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003d54:	4b06      	ldr	r3, [pc, #24]	@ (8003d70 <__NVIC_SetPriorityGrouping+0x44>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d5a:	4a04      	ldr	r2, [pc, #16]	@ (8003d6c <__NVIC_SetPriorityGrouping+0x40>)
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	60d3      	str	r3, [r2, #12]
}
 8003d60:	bf00      	nop
 8003d62:	3714      	adds	r7, #20
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr
 8003d6c:	e000ed00 	.word	0xe000ed00
 8003d70:	05fa0000 	.word	0x05fa0000

08003d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d74:	b480      	push	{r7}
 8003d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d78:	4b04      	ldr	r3, [pc, #16]	@ (8003d8c <__NVIC_GetPriorityGrouping+0x18>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	0a1b      	lsrs	r3, r3, #8
 8003d7e:	f003 0307 	and.w	r3, r3, #7
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr
 8003d8c:	e000ed00 	.word	0xe000ed00

08003d90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	4603      	mov	r3, r0
 8003d98:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003d9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	db0b      	blt.n	8003dba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003da2:	88fb      	ldrh	r3, [r7, #6]
 8003da4:	f003 021f 	and.w	r2, r3, #31
 8003da8:	4907      	ldr	r1, [pc, #28]	@ (8003dc8 <__NVIC_EnableIRQ+0x38>)
 8003daa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003dae:	095b      	lsrs	r3, r3, #5
 8003db0:	2001      	movs	r0, #1
 8003db2:	fa00 f202 	lsl.w	r2, r0, r2
 8003db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003dba:	bf00      	nop
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	e000e100 	.word	0xe000e100

08003dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	6039      	str	r1, [r7, #0]
 8003dd6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003dd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	db0a      	blt.n	8003df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	b2da      	uxtb	r2, r3
 8003de4:	490c      	ldr	r1, [pc, #48]	@ (8003e18 <__NVIC_SetPriority+0x4c>)
 8003de6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003dea:	0112      	lsls	r2, r2, #4
 8003dec:	b2d2      	uxtb	r2, r2
 8003dee:	440b      	add	r3, r1
 8003df0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003df4:	e00a      	b.n	8003e0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	b2da      	uxtb	r2, r3
 8003dfa:	4908      	ldr	r1, [pc, #32]	@ (8003e1c <__NVIC_SetPriority+0x50>)
 8003dfc:	88fb      	ldrh	r3, [r7, #6]
 8003dfe:	f003 030f 	and.w	r3, r3, #15
 8003e02:	3b04      	subs	r3, #4
 8003e04:	0112      	lsls	r2, r2, #4
 8003e06:	b2d2      	uxtb	r2, r2
 8003e08:	440b      	add	r3, r1
 8003e0a:	761a      	strb	r2, [r3, #24]
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr
 8003e18:	e000e100 	.word	0xe000e100
 8003e1c:	e000ed00 	.word	0xe000ed00

08003e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b089      	sub	sp, #36	@ 0x24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f003 0307 	and.w	r3, r3, #7
 8003e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	f1c3 0307 	rsb	r3, r3, #7
 8003e3a:	2b04      	cmp	r3, #4
 8003e3c:	bf28      	it	cs
 8003e3e:	2304      	movcs	r3, #4
 8003e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	3304      	adds	r3, #4
 8003e46:	2b06      	cmp	r3, #6
 8003e48:	d902      	bls.n	8003e50 <NVIC_EncodePriority+0x30>
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	3b03      	subs	r3, #3
 8003e4e:	e000      	b.n	8003e52 <NVIC_EncodePriority+0x32>
 8003e50:	2300      	movs	r3, #0
 8003e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e54:	f04f 32ff 	mov.w	r2, #4294967295
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5e:	43da      	mvns	r2, r3
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	401a      	ands	r2, r3
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e68:	f04f 31ff 	mov.w	r1, #4294967295
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e72:	43d9      	mvns	r1, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e78:	4313      	orrs	r3, r2
         );
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3724      	adds	r7, #36	@ 0x24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
	...

08003e88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	3b01      	subs	r3, #1
 8003e94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e98:	d301      	bcc.n	8003e9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e00f      	b.n	8003ebe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8003ec8 <SysTick_Config+0x40>)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ea6:	210f      	movs	r1, #15
 8003ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8003eac:	f7ff ff8e 	bl	8003dcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003eb0:	4b05      	ldr	r3, [pc, #20]	@ (8003ec8 <SysTick_Config+0x40>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003eb6:	4b04      	ldr	r3, [pc, #16]	@ (8003ec8 <SysTick_Config+0x40>)
 8003eb8:	2207      	movs	r2, #7
 8003eba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	e000e010 	.word	0xe000e010

08003ecc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f7ff ff29 	bl	8003d2c <__NVIC_SetPriorityGrouping>
}
 8003eda:	bf00      	nop
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b086      	sub	sp, #24
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	4603      	mov	r3, r0
 8003eea:	60b9      	str	r1, [r7, #8]
 8003eec:	607a      	str	r2, [r7, #4]
 8003eee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ef0:	f7ff ff40 	bl	8003d74 <__NVIC_GetPriorityGrouping>
 8003ef4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	68b9      	ldr	r1, [r7, #8]
 8003efa:	6978      	ldr	r0, [r7, #20]
 8003efc:	f7ff ff90 	bl	8003e20 <NVIC_EncodePriority>
 8003f00:	4602      	mov	r2, r0
 8003f02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f06:	4611      	mov	r1, r2
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7ff ff5f 	bl	8003dcc <__NVIC_SetPriority>
}
 8003f0e:	bf00      	nop
 8003f10:	3718      	adds	r7, #24
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b082      	sub	sp, #8
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7ff ff33 	bl	8003d90 <__NVIC_EnableIRQ>
}
 8003f2a:	bf00      	nop
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b082      	sub	sp, #8
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7ff ffa4 	bl	8003e88 <SysTick_Config>
 8003f40:	4603      	mov	r3, r0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
	...

08003f4c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003f50:	f3bf 8f5f 	dmb	sy
}
 8003f54:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003f56:	4b07      	ldr	r3, [pc, #28]	@ (8003f74 <HAL_MPU_Disable+0x28>)
 8003f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5a:	4a06      	ldr	r2, [pc, #24]	@ (8003f74 <HAL_MPU_Disable+0x28>)
 8003f5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f60:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003f62:	4b05      	ldr	r3, [pc, #20]	@ (8003f78 <HAL_MPU_Disable+0x2c>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	605a      	str	r2, [r3, #4]
}
 8003f68:	bf00      	nop
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	e000ed00 	.word	0xe000ed00
 8003f78:	e000ed90 	.word	0xe000ed90

08003f7c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003f84:	4a0b      	ldr	r2, [pc, #44]	@ (8003fb4 <HAL_MPU_Enable+0x38>)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f043 0301 	orr.w	r3, r3, #1
 8003f8c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8003fb8 <HAL_MPU_Enable+0x3c>)
 8003f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f92:	4a09      	ldr	r2, [pc, #36]	@ (8003fb8 <HAL_MPU_Enable+0x3c>)
 8003f94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f98:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003f9a:	f3bf 8f4f 	dsb	sy
}
 8003f9e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003fa0:	f3bf 8f6f 	isb	sy
}
 8003fa4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	e000ed90 	.word	0xe000ed90
 8003fb8:	e000ed00 	.word	0xe000ed00

08003fbc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	785a      	ldrb	r2, [r3, #1]
 8003fc8:	4b1b      	ldr	r3, [pc, #108]	@ (8004038 <HAL_MPU_ConfigRegion+0x7c>)
 8003fca:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003fcc:	4b1a      	ldr	r3, [pc, #104]	@ (8004038 <HAL_MPU_ConfigRegion+0x7c>)
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	4a19      	ldr	r2, [pc, #100]	@ (8004038 <HAL_MPU_ConfigRegion+0x7c>)
 8003fd2:	f023 0301 	bic.w	r3, r3, #1
 8003fd6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003fd8:	4a17      	ldr	r2, [pc, #92]	@ (8004038 <HAL_MPU_ConfigRegion+0x7c>)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	7b1b      	ldrb	r3, [r3, #12]
 8003fe4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	7adb      	ldrb	r3, [r3, #11]
 8003fea:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003fec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	7a9b      	ldrb	r3, [r3, #10]
 8003ff2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003ff4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	7b5b      	ldrb	r3, [r3, #13]
 8003ffa:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003ffc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	7b9b      	ldrb	r3, [r3, #14]
 8004002:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004004:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	7bdb      	ldrb	r3, [r3, #15]
 800400a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800400c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	7a5b      	ldrb	r3, [r3, #9]
 8004012:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004014:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	7a1b      	ldrb	r3, [r3, #8]
 800401a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800401c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	7812      	ldrb	r2, [r2, #0]
 8004022:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004024:	4a04      	ldr	r2, [pc, #16]	@ (8004038 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004026:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004028:	6113      	str	r3, [r2, #16]
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	e000ed90 	.word	0xe000ed90

0800403c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b086      	sub	sp, #24
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004044:	f7ff fe66 	bl	8003d14 <HAL_GetTick>
 8004048:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d101      	bne.n	8004054 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e37d      	b.n	8004750 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a66      	ldr	r2, [pc, #408]	@ (80041f4 <HAL_DMA_Init+0x1b8>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d04a      	beq.n	80040f4 <HAL_DMA_Init+0xb8>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a65      	ldr	r2, [pc, #404]	@ (80041f8 <HAL_DMA_Init+0x1bc>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d045      	beq.n	80040f4 <HAL_DMA_Init+0xb8>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a63      	ldr	r2, [pc, #396]	@ (80041fc <HAL_DMA_Init+0x1c0>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d040      	beq.n	80040f4 <HAL_DMA_Init+0xb8>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a62      	ldr	r2, [pc, #392]	@ (8004200 <HAL_DMA_Init+0x1c4>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d03b      	beq.n	80040f4 <HAL_DMA_Init+0xb8>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a60      	ldr	r2, [pc, #384]	@ (8004204 <HAL_DMA_Init+0x1c8>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d036      	beq.n	80040f4 <HAL_DMA_Init+0xb8>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a5f      	ldr	r2, [pc, #380]	@ (8004208 <HAL_DMA_Init+0x1cc>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d031      	beq.n	80040f4 <HAL_DMA_Init+0xb8>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a5d      	ldr	r2, [pc, #372]	@ (800420c <HAL_DMA_Init+0x1d0>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d02c      	beq.n	80040f4 <HAL_DMA_Init+0xb8>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a5c      	ldr	r2, [pc, #368]	@ (8004210 <HAL_DMA_Init+0x1d4>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d027      	beq.n	80040f4 <HAL_DMA_Init+0xb8>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a5a      	ldr	r2, [pc, #360]	@ (8004214 <HAL_DMA_Init+0x1d8>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d022      	beq.n	80040f4 <HAL_DMA_Init+0xb8>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a59      	ldr	r2, [pc, #356]	@ (8004218 <HAL_DMA_Init+0x1dc>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d01d      	beq.n	80040f4 <HAL_DMA_Init+0xb8>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a57      	ldr	r2, [pc, #348]	@ (800421c <HAL_DMA_Init+0x1e0>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d018      	beq.n	80040f4 <HAL_DMA_Init+0xb8>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a56      	ldr	r2, [pc, #344]	@ (8004220 <HAL_DMA_Init+0x1e4>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d013      	beq.n	80040f4 <HAL_DMA_Init+0xb8>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a54      	ldr	r2, [pc, #336]	@ (8004224 <HAL_DMA_Init+0x1e8>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d00e      	beq.n	80040f4 <HAL_DMA_Init+0xb8>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a53      	ldr	r2, [pc, #332]	@ (8004228 <HAL_DMA_Init+0x1ec>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d009      	beq.n	80040f4 <HAL_DMA_Init+0xb8>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a51      	ldr	r2, [pc, #324]	@ (800422c <HAL_DMA_Init+0x1f0>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d004      	beq.n	80040f4 <HAL_DMA_Init+0xb8>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a50      	ldr	r2, [pc, #320]	@ (8004230 <HAL_DMA_Init+0x1f4>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d101      	bne.n	80040f8 <HAL_DMA_Init+0xbc>
 80040f4:	2301      	movs	r3, #1
 80040f6:	e000      	b.n	80040fa <HAL_DMA_Init+0xbe>
 80040f8:	2300      	movs	r3, #0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f000 813c 	beq.w	8004378 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2202      	movs	r2, #2
 8004104:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a37      	ldr	r2, [pc, #220]	@ (80041f4 <HAL_DMA_Init+0x1b8>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d04a      	beq.n	80041b0 <HAL_DMA_Init+0x174>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a36      	ldr	r2, [pc, #216]	@ (80041f8 <HAL_DMA_Init+0x1bc>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d045      	beq.n	80041b0 <HAL_DMA_Init+0x174>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a34      	ldr	r2, [pc, #208]	@ (80041fc <HAL_DMA_Init+0x1c0>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d040      	beq.n	80041b0 <HAL_DMA_Init+0x174>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a33      	ldr	r2, [pc, #204]	@ (8004200 <HAL_DMA_Init+0x1c4>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d03b      	beq.n	80041b0 <HAL_DMA_Init+0x174>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a31      	ldr	r2, [pc, #196]	@ (8004204 <HAL_DMA_Init+0x1c8>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d036      	beq.n	80041b0 <HAL_DMA_Init+0x174>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a30      	ldr	r2, [pc, #192]	@ (8004208 <HAL_DMA_Init+0x1cc>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d031      	beq.n	80041b0 <HAL_DMA_Init+0x174>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a2e      	ldr	r2, [pc, #184]	@ (800420c <HAL_DMA_Init+0x1d0>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d02c      	beq.n	80041b0 <HAL_DMA_Init+0x174>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a2d      	ldr	r2, [pc, #180]	@ (8004210 <HAL_DMA_Init+0x1d4>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d027      	beq.n	80041b0 <HAL_DMA_Init+0x174>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a2b      	ldr	r2, [pc, #172]	@ (8004214 <HAL_DMA_Init+0x1d8>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d022      	beq.n	80041b0 <HAL_DMA_Init+0x174>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a2a      	ldr	r2, [pc, #168]	@ (8004218 <HAL_DMA_Init+0x1dc>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d01d      	beq.n	80041b0 <HAL_DMA_Init+0x174>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a28      	ldr	r2, [pc, #160]	@ (800421c <HAL_DMA_Init+0x1e0>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d018      	beq.n	80041b0 <HAL_DMA_Init+0x174>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a27      	ldr	r2, [pc, #156]	@ (8004220 <HAL_DMA_Init+0x1e4>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d013      	beq.n	80041b0 <HAL_DMA_Init+0x174>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a25      	ldr	r2, [pc, #148]	@ (8004224 <HAL_DMA_Init+0x1e8>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d00e      	beq.n	80041b0 <HAL_DMA_Init+0x174>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a24      	ldr	r2, [pc, #144]	@ (8004228 <HAL_DMA_Init+0x1ec>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d009      	beq.n	80041b0 <HAL_DMA_Init+0x174>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a22      	ldr	r2, [pc, #136]	@ (800422c <HAL_DMA_Init+0x1f0>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d004      	beq.n	80041b0 <HAL_DMA_Init+0x174>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a21      	ldr	r2, [pc, #132]	@ (8004230 <HAL_DMA_Init+0x1f4>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d108      	bne.n	80041c2 <HAL_DMA_Init+0x186>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 0201 	bic.w	r2, r2, #1
 80041be:	601a      	str	r2, [r3, #0]
 80041c0:	e007      	b.n	80041d2 <HAL_DMA_Init+0x196>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f022 0201 	bic.w	r2, r2, #1
 80041d0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80041d2:	e02f      	b.n	8004234 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041d4:	f7ff fd9e 	bl	8003d14 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b05      	cmp	r3, #5
 80041e0:	d928      	bls.n	8004234 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2220      	movs	r2, #32
 80041e6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2203      	movs	r2, #3
 80041ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e2ad      	b.n	8004750 <HAL_DMA_Init+0x714>
 80041f4:	40020010 	.word	0x40020010
 80041f8:	40020028 	.word	0x40020028
 80041fc:	40020040 	.word	0x40020040
 8004200:	40020058 	.word	0x40020058
 8004204:	40020070 	.word	0x40020070
 8004208:	40020088 	.word	0x40020088
 800420c:	400200a0 	.word	0x400200a0
 8004210:	400200b8 	.word	0x400200b8
 8004214:	40020410 	.word	0x40020410
 8004218:	40020428 	.word	0x40020428
 800421c:	40020440 	.word	0x40020440
 8004220:	40020458 	.word	0x40020458
 8004224:	40020470 	.word	0x40020470
 8004228:	40020488 	.word	0x40020488
 800422c:	400204a0 	.word	0x400204a0
 8004230:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1c8      	bne.n	80041d4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	4b73      	ldr	r3, [pc, #460]	@ (800441c <HAL_DMA_Init+0x3e0>)
 800424e:	4013      	ands	r3, r2
 8004250:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800425a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004266:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004272:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	4313      	orrs	r3, r2
 800427e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004284:	2b04      	cmp	r3, #4
 8004286:	d107      	bne.n	8004298 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004290:	4313      	orrs	r3, r2
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	4313      	orrs	r3, r2
 8004296:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	2b28      	cmp	r3, #40	@ 0x28
 800429e:	d903      	bls.n	80042a8 <HAL_DMA_Init+0x26c>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80042a6:	d91f      	bls.n	80042e8 <HAL_DMA_Init+0x2ac>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	2b3e      	cmp	r3, #62	@ 0x3e
 80042ae:	d903      	bls.n	80042b8 <HAL_DMA_Init+0x27c>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	2b42      	cmp	r3, #66	@ 0x42
 80042b6:	d917      	bls.n	80042e8 <HAL_DMA_Init+0x2ac>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	2b46      	cmp	r3, #70	@ 0x46
 80042be:	d903      	bls.n	80042c8 <HAL_DMA_Init+0x28c>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	2b48      	cmp	r3, #72	@ 0x48
 80042c6:	d90f      	bls.n	80042e8 <HAL_DMA_Init+0x2ac>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	2b4e      	cmp	r3, #78	@ 0x4e
 80042ce:	d903      	bls.n	80042d8 <HAL_DMA_Init+0x29c>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	2b52      	cmp	r3, #82	@ 0x52
 80042d6:	d907      	bls.n	80042e8 <HAL_DMA_Init+0x2ac>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	2b73      	cmp	r3, #115	@ 0x73
 80042de:	d905      	bls.n	80042ec <HAL_DMA_Init+0x2b0>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	2b77      	cmp	r3, #119	@ 0x77
 80042e6:	d801      	bhi.n	80042ec <HAL_DMA_Init+0x2b0>
 80042e8:	2301      	movs	r3, #1
 80042ea:	e000      	b.n	80042ee <HAL_DMA_Init+0x2b2>
 80042ec:	2300      	movs	r3, #0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d003      	beq.n	80042fa <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042f8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	695b      	ldr	r3, [r3, #20]
 8004308:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f023 0307 	bic.w	r3, r3, #7
 8004310:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	4313      	orrs	r3, r2
 800431a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004320:	2b04      	cmp	r3, #4
 8004322:	d117      	bne.n	8004354 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	4313      	orrs	r3, r2
 800432c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00e      	beq.n	8004354 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f002 fbd4 	bl	8006ae4 <DMA_CheckFifoParam>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d008      	beq.n	8004354 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2240      	movs	r2, #64	@ 0x40
 8004346:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e1fd      	b.n	8004750 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f002 fb0f 	bl	8006980 <DMA_CalcBaseAndBitshift>
 8004362:	4603      	mov	r3, r0
 8004364:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800436a:	f003 031f 	and.w	r3, r3, #31
 800436e:	223f      	movs	r2, #63	@ 0x3f
 8004370:	409a      	lsls	r2, r3
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	609a      	str	r2, [r3, #8]
 8004376:	e0fd      	b.n	8004574 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a28      	ldr	r2, [pc, #160]	@ (8004420 <HAL_DMA_Init+0x3e4>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d04a      	beq.n	8004418 <HAL_DMA_Init+0x3dc>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a27      	ldr	r2, [pc, #156]	@ (8004424 <HAL_DMA_Init+0x3e8>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d045      	beq.n	8004418 <HAL_DMA_Init+0x3dc>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a25      	ldr	r2, [pc, #148]	@ (8004428 <HAL_DMA_Init+0x3ec>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d040      	beq.n	8004418 <HAL_DMA_Init+0x3dc>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a24      	ldr	r2, [pc, #144]	@ (800442c <HAL_DMA_Init+0x3f0>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d03b      	beq.n	8004418 <HAL_DMA_Init+0x3dc>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a22      	ldr	r2, [pc, #136]	@ (8004430 <HAL_DMA_Init+0x3f4>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d036      	beq.n	8004418 <HAL_DMA_Init+0x3dc>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a21      	ldr	r2, [pc, #132]	@ (8004434 <HAL_DMA_Init+0x3f8>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d031      	beq.n	8004418 <HAL_DMA_Init+0x3dc>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a1f      	ldr	r2, [pc, #124]	@ (8004438 <HAL_DMA_Init+0x3fc>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d02c      	beq.n	8004418 <HAL_DMA_Init+0x3dc>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a1e      	ldr	r2, [pc, #120]	@ (800443c <HAL_DMA_Init+0x400>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d027      	beq.n	8004418 <HAL_DMA_Init+0x3dc>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a1c      	ldr	r2, [pc, #112]	@ (8004440 <HAL_DMA_Init+0x404>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d022      	beq.n	8004418 <HAL_DMA_Init+0x3dc>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a1b      	ldr	r2, [pc, #108]	@ (8004444 <HAL_DMA_Init+0x408>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d01d      	beq.n	8004418 <HAL_DMA_Init+0x3dc>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a19      	ldr	r2, [pc, #100]	@ (8004448 <HAL_DMA_Init+0x40c>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d018      	beq.n	8004418 <HAL_DMA_Init+0x3dc>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a18      	ldr	r2, [pc, #96]	@ (800444c <HAL_DMA_Init+0x410>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d013      	beq.n	8004418 <HAL_DMA_Init+0x3dc>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a16      	ldr	r2, [pc, #88]	@ (8004450 <HAL_DMA_Init+0x414>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d00e      	beq.n	8004418 <HAL_DMA_Init+0x3dc>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a15      	ldr	r2, [pc, #84]	@ (8004454 <HAL_DMA_Init+0x418>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d009      	beq.n	8004418 <HAL_DMA_Init+0x3dc>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a13      	ldr	r2, [pc, #76]	@ (8004458 <HAL_DMA_Init+0x41c>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d004      	beq.n	8004418 <HAL_DMA_Init+0x3dc>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a12      	ldr	r2, [pc, #72]	@ (800445c <HAL_DMA_Init+0x420>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d123      	bne.n	8004460 <HAL_DMA_Init+0x424>
 8004418:	2301      	movs	r3, #1
 800441a:	e022      	b.n	8004462 <HAL_DMA_Init+0x426>
 800441c:	fe10803f 	.word	0xfe10803f
 8004420:	48022c08 	.word	0x48022c08
 8004424:	48022c1c 	.word	0x48022c1c
 8004428:	48022c30 	.word	0x48022c30
 800442c:	48022c44 	.word	0x48022c44
 8004430:	48022c58 	.word	0x48022c58
 8004434:	48022c6c 	.word	0x48022c6c
 8004438:	48022c80 	.word	0x48022c80
 800443c:	48022c94 	.word	0x48022c94
 8004440:	58025408 	.word	0x58025408
 8004444:	5802541c 	.word	0x5802541c
 8004448:	58025430 	.word	0x58025430
 800444c:	58025444 	.word	0x58025444
 8004450:	58025458 	.word	0x58025458
 8004454:	5802546c 	.word	0x5802546c
 8004458:	58025480 	.word	0x58025480
 800445c:	58025494 	.word	0x58025494
 8004460:	2300      	movs	r3, #0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d07d      	beq.n	8004562 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a7f      	ldr	r2, [pc, #508]	@ (8004668 <HAL_DMA_Init+0x62c>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d021      	beq.n	80044b4 <HAL_DMA_Init+0x478>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a7d      	ldr	r2, [pc, #500]	@ (800466c <HAL_DMA_Init+0x630>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d01c      	beq.n	80044b4 <HAL_DMA_Init+0x478>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a7c      	ldr	r2, [pc, #496]	@ (8004670 <HAL_DMA_Init+0x634>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d017      	beq.n	80044b4 <HAL_DMA_Init+0x478>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a7a      	ldr	r2, [pc, #488]	@ (8004674 <HAL_DMA_Init+0x638>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d012      	beq.n	80044b4 <HAL_DMA_Init+0x478>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a79      	ldr	r2, [pc, #484]	@ (8004678 <HAL_DMA_Init+0x63c>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d00d      	beq.n	80044b4 <HAL_DMA_Init+0x478>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a77      	ldr	r2, [pc, #476]	@ (800467c <HAL_DMA_Init+0x640>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d008      	beq.n	80044b4 <HAL_DMA_Init+0x478>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a76      	ldr	r2, [pc, #472]	@ (8004680 <HAL_DMA_Init+0x644>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d003      	beq.n	80044b4 <HAL_DMA_Init+0x478>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a74      	ldr	r2, [pc, #464]	@ (8004684 <HAL_DMA_Init+0x648>)
 80044b2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2202      	movs	r2, #2
 80044b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	4b6e      	ldr	r3, [pc, #440]	@ (8004688 <HAL_DMA_Init+0x64c>)
 80044d0:	4013      	ands	r3, r2
 80044d2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	2b40      	cmp	r3, #64	@ 0x40
 80044da:	d008      	beq.n	80044ee <HAL_DMA_Init+0x4b2>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	2b80      	cmp	r3, #128	@ 0x80
 80044e2:	d102      	bne.n	80044ea <HAL_DMA_Init+0x4ae>
 80044e4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80044e8:	e002      	b.n	80044f0 <HAL_DMA_Init+0x4b4>
 80044ea:	2300      	movs	r3, #0
 80044ec:	e000      	b.n	80044f0 <HAL_DMA_Init+0x4b4>
 80044ee:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	68d2      	ldr	r2, [r2, #12]
 80044f4:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80044f6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80044fe:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004506:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800450e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	69db      	ldr	r3, [r3, #28]
 8004514:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004516:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800451e:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	4313      	orrs	r3, r2
 8004524:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	461a      	mov	r2, r3
 8004534:	4b55      	ldr	r3, [pc, #340]	@ (800468c <HAL_DMA_Init+0x650>)
 8004536:	4413      	add	r3, r2
 8004538:	4a55      	ldr	r2, [pc, #340]	@ (8004690 <HAL_DMA_Init+0x654>)
 800453a:	fba2 2303 	umull	r2, r3, r2, r3
 800453e:	091b      	lsrs	r3, r3, #4
 8004540:	009a      	lsls	r2, r3, #2
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f002 fa1a 	bl	8006980 <DMA_CalcBaseAndBitshift>
 800454c:	4603      	mov	r3, r0
 800454e:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004554:	f003 031f 	and.w	r3, r3, #31
 8004558:	2201      	movs	r2, #1
 800455a:	409a      	lsls	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	605a      	str	r2, [r3, #4]
 8004560:	e008      	b.n	8004574 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2240      	movs	r2, #64	@ 0x40
 8004566:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2203      	movs	r2, #3
 800456c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e0ed      	b.n	8004750 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a46      	ldr	r2, [pc, #280]	@ (8004694 <HAL_DMA_Init+0x658>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d072      	beq.n	8004664 <HAL_DMA_Init+0x628>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a45      	ldr	r2, [pc, #276]	@ (8004698 <HAL_DMA_Init+0x65c>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d06d      	beq.n	8004664 <HAL_DMA_Init+0x628>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a43      	ldr	r2, [pc, #268]	@ (800469c <HAL_DMA_Init+0x660>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d068      	beq.n	8004664 <HAL_DMA_Init+0x628>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a42      	ldr	r2, [pc, #264]	@ (80046a0 <HAL_DMA_Init+0x664>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d063      	beq.n	8004664 <HAL_DMA_Init+0x628>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a40      	ldr	r2, [pc, #256]	@ (80046a4 <HAL_DMA_Init+0x668>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d05e      	beq.n	8004664 <HAL_DMA_Init+0x628>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a3f      	ldr	r2, [pc, #252]	@ (80046a8 <HAL_DMA_Init+0x66c>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d059      	beq.n	8004664 <HAL_DMA_Init+0x628>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a3d      	ldr	r2, [pc, #244]	@ (80046ac <HAL_DMA_Init+0x670>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d054      	beq.n	8004664 <HAL_DMA_Init+0x628>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a3c      	ldr	r2, [pc, #240]	@ (80046b0 <HAL_DMA_Init+0x674>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d04f      	beq.n	8004664 <HAL_DMA_Init+0x628>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a3a      	ldr	r2, [pc, #232]	@ (80046b4 <HAL_DMA_Init+0x678>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d04a      	beq.n	8004664 <HAL_DMA_Init+0x628>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a39      	ldr	r2, [pc, #228]	@ (80046b8 <HAL_DMA_Init+0x67c>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d045      	beq.n	8004664 <HAL_DMA_Init+0x628>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a37      	ldr	r2, [pc, #220]	@ (80046bc <HAL_DMA_Init+0x680>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d040      	beq.n	8004664 <HAL_DMA_Init+0x628>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a36      	ldr	r2, [pc, #216]	@ (80046c0 <HAL_DMA_Init+0x684>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d03b      	beq.n	8004664 <HAL_DMA_Init+0x628>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a34      	ldr	r2, [pc, #208]	@ (80046c4 <HAL_DMA_Init+0x688>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d036      	beq.n	8004664 <HAL_DMA_Init+0x628>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a33      	ldr	r2, [pc, #204]	@ (80046c8 <HAL_DMA_Init+0x68c>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d031      	beq.n	8004664 <HAL_DMA_Init+0x628>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a31      	ldr	r2, [pc, #196]	@ (80046cc <HAL_DMA_Init+0x690>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d02c      	beq.n	8004664 <HAL_DMA_Init+0x628>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a30      	ldr	r2, [pc, #192]	@ (80046d0 <HAL_DMA_Init+0x694>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d027      	beq.n	8004664 <HAL_DMA_Init+0x628>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a13      	ldr	r2, [pc, #76]	@ (8004668 <HAL_DMA_Init+0x62c>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d022      	beq.n	8004664 <HAL_DMA_Init+0x628>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a12      	ldr	r2, [pc, #72]	@ (800466c <HAL_DMA_Init+0x630>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d01d      	beq.n	8004664 <HAL_DMA_Init+0x628>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a10      	ldr	r2, [pc, #64]	@ (8004670 <HAL_DMA_Init+0x634>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d018      	beq.n	8004664 <HAL_DMA_Init+0x628>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a0f      	ldr	r2, [pc, #60]	@ (8004674 <HAL_DMA_Init+0x638>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d013      	beq.n	8004664 <HAL_DMA_Init+0x628>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a0d      	ldr	r2, [pc, #52]	@ (8004678 <HAL_DMA_Init+0x63c>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d00e      	beq.n	8004664 <HAL_DMA_Init+0x628>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a0c      	ldr	r2, [pc, #48]	@ (800467c <HAL_DMA_Init+0x640>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d009      	beq.n	8004664 <HAL_DMA_Init+0x628>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a0a      	ldr	r2, [pc, #40]	@ (8004680 <HAL_DMA_Init+0x644>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d004      	beq.n	8004664 <HAL_DMA_Init+0x628>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a09      	ldr	r2, [pc, #36]	@ (8004684 <HAL_DMA_Init+0x648>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d137      	bne.n	80046d4 <HAL_DMA_Init+0x698>
 8004664:	2301      	movs	r3, #1
 8004666:	e036      	b.n	80046d6 <HAL_DMA_Init+0x69a>
 8004668:	58025408 	.word	0x58025408
 800466c:	5802541c 	.word	0x5802541c
 8004670:	58025430 	.word	0x58025430
 8004674:	58025444 	.word	0x58025444
 8004678:	58025458 	.word	0x58025458
 800467c:	5802546c 	.word	0x5802546c
 8004680:	58025480 	.word	0x58025480
 8004684:	58025494 	.word	0x58025494
 8004688:	fffe000f 	.word	0xfffe000f
 800468c:	a7fdabf8 	.word	0xa7fdabf8
 8004690:	cccccccd 	.word	0xcccccccd
 8004694:	40020010 	.word	0x40020010
 8004698:	40020028 	.word	0x40020028
 800469c:	40020040 	.word	0x40020040
 80046a0:	40020058 	.word	0x40020058
 80046a4:	40020070 	.word	0x40020070
 80046a8:	40020088 	.word	0x40020088
 80046ac:	400200a0 	.word	0x400200a0
 80046b0:	400200b8 	.word	0x400200b8
 80046b4:	40020410 	.word	0x40020410
 80046b8:	40020428 	.word	0x40020428
 80046bc:	40020440 	.word	0x40020440
 80046c0:	40020458 	.word	0x40020458
 80046c4:	40020470 	.word	0x40020470
 80046c8:	40020488 	.word	0x40020488
 80046cc:	400204a0 	.word	0x400204a0
 80046d0:	400204b8 	.word	0x400204b8
 80046d4:	2300      	movs	r3, #0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d032      	beq.n	8004740 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f002 fa7e 	bl	8006bdc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	2b80      	cmp	r3, #128	@ 0x80
 80046e6:	d102      	bne.n	80046ee <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046f6:	b2d2      	uxtb	r2, r2
 80046f8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004702:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d010      	beq.n	800472e <HAL_DMA_Init+0x6f2>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	2b08      	cmp	r3, #8
 8004712:	d80c      	bhi.n	800472e <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f002 fafb 	bl	8006d10 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800471e:	2200      	movs	r2, #0
 8004720:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800472a:	605a      	str	r2, [r3, #4]
 800472c:	e008      	b.n	8004740 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3718      	adds	r7, #24
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
 8004764:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004766:	2300      	movs	r3, #0
 8004768:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d101      	bne.n	8004774 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e226      	b.n	8004bc2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800477a:	2b01      	cmp	r3, #1
 800477c:	d101      	bne.n	8004782 <HAL_DMA_Start_IT+0x2a>
 800477e:	2302      	movs	r3, #2
 8004780:	e21f      	b.n	8004bc2 <HAL_DMA_Start_IT+0x46a>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b01      	cmp	r3, #1
 8004794:	f040 820a 	bne.w	8004bac <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2202      	movs	r2, #2
 800479c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a68      	ldr	r2, [pc, #416]	@ (800494c <HAL_DMA_Start_IT+0x1f4>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d04a      	beq.n	8004846 <HAL_DMA_Start_IT+0xee>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a66      	ldr	r2, [pc, #408]	@ (8004950 <HAL_DMA_Start_IT+0x1f8>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d045      	beq.n	8004846 <HAL_DMA_Start_IT+0xee>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a65      	ldr	r2, [pc, #404]	@ (8004954 <HAL_DMA_Start_IT+0x1fc>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d040      	beq.n	8004846 <HAL_DMA_Start_IT+0xee>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a63      	ldr	r2, [pc, #396]	@ (8004958 <HAL_DMA_Start_IT+0x200>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d03b      	beq.n	8004846 <HAL_DMA_Start_IT+0xee>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a62      	ldr	r2, [pc, #392]	@ (800495c <HAL_DMA_Start_IT+0x204>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d036      	beq.n	8004846 <HAL_DMA_Start_IT+0xee>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a60      	ldr	r2, [pc, #384]	@ (8004960 <HAL_DMA_Start_IT+0x208>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d031      	beq.n	8004846 <HAL_DMA_Start_IT+0xee>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a5f      	ldr	r2, [pc, #380]	@ (8004964 <HAL_DMA_Start_IT+0x20c>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d02c      	beq.n	8004846 <HAL_DMA_Start_IT+0xee>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a5d      	ldr	r2, [pc, #372]	@ (8004968 <HAL_DMA_Start_IT+0x210>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d027      	beq.n	8004846 <HAL_DMA_Start_IT+0xee>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a5c      	ldr	r2, [pc, #368]	@ (800496c <HAL_DMA_Start_IT+0x214>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d022      	beq.n	8004846 <HAL_DMA_Start_IT+0xee>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a5a      	ldr	r2, [pc, #360]	@ (8004970 <HAL_DMA_Start_IT+0x218>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d01d      	beq.n	8004846 <HAL_DMA_Start_IT+0xee>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a59      	ldr	r2, [pc, #356]	@ (8004974 <HAL_DMA_Start_IT+0x21c>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d018      	beq.n	8004846 <HAL_DMA_Start_IT+0xee>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a57      	ldr	r2, [pc, #348]	@ (8004978 <HAL_DMA_Start_IT+0x220>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d013      	beq.n	8004846 <HAL_DMA_Start_IT+0xee>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a56      	ldr	r2, [pc, #344]	@ (800497c <HAL_DMA_Start_IT+0x224>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d00e      	beq.n	8004846 <HAL_DMA_Start_IT+0xee>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a54      	ldr	r2, [pc, #336]	@ (8004980 <HAL_DMA_Start_IT+0x228>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d009      	beq.n	8004846 <HAL_DMA_Start_IT+0xee>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a53      	ldr	r2, [pc, #332]	@ (8004984 <HAL_DMA_Start_IT+0x22c>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d004      	beq.n	8004846 <HAL_DMA_Start_IT+0xee>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a51      	ldr	r2, [pc, #324]	@ (8004988 <HAL_DMA_Start_IT+0x230>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d108      	bne.n	8004858 <HAL_DMA_Start_IT+0x100>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 0201 	bic.w	r2, r2, #1
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	e007      	b.n	8004868 <HAL_DMA_Start_IT+0x110>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f022 0201 	bic.w	r2, r2, #1
 8004866:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	68b9      	ldr	r1, [r7, #8]
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f001 fea2 	bl	80065b8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a34      	ldr	r2, [pc, #208]	@ (800494c <HAL_DMA_Start_IT+0x1f4>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d04a      	beq.n	8004914 <HAL_DMA_Start_IT+0x1bc>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a33      	ldr	r2, [pc, #204]	@ (8004950 <HAL_DMA_Start_IT+0x1f8>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d045      	beq.n	8004914 <HAL_DMA_Start_IT+0x1bc>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a31      	ldr	r2, [pc, #196]	@ (8004954 <HAL_DMA_Start_IT+0x1fc>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d040      	beq.n	8004914 <HAL_DMA_Start_IT+0x1bc>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a30      	ldr	r2, [pc, #192]	@ (8004958 <HAL_DMA_Start_IT+0x200>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d03b      	beq.n	8004914 <HAL_DMA_Start_IT+0x1bc>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a2e      	ldr	r2, [pc, #184]	@ (800495c <HAL_DMA_Start_IT+0x204>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d036      	beq.n	8004914 <HAL_DMA_Start_IT+0x1bc>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a2d      	ldr	r2, [pc, #180]	@ (8004960 <HAL_DMA_Start_IT+0x208>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d031      	beq.n	8004914 <HAL_DMA_Start_IT+0x1bc>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a2b      	ldr	r2, [pc, #172]	@ (8004964 <HAL_DMA_Start_IT+0x20c>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d02c      	beq.n	8004914 <HAL_DMA_Start_IT+0x1bc>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a2a      	ldr	r2, [pc, #168]	@ (8004968 <HAL_DMA_Start_IT+0x210>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d027      	beq.n	8004914 <HAL_DMA_Start_IT+0x1bc>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a28      	ldr	r2, [pc, #160]	@ (800496c <HAL_DMA_Start_IT+0x214>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d022      	beq.n	8004914 <HAL_DMA_Start_IT+0x1bc>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a27      	ldr	r2, [pc, #156]	@ (8004970 <HAL_DMA_Start_IT+0x218>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d01d      	beq.n	8004914 <HAL_DMA_Start_IT+0x1bc>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a25      	ldr	r2, [pc, #148]	@ (8004974 <HAL_DMA_Start_IT+0x21c>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d018      	beq.n	8004914 <HAL_DMA_Start_IT+0x1bc>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a24      	ldr	r2, [pc, #144]	@ (8004978 <HAL_DMA_Start_IT+0x220>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d013      	beq.n	8004914 <HAL_DMA_Start_IT+0x1bc>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a22      	ldr	r2, [pc, #136]	@ (800497c <HAL_DMA_Start_IT+0x224>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d00e      	beq.n	8004914 <HAL_DMA_Start_IT+0x1bc>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a21      	ldr	r2, [pc, #132]	@ (8004980 <HAL_DMA_Start_IT+0x228>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d009      	beq.n	8004914 <HAL_DMA_Start_IT+0x1bc>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a1f      	ldr	r2, [pc, #124]	@ (8004984 <HAL_DMA_Start_IT+0x22c>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d004      	beq.n	8004914 <HAL_DMA_Start_IT+0x1bc>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a1e      	ldr	r2, [pc, #120]	@ (8004988 <HAL_DMA_Start_IT+0x230>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d101      	bne.n	8004918 <HAL_DMA_Start_IT+0x1c0>
 8004914:	2301      	movs	r3, #1
 8004916:	e000      	b.n	800491a <HAL_DMA_Start_IT+0x1c2>
 8004918:	2300      	movs	r3, #0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d036      	beq.n	800498c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f023 021e 	bic.w	r2, r3, #30
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f042 0216 	orr.w	r2, r2, #22
 8004930:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004936:	2b00      	cmp	r3, #0
 8004938:	d03e      	beq.n	80049b8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f042 0208 	orr.w	r2, r2, #8
 8004948:	601a      	str	r2, [r3, #0]
 800494a:	e035      	b.n	80049b8 <HAL_DMA_Start_IT+0x260>
 800494c:	40020010 	.word	0x40020010
 8004950:	40020028 	.word	0x40020028
 8004954:	40020040 	.word	0x40020040
 8004958:	40020058 	.word	0x40020058
 800495c:	40020070 	.word	0x40020070
 8004960:	40020088 	.word	0x40020088
 8004964:	400200a0 	.word	0x400200a0
 8004968:	400200b8 	.word	0x400200b8
 800496c:	40020410 	.word	0x40020410
 8004970:	40020428 	.word	0x40020428
 8004974:	40020440 	.word	0x40020440
 8004978:	40020458 	.word	0x40020458
 800497c:	40020470 	.word	0x40020470
 8004980:	40020488 	.word	0x40020488
 8004984:	400204a0 	.word	0x400204a0
 8004988:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f023 020e 	bic.w	r2, r3, #14
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f042 020a 	orr.w	r2, r2, #10
 800499e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d007      	beq.n	80049b8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f042 0204 	orr.w	r2, r2, #4
 80049b6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a83      	ldr	r2, [pc, #524]	@ (8004bcc <HAL_DMA_Start_IT+0x474>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d072      	beq.n	8004aa8 <HAL_DMA_Start_IT+0x350>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a82      	ldr	r2, [pc, #520]	@ (8004bd0 <HAL_DMA_Start_IT+0x478>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d06d      	beq.n	8004aa8 <HAL_DMA_Start_IT+0x350>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a80      	ldr	r2, [pc, #512]	@ (8004bd4 <HAL_DMA_Start_IT+0x47c>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d068      	beq.n	8004aa8 <HAL_DMA_Start_IT+0x350>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a7f      	ldr	r2, [pc, #508]	@ (8004bd8 <HAL_DMA_Start_IT+0x480>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d063      	beq.n	8004aa8 <HAL_DMA_Start_IT+0x350>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a7d      	ldr	r2, [pc, #500]	@ (8004bdc <HAL_DMA_Start_IT+0x484>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d05e      	beq.n	8004aa8 <HAL_DMA_Start_IT+0x350>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a7c      	ldr	r2, [pc, #496]	@ (8004be0 <HAL_DMA_Start_IT+0x488>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d059      	beq.n	8004aa8 <HAL_DMA_Start_IT+0x350>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a7a      	ldr	r2, [pc, #488]	@ (8004be4 <HAL_DMA_Start_IT+0x48c>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d054      	beq.n	8004aa8 <HAL_DMA_Start_IT+0x350>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a79      	ldr	r2, [pc, #484]	@ (8004be8 <HAL_DMA_Start_IT+0x490>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d04f      	beq.n	8004aa8 <HAL_DMA_Start_IT+0x350>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a77      	ldr	r2, [pc, #476]	@ (8004bec <HAL_DMA_Start_IT+0x494>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d04a      	beq.n	8004aa8 <HAL_DMA_Start_IT+0x350>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a76      	ldr	r2, [pc, #472]	@ (8004bf0 <HAL_DMA_Start_IT+0x498>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d045      	beq.n	8004aa8 <HAL_DMA_Start_IT+0x350>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a74      	ldr	r2, [pc, #464]	@ (8004bf4 <HAL_DMA_Start_IT+0x49c>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d040      	beq.n	8004aa8 <HAL_DMA_Start_IT+0x350>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a73      	ldr	r2, [pc, #460]	@ (8004bf8 <HAL_DMA_Start_IT+0x4a0>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d03b      	beq.n	8004aa8 <HAL_DMA_Start_IT+0x350>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a71      	ldr	r2, [pc, #452]	@ (8004bfc <HAL_DMA_Start_IT+0x4a4>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d036      	beq.n	8004aa8 <HAL_DMA_Start_IT+0x350>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a70      	ldr	r2, [pc, #448]	@ (8004c00 <HAL_DMA_Start_IT+0x4a8>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d031      	beq.n	8004aa8 <HAL_DMA_Start_IT+0x350>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a6e      	ldr	r2, [pc, #440]	@ (8004c04 <HAL_DMA_Start_IT+0x4ac>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d02c      	beq.n	8004aa8 <HAL_DMA_Start_IT+0x350>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a6d      	ldr	r2, [pc, #436]	@ (8004c08 <HAL_DMA_Start_IT+0x4b0>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d027      	beq.n	8004aa8 <HAL_DMA_Start_IT+0x350>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a6b      	ldr	r2, [pc, #428]	@ (8004c0c <HAL_DMA_Start_IT+0x4b4>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d022      	beq.n	8004aa8 <HAL_DMA_Start_IT+0x350>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a6a      	ldr	r2, [pc, #424]	@ (8004c10 <HAL_DMA_Start_IT+0x4b8>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d01d      	beq.n	8004aa8 <HAL_DMA_Start_IT+0x350>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a68      	ldr	r2, [pc, #416]	@ (8004c14 <HAL_DMA_Start_IT+0x4bc>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d018      	beq.n	8004aa8 <HAL_DMA_Start_IT+0x350>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a67      	ldr	r2, [pc, #412]	@ (8004c18 <HAL_DMA_Start_IT+0x4c0>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d013      	beq.n	8004aa8 <HAL_DMA_Start_IT+0x350>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a65      	ldr	r2, [pc, #404]	@ (8004c1c <HAL_DMA_Start_IT+0x4c4>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d00e      	beq.n	8004aa8 <HAL_DMA_Start_IT+0x350>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a64      	ldr	r2, [pc, #400]	@ (8004c20 <HAL_DMA_Start_IT+0x4c8>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d009      	beq.n	8004aa8 <HAL_DMA_Start_IT+0x350>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a62      	ldr	r2, [pc, #392]	@ (8004c24 <HAL_DMA_Start_IT+0x4cc>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d004      	beq.n	8004aa8 <HAL_DMA_Start_IT+0x350>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a61      	ldr	r2, [pc, #388]	@ (8004c28 <HAL_DMA_Start_IT+0x4d0>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d101      	bne.n	8004aac <HAL_DMA_Start_IT+0x354>
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e000      	b.n	8004aae <HAL_DMA_Start_IT+0x356>
 8004aac:	2300      	movs	r3, #0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d01a      	beq.n	8004ae8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d007      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ace:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d007      	beq.n	8004ae8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ae2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ae6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a37      	ldr	r2, [pc, #220]	@ (8004bcc <HAL_DMA_Start_IT+0x474>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d04a      	beq.n	8004b88 <HAL_DMA_Start_IT+0x430>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a36      	ldr	r2, [pc, #216]	@ (8004bd0 <HAL_DMA_Start_IT+0x478>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d045      	beq.n	8004b88 <HAL_DMA_Start_IT+0x430>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a34      	ldr	r2, [pc, #208]	@ (8004bd4 <HAL_DMA_Start_IT+0x47c>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d040      	beq.n	8004b88 <HAL_DMA_Start_IT+0x430>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a33      	ldr	r2, [pc, #204]	@ (8004bd8 <HAL_DMA_Start_IT+0x480>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d03b      	beq.n	8004b88 <HAL_DMA_Start_IT+0x430>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a31      	ldr	r2, [pc, #196]	@ (8004bdc <HAL_DMA_Start_IT+0x484>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d036      	beq.n	8004b88 <HAL_DMA_Start_IT+0x430>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a30      	ldr	r2, [pc, #192]	@ (8004be0 <HAL_DMA_Start_IT+0x488>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d031      	beq.n	8004b88 <HAL_DMA_Start_IT+0x430>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a2e      	ldr	r2, [pc, #184]	@ (8004be4 <HAL_DMA_Start_IT+0x48c>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d02c      	beq.n	8004b88 <HAL_DMA_Start_IT+0x430>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a2d      	ldr	r2, [pc, #180]	@ (8004be8 <HAL_DMA_Start_IT+0x490>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d027      	beq.n	8004b88 <HAL_DMA_Start_IT+0x430>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a2b      	ldr	r2, [pc, #172]	@ (8004bec <HAL_DMA_Start_IT+0x494>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d022      	beq.n	8004b88 <HAL_DMA_Start_IT+0x430>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a2a      	ldr	r2, [pc, #168]	@ (8004bf0 <HAL_DMA_Start_IT+0x498>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d01d      	beq.n	8004b88 <HAL_DMA_Start_IT+0x430>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a28      	ldr	r2, [pc, #160]	@ (8004bf4 <HAL_DMA_Start_IT+0x49c>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d018      	beq.n	8004b88 <HAL_DMA_Start_IT+0x430>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a27      	ldr	r2, [pc, #156]	@ (8004bf8 <HAL_DMA_Start_IT+0x4a0>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d013      	beq.n	8004b88 <HAL_DMA_Start_IT+0x430>
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a25      	ldr	r2, [pc, #148]	@ (8004bfc <HAL_DMA_Start_IT+0x4a4>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d00e      	beq.n	8004b88 <HAL_DMA_Start_IT+0x430>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a24      	ldr	r2, [pc, #144]	@ (8004c00 <HAL_DMA_Start_IT+0x4a8>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d009      	beq.n	8004b88 <HAL_DMA_Start_IT+0x430>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a22      	ldr	r2, [pc, #136]	@ (8004c04 <HAL_DMA_Start_IT+0x4ac>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d004      	beq.n	8004b88 <HAL_DMA_Start_IT+0x430>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a21      	ldr	r2, [pc, #132]	@ (8004c08 <HAL_DMA_Start_IT+0x4b0>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d108      	bne.n	8004b9a <HAL_DMA_Start_IT+0x442>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0201 	orr.w	r2, r2, #1
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	e012      	b.n	8004bc0 <HAL_DMA_Start_IT+0x468>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f042 0201 	orr.w	r2, r2, #1
 8004ba8:	601a      	str	r2, [r3, #0]
 8004baa:	e009      	b.n	8004bc0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004bb2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004bc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3718      	adds	r7, #24
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	40020010 	.word	0x40020010
 8004bd0:	40020028 	.word	0x40020028
 8004bd4:	40020040 	.word	0x40020040
 8004bd8:	40020058 	.word	0x40020058
 8004bdc:	40020070 	.word	0x40020070
 8004be0:	40020088 	.word	0x40020088
 8004be4:	400200a0 	.word	0x400200a0
 8004be8:	400200b8 	.word	0x400200b8
 8004bec:	40020410 	.word	0x40020410
 8004bf0:	40020428 	.word	0x40020428
 8004bf4:	40020440 	.word	0x40020440
 8004bf8:	40020458 	.word	0x40020458
 8004bfc:	40020470 	.word	0x40020470
 8004c00:	40020488 	.word	0x40020488
 8004c04:	400204a0 	.word	0x400204a0
 8004c08:	400204b8 	.word	0x400204b8
 8004c0c:	58025408 	.word	0x58025408
 8004c10:	5802541c 	.word	0x5802541c
 8004c14:	58025430 	.word	0x58025430
 8004c18:	58025444 	.word	0x58025444
 8004c1c:	58025458 	.word	0x58025458
 8004c20:	5802546c 	.word	0x5802546c
 8004c24:	58025480 	.word	0x58025480
 8004c28:	58025494 	.word	0x58025494

08004c2c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004c34:	f7ff f86e 	bl	8003d14 <HAL_GetTick>
 8004c38:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d101      	bne.n	8004c44 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e2dc      	b.n	80051fe <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d008      	beq.n	8004c62 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2280      	movs	r2, #128	@ 0x80
 8004c54:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e2cd      	b.n	80051fe <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a76      	ldr	r2, [pc, #472]	@ (8004e40 <HAL_DMA_Abort+0x214>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d04a      	beq.n	8004d02 <HAL_DMA_Abort+0xd6>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a74      	ldr	r2, [pc, #464]	@ (8004e44 <HAL_DMA_Abort+0x218>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d045      	beq.n	8004d02 <HAL_DMA_Abort+0xd6>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a73      	ldr	r2, [pc, #460]	@ (8004e48 <HAL_DMA_Abort+0x21c>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d040      	beq.n	8004d02 <HAL_DMA_Abort+0xd6>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a71      	ldr	r2, [pc, #452]	@ (8004e4c <HAL_DMA_Abort+0x220>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d03b      	beq.n	8004d02 <HAL_DMA_Abort+0xd6>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a70      	ldr	r2, [pc, #448]	@ (8004e50 <HAL_DMA_Abort+0x224>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d036      	beq.n	8004d02 <HAL_DMA_Abort+0xd6>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a6e      	ldr	r2, [pc, #440]	@ (8004e54 <HAL_DMA_Abort+0x228>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d031      	beq.n	8004d02 <HAL_DMA_Abort+0xd6>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a6d      	ldr	r2, [pc, #436]	@ (8004e58 <HAL_DMA_Abort+0x22c>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d02c      	beq.n	8004d02 <HAL_DMA_Abort+0xd6>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a6b      	ldr	r2, [pc, #428]	@ (8004e5c <HAL_DMA_Abort+0x230>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d027      	beq.n	8004d02 <HAL_DMA_Abort+0xd6>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a6a      	ldr	r2, [pc, #424]	@ (8004e60 <HAL_DMA_Abort+0x234>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d022      	beq.n	8004d02 <HAL_DMA_Abort+0xd6>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a68      	ldr	r2, [pc, #416]	@ (8004e64 <HAL_DMA_Abort+0x238>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d01d      	beq.n	8004d02 <HAL_DMA_Abort+0xd6>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a67      	ldr	r2, [pc, #412]	@ (8004e68 <HAL_DMA_Abort+0x23c>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d018      	beq.n	8004d02 <HAL_DMA_Abort+0xd6>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a65      	ldr	r2, [pc, #404]	@ (8004e6c <HAL_DMA_Abort+0x240>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d013      	beq.n	8004d02 <HAL_DMA_Abort+0xd6>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a64      	ldr	r2, [pc, #400]	@ (8004e70 <HAL_DMA_Abort+0x244>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d00e      	beq.n	8004d02 <HAL_DMA_Abort+0xd6>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a62      	ldr	r2, [pc, #392]	@ (8004e74 <HAL_DMA_Abort+0x248>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d009      	beq.n	8004d02 <HAL_DMA_Abort+0xd6>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a61      	ldr	r2, [pc, #388]	@ (8004e78 <HAL_DMA_Abort+0x24c>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d004      	beq.n	8004d02 <HAL_DMA_Abort+0xd6>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a5f      	ldr	r2, [pc, #380]	@ (8004e7c <HAL_DMA_Abort+0x250>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d101      	bne.n	8004d06 <HAL_DMA_Abort+0xda>
 8004d02:	2301      	movs	r3, #1
 8004d04:	e000      	b.n	8004d08 <HAL_DMA_Abort+0xdc>
 8004d06:	2300      	movs	r3, #0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d013      	beq.n	8004d34 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 021e 	bic.w	r2, r2, #30
 8004d1a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	695a      	ldr	r2, [r3, #20]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004d2a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	617b      	str	r3, [r7, #20]
 8004d32:	e00a      	b.n	8004d4a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f022 020e 	bic.w	r2, r2, #14
 8004d42:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a3c      	ldr	r2, [pc, #240]	@ (8004e40 <HAL_DMA_Abort+0x214>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d072      	beq.n	8004e3a <HAL_DMA_Abort+0x20e>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a3a      	ldr	r2, [pc, #232]	@ (8004e44 <HAL_DMA_Abort+0x218>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d06d      	beq.n	8004e3a <HAL_DMA_Abort+0x20e>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a39      	ldr	r2, [pc, #228]	@ (8004e48 <HAL_DMA_Abort+0x21c>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d068      	beq.n	8004e3a <HAL_DMA_Abort+0x20e>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a37      	ldr	r2, [pc, #220]	@ (8004e4c <HAL_DMA_Abort+0x220>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d063      	beq.n	8004e3a <HAL_DMA_Abort+0x20e>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a36      	ldr	r2, [pc, #216]	@ (8004e50 <HAL_DMA_Abort+0x224>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d05e      	beq.n	8004e3a <HAL_DMA_Abort+0x20e>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a34      	ldr	r2, [pc, #208]	@ (8004e54 <HAL_DMA_Abort+0x228>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d059      	beq.n	8004e3a <HAL_DMA_Abort+0x20e>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a33      	ldr	r2, [pc, #204]	@ (8004e58 <HAL_DMA_Abort+0x22c>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d054      	beq.n	8004e3a <HAL_DMA_Abort+0x20e>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a31      	ldr	r2, [pc, #196]	@ (8004e5c <HAL_DMA_Abort+0x230>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d04f      	beq.n	8004e3a <HAL_DMA_Abort+0x20e>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a30      	ldr	r2, [pc, #192]	@ (8004e60 <HAL_DMA_Abort+0x234>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d04a      	beq.n	8004e3a <HAL_DMA_Abort+0x20e>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a2e      	ldr	r2, [pc, #184]	@ (8004e64 <HAL_DMA_Abort+0x238>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d045      	beq.n	8004e3a <HAL_DMA_Abort+0x20e>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a2d      	ldr	r2, [pc, #180]	@ (8004e68 <HAL_DMA_Abort+0x23c>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d040      	beq.n	8004e3a <HAL_DMA_Abort+0x20e>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a2b      	ldr	r2, [pc, #172]	@ (8004e6c <HAL_DMA_Abort+0x240>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d03b      	beq.n	8004e3a <HAL_DMA_Abort+0x20e>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a2a      	ldr	r2, [pc, #168]	@ (8004e70 <HAL_DMA_Abort+0x244>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d036      	beq.n	8004e3a <HAL_DMA_Abort+0x20e>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a28      	ldr	r2, [pc, #160]	@ (8004e74 <HAL_DMA_Abort+0x248>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d031      	beq.n	8004e3a <HAL_DMA_Abort+0x20e>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a27      	ldr	r2, [pc, #156]	@ (8004e78 <HAL_DMA_Abort+0x24c>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d02c      	beq.n	8004e3a <HAL_DMA_Abort+0x20e>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a25      	ldr	r2, [pc, #148]	@ (8004e7c <HAL_DMA_Abort+0x250>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d027      	beq.n	8004e3a <HAL_DMA_Abort+0x20e>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a24      	ldr	r2, [pc, #144]	@ (8004e80 <HAL_DMA_Abort+0x254>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d022      	beq.n	8004e3a <HAL_DMA_Abort+0x20e>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a22      	ldr	r2, [pc, #136]	@ (8004e84 <HAL_DMA_Abort+0x258>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d01d      	beq.n	8004e3a <HAL_DMA_Abort+0x20e>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a21      	ldr	r2, [pc, #132]	@ (8004e88 <HAL_DMA_Abort+0x25c>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d018      	beq.n	8004e3a <HAL_DMA_Abort+0x20e>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a1f      	ldr	r2, [pc, #124]	@ (8004e8c <HAL_DMA_Abort+0x260>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d013      	beq.n	8004e3a <HAL_DMA_Abort+0x20e>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a1e      	ldr	r2, [pc, #120]	@ (8004e90 <HAL_DMA_Abort+0x264>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d00e      	beq.n	8004e3a <HAL_DMA_Abort+0x20e>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a1c      	ldr	r2, [pc, #112]	@ (8004e94 <HAL_DMA_Abort+0x268>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d009      	beq.n	8004e3a <HAL_DMA_Abort+0x20e>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a1b      	ldr	r2, [pc, #108]	@ (8004e98 <HAL_DMA_Abort+0x26c>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d004      	beq.n	8004e3a <HAL_DMA_Abort+0x20e>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a19      	ldr	r2, [pc, #100]	@ (8004e9c <HAL_DMA_Abort+0x270>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d132      	bne.n	8004ea0 <HAL_DMA_Abort+0x274>
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e031      	b.n	8004ea2 <HAL_DMA_Abort+0x276>
 8004e3e:	bf00      	nop
 8004e40:	40020010 	.word	0x40020010
 8004e44:	40020028 	.word	0x40020028
 8004e48:	40020040 	.word	0x40020040
 8004e4c:	40020058 	.word	0x40020058
 8004e50:	40020070 	.word	0x40020070
 8004e54:	40020088 	.word	0x40020088
 8004e58:	400200a0 	.word	0x400200a0
 8004e5c:	400200b8 	.word	0x400200b8
 8004e60:	40020410 	.word	0x40020410
 8004e64:	40020428 	.word	0x40020428
 8004e68:	40020440 	.word	0x40020440
 8004e6c:	40020458 	.word	0x40020458
 8004e70:	40020470 	.word	0x40020470
 8004e74:	40020488 	.word	0x40020488
 8004e78:	400204a0 	.word	0x400204a0
 8004e7c:	400204b8 	.word	0x400204b8
 8004e80:	58025408 	.word	0x58025408
 8004e84:	5802541c 	.word	0x5802541c
 8004e88:	58025430 	.word	0x58025430
 8004e8c:	58025444 	.word	0x58025444
 8004e90:	58025458 	.word	0x58025458
 8004e94:	5802546c 	.word	0x5802546c
 8004e98:	58025480 	.word	0x58025480
 8004e9c:	58025494 	.word	0x58025494
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d007      	beq.n	8004eb6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004eb4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a6d      	ldr	r2, [pc, #436]	@ (8005070 <HAL_DMA_Abort+0x444>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d04a      	beq.n	8004f56 <HAL_DMA_Abort+0x32a>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a6b      	ldr	r2, [pc, #428]	@ (8005074 <HAL_DMA_Abort+0x448>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d045      	beq.n	8004f56 <HAL_DMA_Abort+0x32a>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a6a      	ldr	r2, [pc, #424]	@ (8005078 <HAL_DMA_Abort+0x44c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d040      	beq.n	8004f56 <HAL_DMA_Abort+0x32a>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a68      	ldr	r2, [pc, #416]	@ (800507c <HAL_DMA_Abort+0x450>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d03b      	beq.n	8004f56 <HAL_DMA_Abort+0x32a>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a67      	ldr	r2, [pc, #412]	@ (8005080 <HAL_DMA_Abort+0x454>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d036      	beq.n	8004f56 <HAL_DMA_Abort+0x32a>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a65      	ldr	r2, [pc, #404]	@ (8005084 <HAL_DMA_Abort+0x458>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d031      	beq.n	8004f56 <HAL_DMA_Abort+0x32a>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a64      	ldr	r2, [pc, #400]	@ (8005088 <HAL_DMA_Abort+0x45c>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d02c      	beq.n	8004f56 <HAL_DMA_Abort+0x32a>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a62      	ldr	r2, [pc, #392]	@ (800508c <HAL_DMA_Abort+0x460>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d027      	beq.n	8004f56 <HAL_DMA_Abort+0x32a>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a61      	ldr	r2, [pc, #388]	@ (8005090 <HAL_DMA_Abort+0x464>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d022      	beq.n	8004f56 <HAL_DMA_Abort+0x32a>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a5f      	ldr	r2, [pc, #380]	@ (8005094 <HAL_DMA_Abort+0x468>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d01d      	beq.n	8004f56 <HAL_DMA_Abort+0x32a>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a5e      	ldr	r2, [pc, #376]	@ (8005098 <HAL_DMA_Abort+0x46c>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d018      	beq.n	8004f56 <HAL_DMA_Abort+0x32a>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a5c      	ldr	r2, [pc, #368]	@ (800509c <HAL_DMA_Abort+0x470>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d013      	beq.n	8004f56 <HAL_DMA_Abort+0x32a>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a5b      	ldr	r2, [pc, #364]	@ (80050a0 <HAL_DMA_Abort+0x474>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d00e      	beq.n	8004f56 <HAL_DMA_Abort+0x32a>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a59      	ldr	r2, [pc, #356]	@ (80050a4 <HAL_DMA_Abort+0x478>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d009      	beq.n	8004f56 <HAL_DMA_Abort+0x32a>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a58      	ldr	r2, [pc, #352]	@ (80050a8 <HAL_DMA_Abort+0x47c>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d004      	beq.n	8004f56 <HAL_DMA_Abort+0x32a>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a56      	ldr	r2, [pc, #344]	@ (80050ac <HAL_DMA_Abort+0x480>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d108      	bne.n	8004f68 <HAL_DMA_Abort+0x33c>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f022 0201 	bic.w	r2, r2, #1
 8004f64:	601a      	str	r2, [r3, #0]
 8004f66:	e007      	b.n	8004f78 <HAL_DMA_Abort+0x34c>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 0201 	bic.w	r2, r2, #1
 8004f76:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004f78:	e013      	b.n	8004fa2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f7a:	f7fe fecb 	bl	8003d14 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b05      	cmp	r3, #5
 8004f86:	d90c      	bls.n	8004fa2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2203      	movs	r2, #3
 8004f92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e12d      	b.n	80051fe <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1e5      	bne.n	8004f7a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a2f      	ldr	r2, [pc, #188]	@ (8005070 <HAL_DMA_Abort+0x444>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d04a      	beq.n	800504e <HAL_DMA_Abort+0x422>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a2d      	ldr	r2, [pc, #180]	@ (8005074 <HAL_DMA_Abort+0x448>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d045      	beq.n	800504e <HAL_DMA_Abort+0x422>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a2c      	ldr	r2, [pc, #176]	@ (8005078 <HAL_DMA_Abort+0x44c>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d040      	beq.n	800504e <HAL_DMA_Abort+0x422>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a2a      	ldr	r2, [pc, #168]	@ (800507c <HAL_DMA_Abort+0x450>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d03b      	beq.n	800504e <HAL_DMA_Abort+0x422>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a29      	ldr	r2, [pc, #164]	@ (8005080 <HAL_DMA_Abort+0x454>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d036      	beq.n	800504e <HAL_DMA_Abort+0x422>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a27      	ldr	r2, [pc, #156]	@ (8005084 <HAL_DMA_Abort+0x458>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d031      	beq.n	800504e <HAL_DMA_Abort+0x422>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a26      	ldr	r2, [pc, #152]	@ (8005088 <HAL_DMA_Abort+0x45c>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d02c      	beq.n	800504e <HAL_DMA_Abort+0x422>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a24      	ldr	r2, [pc, #144]	@ (800508c <HAL_DMA_Abort+0x460>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d027      	beq.n	800504e <HAL_DMA_Abort+0x422>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a23      	ldr	r2, [pc, #140]	@ (8005090 <HAL_DMA_Abort+0x464>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d022      	beq.n	800504e <HAL_DMA_Abort+0x422>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a21      	ldr	r2, [pc, #132]	@ (8005094 <HAL_DMA_Abort+0x468>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d01d      	beq.n	800504e <HAL_DMA_Abort+0x422>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a20      	ldr	r2, [pc, #128]	@ (8005098 <HAL_DMA_Abort+0x46c>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d018      	beq.n	800504e <HAL_DMA_Abort+0x422>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a1e      	ldr	r2, [pc, #120]	@ (800509c <HAL_DMA_Abort+0x470>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d013      	beq.n	800504e <HAL_DMA_Abort+0x422>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a1d      	ldr	r2, [pc, #116]	@ (80050a0 <HAL_DMA_Abort+0x474>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d00e      	beq.n	800504e <HAL_DMA_Abort+0x422>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a1b      	ldr	r2, [pc, #108]	@ (80050a4 <HAL_DMA_Abort+0x478>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d009      	beq.n	800504e <HAL_DMA_Abort+0x422>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a1a      	ldr	r2, [pc, #104]	@ (80050a8 <HAL_DMA_Abort+0x47c>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d004      	beq.n	800504e <HAL_DMA_Abort+0x422>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a18      	ldr	r2, [pc, #96]	@ (80050ac <HAL_DMA_Abort+0x480>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d101      	bne.n	8005052 <HAL_DMA_Abort+0x426>
 800504e:	2301      	movs	r3, #1
 8005050:	e000      	b.n	8005054 <HAL_DMA_Abort+0x428>
 8005052:	2300      	movs	r3, #0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d02b      	beq.n	80050b0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800505c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005062:	f003 031f 	and.w	r3, r3, #31
 8005066:	223f      	movs	r2, #63	@ 0x3f
 8005068:	409a      	lsls	r2, r3
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	609a      	str	r2, [r3, #8]
 800506e:	e02a      	b.n	80050c6 <HAL_DMA_Abort+0x49a>
 8005070:	40020010 	.word	0x40020010
 8005074:	40020028 	.word	0x40020028
 8005078:	40020040 	.word	0x40020040
 800507c:	40020058 	.word	0x40020058
 8005080:	40020070 	.word	0x40020070
 8005084:	40020088 	.word	0x40020088
 8005088:	400200a0 	.word	0x400200a0
 800508c:	400200b8 	.word	0x400200b8
 8005090:	40020410 	.word	0x40020410
 8005094:	40020428 	.word	0x40020428
 8005098:	40020440 	.word	0x40020440
 800509c:	40020458 	.word	0x40020458
 80050a0:	40020470 	.word	0x40020470
 80050a4:	40020488 	.word	0x40020488
 80050a8:	400204a0 	.word	0x400204a0
 80050ac:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050b4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050ba:	f003 031f 	and.w	r3, r3, #31
 80050be:	2201      	movs	r2, #1
 80050c0:	409a      	lsls	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a4f      	ldr	r2, [pc, #316]	@ (8005208 <HAL_DMA_Abort+0x5dc>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d072      	beq.n	80051b6 <HAL_DMA_Abort+0x58a>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a4d      	ldr	r2, [pc, #308]	@ (800520c <HAL_DMA_Abort+0x5e0>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d06d      	beq.n	80051b6 <HAL_DMA_Abort+0x58a>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a4c      	ldr	r2, [pc, #304]	@ (8005210 <HAL_DMA_Abort+0x5e4>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d068      	beq.n	80051b6 <HAL_DMA_Abort+0x58a>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a4a      	ldr	r2, [pc, #296]	@ (8005214 <HAL_DMA_Abort+0x5e8>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d063      	beq.n	80051b6 <HAL_DMA_Abort+0x58a>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a49      	ldr	r2, [pc, #292]	@ (8005218 <HAL_DMA_Abort+0x5ec>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d05e      	beq.n	80051b6 <HAL_DMA_Abort+0x58a>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a47      	ldr	r2, [pc, #284]	@ (800521c <HAL_DMA_Abort+0x5f0>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d059      	beq.n	80051b6 <HAL_DMA_Abort+0x58a>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a46      	ldr	r2, [pc, #280]	@ (8005220 <HAL_DMA_Abort+0x5f4>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d054      	beq.n	80051b6 <HAL_DMA_Abort+0x58a>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a44      	ldr	r2, [pc, #272]	@ (8005224 <HAL_DMA_Abort+0x5f8>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d04f      	beq.n	80051b6 <HAL_DMA_Abort+0x58a>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a43      	ldr	r2, [pc, #268]	@ (8005228 <HAL_DMA_Abort+0x5fc>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d04a      	beq.n	80051b6 <HAL_DMA_Abort+0x58a>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a41      	ldr	r2, [pc, #260]	@ (800522c <HAL_DMA_Abort+0x600>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d045      	beq.n	80051b6 <HAL_DMA_Abort+0x58a>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a40      	ldr	r2, [pc, #256]	@ (8005230 <HAL_DMA_Abort+0x604>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d040      	beq.n	80051b6 <HAL_DMA_Abort+0x58a>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a3e      	ldr	r2, [pc, #248]	@ (8005234 <HAL_DMA_Abort+0x608>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d03b      	beq.n	80051b6 <HAL_DMA_Abort+0x58a>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a3d      	ldr	r2, [pc, #244]	@ (8005238 <HAL_DMA_Abort+0x60c>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d036      	beq.n	80051b6 <HAL_DMA_Abort+0x58a>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a3b      	ldr	r2, [pc, #236]	@ (800523c <HAL_DMA_Abort+0x610>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d031      	beq.n	80051b6 <HAL_DMA_Abort+0x58a>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a3a      	ldr	r2, [pc, #232]	@ (8005240 <HAL_DMA_Abort+0x614>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d02c      	beq.n	80051b6 <HAL_DMA_Abort+0x58a>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a38      	ldr	r2, [pc, #224]	@ (8005244 <HAL_DMA_Abort+0x618>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d027      	beq.n	80051b6 <HAL_DMA_Abort+0x58a>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a37      	ldr	r2, [pc, #220]	@ (8005248 <HAL_DMA_Abort+0x61c>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d022      	beq.n	80051b6 <HAL_DMA_Abort+0x58a>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a35      	ldr	r2, [pc, #212]	@ (800524c <HAL_DMA_Abort+0x620>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d01d      	beq.n	80051b6 <HAL_DMA_Abort+0x58a>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a34      	ldr	r2, [pc, #208]	@ (8005250 <HAL_DMA_Abort+0x624>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d018      	beq.n	80051b6 <HAL_DMA_Abort+0x58a>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a32      	ldr	r2, [pc, #200]	@ (8005254 <HAL_DMA_Abort+0x628>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d013      	beq.n	80051b6 <HAL_DMA_Abort+0x58a>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a31      	ldr	r2, [pc, #196]	@ (8005258 <HAL_DMA_Abort+0x62c>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d00e      	beq.n	80051b6 <HAL_DMA_Abort+0x58a>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a2f      	ldr	r2, [pc, #188]	@ (800525c <HAL_DMA_Abort+0x630>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d009      	beq.n	80051b6 <HAL_DMA_Abort+0x58a>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a2e      	ldr	r2, [pc, #184]	@ (8005260 <HAL_DMA_Abort+0x634>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d004      	beq.n	80051b6 <HAL_DMA_Abort+0x58a>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a2c      	ldr	r2, [pc, #176]	@ (8005264 <HAL_DMA_Abort+0x638>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d101      	bne.n	80051ba <HAL_DMA_Abort+0x58e>
 80051b6:	2301      	movs	r3, #1
 80051b8:	e000      	b.n	80051bc <HAL_DMA_Abort+0x590>
 80051ba:	2300      	movs	r3, #0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d015      	beq.n	80051ec <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80051c8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00c      	beq.n	80051ec <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80051e0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80051ea:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3718      	adds	r7, #24
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	40020010 	.word	0x40020010
 800520c:	40020028 	.word	0x40020028
 8005210:	40020040 	.word	0x40020040
 8005214:	40020058 	.word	0x40020058
 8005218:	40020070 	.word	0x40020070
 800521c:	40020088 	.word	0x40020088
 8005220:	400200a0 	.word	0x400200a0
 8005224:	400200b8 	.word	0x400200b8
 8005228:	40020410 	.word	0x40020410
 800522c:	40020428 	.word	0x40020428
 8005230:	40020440 	.word	0x40020440
 8005234:	40020458 	.word	0x40020458
 8005238:	40020470 	.word	0x40020470
 800523c:	40020488 	.word	0x40020488
 8005240:	400204a0 	.word	0x400204a0
 8005244:	400204b8 	.word	0x400204b8
 8005248:	58025408 	.word	0x58025408
 800524c:	5802541c 	.word	0x5802541c
 8005250:	58025430 	.word	0x58025430
 8005254:	58025444 	.word	0x58025444
 8005258:	58025458 	.word	0x58025458
 800525c:	5802546c 	.word	0x5802546c
 8005260:	58025480 	.word	0x58025480
 8005264:	58025494 	.word	0x58025494

08005268 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e237      	b.n	80056ea <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b02      	cmp	r3, #2
 8005284:	d004      	beq.n	8005290 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2280      	movs	r2, #128	@ 0x80
 800528a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e22c      	b.n	80056ea <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a5c      	ldr	r2, [pc, #368]	@ (8005408 <HAL_DMA_Abort_IT+0x1a0>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d04a      	beq.n	8005330 <HAL_DMA_Abort_IT+0xc8>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a5b      	ldr	r2, [pc, #364]	@ (800540c <HAL_DMA_Abort_IT+0x1a4>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d045      	beq.n	8005330 <HAL_DMA_Abort_IT+0xc8>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a59      	ldr	r2, [pc, #356]	@ (8005410 <HAL_DMA_Abort_IT+0x1a8>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d040      	beq.n	8005330 <HAL_DMA_Abort_IT+0xc8>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a58      	ldr	r2, [pc, #352]	@ (8005414 <HAL_DMA_Abort_IT+0x1ac>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d03b      	beq.n	8005330 <HAL_DMA_Abort_IT+0xc8>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a56      	ldr	r2, [pc, #344]	@ (8005418 <HAL_DMA_Abort_IT+0x1b0>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d036      	beq.n	8005330 <HAL_DMA_Abort_IT+0xc8>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a55      	ldr	r2, [pc, #340]	@ (800541c <HAL_DMA_Abort_IT+0x1b4>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d031      	beq.n	8005330 <HAL_DMA_Abort_IT+0xc8>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a53      	ldr	r2, [pc, #332]	@ (8005420 <HAL_DMA_Abort_IT+0x1b8>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d02c      	beq.n	8005330 <HAL_DMA_Abort_IT+0xc8>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a52      	ldr	r2, [pc, #328]	@ (8005424 <HAL_DMA_Abort_IT+0x1bc>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d027      	beq.n	8005330 <HAL_DMA_Abort_IT+0xc8>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a50      	ldr	r2, [pc, #320]	@ (8005428 <HAL_DMA_Abort_IT+0x1c0>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d022      	beq.n	8005330 <HAL_DMA_Abort_IT+0xc8>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a4f      	ldr	r2, [pc, #316]	@ (800542c <HAL_DMA_Abort_IT+0x1c4>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d01d      	beq.n	8005330 <HAL_DMA_Abort_IT+0xc8>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a4d      	ldr	r2, [pc, #308]	@ (8005430 <HAL_DMA_Abort_IT+0x1c8>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d018      	beq.n	8005330 <HAL_DMA_Abort_IT+0xc8>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a4c      	ldr	r2, [pc, #304]	@ (8005434 <HAL_DMA_Abort_IT+0x1cc>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d013      	beq.n	8005330 <HAL_DMA_Abort_IT+0xc8>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a4a      	ldr	r2, [pc, #296]	@ (8005438 <HAL_DMA_Abort_IT+0x1d0>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d00e      	beq.n	8005330 <HAL_DMA_Abort_IT+0xc8>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a49      	ldr	r2, [pc, #292]	@ (800543c <HAL_DMA_Abort_IT+0x1d4>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d009      	beq.n	8005330 <HAL_DMA_Abort_IT+0xc8>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a47      	ldr	r2, [pc, #284]	@ (8005440 <HAL_DMA_Abort_IT+0x1d8>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d004      	beq.n	8005330 <HAL_DMA_Abort_IT+0xc8>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a46      	ldr	r2, [pc, #280]	@ (8005444 <HAL_DMA_Abort_IT+0x1dc>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d101      	bne.n	8005334 <HAL_DMA_Abort_IT+0xcc>
 8005330:	2301      	movs	r3, #1
 8005332:	e000      	b.n	8005336 <HAL_DMA_Abort_IT+0xce>
 8005334:	2300      	movs	r3, #0
 8005336:	2b00      	cmp	r3, #0
 8005338:	f000 8086 	beq.w	8005448 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2204      	movs	r2, #4
 8005340:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a2f      	ldr	r2, [pc, #188]	@ (8005408 <HAL_DMA_Abort_IT+0x1a0>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d04a      	beq.n	80053e4 <HAL_DMA_Abort_IT+0x17c>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a2e      	ldr	r2, [pc, #184]	@ (800540c <HAL_DMA_Abort_IT+0x1a4>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d045      	beq.n	80053e4 <HAL_DMA_Abort_IT+0x17c>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a2c      	ldr	r2, [pc, #176]	@ (8005410 <HAL_DMA_Abort_IT+0x1a8>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d040      	beq.n	80053e4 <HAL_DMA_Abort_IT+0x17c>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a2b      	ldr	r2, [pc, #172]	@ (8005414 <HAL_DMA_Abort_IT+0x1ac>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d03b      	beq.n	80053e4 <HAL_DMA_Abort_IT+0x17c>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a29      	ldr	r2, [pc, #164]	@ (8005418 <HAL_DMA_Abort_IT+0x1b0>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d036      	beq.n	80053e4 <HAL_DMA_Abort_IT+0x17c>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a28      	ldr	r2, [pc, #160]	@ (800541c <HAL_DMA_Abort_IT+0x1b4>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d031      	beq.n	80053e4 <HAL_DMA_Abort_IT+0x17c>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a26      	ldr	r2, [pc, #152]	@ (8005420 <HAL_DMA_Abort_IT+0x1b8>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d02c      	beq.n	80053e4 <HAL_DMA_Abort_IT+0x17c>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a25      	ldr	r2, [pc, #148]	@ (8005424 <HAL_DMA_Abort_IT+0x1bc>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d027      	beq.n	80053e4 <HAL_DMA_Abort_IT+0x17c>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a23      	ldr	r2, [pc, #140]	@ (8005428 <HAL_DMA_Abort_IT+0x1c0>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d022      	beq.n	80053e4 <HAL_DMA_Abort_IT+0x17c>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a22      	ldr	r2, [pc, #136]	@ (800542c <HAL_DMA_Abort_IT+0x1c4>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d01d      	beq.n	80053e4 <HAL_DMA_Abort_IT+0x17c>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a20      	ldr	r2, [pc, #128]	@ (8005430 <HAL_DMA_Abort_IT+0x1c8>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d018      	beq.n	80053e4 <HAL_DMA_Abort_IT+0x17c>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a1f      	ldr	r2, [pc, #124]	@ (8005434 <HAL_DMA_Abort_IT+0x1cc>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d013      	beq.n	80053e4 <HAL_DMA_Abort_IT+0x17c>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a1d      	ldr	r2, [pc, #116]	@ (8005438 <HAL_DMA_Abort_IT+0x1d0>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d00e      	beq.n	80053e4 <HAL_DMA_Abort_IT+0x17c>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a1c      	ldr	r2, [pc, #112]	@ (800543c <HAL_DMA_Abort_IT+0x1d4>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d009      	beq.n	80053e4 <HAL_DMA_Abort_IT+0x17c>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a1a      	ldr	r2, [pc, #104]	@ (8005440 <HAL_DMA_Abort_IT+0x1d8>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d004      	beq.n	80053e4 <HAL_DMA_Abort_IT+0x17c>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a19      	ldr	r2, [pc, #100]	@ (8005444 <HAL_DMA_Abort_IT+0x1dc>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d108      	bne.n	80053f6 <HAL_DMA_Abort_IT+0x18e>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f022 0201 	bic.w	r2, r2, #1
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	e178      	b.n	80056e8 <HAL_DMA_Abort_IT+0x480>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f022 0201 	bic.w	r2, r2, #1
 8005404:	601a      	str	r2, [r3, #0]
 8005406:	e16f      	b.n	80056e8 <HAL_DMA_Abort_IT+0x480>
 8005408:	40020010 	.word	0x40020010
 800540c:	40020028 	.word	0x40020028
 8005410:	40020040 	.word	0x40020040
 8005414:	40020058 	.word	0x40020058
 8005418:	40020070 	.word	0x40020070
 800541c:	40020088 	.word	0x40020088
 8005420:	400200a0 	.word	0x400200a0
 8005424:	400200b8 	.word	0x400200b8
 8005428:	40020410 	.word	0x40020410
 800542c:	40020428 	.word	0x40020428
 8005430:	40020440 	.word	0x40020440
 8005434:	40020458 	.word	0x40020458
 8005438:	40020470 	.word	0x40020470
 800543c:	40020488 	.word	0x40020488
 8005440:	400204a0 	.word	0x400204a0
 8005444:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f022 020e 	bic.w	r2, r2, #14
 8005456:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a6c      	ldr	r2, [pc, #432]	@ (8005610 <HAL_DMA_Abort_IT+0x3a8>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d04a      	beq.n	80054f8 <HAL_DMA_Abort_IT+0x290>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a6b      	ldr	r2, [pc, #428]	@ (8005614 <HAL_DMA_Abort_IT+0x3ac>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d045      	beq.n	80054f8 <HAL_DMA_Abort_IT+0x290>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a69      	ldr	r2, [pc, #420]	@ (8005618 <HAL_DMA_Abort_IT+0x3b0>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d040      	beq.n	80054f8 <HAL_DMA_Abort_IT+0x290>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a68      	ldr	r2, [pc, #416]	@ (800561c <HAL_DMA_Abort_IT+0x3b4>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d03b      	beq.n	80054f8 <HAL_DMA_Abort_IT+0x290>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a66      	ldr	r2, [pc, #408]	@ (8005620 <HAL_DMA_Abort_IT+0x3b8>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d036      	beq.n	80054f8 <HAL_DMA_Abort_IT+0x290>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a65      	ldr	r2, [pc, #404]	@ (8005624 <HAL_DMA_Abort_IT+0x3bc>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d031      	beq.n	80054f8 <HAL_DMA_Abort_IT+0x290>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a63      	ldr	r2, [pc, #396]	@ (8005628 <HAL_DMA_Abort_IT+0x3c0>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d02c      	beq.n	80054f8 <HAL_DMA_Abort_IT+0x290>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a62      	ldr	r2, [pc, #392]	@ (800562c <HAL_DMA_Abort_IT+0x3c4>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d027      	beq.n	80054f8 <HAL_DMA_Abort_IT+0x290>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a60      	ldr	r2, [pc, #384]	@ (8005630 <HAL_DMA_Abort_IT+0x3c8>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d022      	beq.n	80054f8 <HAL_DMA_Abort_IT+0x290>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a5f      	ldr	r2, [pc, #380]	@ (8005634 <HAL_DMA_Abort_IT+0x3cc>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d01d      	beq.n	80054f8 <HAL_DMA_Abort_IT+0x290>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a5d      	ldr	r2, [pc, #372]	@ (8005638 <HAL_DMA_Abort_IT+0x3d0>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d018      	beq.n	80054f8 <HAL_DMA_Abort_IT+0x290>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a5c      	ldr	r2, [pc, #368]	@ (800563c <HAL_DMA_Abort_IT+0x3d4>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d013      	beq.n	80054f8 <HAL_DMA_Abort_IT+0x290>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a5a      	ldr	r2, [pc, #360]	@ (8005640 <HAL_DMA_Abort_IT+0x3d8>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d00e      	beq.n	80054f8 <HAL_DMA_Abort_IT+0x290>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a59      	ldr	r2, [pc, #356]	@ (8005644 <HAL_DMA_Abort_IT+0x3dc>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d009      	beq.n	80054f8 <HAL_DMA_Abort_IT+0x290>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a57      	ldr	r2, [pc, #348]	@ (8005648 <HAL_DMA_Abort_IT+0x3e0>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d004      	beq.n	80054f8 <HAL_DMA_Abort_IT+0x290>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a56      	ldr	r2, [pc, #344]	@ (800564c <HAL_DMA_Abort_IT+0x3e4>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d108      	bne.n	800550a <HAL_DMA_Abort_IT+0x2a2>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f022 0201 	bic.w	r2, r2, #1
 8005506:	601a      	str	r2, [r3, #0]
 8005508:	e007      	b.n	800551a <HAL_DMA_Abort_IT+0x2b2>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f022 0201 	bic.w	r2, r2, #1
 8005518:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a3c      	ldr	r2, [pc, #240]	@ (8005610 <HAL_DMA_Abort_IT+0x3a8>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d072      	beq.n	800560a <HAL_DMA_Abort_IT+0x3a2>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a3a      	ldr	r2, [pc, #232]	@ (8005614 <HAL_DMA_Abort_IT+0x3ac>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d06d      	beq.n	800560a <HAL_DMA_Abort_IT+0x3a2>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a39      	ldr	r2, [pc, #228]	@ (8005618 <HAL_DMA_Abort_IT+0x3b0>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d068      	beq.n	800560a <HAL_DMA_Abort_IT+0x3a2>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a37      	ldr	r2, [pc, #220]	@ (800561c <HAL_DMA_Abort_IT+0x3b4>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d063      	beq.n	800560a <HAL_DMA_Abort_IT+0x3a2>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a36      	ldr	r2, [pc, #216]	@ (8005620 <HAL_DMA_Abort_IT+0x3b8>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d05e      	beq.n	800560a <HAL_DMA_Abort_IT+0x3a2>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a34      	ldr	r2, [pc, #208]	@ (8005624 <HAL_DMA_Abort_IT+0x3bc>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d059      	beq.n	800560a <HAL_DMA_Abort_IT+0x3a2>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a33      	ldr	r2, [pc, #204]	@ (8005628 <HAL_DMA_Abort_IT+0x3c0>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d054      	beq.n	800560a <HAL_DMA_Abort_IT+0x3a2>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a31      	ldr	r2, [pc, #196]	@ (800562c <HAL_DMA_Abort_IT+0x3c4>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d04f      	beq.n	800560a <HAL_DMA_Abort_IT+0x3a2>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a30      	ldr	r2, [pc, #192]	@ (8005630 <HAL_DMA_Abort_IT+0x3c8>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d04a      	beq.n	800560a <HAL_DMA_Abort_IT+0x3a2>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a2e      	ldr	r2, [pc, #184]	@ (8005634 <HAL_DMA_Abort_IT+0x3cc>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d045      	beq.n	800560a <HAL_DMA_Abort_IT+0x3a2>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a2d      	ldr	r2, [pc, #180]	@ (8005638 <HAL_DMA_Abort_IT+0x3d0>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d040      	beq.n	800560a <HAL_DMA_Abort_IT+0x3a2>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a2b      	ldr	r2, [pc, #172]	@ (800563c <HAL_DMA_Abort_IT+0x3d4>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d03b      	beq.n	800560a <HAL_DMA_Abort_IT+0x3a2>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a2a      	ldr	r2, [pc, #168]	@ (8005640 <HAL_DMA_Abort_IT+0x3d8>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d036      	beq.n	800560a <HAL_DMA_Abort_IT+0x3a2>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a28      	ldr	r2, [pc, #160]	@ (8005644 <HAL_DMA_Abort_IT+0x3dc>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d031      	beq.n	800560a <HAL_DMA_Abort_IT+0x3a2>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a27      	ldr	r2, [pc, #156]	@ (8005648 <HAL_DMA_Abort_IT+0x3e0>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d02c      	beq.n	800560a <HAL_DMA_Abort_IT+0x3a2>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a25      	ldr	r2, [pc, #148]	@ (800564c <HAL_DMA_Abort_IT+0x3e4>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d027      	beq.n	800560a <HAL_DMA_Abort_IT+0x3a2>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a24      	ldr	r2, [pc, #144]	@ (8005650 <HAL_DMA_Abort_IT+0x3e8>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d022      	beq.n	800560a <HAL_DMA_Abort_IT+0x3a2>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a22      	ldr	r2, [pc, #136]	@ (8005654 <HAL_DMA_Abort_IT+0x3ec>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d01d      	beq.n	800560a <HAL_DMA_Abort_IT+0x3a2>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a21      	ldr	r2, [pc, #132]	@ (8005658 <HAL_DMA_Abort_IT+0x3f0>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d018      	beq.n	800560a <HAL_DMA_Abort_IT+0x3a2>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a1f      	ldr	r2, [pc, #124]	@ (800565c <HAL_DMA_Abort_IT+0x3f4>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d013      	beq.n	800560a <HAL_DMA_Abort_IT+0x3a2>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a1e      	ldr	r2, [pc, #120]	@ (8005660 <HAL_DMA_Abort_IT+0x3f8>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d00e      	beq.n	800560a <HAL_DMA_Abort_IT+0x3a2>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a1c      	ldr	r2, [pc, #112]	@ (8005664 <HAL_DMA_Abort_IT+0x3fc>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d009      	beq.n	800560a <HAL_DMA_Abort_IT+0x3a2>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a1b      	ldr	r2, [pc, #108]	@ (8005668 <HAL_DMA_Abort_IT+0x400>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d004      	beq.n	800560a <HAL_DMA_Abort_IT+0x3a2>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a19      	ldr	r2, [pc, #100]	@ (800566c <HAL_DMA_Abort_IT+0x404>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d132      	bne.n	8005670 <HAL_DMA_Abort_IT+0x408>
 800560a:	2301      	movs	r3, #1
 800560c:	e031      	b.n	8005672 <HAL_DMA_Abort_IT+0x40a>
 800560e:	bf00      	nop
 8005610:	40020010 	.word	0x40020010
 8005614:	40020028 	.word	0x40020028
 8005618:	40020040 	.word	0x40020040
 800561c:	40020058 	.word	0x40020058
 8005620:	40020070 	.word	0x40020070
 8005624:	40020088 	.word	0x40020088
 8005628:	400200a0 	.word	0x400200a0
 800562c:	400200b8 	.word	0x400200b8
 8005630:	40020410 	.word	0x40020410
 8005634:	40020428 	.word	0x40020428
 8005638:	40020440 	.word	0x40020440
 800563c:	40020458 	.word	0x40020458
 8005640:	40020470 	.word	0x40020470
 8005644:	40020488 	.word	0x40020488
 8005648:	400204a0 	.word	0x400204a0
 800564c:	400204b8 	.word	0x400204b8
 8005650:	58025408 	.word	0x58025408
 8005654:	5802541c 	.word	0x5802541c
 8005658:	58025430 	.word	0x58025430
 800565c:	58025444 	.word	0x58025444
 8005660:	58025458 	.word	0x58025458
 8005664:	5802546c 	.word	0x5802546c
 8005668:	58025480 	.word	0x58025480
 800566c:	58025494 	.word	0x58025494
 8005670:	2300      	movs	r3, #0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d028      	beq.n	80056c8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005680:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005684:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800568a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005690:	f003 031f 	and.w	r3, r3, #31
 8005694:	2201      	movs	r2, #1
 8005696:	409a      	lsls	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80056a4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00c      	beq.n	80056c8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80056bc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80056c6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d003      	beq.n	80056e8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop

080056f4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b08a      	sub	sp, #40	@ 0x28
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80056fc:	2300      	movs	r3, #0
 80056fe:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005700:	4b67      	ldr	r3, [pc, #412]	@ (80058a0 <HAL_DMA_IRQHandler+0x1ac>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a67      	ldr	r2, [pc, #412]	@ (80058a4 <HAL_DMA_IRQHandler+0x1b0>)
 8005706:	fba2 2303 	umull	r2, r3, r2, r3
 800570a:	0a9b      	lsrs	r3, r3, #10
 800570c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005712:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005718:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800571a:	6a3b      	ldr	r3, [r7, #32]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a5f      	ldr	r2, [pc, #380]	@ (80058a8 <HAL_DMA_IRQHandler+0x1b4>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d04a      	beq.n	80057c6 <HAL_DMA_IRQHandler+0xd2>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a5d      	ldr	r2, [pc, #372]	@ (80058ac <HAL_DMA_IRQHandler+0x1b8>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d045      	beq.n	80057c6 <HAL_DMA_IRQHandler+0xd2>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a5c      	ldr	r2, [pc, #368]	@ (80058b0 <HAL_DMA_IRQHandler+0x1bc>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d040      	beq.n	80057c6 <HAL_DMA_IRQHandler+0xd2>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a5a      	ldr	r2, [pc, #360]	@ (80058b4 <HAL_DMA_IRQHandler+0x1c0>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d03b      	beq.n	80057c6 <HAL_DMA_IRQHandler+0xd2>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a59      	ldr	r2, [pc, #356]	@ (80058b8 <HAL_DMA_IRQHandler+0x1c4>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d036      	beq.n	80057c6 <HAL_DMA_IRQHandler+0xd2>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a57      	ldr	r2, [pc, #348]	@ (80058bc <HAL_DMA_IRQHandler+0x1c8>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d031      	beq.n	80057c6 <HAL_DMA_IRQHandler+0xd2>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a56      	ldr	r2, [pc, #344]	@ (80058c0 <HAL_DMA_IRQHandler+0x1cc>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d02c      	beq.n	80057c6 <HAL_DMA_IRQHandler+0xd2>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a54      	ldr	r2, [pc, #336]	@ (80058c4 <HAL_DMA_IRQHandler+0x1d0>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d027      	beq.n	80057c6 <HAL_DMA_IRQHandler+0xd2>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a53      	ldr	r2, [pc, #332]	@ (80058c8 <HAL_DMA_IRQHandler+0x1d4>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d022      	beq.n	80057c6 <HAL_DMA_IRQHandler+0xd2>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a51      	ldr	r2, [pc, #324]	@ (80058cc <HAL_DMA_IRQHandler+0x1d8>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d01d      	beq.n	80057c6 <HAL_DMA_IRQHandler+0xd2>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a50      	ldr	r2, [pc, #320]	@ (80058d0 <HAL_DMA_IRQHandler+0x1dc>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d018      	beq.n	80057c6 <HAL_DMA_IRQHandler+0xd2>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a4e      	ldr	r2, [pc, #312]	@ (80058d4 <HAL_DMA_IRQHandler+0x1e0>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d013      	beq.n	80057c6 <HAL_DMA_IRQHandler+0xd2>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a4d      	ldr	r2, [pc, #308]	@ (80058d8 <HAL_DMA_IRQHandler+0x1e4>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d00e      	beq.n	80057c6 <HAL_DMA_IRQHandler+0xd2>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a4b      	ldr	r2, [pc, #300]	@ (80058dc <HAL_DMA_IRQHandler+0x1e8>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d009      	beq.n	80057c6 <HAL_DMA_IRQHandler+0xd2>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a4a      	ldr	r2, [pc, #296]	@ (80058e0 <HAL_DMA_IRQHandler+0x1ec>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d004      	beq.n	80057c6 <HAL_DMA_IRQHandler+0xd2>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a48      	ldr	r2, [pc, #288]	@ (80058e4 <HAL_DMA_IRQHandler+0x1f0>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d101      	bne.n	80057ca <HAL_DMA_IRQHandler+0xd6>
 80057c6:	2301      	movs	r3, #1
 80057c8:	e000      	b.n	80057cc <HAL_DMA_IRQHandler+0xd8>
 80057ca:	2300      	movs	r3, #0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f000 842b 	beq.w	8006028 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057d6:	f003 031f 	and.w	r3, r3, #31
 80057da:	2208      	movs	r2, #8
 80057dc:	409a      	lsls	r2, r3
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	4013      	ands	r3, r2
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f000 80a2 	beq.w	800592c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a2e      	ldr	r2, [pc, #184]	@ (80058a8 <HAL_DMA_IRQHandler+0x1b4>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d04a      	beq.n	8005888 <HAL_DMA_IRQHandler+0x194>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a2d      	ldr	r2, [pc, #180]	@ (80058ac <HAL_DMA_IRQHandler+0x1b8>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d045      	beq.n	8005888 <HAL_DMA_IRQHandler+0x194>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a2b      	ldr	r2, [pc, #172]	@ (80058b0 <HAL_DMA_IRQHandler+0x1bc>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d040      	beq.n	8005888 <HAL_DMA_IRQHandler+0x194>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a2a      	ldr	r2, [pc, #168]	@ (80058b4 <HAL_DMA_IRQHandler+0x1c0>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d03b      	beq.n	8005888 <HAL_DMA_IRQHandler+0x194>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a28      	ldr	r2, [pc, #160]	@ (80058b8 <HAL_DMA_IRQHandler+0x1c4>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d036      	beq.n	8005888 <HAL_DMA_IRQHandler+0x194>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a27      	ldr	r2, [pc, #156]	@ (80058bc <HAL_DMA_IRQHandler+0x1c8>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d031      	beq.n	8005888 <HAL_DMA_IRQHandler+0x194>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a25      	ldr	r2, [pc, #148]	@ (80058c0 <HAL_DMA_IRQHandler+0x1cc>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d02c      	beq.n	8005888 <HAL_DMA_IRQHandler+0x194>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a24      	ldr	r2, [pc, #144]	@ (80058c4 <HAL_DMA_IRQHandler+0x1d0>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d027      	beq.n	8005888 <HAL_DMA_IRQHandler+0x194>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a22      	ldr	r2, [pc, #136]	@ (80058c8 <HAL_DMA_IRQHandler+0x1d4>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d022      	beq.n	8005888 <HAL_DMA_IRQHandler+0x194>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a21      	ldr	r2, [pc, #132]	@ (80058cc <HAL_DMA_IRQHandler+0x1d8>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d01d      	beq.n	8005888 <HAL_DMA_IRQHandler+0x194>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a1f      	ldr	r2, [pc, #124]	@ (80058d0 <HAL_DMA_IRQHandler+0x1dc>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d018      	beq.n	8005888 <HAL_DMA_IRQHandler+0x194>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a1e      	ldr	r2, [pc, #120]	@ (80058d4 <HAL_DMA_IRQHandler+0x1e0>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d013      	beq.n	8005888 <HAL_DMA_IRQHandler+0x194>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a1c      	ldr	r2, [pc, #112]	@ (80058d8 <HAL_DMA_IRQHandler+0x1e4>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d00e      	beq.n	8005888 <HAL_DMA_IRQHandler+0x194>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a1b      	ldr	r2, [pc, #108]	@ (80058dc <HAL_DMA_IRQHandler+0x1e8>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d009      	beq.n	8005888 <HAL_DMA_IRQHandler+0x194>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a19      	ldr	r2, [pc, #100]	@ (80058e0 <HAL_DMA_IRQHandler+0x1ec>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d004      	beq.n	8005888 <HAL_DMA_IRQHandler+0x194>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a18      	ldr	r2, [pc, #96]	@ (80058e4 <HAL_DMA_IRQHandler+0x1f0>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d12f      	bne.n	80058e8 <HAL_DMA_IRQHandler+0x1f4>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0304 	and.w	r3, r3, #4
 8005892:	2b00      	cmp	r3, #0
 8005894:	bf14      	ite	ne
 8005896:	2301      	movne	r3, #1
 8005898:	2300      	moveq	r3, #0
 800589a:	b2db      	uxtb	r3, r3
 800589c:	e02e      	b.n	80058fc <HAL_DMA_IRQHandler+0x208>
 800589e:	bf00      	nop
 80058a0:	24000098 	.word	0x24000098
 80058a4:	1b4e81b5 	.word	0x1b4e81b5
 80058a8:	40020010 	.word	0x40020010
 80058ac:	40020028 	.word	0x40020028
 80058b0:	40020040 	.word	0x40020040
 80058b4:	40020058 	.word	0x40020058
 80058b8:	40020070 	.word	0x40020070
 80058bc:	40020088 	.word	0x40020088
 80058c0:	400200a0 	.word	0x400200a0
 80058c4:	400200b8 	.word	0x400200b8
 80058c8:	40020410 	.word	0x40020410
 80058cc:	40020428 	.word	0x40020428
 80058d0:	40020440 	.word	0x40020440
 80058d4:	40020458 	.word	0x40020458
 80058d8:	40020470 	.word	0x40020470
 80058dc:	40020488 	.word	0x40020488
 80058e0:	400204a0 	.word	0x400204a0
 80058e4:	400204b8 	.word	0x400204b8
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0308 	and.w	r3, r3, #8
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	bf14      	ite	ne
 80058f6:	2301      	movne	r3, #1
 80058f8:	2300      	moveq	r3, #0
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d015      	beq.n	800592c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f022 0204 	bic.w	r2, r2, #4
 800590e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005914:	f003 031f 	and.w	r3, r3, #31
 8005918:	2208      	movs	r2, #8
 800591a:	409a      	lsls	r2, r3
 800591c:	6a3b      	ldr	r3, [r7, #32]
 800591e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005924:	f043 0201 	orr.w	r2, r3, #1
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005930:	f003 031f 	and.w	r3, r3, #31
 8005934:	69ba      	ldr	r2, [r7, #24]
 8005936:	fa22 f303 	lsr.w	r3, r2, r3
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	2b00      	cmp	r3, #0
 8005940:	d06e      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a69      	ldr	r2, [pc, #420]	@ (8005aec <HAL_DMA_IRQHandler+0x3f8>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d04a      	beq.n	80059e2 <HAL_DMA_IRQHandler+0x2ee>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a67      	ldr	r2, [pc, #412]	@ (8005af0 <HAL_DMA_IRQHandler+0x3fc>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d045      	beq.n	80059e2 <HAL_DMA_IRQHandler+0x2ee>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a66      	ldr	r2, [pc, #408]	@ (8005af4 <HAL_DMA_IRQHandler+0x400>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d040      	beq.n	80059e2 <HAL_DMA_IRQHandler+0x2ee>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a64      	ldr	r2, [pc, #400]	@ (8005af8 <HAL_DMA_IRQHandler+0x404>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d03b      	beq.n	80059e2 <HAL_DMA_IRQHandler+0x2ee>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a63      	ldr	r2, [pc, #396]	@ (8005afc <HAL_DMA_IRQHandler+0x408>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d036      	beq.n	80059e2 <HAL_DMA_IRQHandler+0x2ee>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a61      	ldr	r2, [pc, #388]	@ (8005b00 <HAL_DMA_IRQHandler+0x40c>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d031      	beq.n	80059e2 <HAL_DMA_IRQHandler+0x2ee>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a60      	ldr	r2, [pc, #384]	@ (8005b04 <HAL_DMA_IRQHandler+0x410>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d02c      	beq.n	80059e2 <HAL_DMA_IRQHandler+0x2ee>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a5e      	ldr	r2, [pc, #376]	@ (8005b08 <HAL_DMA_IRQHandler+0x414>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d027      	beq.n	80059e2 <HAL_DMA_IRQHandler+0x2ee>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a5d      	ldr	r2, [pc, #372]	@ (8005b0c <HAL_DMA_IRQHandler+0x418>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d022      	beq.n	80059e2 <HAL_DMA_IRQHandler+0x2ee>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a5b      	ldr	r2, [pc, #364]	@ (8005b10 <HAL_DMA_IRQHandler+0x41c>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d01d      	beq.n	80059e2 <HAL_DMA_IRQHandler+0x2ee>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a5a      	ldr	r2, [pc, #360]	@ (8005b14 <HAL_DMA_IRQHandler+0x420>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d018      	beq.n	80059e2 <HAL_DMA_IRQHandler+0x2ee>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a58      	ldr	r2, [pc, #352]	@ (8005b18 <HAL_DMA_IRQHandler+0x424>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d013      	beq.n	80059e2 <HAL_DMA_IRQHandler+0x2ee>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a57      	ldr	r2, [pc, #348]	@ (8005b1c <HAL_DMA_IRQHandler+0x428>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d00e      	beq.n	80059e2 <HAL_DMA_IRQHandler+0x2ee>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a55      	ldr	r2, [pc, #340]	@ (8005b20 <HAL_DMA_IRQHandler+0x42c>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d009      	beq.n	80059e2 <HAL_DMA_IRQHandler+0x2ee>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a54      	ldr	r2, [pc, #336]	@ (8005b24 <HAL_DMA_IRQHandler+0x430>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d004      	beq.n	80059e2 <HAL_DMA_IRQHandler+0x2ee>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a52      	ldr	r2, [pc, #328]	@ (8005b28 <HAL_DMA_IRQHandler+0x434>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d10a      	bne.n	80059f8 <HAL_DMA_IRQHandler+0x304>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	695b      	ldr	r3, [r3, #20]
 80059e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	bf14      	ite	ne
 80059f0:	2301      	movne	r3, #1
 80059f2:	2300      	moveq	r3, #0
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	e003      	b.n	8005a00 <HAL_DMA_IRQHandler+0x30c>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2300      	movs	r3, #0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00d      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a08:	f003 031f 	and.w	r3, r3, #31
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	409a      	lsls	r2, r3
 8005a10:	6a3b      	ldr	r3, [r7, #32]
 8005a12:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a18:	f043 0202 	orr.w	r2, r3, #2
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a24:	f003 031f 	and.w	r3, r3, #31
 8005a28:	2204      	movs	r2, #4
 8005a2a:	409a      	lsls	r2, r3
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	4013      	ands	r3, r2
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f000 808f 	beq.w	8005b54 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a2c      	ldr	r2, [pc, #176]	@ (8005aec <HAL_DMA_IRQHandler+0x3f8>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d04a      	beq.n	8005ad6 <HAL_DMA_IRQHandler+0x3e2>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a2a      	ldr	r2, [pc, #168]	@ (8005af0 <HAL_DMA_IRQHandler+0x3fc>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d045      	beq.n	8005ad6 <HAL_DMA_IRQHandler+0x3e2>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a29      	ldr	r2, [pc, #164]	@ (8005af4 <HAL_DMA_IRQHandler+0x400>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d040      	beq.n	8005ad6 <HAL_DMA_IRQHandler+0x3e2>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a27      	ldr	r2, [pc, #156]	@ (8005af8 <HAL_DMA_IRQHandler+0x404>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d03b      	beq.n	8005ad6 <HAL_DMA_IRQHandler+0x3e2>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a26      	ldr	r2, [pc, #152]	@ (8005afc <HAL_DMA_IRQHandler+0x408>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d036      	beq.n	8005ad6 <HAL_DMA_IRQHandler+0x3e2>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a24      	ldr	r2, [pc, #144]	@ (8005b00 <HAL_DMA_IRQHandler+0x40c>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d031      	beq.n	8005ad6 <HAL_DMA_IRQHandler+0x3e2>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a23      	ldr	r2, [pc, #140]	@ (8005b04 <HAL_DMA_IRQHandler+0x410>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d02c      	beq.n	8005ad6 <HAL_DMA_IRQHandler+0x3e2>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a21      	ldr	r2, [pc, #132]	@ (8005b08 <HAL_DMA_IRQHandler+0x414>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d027      	beq.n	8005ad6 <HAL_DMA_IRQHandler+0x3e2>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a20      	ldr	r2, [pc, #128]	@ (8005b0c <HAL_DMA_IRQHandler+0x418>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d022      	beq.n	8005ad6 <HAL_DMA_IRQHandler+0x3e2>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a1e      	ldr	r2, [pc, #120]	@ (8005b10 <HAL_DMA_IRQHandler+0x41c>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d01d      	beq.n	8005ad6 <HAL_DMA_IRQHandler+0x3e2>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a1d      	ldr	r2, [pc, #116]	@ (8005b14 <HAL_DMA_IRQHandler+0x420>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d018      	beq.n	8005ad6 <HAL_DMA_IRQHandler+0x3e2>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a1b      	ldr	r2, [pc, #108]	@ (8005b18 <HAL_DMA_IRQHandler+0x424>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d013      	beq.n	8005ad6 <HAL_DMA_IRQHandler+0x3e2>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a1a      	ldr	r2, [pc, #104]	@ (8005b1c <HAL_DMA_IRQHandler+0x428>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d00e      	beq.n	8005ad6 <HAL_DMA_IRQHandler+0x3e2>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a18      	ldr	r2, [pc, #96]	@ (8005b20 <HAL_DMA_IRQHandler+0x42c>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d009      	beq.n	8005ad6 <HAL_DMA_IRQHandler+0x3e2>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a17      	ldr	r2, [pc, #92]	@ (8005b24 <HAL_DMA_IRQHandler+0x430>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d004      	beq.n	8005ad6 <HAL_DMA_IRQHandler+0x3e2>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a15      	ldr	r2, [pc, #84]	@ (8005b28 <HAL_DMA_IRQHandler+0x434>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d12a      	bne.n	8005b2c <HAL_DMA_IRQHandler+0x438>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0302 	and.w	r3, r3, #2
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	bf14      	ite	ne
 8005ae4:	2301      	movne	r3, #1
 8005ae6:	2300      	moveq	r3, #0
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	e023      	b.n	8005b34 <HAL_DMA_IRQHandler+0x440>
 8005aec:	40020010 	.word	0x40020010
 8005af0:	40020028 	.word	0x40020028
 8005af4:	40020040 	.word	0x40020040
 8005af8:	40020058 	.word	0x40020058
 8005afc:	40020070 	.word	0x40020070
 8005b00:	40020088 	.word	0x40020088
 8005b04:	400200a0 	.word	0x400200a0
 8005b08:	400200b8 	.word	0x400200b8
 8005b0c:	40020410 	.word	0x40020410
 8005b10:	40020428 	.word	0x40020428
 8005b14:	40020440 	.word	0x40020440
 8005b18:	40020458 	.word	0x40020458
 8005b1c:	40020470 	.word	0x40020470
 8005b20:	40020488 	.word	0x40020488
 8005b24:	400204a0 	.word	0x400204a0
 8005b28:	400204b8 	.word	0x400204b8
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2300      	movs	r3, #0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d00d      	beq.n	8005b54 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b3c:	f003 031f 	and.w	r3, r3, #31
 8005b40:	2204      	movs	r2, #4
 8005b42:	409a      	lsls	r2, r3
 8005b44:	6a3b      	ldr	r3, [r7, #32]
 8005b46:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b4c:	f043 0204 	orr.w	r2, r3, #4
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b58:	f003 031f 	and.w	r3, r3, #31
 8005b5c:	2210      	movs	r2, #16
 8005b5e:	409a      	lsls	r2, r3
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	4013      	ands	r3, r2
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f000 80a6 	beq.w	8005cb6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a85      	ldr	r2, [pc, #532]	@ (8005d84 <HAL_DMA_IRQHandler+0x690>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d04a      	beq.n	8005c0a <HAL_DMA_IRQHandler+0x516>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a83      	ldr	r2, [pc, #524]	@ (8005d88 <HAL_DMA_IRQHandler+0x694>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d045      	beq.n	8005c0a <HAL_DMA_IRQHandler+0x516>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a82      	ldr	r2, [pc, #520]	@ (8005d8c <HAL_DMA_IRQHandler+0x698>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d040      	beq.n	8005c0a <HAL_DMA_IRQHandler+0x516>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a80      	ldr	r2, [pc, #512]	@ (8005d90 <HAL_DMA_IRQHandler+0x69c>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d03b      	beq.n	8005c0a <HAL_DMA_IRQHandler+0x516>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a7f      	ldr	r2, [pc, #508]	@ (8005d94 <HAL_DMA_IRQHandler+0x6a0>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d036      	beq.n	8005c0a <HAL_DMA_IRQHandler+0x516>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a7d      	ldr	r2, [pc, #500]	@ (8005d98 <HAL_DMA_IRQHandler+0x6a4>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d031      	beq.n	8005c0a <HAL_DMA_IRQHandler+0x516>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a7c      	ldr	r2, [pc, #496]	@ (8005d9c <HAL_DMA_IRQHandler+0x6a8>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d02c      	beq.n	8005c0a <HAL_DMA_IRQHandler+0x516>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a7a      	ldr	r2, [pc, #488]	@ (8005da0 <HAL_DMA_IRQHandler+0x6ac>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d027      	beq.n	8005c0a <HAL_DMA_IRQHandler+0x516>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a79      	ldr	r2, [pc, #484]	@ (8005da4 <HAL_DMA_IRQHandler+0x6b0>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d022      	beq.n	8005c0a <HAL_DMA_IRQHandler+0x516>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a77      	ldr	r2, [pc, #476]	@ (8005da8 <HAL_DMA_IRQHandler+0x6b4>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d01d      	beq.n	8005c0a <HAL_DMA_IRQHandler+0x516>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a76      	ldr	r2, [pc, #472]	@ (8005dac <HAL_DMA_IRQHandler+0x6b8>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d018      	beq.n	8005c0a <HAL_DMA_IRQHandler+0x516>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a74      	ldr	r2, [pc, #464]	@ (8005db0 <HAL_DMA_IRQHandler+0x6bc>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d013      	beq.n	8005c0a <HAL_DMA_IRQHandler+0x516>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a73      	ldr	r2, [pc, #460]	@ (8005db4 <HAL_DMA_IRQHandler+0x6c0>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d00e      	beq.n	8005c0a <HAL_DMA_IRQHandler+0x516>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a71      	ldr	r2, [pc, #452]	@ (8005db8 <HAL_DMA_IRQHandler+0x6c4>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d009      	beq.n	8005c0a <HAL_DMA_IRQHandler+0x516>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a70      	ldr	r2, [pc, #448]	@ (8005dbc <HAL_DMA_IRQHandler+0x6c8>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d004      	beq.n	8005c0a <HAL_DMA_IRQHandler+0x516>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a6e      	ldr	r2, [pc, #440]	@ (8005dc0 <HAL_DMA_IRQHandler+0x6cc>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d10a      	bne.n	8005c20 <HAL_DMA_IRQHandler+0x52c>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0308 	and.w	r3, r3, #8
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	bf14      	ite	ne
 8005c18:	2301      	movne	r3, #1
 8005c1a:	2300      	moveq	r3, #0
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	e009      	b.n	8005c34 <HAL_DMA_IRQHandler+0x540>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0304 	and.w	r3, r3, #4
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	bf14      	ite	ne
 8005c2e:	2301      	movne	r3, #1
 8005c30:	2300      	moveq	r3, #0
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d03e      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c3c:	f003 031f 	and.w	r3, r3, #31
 8005c40:	2210      	movs	r2, #16
 8005c42:	409a      	lsls	r2, r3
 8005c44:	6a3b      	ldr	r3, [r7, #32]
 8005c46:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d018      	beq.n	8005c88 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d108      	bne.n	8005c76 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d024      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	4798      	blx	r3
 8005c74:	e01f      	b.n	8005cb6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d01b      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	4798      	blx	r3
 8005c86:	e016      	b.n	8005cb6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d107      	bne.n	8005ca6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f022 0208 	bic.w	r2, r2, #8
 8005ca4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d003      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cba:	f003 031f 	and.w	r3, r3, #31
 8005cbe:	2220      	movs	r2, #32
 8005cc0:	409a      	lsls	r2, r3
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	f000 8110 	beq.w	8005eec <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a2c      	ldr	r2, [pc, #176]	@ (8005d84 <HAL_DMA_IRQHandler+0x690>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d04a      	beq.n	8005d6c <HAL_DMA_IRQHandler+0x678>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a2b      	ldr	r2, [pc, #172]	@ (8005d88 <HAL_DMA_IRQHandler+0x694>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d045      	beq.n	8005d6c <HAL_DMA_IRQHandler+0x678>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a29      	ldr	r2, [pc, #164]	@ (8005d8c <HAL_DMA_IRQHandler+0x698>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d040      	beq.n	8005d6c <HAL_DMA_IRQHandler+0x678>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a28      	ldr	r2, [pc, #160]	@ (8005d90 <HAL_DMA_IRQHandler+0x69c>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d03b      	beq.n	8005d6c <HAL_DMA_IRQHandler+0x678>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a26      	ldr	r2, [pc, #152]	@ (8005d94 <HAL_DMA_IRQHandler+0x6a0>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d036      	beq.n	8005d6c <HAL_DMA_IRQHandler+0x678>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a25      	ldr	r2, [pc, #148]	@ (8005d98 <HAL_DMA_IRQHandler+0x6a4>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d031      	beq.n	8005d6c <HAL_DMA_IRQHandler+0x678>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a23      	ldr	r2, [pc, #140]	@ (8005d9c <HAL_DMA_IRQHandler+0x6a8>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d02c      	beq.n	8005d6c <HAL_DMA_IRQHandler+0x678>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a22      	ldr	r2, [pc, #136]	@ (8005da0 <HAL_DMA_IRQHandler+0x6ac>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d027      	beq.n	8005d6c <HAL_DMA_IRQHandler+0x678>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a20      	ldr	r2, [pc, #128]	@ (8005da4 <HAL_DMA_IRQHandler+0x6b0>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d022      	beq.n	8005d6c <HAL_DMA_IRQHandler+0x678>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a1f      	ldr	r2, [pc, #124]	@ (8005da8 <HAL_DMA_IRQHandler+0x6b4>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d01d      	beq.n	8005d6c <HAL_DMA_IRQHandler+0x678>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a1d      	ldr	r2, [pc, #116]	@ (8005dac <HAL_DMA_IRQHandler+0x6b8>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d018      	beq.n	8005d6c <HAL_DMA_IRQHandler+0x678>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a1c      	ldr	r2, [pc, #112]	@ (8005db0 <HAL_DMA_IRQHandler+0x6bc>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d013      	beq.n	8005d6c <HAL_DMA_IRQHandler+0x678>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a1a      	ldr	r2, [pc, #104]	@ (8005db4 <HAL_DMA_IRQHandler+0x6c0>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d00e      	beq.n	8005d6c <HAL_DMA_IRQHandler+0x678>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a19      	ldr	r2, [pc, #100]	@ (8005db8 <HAL_DMA_IRQHandler+0x6c4>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d009      	beq.n	8005d6c <HAL_DMA_IRQHandler+0x678>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a17      	ldr	r2, [pc, #92]	@ (8005dbc <HAL_DMA_IRQHandler+0x6c8>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d004      	beq.n	8005d6c <HAL_DMA_IRQHandler+0x678>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a16      	ldr	r2, [pc, #88]	@ (8005dc0 <HAL_DMA_IRQHandler+0x6cc>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d12b      	bne.n	8005dc4 <HAL_DMA_IRQHandler+0x6d0>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0310 	and.w	r3, r3, #16
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	bf14      	ite	ne
 8005d7a:	2301      	movne	r3, #1
 8005d7c:	2300      	moveq	r3, #0
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	e02a      	b.n	8005dd8 <HAL_DMA_IRQHandler+0x6e4>
 8005d82:	bf00      	nop
 8005d84:	40020010 	.word	0x40020010
 8005d88:	40020028 	.word	0x40020028
 8005d8c:	40020040 	.word	0x40020040
 8005d90:	40020058 	.word	0x40020058
 8005d94:	40020070 	.word	0x40020070
 8005d98:	40020088 	.word	0x40020088
 8005d9c:	400200a0 	.word	0x400200a0
 8005da0:	400200b8 	.word	0x400200b8
 8005da4:	40020410 	.word	0x40020410
 8005da8:	40020428 	.word	0x40020428
 8005dac:	40020440 	.word	0x40020440
 8005db0:	40020458 	.word	0x40020458
 8005db4:	40020470 	.word	0x40020470
 8005db8:	40020488 	.word	0x40020488
 8005dbc:	400204a0 	.word	0x400204a0
 8005dc0:	400204b8 	.word	0x400204b8
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0302 	and.w	r3, r3, #2
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	bf14      	ite	ne
 8005dd2:	2301      	movne	r3, #1
 8005dd4:	2300      	moveq	r3, #0
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f000 8087 	beq.w	8005eec <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005de2:	f003 031f 	and.w	r3, r3, #31
 8005de6:	2220      	movs	r2, #32
 8005de8:	409a      	lsls	r2, r3
 8005dea:	6a3b      	ldr	r3, [r7, #32]
 8005dec:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b04      	cmp	r3, #4
 8005df8:	d139      	bne.n	8005e6e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f022 0216 	bic.w	r2, r2, #22
 8005e08:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	695a      	ldr	r2, [r3, #20]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e18:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d103      	bne.n	8005e2a <HAL_DMA_IRQHandler+0x736>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d007      	beq.n	8005e3a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f022 0208 	bic.w	r2, r2, #8
 8005e38:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e3e:	f003 031f 	and.w	r3, r3, #31
 8005e42:	223f      	movs	r2, #63	@ 0x3f
 8005e44:	409a      	lsls	r2, r3
 8005e46:	6a3b      	ldr	r3, [r7, #32]
 8005e48:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f000 8382 	beq.w	8006568 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	4798      	blx	r3
          }
          return;
 8005e6c:	e37c      	b.n	8006568 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d018      	beq.n	8005eae <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d108      	bne.n	8005e9c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d02c      	beq.n	8005eec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	4798      	blx	r3
 8005e9a:	e027      	b.n	8005eec <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d023      	beq.n	8005eec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	4798      	blx	r3
 8005eac:	e01e      	b.n	8005eec <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d10f      	bne.n	8005edc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f022 0210 	bic.w	r2, r2, #16
 8005eca:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d003      	beq.n	8005eec <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f000 833e 	beq.w	8006572 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005efa:	f003 0301 	and.w	r3, r3, #1
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f000 8088 	beq.w	8006014 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2204      	movs	r2, #4
 8005f08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a89      	ldr	r2, [pc, #548]	@ (8006138 <HAL_DMA_IRQHandler+0xa44>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d04a      	beq.n	8005fac <HAL_DMA_IRQHandler+0x8b8>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a88      	ldr	r2, [pc, #544]	@ (800613c <HAL_DMA_IRQHandler+0xa48>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d045      	beq.n	8005fac <HAL_DMA_IRQHandler+0x8b8>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a86      	ldr	r2, [pc, #536]	@ (8006140 <HAL_DMA_IRQHandler+0xa4c>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d040      	beq.n	8005fac <HAL_DMA_IRQHandler+0x8b8>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a85      	ldr	r2, [pc, #532]	@ (8006144 <HAL_DMA_IRQHandler+0xa50>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d03b      	beq.n	8005fac <HAL_DMA_IRQHandler+0x8b8>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a83      	ldr	r2, [pc, #524]	@ (8006148 <HAL_DMA_IRQHandler+0xa54>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d036      	beq.n	8005fac <HAL_DMA_IRQHandler+0x8b8>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a82      	ldr	r2, [pc, #520]	@ (800614c <HAL_DMA_IRQHandler+0xa58>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d031      	beq.n	8005fac <HAL_DMA_IRQHandler+0x8b8>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a80      	ldr	r2, [pc, #512]	@ (8006150 <HAL_DMA_IRQHandler+0xa5c>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d02c      	beq.n	8005fac <HAL_DMA_IRQHandler+0x8b8>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a7f      	ldr	r2, [pc, #508]	@ (8006154 <HAL_DMA_IRQHandler+0xa60>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d027      	beq.n	8005fac <HAL_DMA_IRQHandler+0x8b8>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a7d      	ldr	r2, [pc, #500]	@ (8006158 <HAL_DMA_IRQHandler+0xa64>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d022      	beq.n	8005fac <HAL_DMA_IRQHandler+0x8b8>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a7c      	ldr	r2, [pc, #496]	@ (800615c <HAL_DMA_IRQHandler+0xa68>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d01d      	beq.n	8005fac <HAL_DMA_IRQHandler+0x8b8>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a7a      	ldr	r2, [pc, #488]	@ (8006160 <HAL_DMA_IRQHandler+0xa6c>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d018      	beq.n	8005fac <HAL_DMA_IRQHandler+0x8b8>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a79      	ldr	r2, [pc, #484]	@ (8006164 <HAL_DMA_IRQHandler+0xa70>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d013      	beq.n	8005fac <HAL_DMA_IRQHandler+0x8b8>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a77      	ldr	r2, [pc, #476]	@ (8006168 <HAL_DMA_IRQHandler+0xa74>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d00e      	beq.n	8005fac <HAL_DMA_IRQHandler+0x8b8>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a76      	ldr	r2, [pc, #472]	@ (800616c <HAL_DMA_IRQHandler+0xa78>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d009      	beq.n	8005fac <HAL_DMA_IRQHandler+0x8b8>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a74      	ldr	r2, [pc, #464]	@ (8006170 <HAL_DMA_IRQHandler+0xa7c>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d004      	beq.n	8005fac <HAL_DMA_IRQHandler+0x8b8>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a73      	ldr	r2, [pc, #460]	@ (8006174 <HAL_DMA_IRQHandler+0xa80>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d108      	bne.n	8005fbe <HAL_DMA_IRQHandler+0x8ca>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f022 0201 	bic.w	r2, r2, #1
 8005fba:	601a      	str	r2, [r3, #0]
 8005fbc:	e007      	b.n	8005fce <HAL_DMA_IRQHandler+0x8da>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f022 0201 	bic.w	r2, r2, #1
 8005fcc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	60fb      	str	r3, [r7, #12]
 8005fd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d307      	bcc.n	8005fea <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 0301 	and.w	r3, r3, #1
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d1f2      	bne.n	8005fce <HAL_DMA_IRQHandler+0x8da>
 8005fe8:	e000      	b.n	8005fec <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005fea:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0301 	and.w	r3, r3, #1
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d004      	beq.n	8006004 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2203      	movs	r2, #3
 8005ffe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8006002:	e003      	b.n	800600c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006018:	2b00      	cmp	r3, #0
 800601a:	f000 82aa 	beq.w	8006572 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	4798      	blx	r3
 8006026:	e2a4      	b.n	8006572 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a52      	ldr	r2, [pc, #328]	@ (8006178 <HAL_DMA_IRQHandler+0xa84>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d04a      	beq.n	80060c8 <HAL_DMA_IRQHandler+0x9d4>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a51      	ldr	r2, [pc, #324]	@ (800617c <HAL_DMA_IRQHandler+0xa88>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d045      	beq.n	80060c8 <HAL_DMA_IRQHandler+0x9d4>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a4f      	ldr	r2, [pc, #316]	@ (8006180 <HAL_DMA_IRQHandler+0xa8c>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d040      	beq.n	80060c8 <HAL_DMA_IRQHandler+0x9d4>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a4e      	ldr	r2, [pc, #312]	@ (8006184 <HAL_DMA_IRQHandler+0xa90>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d03b      	beq.n	80060c8 <HAL_DMA_IRQHandler+0x9d4>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a4c      	ldr	r2, [pc, #304]	@ (8006188 <HAL_DMA_IRQHandler+0xa94>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d036      	beq.n	80060c8 <HAL_DMA_IRQHandler+0x9d4>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a4b      	ldr	r2, [pc, #300]	@ (800618c <HAL_DMA_IRQHandler+0xa98>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d031      	beq.n	80060c8 <HAL_DMA_IRQHandler+0x9d4>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a49      	ldr	r2, [pc, #292]	@ (8006190 <HAL_DMA_IRQHandler+0xa9c>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d02c      	beq.n	80060c8 <HAL_DMA_IRQHandler+0x9d4>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a48      	ldr	r2, [pc, #288]	@ (8006194 <HAL_DMA_IRQHandler+0xaa0>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d027      	beq.n	80060c8 <HAL_DMA_IRQHandler+0x9d4>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a46      	ldr	r2, [pc, #280]	@ (8006198 <HAL_DMA_IRQHandler+0xaa4>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d022      	beq.n	80060c8 <HAL_DMA_IRQHandler+0x9d4>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a45      	ldr	r2, [pc, #276]	@ (800619c <HAL_DMA_IRQHandler+0xaa8>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d01d      	beq.n	80060c8 <HAL_DMA_IRQHandler+0x9d4>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a43      	ldr	r2, [pc, #268]	@ (80061a0 <HAL_DMA_IRQHandler+0xaac>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d018      	beq.n	80060c8 <HAL_DMA_IRQHandler+0x9d4>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a42      	ldr	r2, [pc, #264]	@ (80061a4 <HAL_DMA_IRQHandler+0xab0>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d013      	beq.n	80060c8 <HAL_DMA_IRQHandler+0x9d4>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a40      	ldr	r2, [pc, #256]	@ (80061a8 <HAL_DMA_IRQHandler+0xab4>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d00e      	beq.n	80060c8 <HAL_DMA_IRQHandler+0x9d4>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a3f      	ldr	r2, [pc, #252]	@ (80061ac <HAL_DMA_IRQHandler+0xab8>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d009      	beq.n	80060c8 <HAL_DMA_IRQHandler+0x9d4>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a3d      	ldr	r2, [pc, #244]	@ (80061b0 <HAL_DMA_IRQHandler+0xabc>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d004      	beq.n	80060c8 <HAL_DMA_IRQHandler+0x9d4>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a3c      	ldr	r2, [pc, #240]	@ (80061b4 <HAL_DMA_IRQHandler+0xac0>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d101      	bne.n	80060cc <HAL_DMA_IRQHandler+0x9d8>
 80060c8:	2301      	movs	r3, #1
 80060ca:	e000      	b.n	80060ce <HAL_DMA_IRQHandler+0x9da>
 80060cc:	2300      	movs	r3, #0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	f000 824f 	beq.w	8006572 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060e0:	f003 031f 	and.w	r3, r3, #31
 80060e4:	2204      	movs	r2, #4
 80060e6:	409a      	lsls	r2, r3
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	4013      	ands	r3, r2
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f000 80dd 	beq.w	80062ac <HAL_DMA_IRQHandler+0xbb8>
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	f003 0304 	and.w	r3, r3, #4
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f000 80d7 	beq.w	80062ac <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006102:	f003 031f 	and.w	r3, r3, #31
 8006106:	2204      	movs	r2, #4
 8006108:	409a      	lsls	r2, r3
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d059      	beq.n	80061cc <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800611e:	2b00      	cmp	r3, #0
 8006120:	d14a      	bne.n	80061b8 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006126:	2b00      	cmp	r3, #0
 8006128:	f000 8220 	beq.w	800656c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006134:	e21a      	b.n	800656c <HAL_DMA_IRQHandler+0xe78>
 8006136:	bf00      	nop
 8006138:	40020010 	.word	0x40020010
 800613c:	40020028 	.word	0x40020028
 8006140:	40020040 	.word	0x40020040
 8006144:	40020058 	.word	0x40020058
 8006148:	40020070 	.word	0x40020070
 800614c:	40020088 	.word	0x40020088
 8006150:	400200a0 	.word	0x400200a0
 8006154:	400200b8 	.word	0x400200b8
 8006158:	40020410 	.word	0x40020410
 800615c:	40020428 	.word	0x40020428
 8006160:	40020440 	.word	0x40020440
 8006164:	40020458 	.word	0x40020458
 8006168:	40020470 	.word	0x40020470
 800616c:	40020488 	.word	0x40020488
 8006170:	400204a0 	.word	0x400204a0
 8006174:	400204b8 	.word	0x400204b8
 8006178:	48022c08 	.word	0x48022c08
 800617c:	48022c1c 	.word	0x48022c1c
 8006180:	48022c30 	.word	0x48022c30
 8006184:	48022c44 	.word	0x48022c44
 8006188:	48022c58 	.word	0x48022c58
 800618c:	48022c6c 	.word	0x48022c6c
 8006190:	48022c80 	.word	0x48022c80
 8006194:	48022c94 	.word	0x48022c94
 8006198:	58025408 	.word	0x58025408
 800619c:	5802541c 	.word	0x5802541c
 80061a0:	58025430 	.word	0x58025430
 80061a4:	58025444 	.word	0x58025444
 80061a8:	58025458 	.word	0x58025458
 80061ac:	5802546c 	.word	0x5802546c
 80061b0:	58025480 	.word	0x58025480
 80061b4:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f000 81d5 	beq.w	800656c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061ca:	e1cf      	b.n	800656c <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	f003 0320 	and.w	r3, r3, #32
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d160      	bne.n	8006298 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a7f      	ldr	r2, [pc, #508]	@ (80063d8 <HAL_DMA_IRQHandler+0xce4>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d04a      	beq.n	8006276 <HAL_DMA_IRQHandler+0xb82>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a7d      	ldr	r2, [pc, #500]	@ (80063dc <HAL_DMA_IRQHandler+0xce8>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d045      	beq.n	8006276 <HAL_DMA_IRQHandler+0xb82>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a7c      	ldr	r2, [pc, #496]	@ (80063e0 <HAL_DMA_IRQHandler+0xcec>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d040      	beq.n	8006276 <HAL_DMA_IRQHandler+0xb82>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a7a      	ldr	r2, [pc, #488]	@ (80063e4 <HAL_DMA_IRQHandler+0xcf0>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d03b      	beq.n	8006276 <HAL_DMA_IRQHandler+0xb82>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a79      	ldr	r2, [pc, #484]	@ (80063e8 <HAL_DMA_IRQHandler+0xcf4>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d036      	beq.n	8006276 <HAL_DMA_IRQHandler+0xb82>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a77      	ldr	r2, [pc, #476]	@ (80063ec <HAL_DMA_IRQHandler+0xcf8>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d031      	beq.n	8006276 <HAL_DMA_IRQHandler+0xb82>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a76      	ldr	r2, [pc, #472]	@ (80063f0 <HAL_DMA_IRQHandler+0xcfc>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d02c      	beq.n	8006276 <HAL_DMA_IRQHandler+0xb82>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a74      	ldr	r2, [pc, #464]	@ (80063f4 <HAL_DMA_IRQHandler+0xd00>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d027      	beq.n	8006276 <HAL_DMA_IRQHandler+0xb82>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a73      	ldr	r2, [pc, #460]	@ (80063f8 <HAL_DMA_IRQHandler+0xd04>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d022      	beq.n	8006276 <HAL_DMA_IRQHandler+0xb82>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a71      	ldr	r2, [pc, #452]	@ (80063fc <HAL_DMA_IRQHandler+0xd08>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d01d      	beq.n	8006276 <HAL_DMA_IRQHandler+0xb82>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a70      	ldr	r2, [pc, #448]	@ (8006400 <HAL_DMA_IRQHandler+0xd0c>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d018      	beq.n	8006276 <HAL_DMA_IRQHandler+0xb82>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a6e      	ldr	r2, [pc, #440]	@ (8006404 <HAL_DMA_IRQHandler+0xd10>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d013      	beq.n	8006276 <HAL_DMA_IRQHandler+0xb82>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a6d      	ldr	r2, [pc, #436]	@ (8006408 <HAL_DMA_IRQHandler+0xd14>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d00e      	beq.n	8006276 <HAL_DMA_IRQHandler+0xb82>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a6b      	ldr	r2, [pc, #428]	@ (800640c <HAL_DMA_IRQHandler+0xd18>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d009      	beq.n	8006276 <HAL_DMA_IRQHandler+0xb82>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a6a      	ldr	r2, [pc, #424]	@ (8006410 <HAL_DMA_IRQHandler+0xd1c>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d004      	beq.n	8006276 <HAL_DMA_IRQHandler+0xb82>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a68      	ldr	r2, [pc, #416]	@ (8006414 <HAL_DMA_IRQHandler+0xd20>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d108      	bne.n	8006288 <HAL_DMA_IRQHandler+0xb94>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f022 0208 	bic.w	r2, r2, #8
 8006284:	601a      	str	r2, [r3, #0]
 8006286:	e007      	b.n	8006298 <HAL_DMA_IRQHandler+0xba4>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f022 0204 	bic.w	r2, r2, #4
 8006296:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800629c:	2b00      	cmp	r3, #0
 800629e:	f000 8165 	beq.w	800656c <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062aa:	e15f      	b.n	800656c <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062b0:	f003 031f 	and.w	r3, r3, #31
 80062b4:	2202      	movs	r2, #2
 80062b6:	409a      	lsls	r2, r3
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	4013      	ands	r3, r2
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f000 80c5 	beq.w	800644c <HAL_DMA_IRQHandler+0xd58>
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	f003 0302 	and.w	r3, r3, #2
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f000 80bf 	beq.w	800644c <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062d2:	f003 031f 	and.w	r3, r3, #31
 80062d6:	2202      	movs	r2, #2
 80062d8:	409a      	lsls	r2, r3
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d018      	beq.n	800631a <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d109      	bne.n	8006306 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	f000 813a 	beq.w	8006570 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006304:	e134      	b.n	8006570 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800630a:	2b00      	cmp	r3, #0
 800630c:	f000 8130 	beq.w	8006570 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006318:	e12a      	b.n	8006570 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	f003 0320 	and.w	r3, r3, #32
 8006320:	2b00      	cmp	r3, #0
 8006322:	f040 8089 	bne.w	8006438 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a2b      	ldr	r2, [pc, #172]	@ (80063d8 <HAL_DMA_IRQHandler+0xce4>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d04a      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xcd2>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a29      	ldr	r2, [pc, #164]	@ (80063dc <HAL_DMA_IRQHandler+0xce8>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d045      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xcd2>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a28      	ldr	r2, [pc, #160]	@ (80063e0 <HAL_DMA_IRQHandler+0xcec>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d040      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xcd2>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a26      	ldr	r2, [pc, #152]	@ (80063e4 <HAL_DMA_IRQHandler+0xcf0>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d03b      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xcd2>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a25      	ldr	r2, [pc, #148]	@ (80063e8 <HAL_DMA_IRQHandler+0xcf4>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d036      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xcd2>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a23      	ldr	r2, [pc, #140]	@ (80063ec <HAL_DMA_IRQHandler+0xcf8>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d031      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xcd2>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a22      	ldr	r2, [pc, #136]	@ (80063f0 <HAL_DMA_IRQHandler+0xcfc>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d02c      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xcd2>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a20      	ldr	r2, [pc, #128]	@ (80063f4 <HAL_DMA_IRQHandler+0xd00>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d027      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xcd2>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a1f      	ldr	r2, [pc, #124]	@ (80063f8 <HAL_DMA_IRQHandler+0xd04>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d022      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xcd2>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a1d      	ldr	r2, [pc, #116]	@ (80063fc <HAL_DMA_IRQHandler+0xd08>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d01d      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xcd2>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a1c      	ldr	r2, [pc, #112]	@ (8006400 <HAL_DMA_IRQHandler+0xd0c>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d018      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xcd2>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a1a      	ldr	r2, [pc, #104]	@ (8006404 <HAL_DMA_IRQHandler+0xd10>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d013      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xcd2>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a19      	ldr	r2, [pc, #100]	@ (8006408 <HAL_DMA_IRQHandler+0xd14>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d00e      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xcd2>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a17      	ldr	r2, [pc, #92]	@ (800640c <HAL_DMA_IRQHandler+0xd18>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d009      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xcd2>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a16      	ldr	r2, [pc, #88]	@ (8006410 <HAL_DMA_IRQHandler+0xd1c>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d004      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xcd2>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a14      	ldr	r2, [pc, #80]	@ (8006414 <HAL_DMA_IRQHandler+0xd20>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d128      	bne.n	8006418 <HAL_DMA_IRQHandler+0xd24>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f022 0214 	bic.w	r2, r2, #20
 80063d4:	601a      	str	r2, [r3, #0]
 80063d6:	e027      	b.n	8006428 <HAL_DMA_IRQHandler+0xd34>
 80063d8:	40020010 	.word	0x40020010
 80063dc:	40020028 	.word	0x40020028
 80063e0:	40020040 	.word	0x40020040
 80063e4:	40020058 	.word	0x40020058
 80063e8:	40020070 	.word	0x40020070
 80063ec:	40020088 	.word	0x40020088
 80063f0:	400200a0 	.word	0x400200a0
 80063f4:	400200b8 	.word	0x400200b8
 80063f8:	40020410 	.word	0x40020410
 80063fc:	40020428 	.word	0x40020428
 8006400:	40020440 	.word	0x40020440
 8006404:	40020458 	.word	0x40020458
 8006408:	40020470 	.word	0x40020470
 800640c:	40020488 	.word	0x40020488
 8006410:	400204a0 	.word	0x400204a0
 8006414:	400204b8 	.word	0x400204b8
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f022 020a 	bic.w	r2, r2, #10
 8006426:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800643c:	2b00      	cmp	r3, #0
 800643e:	f000 8097 	beq.w	8006570 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800644a:	e091      	b.n	8006570 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006450:	f003 031f 	and.w	r3, r3, #31
 8006454:	2208      	movs	r2, #8
 8006456:	409a      	lsls	r2, r3
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	4013      	ands	r3, r2
 800645c:	2b00      	cmp	r3, #0
 800645e:	f000 8088 	beq.w	8006572 <HAL_DMA_IRQHandler+0xe7e>
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	f003 0308 	and.w	r3, r3, #8
 8006468:	2b00      	cmp	r3, #0
 800646a:	f000 8082 	beq.w	8006572 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a41      	ldr	r2, [pc, #260]	@ (8006578 <HAL_DMA_IRQHandler+0xe84>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d04a      	beq.n	800650e <HAL_DMA_IRQHandler+0xe1a>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a3f      	ldr	r2, [pc, #252]	@ (800657c <HAL_DMA_IRQHandler+0xe88>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d045      	beq.n	800650e <HAL_DMA_IRQHandler+0xe1a>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a3e      	ldr	r2, [pc, #248]	@ (8006580 <HAL_DMA_IRQHandler+0xe8c>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d040      	beq.n	800650e <HAL_DMA_IRQHandler+0xe1a>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a3c      	ldr	r2, [pc, #240]	@ (8006584 <HAL_DMA_IRQHandler+0xe90>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d03b      	beq.n	800650e <HAL_DMA_IRQHandler+0xe1a>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a3b      	ldr	r2, [pc, #236]	@ (8006588 <HAL_DMA_IRQHandler+0xe94>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d036      	beq.n	800650e <HAL_DMA_IRQHandler+0xe1a>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a39      	ldr	r2, [pc, #228]	@ (800658c <HAL_DMA_IRQHandler+0xe98>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d031      	beq.n	800650e <HAL_DMA_IRQHandler+0xe1a>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a38      	ldr	r2, [pc, #224]	@ (8006590 <HAL_DMA_IRQHandler+0xe9c>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d02c      	beq.n	800650e <HAL_DMA_IRQHandler+0xe1a>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a36      	ldr	r2, [pc, #216]	@ (8006594 <HAL_DMA_IRQHandler+0xea0>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d027      	beq.n	800650e <HAL_DMA_IRQHandler+0xe1a>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a35      	ldr	r2, [pc, #212]	@ (8006598 <HAL_DMA_IRQHandler+0xea4>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d022      	beq.n	800650e <HAL_DMA_IRQHandler+0xe1a>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a33      	ldr	r2, [pc, #204]	@ (800659c <HAL_DMA_IRQHandler+0xea8>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d01d      	beq.n	800650e <HAL_DMA_IRQHandler+0xe1a>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a32      	ldr	r2, [pc, #200]	@ (80065a0 <HAL_DMA_IRQHandler+0xeac>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d018      	beq.n	800650e <HAL_DMA_IRQHandler+0xe1a>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a30      	ldr	r2, [pc, #192]	@ (80065a4 <HAL_DMA_IRQHandler+0xeb0>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d013      	beq.n	800650e <HAL_DMA_IRQHandler+0xe1a>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a2f      	ldr	r2, [pc, #188]	@ (80065a8 <HAL_DMA_IRQHandler+0xeb4>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d00e      	beq.n	800650e <HAL_DMA_IRQHandler+0xe1a>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a2d      	ldr	r2, [pc, #180]	@ (80065ac <HAL_DMA_IRQHandler+0xeb8>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d009      	beq.n	800650e <HAL_DMA_IRQHandler+0xe1a>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a2c      	ldr	r2, [pc, #176]	@ (80065b0 <HAL_DMA_IRQHandler+0xebc>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d004      	beq.n	800650e <HAL_DMA_IRQHandler+0xe1a>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a2a      	ldr	r2, [pc, #168]	@ (80065b4 <HAL_DMA_IRQHandler+0xec0>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d108      	bne.n	8006520 <HAL_DMA_IRQHandler+0xe2c>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f022 021c 	bic.w	r2, r2, #28
 800651c:	601a      	str	r2, [r3, #0]
 800651e:	e007      	b.n	8006530 <HAL_DMA_IRQHandler+0xe3c>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f022 020e 	bic.w	r2, r2, #14
 800652e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006534:	f003 031f 	and.w	r3, r3, #31
 8006538:	2201      	movs	r2, #1
 800653a:	409a      	lsls	r2, r3
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2201      	movs	r2, #1
 800654a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800655a:	2b00      	cmp	r3, #0
 800655c:	d009      	beq.n	8006572 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	4798      	blx	r3
 8006566:	e004      	b.n	8006572 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8006568:	bf00      	nop
 800656a:	e002      	b.n	8006572 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800656c:	bf00      	nop
 800656e:	e000      	b.n	8006572 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006570:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006572:	3728      	adds	r7, #40	@ 0x28
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}
 8006578:	40020010 	.word	0x40020010
 800657c:	40020028 	.word	0x40020028
 8006580:	40020040 	.word	0x40020040
 8006584:	40020058 	.word	0x40020058
 8006588:	40020070 	.word	0x40020070
 800658c:	40020088 	.word	0x40020088
 8006590:	400200a0 	.word	0x400200a0
 8006594:	400200b8 	.word	0x400200b8
 8006598:	40020410 	.word	0x40020410
 800659c:	40020428 	.word	0x40020428
 80065a0:	40020440 	.word	0x40020440
 80065a4:	40020458 	.word	0x40020458
 80065a8:	40020470 	.word	0x40020470
 80065ac:	40020488 	.word	0x40020488
 80065b0:	400204a0 	.word	0x400204a0
 80065b4:	400204b8 	.word	0x400204b8

080065b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b087      	sub	sp, #28
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]
 80065c4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065ca:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065d0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a7f      	ldr	r2, [pc, #508]	@ (80067d4 <DMA_SetConfig+0x21c>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d072      	beq.n	80066c2 <DMA_SetConfig+0x10a>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a7d      	ldr	r2, [pc, #500]	@ (80067d8 <DMA_SetConfig+0x220>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d06d      	beq.n	80066c2 <DMA_SetConfig+0x10a>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a7c      	ldr	r2, [pc, #496]	@ (80067dc <DMA_SetConfig+0x224>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d068      	beq.n	80066c2 <DMA_SetConfig+0x10a>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a7a      	ldr	r2, [pc, #488]	@ (80067e0 <DMA_SetConfig+0x228>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d063      	beq.n	80066c2 <DMA_SetConfig+0x10a>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a79      	ldr	r2, [pc, #484]	@ (80067e4 <DMA_SetConfig+0x22c>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d05e      	beq.n	80066c2 <DMA_SetConfig+0x10a>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a77      	ldr	r2, [pc, #476]	@ (80067e8 <DMA_SetConfig+0x230>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d059      	beq.n	80066c2 <DMA_SetConfig+0x10a>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a76      	ldr	r2, [pc, #472]	@ (80067ec <DMA_SetConfig+0x234>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d054      	beq.n	80066c2 <DMA_SetConfig+0x10a>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a74      	ldr	r2, [pc, #464]	@ (80067f0 <DMA_SetConfig+0x238>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d04f      	beq.n	80066c2 <DMA_SetConfig+0x10a>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a73      	ldr	r2, [pc, #460]	@ (80067f4 <DMA_SetConfig+0x23c>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d04a      	beq.n	80066c2 <DMA_SetConfig+0x10a>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a71      	ldr	r2, [pc, #452]	@ (80067f8 <DMA_SetConfig+0x240>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d045      	beq.n	80066c2 <DMA_SetConfig+0x10a>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a70      	ldr	r2, [pc, #448]	@ (80067fc <DMA_SetConfig+0x244>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d040      	beq.n	80066c2 <DMA_SetConfig+0x10a>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a6e      	ldr	r2, [pc, #440]	@ (8006800 <DMA_SetConfig+0x248>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d03b      	beq.n	80066c2 <DMA_SetConfig+0x10a>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a6d      	ldr	r2, [pc, #436]	@ (8006804 <DMA_SetConfig+0x24c>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d036      	beq.n	80066c2 <DMA_SetConfig+0x10a>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a6b      	ldr	r2, [pc, #428]	@ (8006808 <DMA_SetConfig+0x250>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d031      	beq.n	80066c2 <DMA_SetConfig+0x10a>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a6a      	ldr	r2, [pc, #424]	@ (800680c <DMA_SetConfig+0x254>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d02c      	beq.n	80066c2 <DMA_SetConfig+0x10a>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a68      	ldr	r2, [pc, #416]	@ (8006810 <DMA_SetConfig+0x258>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d027      	beq.n	80066c2 <DMA_SetConfig+0x10a>
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a67      	ldr	r2, [pc, #412]	@ (8006814 <DMA_SetConfig+0x25c>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d022      	beq.n	80066c2 <DMA_SetConfig+0x10a>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a65      	ldr	r2, [pc, #404]	@ (8006818 <DMA_SetConfig+0x260>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d01d      	beq.n	80066c2 <DMA_SetConfig+0x10a>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a64      	ldr	r2, [pc, #400]	@ (800681c <DMA_SetConfig+0x264>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d018      	beq.n	80066c2 <DMA_SetConfig+0x10a>
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a62      	ldr	r2, [pc, #392]	@ (8006820 <DMA_SetConfig+0x268>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d013      	beq.n	80066c2 <DMA_SetConfig+0x10a>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a61      	ldr	r2, [pc, #388]	@ (8006824 <DMA_SetConfig+0x26c>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d00e      	beq.n	80066c2 <DMA_SetConfig+0x10a>
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a5f      	ldr	r2, [pc, #380]	@ (8006828 <DMA_SetConfig+0x270>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d009      	beq.n	80066c2 <DMA_SetConfig+0x10a>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a5e      	ldr	r2, [pc, #376]	@ (800682c <DMA_SetConfig+0x274>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d004      	beq.n	80066c2 <DMA_SetConfig+0x10a>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a5c      	ldr	r2, [pc, #368]	@ (8006830 <DMA_SetConfig+0x278>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d101      	bne.n	80066c6 <DMA_SetConfig+0x10e>
 80066c2:	2301      	movs	r3, #1
 80066c4:	e000      	b.n	80066c8 <DMA_SetConfig+0x110>
 80066c6:	2300      	movs	r3, #0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00d      	beq.n	80066e8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80066d4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d004      	beq.n	80066e8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80066e6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a39      	ldr	r2, [pc, #228]	@ (80067d4 <DMA_SetConfig+0x21c>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d04a      	beq.n	8006788 <DMA_SetConfig+0x1d0>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a38      	ldr	r2, [pc, #224]	@ (80067d8 <DMA_SetConfig+0x220>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d045      	beq.n	8006788 <DMA_SetConfig+0x1d0>
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a36      	ldr	r2, [pc, #216]	@ (80067dc <DMA_SetConfig+0x224>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d040      	beq.n	8006788 <DMA_SetConfig+0x1d0>
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a35      	ldr	r2, [pc, #212]	@ (80067e0 <DMA_SetConfig+0x228>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d03b      	beq.n	8006788 <DMA_SetConfig+0x1d0>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a33      	ldr	r2, [pc, #204]	@ (80067e4 <DMA_SetConfig+0x22c>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d036      	beq.n	8006788 <DMA_SetConfig+0x1d0>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a32      	ldr	r2, [pc, #200]	@ (80067e8 <DMA_SetConfig+0x230>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d031      	beq.n	8006788 <DMA_SetConfig+0x1d0>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a30      	ldr	r2, [pc, #192]	@ (80067ec <DMA_SetConfig+0x234>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d02c      	beq.n	8006788 <DMA_SetConfig+0x1d0>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a2f      	ldr	r2, [pc, #188]	@ (80067f0 <DMA_SetConfig+0x238>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d027      	beq.n	8006788 <DMA_SetConfig+0x1d0>
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a2d      	ldr	r2, [pc, #180]	@ (80067f4 <DMA_SetConfig+0x23c>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d022      	beq.n	8006788 <DMA_SetConfig+0x1d0>
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a2c      	ldr	r2, [pc, #176]	@ (80067f8 <DMA_SetConfig+0x240>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d01d      	beq.n	8006788 <DMA_SetConfig+0x1d0>
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a2a      	ldr	r2, [pc, #168]	@ (80067fc <DMA_SetConfig+0x244>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d018      	beq.n	8006788 <DMA_SetConfig+0x1d0>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a29      	ldr	r2, [pc, #164]	@ (8006800 <DMA_SetConfig+0x248>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d013      	beq.n	8006788 <DMA_SetConfig+0x1d0>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a27      	ldr	r2, [pc, #156]	@ (8006804 <DMA_SetConfig+0x24c>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d00e      	beq.n	8006788 <DMA_SetConfig+0x1d0>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a26      	ldr	r2, [pc, #152]	@ (8006808 <DMA_SetConfig+0x250>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d009      	beq.n	8006788 <DMA_SetConfig+0x1d0>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a24      	ldr	r2, [pc, #144]	@ (800680c <DMA_SetConfig+0x254>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d004      	beq.n	8006788 <DMA_SetConfig+0x1d0>
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a23      	ldr	r2, [pc, #140]	@ (8006810 <DMA_SetConfig+0x258>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d101      	bne.n	800678c <DMA_SetConfig+0x1d4>
 8006788:	2301      	movs	r3, #1
 800678a:	e000      	b.n	800678e <DMA_SetConfig+0x1d6>
 800678c:	2300      	movs	r3, #0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d059      	beq.n	8006846 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006796:	f003 031f 	and.w	r3, r3, #31
 800679a:	223f      	movs	r2, #63	@ 0x3f
 800679c:	409a      	lsls	r2, r3
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80067b0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	683a      	ldr	r2, [r7, #0]
 80067b8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	2b40      	cmp	r3, #64	@ 0x40
 80067c0:	d138      	bne.n	8006834 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68ba      	ldr	r2, [r7, #8]
 80067d0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80067d2:	e0ae      	b.n	8006932 <DMA_SetConfig+0x37a>
 80067d4:	40020010 	.word	0x40020010
 80067d8:	40020028 	.word	0x40020028
 80067dc:	40020040 	.word	0x40020040
 80067e0:	40020058 	.word	0x40020058
 80067e4:	40020070 	.word	0x40020070
 80067e8:	40020088 	.word	0x40020088
 80067ec:	400200a0 	.word	0x400200a0
 80067f0:	400200b8 	.word	0x400200b8
 80067f4:	40020410 	.word	0x40020410
 80067f8:	40020428 	.word	0x40020428
 80067fc:	40020440 	.word	0x40020440
 8006800:	40020458 	.word	0x40020458
 8006804:	40020470 	.word	0x40020470
 8006808:	40020488 	.word	0x40020488
 800680c:	400204a0 	.word	0x400204a0
 8006810:	400204b8 	.word	0x400204b8
 8006814:	58025408 	.word	0x58025408
 8006818:	5802541c 	.word	0x5802541c
 800681c:	58025430 	.word	0x58025430
 8006820:	58025444 	.word	0x58025444
 8006824:	58025458 	.word	0x58025458
 8006828:	5802546c 	.word	0x5802546c
 800682c:	58025480 	.word	0x58025480
 8006830:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68ba      	ldr	r2, [r7, #8]
 800683a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	60da      	str	r2, [r3, #12]
}
 8006844:	e075      	b.n	8006932 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a3d      	ldr	r2, [pc, #244]	@ (8006940 <DMA_SetConfig+0x388>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d04a      	beq.n	80068e6 <DMA_SetConfig+0x32e>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a3b      	ldr	r2, [pc, #236]	@ (8006944 <DMA_SetConfig+0x38c>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d045      	beq.n	80068e6 <DMA_SetConfig+0x32e>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a3a      	ldr	r2, [pc, #232]	@ (8006948 <DMA_SetConfig+0x390>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d040      	beq.n	80068e6 <DMA_SetConfig+0x32e>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a38      	ldr	r2, [pc, #224]	@ (800694c <DMA_SetConfig+0x394>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d03b      	beq.n	80068e6 <DMA_SetConfig+0x32e>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a37      	ldr	r2, [pc, #220]	@ (8006950 <DMA_SetConfig+0x398>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d036      	beq.n	80068e6 <DMA_SetConfig+0x32e>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a35      	ldr	r2, [pc, #212]	@ (8006954 <DMA_SetConfig+0x39c>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d031      	beq.n	80068e6 <DMA_SetConfig+0x32e>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a34      	ldr	r2, [pc, #208]	@ (8006958 <DMA_SetConfig+0x3a0>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d02c      	beq.n	80068e6 <DMA_SetConfig+0x32e>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a32      	ldr	r2, [pc, #200]	@ (800695c <DMA_SetConfig+0x3a4>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d027      	beq.n	80068e6 <DMA_SetConfig+0x32e>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a31      	ldr	r2, [pc, #196]	@ (8006960 <DMA_SetConfig+0x3a8>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d022      	beq.n	80068e6 <DMA_SetConfig+0x32e>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a2f      	ldr	r2, [pc, #188]	@ (8006964 <DMA_SetConfig+0x3ac>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d01d      	beq.n	80068e6 <DMA_SetConfig+0x32e>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a2e      	ldr	r2, [pc, #184]	@ (8006968 <DMA_SetConfig+0x3b0>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d018      	beq.n	80068e6 <DMA_SetConfig+0x32e>
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a2c      	ldr	r2, [pc, #176]	@ (800696c <DMA_SetConfig+0x3b4>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d013      	beq.n	80068e6 <DMA_SetConfig+0x32e>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a2b      	ldr	r2, [pc, #172]	@ (8006970 <DMA_SetConfig+0x3b8>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d00e      	beq.n	80068e6 <DMA_SetConfig+0x32e>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a29      	ldr	r2, [pc, #164]	@ (8006974 <DMA_SetConfig+0x3bc>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d009      	beq.n	80068e6 <DMA_SetConfig+0x32e>
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a28      	ldr	r2, [pc, #160]	@ (8006978 <DMA_SetConfig+0x3c0>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d004      	beq.n	80068e6 <DMA_SetConfig+0x32e>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a26      	ldr	r2, [pc, #152]	@ (800697c <DMA_SetConfig+0x3c4>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d101      	bne.n	80068ea <DMA_SetConfig+0x332>
 80068e6:	2301      	movs	r3, #1
 80068e8:	e000      	b.n	80068ec <DMA_SetConfig+0x334>
 80068ea:	2300      	movs	r3, #0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d020      	beq.n	8006932 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068f4:	f003 031f 	and.w	r3, r3, #31
 80068f8:	2201      	movs	r2, #1
 80068fa:	409a      	lsls	r2, r3
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	683a      	ldr	r2, [r7, #0]
 8006906:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	2b40      	cmp	r3, #64	@ 0x40
 800690e:	d108      	bne.n	8006922 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68ba      	ldr	r2, [r7, #8]
 800691e:	60da      	str	r2, [r3, #12]
}
 8006920:	e007      	b.n	8006932 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68ba      	ldr	r2, [r7, #8]
 8006928:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	60da      	str	r2, [r3, #12]
}
 8006932:	bf00      	nop
 8006934:	371c      	adds	r7, #28
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	48022c08 	.word	0x48022c08
 8006944:	48022c1c 	.word	0x48022c1c
 8006948:	48022c30 	.word	0x48022c30
 800694c:	48022c44 	.word	0x48022c44
 8006950:	48022c58 	.word	0x48022c58
 8006954:	48022c6c 	.word	0x48022c6c
 8006958:	48022c80 	.word	0x48022c80
 800695c:	48022c94 	.word	0x48022c94
 8006960:	58025408 	.word	0x58025408
 8006964:	5802541c 	.word	0x5802541c
 8006968:	58025430 	.word	0x58025430
 800696c:	58025444 	.word	0x58025444
 8006970:	58025458 	.word	0x58025458
 8006974:	5802546c 	.word	0x5802546c
 8006978:	58025480 	.word	0x58025480
 800697c:	58025494 	.word	0x58025494

08006980 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006980:	b480      	push	{r7}
 8006982:	b085      	sub	sp, #20
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a42      	ldr	r2, [pc, #264]	@ (8006a98 <DMA_CalcBaseAndBitshift+0x118>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d04a      	beq.n	8006a28 <DMA_CalcBaseAndBitshift+0xa8>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a41      	ldr	r2, [pc, #260]	@ (8006a9c <DMA_CalcBaseAndBitshift+0x11c>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d045      	beq.n	8006a28 <DMA_CalcBaseAndBitshift+0xa8>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a3f      	ldr	r2, [pc, #252]	@ (8006aa0 <DMA_CalcBaseAndBitshift+0x120>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d040      	beq.n	8006a28 <DMA_CalcBaseAndBitshift+0xa8>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a3e      	ldr	r2, [pc, #248]	@ (8006aa4 <DMA_CalcBaseAndBitshift+0x124>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d03b      	beq.n	8006a28 <DMA_CalcBaseAndBitshift+0xa8>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a3c      	ldr	r2, [pc, #240]	@ (8006aa8 <DMA_CalcBaseAndBitshift+0x128>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d036      	beq.n	8006a28 <DMA_CalcBaseAndBitshift+0xa8>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a3b      	ldr	r2, [pc, #236]	@ (8006aac <DMA_CalcBaseAndBitshift+0x12c>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d031      	beq.n	8006a28 <DMA_CalcBaseAndBitshift+0xa8>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a39      	ldr	r2, [pc, #228]	@ (8006ab0 <DMA_CalcBaseAndBitshift+0x130>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d02c      	beq.n	8006a28 <DMA_CalcBaseAndBitshift+0xa8>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a38      	ldr	r2, [pc, #224]	@ (8006ab4 <DMA_CalcBaseAndBitshift+0x134>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d027      	beq.n	8006a28 <DMA_CalcBaseAndBitshift+0xa8>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a36      	ldr	r2, [pc, #216]	@ (8006ab8 <DMA_CalcBaseAndBitshift+0x138>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d022      	beq.n	8006a28 <DMA_CalcBaseAndBitshift+0xa8>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a35      	ldr	r2, [pc, #212]	@ (8006abc <DMA_CalcBaseAndBitshift+0x13c>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d01d      	beq.n	8006a28 <DMA_CalcBaseAndBitshift+0xa8>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a33      	ldr	r2, [pc, #204]	@ (8006ac0 <DMA_CalcBaseAndBitshift+0x140>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d018      	beq.n	8006a28 <DMA_CalcBaseAndBitshift+0xa8>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a32      	ldr	r2, [pc, #200]	@ (8006ac4 <DMA_CalcBaseAndBitshift+0x144>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d013      	beq.n	8006a28 <DMA_CalcBaseAndBitshift+0xa8>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a30      	ldr	r2, [pc, #192]	@ (8006ac8 <DMA_CalcBaseAndBitshift+0x148>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d00e      	beq.n	8006a28 <DMA_CalcBaseAndBitshift+0xa8>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a2f      	ldr	r2, [pc, #188]	@ (8006acc <DMA_CalcBaseAndBitshift+0x14c>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d009      	beq.n	8006a28 <DMA_CalcBaseAndBitshift+0xa8>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a2d      	ldr	r2, [pc, #180]	@ (8006ad0 <DMA_CalcBaseAndBitshift+0x150>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d004      	beq.n	8006a28 <DMA_CalcBaseAndBitshift+0xa8>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a2c      	ldr	r2, [pc, #176]	@ (8006ad4 <DMA_CalcBaseAndBitshift+0x154>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d101      	bne.n	8006a2c <DMA_CalcBaseAndBitshift+0xac>
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e000      	b.n	8006a2e <DMA_CalcBaseAndBitshift+0xae>
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d024      	beq.n	8006a7c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	3b10      	subs	r3, #16
 8006a3a:	4a27      	ldr	r2, [pc, #156]	@ (8006ad8 <DMA_CalcBaseAndBitshift+0x158>)
 8006a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a40:	091b      	lsrs	r3, r3, #4
 8006a42:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f003 0307 	and.w	r3, r3, #7
 8006a4a:	4a24      	ldr	r2, [pc, #144]	@ (8006adc <DMA_CalcBaseAndBitshift+0x15c>)
 8006a4c:	5cd3      	ldrb	r3, [r2, r3]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2b03      	cmp	r3, #3
 8006a58:	d908      	bls.n	8006a6c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	461a      	mov	r2, r3
 8006a60:	4b1f      	ldr	r3, [pc, #124]	@ (8006ae0 <DMA_CalcBaseAndBitshift+0x160>)
 8006a62:	4013      	ands	r3, r2
 8006a64:	1d1a      	adds	r2, r3, #4
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	659a      	str	r2, [r3, #88]	@ 0x58
 8006a6a:	e00d      	b.n	8006a88 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	461a      	mov	r2, r3
 8006a72:	4b1b      	ldr	r3, [pc, #108]	@ (8006ae0 <DMA_CalcBaseAndBitshift+0x160>)
 8006a74:	4013      	ands	r3, r2
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a7a:	e005      	b.n	8006a88 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3714      	adds	r7, #20
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr
 8006a98:	40020010 	.word	0x40020010
 8006a9c:	40020028 	.word	0x40020028
 8006aa0:	40020040 	.word	0x40020040
 8006aa4:	40020058 	.word	0x40020058
 8006aa8:	40020070 	.word	0x40020070
 8006aac:	40020088 	.word	0x40020088
 8006ab0:	400200a0 	.word	0x400200a0
 8006ab4:	400200b8 	.word	0x400200b8
 8006ab8:	40020410 	.word	0x40020410
 8006abc:	40020428 	.word	0x40020428
 8006ac0:	40020440 	.word	0x40020440
 8006ac4:	40020458 	.word	0x40020458
 8006ac8:	40020470 	.word	0x40020470
 8006acc:	40020488 	.word	0x40020488
 8006ad0:	400204a0 	.word	0x400204a0
 8006ad4:	400204b8 	.word	0x400204b8
 8006ad8:	aaaaaaab 	.word	0xaaaaaaab
 8006adc:	08013420 	.word	0x08013420
 8006ae0:	fffffc00 	.word	0xfffffc00

08006ae4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b085      	sub	sp, #20
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006aec:	2300      	movs	r3, #0
 8006aee:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	699b      	ldr	r3, [r3, #24]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d120      	bne.n	8006b3a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006afc:	2b03      	cmp	r3, #3
 8006afe:	d858      	bhi.n	8006bb2 <DMA_CheckFifoParam+0xce>
 8006b00:	a201      	add	r2, pc, #4	@ (adr r2, 8006b08 <DMA_CheckFifoParam+0x24>)
 8006b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b06:	bf00      	nop
 8006b08:	08006b19 	.word	0x08006b19
 8006b0c:	08006b2b 	.word	0x08006b2b
 8006b10:	08006b19 	.word	0x08006b19
 8006b14:	08006bb3 	.word	0x08006bb3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d048      	beq.n	8006bb6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006b28:	e045      	b.n	8006bb6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b2e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006b32:	d142      	bne.n	8006bba <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006b38:	e03f      	b.n	8006bba <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b42:	d123      	bne.n	8006b8c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b48:	2b03      	cmp	r3, #3
 8006b4a:	d838      	bhi.n	8006bbe <DMA_CheckFifoParam+0xda>
 8006b4c:	a201      	add	r2, pc, #4	@ (adr r2, 8006b54 <DMA_CheckFifoParam+0x70>)
 8006b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b52:	bf00      	nop
 8006b54:	08006b65 	.word	0x08006b65
 8006b58:	08006b6b 	.word	0x08006b6b
 8006b5c:	08006b65 	.word	0x08006b65
 8006b60:	08006b7d 	.word	0x08006b7d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	73fb      	strb	r3, [r7, #15]
        break;
 8006b68:	e030      	b.n	8006bcc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b6e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d025      	beq.n	8006bc2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006b7a:	e022      	b.n	8006bc2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b80:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006b84:	d11f      	bne.n	8006bc6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006b8a:	e01c      	b.n	8006bc6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d902      	bls.n	8006b9a <DMA_CheckFifoParam+0xb6>
 8006b94:	2b03      	cmp	r3, #3
 8006b96:	d003      	beq.n	8006ba0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006b98:	e018      	b.n	8006bcc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	73fb      	strb	r3, [r7, #15]
        break;
 8006b9e:	e015      	b.n	8006bcc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ba4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d00e      	beq.n	8006bca <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	73fb      	strb	r3, [r7, #15]
    break;
 8006bb0:	e00b      	b.n	8006bca <DMA_CheckFifoParam+0xe6>
        break;
 8006bb2:	bf00      	nop
 8006bb4:	e00a      	b.n	8006bcc <DMA_CheckFifoParam+0xe8>
        break;
 8006bb6:	bf00      	nop
 8006bb8:	e008      	b.n	8006bcc <DMA_CheckFifoParam+0xe8>
        break;
 8006bba:	bf00      	nop
 8006bbc:	e006      	b.n	8006bcc <DMA_CheckFifoParam+0xe8>
        break;
 8006bbe:	bf00      	nop
 8006bc0:	e004      	b.n	8006bcc <DMA_CheckFifoParam+0xe8>
        break;
 8006bc2:	bf00      	nop
 8006bc4:	e002      	b.n	8006bcc <DMA_CheckFifoParam+0xe8>
        break;
 8006bc6:	bf00      	nop
 8006bc8:	e000      	b.n	8006bcc <DMA_CheckFifoParam+0xe8>
    break;
 8006bca:	bf00      	nop
    }
  }

  return status;
 8006bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3714      	adds	r7, #20
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop

08006bdc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b085      	sub	sp, #20
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a38      	ldr	r2, [pc, #224]	@ (8006cd0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d022      	beq.n	8006c3a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a36      	ldr	r2, [pc, #216]	@ (8006cd4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d01d      	beq.n	8006c3a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a35      	ldr	r2, [pc, #212]	@ (8006cd8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d018      	beq.n	8006c3a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a33      	ldr	r2, [pc, #204]	@ (8006cdc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d013      	beq.n	8006c3a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a32      	ldr	r2, [pc, #200]	@ (8006ce0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d00e      	beq.n	8006c3a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a30      	ldr	r2, [pc, #192]	@ (8006ce4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d009      	beq.n	8006c3a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a2f      	ldr	r2, [pc, #188]	@ (8006ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d004      	beq.n	8006c3a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a2d      	ldr	r2, [pc, #180]	@ (8006cec <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d101      	bne.n	8006c3e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e000      	b.n	8006c40 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006c3e:	2300      	movs	r3, #0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d01a      	beq.n	8006c7a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	3b08      	subs	r3, #8
 8006c4c:	4a28      	ldr	r2, [pc, #160]	@ (8006cf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c52:	091b      	lsrs	r3, r3, #4
 8006c54:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	4b26      	ldr	r3, [pc, #152]	@ (8006cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006c5a:	4413      	add	r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	461a      	mov	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a24      	ldr	r2, [pc, #144]	@ (8006cf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006c68:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f003 031f 	and.w	r3, r3, #31
 8006c70:	2201      	movs	r2, #1
 8006c72:	409a      	lsls	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006c78:	e024      	b.n	8006cc4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	3b10      	subs	r3, #16
 8006c82:	4a1e      	ldr	r2, [pc, #120]	@ (8006cfc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006c84:	fba2 2303 	umull	r2, r3, r2, r3
 8006c88:	091b      	lsrs	r3, r3, #4
 8006c8a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	4a1c      	ldr	r2, [pc, #112]	@ (8006d00 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d806      	bhi.n	8006ca2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	4a1b      	ldr	r2, [pc, #108]	@ (8006d04 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d902      	bls.n	8006ca2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	3308      	adds	r3, #8
 8006ca0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	4b18      	ldr	r3, [pc, #96]	@ (8006d08 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006ca6:	4413      	add	r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	461a      	mov	r2, r3
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a16      	ldr	r2, [pc, #88]	@ (8006d0c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006cb4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f003 031f 	and.w	r3, r3, #31
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	409a      	lsls	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006cc4:	bf00      	nop
 8006cc6:	3714      	adds	r7, #20
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr
 8006cd0:	58025408 	.word	0x58025408
 8006cd4:	5802541c 	.word	0x5802541c
 8006cd8:	58025430 	.word	0x58025430
 8006cdc:	58025444 	.word	0x58025444
 8006ce0:	58025458 	.word	0x58025458
 8006ce4:	5802546c 	.word	0x5802546c
 8006ce8:	58025480 	.word	0x58025480
 8006cec:	58025494 	.word	0x58025494
 8006cf0:	cccccccd 	.word	0xcccccccd
 8006cf4:	16009600 	.word	0x16009600
 8006cf8:	58025880 	.word	0x58025880
 8006cfc:	aaaaaaab 	.word	0xaaaaaaab
 8006d00:	400204b8 	.word	0x400204b8
 8006d04:	4002040f 	.word	0x4002040f
 8006d08:	10008200 	.word	0x10008200
 8006d0c:	40020880 	.word	0x40020880

08006d10 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b085      	sub	sp, #20
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d04a      	beq.n	8006dbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2b08      	cmp	r3, #8
 8006d2a:	d847      	bhi.n	8006dbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a25      	ldr	r2, [pc, #148]	@ (8006dc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d022      	beq.n	8006d7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a24      	ldr	r2, [pc, #144]	@ (8006dcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d01d      	beq.n	8006d7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a22      	ldr	r2, [pc, #136]	@ (8006dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d018      	beq.n	8006d7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a21      	ldr	r2, [pc, #132]	@ (8006dd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d013      	beq.n	8006d7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a1f      	ldr	r2, [pc, #124]	@ (8006dd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d00e      	beq.n	8006d7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a1e      	ldr	r2, [pc, #120]	@ (8006ddc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d009      	beq.n	8006d7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a1c      	ldr	r2, [pc, #112]	@ (8006de0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d004      	beq.n	8006d7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a1b      	ldr	r2, [pc, #108]	@ (8006de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d101      	bne.n	8006d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e000      	b.n	8006d82 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006d80:	2300      	movs	r3, #0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00a      	beq.n	8006d9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	4b17      	ldr	r3, [pc, #92]	@ (8006de8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006d8a:	4413      	add	r3, r2
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	461a      	mov	r2, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	4a15      	ldr	r2, [pc, #84]	@ (8006dec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006d98:	671a      	str	r2, [r3, #112]	@ 0x70
 8006d9a:	e009      	b.n	8006db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	4b14      	ldr	r3, [pc, #80]	@ (8006df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006da0:	4413      	add	r3, r2
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	461a      	mov	r2, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a11      	ldr	r2, [pc, #68]	@ (8006df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006dae:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	3b01      	subs	r3, #1
 8006db4:	2201      	movs	r2, #1
 8006db6:	409a      	lsls	r2, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006dbc:	bf00      	nop
 8006dbe:	3714      	adds	r7, #20
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr
 8006dc8:	58025408 	.word	0x58025408
 8006dcc:	5802541c 	.word	0x5802541c
 8006dd0:	58025430 	.word	0x58025430
 8006dd4:	58025444 	.word	0x58025444
 8006dd8:	58025458 	.word	0x58025458
 8006ddc:	5802546c 	.word	0x5802546c
 8006de0:	58025480 	.word	0x58025480
 8006de4:	58025494 	.word	0x58025494
 8006de8:	1600963f 	.word	0x1600963f
 8006dec:	58025940 	.word	0x58025940
 8006df0:	1000823f 	.word	0x1000823f
 8006df4:	40020940 	.word	0x40020940

08006df8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b098      	sub	sp, #96	@ 0x60
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8006e00:	4a84      	ldr	r2, [pc, #528]	@ (8007014 <HAL_FDCAN_Init+0x21c>)
 8006e02:	f107 030c 	add.w	r3, r7, #12
 8006e06:	4611      	mov	r1, r2
 8006e08:	224c      	movs	r2, #76	@ 0x4c
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f00c f948 	bl	80130a0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d101      	bne.n	8006e1a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e1c6      	b.n	80071a8 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a7e      	ldr	r2, [pc, #504]	@ (8007018 <HAL_FDCAN_Init+0x220>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d106      	bne.n	8006e32 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d106      	bne.n	8006e4c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f7fb fa98 	bl	800237c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	699a      	ldr	r2, [r3, #24]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f022 0210 	bic.w	r2, r2, #16
 8006e5a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e5c:	f7fc ff5a 	bl	8003d14 <HAL_GetTick>
 8006e60:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006e62:	e014      	b.n	8006e8e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006e64:	f7fc ff56 	bl	8003d14 <HAL_GetTick>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	2b0a      	cmp	r3, #10
 8006e70:	d90d      	bls.n	8006e8e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006e78:	f043 0201 	orr.w	r2, r3, #1
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2203      	movs	r2, #3
 8006e86:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e18c      	b.n	80071a8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	699b      	ldr	r3, [r3, #24]
 8006e94:	f003 0308 	and.w	r3, r3, #8
 8006e98:	2b08      	cmp	r3, #8
 8006e9a:	d0e3      	beq.n	8006e64 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	699a      	ldr	r2, [r3, #24]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f042 0201 	orr.w	r2, r2, #1
 8006eaa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006eac:	f7fc ff32 	bl	8003d14 <HAL_GetTick>
 8006eb0:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006eb2:	e014      	b.n	8006ede <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006eb4:	f7fc ff2e 	bl	8003d14 <HAL_GetTick>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	2b0a      	cmp	r3, #10
 8006ec0:	d90d      	bls.n	8006ede <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006ec8:	f043 0201 	orr.w	r2, r3, #1
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2203      	movs	r2, #3
 8006ed6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e164      	b.n	80071a8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	699b      	ldr	r3, [r3, #24]
 8006ee4:	f003 0301 	and.w	r3, r3, #1
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d0e3      	beq.n	8006eb4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	699a      	ldr	r2, [r3, #24]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f042 0202 	orr.w	r2, r2, #2
 8006efa:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	7c1b      	ldrb	r3, [r3, #16]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d108      	bne.n	8006f16 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	699a      	ldr	r2, [r3, #24]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f12:	619a      	str	r2, [r3, #24]
 8006f14:	e007      	b.n	8006f26 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	699a      	ldr	r2, [r3, #24]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f24:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	7c5b      	ldrb	r3, [r3, #17]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d108      	bne.n	8006f40 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	699a      	ldr	r2, [r3, #24]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006f3c:	619a      	str	r2, [r3, #24]
 8006f3e:	e007      	b.n	8006f50 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	699a      	ldr	r2, [r3, #24]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006f4e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	7c9b      	ldrb	r3, [r3, #18]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d108      	bne.n	8006f6a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	699a      	ldr	r2, [r3, #24]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006f66:	619a      	str	r2, [r3, #24]
 8006f68:	e007      	b.n	8006f7a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	699a      	ldr	r2, [r3, #24]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006f78:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	699b      	ldr	r3, [r3, #24]
 8006f80:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	689a      	ldr	r2, [r3, #8]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	430a      	orrs	r2, r1
 8006f8e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	699a      	ldr	r2, [r3, #24]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8006f9e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	691a      	ldr	r2, [r3, #16]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f022 0210 	bic.w	r2, r2, #16
 8006fae:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d108      	bne.n	8006fca <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	699a      	ldr	r2, [r3, #24]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f042 0204 	orr.w	r2, r2, #4
 8006fc6:	619a      	str	r2, [r3, #24]
 8006fc8:	e030      	b.n	800702c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d02c      	beq.n	800702c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	2b02      	cmp	r3, #2
 8006fd8:	d020      	beq.n	800701c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	699a      	ldr	r2, [r3, #24]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006fe8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	691a      	ldr	r2, [r3, #16]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f042 0210 	orr.w	r2, r2, #16
 8006ff8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	2b03      	cmp	r3, #3
 8007000:	d114      	bne.n	800702c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	699a      	ldr	r2, [r3, #24]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f042 0220 	orr.w	r2, r2, #32
 8007010:	619a      	str	r2, [r3, #24]
 8007012:	e00b      	b.n	800702c <HAL_FDCAN_Init+0x234>
 8007014:	0801337c 	.word	0x0801337c
 8007018:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	699a      	ldr	r2, [r3, #24]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f042 0220 	orr.w	r2, r2, #32
 800702a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	699b      	ldr	r3, [r3, #24]
 8007030:	3b01      	subs	r3, #1
 8007032:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	69db      	ldr	r3, [r3, #28]
 8007038:	3b01      	subs	r3, #1
 800703a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800703c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a1b      	ldr	r3, [r3, #32]
 8007042:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007044:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	695b      	ldr	r3, [r3, #20]
 800704c:	3b01      	subs	r3, #1
 800704e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007054:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007056:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007060:	d115      	bne.n	800708e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007066:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800706c:	3b01      	subs	r3, #1
 800706e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007070:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007076:	3b01      	subs	r3, #1
 8007078:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800707a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007082:	3b01      	subs	r3, #1
 8007084:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800708a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800708c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00a      	beq.n	80070ac <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	430a      	orrs	r2, r1
 80070a8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070b4:	4413      	add	r3, r2
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d011      	beq.n	80070de <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80070c2:	f023 0107 	bic.w	r1, r3, #7
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	3360      	adds	r3, #96	@ 0x60
 80070ce:	443b      	add	r3, r7
 80070d0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	430a      	orrs	r2, r1
 80070da:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d011      	beq.n	800710a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80070ee:	f023 0107 	bic.w	r1, r3, #7
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	3360      	adds	r3, #96	@ 0x60
 80070fa:	443b      	add	r3, r7
 80070fc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	430a      	orrs	r2, r1
 8007106:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800710e:	2b00      	cmp	r3, #0
 8007110:	d012      	beq.n	8007138 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800711a:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	3360      	adds	r3, #96	@ 0x60
 8007126:	443b      	add	r3, r7
 8007128:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800712c:	011a      	lsls	r2, r3, #4
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	430a      	orrs	r2, r1
 8007134:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800713c:	2b00      	cmp	r3, #0
 800713e:	d012      	beq.n	8007166 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007148:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	3360      	adds	r3, #96	@ 0x60
 8007154:	443b      	add	r3, r7
 8007156:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800715a:	021a      	lsls	r2, r3, #8
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	430a      	orrs	r2, r1
 8007162:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a11      	ldr	r2, [pc, #68]	@ (80071b0 <HAL_FDCAN_Init+0x3b8>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d107      	bne.n	8007180 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	689a      	ldr	r2, [r3, #8]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	f022 0203 	bic.w	r2, r2, #3
 800717e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 f80b 	bl	80071b4 <FDCAN_CalcultateRamBlockAddresses>
 800719e:	4603      	mov	r3, r0
 80071a0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 80071a4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3760      	adds	r7, #96	@ 0x60
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	4000a000 	.word	0x4000a000

080071b4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b085      	sub	sp, #20
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071c0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80071ca:	4ba7      	ldr	r3, [pc, #668]	@ (8007468 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80071cc:	4013      	ands	r3, r2
 80071ce:	68ba      	ldr	r2, [r7, #8]
 80071d0:	0091      	lsls	r1, r2, #2
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	6812      	ldr	r2, [r2, #0]
 80071d6:	430b      	orrs	r3, r1
 80071d8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071e4:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ec:	041a      	lsls	r2, r3, #16
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	430a      	orrs	r2, r1
 80071f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071fc:	68ba      	ldr	r2, [r7, #8]
 80071fe:	4413      	add	r3, r2
 8007200:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800720a:	4b97      	ldr	r3, [pc, #604]	@ (8007468 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800720c:	4013      	ands	r3, r2
 800720e:	68ba      	ldr	r2, [r7, #8]
 8007210:	0091      	lsls	r1, r2, #2
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	6812      	ldr	r2, [r2, #0]
 8007216:	430b      	orrs	r3, r1
 8007218:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007224:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800722c:	041a      	lsls	r2, r3, #16
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	430a      	orrs	r2, r1
 8007234:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800723c:	005b      	lsls	r3, r3, #1
 800723e:	68ba      	ldr	r2, [r7, #8]
 8007240:	4413      	add	r3, r2
 8007242:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800724c:	4b86      	ldr	r3, [pc, #536]	@ (8007468 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800724e:	4013      	ands	r3, r2
 8007250:	68ba      	ldr	r2, [r7, #8]
 8007252:	0091      	lsls	r1, r2, #2
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	6812      	ldr	r2, [r2, #0]
 8007258:	430b      	orrs	r3, r1
 800725a:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007266:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800726e:	041a      	lsls	r2, r3, #16
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	430a      	orrs	r2, r1
 8007276:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007282:	fb02 f303 	mul.w	r3, r2, r3
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	4413      	add	r3, r2
 800728a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8007294:	4b74      	ldr	r3, [pc, #464]	@ (8007468 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007296:	4013      	ands	r3, r2
 8007298:	68ba      	ldr	r2, [r7, #8]
 800729a:	0091      	lsls	r1, r2, #2
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	6812      	ldr	r2, [r2, #0]
 80072a0:	430b      	orrs	r3, r1
 80072a2:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80072ae:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072b6:	041a      	lsls	r2, r3, #16
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	430a      	orrs	r2, r1
 80072be:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80072ca:	fb02 f303 	mul.w	r3, r2, r3
 80072ce:	68ba      	ldr	r2, [r7, #8]
 80072d0:	4413      	add	r3, r2
 80072d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80072dc:	4b62      	ldr	r3, [pc, #392]	@ (8007468 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80072de:	4013      	ands	r3, r2
 80072e0:	68ba      	ldr	r2, [r7, #8]
 80072e2:	0091      	lsls	r1, r2, #2
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	6812      	ldr	r2, [r2, #0]
 80072e8:	430b      	orrs	r3, r1
 80072ea:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80072f6:	fb02 f303 	mul.w	r3, r2, r3
 80072fa:	68ba      	ldr	r2, [r7, #8]
 80072fc:	4413      	add	r3, r2
 80072fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8007308:	4b57      	ldr	r3, [pc, #348]	@ (8007468 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800730a:	4013      	ands	r3, r2
 800730c:	68ba      	ldr	r2, [r7, #8]
 800730e:	0091      	lsls	r1, r2, #2
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	6812      	ldr	r2, [r2, #0]
 8007314:	430b      	orrs	r3, r1
 8007316:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007322:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800732a:	041a      	lsls	r2, r3, #16
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	430a      	orrs	r2, r1
 8007332:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800733a:	005b      	lsls	r3, r3, #1
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	4413      	add	r3, r2
 8007340:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800734a:	4b47      	ldr	r3, [pc, #284]	@ (8007468 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800734c:	4013      	ands	r3, r2
 800734e:	68ba      	ldr	r2, [r7, #8]
 8007350:	0091      	lsls	r1, r2, #2
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	6812      	ldr	r2, [r2, #0]
 8007356:	430b      	orrs	r3, r1
 8007358:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007364:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800736c:	041a      	lsls	r2, r3, #16
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	430a      	orrs	r2, r1
 8007374:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007380:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007388:	061a      	lsls	r2, r3, #24
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	430a      	orrs	r2, r1
 8007390:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007398:	4b34      	ldr	r3, [pc, #208]	@ (800746c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800739a:	4413      	add	r3, r2
 800739c:	009a      	lsls	r2, r3, #2
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	441a      	add	r2, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073ba:	00db      	lsls	r3, r3, #3
 80073bc:	441a      	add	r2, r3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ca:	6879      	ldr	r1, [r7, #4]
 80073cc:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 80073ce:	fb01 f303 	mul.w	r3, r1, r3
 80073d2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80073d4:	441a      	add	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073e2:	6879      	ldr	r1, [r7, #4]
 80073e4:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 80073e6:	fb01 f303 	mul.w	r3, r1, r3
 80073ea:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80073ec:	441a      	add	r2, r3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073fa:	6879      	ldr	r1, [r7, #4]
 80073fc:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 80073fe:	fb01 f303 	mul.w	r3, r1, r3
 8007402:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8007404:	441a      	add	r2, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007416:	00db      	lsls	r3, r3, #3
 8007418:	441a      	add	r2, r3
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800742a:	6879      	ldr	r1, [r7, #4]
 800742c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800742e:	fb01 f303 	mul.w	r3, r1, r3
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	441a      	add	r2, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007446:	6879      	ldr	r1, [r7, #4]
 8007448:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800744a:	fb01 f303 	mul.w	r3, r1, r3
 800744e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8007450:	441a      	add	r2, r3
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800745e:	4a04      	ldr	r2, [pc, #16]	@ (8007470 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d915      	bls.n	8007490 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007464:	e006      	b.n	8007474 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007466:	bf00      	nop
 8007468:	ffff0003 	.word	0xffff0003
 800746c:	10002b00 	.word	0x10002b00
 8007470:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800747a:	f043 0220 	orr.w	r2, r3, #32
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2203      	movs	r2, #3
 8007488:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	e010      	b.n	80074b2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007494:	60fb      	str	r3, [r7, #12]
 8007496:	e005      	b.n	80074a4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2200      	movs	r2, #0
 800749c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	3304      	adds	r3, #4
 80074a2:	60fb      	str	r3, [r7, #12]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d3f3      	bcc.n	8007498 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3714      	adds	r7, #20
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop

080074c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b089      	sub	sp, #36	@ 0x24
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80074ca:	2300      	movs	r3, #0
 80074cc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80074ce:	4b89      	ldr	r3, [pc, #548]	@ (80076f4 <HAL_GPIO_Init+0x234>)
 80074d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80074d2:	e194      	b.n	80077fe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	2101      	movs	r1, #1
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	fa01 f303 	lsl.w	r3, r1, r3
 80074e0:	4013      	ands	r3, r2
 80074e2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	f000 8186 	beq.w	80077f8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	f003 0303 	and.w	r3, r3, #3
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d005      	beq.n	8007504 <HAL_GPIO_Init+0x44>
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	f003 0303 	and.w	r3, r3, #3
 8007500:	2b02      	cmp	r3, #2
 8007502:	d130      	bne.n	8007566 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	005b      	lsls	r3, r3, #1
 800750e:	2203      	movs	r2, #3
 8007510:	fa02 f303 	lsl.w	r3, r2, r3
 8007514:	43db      	mvns	r3, r3
 8007516:	69ba      	ldr	r2, [r7, #24]
 8007518:	4013      	ands	r3, r2
 800751a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	68da      	ldr	r2, [r3, #12]
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	005b      	lsls	r3, r3, #1
 8007524:	fa02 f303 	lsl.w	r3, r2, r3
 8007528:	69ba      	ldr	r2, [r7, #24]
 800752a:	4313      	orrs	r3, r2
 800752c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	69ba      	ldr	r2, [r7, #24]
 8007532:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800753a:	2201      	movs	r2, #1
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	fa02 f303 	lsl.w	r3, r2, r3
 8007542:	43db      	mvns	r3, r3
 8007544:	69ba      	ldr	r2, [r7, #24]
 8007546:	4013      	ands	r3, r2
 8007548:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	091b      	lsrs	r3, r3, #4
 8007550:	f003 0201 	and.w	r2, r3, #1
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	fa02 f303 	lsl.w	r3, r2, r3
 800755a:	69ba      	ldr	r2, [r7, #24]
 800755c:	4313      	orrs	r3, r2
 800755e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	69ba      	ldr	r2, [r7, #24]
 8007564:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	f003 0303 	and.w	r3, r3, #3
 800756e:	2b03      	cmp	r3, #3
 8007570:	d017      	beq.n	80075a2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	005b      	lsls	r3, r3, #1
 800757c:	2203      	movs	r2, #3
 800757e:	fa02 f303 	lsl.w	r3, r2, r3
 8007582:	43db      	mvns	r3, r3
 8007584:	69ba      	ldr	r2, [r7, #24]
 8007586:	4013      	ands	r3, r2
 8007588:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	689a      	ldr	r2, [r3, #8]
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	005b      	lsls	r3, r3, #1
 8007592:	fa02 f303 	lsl.w	r3, r2, r3
 8007596:	69ba      	ldr	r2, [r7, #24]
 8007598:	4313      	orrs	r3, r2
 800759a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	69ba      	ldr	r2, [r7, #24]
 80075a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	f003 0303 	and.w	r3, r3, #3
 80075aa:	2b02      	cmp	r3, #2
 80075ac:	d123      	bne.n	80075f6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80075ae:	69fb      	ldr	r3, [r7, #28]
 80075b0:	08da      	lsrs	r2, r3, #3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	3208      	adds	r2, #8
 80075b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	f003 0307 	and.w	r3, r3, #7
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	220f      	movs	r2, #15
 80075c6:	fa02 f303 	lsl.w	r3, r2, r3
 80075ca:	43db      	mvns	r3, r3
 80075cc:	69ba      	ldr	r2, [r7, #24]
 80075ce:	4013      	ands	r3, r2
 80075d0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	691a      	ldr	r2, [r3, #16]
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	f003 0307 	and.w	r3, r3, #7
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	fa02 f303 	lsl.w	r3, r2, r3
 80075e2:	69ba      	ldr	r2, [r7, #24]
 80075e4:	4313      	orrs	r3, r2
 80075e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	08da      	lsrs	r2, r3, #3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	3208      	adds	r2, #8
 80075f0:	69b9      	ldr	r1, [r7, #24]
 80075f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	005b      	lsls	r3, r3, #1
 8007600:	2203      	movs	r2, #3
 8007602:	fa02 f303 	lsl.w	r3, r2, r3
 8007606:	43db      	mvns	r3, r3
 8007608:	69ba      	ldr	r2, [r7, #24]
 800760a:	4013      	ands	r3, r2
 800760c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	f003 0203 	and.w	r2, r3, #3
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	005b      	lsls	r3, r3, #1
 800761a:	fa02 f303 	lsl.w	r3, r2, r3
 800761e:	69ba      	ldr	r2, [r7, #24]
 8007620:	4313      	orrs	r3, r2
 8007622:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	69ba      	ldr	r2, [r7, #24]
 8007628:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007632:	2b00      	cmp	r3, #0
 8007634:	f000 80e0 	beq.w	80077f8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007638:	4b2f      	ldr	r3, [pc, #188]	@ (80076f8 <HAL_GPIO_Init+0x238>)
 800763a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800763e:	4a2e      	ldr	r2, [pc, #184]	@ (80076f8 <HAL_GPIO_Init+0x238>)
 8007640:	f043 0302 	orr.w	r3, r3, #2
 8007644:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8007648:	4b2b      	ldr	r3, [pc, #172]	@ (80076f8 <HAL_GPIO_Init+0x238>)
 800764a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800764e:	f003 0302 	and.w	r3, r3, #2
 8007652:	60fb      	str	r3, [r7, #12]
 8007654:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007656:	4a29      	ldr	r2, [pc, #164]	@ (80076fc <HAL_GPIO_Init+0x23c>)
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	089b      	lsrs	r3, r3, #2
 800765c:	3302      	adds	r3, #2
 800765e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007662:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	f003 0303 	and.w	r3, r3, #3
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	220f      	movs	r2, #15
 800766e:	fa02 f303 	lsl.w	r3, r2, r3
 8007672:	43db      	mvns	r3, r3
 8007674:	69ba      	ldr	r2, [r7, #24]
 8007676:	4013      	ands	r3, r2
 8007678:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4a20      	ldr	r2, [pc, #128]	@ (8007700 <HAL_GPIO_Init+0x240>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d052      	beq.n	8007728 <HAL_GPIO_Init+0x268>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4a1f      	ldr	r2, [pc, #124]	@ (8007704 <HAL_GPIO_Init+0x244>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d031      	beq.n	80076ee <HAL_GPIO_Init+0x22e>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a1e      	ldr	r2, [pc, #120]	@ (8007708 <HAL_GPIO_Init+0x248>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d02b      	beq.n	80076ea <HAL_GPIO_Init+0x22a>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4a1d      	ldr	r2, [pc, #116]	@ (800770c <HAL_GPIO_Init+0x24c>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d025      	beq.n	80076e6 <HAL_GPIO_Init+0x226>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4a1c      	ldr	r2, [pc, #112]	@ (8007710 <HAL_GPIO_Init+0x250>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d01f      	beq.n	80076e2 <HAL_GPIO_Init+0x222>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4a1b      	ldr	r2, [pc, #108]	@ (8007714 <HAL_GPIO_Init+0x254>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d019      	beq.n	80076de <HAL_GPIO_Init+0x21e>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a1a      	ldr	r2, [pc, #104]	@ (8007718 <HAL_GPIO_Init+0x258>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d013      	beq.n	80076da <HAL_GPIO_Init+0x21a>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a19      	ldr	r2, [pc, #100]	@ (800771c <HAL_GPIO_Init+0x25c>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d00d      	beq.n	80076d6 <HAL_GPIO_Init+0x216>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4a18      	ldr	r2, [pc, #96]	@ (8007720 <HAL_GPIO_Init+0x260>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d007      	beq.n	80076d2 <HAL_GPIO_Init+0x212>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a17      	ldr	r2, [pc, #92]	@ (8007724 <HAL_GPIO_Init+0x264>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d101      	bne.n	80076ce <HAL_GPIO_Init+0x20e>
 80076ca:	2309      	movs	r3, #9
 80076cc:	e02d      	b.n	800772a <HAL_GPIO_Init+0x26a>
 80076ce:	230a      	movs	r3, #10
 80076d0:	e02b      	b.n	800772a <HAL_GPIO_Init+0x26a>
 80076d2:	2308      	movs	r3, #8
 80076d4:	e029      	b.n	800772a <HAL_GPIO_Init+0x26a>
 80076d6:	2307      	movs	r3, #7
 80076d8:	e027      	b.n	800772a <HAL_GPIO_Init+0x26a>
 80076da:	2306      	movs	r3, #6
 80076dc:	e025      	b.n	800772a <HAL_GPIO_Init+0x26a>
 80076de:	2305      	movs	r3, #5
 80076e0:	e023      	b.n	800772a <HAL_GPIO_Init+0x26a>
 80076e2:	2304      	movs	r3, #4
 80076e4:	e021      	b.n	800772a <HAL_GPIO_Init+0x26a>
 80076e6:	2303      	movs	r3, #3
 80076e8:	e01f      	b.n	800772a <HAL_GPIO_Init+0x26a>
 80076ea:	2302      	movs	r3, #2
 80076ec:	e01d      	b.n	800772a <HAL_GPIO_Init+0x26a>
 80076ee:	2301      	movs	r3, #1
 80076f0:	e01b      	b.n	800772a <HAL_GPIO_Init+0x26a>
 80076f2:	bf00      	nop
 80076f4:	58000080 	.word	0x58000080
 80076f8:	58024400 	.word	0x58024400
 80076fc:	58000400 	.word	0x58000400
 8007700:	58020000 	.word	0x58020000
 8007704:	58020400 	.word	0x58020400
 8007708:	58020800 	.word	0x58020800
 800770c:	58020c00 	.word	0x58020c00
 8007710:	58021000 	.word	0x58021000
 8007714:	58021400 	.word	0x58021400
 8007718:	58021800 	.word	0x58021800
 800771c:	58021c00 	.word	0x58021c00
 8007720:	58022000 	.word	0x58022000
 8007724:	58022400 	.word	0x58022400
 8007728:	2300      	movs	r3, #0
 800772a:	69fa      	ldr	r2, [r7, #28]
 800772c:	f002 0203 	and.w	r2, r2, #3
 8007730:	0092      	lsls	r2, r2, #2
 8007732:	4093      	lsls	r3, r2
 8007734:	69ba      	ldr	r2, [r7, #24]
 8007736:	4313      	orrs	r3, r2
 8007738:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800773a:	4938      	ldr	r1, [pc, #224]	@ (800781c <HAL_GPIO_Init+0x35c>)
 800773c:	69fb      	ldr	r3, [r7, #28]
 800773e:	089b      	lsrs	r3, r3, #2
 8007740:	3302      	adds	r3, #2
 8007742:	69ba      	ldr	r2, [r7, #24]
 8007744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007748:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	43db      	mvns	r3, r3
 8007754:	69ba      	ldr	r2, [r7, #24]
 8007756:	4013      	ands	r3, r2
 8007758:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007762:	2b00      	cmp	r3, #0
 8007764:	d003      	beq.n	800776e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007766:	69ba      	ldr	r2, [r7, #24]
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	4313      	orrs	r3, r2
 800776c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800776e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007776:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	43db      	mvns	r3, r3
 8007782:	69ba      	ldr	r2, [r7, #24]
 8007784:	4013      	ands	r3, r2
 8007786:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d003      	beq.n	800779c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007794:	69ba      	ldr	r2, [r7, #24]
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	4313      	orrs	r3, r2
 800779a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800779c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	43db      	mvns	r3, r3
 80077ae:	69ba      	ldr	r2, [r7, #24]
 80077b0:	4013      	ands	r3, r2
 80077b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d003      	beq.n	80077c8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80077c0:	69ba      	ldr	r2, [r7, #24]
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	69ba      	ldr	r2, [r7, #24]
 80077cc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	43db      	mvns	r3, r3
 80077d8:	69ba      	ldr	r2, [r7, #24]
 80077da:	4013      	ands	r3, r2
 80077dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d003      	beq.n	80077f2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80077ea:	69ba      	ldr	r2, [r7, #24]
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	69ba      	ldr	r2, [r7, #24]
 80077f6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	3301      	adds	r3, #1
 80077fc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	fa22 f303 	lsr.w	r3, r2, r3
 8007808:	2b00      	cmp	r3, #0
 800780a:	f47f ae63 	bne.w	80074d4 <HAL_GPIO_Init+0x14>
  }
}
 800780e:	bf00      	nop
 8007810:	bf00      	nop
 8007812:	3724      	adds	r7, #36	@ 0x24
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr
 800781c:	58000400 	.word	0x58000400

08007820 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	460b      	mov	r3, r1
 800782a:	807b      	strh	r3, [r7, #2]
 800782c:	4613      	mov	r3, r2
 800782e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007830:	787b      	ldrb	r3, [r7, #1]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d003      	beq.n	800783e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007836:	887a      	ldrh	r2, [r7, #2]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800783c:	e003      	b.n	8007846 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800783e:	887b      	ldrh	r3, [r7, #2]
 8007840:	041a      	lsls	r2, r3, #16
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	619a      	str	r2, [r3, #24]
}
 8007846:	bf00      	nop
 8007848:	370c      	adds	r7, #12
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr
	...

08007854 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d101      	bne.n	8007866 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	e08b      	b.n	800797e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800786c:	b2db      	uxtb	r3, r3
 800786e:	2b00      	cmp	r3, #0
 8007870:	d106      	bne.n	8007880 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f7fa feea 	bl	8002654 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2224      	movs	r2, #36	@ 0x24
 8007884:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f022 0201 	bic.w	r2, r2, #1
 8007896:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	685a      	ldr	r2, [r3, #4]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80078a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	689a      	ldr	r2, [r3, #8]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80078b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d107      	bne.n	80078ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	689a      	ldr	r2, [r3, #8]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80078ca:	609a      	str	r2, [r3, #8]
 80078cc:	e006      	b.n	80078dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	689a      	ldr	r2, [r3, #8]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80078da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	2b02      	cmp	r3, #2
 80078e2:	d108      	bne.n	80078f6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	685a      	ldr	r2, [r3, #4]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80078f2:	605a      	str	r2, [r3, #4]
 80078f4:	e007      	b.n	8007906 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	685a      	ldr	r2, [r3, #4]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007904:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	6859      	ldr	r1, [r3, #4]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	4b1d      	ldr	r3, [pc, #116]	@ (8007988 <HAL_I2C_Init+0x134>)
 8007912:	430b      	orrs	r3, r1
 8007914:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	68da      	ldr	r2, [r3, #12]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007924:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	691a      	ldr	r2, [r3, #16]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	695b      	ldr	r3, [r3, #20]
 800792e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	699b      	ldr	r3, [r3, #24]
 8007936:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	430a      	orrs	r2, r1
 800793e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	69d9      	ldr	r1, [r3, #28]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6a1a      	ldr	r2, [r3, #32]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	430a      	orrs	r2, r1
 800794e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f042 0201 	orr.w	r2, r2, #1
 800795e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2220      	movs	r2, #32
 800796a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	02008000 	.word	0x02008000

0800798c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800799c:	b2db      	uxtb	r3, r3
 800799e:	2b20      	cmp	r3, #32
 80079a0:	d138      	bne.n	8007a14 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d101      	bne.n	80079b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80079ac:	2302      	movs	r3, #2
 80079ae:	e032      	b.n	8007a16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2224      	movs	r2, #36	@ 0x24
 80079bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f022 0201 	bic.w	r2, r2, #1
 80079ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80079de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	6819      	ldr	r1, [r3, #0]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	683a      	ldr	r2, [r7, #0]
 80079ec:	430a      	orrs	r2, r1
 80079ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f042 0201 	orr.w	r2, r2, #1
 80079fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2220      	movs	r2, #32
 8007a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007a10:	2300      	movs	r3, #0
 8007a12:	e000      	b.n	8007a16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007a14:	2302      	movs	r3, #2
  }
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	370c      	adds	r7, #12
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr

08007a22 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007a22:	b480      	push	{r7}
 8007a24:	b085      	sub	sp, #20
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
 8007a2a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	2b20      	cmp	r3, #32
 8007a36:	d139      	bne.n	8007aac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d101      	bne.n	8007a46 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007a42:	2302      	movs	r3, #2
 8007a44:	e033      	b.n	8007aae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2224      	movs	r2, #36	@ 0x24
 8007a52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f022 0201 	bic.w	r2, r2, #1
 8007a64:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007a74:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	021b      	lsls	r3, r3, #8
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f042 0201 	orr.w	r2, r2, #1
 8007a96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2220      	movs	r2, #32
 8007a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	e000      	b.n	8007aae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007aac:	2302      	movs	r3, #2
  }
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3714      	adds	r7, #20
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr
	...

08007abc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007ac4:	4b19      	ldr	r3, [pc, #100]	@ (8007b2c <HAL_PWREx_ConfigSupply+0x70>)
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	f003 0304 	and.w	r3, r3, #4
 8007acc:	2b04      	cmp	r3, #4
 8007ace:	d00a      	beq.n	8007ae6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007ad0:	4b16      	ldr	r3, [pc, #88]	@ (8007b2c <HAL_PWREx_ConfigSupply+0x70>)
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	f003 0307 	and.w	r3, r3, #7
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d001      	beq.n	8007ae2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e01f      	b.n	8007b22 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	e01d      	b.n	8007b22 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007ae6:	4b11      	ldr	r3, [pc, #68]	@ (8007b2c <HAL_PWREx_ConfigSupply+0x70>)
 8007ae8:	68db      	ldr	r3, [r3, #12]
 8007aea:	f023 0207 	bic.w	r2, r3, #7
 8007aee:	490f      	ldr	r1, [pc, #60]	@ (8007b2c <HAL_PWREx_ConfigSupply+0x70>)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	4313      	orrs	r3, r2
 8007af4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007af6:	f7fc f90d 	bl	8003d14 <HAL_GetTick>
 8007afa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007afc:	e009      	b.n	8007b12 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007afe:	f7fc f909 	bl	8003d14 <HAL_GetTick>
 8007b02:	4602      	mov	r2, r0
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	1ad3      	subs	r3, r2, r3
 8007b08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007b0c:	d901      	bls.n	8007b12 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e007      	b.n	8007b22 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007b12:	4b06      	ldr	r3, [pc, #24]	@ (8007b2c <HAL_PWREx_ConfigSupply+0x70>)
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007b1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b1e:	d1ee      	bne.n	8007afe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3710      	adds	r7, #16
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
 8007b2a:	bf00      	nop
 8007b2c:	58024800 	.word	0x58024800

08007b30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b08c      	sub	sp, #48	@ 0x30
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d102      	bne.n	8007b44 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	f000 bc1f 	b.w	8008382 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f003 0301 	and.w	r3, r3, #1
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	f000 80b3 	beq.w	8007cb8 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b52:	4b95      	ldr	r3, [pc, #596]	@ (8007da8 <HAL_RCC_OscConfig+0x278>)
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007b5c:	4b92      	ldr	r3, [pc, #584]	@ (8007da8 <HAL_RCC_OscConfig+0x278>)
 8007b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b60:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007b62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b64:	2b10      	cmp	r3, #16
 8007b66:	d007      	beq.n	8007b78 <HAL_RCC_OscConfig+0x48>
 8007b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b6a:	2b18      	cmp	r3, #24
 8007b6c:	d112      	bne.n	8007b94 <HAL_RCC_OscConfig+0x64>
 8007b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b70:	f003 0303 	and.w	r3, r3, #3
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	d10d      	bne.n	8007b94 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b78:	4b8b      	ldr	r3, [pc, #556]	@ (8007da8 <HAL_RCC_OscConfig+0x278>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	f000 8098 	beq.w	8007cb6 <HAL_RCC_OscConfig+0x186>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	f040 8093 	bne.w	8007cb6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	e3f6      	b.n	8008382 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b9c:	d106      	bne.n	8007bac <HAL_RCC_OscConfig+0x7c>
 8007b9e:	4b82      	ldr	r3, [pc, #520]	@ (8007da8 <HAL_RCC_OscConfig+0x278>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a81      	ldr	r2, [pc, #516]	@ (8007da8 <HAL_RCC_OscConfig+0x278>)
 8007ba4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ba8:	6013      	str	r3, [r2, #0]
 8007baa:	e058      	b.n	8007c5e <HAL_RCC_OscConfig+0x12e>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d112      	bne.n	8007bda <HAL_RCC_OscConfig+0xaa>
 8007bb4:	4b7c      	ldr	r3, [pc, #496]	@ (8007da8 <HAL_RCC_OscConfig+0x278>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a7b      	ldr	r2, [pc, #492]	@ (8007da8 <HAL_RCC_OscConfig+0x278>)
 8007bba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007bbe:	6013      	str	r3, [r2, #0]
 8007bc0:	4b79      	ldr	r3, [pc, #484]	@ (8007da8 <HAL_RCC_OscConfig+0x278>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a78      	ldr	r2, [pc, #480]	@ (8007da8 <HAL_RCC_OscConfig+0x278>)
 8007bc6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007bca:	6013      	str	r3, [r2, #0]
 8007bcc:	4b76      	ldr	r3, [pc, #472]	@ (8007da8 <HAL_RCC_OscConfig+0x278>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a75      	ldr	r2, [pc, #468]	@ (8007da8 <HAL_RCC_OscConfig+0x278>)
 8007bd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007bd6:	6013      	str	r3, [r2, #0]
 8007bd8:	e041      	b.n	8007c5e <HAL_RCC_OscConfig+0x12e>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007be2:	d112      	bne.n	8007c0a <HAL_RCC_OscConfig+0xda>
 8007be4:	4b70      	ldr	r3, [pc, #448]	@ (8007da8 <HAL_RCC_OscConfig+0x278>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a6f      	ldr	r2, [pc, #444]	@ (8007da8 <HAL_RCC_OscConfig+0x278>)
 8007bea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007bee:	6013      	str	r3, [r2, #0]
 8007bf0:	4b6d      	ldr	r3, [pc, #436]	@ (8007da8 <HAL_RCC_OscConfig+0x278>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a6c      	ldr	r2, [pc, #432]	@ (8007da8 <HAL_RCC_OscConfig+0x278>)
 8007bf6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007bfa:	6013      	str	r3, [r2, #0]
 8007bfc:	4b6a      	ldr	r3, [pc, #424]	@ (8007da8 <HAL_RCC_OscConfig+0x278>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a69      	ldr	r2, [pc, #420]	@ (8007da8 <HAL_RCC_OscConfig+0x278>)
 8007c02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c06:	6013      	str	r3, [r2, #0]
 8007c08:	e029      	b.n	8007c5e <HAL_RCC_OscConfig+0x12e>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8007c12:	d112      	bne.n	8007c3a <HAL_RCC_OscConfig+0x10a>
 8007c14:	4b64      	ldr	r3, [pc, #400]	@ (8007da8 <HAL_RCC_OscConfig+0x278>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a63      	ldr	r2, [pc, #396]	@ (8007da8 <HAL_RCC_OscConfig+0x278>)
 8007c1a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007c1e:	6013      	str	r3, [r2, #0]
 8007c20:	4b61      	ldr	r3, [pc, #388]	@ (8007da8 <HAL_RCC_OscConfig+0x278>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a60      	ldr	r2, [pc, #384]	@ (8007da8 <HAL_RCC_OscConfig+0x278>)
 8007c26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c2a:	6013      	str	r3, [r2, #0]
 8007c2c:	4b5e      	ldr	r3, [pc, #376]	@ (8007da8 <HAL_RCC_OscConfig+0x278>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a5d      	ldr	r2, [pc, #372]	@ (8007da8 <HAL_RCC_OscConfig+0x278>)
 8007c32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c36:	6013      	str	r3, [r2, #0]
 8007c38:	e011      	b.n	8007c5e <HAL_RCC_OscConfig+0x12e>
 8007c3a:	4b5b      	ldr	r3, [pc, #364]	@ (8007da8 <HAL_RCC_OscConfig+0x278>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a5a      	ldr	r2, [pc, #360]	@ (8007da8 <HAL_RCC_OscConfig+0x278>)
 8007c40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c44:	6013      	str	r3, [r2, #0]
 8007c46:	4b58      	ldr	r3, [pc, #352]	@ (8007da8 <HAL_RCC_OscConfig+0x278>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a57      	ldr	r2, [pc, #348]	@ (8007da8 <HAL_RCC_OscConfig+0x278>)
 8007c4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007c50:	6013      	str	r3, [r2, #0]
 8007c52:	4b55      	ldr	r3, [pc, #340]	@ (8007da8 <HAL_RCC_OscConfig+0x278>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a54      	ldr	r2, [pc, #336]	@ (8007da8 <HAL_RCC_OscConfig+0x278>)
 8007c58:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007c5c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d013      	beq.n	8007c8e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c66:	f7fc f855 	bl	8003d14 <HAL_GetTick>
 8007c6a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007c6c:	e008      	b.n	8007c80 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c6e:	f7fc f851 	bl	8003d14 <HAL_GetTick>
 8007c72:	4602      	mov	r2, r0
 8007c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c76:	1ad3      	subs	r3, r2, r3
 8007c78:	2b64      	cmp	r3, #100	@ 0x64
 8007c7a:	d901      	bls.n	8007c80 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8007c7c:	2303      	movs	r3, #3
 8007c7e:	e380      	b.n	8008382 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007c80:	4b49      	ldr	r3, [pc, #292]	@ (8007da8 <HAL_RCC_OscConfig+0x278>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d0f0      	beq.n	8007c6e <HAL_RCC_OscConfig+0x13e>
 8007c8c:	e014      	b.n	8007cb8 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c8e:	f7fc f841 	bl	8003d14 <HAL_GetTick>
 8007c92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007c94:	e008      	b.n	8007ca8 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c96:	f7fc f83d 	bl	8003d14 <HAL_GetTick>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c9e:	1ad3      	subs	r3, r2, r3
 8007ca0:	2b64      	cmp	r3, #100	@ 0x64
 8007ca2:	d901      	bls.n	8007ca8 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8007ca4:	2303      	movs	r3, #3
 8007ca6:	e36c      	b.n	8008382 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007ca8:	4b3f      	ldr	r3, [pc, #252]	@ (8007da8 <HAL_RCC_OscConfig+0x278>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d1f0      	bne.n	8007c96 <HAL_RCC_OscConfig+0x166>
 8007cb4:	e000      	b.n	8007cb8 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cb6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f003 0302 	and.w	r3, r3, #2
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	f000 808c 	beq.w	8007dde <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007cc6:	4b38      	ldr	r3, [pc, #224]	@ (8007da8 <HAL_RCC_OscConfig+0x278>)
 8007cc8:	691b      	ldr	r3, [r3, #16]
 8007cca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007cce:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007cd0:	4b35      	ldr	r3, [pc, #212]	@ (8007da8 <HAL_RCC_OscConfig+0x278>)
 8007cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cd4:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007cd6:	6a3b      	ldr	r3, [r7, #32]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d007      	beq.n	8007cec <HAL_RCC_OscConfig+0x1bc>
 8007cdc:	6a3b      	ldr	r3, [r7, #32]
 8007cde:	2b18      	cmp	r3, #24
 8007ce0:	d137      	bne.n	8007d52 <HAL_RCC_OscConfig+0x222>
 8007ce2:	69fb      	ldr	r3, [r7, #28]
 8007ce4:	f003 0303 	and.w	r3, r3, #3
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d132      	bne.n	8007d52 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007cec:	4b2e      	ldr	r3, [pc, #184]	@ (8007da8 <HAL_RCC_OscConfig+0x278>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f003 0304 	and.w	r3, r3, #4
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d005      	beq.n	8007d04 <HAL_RCC_OscConfig+0x1d4>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d101      	bne.n	8007d04 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	e33e      	b.n	8008382 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007d04:	4b28      	ldr	r3, [pc, #160]	@ (8007da8 <HAL_RCC_OscConfig+0x278>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f023 0219 	bic.w	r2, r3, #25
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	4925      	ldr	r1, [pc, #148]	@ (8007da8 <HAL_RCC_OscConfig+0x278>)
 8007d12:	4313      	orrs	r3, r2
 8007d14:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d16:	f7fb fffd 	bl	8003d14 <HAL_GetTick>
 8007d1a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007d1c:	e008      	b.n	8007d30 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d1e:	f7fb fff9 	bl	8003d14 <HAL_GetTick>
 8007d22:	4602      	mov	r2, r0
 8007d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d26:	1ad3      	subs	r3, r2, r3
 8007d28:	2b02      	cmp	r3, #2
 8007d2a:	d901      	bls.n	8007d30 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8007d2c:	2303      	movs	r3, #3
 8007d2e:	e328      	b.n	8008382 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007d30:	4b1d      	ldr	r3, [pc, #116]	@ (8007da8 <HAL_RCC_OscConfig+0x278>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f003 0304 	and.w	r3, r3, #4
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d0f0      	beq.n	8007d1e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d3c:	4b1a      	ldr	r3, [pc, #104]	@ (8007da8 <HAL_RCC_OscConfig+0x278>)
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	691b      	ldr	r3, [r3, #16]
 8007d48:	061b      	lsls	r3, r3, #24
 8007d4a:	4917      	ldr	r1, [pc, #92]	@ (8007da8 <HAL_RCC_OscConfig+0x278>)
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007d50:	e045      	b.n	8007dde <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d028      	beq.n	8007dac <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007d5a:	4b13      	ldr	r3, [pc, #76]	@ (8007da8 <HAL_RCC_OscConfig+0x278>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f023 0219 	bic.w	r2, r3, #25
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	68db      	ldr	r3, [r3, #12]
 8007d66:	4910      	ldr	r1, [pc, #64]	@ (8007da8 <HAL_RCC_OscConfig+0x278>)
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d6c:	f7fb ffd2 	bl	8003d14 <HAL_GetTick>
 8007d70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007d72:	e008      	b.n	8007d86 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d74:	f7fb ffce 	bl	8003d14 <HAL_GetTick>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d7c:	1ad3      	subs	r3, r2, r3
 8007d7e:	2b02      	cmp	r3, #2
 8007d80:	d901      	bls.n	8007d86 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8007d82:	2303      	movs	r3, #3
 8007d84:	e2fd      	b.n	8008382 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007d86:	4b08      	ldr	r3, [pc, #32]	@ (8007da8 <HAL_RCC_OscConfig+0x278>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f003 0304 	and.w	r3, r3, #4
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d0f0      	beq.n	8007d74 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d92:	4b05      	ldr	r3, [pc, #20]	@ (8007da8 <HAL_RCC_OscConfig+0x278>)
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	691b      	ldr	r3, [r3, #16]
 8007d9e:	061b      	lsls	r3, r3, #24
 8007da0:	4901      	ldr	r1, [pc, #4]	@ (8007da8 <HAL_RCC_OscConfig+0x278>)
 8007da2:	4313      	orrs	r3, r2
 8007da4:	604b      	str	r3, [r1, #4]
 8007da6:	e01a      	b.n	8007dde <HAL_RCC_OscConfig+0x2ae>
 8007da8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007dac:	4b97      	ldr	r3, [pc, #604]	@ (800800c <HAL_RCC_OscConfig+0x4dc>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a96      	ldr	r2, [pc, #600]	@ (800800c <HAL_RCC_OscConfig+0x4dc>)
 8007db2:	f023 0301 	bic.w	r3, r3, #1
 8007db6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007db8:	f7fb ffac 	bl	8003d14 <HAL_GetTick>
 8007dbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007dbe:	e008      	b.n	8007dd2 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007dc0:	f7fb ffa8 	bl	8003d14 <HAL_GetTick>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc8:	1ad3      	subs	r3, r2, r3
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	d901      	bls.n	8007dd2 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8007dce:	2303      	movs	r3, #3
 8007dd0:	e2d7      	b.n	8008382 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007dd2:	4b8e      	ldr	r3, [pc, #568]	@ (800800c <HAL_RCC_OscConfig+0x4dc>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f003 0304 	and.w	r3, r3, #4
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d1f0      	bne.n	8007dc0 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f003 0310 	and.w	r3, r3, #16
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d06a      	beq.n	8007ec0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007dea:	4b88      	ldr	r3, [pc, #544]	@ (800800c <HAL_RCC_OscConfig+0x4dc>)
 8007dec:	691b      	ldr	r3, [r3, #16]
 8007dee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007df2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007df4:	4b85      	ldr	r3, [pc, #532]	@ (800800c <HAL_RCC_OscConfig+0x4dc>)
 8007df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007df8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	2b08      	cmp	r3, #8
 8007dfe:	d007      	beq.n	8007e10 <HAL_RCC_OscConfig+0x2e0>
 8007e00:	69bb      	ldr	r3, [r7, #24]
 8007e02:	2b18      	cmp	r3, #24
 8007e04:	d11b      	bne.n	8007e3e <HAL_RCC_OscConfig+0x30e>
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	f003 0303 	and.w	r3, r3, #3
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d116      	bne.n	8007e3e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007e10:	4b7e      	ldr	r3, [pc, #504]	@ (800800c <HAL_RCC_OscConfig+0x4dc>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d005      	beq.n	8007e28 <HAL_RCC_OscConfig+0x2f8>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	69db      	ldr	r3, [r3, #28]
 8007e20:	2b80      	cmp	r3, #128	@ 0x80
 8007e22:	d001      	beq.n	8007e28 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8007e24:	2301      	movs	r3, #1
 8007e26:	e2ac      	b.n	8008382 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007e28:	4b78      	ldr	r3, [pc, #480]	@ (800800c <HAL_RCC_OscConfig+0x4dc>)
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6a1b      	ldr	r3, [r3, #32]
 8007e34:	061b      	lsls	r3, r3, #24
 8007e36:	4975      	ldr	r1, [pc, #468]	@ (800800c <HAL_RCC_OscConfig+0x4dc>)
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007e3c:	e040      	b.n	8007ec0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	69db      	ldr	r3, [r3, #28]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d023      	beq.n	8007e8e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007e46:	4b71      	ldr	r3, [pc, #452]	@ (800800c <HAL_RCC_OscConfig+0x4dc>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a70      	ldr	r2, [pc, #448]	@ (800800c <HAL_RCC_OscConfig+0x4dc>)
 8007e4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e52:	f7fb ff5f 	bl	8003d14 <HAL_GetTick>
 8007e56:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007e58:	e008      	b.n	8007e6c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007e5a:	f7fb ff5b 	bl	8003d14 <HAL_GetTick>
 8007e5e:	4602      	mov	r2, r0
 8007e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e62:	1ad3      	subs	r3, r2, r3
 8007e64:	2b02      	cmp	r3, #2
 8007e66:	d901      	bls.n	8007e6c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	e28a      	b.n	8008382 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007e6c:	4b67      	ldr	r3, [pc, #412]	@ (800800c <HAL_RCC_OscConfig+0x4dc>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d0f0      	beq.n	8007e5a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007e78:	4b64      	ldr	r3, [pc, #400]	@ (800800c <HAL_RCC_OscConfig+0x4dc>)
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6a1b      	ldr	r3, [r3, #32]
 8007e84:	061b      	lsls	r3, r3, #24
 8007e86:	4961      	ldr	r1, [pc, #388]	@ (800800c <HAL_RCC_OscConfig+0x4dc>)
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	60cb      	str	r3, [r1, #12]
 8007e8c:	e018      	b.n	8007ec0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007e8e:	4b5f      	ldr	r3, [pc, #380]	@ (800800c <HAL_RCC_OscConfig+0x4dc>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a5e      	ldr	r2, [pc, #376]	@ (800800c <HAL_RCC_OscConfig+0x4dc>)
 8007e94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e9a:	f7fb ff3b 	bl	8003d14 <HAL_GetTick>
 8007e9e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007ea0:	e008      	b.n	8007eb4 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007ea2:	f7fb ff37 	bl	8003d14 <HAL_GetTick>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eaa:	1ad3      	subs	r3, r2, r3
 8007eac:	2b02      	cmp	r3, #2
 8007eae:	d901      	bls.n	8007eb4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8007eb0:	2303      	movs	r3, #3
 8007eb2:	e266      	b.n	8008382 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007eb4:	4b55      	ldr	r3, [pc, #340]	@ (800800c <HAL_RCC_OscConfig+0x4dc>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d1f0      	bne.n	8007ea2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 0308 	and.w	r3, r3, #8
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d036      	beq.n	8007f3a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	695b      	ldr	r3, [r3, #20]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d019      	beq.n	8007f08 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ed4:	4b4d      	ldr	r3, [pc, #308]	@ (800800c <HAL_RCC_OscConfig+0x4dc>)
 8007ed6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ed8:	4a4c      	ldr	r2, [pc, #304]	@ (800800c <HAL_RCC_OscConfig+0x4dc>)
 8007eda:	f043 0301 	orr.w	r3, r3, #1
 8007ede:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ee0:	f7fb ff18 	bl	8003d14 <HAL_GetTick>
 8007ee4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007ee6:	e008      	b.n	8007efa <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ee8:	f7fb ff14 	bl	8003d14 <HAL_GetTick>
 8007eec:	4602      	mov	r2, r0
 8007eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef0:	1ad3      	subs	r3, r2, r3
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	d901      	bls.n	8007efa <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	e243      	b.n	8008382 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007efa:	4b44      	ldr	r3, [pc, #272]	@ (800800c <HAL_RCC_OscConfig+0x4dc>)
 8007efc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007efe:	f003 0302 	and.w	r3, r3, #2
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d0f0      	beq.n	8007ee8 <HAL_RCC_OscConfig+0x3b8>
 8007f06:	e018      	b.n	8007f3a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f08:	4b40      	ldr	r3, [pc, #256]	@ (800800c <HAL_RCC_OscConfig+0x4dc>)
 8007f0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f0c:	4a3f      	ldr	r2, [pc, #252]	@ (800800c <HAL_RCC_OscConfig+0x4dc>)
 8007f0e:	f023 0301 	bic.w	r3, r3, #1
 8007f12:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f14:	f7fb fefe 	bl	8003d14 <HAL_GetTick>
 8007f18:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007f1a:	e008      	b.n	8007f2e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f1c:	f7fb fefa 	bl	8003d14 <HAL_GetTick>
 8007f20:	4602      	mov	r2, r0
 8007f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f24:	1ad3      	subs	r3, r2, r3
 8007f26:	2b02      	cmp	r3, #2
 8007f28:	d901      	bls.n	8007f2e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007f2a:	2303      	movs	r3, #3
 8007f2c:	e229      	b.n	8008382 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007f2e:	4b37      	ldr	r3, [pc, #220]	@ (800800c <HAL_RCC_OscConfig+0x4dc>)
 8007f30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f32:	f003 0302 	and.w	r3, r3, #2
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d1f0      	bne.n	8007f1c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f003 0320 	and.w	r3, r3, #32
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d036      	beq.n	8007fb4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	699b      	ldr	r3, [r3, #24]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d019      	beq.n	8007f82 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007f4e:	4b2f      	ldr	r3, [pc, #188]	@ (800800c <HAL_RCC_OscConfig+0x4dc>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a2e      	ldr	r2, [pc, #184]	@ (800800c <HAL_RCC_OscConfig+0x4dc>)
 8007f54:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007f58:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007f5a:	f7fb fedb 	bl	8003d14 <HAL_GetTick>
 8007f5e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007f60:	e008      	b.n	8007f74 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007f62:	f7fb fed7 	bl	8003d14 <HAL_GetTick>
 8007f66:	4602      	mov	r2, r0
 8007f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f6a:	1ad3      	subs	r3, r2, r3
 8007f6c:	2b02      	cmp	r3, #2
 8007f6e:	d901      	bls.n	8007f74 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8007f70:	2303      	movs	r3, #3
 8007f72:	e206      	b.n	8008382 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007f74:	4b25      	ldr	r3, [pc, #148]	@ (800800c <HAL_RCC_OscConfig+0x4dc>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d0f0      	beq.n	8007f62 <HAL_RCC_OscConfig+0x432>
 8007f80:	e018      	b.n	8007fb4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007f82:	4b22      	ldr	r3, [pc, #136]	@ (800800c <HAL_RCC_OscConfig+0x4dc>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a21      	ldr	r2, [pc, #132]	@ (800800c <HAL_RCC_OscConfig+0x4dc>)
 8007f88:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f8c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007f8e:	f7fb fec1 	bl	8003d14 <HAL_GetTick>
 8007f92:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007f94:	e008      	b.n	8007fa8 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007f96:	f7fb febd 	bl	8003d14 <HAL_GetTick>
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f9e:	1ad3      	subs	r3, r2, r3
 8007fa0:	2b02      	cmp	r3, #2
 8007fa2:	d901      	bls.n	8007fa8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8007fa4:	2303      	movs	r3, #3
 8007fa6:	e1ec      	b.n	8008382 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007fa8:	4b18      	ldr	r3, [pc, #96]	@ (800800c <HAL_RCC_OscConfig+0x4dc>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d1f0      	bne.n	8007f96 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f003 0304 	and.w	r3, r3, #4
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	f000 80af 	beq.w	8008120 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007fc2:	4b13      	ldr	r3, [pc, #76]	@ (8008010 <HAL_RCC_OscConfig+0x4e0>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a12      	ldr	r2, [pc, #72]	@ (8008010 <HAL_RCC_OscConfig+0x4e0>)
 8007fc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007fcc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007fce:	f7fb fea1 	bl	8003d14 <HAL_GetTick>
 8007fd2:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007fd4:	e008      	b.n	8007fe8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fd6:	f7fb fe9d 	bl	8003d14 <HAL_GetTick>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fde:	1ad3      	subs	r3, r2, r3
 8007fe0:	2b64      	cmp	r3, #100	@ 0x64
 8007fe2:	d901      	bls.n	8007fe8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8007fe4:	2303      	movs	r3, #3
 8007fe6:	e1cc      	b.n	8008382 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007fe8:	4b09      	ldr	r3, [pc, #36]	@ (8008010 <HAL_RCC_OscConfig+0x4e0>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d0f0      	beq.n	8007fd6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d10b      	bne.n	8008014 <HAL_RCC_OscConfig+0x4e4>
 8007ffc:	4b03      	ldr	r3, [pc, #12]	@ (800800c <HAL_RCC_OscConfig+0x4dc>)
 8007ffe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008000:	4a02      	ldr	r2, [pc, #8]	@ (800800c <HAL_RCC_OscConfig+0x4dc>)
 8008002:	f043 0301 	orr.w	r3, r3, #1
 8008006:	6713      	str	r3, [r2, #112]	@ 0x70
 8008008:	e05b      	b.n	80080c2 <HAL_RCC_OscConfig+0x592>
 800800a:	bf00      	nop
 800800c:	58024400 	.word	0x58024400
 8008010:	58024800 	.word	0x58024800
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d112      	bne.n	8008042 <HAL_RCC_OscConfig+0x512>
 800801c:	4b9d      	ldr	r3, [pc, #628]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 800801e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008020:	4a9c      	ldr	r2, [pc, #624]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 8008022:	f023 0301 	bic.w	r3, r3, #1
 8008026:	6713      	str	r3, [r2, #112]	@ 0x70
 8008028:	4b9a      	ldr	r3, [pc, #616]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 800802a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800802c:	4a99      	ldr	r2, [pc, #612]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 800802e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008032:	6713      	str	r3, [r2, #112]	@ 0x70
 8008034:	4b97      	ldr	r3, [pc, #604]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 8008036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008038:	4a96      	ldr	r2, [pc, #600]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 800803a:	f023 0304 	bic.w	r3, r3, #4
 800803e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008040:	e03f      	b.n	80080c2 <HAL_RCC_OscConfig+0x592>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	2b05      	cmp	r3, #5
 8008048:	d112      	bne.n	8008070 <HAL_RCC_OscConfig+0x540>
 800804a:	4b92      	ldr	r3, [pc, #584]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 800804c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800804e:	4a91      	ldr	r2, [pc, #580]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 8008050:	f043 0304 	orr.w	r3, r3, #4
 8008054:	6713      	str	r3, [r2, #112]	@ 0x70
 8008056:	4b8f      	ldr	r3, [pc, #572]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 8008058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800805a:	4a8e      	ldr	r2, [pc, #568]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 800805c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008060:	6713      	str	r3, [r2, #112]	@ 0x70
 8008062:	4b8c      	ldr	r3, [pc, #560]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 8008064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008066:	4a8b      	ldr	r2, [pc, #556]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 8008068:	f043 0301 	orr.w	r3, r3, #1
 800806c:	6713      	str	r3, [r2, #112]	@ 0x70
 800806e:	e028      	b.n	80080c2 <HAL_RCC_OscConfig+0x592>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	2b85      	cmp	r3, #133	@ 0x85
 8008076:	d112      	bne.n	800809e <HAL_RCC_OscConfig+0x56e>
 8008078:	4b86      	ldr	r3, [pc, #536]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 800807a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800807c:	4a85      	ldr	r2, [pc, #532]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 800807e:	f043 0304 	orr.w	r3, r3, #4
 8008082:	6713      	str	r3, [r2, #112]	@ 0x70
 8008084:	4b83      	ldr	r3, [pc, #524]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 8008086:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008088:	4a82      	ldr	r2, [pc, #520]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 800808a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800808e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008090:	4b80      	ldr	r3, [pc, #512]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 8008092:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008094:	4a7f      	ldr	r2, [pc, #508]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 8008096:	f043 0301 	orr.w	r3, r3, #1
 800809a:	6713      	str	r3, [r2, #112]	@ 0x70
 800809c:	e011      	b.n	80080c2 <HAL_RCC_OscConfig+0x592>
 800809e:	4b7d      	ldr	r3, [pc, #500]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 80080a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080a2:	4a7c      	ldr	r2, [pc, #496]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 80080a4:	f023 0301 	bic.w	r3, r3, #1
 80080a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80080aa:	4b7a      	ldr	r3, [pc, #488]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 80080ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080ae:	4a79      	ldr	r2, [pc, #484]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 80080b0:	f023 0304 	bic.w	r3, r3, #4
 80080b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80080b6:	4b77      	ldr	r3, [pc, #476]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 80080b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080ba:	4a76      	ldr	r2, [pc, #472]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 80080bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080c0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d015      	beq.n	80080f6 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080ca:	f7fb fe23 	bl	8003d14 <HAL_GetTick>
 80080ce:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80080d0:	e00a      	b.n	80080e8 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080d2:	f7fb fe1f 	bl	8003d14 <HAL_GetTick>
 80080d6:	4602      	mov	r2, r0
 80080d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080da:	1ad3      	subs	r3, r2, r3
 80080dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d901      	bls.n	80080e8 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80080e4:	2303      	movs	r3, #3
 80080e6:	e14c      	b.n	8008382 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80080e8:	4b6a      	ldr	r3, [pc, #424]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 80080ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080ec:	f003 0302 	and.w	r3, r3, #2
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d0ee      	beq.n	80080d2 <HAL_RCC_OscConfig+0x5a2>
 80080f4:	e014      	b.n	8008120 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080f6:	f7fb fe0d 	bl	8003d14 <HAL_GetTick>
 80080fa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80080fc:	e00a      	b.n	8008114 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080fe:	f7fb fe09 	bl	8003d14 <HAL_GetTick>
 8008102:	4602      	mov	r2, r0
 8008104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008106:	1ad3      	subs	r3, r2, r3
 8008108:	f241 3288 	movw	r2, #5000	@ 0x1388
 800810c:	4293      	cmp	r3, r2
 800810e:	d901      	bls.n	8008114 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8008110:	2303      	movs	r3, #3
 8008112:	e136      	b.n	8008382 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008114:	4b5f      	ldr	r3, [pc, #380]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 8008116:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008118:	f003 0302 	and.w	r3, r3, #2
 800811c:	2b00      	cmp	r3, #0
 800811e:	d1ee      	bne.n	80080fe <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008124:	2b00      	cmp	r3, #0
 8008126:	f000 812b 	beq.w	8008380 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800812a:	4b5a      	ldr	r3, [pc, #360]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 800812c:	691b      	ldr	r3, [r3, #16]
 800812e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008132:	2b18      	cmp	r3, #24
 8008134:	f000 80bb 	beq.w	80082ae <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800813c:	2b02      	cmp	r3, #2
 800813e:	f040 8095 	bne.w	800826c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008142:	4b54      	ldr	r3, [pc, #336]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a53      	ldr	r2, [pc, #332]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 8008148:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800814c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800814e:	f7fb fde1 	bl	8003d14 <HAL_GetTick>
 8008152:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008154:	e008      	b.n	8008168 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008156:	f7fb fddd 	bl	8003d14 <HAL_GetTick>
 800815a:	4602      	mov	r2, r0
 800815c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800815e:	1ad3      	subs	r3, r2, r3
 8008160:	2b02      	cmp	r3, #2
 8008162:	d901      	bls.n	8008168 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8008164:	2303      	movs	r3, #3
 8008166:	e10c      	b.n	8008382 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008168:	4b4a      	ldr	r3, [pc, #296]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008170:	2b00      	cmp	r3, #0
 8008172:	d1f0      	bne.n	8008156 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008174:	4b47      	ldr	r3, [pc, #284]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 8008176:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008178:	4b47      	ldr	r3, [pc, #284]	@ (8008298 <HAL_RCC_OscConfig+0x768>)
 800817a:	4013      	ands	r3, r2
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008184:	0112      	lsls	r2, r2, #4
 8008186:	430a      	orrs	r2, r1
 8008188:	4942      	ldr	r1, [pc, #264]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 800818a:	4313      	orrs	r3, r2
 800818c:	628b      	str	r3, [r1, #40]	@ 0x28
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008192:	3b01      	subs	r3, #1
 8008194:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800819c:	3b01      	subs	r3, #1
 800819e:	025b      	lsls	r3, r3, #9
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	431a      	orrs	r2, r3
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081a8:	3b01      	subs	r3, #1
 80081aa:	041b      	lsls	r3, r3, #16
 80081ac:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80081b0:	431a      	orrs	r2, r3
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081b6:	3b01      	subs	r3, #1
 80081b8:	061b      	lsls	r3, r3, #24
 80081ba:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80081be:	4935      	ldr	r1, [pc, #212]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 80081c0:	4313      	orrs	r3, r2
 80081c2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80081c4:	4b33      	ldr	r3, [pc, #204]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 80081c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081c8:	4a32      	ldr	r2, [pc, #200]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 80081ca:	f023 0301 	bic.w	r3, r3, #1
 80081ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80081d0:	4b30      	ldr	r3, [pc, #192]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 80081d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80081d4:	4b31      	ldr	r3, [pc, #196]	@ (800829c <HAL_RCC_OscConfig+0x76c>)
 80081d6:	4013      	ands	r3, r2
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80081dc:	00d2      	lsls	r2, r2, #3
 80081de:	492d      	ldr	r1, [pc, #180]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 80081e0:	4313      	orrs	r3, r2
 80081e2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80081e4:	4b2b      	ldr	r3, [pc, #172]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 80081e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081e8:	f023 020c 	bic.w	r2, r3, #12
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081f0:	4928      	ldr	r1, [pc, #160]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 80081f2:	4313      	orrs	r3, r2
 80081f4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80081f6:	4b27      	ldr	r3, [pc, #156]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 80081f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081fa:	f023 0202 	bic.w	r2, r3, #2
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008202:	4924      	ldr	r1, [pc, #144]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 8008204:	4313      	orrs	r3, r2
 8008206:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008208:	4b22      	ldr	r3, [pc, #136]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 800820a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800820c:	4a21      	ldr	r2, [pc, #132]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 800820e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008212:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008214:	4b1f      	ldr	r3, [pc, #124]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 8008216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008218:	4a1e      	ldr	r2, [pc, #120]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 800821a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800821e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008220:	4b1c      	ldr	r3, [pc, #112]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 8008222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008224:	4a1b      	ldr	r2, [pc, #108]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 8008226:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800822a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800822c:	4b19      	ldr	r3, [pc, #100]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 800822e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008230:	4a18      	ldr	r2, [pc, #96]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 8008232:	f043 0301 	orr.w	r3, r3, #1
 8008236:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008238:	4b16      	ldr	r3, [pc, #88]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a15      	ldr	r2, [pc, #84]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 800823e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008244:	f7fb fd66 	bl	8003d14 <HAL_GetTick>
 8008248:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800824a:	e008      	b.n	800825e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800824c:	f7fb fd62 	bl	8003d14 <HAL_GetTick>
 8008250:	4602      	mov	r2, r0
 8008252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008254:	1ad3      	subs	r3, r2, r3
 8008256:	2b02      	cmp	r3, #2
 8008258:	d901      	bls.n	800825e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800825a:	2303      	movs	r3, #3
 800825c:	e091      	b.n	8008382 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800825e:	4b0d      	ldr	r3, [pc, #52]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008266:	2b00      	cmp	r3, #0
 8008268:	d0f0      	beq.n	800824c <HAL_RCC_OscConfig+0x71c>
 800826a:	e089      	b.n	8008380 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800826c:	4b09      	ldr	r3, [pc, #36]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a08      	ldr	r2, [pc, #32]	@ (8008294 <HAL_RCC_OscConfig+0x764>)
 8008272:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008276:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008278:	f7fb fd4c 	bl	8003d14 <HAL_GetTick>
 800827c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800827e:	e00f      	b.n	80082a0 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008280:	f7fb fd48 	bl	8003d14 <HAL_GetTick>
 8008284:	4602      	mov	r2, r0
 8008286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008288:	1ad3      	subs	r3, r2, r3
 800828a:	2b02      	cmp	r3, #2
 800828c:	d908      	bls.n	80082a0 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800828e:	2303      	movs	r3, #3
 8008290:	e077      	b.n	8008382 <HAL_RCC_OscConfig+0x852>
 8008292:	bf00      	nop
 8008294:	58024400 	.word	0x58024400
 8008298:	fffffc0c 	.word	0xfffffc0c
 800829c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80082a0:	4b3a      	ldr	r3, [pc, #232]	@ (800838c <HAL_RCC_OscConfig+0x85c>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d1e9      	bne.n	8008280 <HAL_RCC_OscConfig+0x750>
 80082ac:	e068      	b.n	8008380 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80082ae:	4b37      	ldr	r3, [pc, #220]	@ (800838c <HAL_RCC_OscConfig+0x85c>)
 80082b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082b2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80082b4:	4b35      	ldr	r3, [pc, #212]	@ (800838c <HAL_RCC_OscConfig+0x85c>)
 80082b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082b8:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d031      	beq.n	8008326 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	f003 0203 	and.w	r2, r3, #3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d12a      	bne.n	8008326 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	091b      	lsrs	r3, r3, #4
 80082d4:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082dc:	429a      	cmp	r2, r3
 80082de:	d122      	bne.n	8008326 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082ea:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d11a      	bne.n	8008326 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	0a5b      	lsrs	r3, r3, #9
 80082f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082fc:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80082fe:	429a      	cmp	r2, r3
 8008300:	d111      	bne.n	8008326 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	0c1b      	lsrs	r3, r3, #16
 8008306:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800830e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008310:	429a      	cmp	r2, r3
 8008312:	d108      	bne.n	8008326 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	0e1b      	lsrs	r3, r3, #24
 8008318:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008320:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008322:	429a      	cmp	r2, r3
 8008324:	d001      	beq.n	800832a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8008326:	2301      	movs	r3, #1
 8008328:	e02b      	b.n	8008382 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800832a:	4b18      	ldr	r3, [pc, #96]	@ (800838c <HAL_RCC_OscConfig+0x85c>)
 800832c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800832e:	08db      	lsrs	r3, r3, #3
 8008330:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008334:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800833a:	693a      	ldr	r2, [r7, #16]
 800833c:	429a      	cmp	r2, r3
 800833e:	d01f      	beq.n	8008380 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008340:	4b12      	ldr	r3, [pc, #72]	@ (800838c <HAL_RCC_OscConfig+0x85c>)
 8008342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008344:	4a11      	ldr	r2, [pc, #68]	@ (800838c <HAL_RCC_OscConfig+0x85c>)
 8008346:	f023 0301 	bic.w	r3, r3, #1
 800834a:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800834c:	f7fb fce2 	bl	8003d14 <HAL_GetTick>
 8008350:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008352:	bf00      	nop
 8008354:	f7fb fcde 	bl	8003d14 <HAL_GetTick>
 8008358:	4602      	mov	r2, r0
 800835a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800835c:	4293      	cmp	r3, r2
 800835e:	d0f9      	beq.n	8008354 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008360:	4b0a      	ldr	r3, [pc, #40]	@ (800838c <HAL_RCC_OscConfig+0x85c>)
 8008362:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008364:	4b0a      	ldr	r3, [pc, #40]	@ (8008390 <HAL_RCC_OscConfig+0x860>)
 8008366:	4013      	ands	r3, r2
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800836c:	00d2      	lsls	r2, r2, #3
 800836e:	4907      	ldr	r1, [pc, #28]	@ (800838c <HAL_RCC_OscConfig+0x85c>)
 8008370:	4313      	orrs	r3, r2
 8008372:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008374:	4b05      	ldr	r3, [pc, #20]	@ (800838c <HAL_RCC_OscConfig+0x85c>)
 8008376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008378:	4a04      	ldr	r2, [pc, #16]	@ (800838c <HAL_RCC_OscConfig+0x85c>)
 800837a:	f043 0301 	orr.w	r3, r3, #1
 800837e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008380:	2300      	movs	r3, #0
}
 8008382:	4618      	mov	r0, r3
 8008384:	3730      	adds	r7, #48	@ 0x30
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
 800838a:	bf00      	nop
 800838c:	58024400 	.word	0x58024400
 8008390:	ffff0007 	.word	0xffff0007

08008394 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b086      	sub	sp, #24
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d101      	bne.n	80083a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	e19c      	b.n	80086e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80083a8:	4b8a      	ldr	r3, [pc, #552]	@ (80085d4 <HAL_RCC_ClockConfig+0x240>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f003 030f 	and.w	r3, r3, #15
 80083b0:	683a      	ldr	r2, [r7, #0]
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d910      	bls.n	80083d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083b6:	4b87      	ldr	r3, [pc, #540]	@ (80085d4 <HAL_RCC_ClockConfig+0x240>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f023 020f 	bic.w	r2, r3, #15
 80083be:	4985      	ldr	r1, [pc, #532]	@ (80085d4 <HAL_RCC_ClockConfig+0x240>)
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80083c6:	4b83      	ldr	r3, [pc, #524]	@ (80085d4 <HAL_RCC_ClockConfig+0x240>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f003 030f 	and.w	r3, r3, #15
 80083ce:	683a      	ldr	r2, [r7, #0]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d001      	beq.n	80083d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80083d4:	2301      	movs	r3, #1
 80083d6:	e184      	b.n	80086e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f003 0304 	and.w	r3, r3, #4
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d010      	beq.n	8008406 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	691a      	ldr	r2, [r3, #16]
 80083e8:	4b7b      	ldr	r3, [pc, #492]	@ (80085d8 <HAL_RCC_ClockConfig+0x244>)
 80083ea:	699b      	ldr	r3, [r3, #24]
 80083ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d908      	bls.n	8008406 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80083f4:	4b78      	ldr	r3, [pc, #480]	@ (80085d8 <HAL_RCC_ClockConfig+0x244>)
 80083f6:	699b      	ldr	r3, [r3, #24]
 80083f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	691b      	ldr	r3, [r3, #16]
 8008400:	4975      	ldr	r1, [pc, #468]	@ (80085d8 <HAL_RCC_ClockConfig+0x244>)
 8008402:	4313      	orrs	r3, r2
 8008404:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f003 0308 	and.w	r3, r3, #8
 800840e:	2b00      	cmp	r3, #0
 8008410:	d010      	beq.n	8008434 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	695a      	ldr	r2, [r3, #20]
 8008416:	4b70      	ldr	r3, [pc, #448]	@ (80085d8 <HAL_RCC_ClockConfig+0x244>)
 8008418:	69db      	ldr	r3, [r3, #28]
 800841a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800841e:	429a      	cmp	r2, r3
 8008420:	d908      	bls.n	8008434 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008422:	4b6d      	ldr	r3, [pc, #436]	@ (80085d8 <HAL_RCC_ClockConfig+0x244>)
 8008424:	69db      	ldr	r3, [r3, #28]
 8008426:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	695b      	ldr	r3, [r3, #20]
 800842e:	496a      	ldr	r1, [pc, #424]	@ (80085d8 <HAL_RCC_ClockConfig+0x244>)
 8008430:	4313      	orrs	r3, r2
 8008432:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f003 0310 	and.w	r3, r3, #16
 800843c:	2b00      	cmp	r3, #0
 800843e:	d010      	beq.n	8008462 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	699a      	ldr	r2, [r3, #24]
 8008444:	4b64      	ldr	r3, [pc, #400]	@ (80085d8 <HAL_RCC_ClockConfig+0x244>)
 8008446:	69db      	ldr	r3, [r3, #28]
 8008448:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800844c:	429a      	cmp	r2, r3
 800844e:	d908      	bls.n	8008462 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008450:	4b61      	ldr	r3, [pc, #388]	@ (80085d8 <HAL_RCC_ClockConfig+0x244>)
 8008452:	69db      	ldr	r3, [r3, #28]
 8008454:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	699b      	ldr	r3, [r3, #24]
 800845c:	495e      	ldr	r1, [pc, #376]	@ (80085d8 <HAL_RCC_ClockConfig+0x244>)
 800845e:	4313      	orrs	r3, r2
 8008460:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 0320 	and.w	r3, r3, #32
 800846a:	2b00      	cmp	r3, #0
 800846c:	d010      	beq.n	8008490 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	69da      	ldr	r2, [r3, #28]
 8008472:	4b59      	ldr	r3, [pc, #356]	@ (80085d8 <HAL_RCC_ClockConfig+0x244>)
 8008474:	6a1b      	ldr	r3, [r3, #32]
 8008476:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800847a:	429a      	cmp	r2, r3
 800847c:	d908      	bls.n	8008490 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800847e:	4b56      	ldr	r3, [pc, #344]	@ (80085d8 <HAL_RCC_ClockConfig+0x244>)
 8008480:	6a1b      	ldr	r3, [r3, #32]
 8008482:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	69db      	ldr	r3, [r3, #28]
 800848a:	4953      	ldr	r1, [pc, #332]	@ (80085d8 <HAL_RCC_ClockConfig+0x244>)
 800848c:	4313      	orrs	r3, r2
 800848e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f003 0302 	and.w	r3, r3, #2
 8008498:	2b00      	cmp	r3, #0
 800849a:	d010      	beq.n	80084be <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	68da      	ldr	r2, [r3, #12]
 80084a0:	4b4d      	ldr	r3, [pc, #308]	@ (80085d8 <HAL_RCC_ClockConfig+0x244>)
 80084a2:	699b      	ldr	r3, [r3, #24]
 80084a4:	f003 030f 	and.w	r3, r3, #15
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d908      	bls.n	80084be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80084ac:	4b4a      	ldr	r3, [pc, #296]	@ (80085d8 <HAL_RCC_ClockConfig+0x244>)
 80084ae:	699b      	ldr	r3, [r3, #24]
 80084b0:	f023 020f 	bic.w	r2, r3, #15
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	4947      	ldr	r1, [pc, #284]	@ (80085d8 <HAL_RCC_ClockConfig+0x244>)
 80084ba:	4313      	orrs	r3, r2
 80084bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f003 0301 	and.w	r3, r3, #1
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d055      	beq.n	8008576 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80084ca:	4b43      	ldr	r3, [pc, #268]	@ (80085d8 <HAL_RCC_ClockConfig+0x244>)
 80084cc:	699b      	ldr	r3, [r3, #24]
 80084ce:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	4940      	ldr	r1, [pc, #256]	@ (80085d8 <HAL_RCC_ClockConfig+0x244>)
 80084d8:	4313      	orrs	r3, r2
 80084da:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	2b02      	cmp	r3, #2
 80084e2:	d107      	bne.n	80084f4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80084e4:	4b3c      	ldr	r3, [pc, #240]	@ (80085d8 <HAL_RCC_ClockConfig+0x244>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d121      	bne.n	8008534 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	e0f6      	b.n	80086e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	2b03      	cmp	r3, #3
 80084fa:	d107      	bne.n	800850c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80084fc:	4b36      	ldr	r3, [pc, #216]	@ (80085d8 <HAL_RCC_ClockConfig+0x244>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008504:	2b00      	cmp	r3, #0
 8008506:	d115      	bne.n	8008534 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008508:	2301      	movs	r3, #1
 800850a:	e0ea      	b.n	80086e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	2b01      	cmp	r3, #1
 8008512:	d107      	bne.n	8008524 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008514:	4b30      	ldr	r3, [pc, #192]	@ (80085d8 <HAL_RCC_ClockConfig+0x244>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800851c:	2b00      	cmp	r3, #0
 800851e:	d109      	bne.n	8008534 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008520:	2301      	movs	r3, #1
 8008522:	e0de      	b.n	80086e2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008524:	4b2c      	ldr	r3, [pc, #176]	@ (80085d8 <HAL_RCC_ClockConfig+0x244>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f003 0304 	and.w	r3, r3, #4
 800852c:	2b00      	cmp	r3, #0
 800852e:	d101      	bne.n	8008534 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008530:	2301      	movs	r3, #1
 8008532:	e0d6      	b.n	80086e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008534:	4b28      	ldr	r3, [pc, #160]	@ (80085d8 <HAL_RCC_ClockConfig+0x244>)
 8008536:	691b      	ldr	r3, [r3, #16]
 8008538:	f023 0207 	bic.w	r2, r3, #7
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	4925      	ldr	r1, [pc, #148]	@ (80085d8 <HAL_RCC_ClockConfig+0x244>)
 8008542:	4313      	orrs	r3, r2
 8008544:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008546:	f7fb fbe5 	bl	8003d14 <HAL_GetTick>
 800854a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800854c:	e00a      	b.n	8008564 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800854e:	f7fb fbe1 	bl	8003d14 <HAL_GetTick>
 8008552:	4602      	mov	r2, r0
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	1ad3      	subs	r3, r2, r3
 8008558:	f241 3288 	movw	r2, #5000	@ 0x1388
 800855c:	4293      	cmp	r3, r2
 800855e:	d901      	bls.n	8008564 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008560:	2303      	movs	r3, #3
 8008562:	e0be      	b.n	80086e2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008564:	4b1c      	ldr	r3, [pc, #112]	@ (80085d8 <HAL_RCC_ClockConfig+0x244>)
 8008566:	691b      	ldr	r3, [r3, #16]
 8008568:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	00db      	lsls	r3, r3, #3
 8008572:	429a      	cmp	r2, r3
 8008574:	d1eb      	bne.n	800854e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f003 0302 	and.w	r3, r3, #2
 800857e:	2b00      	cmp	r3, #0
 8008580:	d010      	beq.n	80085a4 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	68da      	ldr	r2, [r3, #12]
 8008586:	4b14      	ldr	r3, [pc, #80]	@ (80085d8 <HAL_RCC_ClockConfig+0x244>)
 8008588:	699b      	ldr	r3, [r3, #24]
 800858a:	f003 030f 	and.w	r3, r3, #15
 800858e:	429a      	cmp	r2, r3
 8008590:	d208      	bcs.n	80085a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008592:	4b11      	ldr	r3, [pc, #68]	@ (80085d8 <HAL_RCC_ClockConfig+0x244>)
 8008594:	699b      	ldr	r3, [r3, #24]
 8008596:	f023 020f 	bic.w	r2, r3, #15
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	490e      	ldr	r1, [pc, #56]	@ (80085d8 <HAL_RCC_ClockConfig+0x244>)
 80085a0:	4313      	orrs	r3, r2
 80085a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80085a4:	4b0b      	ldr	r3, [pc, #44]	@ (80085d4 <HAL_RCC_ClockConfig+0x240>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f003 030f 	and.w	r3, r3, #15
 80085ac:	683a      	ldr	r2, [r7, #0]
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d214      	bcs.n	80085dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085b2:	4b08      	ldr	r3, [pc, #32]	@ (80085d4 <HAL_RCC_ClockConfig+0x240>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f023 020f 	bic.w	r2, r3, #15
 80085ba:	4906      	ldr	r1, [pc, #24]	@ (80085d4 <HAL_RCC_ClockConfig+0x240>)
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	4313      	orrs	r3, r2
 80085c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80085c2:	4b04      	ldr	r3, [pc, #16]	@ (80085d4 <HAL_RCC_ClockConfig+0x240>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f003 030f 	and.w	r3, r3, #15
 80085ca:	683a      	ldr	r2, [r7, #0]
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d005      	beq.n	80085dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80085d0:	2301      	movs	r3, #1
 80085d2:	e086      	b.n	80086e2 <HAL_RCC_ClockConfig+0x34e>
 80085d4:	52002000 	.word	0x52002000
 80085d8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f003 0304 	and.w	r3, r3, #4
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d010      	beq.n	800860a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	691a      	ldr	r2, [r3, #16]
 80085ec:	4b3f      	ldr	r3, [pc, #252]	@ (80086ec <HAL_RCC_ClockConfig+0x358>)
 80085ee:	699b      	ldr	r3, [r3, #24]
 80085f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d208      	bcs.n	800860a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80085f8:	4b3c      	ldr	r3, [pc, #240]	@ (80086ec <HAL_RCC_ClockConfig+0x358>)
 80085fa:	699b      	ldr	r3, [r3, #24]
 80085fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	691b      	ldr	r3, [r3, #16]
 8008604:	4939      	ldr	r1, [pc, #228]	@ (80086ec <HAL_RCC_ClockConfig+0x358>)
 8008606:	4313      	orrs	r3, r2
 8008608:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f003 0308 	and.w	r3, r3, #8
 8008612:	2b00      	cmp	r3, #0
 8008614:	d010      	beq.n	8008638 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	695a      	ldr	r2, [r3, #20]
 800861a:	4b34      	ldr	r3, [pc, #208]	@ (80086ec <HAL_RCC_ClockConfig+0x358>)
 800861c:	69db      	ldr	r3, [r3, #28]
 800861e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008622:	429a      	cmp	r2, r3
 8008624:	d208      	bcs.n	8008638 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008626:	4b31      	ldr	r3, [pc, #196]	@ (80086ec <HAL_RCC_ClockConfig+0x358>)
 8008628:	69db      	ldr	r3, [r3, #28]
 800862a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	695b      	ldr	r3, [r3, #20]
 8008632:	492e      	ldr	r1, [pc, #184]	@ (80086ec <HAL_RCC_ClockConfig+0x358>)
 8008634:	4313      	orrs	r3, r2
 8008636:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f003 0310 	and.w	r3, r3, #16
 8008640:	2b00      	cmp	r3, #0
 8008642:	d010      	beq.n	8008666 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	699a      	ldr	r2, [r3, #24]
 8008648:	4b28      	ldr	r3, [pc, #160]	@ (80086ec <HAL_RCC_ClockConfig+0x358>)
 800864a:	69db      	ldr	r3, [r3, #28]
 800864c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008650:	429a      	cmp	r2, r3
 8008652:	d208      	bcs.n	8008666 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008654:	4b25      	ldr	r3, [pc, #148]	@ (80086ec <HAL_RCC_ClockConfig+0x358>)
 8008656:	69db      	ldr	r3, [r3, #28]
 8008658:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	699b      	ldr	r3, [r3, #24]
 8008660:	4922      	ldr	r1, [pc, #136]	@ (80086ec <HAL_RCC_ClockConfig+0x358>)
 8008662:	4313      	orrs	r3, r2
 8008664:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f003 0320 	and.w	r3, r3, #32
 800866e:	2b00      	cmp	r3, #0
 8008670:	d010      	beq.n	8008694 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	69da      	ldr	r2, [r3, #28]
 8008676:	4b1d      	ldr	r3, [pc, #116]	@ (80086ec <HAL_RCC_ClockConfig+0x358>)
 8008678:	6a1b      	ldr	r3, [r3, #32]
 800867a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800867e:	429a      	cmp	r2, r3
 8008680:	d208      	bcs.n	8008694 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008682:	4b1a      	ldr	r3, [pc, #104]	@ (80086ec <HAL_RCC_ClockConfig+0x358>)
 8008684:	6a1b      	ldr	r3, [r3, #32]
 8008686:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	69db      	ldr	r3, [r3, #28]
 800868e:	4917      	ldr	r1, [pc, #92]	@ (80086ec <HAL_RCC_ClockConfig+0x358>)
 8008690:	4313      	orrs	r3, r2
 8008692:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8008694:	f000 f834 	bl	8008700 <HAL_RCC_GetSysClockFreq>
 8008698:	4602      	mov	r2, r0
 800869a:	4b14      	ldr	r3, [pc, #80]	@ (80086ec <HAL_RCC_ClockConfig+0x358>)
 800869c:	699b      	ldr	r3, [r3, #24]
 800869e:	0a1b      	lsrs	r3, r3, #8
 80086a0:	f003 030f 	and.w	r3, r3, #15
 80086a4:	4912      	ldr	r1, [pc, #72]	@ (80086f0 <HAL_RCC_ClockConfig+0x35c>)
 80086a6:	5ccb      	ldrb	r3, [r1, r3]
 80086a8:	f003 031f 	and.w	r3, r3, #31
 80086ac:	fa22 f303 	lsr.w	r3, r2, r3
 80086b0:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80086b2:	4b0e      	ldr	r3, [pc, #56]	@ (80086ec <HAL_RCC_ClockConfig+0x358>)
 80086b4:	699b      	ldr	r3, [r3, #24]
 80086b6:	f003 030f 	and.w	r3, r3, #15
 80086ba:	4a0d      	ldr	r2, [pc, #52]	@ (80086f0 <HAL_RCC_ClockConfig+0x35c>)
 80086bc:	5cd3      	ldrb	r3, [r2, r3]
 80086be:	f003 031f 	and.w	r3, r3, #31
 80086c2:	693a      	ldr	r2, [r7, #16]
 80086c4:	fa22 f303 	lsr.w	r3, r2, r3
 80086c8:	4a0a      	ldr	r2, [pc, #40]	@ (80086f4 <HAL_RCC_ClockConfig+0x360>)
 80086ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80086cc:	4a0a      	ldr	r2, [pc, #40]	@ (80086f8 <HAL_RCC_ClockConfig+0x364>)
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80086d2:	4b0a      	ldr	r3, [pc, #40]	@ (80086fc <HAL_RCC_ClockConfig+0x368>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7fb fad2 	bl	8003c80 <HAL_InitTick>
 80086dc:	4603      	mov	r3, r0
 80086de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80086e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3718      	adds	r7, #24
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	58024400 	.word	0x58024400
 80086f0:	08013410 	.word	0x08013410
 80086f4:	2400009c 	.word	0x2400009c
 80086f8:	24000098 	.word	0x24000098
 80086fc:	240000a0 	.word	0x240000a0

08008700 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008700:	b480      	push	{r7}
 8008702:	b089      	sub	sp, #36	@ 0x24
 8008704:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008706:	4bb3      	ldr	r3, [pc, #716]	@ (80089d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800870e:	2b18      	cmp	r3, #24
 8008710:	f200 8155 	bhi.w	80089be <HAL_RCC_GetSysClockFreq+0x2be>
 8008714:	a201      	add	r2, pc, #4	@ (adr r2, 800871c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800871a:	bf00      	nop
 800871c:	08008781 	.word	0x08008781
 8008720:	080089bf 	.word	0x080089bf
 8008724:	080089bf 	.word	0x080089bf
 8008728:	080089bf 	.word	0x080089bf
 800872c:	080089bf 	.word	0x080089bf
 8008730:	080089bf 	.word	0x080089bf
 8008734:	080089bf 	.word	0x080089bf
 8008738:	080089bf 	.word	0x080089bf
 800873c:	080087a7 	.word	0x080087a7
 8008740:	080089bf 	.word	0x080089bf
 8008744:	080089bf 	.word	0x080089bf
 8008748:	080089bf 	.word	0x080089bf
 800874c:	080089bf 	.word	0x080089bf
 8008750:	080089bf 	.word	0x080089bf
 8008754:	080089bf 	.word	0x080089bf
 8008758:	080089bf 	.word	0x080089bf
 800875c:	080087ad 	.word	0x080087ad
 8008760:	080089bf 	.word	0x080089bf
 8008764:	080089bf 	.word	0x080089bf
 8008768:	080089bf 	.word	0x080089bf
 800876c:	080089bf 	.word	0x080089bf
 8008770:	080089bf 	.word	0x080089bf
 8008774:	080089bf 	.word	0x080089bf
 8008778:	080089bf 	.word	0x080089bf
 800877c:	080087b3 	.word	0x080087b3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008780:	4b94      	ldr	r3, [pc, #592]	@ (80089d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f003 0320 	and.w	r3, r3, #32
 8008788:	2b00      	cmp	r3, #0
 800878a:	d009      	beq.n	80087a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800878c:	4b91      	ldr	r3, [pc, #580]	@ (80089d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	08db      	lsrs	r3, r3, #3
 8008792:	f003 0303 	and.w	r3, r3, #3
 8008796:	4a90      	ldr	r2, [pc, #576]	@ (80089d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008798:	fa22 f303 	lsr.w	r3, r2, r3
 800879c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800879e:	e111      	b.n	80089c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80087a0:	4b8d      	ldr	r3, [pc, #564]	@ (80089d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80087a2:	61bb      	str	r3, [r7, #24]
      break;
 80087a4:	e10e      	b.n	80089c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80087a6:	4b8d      	ldr	r3, [pc, #564]	@ (80089dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80087a8:	61bb      	str	r3, [r7, #24]
      break;
 80087aa:	e10b      	b.n	80089c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80087ac:	4b8c      	ldr	r3, [pc, #560]	@ (80089e0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80087ae:	61bb      	str	r3, [r7, #24]
      break;
 80087b0:	e108      	b.n	80089c4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80087b2:	4b88      	ldr	r3, [pc, #544]	@ (80089d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087b6:	f003 0303 	and.w	r3, r3, #3
 80087ba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80087bc:	4b85      	ldr	r3, [pc, #532]	@ (80089d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087c0:	091b      	lsrs	r3, r3, #4
 80087c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80087c6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80087c8:	4b82      	ldr	r3, [pc, #520]	@ (80089d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087cc:	f003 0301 	and.w	r3, r3, #1
 80087d0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80087d2:	4b80      	ldr	r3, [pc, #512]	@ (80089d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087d6:	08db      	lsrs	r3, r3, #3
 80087d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087dc:	68fa      	ldr	r2, [r7, #12]
 80087de:	fb02 f303 	mul.w	r3, r2, r3
 80087e2:	ee07 3a90 	vmov	s15, r3
 80087e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	f000 80e1 	beq.w	80089b8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	2b02      	cmp	r3, #2
 80087fa:	f000 8083 	beq.w	8008904 <HAL_RCC_GetSysClockFreq+0x204>
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	2b02      	cmp	r3, #2
 8008802:	f200 80a1 	bhi.w	8008948 <HAL_RCC_GetSysClockFreq+0x248>
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d003      	beq.n	8008814 <HAL_RCC_GetSysClockFreq+0x114>
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	2b01      	cmp	r3, #1
 8008810:	d056      	beq.n	80088c0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008812:	e099      	b.n	8008948 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008814:	4b6f      	ldr	r3, [pc, #444]	@ (80089d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f003 0320 	and.w	r3, r3, #32
 800881c:	2b00      	cmp	r3, #0
 800881e:	d02d      	beq.n	800887c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008820:	4b6c      	ldr	r3, [pc, #432]	@ (80089d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	08db      	lsrs	r3, r3, #3
 8008826:	f003 0303 	and.w	r3, r3, #3
 800882a:	4a6b      	ldr	r2, [pc, #428]	@ (80089d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800882c:	fa22 f303 	lsr.w	r3, r2, r3
 8008830:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	ee07 3a90 	vmov	s15, r3
 8008838:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	ee07 3a90 	vmov	s15, r3
 8008842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800884a:	4b62      	ldr	r3, [pc, #392]	@ (80089d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800884c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800884e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008852:	ee07 3a90 	vmov	s15, r3
 8008856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800885a:	ed97 6a02 	vldr	s12, [r7, #8]
 800885e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80089e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800886a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800886e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008876:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800887a:	e087      	b.n	800898c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	ee07 3a90 	vmov	s15, r3
 8008882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008886:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80089e8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800888a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800888e:	4b51      	ldr	r3, [pc, #324]	@ (80089d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008896:	ee07 3a90 	vmov	s15, r3
 800889a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800889e:	ed97 6a02 	vldr	s12, [r7, #8]
 80088a2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80089e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80088a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80088be:	e065      	b.n	800898c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	ee07 3a90 	vmov	s15, r3
 80088c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ca:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80089ec <HAL_RCC_GetSysClockFreq+0x2ec>
 80088ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088d2:	4b40      	ldr	r3, [pc, #256]	@ (80089d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088da:	ee07 3a90 	vmov	s15, r3
 80088de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80088e6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80089e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80088ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008902:	e043      	b.n	800898c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	ee07 3a90 	vmov	s15, r3
 800890a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800890e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80089f0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008916:	4b2f      	ldr	r3, [pc, #188]	@ (80089d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800891a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800891e:	ee07 3a90 	vmov	s15, r3
 8008922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008926:	ed97 6a02 	vldr	s12, [r7, #8]
 800892a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80089e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800892e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008936:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800893a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800893e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008942:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008946:	e021      	b.n	800898c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	ee07 3a90 	vmov	s15, r3
 800894e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008952:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80089ec <HAL_RCC_GetSysClockFreq+0x2ec>
 8008956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800895a:	4b1e      	ldr	r3, [pc, #120]	@ (80089d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800895c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800895e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008962:	ee07 3a90 	vmov	s15, r3
 8008966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800896a:	ed97 6a02 	vldr	s12, [r7, #8]
 800896e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80089e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800897a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800897e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008986:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800898a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800898c:	4b11      	ldr	r3, [pc, #68]	@ (80089d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800898e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008990:	0a5b      	lsrs	r3, r3, #9
 8008992:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008996:	3301      	adds	r3, #1
 8008998:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	ee07 3a90 	vmov	s15, r3
 80089a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80089a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80089a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089b0:	ee17 3a90 	vmov	r3, s15
 80089b4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80089b6:	e005      	b.n	80089c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80089b8:	2300      	movs	r3, #0
 80089ba:	61bb      	str	r3, [r7, #24]
      break;
 80089bc:	e002      	b.n	80089c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80089be:	4b07      	ldr	r3, [pc, #28]	@ (80089dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80089c0:	61bb      	str	r3, [r7, #24]
      break;
 80089c2:	bf00      	nop
  }

  return sysclockfreq;
 80089c4:	69bb      	ldr	r3, [r7, #24]
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3724      	adds	r7, #36	@ 0x24
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop
 80089d4:	58024400 	.word	0x58024400
 80089d8:	03d09000 	.word	0x03d09000
 80089dc:	003d0900 	.word	0x003d0900
 80089e0:	016e3600 	.word	0x016e3600
 80089e4:	46000000 	.word	0x46000000
 80089e8:	4c742400 	.word	0x4c742400
 80089ec:	4a742400 	.word	0x4a742400
 80089f0:	4bb71b00 	.word	0x4bb71b00

080089f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80089fa:	f7ff fe81 	bl	8008700 <HAL_RCC_GetSysClockFreq>
 80089fe:	4602      	mov	r2, r0
 8008a00:	4b10      	ldr	r3, [pc, #64]	@ (8008a44 <HAL_RCC_GetHCLKFreq+0x50>)
 8008a02:	699b      	ldr	r3, [r3, #24]
 8008a04:	0a1b      	lsrs	r3, r3, #8
 8008a06:	f003 030f 	and.w	r3, r3, #15
 8008a0a:	490f      	ldr	r1, [pc, #60]	@ (8008a48 <HAL_RCC_GetHCLKFreq+0x54>)
 8008a0c:	5ccb      	ldrb	r3, [r1, r3]
 8008a0e:	f003 031f 	and.w	r3, r3, #31
 8008a12:	fa22 f303 	lsr.w	r3, r2, r3
 8008a16:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8008a18:	4b0a      	ldr	r3, [pc, #40]	@ (8008a44 <HAL_RCC_GetHCLKFreq+0x50>)
 8008a1a:	699b      	ldr	r3, [r3, #24]
 8008a1c:	f003 030f 	and.w	r3, r3, #15
 8008a20:	4a09      	ldr	r2, [pc, #36]	@ (8008a48 <HAL_RCC_GetHCLKFreq+0x54>)
 8008a22:	5cd3      	ldrb	r3, [r2, r3]
 8008a24:	f003 031f 	and.w	r3, r3, #31
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a2e:	4a07      	ldr	r2, [pc, #28]	@ (8008a4c <HAL_RCC_GetHCLKFreq+0x58>)
 8008a30:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008a32:	4a07      	ldr	r2, [pc, #28]	@ (8008a50 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008a38:	4b04      	ldr	r3, [pc, #16]	@ (8008a4c <HAL_RCC_GetHCLKFreq+0x58>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3708      	adds	r7, #8
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}
 8008a44:	58024400 	.word	0x58024400
 8008a48:	08013410 	.word	0x08013410
 8008a4c:	2400009c 	.word	0x2400009c
 8008a50:	24000098 	.word	0x24000098

08008a54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8008a58:	f7ff ffcc 	bl	80089f4 <HAL_RCC_GetHCLKFreq>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	4b06      	ldr	r3, [pc, #24]	@ (8008a78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008a60:	69db      	ldr	r3, [r3, #28]
 8008a62:	091b      	lsrs	r3, r3, #4
 8008a64:	f003 0307 	and.w	r3, r3, #7
 8008a68:	4904      	ldr	r1, [pc, #16]	@ (8008a7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8008a6a:	5ccb      	ldrb	r3, [r1, r3]
 8008a6c:	f003 031f 	and.w	r3, r3, #31
 8008a70:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	58024400 	.word	0x58024400
 8008a7c:	08013410 	.word	0x08013410

08008a80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8008a84:	f7ff ffb6 	bl	80089f4 <HAL_RCC_GetHCLKFreq>
 8008a88:	4602      	mov	r2, r0
 8008a8a:	4b06      	ldr	r3, [pc, #24]	@ (8008aa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008a8c:	69db      	ldr	r3, [r3, #28]
 8008a8e:	0a1b      	lsrs	r3, r3, #8
 8008a90:	f003 0307 	and.w	r3, r3, #7
 8008a94:	4904      	ldr	r1, [pc, #16]	@ (8008aa8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008a96:	5ccb      	ldrb	r3, [r1, r3]
 8008a98:	f003 031f 	and.w	r3, r3, #31
 8008a9c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	bd80      	pop	{r7, pc}
 8008aa4:	58024400 	.word	0x58024400
 8008aa8:	08013410 	.word	0x08013410

08008aac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ab0:	b0c8      	sub	sp, #288	@ 0x120
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008ab8:	2300      	movs	r3, #0
 8008aba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008abe:	2300      	movs	r3, #0
 8008ac0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008ac4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008acc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008ad0:	2500      	movs	r5, #0
 8008ad2:	ea54 0305 	orrs.w	r3, r4, r5
 8008ad6:	d049      	beq.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008ad8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008adc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ade:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008ae2:	d02f      	beq.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008ae4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008ae8:	d828      	bhi.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008aea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008aee:	d01a      	beq.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008af0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008af4:	d822      	bhi.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d003      	beq.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008afa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008afe:	d007      	beq.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008b00:	e01c      	b.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b02:	4ba7      	ldr	r3, [pc, #668]	@ (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b06:	4aa6      	ldr	r2, [pc, #664]	@ (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008b0e:	e01a      	b.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008b10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b14:	3308      	adds	r3, #8
 8008b16:	2102      	movs	r1, #2
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f001 fc43 	bl	800a3a4 <RCCEx_PLL2_Config>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008b24:	e00f      	b.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b2a:	3328      	adds	r3, #40	@ 0x28
 8008b2c:	2102      	movs	r1, #2
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f001 fcea 	bl	800a508 <RCCEx_PLL3_Config>
 8008b34:	4603      	mov	r3, r0
 8008b36:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008b3a:	e004      	b.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008b42:	e000      	b.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008b44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b46:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d10a      	bne.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008b4e:	4b94      	ldr	r3, [pc, #592]	@ (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b52:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008b56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b5c:	4a90      	ldr	r2, [pc, #576]	@ (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b5e:	430b      	orrs	r3, r1
 8008b60:	6513      	str	r3, [r2, #80]	@ 0x50
 8008b62:	e003      	b.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b64:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b68:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008b6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b74:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008b78:	f04f 0900 	mov.w	r9, #0
 8008b7c:	ea58 0309 	orrs.w	r3, r8, r9
 8008b80:	d047      	beq.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008b82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b88:	2b04      	cmp	r3, #4
 8008b8a:	d82a      	bhi.n	8008be2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008b8c:	a201      	add	r2, pc, #4	@ (adr r2, 8008b94 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b92:	bf00      	nop
 8008b94:	08008ba9 	.word	0x08008ba9
 8008b98:	08008bb7 	.word	0x08008bb7
 8008b9c:	08008bcd 	.word	0x08008bcd
 8008ba0:	08008beb 	.word	0x08008beb
 8008ba4:	08008beb 	.word	0x08008beb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ba8:	4b7d      	ldr	r3, [pc, #500]	@ (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bac:	4a7c      	ldr	r2, [pc, #496]	@ (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008bae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008bb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008bb4:	e01a      	b.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008bb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bba:	3308      	adds	r3, #8
 8008bbc:	2100      	movs	r1, #0
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f001 fbf0 	bl	800a3a4 <RCCEx_PLL2_Config>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008bca:	e00f      	b.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008bcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bd0:	3328      	adds	r3, #40	@ 0x28
 8008bd2:	2100      	movs	r1, #0
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f001 fc97 	bl	800a508 <RCCEx_PLL3_Config>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008be0:	e004      	b.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008be8:	e000      	b.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008bea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d10a      	bne.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008bf4:	4b6a      	ldr	r3, [pc, #424]	@ (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008bf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bf8:	f023 0107 	bic.w	r1, r3, #7
 8008bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c02:	4a67      	ldr	r2, [pc, #412]	@ (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c04:	430b      	orrs	r3, r1
 8008c06:	6513      	str	r3, [r2, #80]	@ 0x50
 8008c08:	e003      	b.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c0a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c0e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8008c12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c1a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8008c1e:	f04f 0b00 	mov.w	fp, #0
 8008c22:	ea5a 030b 	orrs.w	r3, sl, fp
 8008c26:	d054      	beq.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8008c28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c2e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8008c32:	d036      	beq.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8008c34:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8008c38:	d82f      	bhi.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008c3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c3e:	d032      	beq.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008c40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c44:	d829      	bhi.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008c46:	2bc0      	cmp	r3, #192	@ 0xc0
 8008c48:	d02f      	beq.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8008c4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8008c4c:	d825      	bhi.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008c4e:	2b80      	cmp	r3, #128	@ 0x80
 8008c50:	d018      	beq.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8008c52:	2b80      	cmp	r3, #128	@ 0x80
 8008c54:	d821      	bhi.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d002      	beq.n	8008c60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8008c5a:	2b40      	cmp	r3, #64	@ 0x40
 8008c5c:	d007      	beq.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8008c5e:	e01c      	b.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c60:	4b4f      	ldr	r3, [pc, #316]	@ (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c64:	4a4e      	ldr	r2, [pc, #312]	@ (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8008c6c:	e01e      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c72:	3308      	adds	r3, #8
 8008c74:	2100      	movs	r1, #0
 8008c76:	4618      	mov	r0, r3
 8008c78:	f001 fb94 	bl	800a3a4 <RCCEx_PLL2_Config>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8008c82:	e013      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008c84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c88:	3328      	adds	r3, #40	@ 0x28
 8008c8a:	2100      	movs	r1, #0
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f001 fc3b 	bl	800a508 <RCCEx_PLL3_Config>
 8008c92:	4603      	mov	r3, r0
 8008c94:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8008c98:	e008      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008ca0:	e004      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8008ca2:	bf00      	nop
 8008ca4:	e002      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8008ca6:	bf00      	nop
 8008ca8:	e000      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8008caa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d10a      	bne.n	8008cca <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8008cb4:	4b3a      	ldr	r3, [pc, #232]	@ (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008cb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cb8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008cbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008cc2:	4a37      	ldr	r2, [pc, #220]	@ (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008cc4:	430b      	orrs	r3, r1
 8008cc6:	6513      	str	r3, [r2, #80]	@ 0x50
 8008cc8:	e003      	b.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008cce:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8008cd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cda:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8008cde:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008ce8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008cec:	460b      	mov	r3, r1
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	d05c      	beq.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8008cf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008cf8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008cfc:	d03b      	beq.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008cfe:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008d02:	d834      	bhi.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008d04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d08:	d037      	beq.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8008d0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d0e:	d82e      	bhi.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008d10:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008d14:	d033      	beq.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008d16:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008d1a:	d828      	bhi.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008d1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d20:	d01a      	beq.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8008d22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d26:	d822      	bhi.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d003      	beq.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8008d2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d30:	d007      	beq.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8008d32:	e01c      	b.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d34:	4b1a      	ldr	r3, [pc, #104]	@ (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d38:	4a19      	ldr	r2, [pc, #100]	@ (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8008d40:	e01e      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d46:	3308      	adds	r3, #8
 8008d48:	2100      	movs	r1, #0
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f001 fb2a 	bl	800a3a4 <RCCEx_PLL2_Config>
 8008d50:	4603      	mov	r3, r0
 8008d52:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8008d56:	e013      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008d58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d5c:	3328      	adds	r3, #40	@ 0x28
 8008d5e:	2100      	movs	r1, #0
 8008d60:	4618      	mov	r0, r3
 8008d62:	f001 fbd1 	bl	800a508 <RCCEx_PLL3_Config>
 8008d66:	4603      	mov	r3, r0
 8008d68:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8008d6c:	e008      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008d74:	e004      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8008d76:	bf00      	nop
 8008d78:	e002      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8008d7a:	bf00      	nop
 8008d7c:	e000      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8008d7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d80:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d10d      	bne.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8008d88:	4b05      	ldr	r3, [pc, #20]	@ (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d8c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8008d90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d96:	4a02      	ldr	r2, [pc, #8]	@ (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d98:	430b      	orrs	r3, r1
 8008d9a:	6513      	str	r3, [r2, #80]	@ 0x50
 8008d9c:	e006      	b.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x300>
 8008d9e:	bf00      	nop
 8008da0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008da4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008da8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008dac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008db8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008dc2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	d03a      	beq.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8008dcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008dd2:	2b30      	cmp	r3, #48	@ 0x30
 8008dd4:	d01f      	beq.n	8008e16 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8008dd6:	2b30      	cmp	r3, #48	@ 0x30
 8008dd8:	d819      	bhi.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8008dda:	2b20      	cmp	r3, #32
 8008ddc:	d00c      	beq.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8008dde:	2b20      	cmp	r3, #32
 8008de0:	d815      	bhi.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d019      	beq.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008de6:	2b10      	cmp	r3, #16
 8008de8:	d111      	bne.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dea:	4bae      	ldr	r3, [pc, #696]	@ (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dee:	4aad      	ldr	r2, [pc, #692]	@ (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008df0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008df4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008df6:	e011      	b.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008df8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dfc:	3308      	adds	r3, #8
 8008dfe:	2102      	movs	r1, #2
 8008e00:	4618      	mov	r0, r3
 8008e02:	f001 facf 	bl	800a3a4 <RCCEx_PLL2_Config>
 8008e06:	4603      	mov	r3, r0
 8008e08:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008e0c:	e006      	b.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008e14:	e002      	b.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8008e16:	bf00      	nop
 8008e18:	e000      	b.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8008e1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e1c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d10a      	bne.n	8008e3a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008e24:	4b9f      	ldr	r3, [pc, #636]	@ (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008e26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e28:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008e2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e32:	4a9c      	ldr	r2, [pc, #624]	@ (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008e34:	430b      	orrs	r3, r1
 8008e36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008e38:	e003      	b.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e3a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e3e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008e42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e4a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008e4e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008e52:	2300      	movs	r3, #0
 8008e54:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008e58:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	d051      	beq.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008e62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008e6c:	d035      	beq.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8008e6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008e72:	d82e      	bhi.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008e74:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008e78:	d031      	beq.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x432>
 8008e7a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008e7e:	d828      	bhi.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008e80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e84:	d01a      	beq.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x410>
 8008e86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e8a:	d822      	bhi.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d003      	beq.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8008e90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e94:	d007      	beq.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8008e96:	e01c      	b.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e98:	4b82      	ldr	r3, [pc, #520]	@ (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e9c:	4a81      	ldr	r2, [pc, #516]	@ (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008e9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ea2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008ea4:	e01c      	b.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ea6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008eaa:	3308      	adds	r3, #8
 8008eac:	2100      	movs	r1, #0
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f001 fa78 	bl	800a3a4 <RCCEx_PLL2_Config>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008eba:	e011      	b.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008ebc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ec0:	3328      	adds	r3, #40	@ 0x28
 8008ec2:	2100      	movs	r1, #0
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f001 fb1f 	bl	800a508 <RCCEx_PLL3_Config>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008ed0:	e006      	b.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008ed8:	e002      	b.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8008eda:	bf00      	nop
 8008edc:	e000      	b.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8008ede:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ee0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d10a      	bne.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008ee8:	4b6e      	ldr	r3, [pc, #440]	@ (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008eea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008eec:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008ef0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ef4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ef6:	4a6b      	ldr	r2, [pc, #428]	@ (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008ef8:	430b      	orrs	r3, r1
 8008efa:	6513      	str	r3, [r2, #80]	@ 0x50
 8008efc:	e003      	b.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008efe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f02:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008f06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008f12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008f16:	2300      	movs	r3, #0
 8008f18:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008f1c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008f20:	460b      	mov	r3, r1
 8008f22:	4313      	orrs	r3, r2
 8008f24:	d053      	beq.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008f26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008f2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008f30:	d033      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8008f32:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008f36:	d82c      	bhi.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008f38:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008f3c:	d02f      	beq.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8008f3e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008f42:	d826      	bhi.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008f44:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008f48:	d02b      	beq.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008f4a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008f4e:	d820      	bhi.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008f50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f54:	d012      	beq.n	8008f7c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8008f56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f5a:	d81a      	bhi.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d022      	beq.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8008f60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f64:	d115      	bne.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008f66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f6a:	3308      	adds	r3, #8
 8008f6c:	2101      	movs	r1, #1
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f001 fa18 	bl	800a3a4 <RCCEx_PLL2_Config>
 8008f74:	4603      	mov	r3, r0
 8008f76:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008f7a:	e015      	b.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008f7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f80:	3328      	adds	r3, #40	@ 0x28
 8008f82:	2101      	movs	r1, #1
 8008f84:	4618      	mov	r0, r3
 8008f86:	f001 fabf 	bl	800a508 <RCCEx_PLL3_Config>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008f90:	e00a      	b.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008f98:	e006      	b.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008f9a:	bf00      	nop
 8008f9c:	e004      	b.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008f9e:	bf00      	nop
 8008fa0:	e002      	b.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008fa2:	bf00      	nop
 8008fa4:	e000      	b.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008fa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fa8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d10a      	bne.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008fb0:	4b3c      	ldr	r3, [pc, #240]	@ (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008fb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fb4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008fb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008fbe:	4a39      	ldr	r2, [pc, #228]	@ (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008fc0:	430b      	orrs	r3, r1
 8008fc2:	6513      	str	r3, [r2, #80]	@ 0x50
 8008fc4:	e003      	b.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fc6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008fca:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008fce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008fda:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008fde:	2300      	movs	r3, #0
 8008fe0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008fe4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008fe8:	460b      	mov	r3, r1
 8008fea:	4313      	orrs	r3, r2
 8008fec:	d060      	beq.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008fee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ff2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008ff6:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8008ffa:	d039      	beq.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8008ffc:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8009000:	d832      	bhi.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8009002:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009006:	d035      	beq.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8009008:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800900c:	d82c      	bhi.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800900e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009012:	d031      	beq.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8009014:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009018:	d826      	bhi.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800901a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800901e:	d02d      	beq.n	800907c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009020:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009024:	d820      	bhi.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8009026:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800902a:	d012      	beq.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800902c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009030:	d81a      	bhi.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8009032:	2b00      	cmp	r3, #0
 8009034:	d024      	beq.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009036:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800903a:	d115      	bne.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800903c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009040:	3308      	adds	r3, #8
 8009042:	2101      	movs	r1, #1
 8009044:	4618      	mov	r0, r3
 8009046:	f001 f9ad 	bl	800a3a4 <RCCEx_PLL2_Config>
 800904a:	4603      	mov	r3, r0
 800904c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009050:	e017      	b.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009052:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009056:	3328      	adds	r3, #40	@ 0x28
 8009058:	2101      	movs	r1, #1
 800905a:	4618      	mov	r0, r3
 800905c:	f001 fa54 	bl	800a508 <RCCEx_PLL3_Config>
 8009060:	4603      	mov	r3, r0
 8009062:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009066:	e00c      	b.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009068:	2301      	movs	r3, #1
 800906a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800906e:	e008      	b.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009070:	bf00      	nop
 8009072:	e006      	b.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009074:	bf00      	nop
 8009076:	e004      	b.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009078:	bf00      	nop
 800907a:	e002      	b.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800907c:	bf00      	nop
 800907e:	e000      	b.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009080:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009082:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009086:	2b00      	cmp	r3, #0
 8009088:	d10e      	bne.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800908a:	4b06      	ldr	r3, [pc, #24]	@ (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800908c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800908e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009092:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009096:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800909a:	4a02      	ldr	r2, [pc, #8]	@ (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800909c:	430b      	orrs	r3, r1
 800909e:	6593      	str	r3, [r2, #88]	@ 0x58
 80090a0:	e006      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80090a2:	bf00      	nop
 80090a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80090ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80090b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80090bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80090c0:	2300      	movs	r3, #0
 80090c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80090c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80090ca:	460b      	mov	r3, r1
 80090cc:	4313      	orrs	r3, r2
 80090ce:	d037      	beq.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80090d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80090d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090da:	d00e      	beq.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80090dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090e0:	d816      	bhi.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d018      	beq.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80090e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80090ea:	d111      	bne.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090ec:	4bc4      	ldr	r3, [pc, #784]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80090ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090f0:	4ac3      	ldr	r2, [pc, #780]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80090f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80090f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80090f8:	e00f      	b.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80090fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090fe:	3308      	adds	r3, #8
 8009100:	2101      	movs	r1, #1
 8009102:	4618      	mov	r0, r3
 8009104:	f001 f94e 	bl	800a3a4 <RCCEx_PLL2_Config>
 8009108:	4603      	mov	r3, r0
 800910a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800910e:	e004      	b.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009110:	2301      	movs	r3, #1
 8009112:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009116:	e000      	b.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8009118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800911a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800911e:	2b00      	cmp	r3, #0
 8009120:	d10a      	bne.n	8009138 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009122:	4bb7      	ldr	r3, [pc, #732]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009124:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009126:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800912a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800912e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009130:	4ab3      	ldr	r2, [pc, #716]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009132:	430b      	orrs	r3, r1
 8009134:	6513      	str	r3, [r2, #80]	@ 0x50
 8009136:	e003      	b.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009138:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800913c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009140:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009148:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800914c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009150:	2300      	movs	r3, #0
 8009152:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009156:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800915a:	460b      	mov	r3, r1
 800915c:	4313      	orrs	r3, r2
 800915e:	d039      	beq.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009160:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009164:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009166:	2b03      	cmp	r3, #3
 8009168:	d81c      	bhi.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800916a:	a201      	add	r2, pc, #4	@ (adr r2, 8009170 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800916c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009170:	080091ad 	.word	0x080091ad
 8009174:	08009181 	.word	0x08009181
 8009178:	0800918f 	.word	0x0800918f
 800917c:	080091ad 	.word	0x080091ad
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009180:	4b9f      	ldr	r3, [pc, #636]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009184:	4a9e      	ldr	r2, [pc, #632]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009186:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800918a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800918c:	e00f      	b.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800918e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009192:	3308      	adds	r3, #8
 8009194:	2102      	movs	r1, #2
 8009196:	4618      	mov	r0, r3
 8009198:	f001 f904 	bl	800a3a4 <RCCEx_PLL2_Config>
 800919c:	4603      	mov	r3, r0
 800919e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80091a2:	e004      	b.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80091a4:	2301      	movs	r3, #1
 80091a6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80091aa:	e000      	b.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80091ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d10a      	bne.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80091b6:	4b92      	ldr	r3, [pc, #584]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80091b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091ba:	f023 0103 	bic.w	r1, r3, #3
 80091be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80091c4:	4a8e      	ldr	r2, [pc, #568]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80091c6:	430b      	orrs	r3, r1
 80091c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80091ca:	e003      	b.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80091d0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80091d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091dc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80091e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80091e4:	2300      	movs	r3, #0
 80091e6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80091ea:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80091ee:	460b      	mov	r3, r1
 80091f0:	4313      	orrs	r3, r2
 80091f2:	f000 8099 	beq.w	8009328 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80091f6:	4b83      	ldr	r3, [pc, #524]	@ (8009404 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a82      	ldr	r2, [pc, #520]	@ (8009404 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80091fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009200:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009202:	f7fa fd87 	bl	8003d14 <HAL_GetTick>
 8009206:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800920a:	e00b      	b.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800920c:	f7fa fd82 	bl	8003d14 <HAL_GetTick>
 8009210:	4602      	mov	r2, r0
 8009212:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009216:	1ad3      	subs	r3, r2, r3
 8009218:	2b64      	cmp	r3, #100	@ 0x64
 800921a:	d903      	bls.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800921c:	2303      	movs	r3, #3
 800921e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009222:	e005      	b.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009224:	4b77      	ldr	r3, [pc, #476]	@ (8009404 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800922c:	2b00      	cmp	r3, #0
 800922e:	d0ed      	beq.n	800920c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009230:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009234:	2b00      	cmp	r3, #0
 8009236:	d173      	bne.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009238:	4b71      	ldr	r3, [pc, #452]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800923a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800923c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009240:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009244:	4053      	eors	r3, r2
 8009246:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800924a:	2b00      	cmp	r3, #0
 800924c:	d015      	beq.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800924e:	4b6c      	ldr	r3, [pc, #432]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009252:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009256:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800925a:	4b69      	ldr	r3, [pc, #420]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800925c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800925e:	4a68      	ldr	r2, [pc, #416]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009260:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009264:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009266:	4b66      	ldr	r3, [pc, #408]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800926a:	4a65      	ldr	r2, [pc, #404]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800926c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009270:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009272:	4a63      	ldr	r2, [pc, #396]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009278:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800927a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800927e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009282:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009286:	d118      	bne.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009288:	f7fa fd44 	bl	8003d14 <HAL_GetTick>
 800928c:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009290:	e00d      	b.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009292:	f7fa fd3f 	bl	8003d14 <HAL_GetTick>
 8009296:	4602      	mov	r2, r0
 8009298:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800929c:	1ad2      	subs	r2, r2, r3
 800929e:	f241 3388 	movw	r3, #5000	@ 0x1388
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d903      	bls.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80092a6:	2303      	movs	r3, #3
 80092a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 80092ac:	e005      	b.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80092ae:	4b54      	ldr	r3, [pc, #336]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80092b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092b2:	f003 0302 	and.w	r3, r3, #2
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d0eb      	beq.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80092ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d129      	bne.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80092c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80092ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80092ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80092d2:	d10e      	bne.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80092d4:	4b4a      	ldr	r3, [pc, #296]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80092d6:	691b      	ldr	r3, [r3, #16]
 80092d8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80092dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80092e4:	091a      	lsrs	r2, r3, #4
 80092e6:	4b48      	ldr	r3, [pc, #288]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80092e8:	4013      	ands	r3, r2
 80092ea:	4a45      	ldr	r2, [pc, #276]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80092ec:	430b      	orrs	r3, r1
 80092ee:	6113      	str	r3, [r2, #16]
 80092f0:	e005      	b.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0x852>
 80092f2:	4b43      	ldr	r3, [pc, #268]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80092f4:	691b      	ldr	r3, [r3, #16]
 80092f6:	4a42      	ldr	r2, [pc, #264]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80092f8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80092fc:	6113      	str	r3, [r2, #16]
 80092fe:	4b40      	ldr	r3, [pc, #256]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009300:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009302:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009306:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800930a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800930e:	4a3c      	ldr	r2, [pc, #240]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009310:	430b      	orrs	r3, r1
 8009312:	6713      	str	r3, [r2, #112]	@ 0x70
 8009314:	e008      	b.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009316:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800931a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800931e:	e003      	b.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009320:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009324:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009328:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800932c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009330:	f002 0301 	and.w	r3, r2, #1
 8009334:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009338:	2300      	movs	r3, #0
 800933a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800933e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009342:	460b      	mov	r3, r1
 8009344:	4313      	orrs	r3, r2
 8009346:	f000 8090 	beq.w	800946a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800934a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800934e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009352:	2b28      	cmp	r3, #40	@ 0x28
 8009354:	d870      	bhi.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009356:	a201      	add	r2, pc, #4	@ (adr r2, 800935c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8009358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800935c:	08009441 	.word	0x08009441
 8009360:	08009439 	.word	0x08009439
 8009364:	08009439 	.word	0x08009439
 8009368:	08009439 	.word	0x08009439
 800936c:	08009439 	.word	0x08009439
 8009370:	08009439 	.word	0x08009439
 8009374:	08009439 	.word	0x08009439
 8009378:	08009439 	.word	0x08009439
 800937c:	0800940d 	.word	0x0800940d
 8009380:	08009439 	.word	0x08009439
 8009384:	08009439 	.word	0x08009439
 8009388:	08009439 	.word	0x08009439
 800938c:	08009439 	.word	0x08009439
 8009390:	08009439 	.word	0x08009439
 8009394:	08009439 	.word	0x08009439
 8009398:	08009439 	.word	0x08009439
 800939c:	08009423 	.word	0x08009423
 80093a0:	08009439 	.word	0x08009439
 80093a4:	08009439 	.word	0x08009439
 80093a8:	08009439 	.word	0x08009439
 80093ac:	08009439 	.word	0x08009439
 80093b0:	08009439 	.word	0x08009439
 80093b4:	08009439 	.word	0x08009439
 80093b8:	08009439 	.word	0x08009439
 80093bc:	08009441 	.word	0x08009441
 80093c0:	08009439 	.word	0x08009439
 80093c4:	08009439 	.word	0x08009439
 80093c8:	08009439 	.word	0x08009439
 80093cc:	08009439 	.word	0x08009439
 80093d0:	08009439 	.word	0x08009439
 80093d4:	08009439 	.word	0x08009439
 80093d8:	08009439 	.word	0x08009439
 80093dc:	08009441 	.word	0x08009441
 80093e0:	08009439 	.word	0x08009439
 80093e4:	08009439 	.word	0x08009439
 80093e8:	08009439 	.word	0x08009439
 80093ec:	08009439 	.word	0x08009439
 80093f0:	08009439 	.word	0x08009439
 80093f4:	08009439 	.word	0x08009439
 80093f8:	08009439 	.word	0x08009439
 80093fc:	08009441 	.word	0x08009441
 8009400:	58024400 	.word	0x58024400
 8009404:	58024800 	.word	0x58024800
 8009408:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800940c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009410:	3308      	adds	r3, #8
 8009412:	2101      	movs	r1, #1
 8009414:	4618      	mov	r0, r3
 8009416:	f000 ffc5 	bl	800a3a4 <RCCEx_PLL2_Config>
 800941a:	4603      	mov	r3, r0
 800941c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009420:	e00f      	b.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009422:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009426:	3328      	adds	r3, #40	@ 0x28
 8009428:	2101      	movs	r1, #1
 800942a:	4618      	mov	r0, r3
 800942c:	f001 f86c 	bl	800a508 <RCCEx_PLL3_Config>
 8009430:	4603      	mov	r3, r0
 8009432:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009436:	e004      	b.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009438:	2301      	movs	r3, #1
 800943a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800943e:	e000      	b.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009440:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009442:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009446:	2b00      	cmp	r3, #0
 8009448:	d10b      	bne.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800944a:	4bc0      	ldr	r3, [pc, #768]	@ (800974c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800944c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800944e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009452:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009456:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800945a:	4abc      	ldr	r2, [pc, #752]	@ (800974c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800945c:	430b      	orrs	r3, r1
 800945e:	6553      	str	r3, [r2, #84]	@ 0x54
 8009460:	e003      	b.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009462:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009466:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800946a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800946e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009472:	f002 0302 	and.w	r3, r2, #2
 8009476:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800947a:	2300      	movs	r3, #0
 800947c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009480:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009484:	460b      	mov	r3, r1
 8009486:	4313      	orrs	r3, r2
 8009488:	d043      	beq.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800948a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800948e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009492:	2b05      	cmp	r3, #5
 8009494:	d824      	bhi.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8009496:	a201      	add	r2, pc, #4	@ (adr r2, 800949c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8009498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800949c:	080094e9 	.word	0x080094e9
 80094a0:	080094b5 	.word	0x080094b5
 80094a4:	080094cb 	.word	0x080094cb
 80094a8:	080094e9 	.word	0x080094e9
 80094ac:	080094e9 	.word	0x080094e9
 80094b0:	080094e9 	.word	0x080094e9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80094b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094b8:	3308      	adds	r3, #8
 80094ba:	2101      	movs	r1, #1
 80094bc:	4618      	mov	r0, r3
 80094be:	f000 ff71 	bl	800a3a4 <RCCEx_PLL2_Config>
 80094c2:	4603      	mov	r3, r0
 80094c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80094c8:	e00f      	b.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80094ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094ce:	3328      	adds	r3, #40	@ 0x28
 80094d0:	2101      	movs	r1, #1
 80094d2:	4618      	mov	r0, r3
 80094d4:	f001 f818 	bl	800a508 <RCCEx_PLL3_Config>
 80094d8:	4603      	mov	r3, r0
 80094da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80094de:	e004      	b.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094e0:	2301      	movs	r3, #1
 80094e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80094e6:	e000      	b.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80094e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d10b      	bne.n	800950a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80094f2:	4b96      	ldr	r3, [pc, #600]	@ (800974c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80094f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094f6:	f023 0107 	bic.w	r1, r3, #7
 80094fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009502:	4a92      	ldr	r2, [pc, #584]	@ (800974c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009504:	430b      	orrs	r3, r1
 8009506:	6553      	str	r3, [r2, #84]	@ 0x54
 8009508:	e003      	b.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800950a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800950e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009512:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800951a:	f002 0304 	and.w	r3, r2, #4
 800951e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009522:	2300      	movs	r3, #0
 8009524:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009528:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800952c:	460b      	mov	r3, r1
 800952e:	4313      	orrs	r3, r2
 8009530:	d043      	beq.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009532:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009536:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800953a:	2b05      	cmp	r3, #5
 800953c:	d824      	bhi.n	8009588 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800953e:	a201      	add	r2, pc, #4	@ (adr r2, 8009544 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8009540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009544:	08009591 	.word	0x08009591
 8009548:	0800955d 	.word	0x0800955d
 800954c:	08009573 	.word	0x08009573
 8009550:	08009591 	.word	0x08009591
 8009554:	08009591 	.word	0x08009591
 8009558:	08009591 	.word	0x08009591
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800955c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009560:	3308      	adds	r3, #8
 8009562:	2101      	movs	r1, #1
 8009564:	4618      	mov	r0, r3
 8009566:	f000 ff1d 	bl	800a3a4 <RCCEx_PLL2_Config>
 800956a:	4603      	mov	r3, r0
 800956c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009570:	e00f      	b.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009572:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009576:	3328      	adds	r3, #40	@ 0x28
 8009578:	2101      	movs	r1, #1
 800957a:	4618      	mov	r0, r3
 800957c:	f000 ffc4 	bl	800a508 <RCCEx_PLL3_Config>
 8009580:	4603      	mov	r3, r0
 8009582:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009586:	e004      	b.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009588:	2301      	movs	r3, #1
 800958a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800958e:	e000      	b.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8009590:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009592:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009596:	2b00      	cmp	r3, #0
 8009598:	d10b      	bne.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800959a:	4b6c      	ldr	r3, [pc, #432]	@ (800974c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800959c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800959e:	f023 0107 	bic.w	r1, r3, #7
 80095a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80095aa:	4a68      	ldr	r2, [pc, #416]	@ (800974c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80095ac:	430b      	orrs	r3, r1
 80095ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80095b0:	e003      	b.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095b2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80095b6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80095ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c2:	f002 0320 	and.w	r3, r2, #32
 80095c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80095ca:	2300      	movs	r3, #0
 80095cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80095d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80095d4:	460b      	mov	r3, r1
 80095d6:	4313      	orrs	r3, r2
 80095d8:	d055      	beq.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80095da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80095e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80095e6:	d033      	beq.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80095e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80095ec:	d82c      	bhi.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80095ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095f2:	d02f      	beq.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80095f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095f8:	d826      	bhi.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80095fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80095fe:	d02b      	beq.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8009600:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009604:	d820      	bhi.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009606:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800960a:	d012      	beq.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800960c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009610:	d81a      	bhi.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009612:	2b00      	cmp	r3, #0
 8009614:	d022      	beq.n	800965c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8009616:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800961a:	d115      	bne.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800961c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009620:	3308      	adds	r3, #8
 8009622:	2100      	movs	r1, #0
 8009624:	4618      	mov	r0, r3
 8009626:	f000 febd 	bl	800a3a4 <RCCEx_PLL2_Config>
 800962a:	4603      	mov	r3, r0
 800962c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009630:	e015      	b.n	800965e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009632:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009636:	3328      	adds	r3, #40	@ 0x28
 8009638:	2102      	movs	r1, #2
 800963a:	4618      	mov	r0, r3
 800963c:	f000 ff64 	bl	800a508 <RCCEx_PLL3_Config>
 8009640:	4603      	mov	r3, r0
 8009642:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009646:	e00a      	b.n	800965e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009648:	2301      	movs	r3, #1
 800964a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800964e:	e006      	b.n	800965e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009650:	bf00      	nop
 8009652:	e004      	b.n	800965e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009654:	bf00      	nop
 8009656:	e002      	b.n	800965e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009658:	bf00      	nop
 800965a:	e000      	b.n	800965e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800965c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800965e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009662:	2b00      	cmp	r3, #0
 8009664:	d10b      	bne.n	800967e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009666:	4b39      	ldr	r3, [pc, #228]	@ (800974c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800966a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800966e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009672:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009676:	4a35      	ldr	r2, [pc, #212]	@ (800974c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009678:	430b      	orrs	r3, r1
 800967a:	6553      	str	r3, [r2, #84]	@ 0x54
 800967c:	e003      	b.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800967e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009682:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009686:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800968a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800968e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009692:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009696:	2300      	movs	r3, #0
 8009698:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800969c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80096a0:	460b      	mov	r3, r1
 80096a2:	4313      	orrs	r3, r2
 80096a4:	d058      	beq.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80096a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80096ae:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80096b2:	d033      	beq.n	800971c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80096b4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80096b8:	d82c      	bhi.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80096ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096be:	d02f      	beq.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80096c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096c4:	d826      	bhi.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80096c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80096ca:	d02b      	beq.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80096cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80096d0:	d820      	bhi.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80096d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80096d6:	d012      	beq.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80096d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80096dc:	d81a      	bhi.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d022      	beq.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80096e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80096e6:	d115      	bne.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80096e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096ec:	3308      	adds	r3, #8
 80096ee:	2100      	movs	r1, #0
 80096f0:	4618      	mov	r0, r3
 80096f2:	f000 fe57 	bl	800a3a4 <RCCEx_PLL2_Config>
 80096f6:	4603      	mov	r3, r0
 80096f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80096fc:	e015      	b.n	800972a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80096fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009702:	3328      	adds	r3, #40	@ 0x28
 8009704:	2102      	movs	r1, #2
 8009706:	4618      	mov	r0, r3
 8009708:	f000 fefe 	bl	800a508 <RCCEx_PLL3_Config>
 800970c:	4603      	mov	r3, r0
 800970e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009712:	e00a      	b.n	800972a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009714:	2301      	movs	r3, #1
 8009716:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800971a:	e006      	b.n	800972a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800971c:	bf00      	nop
 800971e:	e004      	b.n	800972a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8009720:	bf00      	nop
 8009722:	e002      	b.n	800972a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8009724:	bf00      	nop
 8009726:	e000      	b.n	800972a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8009728:	bf00      	nop
    }

    if (ret == HAL_OK)
 800972a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800972e:	2b00      	cmp	r3, #0
 8009730:	d10e      	bne.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009732:	4b06      	ldr	r3, [pc, #24]	@ (800974c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009736:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800973a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800973e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009742:	4a02      	ldr	r2, [pc, #8]	@ (800974c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009744:	430b      	orrs	r3, r1
 8009746:	6593      	str	r3, [r2, #88]	@ 0x58
 8009748:	e006      	b.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800974a:	bf00      	nop
 800974c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009750:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009754:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009758:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800975c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009760:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009764:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009768:	2300      	movs	r3, #0
 800976a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800976e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009772:	460b      	mov	r3, r1
 8009774:	4313      	orrs	r3, r2
 8009776:	d055      	beq.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009778:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800977c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009780:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009784:	d033      	beq.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8009786:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800978a:	d82c      	bhi.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800978c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009790:	d02f      	beq.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8009792:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009796:	d826      	bhi.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8009798:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800979c:	d02b      	beq.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800979e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80097a2:	d820      	bhi.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80097a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80097a8:	d012      	beq.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80097aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80097ae:	d81a      	bhi.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d022      	beq.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80097b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097b8:	d115      	bne.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097be:	3308      	adds	r3, #8
 80097c0:	2100      	movs	r1, #0
 80097c2:	4618      	mov	r0, r3
 80097c4:	f000 fdee 	bl	800a3a4 <RCCEx_PLL2_Config>
 80097c8:	4603      	mov	r3, r0
 80097ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80097ce:	e015      	b.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80097d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097d4:	3328      	adds	r3, #40	@ 0x28
 80097d6:	2102      	movs	r1, #2
 80097d8:	4618      	mov	r0, r3
 80097da:	f000 fe95 	bl	800a508 <RCCEx_PLL3_Config>
 80097de:	4603      	mov	r3, r0
 80097e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80097e4:	e00a      	b.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097e6:	2301      	movs	r3, #1
 80097e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80097ec:	e006      	b.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80097ee:	bf00      	nop
 80097f0:	e004      	b.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80097f2:	bf00      	nop
 80097f4:	e002      	b.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80097f6:	bf00      	nop
 80097f8:	e000      	b.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80097fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009800:	2b00      	cmp	r3, #0
 8009802:	d10b      	bne.n	800981c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009804:	4ba1      	ldr	r3, [pc, #644]	@ (8009a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009808:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800980c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009810:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009814:	4a9d      	ldr	r2, [pc, #628]	@ (8009a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009816:	430b      	orrs	r3, r1
 8009818:	6593      	str	r3, [r2, #88]	@ 0x58
 800981a:	e003      	b.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800981c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009820:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009824:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982c:	f002 0308 	and.w	r3, r2, #8
 8009830:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009834:	2300      	movs	r3, #0
 8009836:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800983a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800983e:	460b      	mov	r3, r1
 8009840:	4313      	orrs	r3, r2
 8009842:	d01e      	beq.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009844:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009848:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800984c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009850:	d10c      	bne.n	800986c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009852:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009856:	3328      	adds	r3, #40	@ 0x28
 8009858:	2102      	movs	r1, #2
 800985a:	4618      	mov	r0, r3
 800985c:	f000 fe54 	bl	800a508 <RCCEx_PLL3_Config>
 8009860:	4603      	mov	r3, r0
 8009862:	2b00      	cmp	r3, #0
 8009864:	d002      	beq.n	800986c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8009866:	2301      	movs	r3, #1
 8009868:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800986c:	4b87      	ldr	r3, [pc, #540]	@ (8009a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800986e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009870:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009874:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009878:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800987c:	4a83      	ldr	r2, [pc, #524]	@ (8009a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800987e:	430b      	orrs	r3, r1
 8009880:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009882:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800988a:	f002 0310 	and.w	r3, r2, #16
 800988e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009892:	2300      	movs	r3, #0
 8009894:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009898:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800989c:	460b      	mov	r3, r1
 800989e:	4313      	orrs	r3, r2
 80098a0:	d01e      	beq.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80098a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80098aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098ae:	d10c      	bne.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80098b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098b4:	3328      	adds	r3, #40	@ 0x28
 80098b6:	2102      	movs	r1, #2
 80098b8:	4618      	mov	r0, r3
 80098ba:	f000 fe25 	bl	800a508 <RCCEx_PLL3_Config>
 80098be:	4603      	mov	r3, r0
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d002      	beq.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80098c4:	2301      	movs	r3, #1
 80098c6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80098ca:	4b70      	ldr	r3, [pc, #448]	@ (8009a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80098cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098ce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80098d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80098da:	4a6c      	ldr	r2, [pc, #432]	@ (8009a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80098dc:	430b      	orrs	r3, r1
 80098de:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80098e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80098ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80098f0:	2300      	movs	r3, #0
 80098f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80098f6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80098fa:	460b      	mov	r3, r1
 80098fc:	4313      	orrs	r3, r2
 80098fe:	d03e      	beq.n	800997e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009900:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009904:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009908:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800990c:	d022      	beq.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800990e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009912:	d81b      	bhi.n	800994c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8009914:	2b00      	cmp	r3, #0
 8009916:	d003      	beq.n	8009920 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8009918:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800991c:	d00b      	beq.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800991e:	e015      	b.n	800994c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009920:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009924:	3308      	adds	r3, #8
 8009926:	2100      	movs	r1, #0
 8009928:	4618      	mov	r0, r3
 800992a:	f000 fd3b 	bl	800a3a4 <RCCEx_PLL2_Config>
 800992e:	4603      	mov	r3, r0
 8009930:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009934:	e00f      	b.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009936:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800993a:	3328      	adds	r3, #40	@ 0x28
 800993c:	2102      	movs	r1, #2
 800993e:	4618      	mov	r0, r3
 8009940:	f000 fde2 	bl	800a508 <RCCEx_PLL3_Config>
 8009944:	4603      	mov	r3, r0
 8009946:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800994a:	e004      	b.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800994c:	2301      	movs	r3, #1
 800994e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009952:	e000      	b.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8009954:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009956:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800995a:	2b00      	cmp	r3, #0
 800995c:	d10b      	bne.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800995e:	4b4b      	ldr	r3, [pc, #300]	@ (8009a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009962:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009966:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800996a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800996e:	4a47      	ldr	r2, [pc, #284]	@ (8009a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009970:	430b      	orrs	r3, r1
 8009972:	6593      	str	r3, [r2, #88]	@ 0x58
 8009974:	e003      	b.n	800997e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009976:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800997a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800997e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009986:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800998a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800998c:	2300      	movs	r3, #0
 800998e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009990:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009994:	460b      	mov	r3, r1
 8009996:	4313      	orrs	r3, r2
 8009998:	d03b      	beq.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800999a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800999e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80099a6:	d01f      	beq.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80099a8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80099ac:	d818      	bhi.n	80099e0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80099ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80099b2:	d003      	beq.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80099b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80099b8:	d007      	beq.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80099ba:	e011      	b.n	80099e0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099bc:	4b33      	ldr	r3, [pc, #204]	@ (8009a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80099be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099c0:	4a32      	ldr	r2, [pc, #200]	@ (8009a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80099c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80099c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80099c8:	e00f      	b.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80099ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099ce:	3328      	adds	r3, #40	@ 0x28
 80099d0:	2101      	movs	r1, #1
 80099d2:	4618      	mov	r0, r3
 80099d4:	f000 fd98 	bl	800a508 <RCCEx_PLL3_Config>
 80099d8:	4603      	mov	r3, r0
 80099da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80099de:	e004      	b.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099e0:	2301      	movs	r3, #1
 80099e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80099e6:	e000      	b.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80099e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d10b      	bne.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80099f2:	4b26      	ldr	r3, [pc, #152]	@ (8009a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80099f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099f6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80099fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a02:	4a22      	ldr	r2, [pc, #136]	@ (8009a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009a04:	430b      	orrs	r3, r1
 8009a06:	6553      	str	r3, [r2, #84]	@ 0x54
 8009a08:	e003      	b.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a0a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009a0e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009a12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a1a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009a1e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009a20:	2300      	movs	r3, #0
 8009a22:	677b      	str	r3, [r7, #116]	@ 0x74
 8009a24:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009a28:	460b      	mov	r3, r1
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	d034      	beq.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009a2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d003      	beq.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8009a38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a3c:	d007      	beq.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8009a3e:	e011      	b.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a40:	4b12      	ldr	r3, [pc, #72]	@ (8009a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a44:	4a11      	ldr	r2, [pc, #68]	@ (8009a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009a46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009a4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009a4c:	e00e      	b.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009a4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a52:	3308      	adds	r3, #8
 8009a54:	2102      	movs	r1, #2
 8009a56:	4618      	mov	r0, r3
 8009a58:	f000 fca4 	bl	800a3a4 <RCCEx_PLL2_Config>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009a62:	e003      	b.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8009a64:	2301      	movs	r3, #1
 8009a66:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009a6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a6c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d10d      	bne.n	8009a90 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009a74:	4b05      	ldr	r3, [pc, #20]	@ (8009a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009a76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a78:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009a7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a82:	4a02      	ldr	r2, [pc, #8]	@ (8009a8c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009a84:	430b      	orrs	r3, r1
 8009a86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009a88:	e006      	b.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8009a8a:	bf00      	nop
 8009a8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a90:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009a94:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009a98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009aa4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009aaa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009aae:	460b      	mov	r3, r1
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	d00c      	beq.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009ab4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ab8:	3328      	adds	r3, #40	@ 0x28
 8009aba:	2102      	movs	r1, #2
 8009abc:	4618      	mov	r0, r3
 8009abe:	f000 fd23 	bl	800a508 <RCCEx_PLL3_Config>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d002      	beq.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009ace:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009ada:	663b      	str	r3, [r7, #96]	@ 0x60
 8009adc:	2300      	movs	r3, #0
 8009ade:	667b      	str	r3, [r7, #100]	@ 0x64
 8009ae0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	4313      	orrs	r3, r2
 8009ae8:	d038      	beq.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009aea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009af2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009af6:	d018      	beq.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8009af8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009afc:	d811      	bhi.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8009afe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b02:	d014      	beq.n	8009b2e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8009b04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b08:	d80b      	bhi.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d011      	beq.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8009b0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b12:	d106      	bne.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b14:	4bc3      	ldr	r3, [pc, #780]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b18:	4ac2      	ldr	r2, [pc, #776]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009b1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009b1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009b20:	e008      	b.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b22:	2301      	movs	r3, #1
 8009b24:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009b28:	e004      	b.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8009b2a:	bf00      	nop
 8009b2c:	e002      	b.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8009b2e:	bf00      	nop
 8009b30:	e000      	b.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8009b32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b34:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d10b      	bne.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009b3c:	4bb9      	ldr	r3, [pc, #740]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b40:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009b44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b4c:	4ab5      	ldr	r2, [pc, #724]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009b4e:	430b      	orrs	r3, r1
 8009b50:	6553      	str	r3, [r2, #84]	@ 0x54
 8009b52:	e003      	b.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b54:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009b58:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009b5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b64:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009b68:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009b6e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009b72:	460b      	mov	r3, r1
 8009b74:	4313      	orrs	r3, r2
 8009b76:	d009      	beq.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009b78:	4baa      	ldr	r3, [pc, #680]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009b7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b7c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009b80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009b86:	4aa7      	ldr	r2, [pc, #668]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009b88:	430b      	orrs	r3, r1
 8009b8a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009b8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b94:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009b98:	653b      	str	r3, [r7, #80]	@ 0x50
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	657b      	str	r3, [r7, #84]	@ 0x54
 8009b9e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009ba2:	460b      	mov	r3, r1
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	d009      	beq.n	8009bbc <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009ba8:	4b9e      	ldr	r3, [pc, #632]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009baa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bac:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009bb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bb6:	4a9b      	ldr	r2, [pc, #620]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009bb8:	430b      	orrs	r3, r1
 8009bba:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8009bbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009bc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009bca:	2300      	movs	r3, #0
 8009bcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009bce:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009bd2:	460b      	mov	r3, r1
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	d009      	beq.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8009bd8:	4b92      	ldr	r3, [pc, #584]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bdc:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8009be0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009be4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009be6:	4a8f      	ldr	r2, [pc, #572]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009be8:	430b      	orrs	r3, r1
 8009bea:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009bec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009bf8:	643b      	str	r3, [r7, #64]	@ 0x40
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8009bfe:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009c02:	460b      	mov	r3, r1
 8009c04:	4313      	orrs	r3, r2
 8009c06:	d00e      	beq.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009c08:	4b86      	ldr	r3, [pc, #536]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009c0a:	691b      	ldr	r3, [r3, #16]
 8009c0c:	4a85      	ldr	r2, [pc, #532]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009c0e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009c12:	6113      	str	r3, [r2, #16]
 8009c14:	4b83      	ldr	r3, [pc, #524]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009c16:	6919      	ldr	r1, [r3, #16]
 8009c18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c1c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009c20:	4a80      	ldr	r2, [pc, #512]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009c22:	430b      	orrs	r3, r1
 8009c24:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009c26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009c32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009c34:	2300      	movs	r3, #0
 8009c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c38:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009c3c:	460b      	mov	r3, r1
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	d009      	beq.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009c42:	4b78      	ldr	r3, [pc, #480]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c46:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009c4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c50:	4a74      	ldr	r2, [pc, #464]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009c52:	430b      	orrs	r3, r1
 8009c54:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009c56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c5e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009c62:	633b      	str	r3, [r7, #48]	@ 0x30
 8009c64:	2300      	movs	r3, #0
 8009c66:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c68:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009c6c:	460b      	mov	r3, r1
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	d00a      	beq.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009c72:	4b6c      	ldr	r3, [pc, #432]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009c74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c76:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009c7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009c82:	4a68      	ldr	r2, [pc, #416]	@ (8009e24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009c84:	430b      	orrs	r3, r1
 8009c86:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009c88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c90:	2100      	movs	r1, #0
 8009c92:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009c94:	f003 0301 	and.w	r3, r3, #1
 8009c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009c9a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009c9e:	460b      	mov	r3, r1
 8009ca0:	4313      	orrs	r3, r2
 8009ca2:	d011      	beq.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ca4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ca8:	3308      	adds	r3, #8
 8009caa:	2100      	movs	r1, #0
 8009cac:	4618      	mov	r0, r3
 8009cae:	f000 fb79 	bl	800a3a4 <RCCEx_PLL2_Config>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009cb8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d003      	beq.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cc0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009cc4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009cc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd0:	2100      	movs	r1, #0
 8009cd2:	6239      	str	r1, [r7, #32]
 8009cd4:	f003 0302 	and.w	r3, r3, #2
 8009cd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8009cda:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009cde:	460b      	mov	r3, r1
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	d011      	beq.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009ce4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ce8:	3308      	adds	r3, #8
 8009cea:	2101      	movs	r1, #1
 8009cec:	4618      	mov	r0, r3
 8009cee:	f000 fb59 	bl	800a3a4 <RCCEx_PLL2_Config>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009cf8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d003      	beq.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009d04:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009d08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d10:	2100      	movs	r1, #0
 8009d12:	61b9      	str	r1, [r7, #24]
 8009d14:	f003 0304 	and.w	r3, r3, #4
 8009d18:	61fb      	str	r3, [r7, #28]
 8009d1a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009d1e:	460b      	mov	r3, r1
 8009d20:	4313      	orrs	r3, r2
 8009d22:	d011      	beq.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009d24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d28:	3308      	adds	r3, #8
 8009d2a:	2102      	movs	r1, #2
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f000 fb39 	bl	800a3a4 <RCCEx_PLL2_Config>
 8009d32:	4603      	mov	r3, r0
 8009d34:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009d38:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d003      	beq.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d40:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009d44:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009d48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d50:	2100      	movs	r1, #0
 8009d52:	6139      	str	r1, [r7, #16]
 8009d54:	f003 0308 	and.w	r3, r3, #8
 8009d58:	617b      	str	r3, [r7, #20]
 8009d5a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009d5e:	460b      	mov	r3, r1
 8009d60:	4313      	orrs	r3, r2
 8009d62:	d011      	beq.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009d64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d68:	3328      	adds	r3, #40	@ 0x28
 8009d6a:	2100      	movs	r1, #0
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f000 fbcb 	bl	800a508 <RCCEx_PLL3_Config>
 8009d72:	4603      	mov	r3, r0
 8009d74:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8009d78:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d003      	beq.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d80:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009d84:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009d88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d90:	2100      	movs	r1, #0
 8009d92:	60b9      	str	r1, [r7, #8]
 8009d94:	f003 0310 	and.w	r3, r3, #16
 8009d98:	60fb      	str	r3, [r7, #12]
 8009d9a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009d9e:	460b      	mov	r3, r1
 8009da0:	4313      	orrs	r3, r2
 8009da2:	d011      	beq.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009da4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009da8:	3328      	adds	r3, #40	@ 0x28
 8009daa:	2101      	movs	r1, #1
 8009dac:	4618      	mov	r0, r3
 8009dae:	f000 fbab 	bl	800a508 <RCCEx_PLL3_Config>
 8009db2:	4603      	mov	r3, r0
 8009db4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009db8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d003      	beq.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dc0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009dc4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009dc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd0:	2100      	movs	r1, #0
 8009dd2:	6039      	str	r1, [r7, #0]
 8009dd4:	f003 0320 	and.w	r3, r3, #32
 8009dd8:	607b      	str	r3, [r7, #4]
 8009dda:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009dde:	460b      	mov	r3, r1
 8009de0:	4313      	orrs	r3, r2
 8009de2:	d011      	beq.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009de4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009de8:	3328      	adds	r3, #40	@ 0x28
 8009dea:	2102      	movs	r1, #2
 8009dec:	4618      	mov	r0, r3
 8009dee:	f000 fb8b 	bl	800a508 <RCCEx_PLL3_Config>
 8009df2:	4603      	mov	r3, r0
 8009df4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009df8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d003      	beq.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009e04:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8009e08:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d101      	bne.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8009e10:	2300      	movs	r3, #0
 8009e12:	e000      	b.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8009e14:	2301      	movs	r3, #1
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e22:	bf00      	nop
 8009e24:	58024400 	.word	0x58024400

08009e28 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8009e2c:	f7fe fde2 	bl	80089f4 <HAL_RCC_GetHCLKFreq>
 8009e30:	4602      	mov	r2, r0
 8009e32:	4b06      	ldr	r3, [pc, #24]	@ (8009e4c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009e34:	6a1b      	ldr	r3, [r3, #32]
 8009e36:	091b      	lsrs	r3, r3, #4
 8009e38:	f003 0307 	and.w	r3, r3, #7
 8009e3c:	4904      	ldr	r1, [pc, #16]	@ (8009e50 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009e3e:	5ccb      	ldrb	r3, [r1, r3]
 8009e40:	f003 031f 	and.w	r3, r3, #31
 8009e44:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	bd80      	pop	{r7, pc}
 8009e4c:	58024400 	.word	0x58024400
 8009e50:	08013410 	.word	0x08013410

08009e54 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b089      	sub	sp, #36	@ 0x24
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009e5c:	4ba1      	ldr	r3, [pc, #644]	@ (800a0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e60:	f003 0303 	and.w	r3, r3, #3
 8009e64:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009e66:	4b9f      	ldr	r3, [pc, #636]	@ (800a0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e6a:	0b1b      	lsrs	r3, r3, #12
 8009e6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009e70:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009e72:	4b9c      	ldr	r3, [pc, #624]	@ (800a0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e76:	091b      	lsrs	r3, r3, #4
 8009e78:	f003 0301 	and.w	r3, r3, #1
 8009e7c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009e7e:	4b99      	ldr	r3, [pc, #612]	@ (800a0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e82:	08db      	lsrs	r3, r3, #3
 8009e84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009e88:	693a      	ldr	r2, [r7, #16]
 8009e8a:	fb02 f303 	mul.w	r3, r2, r3
 8009e8e:	ee07 3a90 	vmov	s15, r3
 8009e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	f000 8111 	beq.w	800a0c4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009ea2:	69bb      	ldr	r3, [r7, #24]
 8009ea4:	2b02      	cmp	r3, #2
 8009ea6:	f000 8083 	beq.w	8009fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009eaa:	69bb      	ldr	r3, [r7, #24]
 8009eac:	2b02      	cmp	r3, #2
 8009eae:	f200 80a1 	bhi.w	8009ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009eb2:	69bb      	ldr	r3, [r7, #24]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d003      	beq.n	8009ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009eb8:	69bb      	ldr	r3, [r7, #24]
 8009eba:	2b01      	cmp	r3, #1
 8009ebc:	d056      	beq.n	8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009ebe:	e099      	b.n	8009ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ec0:	4b88      	ldr	r3, [pc, #544]	@ (800a0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f003 0320 	and.w	r3, r3, #32
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d02d      	beq.n	8009f28 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ecc:	4b85      	ldr	r3, [pc, #532]	@ (800a0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	08db      	lsrs	r3, r3, #3
 8009ed2:	f003 0303 	and.w	r3, r3, #3
 8009ed6:	4a84      	ldr	r2, [pc, #528]	@ (800a0e8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8009edc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	ee07 3a90 	vmov	s15, r3
 8009ee4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	ee07 3a90 	vmov	s15, r3
 8009eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ef6:	4b7b      	ldr	r3, [pc, #492]	@ (800a0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009efe:	ee07 3a90 	vmov	s15, r3
 8009f02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f06:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f0a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a0ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009f0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009f26:	e087      	b.n	800a038 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	ee07 3a90 	vmov	s15, r3
 8009f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f32:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009f36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f3a:	4b6a      	ldr	r3, [pc, #424]	@ (800a0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f42:	ee07 3a90 	vmov	s15, r3
 8009f46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f4e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a0ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009f52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f6a:	e065      	b.n	800a038 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	ee07 3a90 	vmov	s15, r3
 8009f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f76:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a0f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009f7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f7e:	4b59      	ldr	r3, [pc, #356]	@ (800a0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f86:	ee07 3a90 	vmov	s15, r3
 8009f8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f92:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a0ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009f96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009fa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009faa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009fae:	e043      	b.n	800a038 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	ee07 3a90 	vmov	s15, r3
 8009fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a0f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009fbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fc2:	4b48      	ldr	r3, [pc, #288]	@ (800a0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fca:	ee07 3a90 	vmov	s15, r3
 8009fce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fd6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a0ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009fda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fe2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009fe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ff2:	e021      	b.n	800a038 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	ee07 3a90 	vmov	s15, r3
 8009ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ffe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a0f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a006:	4b37      	ldr	r3, [pc, #220]	@ (800a0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a00a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a00e:	ee07 3a90 	vmov	s15, r3
 800a012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a016:	ed97 6a03 	vldr	s12, [r7, #12]
 800a01a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a0ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a01e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a026:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a02a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a02e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a032:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a036:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a038:	4b2a      	ldr	r3, [pc, #168]	@ (800a0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a03a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a03c:	0a5b      	lsrs	r3, r3, #9
 800a03e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a042:	ee07 3a90 	vmov	s15, r3
 800a046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a04a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a04e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a052:	edd7 6a07 	vldr	s13, [r7, #28]
 800a056:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a05a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a05e:	ee17 2a90 	vmov	r2, s15
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a066:	4b1f      	ldr	r3, [pc, #124]	@ (800a0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a06a:	0c1b      	lsrs	r3, r3, #16
 800a06c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a070:	ee07 3a90 	vmov	s15, r3
 800a074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a078:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a07c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a080:	edd7 6a07 	vldr	s13, [r7, #28]
 800a084:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a088:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a08c:	ee17 2a90 	vmov	r2, s15
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a094:	4b13      	ldr	r3, [pc, #76]	@ (800a0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a098:	0e1b      	lsrs	r3, r3, #24
 800a09a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a09e:	ee07 3a90 	vmov	s15, r3
 800a0a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a0aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0ae:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0ba:	ee17 2a90 	vmov	r2, s15
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a0c2:	e008      	b.n	800a0d6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	609a      	str	r2, [r3, #8]
}
 800a0d6:	bf00      	nop
 800a0d8:	3724      	adds	r7, #36	@ 0x24
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e0:	4770      	bx	lr
 800a0e2:	bf00      	nop
 800a0e4:	58024400 	.word	0x58024400
 800a0e8:	03d09000 	.word	0x03d09000
 800a0ec:	46000000 	.word	0x46000000
 800a0f0:	4c742400 	.word	0x4c742400
 800a0f4:	4a742400 	.word	0x4a742400
 800a0f8:	4bb71b00 	.word	0x4bb71b00

0800a0fc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b089      	sub	sp, #36	@ 0x24
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a104:	4ba1      	ldr	r3, [pc, #644]	@ (800a38c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a108:	f003 0303 	and.w	r3, r3, #3
 800a10c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a10e:	4b9f      	ldr	r3, [pc, #636]	@ (800a38c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a112:	0d1b      	lsrs	r3, r3, #20
 800a114:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a118:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a11a:	4b9c      	ldr	r3, [pc, #624]	@ (800a38c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a11c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a11e:	0a1b      	lsrs	r3, r3, #8
 800a120:	f003 0301 	and.w	r3, r3, #1
 800a124:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a126:	4b99      	ldr	r3, [pc, #612]	@ (800a38c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a12a:	08db      	lsrs	r3, r3, #3
 800a12c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a130:	693a      	ldr	r2, [r7, #16]
 800a132:	fb02 f303 	mul.w	r3, r2, r3
 800a136:	ee07 3a90 	vmov	s15, r3
 800a13a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a13e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	2b00      	cmp	r3, #0
 800a146:	f000 8111 	beq.w	800a36c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a14a:	69bb      	ldr	r3, [r7, #24]
 800a14c:	2b02      	cmp	r3, #2
 800a14e:	f000 8083 	beq.w	800a258 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a152:	69bb      	ldr	r3, [r7, #24]
 800a154:	2b02      	cmp	r3, #2
 800a156:	f200 80a1 	bhi.w	800a29c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a15a:	69bb      	ldr	r3, [r7, #24]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d003      	beq.n	800a168 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a160:	69bb      	ldr	r3, [r7, #24]
 800a162:	2b01      	cmp	r3, #1
 800a164:	d056      	beq.n	800a214 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a166:	e099      	b.n	800a29c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a168:	4b88      	ldr	r3, [pc, #544]	@ (800a38c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f003 0320 	and.w	r3, r3, #32
 800a170:	2b00      	cmp	r3, #0
 800a172:	d02d      	beq.n	800a1d0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a174:	4b85      	ldr	r3, [pc, #532]	@ (800a38c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	08db      	lsrs	r3, r3, #3
 800a17a:	f003 0303 	and.w	r3, r3, #3
 800a17e:	4a84      	ldr	r2, [pc, #528]	@ (800a390 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a180:	fa22 f303 	lsr.w	r3, r2, r3
 800a184:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	ee07 3a90 	vmov	s15, r3
 800a18c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	ee07 3a90 	vmov	s15, r3
 800a196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a19a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a19e:	4b7b      	ldr	r3, [pc, #492]	@ (800a38c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1a6:	ee07 3a90 	vmov	s15, r3
 800a1aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1b2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a394 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a1b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a1c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a1ce:	e087      	b.n	800a2e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	ee07 3a90 	vmov	s15, r3
 800a1d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1da:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a398 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a1de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1e2:	4b6a      	ldr	r3, [pc, #424]	@ (800a38c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1ea:	ee07 3a90 	vmov	s15, r3
 800a1ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1f6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a394 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a1fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a202:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a20a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a20e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a212:	e065      	b.n	800a2e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	ee07 3a90 	vmov	s15, r3
 800a21a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a21e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a39c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a226:	4b59      	ldr	r3, [pc, #356]	@ (800a38c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a22a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a22e:	ee07 3a90 	vmov	s15, r3
 800a232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a236:	ed97 6a03 	vldr	s12, [r7, #12]
 800a23a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a394 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a23e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a246:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a24a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a24e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a252:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a256:	e043      	b.n	800a2e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	ee07 3a90 	vmov	s15, r3
 800a25e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a262:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a3a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a26a:	4b48      	ldr	r3, [pc, #288]	@ (800a38c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a26c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a26e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a272:	ee07 3a90 	vmov	s15, r3
 800a276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a27a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a27e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a394 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a28a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a28e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a292:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a296:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a29a:	e021      	b.n	800a2e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	ee07 3a90 	vmov	s15, r3
 800a2a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2a6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a39c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a2aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2ae:	4b37      	ldr	r3, [pc, #220]	@ (800a38c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2b6:	ee07 3a90 	vmov	s15, r3
 800a2ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2be:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2c2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a394 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a2c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a2d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a2de:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a2e0:	4b2a      	ldr	r3, [pc, #168]	@ (800a38c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2e4:	0a5b      	lsrs	r3, r3, #9
 800a2e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2ea:	ee07 3a90 	vmov	s15, r3
 800a2ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a2f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2fa:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a306:	ee17 2a90 	vmov	r2, s15
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a30e:	4b1f      	ldr	r3, [pc, #124]	@ (800a38c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a312:	0c1b      	lsrs	r3, r3, #16
 800a314:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a318:	ee07 3a90 	vmov	s15, r3
 800a31c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a320:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a324:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a328:	edd7 6a07 	vldr	s13, [r7, #28]
 800a32c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a330:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a334:	ee17 2a90 	vmov	r2, s15
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a33c:	4b13      	ldr	r3, [pc, #76]	@ (800a38c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a33e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a340:	0e1b      	lsrs	r3, r3, #24
 800a342:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a346:	ee07 3a90 	vmov	s15, r3
 800a34a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a34e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a352:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a356:	edd7 6a07 	vldr	s13, [r7, #28]
 800a35a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a35e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a362:	ee17 2a90 	vmov	r2, s15
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a36a:	e008      	b.n	800a37e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2200      	movs	r2, #0
 800a370:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2200      	movs	r2, #0
 800a376:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2200      	movs	r2, #0
 800a37c:	609a      	str	r2, [r3, #8]
}
 800a37e:	bf00      	nop
 800a380:	3724      	adds	r7, #36	@ 0x24
 800a382:	46bd      	mov	sp, r7
 800a384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a388:	4770      	bx	lr
 800a38a:	bf00      	nop
 800a38c:	58024400 	.word	0x58024400
 800a390:	03d09000 	.word	0x03d09000
 800a394:	46000000 	.word	0x46000000
 800a398:	4c742400 	.word	0x4c742400
 800a39c:	4a742400 	.word	0x4a742400
 800a3a0:	4bb71b00 	.word	0x4bb71b00

0800a3a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b084      	sub	sp, #16
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
 800a3ac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a3b2:	4b53      	ldr	r3, [pc, #332]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a3b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3b6:	f003 0303 	and.w	r3, r3, #3
 800a3ba:	2b03      	cmp	r3, #3
 800a3bc:	d101      	bne.n	800a3c2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	e099      	b.n	800a4f6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a3c2:	4b4f      	ldr	r3, [pc, #316]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4a4e      	ldr	r2, [pc, #312]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a3c8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a3cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3ce:	f7f9 fca1 	bl	8003d14 <HAL_GetTick>
 800a3d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a3d4:	e008      	b.n	800a3e8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a3d6:	f7f9 fc9d 	bl	8003d14 <HAL_GetTick>
 800a3da:	4602      	mov	r2, r0
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	1ad3      	subs	r3, r2, r3
 800a3e0:	2b02      	cmp	r3, #2
 800a3e2:	d901      	bls.n	800a3e8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a3e4:	2303      	movs	r3, #3
 800a3e6:	e086      	b.n	800a4f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a3e8:	4b45      	ldr	r3, [pc, #276]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d1f0      	bne.n	800a3d6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a3f4:	4b42      	ldr	r3, [pc, #264]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a3f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3f8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	031b      	lsls	r3, r3, #12
 800a402:	493f      	ldr	r1, [pc, #252]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a404:	4313      	orrs	r3, r2
 800a406:	628b      	str	r3, [r1, #40]	@ 0x28
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	3b01      	subs	r3, #1
 800a40e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	689b      	ldr	r3, [r3, #8]
 800a416:	3b01      	subs	r3, #1
 800a418:	025b      	lsls	r3, r3, #9
 800a41a:	b29b      	uxth	r3, r3
 800a41c:	431a      	orrs	r2, r3
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	68db      	ldr	r3, [r3, #12]
 800a422:	3b01      	subs	r3, #1
 800a424:	041b      	lsls	r3, r3, #16
 800a426:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a42a:	431a      	orrs	r2, r3
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	691b      	ldr	r3, [r3, #16]
 800a430:	3b01      	subs	r3, #1
 800a432:	061b      	lsls	r3, r3, #24
 800a434:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a438:	4931      	ldr	r1, [pc, #196]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a43a:	4313      	orrs	r3, r2
 800a43c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a43e:	4b30      	ldr	r3, [pc, #192]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a442:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	695b      	ldr	r3, [r3, #20]
 800a44a:	492d      	ldr	r1, [pc, #180]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a44c:	4313      	orrs	r3, r2
 800a44e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a450:	4b2b      	ldr	r3, [pc, #172]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a454:	f023 0220 	bic.w	r2, r3, #32
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	699b      	ldr	r3, [r3, #24]
 800a45c:	4928      	ldr	r1, [pc, #160]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a45e:	4313      	orrs	r3, r2
 800a460:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a462:	4b27      	ldr	r3, [pc, #156]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a466:	4a26      	ldr	r2, [pc, #152]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a468:	f023 0310 	bic.w	r3, r3, #16
 800a46c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a46e:	4b24      	ldr	r3, [pc, #144]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a470:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a472:	4b24      	ldr	r3, [pc, #144]	@ (800a504 <RCCEx_PLL2_Config+0x160>)
 800a474:	4013      	ands	r3, r2
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	69d2      	ldr	r2, [r2, #28]
 800a47a:	00d2      	lsls	r2, r2, #3
 800a47c:	4920      	ldr	r1, [pc, #128]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a47e:	4313      	orrs	r3, r2
 800a480:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a482:	4b1f      	ldr	r3, [pc, #124]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a486:	4a1e      	ldr	r2, [pc, #120]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a488:	f043 0310 	orr.w	r3, r3, #16
 800a48c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d106      	bne.n	800a4a2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a494:	4b1a      	ldr	r3, [pc, #104]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a498:	4a19      	ldr	r2, [pc, #100]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a49a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a49e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a4a0:	e00f      	b.n	800a4c2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	2b01      	cmp	r3, #1
 800a4a6:	d106      	bne.n	800a4b6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a4a8:	4b15      	ldr	r3, [pc, #84]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a4aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4ac:	4a14      	ldr	r2, [pc, #80]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a4ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a4b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a4b4:	e005      	b.n	800a4c2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a4b6:	4b12      	ldr	r3, [pc, #72]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a4b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4ba:	4a11      	ldr	r2, [pc, #68]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a4bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a4c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a4c2:	4b0f      	ldr	r3, [pc, #60]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4a0e      	ldr	r2, [pc, #56]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a4c8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a4cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a4ce:	f7f9 fc21 	bl	8003d14 <HAL_GetTick>
 800a4d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a4d4:	e008      	b.n	800a4e8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a4d6:	f7f9 fc1d 	bl	8003d14 <HAL_GetTick>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	1ad3      	subs	r3, r2, r3
 800a4e0:	2b02      	cmp	r3, #2
 800a4e2:	d901      	bls.n	800a4e8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a4e4:	2303      	movs	r3, #3
 800a4e6:	e006      	b.n	800a4f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a4e8:	4b05      	ldr	r3, [pc, #20]	@ (800a500 <RCCEx_PLL2_Config+0x15c>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d0f0      	beq.n	800a4d6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a4f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3710      	adds	r7, #16
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	bf00      	nop
 800a500:	58024400 	.word	0x58024400
 800a504:	ffff0007 	.word	0xffff0007

0800a508 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b084      	sub	sp, #16
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a512:	2300      	movs	r3, #0
 800a514:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a516:	4b53      	ldr	r3, [pc, #332]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a51a:	f003 0303 	and.w	r3, r3, #3
 800a51e:	2b03      	cmp	r3, #3
 800a520:	d101      	bne.n	800a526 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a522:	2301      	movs	r3, #1
 800a524:	e099      	b.n	800a65a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a526:	4b4f      	ldr	r3, [pc, #316]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4a4e      	ldr	r2, [pc, #312]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a52c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a530:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a532:	f7f9 fbef 	bl	8003d14 <HAL_GetTick>
 800a536:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a538:	e008      	b.n	800a54c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a53a:	f7f9 fbeb 	bl	8003d14 <HAL_GetTick>
 800a53e:	4602      	mov	r2, r0
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	1ad3      	subs	r3, r2, r3
 800a544:	2b02      	cmp	r3, #2
 800a546:	d901      	bls.n	800a54c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a548:	2303      	movs	r3, #3
 800a54a:	e086      	b.n	800a65a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a54c:	4b45      	ldr	r3, [pc, #276]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a554:	2b00      	cmp	r3, #0
 800a556:	d1f0      	bne.n	800a53a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a558:	4b42      	ldr	r3, [pc, #264]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a55a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a55c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	051b      	lsls	r3, r3, #20
 800a566:	493f      	ldr	r1, [pc, #252]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a568:	4313      	orrs	r3, r2
 800a56a:	628b      	str	r3, [r1, #40]	@ 0x28
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	3b01      	subs	r3, #1
 800a572:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	689b      	ldr	r3, [r3, #8]
 800a57a:	3b01      	subs	r3, #1
 800a57c:	025b      	lsls	r3, r3, #9
 800a57e:	b29b      	uxth	r3, r3
 800a580:	431a      	orrs	r2, r3
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	68db      	ldr	r3, [r3, #12]
 800a586:	3b01      	subs	r3, #1
 800a588:	041b      	lsls	r3, r3, #16
 800a58a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a58e:	431a      	orrs	r2, r3
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	691b      	ldr	r3, [r3, #16]
 800a594:	3b01      	subs	r3, #1
 800a596:	061b      	lsls	r3, r3, #24
 800a598:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a59c:	4931      	ldr	r1, [pc, #196]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a59e:	4313      	orrs	r3, r2
 800a5a0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a5a2:	4b30      	ldr	r3, [pc, #192]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a5a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5a6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	695b      	ldr	r3, [r3, #20]
 800a5ae:	492d      	ldr	r1, [pc, #180]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a5b0:	4313      	orrs	r3, r2
 800a5b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a5b4:	4b2b      	ldr	r3, [pc, #172]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a5b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5b8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	699b      	ldr	r3, [r3, #24]
 800a5c0:	4928      	ldr	r1, [pc, #160]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a5c2:	4313      	orrs	r3, r2
 800a5c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a5c6:	4b27      	ldr	r3, [pc, #156]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a5c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5ca:	4a26      	ldr	r2, [pc, #152]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a5cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a5d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a5d2:	4b24      	ldr	r3, [pc, #144]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a5d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a5d6:	4b24      	ldr	r3, [pc, #144]	@ (800a668 <RCCEx_PLL3_Config+0x160>)
 800a5d8:	4013      	ands	r3, r2
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	69d2      	ldr	r2, [r2, #28]
 800a5de:	00d2      	lsls	r2, r2, #3
 800a5e0:	4920      	ldr	r1, [pc, #128]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a5e6:	4b1f      	ldr	r3, [pc, #124]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a5e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5ea:	4a1e      	ldr	r2, [pc, #120]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a5ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a5f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d106      	bne.n	800a606 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a5f8:	4b1a      	ldr	r3, [pc, #104]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a5fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5fc:	4a19      	ldr	r2, [pc, #100]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a5fe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a602:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a604:	e00f      	b.n	800a626 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	2b01      	cmp	r3, #1
 800a60a:	d106      	bne.n	800a61a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a60c:	4b15      	ldr	r3, [pc, #84]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a60e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a610:	4a14      	ldr	r2, [pc, #80]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a612:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a616:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a618:	e005      	b.n	800a626 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a61a:	4b12      	ldr	r3, [pc, #72]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a61c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a61e:	4a11      	ldr	r2, [pc, #68]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a620:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a624:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a626:	4b0f      	ldr	r3, [pc, #60]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	4a0e      	ldr	r2, [pc, #56]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a62c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a630:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a632:	f7f9 fb6f 	bl	8003d14 <HAL_GetTick>
 800a636:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a638:	e008      	b.n	800a64c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a63a:	f7f9 fb6b 	bl	8003d14 <HAL_GetTick>
 800a63e:	4602      	mov	r2, r0
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	1ad3      	subs	r3, r2, r3
 800a644:	2b02      	cmp	r3, #2
 800a646:	d901      	bls.n	800a64c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a648:	2303      	movs	r3, #3
 800a64a:	e006      	b.n	800a65a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a64c:	4b05      	ldr	r3, [pc, #20]	@ (800a664 <RCCEx_PLL3_Config+0x15c>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a654:	2b00      	cmp	r3, #0
 800a656:	d0f0      	beq.n	800a63a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a658:	7bfb      	ldrb	r3, [r7, #15]
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3710      	adds	r7, #16
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}
 800a662:	bf00      	nop
 800a664:	58024400 	.word	0x58024400
 800a668:	ffff0007 	.word	0xffff0007

0800a66c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b084      	sub	sp, #16
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d101      	bne.n	800a67e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a67a:	2301      	movs	r3, #1
 800a67c:	e10f      	b.n	800a89e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2200      	movs	r2, #0
 800a682:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4a87      	ldr	r2, [pc, #540]	@ (800a8a8 <HAL_SPI_Init+0x23c>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d00f      	beq.n	800a6ae <HAL_SPI_Init+0x42>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4a86      	ldr	r2, [pc, #536]	@ (800a8ac <HAL_SPI_Init+0x240>)
 800a694:	4293      	cmp	r3, r2
 800a696:	d00a      	beq.n	800a6ae <HAL_SPI_Init+0x42>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4a84      	ldr	r2, [pc, #528]	@ (800a8b0 <HAL_SPI_Init+0x244>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d005      	beq.n	800a6ae <HAL_SPI_Init+0x42>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	68db      	ldr	r3, [r3, #12]
 800a6a6:	2b0f      	cmp	r3, #15
 800a6a8:	d901      	bls.n	800a6ae <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	e0f7      	b.n	800a89e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f001 f968 	bl	800b984 <SPI_GetPacketSize>
 800a6b4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	4a7b      	ldr	r2, [pc, #492]	@ (800a8a8 <HAL_SPI_Init+0x23c>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d00c      	beq.n	800a6da <HAL_SPI_Init+0x6e>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4a79      	ldr	r2, [pc, #484]	@ (800a8ac <HAL_SPI_Init+0x240>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d007      	beq.n	800a6da <HAL_SPI_Init+0x6e>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	4a78      	ldr	r2, [pc, #480]	@ (800a8b0 <HAL_SPI_Init+0x244>)
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d002      	beq.n	800a6da <HAL_SPI_Init+0x6e>
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2b08      	cmp	r3, #8
 800a6d8:	d811      	bhi.n	800a6fe <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a6de:	4a72      	ldr	r2, [pc, #456]	@ (800a8a8 <HAL_SPI_Init+0x23c>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d009      	beq.n	800a6f8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4a70      	ldr	r2, [pc, #448]	@ (800a8ac <HAL_SPI_Init+0x240>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d004      	beq.n	800a6f8 <HAL_SPI_Init+0x8c>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4a6f      	ldr	r2, [pc, #444]	@ (800a8b0 <HAL_SPI_Init+0x244>)
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	d104      	bne.n	800a702 <HAL_SPI_Init+0x96>
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2b10      	cmp	r3, #16
 800a6fc:	d901      	bls.n	800a702 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a6fe:	2301      	movs	r3, #1
 800a700:	e0cd      	b.n	800a89e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a708:	b2db      	uxtb	r3, r3
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d106      	bne.n	800a71c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2200      	movs	r2, #0
 800a712:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f7f8 fa30 	bl	8002b7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2202      	movs	r2, #2
 800a720:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	681a      	ldr	r2, [r3, #0]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f022 0201 	bic.w	r2, r2, #1
 800a732:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	689b      	ldr	r3, [r3, #8]
 800a73a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800a73e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	699b      	ldr	r3, [r3, #24]
 800a744:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a748:	d119      	bne.n	800a77e <HAL_SPI_Init+0x112>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	685b      	ldr	r3, [r3, #4]
 800a74e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a752:	d103      	bne.n	800a75c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d008      	beq.n	800a76e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a760:	2b00      	cmp	r3, #0
 800a762:	d10c      	bne.n	800a77e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a768:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a76c:	d107      	bne.n	800a77e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	681a      	ldr	r2, [r3, #0]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a77c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	685b      	ldr	r3, [r3, #4]
 800a782:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a786:	2b00      	cmp	r3, #0
 800a788:	d00f      	beq.n	800a7aa <HAL_SPI_Init+0x13e>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	68db      	ldr	r3, [r3, #12]
 800a78e:	2b06      	cmp	r3, #6
 800a790:	d90b      	bls.n	800a7aa <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	430a      	orrs	r2, r1
 800a7a6:	601a      	str	r2, [r3, #0]
 800a7a8:	e007      	b.n	800a7ba <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	681a      	ldr	r2, [r3, #0]
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a7b8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	69da      	ldr	r2, [r3, #28]
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7c2:	431a      	orrs	r2, r3
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	431a      	orrs	r2, r3
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7cc:	ea42 0103 	orr.w	r1, r2, r3
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	68da      	ldr	r2, [r3, #12]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	430a      	orrs	r2, r1
 800a7da:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7e4:	431a      	orrs	r2, r3
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7ea:	431a      	orrs	r2, r3
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	699b      	ldr	r3, [r3, #24]
 800a7f0:	431a      	orrs	r2, r3
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	691b      	ldr	r3, [r3, #16]
 800a7f6:	431a      	orrs	r2, r3
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	695b      	ldr	r3, [r3, #20]
 800a7fc:	431a      	orrs	r2, r3
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6a1b      	ldr	r3, [r3, #32]
 800a802:	431a      	orrs	r2, r3
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	685b      	ldr	r3, [r3, #4]
 800a808:	431a      	orrs	r2, r3
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a80e:	431a      	orrs	r2, r3
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	689b      	ldr	r3, [r3, #8]
 800a814:	431a      	orrs	r2, r3
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a81a:	ea42 0103 	orr.w	r1, r2, r3
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	430a      	orrs	r2, r1
 800a828:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d113      	bne.n	800a85a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	689b      	ldr	r3, [r3, #8]
 800a838:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a844:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	689b      	ldr	r3, [r3, #8]
 800a84c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a858:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f022 0201 	bic.w	r2, r2, #1
 800a868:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a872:	2b00      	cmp	r3, #0
 800a874:	d00a      	beq.n	800a88c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	68db      	ldr	r3, [r3, #12]
 800a87c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	430a      	orrs	r2, r1
 800a88a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2200      	movs	r2, #0
 800a890:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2201      	movs	r2, #1
 800a898:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800a89c:	2300      	movs	r3, #0
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3710      	adds	r7, #16
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	40013000 	.word	0x40013000
 800a8ac:	40003800 	.word	0x40003800
 800a8b0:	40003c00 	.word	0x40003c00

0800a8b4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b088      	sub	sp, #32
 800a8b8:	af02      	add	r7, sp, #8
 800a8ba:	60f8      	str	r0, [r7, #12]
 800a8bc:	60b9      	str	r1, [r7, #8]
 800a8be:	603b      	str	r3, [r7, #0]
 800a8c0:	4613      	mov	r3, r2
 800a8c2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	3320      	adds	r3, #32
 800a8ca:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a8cc:	f7f9 fa22 	bl	8003d14 <HAL_GetTick>
 800a8d0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a8d8:	b2db      	uxtb	r3, r3
 800a8da:	2b01      	cmp	r3, #1
 800a8dc:	d001      	beq.n	800a8e2 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800a8de:	2302      	movs	r3, #2
 800a8e0:	e1d1      	b.n	800ac86 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a8e2:	68bb      	ldr	r3, [r7, #8]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d002      	beq.n	800a8ee <HAL_SPI_Transmit+0x3a>
 800a8e8:	88fb      	ldrh	r3, [r7, #6]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d101      	bne.n	800a8f2 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	e1c9      	b.n	800ac86 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	d101      	bne.n	800a900 <HAL_SPI_Transmit+0x4c>
 800a8fc:	2302      	movs	r3, #2
 800a8fe:	e1c2      	b.n	800ac86 <HAL_SPI_Transmit+0x3d2>
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	2201      	movs	r2, #1
 800a904:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	2203      	movs	r2, #3
 800a90c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	2200      	movs	r2, #0
 800a914:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	68ba      	ldr	r2, [r7, #8]
 800a91c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	88fa      	ldrh	r2, [r7, #6]
 800a922:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	88fa      	ldrh	r2, [r7, #6]
 800a92a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	2200      	movs	r2, #0
 800a932:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2200      	movs	r2, #0
 800a938:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	2200      	movs	r2, #0
 800a940:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	2200      	movs	r2, #0
 800a948:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2200      	movs	r2, #0
 800a94e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	689b      	ldr	r3, [r3, #8]
 800a954:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a958:	d108      	bne.n	800a96c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	681a      	ldr	r2, [r3, #0]
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a968:	601a      	str	r2, [r3, #0]
 800a96a:	e009      	b.n	800a980 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	68db      	ldr	r3, [r3, #12]
 800a972:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800a97e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	685a      	ldr	r2, [r3, #4]
 800a986:	4b96      	ldr	r3, [pc, #600]	@ (800abe0 <HAL_SPI_Transmit+0x32c>)
 800a988:	4013      	ands	r3, r2
 800a98a:	88f9      	ldrh	r1, [r7, #6]
 800a98c:	68fa      	ldr	r2, [r7, #12]
 800a98e:	6812      	ldr	r2, [r2, #0]
 800a990:	430b      	orrs	r3, r1
 800a992:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	681a      	ldr	r2, [r3, #0]
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f042 0201 	orr.w	r2, r2, #1
 800a9a2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	685b      	ldr	r3, [r3, #4]
 800a9a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a9ac:	d107      	bne.n	800a9be <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	681a      	ldr	r2, [r3, #0]
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a9bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	68db      	ldr	r3, [r3, #12]
 800a9c2:	2b0f      	cmp	r3, #15
 800a9c4:	d947      	bls.n	800aa56 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a9c6:	e03f      	b.n	800aa48 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	695b      	ldr	r3, [r3, #20]
 800a9ce:	f003 0302 	and.w	r3, r3, #2
 800a9d2:	2b02      	cmp	r3, #2
 800a9d4:	d114      	bne.n	800aa00 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	6812      	ldr	r2, [r2, #0]
 800a9e0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a9e6:	1d1a      	adds	r2, r3, #4
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a9f2:	b29b      	uxth	r3, r3
 800a9f4:	3b01      	subs	r3, #1
 800a9f6:	b29a      	uxth	r2, r3
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a9fe:	e023      	b.n	800aa48 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aa00:	f7f9 f988 	bl	8003d14 <HAL_GetTick>
 800aa04:	4602      	mov	r2, r0
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	1ad3      	subs	r3, r2, r3
 800aa0a:	683a      	ldr	r2, [r7, #0]
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d803      	bhi.n	800aa18 <HAL_SPI_Transmit+0x164>
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa16:	d102      	bne.n	800aa1e <HAL_SPI_Transmit+0x16a>
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d114      	bne.n	800aa48 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800aa1e:	68f8      	ldr	r0, [r7, #12]
 800aa20:	f000 fee2 	bl	800b7e8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa2a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	2201      	movs	r2, #1
 800aa38:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800aa44:	2303      	movs	r3, #3
 800aa46:	e11e      	b.n	800ac86 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800aa4e:	b29b      	uxth	r3, r3
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d1b9      	bne.n	800a9c8 <HAL_SPI_Transmit+0x114>
 800aa54:	e0f1      	b.n	800ac3a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	68db      	ldr	r3, [r3, #12]
 800aa5a:	2b07      	cmp	r3, #7
 800aa5c:	f240 80e6 	bls.w	800ac2c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800aa60:	e05d      	b.n	800ab1e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	695b      	ldr	r3, [r3, #20]
 800aa68:	f003 0302 	and.w	r3, r3, #2
 800aa6c:	2b02      	cmp	r3, #2
 800aa6e:	d132      	bne.n	800aad6 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800aa76:	b29b      	uxth	r3, r3
 800aa78:	2b01      	cmp	r3, #1
 800aa7a:	d918      	bls.n	800aaae <HAL_SPI_Transmit+0x1fa>
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d014      	beq.n	800aaae <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	6812      	ldr	r2, [r2, #0]
 800aa8e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aa94:	1d1a      	adds	r2, r3, #4
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800aaa0:	b29b      	uxth	r3, r3
 800aaa2:	3b02      	subs	r3, #2
 800aaa4:	b29a      	uxth	r2, r3
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800aaac:	e037      	b.n	800ab1e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aab2:	881a      	ldrh	r2, [r3, #0]
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aabc:	1c9a      	adds	r2, r3, #2
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	3b01      	subs	r3, #1
 800aacc:	b29a      	uxth	r2, r3
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800aad4:	e023      	b.n	800ab1e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aad6:	f7f9 f91d 	bl	8003d14 <HAL_GetTick>
 800aada:	4602      	mov	r2, r0
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	1ad3      	subs	r3, r2, r3
 800aae0:	683a      	ldr	r2, [r7, #0]
 800aae2:	429a      	cmp	r2, r3
 800aae4:	d803      	bhi.n	800aaee <HAL_SPI_Transmit+0x23a>
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaec:	d102      	bne.n	800aaf4 <HAL_SPI_Transmit+0x240>
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d114      	bne.n	800ab1e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800aaf4:	68f8      	ldr	r0, [r7, #12]
 800aaf6:	f000 fe77 	bl	800b7e8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab00:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	2200      	movs	r2, #0
 800ab16:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800ab1a:	2303      	movs	r3, #3
 800ab1c:	e0b3      	b.n	800ac86 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ab24:	b29b      	uxth	r3, r3
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d19b      	bne.n	800aa62 <HAL_SPI_Transmit+0x1ae>
 800ab2a:	e086      	b.n	800ac3a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	695b      	ldr	r3, [r3, #20]
 800ab32:	f003 0302 	and.w	r3, r3, #2
 800ab36:	2b02      	cmp	r3, #2
 800ab38:	d154      	bne.n	800abe4 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ab40:	b29b      	uxth	r3, r3
 800ab42:	2b03      	cmp	r3, #3
 800ab44:	d918      	bls.n	800ab78 <HAL_SPI_Transmit+0x2c4>
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab4a:	2b40      	cmp	r3, #64	@ 0x40
 800ab4c:	d914      	bls.n	800ab78 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	6812      	ldr	r2, [r2, #0]
 800ab58:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ab5e:	1d1a      	adds	r2, r3, #4
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ab6a:	b29b      	uxth	r3, r3
 800ab6c:	3b04      	subs	r3, #4
 800ab6e:	b29a      	uxth	r2, r3
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800ab76:	e059      	b.n	800ac2c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ab7e:	b29b      	uxth	r3, r3
 800ab80:	2b01      	cmp	r3, #1
 800ab82:	d917      	bls.n	800abb4 <HAL_SPI_Transmit+0x300>
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d013      	beq.n	800abb4 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ab90:	881a      	ldrh	r2, [r3, #0]
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ab9a:	1c9a      	adds	r2, r3, #2
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800aba6:	b29b      	uxth	r3, r3
 800aba8:	3b02      	subs	r3, #2
 800abaa:	b29a      	uxth	r2, r3
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800abb2:	e03b      	b.n	800ac2c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	3320      	adds	r3, #32
 800abbe:	7812      	ldrb	r2, [r2, #0]
 800abc0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800abc6:	1c5a      	adds	r2, r3, #1
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800abd2:	b29b      	uxth	r3, r3
 800abd4:	3b01      	subs	r3, #1
 800abd6:	b29a      	uxth	r2, r3
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800abde:	e025      	b.n	800ac2c <HAL_SPI_Transmit+0x378>
 800abe0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800abe4:	f7f9 f896 	bl	8003d14 <HAL_GetTick>
 800abe8:	4602      	mov	r2, r0
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	1ad3      	subs	r3, r2, r3
 800abee:	683a      	ldr	r2, [r7, #0]
 800abf0:	429a      	cmp	r2, r3
 800abf2:	d803      	bhi.n	800abfc <HAL_SPI_Transmit+0x348>
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abfa:	d102      	bne.n	800ac02 <HAL_SPI_Transmit+0x34e>
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d114      	bne.n	800ac2c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ac02:	68f8      	ldr	r0, [r7, #12]
 800ac04:	f000 fdf0 	bl	800b7e8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac0e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	2200      	movs	r2, #0
 800ac24:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800ac28:	2303      	movs	r3, #3
 800ac2a:	e02c      	b.n	800ac86 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ac32:	b29b      	uxth	r3, r3
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	f47f af79 	bne.w	800ab2c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	9300      	str	r3, [sp, #0]
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	2200      	movs	r2, #0
 800ac42:	2108      	movs	r1, #8
 800ac44:	68f8      	ldr	r0, [r7, #12]
 800ac46:	f000 fe6f 	bl	800b928 <SPI_WaitOnFlagUntilTimeout>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d007      	beq.n	800ac60 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac56:	f043 0220 	orr.w	r2, r3, #32
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ac60:	68f8      	ldr	r0, [r7, #12]
 800ac62:	f000 fdc1 	bl	800b7e8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	2201      	movs	r2, #1
 800ac6a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	2200      	movs	r2, #0
 800ac72:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d001      	beq.n	800ac84 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800ac80:	2301      	movs	r3, #1
 800ac82:	e000      	b.n	800ac86 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800ac84:	2300      	movs	r3, #0
  }
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3718      	adds	r7, #24
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}
 800ac8e:	bf00      	nop

0800ac90 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b088      	sub	sp, #32
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	60f8      	str	r0, [r7, #12]
 800ac98:	60b9      	str	r1, [r7, #8]
 800ac9a:	603b      	str	r3, [r7, #0]
 800ac9c:	4613      	mov	r3, r2
 800ac9e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aca4:	095b      	lsrs	r3, r3, #5
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	3301      	adds	r3, #1
 800acaa:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	3330      	adds	r3, #48	@ 0x30
 800acb2:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800acb4:	f7f9 f82e 	bl	8003d14 <HAL_GetTick>
 800acb8:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800acc0:	b2db      	uxtb	r3, r3
 800acc2:	2b01      	cmp	r3, #1
 800acc4:	d001      	beq.n	800acca <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800acc6:	2302      	movs	r3, #2
 800acc8:	e250      	b.n	800b16c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d002      	beq.n	800acd6 <HAL_SPI_Receive+0x46>
 800acd0:	88fb      	ldrh	r3, [r7, #6]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d101      	bne.n	800acda <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800acd6:	2301      	movs	r3, #1
 800acd8:	e248      	b.n	800b16c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	d101      	bne.n	800ace8 <HAL_SPI_Receive+0x58>
 800ace4:	2302      	movs	r3, #2
 800ace6:	e241      	b.n	800b16c <HAL_SPI_Receive+0x4dc>
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	2201      	movs	r2, #1
 800acec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	2204      	movs	r2, #4
 800acf4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	2200      	movs	r2, #0
 800acfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	68ba      	ldr	r2, [r7, #8]
 800ad04:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	88fa      	ldrh	r2, [r7, #6]
 800ad0a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	88fa      	ldrh	r2, [r7, #6]
 800ad12:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	2200      	movs	r2, #0
 800ad28:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2200      	movs	r2, #0
 800ad36:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	689b      	ldr	r3, [r3, #8]
 800ad3c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800ad40:	d108      	bne.n	800ad54 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	681a      	ldr	r2, [r3, #0]
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ad50:	601a      	str	r2, [r3, #0]
 800ad52:	e009      	b.n	800ad68 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	68db      	ldr	r3, [r3, #12]
 800ad5a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800ad66:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	685a      	ldr	r2, [r3, #4]
 800ad6e:	4b95      	ldr	r3, [pc, #596]	@ (800afc4 <HAL_SPI_Receive+0x334>)
 800ad70:	4013      	ands	r3, r2
 800ad72:	88f9      	ldrh	r1, [r7, #6]
 800ad74:	68fa      	ldr	r2, [r7, #12]
 800ad76:	6812      	ldr	r2, [r2, #0]
 800ad78:	430b      	orrs	r3, r1
 800ad7a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	681a      	ldr	r2, [r3, #0]
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f042 0201 	orr.w	r2, r2, #1
 800ad8a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ad94:	d107      	bne.n	800ada6 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	681a      	ldr	r2, [r3, #0]
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ada4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	68db      	ldr	r3, [r3, #12]
 800adaa:	2b0f      	cmp	r3, #15
 800adac:	d96c      	bls.n	800ae88 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800adae:	e064      	b.n	800ae7a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	695b      	ldr	r3, [r3, #20]
 800adb6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	695b      	ldr	r3, [r3, #20]
 800adbe:	f003 0301 	and.w	r3, r3, #1
 800adc2:	2b01      	cmp	r3, #1
 800adc4:	d114      	bne.n	800adf0 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681a      	ldr	r2, [r3, #0]
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800adce:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800add0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800add6:	1d1a      	adds	r2, r3, #4
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ade2:	b29b      	uxth	r3, r3
 800ade4:	3b01      	subs	r3, #1
 800ade6:	b29a      	uxth	r2, r3
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800adee:	e044      	b.n	800ae7a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800adf6:	b29b      	uxth	r3, r3
 800adf8:	8bfa      	ldrh	r2, [r7, #30]
 800adfa:	429a      	cmp	r2, r3
 800adfc:	d919      	bls.n	800ae32 <HAL_SPI_Receive+0x1a2>
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d014      	beq.n	800ae32 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681a      	ldr	r2, [r3, #0]
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae10:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800ae12:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae18:	1d1a      	adds	r2, r3, #4
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ae24:	b29b      	uxth	r3, r3
 800ae26:	3b01      	subs	r3, #1
 800ae28:	b29a      	uxth	r2, r3
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ae30:	e023      	b.n	800ae7a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ae32:	f7f8 ff6f 	bl	8003d14 <HAL_GetTick>
 800ae36:	4602      	mov	r2, r0
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	1ad3      	subs	r3, r2, r3
 800ae3c:	683a      	ldr	r2, [r7, #0]
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d803      	bhi.n	800ae4a <HAL_SPI_Receive+0x1ba>
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae48:	d102      	bne.n	800ae50 <HAL_SPI_Receive+0x1c0>
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d114      	bne.n	800ae7a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ae50:	68f8      	ldr	r0, [r7, #12]
 800ae52:	f000 fcc9 	bl	800b7e8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ae5c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	2201      	movs	r2, #1
 800ae6a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2200      	movs	r2, #0
 800ae72:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800ae76:	2303      	movs	r3, #3
 800ae78:	e178      	b.n	800b16c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ae80:	b29b      	uxth	r3, r3
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d194      	bne.n	800adb0 <HAL_SPI_Receive+0x120>
 800ae86:	e15e      	b.n	800b146 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	68db      	ldr	r3, [r3, #12]
 800ae8c:	2b07      	cmp	r3, #7
 800ae8e:	f240 8153 	bls.w	800b138 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ae92:	e08f      	b.n	800afb4 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	695b      	ldr	r3, [r3, #20]
 800ae9a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	695b      	ldr	r3, [r3, #20]
 800aea2:	f003 0301 	and.w	r3, r3, #1
 800aea6:	2b01      	cmp	r3, #1
 800aea8:	d114      	bne.n	800aed4 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aeae:	69ba      	ldr	r2, [r7, #24]
 800aeb0:	8812      	ldrh	r2, [r2, #0]
 800aeb2:	b292      	uxth	r2, r2
 800aeb4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aeba:	1c9a      	adds	r2, r3, #2
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aec6:	b29b      	uxth	r3, r3
 800aec8:	3b01      	subs	r3, #1
 800aeca:	b29a      	uxth	r2, r3
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800aed2:	e06f      	b.n	800afb4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aeda:	b29b      	uxth	r3, r3
 800aedc:	8bfa      	ldrh	r2, [r7, #30]
 800aede:	429a      	cmp	r2, r3
 800aee0:	d924      	bls.n	800af2c <HAL_SPI_Receive+0x29c>
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d01f      	beq.n	800af2c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aef0:	69ba      	ldr	r2, [r7, #24]
 800aef2:	8812      	ldrh	r2, [r2, #0]
 800aef4:	b292      	uxth	r2, r2
 800aef6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aefc:	1c9a      	adds	r2, r3, #2
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800af06:	69ba      	ldr	r2, [r7, #24]
 800af08:	8812      	ldrh	r2, [r2, #0]
 800af0a:	b292      	uxth	r2, r2
 800af0c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800af12:	1c9a      	adds	r2, r3, #2
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800af1e:	b29b      	uxth	r3, r3
 800af20:	3b02      	subs	r3, #2
 800af22:	b29a      	uxth	r2, r3
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800af2a:	e043      	b.n	800afb4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800af32:	b29b      	uxth	r3, r3
 800af34:	2b01      	cmp	r3, #1
 800af36:	d119      	bne.n	800af6c <HAL_SPI_Receive+0x2dc>
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d014      	beq.n	800af6c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800af46:	69ba      	ldr	r2, [r7, #24]
 800af48:	8812      	ldrh	r2, [r2, #0]
 800af4a:	b292      	uxth	r2, r2
 800af4c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800af52:	1c9a      	adds	r2, r3, #2
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800af5e:	b29b      	uxth	r3, r3
 800af60:	3b01      	subs	r3, #1
 800af62:	b29a      	uxth	r2, r3
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800af6a:	e023      	b.n	800afb4 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800af6c:	f7f8 fed2 	bl	8003d14 <HAL_GetTick>
 800af70:	4602      	mov	r2, r0
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	1ad3      	subs	r3, r2, r3
 800af76:	683a      	ldr	r2, [r7, #0]
 800af78:	429a      	cmp	r2, r3
 800af7a:	d803      	bhi.n	800af84 <HAL_SPI_Receive+0x2f4>
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af82:	d102      	bne.n	800af8a <HAL_SPI_Receive+0x2fa>
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d114      	bne.n	800afb4 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800af8a:	68f8      	ldr	r0, [r7, #12]
 800af8c:	f000 fc2c 	bl	800b7e8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af96:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	2201      	movs	r2, #1
 800afa4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	2200      	movs	r2, #0
 800afac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800afb0:	2303      	movs	r3, #3
 800afb2:	e0db      	b.n	800b16c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800afba:	b29b      	uxth	r3, r3
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	f47f af69 	bne.w	800ae94 <HAL_SPI_Receive+0x204>
 800afc2:	e0c0      	b.n	800b146 <HAL_SPI_Receive+0x4b6>
 800afc4:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	695b      	ldr	r3, [r3, #20]
 800afce:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	695b      	ldr	r3, [r3, #20]
 800afd6:	f003 0301 	and.w	r3, r3, #1
 800afda:	2b01      	cmp	r3, #1
 800afdc:	d117      	bne.n	800b00e <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800afea:	7812      	ldrb	r2, [r2, #0]
 800afec:	b2d2      	uxtb	r2, r2
 800afee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aff4:	1c5a      	adds	r2, r3, #1
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b000:	b29b      	uxth	r3, r3
 800b002:	3b01      	subs	r3, #1
 800b004:	b29a      	uxth	r2, r3
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b00c:	e094      	b.n	800b138 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b014:	b29b      	uxth	r3, r3
 800b016:	8bfa      	ldrh	r2, [r7, #30]
 800b018:	429a      	cmp	r2, r3
 800b01a:	d946      	bls.n	800b0aa <HAL_SPI_Receive+0x41a>
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b022:	2b00      	cmp	r3, #0
 800b024:	d041      	beq.n	800b0aa <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b032:	7812      	ldrb	r2, [r2, #0]
 800b034:	b2d2      	uxtb	r2, r2
 800b036:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b03c:	1c5a      	adds	r2, r3, #1
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b04e:	7812      	ldrb	r2, [r2, #0]
 800b050:	b2d2      	uxtb	r2, r2
 800b052:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b058:	1c5a      	adds	r2, r3, #1
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b06a:	7812      	ldrb	r2, [r2, #0]
 800b06c:	b2d2      	uxtb	r2, r2
 800b06e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b074:	1c5a      	adds	r2, r3, #1
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b086:	7812      	ldrb	r2, [r2, #0]
 800b088:	b2d2      	uxtb	r2, r2
 800b08a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b090:	1c5a      	adds	r2, r3, #1
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b09c:	b29b      	uxth	r3, r3
 800b09e:	3b04      	subs	r3, #4
 800b0a0:	b29a      	uxth	r2, r3
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b0a8:	e046      	b.n	800b138 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b0b0:	b29b      	uxth	r3, r3
 800b0b2:	2b03      	cmp	r3, #3
 800b0b4:	d81c      	bhi.n	800b0f0 <HAL_SPI_Receive+0x460>
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d017      	beq.n	800b0f0 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b0cc:	7812      	ldrb	r2, [r2, #0]
 800b0ce:	b2d2      	uxtb	r2, r2
 800b0d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b0d6:	1c5a      	adds	r2, r3, #1
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b0e2:	b29b      	uxth	r3, r3
 800b0e4:	3b01      	subs	r3, #1
 800b0e6:	b29a      	uxth	r2, r3
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b0ee:	e023      	b.n	800b138 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b0f0:	f7f8 fe10 	bl	8003d14 <HAL_GetTick>
 800b0f4:	4602      	mov	r2, r0
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	1ad3      	subs	r3, r2, r3
 800b0fa:	683a      	ldr	r2, [r7, #0]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d803      	bhi.n	800b108 <HAL_SPI_Receive+0x478>
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b106:	d102      	bne.n	800b10e <HAL_SPI_Receive+0x47e>
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d114      	bne.n	800b138 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b10e:	68f8      	ldr	r0, [r7, #12]
 800b110:	f000 fb6a 	bl	800b7e8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b11a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	2201      	movs	r2, #1
 800b128:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	2200      	movs	r2, #0
 800b130:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b134:	2303      	movs	r3, #3
 800b136:	e019      	b.n	800b16c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b13e:	b29b      	uxth	r3, r3
 800b140:	2b00      	cmp	r3, #0
 800b142:	f47f af41 	bne.w	800afc8 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b146:	68f8      	ldr	r0, [r7, #12]
 800b148:	f000 fb4e 	bl	800b7e8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	2201      	movs	r2, #1
 800b150:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	2200      	movs	r2, #0
 800b158:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b162:	2b00      	cmp	r3, #0
 800b164:	d001      	beq.n	800b16a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800b166:	2301      	movs	r3, #1
 800b168:	e000      	b.n	800b16c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800b16a:	2300      	movs	r3, #0
  }
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	3720      	adds	r7, #32
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}

0800b174 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b08e      	sub	sp, #56	@ 0x38
 800b178:	af02      	add	r7, sp, #8
 800b17a:	60f8      	str	r0, [r7, #12]
 800b17c:	60b9      	str	r1, [r7, #8]
 800b17e:	607a      	str	r2, [r7, #4]
 800b180:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	3320      	adds	r3, #32
 800b188:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	3330      	adds	r3, #48	@ 0x30
 800b190:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b196:	095b      	lsrs	r3, r3, #5
 800b198:	b29b      	uxth	r3, r3
 800b19a:	3301      	adds	r3, #1
 800b19c:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b19e:	f7f8 fdb9 	bl	8003d14 <HAL_GetTick>
 800b1a2:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800b1a4:	887b      	ldrh	r3, [r7, #2]
 800b1a6:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800b1a8:	887b      	ldrh	r3, [r7, #2]
 800b1aa:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b1b2:	b2db      	uxtb	r3, r3
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	d001      	beq.n	800b1bc <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800b1b8:	2302      	movs	r3, #2
 800b1ba:	e310      	b.n	800b7de <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d005      	beq.n	800b1ce <HAL_SPI_TransmitReceive+0x5a>
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d002      	beq.n	800b1ce <HAL_SPI_TransmitReceive+0x5a>
 800b1c8:	887b      	ldrh	r3, [r7, #2]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d101      	bne.n	800b1d2 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	e305      	b.n	800b7de <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b1d8:	2b01      	cmp	r3, #1
 800b1da:	d101      	bne.n	800b1e0 <HAL_SPI_TransmitReceive+0x6c>
 800b1dc:	2302      	movs	r3, #2
 800b1de:	e2fe      	b.n	800b7de <HAL_SPI_TransmitReceive+0x66a>
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	2201      	movs	r2, #1
 800b1e4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	2205      	movs	r2, #5
 800b1ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	687a      	ldr	r2, [r7, #4]
 800b1fc:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	887a      	ldrh	r2, [r7, #2]
 800b202:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	887a      	ldrh	r2, [r7, #2]
 800b20a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	68ba      	ldr	r2, [r7, #8]
 800b212:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	887a      	ldrh	r2, [r7, #2]
 800b218:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	887a      	ldrh	r2, [r7, #2]
 800b220:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2200      	movs	r2, #0
 800b228:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	2200      	movs	r2, #0
 800b22e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	68da      	ldr	r2, [r3, #12]
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800b23e:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	4a70      	ldr	r2, [pc, #448]	@ (800b408 <HAL_SPI_TransmitReceive+0x294>)
 800b246:	4293      	cmp	r3, r2
 800b248:	d009      	beq.n	800b25e <HAL_SPI_TransmitReceive+0xea>
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	4a6f      	ldr	r2, [pc, #444]	@ (800b40c <HAL_SPI_TransmitReceive+0x298>)
 800b250:	4293      	cmp	r3, r2
 800b252:	d004      	beq.n	800b25e <HAL_SPI_TransmitReceive+0xea>
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	4a6d      	ldr	r2, [pc, #436]	@ (800b410 <HAL_SPI_TransmitReceive+0x29c>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d102      	bne.n	800b264 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800b25e:	2310      	movs	r3, #16
 800b260:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b262:	e001      	b.n	800b268 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800b264:	2308      	movs	r3, #8
 800b266:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	685a      	ldr	r2, [r3, #4]
 800b26e:	4b69      	ldr	r3, [pc, #420]	@ (800b414 <HAL_SPI_TransmitReceive+0x2a0>)
 800b270:	4013      	ands	r3, r2
 800b272:	8879      	ldrh	r1, [r7, #2]
 800b274:	68fa      	ldr	r2, [r7, #12]
 800b276:	6812      	ldr	r2, [r2, #0]
 800b278:	430b      	orrs	r3, r1
 800b27a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	681a      	ldr	r2, [r3, #0]
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f042 0201 	orr.w	r2, r2, #1
 800b28a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	685b      	ldr	r3, [r3, #4]
 800b290:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b294:	d107      	bne.n	800b2a6 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	681a      	ldr	r2, [r3, #0]
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b2a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	68db      	ldr	r3, [r3, #12]
 800b2aa:	2b0f      	cmp	r3, #15
 800b2ac:	f240 80a2 	bls.w	800b3f4 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800b2b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2b2:	089b      	lsrs	r3, r3, #2
 800b2b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b2b6:	e094      	b.n	800b3e2 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	695b      	ldr	r3, [r3, #20]
 800b2be:	f003 0302 	and.w	r3, r3, #2
 800b2c2:	2b02      	cmp	r3, #2
 800b2c4:	d120      	bne.n	800b308 <HAL_SPI_TransmitReceive+0x194>
 800b2c6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d01d      	beq.n	800b308 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800b2cc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b2ce:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800b2d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2d2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b2d4:	429a      	cmp	r2, r3
 800b2d6:	d217      	bcs.n	800b308 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	6812      	ldr	r2, [r2, #0]
 800b2e2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b2e8:	1d1a      	adds	r2, r3, #4
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b2f4:	b29b      	uxth	r3, r3
 800b2f6:	3b01      	subs	r3, #1
 800b2f8:	b29a      	uxth	r2, r3
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b306:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	695b      	ldr	r3, [r3, #20]
 800b30e:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800b310:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b312:	2b00      	cmp	r3, #0
 800b314:	d065      	beq.n	800b3e2 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	695b      	ldr	r3, [r3, #20]
 800b31c:	f003 0301 	and.w	r3, r3, #1
 800b320:	2b01      	cmp	r3, #1
 800b322:	d118      	bne.n	800b356 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681a      	ldr	r2, [r3, #0]
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b32c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b32e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b334:	1d1a      	adds	r2, r3, #4
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b340:	b29b      	uxth	r3, r3
 800b342:	3b01      	subs	r3, #1
 800b344:	b29a      	uxth	r2, r3
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b352:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b354:	e045      	b.n	800b3e2 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b356:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b358:	8bfb      	ldrh	r3, [r7, #30]
 800b35a:	429a      	cmp	r2, r3
 800b35c:	d21d      	bcs.n	800b39a <HAL_SPI_TransmitReceive+0x226>
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b364:	2b00      	cmp	r3, #0
 800b366:	d018      	beq.n	800b39a <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	681a      	ldr	r2, [r3, #0]
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b370:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b372:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b378:	1d1a      	adds	r2, r3, #4
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b384:	b29b      	uxth	r3, r3
 800b386:	3b01      	subs	r3, #1
 800b388:	b29a      	uxth	r2, r3
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b396:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b398:	e023      	b.n	800b3e2 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b39a:	f7f8 fcbb 	bl	8003d14 <HAL_GetTick>
 800b39e:	4602      	mov	r2, r0
 800b3a0:	69bb      	ldr	r3, [r7, #24]
 800b3a2:	1ad3      	subs	r3, r2, r3
 800b3a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	d803      	bhi.n	800b3b2 <HAL_SPI_TransmitReceive+0x23e>
 800b3aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3b0:	d102      	bne.n	800b3b8 <HAL_SPI_TransmitReceive+0x244>
 800b3b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d114      	bne.n	800b3e2 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800b3b8:	68f8      	ldr	r0, [r7, #12]
 800b3ba:	f000 fa15 	bl	800b7e8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b3c4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	2201      	movs	r2, #1
 800b3d2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2200      	movs	r2, #0
 800b3da:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800b3de:	2303      	movs	r3, #3
 800b3e0:	e1fd      	b.n	800b7de <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b3e2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	f47f af67 	bne.w	800b2b8 <HAL_SPI_TransmitReceive+0x144>
 800b3ea:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	f47f af63 	bne.w	800b2b8 <HAL_SPI_TransmitReceive+0x144>
 800b3f2:	e1ce      	b.n	800b792 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	68db      	ldr	r3, [r3, #12]
 800b3f8:	2b07      	cmp	r3, #7
 800b3fa:	f240 81c2 	bls.w	800b782 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800b3fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b400:	085b      	lsrs	r3, r3, #1
 800b402:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b404:	e0c9      	b.n	800b59a <HAL_SPI_TransmitReceive+0x426>
 800b406:	bf00      	nop
 800b408:	40013000 	.word	0x40013000
 800b40c:	40003800 	.word	0x40003800
 800b410:	40003c00 	.word	0x40003c00
 800b414:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	695b      	ldr	r3, [r3, #20]
 800b41e:	f003 0302 	and.w	r3, r3, #2
 800b422:	2b02      	cmp	r3, #2
 800b424:	d11f      	bne.n	800b466 <HAL_SPI_TransmitReceive+0x2f2>
 800b426:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d01c      	beq.n	800b466 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800b42c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b42e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800b430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b432:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b434:	429a      	cmp	r2, r3
 800b436:	d216      	bcs.n	800b466 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b43c:	881a      	ldrh	r2, [r3, #0]
 800b43e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b440:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b446:	1c9a      	adds	r2, r3, #2
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b452:	b29b      	uxth	r3, r3
 800b454:	3b01      	subs	r3, #1
 800b456:	b29a      	uxth	r2, r3
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b464:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	695b      	ldr	r3, [r3, #20]
 800b46c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800b46e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b470:	2b00      	cmp	r3, #0
 800b472:	f000 8092 	beq.w	800b59a <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	695b      	ldr	r3, [r3, #20]
 800b47c:	f003 0301 	and.w	r3, r3, #1
 800b480:	2b01      	cmp	r3, #1
 800b482:	d118      	bne.n	800b4b6 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b488:	6a3a      	ldr	r2, [r7, #32]
 800b48a:	8812      	ldrh	r2, [r2, #0]
 800b48c:	b292      	uxth	r2, r2
 800b48e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b494:	1c9a      	adds	r2, r3, #2
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b4a0:	b29b      	uxth	r3, r3
 800b4a2:	3b01      	subs	r3, #1
 800b4a4:	b29a      	uxth	r2, r3
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b4b2:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b4b4:	e071      	b.n	800b59a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b4b6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b4b8:	8bfb      	ldrh	r3, [r7, #30]
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	d228      	bcs.n	800b510 <HAL_SPI_TransmitReceive+0x39c>
 800b4be:	697b      	ldr	r3, [r7, #20]
 800b4c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d023      	beq.n	800b510 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b4cc:	6a3a      	ldr	r2, [r7, #32]
 800b4ce:	8812      	ldrh	r2, [r2, #0]
 800b4d0:	b292      	uxth	r2, r2
 800b4d2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b4d8:	1c9a      	adds	r2, r3, #2
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b4e2:	6a3a      	ldr	r2, [r7, #32]
 800b4e4:	8812      	ldrh	r2, [r2, #0]
 800b4e6:	b292      	uxth	r2, r2
 800b4e8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b4ee:	1c9a      	adds	r2, r3, #2
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b4fa:	b29b      	uxth	r3, r3
 800b4fc:	3b02      	subs	r3, #2
 800b4fe:	b29a      	uxth	r2, r3
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b50c:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b50e:	e044      	b.n	800b59a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800b510:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b512:	2b01      	cmp	r3, #1
 800b514:	d11d      	bne.n	800b552 <HAL_SPI_TransmitReceive+0x3de>
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d018      	beq.n	800b552 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b524:	6a3a      	ldr	r2, [r7, #32]
 800b526:	8812      	ldrh	r2, [r2, #0]
 800b528:	b292      	uxth	r2, r2
 800b52a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b530:	1c9a      	adds	r2, r3, #2
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b53c:	b29b      	uxth	r3, r3
 800b53e:	3b01      	subs	r3, #1
 800b540:	b29a      	uxth	r2, r3
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b54e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b550:	e023      	b.n	800b59a <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b552:	f7f8 fbdf 	bl	8003d14 <HAL_GetTick>
 800b556:	4602      	mov	r2, r0
 800b558:	69bb      	ldr	r3, [r7, #24]
 800b55a:	1ad3      	subs	r3, r2, r3
 800b55c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b55e:	429a      	cmp	r2, r3
 800b560:	d803      	bhi.n	800b56a <HAL_SPI_TransmitReceive+0x3f6>
 800b562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b564:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b568:	d102      	bne.n	800b570 <HAL_SPI_TransmitReceive+0x3fc>
 800b56a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d114      	bne.n	800b59a <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800b570:	68f8      	ldr	r0, [r7, #12]
 800b572:	f000 f939 	bl	800b7e8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b57c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	2201      	movs	r2, #1
 800b58a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	2200      	movs	r2, #0
 800b592:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800b596:	2303      	movs	r3, #3
 800b598:	e121      	b.n	800b7de <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b59a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	f47f af3b 	bne.w	800b418 <HAL_SPI_TransmitReceive+0x2a4>
 800b5a2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	f47f af37 	bne.w	800b418 <HAL_SPI_TransmitReceive+0x2a4>
 800b5aa:	e0f2      	b.n	800b792 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	695b      	ldr	r3, [r3, #20]
 800b5b2:	f003 0302 	and.w	r3, r3, #2
 800b5b6:	2b02      	cmp	r3, #2
 800b5b8:	d121      	bne.n	800b5fe <HAL_SPI_TransmitReceive+0x48a>
 800b5ba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d01e      	beq.n	800b5fe <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800b5c0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b5c2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800b5c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5c6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800b5c8:	429a      	cmp	r2, r3
 800b5ca:	d218      	bcs.n	800b5fe <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	3320      	adds	r3, #32
 800b5d6:	7812      	ldrb	r2, [r2, #0]
 800b5d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b5de:	1c5a      	adds	r2, r3, #1
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b5ea:	b29b      	uxth	r3, r3
 800b5ec:	3b01      	subs	r3, #1
 800b5ee:	b29a      	uxth	r2, r3
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b5fc:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	695b      	ldr	r3, [r3, #20]
 800b604:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800b606:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b608:	2b00      	cmp	r3, #0
 800b60a:	f000 80ba 	beq.w	800b782 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	695b      	ldr	r3, [r3, #20]
 800b614:	f003 0301 	and.w	r3, r3, #1
 800b618:	2b01      	cmp	r3, #1
 800b61a:	d11b      	bne.n	800b654 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b628:	7812      	ldrb	r2, [r2, #0]
 800b62a:	b2d2      	uxtb	r2, r2
 800b62c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b632:	1c5a      	adds	r2, r3, #1
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b63e:	b29b      	uxth	r3, r3
 800b640:	3b01      	subs	r3, #1
 800b642:	b29a      	uxth	r2, r3
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b650:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b652:	e096      	b.n	800b782 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b654:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b656:	8bfb      	ldrh	r3, [r7, #30]
 800b658:	429a      	cmp	r2, r3
 800b65a:	d24a      	bcs.n	800b6f2 <HAL_SPI_TransmitReceive+0x57e>
 800b65c:	697b      	ldr	r3, [r7, #20]
 800b65e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b662:	2b00      	cmp	r3, #0
 800b664:	d045      	beq.n	800b6f2 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b672:	7812      	ldrb	r2, [r2, #0]
 800b674:	b2d2      	uxtb	r2, r2
 800b676:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b67c:	1c5a      	adds	r2, r3, #1
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b68e:	7812      	ldrb	r2, [r2, #0]
 800b690:	b2d2      	uxtb	r2, r2
 800b692:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b698:	1c5a      	adds	r2, r3, #1
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b6aa:	7812      	ldrb	r2, [r2, #0]
 800b6ac:	b2d2      	uxtb	r2, r2
 800b6ae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b6b4:	1c5a      	adds	r2, r3, #1
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b6c6:	7812      	ldrb	r2, [r2, #0]
 800b6c8:	b2d2      	uxtb	r2, r2
 800b6ca:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b6d0:	1c5a      	adds	r2, r3, #1
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b6dc:	b29b      	uxth	r3, r3
 800b6de:	3b04      	subs	r3, #4
 800b6e0:	b29a      	uxth	r2, r3
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b6ee:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b6f0:	e047      	b.n	800b782 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800b6f2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b6f4:	2b03      	cmp	r3, #3
 800b6f6:	d820      	bhi.n	800b73a <HAL_SPI_TransmitReceive+0x5c6>
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d01b      	beq.n	800b73a <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b70e:	7812      	ldrb	r2, [r2, #0]
 800b710:	b2d2      	uxtb	r2, r2
 800b712:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b718:	1c5a      	adds	r2, r3, #1
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b724:	b29b      	uxth	r3, r3
 800b726:	3b01      	subs	r3, #1
 800b728:	b29a      	uxth	r2, r3
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b736:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b738:	e023      	b.n	800b782 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b73a:	f7f8 faeb 	bl	8003d14 <HAL_GetTick>
 800b73e:	4602      	mov	r2, r0
 800b740:	69bb      	ldr	r3, [r7, #24]
 800b742:	1ad3      	subs	r3, r2, r3
 800b744:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b746:	429a      	cmp	r2, r3
 800b748:	d803      	bhi.n	800b752 <HAL_SPI_TransmitReceive+0x5de>
 800b74a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b74c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b750:	d102      	bne.n	800b758 <HAL_SPI_TransmitReceive+0x5e4>
 800b752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b754:	2b00      	cmp	r3, #0
 800b756:	d114      	bne.n	800b782 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800b758:	68f8      	ldr	r0, [r7, #12]
 800b75a:	f000 f845 	bl	800b7e8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b764:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	2201      	movs	r2, #1
 800b772:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	2200      	movs	r2, #0
 800b77a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800b77e:	2303      	movs	r3, #3
 800b780:	e02d      	b.n	800b7de <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b782:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b784:	2b00      	cmp	r3, #0
 800b786:	f47f af11 	bne.w	800b5ac <HAL_SPI_TransmitReceive+0x438>
 800b78a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	f47f af0d 	bne.w	800b5ac <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800b792:	69bb      	ldr	r3, [r7, #24]
 800b794:	9300      	str	r3, [sp, #0]
 800b796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b798:	2200      	movs	r2, #0
 800b79a:	2108      	movs	r1, #8
 800b79c:	68f8      	ldr	r0, [r7, #12]
 800b79e:	f000 f8c3 	bl	800b928 <SPI_WaitOnFlagUntilTimeout>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d007      	beq.n	800b7b8 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b7ae:	f043 0220 	orr.w	r2, r3, #32
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b7b8:	68f8      	ldr	r0, [r7, #12]
 800b7ba:	f000 f815 	bl	800b7e8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2201      	movs	r2, #1
 800b7c2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d001      	beq.n	800b7dc <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800b7d8:	2301      	movs	r3, #1
 800b7da:	e000      	b.n	800b7de <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800b7dc:	2300      	movs	r3, #0
  }
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3730      	adds	r7, #48	@ 0x30
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}
 800b7e6:	bf00      	nop

0800b7e8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b085      	sub	sp, #20
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	695b      	ldr	r3, [r3, #20]
 800b7f6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	699a      	ldr	r2, [r3, #24]
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	f042 0208 	orr.w	r2, r2, #8
 800b806:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	699a      	ldr	r2, [r3, #24]
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	f042 0210 	orr.w	r2, r2, #16
 800b816:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	681a      	ldr	r2, [r3, #0]
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f022 0201 	bic.w	r2, r2, #1
 800b826:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	6919      	ldr	r1, [r3, #16]
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681a      	ldr	r2, [r3, #0]
 800b832:	4b3c      	ldr	r3, [pc, #240]	@ (800b924 <SPI_CloseTransfer+0x13c>)
 800b834:	400b      	ands	r3, r1
 800b836:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	689a      	ldr	r2, [r3, #8]
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800b846:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b84e:	b2db      	uxtb	r3, r3
 800b850:	2b04      	cmp	r3, #4
 800b852:	d014      	beq.n	800b87e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f003 0320 	and.w	r3, r3, #32
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d00f      	beq.n	800b87e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b864:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	699a      	ldr	r2, [r3, #24]
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f042 0220 	orr.w	r2, r2, #32
 800b87c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b884:	b2db      	uxtb	r3, r3
 800b886:	2b03      	cmp	r3, #3
 800b888:	d014      	beq.n	800b8b4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b890:	2b00      	cmp	r3, #0
 800b892:	d00f      	beq.n	800b8b4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b89a:	f043 0204 	orr.w	r2, r3, #4
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	699a      	ldr	r2, [r3, #24]
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b8b2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d00f      	beq.n	800b8de <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b8c4:	f043 0201 	orr.w	r2, r3, #1
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	699a      	ldr	r2, [r3, #24]
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b8dc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d00f      	beq.n	800b908 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b8ee:	f043 0208 	orr.w	r2, r3, #8
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	699a      	ldr	r2, [r3, #24]
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b906:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2200      	movs	r2, #0
 800b90c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2200      	movs	r2, #0
 800b914:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800b918:	bf00      	nop
 800b91a:	3714      	adds	r7, #20
 800b91c:	46bd      	mov	sp, r7
 800b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b922:	4770      	bx	lr
 800b924:	fffffc90 	.word	0xfffffc90

0800b928 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b084      	sub	sp, #16
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	60f8      	str	r0, [r7, #12]
 800b930:	60b9      	str	r1, [r7, #8]
 800b932:	603b      	str	r3, [r7, #0]
 800b934:	4613      	mov	r3, r2
 800b936:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b938:	e010      	b.n	800b95c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b93a:	f7f8 f9eb 	bl	8003d14 <HAL_GetTick>
 800b93e:	4602      	mov	r2, r0
 800b940:	69bb      	ldr	r3, [r7, #24]
 800b942:	1ad3      	subs	r3, r2, r3
 800b944:	683a      	ldr	r2, [r7, #0]
 800b946:	429a      	cmp	r2, r3
 800b948:	d803      	bhi.n	800b952 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b950:	d102      	bne.n	800b958 <SPI_WaitOnFlagUntilTimeout+0x30>
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d101      	bne.n	800b95c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800b958:	2303      	movs	r3, #3
 800b95a:	e00f      	b.n	800b97c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	695a      	ldr	r2, [r3, #20]
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	4013      	ands	r3, r2
 800b966:	68ba      	ldr	r2, [r7, #8]
 800b968:	429a      	cmp	r2, r3
 800b96a:	bf0c      	ite	eq
 800b96c:	2301      	moveq	r3, #1
 800b96e:	2300      	movne	r3, #0
 800b970:	b2db      	uxtb	r3, r3
 800b972:	461a      	mov	r2, r3
 800b974:	79fb      	ldrb	r3, [r7, #7]
 800b976:	429a      	cmp	r2, r3
 800b978:	d0df      	beq.n	800b93a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800b97a:	2300      	movs	r3, #0
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3710      	adds	r7, #16
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}

0800b984 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800b984:	b480      	push	{r7}
 800b986:	b085      	sub	sp, #20
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b990:	095b      	lsrs	r3, r3, #5
 800b992:	3301      	adds	r3, #1
 800b994:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	68db      	ldr	r3, [r3, #12]
 800b99a:	3301      	adds	r3, #1
 800b99c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	3307      	adds	r3, #7
 800b9a2:	08db      	lsrs	r3, r3, #3
 800b9a4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	68fa      	ldr	r2, [r7, #12]
 800b9aa:	fb02 f303 	mul.w	r3, r2, r3
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3714      	adds	r7, #20
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b8:	4770      	bx	lr

0800b9ba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b9ba:	b580      	push	{r7, lr}
 800b9bc:	b082      	sub	sp, #8
 800b9be:	af00      	add	r7, sp, #0
 800b9c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d101      	bne.n	800b9cc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	e049      	b.n	800ba60 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b9d2:	b2db      	uxtb	r3, r3
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d106      	bne.n	800b9e6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f7f7 fcd9 	bl	8003398 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2202      	movs	r2, #2
 800b9ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681a      	ldr	r2, [r3, #0]
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	3304      	adds	r3, #4
 800b9f6:	4619      	mov	r1, r3
 800b9f8:	4610      	mov	r0, r2
 800b9fa:	f000 fc57 	bl	800c2ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2201      	movs	r2, #1
 800ba02:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2201      	movs	r2, #1
 800ba0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2201      	movs	r2, #1
 800ba12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2201      	movs	r2, #1
 800ba1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2201      	movs	r2, #1
 800ba22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2201      	movs	r2, #1
 800ba2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2201      	movs	r2, #1
 800ba32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2201      	movs	r2, #1
 800ba3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2201      	movs	r2, #1
 800ba42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2201      	movs	r2, #1
 800ba4a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2201      	movs	r2, #1
 800ba52:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2201      	movs	r2, #1
 800ba5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ba5e:	2300      	movs	r3, #0
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3708      	adds	r7, #8
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b085      	sub	sp, #20
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ba76:	b2db      	uxtb	r3, r3
 800ba78:	2b01      	cmp	r3, #1
 800ba7a:	d001      	beq.n	800ba80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	e054      	b.n	800bb2a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2202      	movs	r2, #2
 800ba84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	68da      	ldr	r2, [r3, #12]
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	f042 0201 	orr.w	r2, r2, #1
 800ba96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	4a26      	ldr	r2, [pc, #152]	@ (800bb38 <HAL_TIM_Base_Start_IT+0xd0>)
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	d022      	beq.n	800bae8 <HAL_TIM_Base_Start_IT+0x80>
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800baaa:	d01d      	beq.n	800bae8 <HAL_TIM_Base_Start_IT+0x80>
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	4a22      	ldr	r2, [pc, #136]	@ (800bb3c <HAL_TIM_Base_Start_IT+0xd4>)
 800bab2:	4293      	cmp	r3, r2
 800bab4:	d018      	beq.n	800bae8 <HAL_TIM_Base_Start_IT+0x80>
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	4a21      	ldr	r2, [pc, #132]	@ (800bb40 <HAL_TIM_Base_Start_IT+0xd8>)
 800babc:	4293      	cmp	r3, r2
 800babe:	d013      	beq.n	800bae8 <HAL_TIM_Base_Start_IT+0x80>
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	4a1f      	ldr	r2, [pc, #124]	@ (800bb44 <HAL_TIM_Base_Start_IT+0xdc>)
 800bac6:	4293      	cmp	r3, r2
 800bac8:	d00e      	beq.n	800bae8 <HAL_TIM_Base_Start_IT+0x80>
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	4a1e      	ldr	r2, [pc, #120]	@ (800bb48 <HAL_TIM_Base_Start_IT+0xe0>)
 800bad0:	4293      	cmp	r3, r2
 800bad2:	d009      	beq.n	800bae8 <HAL_TIM_Base_Start_IT+0x80>
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	4a1c      	ldr	r2, [pc, #112]	@ (800bb4c <HAL_TIM_Base_Start_IT+0xe4>)
 800bada:	4293      	cmp	r3, r2
 800badc:	d004      	beq.n	800bae8 <HAL_TIM_Base_Start_IT+0x80>
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	4a1b      	ldr	r2, [pc, #108]	@ (800bb50 <HAL_TIM_Base_Start_IT+0xe8>)
 800bae4:	4293      	cmp	r3, r2
 800bae6:	d115      	bne.n	800bb14 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	689a      	ldr	r2, [r3, #8]
 800baee:	4b19      	ldr	r3, [pc, #100]	@ (800bb54 <HAL_TIM_Base_Start_IT+0xec>)
 800baf0:	4013      	ands	r3, r2
 800baf2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	2b06      	cmp	r3, #6
 800baf8:	d015      	beq.n	800bb26 <HAL_TIM_Base_Start_IT+0xbe>
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bb00:	d011      	beq.n	800bb26 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	681a      	ldr	r2, [r3, #0]
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f042 0201 	orr.w	r2, r2, #1
 800bb10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb12:	e008      	b.n	800bb26 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	681a      	ldr	r2, [r3, #0]
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	f042 0201 	orr.w	r2, r2, #1
 800bb22:	601a      	str	r2, [r3, #0]
 800bb24:	e000      	b.n	800bb28 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb26:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bb28:	2300      	movs	r3, #0
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3714      	adds	r7, #20
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb34:	4770      	bx	lr
 800bb36:	bf00      	nop
 800bb38:	40010000 	.word	0x40010000
 800bb3c:	40000400 	.word	0x40000400
 800bb40:	40000800 	.word	0x40000800
 800bb44:	40000c00 	.word	0x40000c00
 800bb48:	40010400 	.word	0x40010400
 800bb4c:	40001800 	.word	0x40001800
 800bb50:	40014000 	.word	0x40014000
 800bb54:	00010007 	.word	0x00010007

0800bb58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b082      	sub	sp, #8
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d101      	bne.n	800bb6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bb66:	2301      	movs	r3, #1
 800bb68:	e049      	b.n	800bbfe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bb70:	b2db      	uxtb	r3, r3
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d106      	bne.n	800bb84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2200      	movs	r2, #0
 800bb7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f7f7 fbbc 	bl	80032fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2202      	movs	r2, #2
 800bb88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681a      	ldr	r2, [r3, #0]
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	3304      	adds	r3, #4
 800bb94:	4619      	mov	r1, r3
 800bb96:	4610      	mov	r0, r2
 800bb98:	f000 fb88 	bl	800c2ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2201      	movs	r2, #1
 800bba0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2201      	movs	r2, #1
 800bba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2201      	movs	r2, #1
 800bbb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2201      	movs	r2, #1
 800bbb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2201      	movs	r2, #1
 800bbc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2201      	movs	r2, #1
 800bbc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2201      	movs	r2, #1
 800bbd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2201      	movs	r2, #1
 800bbe0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2201      	movs	r2, #1
 800bbf0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2201      	movs	r2, #1
 800bbf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bbfc:	2300      	movs	r3, #0
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3708      	adds	r7, #8
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}
	...

0800bc08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b084      	sub	sp, #16
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d109      	bne.n	800bc2c <HAL_TIM_PWM_Start+0x24>
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800bc1e:	b2db      	uxtb	r3, r3
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	bf14      	ite	ne
 800bc24:	2301      	movne	r3, #1
 800bc26:	2300      	moveq	r3, #0
 800bc28:	b2db      	uxtb	r3, r3
 800bc2a:	e03c      	b.n	800bca6 <HAL_TIM_PWM_Start+0x9e>
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	2b04      	cmp	r3, #4
 800bc30:	d109      	bne.n	800bc46 <HAL_TIM_PWM_Start+0x3e>
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800bc38:	b2db      	uxtb	r3, r3
 800bc3a:	2b01      	cmp	r3, #1
 800bc3c:	bf14      	ite	ne
 800bc3e:	2301      	movne	r3, #1
 800bc40:	2300      	moveq	r3, #0
 800bc42:	b2db      	uxtb	r3, r3
 800bc44:	e02f      	b.n	800bca6 <HAL_TIM_PWM_Start+0x9e>
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	2b08      	cmp	r3, #8
 800bc4a:	d109      	bne.n	800bc60 <HAL_TIM_PWM_Start+0x58>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bc52:	b2db      	uxtb	r3, r3
 800bc54:	2b01      	cmp	r3, #1
 800bc56:	bf14      	ite	ne
 800bc58:	2301      	movne	r3, #1
 800bc5a:	2300      	moveq	r3, #0
 800bc5c:	b2db      	uxtb	r3, r3
 800bc5e:	e022      	b.n	800bca6 <HAL_TIM_PWM_Start+0x9e>
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	2b0c      	cmp	r3, #12
 800bc64:	d109      	bne.n	800bc7a <HAL_TIM_PWM_Start+0x72>
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bc6c:	b2db      	uxtb	r3, r3
 800bc6e:	2b01      	cmp	r3, #1
 800bc70:	bf14      	ite	ne
 800bc72:	2301      	movne	r3, #1
 800bc74:	2300      	moveq	r3, #0
 800bc76:	b2db      	uxtb	r3, r3
 800bc78:	e015      	b.n	800bca6 <HAL_TIM_PWM_Start+0x9e>
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	2b10      	cmp	r3, #16
 800bc7e:	d109      	bne.n	800bc94 <HAL_TIM_PWM_Start+0x8c>
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bc86:	b2db      	uxtb	r3, r3
 800bc88:	2b01      	cmp	r3, #1
 800bc8a:	bf14      	ite	ne
 800bc8c:	2301      	movne	r3, #1
 800bc8e:	2300      	moveq	r3, #0
 800bc90:	b2db      	uxtb	r3, r3
 800bc92:	e008      	b.n	800bca6 <HAL_TIM_PWM_Start+0x9e>
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800bc9a:	b2db      	uxtb	r3, r3
 800bc9c:	2b01      	cmp	r3, #1
 800bc9e:	bf14      	ite	ne
 800bca0:	2301      	movne	r3, #1
 800bca2:	2300      	moveq	r3, #0
 800bca4:	b2db      	uxtb	r3, r3
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d001      	beq.n	800bcae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800bcaa:	2301      	movs	r3, #1
 800bcac:	e0a1      	b.n	800bdf2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d104      	bne.n	800bcbe <HAL_TIM_PWM_Start+0xb6>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2202      	movs	r2, #2
 800bcb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bcbc:	e023      	b.n	800bd06 <HAL_TIM_PWM_Start+0xfe>
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	2b04      	cmp	r3, #4
 800bcc2:	d104      	bne.n	800bcce <HAL_TIM_PWM_Start+0xc6>
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2202      	movs	r2, #2
 800bcc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bccc:	e01b      	b.n	800bd06 <HAL_TIM_PWM_Start+0xfe>
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	2b08      	cmp	r3, #8
 800bcd2:	d104      	bne.n	800bcde <HAL_TIM_PWM_Start+0xd6>
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2202      	movs	r2, #2
 800bcd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bcdc:	e013      	b.n	800bd06 <HAL_TIM_PWM_Start+0xfe>
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	2b0c      	cmp	r3, #12
 800bce2:	d104      	bne.n	800bcee <HAL_TIM_PWM_Start+0xe6>
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2202      	movs	r2, #2
 800bce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bcec:	e00b      	b.n	800bd06 <HAL_TIM_PWM_Start+0xfe>
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	2b10      	cmp	r3, #16
 800bcf2:	d104      	bne.n	800bcfe <HAL_TIM_PWM_Start+0xf6>
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2202      	movs	r2, #2
 800bcf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bcfc:	e003      	b.n	800bd06 <HAL_TIM_PWM_Start+0xfe>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2202      	movs	r2, #2
 800bd02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	2201      	movs	r2, #1
 800bd0c:	6839      	ldr	r1, [r7, #0]
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f000 fe48 	bl	800c9a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	4a38      	ldr	r2, [pc, #224]	@ (800bdfc <HAL_TIM_PWM_Start+0x1f4>)
 800bd1a:	4293      	cmp	r3, r2
 800bd1c:	d013      	beq.n	800bd46 <HAL_TIM_PWM_Start+0x13e>
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	4a37      	ldr	r2, [pc, #220]	@ (800be00 <HAL_TIM_PWM_Start+0x1f8>)
 800bd24:	4293      	cmp	r3, r2
 800bd26:	d00e      	beq.n	800bd46 <HAL_TIM_PWM_Start+0x13e>
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	4a35      	ldr	r2, [pc, #212]	@ (800be04 <HAL_TIM_PWM_Start+0x1fc>)
 800bd2e:	4293      	cmp	r3, r2
 800bd30:	d009      	beq.n	800bd46 <HAL_TIM_PWM_Start+0x13e>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	4a34      	ldr	r2, [pc, #208]	@ (800be08 <HAL_TIM_PWM_Start+0x200>)
 800bd38:	4293      	cmp	r3, r2
 800bd3a:	d004      	beq.n	800bd46 <HAL_TIM_PWM_Start+0x13e>
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	4a32      	ldr	r2, [pc, #200]	@ (800be0c <HAL_TIM_PWM_Start+0x204>)
 800bd42:	4293      	cmp	r3, r2
 800bd44:	d101      	bne.n	800bd4a <HAL_TIM_PWM_Start+0x142>
 800bd46:	2301      	movs	r3, #1
 800bd48:	e000      	b.n	800bd4c <HAL_TIM_PWM_Start+0x144>
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d007      	beq.n	800bd60 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bd5e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	4a25      	ldr	r2, [pc, #148]	@ (800bdfc <HAL_TIM_PWM_Start+0x1f4>)
 800bd66:	4293      	cmp	r3, r2
 800bd68:	d022      	beq.n	800bdb0 <HAL_TIM_PWM_Start+0x1a8>
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd72:	d01d      	beq.n	800bdb0 <HAL_TIM_PWM_Start+0x1a8>
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	4a25      	ldr	r2, [pc, #148]	@ (800be10 <HAL_TIM_PWM_Start+0x208>)
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d018      	beq.n	800bdb0 <HAL_TIM_PWM_Start+0x1a8>
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	4a24      	ldr	r2, [pc, #144]	@ (800be14 <HAL_TIM_PWM_Start+0x20c>)
 800bd84:	4293      	cmp	r3, r2
 800bd86:	d013      	beq.n	800bdb0 <HAL_TIM_PWM_Start+0x1a8>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	4a22      	ldr	r2, [pc, #136]	@ (800be18 <HAL_TIM_PWM_Start+0x210>)
 800bd8e:	4293      	cmp	r3, r2
 800bd90:	d00e      	beq.n	800bdb0 <HAL_TIM_PWM_Start+0x1a8>
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	4a1a      	ldr	r2, [pc, #104]	@ (800be00 <HAL_TIM_PWM_Start+0x1f8>)
 800bd98:	4293      	cmp	r3, r2
 800bd9a:	d009      	beq.n	800bdb0 <HAL_TIM_PWM_Start+0x1a8>
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	4a1e      	ldr	r2, [pc, #120]	@ (800be1c <HAL_TIM_PWM_Start+0x214>)
 800bda2:	4293      	cmp	r3, r2
 800bda4:	d004      	beq.n	800bdb0 <HAL_TIM_PWM_Start+0x1a8>
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	4a16      	ldr	r2, [pc, #88]	@ (800be04 <HAL_TIM_PWM_Start+0x1fc>)
 800bdac:	4293      	cmp	r3, r2
 800bdae:	d115      	bne.n	800bddc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	689a      	ldr	r2, [r3, #8]
 800bdb6:	4b1a      	ldr	r3, [pc, #104]	@ (800be20 <HAL_TIM_PWM_Start+0x218>)
 800bdb8:	4013      	ands	r3, r2
 800bdba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	2b06      	cmp	r3, #6
 800bdc0:	d015      	beq.n	800bdee <HAL_TIM_PWM_Start+0x1e6>
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bdc8:	d011      	beq.n	800bdee <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	681a      	ldr	r2, [r3, #0]
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f042 0201 	orr.w	r2, r2, #1
 800bdd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bdda:	e008      	b.n	800bdee <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	681a      	ldr	r2, [r3, #0]
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	f042 0201 	orr.w	r2, r2, #1
 800bdea:	601a      	str	r2, [r3, #0]
 800bdec:	e000      	b.n	800bdf0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bdee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bdf0:	2300      	movs	r3, #0
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3710      	adds	r7, #16
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}
 800bdfa:	bf00      	nop
 800bdfc:	40010000 	.word	0x40010000
 800be00:	40010400 	.word	0x40010400
 800be04:	40014000 	.word	0x40014000
 800be08:	40014400 	.word	0x40014400
 800be0c:	40014800 	.word	0x40014800
 800be10:	40000400 	.word	0x40000400
 800be14:	40000800 	.word	0x40000800
 800be18:	40000c00 	.word	0x40000c00
 800be1c:	40001800 	.word	0x40001800
 800be20:	00010007 	.word	0x00010007

0800be24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b084      	sub	sp, #16
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	68db      	ldr	r3, [r3, #12]
 800be32:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	691b      	ldr	r3, [r3, #16]
 800be3a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	f003 0302 	and.w	r3, r3, #2
 800be42:	2b00      	cmp	r3, #0
 800be44:	d020      	beq.n	800be88 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	f003 0302 	and.w	r3, r3, #2
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d01b      	beq.n	800be88 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	f06f 0202 	mvn.w	r2, #2
 800be58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2201      	movs	r2, #1
 800be5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	699b      	ldr	r3, [r3, #24]
 800be66:	f003 0303 	and.w	r3, r3, #3
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d003      	beq.n	800be76 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f000 f9fe 	bl	800c270 <HAL_TIM_IC_CaptureCallback>
 800be74:	e005      	b.n	800be82 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f000 f9f0 	bl	800c25c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f000 fa01 	bl	800c284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2200      	movs	r2, #0
 800be86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	f003 0304 	and.w	r3, r3, #4
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d020      	beq.n	800bed4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	f003 0304 	and.w	r3, r3, #4
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d01b      	beq.n	800bed4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	f06f 0204 	mvn.w	r2, #4
 800bea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2202      	movs	r2, #2
 800beaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	699b      	ldr	r3, [r3, #24]
 800beb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d003      	beq.n	800bec2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f000 f9d8 	bl	800c270 <HAL_TIM_IC_CaptureCallback>
 800bec0:	e005      	b.n	800bece <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f000 f9ca 	bl	800c25c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	f000 f9db 	bl	800c284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2200      	movs	r2, #0
 800bed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	f003 0308 	and.w	r3, r3, #8
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d020      	beq.n	800bf20 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	f003 0308 	and.w	r3, r3, #8
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d01b      	beq.n	800bf20 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	f06f 0208 	mvn.w	r2, #8
 800bef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2204      	movs	r2, #4
 800bef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	69db      	ldr	r3, [r3, #28]
 800befe:	f003 0303 	and.w	r3, r3, #3
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d003      	beq.n	800bf0e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f000 f9b2 	bl	800c270 <HAL_TIM_IC_CaptureCallback>
 800bf0c:	e005      	b.n	800bf1a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f000 f9a4 	bl	800c25c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f000 f9b5 	bl	800c284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	f003 0310 	and.w	r3, r3, #16
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d020      	beq.n	800bf6c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	f003 0310 	and.w	r3, r3, #16
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d01b      	beq.n	800bf6c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	f06f 0210 	mvn.w	r2, #16
 800bf3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2208      	movs	r2, #8
 800bf42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	69db      	ldr	r3, [r3, #28]
 800bf4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d003      	beq.n	800bf5a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f000 f98c 	bl	800c270 <HAL_TIM_IC_CaptureCallback>
 800bf58:	e005      	b.n	800bf66 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f000 f97e 	bl	800c25c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f000 f98f 	bl	800c284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2200      	movs	r2, #0
 800bf6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	f003 0301 	and.w	r3, r3, #1
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d00c      	beq.n	800bf90 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	f003 0301 	and.w	r3, r3, #1
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d007      	beq.n	800bf90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	f06f 0201 	mvn.w	r2, #1
 800bf88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f7f6 fce0 	bl	8002950 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d104      	bne.n	800bfa4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d00c      	beq.n	800bfbe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d007      	beq.n	800bfbe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800bfb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f000 fdb1 	bl	800cb20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d00c      	beq.n	800bfe2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d007      	beq.n	800bfe2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800bfda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f000 fda9 	bl	800cb34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d00c      	beq.n	800c006 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d007      	beq.n	800c006 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bffe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f000 f949 	bl	800c298 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c006:	68bb      	ldr	r3, [r7, #8]
 800c008:	f003 0320 	and.w	r3, r3, #32
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d00c      	beq.n	800c02a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	f003 0320 	and.w	r3, r3, #32
 800c016:	2b00      	cmp	r3, #0
 800c018:	d007      	beq.n	800c02a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f06f 0220 	mvn.w	r2, #32
 800c022:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	f000 fd71 	bl	800cb0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c02a:	bf00      	nop
 800c02c:	3710      	adds	r7, #16
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}
	...

0800c034 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b086      	sub	sp, #24
 800c038:	af00      	add	r7, sp, #0
 800c03a:	60f8      	str	r0, [r7, #12]
 800c03c:	60b9      	str	r1, [r7, #8]
 800c03e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c040:	2300      	movs	r3, #0
 800c042:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c04a:	2b01      	cmp	r3, #1
 800c04c:	d101      	bne.n	800c052 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c04e:	2302      	movs	r3, #2
 800c050:	e0ff      	b.n	800c252 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	2201      	movs	r2, #1
 800c056:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2b14      	cmp	r3, #20
 800c05e:	f200 80f0 	bhi.w	800c242 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c062:	a201      	add	r2, pc, #4	@ (adr r2, 800c068 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c068:	0800c0bd 	.word	0x0800c0bd
 800c06c:	0800c243 	.word	0x0800c243
 800c070:	0800c243 	.word	0x0800c243
 800c074:	0800c243 	.word	0x0800c243
 800c078:	0800c0fd 	.word	0x0800c0fd
 800c07c:	0800c243 	.word	0x0800c243
 800c080:	0800c243 	.word	0x0800c243
 800c084:	0800c243 	.word	0x0800c243
 800c088:	0800c13f 	.word	0x0800c13f
 800c08c:	0800c243 	.word	0x0800c243
 800c090:	0800c243 	.word	0x0800c243
 800c094:	0800c243 	.word	0x0800c243
 800c098:	0800c17f 	.word	0x0800c17f
 800c09c:	0800c243 	.word	0x0800c243
 800c0a0:	0800c243 	.word	0x0800c243
 800c0a4:	0800c243 	.word	0x0800c243
 800c0a8:	0800c1c1 	.word	0x0800c1c1
 800c0ac:	0800c243 	.word	0x0800c243
 800c0b0:	0800c243 	.word	0x0800c243
 800c0b4:	0800c243 	.word	0x0800c243
 800c0b8:	0800c201 	.word	0x0800c201
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	68b9      	ldr	r1, [r7, #8]
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f000 f998 	bl	800c3f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	699a      	ldr	r2, [r3, #24]
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f042 0208 	orr.w	r2, r2, #8
 800c0d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	699a      	ldr	r2, [r3, #24]
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f022 0204 	bic.w	r2, r2, #4
 800c0e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	6999      	ldr	r1, [r3, #24]
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	691a      	ldr	r2, [r3, #16]
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	430a      	orrs	r2, r1
 800c0f8:	619a      	str	r2, [r3, #24]
      break;
 800c0fa:	e0a5      	b.n	800c248 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	68b9      	ldr	r1, [r7, #8]
 800c102:	4618      	mov	r0, r3
 800c104:	f000 fa08 	bl	800c518 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	699a      	ldr	r2, [r3, #24]
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c116:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	699a      	ldr	r2, [r3, #24]
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c126:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	6999      	ldr	r1, [r3, #24]
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	691b      	ldr	r3, [r3, #16]
 800c132:	021a      	lsls	r2, r3, #8
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	430a      	orrs	r2, r1
 800c13a:	619a      	str	r2, [r3, #24]
      break;
 800c13c:	e084      	b.n	800c248 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	68b9      	ldr	r1, [r7, #8]
 800c144:	4618      	mov	r0, r3
 800c146:	f000 fa71 	bl	800c62c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	69da      	ldr	r2, [r3, #28]
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f042 0208 	orr.w	r2, r2, #8
 800c158:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	69da      	ldr	r2, [r3, #28]
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f022 0204 	bic.w	r2, r2, #4
 800c168:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	69d9      	ldr	r1, [r3, #28]
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	691a      	ldr	r2, [r3, #16]
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	430a      	orrs	r2, r1
 800c17a:	61da      	str	r2, [r3, #28]
      break;
 800c17c:	e064      	b.n	800c248 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	68b9      	ldr	r1, [r7, #8]
 800c184:	4618      	mov	r0, r3
 800c186:	f000 fad9 	bl	800c73c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	69da      	ldr	r2, [r3, #28]
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c198:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	69da      	ldr	r2, [r3, #28]
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c1a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	69d9      	ldr	r1, [r3, #28]
 800c1b0:	68bb      	ldr	r3, [r7, #8]
 800c1b2:	691b      	ldr	r3, [r3, #16]
 800c1b4:	021a      	lsls	r2, r3, #8
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	430a      	orrs	r2, r1
 800c1bc:	61da      	str	r2, [r3, #28]
      break;
 800c1be:	e043      	b.n	800c248 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	68b9      	ldr	r1, [r7, #8]
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f000 fb22 	bl	800c810 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	f042 0208 	orr.w	r2, r2, #8
 800c1da:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f022 0204 	bic.w	r2, r2, #4
 800c1ea:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c1f2:	68bb      	ldr	r3, [r7, #8]
 800c1f4:	691a      	ldr	r2, [r3, #16]
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	430a      	orrs	r2, r1
 800c1fc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c1fe:	e023      	b.n	800c248 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	68b9      	ldr	r1, [r7, #8]
 800c206:	4618      	mov	r0, r3
 800c208:	f000 fb66 	bl	800c8d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c21a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c22a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	691b      	ldr	r3, [r3, #16]
 800c236:	021a      	lsls	r2, r3, #8
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	430a      	orrs	r2, r1
 800c23e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c240:	e002      	b.n	800c248 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c242:	2301      	movs	r3, #1
 800c244:	75fb      	strb	r3, [r7, #23]
      break;
 800c246:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	2200      	movs	r2, #0
 800c24c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c250:	7dfb      	ldrb	r3, [r7, #23]
}
 800c252:	4618      	mov	r0, r3
 800c254:	3718      	adds	r7, #24
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}
 800c25a:	bf00      	nop

0800c25c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c25c:	b480      	push	{r7}
 800c25e:	b083      	sub	sp, #12
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c264:	bf00      	nop
 800c266:	370c      	adds	r7, #12
 800c268:	46bd      	mov	sp, r7
 800c26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26e:	4770      	bx	lr

0800c270 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c270:	b480      	push	{r7}
 800c272:	b083      	sub	sp, #12
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c278:	bf00      	nop
 800c27a:	370c      	adds	r7, #12
 800c27c:	46bd      	mov	sp, r7
 800c27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c282:	4770      	bx	lr

0800c284 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c284:	b480      	push	{r7}
 800c286:	b083      	sub	sp, #12
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c28c:	bf00      	nop
 800c28e:	370c      	adds	r7, #12
 800c290:	46bd      	mov	sp, r7
 800c292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c296:	4770      	bx	lr

0800c298 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c298:	b480      	push	{r7}
 800c29a:	b083      	sub	sp, #12
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c2a0:	bf00      	nop
 800c2a2:	370c      	adds	r7, #12
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2aa:	4770      	bx	lr

0800c2ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c2ac:	b480      	push	{r7}
 800c2ae:	b085      	sub	sp, #20
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
 800c2b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	4a46      	ldr	r2, [pc, #280]	@ (800c3d8 <TIM_Base_SetConfig+0x12c>)
 800c2c0:	4293      	cmp	r3, r2
 800c2c2:	d013      	beq.n	800c2ec <TIM_Base_SetConfig+0x40>
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c2ca:	d00f      	beq.n	800c2ec <TIM_Base_SetConfig+0x40>
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	4a43      	ldr	r2, [pc, #268]	@ (800c3dc <TIM_Base_SetConfig+0x130>)
 800c2d0:	4293      	cmp	r3, r2
 800c2d2:	d00b      	beq.n	800c2ec <TIM_Base_SetConfig+0x40>
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	4a42      	ldr	r2, [pc, #264]	@ (800c3e0 <TIM_Base_SetConfig+0x134>)
 800c2d8:	4293      	cmp	r3, r2
 800c2da:	d007      	beq.n	800c2ec <TIM_Base_SetConfig+0x40>
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	4a41      	ldr	r2, [pc, #260]	@ (800c3e4 <TIM_Base_SetConfig+0x138>)
 800c2e0:	4293      	cmp	r3, r2
 800c2e2:	d003      	beq.n	800c2ec <TIM_Base_SetConfig+0x40>
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	4a40      	ldr	r2, [pc, #256]	@ (800c3e8 <TIM_Base_SetConfig+0x13c>)
 800c2e8:	4293      	cmp	r3, r2
 800c2ea:	d108      	bne.n	800c2fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c2f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	685b      	ldr	r3, [r3, #4]
 800c2f8:	68fa      	ldr	r2, [r7, #12]
 800c2fa:	4313      	orrs	r3, r2
 800c2fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	4a35      	ldr	r2, [pc, #212]	@ (800c3d8 <TIM_Base_SetConfig+0x12c>)
 800c302:	4293      	cmp	r3, r2
 800c304:	d01f      	beq.n	800c346 <TIM_Base_SetConfig+0x9a>
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c30c:	d01b      	beq.n	800c346 <TIM_Base_SetConfig+0x9a>
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	4a32      	ldr	r2, [pc, #200]	@ (800c3dc <TIM_Base_SetConfig+0x130>)
 800c312:	4293      	cmp	r3, r2
 800c314:	d017      	beq.n	800c346 <TIM_Base_SetConfig+0x9a>
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	4a31      	ldr	r2, [pc, #196]	@ (800c3e0 <TIM_Base_SetConfig+0x134>)
 800c31a:	4293      	cmp	r3, r2
 800c31c:	d013      	beq.n	800c346 <TIM_Base_SetConfig+0x9a>
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	4a30      	ldr	r2, [pc, #192]	@ (800c3e4 <TIM_Base_SetConfig+0x138>)
 800c322:	4293      	cmp	r3, r2
 800c324:	d00f      	beq.n	800c346 <TIM_Base_SetConfig+0x9a>
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	4a2f      	ldr	r2, [pc, #188]	@ (800c3e8 <TIM_Base_SetConfig+0x13c>)
 800c32a:	4293      	cmp	r3, r2
 800c32c:	d00b      	beq.n	800c346 <TIM_Base_SetConfig+0x9a>
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	4a2e      	ldr	r2, [pc, #184]	@ (800c3ec <TIM_Base_SetConfig+0x140>)
 800c332:	4293      	cmp	r3, r2
 800c334:	d007      	beq.n	800c346 <TIM_Base_SetConfig+0x9a>
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	4a2d      	ldr	r2, [pc, #180]	@ (800c3f0 <TIM_Base_SetConfig+0x144>)
 800c33a:	4293      	cmp	r3, r2
 800c33c:	d003      	beq.n	800c346 <TIM_Base_SetConfig+0x9a>
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	4a2c      	ldr	r2, [pc, #176]	@ (800c3f4 <TIM_Base_SetConfig+0x148>)
 800c342:	4293      	cmp	r3, r2
 800c344:	d108      	bne.n	800c358 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c34c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	68db      	ldr	r3, [r3, #12]
 800c352:	68fa      	ldr	r2, [r7, #12]
 800c354:	4313      	orrs	r3, r2
 800c356:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	695b      	ldr	r3, [r3, #20]
 800c362:	4313      	orrs	r3, r2
 800c364:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	68fa      	ldr	r2, [r7, #12]
 800c36a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	689a      	ldr	r2, [r3, #8]
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	681a      	ldr	r2, [r3, #0]
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	4a16      	ldr	r2, [pc, #88]	@ (800c3d8 <TIM_Base_SetConfig+0x12c>)
 800c380:	4293      	cmp	r3, r2
 800c382:	d00f      	beq.n	800c3a4 <TIM_Base_SetConfig+0xf8>
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	4a18      	ldr	r2, [pc, #96]	@ (800c3e8 <TIM_Base_SetConfig+0x13c>)
 800c388:	4293      	cmp	r3, r2
 800c38a:	d00b      	beq.n	800c3a4 <TIM_Base_SetConfig+0xf8>
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	4a17      	ldr	r2, [pc, #92]	@ (800c3ec <TIM_Base_SetConfig+0x140>)
 800c390:	4293      	cmp	r3, r2
 800c392:	d007      	beq.n	800c3a4 <TIM_Base_SetConfig+0xf8>
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	4a16      	ldr	r2, [pc, #88]	@ (800c3f0 <TIM_Base_SetConfig+0x144>)
 800c398:	4293      	cmp	r3, r2
 800c39a:	d003      	beq.n	800c3a4 <TIM_Base_SetConfig+0xf8>
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	4a15      	ldr	r2, [pc, #84]	@ (800c3f4 <TIM_Base_SetConfig+0x148>)
 800c3a0:	4293      	cmp	r3, r2
 800c3a2:	d103      	bne.n	800c3ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	691a      	ldr	r2, [r3, #16]
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2201      	movs	r2, #1
 800c3b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	691b      	ldr	r3, [r3, #16]
 800c3b6:	f003 0301 	and.w	r3, r3, #1
 800c3ba:	2b01      	cmp	r3, #1
 800c3bc:	d105      	bne.n	800c3ca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	691b      	ldr	r3, [r3, #16]
 800c3c2:	f023 0201 	bic.w	r2, r3, #1
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	611a      	str	r2, [r3, #16]
  }
}
 800c3ca:	bf00      	nop
 800c3cc:	3714      	adds	r7, #20
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d4:	4770      	bx	lr
 800c3d6:	bf00      	nop
 800c3d8:	40010000 	.word	0x40010000
 800c3dc:	40000400 	.word	0x40000400
 800c3e0:	40000800 	.word	0x40000800
 800c3e4:	40000c00 	.word	0x40000c00
 800c3e8:	40010400 	.word	0x40010400
 800c3ec:	40014000 	.word	0x40014000
 800c3f0:	40014400 	.word	0x40014400
 800c3f4:	40014800 	.word	0x40014800

0800c3f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c3f8:	b480      	push	{r7}
 800c3fa:	b087      	sub	sp, #28
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
 800c400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6a1b      	ldr	r3, [r3, #32]
 800c406:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	6a1b      	ldr	r3, [r3, #32]
 800c40c:	f023 0201 	bic.w	r2, r3, #1
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	685b      	ldr	r3, [r3, #4]
 800c418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	699b      	ldr	r3, [r3, #24]
 800c41e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c420:	68fa      	ldr	r2, [r7, #12]
 800c422:	4b37      	ldr	r3, [pc, #220]	@ (800c500 <TIM_OC1_SetConfig+0x108>)
 800c424:	4013      	ands	r3, r2
 800c426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	f023 0303 	bic.w	r3, r3, #3
 800c42e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	68fa      	ldr	r2, [r7, #12]
 800c436:	4313      	orrs	r3, r2
 800c438:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c43a:	697b      	ldr	r3, [r7, #20]
 800c43c:	f023 0302 	bic.w	r3, r3, #2
 800c440:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	689b      	ldr	r3, [r3, #8]
 800c446:	697a      	ldr	r2, [r7, #20]
 800c448:	4313      	orrs	r3, r2
 800c44a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	4a2d      	ldr	r2, [pc, #180]	@ (800c504 <TIM_OC1_SetConfig+0x10c>)
 800c450:	4293      	cmp	r3, r2
 800c452:	d00f      	beq.n	800c474 <TIM_OC1_SetConfig+0x7c>
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	4a2c      	ldr	r2, [pc, #176]	@ (800c508 <TIM_OC1_SetConfig+0x110>)
 800c458:	4293      	cmp	r3, r2
 800c45a:	d00b      	beq.n	800c474 <TIM_OC1_SetConfig+0x7c>
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	4a2b      	ldr	r2, [pc, #172]	@ (800c50c <TIM_OC1_SetConfig+0x114>)
 800c460:	4293      	cmp	r3, r2
 800c462:	d007      	beq.n	800c474 <TIM_OC1_SetConfig+0x7c>
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	4a2a      	ldr	r2, [pc, #168]	@ (800c510 <TIM_OC1_SetConfig+0x118>)
 800c468:	4293      	cmp	r3, r2
 800c46a:	d003      	beq.n	800c474 <TIM_OC1_SetConfig+0x7c>
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	4a29      	ldr	r2, [pc, #164]	@ (800c514 <TIM_OC1_SetConfig+0x11c>)
 800c470:	4293      	cmp	r3, r2
 800c472:	d10c      	bne.n	800c48e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	f023 0308 	bic.w	r3, r3, #8
 800c47a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	68db      	ldr	r3, [r3, #12]
 800c480:	697a      	ldr	r2, [r7, #20]
 800c482:	4313      	orrs	r3, r2
 800c484:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c486:	697b      	ldr	r3, [r7, #20]
 800c488:	f023 0304 	bic.w	r3, r3, #4
 800c48c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	4a1c      	ldr	r2, [pc, #112]	@ (800c504 <TIM_OC1_SetConfig+0x10c>)
 800c492:	4293      	cmp	r3, r2
 800c494:	d00f      	beq.n	800c4b6 <TIM_OC1_SetConfig+0xbe>
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	4a1b      	ldr	r2, [pc, #108]	@ (800c508 <TIM_OC1_SetConfig+0x110>)
 800c49a:	4293      	cmp	r3, r2
 800c49c:	d00b      	beq.n	800c4b6 <TIM_OC1_SetConfig+0xbe>
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	4a1a      	ldr	r2, [pc, #104]	@ (800c50c <TIM_OC1_SetConfig+0x114>)
 800c4a2:	4293      	cmp	r3, r2
 800c4a4:	d007      	beq.n	800c4b6 <TIM_OC1_SetConfig+0xbe>
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	4a19      	ldr	r2, [pc, #100]	@ (800c510 <TIM_OC1_SetConfig+0x118>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d003      	beq.n	800c4b6 <TIM_OC1_SetConfig+0xbe>
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	4a18      	ldr	r2, [pc, #96]	@ (800c514 <TIM_OC1_SetConfig+0x11c>)
 800c4b2:	4293      	cmp	r3, r2
 800c4b4:	d111      	bne.n	800c4da <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c4b6:	693b      	ldr	r3, [r7, #16]
 800c4b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c4bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c4be:	693b      	ldr	r3, [r7, #16]
 800c4c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c4c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	695b      	ldr	r3, [r3, #20]
 800c4ca:	693a      	ldr	r2, [r7, #16]
 800c4cc:	4313      	orrs	r3, r2
 800c4ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	699b      	ldr	r3, [r3, #24]
 800c4d4:	693a      	ldr	r2, [r7, #16]
 800c4d6:	4313      	orrs	r3, r2
 800c4d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	693a      	ldr	r2, [r7, #16]
 800c4de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	68fa      	ldr	r2, [r7, #12]
 800c4e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	685a      	ldr	r2, [r3, #4]
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	697a      	ldr	r2, [r7, #20]
 800c4f2:	621a      	str	r2, [r3, #32]
}
 800c4f4:	bf00      	nop
 800c4f6:	371c      	adds	r7, #28
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fe:	4770      	bx	lr
 800c500:	fffeff8f 	.word	0xfffeff8f
 800c504:	40010000 	.word	0x40010000
 800c508:	40010400 	.word	0x40010400
 800c50c:	40014000 	.word	0x40014000
 800c510:	40014400 	.word	0x40014400
 800c514:	40014800 	.word	0x40014800

0800c518 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c518:	b480      	push	{r7}
 800c51a:	b087      	sub	sp, #28
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
 800c520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6a1b      	ldr	r3, [r3, #32]
 800c526:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6a1b      	ldr	r3, [r3, #32]
 800c52c:	f023 0210 	bic.w	r2, r3, #16
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	685b      	ldr	r3, [r3, #4]
 800c538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	699b      	ldr	r3, [r3, #24]
 800c53e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c540:	68fa      	ldr	r2, [r7, #12]
 800c542:	4b34      	ldr	r3, [pc, #208]	@ (800c614 <TIM_OC2_SetConfig+0xfc>)
 800c544:	4013      	ands	r3, r2
 800c546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c54e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	021b      	lsls	r3, r3, #8
 800c556:	68fa      	ldr	r2, [r7, #12]
 800c558:	4313      	orrs	r3, r2
 800c55a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c55c:	697b      	ldr	r3, [r7, #20]
 800c55e:	f023 0320 	bic.w	r3, r3, #32
 800c562:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	689b      	ldr	r3, [r3, #8]
 800c568:	011b      	lsls	r3, r3, #4
 800c56a:	697a      	ldr	r2, [r7, #20]
 800c56c:	4313      	orrs	r3, r2
 800c56e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	4a29      	ldr	r2, [pc, #164]	@ (800c618 <TIM_OC2_SetConfig+0x100>)
 800c574:	4293      	cmp	r3, r2
 800c576:	d003      	beq.n	800c580 <TIM_OC2_SetConfig+0x68>
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	4a28      	ldr	r2, [pc, #160]	@ (800c61c <TIM_OC2_SetConfig+0x104>)
 800c57c:	4293      	cmp	r3, r2
 800c57e:	d10d      	bne.n	800c59c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c586:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	68db      	ldr	r3, [r3, #12]
 800c58c:	011b      	lsls	r3, r3, #4
 800c58e:	697a      	ldr	r2, [r7, #20]
 800c590:	4313      	orrs	r3, r2
 800c592:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c59a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	4a1e      	ldr	r2, [pc, #120]	@ (800c618 <TIM_OC2_SetConfig+0x100>)
 800c5a0:	4293      	cmp	r3, r2
 800c5a2:	d00f      	beq.n	800c5c4 <TIM_OC2_SetConfig+0xac>
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	4a1d      	ldr	r2, [pc, #116]	@ (800c61c <TIM_OC2_SetConfig+0x104>)
 800c5a8:	4293      	cmp	r3, r2
 800c5aa:	d00b      	beq.n	800c5c4 <TIM_OC2_SetConfig+0xac>
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	4a1c      	ldr	r2, [pc, #112]	@ (800c620 <TIM_OC2_SetConfig+0x108>)
 800c5b0:	4293      	cmp	r3, r2
 800c5b2:	d007      	beq.n	800c5c4 <TIM_OC2_SetConfig+0xac>
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	4a1b      	ldr	r2, [pc, #108]	@ (800c624 <TIM_OC2_SetConfig+0x10c>)
 800c5b8:	4293      	cmp	r3, r2
 800c5ba:	d003      	beq.n	800c5c4 <TIM_OC2_SetConfig+0xac>
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	4a1a      	ldr	r2, [pc, #104]	@ (800c628 <TIM_OC2_SetConfig+0x110>)
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d113      	bne.n	800c5ec <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c5c4:	693b      	ldr	r3, [r7, #16]
 800c5c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c5ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c5d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	695b      	ldr	r3, [r3, #20]
 800c5d8:	009b      	lsls	r3, r3, #2
 800c5da:	693a      	ldr	r2, [r7, #16]
 800c5dc:	4313      	orrs	r3, r2
 800c5de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	699b      	ldr	r3, [r3, #24]
 800c5e4:	009b      	lsls	r3, r3, #2
 800c5e6:	693a      	ldr	r2, [r7, #16]
 800c5e8:	4313      	orrs	r3, r2
 800c5ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	693a      	ldr	r2, [r7, #16]
 800c5f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	68fa      	ldr	r2, [r7, #12]
 800c5f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	685a      	ldr	r2, [r3, #4]
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	697a      	ldr	r2, [r7, #20]
 800c604:	621a      	str	r2, [r3, #32]
}
 800c606:	bf00      	nop
 800c608:	371c      	adds	r7, #28
 800c60a:	46bd      	mov	sp, r7
 800c60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c610:	4770      	bx	lr
 800c612:	bf00      	nop
 800c614:	feff8fff 	.word	0xfeff8fff
 800c618:	40010000 	.word	0x40010000
 800c61c:	40010400 	.word	0x40010400
 800c620:	40014000 	.word	0x40014000
 800c624:	40014400 	.word	0x40014400
 800c628:	40014800 	.word	0x40014800

0800c62c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c62c:	b480      	push	{r7}
 800c62e:	b087      	sub	sp, #28
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
 800c634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	6a1b      	ldr	r3, [r3, #32]
 800c63a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6a1b      	ldr	r3, [r3, #32]
 800c640:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	685b      	ldr	r3, [r3, #4]
 800c64c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	69db      	ldr	r3, [r3, #28]
 800c652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c654:	68fa      	ldr	r2, [r7, #12]
 800c656:	4b33      	ldr	r3, [pc, #204]	@ (800c724 <TIM_OC3_SetConfig+0xf8>)
 800c658:	4013      	ands	r3, r2
 800c65a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	f023 0303 	bic.w	r3, r3, #3
 800c662:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	68fa      	ldr	r2, [r7, #12]
 800c66a:	4313      	orrs	r3, r2
 800c66c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c66e:	697b      	ldr	r3, [r7, #20]
 800c670:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c674:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	689b      	ldr	r3, [r3, #8]
 800c67a:	021b      	lsls	r3, r3, #8
 800c67c:	697a      	ldr	r2, [r7, #20]
 800c67e:	4313      	orrs	r3, r2
 800c680:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	4a28      	ldr	r2, [pc, #160]	@ (800c728 <TIM_OC3_SetConfig+0xfc>)
 800c686:	4293      	cmp	r3, r2
 800c688:	d003      	beq.n	800c692 <TIM_OC3_SetConfig+0x66>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	4a27      	ldr	r2, [pc, #156]	@ (800c72c <TIM_OC3_SetConfig+0x100>)
 800c68e:	4293      	cmp	r3, r2
 800c690:	d10d      	bne.n	800c6ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c692:	697b      	ldr	r3, [r7, #20]
 800c694:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c698:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	68db      	ldr	r3, [r3, #12]
 800c69e:	021b      	lsls	r3, r3, #8
 800c6a0:	697a      	ldr	r2, [r7, #20]
 800c6a2:	4313      	orrs	r3, r2
 800c6a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c6a6:	697b      	ldr	r3, [r7, #20]
 800c6a8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c6ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	4a1d      	ldr	r2, [pc, #116]	@ (800c728 <TIM_OC3_SetConfig+0xfc>)
 800c6b2:	4293      	cmp	r3, r2
 800c6b4:	d00f      	beq.n	800c6d6 <TIM_OC3_SetConfig+0xaa>
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	4a1c      	ldr	r2, [pc, #112]	@ (800c72c <TIM_OC3_SetConfig+0x100>)
 800c6ba:	4293      	cmp	r3, r2
 800c6bc:	d00b      	beq.n	800c6d6 <TIM_OC3_SetConfig+0xaa>
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	4a1b      	ldr	r2, [pc, #108]	@ (800c730 <TIM_OC3_SetConfig+0x104>)
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	d007      	beq.n	800c6d6 <TIM_OC3_SetConfig+0xaa>
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	4a1a      	ldr	r2, [pc, #104]	@ (800c734 <TIM_OC3_SetConfig+0x108>)
 800c6ca:	4293      	cmp	r3, r2
 800c6cc:	d003      	beq.n	800c6d6 <TIM_OC3_SetConfig+0xaa>
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	4a19      	ldr	r2, [pc, #100]	@ (800c738 <TIM_OC3_SetConfig+0x10c>)
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	d113      	bne.n	800c6fe <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c6d6:	693b      	ldr	r3, [r7, #16]
 800c6d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c6dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c6de:	693b      	ldr	r3, [r7, #16]
 800c6e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c6e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	695b      	ldr	r3, [r3, #20]
 800c6ea:	011b      	lsls	r3, r3, #4
 800c6ec:	693a      	ldr	r2, [r7, #16]
 800c6ee:	4313      	orrs	r3, r2
 800c6f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	699b      	ldr	r3, [r3, #24]
 800c6f6:	011b      	lsls	r3, r3, #4
 800c6f8:	693a      	ldr	r2, [r7, #16]
 800c6fa:	4313      	orrs	r3, r2
 800c6fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	693a      	ldr	r2, [r7, #16]
 800c702:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	68fa      	ldr	r2, [r7, #12]
 800c708:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	685a      	ldr	r2, [r3, #4]
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	697a      	ldr	r2, [r7, #20]
 800c716:	621a      	str	r2, [r3, #32]
}
 800c718:	bf00      	nop
 800c71a:	371c      	adds	r7, #28
 800c71c:	46bd      	mov	sp, r7
 800c71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c722:	4770      	bx	lr
 800c724:	fffeff8f 	.word	0xfffeff8f
 800c728:	40010000 	.word	0x40010000
 800c72c:	40010400 	.word	0x40010400
 800c730:	40014000 	.word	0x40014000
 800c734:	40014400 	.word	0x40014400
 800c738:	40014800 	.word	0x40014800

0800c73c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c73c:	b480      	push	{r7}
 800c73e:	b087      	sub	sp, #28
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
 800c744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	6a1b      	ldr	r3, [r3, #32]
 800c74a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	6a1b      	ldr	r3, [r3, #32]
 800c750:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	685b      	ldr	r3, [r3, #4]
 800c75c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	69db      	ldr	r3, [r3, #28]
 800c762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c764:	68fa      	ldr	r2, [r7, #12]
 800c766:	4b24      	ldr	r3, [pc, #144]	@ (800c7f8 <TIM_OC4_SetConfig+0xbc>)
 800c768:	4013      	ands	r3, r2
 800c76a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c772:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	021b      	lsls	r3, r3, #8
 800c77a:	68fa      	ldr	r2, [r7, #12]
 800c77c:	4313      	orrs	r3, r2
 800c77e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c786:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	689b      	ldr	r3, [r3, #8]
 800c78c:	031b      	lsls	r3, r3, #12
 800c78e:	693a      	ldr	r2, [r7, #16]
 800c790:	4313      	orrs	r3, r2
 800c792:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	4a19      	ldr	r2, [pc, #100]	@ (800c7fc <TIM_OC4_SetConfig+0xc0>)
 800c798:	4293      	cmp	r3, r2
 800c79a:	d00f      	beq.n	800c7bc <TIM_OC4_SetConfig+0x80>
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	4a18      	ldr	r2, [pc, #96]	@ (800c800 <TIM_OC4_SetConfig+0xc4>)
 800c7a0:	4293      	cmp	r3, r2
 800c7a2:	d00b      	beq.n	800c7bc <TIM_OC4_SetConfig+0x80>
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	4a17      	ldr	r2, [pc, #92]	@ (800c804 <TIM_OC4_SetConfig+0xc8>)
 800c7a8:	4293      	cmp	r3, r2
 800c7aa:	d007      	beq.n	800c7bc <TIM_OC4_SetConfig+0x80>
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	4a16      	ldr	r2, [pc, #88]	@ (800c808 <TIM_OC4_SetConfig+0xcc>)
 800c7b0:	4293      	cmp	r3, r2
 800c7b2:	d003      	beq.n	800c7bc <TIM_OC4_SetConfig+0x80>
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	4a15      	ldr	r2, [pc, #84]	@ (800c80c <TIM_OC4_SetConfig+0xd0>)
 800c7b8:	4293      	cmp	r3, r2
 800c7ba:	d109      	bne.n	800c7d0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c7bc:	697b      	ldr	r3, [r7, #20]
 800c7be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c7c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	695b      	ldr	r3, [r3, #20]
 800c7c8:	019b      	lsls	r3, r3, #6
 800c7ca:	697a      	ldr	r2, [r7, #20]
 800c7cc:	4313      	orrs	r3, r2
 800c7ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	697a      	ldr	r2, [r7, #20]
 800c7d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	68fa      	ldr	r2, [r7, #12]
 800c7da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	685a      	ldr	r2, [r3, #4]
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	693a      	ldr	r2, [r7, #16]
 800c7e8:	621a      	str	r2, [r3, #32]
}
 800c7ea:	bf00      	nop
 800c7ec:	371c      	adds	r7, #28
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f4:	4770      	bx	lr
 800c7f6:	bf00      	nop
 800c7f8:	feff8fff 	.word	0xfeff8fff
 800c7fc:	40010000 	.word	0x40010000
 800c800:	40010400 	.word	0x40010400
 800c804:	40014000 	.word	0x40014000
 800c808:	40014400 	.word	0x40014400
 800c80c:	40014800 	.word	0x40014800

0800c810 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c810:	b480      	push	{r7}
 800c812:	b087      	sub	sp, #28
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
 800c818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6a1b      	ldr	r3, [r3, #32]
 800c81e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	6a1b      	ldr	r3, [r3, #32]
 800c824:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	685b      	ldr	r3, [r3, #4]
 800c830:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c838:	68fa      	ldr	r2, [r7, #12]
 800c83a:	4b21      	ldr	r3, [pc, #132]	@ (800c8c0 <TIM_OC5_SetConfig+0xb0>)
 800c83c:	4013      	ands	r3, r2
 800c83e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	68fa      	ldr	r2, [r7, #12]
 800c846:	4313      	orrs	r3, r2
 800c848:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c850:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	689b      	ldr	r3, [r3, #8]
 800c856:	041b      	lsls	r3, r3, #16
 800c858:	693a      	ldr	r2, [r7, #16]
 800c85a:	4313      	orrs	r3, r2
 800c85c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	4a18      	ldr	r2, [pc, #96]	@ (800c8c4 <TIM_OC5_SetConfig+0xb4>)
 800c862:	4293      	cmp	r3, r2
 800c864:	d00f      	beq.n	800c886 <TIM_OC5_SetConfig+0x76>
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	4a17      	ldr	r2, [pc, #92]	@ (800c8c8 <TIM_OC5_SetConfig+0xb8>)
 800c86a:	4293      	cmp	r3, r2
 800c86c:	d00b      	beq.n	800c886 <TIM_OC5_SetConfig+0x76>
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	4a16      	ldr	r2, [pc, #88]	@ (800c8cc <TIM_OC5_SetConfig+0xbc>)
 800c872:	4293      	cmp	r3, r2
 800c874:	d007      	beq.n	800c886 <TIM_OC5_SetConfig+0x76>
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	4a15      	ldr	r2, [pc, #84]	@ (800c8d0 <TIM_OC5_SetConfig+0xc0>)
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d003      	beq.n	800c886 <TIM_OC5_SetConfig+0x76>
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	4a14      	ldr	r2, [pc, #80]	@ (800c8d4 <TIM_OC5_SetConfig+0xc4>)
 800c882:	4293      	cmp	r3, r2
 800c884:	d109      	bne.n	800c89a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c886:	697b      	ldr	r3, [r7, #20]
 800c888:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c88c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	695b      	ldr	r3, [r3, #20]
 800c892:	021b      	lsls	r3, r3, #8
 800c894:	697a      	ldr	r2, [r7, #20]
 800c896:	4313      	orrs	r3, r2
 800c898:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	697a      	ldr	r2, [r7, #20]
 800c89e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	68fa      	ldr	r2, [r7, #12]
 800c8a4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	685a      	ldr	r2, [r3, #4]
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	693a      	ldr	r2, [r7, #16]
 800c8b2:	621a      	str	r2, [r3, #32]
}
 800c8b4:	bf00      	nop
 800c8b6:	371c      	adds	r7, #28
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8be:	4770      	bx	lr
 800c8c0:	fffeff8f 	.word	0xfffeff8f
 800c8c4:	40010000 	.word	0x40010000
 800c8c8:	40010400 	.word	0x40010400
 800c8cc:	40014000 	.word	0x40014000
 800c8d0:	40014400 	.word	0x40014400
 800c8d4:	40014800 	.word	0x40014800

0800c8d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c8d8:	b480      	push	{r7}
 800c8da:	b087      	sub	sp, #28
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
 800c8e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6a1b      	ldr	r3, [r3, #32]
 800c8e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	6a1b      	ldr	r3, [r3, #32]
 800c8ec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	685b      	ldr	r3, [r3, #4]
 800c8f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c8fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c900:	68fa      	ldr	r2, [r7, #12]
 800c902:	4b22      	ldr	r3, [pc, #136]	@ (800c98c <TIM_OC6_SetConfig+0xb4>)
 800c904:	4013      	ands	r3, r2
 800c906:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	021b      	lsls	r3, r3, #8
 800c90e:	68fa      	ldr	r2, [r7, #12]
 800c910:	4313      	orrs	r3, r2
 800c912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c91a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	689b      	ldr	r3, [r3, #8]
 800c920:	051b      	lsls	r3, r3, #20
 800c922:	693a      	ldr	r2, [r7, #16]
 800c924:	4313      	orrs	r3, r2
 800c926:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	4a19      	ldr	r2, [pc, #100]	@ (800c990 <TIM_OC6_SetConfig+0xb8>)
 800c92c:	4293      	cmp	r3, r2
 800c92e:	d00f      	beq.n	800c950 <TIM_OC6_SetConfig+0x78>
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	4a18      	ldr	r2, [pc, #96]	@ (800c994 <TIM_OC6_SetConfig+0xbc>)
 800c934:	4293      	cmp	r3, r2
 800c936:	d00b      	beq.n	800c950 <TIM_OC6_SetConfig+0x78>
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	4a17      	ldr	r2, [pc, #92]	@ (800c998 <TIM_OC6_SetConfig+0xc0>)
 800c93c:	4293      	cmp	r3, r2
 800c93e:	d007      	beq.n	800c950 <TIM_OC6_SetConfig+0x78>
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	4a16      	ldr	r2, [pc, #88]	@ (800c99c <TIM_OC6_SetConfig+0xc4>)
 800c944:	4293      	cmp	r3, r2
 800c946:	d003      	beq.n	800c950 <TIM_OC6_SetConfig+0x78>
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	4a15      	ldr	r2, [pc, #84]	@ (800c9a0 <TIM_OC6_SetConfig+0xc8>)
 800c94c:	4293      	cmp	r3, r2
 800c94e:	d109      	bne.n	800c964 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c950:	697b      	ldr	r3, [r7, #20]
 800c952:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c956:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	695b      	ldr	r3, [r3, #20]
 800c95c:	029b      	lsls	r3, r3, #10
 800c95e:	697a      	ldr	r2, [r7, #20]
 800c960:	4313      	orrs	r3, r2
 800c962:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	697a      	ldr	r2, [r7, #20]
 800c968:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	68fa      	ldr	r2, [r7, #12]
 800c96e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	685a      	ldr	r2, [r3, #4]
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	693a      	ldr	r2, [r7, #16]
 800c97c:	621a      	str	r2, [r3, #32]
}
 800c97e:	bf00      	nop
 800c980:	371c      	adds	r7, #28
 800c982:	46bd      	mov	sp, r7
 800c984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c988:	4770      	bx	lr
 800c98a:	bf00      	nop
 800c98c:	feff8fff 	.word	0xfeff8fff
 800c990:	40010000 	.word	0x40010000
 800c994:	40010400 	.word	0x40010400
 800c998:	40014000 	.word	0x40014000
 800c99c:	40014400 	.word	0x40014400
 800c9a0:	40014800 	.word	0x40014800

0800c9a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b087      	sub	sp, #28
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	60f8      	str	r0, [r7, #12]
 800c9ac:	60b9      	str	r1, [r7, #8]
 800c9ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	f003 031f 	and.w	r3, r3, #31
 800c9b6:	2201      	movs	r2, #1
 800c9b8:	fa02 f303 	lsl.w	r3, r2, r3
 800c9bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	6a1a      	ldr	r2, [r3, #32]
 800c9c2:	697b      	ldr	r3, [r7, #20]
 800c9c4:	43db      	mvns	r3, r3
 800c9c6:	401a      	ands	r2, r3
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	6a1a      	ldr	r2, [r3, #32]
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	f003 031f 	and.w	r3, r3, #31
 800c9d6:	6879      	ldr	r1, [r7, #4]
 800c9d8:	fa01 f303 	lsl.w	r3, r1, r3
 800c9dc:	431a      	orrs	r2, r3
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	621a      	str	r2, [r3, #32]
}
 800c9e2:	bf00      	nop
 800c9e4:	371c      	adds	r7, #28
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ec:	4770      	bx	lr
	...

0800c9f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b085      	sub	sp, #20
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
 800c9f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ca00:	2b01      	cmp	r3, #1
 800ca02:	d101      	bne.n	800ca08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ca04:	2302      	movs	r3, #2
 800ca06:	e06d      	b.n	800cae4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2201      	movs	r2, #1
 800ca0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2202      	movs	r2, #2
 800ca14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	685b      	ldr	r3, [r3, #4]
 800ca1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	689b      	ldr	r3, [r3, #8]
 800ca26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	4a30      	ldr	r2, [pc, #192]	@ (800caf0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	d004      	beq.n	800ca3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	4a2f      	ldr	r2, [pc, #188]	@ (800caf4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ca38:	4293      	cmp	r3, r2
 800ca3a:	d108      	bne.n	800ca4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ca42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	685b      	ldr	r3, [r3, #4]
 800ca48:	68fa      	ldr	r2, [r7, #12]
 800ca4a:	4313      	orrs	r3, r2
 800ca4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	68fa      	ldr	r2, [r7, #12]
 800ca5c:	4313      	orrs	r3, r2
 800ca5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	68fa      	ldr	r2, [r7, #12]
 800ca66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	4a20      	ldr	r2, [pc, #128]	@ (800caf0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ca6e:	4293      	cmp	r3, r2
 800ca70:	d022      	beq.n	800cab8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ca7a:	d01d      	beq.n	800cab8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	4a1d      	ldr	r2, [pc, #116]	@ (800caf8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ca82:	4293      	cmp	r3, r2
 800ca84:	d018      	beq.n	800cab8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	4a1c      	ldr	r2, [pc, #112]	@ (800cafc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ca8c:	4293      	cmp	r3, r2
 800ca8e:	d013      	beq.n	800cab8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	4a1a      	ldr	r2, [pc, #104]	@ (800cb00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ca96:	4293      	cmp	r3, r2
 800ca98:	d00e      	beq.n	800cab8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	4a15      	ldr	r2, [pc, #84]	@ (800caf4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800caa0:	4293      	cmp	r3, r2
 800caa2:	d009      	beq.n	800cab8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	4a16      	ldr	r2, [pc, #88]	@ (800cb04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800caaa:	4293      	cmp	r3, r2
 800caac:	d004      	beq.n	800cab8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	4a15      	ldr	r2, [pc, #84]	@ (800cb08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cab4:	4293      	cmp	r3, r2
 800cab6:	d10c      	bne.n	800cad2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cab8:	68bb      	ldr	r3, [r7, #8]
 800caba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cabe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	689b      	ldr	r3, [r3, #8]
 800cac4:	68ba      	ldr	r2, [r7, #8]
 800cac6:	4313      	orrs	r3, r2
 800cac8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	68ba      	ldr	r2, [r7, #8]
 800cad0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	2201      	movs	r2, #1
 800cad6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2200      	movs	r2, #0
 800cade:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cae2:	2300      	movs	r3, #0
}
 800cae4:	4618      	mov	r0, r3
 800cae6:	3714      	adds	r7, #20
 800cae8:	46bd      	mov	sp, r7
 800caea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caee:	4770      	bx	lr
 800caf0:	40010000 	.word	0x40010000
 800caf4:	40010400 	.word	0x40010400
 800caf8:	40000400 	.word	0x40000400
 800cafc:	40000800 	.word	0x40000800
 800cb00:	40000c00 	.word	0x40000c00
 800cb04:	40001800 	.word	0x40001800
 800cb08:	40014000 	.word	0x40014000

0800cb0c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cb0c:	b480      	push	{r7}
 800cb0e:	b083      	sub	sp, #12
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cb14:	bf00      	nop
 800cb16:	370c      	adds	r7, #12
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1e:	4770      	bx	lr

0800cb20 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cb20:	b480      	push	{r7}
 800cb22:	b083      	sub	sp, #12
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cb28:	bf00      	nop
 800cb2a:	370c      	adds	r7, #12
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb32:	4770      	bx	lr

0800cb34 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cb34:	b480      	push	{r7}
 800cb36:	b083      	sub	sp, #12
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cb3c:	bf00      	nop
 800cb3e:	370c      	adds	r7, #12
 800cb40:	46bd      	mov	sp, r7
 800cb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb46:	4770      	bx	lr

0800cb48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b082      	sub	sp, #8
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d101      	bne.n	800cb5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cb56:	2301      	movs	r3, #1
 800cb58:	e042      	b.n	800cbe0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d106      	bne.n	800cb72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2200      	movs	r2, #0
 800cb68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	f7f6 fe4f 	bl	8003810 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2224      	movs	r2, #36	@ 0x24
 800cb76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	681a      	ldr	r2, [r3, #0]
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	f022 0201 	bic.w	r2, r2, #1
 800cb88:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d002      	beq.n	800cb98 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	f001 fb52 	bl	800e23c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cb98:	6878      	ldr	r0, [r7, #4]
 800cb9a:	f000 fce3 	bl	800d564 <UART_SetConfig>
 800cb9e:	4603      	mov	r3, r0
 800cba0:	2b01      	cmp	r3, #1
 800cba2:	d101      	bne.n	800cba8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800cba4:	2301      	movs	r3, #1
 800cba6:	e01b      	b.n	800cbe0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	685a      	ldr	r2, [r3, #4]
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cbb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	689a      	ldr	r2, [r3, #8]
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cbc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	681a      	ldr	r2, [r3, #0]
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	f042 0201 	orr.w	r2, r2, #1
 800cbd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f001 fbd1 	bl	800e380 <UART_CheckIdleState>
 800cbde:	4603      	mov	r3, r0
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	3708      	adds	r7, #8
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}

0800cbe8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b08a      	sub	sp, #40	@ 0x28
 800cbec:	af02      	add	r7, sp, #8
 800cbee:	60f8      	str	r0, [r7, #12]
 800cbf0:	60b9      	str	r1, [r7, #8]
 800cbf2:	603b      	str	r3, [r7, #0]
 800cbf4:	4613      	mov	r3, r2
 800cbf6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cbfe:	2b20      	cmp	r3, #32
 800cc00:	d17b      	bne.n	800ccfa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800cc02:	68bb      	ldr	r3, [r7, #8]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d002      	beq.n	800cc0e <HAL_UART_Transmit+0x26>
 800cc08:	88fb      	ldrh	r3, [r7, #6]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d101      	bne.n	800cc12 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800cc0e:	2301      	movs	r3, #1
 800cc10:	e074      	b.n	800ccfc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	2200      	movs	r2, #0
 800cc16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	2221      	movs	r2, #33	@ 0x21
 800cc1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cc22:	f7f7 f877 	bl	8003d14 <HAL_GetTick>
 800cc26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	88fa      	ldrh	r2, [r7, #6]
 800cc2c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	88fa      	ldrh	r2, [r7, #6]
 800cc34:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	689b      	ldr	r3, [r3, #8]
 800cc3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cc40:	d108      	bne.n	800cc54 <HAL_UART_Transmit+0x6c>
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	691b      	ldr	r3, [r3, #16]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d104      	bne.n	800cc54 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	61bb      	str	r3, [r7, #24]
 800cc52:	e003      	b.n	800cc5c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800cc54:	68bb      	ldr	r3, [r7, #8]
 800cc56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cc58:	2300      	movs	r3, #0
 800cc5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cc5c:	e030      	b.n	800ccc0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	9300      	str	r3, [sp, #0]
 800cc62:	697b      	ldr	r3, [r7, #20]
 800cc64:	2200      	movs	r2, #0
 800cc66:	2180      	movs	r1, #128	@ 0x80
 800cc68:	68f8      	ldr	r0, [r7, #12]
 800cc6a:	f001 fc33 	bl	800e4d4 <UART_WaitOnFlagUntilTimeout>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d005      	beq.n	800cc80 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	2220      	movs	r2, #32
 800cc78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800cc7c:	2303      	movs	r3, #3
 800cc7e:	e03d      	b.n	800ccfc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800cc80:	69fb      	ldr	r3, [r7, #28]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d10b      	bne.n	800cc9e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cc86:	69bb      	ldr	r3, [r7, #24]
 800cc88:	881b      	ldrh	r3, [r3, #0]
 800cc8a:	461a      	mov	r2, r3
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cc94:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800cc96:	69bb      	ldr	r3, [r7, #24]
 800cc98:	3302      	adds	r3, #2
 800cc9a:	61bb      	str	r3, [r7, #24]
 800cc9c:	e007      	b.n	800ccae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cc9e:	69fb      	ldr	r3, [r7, #28]
 800cca0:	781a      	ldrb	r2, [r3, #0]
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800cca8:	69fb      	ldr	r3, [r7, #28]
 800ccaa:	3301      	adds	r3, #1
 800ccac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ccb4:	b29b      	uxth	r3, r3
 800ccb6:	3b01      	subs	r3, #1
 800ccb8:	b29a      	uxth	r2, r3
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ccc6:	b29b      	uxth	r3, r3
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d1c8      	bne.n	800cc5e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	9300      	str	r3, [sp, #0]
 800ccd0:	697b      	ldr	r3, [r7, #20]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	2140      	movs	r1, #64	@ 0x40
 800ccd6:	68f8      	ldr	r0, [r7, #12]
 800ccd8:	f001 fbfc 	bl	800e4d4 <UART_WaitOnFlagUntilTimeout>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d005      	beq.n	800ccee <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	2220      	movs	r2, #32
 800cce6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800ccea:	2303      	movs	r3, #3
 800ccec:	e006      	b.n	800ccfc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	2220      	movs	r2, #32
 800ccf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	e000      	b.n	800ccfc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800ccfa:	2302      	movs	r3, #2
  }
}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	3720      	adds	r7, #32
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}

0800cd04 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b08a      	sub	sp, #40	@ 0x28
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	60f8      	str	r0, [r7, #12]
 800cd0c:	60b9      	str	r1, [r7, #8]
 800cd0e:	4613      	mov	r3, r2
 800cd10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cd18:	2b20      	cmp	r3, #32
 800cd1a:	d137      	bne.n	800cd8c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d002      	beq.n	800cd28 <HAL_UART_Receive_DMA+0x24>
 800cd22:	88fb      	ldrh	r3, [r7, #6]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d101      	bne.n	800cd2c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800cd28:	2301      	movs	r3, #1
 800cd2a:	e030      	b.n	800cd8e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	2200      	movs	r2, #0
 800cd30:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	4a18      	ldr	r2, [pc, #96]	@ (800cd98 <HAL_UART_Receive_DMA+0x94>)
 800cd38:	4293      	cmp	r3, r2
 800cd3a:	d01f      	beq.n	800cd7c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	685b      	ldr	r3, [r3, #4]
 800cd42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d018      	beq.n	800cd7c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd50:	697b      	ldr	r3, [r7, #20]
 800cd52:	e853 3f00 	ldrex	r3, [r3]
 800cd56:	613b      	str	r3, [r7, #16]
   return(result);
 800cd58:	693b      	ldr	r3, [r7, #16]
 800cd5a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800cd5e:	627b      	str	r3, [r7, #36]	@ 0x24
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	461a      	mov	r2, r3
 800cd66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd68:	623b      	str	r3, [r7, #32]
 800cd6a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd6c:	69f9      	ldr	r1, [r7, #28]
 800cd6e:	6a3a      	ldr	r2, [r7, #32]
 800cd70:	e841 2300 	strex	r3, r2, [r1]
 800cd74:	61bb      	str	r3, [r7, #24]
   return(result);
 800cd76:	69bb      	ldr	r3, [r7, #24]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d1e6      	bne.n	800cd4a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800cd7c:	88fb      	ldrh	r3, [r7, #6]
 800cd7e:	461a      	mov	r2, r3
 800cd80:	68b9      	ldr	r1, [r7, #8]
 800cd82:	68f8      	ldr	r0, [r7, #12]
 800cd84:	f001 fc14 	bl	800e5b0 <UART_Start_Receive_DMA>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	e000      	b.n	800cd8e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800cd8c:	2302      	movs	r3, #2
  }
}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	3728      	adds	r7, #40	@ 0x28
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}
 800cd96:	bf00      	nop
 800cd98:	58000c00 	.word	0x58000c00

0800cd9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b0ba      	sub	sp, #232	@ 0xe8
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	69db      	ldr	r3, [r3, #28]
 800cdaa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	689b      	ldr	r3, [r3, #8]
 800cdbe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cdc2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800cdc6:	f640 030f 	movw	r3, #2063	@ 0x80f
 800cdca:	4013      	ands	r3, r2
 800cdcc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800cdd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d11b      	bne.n	800ce10 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cdd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cddc:	f003 0320 	and.w	r3, r3, #32
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d015      	beq.n	800ce10 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cde4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cde8:	f003 0320 	and.w	r3, r3, #32
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d105      	bne.n	800cdfc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cdf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cdf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d009      	beq.n	800ce10 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	f000 8377 	beq.w	800d4f4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	4798      	blx	r3
      }
      return;
 800ce0e:	e371      	b.n	800d4f4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ce10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	f000 8123 	beq.w	800d060 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ce1a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ce1e:	4b8d      	ldr	r3, [pc, #564]	@ (800d054 <HAL_UART_IRQHandler+0x2b8>)
 800ce20:	4013      	ands	r3, r2
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d106      	bne.n	800ce34 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ce26:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ce2a:	4b8b      	ldr	r3, [pc, #556]	@ (800d058 <HAL_UART_IRQHandler+0x2bc>)
 800ce2c:	4013      	ands	r3, r2
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	f000 8116 	beq.w	800d060 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ce34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce38:	f003 0301 	and.w	r3, r3, #1
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d011      	beq.n	800ce64 <HAL_UART_IRQHandler+0xc8>
 800ce40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d00b      	beq.n	800ce64 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	2201      	movs	r2, #1
 800ce52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce5a:	f043 0201 	orr.w	r2, r3, #1
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce68:	f003 0302 	and.w	r3, r3, #2
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d011      	beq.n	800ce94 <HAL_UART_IRQHandler+0xf8>
 800ce70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ce74:	f003 0301 	and.w	r3, r3, #1
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d00b      	beq.n	800ce94 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	2202      	movs	r2, #2
 800ce82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce8a:	f043 0204 	orr.w	r2, r3, #4
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce98:	f003 0304 	and.w	r3, r3, #4
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d011      	beq.n	800cec4 <HAL_UART_IRQHandler+0x128>
 800cea0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cea4:	f003 0301 	and.w	r3, r3, #1
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d00b      	beq.n	800cec4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	2204      	movs	r2, #4
 800ceb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ceba:	f043 0202 	orr.w	r2, r3, #2
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cec8:	f003 0308 	and.w	r3, r3, #8
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d017      	beq.n	800cf00 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ced0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ced4:	f003 0320 	and.w	r3, r3, #32
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d105      	bne.n	800cee8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cedc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800cee0:	4b5c      	ldr	r3, [pc, #368]	@ (800d054 <HAL_UART_IRQHandler+0x2b8>)
 800cee2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d00b      	beq.n	800cf00 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	2208      	movs	r2, #8
 800ceee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cef6:	f043 0208 	orr.w	r2, r3, #8
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cf00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d012      	beq.n	800cf32 <HAL_UART_IRQHandler+0x196>
 800cf0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cf10:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d00c      	beq.n	800cf32 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cf20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf28:	f043 0220 	orr.w	r2, r3, #32
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	f000 82dd 	beq.w	800d4f8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cf3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf42:	f003 0320 	and.w	r3, r3, #32
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d013      	beq.n	800cf72 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cf4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cf4e:	f003 0320 	and.w	r3, r3, #32
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d105      	bne.n	800cf62 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cf56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cf5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d007      	beq.n	800cf72 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d003      	beq.n	800cf72 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cf6e:	6878      	ldr	r0, [r7, #4]
 800cf70:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf78:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	689b      	ldr	r3, [r3, #8]
 800cf82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf86:	2b40      	cmp	r3, #64	@ 0x40
 800cf88:	d005      	beq.n	800cf96 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cf8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cf8e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d054      	beq.n	800d040 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cf96:	6878      	ldr	r0, [r7, #4]
 800cf98:	f001 fbf2 	bl	800e780 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	689b      	ldr	r3, [r3, #8]
 800cfa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cfa6:	2b40      	cmp	r3, #64	@ 0x40
 800cfa8:	d146      	bne.n	800d038 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	3308      	adds	r3, #8
 800cfb0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cfb8:	e853 3f00 	ldrex	r3, [r3]
 800cfbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800cfc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cfc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cfc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	3308      	adds	r3, #8
 800cfd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800cfd6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800cfda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800cfe2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cfe6:	e841 2300 	strex	r3, r2, [r1]
 800cfea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800cfee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d1d9      	bne.n	800cfaa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d017      	beq.n	800d030 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d006:	4a15      	ldr	r2, [pc, #84]	@ (800d05c <HAL_UART_IRQHandler+0x2c0>)
 800d008:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d010:	4618      	mov	r0, r3
 800d012:	f7f8 f929 	bl	8005268 <HAL_DMA_Abort_IT>
 800d016:	4603      	mov	r3, r0
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d019      	beq.n	800d050 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d022:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d024:	687a      	ldr	r2, [r7, #4]
 800d026:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800d02a:	4610      	mov	r0, r2
 800d02c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d02e:	e00f      	b.n	800d050 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	f000 fa81 	bl	800d538 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d036:	e00b      	b.n	800d050 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d038:	6878      	ldr	r0, [r7, #4]
 800d03a:	f000 fa7d 	bl	800d538 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d03e:	e007      	b.n	800d050 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d040:	6878      	ldr	r0, [r7, #4]
 800d042:	f000 fa79 	bl	800d538 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2200      	movs	r2, #0
 800d04a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800d04e:	e253      	b.n	800d4f8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d050:	bf00      	nop
    return;
 800d052:	e251      	b.n	800d4f8 <HAL_UART_IRQHandler+0x75c>
 800d054:	10000001 	.word	0x10000001
 800d058:	04000120 	.word	0x04000120
 800d05c:	0800ea33 	.word	0x0800ea33

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d064:	2b01      	cmp	r3, #1
 800d066:	f040 81e7 	bne.w	800d438 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d06a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d06e:	f003 0310 	and.w	r3, r3, #16
 800d072:	2b00      	cmp	r3, #0
 800d074:	f000 81e0 	beq.w	800d438 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d07c:	f003 0310 	and.w	r3, r3, #16
 800d080:	2b00      	cmp	r3, #0
 800d082:	f000 81d9 	beq.w	800d438 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	2210      	movs	r2, #16
 800d08c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	689b      	ldr	r3, [r3, #8]
 800d094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d098:	2b40      	cmp	r3, #64	@ 0x40
 800d09a:	f040 8151 	bne.w	800d340 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	4a96      	ldr	r2, [pc, #600]	@ (800d300 <HAL_UART_IRQHandler+0x564>)
 800d0a8:	4293      	cmp	r3, r2
 800d0aa:	d068      	beq.n	800d17e <HAL_UART_IRQHandler+0x3e2>
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	4a93      	ldr	r2, [pc, #588]	@ (800d304 <HAL_UART_IRQHandler+0x568>)
 800d0b6:	4293      	cmp	r3, r2
 800d0b8:	d061      	beq.n	800d17e <HAL_UART_IRQHandler+0x3e2>
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	4a91      	ldr	r2, [pc, #580]	@ (800d308 <HAL_UART_IRQHandler+0x56c>)
 800d0c4:	4293      	cmp	r3, r2
 800d0c6:	d05a      	beq.n	800d17e <HAL_UART_IRQHandler+0x3e2>
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	4a8e      	ldr	r2, [pc, #568]	@ (800d30c <HAL_UART_IRQHandler+0x570>)
 800d0d2:	4293      	cmp	r3, r2
 800d0d4:	d053      	beq.n	800d17e <HAL_UART_IRQHandler+0x3e2>
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	4a8c      	ldr	r2, [pc, #560]	@ (800d310 <HAL_UART_IRQHandler+0x574>)
 800d0e0:	4293      	cmp	r3, r2
 800d0e2:	d04c      	beq.n	800d17e <HAL_UART_IRQHandler+0x3e2>
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	4a89      	ldr	r2, [pc, #548]	@ (800d314 <HAL_UART_IRQHandler+0x578>)
 800d0ee:	4293      	cmp	r3, r2
 800d0f0:	d045      	beq.n	800d17e <HAL_UART_IRQHandler+0x3e2>
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	4a87      	ldr	r2, [pc, #540]	@ (800d318 <HAL_UART_IRQHandler+0x57c>)
 800d0fc:	4293      	cmp	r3, r2
 800d0fe:	d03e      	beq.n	800d17e <HAL_UART_IRQHandler+0x3e2>
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	4a84      	ldr	r2, [pc, #528]	@ (800d31c <HAL_UART_IRQHandler+0x580>)
 800d10a:	4293      	cmp	r3, r2
 800d10c:	d037      	beq.n	800d17e <HAL_UART_IRQHandler+0x3e2>
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	4a82      	ldr	r2, [pc, #520]	@ (800d320 <HAL_UART_IRQHandler+0x584>)
 800d118:	4293      	cmp	r3, r2
 800d11a:	d030      	beq.n	800d17e <HAL_UART_IRQHandler+0x3e2>
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	4a7f      	ldr	r2, [pc, #508]	@ (800d324 <HAL_UART_IRQHandler+0x588>)
 800d126:	4293      	cmp	r3, r2
 800d128:	d029      	beq.n	800d17e <HAL_UART_IRQHandler+0x3e2>
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	4a7d      	ldr	r2, [pc, #500]	@ (800d328 <HAL_UART_IRQHandler+0x58c>)
 800d134:	4293      	cmp	r3, r2
 800d136:	d022      	beq.n	800d17e <HAL_UART_IRQHandler+0x3e2>
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	4a7a      	ldr	r2, [pc, #488]	@ (800d32c <HAL_UART_IRQHandler+0x590>)
 800d142:	4293      	cmp	r3, r2
 800d144:	d01b      	beq.n	800d17e <HAL_UART_IRQHandler+0x3e2>
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	4a78      	ldr	r2, [pc, #480]	@ (800d330 <HAL_UART_IRQHandler+0x594>)
 800d150:	4293      	cmp	r3, r2
 800d152:	d014      	beq.n	800d17e <HAL_UART_IRQHandler+0x3e2>
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	4a75      	ldr	r2, [pc, #468]	@ (800d334 <HAL_UART_IRQHandler+0x598>)
 800d15e:	4293      	cmp	r3, r2
 800d160:	d00d      	beq.n	800d17e <HAL_UART_IRQHandler+0x3e2>
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	4a73      	ldr	r2, [pc, #460]	@ (800d338 <HAL_UART_IRQHandler+0x59c>)
 800d16c:	4293      	cmp	r3, r2
 800d16e:	d006      	beq.n	800d17e <HAL_UART_IRQHandler+0x3e2>
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	4a70      	ldr	r2, [pc, #448]	@ (800d33c <HAL_UART_IRQHandler+0x5a0>)
 800d17a:	4293      	cmp	r3, r2
 800d17c:	d106      	bne.n	800d18c <HAL_UART_IRQHandler+0x3f0>
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	685b      	ldr	r3, [r3, #4]
 800d188:	b29b      	uxth	r3, r3
 800d18a:	e005      	b.n	800d198 <HAL_UART_IRQHandler+0x3fc>
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	685b      	ldr	r3, [r3, #4]
 800d196:	b29b      	uxth	r3, r3
 800d198:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d19c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	f000 81ab 	beq.w	800d4fc <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d1ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d1b0:	429a      	cmp	r2, r3
 800d1b2:	f080 81a3 	bcs.w	800d4fc <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d1bc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d1c6:	69db      	ldr	r3, [r3, #28]
 800d1c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d1cc:	f000 8087 	beq.w	800d2de <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d1dc:	e853 3f00 	ldrex	r3, [r3]
 800d1e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d1e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d1e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d1ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	461a      	mov	r2, r3
 800d1f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d1fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d1fe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d202:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d206:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d20a:	e841 2300 	strex	r3, r2, [r1]
 800d20e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d212:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d216:	2b00      	cmp	r3, #0
 800d218:	d1da      	bne.n	800d1d0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	3308      	adds	r3, #8
 800d220:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d222:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d224:	e853 3f00 	ldrex	r3, [r3]
 800d228:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d22a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d22c:	f023 0301 	bic.w	r3, r3, #1
 800d230:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	3308      	adds	r3, #8
 800d23a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d23e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d242:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d244:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d246:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d24a:	e841 2300 	strex	r3, r2, [r1]
 800d24e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d250:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d252:	2b00      	cmp	r3, #0
 800d254:	d1e1      	bne.n	800d21a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	3308      	adds	r3, #8
 800d25c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d25e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d260:	e853 3f00 	ldrex	r3, [r3]
 800d264:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d266:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d268:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d26c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	3308      	adds	r3, #8
 800d276:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d27a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d27c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d27e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d280:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d282:	e841 2300 	strex	r3, r2, [r1]
 800d286:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d288:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d1e3      	bne.n	800d256 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	2220      	movs	r2, #32
 800d292:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2200      	movs	r2, #0
 800d29a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2a4:	e853 3f00 	ldrex	r3, [r3]
 800d2a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d2aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d2ac:	f023 0310 	bic.w	r3, r3, #16
 800d2b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	461a      	mov	r2, r3
 800d2ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d2be:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d2c0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d2c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d2c6:	e841 2300 	strex	r3, r2, [r1]
 800d2ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d2cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d1e4      	bne.n	800d29c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2d8:	4618      	mov	r0, r3
 800d2da:	f7f7 fca7 	bl	8004c2c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	2202      	movs	r2, #2
 800d2e2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d2f0:	b29b      	uxth	r3, r3
 800d2f2:	1ad3      	subs	r3, r2, r3
 800d2f4:	b29b      	uxth	r3, r3
 800d2f6:	4619      	mov	r1, r3
 800d2f8:	6878      	ldr	r0, [r7, #4]
 800d2fa:	f000 f927 	bl	800d54c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d2fe:	e0fd      	b.n	800d4fc <HAL_UART_IRQHandler+0x760>
 800d300:	40020010 	.word	0x40020010
 800d304:	40020028 	.word	0x40020028
 800d308:	40020040 	.word	0x40020040
 800d30c:	40020058 	.word	0x40020058
 800d310:	40020070 	.word	0x40020070
 800d314:	40020088 	.word	0x40020088
 800d318:	400200a0 	.word	0x400200a0
 800d31c:	400200b8 	.word	0x400200b8
 800d320:	40020410 	.word	0x40020410
 800d324:	40020428 	.word	0x40020428
 800d328:	40020440 	.word	0x40020440
 800d32c:	40020458 	.word	0x40020458
 800d330:	40020470 	.word	0x40020470
 800d334:	40020488 	.word	0x40020488
 800d338:	400204a0 	.word	0x400204a0
 800d33c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d34c:	b29b      	uxth	r3, r3
 800d34e:	1ad3      	subs	r3, r2, r3
 800d350:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d35a:	b29b      	uxth	r3, r3
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	f000 80cf 	beq.w	800d500 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800d362:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d366:	2b00      	cmp	r3, #0
 800d368:	f000 80ca 	beq.w	800d500 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d374:	e853 3f00 	ldrex	r3, [r3]
 800d378:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d37a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d37c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d380:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	461a      	mov	r2, r3
 800d38a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d38e:	647b      	str	r3, [r7, #68]	@ 0x44
 800d390:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d392:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d394:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d396:	e841 2300 	strex	r3, r2, [r1]
 800d39a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d39c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d1e4      	bne.n	800d36c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	3308      	adds	r3, #8
 800d3a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3ac:	e853 3f00 	ldrex	r3, [r3]
 800d3b0:	623b      	str	r3, [r7, #32]
   return(result);
 800d3b2:	6a3a      	ldr	r2, [r7, #32]
 800d3b4:	4b55      	ldr	r3, [pc, #340]	@ (800d50c <HAL_UART_IRQHandler+0x770>)
 800d3b6:	4013      	ands	r3, r2
 800d3b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	3308      	adds	r3, #8
 800d3c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d3c6:	633a      	str	r2, [r7, #48]	@ 0x30
 800d3c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d3cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d3ce:	e841 2300 	strex	r3, r2, [r1]
 800d3d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d3d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d1e3      	bne.n	800d3a2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2220      	movs	r2, #32
 800d3de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3f4:	693b      	ldr	r3, [r7, #16]
 800d3f6:	e853 3f00 	ldrex	r3, [r3]
 800d3fa:	60fb      	str	r3, [r7, #12]
   return(result);
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	f023 0310 	bic.w	r3, r3, #16
 800d402:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	461a      	mov	r2, r3
 800d40c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d410:	61fb      	str	r3, [r7, #28]
 800d412:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d414:	69b9      	ldr	r1, [r7, #24]
 800d416:	69fa      	ldr	r2, [r7, #28]
 800d418:	e841 2300 	strex	r3, r2, [r1]
 800d41c:	617b      	str	r3, [r7, #20]
   return(result);
 800d41e:	697b      	ldr	r3, [r7, #20]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d1e4      	bne.n	800d3ee <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2202      	movs	r2, #2
 800d428:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d42a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d42e:	4619      	mov	r1, r3
 800d430:	6878      	ldr	r0, [r7, #4]
 800d432:	f000 f88b 	bl	800d54c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d436:	e063      	b.n	800d500 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d43c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d440:	2b00      	cmp	r3, #0
 800d442:	d00e      	beq.n	800d462 <HAL_UART_IRQHandler+0x6c6>
 800d444:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d448:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d008      	beq.n	800d462 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d458:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d45a:	6878      	ldr	r0, [r7, #4]
 800d45c:	f001 fb2a 	bl	800eab4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d460:	e051      	b.n	800d506 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d014      	beq.n	800d498 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d46e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d476:	2b00      	cmp	r3, #0
 800d478:	d105      	bne.n	800d486 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d47a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d47e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d482:	2b00      	cmp	r3, #0
 800d484:	d008      	beq.n	800d498 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d03a      	beq.n	800d504 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d492:	6878      	ldr	r0, [r7, #4]
 800d494:	4798      	blx	r3
    }
    return;
 800d496:	e035      	b.n	800d504 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d49c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d009      	beq.n	800d4b8 <HAL_UART_IRQHandler+0x71c>
 800d4a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d4a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d003      	beq.n	800d4b8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f001 fad4 	bl	800ea5e <UART_EndTransmit_IT>
    return;
 800d4b6:	e026      	b.n	800d506 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d4b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d4bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d009      	beq.n	800d4d8 <HAL_UART_IRQHandler+0x73c>
 800d4c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d4c8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d003      	beq.n	800d4d8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d4d0:	6878      	ldr	r0, [r7, #4]
 800d4d2:	f001 fb03 	bl	800eadc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d4d6:	e016      	b.n	800d506 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d4d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d4dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d010      	beq.n	800d506 <HAL_UART_IRQHandler+0x76a>
 800d4e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	da0c      	bge.n	800d506 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f001 faeb 	bl	800eac8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d4f2:	e008      	b.n	800d506 <HAL_UART_IRQHandler+0x76a>
      return;
 800d4f4:	bf00      	nop
 800d4f6:	e006      	b.n	800d506 <HAL_UART_IRQHandler+0x76a>
    return;
 800d4f8:	bf00      	nop
 800d4fa:	e004      	b.n	800d506 <HAL_UART_IRQHandler+0x76a>
      return;
 800d4fc:	bf00      	nop
 800d4fe:	e002      	b.n	800d506 <HAL_UART_IRQHandler+0x76a>
      return;
 800d500:	bf00      	nop
 800d502:	e000      	b.n	800d506 <HAL_UART_IRQHandler+0x76a>
    return;
 800d504:	bf00      	nop
  }
}
 800d506:	37e8      	adds	r7, #232	@ 0xe8
 800d508:	46bd      	mov	sp, r7
 800d50a:	bd80      	pop	{r7, pc}
 800d50c:	effffffe 	.word	0xeffffffe

0800d510 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d510:	b480      	push	{r7}
 800d512:	b083      	sub	sp, #12
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d518:	bf00      	nop
 800d51a:	370c      	adds	r7, #12
 800d51c:	46bd      	mov	sp, r7
 800d51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d522:	4770      	bx	lr

0800d524 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d524:	b480      	push	{r7}
 800d526:	b083      	sub	sp, #12
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d52c:	bf00      	nop
 800d52e:	370c      	adds	r7, #12
 800d530:	46bd      	mov	sp, r7
 800d532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d536:	4770      	bx	lr

0800d538 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d538:	b480      	push	{r7}
 800d53a:	b083      	sub	sp, #12
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d540:	bf00      	nop
 800d542:	370c      	adds	r7, #12
 800d544:	46bd      	mov	sp, r7
 800d546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54a:	4770      	bx	lr

0800d54c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d54c:	b480      	push	{r7}
 800d54e:	b083      	sub	sp, #12
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
 800d554:	460b      	mov	r3, r1
 800d556:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d558:	bf00      	nop
 800d55a:	370c      	adds	r7, #12
 800d55c:	46bd      	mov	sp, r7
 800d55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d562:	4770      	bx	lr

0800d564 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d564:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d568:	b092      	sub	sp, #72	@ 0x48
 800d56a:	af00      	add	r7, sp, #0
 800d56c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d56e:	2300      	movs	r3, #0
 800d570:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d574:	697b      	ldr	r3, [r7, #20]
 800d576:	689a      	ldr	r2, [r3, #8]
 800d578:	697b      	ldr	r3, [r7, #20]
 800d57a:	691b      	ldr	r3, [r3, #16]
 800d57c:	431a      	orrs	r2, r3
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	695b      	ldr	r3, [r3, #20]
 800d582:	431a      	orrs	r2, r3
 800d584:	697b      	ldr	r3, [r7, #20]
 800d586:	69db      	ldr	r3, [r3, #28]
 800d588:	4313      	orrs	r3, r2
 800d58a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d58c:	697b      	ldr	r3, [r7, #20]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	681a      	ldr	r2, [r3, #0]
 800d592:	4bbe      	ldr	r3, [pc, #760]	@ (800d88c <UART_SetConfig+0x328>)
 800d594:	4013      	ands	r3, r2
 800d596:	697a      	ldr	r2, [r7, #20]
 800d598:	6812      	ldr	r2, [r2, #0]
 800d59a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d59c:	430b      	orrs	r3, r1
 800d59e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d5a0:	697b      	ldr	r3, [r7, #20]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	685b      	ldr	r3, [r3, #4]
 800d5a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d5aa:	697b      	ldr	r3, [r7, #20]
 800d5ac:	68da      	ldr	r2, [r3, #12]
 800d5ae:	697b      	ldr	r3, [r7, #20]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	430a      	orrs	r2, r1
 800d5b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d5b6:	697b      	ldr	r3, [r7, #20]
 800d5b8:	699b      	ldr	r3, [r3, #24]
 800d5ba:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d5bc:	697b      	ldr	r3, [r7, #20]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	4ab3      	ldr	r2, [pc, #716]	@ (800d890 <UART_SetConfig+0x32c>)
 800d5c2:	4293      	cmp	r3, r2
 800d5c4:	d004      	beq.n	800d5d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d5c6:	697b      	ldr	r3, [r7, #20]
 800d5c8:	6a1b      	ldr	r3, [r3, #32]
 800d5ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d5cc:	4313      	orrs	r3, r2
 800d5ce:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d5d0:	697b      	ldr	r3, [r7, #20]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	689a      	ldr	r2, [r3, #8]
 800d5d6:	4baf      	ldr	r3, [pc, #700]	@ (800d894 <UART_SetConfig+0x330>)
 800d5d8:	4013      	ands	r3, r2
 800d5da:	697a      	ldr	r2, [r7, #20]
 800d5dc:	6812      	ldr	r2, [r2, #0]
 800d5de:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d5e0:	430b      	orrs	r3, r1
 800d5e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d5e4:	697b      	ldr	r3, [r7, #20]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5ea:	f023 010f 	bic.w	r1, r3, #15
 800d5ee:	697b      	ldr	r3, [r7, #20]
 800d5f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d5f2:	697b      	ldr	r3, [r7, #20]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	430a      	orrs	r2, r1
 800d5f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d5fa:	697b      	ldr	r3, [r7, #20]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	4aa6      	ldr	r2, [pc, #664]	@ (800d898 <UART_SetConfig+0x334>)
 800d600:	4293      	cmp	r3, r2
 800d602:	d177      	bne.n	800d6f4 <UART_SetConfig+0x190>
 800d604:	4ba5      	ldr	r3, [pc, #660]	@ (800d89c <UART_SetConfig+0x338>)
 800d606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d608:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d60c:	2b28      	cmp	r3, #40	@ 0x28
 800d60e:	d86d      	bhi.n	800d6ec <UART_SetConfig+0x188>
 800d610:	a201      	add	r2, pc, #4	@ (adr r2, 800d618 <UART_SetConfig+0xb4>)
 800d612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d616:	bf00      	nop
 800d618:	0800d6bd 	.word	0x0800d6bd
 800d61c:	0800d6ed 	.word	0x0800d6ed
 800d620:	0800d6ed 	.word	0x0800d6ed
 800d624:	0800d6ed 	.word	0x0800d6ed
 800d628:	0800d6ed 	.word	0x0800d6ed
 800d62c:	0800d6ed 	.word	0x0800d6ed
 800d630:	0800d6ed 	.word	0x0800d6ed
 800d634:	0800d6ed 	.word	0x0800d6ed
 800d638:	0800d6c5 	.word	0x0800d6c5
 800d63c:	0800d6ed 	.word	0x0800d6ed
 800d640:	0800d6ed 	.word	0x0800d6ed
 800d644:	0800d6ed 	.word	0x0800d6ed
 800d648:	0800d6ed 	.word	0x0800d6ed
 800d64c:	0800d6ed 	.word	0x0800d6ed
 800d650:	0800d6ed 	.word	0x0800d6ed
 800d654:	0800d6ed 	.word	0x0800d6ed
 800d658:	0800d6cd 	.word	0x0800d6cd
 800d65c:	0800d6ed 	.word	0x0800d6ed
 800d660:	0800d6ed 	.word	0x0800d6ed
 800d664:	0800d6ed 	.word	0x0800d6ed
 800d668:	0800d6ed 	.word	0x0800d6ed
 800d66c:	0800d6ed 	.word	0x0800d6ed
 800d670:	0800d6ed 	.word	0x0800d6ed
 800d674:	0800d6ed 	.word	0x0800d6ed
 800d678:	0800d6d5 	.word	0x0800d6d5
 800d67c:	0800d6ed 	.word	0x0800d6ed
 800d680:	0800d6ed 	.word	0x0800d6ed
 800d684:	0800d6ed 	.word	0x0800d6ed
 800d688:	0800d6ed 	.word	0x0800d6ed
 800d68c:	0800d6ed 	.word	0x0800d6ed
 800d690:	0800d6ed 	.word	0x0800d6ed
 800d694:	0800d6ed 	.word	0x0800d6ed
 800d698:	0800d6dd 	.word	0x0800d6dd
 800d69c:	0800d6ed 	.word	0x0800d6ed
 800d6a0:	0800d6ed 	.word	0x0800d6ed
 800d6a4:	0800d6ed 	.word	0x0800d6ed
 800d6a8:	0800d6ed 	.word	0x0800d6ed
 800d6ac:	0800d6ed 	.word	0x0800d6ed
 800d6b0:	0800d6ed 	.word	0x0800d6ed
 800d6b4:	0800d6ed 	.word	0x0800d6ed
 800d6b8:	0800d6e5 	.word	0x0800d6e5
 800d6bc:	2301      	movs	r3, #1
 800d6be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6c2:	e326      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800d6c4:	2304      	movs	r3, #4
 800d6c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6ca:	e322      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800d6cc:	2308      	movs	r3, #8
 800d6ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6d2:	e31e      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800d6d4:	2310      	movs	r3, #16
 800d6d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6da:	e31a      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800d6dc:	2320      	movs	r3, #32
 800d6de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6e2:	e316      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800d6e4:	2340      	movs	r3, #64	@ 0x40
 800d6e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6ea:	e312      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800d6ec:	2380      	movs	r3, #128	@ 0x80
 800d6ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6f2:	e30e      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800d6f4:	697b      	ldr	r3, [r7, #20]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	4a69      	ldr	r2, [pc, #420]	@ (800d8a0 <UART_SetConfig+0x33c>)
 800d6fa:	4293      	cmp	r3, r2
 800d6fc:	d130      	bne.n	800d760 <UART_SetConfig+0x1fc>
 800d6fe:	4b67      	ldr	r3, [pc, #412]	@ (800d89c <UART_SetConfig+0x338>)
 800d700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d702:	f003 0307 	and.w	r3, r3, #7
 800d706:	2b05      	cmp	r3, #5
 800d708:	d826      	bhi.n	800d758 <UART_SetConfig+0x1f4>
 800d70a:	a201      	add	r2, pc, #4	@ (adr r2, 800d710 <UART_SetConfig+0x1ac>)
 800d70c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d710:	0800d729 	.word	0x0800d729
 800d714:	0800d731 	.word	0x0800d731
 800d718:	0800d739 	.word	0x0800d739
 800d71c:	0800d741 	.word	0x0800d741
 800d720:	0800d749 	.word	0x0800d749
 800d724:	0800d751 	.word	0x0800d751
 800d728:	2300      	movs	r3, #0
 800d72a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d72e:	e2f0      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800d730:	2304      	movs	r3, #4
 800d732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d736:	e2ec      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800d738:	2308      	movs	r3, #8
 800d73a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d73e:	e2e8      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800d740:	2310      	movs	r3, #16
 800d742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d746:	e2e4      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800d748:	2320      	movs	r3, #32
 800d74a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d74e:	e2e0      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800d750:	2340      	movs	r3, #64	@ 0x40
 800d752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d756:	e2dc      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800d758:	2380      	movs	r3, #128	@ 0x80
 800d75a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d75e:	e2d8      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800d760:	697b      	ldr	r3, [r7, #20]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	4a4f      	ldr	r2, [pc, #316]	@ (800d8a4 <UART_SetConfig+0x340>)
 800d766:	4293      	cmp	r3, r2
 800d768:	d130      	bne.n	800d7cc <UART_SetConfig+0x268>
 800d76a:	4b4c      	ldr	r3, [pc, #304]	@ (800d89c <UART_SetConfig+0x338>)
 800d76c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d76e:	f003 0307 	and.w	r3, r3, #7
 800d772:	2b05      	cmp	r3, #5
 800d774:	d826      	bhi.n	800d7c4 <UART_SetConfig+0x260>
 800d776:	a201      	add	r2, pc, #4	@ (adr r2, 800d77c <UART_SetConfig+0x218>)
 800d778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d77c:	0800d795 	.word	0x0800d795
 800d780:	0800d79d 	.word	0x0800d79d
 800d784:	0800d7a5 	.word	0x0800d7a5
 800d788:	0800d7ad 	.word	0x0800d7ad
 800d78c:	0800d7b5 	.word	0x0800d7b5
 800d790:	0800d7bd 	.word	0x0800d7bd
 800d794:	2300      	movs	r3, #0
 800d796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d79a:	e2ba      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800d79c:	2304      	movs	r3, #4
 800d79e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7a2:	e2b6      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800d7a4:	2308      	movs	r3, #8
 800d7a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7aa:	e2b2      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800d7ac:	2310      	movs	r3, #16
 800d7ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7b2:	e2ae      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800d7b4:	2320      	movs	r3, #32
 800d7b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7ba:	e2aa      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800d7bc:	2340      	movs	r3, #64	@ 0x40
 800d7be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7c2:	e2a6      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800d7c4:	2380      	movs	r3, #128	@ 0x80
 800d7c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7ca:	e2a2      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800d7cc:	697b      	ldr	r3, [r7, #20]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	4a35      	ldr	r2, [pc, #212]	@ (800d8a8 <UART_SetConfig+0x344>)
 800d7d2:	4293      	cmp	r3, r2
 800d7d4:	d130      	bne.n	800d838 <UART_SetConfig+0x2d4>
 800d7d6:	4b31      	ldr	r3, [pc, #196]	@ (800d89c <UART_SetConfig+0x338>)
 800d7d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d7da:	f003 0307 	and.w	r3, r3, #7
 800d7de:	2b05      	cmp	r3, #5
 800d7e0:	d826      	bhi.n	800d830 <UART_SetConfig+0x2cc>
 800d7e2:	a201      	add	r2, pc, #4	@ (adr r2, 800d7e8 <UART_SetConfig+0x284>)
 800d7e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7e8:	0800d801 	.word	0x0800d801
 800d7ec:	0800d809 	.word	0x0800d809
 800d7f0:	0800d811 	.word	0x0800d811
 800d7f4:	0800d819 	.word	0x0800d819
 800d7f8:	0800d821 	.word	0x0800d821
 800d7fc:	0800d829 	.word	0x0800d829
 800d800:	2300      	movs	r3, #0
 800d802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d806:	e284      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800d808:	2304      	movs	r3, #4
 800d80a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d80e:	e280      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800d810:	2308      	movs	r3, #8
 800d812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d816:	e27c      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800d818:	2310      	movs	r3, #16
 800d81a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d81e:	e278      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800d820:	2320      	movs	r3, #32
 800d822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d826:	e274      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800d828:	2340      	movs	r3, #64	@ 0x40
 800d82a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d82e:	e270      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800d830:	2380      	movs	r3, #128	@ 0x80
 800d832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d836:	e26c      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800d838:	697b      	ldr	r3, [r7, #20]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	4a1b      	ldr	r2, [pc, #108]	@ (800d8ac <UART_SetConfig+0x348>)
 800d83e:	4293      	cmp	r3, r2
 800d840:	d142      	bne.n	800d8c8 <UART_SetConfig+0x364>
 800d842:	4b16      	ldr	r3, [pc, #88]	@ (800d89c <UART_SetConfig+0x338>)
 800d844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d846:	f003 0307 	and.w	r3, r3, #7
 800d84a:	2b05      	cmp	r3, #5
 800d84c:	d838      	bhi.n	800d8c0 <UART_SetConfig+0x35c>
 800d84e:	a201      	add	r2, pc, #4	@ (adr r2, 800d854 <UART_SetConfig+0x2f0>)
 800d850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d854:	0800d86d 	.word	0x0800d86d
 800d858:	0800d875 	.word	0x0800d875
 800d85c:	0800d87d 	.word	0x0800d87d
 800d860:	0800d885 	.word	0x0800d885
 800d864:	0800d8b1 	.word	0x0800d8b1
 800d868:	0800d8b9 	.word	0x0800d8b9
 800d86c:	2300      	movs	r3, #0
 800d86e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d872:	e24e      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800d874:	2304      	movs	r3, #4
 800d876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d87a:	e24a      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800d87c:	2308      	movs	r3, #8
 800d87e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d882:	e246      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800d884:	2310      	movs	r3, #16
 800d886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d88a:	e242      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800d88c:	cfff69f3 	.word	0xcfff69f3
 800d890:	58000c00 	.word	0x58000c00
 800d894:	11fff4ff 	.word	0x11fff4ff
 800d898:	40011000 	.word	0x40011000
 800d89c:	58024400 	.word	0x58024400
 800d8a0:	40004400 	.word	0x40004400
 800d8a4:	40004800 	.word	0x40004800
 800d8a8:	40004c00 	.word	0x40004c00
 800d8ac:	40005000 	.word	0x40005000
 800d8b0:	2320      	movs	r3, #32
 800d8b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8b6:	e22c      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800d8b8:	2340      	movs	r3, #64	@ 0x40
 800d8ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8be:	e228      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800d8c0:	2380      	movs	r3, #128	@ 0x80
 800d8c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8c6:	e224      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800d8c8:	697b      	ldr	r3, [r7, #20]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	4ab1      	ldr	r2, [pc, #708]	@ (800db94 <UART_SetConfig+0x630>)
 800d8ce:	4293      	cmp	r3, r2
 800d8d0:	d176      	bne.n	800d9c0 <UART_SetConfig+0x45c>
 800d8d2:	4bb1      	ldr	r3, [pc, #708]	@ (800db98 <UART_SetConfig+0x634>)
 800d8d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d8d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d8da:	2b28      	cmp	r3, #40	@ 0x28
 800d8dc:	d86c      	bhi.n	800d9b8 <UART_SetConfig+0x454>
 800d8de:	a201      	add	r2, pc, #4	@ (adr r2, 800d8e4 <UART_SetConfig+0x380>)
 800d8e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8e4:	0800d989 	.word	0x0800d989
 800d8e8:	0800d9b9 	.word	0x0800d9b9
 800d8ec:	0800d9b9 	.word	0x0800d9b9
 800d8f0:	0800d9b9 	.word	0x0800d9b9
 800d8f4:	0800d9b9 	.word	0x0800d9b9
 800d8f8:	0800d9b9 	.word	0x0800d9b9
 800d8fc:	0800d9b9 	.word	0x0800d9b9
 800d900:	0800d9b9 	.word	0x0800d9b9
 800d904:	0800d991 	.word	0x0800d991
 800d908:	0800d9b9 	.word	0x0800d9b9
 800d90c:	0800d9b9 	.word	0x0800d9b9
 800d910:	0800d9b9 	.word	0x0800d9b9
 800d914:	0800d9b9 	.word	0x0800d9b9
 800d918:	0800d9b9 	.word	0x0800d9b9
 800d91c:	0800d9b9 	.word	0x0800d9b9
 800d920:	0800d9b9 	.word	0x0800d9b9
 800d924:	0800d999 	.word	0x0800d999
 800d928:	0800d9b9 	.word	0x0800d9b9
 800d92c:	0800d9b9 	.word	0x0800d9b9
 800d930:	0800d9b9 	.word	0x0800d9b9
 800d934:	0800d9b9 	.word	0x0800d9b9
 800d938:	0800d9b9 	.word	0x0800d9b9
 800d93c:	0800d9b9 	.word	0x0800d9b9
 800d940:	0800d9b9 	.word	0x0800d9b9
 800d944:	0800d9a1 	.word	0x0800d9a1
 800d948:	0800d9b9 	.word	0x0800d9b9
 800d94c:	0800d9b9 	.word	0x0800d9b9
 800d950:	0800d9b9 	.word	0x0800d9b9
 800d954:	0800d9b9 	.word	0x0800d9b9
 800d958:	0800d9b9 	.word	0x0800d9b9
 800d95c:	0800d9b9 	.word	0x0800d9b9
 800d960:	0800d9b9 	.word	0x0800d9b9
 800d964:	0800d9a9 	.word	0x0800d9a9
 800d968:	0800d9b9 	.word	0x0800d9b9
 800d96c:	0800d9b9 	.word	0x0800d9b9
 800d970:	0800d9b9 	.word	0x0800d9b9
 800d974:	0800d9b9 	.word	0x0800d9b9
 800d978:	0800d9b9 	.word	0x0800d9b9
 800d97c:	0800d9b9 	.word	0x0800d9b9
 800d980:	0800d9b9 	.word	0x0800d9b9
 800d984:	0800d9b1 	.word	0x0800d9b1
 800d988:	2301      	movs	r3, #1
 800d98a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d98e:	e1c0      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800d990:	2304      	movs	r3, #4
 800d992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d996:	e1bc      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800d998:	2308      	movs	r3, #8
 800d99a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d99e:	e1b8      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800d9a0:	2310      	movs	r3, #16
 800d9a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9a6:	e1b4      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800d9a8:	2320      	movs	r3, #32
 800d9aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9ae:	e1b0      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800d9b0:	2340      	movs	r3, #64	@ 0x40
 800d9b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9b6:	e1ac      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800d9b8:	2380      	movs	r3, #128	@ 0x80
 800d9ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9be:	e1a8      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800d9c0:	697b      	ldr	r3, [r7, #20]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	4a75      	ldr	r2, [pc, #468]	@ (800db9c <UART_SetConfig+0x638>)
 800d9c6:	4293      	cmp	r3, r2
 800d9c8:	d130      	bne.n	800da2c <UART_SetConfig+0x4c8>
 800d9ca:	4b73      	ldr	r3, [pc, #460]	@ (800db98 <UART_SetConfig+0x634>)
 800d9cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d9ce:	f003 0307 	and.w	r3, r3, #7
 800d9d2:	2b05      	cmp	r3, #5
 800d9d4:	d826      	bhi.n	800da24 <UART_SetConfig+0x4c0>
 800d9d6:	a201      	add	r2, pc, #4	@ (adr r2, 800d9dc <UART_SetConfig+0x478>)
 800d9d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9dc:	0800d9f5 	.word	0x0800d9f5
 800d9e0:	0800d9fd 	.word	0x0800d9fd
 800d9e4:	0800da05 	.word	0x0800da05
 800d9e8:	0800da0d 	.word	0x0800da0d
 800d9ec:	0800da15 	.word	0x0800da15
 800d9f0:	0800da1d 	.word	0x0800da1d
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9fa:	e18a      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800d9fc:	2304      	movs	r3, #4
 800d9fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da02:	e186      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800da04:	2308      	movs	r3, #8
 800da06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da0a:	e182      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800da0c:	2310      	movs	r3, #16
 800da0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da12:	e17e      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800da14:	2320      	movs	r3, #32
 800da16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da1a:	e17a      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800da1c:	2340      	movs	r3, #64	@ 0x40
 800da1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da22:	e176      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800da24:	2380      	movs	r3, #128	@ 0x80
 800da26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da2a:	e172      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800da2c:	697b      	ldr	r3, [r7, #20]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	4a5b      	ldr	r2, [pc, #364]	@ (800dba0 <UART_SetConfig+0x63c>)
 800da32:	4293      	cmp	r3, r2
 800da34:	d130      	bne.n	800da98 <UART_SetConfig+0x534>
 800da36:	4b58      	ldr	r3, [pc, #352]	@ (800db98 <UART_SetConfig+0x634>)
 800da38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da3a:	f003 0307 	and.w	r3, r3, #7
 800da3e:	2b05      	cmp	r3, #5
 800da40:	d826      	bhi.n	800da90 <UART_SetConfig+0x52c>
 800da42:	a201      	add	r2, pc, #4	@ (adr r2, 800da48 <UART_SetConfig+0x4e4>)
 800da44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da48:	0800da61 	.word	0x0800da61
 800da4c:	0800da69 	.word	0x0800da69
 800da50:	0800da71 	.word	0x0800da71
 800da54:	0800da79 	.word	0x0800da79
 800da58:	0800da81 	.word	0x0800da81
 800da5c:	0800da89 	.word	0x0800da89
 800da60:	2300      	movs	r3, #0
 800da62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da66:	e154      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800da68:	2304      	movs	r3, #4
 800da6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da6e:	e150      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800da70:	2308      	movs	r3, #8
 800da72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da76:	e14c      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800da78:	2310      	movs	r3, #16
 800da7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da7e:	e148      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800da80:	2320      	movs	r3, #32
 800da82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da86:	e144      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800da88:	2340      	movs	r3, #64	@ 0x40
 800da8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da8e:	e140      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800da90:	2380      	movs	r3, #128	@ 0x80
 800da92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da96:	e13c      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800da98:	697b      	ldr	r3, [r7, #20]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	4a41      	ldr	r2, [pc, #260]	@ (800dba4 <UART_SetConfig+0x640>)
 800da9e:	4293      	cmp	r3, r2
 800daa0:	f040 8082 	bne.w	800dba8 <UART_SetConfig+0x644>
 800daa4:	4b3c      	ldr	r3, [pc, #240]	@ (800db98 <UART_SetConfig+0x634>)
 800daa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800daa8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800daac:	2b28      	cmp	r3, #40	@ 0x28
 800daae:	d86d      	bhi.n	800db8c <UART_SetConfig+0x628>
 800dab0:	a201      	add	r2, pc, #4	@ (adr r2, 800dab8 <UART_SetConfig+0x554>)
 800dab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dab6:	bf00      	nop
 800dab8:	0800db5d 	.word	0x0800db5d
 800dabc:	0800db8d 	.word	0x0800db8d
 800dac0:	0800db8d 	.word	0x0800db8d
 800dac4:	0800db8d 	.word	0x0800db8d
 800dac8:	0800db8d 	.word	0x0800db8d
 800dacc:	0800db8d 	.word	0x0800db8d
 800dad0:	0800db8d 	.word	0x0800db8d
 800dad4:	0800db8d 	.word	0x0800db8d
 800dad8:	0800db65 	.word	0x0800db65
 800dadc:	0800db8d 	.word	0x0800db8d
 800dae0:	0800db8d 	.word	0x0800db8d
 800dae4:	0800db8d 	.word	0x0800db8d
 800dae8:	0800db8d 	.word	0x0800db8d
 800daec:	0800db8d 	.word	0x0800db8d
 800daf0:	0800db8d 	.word	0x0800db8d
 800daf4:	0800db8d 	.word	0x0800db8d
 800daf8:	0800db6d 	.word	0x0800db6d
 800dafc:	0800db8d 	.word	0x0800db8d
 800db00:	0800db8d 	.word	0x0800db8d
 800db04:	0800db8d 	.word	0x0800db8d
 800db08:	0800db8d 	.word	0x0800db8d
 800db0c:	0800db8d 	.word	0x0800db8d
 800db10:	0800db8d 	.word	0x0800db8d
 800db14:	0800db8d 	.word	0x0800db8d
 800db18:	0800db75 	.word	0x0800db75
 800db1c:	0800db8d 	.word	0x0800db8d
 800db20:	0800db8d 	.word	0x0800db8d
 800db24:	0800db8d 	.word	0x0800db8d
 800db28:	0800db8d 	.word	0x0800db8d
 800db2c:	0800db8d 	.word	0x0800db8d
 800db30:	0800db8d 	.word	0x0800db8d
 800db34:	0800db8d 	.word	0x0800db8d
 800db38:	0800db7d 	.word	0x0800db7d
 800db3c:	0800db8d 	.word	0x0800db8d
 800db40:	0800db8d 	.word	0x0800db8d
 800db44:	0800db8d 	.word	0x0800db8d
 800db48:	0800db8d 	.word	0x0800db8d
 800db4c:	0800db8d 	.word	0x0800db8d
 800db50:	0800db8d 	.word	0x0800db8d
 800db54:	0800db8d 	.word	0x0800db8d
 800db58:	0800db85 	.word	0x0800db85
 800db5c:	2301      	movs	r3, #1
 800db5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db62:	e0d6      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800db64:	2304      	movs	r3, #4
 800db66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db6a:	e0d2      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800db6c:	2308      	movs	r3, #8
 800db6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db72:	e0ce      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800db74:	2310      	movs	r3, #16
 800db76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db7a:	e0ca      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800db7c:	2320      	movs	r3, #32
 800db7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db82:	e0c6      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800db84:	2340      	movs	r3, #64	@ 0x40
 800db86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db8a:	e0c2      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800db8c:	2380      	movs	r3, #128	@ 0x80
 800db8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db92:	e0be      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800db94:	40011400 	.word	0x40011400
 800db98:	58024400 	.word	0x58024400
 800db9c:	40007800 	.word	0x40007800
 800dba0:	40007c00 	.word	0x40007c00
 800dba4:	40011800 	.word	0x40011800
 800dba8:	697b      	ldr	r3, [r7, #20]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	4aad      	ldr	r2, [pc, #692]	@ (800de64 <UART_SetConfig+0x900>)
 800dbae:	4293      	cmp	r3, r2
 800dbb0:	d176      	bne.n	800dca0 <UART_SetConfig+0x73c>
 800dbb2:	4bad      	ldr	r3, [pc, #692]	@ (800de68 <UART_SetConfig+0x904>)
 800dbb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dbb6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800dbba:	2b28      	cmp	r3, #40	@ 0x28
 800dbbc:	d86c      	bhi.n	800dc98 <UART_SetConfig+0x734>
 800dbbe:	a201      	add	r2, pc, #4	@ (adr r2, 800dbc4 <UART_SetConfig+0x660>)
 800dbc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbc4:	0800dc69 	.word	0x0800dc69
 800dbc8:	0800dc99 	.word	0x0800dc99
 800dbcc:	0800dc99 	.word	0x0800dc99
 800dbd0:	0800dc99 	.word	0x0800dc99
 800dbd4:	0800dc99 	.word	0x0800dc99
 800dbd8:	0800dc99 	.word	0x0800dc99
 800dbdc:	0800dc99 	.word	0x0800dc99
 800dbe0:	0800dc99 	.word	0x0800dc99
 800dbe4:	0800dc71 	.word	0x0800dc71
 800dbe8:	0800dc99 	.word	0x0800dc99
 800dbec:	0800dc99 	.word	0x0800dc99
 800dbf0:	0800dc99 	.word	0x0800dc99
 800dbf4:	0800dc99 	.word	0x0800dc99
 800dbf8:	0800dc99 	.word	0x0800dc99
 800dbfc:	0800dc99 	.word	0x0800dc99
 800dc00:	0800dc99 	.word	0x0800dc99
 800dc04:	0800dc79 	.word	0x0800dc79
 800dc08:	0800dc99 	.word	0x0800dc99
 800dc0c:	0800dc99 	.word	0x0800dc99
 800dc10:	0800dc99 	.word	0x0800dc99
 800dc14:	0800dc99 	.word	0x0800dc99
 800dc18:	0800dc99 	.word	0x0800dc99
 800dc1c:	0800dc99 	.word	0x0800dc99
 800dc20:	0800dc99 	.word	0x0800dc99
 800dc24:	0800dc81 	.word	0x0800dc81
 800dc28:	0800dc99 	.word	0x0800dc99
 800dc2c:	0800dc99 	.word	0x0800dc99
 800dc30:	0800dc99 	.word	0x0800dc99
 800dc34:	0800dc99 	.word	0x0800dc99
 800dc38:	0800dc99 	.word	0x0800dc99
 800dc3c:	0800dc99 	.word	0x0800dc99
 800dc40:	0800dc99 	.word	0x0800dc99
 800dc44:	0800dc89 	.word	0x0800dc89
 800dc48:	0800dc99 	.word	0x0800dc99
 800dc4c:	0800dc99 	.word	0x0800dc99
 800dc50:	0800dc99 	.word	0x0800dc99
 800dc54:	0800dc99 	.word	0x0800dc99
 800dc58:	0800dc99 	.word	0x0800dc99
 800dc5c:	0800dc99 	.word	0x0800dc99
 800dc60:	0800dc99 	.word	0x0800dc99
 800dc64:	0800dc91 	.word	0x0800dc91
 800dc68:	2301      	movs	r3, #1
 800dc6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc6e:	e050      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800dc70:	2304      	movs	r3, #4
 800dc72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc76:	e04c      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800dc78:	2308      	movs	r3, #8
 800dc7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc7e:	e048      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800dc80:	2310      	movs	r3, #16
 800dc82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc86:	e044      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800dc88:	2320      	movs	r3, #32
 800dc8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc8e:	e040      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800dc90:	2340      	movs	r3, #64	@ 0x40
 800dc92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc96:	e03c      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800dc98:	2380      	movs	r3, #128	@ 0x80
 800dc9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc9e:	e038      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800dca0:	697b      	ldr	r3, [r7, #20]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	4a71      	ldr	r2, [pc, #452]	@ (800de6c <UART_SetConfig+0x908>)
 800dca6:	4293      	cmp	r3, r2
 800dca8:	d130      	bne.n	800dd0c <UART_SetConfig+0x7a8>
 800dcaa:	4b6f      	ldr	r3, [pc, #444]	@ (800de68 <UART_SetConfig+0x904>)
 800dcac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dcae:	f003 0307 	and.w	r3, r3, #7
 800dcb2:	2b05      	cmp	r3, #5
 800dcb4:	d826      	bhi.n	800dd04 <UART_SetConfig+0x7a0>
 800dcb6:	a201      	add	r2, pc, #4	@ (adr r2, 800dcbc <UART_SetConfig+0x758>)
 800dcb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcbc:	0800dcd5 	.word	0x0800dcd5
 800dcc0:	0800dcdd 	.word	0x0800dcdd
 800dcc4:	0800dce5 	.word	0x0800dce5
 800dcc8:	0800dced 	.word	0x0800dced
 800dccc:	0800dcf5 	.word	0x0800dcf5
 800dcd0:	0800dcfd 	.word	0x0800dcfd
 800dcd4:	2302      	movs	r3, #2
 800dcd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcda:	e01a      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800dcdc:	2304      	movs	r3, #4
 800dcde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dce2:	e016      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800dce4:	2308      	movs	r3, #8
 800dce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcea:	e012      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800dcec:	2310      	movs	r3, #16
 800dcee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcf2:	e00e      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800dcf4:	2320      	movs	r3, #32
 800dcf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcfa:	e00a      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800dcfc:	2340      	movs	r3, #64	@ 0x40
 800dcfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd02:	e006      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800dd04:	2380      	movs	r3, #128	@ 0x80
 800dd06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd0a:	e002      	b.n	800dd12 <UART_SetConfig+0x7ae>
 800dd0c:	2380      	movs	r3, #128	@ 0x80
 800dd0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	4a55      	ldr	r2, [pc, #340]	@ (800de6c <UART_SetConfig+0x908>)
 800dd18:	4293      	cmp	r3, r2
 800dd1a:	f040 80f8 	bne.w	800df0e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dd1e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800dd22:	2b20      	cmp	r3, #32
 800dd24:	dc46      	bgt.n	800ddb4 <UART_SetConfig+0x850>
 800dd26:	2b02      	cmp	r3, #2
 800dd28:	db75      	blt.n	800de16 <UART_SetConfig+0x8b2>
 800dd2a:	3b02      	subs	r3, #2
 800dd2c:	2b1e      	cmp	r3, #30
 800dd2e:	d872      	bhi.n	800de16 <UART_SetConfig+0x8b2>
 800dd30:	a201      	add	r2, pc, #4	@ (adr r2, 800dd38 <UART_SetConfig+0x7d4>)
 800dd32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd36:	bf00      	nop
 800dd38:	0800ddbb 	.word	0x0800ddbb
 800dd3c:	0800de17 	.word	0x0800de17
 800dd40:	0800ddc3 	.word	0x0800ddc3
 800dd44:	0800de17 	.word	0x0800de17
 800dd48:	0800de17 	.word	0x0800de17
 800dd4c:	0800de17 	.word	0x0800de17
 800dd50:	0800ddd3 	.word	0x0800ddd3
 800dd54:	0800de17 	.word	0x0800de17
 800dd58:	0800de17 	.word	0x0800de17
 800dd5c:	0800de17 	.word	0x0800de17
 800dd60:	0800de17 	.word	0x0800de17
 800dd64:	0800de17 	.word	0x0800de17
 800dd68:	0800de17 	.word	0x0800de17
 800dd6c:	0800de17 	.word	0x0800de17
 800dd70:	0800dde3 	.word	0x0800dde3
 800dd74:	0800de17 	.word	0x0800de17
 800dd78:	0800de17 	.word	0x0800de17
 800dd7c:	0800de17 	.word	0x0800de17
 800dd80:	0800de17 	.word	0x0800de17
 800dd84:	0800de17 	.word	0x0800de17
 800dd88:	0800de17 	.word	0x0800de17
 800dd8c:	0800de17 	.word	0x0800de17
 800dd90:	0800de17 	.word	0x0800de17
 800dd94:	0800de17 	.word	0x0800de17
 800dd98:	0800de17 	.word	0x0800de17
 800dd9c:	0800de17 	.word	0x0800de17
 800dda0:	0800de17 	.word	0x0800de17
 800dda4:	0800de17 	.word	0x0800de17
 800dda8:	0800de17 	.word	0x0800de17
 800ddac:	0800de17 	.word	0x0800de17
 800ddb0:	0800de09 	.word	0x0800de09
 800ddb4:	2b40      	cmp	r3, #64	@ 0x40
 800ddb6:	d02a      	beq.n	800de0e <UART_SetConfig+0x8aa>
 800ddb8:	e02d      	b.n	800de16 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ddba:	f7fc f835 	bl	8009e28 <HAL_RCCEx_GetD3PCLK1Freq>
 800ddbe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ddc0:	e02f      	b.n	800de22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ddc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	f7fc f844 	bl	8009e54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ddcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ddd0:	e027      	b.n	800de22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ddd2:	f107 0318 	add.w	r3, r7, #24
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	f7fc f990 	bl	800a0fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dddc:	69fb      	ldr	r3, [r7, #28]
 800ddde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dde0:	e01f      	b.n	800de22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dde2:	4b21      	ldr	r3, [pc, #132]	@ (800de68 <UART_SetConfig+0x904>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	f003 0320 	and.w	r3, r3, #32
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d009      	beq.n	800de02 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ddee:	4b1e      	ldr	r3, [pc, #120]	@ (800de68 <UART_SetConfig+0x904>)
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	08db      	lsrs	r3, r3, #3
 800ddf4:	f003 0303 	and.w	r3, r3, #3
 800ddf8:	4a1d      	ldr	r2, [pc, #116]	@ (800de70 <UART_SetConfig+0x90c>)
 800ddfa:	fa22 f303 	lsr.w	r3, r2, r3
 800ddfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800de00:	e00f      	b.n	800de22 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800de02:	4b1b      	ldr	r3, [pc, #108]	@ (800de70 <UART_SetConfig+0x90c>)
 800de04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de06:	e00c      	b.n	800de22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800de08:	4b1a      	ldr	r3, [pc, #104]	@ (800de74 <UART_SetConfig+0x910>)
 800de0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de0c:	e009      	b.n	800de22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800de0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800de12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de14:	e005      	b.n	800de22 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800de16:	2300      	movs	r3, #0
 800de18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800de1a:	2301      	movs	r3, #1
 800de1c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800de20:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800de22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de24:	2b00      	cmp	r3, #0
 800de26:	f000 81ee 	beq.w	800e206 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800de2a:	697b      	ldr	r3, [r7, #20]
 800de2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de2e:	4a12      	ldr	r2, [pc, #72]	@ (800de78 <UART_SetConfig+0x914>)
 800de30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de34:	461a      	mov	r2, r3
 800de36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de38:	fbb3 f3f2 	udiv	r3, r3, r2
 800de3c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800de3e:	697b      	ldr	r3, [r7, #20]
 800de40:	685a      	ldr	r2, [r3, #4]
 800de42:	4613      	mov	r3, r2
 800de44:	005b      	lsls	r3, r3, #1
 800de46:	4413      	add	r3, r2
 800de48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800de4a:	429a      	cmp	r2, r3
 800de4c:	d305      	bcc.n	800de5a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800de4e:	697b      	ldr	r3, [r7, #20]
 800de50:	685b      	ldr	r3, [r3, #4]
 800de52:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800de54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800de56:	429a      	cmp	r2, r3
 800de58:	d910      	bls.n	800de7c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800de5a:	2301      	movs	r3, #1
 800de5c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800de60:	e1d1      	b.n	800e206 <UART_SetConfig+0xca2>
 800de62:	bf00      	nop
 800de64:	40011c00 	.word	0x40011c00
 800de68:	58024400 	.word	0x58024400
 800de6c:	58000c00 	.word	0x58000c00
 800de70:	03d09000 	.word	0x03d09000
 800de74:	003d0900 	.word	0x003d0900
 800de78:	08013428 	.word	0x08013428
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800de7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de7e:	2200      	movs	r2, #0
 800de80:	60bb      	str	r3, [r7, #8]
 800de82:	60fa      	str	r2, [r7, #12]
 800de84:	697b      	ldr	r3, [r7, #20]
 800de86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de88:	4ac0      	ldr	r2, [pc, #768]	@ (800e18c <UART_SetConfig+0xc28>)
 800de8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de8e:	b29b      	uxth	r3, r3
 800de90:	2200      	movs	r2, #0
 800de92:	603b      	str	r3, [r7, #0]
 800de94:	607a      	str	r2, [r7, #4]
 800de96:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800de9e:	f7f2 fa77 	bl	8000390 <__aeabi_uldivmod>
 800dea2:	4602      	mov	r2, r0
 800dea4:	460b      	mov	r3, r1
 800dea6:	4610      	mov	r0, r2
 800dea8:	4619      	mov	r1, r3
 800deaa:	f04f 0200 	mov.w	r2, #0
 800deae:	f04f 0300 	mov.w	r3, #0
 800deb2:	020b      	lsls	r3, r1, #8
 800deb4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800deb8:	0202      	lsls	r2, r0, #8
 800deba:	6979      	ldr	r1, [r7, #20]
 800debc:	6849      	ldr	r1, [r1, #4]
 800debe:	0849      	lsrs	r1, r1, #1
 800dec0:	2000      	movs	r0, #0
 800dec2:	460c      	mov	r4, r1
 800dec4:	4605      	mov	r5, r0
 800dec6:	eb12 0804 	adds.w	r8, r2, r4
 800deca:	eb43 0905 	adc.w	r9, r3, r5
 800dece:	697b      	ldr	r3, [r7, #20]
 800ded0:	685b      	ldr	r3, [r3, #4]
 800ded2:	2200      	movs	r2, #0
 800ded4:	469a      	mov	sl, r3
 800ded6:	4693      	mov	fp, r2
 800ded8:	4652      	mov	r2, sl
 800deda:	465b      	mov	r3, fp
 800dedc:	4640      	mov	r0, r8
 800dede:	4649      	mov	r1, r9
 800dee0:	f7f2 fa56 	bl	8000390 <__aeabi_uldivmod>
 800dee4:	4602      	mov	r2, r0
 800dee6:	460b      	mov	r3, r1
 800dee8:	4613      	mov	r3, r2
 800deea:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800deec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800deee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800def2:	d308      	bcc.n	800df06 <UART_SetConfig+0x9a2>
 800def4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800def6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800defa:	d204      	bcs.n	800df06 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800defc:	697b      	ldr	r3, [r7, #20]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800df02:	60da      	str	r2, [r3, #12]
 800df04:	e17f      	b.n	800e206 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800df06:	2301      	movs	r3, #1
 800df08:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800df0c:	e17b      	b.n	800e206 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800df0e:	697b      	ldr	r3, [r7, #20]
 800df10:	69db      	ldr	r3, [r3, #28]
 800df12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800df16:	f040 80bd 	bne.w	800e094 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800df1a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800df1e:	2b20      	cmp	r3, #32
 800df20:	dc48      	bgt.n	800dfb4 <UART_SetConfig+0xa50>
 800df22:	2b00      	cmp	r3, #0
 800df24:	db7b      	blt.n	800e01e <UART_SetConfig+0xaba>
 800df26:	2b20      	cmp	r3, #32
 800df28:	d879      	bhi.n	800e01e <UART_SetConfig+0xaba>
 800df2a:	a201      	add	r2, pc, #4	@ (adr r2, 800df30 <UART_SetConfig+0x9cc>)
 800df2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df30:	0800dfbb 	.word	0x0800dfbb
 800df34:	0800dfc3 	.word	0x0800dfc3
 800df38:	0800e01f 	.word	0x0800e01f
 800df3c:	0800e01f 	.word	0x0800e01f
 800df40:	0800dfcb 	.word	0x0800dfcb
 800df44:	0800e01f 	.word	0x0800e01f
 800df48:	0800e01f 	.word	0x0800e01f
 800df4c:	0800e01f 	.word	0x0800e01f
 800df50:	0800dfdb 	.word	0x0800dfdb
 800df54:	0800e01f 	.word	0x0800e01f
 800df58:	0800e01f 	.word	0x0800e01f
 800df5c:	0800e01f 	.word	0x0800e01f
 800df60:	0800e01f 	.word	0x0800e01f
 800df64:	0800e01f 	.word	0x0800e01f
 800df68:	0800e01f 	.word	0x0800e01f
 800df6c:	0800e01f 	.word	0x0800e01f
 800df70:	0800dfeb 	.word	0x0800dfeb
 800df74:	0800e01f 	.word	0x0800e01f
 800df78:	0800e01f 	.word	0x0800e01f
 800df7c:	0800e01f 	.word	0x0800e01f
 800df80:	0800e01f 	.word	0x0800e01f
 800df84:	0800e01f 	.word	0x0800e01f
 800df88:	0800e01f 	.word	0x0800e01f
 800df8c:	0800e01f 	.word	0x0800e01f
 800df90:	0800e01f 	.word	0x0800e01f
 800df94:	0800e01f 	.word	0x0800e01f
 800df98:	0800e01f 	.word	0x0800e01f
 800df9c:	0800e01f 	.word	0x0800e01f
 800dfa0:	0800e01f 	.word	0x0800e01f
 800dfa4:	0800e01f 	.word	0x0800e01f
 800dfa8:	0800e01f 	.word	0x0800e01f
 800dfac:	0800e01f 	.word	0x0800e01f
 800dfb0:	0800e011 	.word	0x0800e011
 800dfb4:	2b40      	cmp	r3, #64	@ 0x40
 800dfb6:	d02e      	beq.n	800e016 <UART_SetConfig+0xab2>
 800dfb8:	e031      	b.n	800e01e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dfba:	f7fa fd4b 	bl	8008a54 <HAL_RCC_GetPCLK1Freq>
 800dfbe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dfc0:	e033      	b.n	800e02a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dfc2:	f7fa fd5d 	bl	8008a80 <HAL_RCC_GetPCLK2Freq>
 800dfc6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dfc8:	e02f      	b.n	800e02a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dfca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dfce:	4618      	mov	r0, r3
 800dfd0:	f7fb ff40 	bl	8009e54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dfd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dfd8:	e027      	b.n	800e02a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dfda:	f107 0318 	add.w	r3, r7, #24
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f7fc f88c 	bl	800a0fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dfe4:	69fb      	ldr	r3, [r7, #28]
 800dfe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dfe8:	e01f      	b.n	800e02a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dfea:	4b69      	ldr	r3, [pc, #420]	@ (800e190 <UART_SetConfig+0xc2c>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	f003 0320 	and.w	r3, r3, #32
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d009      	beq.n	800e00a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dff6:	4b66      	ldr	r3, [pc, #408]	@ (800e190 <UART_SetConfig+0xc2c>)
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	08db      	lsrs	r3, r3, #3
 800dffc:	f003 0303 	and.w	r3, r3, #3
 800e000:	4a64      	ldr	r2, [pc, #400]	@ (800e194 <UART_SetConfig+0xc30>)
 800e002:	fa22 f303 	lsr.w	r3, r2, r3
 800e006:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e008:	e00f      	b.n	800e02a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800e00a:	4b62      	ldr	r3, [pc, #392]	@ (800e194 <UART_SetConfig+0xc30>)
 800e00c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e00e:	e00c      	b.n	800e02a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e010:	4b61      	ldr	r3, [pc, #388]	@ (800e198 <UART_SetConfig+0xc34>)
 800e012:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e014:	e009      	b.n	800e02a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e016:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e01a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e01c:	e005      	b.n	800e02a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800e01e:	2300      	movs	r3, #0
 800e020:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e022:	2301      	movs	r3, #1
 800e024:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e028:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e02a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	f000 80ea 	beq.w	800e206 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e032:	697b      	ldr	r3, [r7, #20]
 800e034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e036:	4a55      	ldr	r2, [pc, #340]	@ (800e18c <UART_SetConfig+0xc28>)
 800e038:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e03c:	461a      	mov	r2, r3
 800e03e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e040:	fbb3 f3f2 	udiv	r3, r3, r2
 800e044:	005a      	lsls	r2, r3, #1
 800e046:	697b      	ldr	r3, [r7, #20]
 800e048:	685b      	ldr	r3, [r3, #4]
 800e04a:	085b      	lsrs	r3, r3, #1
 800e04c:	441a      	add	r2, r3
 800e04e:	697b      	ldr	r3, [r7, #20]
 800e050:	685b      	ldr	r3, [r3, #4]
 800e052:	fbb2 f3f3 	udiv	r3, r2, r3
 800e056:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e05a:	2b0f      	cmp	r3, #15
 800e05c:	d916      	bls.n	800e08c <UART_SetConfig+0xb28>
 800e05e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e060:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e064:	d212      	bcs.n	800e08c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e068:	b29b      	uxth	r3, r3
 800e06a:	f023 030f 	bic.w	r3, r3, #15
 800e06e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e072:	085b      	lsrs	r3, r3, #1
 800e074:	b29b      	uxth	r3, r3
 800e076:	f003 0307 	and.w	r3, r3, #7
 800e07a:	b29a      	uxth	r2, r3
 800e07c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e07e:	4313      	orrs	r3, r2
 800e080:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800e082:	697b      	ldr	r3, [r7, #20]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800e088:	60da      	str	r2, [r3, #12]
 800e08a:	e0bc      	b.n	800e206 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e08c:	2301      	movs	r3, #1
 800e08e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e092:	e0b8      	b.n	800e206 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e094:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e098:	2b20      	cmp	r3, #32
 800e09a:	dc4b      	bgt.n	800e134 <UART_SetConfig+0xbd0>
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	f2c0 8087 	blt.w	800e1b0 <UART_SetConfig+0xc4c>
 800e0a2:	2b20      	cmp	r3, #32
 800e0a4:	f200 8084 	bhi.w	800e1b0 <UART_SetConfig+0xc4c>
 800e0a8:	a201      	add	r2, pc, #4	@ (adr r2, 800e0b0 <UART_SetConfig+0xb4c>)
 800e0aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0ae:	bf00      	nop
 800e0b0:	0800e13b 	.word	0x0800e13b
 800e0b4:	0800e143 	.word	0x0800e143
 800e0b8:	0800e1b1 	.word	0x0800e1b1
 800e0bc:	0800e1b1 	.word	0x0800e1b1
 800e0c0:	0800e14b 	.word	0x0800e14b
 800e0c4:	0800e1b1 	.word	0x0800e1b1
 800e0c8:	0800e1b1 	.word	0x0800e1b1
 800e0cc:	0800e1b1 	.word	0x0800e1b1
 800e0d0:	0800e15b 	.word	0x0800e15b
 800e0d4:	0800e1b1 	.word	0x0800e1b1
 800e0d8:	0800e1b1 	.word	0x0800e1b1
 800e0dc:	0800e1b1 	.word	0x0800e1b1
 800e0e0:	0800e1b1 	.word	0x0800e1b1
 800e0e4:	0800e1b1 	.word	0x0800e1b1
 800e0e8:	0800e1b1 	.word	0x0800e1b1
 800e0ec:	0800e1b1 	.word	0x0800e1b1
 800e0f0:	0800e16b 	.word	0x0800e16b
 800e0f4:	0800e1b1 	.word	0x0800e1b1
 800e0f8:	0800e1b1 	.word	0x0800e1b1
 800e0fc:	0800e1b1 	.word	0x0800e1b1
 800e100:	0800e1b1 	.word	0x0800e1b1
 800e104:	0800e1b1 	.word	0x0800e1b1
 800e108:	0800e1b1 	.word	0x0800e1b1
 800e10c:	0800e1b1 	.word	0x0800e1b1
 800e110:	0800e1b1 	.word	0x0800e1b1
 800e114:	0800e1b1 	.word	0x0800e1b1
 800e118:	0800e1b1 	.word	0x0800e1b1
 800e11c:	0800e1b1 	.word	0x0800e1b1
 800e120:	0800e1b1 	.word	0x0800e1b1
 800e124:	0800e1b1 	.word	0x0800e1b1
 800e128:	0800e1b1 	.word	0x0800e1b1
 800e12c:	0800e1b1 	.word	0x0800e1b1
 800e130:	0800e1a3 	.word	0x0800e1a3
 800e134:	2b40      	cmp	r3, #64	@ 0x40
 800e136:	d037      	beq.n	800e1a8 <UART_SetConfig+0xc44>
 800e138:	e03a      	b.n	800e1b0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e13a:	f7fa fc8b 	bl	8008a54 <HAL_RCC_GetPCLK1Freq>
 800e13e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e140:	e03c      	b.n	800e1bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e142:	f7fa fc9d 	bl	8008a80 <HAL_RCC_GetPCLK2Freq>
 800e146:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e148:	e038      	b.n	800e1bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e14a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e14e:	4618      	mov	r0, r3
 800e150:	f7fb fe80 	bl	8009e54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e156:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e158:	e030      	b.n	800e1bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e15a:	f107 0318 	add.w	r3, r7, #24
 800e15e:	4618      	mov	r0, r3
 800e160:	f7fb ffcc 	bl	800a0fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e164:	69fb      	ldr	r3, [r7, #28]
 800e166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e168:	e028      	b.n	800e1bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e16a:	4b09      	ldr	r3, [pc, #36]	@ (800e190 <UART_SetConfig+0xc2c>)
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	f003 0320 	and.w	r3, r3, #32
 800e172:	2b00      	cmp	r3, #0
 800e174:	d012      	beq.n	800e19c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e176:	4b06      	ldr	r3, [pc, #24]	@ (800e190 <UART_SetConfig+0xc2c>)
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	08db      	lsrs	r3, r3, #3
 800e17c:	f003 0303 	and.w	r3, r3, #3
 800e180:	4a04      	ldr	r2, [pc, #16]	@ (800e194 <UART_SetConfig+0xc30>)
 800e182:	fa22 f303 	lsr.w	r3, r2, r3
 800e186:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e188:	e018      	b.n	800e1bc <UART_SetConfig+0xc58>
 800e18a:	bf00      	nop
 800e18c:	08013428 	.word	0x08013428
 800e190:	58024400 	.word	0x58024400
 800e194:	03d09000 	.word	0x03d09000
 800e198:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800e19c:	4b24      	ldr	r3, [pc, #144]	@ (800e230 <UART_SetConfig+0xccc>)
 800e19e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e1a0:	e00c      	b.n	800e1bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e1a2:	4b24      	ldr	r3, [pc, #144]	@ (800e234 <UART_SetConfig+0xcd0>)
 800e1a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e1a6:	e009      	b.n	800e1bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e1a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e1ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e1ae:	e005      	b.n	800e1bc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e1ba:	bf00      	nop
    }

    if (pclk != 0U)
 800e1bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d021      	beq.n	800e206 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e1c2:	697b      	ldr	r3, [r7, #20]
 800e1c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1c6:	4a1c      	ldr	r2, [pc, #112]	@ (800e238 <UART_SetConfig+0xcd4>)
 800e1c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e1cc:	461a      	mov	r2, r3
 800e1ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e1d0:	fbb3 f2f2 	udiv	r2, r3, r2
 800e1d4:	697b      	ldr	r3, [r7, #20]
 800e1d6:	685b      	ldr	r3, [r3, #4]
 800e1d8:	085b      	lsrs	r3, r3, #1
 800e1da:	441a      	add	r2, r3
 800e1dc:	697b      	ldr	r3, [r7, #20]
 800e1de:	685b      	ldr	r3, [r3, #4]
 800e1e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1e4:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e1e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1e8:	2b0f      	cmp	r3, #15
 800e1ea:	d909      	bls.n	800e200 <UART_SetConfig+0xc9c>
 800e1ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e1f2:	d205      	bcs.n	800e200 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e1f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1f6:	b29a      	uxth	r2, r3
 800e1f8:	697b      	ldr	r3, [r7, #20]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	60da      	str	r2, [r3, #12]
 800e1fe:	e002      	b.n	800e206 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e200:	2301      	movs	r3, #1
 800e202:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	2201      	movs	r2, #1
 800e20a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800e20e:	697b      	ldr	r3, [r7, #20]
 800e210:	2201      	movs	r2, #1
 800e212:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e216:	697b      	ldr	r3, [r7, #20]
 800e218:	2200      	movs	r2, #0
 800e21a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800e21c:	697b      	ldr	r3, [r7, #20]
 800e21e:	2200      	movs	r2, #0
 800e220:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800e222:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800e226:	4618      	mov	r0, r3
 800e228:	3748      	adds	r7, #72	@ 0x48
 800e22a:	46bd      	mov	sp, r7
 800e22c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e230:	03d09000 	.word	0x03d09000
 800e234:	003d0900 	.word	0x003d0900
 800e238:	08013428 	.word	0x08013428

0800e23c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e23c:	b480      	push	{r7}
 800e23e:	b083      	sub	sp, #12
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e248:	f003 0308 	and.w	r3, r3, #8
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d00a      	beq.n	800e266 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	685b      	ldr	r3, [r3, #4]
 800e256:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	430a      	orrs	r2, r1
 800e264:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e26a:	f003 0301 	and.w	r3, r3, #1
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d00a      	beq.n	800e288 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	685b      	ldr	r3, [r3, #4]
 800e278:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	430a      	orrs	r2, r1
 800e286:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e28c:	f003 0302 	and.w	r3, r3, #2
 800e290:	2b00      	cmp	r3, #0
 800e292:	d00a      	beq.n	800e2aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	685b      	ldr	r3, [r3, #4]
 800e29a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	430a      	orrs	r2, r1
 800e2a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2ae:	f003 0304 	and.w	r3, r3, #4
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d00a      	beq.n	800e2cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	685b      	ldr	r3, [r3, #4]
 800e2bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	430a      	orrs	r2, r1
 800e2ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2d0:	f003 0310 	and.w	r3, r3, #16
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d00a      	beq.n	800e2ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	689b      	ldr	r3, [r3, #8]
 800e2de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	430a      	orrs	r2, r1
 800e2ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2f2:	f003 0320 	and.w	r3, r3, #32
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d00a      	beq.n	800e310 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	689b      	ldr	r3, [r3, #8]
 800e300:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	430a      	orrs	r2, r1
 800e30e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d01a      	beq.n	800e352 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	685b      	ldr	r3, [r3, #4]
 800e322:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	430a      	orrs	r2, r1
 800e330:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e336:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e33a:	d10a      	bne.n	800e352 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	685b      	ldr	r3, [r3, #4]
 800e342:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	430a      	orrs	r2, r1
 800e350:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d00a      	beq.n	800e374 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	685b      	ldr	r3, [r3, #4]
 800e364:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	430a      	orrs	r2, r1
 800e372:	605a      	str	r2, [r3, #4]
  }
}
 800e374:	bf00      	nop
 800e376:	370c      	adds	r7, #12
 800e378:	46bd      	mov	sp, r7
 800e37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37e:	4770      	bx	lr

0800e380 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b098      	sub	sp, #96	@ 0x60
 800e384:	af02      	add	r7, sp, #8
 800e386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2200      	movs	r2, #0
 800e38c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e390:	f7f5 fcc0 	bl	8003d14 <HAL_GetTick>
 800e394:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	f003 0308 	and.w	r3, r3, #8
 800e3a0:	2b08      	cmp	r3, #8
 800e3a2:	d12f      	bne.n	800e404 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e3a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e3a8:	9300      	str	r3, [sp, #0]
 800e3aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f000 f88e 	bl	800e4d4 <UART_WaitOnFlagUntilTimeout>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d022      	beq.n	800e404 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3c6:	e853 3f00 	ldrex	r3, [r3]
 800e3ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e3cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e3d2:	653b      	str	r3, [r7, #80]	@ 0x50
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	461a      	mov	r2, r3
 800e3da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e3dc:	647b      	str	r3, [r7, #68]	@ 0x44
 800e3de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e3e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e3e4:	e841 2300 	strex	r3, r2, [r1]
 800e3e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e3ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d1e6      	bne.n	800e3be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2220      	movs	r2, #32
 800e3f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e400:	2303      	movs	r3, #3
 800e402:	e063      	b.n	800e4cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	f003 0304 	and.w	r3, r3, #4
 800e40e:	2b04      	cmp	r3, #4
 800e410:	d149      	bne.n	800e4a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e412:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e416:	9300      	str	r3, [sp, #0]
 800e418:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e41a:	2200      	movs	r2, #0
 800e41c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e420:	6878      	ldr	r0, [r7, #4]
 800e422:	f000 f857 	bl	800e4d4 <UART_WaitOnFlagUntilTimeout>
 800e426:	4603      	mov	r3, r0
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d03c      	beq.n	800e4a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e434:	e853 3f00 	ldrex	r3, [r3]
 800e438:	623b      	str	r3, [r7, #32]
   return(result);
 800e43a:	6a3b      	ldr	r3, [r7, #32]
 800e43c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e440:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	461a      	mov	r2, r3
 800e448:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e44a:	633b      	str	r3, [r7, #48]	@ 0x30
 800e44c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e44e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e450:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e452:	e841 2300 	strex	r3, r2, [r1]
 800e456:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d1e6      	bne.n	800e42c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	3308      	adds	r3, #8
 800e464:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e466:	693b      	ldr	r3, [r7, #16]
 800e468:	e853 3f00 	ldrex	r3, [r3]
 800e46c:	60fb      	str	r3, [r7, #12]
   return(result);
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	f023 0301 	bic.w	r3, r3, #1
 800e474:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	3308      	adds	r3, #8
 800e47c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e47e:	61fa      	str	r2, [r7, #28]
 800e480:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e482:	69b9      	ldr	r1, [r7, #24]
 800e484:	69fa      	ldr	r2, [r7, #28]
 800e486:	e841 2300 	strex	r3, r2, [r1]
 800e48a:	617b      	str	r3, [r7, #20]
   return(result);
 800e48c:	697b      	ldr	r3, [r7, #20]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d1e5      	bne.n	800e45e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	2220      	movs	r2, #32
 800e496:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	2200      	movs	r2, #0
 800e49e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e4a2:	2303      	movs	r3, #3
 800e4a4:	e012      	b.n	800e4cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	2220      	movs	r2, #32
 800e4aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	2220      	movs	r2, #32
 800e4b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	2200      	movs	r2, #0
 800e4c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e4ca:	2300      	movs	r3, #0
}
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	3758      	adds	r7, #88	@ 0x58
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bd80      	pop	{r7, pc}

0800e4d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b084      	sub	sp, #16
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	60f8      	str	r0, [r7, #12]
 800e4dc:	60b9      	str	r1, [r7, #8]
 800e4de:	603b      	str	r3, [r7, #0]
 800e4e0:	4613      	mov	r3, r2
 800e4e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e4e4:	e04f      	b.n	800e586 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e4e6:	69bb      	ldr	r3, [r7, #24]
 800e4e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4ec:	d04b      	beq.n	800e586 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e4ee:	f7f5 fc11 	bl	8003d14 <HAL_GetTick>
 800e4f2:	4602      	mov	r2, r0
 800e4f4:	683b      	ldr	r3, [r7, #0]
 800e4f6:	1ad3      	subs	r3, r2, r3
 800e4f8:	69ba      	ldr	r2, [r7, #24]
 800e4fa:	429a      	cmp	r2, r3
 800e4fc:	d302      	bcc.n	800e504 <UART_WaitOnFlagUntilTimeout+0x30>
 800e4fe:	69bb      	ldr	r3, [r7, #24]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d101      	bne.n	800e508 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e504:	2303      	movs	r3, #3
 800e506:	e04e      	b.n	800e5a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	f003 0304 	and.w	r3, r3, #4
 800e512:	2b00      	cmp	r3, #0
 800e514:	d037      	beq.n	800e586 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e516:	68bb      	ldr	r3, [r7, #8]
 800e518:	2b80      	cmp	r3, #128	@ 0x80
 800e51a:	d034      	beq.n	800e586 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e51c:	68bb      	ldr	r3, [r7, #8]
 800e51e:	2b40      	cmp	r3, #64	@ 0x40
 800e520:	d031      	beq.n	800e586 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	69db      	ldr	r3, [r3, #28]
 800e528:	f003 0308 	and.w	r3, r3, #8
 800e52c:	2b08      	cmp	r3, #8
 800e52e:	d110      	bne.n	800e552 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	2208      	movs	r2, #8
 800e536:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e538:	68f8      	ldr	r0, [r7, #12]
 800e53a:	f000 f921 	bl	800e780 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	2208      	movs	r2, #8
 800e542:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	2200      	movs	r2, #0
 800e54a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e54e:	2301      	movs	r3, #1
 800e550:	e029      	b.n	800e5a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	69db      	ldr	r3, [r3, #28]
 800e558:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e55c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e560:	d111      	bne.n	800e586 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e56a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e56c:	68f8      	ldr	r0, [r7, #12]
 800e56e:	f000 f907 	bl	800e780 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	2220      	movs	r2, #32
 800e576:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	2200      	movs	r2, #0
 800e57e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e582:	2303      	movs	r3, #3
 800e584:	e00f      	b.n	800e5a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	69da      	ldr	r2, [r3, #28]
 800e58c:	68bb      	ldr	r3, [r7, #8]
 800e58e:	4013      	ands	r3, r2
 800e590:	68ba      	ldr	r2, [r7, #8]
 800e592:	429a      	cmp	r2, r3
 800e594:	bf0c      	ite	eq
 800e596:	2301      	moveq	r3, #1
 800e598:	2300      	movne	r3, #0
 800e59a:	b2db      	uxtb	r3, r3
 800e59c:	461a      	mov	r2, r3
 800e59e:	79fb      	ldrb	r3, [r7, #7]
 800e5a0:	429a      	cmp	r2, r3
 800e5a2:	d0a0      	beq.n	800e4e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e5a4:	2300      	movs	r3, #0
}
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	3710      	adds	r7, #16
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	bd80      	pop	{r7, pc}
	...

0800e5b0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b096      	sub	sp, #88	@ 0x58
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	60f8      	str	r0, [r7, #12]
 800e5b8:	60b9      	str	r1, [r7, #8]
 800e5ba:	4613      	mov	r3, r2
 800e5bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	68ba      	ldr	r2, [r7, #8]
 800e5c2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	88fa      	ldrh	r2, [r7, #6]
 800e5c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	2222      	movs	r2, #34	@ 0x22
 800e5d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d02d      	beq.n	800e642 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e5ec:	4a40      	ldr	r2, [pc, #256]	@ (800e6f0 <UART_Start_Receive_DMA+0x140>)
 800e5ee:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e5f6:	4a3f      	ldr	r2, [pc, #252]	@ (800e6f4 <UART_Start_Receive_DMA+0x144>)
 800e5f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e600:	4a3d      	ldr	r2, [pc, #244]	@ (800e6f8 <UART_Start_Receive_DMA+0x148>)
 800e602:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e60a:	2200      	movs	r2, #0
 800e60c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	3324      	adds	r3, #36	@ 0x24
 800e61a:	4619      	mov	r1, r3
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e620:	461a      	mov	r2, r3
 800e622:	88fb      	ldrh	r3, [r7, #6]
 800e624:	f7f6 f898 	bl	8004758 <HAL_DMA_Start_IT>
 800e628:	4603      	mov	r3, r0
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d009      	beq.n	800e642 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	2210      	movs	r2, #16
 800e632:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	2220      	movs	r2, #32
 800e63a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800e63e:	2301      	movs	r3, #1
 800e640:	e051      	b.n	800e6e6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	691b      	ldr	r3, [r3, #16]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d018      	beq.n	800e67c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e650:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e652:	e853 3f00 	ldrex	r3, [r3]
 800e656:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e65a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e65e:	657b      	str	r3, [r7, #84]	@ 0x54
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	461a      	mov	r2, r3
 800e666:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e668:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e66a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e66c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e66e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e670:	e841 2300 	strex	r3, r2, [r1]
 800e674:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800e676:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d1e6      	bne.n	800e64a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	3308      	adds	r3, #8
 800e682:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e686:	e853 3f00 	ldrex	r3, [r3]
 800e68a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e68e:	f043 0301 	orr.w	r3, r3, #1
 800e692:	653b      	str	r3, [r7, #80]	@ 0x50
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	3308      	adds	r3, #8
 800e69a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e69c:	637a      	str	r2, [r7, #52]	@ 0x34
 800e69e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e6a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e6a4:	e841 2300 	strex	r3, r2, [r1]
 800e6a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800e6aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d1e5      	bne.n	800e67c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	3308      	adds	r3, #8
 800e6b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6b8:	697b      	ldr	r3, [r7, #20]
 800e6ba:	e853 3f00 	ldrex	r3, [r3]
 800e6be:	613b      	str	r3, [r7, #16]
   return(result);
 800e6c0:	693b      	ldr	r3, [r7, #16]
 800e6c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	3308      	adds	r3, #8
 800e6ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e6d0:	623a      	str	r2, [r7, #32]
 800e6d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6d4:	69f9      	ldr	r1, [r7, #28]
 800e6d6:	6a3a      	ldr	r2, [r7, #32]
 800e6d8:	e841 2300 	strex	r3, r2, [r1]
 800e6dc:	61bb      	str	r3, [r7, #24]
   return(result);
 800e6de:	69bb      	ldr	r3, [r7, #24]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d1e5      	bne.n	800e6b0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800e6e4:	2300      	movs	r3, #0
}
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	3758      	adds	r7, #88	@ 0x58
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd80      	pop	{r7, pc}
 800e6ee:	bf00      	nop
 800e6f0:	0800e84d 	.word	0x0800e84d
 800e6f4:	0800e975 	.word	0x0800e975
 800e6f8:	0800e9b3 	.word	0x0800e9b3

0800e6fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e6fc:	b480      	push	{r7}
 800e6fe:	b08f      	sub	sp, #60	@ 0x3c
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e70a:	6a3b      	ldr	r3, [r7, #32]
 800e70c:	e853 3f00 	ldrex	r3, [r3]
 800e710:	61fb      	str	r3, [r7, #28]
   return(result);
 800e712:	69fb      	ldr	r3, [r7, #28]
 800e714:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800e718:	637b      	str	r3, [r7, #52]	@ 0x34
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	461a      	mov	r2, r3
 800e720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e722:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e724:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e726:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e728:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e72a:	e841 2300 	strex	r3, r2, [r1]
 800e72e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e732:	2b00      	cmp	r3, #0
 800e734:	d1e6      	bne.n	800e704 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	3308      	adds	r3, #8
 800e73c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	e853 3f00 	ldrex	r3, [r3]
 800e744:	60bb      	str	r3, [r7, #8]
   return(result);
 800e746:	68bb      	ldr	r3, [r7, #8]
 800e748:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800e74c:	633b      	str	r3, [r7, #48]	@ 0x30
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	3308      	adds	r3, #8
 800e754:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e756:	61ba      	str	r2, [r7, #24]
 800e758:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e75a:	6979      	ldr	r1, [r7, #20]
 800e75c:	69ba      	ldr	r2, [r7, #24]
 800e75e:	e841 2300 	strex	r3, r2, [r1]
 800e762:	613b      	str	r3, [r7, #16]
   return(result);
 800e764:	693b      	ldr	r3, [r7, #16]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d1e5      	bne.n	800e736 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	2220      	movs	r2, #32
 800e76e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800e772:	bf00      	nop
 800e774:	373c      	adds	r7, #60	@ 0x3c
 800e776:	46bd      	mov	sp, r7
 800e778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77c:	4770      	bx	lr
	...

0800e780 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e780:	b480      	push	{r7}
 800e782:	b095      	sub	sp, #84	@ 0x54
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e78e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e790:	e853 3f00 	ldrex	r3, [r3]
 800e794:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e798:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e79c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	461a      	mov	r2, r3
 800e7a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e7a6:	643b      	str	r3, [r7, #64]	@ 0x40
 800e7a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e7ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e7ae:	e841 2300 	strex	r3, r2, [r1]
 800e7b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e7b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d1e6      	bne.n	800e788 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	3308      	adds	r3, #8
 800e7c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7c2:	6a3b      	ldr	r3, [r7, #32]
 800e7c4:	e853 3f00 	ldrex	r3, [r3]
 800e7c8:	61fb      	str	r3, [r7, #28]
   return(result);
 800e7ca:	69fa      	ldr	r2, [r7, #28]
 800e7cc:	4b1e      	ldr	r3, [pc, #120]	@ (800e848 <UART_EndRxTransfer+0xc8>)
 800e7ce:	4013      	ands	r3, r2
 800e7d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	3308      	adds	r3, #8
 800e7d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e7da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e7dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e7e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e7e2:	e841 2300 	strex	r3, r2, [r1]
 800e7e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e7e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d1e5      	bne.n	800e7ba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e7f2:	2b01      	cmp	r3, #1
 800e7f4:	d118      	bne.n	800e828 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	e853 3f00 	ldrex	r3, [r3]
 800e802:	60bb      	str	r3, [r7, #8]
   return(result);
 800e804:	68bb      	ldr	r3, [r7, #8]
 800e806:	f023 0310 	bic.w	r3, r3, #16
 800e80a:	647b      	str	r3, [r7, #68]	@ 0x44
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	461a      	mov	r2, r3
 800e812:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e814:	61bb      	str	r3, [r7, #24]
 800e816:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e818:	6979      	ldr	r1, [r7, #20]
 800e81a:	69ba      	ldr	r2, [r7, #24]
 800e81c:	e841 2300 	strex	r3, r2, [r1]
 800e820:	613b      	str	r3, [r7, #16]
   return(result);
 800e822:	693b      	ldr	r3, [r7, #16]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d1e6      	bne.n	800e7f6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	2220      	movs	r2, #32
 800e82c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	2200      	movs	r2, #0
 800e834:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	2200      	movs	r2, #0
 800e83a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e83c:	bf00      	nop
 800e83e:	3754      	adds	r7, #84	@ 0x54
 800e840:	46bd      	mov	sp, r7
 800e842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e846:	4770      	bx	lr
 800e848:	effffffe 	.word	0xeffffffe

0800e84c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b09c      	sub	sp, #112	@ 0x70
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e858:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	69db      	ldr	r3, [r3, #28]
 800e85e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e862:	d071      	beq.n	800e948 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800e864:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e866:	2200      	movs	r2, #0
 800e868:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e86c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e872:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e874:	e853 3f00 	ldrex	r3, [r3]
 800e878:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e87a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e87c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e880:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e882:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	461a      	mov	r2, r3
 800e888:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e88a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e88c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e88e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e890:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e892:	e841 2300 	strex	r3, r2, [r1]
 800e896:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e898:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d1e6      	bne.n	800e86c <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e89e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	3308      	adds	r3, #8
 800e8a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8a8:	e853 3f00 	ldrex	r3, [r3]
 800e8ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e8ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8b0:	f023 0301 	bic.w	r3, r3, #1
 800e8b4:	667b      	str	r3, [r7, #100]	@ 0x64
 800e8b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	3308      	adds	r3, #8
 800e8bc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e8be:	647a      	str	r2, [r7, #68]	@ 0x44
 800e8c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e8c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e8c6:	e841 2300 	strex	r3, r2, [r1]
 800e8ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e8cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d1e5      	bne.n	800e89e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e8d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	3308      	adds	r3, #8
 800e8d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8dc:	e853 3f00 	ldrex	r3, [r3]
 800e8e0:	623b      	str	r3, [r7, #32]
   return(result);
 800e8e2:	6a3b      	ldr	r3, [r7, #32]
 800e8e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e8e8:	663b      	str	r3, [r7, #96]	@ 0x60
 800e8ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	3308      	adds	r3, #8
 800e8f0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e8f2:	633a      	str	r2, [r7, #48]	@ 0x30
 800e8f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e8f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e8fa:	e841 2300 	strex	r3, r2, [r1]
 800e8fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e902:	2b00      	cmp	r3, #0
 800e904:	d1e5      	bne.n	800e8d2 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e906:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e908:	2220      	movs	r2, #32
 800e90a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e90e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e910:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e912:	2b01      	cmp	r3, #1
 800e914:	d118      	bne.n	800e948 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e916:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e91c:	693b      	ldr	r3, [r7, #16]
 800e91e:	e853 3f00 	ldrex	r3, [r3]
 800e922:	60fb      	str	r3, [r7, #12]
   return(result);
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	f023 0310 	bic.w	r3, r3, #16
 800e92a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e92c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	461a      	mov	r2, r3
 800e932:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e934:	61fb      	str	r3, [r7, #28]
 800e936:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e938:	69b9      	ldr	r1, [r7, #24]
 800e93a:	69fa      	ldr	r2, [r7, #28]
 800e93c:	e841 2300 	strex	r3, r2, [r1]
 800e940:	617b      	str	r3, [r7, #20]
   return(result);
 800e942:	697b      	ldr	r3, [r7, #20]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d1e6      	bne.n	800e916 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e948:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e94a:	2200      	movs	r2, #0
 800e94c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e94e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e950:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e952:	2b01      	cmp	r3, #1
 800e954:	d107      	bne.n	800e966 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e956:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e958:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e95c:	4619      	mov	r1, r3
 800e95e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e960:	f7fe fdf4 	bl	800d54c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e964:	e002      	b.n	800e96c <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800e966:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e968:	f7f3 ffbe 	bl	80028e8 <HAL_UART_RxCpltCallback>
}
 800e96c:	bf00      	nop
 800e96e:	3770      	adds	r7, #112	@ 0x70
 800e970:	46bd      	mov	sp, r7
 800e972:	bd80      	pop	{r7, pc}

0800e974 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b084      	sub	sp, #16
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e980:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	2201      	movs	r2, #1
 800e986:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e98c:	2b01      	cmp	r3, #1
 800e98e:	d109      	bne.n	800e9a4 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e996:	085b      	lsrs	r3, r3, #1
 800e998:	b29b      	uxth	r3, r3
 800e99a:	4619      	mov	r1, r3
 800e99c:	68f8      	ldr	r0, [r7, #12]
 800e99e:	f7fe fdd5 	bl	800d54c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e9a2:	e002      	b.n	800e9aa <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800e9a4:	68f8      	ldr	r0, [r7, #12]
 800e9a6:	f7fe fdbd 	bl	800d524 <HAL_UART_RxHalfCpltCallback>
}
 800e9aa:	bf00      	nop
 800e9ac:	3710      	adds	r7, #16
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	bd80      	pop	{r7, pc}

0800e9b2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e9b2:	b580      	push	{r7, lr}
 800e9b4:	b086      	sub	sp, #24
 800e9b6:	af00      	add	r7, sp, #0
 800e9b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e9be:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e9c0:	697b      	ldr	r3, [r7, #20]
 800e9c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e9c6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e9c8:	697b      	ldr	r3, [r7, #20]
 800e9ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e9ce:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e9d0:	697b      	ldr	r3, [r7, #20]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	689b      	ldr	r3, [r3, #8]
 800e9d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e9da:	2b80      	cmp	r3, #128	@ 0x80
 800e9dc:	d109      	bne.n	800e9f2 <UART_DMAError+0x40>
 800e9de:	693b      	ldr	r3, [r7, #16]
 800e9e0:	2b21      	cmp	r3, #33	@ 0x21
 800e9e2:	d106      	bne.n	800e9f2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800e9ec:	6978      	ldr	r0, [r7, #20]
 800e9ee:	f7ff fe85 	bl	800e6fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e9f2:	697b      	ldr	r3, [r7, #20]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	689b      	ldr	r3, [r3, #8]
 800e9f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e9fc:	2b40      	cmp	r3, #64	@ 0x40
 800e9fe:	d109      	bne.n	800ea14 <UART_DMAError+0x62>
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	2b22      	cmp	r3, #34	@ 0x22
 800ea04:	d106      	bne.n	800ea14 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ea06:	697b      	ldr	r3, [r7, #20]
 800ea08:	2200      	movs	r2, #0
 800ea0a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800ea0e:	6978      	ldr	r0, [r7, #20]
 800ea10:	f7ff feb6 	bl	800e780 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ea14:	697b      	ldr	r3, [r7, #20]
 800ea16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea1a:	f043 0210 	orr.w	r2, r3, #16
 800ea1e:	697b      	ldr	r3, [r7, #20]
 800ea20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ea24:	6978      	ldr	r0, [r7, #20]
 800ea26:	f7fe fd87 	bl	800d538 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ea2a:	bf00      	nop
 800ea2c:	3718      	adds	r7, #24
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	bd80      	pop	{r7, pc}

0800ea32 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ea32:	b580      	push	{r7, lr}
 800ea34:	b084      	sub	sp, #16
 800ea36:	af00      	add	r7, sp, #0
 800ea38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	2200      	movs	r2, #0
 800ea44:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ea50:	68f8      	ldr	r0, [r7, #12]
 800ea52:	f7fe fd71 	bl	800d538 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ea56:	bf00      	nop
 800ea58:	3710      	adds	r7, #16
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	bd80      	pop	{r7, pc}

0800ea5e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ea5e:	b580      	push	{r7, lr}
 800ea60:	b088      	sub	sp, #32
 800ea62:	af00      	add	r7, sp, #0
 800ea64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	e853 3f00 	ldrex	r3, [r3]
 800ea72:	60bb      	str	r3, [r7, #8]
   return(result);
 800ea74:	68bb      	ldr	r3, [r7, #8]
 800ea76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ea7a:	61fb      	str	r3, [r7, #28]
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	461a      	mov	r2, r3
 800ea82:	69fb      	ldr	r3, [r7, #28]
 800ea84:	61bb      	str	r3, [r7, #24]
 800ea86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea88:	6979      	ldr	r1, [r7, #20]
 800ea8a:	69ba      	ldr	r2, [r7, #24]
 800ea8c:	e841 2300 	strex	r3, r2, [r1]
 800ea90:	613b      	str	r3, [r7, #16]
   return(result);
 800ea92:	693b      	ldr	r3, [r7, #16]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d1e6      	bne.n	800ea66 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	2220      	movs	r2, #32
 800ea9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800eaa6:	6878      	ldr	r0, [r7, #4]
 800eaa8:	f7fe fd32 	bl	800d510 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eaac:	bf00      	nop
 800eaae:	3720      	adds	r7, #32
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}

0800eab4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800eab4:	b480      	push	{r7}
 800eab6:	b083      	sub	sp, #12
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800eabc:	bf00      	nop
 800eabe:	370c      	adds	r7, #12
 800eac0:	46bd      	mov	sp, r7
 800eac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac6:	4770      	bx	lr

0800eac8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800eac8:	b480      	push	{r7}
 800eaca:	b083      	sub	sp, #12
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ead0:	bf00      	nop
 800ead2:	370c      	adds	r7, #12
 800ead4:	46bd      	mov	sp, r7
 800ead6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eada:	4770      	bx	lr

0800eadc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800eadc:	b480      	push	{r7}
 800eade:	b083      	sub	sp, #12
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800eae4:	bf00      	nop
 800eae6:	370c      	adds	r7, #12
 800eae8:	46bd      	mov	sp, r7
 800eaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaee:	4770      	bx	lr

0800eaf0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800eaf0:	b480      	push	{r7}
 800eaf2:	b085      	sub	sp, #20
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800eafe:	2b01      	cmp	r3, #1
 800eb00:	d101      	bne.n	800eb06 <HAL_UARTEx_DisableFifoMode+0x16>
 800eb02:	2302      	movs	r3, #2
 800eb04:	e027      	b.n	800eb56 <HAL_UARTEx_DisableFifoMode+0x66>
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	2201      	movs	r2, #1
 800eb0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	2224      	movs	r2, #36	@ 0x24
 800eb12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	681a      	ldr	r2, [r3, #0]
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	f022 0201 	bic.w	r2, r2, #1
 800eb2c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800eb34:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	2200      	movs	r2, #0
 800eb3a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	68fa      	ldr	r2, [r7, #12]
 800eb42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2220      	movs	r2, #32
 800eb48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	2200      	movs	r2, #0
 800eb50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800eb54:	2300      	movs	r3, #0
}
 800eb56:	4618      	mov	r0, r3
 800eb58:	3714      	adds	r7, #20
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb60:	4770      	bx	lr

0800eb62 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eb62:	b580      	push	{r7, lr}
 800eb64:	b084      	sub	sp, #16
 800eb66:	af00      	add	r7, sp, #0
 800eb68:	6078      	str	r0, [r7, #4]
 800eb6a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800eb72:	2b01      	cmp	r3, #1
 800eb74:	d101      	bne.n	800eb7a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800eb76:	2302      	movs	r3, #2
 800eb78:	e02d      	b.n	800ebd6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	2201      	movs	r2, #1
 800eb7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	2224      	movs	r2, #36	@ 0x24
 800eb86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	681a      	ldr	r2, [r3, #0]
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	f022 0201 	bic.w	r2, r2, #1
 800eba0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	689b      	ldr	r3, [r3, #8]
 800eba8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	683a      	ldr	r2, [r7, #0]
 800ebb2:	430a      	orrs	r2, r1
 800ebb4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ebb6:	6878      	ldr	r0, [r7, #4]
 800ebb8:	f000 f850 	bl	800ec5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	68fa      	ldr	r2, [r7, #12]
 800ebc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2220      	movs	r2, #32
 800ebc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	2200      	movs	r2, #0
 800ebd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ebd4:	2300      	movs	r3, #0
}
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	3710      	adds	r7, #16
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	bd80      	pop	{r7, pc}

0800ebde <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ebde:	b580      	push	{r7, lr}
 800ebe0:	b084      	sub	sp, #16
 800ebe2:	af00      	add	r7, sp, #0
 800ebe4:	6078      	str	r0, [r7, #4]
 800ebe6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ebee:	2b01      	cmp	r3, #1
 800ebf0:	d101      	bne.n	800ebf6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ebf2:	2302      	movs	r3, #2
 800ebf4:	e02d      	b.n	800ec52 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	2201      	movs	r2, #1
 800ebfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	2224      	movs	r2, #36	@ 0x24
 800ec02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	681a      	ldr	r2, [r3, #0]
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	f022 0201 	bic.w	r2, r2, #1
 800ec1c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	689b      	ldr	r3, [r3, #8]
 800ec24:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	683a      	ldr	r2, [r7, #0]
 800ec2e:	430a      	orrs	r2, r1
 800ec30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ec32:	6878      	ldr	r0, [r7, #4]
 800ec34:	f000 f812 	bl	800ec5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	68fa      	ldr	r2, [r7, #12]
 800ec3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2220      	movs	r2, #32
 800ec44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ec50:	2300      	movs	r3, #0
}
 800ec52:	4618      	mov	r0, r3
 800ec54:	3710      	adds	r7, #16
 800ec56:	46bd      	mov	sp, r7
 800ec58:	bd80      	pop	{r7, pc}
	...

0800ec5c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ec5c:	b480      	push	{r7}
 800ec5e:	b085      	sub	sp, #20
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d108      	bne.n	800ec7e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	2201      	movs	r2, #1
 800ec70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	2201      	movs	r2, #1
 800ec78:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ec7c:	e031      	b.n	800ece2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ec7e:	2310      	movs	r3, #16
 800ec80:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ec82:	2310      	movs	r3, #16
 800ec84:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	689b      	ldr	r3, [r3, #8]
 800ec8c:	0e5b      	lsrs	r3, r3, #25
 800ec8e:	b2db      	uxtb	r3, r3
 800ec90:	f003 0307 	and.w	r3, r3, #7
 800ec94:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	689b      	ldr	r3, [r3, #8]
 800ec9c:	0f5b      	lsrs	r3, r3, #29
 800ec9e:	b2db      	uxtb	r3, r3
 800eca0:	f003 0307 	and.w	r3, r3, #7
 800eca4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800eca6:	7bbb      	ldrb	r3, [r7, #14]
 800eca8:	7b3a      	ldrb	r2, [r7, #12]
 800ecaa:	4911      	ldr	r1, [pc, #68]	@ (800ecf0 <UARTEx_SetNbDataToProcess+0x94>)
 800ecac:	5c8a      	ldrb	r2, [r1, r2]
 800ecae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ecb2:	7b3a      	ldrb	r2, [r7, #12]
 800ecb4:	490f      	ldr	r1, [pc, #60]	@ (800ecf4 <UARTEx_SetNbDataToProcess+0x98>)
 800ecb6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ecb8:	fb93 f3f2 	sdiv	r3, r3, r2
 800ecbc:	b29a      	uxth	r2, r3
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ecc4:	7bfb      	ldrb	r3, [r7, #15]
 800ecc6:	7b7a      	ldrb	r2, [r7, #13]
 800ecc8:	4909      	ldr	r1, [pc, #36]	@ (800ecf0 <UARTEx_SetNbDataToProcess+0x94>)
 800ecca:	5c8a      	ldrb	r2, [r1, r2]
 800eccc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ecd0:	7b7a      	ldrb	r2, [r7, #13]
 800ecd2:	4908      	ldr	r1, [pc, #32]	@ (800ecf4 <UARTEx_SetNbDataToProcess+0x98>)
 800ecd4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ecd6:	fb93 f3f2 	sdiv	r3, r3, r2
 800ecda:	b29a      	uxth	r2, r3
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ece2:	bf00      	nop
 800ece4:	3714      	adds	r7, #20
 800ece6:	46bd      	mov	sp, r7
 800ece8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecec:	4770      	bx	lr
 800ecee:	bf00      	nop
 800ecf0:	08013440 	.word	0x08013440
 800ecf4:	08013448 	.word	0x08013448

0800ecf8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800ecfc:	4904      	ldr	r1, [pc, #16]	@ (800ed10 <MX_FATFS_Init+0x18>)
 800ecfe:	4805      	ldr	r0, [pc, #20]	@ (800ed14 <MX_FATFS_Init+0x1c>)
 800ed00:	f004 f8c6 	bl	8012e90 <FATFS_LinkDriver>
 800ed04:	4603      	mov	r3, r0
 800ed06:	461a      	mov	r2, r3
 800ed08:	4b03      	ldr	r3, [pc, #12]	@ (800ed18 <MX_FATFS_Init+0x20>)
 800ed0a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ed0c:	bf00      	nop
 800ed0e:	bd80      	pop	{r7, pc}
 800ed10:	24002ac8 	.word	0x24002ac8
 800ed14:	240000a8 	.word	0x240000a8
 800ed18:	24002ac4 	.word	0x24002ac4

0800ed1c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ed1c:	b480      	push	{r7}
 800ed1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ed20:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ed22:	4618      	mov	r0, r3
 800ed24:	46bd      	mov	sp, r7
 800ed26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2a:	4770      	bx	lr

0800ed2c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b082      	sub	sp, #8
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	4603      	mov	r3, r0
 800ed34:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800ed36:	79fb      	ldrb	r3, [r7, #7]
 800ed38:	4618      	mov	r0, r3
 800ed3a:	f000 f9fd 	bl	800f138 <SD_disk_initialize>
 800ed3e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800ed40:	4618      	mov	r0, r3
 800ed42:	3708      	adds	r7, #8
 800ed44:	46bd      	mov	sp, r7
 800ed46:	bd80      	pop	{r7, pc}

0800ed48 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b082      	sub	sp, #8
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	4603      	mov	r3, r0
 800ed50:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800ed52:	79fb      	ldrb	r3, [r7, #7]
 800ed54:	4618      	mov	r0, r3
 800ed56:	f000 fad5 	bl	800f304 <SD_disk_status>
 800ed5a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	3708      	adds	r7, #8
 800ed60:	46bd      	mov	sp, r7
 800ed62:	bd80      	pop	{r7, pc}

0800ed64 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b084      	sub	sp, #16
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	60b9      	str	r1, [r7, #8]
 800ed6c:	607a      	str	r2, [r7, #4]
 800ed6e:	603b      	str	r3, [r7, #0]
 800ed70:	4603      	mov	r3, r0
 800ed72:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800ed74:	7bf8      	ldrb	r0, [r7, #15]
 800ed76:	683b      	ldr	r3, [r7, #0]
 800ed78:	687a      	ldr	r2, [r7, #4]
 800ed7a:	68b9      	ldr	r1, [r7, #8]
 800ed7c:	f000 fad8 	bl	800f330 <SD_disk_read>
 800ed80:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800ed82:	4618      	mov	r0, r3
 800ed84:	3710      	adds	r7, #16
 800ed86:	46bd      	mov	sp, r7
 800ed88:	bd80      	pop	{r7, pc}

0800ed8a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800ed8a:	b580      	push	{r7, lr}
 800ed8c:	b084      	sub	sp, #16
 800ed8e:	af00      	add	r7, sp, #0
 800ed90:	60b9      	str	r1, [r7, #8]
 800ed92:	607a      	str	r2, [r7, #4]
 800ed94:	603b      	str	r3, [r7, #0]
 800ed96:	4603      	mov	r3, r0
 800ed98:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800ed9a:	7bf8      	ldrb	r0, [r7, #15]
 800ed9c:	683b      	ldr	r3, [r7, #0]
 800ed9e:	687a      	ldr	r2, [r7, #4]
 800eda0:	68b9      	ldr	r1, [r7, #8]
 800eda2:	f000 fb2f 	bl	800f404 <SD_disk_write>
 800eda6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800eda8:	4618      	mov	r0, r3
 800edaa:	3710      	adds	r7, #16
 800edac:	46bd      	mov	sp, r7
 800edae:	bd80      	pop	{r7, pc}

0800edb0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b082      	sub	sp, #8
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	4603      	mov	r3, r0
 800edb8:	603a      	str	r2, [r7, #0]
 800edba:	71fb      	strb	r3, [r7, #7]
 800edbc:	460b      	mov	r3, r1
 800edbe:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 800edc0:	79b9      	ldrb	r1, [r7, #6]
 800edc2:	79fb      	ldrb	r3, [r7, #7]
 800edc4:	683a      	ldr	r2, [r7, #0]
 800edc6:	4618      	mov	r0, r3
 800edc8:	f000 fba0 	bl	800f50c <SD_disk_ioctl>
 800edcc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800edce:	4618      	mov	r0, r3
 800edd0:	3708      	adds	r7, #8
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}
	...

0800edd8 <SELECT>:

//-----[ SPI Functions ]-----

/* slave select */
static void SELECT(void)
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800eddc:	2200      	movs	r2, #0
 800edde:	2110      	movs	r1, #16
 800ede0:	4802      	ldr	r0, [pc, #8]	@ (800edec <SELECT+0x14>)
 800ede2:	f7f8 fd1d 	bl	8007820 <HAL_GPIO_WritePin>
}
 800ede6:	bf00      	nop
 800ede8:	bd80      	pop	{r7, pc}
 800edea:	bf00      	nop
 800edec:	58020000 	.word	0x58020000

0800edf0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800edf4:	2201      	movs	r2, #1
 800edf6:	2110      	movs	r1, #16
 800edf8:	4802      	ldr	r0, [pc, #8]	@ (800ee04 <DESELECT+0x14>)
 800edfa:	f7f8 fd11 	bl	8007820 <HAL_GPIO_WritePin>
}
 800edfe:	bf00      	nop
 800ee00:	bd80      	pop	{r7, pc}
 800ee02:	bf00      	nop
 800ee04:	58020000 	.word	0x58020000

0800ee08 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b082      	sub	sp, #8
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	4603      	mov	r3, r0
 800ee10:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800ee12:	bf00      	nop
 800ee14:	4b08      	ldr	r3, [pc, #32]	@ (800ee38 <SPI_TxByte+0x30>)
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	695b      	ldr	r3, [r3, #20]
 800ee1a:	f003 0302 	and.w	r3, r3, #2
 800ee1e:	2b02      	cmp	r3, #2
 800ee20:	d1f8      	bne.n	800ee14 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800ee22:	1df9      	adds	r1, r7, #7
 800ee24:	2364      	movs	r3, #100	@ 0x64
 800ee26:	2201      	movs	r2, #1
 800ee28:	4803      	ldr	r0, [pc, #12]	@ (800ee38 <SPI_TxByte+0x30>)
 800ee2a:	f7fb fd43 	bl	800a8b4 <HAL_SPI_Transmit>
}
 800ee2e:	bf00      	nop
 800ee30:	3708      	adds	r7, #8
 800ee32:	46bd      	mov	sp, r7
 800ee34:	bd80      	pop	{r7, pc}
 800ee36:	bf00      	nop
 800ee38:	240024a8 	.word	0x240024a8

0800ee3c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	b082      	sub	sp, #8
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]
 800ee44:	460b      	mov	r3, r1
 800ee46:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800ee48:	bf00      	nop
 800ee4a:	4b08      	ldr	r3, [pc, #32]	@ (800ee6c <SPI_TxBuffer+0x30>)
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	695b      	ldr	r3, [r3, #20]
 800ee50:	f003 0302 	and.w	r3, r3, #2
 800ee54:	2b02      	cmp	r3, #2
 800ee56:	d1f8      	bne.n	800ee4a <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800ee58:	887a      	ldrh	r2, [r7, #2]
 800ee5a:	2364      	movs	r3, #100	@ 0x64
 800ee5c:	6879      	ldr	r1, [r7, #4]
 800ee5e:	4803      	ldr	r0, [pc, #12]	@ (800ee6c <SPI_TxBuffer+0x30>)
 800ee60:	f7fb fd28 	bl	800a8b4 <HAL_SPI_Transmit>
}
 800ee64:	bf00      	nop
 800ee66:	3708      	adds	r7, #8
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	bd80      	pop	{r7, pc}
 800ee6c:	240024a8 	.word	0x240024a8

0800ee70 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b084      	sub	sp, #16
 800ee74:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800ee76:	23ff      	movs	r3, #255	@ 0xff
 800ee78:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800ee7a:	bf00      	nop
 800ee7c:	4b09      	ldr	r3, [pc, #36]	@ (800eea4 <SPI_RxByte+0x34>)
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	695b      	ldr	r3, [r3, #20]
 800ee82:	f003 0302 	and.w	r3, r3, #2
 800ee86:	2b02      	cmp	r3, #2
 800ee88:	d1f8      	bne.n	800ee7c <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800ee8a:	1dba      	adds	r2, r7, #6
 800ee8c:	1df9      	adds	r1, r7, #7
 800ee8e:	2364      	movs	r3, #100	@ 0x64
 800ee90:	9300      	str	r3, [sp, #0]
 800ee92:	2301      	movs	r3, #1
 800ee94:	4803      	ldr	r0, [pc, #12]	@ (800eea4 <SPI_RxByte+0x34>)
 800ee96:	f7fc f96d 	bl	800b174 <HAL_SPI_TransmitReceive>
  return data;
 800ee9a:	79bb      	ldrb	r3, [r7, #6]
}
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	3708      	adds	r7, #8
 800eea0:	46bd      	mov	sp, r7
 800eea2:	bd80      	pop	{r7, pc}
 800eea4:	240024a8 	.word	0x240024a8

0800eea8 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b082      	sub	sp, #8
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 800eeb0:	f7ff ffde 	bl	800ee70 <SPI_RxByte>
 800eeb4:	4603      	mov	r3, r0
 800eeb6:	461a      	mov	r2, r3
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	701a      	strb	r2, [r3, #0]
}
 800eebc:	bf00      	nop
 800eebe:	3708      	adds	r7, #8
 800eec0:	46bd      	mov	sp, r7
 800eec2:	bd80      	pop	{r7, pc}

0800eec4 <SD_ReadyWait>:

//-----[ SD Card Functions ]-----

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b082      	sub	sp, #8
 800eec8:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 800eeca:	4b0a      	ldr	r3, [pc, #40]	@ (800eef4 <SD_ReadyWait+0x30>)
 800eecc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800eed0:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 800eed2:	f7ff ffcd 	bl	800ee70 <SPI_RxByte>
 800eed6:	4603      	mov	r3, r0
 800eed8:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800eeda:	79fb      	ldrb	r3, [r7, #7]
 800eedc:	2bff      	cmp	r3, #255	@ 0xff
 800eede:	d003      	beq.n	800eee8 <SD_ReadyWait+0x24>
 800eee0:	4b04      	ldr	r3, [pc, #16]	@ (800eef4 <SD_ReadyWait+0x30>)
 800eee2:	881b      	ldrh	r3, [r3, #0]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d1f4      	bne.n	800eed2 <SD_ReadyWait+0xe>
  return res;
 800eee8:	79fb      	ldrb	r3, [r7, #7]
}
 800eeea:	4618      	mov	r0, r3
 800eeec:	3708      	adds	r7, #8
 800eeee:	46bd      	mov	sp, r7
 800eef0:	bd80      	pop	{r7, pc}
 800eef2:	bf00      	nop
 800eef4:	24002ace 	.word	0x24002ace

0800eef8 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b084      	sub	sp, #16
 800eefc:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 800eefe:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800ef02:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 800ef04:	f7ff ff74 	bl	800edf0 <DESELECT>
  for(int i = 0; i < 10; i++)
 800ef08:	2300      	movs	r3, #0
 800ef0a:	60bb      	str	r3, [r7, #8]
 800ef0c:	e005      	b.n	800ef1a <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800ef0e:	20ff      	movs	r0, #255	@ 0xff
 800ef10:	f7ff ff7a 	bl	800ee08 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800ef14:	68bb      	ldr	r3, [r7, #8]
 800ef16:	3301      	adds	r3, #1
 800ef18:	60bb      	str	r3, [r7, #8]
 800ef1a:	68bb      	ldr	r3, [r7, #8]
 800ef1c:	2b09      	cmp	r3, #9
 800ef1e:	ddf6      	ble.n	800ef0e <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 800ef20:	f7ff ff5a 	bl	800edd8 <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 800ef24:	2340      	movs	r3, #64	@ 0x40
 800ef26:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 800ef28:	2300      	movs	r3, #0
 800ef2a:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 800ef30:	2300      	movs	r3, #0
 800ef32:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 800ef34:	2300      	movs	r3, #0
 800ef36:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 800ef38:	2395      	movs	r3, #149	@ 0x95
 800ef3a:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 800ef3c:	463b      	mov	r3, r7
 800ef3e:	2106      	movs	r1, #6
 800ef40:	4618      	mov	r0, r3
 800ef42:	f7ff ff7b 	bl	800ee3c <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 800ef46:	e002      	b.n	800ef4e <SD_PowerOn+0x56>
  {
    cnt--;
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	3b01      	subs	r3, #1
 800ef4c:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 800ef4e:	f7ff ff8f 	bl	800ee70 <SPI_RxByte>
 800ef52:	4603      	mov	r3, r0
 800ef54:	2b01      	cmp	r3, #1
 800ef56:	d002      	beq.n	800ef5e <SD_PowerOn+0x66>
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d1f4      	bne.n	800ef48 <SD_PowerOn+0x50>
  }
  DESELECT();
 800ef5e:	f7ff ff47 	bl	800edf0 <DESELECT>
  SPI_TxByte(0XFF);
 800ef62:	20ff      	movs	r0, #255	@ 0xff
 800ef64:	f7ff ff50 	bl	800ee08 <SPI_TxByte>
  PowerFlag = 1;
 800ef68:	4b03      	ldr	r3, [pc, #12]	@ (800ef78 <SD_PowerOn+0x80>)
 800ef6a:	2201      	movs	r2, #1
 800ef6c:	701a      	strb	r2, [r3, #0]
}
 800ef6e:	bf00      	nop
 800ef70:	3710      	adds	r7, #16
 800ef72:	46bd      	mov	sp, r7
 800ef74:	bd80      	pop	{r7, pc}
 800ef76:	bf00      	nop
 800ef78:	24002ad1 	.word	0x24002ad1

0800ef7c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 800ef7c:	b480      	push	{r7}
 800ef7e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800ef80:	4b03      	ldr	r3, [pc, #12]	@ (800ef90 <SD_PowerOff+0x14>)
 800ef82:	2200      	movs	r2, #0
 800ef84:	701a      	strb	r2, [r3, #0]
}
 800ef86:	bf00      	nop
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8e:	4770      	bx	lr
 800ef90:	24002ad1 	.word	0x24002ad1

0800ef94 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 800ef94:	b480      	push	{r7}
 800ef96:	af00      	add	r7, sp, #0
  return PowerFlag;
 800ef98:	4b03      	ldr	r3, [pc, #12]	@ (800efa8 <SD_CheckPower+0x14>)
 800ef9a:	781b      	ldrb	r3, [r3, #0]
}
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa4:	4770      	bx	lr
 800efa6:	bf00      	nop
 800efa8:	24002ad1 	.word	0x24002ad1

0800efac <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800efac:	b580      	push	{r7, lr}
 800efae:	b084      	sub	sp, #16
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
 800efb4:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 800efb6:	4b13      	ldr	r3, [pc, #76]	@ (800f004 <SD_RxDataBlock+0x58>)
 800efb8:	22c8      	movs	r2, #200	@ 0xc8
 800efba:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 800efbc:	f7ff ff58 	bl	800ee70 <SPI_RxByte>
 800efc0:	4603      	mov	r3, r0
 800efc2:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 800efc4:	7bfb      	ldrb	r3, [r7, #15]
 800efc6:	2bff      	cmp	r3, #255	@ 0xff
 800efc8:	d103      	bne.n	800efd2 <SD_RxDataBlock+0x26>
 800efca:	4b0e      	ldr	r3, [pc, #56]	@ (800f004 <SD_RxDataBlock+0x58>)
 800efcc:	881b      	ldrh	r3, [r3, #0]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d1f4      	bne.n	800efbc <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 800efd2:	7bfb      	ldrb	r3, [r7, #15]
 800efd4:	2bfe      	cmp	r3, #254	@ 0xfe
 800efd6:	d001      	beq.n	800efdc <SD_RxDataBlock+0x30>
 800efd8:	2300      	movs	r3, #0
 800efda:	e00f      	b.n	800effc <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	1c5a      	adds	r2, r3, #1
 800efe0:	607a      	str	r2, [r7, #4]
 800efe2:	4618      	mov	r0, r3
 800efe4:	f7ff ff60 	bl	800eea8 <SPI_RxBytePtr>
  } while(len--);
 800efe8:	683b      	ldr	r3, [r7, #0]
 800efea:	1e5a      	subs	r2, r3, #1
 800efec:	603a      	str	r2, [r7, #0]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d1f4      	bne.n	800efdc <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 800eff2:	f7ff ff3d 	bl	800ee70 <SPI_RxByte>
  SPI_RxByte();
 800eff6:	f7ff ff3b 	bl	800ee70 <SPI_RxByte>
  return TRUE;
 800effa:	2301      	movs	r3, #1
}
 800effc:	4618      	mov	r0, r3
 800effe:	3710      	adds	r7, #16
 800f000:	46bd      	mov	sp, r7
 800f002:	bd80      	pop	{r7, pc}
 800f004:	24002acc 	.word	0x24002acc

0800f008 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b084      	sub	sp, #16
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
 800f010:	460b      	mov	r3, r1
 800f012:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 800f014:	2300      	movs	r3, #0
 800f016:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 800f018:	f7ff ff54 	bl	800eec4 <SD_ReadyWait>
 800f01c:	4603      	mov	r3, r0
 800f01e:	2bff      	cmp	r3, #255	@ 0xff
 800f020:	d001      	beq.n	800f026 <SD_TxDataBlock+0x1e>
 800f022:	2300      	movs	r3, #0
 800f024:	e02f      	b.n	800f086 <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 800f026:	78fb      	ldrb	r3, [r7, #3]
 800f028:	4618      	mov	r0, r3
 800f02a:	f7ff feed 	bl	800ee08 <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 800f02e:	78fb      	ldrb	r3, [r7, #3]
 800f030:	2bfd      	cmp	r3, #253	@ 0xfd
 800f032:	d020      	beq.n	800f076 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 800f034:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800f038:	6878      	ldr	r0, [r7, #4]
 800f03a:	f7ff feff 	bl	800ee3c <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 800f03e:	f7ff ff17 	bl	800ee70 <SPI_RxByte>
    SPI_RxByte();
 800f042:	f7ff ff15 	bl	800ee70 <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 800f046:	e00b      	b.n	800f060 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 800f048:	f7ff ff12 	bl	800ee70 <SPI_RxByte>
 800f04c:	4603      	mov	r3, r0
 800f04e:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 800f050:	7bfb      	ldrb	r3, [r7, #15]
 800f052:	f003 031f 	and.w	r3, r3, #31
 800f056:	2b05      	cmp	r3, #5
 800f058:	d006      	beq.n	800f068 <SD_TxDataBlock+0x60>
      i++;
 800f05a:	7bbb      	ldrb	r3, [r7, #14]
 800f05c:	3301      	adds	r3, #1
 800f05e:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 800f060:	7bbb      	ldrb	r3, [r7, #14]
 800f062:	2b40      	cmp	r3, #64	@ 0x40
 800f064:	d9f0      	bls.n	800f048 <SD_TxDataBlock+0x40>
 800f066:	e000      	b.n	800f06a <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 800f068:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 800f06a:	bf00      	nop
 800f06c:	f7ff ff00 	bl	800ee70 <SPI_RxByte>
 800f070:	4603      	mov	r3, r0
 800f072:	2b00      	cmp	r3, #0
 800f074:	d0fa      	beq.n	800f06c <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 800f076:	7bfb      	ldrb	r3, [r7, #15]
 800f078:	f003 031f 	and.w	r3, r3, #31
 800f07c:	2b05      	cmp	r3, #5
 800f07e:	d101      	bne.n	800f084 <SD_TxDataBlock+0x7c>
 800f080:	2301      	movs	r3, #1
 800f082:	e000      	b.n	800f086 <SD_TxDataBlock+0x7e>

  return FALSE;
 800f084:	2300      	movs	r3, #0
}
 800f086:	4618      	mov	r0, r3
 800f088:	3710      	adds	r7, #16
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bd80      	pop	{r7, pc}

0800f08e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800f08e:	b580      	push	{r7, lr}
 800f090:	b084      	sub	sp, #16
 800f092:	af00      	add	r7, sp, #0
 800f094:	4603      	mov	r3, r0
 800f096:	6039      	str	r1, [r7, #0]
 800f098:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 800f09a:	f7ff ff13 	bl	800eec4 <SD_ReadyWait>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	2bff      	cmp	r3, #255	@ 0xff
 800f0a2:	d001      	beq.n	800f0a8 <SD_SendCmd+0x1a>
 800f0a4:	23ff      	movs	r3, #255	@ 0xff
 800f0a6:	e042      	b.n	800f12e <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 800f0a8:	79fb      	ldrb	r3, [r7, #7]
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	f7ff feac 	bl	800ee08 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 800f0b0:	683b      	ldr	r3, [r7, #0]
 800f0b2:	0e1b      	lsrs	r3, r3, #24
 800f0b4:	b2db      	uxtb	r3, r3
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	f7ff fea6 	bl	800ee08 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 800f0bc:	683b      	ldr	r3, [r7, #0]
 800f0be:	0c1b      	lsrs	r3, r3, #16
 800f0c0:	b2db      	uxtb	r3, r3
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f7ff fea0 	bl	800ee08 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 800f0c8:	683b      	ldr	r3, [r7, #0]
 800f0ca:	0a1b      	lsrs	r3, r3, #8
 800f0cc:	b2db      	uxtb	r3, r3
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	f7ff fe9a 	bl	800ee08 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 800f0d4:	683b      	ldr	r3, [r7, #0]
 800f0d6:	b2db      	uxtb	r3, r3
 800f0d8:	4618      	mov	r0, r3
 800f0da:	f7ff fe95 	bl	800ee08 <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 800f0de:	79fb      	ldrb	r3, [r7, #7]
 800f0e0:	2b40      	cmp	r3, #64	@ 0x40
 800f0e2:	d102      	bne.n	800f0ea <SD_SendCmd+0x5c>
 800f0e4:	2395      	movs	r3, #149	@ 0x95
 800f0e6:	73fb      	strb	r3, [r7, #15]
 800f0e8:	e007      	b.n	800f0fa <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 800f0ea:	79fb      	ldrb	r3, [r7, #7]
 800f0ec:	2b48      	cmp	r3, #72	@ 0x48
 800f0ee:	d102      	bne.n	800f0f6 <SD_SendCmd+0x68>
 800f0f0:	2387      	movs	r3, #135	@ 0x87
 800f0f2:	73fb      	strb	r3, [r7, #15]
 800f0f4:	e001      	b.n	800f0fa <SD_SendCmd+0x6c>
  else crc = 1;
 800f0f6:	2301      	movs	r3, #1
 800f0f8:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 800f0fa:	7bfb      	ldrb	r3, [r7, #15]
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	f7ff fe83 	bl	800ee08 <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 800f102:	79fb      	ldrb	r3, [r7, #7]
 800f104:	2b4c      	cmp	r3, #76	@ 0x4c
 800f106:	d101      	bne.n	800f10c <SD_SendCmd+0x7e>
 800f108:	f7ff feb2 	bl	800ee70 <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 800f10c:	230a      	movs	r3, #10
 800f10e:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 800f110:	f7ff feae 	bl	800ee70 <SPI_RxByte>
 800f114:	4603      	mov	r3, r0
 800f116:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800f118:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	da05      	bge.n	800f12c <SD_SendCmd+0x9e>
 800f120:	7bbb      	ldrb	r3, [r7, #14]
 800f122:	3b01      	subs	r3, #1
 800f124:	73bb      	strb	r3, [r7, #14]
 800f126:	7bbb      	ldrb	r3, [r7, #14]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d1f1      	bne.n	800f110 <SD_SendCmd+0x82>

  return res;
 800f12c:	7b7b      	ldrb	r3, [r7, #13]
}
 800f12e:	4618      	mov	r0, r3
 800f130:	3710      	adds	r7, #16
 800f132:	46bd      	mov	sp, r7
 800f134:	bd80      	pop	{r7, pc}
	...

0800f138 <SD_disk_initialize>:

//-----[ user_diskio.c Functions ]-----

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 800f138:	b590      	push	{r4, r7, lr}
 800f13a:	b085      	sub	sp, #20
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	4603      	mov	r3, r0
 800f140:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 800f142:	79fb      	ldrb	r3, [r7, #7]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d001      	beq.n	800f14c <SD_disk_initialize+0x14>
 800f148:	2301      	movs	r3, #1
 800f14a:	e0d1      	b.n	800f2f0 <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 800f14c:	4b6a      	ldr	r3, [pc, #424]	@ (800f2f8 <SD_disk_initialize+0x1c0>)
 800f14e:	781b      	ldrb	r3, [r3, #0]
 800f150:	b2db      	uxtb	r3, r3
 800f152:	f003 0302 	and.w	r3, r3, #2
 800f156:	2b00      	cmp	r3, #0
 800f158:	d003      	beq.n	800f162 <SD_disk_initialize+0x2a>
 800f15a:	4b67      	ldr	r3, [pc, #412]	@ (800f2f8 <SD_disk_initialize+0x1c0>)
 800f15c:	781b      	ldrb	r3, [r3, #0]
 800f15e:	b2db      	uxtb	r3, r3
 800f160:	e0c6      	b.n	800f2f0 <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 800f162:	f7ff fec9 	bl	800eef8 <SD_PowerOn>
  /* slave select */
  SELECT();
 800f166:	f7ff fe37 	bl	800edd8 <SELECT>
  /* check disk type */
  type = 0;
 800f16a:	2300      	movs	r3, #0
 800f16c:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 800f16e:	2100      	movs	r1, #0
 800f170:	2040      	movs	r0, #64	@ 0x40
 800f172:	f7ff ff8c 	bl	800f08e <SD_SendCmd>
 800f176:	4603      	mov	r3, r0
 800f178:	2b01      	cmp	r3, #1
 800f17a:	f040 80a1 	bne.w	800f2c0 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 800f17e:	4b5f      	ldr	r3, [pc, #380]	@ (800f2fc <SD_disk_initialize+0x1c4>)
 800f180:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800f184:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800f186:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800f18a:	2048      	movs	r0, #72	@ 0x48
 800f18c:	f7ff ff7f 	bl	800f08e <SD_SendCmd>
 800f190:	4603      	mov	r3, r0
 800f192:	2b01      	cmp	r3, #1
 800f194:	d155      	bne.n	800f242 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 800f196:	2300      	movs	r3, #0
 800f198:	73fb      	strb	r3, [r7, #15]
 800f19a:	e00c      	b.n	800f1b6 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 800f19c:	7bfc      	ldrb	r4, [r7, #15]
 800f19e:	f7ff fe67 	bl	800ee70 <SPI_RxByte>
 800f1a2:	4603      	mov	r3, r0
 800f1a4:	461a      	mov	r2, r3
 800f1a6:	f104 0310 	add.w	r3, r4, #16
 800f1aa:	443b      	add	r3, r7
 800f1ac:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800f1b0:	7bfb      	ldrb	r3, [r7, #15]
 800f1b2:	3301      	adds	r3, #1
 800f1b4:	73fb      	strb	r3, [r7, #15]
 800f1b6:	7bfb      	ldrb	r3, [r7, #15]
 800f1b8:	2b03      	cmp	r3, #3
 800f1ba:	d9ef      	bls.n	800f19c <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800f1bc:	7abb      	ldrb	r3, [r7, #10]
 800f1be:	2b01      	cmp	r3, #1
 800f1c0:	d17e      	bne.n	800f2c0 <SD_disk_initialize+0x188>
 800f1c2:	7afb      	ldrb	r3, [r7, #11]
 800f1c4:	2baa      	cmp	r3, #170	@ 0xaa
 800f1c6:	d17b      	bne.n	800f2c0 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800f1c8:	2100      	movs	r1, #0
 800f1ca:	2077      	movs	r0, #119	@ 0x77
 800f1cc:	f7ff ff5f 	bl	800f08e <SD_SendCmd>
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	2b01      	cmp	r3, #1
 800f1d4:	d807      	bhi.n	800f1e6 <SD_disk_initialize+0xae>
 800f1d6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800f1da:	2069      	movs	r0, #105	@ 0x69
 800f1dc:	f7ff ff57 	bl	800f08e <SD_SendCmd>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d004      	beq.n	800f1f0 <SD_disk_initialize+0xb8>
        } while (Timer1);
 800f1e6:	4b45      	ldr	r3, [pc, #276]	@ (800f2fc <SD_disk_initialize+0x1c4>)
 800f1e8:	881b      	ldrh	r3, [r3, #0]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d1ec      	bne.n	800f1c8 <SD_disk_initialize+0x90>
 800f1ee:	e000      	b.n	800f1f2 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800f1f0:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800f1f2:	4b42      	ldr	r3, [pc, #264]	@ (800f2fc <SD_disk_initialize+0x1c4>)
 800f1f4:	881b      	ldrh	r3, [r3, #0]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d062      	beq.n	800f2c0 <SD_disk_initialize+0x188>
 800f1fa:	2100      	movs	r1, #0
 800f1fc:	207a      	movs	r0, #122	@ 0x7a
 800f1fe:	f7ff ff46 	bl	800f08e <SD_SendCmd>
 800f202:	4603      	mov	r3, r0
 800f204:	2b00      	cmp	r3, #0
 800f206:	d15b      	bne.n	800f2c0 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 800f208:	2300      	movs	r3, #0
 800f20a:	73fb      	strb	r3, [r7, #15]
 800f20c:	e00c      	b.n	800f228 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 800f20e:	7bfc      	ldrb	r4, [r7, #15]
 800f210:	f7ff fe2e 	bl	800ee70 <SPI_RxByte>
 800f214:	4603      	mov	r3, r0
 800f216:	461a      	mov	r2, r3
 800f218:	f104 0310 	add.w	r3, r4, #16
 800f21c:	443b      	add	r3, r7
 800f21e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800f222:	7bfb      	ldrb	r3, [r7, #15]
 800f224:	3301      	adds	r3, #1
 800f226:	73fb      	strb	r3, [r7, #15]
 800f228:	7bfb      	ldrb	r3, [r7, #15]
 800f22a:	2b03      	cmp	r3, #3
 800f22c:	d9ef      	bls.n	800f20e <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800f22e:	7a3b      	ldrb	r3, [r7, #8]
 800f230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f234:	2b00      	cmp	r3, #0
 800f236:	d001      	beq.n	800f23c <SD_disk_initialize+0x104>
 800f238:	230c      	movs	r3, #12
 800f23a:	e000      	b.n	800f23e <SD_disk_initialize+0x106>
 800f23c:	2304      	movs	r3, #4
 800f23e:	73bb      	strb	r3, [r7, #14]
 800f240:	e03e      	b.n	800f2c0 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800f242:	2100      	movs	r1, #0
 800f244:	2077      	movs	r0, #119	@ 0x77
 800f246:	f7ff ff22 	bl	800f08e <SD_SendCmd>
 800f24a:	4603      	mov	r3, r0
 800f24c:	2b01      	cmp	r3, #1
 800f24e:	d808      	bhi.n	800f262 <SD_disk_initialize+0x12a>
 800f250:	2100      	movs	r1, #0
 800f252:	2069      	movs	r0, #105	@ 0x69
 800f254:	f7ff ff1b 	bl	800f08e <SD_SendCmd>
 800f258:	4603      	mov	r3, r0
 800f25a:	2b01      	cmp	r3, #1
 800f25c:	d801      	bhi.n	800f262 <SD_disk_initialize+0x12a>
 800f25e:	2302      	movs	r3, #2
 800f260:	e000      	b.n	800f264 <SD_disk_initialize+0x12c>
 800f262:	2301      	movs	r3, #1
 800f264:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 800f266:	7bbb      	ldrb	r3, [r7, #14]
 800f268:	2b02      	cmp	r3, #2
 800f26a:	d10e      	bne.n	800f28a <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800f26c:	2100      	movs	r1, #0
 800f26e:	2077      	movs	r0, #119	@ 0x77
 800f270:	f7ff ff0d 	bl	800f08e <SD_SendCmd>
 800f274:	4603      	mov	r3, r0
 800f276:	2b01      	cmp	r3, #1
 800f278:	d80e      	bhi.n	800f298 <SD_disk_initialize+0x160>
 800f27a:	2100      	movs	r1, #0
 800f27c:	2069      	movs	r0, #105	@ 0x69
 800f27e:	f7ff ff06 	bl	800f08e <SD_SendCmd>
 800f282:	4603      	mov	r3, r0
 800f284:	2b00      	cmp	r3, #0
 800f286:	d107      	bne.n	800f298 <SD_disk_initialize+0x160>
 800f288:	e00c      	b.n	800f2a4 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800f28a:	2100      	movs	r1, #0
 800f28c:	2041      	movs	r0, #65	@ 0x41
 800f28e:	f7ff fefe 	bl	800f08e <SD_SendCmd>
 800f292:	4603      	mov	r3, r0
 800f294:	2b00      	cmp	r3, #0
 800f296:	d004      	beq.n	800f2a2 <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 800f298:	4b18      	ldr	r3, [pc, #96]	@ (800f2fc <SD_disk_initialize+0x1c4>)
 800f29a:	881b      	ldrh	r3, [r3, #0]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d1e2      	bne.n	800f266 <SD_disk_initialize+0x12e>
 800f2a0:	e000      	b.n	800f2a4 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800f2a2:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800f2a4:	4b15      	ldr	r3, [pc, #84]	@ (800f2fc <SD_disk_initialize+0x1c4>)
 800f2a6:	881b      	ldrh	r3, [r3, #0]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d007      	beq.n	800f2bc <SD_disk_initialize+0x184>
 800f2ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800f2b0:	2050      	movs	r0, #80	@ 0x50
 800f2b2:	f7ff feec 	bl	800f08e <SD_SendCmd>
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d001      	beq.n	800f2c0 <SD_disk_initialize+0x188>
 800f2bc:	2300      	movs	r3, #0
 800f2be:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 800f2c0:	4a0f      	ldr	r2, [pc, #60]	@ (800f300 <SD_disk_initialize+0x1c8>)
 800f2c2:	7bbb      	ldrb	r3, [r7, #14]
 800f2c4:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 800f2c6:	f7ff fd93 	bl	800edf0 <DESELECT>
  SPI_RxByte();
 800f2ca:	f7ff fdd1 	bl	800ee70 <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 800f2ce:	7bbb      	ldrb	r3, [r7, #14]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d008      	beq.n	800f2e6 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 800f2d4:	4b08      	ldr	r3, [pc, #32]	@ (800f2f8 <SD_disk_initialize+0x1c0>)
 800f2d6:	781b      	ldrb	r3, [r3, #0]
 800f2d8:	b2db      	uxtb	r3, r3
 800f2da:	f023 0301 	bic.w	r3, r3, #1
 800f2de:	b2da      	uxtb	r2, r3
 800f2e0:	4b05      	ldr	r3, [pc, #20]	@ (800f2f8 <SD_disk_initialize+0x1c0>)
 800f2e2:	701a      	strb	r2, [r3, #0]
 800f2e4:	e001      	b.n	800f2ea <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800f2e6:	f7ff fe49 	bl	800ef7c <SD_PowerOff>
  }
  return Stat;
 800f2ea:	4b03      	ldr	r3, [pc, #12]	@ (800f2f8 <SD_disk_initialize+0x1c0>)
 800f2ec:	781b      	ldrb	r3, [r3, #0]
 800f2ee:	b2db      	uxtb	r3, r3
}
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	3714      	adds	r7, #20
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	bd90      	pop	{r4, r7, pc}
 800f2f8:	240000bc 	.word	0x240000bc
 800f2fc:	24002acc 	.word	0x24002acc
 800f300:	24002ad0 	.word	0x24002ad0

0800f304 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 800f304:	b480      	push	{r7}
 800f306:	b083      	sub	sp, #12
 800f308:	af00      	add	r7, sp, #0
 800f30a:	4603      	mov	r3, r0
 800f30c:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 800f30e:	79fb      	ldrb	r3, [r7, #7]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d001      	beq.n	800f318 <SD_disk_status+0x14>
 800f314:	2301      	movs	r3, #1
 800f316:	e002      	b.n	800f31e <SD_disk_status+0x1a>
  return Stat;
 800f318:	4b04      	ldr	r3, [pc, #16]	@ (800f32c <SD_disk_status+0x28>)
 800f31a:	781b      	ldrb	r3, [r3, #0]
 800f31c:	b2db      	uxtb	r3, r3
}
 800f31e:	4618      	mov	r0, r3
 800f320:	370c      	adds	r7, #12
 800f322:	46bd      	mov	sp, r7
 800f324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f328:	4770      	bx	lr
 800f32a:	bf00      	nop
 800f32c:	240000bc 	.word	0x240000bc

0800f330 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b084      	sub	sp, #16
 800f334:	af00      	add	r7, sp, #0
 800f336:	60b9      	str	r1, [r7, #8]
 800f338:	607a      	str	r2, [r7, #4]
 800f33a:	603b      	str	r3, [r7, #0]
 800f33c:	4603      	mov	r3, r0
 800f33e:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800f340:	7bfb      	ldrb	r3, [r7, #15]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d102      	bne.n	800f34c <SD_disk_read+0x1c>
 800f346:	683b      	ldr	r3, [r7, #0]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d101      	bne.n	800f350 <SD_disk_read+0x20>
 800f34c:	2304      	movs	r3, #4
 800f34e:	e051      	b.n	800f3f4 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f350:	4b2a      	ldr	r3, [pc, #168]	@ (800f3fc <SD_disk_read+0xcc>)
 800f352:	781b      	ldrb	r3, [r3, #0]
 800f354:	b2db      	uxtb	r3, r3
 800f356:	f003 0301 	and.w	r3, r3, #1
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d001      	beq.n	800f362 <SD_disk_read+0x32>
 800f35e:	2303      	movs	r3, #3
 800f360:	e048      	b.n	800f3f4 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800f362:	4b27      	ldr	r3, [pc, #156]	@ (800f400 <SD_disk_read+0xd0>)
 800f364:	781b      	ldrb	r3, [r3, #0]
 800f366:	f003 0304 	and.w	r3, r3, #4
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d102      	bne.n	800f374 <SD_disk_read+0x44>
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	025b      	lsls	r3, r3, #9
 800f372:	607b      	str	r3, [r7, #4]

  SELECT();
 800f374:	f7ff fd30 	bl	800edd8 <SELECT>

  if (count == 1)
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	2b01      	cmp	r3, #1
 800f37c:	d111      	bne.n	800f3a2 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800f37e:	6879      	ldr	r1, [r7, #4]
 800f380:	2051      	movs	r0, #81	@ 0x51
 800f382:	f7ff fe84 	bl	800f08e <SD_SendCmd>
 800f386:	4603      	mov	r3, r0
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d129      	bne.n	800f3e0 <SD_disk_read+0xb0>
 800f38c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800f390:	68b8      	ldr	r0, [r7, #8]
 800f392:	f7ff fe0b 	bl	800efac <SD_RxDataBlock>
 800f396:	4603      	mov	r3, r0
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d021      	beq.n	800f3e0 <SD_disk_read+0xb0>
 800f39c:	2300      	movs	r3, #0
 800f39e:	603b      	str	r3, [r7, #0]
 800f3a0:	e01e      	b.n	800f3e0 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 800f3a2:	6879      	ldr	r1, [r7, #4]
 800f3a4:	2052      	movs	r0, #82	@ 0x52
 800f3a6:	f7ff fe72 	bl	800f08e <SD_SendCmd>
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d117      	bne.n	800f3e0 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 800f3b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800f3b4:	68b8      	ldr	r0, [r7, #8]
 800f3b6:	f7ff fdf9 	bl	800efac <SD_RxDataBlock>
 800f3ba:	4603      	mov	r3, r0
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d00a      	beq.n	800f3d6 <SD_disk_read+0xa6>
        buff += 512;
 800f3c0:	68bb      	ldr	r3, [r7, #8]
 800f3c2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800f3c6:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800f3c8:	683b      	ldr	r3, [r7, #0]
 800f3ca:	3b01      	subs	r3, #1
 800f3cc:	603b      	str	r3, [r7, #0]
 800f3ce:	683b      	ldr	r3, [r7, #0]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d1ed      	bne.n	800f3b0 <SD_disk_read+0x80>
 800f3d4:	e000      	b.n	800f3d8 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 800f3d6:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 800f3d8:	2100      	movs	r1, #0
 800f3da:	204c      	movs	r0, #76	@ 0x4c
 800f3dc:	f7ff fe57 	bl	800f08e <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 800f3e0:	f7ff fd06 	bl	800edf0 <DESELECT>
  SPI_RxByte();
 800f3e4:	f7ff fd44 	bl	800ee70 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800f3e8:	683b      	ldr	r3, [r7, #0]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	bf14      	ite	ne
 800f3ee:	2301      	movne	r3, #1
 800f3f0:	2300      	moveq	r3, #0
 800f3f2:	b2db      	uxtb	r3, r3
}
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	3710      	adds	r7, #16
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	bd80      	pop	{r7, pc}
 800f3fc:	240000bc 	.word	0x240000bc
 800f400:	24002ad0 	.word	0x24002ad0

0800f404 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 800f404:	b580      	push	{r7, lr}
 800f406:	b084      	sub	sp, #16
 800f408:	af00      	add	r7, sp, #0
 800f40a:	60b9      	str	r1, [r7, #8]
 800f40c:	607a      	str	r2, [r7, #4]
 800f40e:	603b      	str	r3, [r7, #0]
 800f410:	4603      	mov	r3, r0
 800f412:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800f414:	7bfb      	ldrb	r3, [r7, #15]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d102      	bne.n	800f420 <SD_disk_write+0x1c>
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d101      	bne.n	800f424 <SD_disk_write+0x20>
 800f420:	2304      	movs	r3, #4
 800f422:	e06b      	b.n	800f4fc <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f424:	4b37      	ldr	r3, [pc, #220]	@ (800f504 <SD_disk_write+0x100>)
 800f426:	781b      	ldrb	r3, [r3, #0]
 800f428:	b2db      	uxtb	r3, r3
 800f42a:	f003 0301 	and.w	r3, r3, #1
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d001      	beq.n	800f436 <SD_disk_write+0x32>
 800f432:	2303      	movs	r3, #3
 800f434:	e062      	b.n	800f4fc <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 800f436:	4b33      	ldr	r3, [pc, #204]	@ (800f504 <SD_disk_write+0x100>)
 800f438:	781b      	ldrb	r3, [r3, #0]
 800f43a:	b2db      	uxtb	r3, r3
 800f43c:	f003 0304 	and.w	r3, r3, #4
 800f440:	2b00      	cmp	r3, #0
 800f442:	d001      	beq.n	800f448 <SD_disk_write+0x44>
 800f444:	2302      	movs	r3, #2
 800f446:	e059      	b.n	800f4fc <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800f448:	4b2f      	ldr	r3, [pc, #188]	@ (800f508 <SD_disk_write+0x104>)
 800f44a:	781b      	ldrb	r3, [r3, #0]
 800f44c:	f003 0304 	and.w	r3, r3, #4
 800f450:	2b00      	cmp	r3, #0
 800f452:	d102      	bne.n	800f45a <SD_disk_write+0x56>
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	025b      	lsls	r3, r3, #9
 800f458:	607b      	str	r3, [r7, #4]

  SELECT();
 800f45a:	f7ff fcbd 	bl	800edd8 <SELECT>

  if (count == 1)
 800f45e:	683b      	ldr	r3, [r7, #0]
 800f460:	2b01      	cmp	r3, #1
 800f462:	d110      	bne.n	800f486 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800f464:	6879      	ldr	r1, [r7, #4]
 800f466:	2058      	movs	r0, #88	@ 0x58
 800f468:	f7ff fe11 	bl	800f08e <SD_SendCmd>
 800f46c:	4603      	mov	r3, r0
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d13a      	bne.n	800f4e8 <SD_disk_write+0xe4>
 800f472:	21fe      	movs	r1, #254	@ 0xfe
 800f474:	68b8      	ldr	r0, [r7, #8]
 800f476:	f7ff fdc7 	bl	800f008 <SD_TxDataBlock>
 800f47a:	4603      	mov	r3, r0
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d033      	beq.n	800f4e8 <SD_disk_write+0xe4>
      count = 0;
 800f480:	2300      	movs	r3, #0
 800f482:	603b      	str	r3, [r7, #0]
 800f484:	e030      	b.n	800f4e8 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 800f486:	4b20      	ldr	r3, [pc, #128]	@ (800f508 <SD_disk_write+0x104>)
 800f488:	781b      	ldrb	r3, [r3, #0]
 800f48a:	f003 0302 	and.w	r3, r3, #2
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d007      	beq.n	800f4a2 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800f492:	2100      	movs	r1, #0
 800f494:	2077      	movs	r0, #119	@ 0x77
 800f496:	f7ff fdfa 	bl	800f08e <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800f49a:	6839      	ldr	r1, [r7, #0]
 800f49c:	2057      	movs	r0, #87	@ 0x57
 800f49e:	f7ff fdf6 	bl	800f08e <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800f4a2:	6879      	ldr	r1, [r7, #4]
 800f4a4:	2059      	movs	r0, #89	@ 0x59
 800f4a6:	f7ff fdf2 	bl	800f08e <SD_SendCmd>
 800f4aa:	4603      	mov	r3, r0
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d11b      	bne.n	800f4e8 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 800f4b0:	21fc      	movs	r1, #252	@ 0xfc
 800f4b2:	68b8      	ldr	r0, [r7, #8]
 800f4b4:	f7ff fda8 	bl	800f008 <SD_TxDataBlock>
 800f4b8:	4603      	mov	r3, r0
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d00a      	beq.n	800f4d4 <SD_disk_write+0xd0>
        buff += 512;
 800f4be:	68bb      	ldr	r3, [r7, #8]
 800f4c0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800f4c4:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	3b01      	subs	r3, #1
 800f4ca:	603b      	str	r3, [r7, #0]
 800f4cc:	683b      	ldr	r3, [r7, #0]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d1ee      	bne.n	800f4b0 <SD_disk_write+0xac>
 800f4d2:	e000      	b.n	800f4d6 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 800f4d4:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 800f4d6:	21fd      	movs	r1, #253	@ 0xfd
 800f4d8:	2000      	movs	r0, #0
 800f4da:	f7ff fd95 	bl	800f008 <SD_TxDataBlock>
 800f4de:	4603      	mov	r3, r0
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d101      	bne.n	800f4e8 <SD_disk_write+0xe4>
      {
        count = 1;
 800f4e4:	2301      	movs	r3, #1
 800f4e6:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 800f4e8:	f7ff fc82 	bl	800edf0 <DESELECT>
  SPI_RxByte();
 800f4ec:	f7ff fcc0 	bl	800ee70 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800f4f0:	683b      	ldr	r3, [r7, #0]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	bf14      	ite	ne
 800f4f6:	2301      	movne	r3, #1
 800f4f8:	2300      	moveq	r3, #0
 800f4fa:	b2db      	uxtb	r3, r3
}
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	3710      	adds	r7, #16
 800f500:	46bd      	mov	sp, r7
 800f502:	bd80      	pop	{r7, pc}
 800f504:	240000bc 	.word	0x240000bc
 800f508:	24002ad0 	.word	0x24002ad0

0800f50c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 800f50c:	b590      	push	{r4, r7, lr}
 800f50e:	b08b      	sub	sp, #44	@ 0x2c
 800f510:	af00      	add	r7, sp, #0
 800f512:	4603      	mov	r3, r0
 800f514:	603a      	str	r2, [r7, #0]
 800f516:	71fb      	strb	r3, [r7, #7]
 800f518:	460b      	mov	r3, r1
 800f51a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 800f51c:	683b      	ldr	r3, [r7, #0]
 800f51e:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 800f520:	79fb      	ldrb	r3, [r7, #7]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d001      	beq.n	800f52a <SD_disk_ioctl+0x1e>
 800f526:	2304      	movs	r3, #4
 800f528:	e113      	b.n	800f752 <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 800f52a:	2301      	movs	r3, #1
 800f52c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 800f530:	79bb      	ldrb	r3, [r7, #6]
 800f532:	2b05      	cmp	r3, #5
 800f534:	d124      	bne.n	800f580 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 800f536:	6a3b      	ldr	r3, [r7, #32]
 800f538:	781b      	ldrb	r3, [r3, #0]
 800f53a:	2b02      	cmp	r3, #2
 800f53c:	d012      	beq.n	800f564 <SD_disk_ioctl+0x58>
 800f53e:	2b02      	cmp	r3, #2
 800f540:	dc1a      	bgt.n	800f578 <SD_disk_ioctl+0x6c>
 800f542:	2b00      	cmp	r3, #0
 800f544:	d002      	beq.n	800f54c <SD_disk_ioctl+0x40>
 800f546:	2b01      	cmp	r3, #1
 800f548:	d006      	beq.n	800f558 <SD_disk_ioctl+0x4c>
 800f54a:	e015      	b.n	800f578 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 800f54c:	f7ff fd16 	bl	800ef7c <SD_PowerOff>
      res = RES_OK;
 800f550:	2300      	movs	r3, #0
 800f552:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800f556:	e0fa      	b.n	800f74e <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 800f558:	f7ff fcce 	bl	800eef8 <SD_PowerOn>
      res = RES_OK;
 800f55c:	2300      	movs	r3, #0
 800f55e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800f562:	e0f4      	b.n	800f74e <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 800f564:	6a3b      	ldr	r3, [r7, #32]
 800f566:	1c5c      	adds	r4, r3, #1
 800f568:	f7ff fd14 	bl	800ef94 <SD_CheckPower>
 800f56c:	4603      	mov	r3, r0
 800f56e:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 800f570:	2300      	movs	r3, #0
 800f572:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800f576:	e0ea      	b.n	800f74e <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 800f578:	2304      	movs	r3, #4
 800f57a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f57e:	e0e6      	b.n	800f74e <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT){
 800f580:	4b76      	ldr	r3, [pc, #472]	@ (800f75c <SD_disk_ioctl+0x250>)
 800f582:	781b      	ldrb	r3, [r3, #0]
 800f584:	b2db      	uxtb	r3, r3
 800f586:	f003 0301 	and.w	r3, r3, #1
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d001      	beq.n	800f592 <SD_disk_ioctl+0x86>
    	return RES_NOTRDY;
 800f58e:	2303      	movs	r3, #3
 800f590:	e0df      	b.n	800f752 <SD_disk_ioctl+0x246>
    }
    SELECT();
 800f592:	f7ff fc21 	bl	800edd8 <SELECT>
    switch (ctrl)
 800f596:	79bb      	ldrb	r3, [r7, #6]
 800f598:	2b0d      	cmp	r3, #13
 800f59a:	f200 80c9 	bhi.w	800f730 <SD_disk_ioctl+0x224>
 800f59e:	a201      	add	r2, pc, #4	@ (adr r2, 800f5a4 <SD_disk_ioctl+0x98>)
 800f5a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5a4:	0800f69b 	.word	0x0800f69b
 800f5a8:	0800f5dd 	.word	0x0800f5dd
 800f5ac:	0800f68b 	.word	0x0800f68b
 800f5b0:	0800f731 	.word	0x0800f731
 800f5b4:	0800f731 	.word	0x0800f731
 800f5b8:	0800f731 	.word	0x0800f731
 800f5bc:	0800f731 	.word	0x0800f731
 800f5c0:	0800f731 	.word	0x0800f731
 800f5c4:	0800f731 	.word	0x0800f731
 800f5c8:	0800f731 	.word	0x0800f731
 800f5cc:	0800f731 	.word	0x0800f731
 800f5d0:	0800f6ad 	.word	0x0800f6ad
 800f5d4:	0800f6d1 	.word	0x0800f6d1
 800f5d8:	0800f6f5 	.word	0x0800f6f5
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800f5dc:	2100      	movs	r1, #0
 800f5de:	2049      	movs	r0, #73	@ 0x49
 800f5e0:	f7ff fd55 	bl	800f08e <SD_SendCmd>
 800f5e4:	4603      	mov	r3, r0
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	f040 80a6 	bne.w	800f738 <SD_disk_ioctl+0x22c>
 800f5ec:	f107 030c 	add.w	r3, r7, #12
 800f5f0:	2110      	movs	r1, #16
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	f7ff fcda 	bl	800efac <SD_RxDataBlock>
 800f5f8:	4603      	mov	r3, r0
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	f000 809c 	beq.w	800f738 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 800f600:	7b3b      	ldrb	r3, [r7, #12]
 800f602:	099b      	lsrs	r3, r3, #6
 800f604:	b2db      	uxtb	r3, r3
 800f606:	2b01      	cmp	r3, #1
 800f608:	d10d      	bne.n	800f626 <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800f60a:	7d7b      	ldrb	r3, [r7, #21]
 800f60c:	461a      	mov	r2, r3
 800f60e:	7d3b      	ldrb	r3, [r7, #20]
 800f610:	021b      	lsls	r3, r3, #8
 800f612:	b29b      	uxth	r3, r3
 800f614:	4413      	add	r3, r2
 800f616:	b29b      	uxth	r3, r3
 800f618:	3301      	adds	r3, #1
 800f61a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 800f61c:	8bfb      	ldrh	r3, [r7, #30]
 800f61e:	029a      	lsls	r2, r3, #10
 800f620:	683b      	ldr	r3, [r7, #0]
 800f622:	601a      	str	r2, [r3, #0]
 800f624:	e02d      	b.n	800f682 <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800f626:	7c7b      	ldrb	r3, [r7, #17]
 800f628:	f003 030f 	and.w	r3, r3, #15
 800f62c:	b2da      	uxtb	r2, r3
 800f62e:	7dbb      	ldrb	r3, [r7, #22]
 800f630:	09db      	lsrs	r3, r3, #7
 800f632:	b2db      	uxtb	r3, r3
 800f634:	4413      	add	r3, r2
 800f636:	b2da      	uxtb	r2, r3
 800f638:	7d7b      	ldrb	r3, [r7, #21]
 800f63a:	005b      	lsls	r3, r3, #1
 800f63c:	b2db      	uxtb	r3, r3
 800f63e:	f003 0306 	and.w	r3, r3, #6
 800f642:	b2db      	uxtb	r3, r3
 800f644:	4413      	add	r3, r2
 800f646:	b2db      	uxtb	r3, r3
 800f648:	3302      	adds	r3, #2
 800f64a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800f64e:	7d3b      	ldrb	r3, [r7, #20]
 800f650:	099b      	lsrs	r3, r3, #6
 800f652:	b2db      	uxtb	r3, r3
 800f654:	461a      	mov	r2, r3
 800f656:	7cfb      	ldrb	r3, [r7, #19]
 800f658:	009b      	lsls	r3, r3, #2
 800f65a:	b29b      	uxth	r3, r3
 800f65c:	4413      	add	r3, r2
 800f65e:	b29a      	uxth	r2, r3
 800f660:	7cbb      	ldrb	r3, [r7, #18]
 800f662:	029b      	lsls	r3, r3, #10
 800f664:	b29b      	uxth	r3, r3
 800f666:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800f66a:	b29b      	uxth	r3, r3
 800f66c:	4413      	add	r3, r2
 800f66e:	b29b      	uxth	r3, r3
 800f670:	3301      	adds	r3, #1
 800f672:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 800f674:	8bfa      	ldrh	r2, [r7, #30]
 800f676:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f67a:	3b09      	subs	r3, #9
 800f67c:	409a      	lsls	r2, r3
 800f67e:	683b      	ldr	r3, [r7, #0]
 800f680:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 800f682:	2300      	movs	r3, #0
 800f684:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 800f688:	e056      	b.n	800f738 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 800f68a:	683b      	ldr	r3, [r7, #0]
 800f68c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f690:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800f692:	2300      	movs	r3, #0
 800f694:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800f698:	e055      	b.n	800f746 <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800f69a:	f7ff fc13 	bl	800eec4 <SD_ReadyWait>
 800f69e:	4603      	mov	r3, r0
 800f6a0:	2bff      	cmp	r3, #255	@ 0xff
 800f6a2:	d14b      	bne.n	800f73c <SD_disk_ioctl+0x230>
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800f6aa:	e047      	b.n	800f73c <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800f6ac:	2100      	movs	r1, #0
 800f6ae:	2049      	movs	r0, #73	@ 0x49
 800f6b0:	f7ff fced 	bl	800f08e <SD_SendCmd>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d142      	bne.n	800f740 <SD_disk_ioctl+0x234>
 800f6ba:	2110      	movs	r1, #16
 800f6bc:	6a38      	ldr	r0, [r7, #32]
 800f6be:	f7ff fc75 	bl	800efac <SD_RxDataBlock>
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d03b      	beq.n	800f740 <SD_disk_ioctl+0x234>
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800f6ce:	e037      	b.n	800f740 <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800f6d0:	2100      	movs	r1, #0
 800f6d2:	204a      	movs	r0, #74	@ 0x4a
 800f6d4:	f7ff fcdb 	bl	800f08e <SD_SendCmd>
 800f6d8:	4603      	mov	r3, r0
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d132      	bne.n	800f744 <SD_disk_ioctl+0x238>
 800f6de:	2110      	movs	r1, #16
 800f6e0:	6a38      	ldr	r0, [r7, #32]
 800f6e2:	f7ff fc63 	bl	800efac <SD_RxDataBlock>
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d02b      	beq.n	800f744 <SD_disk_ioctl+0x238>
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800f6f2:	e027      	b.n	800f744 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 800f6f4:	2100      	movs	r1, #0
 800f6f6:	207a      	movs	r0, #122	@ 0x7a
 800f6f8:	f7ff fcc9 	bl	800f08e <SD_SendCmd>
 800f6fc:	4603      	mov	r3, r0
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d116      	bne.n	800f730 <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 800f702:	2300      	movs	r3, #0
 800f704:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f708:	e00b      	b.n	800f722 <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 800f70a:	6a3c      	ldr	r4, [r7, #32]
 800f70c:	1c63      	adds	r3, r4, #1
 800f70e:	623b      	str	r3, [r7, #32]
 800f710:	f7ff fbae 	bl	800ee70 <SPI_RxByte>
 800f714:	4603      	mov	r3, r0
 800f716:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 800f718:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f71c:	3301      	adds	r3, #1
 800f71e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f722:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f726:	2b03      	cmp	r3, #3
 800f728:	d9ef      	bls.n	800f70a <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 800f72a:	2300      	movs	r3, #0
 800f72c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 800f730:	2304      	movs	r3, #4
 800f732:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f736:	e006      	b.n	800f746 <SD_disk_ioctl+0x23a>
      break;
 800f738:	bf00      	nop
 800f73a:	e004      	b.n	800f746 <SD_disk_ioctl+0x23a>
      break;
 800f73c:	bf00      	nop
 800f73e:	e002      	b.n	800f746 <SD_disk_ioctl+0x23a>
      break;
 800f740:	bf00      	nop
 800f742:	e000      	b.n	800f746 <SD_disk_ioctl+0x23a>
      break;
 800f744:	bf00      	nop
    }
    DESELECT();
 800f746:	f7ff fb53 	bl	800edf0 <DESELECT>
    SPI_RxByte();
 800f74a:	f7ff fb91 	bl	800ee70 <SPI_RxByte>
  }
  return res;
 800f74e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800f752:	4618      	mov	r0, r3
 800f754:	372c      	adds	r7, #44	@ 0x2c
 800f756:	46bd      	mov	sp, r7
 800f758:	bd90      	pop	{r4, r7, pc}
 800f75a:	bf00      	nop
 800f75c:	240000bc 	.word	0x240000bc

0800f760 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f760:	b580      	push	{r7, lr}
 800f762:	b084      	sub	sp, #16
 800f764:	af00      	add	r7, sp, #0
 800f766:	4603      	mov	r3, r0
 800f768:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f76a:	79fb      	ldrb	r3, [r7, #7]
 800f76c:	4a08      	ldr	r2, [pc, #32]	@ (800f790 <disk_status+0x30>)
 800f76e:	009b      	lsls	r3, r3, #2
 800f770:	4413      	add	r3, r2
 800f772:	685b      	ldr	r3, [r3, #4]
 800f774:	685b      	ldr	r3, [r3, #4]
 800f776:	79fa      	ldrb	r2, [r7, #7]
 800f778:	4905      	ldr	r1, [pc, #20]	@ (800f790 <disk_status+0x30>)
 800f77a:	440a      	add	r2, r1
 800f77c:	7a12      	ldrb	r2, [r2, #8]
 800f77e:	4610      	mov	r0, r2
 800f780:	4798      	blx	r3
 800f782:	4603      	mov	r3, r0
 800f784:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f786:	7bfb      	ldrb	r3, [r7, #15]
}
 800f788:	4618      	mov	r0, r3
 800f78a:	3710      	adds	r7, #16
 800f78c:	46bd      	mov	sp, r7
 800f78e:	bd80      	pop	{r7, pc}
 800f790:	24002cfc 	.word	0x24002cfc

0800f794 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b084      	sub	sp, #16
 800f798:	af00      	add	r7, sp, #0
 800f79a:	4603      	mov	r3, r0
 800f79c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f79e:	2300      	movs	r3, #0
 800f7a0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f7a2:	79fb      	ldrb	r3, [r7, #7]
 800f7a4:	4a0e      	ldr	r2, [pc, #56]	@ (800f7e0 <disk_initialize+0x4c>)
 800f7a6:	5cd3      	ldrb	r3, [r2, r3]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d114      	bne.n	800f7d6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f7ac:	79fb      	ldrb	r3, [r7, #7]
 800f7ae:	4a0c      	ldr	r2, [pc, #48]	@ (800f7e0 <disk_initialize+0x4c>)
 800f7b0:	009b      	lsls	r3, r3, #2
 800f7b2:	4413      	add	r3, r2
 800f7b4:	685b      	ldr	r3, [r3, #4]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	79fa      	ldrb	r2, [r7, #7]
 800f7ba:	4909      	ldr	r1, [pc, #36]	@ (800f7e0 <disk_initialize+0x4c>)
 800f7bc:	440a      	add	r2, r1
 800f7be:	7a12      	ldrb	r2, [r2, #8]
 800f7c0:	4610      	mov	r0, r2
 800f7c2:	4798      	blx	r3
 800f7c4:	4603      	mov	r3, r0
 800f7c6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800f7c8:	7bfb      	ldrb	r3, [r7, #15]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d103      	bne.n	800f7d6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800f7ce:	79fb      	ldrb	r3, [r7, #7]
 800f7d0:	4a03      	ldr	r2, [pc, #12]	@ (800f7e0 <disk_initialize+0x4c>)
 800f7d2:	2101      	movs	r1, #1
 800f7d4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800f7d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7d8:	4618      	mov	r0, r3
 800f7da:	3710      	adds	r7, #16
 800f7dc:	46bd      	mov	sp, r7
 800f7de:	bd80      	pop	{r7, pc}
 800f7e0:	24002cfc 	.word	0x24002cfc

0800f7e4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f7e4:	b590      	push	{r4, r7, lr}
 800f7e6:	b087      	sub	sp, #28
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	60b9      	str	r1, [r7, #8]
 800f7ec:	607a      	str	r2, [r7, #4]
 800f7ee:	603b      	str	r3, [r7, #0]
 800f7f0:	4603      	mov	r3, r0
 800f7f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f7f4:	7bfb      	ldrb	r3, [r7, #15]
 800f7f6:	4a0a      	ldr	r2, [pc, #40]	@ (800f820 <disk_read+0x3c>)
 800f7f8:	009b      	lsls	r3, r3, #2
 800f7fa:	4413      	add	r3, r2
 800f7fc:	685b      	ldr	r3, [r3, #4]
 800f7fe:	689c      	ldr	r4, [r3, #8]
 800f800:	7bfb      	ldrb	r3, [r7, #15]
 800f802:	4a07      	ldr	r2, [pc, #28]	@ (800f820 <disk_read+0x3c>)
 800f804:	4413      	add	r3, r2
 800f806:	7a18      	ldrb	r0, [r3, #8]
 800f808:	683b      	ldr	r3, [r7, #0]
 800f80a:	687a      	ldr	r2, [r7, #4]
 800f80c:	68b9      	ldr	r1, [r7, #8]
 800f80e:	47a0      	blx	r4
 800f810:	4603      	mov	r3, r0
 800f812:	75fb      	strb	r3, [r7, #23]
  return res;
 800f814:	7dfb      	ldrb	r3, [r7, #23]
}
 800f816:	4618      	mov	r0, r3
 800f818:	371c      	adds	r7, #28
 800f81a:	46bd      	mov	sp, r7
 800f81c:	bd90      	pop	{r4, r7, pc}
 800f81e:	bf00      	nop
 800f820:	24002cfc 	.word	0x24002cfc

0800f824 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f824:	b590      	push	{r4, r7, lr}
 800f826:	b087      	sub	sp, #28
 800f828:	af00      	add	r7, sp, #0
 800f82a:	60b9      	str	r1, [r7, #8]
 800f82c:	607a      	str	r2, [r7, #4]
 800f82e:	603b      	str	r3, [r7, #0]
 800f830:	4603      	mov	r3, r0
 800f832:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f834:	7bfb      	ldrb	r3, [r7, #15]
 800f836:	4a0a      	ldr	r2, [pc, #40]	@ (800f860 <disk_write+0x3c>)
 800f838:	009b      	lsls	r3, r3, #2
 800f83a:	4413      	add	r3, r2
 800f83c:	685b      	ldr	r3, [r3, #4]
 800f83e:	68dc      	ldr	r4, [r3, #12]
 800f840:	7bfb      	ldrb	r3, [r7, #15]
 800f842:	4a07      	ldr	r2, [pc, #28]	@ (800f860 <disk_write+0x3c>)
 800f844:	4413      	add	r3, r2
 800f846:	7a18      	ldrb	r0, [r3, #8]
 800f848:	683b      	ldr	r3, [r7, #0]
 800f84a:	687a      	ldr	r2, [r7, #4]
 800f84c:	68b9      	ldr	r1, [r7, #8]
 800f84e:	47a0      	blx	r4
 800f850:	4603      	mov	r3, r0
 800f852:	75fb      	strb	r3, [r7, #23]
  return res;
 800f854:	7dfb      	ldrb	r3, [r7, #23]
}
 800f856:	4618      	mov	r0, r3
 800f858:	371c      	adds	r7, #28
 800f85a:	46bd      	mov	sp, r7
 800f85c:	bd90      	pop	{r4, r7, pc}
 800f85e:	bf00      	nop
 800f860:	24002cfc 	.word	0x24002cfc

0800f864 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b084      	sub	sp, #16
 800f868:	af00      	add	r7, sp, #0
 800f86a:	4603      	mov	r3, r0
 800f86c:	603a      	str	r2, [r7, #0]
 800f86e:	71fb      	strb	r3, [r7, #7]
 800f870:	460b      	mov	r3, r1
 800f872:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f874:	79fb      	ldrb	r3, [r7, #7]
 800f876:	4a09      	ldr	r2, [pc, #36]	@ (800f89c <disk_ioctl+0x38>)
 800f878:	009b      	lsls	r3, r3, #2
 800f87a:	4413      	add	r3, r2
 800f87c:	685b      	ldr	r3, [r3, #4]
 800f87e:	691b      	ldr	r3, [r3, #16]
 800f880:	79fa      	ldrb	r2, [r7, #7]
 800f882:	4906      	ldr	r1, [pc, #24]	@ (800f89c <disk_ioctl+0x38>)
 800f884:	440a      	add	r2, r1
 800f886:	7a10      	ldrb	r0, [r2, #8]
 800f888:	79b9      	ldrb	r1, [r7, #6]
 800f88a:	683a      	ldr	r2, [r7, #0]
 800f88c:	4798      	blx	r3
 800f88e:	4603      	mov	r3, r0
 800f890:	73fb      	strb	r3, [r7, #15]
  return res;
 800f892:	7bfb      	ldrb	r3, [r7, #15]
}
 800f894:	4618      	mov	r0, r3
 800f896:	3710      	adds	r7, #16
 800f898:	46bd      	mov	sp, r7
 800f89a:	bd80      	pop	{r7, pc}
 800f89c:	24002cfc 	.word	0x24002cfc

0800f8a0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f8a0:	b480      	push	{r7}
 800f8a2:	b085      	sub	sp, #20
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	3301      	adds	r3, #1
 800f8ac:	781b      	ldrb	r3, [r3, #0]
 800f8ae:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f8b0:	89fb      	ldrh	r3, [r7, #14]
 800f8b2:	021b      	lsls	r3, r3, #8
 800f8b4:	b21a      	sxth	r2, r3
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	781b      	ldrb	r3, [r3, #0]
 800f8ba:	b21b      	sxth	r3, r3
 800f8bc:	4313      	orrs	r3, r2
 800f8be:	b21b      	sxth	r3, r3
 800f8c0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f8c2:	89fb      	ldrh	r3, [r7, #14]
}
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	3714      	adds	r7, #20
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ce:	4770      	bx	lr

0800f8d0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f8d0:	b480      	push	{r7}
 800f8d2:	b085      	sub	sp, #20
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	3303      	adds	r3, #3
 800f8dc:	781b      	ldrb	r3, [r3, #0]
 800f8de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	021b      	lsls	r3, r3, #8
 800f8e4:	687a      	ldr	r2, [r7, #4]
 800f8e6:	3202      	adds	r2, #2
 800f8e8:	7812      	ldrb	r2, [r2, #0]
 800f8ea:	4313      	orrs	r3, r2
 800f8ec:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	021b      	lsls	r3, r3, #8
 800f8f2:	687a      	ldr	r2, [r7, #4]
 800f8f4:	3201      	adds	r2, #1
 800f8f6:	7812      	ldrb	r2, [r2, #0]
 800f8f8:	4313      	orrs	r3, r2
 800f8fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	021b      	lsls	r3, r3, #8
 800f900:	687a      	ldr	r2, [r7, #4]
 800f902:	7812      	ldrb	r2, [r2, #0]
 800f904:	4313      	orrs	r3, r2
 800f906:	60fb      	str	r3, [r7, #12]
	return rv;
 800f908:	68fb      	ldr	r3, [r7, #12]
}
 800f90a:	4618      	mov	r0, r3
 800f90c:	3714      	adds	r7, #20
 800f90e:	46bd      	mov	sp, r7
 800f910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f914:	4770      	bx	lr

0800f916 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f916:	b480      	push	{r7}
 800f918:	b083      	sub	sp, #12
 800f91a:	af00      	add	r7, sp, #0
 800f91c:	6078      	str	r0, [r7, #4]
 800f91e:	460b      	mov	r3, r1
 800f920:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	1c5a      	adds	r2, r3, #1
 800f926:	607a      	str	r2, [r7, #4]
 800f928:	887a      	ldrh	r2, [r7, #2]
 800f92a:	b2d2      	uxtb	r2, r2
 800f92c:	701a      	strb	r2, [r3, #0]
 800f92e:	887b      	ldrh	r3, [r7, #2]
 800f930:	0a1b      	lsrs	r3, r3, #8
 800f932:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	1c5a      	adds	r2, r3, #1
 800f938:	607a      	str	r2, [r7, #4]
 800f93a:	887a      	ldrh	r2, [r7, #2]
 800f93c:	b2d2      	uxtb	r2, r2
 800f93e:	701a      	strb	r2, [r3, #0]
}
 800f940:	bf00      	nop
 800f942:	370c      	adds	r7, #12
 800f944:	46bd      	mov	sp, r7
 800f946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94a:	4770      	bx	lr

0800f94c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f94c:	b480      	push	{r7}
 800f94e:	b083      	sub	sp, #12
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
 800f954:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	1c5a      	adds	r2, r3, #1
 800f95a:	607a      	str	r2, [r7, #4]
 800f95c:	683a      	ldr	r2, [r7, #0]
 800f95e:	b2d2      	uxtb	r2, r2
 800f960:	701a      	strb	r2, [r3, #0]
 800f962:	683b      	ldr	r3, [r7, #0]
 800f964:	0a1b      	lsrs	r3, r3, #8
 800f966:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	1c5a      	adds	r2, r3, #1
 800f96c:	607a      	str	r2, [r7, #4]
 800f96e:	683a      	ldr	r2, [r7, #0]
 800f970:	b2d2      	uxtb	r2, r2
 800f972:	701a      	strb	r2, [r3, #0]
 800f974:	683b      	ldr	r3, [r7, #0]
 800f976:	0a1b      	lsrs	r3, r3, #8
 800f978:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	1c5a      	adds	r2, r3, #1
 800f97e:	607a      	str	r2, [r7, #4]
 800f980:	683a      	ldr	r2, [r7, #0]
 800f982:	b2d2      	uxtb	r2, r2
 800f984:	701a      	strb	r2, [r3, #0]
 800f986:	683b      	ldr	r3, [r7, #0]
 800f988:	0a1b      	lsrs	r3, r3, #8
 800f98a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	1c5a      	adds	r2, r3, #1
 800f990:	607a      	str	r2, [r7, #4]
 800f992:	683a      	ldr	r2, [r7, #0]
 800f994:	b2d2      	uxtb	r2, r2
 800f996:	701a      	strb	r2, [r3, #0]
}
 800f998:	bf00      	nop
 800f99a:	370c      	adds	r7, #12
 800f99c:	46bd      	mov	sp, r7
 800f99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a2:	4770      	bx	lr

0800f9a4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f9a4:	b480      	push	{r7}
 800f9a6:	b087      	sub	sp, #28
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	60f8      	str	r0, [r7, #12]
 800f9ac:	60b9      	str	r1, [r7, #8]
 800f9ae:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f9b4:	68bb      	ldr	r3, [r7, #8]
 800f9b6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d00d      	beq.n	800f9da <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f9be:	693a      	ldr	r2, [r7, #16]
 800f9c0:	1c53      	adds	r3, r2, #1
 800f9c2:	613b      	str	r3, [r7, #16]
 800f9c4:	697b      	ldr	r3, [r7, #20]
 800f9c6:	1c59      	adds	r1, r3, #1
 800f9c8:	6179      	str	r1, [r7, #20]
 800f9ca:	7812      	ldrb	r2, [r2, #0]
 800f9cc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	3b01      	subs	r3, #1
 800f9d2:	607b      	str	r3, [r7, #4]
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d1f1      	bne.n	800f9be <mem_cpy+0x1a>
	}
}
 800f9da:	bf00      	nop
 800f9dc:	371c      	adds	r7, #28
 800f9de:	46bd      	mov	sp, r7
 800f9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e4:	4770      	bx	lr

0800f9e6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f9e6:	b480      	push	{r7}
 800f9e8:	b087      	sub	sp, #28
 800f9ea:	af00      	add	r7, sp, #0
 800f9ec:	60f8      	str	r0, [r7, #12]
 800f9ee:	60b9      	str	r1, [r7, #8]
 800f9f0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f9f6:	697b      	ldr	r3, [r7, #20]
 800f9f8:	1c5a      	adds	r2, r3, #1
 800f9fa:	617a      	str	r2, [r7, #20]
 800f9fc:	68ba      	ldr	r2, [r7, #8]
 800f9fe:	b2d2      	uxtb	r2, r2
 800fa00:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	3b01      	subs	r3, #1
 800fa06:	607b      	str	r3, [r7, #4]
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d1f3      	bne.n	800f9f6 <mem_set+0x10>
}
 800fa0e:	bf00      	nop
 800fa10:	bf00      	nop
 800fa12:	371c      	adds	r7, #28
 800fa14:	46bd      	mov	sp, r7
 800fa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1a:	4770      	bx	lr

0800fa1c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800fa1c:	b480      	push	{r7}
 800fa1e:	b089      	sub	sp, #36	@ 0x24
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	60f8      	str	r0, [r7, #12]
 800fa24:	60b9      	str	r1, [r7, #8]
 800fa26:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	61fb      	str	r3, [r7, #28]
 800fa2c:	68bb      	ldr	r3, [r7, #8]
 800fa2e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800fa30:	2300      	movs	r3, #0
 800fa32:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800fa34:	69fb      	ldr	r3, [r7, #28]
 800fa36:	1c5a      	adds	r2, r3, #1
 800fa38:	61fa      	str	r2, [r7, #28]
 800fa3a:	781b      	ldrb	r3, [r3, #0]
 800fa3c:	4619      	mov	r1, r3
 800fa3e:	69bb      	ldr	r3, [r7, #24]
 800fa40:	1c5a      	adds	r2, r3, #1
 800fa42:	61ba      	str	r2, [r7, #24]
 800fa44:	781b      	ldrb	r3, [r3, #0]
 800fa46:	1acb      	subs	r3, r1, r3
 800fa48:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	3b01      	subs	r3, #1
 800fa4e:	607b      	str	r3, [r7, #4]
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d002      	beq.n	800fa5c <mem_cmp+0x40>
 800fa56:	697b      	ldr	r3, [r7, #20]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d0eb      	beq.n	800fa34 <mem_cmp+0x18>

	return r;
 800fa5c:	697b      	ldr	r3, [r7, #20]
}
 800fa5e:	4618      	mov	r0, r3
 800fa60:	3724      	adds	r7, #36	@ 0x24
 800fa62:	46bd      	mov	sp, r7
 800fa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa68:	4770      	bx	lr

0800fa6a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800fa6a:	b480      	push	{r7}
 800fa6c:	b083      	sub	sp, #12
 800fa6e:	af00      	add	r7, sp, #0
 800fa70:	6078      	str	r0, [r7, #4]
 800fa72:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800fa74:	e002      	b.n	800fa7c <chk_chr+0x12>
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	3301      	adds	r3, #1
 800fa7a:	607b      	str	r3, [r7, #4]
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	781b      	ldrb	r3, [r3, #0]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d005      	beq.n	800fa90 <chk_chr+0x26>
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	781b      	ldrb	r3, [r3, #0]
 800fa88:	461a      	mov	r2, r3
 800fa8a:	683b      	ldr	r3, [r7, #0]
 800fa8c:	4293      	cmp	r3, r2
 800fa8e:	d1f2      	bne.n	800fa76 <chk_chr+0xc>
	return *str;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	781b      	ldrb	r3, [r3, #0]
}
 800fa94:	4618      	mov	r0, r3
 800fa96:	370c      	adds	r7, #12
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9e:	4770      	bx	lr

0800faa0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800faa0:	b480      	push	{r7}
 800faa2:	b085      	sub	sp, #20
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
 800faa8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800faaa:	2300      	movs	r3, #0
 800faac:	60bb      	str	r3, [r7, #8]
 800faae:	68bb      	ldr	r3, [r7, #8]
 800fab0:	60fb      	str	r3, [r7, #12]
 800fab2:	e029      	b.n	800fb08 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800fab4:	4a27      	ldr	r2, [pc, #156]	@ (800fb54 <chk_lock+0xb4>)
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	011b      	lsls	r3, r3, #4
 800faba:	4413      	add	r3, r2
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d01d      	beq.n	800fafe <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fac2:	4a24      	ldr	r2, [pc, #144]	@ (800fb54 <chk_lock+0xb4>)
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	011b      	lsls	r3, r3, #4
 800fac8:	4413      	add	r3, r2
 800faca:	681a      	ldr	r2, [r3, #0]
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	429a      	cmp	r2, r3
 800fad2:	d116      	bne.n	800fb02 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800fad4:	4a1f      	ldr	r2, [pc, #124]	@ (800fb54 <chk_lock+0xb4>)
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	011b      	lsls	r3, r3, #4
 800fada:	4413      	add	r3, r2
 800fadc:	3304      	adds	r3, #4
 800fade:	681a      	ldr	r2, [r3, #0]
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fae4:	429a      	cmp	r2, r3
 800fae6:	d10c      	bne.n	800fb02 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800fae8:	4a1a      	ldr	r2, [pc, #104]	@ (800fb54 <chk_lock+0xb4>)
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	011b      	lsls	r3, r3, #4
 800faee:	4413      	add	r3, r2
 800faf0:	3308      	adds	r3, #8
 800faf2:	681a      	ldr	r2, [r3, #0]
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800faf8:	429a      	cmp	r2, r3
 800fafa:	d102      	bne.n	800fb02 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800fafc:	e007      	b.n	800fb0e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800fafe:	2301      	movs	r3, #1
 800fb00:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	3301      	adds	r3, #1
 800fb06:	60fb      	str	r3, [r7, #12]
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	2b01      	cmp	r3, #1
 800fb0c:	d9d2      	bls.n	800fab4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	2b02      	cmp	r3, #2
 800fb12:	d109      	bne.n	800fb28 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800fb14:	68bb      	ldr	r3, [r7, #8]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d102      	bne.n	800fb20 <chk_lock+0x80>
 800fb1a:	683b      	ldr	r3, [r7, #0]
 800fb1c:	2b02      	cmp	r3, #2
 800fb1e:	d101      	bne.n	800fb24 <chk_lock+0x84>
 800fb20:	2300      	movs	r3, #0
 800fb22:	e010      	b.n	800fb46 <chk_lock+0xa6>
 800fb24:	2312      	movs	r3, #18
 800fb26:	e00e      	b.n	800fb46 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800fb28:	683b      	ldr	r3, [r7, #0]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d108      	bne.n	800fb40 <chk_lock+0xa0>
 800fb2e:	4a09      	ldr	r2, [pc, #36]	@ (800fb54 <chk_lock+0xb4>)
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	011b      	lsls	r3, r3, #4
 800fb34:	4413      	add	r3, r2
 800fb36:	330c      	adds	r3, #12
 800fb38:	881b      	ldrh	r3, [r3, #0]
 800fb3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fb3e:	d101      	bne.n	800fb44 <chk_lock+0xa4>
 800fb40:	2310      	movs	r3, #16
 800fb42:	e000      	b.n	800fb46 <chk_lock+0xa6>
 800fb44:	2300      	movs	r3, #0
}
 800fb46:	4618      	mov	r0, r3
 800fb48:	3714      	adds	r7, #20
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb50:	4770      	bx	lr
 800fb52:	bf00      	nop
 800fb54:	24002adc 	.word	0x24002adc

0800fb58 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800fb58:	b480      	push	{r7}
 800fb5a:	b083      	sub	sp, #12
 800fb5c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fb5e:	2300      	movs	r3, #0
 800fb60:	607b      	str	r3, [r7, #4]
 800fb62:	e002      	b.n	800fb6a <enq_lock+0x12>
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	3301      	adds	r3, #1
 800fb68:	607b      	str	r3, [r7, #4]
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	2b01      	cmp	r3, #1
 800fb6e:	d806      	bhi.n	800fb7e <enq_lock+0x26>
 800fb70:	4a09      	ldr	r2, [pc, #36]	@ (800fb98 <enq_lock+0x40>)
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	011b      	lsls	r3, r3, #4
 800fb76:	4413      	add	r3, r2
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d1f2      	bne.n	800fb64 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	2b02      	cmp	r3, #2
 800fb82:	bf14      	ite	ne
 800fb84:	2301      	movne	r3, #1
 800fb86:	2300      	moveq	r3, #0
 800fb88:	b2db      	uxtb	r3, r3
}
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	370c      	adds	r7, #12
 800fb8e:	46bd      	mov	sp, r7
 800fb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb94:	4770      	bx	lr
 800fb96:	bf00      	nop
 800fb98:	24002adc 	.word	0x24002adc

0800fb9c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fb9c:	b480      	push	{r7}
 800fb9e:	b085      	sub	sp, #20
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	6078      	str	r0, [r7, #4]
 800fba4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fba6:	2300      	movs	r3, #0
 800fba8:	60fb      	str	r3, [r7, #12]
 800fbaa:	e01f      	b.n	800fbec <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800fbac:	4a41      	ldr	r2, [pc, #260]	@ (800fcb4 <inc_lock+0x118>)
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	011b      	lsls	r3, r3, #4
 800fbb2:	4413      	add	r3, r2
 800fbb4:	681a      	ldr	r2, [r3, #0]
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	429a      	cmp	r2, r3
 800fbbc:	d113      	bne.n	800fbe6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800fbbe:	4a3d      	ldr	r2, [pc, #244]	@ (800fcb4 <inc_lock+0x118>)
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	011b      	lsls	r3, r3, #4
 800fbc4:	4413      	add	r3, r2
 800fbc6:	3304      	adds	r3, #4
 800fbc8:	681a      	ldr	r2, [r3, #0]
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800fbce:	429a      	cmp	r2, r3
 800fbd0:	d109      	bne.n	800fbe6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800fbd2:	4a38      	ldr	r2, [pc, #224]	@ (800fcb4 <inc_lock+0x118>)
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	011b      	lsls	r3, r3, #4
 800fbd8:	4413      	add	r3, r2
 800fbda:	3308      	adds	r3, #8
 800fbdc:	681a      	ldr	r2, [r3, #0]
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800fbe2:	429a      	cmp	r2, r3
 800fbe4:	d006      	beq.n	800fbf4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	3301      	adds	r3, #1
 800fbea:	60fb      	str	r3, [r7, #12]
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	2b01      	cmp	r3, #1
 800fbf0:	d9dc      	bls.n	800fbac <inc_lock+0x10>
 800fbf2:	e000      	b.n	800fbf6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800fbf4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	2b02      	cmp	r3, #2
 800fbfa:	d132      	bne.n	800fc62 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	60fb      	str	r3, [r7, #12]
 800fc00:	e002      	b.n	800fc08 <inc_lock+0x6c>
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	3301      	adds	r3, #1
 800fc06:	60fb      	str	r3, [r7, #12]
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	2b01      	cmp	r3, #1
 800fc0c:	d806      	bhi.n	800fc1c <inc_lock+0x80>
 800fc0e:	4a29      	ldr	r2, [pc, #164]	@ (800fcb4 <inc_lock+0x118>)
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	011b      	lsls	r3, r3, #4
 800fc14:	4413      	add	r3, r2
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d1f2      	bne.n	800fc02 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	2b02      	cmp	r3, #2
 800fc20:	d101      	bne.n	800fc26 <inc_lock+0x8a>
 800fc22:	2300      	movs	r3, #0
 800fc24:	e040      	b.n	800fca8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	681a      	ldr	r2, [r3, #0]
 800fc2a:	4922      	ldr	r1, [pc, #136]	@ (800fcb4 <inc_lock+0x118>)
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	011b      	lsls	r3, r3, #4
 800fc30:	440b      	add	r3, r1
 800fc32:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	689a      	ldr	r2, [r3, #8]
 800fc38:	491e      	ldr	r1, [pc, #120]	@ (800fcb4 <inc_lock+0x118>)
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	011b      	lsls	r3, r3, #4
 800fc3e:	440b      	add	r3, r1
 800fc40:	3304      	adds	r3, #4
 800fc42:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	695a      	ldr	r2, [r3, #20]
 800fc48:	491a      	ldr	r1, [pc, #104]	@ (800fcb4 <inc_lock+0x118>)
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	011b      	lsls	r3, r3, #4
 800fc4e:	440b      	add	r3, r1
 800fc50:	3308      	adds	r3, #8
 800fc52:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800fc54:	4a17      	ldr	r2, [pc, #92]	@ (800fcb4 <inc_lock+0x118>)
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	011b      	lsls	r3, r3, #4
 800fc5a:	4413      	add	r3, r2
 800fc5c:	330c      	adds	r3, #12
 800fc5e:	2200      	movs	r2, #0
 800fc60:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d009      	beq.n	800fc7c <inc_lock+0xe0>
 800fc68:	4a12      	ldr	r2, [pc, #72]	@ (800fcb4 <inc_lock+0x118>)
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	011b      	lsls	r3, r3, #4
 800fc6e:	4413      	add	r3, r2
 800fc70:	330c      	adds	r3, #12
 800fc72:	881b      	ldrh	r3, [r3, #0]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d001      	beq.n	800fc7c <inc_lock+0xe0>
 800fc78:	2300      	movs	r3, #0
 800fc7a:	e015      	b.n	800fca8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800fc7c:	683b      	ldr	r3, [r7, #0]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d108      	bne.n	800fc94 <inc_lock+0xf8>
 800fc82:	4a0c      	ldr	r2, [pc, #48]	@ (800fcb4 <inc_lock+0x118>)
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	011b      	lsls	r3, r3, #4
 800fc88:	4413      	add	r3, r2
 800fc8a:	330c      	adds	r3, #12
 800fc8c:	881b      	ldrh	r3, [r3, #0]
 800fc8e:	3301      	adds	r3, #1
 800fc90:	b29a      	uxth	r2, r3
 800fc92:	e001      	b.n	800fc98 <inc_lock+0xfc>
 800fc94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800fc98:	4906      	ldr	r1, [pc, #24]	@ (800fcb4 <inc_lock+0x118>)
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	011b      	lsls	r3, r3, #4
 800fc9e:	440b      	add	r3, r1
 800fca0:	330c      	adds	r3, #12
 800fca2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	3301      	adds	r3, #1
}
 800fca8:	4618      	mov	r0, r3
 800fcaa:	3714      	adds	r7, #20
 800fcac:	46bd      	mov	sp, r7
 800fcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb2:	4770      	bx	lr
 800fcb4:	24002adc 	.word	0x24002adc

0800fcb8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800fcb8:	b480      	push	{r7}
 800fcba:	b085      	sub	sp, #20
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	3b01      	subs	r3, #1
 800fcc4:	607b      	str	r3, [r7, #4]
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	2b01      	cmp	r3, #1
 800fcca:	d825      	bhi.n	800fd18 <dec_lock+0x60>
		n = Files[i].ctr;
 800fccc:	4a17      	ldr	r2, [pc, #92]	@ (800fd2c <dec_lock+0x74>)
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	011b      	lsls	r3, r3, #4
 800fcd2:	4413      	add	r3, r2
 800fcd4:	330c      	adds	r3, #12
 800fcd6:	881b      	ldrh	r3, [r3, #0]
 800fcd8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800fcda:	89fb      	ldrh	r3, [r7, #14]
 800fcdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fce0:	d101      	bne.n	800fce6 <dec_lock+0x2e>
 800fce2:	2300      	movs	r3, #0
 800fce4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800fce6:	89fb      	ldrh	r3, [r7, #14]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d002      	beq.n	800fcf2 <dec_lock+0x3a>
 800fcec:	89fb      	ldrh	r3, [r7, #14]
 800fcee:	3b01      	subs	r3, #1
 800fcf0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800fcf2:	4a0e      	ldr	r2, [pc, #56]	@ (800fd2c <dec_lock+0x74>)
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	011b      	lsls	r3, r3, #4
 800fcf8:	4413      	add	r3, r2
 800fcfa:	330c      	adds	r3, #12
 800fcfc:	89fa      	ldrh	r2, [r7, #14]
 800fcfe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800fd00:	89fb      	ldrh	r3, [r7, #14]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d105      	bne.n	800fd12 <dec_lock+0x5a>
 800fd06:	4a09      	ldr	r2, [pc, #36]	@ (800fd2c <dec_lock+0x74>)
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	011b      	lsls	r3, r3, #4
 800fd0c:	4413      	add	r3, r2
 800fd0e:	2200      	movs	r2, #0
 800fd10:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800fd12:	2300      	movs	r3, #0
 800fd14:	737b      	strb	r3, [r7, #13]
 800fd16:	e001      	b.n	800fd1c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800fd18:	2302      	movs	r3, #2
 800fd1a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800fd1c:	7b7b      	ldrb	r3, [r7, #13]
}
 800fd1e:	4618      	mov	r0, r3
 800fd20:	3714      	adds	r7, #20
 800fd22:	46bd      	mov	sp, r7
 800fd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd28:	4770      	bx	lr
 800fd2a:	bf00      	nop
 800fd2c:	24002adc 	.word	0x24002adc

0800fd30 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800fd30:	b480      	push	{r7}
 800fd32:	b085      	sub	sp, #20
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800fd38:	2300      	movs	r3, #0
 800fd3a:	60fb      	str	r3, [r7, #12]
 800fd3c:	e010      	b.n	800fd60 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800fd3e:	4a0d      	ldr	r2, [pc, #52]	@ (800fd74 <clear_lock+0x44>)
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	011b      	lsls	r3, r3, #4
 800fd44:	4413      	add	r3, r2
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	687a      	ldr	r2, [r7, #4]
 800fd4a:	429a      	cmp	r2, r3
 800fd4c:	d105      	bne.n	800fd5a <clear_lock+0x2a>
 800fd4e:	4a09      	ldr	r2, [pc, #36]	@ (800fd74 <clear_lock+0x44>)
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	011b      	lsls	r3, r3, #4
 800fd54:	4413      	add	r3, r2
 800fd56:	2200      	movs	r2, #0
 800fd58:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	3301      	adds	r3, #1
 800fd5e:	60fb      	str	r3, [r7, #12]
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	2b01      	cmp	r3, #1
 800fd64:	d9eb      	bls.n	800fd3e <clear_lock+0xe>
	}
}
 800fd66:	bf00      	nop
 800fd68:	bf00      	nop
 800fd6a:	3714      	adds	r7, #20
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd72:	4770      	bx	lr
 800fd74:	24002adc 	.word	0x24002adc

0800fd78 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b086      	sub	sp, #24
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800fd80:	2300      	movs	r3, #0
 800fd82:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	78db      	ldrb	r3, [r3, #3]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d034      	beq.n	800fdf6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd90:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	7858      	ldrb	r0, [r3, #1]
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800fd9c:	2301      	movs	r3, #1
 800fd9e:	697a      	ldr	r2, [r7, #20]
 800fda0:	f7ff fd40 	bl	800f824 <disk_write>
 800fda4:	4603      	mov	r3, r0
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d002      	beq.n	800fdb0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800fdaa:	2301      	movs	r3, #1
 800fdac:	73fb      	strb	r3, [r7, #15]
 800fdae:	e022      	b.n	800fdf6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fdba:	697a      	ldr	r2, [r7, #20]
 800fdbc:	1ad2      	subs	r2, r2, r3
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdc2:	429a      	cmp	r2, r3
 800fdc4:	d217      	bcs.n	800fdf6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	789b      	ldrb	r3, [r3, #2]
 800fdca:	613b      	str	r3, [r7, #16]
 800fdcc:	e010      	b.n	800fdf0 <sync_window+0x78>
					wsect += fs->fsize;
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdd2:	697a      	ldr	r2, [r7, #20]
 800fdd4:	4413      	add	r3, r2
 800fdd6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	7858      	ldrb	r0, [r3, #1]
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800fde2:	2301      	movs	r3, #1
 800fde4:	697a      	ldr	r2, [r7, #20]
 800fde6:	f7ff fd1d 	bl	800f824 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fdea:	693b      	ldr	r3, [r7, #16]
 800fdec:	3b01      	subs	r3, #1
 800fdee:	613b      	str	r3, [r7, #16]
 800fdf0:	693b      	ldr	r3, [r7, #16]
 800fdf2:	2b01      	cmp	r3, #1
 800fdf4:	d8eb      	bhi.n	800fdce <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800fdf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	3718      	adds	r7, #24
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	bd80      	pop	{r7, pc}

0800fe00 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800fe00:	b580      	push	{r7, lr}
 800fe02:	b084      	sub	sp, #16
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	6078      	str	r0, [r7, #4]
 800fe08:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe12:	683a      	ldr	r2, [r7, #0]
 800fe14:	429a      	cmp	r2, r3
 800fe16:	d01b      	beq.n	800fe50 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800fe18:	6878      	ldr	r0, [r7, #4]
 800fe1a:	f7ff ffad 	bl	800fd78 <sync_window>
 800fe1e:	4603      	mov	r3, r0
 800fe20:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800fe22:	7bfb      	ldrb	r3, [r7, #15]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d113      	bne.n	800fe50 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	7858      	ldrb	r0, [r3, #1]
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800fe32:	2301      	movs	r3, #1
 800fe34:	683a      	ldr	r2, [r7, #0]
 800fe36:	f7ff fcd5 	bl	800f7e4 <disk_read>
 800fe3a:	4603      	mov	r3, r0
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d004      	beq.n	800fe4a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800fe40:	f04f 33ff 	mov.w	r3, #4294967295
 800fe44:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800fe46:	2301      	movs	r3, #1
 800fe48:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	683a      	ldr	r2, [r7, #0]
 800fe4e:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
	return res;
 800fe50:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe52:	4618      	mov	r0, r3
 800fe54:	3710      	adds	r7, #16
 800fe56:	46bd      	mov	sp, r7
 800fe58:	bd80      	pop	{r7, pc}
	...

0800fe5c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b084      	sub	sp, #16
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800fe64:	6878      	ldr	r0, [r7, #4]
 800fe66:	f7ff ff87 	bl	800fd78 <sync_window>
 800fe6a:	4603      	mov	r3, r0
 800fe6c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fe6e:	7bfb      	ldrb	r3, [r7, #15]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d159      	bne.n	800ff28 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	781b      	ldrb	r3, [r3, #0]
 800fe78:	2b03      	cmp	r3, #3
 800fe7a:	d149      	bne.n	800ff10 <sync_fs+0xb4>
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	791b      	ldrb	r3, [r3, #4]
 800fe80:	2b01      	cmp	r3, #1
 800fe82:	d145      	bne.n	800ff10 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	899b      	ldrh	r3, [r3, #12]
 800fe8e:	461a      	mov	r2, r3
 800fe90:	2100      	movs	r1, #0
 800fe92:	f7ff fda8 	bl	800f9e6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	333c      	adds	r3, #60	@ 0x3c
 800fe9a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800fe9e:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800fea2:	4618      	mov	r0, r3
 800fea4:	f7ff fd37 	bl	800f916 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	333c      	adds	r3, #60	@ 0x3c
 800feac:	4921      	ldr	r1, [pc, #132]	@ (800ff34 <sync_fs+0xd8>)
 800feae:	4618      	mov	r0, r3
 800feb0:	f7ff fd4c 	bl	800f94c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	333c      	adds	r3, #60	@ 0x3c
 800feb8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800febc:	491e      	ldr	r1, [pc, #120]	@ (800ff38 <sync_fs+0xdc>)
 800febe:	4618      	mov	r0, r3
 800fec0:	f7ff fd44 	bl	800f94c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	333c      	adds	r3, #60	@ 0x3c
 800fec8:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	699b      	ldr	r3, [r3, #24]
 800fed0:	4619      	mov	r1, r3
 800fed2:	4610      	mov	r0, r2
 800fed4:	f7ff fd3a 	bl	800f94c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	333c      	adds	r3, #60	@ 0x3c
 800fedc:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	695b      	ldr	r3, [r3, #20]
 800fee4:	4619      	mov	r1, r3
 800fee6:	4610      	mov	r0, r2
 800fee8:	f7ff fd30 	bl	800f94c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fef0:	1c5a      	adds	r2, r3, #1
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	639a      	str	r2, [r3, #56]	@ 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	7858      	ldrb	r0, [r3, #1]
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ff04:	2301      	movs	r3, #1
 800ff06:	f7ff fc8d 	bl	800f824 <disk_write>
			fs->fsi_flag = 0;
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	785b      	ldrb	r3, [r3, #1]
 800ff14:	2200      	movs	r2, #0
 800ff16:	2100      	movs	r1, #0
 800ff18:	4618      	mov	r0, r3
 800ff1a:	f7ff fca3 	bl	800f864 <disk_ioctl>
 800ff1e:	4603      	mov	r3, r0
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d001      	beq.n	800ff28 <sync_fs+0xcc>
 800ff24:	2301      	movs	r3, #1
 800ff26:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ff28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	3710      	adds	r7, #16
 800ff2e:	46bd      	mov	sp, r7
 800ff30:	bd80      	pop	{r7, pc}
 800ff32:	bf00      	nop
 800ff34:	41615252 	.word	0x41615252
 800ff38:	61417272 	.word	0x61417272

0800ff3c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ff3c:	b480      	push	{r7}
 800ff3e:	b083      	sub	sp, #12
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
 800ff44:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ff46:	683b      	ldr	r3, [r7, #0]
 800ff48:	3b02      	subs	r3, #2
 800ff4a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	6a1b      	ldr	r3, [r3, #32]
 800ff50:	3b02      	subs	r3, #2
 800ff52:	683a      	ldr	r2, [r7, #0]
 800ff54:	429a      	cmp	r2, r3
 800ff56:	d301      	bcc.n	800ff5c <clust2sect+0x20>
 800ff58:	2300      	movs	r3, #0
 800ff5a:	e008      	b.n	800ff6e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	895b      	ldrh	r3, [r3, #10]
 800ff60:	461a      	mov	r2, r3
 800ff62:	683b      	ldr	r3, [r7, #0]
 800ff64:	fb03 f202 	mul.w	r2, r3, r2
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ff6c:	4413      	add	r3, r2
}
 800ff6e:	4618      	mov	r0, r3
 800ff70:	370c      	adds	r7, #12
 800ff72:	46bd      	mov	sp, r7
 800ff74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff78:	4770      	bx	lr

0800ff7a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ff7a:	b580      	push	{r7, lr}
 800ff7c:	b086      	sub	sp, #24
 800ff7e:	af00      	add	r7, sp, #0
 800ff80:	6078      	str	r0, [r7, #4]
 800ff82:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ff8a:	683b      	ldr	r3, [r7, #0]
 800ff8c:	2b01      	cmp	r3, #1
 800ff8e:	d904      	bls.n	800ff9a <get_fat+0x20>
 800ff90:	693b      	ldr	r3, [r7, #16]
 800ff92:	6a1b      	ldr	r3, [r3, #32]
 800ff94:	683a      	ldr	r2, [r7, #0]
 800ff96:	429a      	cmp	r2, r3
 800ff98:	d302      	bcc.n	800ffa0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ff9a:	2301      	movs	r3, #1
 800ff9c:	617b      	str	r3, [r7, #20]
 800ff9e:	e0ba      	b.n	8010116 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ffa0:	f04f 33ff 	mov.w	r3, #4294967295
 800ffa4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ffa6:	693b      	ldr	r3, [r7, #16]
 800ffa8:	781b      	ldrb	r3, [r3, #0]
 800ffaa:	2b03      	cmp	r3, #3
 800ffac:	f000 8082 	beq.w	80100b4 <get_fat+0x13a>
 800ffb0:	2b03      	cmp	r3, #3
 800ffb2:	f300 80a6 	bgt.w	8010102 <get_fat+0x188>
 800ffb6:	2b01      	cmp	r3, #1
 800ffb8:	d002      	beq.n	800ffc0 <get_fat+0x46>
 800ffba:	2b02      	cmp	r3, #2
 800ffbc:	d055      	beq.n	801006a <get_fat+0xf0>
 800ffbe:	e0a0      	b.n	8010102 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ffc0:	683b      	ldr	r3, [r7, #0]
 800ffc2:	60fb      	str	r3, [r7, #12]
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	085b      	lsrs	r3, r3, #1
 800ffc8:	68fa      	ldr	r2, [r7, #12]
 800ffca:	4413      	add	r3, r2
 800ffcc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ffce:	693b      	ldr	r3, [r7, #16]
 800ffd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ffd2:	693b      	ldr	r3, [r7, #16]
 800ffd4:	899b      	ldrh	r3, [r3, #12]
 800ffd6:	4619      	mov	r1, r3
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	fbb3 f3f1 	udiv	r3, r3, r1
 800ffde:	4413      	add	r3, r2
 800ffe0:	4619      	mov	r1, r3
 800ffe2:	6938      	ldr	r0, [r7, #16]
 800ffe4:	f7ff ff0c 	bl	800fe00 <move_window>
 800ffe8:	4603      	mov	r3, r0
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	f040 808c 	bne.w	8010108 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	1c5a      	adds	r2, r3, #1
 800fff4:	60fa      	str	r2, [r7, #12]
 800fff6:	693a      	ldr	r2, [r7, #16]
 800fff8:	8992      	ldrh	r2, [r2, #12]
 800fffa:	fbb3 f1f2 	udiv	r1, r3, r2
 800fffe:	fb01 f202 	mul.w	r2, r1, r2
 8010002:	1a9b      	subs	r3, r3, r2
 8010004:	693a      	ldr	r2, [r7, #16]
 8010006:	4413      	add	r3, r2
 8010008:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801000c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801000e:	693b      	ldr	r3, [r7, #16]
 8010010:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010012:	693b      	ldr	r3, [r7, #16]
 8010014:	899b      	ldrh	r3, [r3, #12]
 8010016:	4619      	mov	r1, r3
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	fbb3 f3f1 	udiv	r3, r3, r1
 801001e:	4413      	add	r3, r2
 8010020:	4619      	mov	r1, r3
 8010022:	6938      	ldr	r0, [r7, #16]
 8010024:	f7ff feec 	bl	800fe00 <move_window>
 8010028:	4603      	mov	r3, r0
 801002a:	2b00      	cmp	r3, #0
 801002c:	d16e      	bne.n	801010c <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 801002e:	693b      	ldr	r3, [r7, #16]
 8010030:	899b      	ldrh	r3, [r3, #12]
 8010032:	461a      	mov	r2, r3
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	fbb3 f1f2 	udiv	r1, r3, r2
 801003a:	fb01 f202 	mul.w	r2, r1, r2
 801003e:	1a9b      	subs	r3, r3, r2
 8010040:	693a      	ldr	r2, [r7, #16]
 8010042:	4413      	add	r3, r2
 8010044:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010048:	021b      	lsls	r3, r3, #8
 801004a:	68ba      	ldr	r2, [r7, #8]
 801004c:	4313      	orrs	r3, r2
 801004e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010050:	683b      	ldr	r3, [r7, #0]
 8010052:	f003 0301 	and.w	r3, r3, #1
 8010056:	2b00      	cmp	r3, #0
 8010058:	d002      	beq.n	8010060 <get_fat+0xe6>
 801005a:	68bb      	ldr	r3, [r7, #8]
 801005c:	091b      	lsrs	r3, r3, #4
 801005e:	e002      	b.n	8010066 <get_fat+0xec>
 8010060:	68bb      	ldr	r3, [r7, #8]
 8010062:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010066:	617b      	str	r3, [r7, #20]
			break;
 8010068:	e055      	b.n	8010116 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801006a:	693b      	ldr	r3, [r7, #16]
 801006c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801006e:	693b      	ldr	r3, [r7, #16]
 8010070:	899b      	ldrh	r3, [r3, #12]
 8010072:	085b      	lsrs	r3, r3, #1
 8010074:	b29b      	uxth	r3, r3
 8010076:	4619      	mov	r1, r3
 8010078:	683b      	ldr	r3, [r7, #0]
 801007a:	fbb3 f3f1 	udiv	r3, r3, r1
 801007e:	4413      	add	r3, r2
 8010080:	4619      	mov	r1, r3
 8010082:	6938      	ldr	r0, [r7, #16]
 8010084:	f7ff febc 	bl	800fe00 <move_window>
 8010088:	4603      	mov	r3, r0
 801008a:	2b00      	cmp	r3, #0
 801008c:	d140      	bne.n	8010110 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801008e:	693b      	ldr	r3, [r7, #16]
 8010090:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8010094:	683b      	ldr	r3, [r7, #0]
 8010096:	005b      	lsls	r3, r3, #1
 8010098:	693a      	ldr	r2, [r7, #16]
 801009a:	8992      	ldrh	r2, [r2, #12]
 801009c:	fbb3 f0f2 	udiv	r0, r3, r2
 80100a0:	fb00 f202 	mul.w	r2, r0, r2
 80100a4:	1a9b      	subs	r3, r3, r2
 80100a6:	440b      	add	r3, r1
 80100a8:	4618      	mov	r0, r3
 80100aa:	f7ff fbf9 	bl	800f8a0 <ld_word>
 80100ae:	4603      	mov	r3, r0
 80100b0:	617b      	str	r3, [r7, #20]
			break;
 80100b2:	e030      	b.n	8010116 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80100b4:	693b      	ldr	r3, [r7, #16]
 80100b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80100b8:	693b      	ldr	r3, [r7, #16]
 80100ba:	899b      	ldrh	r3, [r3, #12]
 80100bc:	089b      	lsrs	r3, r3, #2
 80100be:	b29b      	uxth	r3, r3
 80100c0:	4619      	mov	r1, r3
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	fbb3 f3f1 	udiv	r3, r3, r1
 80100c8:	4413      	add	r3, r2
 80100ca:	4619      	mov	r1, r3
 80100cc:	6938      	ldr	r0, [r7, #16]
 80100ce:	f7ff fe97 	bl	800fe00 <move_window>
 80100d2:	4603      	mov	r3, r0
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d11d      	bne.n	8010114 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80100d8:	693b      	ldr	r3, [r7, #16]
 80100da:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80100de:	683b      	ldr	r3, [r7, #0]
 80100e0:	009b      	lsls	r3, r3, #2
 80100e2:	693a      	ldr	r2, [r7, #16]
 80100e4:	8992      	ldrh	r2, [r2, #12]
 80100e6:	fbb3 f0f2 	udiv	r0, r3, r2
 80100ea:	fb00 f202 	mul.w	r2, r0, r2
 80100ee:	1a9b      	subs	r3, r3, r2
 80100f0:	440b      	add	r3, r1
 80100f2:	4618      	mov	r0, r3
 80100f4:	f7ff fbec 	bl	800f8d0 <ld_dword>
 80100f8:	4603      	mov	r3, r0
 80100fa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80100fe:	617b      	str	r3, [r7, #20]
			break;
 8010100:	e009      	b.n	8010116 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010102:	2301      	movs	r3, #1
 8010104:	617b      	str	r3, [r7, #20]
 8010106:	e006      	b.n	8010116 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010108:	bf00      	nop
 801010a:	e004      	b.n	8010116 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801010c:	bf00      	nop
 801010e:	e002      	b.n	8010116 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010110:	bf00      	nop
 8010112:	e000      	b.n	8010116 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010114:	bf00      	nop
		}
	}

	return val;
 8010116:	697b      	ldr	r3, [r7, #20]
}
 8010118:	4618      	mov	r0, r3
 801011a:	3718      	adds	r7, #24
 801011c:	46bd      	mov	sp, r7
 801011e:	bd80      	pop	{r7, pc}

08010120 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8010120:	b590      	push	{r4, r7, lr}
 8010122:	b089      	sub	sp, #36	@ 0x24
 8010124:	af00      	add	r7, sp, #0
 8010126:	60f8      	str	r0, [r7, #12]
 8010128:	60b9      	str	r1, [r7, #8]
 801012a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801012c:	2302      	movs	r3, #2
 801012e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010130:	68bb      	ldr	r3, [r7, #8]
 8010132:	2b01      	cmp	r3, #1
 8010134:	f240 8109 	bls.w	801034a <put_fat+0x22a>
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	6a1b      	ldr	r3, [r3, #32]
 801013c:	68ba      	ldr	r2, [r7, #8]
 801013e:	429a      	cmp	r2, r3
 8010140:	f080 8103 	bcs.w	801034a <put_fat+0x22a>
		switch (fs->fs_type) {
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	781b      	ldrb	r3, [r3, #0]
 8010148:	2b03      	cmp	r3, #3
 801014a:	f000 80b6 	beq.w	80102ba <put_fat+0x19a>
 801014e:	2b03      	cmp	r3, #3
 8010150:	f300 80fb 	bgt.w	801034a <put_fat+0x22a>
 8010154:	2b01      	cmp	r3, #1
 8010156:	d003      	beq.n	8010160 <put_fat+0x40>
 8010158:	2b02      	cmp	r3, #2
 801015a:	f000 8083 	beq.w	8010264 <put_fat+0x144>
 801015e:	e0f4      	b.n	801034a <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8010160:	68bb      	ldr	r3, [r7, #8]
 8010162:	61bb      	str	r3, [r7, #24]
 8010164:	69bb      	ldr	r3, [r7, #24]
 8010166:	085b      	lsrs	r3, r3, #1
 8010168:	69ba      	ldr	r2, [r7, #24]
 801016a:	4413      	add	r3, r2
 801016c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	899b      	ldrh	r3, [r3, #12]
 8010176:	4619      	mov	r1, r3
 8010178:	69bb      	ldr	r3, [r7, #24]
 801017a:	fbb3 f3f1 	udiv	r3, r3, r1
 801017e:	4413      	add	r3, r2
 8010180:	4619      	mov	r1, r3
 8010182:	68f8      	ldr	r0, [r7, #12]
 8010184:	f7ff fe3c 	bl	800fe00 <move_window>
 8010188:	4603      	mov	r3, r0
 801018a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801018c:	7ffb      	ldrb	r3, [r7, #31]
 801018e:	2b00      	cmp	r3, #0
 8010190:	f040 80d4 	bne.w	801033c <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 801019a:	69bb      	ldr	r3, [r7, #24]
 801019c:	1c5a      	adds	r2, r3, #1
 801019e:	61ba      	str	r2, [r7, #24]
 80101a0:	68fa      	ldr	r2, [r7, #12]
 80101a2:	8992      	ldrh	r2, [r2, #12]
 80101a4:	fbb3 f0f2 	udiv	r0, r3, r2
 80101a8:	fb00 f202 	mul.w	r2, r0, r2
 80101ac:	1a9b      	subs	r3, r3, r2
 80101ae:	440b      	add	r3, r1
 80101b0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80101b2:	68bb      	ldr	r3, [r7, #8]
 80101b4:	f003 0301 	and.w	r3, r3, #1
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d00d      	beq.n	80101d8 <put_fat+0xb8>
 80101bc:	697b      	ldr	r3, [r7, #20]
 80101be:	781b      	ldrb	r3, [r3, #0]
 80101c0:	b25b      	sxtb	r3, r3
 80101c2:	f003 030f 	and.w	r3, r3, #15
 80101c6:	b25a      	sxtb	r2, r3
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	b2db      	uxtb	r3, r3
 80101cc:	011b      	lsls	r3, r3, #4
 80101ce:	b25b      	sxtb	r3, r3
 80101d0:	4313      	orrs	r3, r2
 80101d2:	b25b      	sxtb	r3, r3
 80101d4:	b2db      	uxtb	r3, r3
 80101d6:	e001      	b.n	80101dc <put_fat+0xbc>
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	b2db      	uxtb	r3, r3
 80101dc:	697a      	ldr	r2, [r7, #20]
 80101de:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	2201      	movs	r2, #1
 80101e4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	899b      	ldrh	r3, [r3, #12]
 80101ee:	4619      	mov	r1, r3
 80101f0:	69bb      	ldr	r3, [r7, #24]
 80101f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80101f6:	4413      	add	r3, r2
 80101f8:	4619      	mov	r1, r3
 80101fa:	68f8      	ldr	r0, [r7, #12]
 80101fc:	f7ff fe00 	bl	800fe00 <move_window>
 8010200:	4603      	mov	r3, r0
 8010202:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010204:	7ffb      	ldrb	r3, [r7, #31]
 8010206:	2b00      	cmp	r3, #0
 8010208:	f040 809a 	bne.w	8010340 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	899b      	ldrh	r3, [r3, #12]
 8010216:	461a      	mov	r2, r3
 8010218:	69bb      	ldr	r3, [r7, #24]
 801021a:	fbb3 f0f2 	udiv	r0, r3, r2
 801021e:	fb00 f202 	mul.w	r2, r0, r2
 8010222:	1a9b      	subs	r3, r3, r2
 8010224:	440b      	add	r3, r1
 8010226:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010228:	68bb      	ldr	r3, [r7, #8]
 801022a:	f003 0301 	and.w	r3, r3, #1
 801022e:	2b00      	cmp	r3, #0
 8010230:	d003      	beq.n	801023a <put_fat+0x11a>
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	091b      	lsrs	r3, r3, #4
 8010236:	b2db      	uxtb	r3, r3
 8010238:	e00e      	b.n	8010258 <put_fat+0x138>
 801023a:	697b      	ldr	r3, [r7, #20]
 801023c:	781b      	ldrb	r3, [r3, #0]
 801023e:	b25b      	sxtb	r3, r3
 8010240:	f023 030f 	bic.w	r3, r3, #15
 8010244:	b25a      	sxtb	r2, r3
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	0a1b      	lsrs	r3, r3, #8
 801024a:	b25b      	sxtb	r3, r3
 801024c:	f003 030f 	and.w	r3, r3, #15
 8010250:	b25b      	sxtb	r3, r3
 8010252:	4313      	orrs	r3, r2
 8010254:	b25b      	sxtb	r3, r3
 8010256:	b2db      	uxtb	r3, r3
 8010258:	697a      	ldr	r2, [r7, #20]
 801025a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	2201      	movs	r2, #1
 8010260:	70da      	strb	r2, [r3, #3]
			break;
 8010262:	e072      	b.n	801034a <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	899b      	ldrh	r3, [r3, #12]
 801026c:	085b      	lsrs	r3, r3, #1
 801026e:	b29b      	uxth	r3, r3
 8010270:	4619      	mov	r1, r3
 8010272:	68bb      	ldr	r3, [r7, #8]
 8010274:	fbb3 f3f1 	udiv	r3, r3, r1
 8010278:	4413      	add	r3, r2
 801027a:	4619      	mov	r1, r3
 801027c:	68f8      	ldr	r0, [r7, #12]
 801027e:	f7ff fdbf 	bl	800fe00 <move_window>
 8010282:	4603      	mov	r3, r0
 8010284:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010286:	7ffb      	ldrb	r3, [r7, #31]
 8010288:	2b00      	cmp	r3, #0
 801028a:	d15b      	bne.n	8010344 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8010292:	68bb      	ldr	r3, [r7, #8]
 8010294:	005b      	lsls	r3, r3, #1
 8010296:	68fa      	ldr	r2, [r7, #12]
 8010298:	8992      	ldrh	r2, [r2, #12]
 801029a:	fbb3 f0f2 	udiv	r0, r3, r2
 801029e:	fb00 f202 	mul.w	r2, r0, r2
 80102a2:	1a9b      	subs	r3, r3, r2
 80102a4:	440b      	add	r3, r1
 80102a6:	687a      	ldr	r2, [r7, #4]
 80102a8:	b292      	uxth	r2, r2
 80102aa:	4611      	mov	r1, r2
 80102ac:	4618      	mov	r0, r3
 80102ae:	f7ff fb32 	bl	800f916 <st_word>
			fs->wflag = 1;
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	2201      	movs	r2, #1
 80102b6:	70da      	strb	r2, [r3, #3]
			break;
 80102b8:	e047      	b.n	801034a <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	899b      	ldrh	r3, [r3, #12]
 80102c2:	089b      	lsrs	r3, r3, #2
 80102c4:	b29b      	uxth	r3, r3
 80102c6:	4619      	mov	r1, r3
 80102c8:	68bb      	ldr	r3, [r7, #8]
 80102ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80102ce:	4413      	add	r3, r2
 80102d0:	4619      	mov	r1, r3
 80102d2:	68f8      	ldr	r0, [r7, #12]
 80102d4:	f7ff fd94 	bl	800fe00 <move_window>
 80102d8:	4603      	mov	r3, r0
 80102da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80102dc:	7ffb      	ldrb	r3, [r7, #31]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d132      	bne.n	8010348 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80102ee:	68bb      	ldr	r3, [r7, #8]
 80102f0:	009b      	lsls	r3, r3, #2
 80102f2:	68fa      	ldr	r2, [r7, #12]
 80102f4:	8992      	ldrh	r2, [r2, #12]
 80102f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80102fa:	fb00 f202 	mul.w	r2, r0, r2
 80102fe:	1a9b      	subs	r3, r3, r2
 8010300:	440b      	add	r3, r1
 8010302:	4618      	mov	r0, r3
 8010304:	f7ff fae4 	bl	800f8d0 <ld_dword>
 8010308:	4603      	mov	r3, r0
 801030a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 801030e:	4323      	orrs	r3, r4
 8010310:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8010318:	68bb      	ldr	r3, [r7, #8]
 801031a:	009b      	lsls	r3, r3, #2
 801031c:	68fa      	ldr	r2, [r7, #12]
 801031e:	8992      	ldrh	r2, [r2, #12]
 8010320:	fbb3 f0f2 	udiv	r0, r3, r2
 8010324:	fb00 f202 	mul.w	r2, r0, r2
 8010328:	1a9b      	subs	r3, r3, r2
 801032a:	440b      	add	r3, r1
 801032c:	6879      	ldr	r1, [r7, #4]
 801032e:	4618      	mov	r0, r3
 8010330:	f7ff fb0c 	bl	800f94c <st_dword>
			fs->wflag = 1;
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	2201      	movs	r2, #1
 8010338:	70da      	strb	r2, [r3, #3]
			break;
 801033a:	e006      	b.n	801034a <put_fat+0x22a>
			if (res != FR_OK) break;
 801033c:	bf00      	nop
 801033e:	e004      	b.n	801034a <put_fat+0x22a>
			if (res != FR_OK) break;
 8010340:	bf00      	nop
 8010342:	e002      	b.n	801034a <put_fat+0x22a>
			if (res != FR_OK) break;
 8010344:	bf00      	nop
 8010346:	e000      	b.n	801034a <put_fat+0x22a>
			if (res != FR_OK) break;
 8010348:	bf00      	nop
		}
	}
	return res;
 801034a:	7ffb      	ldrb	r3, [r7, #31]
}
 801034c:	4618      	mov	r0, r3
 801034e:	3724      	adds	r7, #36	@ 0x24
 8010350:	46bd      	mov	sp, r7
 8010352:	bd90      	pop	{r4, r7, pc}

08010354 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8010354:	b580      	push	{r7, lr}
 8010356:	b088      	sub	sp, #32
 8010358:	af00      	add	r7, sp, #0
 801035a:	60f8      	str	r0, [r7, #12]
 801035c:	60b9      	str	r1, [r7, #8]
 801035e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8010360:	2300      	movs	r3, #0
 8010362:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801036a:	68bb      	ldr	r3, [r7, #8]
 801036c:	2b01      	cmp	r3, #1
 801036e:	d904      	bls.n	801037a <remove_chain+0x26>
 8010370:	69bb      	ldr	r3, [r7, #24]
 8010372:	6a1b      	ldr	r3, [r3, #32]
 8010374:	68ba      	ldr	r2, [r7, #8]
 8010376:	429a      	cmp	r2, r3
 8010378:	d301      	bcc.n	801037e <remove_chain+0x2a>
 801037a:	2302      	movs	r3, #2
 801037c:	e04b      	b.n	8010416 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d00c      	beq.n	801039e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8010384:	f04f 32ff 	mov.w	r2, #4294967295
 8010388:	6879      	ldr	r1, [r7, #4]
 801038a:	69b8      	ldr	r0, [r7, #24]
 801038c:	f7ff fec8 	bl	8010120 <put_fat>
 8010390:	4603      	mov	r3, r0
 8010392:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8010394:	7ffb      	ldrb	r3, [r7, #31]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d001      	beq.n	801039e <remove_chain+0x4a>
 801039a:	7ffb      	ldrb	r3, [r7, #31]
 801039c:	e03b      	b.n	8010416 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801039e:	68b9      	ldr	r1, [r7, #8]
 80103a0:	68f8      	ldr	r0, [r7, #12]
 80103a2:	f7ff fdea 	bl	800ff7a <get_fat>
 80103a6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80103a8:	697b      	ldr	r3, [r7, #20]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d031      	beq.n	8010412 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80103ae:	697b      	ldr	r3, [r7, #20]
 80103b0:	2b01      	cmp	r3, #1
 80103b2:	d101      	bne.n	80103b8 <remove_chain+0x64>
 80103b4:	2302      	movs	r3, #2
 80103b6:	e02e      	b.n	8010416 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80103b8:	697b      	ldr	r3, [r7, #20]
 80103ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103be:	d101      	bne.n	80103c4 <remove_chain+0x70>
 80103c0:	2301      	movs	r3, #1
 80103c2:	e028      	b.n	8010416 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80103c4:	2200      	movs	r2, #0
 80103c6:	68b9      	ldr	r1, [r7, #8]
 80103c8:	69b8      	ldr	r0, [r7, #24]
 80103ca:	f7ff fea9 	bl	8010120 <put_fat>
 80103ce:	4603      	mov	r3, r0
 80103d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80103d2:	7ffb      	ldrb	r3, [r7, #31]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d001      	beq.n	80103dc <remove_chain+0x88>
 80103d8:	7ffb      	ldrb	r3, [r7, #31]
 80103da:	e01c      	b.n	8010416 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80103dc:	69bb      	ldr	r3, [r7, #24]
 80103de:	699a      	ldr	r2, [r3, #24]
 80103e0:	69bb      	ldr	r3, [r7, #24]
 80103e2:	6a1b      	ldr	r3, [r3, #32]
 80103e4:	3b02      	subs	r3, #2
 80103e6:	429a      	cmp	r2, r3
 80103e8:	d20b      	bcs.n	8010402 <remove_chain+0xae>
			fs->free_clst++;
 80103ea:	69bb      	ldr	r3, [r7, #24]
 80103ec:	699b      	ldr	r3, [r3, #24]
 80103ee:	1c5a      	adds	r2, r3, #1
 80103f0:	69bb      	ldr	r3, [r7, #24]
 80103f2:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80103f4:	69bb      	ldr	r3, [r7, #24]
 80103f6:	791b      	ldrb	r3, [r3, #4]
 80103f8:	f043 0301 	orr.w	r3, r3, #1
 80103fc:	b2da      	uxtb	r2, r3
 80103fe:	69bb      	ldr	r3, [r7, #24]
 8010400:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8010402:	697b      	ldr	r3, [r7, #20]
 8010404:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8010406:	69bb      	ldr	r3, [r7, #24]
 8010408:	6a1b      	ldr	r3, [r3, #32]
 801040a:	68ba      	ldr	r2, [r7, #8]
 801040c:	429a      	cmp	r2, r3
 801040e:	d3c6      	bcc.n	801039e <remove_chain+0x4a>
 8010410:	e000      	b.n	8010414 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8010412:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8010414:	2300      	movs	r3, #0
}
 8010416:	4618      	mov	r0, r3
 8010418:	3720      	adds	r7, #32
 801041a:	46bd      	mov	sp, r7
 801041c:	bd80      	pop	{r7, pc}

0801041e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801041e:	b580      	push	{r7, lr}
 8010420:	b088      	sub	sp, #32
 8010422:	af00      	add	r7, sp, #0
 8010424:	6078      	str	r0, [r7, #4]
 8010426:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801042e:	683b      	ldr	r3, [r7, #0]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d10d      	bne.n	8010450 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8010434:	693b      	ldr	r3, [r7, #16]
 8010436:	695b      	ldr	r3, [r3, #20]
 8010438:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801043a:	69bb      	ldr	r3, [r7, #24]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d004      	beq.n	801044a <create_chain+0x2c>
 8010440:	693b      	ldr	r3, [r7, #16]
 8010442:	6a1b      	ldr	r3, [r3, #32]
 8010444:	69ba      	ldr	r2, [r7, #24]
 8010446:	429a      	cmp	r2, r3
 8010448:	d31b      	bcc.n	8010482 <create_chain+0x64>
 801044a:	2301      	movs	r3, #1
 801044c:	61bb      	str	r3, [r7, #24]
 801044e:	e018      	b.n	8010482 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8010450:	6839      	ldr	r1, [r7, #0]
 8010452:	6878      	ldr	r0, [r7, #4]
 8010454:	f7ff fd91 	bl	800ff7a <get_fat>
 8010458:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	2b01      	cmp	r3, #1
 801045e:	d801      	bhi.n	8010464 <create_chain+0x46>
 8010460:	2301      	movs	r3, #1
 8010462:	e070      	b.n	8010546 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	f1b3 3fff 	cmp.w	r3, #4294967295
 801046a:	d101      	bne.n	8010470 <create_chain+0x52>
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	e06a      	b.n	8010546 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8010470:	693b      	ldr	r3, [r7, #16]
 8010472:	6a1b      	ldr	r3, [r3, #32]
 8010474:	68fa      	ldr	r2, [r7, #12]
 8010476:	429a      	cmp	r2, r3
 8010478:	d201      	bcs.n	801047e <create_chain+0x60>
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	e063      	b.n	8010546 <create_chain+0x128>
		scl = clst;
 801047e:	683b      	ldr	r3, [r7, #0]
 8010480:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8010482:	69bb      	ldr	r3, [r7, #24]
 8010484:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8010486:	69fb      	ldr	r3, [r7, #28]
 8010488:	3301      	adds	r3, #1
 801048a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801048c:	693b      	ldr	r3, [r7, #16]
 801048e:	6a1b      	ldr	r3, [r3, #32]
 8010490:	69fa      	ldr	r2, [r7, #28]
 8010492:	429a      	cmp	r2, r3
 8010494:	d307      	bcc.n	80104a6 <create_chain+0x88>
				ncl = 2;
 8010496:	2302      	movs	r3, #2
 8010498:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801049a:	69fa      	ldr	r2, [r7, #28]
 801049c:	69bb      	ldr	r3, [r7, #24]
 801049e:	429a      	cmp	r2, r3
 80104a0:	d901      	bls.n	80104a6 <create_chain+0x88>
 80104a2:	2300      	movs	r3, #0
 80104a4:	e04f      	b.n	8010546 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80104a6:	69f9      	ldr	r1, [r7, #28]
 80104a8:	6878      	ldr	r0, [r7, #4]
 80104aa:	f7ff fd66 	bl	800ff7a <get_fat>
 80104ae:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d00e      	beq.n	80104d4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	2b01      	cmp	r3, #1
 80104ba:	d003      	beq.n	80104c4 <create_chain+0xa6>
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104c2:	d101      	bne.n	80104c8 <create_chain+0xaa>
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	e03e      	b.n	8010546 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80104c8:	69fa      	ldr	r2, [r7, #28]
 80104ca:	69bb      	ldr	r3, [r7, #24]
 80104cc:	429a      	cmp	r2, r3
 80104ce:	d1da      	bne.n	8010486 <create_chain+0x68>
 80104d0:	2300      	movs	r3, #0
 80104d2:	e038      	b.n	8010546 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80104d4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80104d6:	f04f 32ff 	mov.w	r2, #4294967295
 80104da:	69f9      	ldr	r1, [r7, #28]
 80104dc:	6938      	ldr	r0, [r7, #16]
 80104de:	f7ff fe1f 	bl	8010120 <put_fat>
 80104e2:	4603      	mov	r3, r0
 80104e4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80104e6:	7dfb      	ldrb	r3, [r7, #23]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d109      	bne.n	8010500 <create_chain+0xe2>
 80104ec:	683b      	ldr	r3, [r7, #0]
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d006      	beq.n	8010500 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80104f2:	69fa      	ldr	r2, [r7, #28]
 80104f4:	6839      	ldr	r1, [r7, #0]
 80104f6:	6938      	ldr	r0, [r7, #16]
 80104f8:	f7ff fe12 	bl	8010120 <put_fat>
 80104fc:	4603      	mov	r3, r0
 80104fe:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010500:	7dfb      	ldrb	r3, [r7, #23]
 8010502:	2b00      	cmp	r3, #0
 8010504:	d116      	bne.n	8010534 <create_chain+0x116>
		fs->last_clst = ncl;
 8010506:	693b      	ldr	r3, [r7, #16]
 8010508:	69fa      	ldr	r2, [r7, #28]
 801050a:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801050c:	693b      	ldr	r3, [r7, #16]
 801050e:	699a      	ldr	r2, [r3, #24]
 8010510:	693b      	ldr	r3, [r7, #16]
 8010512:	6a1b      	ldr	r3, [r3, #32]
 8010514:	3b02      	subs	r3, #2
 8010516:	429a      	cmp	r2, r3
 8010518:	d804      	bhi.n	8010524 <create_chain+0x106>
 801051a:	693b      	ldr	r3, [r7, #16]
 801051c:	699b      	ldr	r3, [r3, #24]
 801051e:	1e5a      	subs	r2, r3, #1
 8010520:	693b      	ldr	r3, [r7, #16]
 8010522:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8010524:	693b      	ldr	r3, [r7, #16]
 8010526:	791b      	ldrb	r3, [r3, #4]
 8010528:	f043 0301 	orr.w	r3, r3, #1
 801052c:	b2da      	uxtb	r2, r3
 801052e:	693b      	ldr	r3, [r7, #16]
 8010530:	711a      	strb	r2, [r3, #4]
 8010532:	e007      	b.n	8010544 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8010534:	7dfb      	ldrb	r3, [r7, #23]
 8010536:	2b01      	cmp	r3, #1
 8010538:	d102      	bne.n	8010540 <create_chain+0x122>
 801053a:	f04f 33ff 	mov.w	r3, #4294967295
 801053e:	e000      	b.n	8010542 <create_chain+0x124>
 8010540:	2301      	movs	r3, #1
 8010542:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8010544:	69fb      	ldr	r3, [r7, #28]
}
 8010546:	4618      	mov	r0, r3
 8010548:	3720      	adds	r7, #32
 801054a:	46bd      	mov	sp, r7
 801054c:	bd80      	pop	{r7, pc}

0801054e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801054e:	b480      	push	{r7}
 8010550:	b087      	sub	sp, #28
 8010552:	af00      	add	r7, sp, #0
 8010554:	6078      	str	r0, [r7, #4]
 8010556:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010562:	3304      	adds	r3, #4
 8010564:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	899b      	ldrh	r3, [r3, #12]
 801056a:	461a      	mov	r2, r3
 801056c:	683b      	ldr	r3, [r7, #0]
 801056e:	fbb3 f3f2 	udiv	r3, r3, r2
 8010572:	68fa      	ldr	r2, [r7, #12]
 8010574:	8952      	ldrh	r2, [r2, #10]
 8010576:	fbb3 f3f2 	udiv	r3, r3, r2
 801057a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801057c:	693b      	ldr	r3, [r7, #16]
 801057e:	1d1a      	adds	r2, r3, #4
 8010580:	613a      	str	r2, [r7, #16]
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8010586:	68bb      	ldr	r3, [r7, #8]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d101      	bne.n	8010590 <clmt_clust+0x42>
 801058c:	2300      	movs	r3, #0
 801058e:	e010      	b.n	80105b2 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8010590:	697a      	ldr	r2, [r7, #20]
 8010592:	68bb      	ldr	r3, [r7, #8]
 8010594:	429a      	cmp	r2, r3
 8010596:	d307      	bcc.n	80105a8 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8010598:	697a      	ldr	r2, [r7, #20]
 801059a:	68bb      	ldr	r3, [r7, #8]
 801059c:	1ad3      	subs	r3, r2, r3
 801059e:	617b      	str	r3, [r7, #20]
 80105a0:	693b      	ldr	r3, [r7, #16]
 80105a2:	3304      	adds	r3, #4
 80105a4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80105a6:	e7e9      	b.n	801057c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80105a8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80105aa:	693b      	ldr	r3, [r7, #16]
 80105ac:	681a      	ldr	r2, [r3, #0]
 80105ae:	697b      	ldr	r3, [r7, #20]
 80105b0:	4413      	add	r3, r2
}
 80105b2:	4618      	mov	r0, r3
 80105b4:	371c      	adds	r7, #28
 80105b6:	46bd      	mov	sp, r7
 80105b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105bc:	4770      	bx	lr

080105be <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80105be:	b580      	push	{r7, lr}
 80105c0:	b086      	sub	sp, #24
 80105c2:	af00      	add	r7, sp, #0
 80105c4:	6078      	str	r0, [r7, #4]
 80105c6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80105ce:	683b      	ldr	r3, [r7, #0]
 80105d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80105d4:	d204      	bcs.n	80105e0 <dir_sdi+0x22>
 80105d6:	683b      	ldr	r3, [r7, #0]
 80105d8:	f003 031f 	and.w	r3, r3, #31
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d001      	beq.n	80105e4 <dir_sdi+0x26>
		return FR_INT_ERR;
 80105e0:	2302      	movs	r3, #2
 80105e2:	e071      	b.n	80106c8 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	683a      	ldr	r2, [r7, #0]
 80105e8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	689b      	ldr	r3, [r3, #8]
 80105ee:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80105f0:	697b      	ldr	r3, [r7, #20]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d106      	bne.n	8010604 <dir_sdi+0x46>
 80105f6:	693b      	ldr	r3, [r7, #16]
 80105f8:	781b      	ldrb	r3, [r3, #0]
 80105fa:	2b02      	cmp	r3, #2
 80105fc:	d902      	bls.n	8010604 <dir_sdi+0x46>
		clst = fs->dirbase;
 80105fe:	693b      	ldr	r3, [r7, #16]
 8010600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010602:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8010604:	697b      	ldr	r3, [r7, #20]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d10c      	bne.n	8010624 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801060a:	683b      	ldr	r3, [r7, #0]
 801060c:	095b      	lsrs	r3, r3, #5
 801060e:	693a      	ldr	r2, [r7, #16]
 8010610:	8912      	ldrh	r2, [r2, #8]
 8010612:	4293      	cmp	r3, r2
 8010614:	d301      	bcc.n	801061a <dir_sdi+0x5c>
 8010616:	2302      	movs	r3, #2
 8010618:	e056      	b.n	80106c8 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801061a:	693b      	ldr	r3, [r7, #16]
 801061c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	61da      	str	r2, [r3, #28]
 8010622:	e02d      	b.n	8010680 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8010624:	693b      	ldr	r3, [r7, #16]
 8010626:	895b      	ldrh	r3, [r3, #10]
 8010628:	461a      	mov	r2, r3
 801062a:	693b      	ldr	r3, [r7, #16]
 801062c:	899b      	ldrh	r3, [r3, #12]
 801062e:	fb02 f303 	mul.w	r3, r2, r3
 8010632:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010634:	e019      	b.n	801066a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	6979      	ldr	r1, [r7, #20]
 801063a:	4618      	mov	r0, r3
 801063c:	f7ff fc9d 	bl	800ff7a <get_fat>
 8010640:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010642:	697b      	ldr	r3, [r7, #20]
 8010644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010648:	d101      	bne.n	801064e <dir_sdi+0x90>
 801064a:	2301      	movs	r3, #1
 801064c:	e03c      	b.n	80106c8 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801064e:	697b      	ldr	r3, [r7, #20]
 8010650:	2b01      	cmp	r3, #1
 8010652:	d904      	bls.n	801065e <dir_sdi+0xa0>
 8010654:	693b      	ldr	r3, [r7, #16]
 8010656:	6a1b      	ldr	r3, [r3, #32]
 8010658:	697a      	ldr	r2, [r7, #20]
 801065a:	429a      	cmp	r2, r3
 801065c:	d301      	bcc.n	8010662 <dir_sdi+0xa4>
 801065e:	2302      	movs	r3, #2
 8010660:	e032      	b.n	80106c8 <dir_sdi+0x10a>
			ofs -= csz;
 8010662:	683a      	ldr	r2, [r7, #0]
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	1ad3      	subs	r3, r2, r3
 8010668:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801066a:	683a      	ldr	r2, [r7, #0]
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	429a      	cmp	r2, r3
 8010670:	d2e1      	bcs.n	8010636 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8010672:	6979      	ldr	r1, [r7, #20]
 8010674:	6938      	ldr	r0, [r7, #16]
 8010676:	f7ff fc61 	bl	800ff3c <clust2sect>
 801067a:	4602      	mov	r2, r0
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	697a      	ldr	r2, [r7, #20]
 8010684:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	69db      	ldr	r3, [r3, #28]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d101      	bne.n	8010692 <dir_sdi+0xd4>
 801068e:	2302      	movs	r3, #2
 8010690:	e01a      	b.n	80106c8 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	69da      	ldr	r2, [r3, #28]
 8010696:	693b      	ldr	r3, [r7, #16]
 8010698:	899b      	ldrh	r3, [r3, #12]
 801069a:	4619      	mov	r1, r3
 801069c:	683b      	ldr	r3, [r7, #0]
 801069e:	fbb3 f3f1 	udiv	r3, r3, r1
 80106a2:	441a      	add	r2, r3
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80106a8:	693b      	ldr	r3, [r7, #16]
 80106aa:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80106ae:	693b      	ldr	r3, [r7, #16]
 80106b0:	899b      	ldrh	r3, [r3, #12]
 80106b2:	461a      	mov	r2, r3
 80106b4:	683b      	ldr	r3, [r7, #0]
 80106b6:	fbb3 f0f2 	udiv	r0, r3, r2
 80106ba:	fb00 f202 	mul.w	r2, r0, r2
 80106be:	1a9b      	subs	r3, r3, r2
 80106c0:	18ca      	adds	r2, r1, r3
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80106c6:	2300      	movs	r3, #0
}
 80106c8:	4618      	mov	r0, r3
 80106ca:	3718      	adds	r7, #24
 80106cc:	46bd      	mov	sp, r7
 80106ce:	bd80      	pop	{r7, pc}

080106d0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b086      	sub	sp, #24
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
 80106d8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	695b      	ldr	r3, [r3, #20]
 80106e4:	3320      	adds	r3, #32
 80106e6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	69db      	ldr	r3, [r3, #28]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d003      	beq.n	80106f8 <dir_next+0x28>
 80106f0:	68bb      	ldr	r3, [r7, #8]
 80106f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80106f6:	d301      	bcc.n	80106fc <dir_next+0x2c>
 80106f8:	2304      	movs	r3, #4
 80106fa:	e0bb      	b.n	8010874 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	899b      	ldrh	r3, [r3, #12]
 8010700:	461a      	mov	r2, r3
 8010702:	68bb      	ldr	r3, [r7, #8]
 8010704:	fbb3 f1f2 	udiv	r1, r3, r2
 8010708:	fb01 f202 	mul.w	r2, r1, r2
 801070c:	1a9b      	subs	r3, r3, r2
 801070e:	2b00      	cmp	r3, #0
 8010710:	f040 809d 	bne.w	801084e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	69db      	ldr	r3, [r3, #28]
 8010718:	1c5a      	adds	r2, r3, #1
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	699b      	ldr	r3, [r3, #24]
 8010722:	2b00      	cmp	r3, #0
 8010724:	d10b      	bne.n	801073e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8010726:	68bb      	ldr	r3, [r7, #8]
 8010728:	095b      	lsrs	r3, r3, #5
 801072a:	68fa      	ldr	r2, [r7, #12]
 801072c:	8912      	ldrh	r2, [r2, #8]
 801072e:	4293      	cmp	r3, r2
 8010730:	f0c0 808d 	bcc.w	801084e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	2200      	movs	r2, #0
 8010738:	61da      	str	r2, [r3, #28]
 801073a:	2304      	movs	r3, #4
 801073c:	e09a      	b.n	8010874 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	899b      	ldrh	r3, [r3, #12]
 8010742:	461a      	mov	r2, r3
 8010744:	68bb      	ldr	r3, [r7, #8]
 8010746:	fbb3 f3f2 	udiv	r3, r3, r2
 801074a:	68fa      	ldr	r2, [r7, #12]
 801074c:	8952      	ldrh	r2, [r2, #10]
 801074e:	3a01      	subs	r2, #1
 8010750:	4013      	ands	r3, r2
 8010752:	2b00      	cmp	r3, #0
 8010754:	d17b      	bne.n	801084e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8010756:	687a      	ldr	r2, [r7, #4]
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	699b      	ldr	r3, [r3, #24]
 801075c:	4619      	mov	r1, r3
 801075e:	4610      	mov	r0, r2
 8010760:	f7ff fc0b 	bl	800ff7a <get_fat>
 8010764:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010766:	697b      	ldr	r3, [r7, #20]
 8010768:	2b01      	cmp	r3, #1
 801076a:	d801      	bhi.n	8010770 <dir_next+0xa0>
 801076c:	2302      	movs	r3, #2
 801076e:	e081      	b.n	8010874 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010770:	697b      	ldr	r3, [r7, #20]
 8010772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010776:	d101      	bne.n	801077c <dir_next+0xac>
 8010778:	2301      	movs	r3, #1
 801077a:	e07b      	b.n	8010874 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	6a1b      	ldr	r3, [r3, #32]
 8010780:	697a      	ldr	r2, [r7, #20]
 8010782:	429a      	cmp	r2, r3
 8010784:	d359      	bcc.n	801083a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8010786:	683b      	ldr	r3, [r7, #0]
 8010788:	2b00      	cmp	r3, #0
 801078a:	d104      	bne.n	8010796 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	2200      	movs	r2, #0
 8010790:	61da      	str	r2, [r3, #28]
 8010792:	2304      	movs	r3, #4
 8010794:	e06e      	b.n	8010874 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8010796:	687a      	ldr	r2, [r7, #4]
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	699b      	ldr	r3, [r3, #24]
 801079c:	4619      	mov	r1, r3
 801079e:	4610      	mov	r0, r2
 80107a0:	f7ff fe3d 	bl	801041e <create_chain>
 80107a4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80107a6:	697b      	ldr	r3, [r7, #20]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d101      	bne.n	80107b0 <dir_next+0xe0>
 80107ac:	2307      	movs	r3, #7
 80107ae:	e061      	b.n	8010874 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80107b0:	697b      	ldr	r3, [r7, #20]
 80107b2:	2b01      	cmp	r3, #1
 80107b4:	d101      	bne.n	80107ba <dir_next+0xea>
 80107b6:	2302      	movs	r3, #2
 80107b8:	e05c      	b.n	8010874 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80107ba:	697b      	ldr	r3, [r7, #20]
 80107bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107c0:	d101      	bne.n	80107c6 <dir_next+0xf6>
 80107c2:	2301      	movs	r3, #1
 80107c4:	e056      	b.n	8010874 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80107c6:	68f8      	ldr	r0, [r7, #12]
 80107c8:	f7ff fad6 	bl	800fd78 <sync_window>
 80107cc:	4603      	mov	r3, r0
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d001      	beq.n	80107d6 <dir_next+0x106>
 80107d2:	2301      	movs	r3, #1
 80107d4:	e04e      	b.n	8010874 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	899b      	ldrh	r3, [r3, #12]
 80107e0:	461a      	mov	r2, r3
 80107e2:	2100      	movs	r1, #0
 80107e4:	f7ff f8ff 	bl	800f9e6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80107e8:	2300      	movs	r3, #0
 80107ea:	613b      	str	r3, [r7, #16]
 80107ec:	6979      	ldr	r1, [r7, #20]
 80107ee:	68f8      	ldr	r0, [r7, #12]
 80107f0:	f7ff fba4 	bl	800ff3c <clust2sect>
 80107f4:	4602      	mov	r2, r0
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	639a      	str	r2, [r3, #56]	@ 0x38
 80107fa:	e012      	b.n	8010822 <dir_next+0x152>
						fs->wflag = 1;
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	2201      	movs	r2, #1
 8010800:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8010802:	68f8      	ldr	r0, [r7, #12]
 8010804:	f7ff fab8 	bl	800fd78 <sync_window>
 8010808:	4603      	mov	r3, r0
 801080a:	2b00      	cmp	r3, #0
 801080c:	d001      	beq.n	8010812 <dir_next+0x142>
 801080e:	2301      	movs	r3, #1
 8010810:	e030      	b.n	8010874 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010812:	693b      	ldr	r3, [r7, #16]
 8010814:	3301      	adds	r3, #1
 8010816:	613b      	str	r3, [r7, #16]
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801081c:	1c5a      	adds	r2, r3, #1
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	639a      	str	r2, [r3, #56]	@ 0x38
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	895b      	ldrh	r3, [r3, #10]
 8010826:	461a      	mov	r2, r3
 8010828:	693b      	ldr	r3, [r7, #16]
 801082a:	4293      	cmp	r3, r2
 801082c:	d3e6      	bcc.n	80107fc <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010832:	693b      	ldr	r3, [r7, #16]
 8010834:	1ad2      	subs	r2, r2, r3
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	639a      	str	r2, [r3, #56]	@ 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	697a      	ldr	r2, [r7, #20]
 801083e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8010840:	6979      	ldr	r1, [r7, #20]
 8010842:	68f8      	ldr	r0, [r7, #12]
 8010844:	f7ff fb7a 	bl	800ff3c <clust2sect>
 8010848:	4602      	mov	r2, r0
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	68ba      	ldr	r2, [r7, #8]
 8010852:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	899b      	ldrh	r3, [r3, #12]
 801085e:	461a      	mov	r2, r3
 8010860:	68bb      	ldr	r3, [r7, #8]
 8010862:	fbb3 f0f2 	udiv	r0, r3, r2
 8010866:	fb00 f202 	mul.w	r2, r0, r2
 801086a:	1a9b      	subs	r3, r3, r2
 801086c:	18ca      	adds	r2, r1, r3
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010872:	2300      	movs	r3, #0
}
 8010874:	4618      	mov	r0, r3
 8010876:	3718      	adds	r7, #24
 8010878:	46bd      	mov	sp, r7
 801087a:	bd80      	pop	{r7, pc}

0801087c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801087c:	b580      	push	{r7, lr}
 801087e:	b086      	sub	sp, #24
 8010880:	af00      	add	r7, sp, #0
 8010882:	6078      	str	r0, [r7, #4]
 8010884:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801088c:	2100      	movs	r1, #0
 801088e:	6878      	ldr	r0, [r7, #4]
 8010890:	f7ff fe95 	bl	80105be <dir_sdi>
 8010894:	4603      	mov	r3, r0
 8010896:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010898:	7dfb      	ldrb	r3, [r7, #23]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d12b      	bne.n	80108f6 <dir_alloc+0x7a>
		n = 0;
 801089e:	2300      	movs	r3, #0
 80108a0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	69db      	ldr	r3, [r3, #28]
 80108a6:	4619      	mov	r1, r3
 80108a8:	68f8      	ldr	r0, [r7, #12]
 80108aa:	f7ff faa9 	bl	800fe00 <move_window>
 80108ae:	4603      	mov	r3, r0
 80108b0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80108b2:	7dfb      	ldrb	r3, [r7, #23]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d11d      	bne.n	80108f4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	6a1b      	ldr	r3, [r3, #32]
 80108bc:	781b      	ldrb	r3, [r3, #0]
 80108be:	2be5      	cmp	r3, #229	@ 0xe5
 80108c0:	d004      	beq.n	80108cc <dir_alloc+0x50>
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	6a1b      	ldr	r3, [r3, #32]
 80108c6:	781b      	ldrb	r3, [r3, #0]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d107      	bne.n	80108dc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80108cc:	693b      	ldr	r3, [r7, #16]
 80108ce:	3301      	adds	r3, #1
 80108d0:	613b      	str	r3, [r7, #16]
 80108d2:	693a      	ldr	r2, [r7, #16]
 80108d4:	683b      	ldr	r3, [r7, #0]
 80108d6:	429a      	cmp	r2, r3
 80108d8:	d102      	bne.n	80108e0 <dir_alloc+0x64>
 80108da:	e00c      	b.n	80108f6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80108dc:	2300      	movs	r3, #0
 80108de:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80108e0:	2101      	movs	r1, #1
 80108e2:	6878      	ldr	r0, [r7, #4]
 80108e4:	f7ff fef4 	bl	80106d0 <dir_next>
 80108e8:	4603      	mov	r3, r0
 80108ea:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80108ec:	7dfb      	ldrb	r3, [r7, #23]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d0d7      	beq.n	80108a2 <dir_alloc+0x26>
 80108f2:	e000      	b.n	80108f6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80108f4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80108f6:	7dfb      	ldrb	r3, [r7, #23]
 80108f8:	2b04      	cmp	r3, #4
 80108fa:	d101      	bne.n	8010900 <dir_alloc+0x84>
 80108fc:	2307      	movs	r3, #7
 80108fe:	75fb      	strb	r3, [r7, #23]
	return res;
 8010900:	7dfb      	ldrb	r3, [r7, #23]
}
 8010902:	4618      	mov	r0, r3
 8010904:	3718      	adds	r7, #24
 8010906:	46bd      	mov	sp, r7
 8010908:	bd80      	pop	{r7, pc}

0801090a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801090a:	b580      	push	{r7, lr}
 801090c:	b084      	sub	sp, #16
 801090e:	af00      	add	r7, sp, #0
 8010910:	6078      	str	r0, [r7, #4]
 8010912:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8010914:	683b      	ldr	r3, [r7, #0]
 8010916:	331a      	adds	r3, #26
 8010918:	4618      	mov	r0, r3
 801091a:	f7fe ffc1 	bl	800f8a0 <ld_word>
 801091e:	4603      	mov	r3, r0
 8010920:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	781b      	ldrb	r3, [r3, #0]
 8010926:	2b03      	cmp	r3, #3
 8010928:	d109      	bne.n	801093e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801092a:	683b      	ldr	r3, [r7, #0]
 801092c:	3314      	adds	r3, #20
 801092e:	4618      	mov	r0, r3
 8010930:	f7fe ffb6 	bl	800f8a0 <ld_word>
 8010934:	4603      	mov	r3, r0
 8010936:	041b      	lsls	r3, r3, #16
 8010938:	68fa      	ldr	r2, [r7, #12]
 801093a:	4313      	orrs	r3, r2
 801093c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801093e:	68fb      	ldr	r3, [r7, #12]
}
 8010940:	4618      	mov	r0, r3
 8010942:	3710      	adds	r7, #16
 8010944:	46bd      	mov	sp, r7
 8010946:	bd80      	pop	{r7, pc}

08010948 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8010948:	b580      	push	{r7, lr}
 801094a:	b084      	sub	sp, #16
 801094c:	af00      	add	r7, sp, #0
 801094e:	60f8      	str	r0, [r7, #12]
 8010950:	60b9      	str	r1, [r7, #8]
 8010952:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8010954:	68bb      	ldr	r3, [r7, #8]
 8010956:	331a      	adds	r3, #26
 8010958:	687a      	ldr	r2, [r7, #4]
 801095a:	b292      	uxth	r2, r2
 801095c:	4611      	mov	r1, r2
 801095e:	4618      	mov	r0, r3
 8010960:	f7fe ffd9 	bl	800f916 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	781b      	ldrb	r3, [r3, #0]
 8010968:	2b03      	cmp	r3, #3
 801096a:	d109      	bne.n	8010980 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801096c:	68bb      	ldr	r3, [r7, #8]
 801096e:	f103 0214 	add.w	r2, r3, #20
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	0c1b      	lsrs	r3, r3, #16
 8010976:	b29b      	uxth	r3, r3
 8010978:	4619      	mov	r1, r3
 801097a:	4610      	mov	r0, r2
 801097c:	f7fe ffcb 	bl	800f916 <st_word>
	}
}
 8010980:	bf00      	nop
 8010982:	3710      	adds	r7, #16
 8010984:	46bd      	mov	sp, r7
 8010986:	bd80      	pop	{r7, pc}

08010988 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8010988:	b590      	push	{r4, r7, lr}
 801098a:	b087      	sub	sp, #28
 801098c:	af00      	add	r7, sp, #0
 801098e:	6078      	str	r0, [r7, #4]
 8010990:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8010992:	683b      	ldr	r3, [r7, #0]
 8010994:	331a      	adds	r3, #26
 8010996:	4618      	mov	r0, r3
 8010998:	f7fe ff82 	bl	800f8a0 <ld_word>
 801099c:	4603      	mov	r3, r0
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d001      	beq.n	80109a6 <cmp_lfn+0x1e>
 80109a2:	2300      	movs	r3, #0
 80109a4:	e059      	b.n	8010a5a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80109a6:	683b      	ldr	r3, [r7, #0]
 80109a8:	781b      	ldrb	r3, [r3, #0]
 80109aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80109ae:	1e5a      	subs	r2, r3, #1
 80109b0:	4613      	mov	r3, r2
 80109b2:	005b      	lsls	r3, r3, #1
 80109b4:	4413      	add	r3, r2
 80109b6:	009b      	lsls	r3, r3, #2
 80109b8:	4413      	add	r3, r2
 80109ba:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80109bc:	2301      	movs	r3, #1
 80109be:	81fb      	strh	r3, [r7, #14]
 80109c0:	2300      	movs	r3, #0
 80109c2:	613b      	str	r3, [r7, #16]
 80109c4:	e033      	b.n	8010a2e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80109c6:	4a27      	ldr	r2, [pc, #156]	@ (8010a64 <cmp_lfn+0xdc>)
 80109c8:	693b      	ldr	r3, [r7, #16]
 80109ca:	4413      	add	r3, r2
 80109cc:	781b      	ldrb	r3, [r3, #0]
 80109ce:	461a      	mov	r2, r3
 80109d0:	683b      	ldr	r3, [r7, #0]
 80109d2:	4413      	add	r3, r2
 80109d4:	4618      	mov	r0, r3
 80109d6:	f7fe ff63 	bl	800f8a0 <ld_word>
 80109da:	4603      	mov	r3, r0
 80109dc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80109de:	89fb      	ldrh	r3, [r7, #14]
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d01a      	beq.n	8010a1a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80109e4:	697b      	ldr	r3, [r7, #20]
 80109e6:	2bfe      	cmp	r3, #254	@ 0xfe
 80109e8:	d812      	bhi.n	8010a10 <cmp_lfn+0x88>
 80109ea:	89bb      	ldrh	r3, [r7, #12]
 80109ec:	4618      	mov	r0, r3
 80109ee:	f002 fa9b 	bl	8012f28 <ff_wtoupper>
 80109f2:	4603      	mov	r3, r0
 80109f4:	461c      	mov	r4, r3
 80109f6:	697b      	ldr	r3, [r7, #20]
 80109f8:	1c5a      	adds	r2, r3, #1
 80109fa:	617a      	str	r2, [r7, #20]
 80109fc:	005b      	lsls	r3, r3, #1
 80109fe:	687a      	ldr	r2, [r7, #4]
 8010a00:	4413      	add	r3, r2
 8010a02:	881b      	ldrh	r3, [r3, #0]
 8010a04:	4618      	mov	r0, r3
 8010a06:	f002 fa8f 	bl	8012f28 <ff_wtoupper>
 8010a0a:	4603      	mov	r3, r0
 8010a0c:	429c      	cmp	r4, r3
 8010a0e:	d001      	beq.n	8010a14 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8010a10:	2300      	movs	r3, #0
 8010a12:	e022      	b.n	8010a5a <cmp_lfn+0xd2>
			}
			wc = uc;
 8010a14:	89bb      	ldrh	r3, [r7, #12]
 8010a16:	81fb      	strh	r3, [r7, #14]
 8010a18:	e006      	b.n	8010a28 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8010a1a:	89bb      	ldrh	r3, [r7, #12]
 8010a1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010a20:	4293      	cmp	r3, r2
 8010a22:	d001      	beq.n	8010a28 <cmp_lfn+0xa0>
 8010a24:	2300      	movs	r3, #0
 8010a26:	e018      	b.n	8010a5a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8010a28:	693b      	ldr	r3, [r7, #16]
 8010a2a:	3301      	adds	r3, #1
 8010a2c:	613b      	str	r3, [r7, #16]
 8010a2e:	693b      	ldr	r3, [r7, #16]
 8010a30:	2b0c      	cmp	r3, #12
 8010a32:	d9c8      	bls.n	80109c6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8010a34:	683b      	ldr	r3, [r7, #0]
 8010a36:	781b      	ldrb	r3, [r3, #0]
 8010a38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d00b      	beq.n	8010a58 <cmp_lfn+0xd0>
 8010a40:	89fb      	ldrh	r3, [r7, #14]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d008      	beq.n	8010a58 <cmp_lfn+0xd0>
 8010a46:	697b      	ldr	r3, [r7, #20]
 8010a48:	005b      	lsls	r3, r3, #1
 8010a4a:	687a      	ldr	r2, [r7, #4]
 8010a4c:	4413      	add	r3, r2
 8010a4e:	881b      	ldrh	r3, [r3, #0]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d001      	beq.n	8010a58 <cmp_lfn+0xd0>
 8010a54:	2300      	movs	r3, #0
 8010a56:	e000      	b.n	8010a5a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8010a58:	2301      	movs	r3, #1
}
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	371c      	adds	r7, #28
 8010a5e:	46bd      	mov	sp, r7
 8010a60:	bd90      	pop	{r4, r7, pc}
 8010a62:	bf00      	nop
 8010a64:	080134d0 	.word	0x080134d0

08010a68 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	b088      	sub	sp, #32
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	60f8      	str	r0, [r7, #12]
 8010a70:	60b9      	str	r1, [r7, #8]
 8010a72:	4611      	mov	r1, r2
 8010a74:	461a      	mov	r2, r3
 8010a76:	460b      	mov	r3, r1
 8010a78:	71fb      	strb	r3, [r7, #7]
 8010a7a:	4613      	mov	r3, r2
 8010a7c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8010a7e:	68bb      	ldr	r3, [r7, #8]
 8010a80:	330d      	adds	r3, #13
 8010a82:	79ba      	ldrb	r2, [r7, #6]
 8010a84:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8010a86:	68bb      	ldr	r3, [r7, #8]
 8010a88:	330b      	adds	r3, #11
 8010a8a:	220f      	movs	r2, #15
 8010a8c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8010a8e:	68bb      	ldr	r3, [r7, #8]
 8010a90:	330c      	adds	r3, #12
 8010a92:	2200      	movs	r2, #0
 8010a94:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8010a96:	68bb      	ldr	r3, [r7, #8]
 8010a98:	331a      	adds	r3, #26
 8010a9a:	2100      	movs	r1, #0
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	f7fe ff3a 	bl	800f916 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8010aa2:	79fb      	ldrb	r3, [r7, #7]
 8010aa4:	1e5a      	subs	r2, r3, #1
 8010aa6:	4613      	mov	r3, r2
 8010aa8:	005b      	lsls	r3, r3, #1
 8010aaa:	4413      	add	r3, r2
 8010aac:	009b      	lsls	r3, r3, #2
 8010aae:	4413      	add	r3, r2
 8010ab0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	82fb      	strh	r3, [r7, #22]
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8010aba:	8afb      	ldrh	r3, [r7, #22]
 8010abc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010ac0:	4293      	cmp	r3, r2
 8010ac2:	d007      	beq.n	8010ad4 <put_lfn+0x6c>
 8010ac4:	69fb      	ldr	r3, [r7, #28]
 8010ac6:	1c5a      	adds	r2, r3, #1
 8010ac8:	61fa      	str	r2, [r7, #28]
 8010aca:	005b      	lsls	r3, r3, #1
 8010acc:	68fa      	ldr	r2, [r7, #12]
 8010ace:	4413      	add	r3, r2
 8010ad0:	881b      	ldrh	r3, [r3, #0]
 8010ad2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8010ad4:	4a17      	ldr	r2, [pc, #92]	@ (8010b34 <put_lfn+0xcc>)
 8010ad6:	69bb      	ldr	r3, [r7, #24]
 8010ad8:	4413      	add	r3, r2
 8010ada:	781b      	ldrb	r3, [r3, #0]
 8010adc:	461a      	mov	r2, r3
 8010ade:	68bb      	ldr	r3, [r7, #8]
 8010ae0:	4413      	add	r3, r2
 8010ae2:	8afa      	ldrh	r2, [r7, #22]
 8010ae4:	4611      	mov	r1, r2
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	f7fe ff15 	bl	800f916 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8010aec:	8afb      	ldrh	r3, [r7, #22]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d102      	bne.n	8010af8 <put_lfn+0x90>
 8010af2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010af6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8010af8:	69bb      	ldr	r3, [r7, #24]
 8010afa:	3301      	adds	r3, #1
 8010afc:	61bb      	str	r3, [r7, #24]
 8010afe:	69bb      	ldr	r3, [r7, #24]
 8010b00:	2b0c      	cmp	r3, #12
 8010b02:	d9da      	bls.n	8010aba <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8010b04:	8afb      	ldrh	r3, [r7, #22]
 8010b06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010b0a:	4293      	cmp	r3, r2
 8010b0c:	d006      	beq.n	8010b1c <put_lfn+0xb4>
 8010b0e:	69fb      	ldr	r3, [r7, #28]
 8010b10:	005b      	lsls	r3, r3, #1
 8010b12:	68fa      	ldr	r2, [r7, #12]
 8010b14:	4413      	add	r3, r2
 8010b16:	881b      	ldrh	r3, [r3, #0]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d103      	bne.n	8010b24 <put_lfn+0xbc>
 8010b1c:	79fb      	ldrb	r3, [r7, #7]
 8010b1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010b22:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8010b24:	68bb      	ldr	r3, [r7, #8]
 8010b26:	79fa      	ldrb	r2, [r7, #7]
 8010b28:	701a      	strb	r2, [r3, #0]
}
 8010b2a:	bf00      	nop
 8010b2c:	3720      	adds	r7, #32
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	bd80      	pop	{r7, pc}
 8010b32:	bf00      	nop
 8010b34:	080134d0 	.word	0x080134d0

08010b38 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	b08c      	sub	sp, #48	@ 0x30
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	60f8      	str	r0, [r7, #12]
 8010b40:	60b9      	str	r1, [r7, #8]
 8010b42:	607a      	str	r2, [r7, #4]
 8010b44:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8010b46:	220b      	movs	r2, #11
 8010b48:	68b9      	ldr	r1, [r7, #8]
 8010b4a:	68f8      	ldr	r0, [r7, #12]
 8010b4c:	f7fe ff2a 	bl	800f9a4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8010b50:	683b      	ldr	r3, [r7, #0]
 8010b52:	2b05      	cmp	r3, #5
 8010b54:	d929      	bls.n	8010baa <gen_numname+0x72>
		sr = seq;
 8010b56:	683b      	ldr	r3, [r7, #0]
 8010b58:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8010b5a:	e020      	b.n	8010b9e <gen_numname+0x66>
			wc = *lfn++;
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	1c9a      	adds	r2, r3, #2
 8010b60:	607a      	str	r2, [r7, #4]
 8010b62:	881b      	ldrh	r3, [r3, #0]
 8010b64:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8010b66:	2300      	movs	r3, #0
 8010b68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010b6a:	e015      	b.n	8010b98 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8010b6c:	69fb      	ldr	r3, [r7, #28]
 8010b6e:	005a      	lsls	r2, r3, #1
 8010b70:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010b72:	f003 0301 	and.w	r3, r3, #1
 8010b76:	4413      	add	r3, r2
 8010b78:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8010b7a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010b7c:	085b      	lsrs	r3, r3, #1
 8010b7e:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8010b80:	69fb      	ldr	r3, [r7, #28]
 8010b82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d003      	beq.n	8010b92 <gen_numname+0x5a>
 8010b8a:	69fa      	ldr	r2, [r7, #28]
 8010b8c:	4b30      	ldr	r3, [pc, #192]	@ (8010c50 <gen_numname+0x118>)
 8010b8e:	4053      	eors	r3, r2
 8010b90:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8010b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b94:	3301      	adds	r3, #1
 8010b96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b9a:	2b0f      	cmp	r3, #15
 8010b9c:	d9e6      	bls.n	8010b6c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	881b      	ldrh	r3, [r3, #0]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d1da      	bne.n	8010b5c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8010ba6:	69fb      	ldr	r3, [r7, #28]
 8010ba8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8010baa:	2307      	movs	r3, #7
 8010bac:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8010bae:	683b      	ldr	r3, [r7, #0]
 8010bb0:	b2db      	uxtb	r3, r3
 8010bb2:	f003 030f 	and.w	r3, r3, #15
 8010bb6:	b2db      	uxtb	r3, r3
 8010bb8:	3330      	adds	r3, #48	@ 0x30
 8010bba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8010bbe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010bc2:	2b39      	cmp	r3, #57	@ 0x39
 8010bc4:	d904      	bls.n	8010bd0 <gen_numname+0x98>
 8010bc6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010bca:	3307      	adds	r3, #7
 8010bcc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8010bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bd2:	1e5a      	subs	r2, r3, #1
 8010bd4:	62ba      	str	r2, [r7, #40]	@ 0x28
 8010bd6:	3330      	adds	r3, #48	@ 0x30
 8010bd8:	443b      	add	r3, r7
 8010bda:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8010bde:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8010be2:	683b      	ldr	r3, [r7, #0]
 8010be4:	091b      	lsrs	r3, r3, #4
 8010be6:	603b      	str	r3, [r7, #0]
	} while (seq);
 8010be8:	683b      	ldr	r3, [r7, #0]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d1df      	bne.n	8010bae <gen_numname+0x76>
	ns[i] = '~';
 8010bee:	f107 0214 	add.w	r2, r7, #20
 8010bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bf4:	4413      	add	r3, r2
 8010bf6:	227e      	movs	r2, #126	@ 0x7e
 8010bf8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8010bfe:	e002      	b.n	8010c06 <gen_numname+0xce>
 8010c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c02:	3301      	adds	r3, #1
 8010c04:	627b      	str	r3, [r7, #36]	@ 0x24
 8010c06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c0a:	429a      	cmp	r2, r3
 8010c0c:	d205      	bcs.n	8010c1a <gen_numname+0xe2>
 8010c0e:	68fa      	ldr	r2, [r7, #12]
 8010c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c12:	4413      	add	r3, r2
 8010c14:	781b      	ldrb	r3, [r3, #0]
 8010c16:	2b20      	cmp	r3, #32
 8010c18:	d1f2      	bne.n	8010c00 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8010c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c1c:	2b07      	cmp	r3, #7
 8010c1e:	d807      	bhi.n	8010c30 <gen_numname+0xf8>
 8010c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c22:	1c5a      	adds	r2, r3, #1
 8010c24:	62ba      	str	r2, [r7, #40]	@ 0x28
 8010c26:	3330      	adds	r3, #48	@ 0x30
 8010c28:	443b      	add	r3, r7
 8010c2a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8010c2e:	e000      	b.n	8010c32 <gen_numname+0xfa>
 8010c30:	2120      	movs	r1, #32
 8010c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c34:	1c5a      	adds	r2, r3, #1
 8010c36:	627a      	str	r2, [r7, #36]	@ 0x24
 8010c38:	68fa      	ldr	r2, [r7, #12]
 8010c3a:	4413      	add	r3, r2
 8010c3c:	460a      	mov	r2, r1
 8010c3e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8010c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c42:	2b07      	cmp	r3, #7
 8010c44:	d9e9      	bls.n	8010c1a <gen_numname+0xe2>
}
 8010c46:	bf00      	nop
 8010c48:	bf00      	nop
 8010c4a:	3730      	adds	r7, #48	@ 0x30
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	bd80      	pop	{r7, pc}
 8010c50:	00011021 	.word	0x00011021

08010c54 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8010c54:	b480      	push	{r7}
 8010c56:	b085      	sub	sp, #20
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8010c60:	230b      	movs	r3, #11
 8010c62:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8010c64:	7bfb      	ldrb	r3, [r7, #15]
 8010c66:	b2da      	uxtb	r2, r3
 8010c68:	0852      	lsrs	r2, r2, #1
 8010c6a:	01db      	lsls	r3, r3, #7
 8010c6c:	4313      	orrs	r3, r2
 8010c6e:	b2da      	uxtb	r2, r3
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	1c59      	adds	r1, r3, #1
 8010c74:	6079      	str	r1, [r7, #4]
 8010c76:	781b      	ldrb	r3, [r3, #0]
 8010c78:	4413      	add	r3, r2
 8010c7a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8010c7c:	68bb      	ldr	r3, [r7, #8]
 8010c7e:	3b01      	subs	r3, #1
 8010c80:	60bb      	str	r3, [r7, #8]
 8010c82:	68bb      	ldr	r3, [r7, #8]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d1ed      	bne.n	8010c64 <sum_sfn+0x10>
	return sum;
 8010c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	3714      	adds	r7, #20
 8010c8e:	46bd      	mov	sp, r7
 8010c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c94:	4770      	bx	lr

08010c96 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8010c96:	b580      	push	{r7, lr}
 8010c98:	b086      	sub	sp, #24
 8010c9a:	af00      	add	r7, sp, #0
 8010c9c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010ca4:	2100      	movs	r1, #0
 8010ca6:	6878      	ldr	r0, [r7, #4]
 8010ca8:	f7ff fc89 	bl	80105be <dir_sdi>
 8010cac:	4603      	mov	r3, r0
 8010cae:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8010cb0:	7dfb      	ldrb	r3, [r7, #23]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d001      	beq.n	8010cba <dir_find+0x24>
 8010cb6:	7dfb      	ldrb	r3, [r7, #23]
 8010cb8:	e0a9      	b.n	8010e0e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8010cba:	23ff      	movs	r3, #255	@ 0xff
 8010cbc:	753b      	strb	r3, [r7, #20]
 8010cbe:	7d3b      	ldrb	r3, [r7, #20]
 8010cc0:	757b      	strb	r3, [r7, #21]
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8010cc8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	69db      	ldr	r3, [r3, #28]
 8010cce:	4619      	mov	r1, r3
 8010cd0:	6938      	ldr	r0, [r7, #16]
 8010cd2:	f7ff f895 	bl	800fe00 <move_window>
 8010cd6:	4603      	mov	r3, r0
 8010cd8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010cda:	7dfb      	ldrb	r3, [r7, #23]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	f040 8090 	bne.w	8010e02 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	6a1b      	ldr	r3, [r3, #32]
 8010ce6:	781b      	ldrb	r3, [r3, #0]
 8010ce8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010cea:	7dbb      	ldrb	r3, [r7, #22]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d102      	bne.n	8010cf6 <dir_find+0x60>
 8010cf0:	2304      	movs	r3, #4
 8010cf2:	75fb      	strb	r3, [r7, #23]
 8010cf4:	e08a      	b.n	8010e0c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	6a1b      	ldr	r3, [r3, #32]
 8010cfa:	330b      	adds	r3, #11
 8010cfc:	781b      	ldrb	r3, [r3, #0]
 8010cfe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010d02:	73fb      	strb	r3, [r7, #15]
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	7bfa      	ldrb	r2, [r7, #15]
 8010d08:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8010d0a:	7dbb      	ldrb	r3, [r7, #22]
 8010d0c:	2be5      	cmp	r3, #229	@ 0xe5
 8010d0e:	d007      	beq.n	8010d20 <dir_find+0x8a>
 8010d10:	7bfb      	ldrb	r3, [r7, #15]
 8010d12:	f003 0308 	and.w	r3, r3, #8
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d009      	beq.n	8010d2e <dir_find+0x98>
 8010d1a:	7bfb      	ldrb	r3, [r7, #15]
 8010d1c:	2b0f      	cmp	r3, #15
 8010d1e:	d006      	beq.n	8010d2e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8010d20:	23ff      	movs	r3, #255	@ 0xff
 8010d22:	757b      	strb	r3, [r7, #21]
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	f04f 32ff 	mov.w	r2, #4294967295
 8010d2a:	631a      	str	r2, [r3, #48]	@ 0x30
 8010d2c:	e05e      	b.n	8010dec <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8010d2e:	7bfb      	ldrb	r3, [r7, #15]
 8010d30:	2b0f      	cmp	r3, #15
 8010d32:	d136      	bne.n	8010da2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8010d3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d154      	bne.n	8010dec <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8010d42:	7dbb      	ldrb	r3, [r7, #22]
 8010d44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d00d      	beq.n	8010d68 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	6a1b      	ldr	r3, [r3, #32]
 8010d50:	7b5b      	ldrb	r3, [r3, #13]
 8010d52:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8010d54:	7dbb      	ldrb	r3, [r7, #22]
 8010d56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010d5a:	75bb      	strb	r3, [r7, #22]
 8010d5c:	7dbb      	ldrb	r3, [r7, #22]
 8010d5e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	695a      	ldr	r2, [r3, #20]
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8010d68:	7dba      	ldrb	r2, [r7, #22]
 8010d6a:	7d7b      	ldrb	r3, [r7, #21]
 8010d6c:	429a      	cmp	r2, r3
 8010d6e:	d115      	bne.n	8010d9c <dir_find+0x106>
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	6a1b      	ldr	r3, [r3, #32]
 8010d74:	330d      	adds	r3, #13
 8010d76:	781b      	ldrb	r3, [r3, #0]
 8010d78:	7d3a      	ldrb	r2, [r7, #20]
 8010d7a:	429a      	cmp	r2, r3
 8010d7c:	d10e      	bne.n	8010d9c <dir_find+0x106>
 8010d7e:	693b      	ldr	r3, [r7, #16]
 8010d80:	691a      	ldr	r2, [r3, #16]
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	6a1b      	ldr	r3, [r3, #32]
 8010d86:	4619      	mov	r1, r3
 8010d88:	4610      	mov	r0, r2
 8010d8a:	f7ff fdfd 	bl	8010988 <cmp_lfn>
 8010d8e:	4603      	mov	r3, r0
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d003      	beq.n	8010d9c <dir_find+0x106>
 8010d94:	7d7b      	ldrb	r3, [r7, #21]
 8010d96:	3b01      	subs	r3, #1
 8010d98:	b2db      	uxtb	r3, r3
 8010d9a:	e000      	b.n	8010d9e <dir_find+0x108>
 8010d9c:	23ff      	movs	r3, #255	@ 0xff
 8010d9e:	757b      	strb	r3, [r7, #21]
 8010da0:	e024      	b.n	8010dec <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8010da2:	7d7b      	ldrb	r3, [r7, #21]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d109      	bne.n	8010dbc <dir_find+0x126>
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	6a1b      	ldr	r3, [r3, #32]
 8010dac:	4618      	mov	r0, r3
 8010dae:	f7ff ff51 	bl	8010c54 <sum_sfn>
 8010db2:	4603      	mov	r3, r0
 8010db4:	461a      	mov	r2, r3
 8010db6:	7d3b      	ldrb	r3, [r7, #20]
 8010db8:	4293      	cmp	r3, r2
 8010dba:	d024      	beq.n	8010e06 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8010dc2:	f003 0301 	and.w	r3, r3, #1
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d10a      	bne.n	8010de0 <dir_find+0x14a>
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	6a18      	ldr	r0, [r3, #32]
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	3324      	adds	r3, #36	@ 0x24
 8010dd2:	220b      	movs	r2, #11
 8010dd4:	4619      	mov	r1, r3
 8010dd6:	f7fe fe21 	bl	800fa1c <mem_cmp>
 8010dda:	4603      	mov	r3, r0
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d014      	beq.n	8010e0a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8010de0:	23ff      	movs	r3, #255	@ 0xff
 8010de2:	757b      	strb	r3, [r7, #21]
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	f04f 32ff 	mov.w	r2, #4294967295
 8010dea:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8010dec:	2100      	movs	r1, #0
 8010dee:	6878      	ldr	r0, [r7, #4]
 8010df0:	f7ff fc6e 	bl	80106d0 <dir_next>
 8010df4:	4603      	mov	r3, r0
 8010df6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8010df8:	7dfb      	ldrb	r3, [r7, #23]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	f43f af65 	beq.w	8010cca <dir_find+0x34>
 8010e00:	e004      	b.n	8010e0c <dir_find+0x176>
		if (res != FR_OK) break;
 8010e02:	bf00      	nop
 8010e04:	e002      	b.n	8010e0c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8010e06:	bf00      	nop
 8010e08:	e000      	b.n	8010e0c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8010e0a:	bf00      	nop

	return res;
 8010e0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e0e:	4618      	mov	r0, r3
 8010e10:	3718      	adds	r7, #24
 8010e12:	46bd      	mov	sp, r7
 8010e14:	bd80      	pop	{r7, pc}
	...

08010e18 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b08c      	sub	sp, #48	@ 0x30
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8010e2c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d001      	beq.n	8010e38 <dir_register+0x20>
 8010e34:	2306      	movs	r3, #6
 8010e36:	e0e0      	b.n	8010ffa <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8010e38:	2300      	movs	r3, #0
 8010e3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8010e3c:	e002      	b.n	8010e44 <dir_register+0x2c>
 8010e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e40:	3301      	adds	r3, #1
 8010e42:	627b      	str	r3, [r7, #36]	@ 0x24
 8010e44:	69fb      	ldr	r3, [r7, #28]
 8010e46:	691a      	ldr	r2, [r3, #16]
 8010e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e4a:	005b      	lsls	r3, r3, #1
 8010e4c:	4413      	add	r3, r2
 8010e4e:	881b      	ldrh	r3, [r3, #0]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d1f4      	bne.n	8010e3e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8010e5a:	f107 030c 	add.w	r3, r7, #12
 8010e5e:	220c      	movs	r2, #12
 8010e60:	4618      	mov	r0, r3
 8010e62:	f7fe fd9f 	bl	800f9a4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8010e66:	7dfb      	ldrb	r3, [r7, #23]
 8010e68:	f003 0301 	and.w	r3, r3, #1
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d032      	beq.n	8010ed6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	2240      	movs	r2, #64	@ 0x40
 8010e74:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8010e78:	2301      	movs	r3, #1
 8010e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010e7c:	e016      	b.n	8010eac <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8010e84:	69fb      	ldr	r3, [r7, #28]
 8010e86:	691a      	ldr	r2, [r3, #16]
 8010e88:	f107 010c 	add.w	r1, r7, #12
 8010e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e8e:	f7ff fe53 	bl	8010b38 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8010e92:	6878      	ldr	r0, [r7, #4]
 8010e94:	f7ff feff 	bl	8010c96 <dir_find>
 8010e98:	4603      	mov	r3, r0
 8010e9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8010e9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d106      	bne.n	8010eb4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8010ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ea8:	3301      	adds	r3, #1
 8010eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010eae:	2b63      	cmp	r3, #99	@ 0x63
 8010eb0:	d9e5      	bls.n	8010e7e <dir_register+0x66>
 8010eb2:	e000      	b.n	8010eb6 <dir_register+0x9e>
			if (res != FR_OK) break;
 8010eb4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8010eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010eb8:	2b64      	cmp	r3, #100	@ 0x64
 8010eba:	d101      	bne.n	8010ec0 <dir_register+0xa8>
 8010ebc:	2307      	movs	r3, #7
 8010ebe:	e09c      	b.n	8010ffa <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8010ec0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010ec4:	2b04      	cmp	r3, #4
 8010ec6:	d002      	beq.n	8010ece <dir_register+0xb6>
 8010ec8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010ecc:	e095      	b.n	8010ffa <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8010ece:	7dfa      	ldrb	r2, [r7, #23]
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8010ed6:	7dfb      	ldrb	r3, [r7, #23]
 8010ed8:	f003 0302 	and.w	r3, r3, #2
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d007      	beq.n	8010ef0 <dir_register+0xd8>
 8010ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ee2:	330c      	adds	r3, #12
 8010ee4:	4a47      	ldr	r2, [pc, #284]	@ (8011004 <dir_register+0x1ec>)
 8010ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8010eea:	089b      	lsrs	r3, r3, #2
 8010eec:	3301      	adds	r3, #1
 8010eee:	e000      	b.n	8010ef2 <dir_register+0xda>
 8010ef0:	2301      	movs	r3, #1
 8010ef2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8010ef4:	6a39      	ldr	r1, [r7, #32]
 8010ef6:	6878      	ldr	r0, [r7, #4]
 8010ef8:	f7ff fcc0 	bl	801087c <dir_alloc>
 8010efc:	4603      	mov	r3, r0
 8010efe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8010f02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d148      	bne.n	8010f9c <dir_register+0x184>
 8010f0a:	6a3b      	ldr	r3, [r7, #32]
 8010f0c:	3b01      	subs	r3, #1
 8010f0e:	623b      	str	r3, [r7, #32]
 8010f10:	6a3b      	ldr	r3, [r7, #32]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d042      	beq.n	8010f9c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	695a      	ldr	r2, [r3, #20]
 8010f1a:	6a3b      	ldr	r3, [r7, #32]
 8010f1c:	015b      	lsls	r3, r3, #5
 8010f1e:	1ad3      	subs	r3, r2, r3
 8010f20:	4619      	mov	r1, r3
 8010f22:	6878      	ldr	r0, [r7, #4]
 8010f24:	f7ff fb4b 	bl	80105be <dir_sdi>
 8010f28:	4603      	mov	r3, r0
 8010f2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8010f2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d132      	bne.n	8010f9c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	3324      	adds	r3, #36	@ 0x24
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	f7ff fe8a 	bl	8010c54 <sum_sfn>
 8010f40:	4603      	mov	r3, r0
 8010f42:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	69db      	ldr	r3, [r3, #28]
 8010f48:	4619      	mov	r1, r3
 8010f4a:	69f8      	ldr	r0, [r7, #28]
 8010f4c:	f7fe ff58 	bl	800fe00 <move_window>
 8010f50:	4603      	mov	r3, r0
 8010f52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8010f56:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d11d      	bne.n	8010f9a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8010f5e:	69fb      	ldr	r3, [r7, #28]
 8010f60:	6918      	ldr	r0, [r3, #16]
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	6a19      	ldr	r1, [r3, #32]
 8010f66:	6a3b      	ldr	r3, [r7, #32]
 8010f68:	b2da      	uxtb	r2, r3
 8010f6a:	7efb      	ldrb	r3, [r7, #27]
 8010f6c:	f7ff fd7c 	bl	8010a68 <put_lfn>
				fs->wflag = 1;
 8010f70:	69fb      	ldr	r3, [r7, #28]
 8010f72:	2201      	movs	r2, #1
 8010f74:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8010f76:	2100      	movs	r1, #0
 8010f78:	6878      	ldr	r0, [r7, #4]
 8010f7a:	f7ff fba9 	bl	80106d0 <dir_next>
 8010f7e:	4603      	mov	r3, r0
 8010f80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8010f84:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d107      	bne.n	8010f9c <dir_register+0x184>
 8010f8c:	6a3b      	ldr	r3, [r7, #32]
 8010f8e:	3b01      	subs	r3, #1
 8010f90:	623b      	str	r3, [r7, #32]
 8010f92:	6a3b      	ldr	r3, [r7, #32]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d1d5      	bne.n	8010f44 <dir_register+0x12c>
 8010f98:	e000      	b.n	8010f9c <dir_register+0x184>
				if (res != FR_OK) break;
 8010f9a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010f9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d128      	bne.n	8010ff6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	69db      	ldr	r3, [r3, #28]
 8010fa8:	4619      	mov	r1, r3
 8010faa:	69f8      	ldr	r0, [r7, #28]
 8010fac:	f7fe ff28 	bl	800fe00 <move_window>
 8010fb0:	4603      	mov	r3, r0
 8010fb2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8010fb6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d11b      	bne.n	8010ff6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	6a1b      	ldr	r3, [r3, #32]
 8010fc2:	2220      	movs	r2, #32
 8010fc4:	2100      	movs	r1, #0
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	f7fe fd0d 	bl	800f9e6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	6a18      	ldr	r0, [r3, #32]
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	3324      	adds	r3, #36	@ 0x24
 8010fd4:	220b      	movs	r2, #11
 8010fd6:	4619      	mov	r1, r3
 8010fd8:	f7fe fce4 	bl	800f9a4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	6a1b      	ldr	r3, [r3, #32]
 8010fe6:	330c      	adds	r3, #12
 8010fe8:	f002 0218 	and.w	r2, r2, #24
 8010fec:	b2d2      	uxtb	r2, r2
 8010fee:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8010ff0:	69fb      	ldr	r3, [r7, #28]
 8010ff2:	2201      	movs	r2, #1
 8010ff4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010ff6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	3730      	adds	r7, #48	@ 0x30
 8010ffe:	46bd      	mov	sp, r7
 8011000:	bd80      	pop	{r7, pc}
 8011002:	bf00      	nop
 8011004:	4ec4ec4f 	.word	0x4ec4ec4f

08011008 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8011008:	b580      	push	{r7, lr}
 801100a:	b08a      	sub	sp, #40	@ 0x28
 801100c:	af00      	add	r7, sp, #0
 801100e:	6078      	str	r0, [r7, #4]
 8011010:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8011012:	683b      	ldr	r3, [r7, #0]
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	613b      	str	r3, [r7, #16]
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	691b      	ldr	r3, [r3, #16]
 801101e:	60fb      	str	r3, [r7, #12]
 8011020:	2300      	movs	r3, #0
 8011022:	617b      	str	r3, [r7, #20]
 8011024:	697b      	ldr	r3, [r7, #20]
 8011026:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8011028:	69bb      	ldr	r3, [r7, #24]
 801102a:	1c5a      	adds	r2, r3, #1
 801102c:	61ba      	str	r2, [r7, #24]
 801102e:	693a      	ldr	r2, [r7, #16]
 8011030:	4413      	add	r3, r2
 8011032:	781b      	ldrb	r3, [r3, #0]
 8011034:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8011036:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011038:	2b1f      	cmp	r3, #31
 801103a:	d940      	bls.n	80110be <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801103c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801103e:	2b2f      	cmp	r3, #47	@ 0x2f
 8011040:	d006      	beq.n	8011050 <create_name+0x48>
 8011042:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011044:	2b5c      	cmp	r3, #92	@ 0x5c
 8011046:	d110      	bne.n	801106a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8011048:	e002      	b.n	8011050 <create_name+0x48>
 801104a:	69bb      	ldr	r3, [r7, #24]
 801104c:	3301      	adds	r3, #1
 801104e:	61bb      	str	r3, [r7, #24]
 8011050:	693a      	ldr	r2, [r7, #16]
 8011052:	69bb      	ldr	r3, [r7, #24]
 8011054:	4413      	add	r3, r2
 8011056:	781b      	ldrb	r3, [r3, #0]
 8011058:	2b2f      	cmp	r3, #47	@ 0x2f
 801105a:	d0f6      	beq.n	801104a <create_name+0x42>
 801105c:	693a      	ldr	r2, [r7, #16]
 801105e:	69bb      	ldr	r3, [r7, #24]
 8011060:	4413      	add	r3, r2
 8011062:	781b      	ldrb	r3, [r3, #0]
 8011064:	2b5c      	cmp	r3, #92	@ 0x5c
 8011066:	d0f0      	beq.n	801104a <create_name+0x42>
			break;
 8011068:	e02a      	b.n	80110c0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801106a:	697b      	ldr	r3, [r7, #20]
 801106c:	2bfe      	cmp	r3, #254	@ 0xfe
 801106e:	d901      	bls.n	8011074 <create_name+0x6c>
 8011070:	2306      	movs	r3, #6
 8011072:	e1ca      	b.n	801140a <create_name+0x402>
#if !_LFN_UNICODE
		w &= 0xFF;
 8011074:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011076:	b2db      	uxtb	r3, r3
 8011078:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801107a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801107c:	2101      	movs	r1, #1
 801107e:	4618      	mov	r0, r3
 8011080:	f001 ff16 	bl	8012eb0 <ff_convert>
 8011084:	4603      	mov	r3, r0
 8011086:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8011088:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801108a:	2b00      	cmp	r3, #0
 801108c:	d101      	bne.n	8011092 <create_name+0x8a>
 801108e:	2306      	movs	r3, #6
 8011090:	e1bb      	b.n	801140a <create_name+0x402>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8011092:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011094:	2b7f      	cmp	r3, #127	@ 0x7f
 8011096:	d809      	bhi.n	80110ac <create_name+0xa4>
 8011098:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801109a:	4619      	mov	r1, r3
 801109c:	489e      	ldr	r0, [pc, #632]	@ (8011318 <create_name+0x310>)
 801109e:	f7fe fce4 	bl	800fa6a <chk_chr>
 80110a2:	4603      	mov	r3, r0
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d001      	beq.n	80110ac <create_name+0xa4>
 80110a8:	2306      	movs	r3, #6
 80110aa:	e1ae      	b.n	801140a <create_name+0x402>
		lfn[di++] = w;					/* Store the Unicode character */
 80110ac:	697b      	ldr	r3, [r7, #20]
 80110ae:	1c5a      	adds	r2, r3, #1
 80110b0:	617a      	str	r2, [r7, #20]
 80110b2:	005b      	lsls	r3, r3, #1
 80110b4:	68fa      	ldr	r2, [r7, #12]
 80110b6:	4413      	add	r3, r2
 80110b8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80110ba:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80110bc:	e7b4      	b.n	8011028 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80110be:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80110c0:	693a      	ldr	r2, [r7, #16]
 80110c2:	69bb      	ldr	r3, [r7, #24]
 80110c4:	441a      	add	r2, r3
 80110c6:	683b      	ldr	r3, [r7, #0]
 80110c8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80110ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80110cc:	2b1f      	cmp	r3, #31
 80110ce:	d801      	bhi.n	80110d4 <create_name+0xcc>
 80110d0:	2304      	movs	r3, #4
 80110d2:	e000      	b.n	80110d6 <create_name+0xce>
 80110d4:	2300      	movs	r3, #0
 80110d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 80110da:	697b      	ldr	r3, [r7, #20]
 80110dc:	2b01      	cmp	r3, #1
 80110de:	d109      	bne.n	80110f4 <create_name+0xec>
 80110e0:	697a      	ldr	r2, [r7, #20]
 80110e2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80110e6:	4413      	add	r3, r2
 80110e8:	005b      	lsls	r3, r3, #1
 80110ea:	68fa      	ldr	r2, [r7, #12]
 80110ec:	4413      	add	r3, r2
 80110ee:	881b      	ldrh	r3, [r3, #0]
 80110f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80110f2:	d015      	beq.n	8011120 <create_name+0x118>
 80110f4:	697b      	ldr	r3, [r7, #20]
 80110f6:	2b02      	cmp	r3, #2
 80110f8:	d14d      	bne.n	8011196 <create_name+0x18e>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 80110fa:	697a      	ldr	r2, [r7, #20]
 80110fc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011100:	4413      	add	r3, r2
 8011102:	005b      	lsls	r3, r3, #1
 8011104:	68fa      	ldr	r2, [r7, #12]
 8011106:	4413      	add	r3, r2
 8011108:	881b      	ldrh	r3, [r3, #0]
 801110a:	2b2e      	cmp	r3, #46	@ 0x2e
 801110c:	d143      	bne.n	8011196 <create_name+0x18e>
 801110e:	697a      	ldr	r2, [r7, #20]
 8011110:	4b82      	ldr	r3, [pc, #520]	@ (801131c <create_name+0x314>)
 8011112:	4413      	add	r3, r2
 8011114:	005b      	lsls	r3, r3, #1
 8011116:	68fa      	ldr	r2, [r7, #12]
 8011118:	4413      	add	r3, r2
 801111a:	881b      	ldrh	r3, [r3, #0]
 801111c:	2b2e      	cmp	r3, #46	@ 0x2e
 801111e:	d13a      	bne.n	8011196 <create_name+0x18e>
		lfn[di] = 0;
 8011120:	697b      	ldr	r3, [r7, #20]
 8011122:	005b      	lsls	r3, r3, #1
 8011124:	68fa      	ldr	r2, [r7, #12]
 8011126:	4413      	add	r3, r2
 8011128:	2200      	movs	r2, #0
 801112a:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 801112c:	2300      	movs	r3, #0
 801112e:	623b      	str	r3, [r7, #32]
 8011130:	e00f      	b.n	8011152 <create_name+0x14a>
			dp->fn[i] = (i < di) ? '.' : ' ';
 8011132:	6a3a      	ldr	r2, [r7, #32]
 8011134:	697b      	ldr	r3, [r7, #20]
 8011136:	429a      	cmp	r2, r3
 8011138:	d201      	bcs.n	801113e <create_name+0x136>
 801113a:	212e      	movs	r1, #46	@ 0x2e
 801113c:	e000      	b.n	8011140 <create_name+0x138>
 801113e:	2120      	movs	r1, #32
 8011140:	687a      	ldr	r2, [r7, #4]
 8011142:	6a3b      	ldr	r3, [r7, #32]
 8011144:	4413      	add	r3, r2
 8011146:	3324      	adds	r3, #36	@ 0x24
 8011148:	460a      	mov	r2, r1
 801114a:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 801114c:	6a3b      	ldr	r3, [r7, #32]
 801114e:	3301      	adds	r3, #1
 8011150:	623b      	str	r3, [r7, #32]
 8011152:	6a3b      	ldr	r3, [r7, #32]
 8011154:	2b0a      	cmp	r3, #10
 8011156:	d9ec      	bls.n	8011132 <create_name+0x12a>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 8011158:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801115c:	f043 0320 	orr.w	r3, r3, #32
 8011160:	b2d9      	uxtb	r1, r3
 8011162:	687a      	ldr	r2, [r7, #4]
 8011164:	6a3b      	ldr	r3, [r7, #32]
 8011166:	4413      	add	r3, r2
 8011168:	3324      	adds	r3, #36	@ 0x24
 801116a:	460a      	mov	r2, r1
 801116c:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 801116e:	2300      	movs	r3, #0
 8011170:	e14b      	b.n	801140a <create_name+0x402>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 8011172:	697a      	ldr	r2, [r7, #20]
 8011174:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011178:	4413      	add	r3, r2
 801117a:	005b      	lsls	r3, r3, #1
 801117c:	68fa      	ldr	r2, [r7, #12]
 801117e:	4413      	add	r3, r2
 8011180:	881b      	ldrh	r3, [r3, #0]
 8011182:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8011184:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011186:	2b20      	cmp	r3, #32
 8011188:	d002      	beq.n	8011190 <create_name+0x188>
 801118a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801118c:	2b2e      	cmp	r3, #46	@ 0x2e
 801118e:	d106      	bne.n	801119e <create_name+0x196>
		di--;
 8011190:	697b      	ldr	r3, [r7, #20]
 8011192:	3b01      	subs	r3, #1
 8011194:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8011196:	697b      	ldr	r3, [r7, #20]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d1ea      	bne.n	8011172 <create_name+0x16a>
 801119c:	e000      	b.n	80111a0 <create_name+0x198>
		if (w != ' ' && w != '.') break;
 801119e:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80111a0:	697b      	ldr	r3, [r7, #20]
 80111a2:	005b      	lsls	r3, r3, #1
 80111a4:	68fa      	ldr	r2, [r7, #12]
 80111a6:	4413      	add	r3, r2
 80111a8:	2200      	movs	r2, #0
 80111aa:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80111ac:	697b      	ldr	r3, [r7, #20]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d101      	bne.n	80111b6 <create_name+0x1ae>
 80111b2:	2306      	movs	r3, #6
 80111b4:	e129      	b.n	801140a <create_name+0x402>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	3324      	adds	r3, #36	@ 0x24
 80111ba:	220b      	movs	r2, #11
 80111bc:	2120      	movs	r1, #32
 80111be:	4618      	mov	r0, r3
 80111c0:	f7fe fc11 	bl	800f9e6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80111c4:	2300      	movs	r3, #0
 80111c6:	61bb      	str	r3, [r7, #24]
 80111c8:	e002      	b.n	80111d0 <create_name+0x1c8>
 80111ca:	69bb      	ldr	r3, [r7, #24]
 80111cc:	3301      	adds	r3, #1
 80111ce:	61bb      	str	r3, [r7, #24]
 80111d0:	69bb      	ldr	r3, [r7, #24]
 80111d2:	005b      	lsls	r3, r3, #1
 80111d4:	68fa      	ldr	r2, [r7, #12]
 80111d6:	4413      	add	r3, r2
 80111d8:	881b      	ldrh	r3, [r3, #0]
 80111da:	2b20      	cmp	r3, #32
 80111dc:	d0f5      	beq.n	80111ca <create_name+0x1c2>
 80111de:	69bb      	ldr	r3, [r7, #24]
 80111e0:	005b      	lsls	r3, r3, #1
 80111e2:	68fa      	ldr	r2, [r7, #12]
 80111e4:	4413      	add	r3, r2
 80111e6:	881b      	ldrh	r3, [r3, #0]
 80111e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80111ea:	d0ee      	beq.n	80111ca <create_name+0x1c2>
	if (si) cf |= NS_LOSS | NS_LFN;
 80111ec:	69bb      	ldr	r3, [r7, #24]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d009      	beq.n	8011206 <create_name+0x1fe>
 80111f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80111f6:	f043 0303 	orr.w	r3, r3, #3
 80111fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80111fe:	e002      	b.n	8011206 <create_name+0x1fe>
 8011200:	697b      	ldr	r3, [r7, #20]
 8011202:	3b01      	subs	r3, #1
 8011204:	617b      	str	r3, [r7, #20]
 8011206:	697b      	ldr	r3, [r7, #20]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d009      	beq.n	8011220 <create_name+0x218>
 801120c:	697a      	ldr	r2, [r7, #20]
 801120e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011212:	4413      	add	r3, r2
 8011214:	005b      	lsls	r3, r3, #1
 8011216:	68fa      	ldr	r2, [r7, #12]
 8011218:	4413      	add	r3, r2
 801121a:	881b      	ldrh	r3, [r3, #0]
 801121c:	2b2e      	cmp	r3, #46	@ 0x2e
 801121e:	d1ef      	bne.n	8011200 <create_name+0x1f8>

	i = b = 0; ni = 8;
 8011220:	2300      	movs	r3, #0
 8011222:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8011226:	2300      	movs	r3, #0
 8011228:	623b      	str	r3, [r7, #32]
 801122a:	2308      	movs	r3, #8
 801122c:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801122e:	69bb      	ldr	r3, [r7, #24]
 8011230:	1c5a      	adds	r2, r3, #1
 8011232:	61ba      	str	r2, [r7, #24]
 8011234:	005b      	lsls	r3, r3, #1
 8011236:	68fa      	ldr	r2, [r7, #12]
 8011238:	4413      	add	r3, r2
 801123a:	881b      	ldrh	r3, [r3, #0]
 801123c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 801123e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011240:	2b00      	cmp	r3, #0
 8011242:	f000 8098 	beq.w	8011376 <create_name+0x36e>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8011246:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011248:	2b20      	cmp	r3, #32
 801124a:	d006      	beq.n	801125a <create_name+0x252>
 801124c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801124e:	2b2e      	cmp	r3, #46	@ 0x2e
 8011250:	d10a      	bne.n	8011268 <create_name+0x260>
 8011252:	69ba      	ldr	r2, [r7, #24]
 8011254:	697b      	ldr	r3, [r7, #20]
 8011256:	429a      	cmp	r2, r3
 8011258:	d006      	beq.n	8011268 <create_name+0x260>
			cf |= NS_LOSS | NS_LFN; continue;
 801125a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801125e:	f043 0303 	orr.w	r3, r3, #3
 8011262:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011266:	e085      	b.n	8011374 <create_name+0x36c>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8011268:	6a3a      	ldr	r2, [r7, #32]
 801126a:	69fb      	ldr	r3, [r7, #28]
 801126c:	429a      	cmp	r2, r3
 801126e:	d203      	bcs.n	8011278 <create_name+0x270>
 8011270:	69ba      	ldr	r2, [r7, #24]
 8011272:	697b      	ldr	r3, [r7, #20]
 8011274:	429a      	cmp	r2, r3
 8011276:	d123      	bne.n	80112c0 <create_name+0x2b8>
			if (ni == 11) {				/* Long extension */
 8011278:	69fb      	ldr	r3, [r7, #28]
 801127a:	2b0b      	cmp	r3, #11
 801127c:	d106      	bne.n	801128c <create_name+0x284>
				cf |= NS_LOSS | NS_LFN; break;
 801127e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011282:	f043 0303 	orr.w	r3, r3, #3
 8011286:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801128a:	e077      	b.n	801137c <create_name+0x374>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801128c:	69ba      	ldr	r2, [r7, #24]
 801128e:	697b      	ldr	r3, [r7, #20]
 8011290:	429a      	cmp	r2, r3
 8011292:	d005      	beq.n	80112a0 <create_name+0x298>
 8011294:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011298:	f043 0303 	orr.w	r3, r3, #3
 801129c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80112a0:	69ba      	ldr	r2, [r7, #24]
 80112a2:	697b      	ldr	r3, [r7, #20]
 80112a4:	429a      	cmp	r2, r3
 80112a6:	d868      	bhi.n	801137a <create_name+0x372>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80112a8:	697b      	ldr	r3, [r7, #20]
 80112aa:	61bb      	str	r3, [r7, #24]
 80112ac:	2308      	movs	r3, #8
 80112ae:	623b      	str	r3, [r7, #32]
 80112b0:	230b      	movs	r3, #11
 80112b2:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80112b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80112b8:	009b      	lsls	r3, r3, #2
 80112ba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80112be:	e059      	b.n	8011374 <create_name+0x36c>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80112c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80112c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80112c4:	d914      	bls.n	80112f0 <create_name+0x2e8>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80112c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80112c8:	2100      	movs	r1, #0
 80112ca:	4618      	mov	r0, r3
 80112cc:	f001 fdf0 	bl	8012eb0 <ff_convert>
 80112d0:	4603      	mov	r3, r0
 80112d2:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80112d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d004      	beq.n	80112e4 <create_name+0x2dc>
 80112da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80112dc:	3b80      	subs	r3, #128	@ 0x80
 80112de:	4a10      	ldr	r2, [pc, #64]	@ (8011320 <create_name+0x318>)
 80112e0:	5cd3      	ldrb	r3, [r2, r3]
 80112e2:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80112e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80112e8:	f043 0302 	orr.w	r3, r3, #2
 80112ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80112f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d007      	beq.n	8011306 <create_name+0x2fe>
 80112f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80112f8:	4619      	mov	r1, r3
 80112fa:	480a      	ldr	r0, [pc, #40]	@ (8011324 <create_name+0x31c>)
 80112fc:	f7fe fbb5 	bl	800fa6a <chk_chr>
 8011300:	4603      	mov	r3, r0
 8011302:	2b00      	cmp	r3, #0
 8011304:	d010      	beq.n	8011328 <create_name+0x320>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8011306:	235f      	movs	r3, #95	@ 0x5f
 8011308:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801130a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801130e:	f043 0303 	orr.w	r3, r3, #3
 8011312:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011316:	e023      	b.n	8011360 <create_name+0x358>
 8011318:	080133c8 	.word	0x080133c8
 801131c:	7ffffffe 	.word	0x7ffffffe
 8011320:	08013450 	.word	0x08013450
 8011324:	080133d4 	.word	0x080133d4
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8011328:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801132a:	2b40      	cmp	r3, #64	@ 0x40
 801132c:	d909      	bls.n	8011342 <create_name+0x33a>
 801132e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011330:	2b5a      	cmp	r3, #90	@ 0x5a
 8011332:	d806      	bhi.n	8011342 <create_name+0x33a>
					b |= 2;
 8011334:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011338:	f043 0302 	orr.w	r3, r3, #2
 801133c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8011340:	e00e      	b.n	8011360 <create_name+0x358>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8011342:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011344:	2b60      	cmp	r3, #96	@ 0x60
 8011346:	d90b      	bls.n	8011360 <create_name+0x358>
 8011348:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801134a:	2b7a      	cmp	r3, #122	@ 0x7a
 801134c:	d808      	bhi.n	8011360 <create_name+0x358>
						b |= 1; w -= 0x20;
 801134e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011352:	f043 0301 	orr.w	r3, r3, #1
 8011356:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801135a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801135c:	3b20      	subs	r3, #32
 801135e:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8011360:	6a3b      	ldr	r3, [r7, #32]
 8011362:	1c5a      	adds	r2, r3, #1
 8011364:	623a      	str	r2, [r7, #32]
 8011366:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011368:	b2d1      	uxtb	r1, r2
 801136a:	687a      	ldr	r2, [r7, #4]
 801136c:	4413      	add	r3, r2
 801136e:	460a      	mov	r2, r1
 8011370:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8011374:	e75b      	b.n	801122e <create_name+0x226>
		if (!w) break;					/* Break on end of the LFN */
 8011376:	bf00      	nop
 8011378:	e000      	b.n	801137c <create_name+0x374>
			if (si > di) break;			/* No extension */
 801137a:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8011382:	2be5      	cmp	r3, #229	@ 0xe5
 8011384:	d103      	bne.n	801138e <create_name+0x386>
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	2205      	movs	r2, #5
 801138a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 801138e:	69fb      	ldr	r3, [r7, #28]
 8011390:	2b08      	cmp	r3, #8
 8011392:	d104      	bne.n	801139e <create_name+0x396>
 8011394:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011398:	009b      	lsls	r3, r3, #2
 801139a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801139e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80113a2:	f003 030c 	and.w	r3, r3, #12
 80113a6:	2b0c      	cmp	r3, #12
 80113a8:	d005      	beq.n	80113b6 <create_name+0x3ae>
 80113aa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80113ae:	f003 0303 	and.w	r3, r3, #3
 80113b2:	2b03      	cmp	r3, #3
 80113b4:	d105      	bne.n	80113c2 <create_name+0x3ba>
 80113b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80113ba:	f043 0302 	orr.w	r3, r3, #2
 80113be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80113c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80113c6:	f003 0302 	and.w	r3, r3, #2
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d117      	bne.n	80113fe <create_name+0x3f6>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80113ce:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80113d2:	f003 0303 	and.w	r3, r3, #3
 80113d6:	2b01      	cmp	r3, #1
 80113d8:	d105      	bne.n	80113e6 <create_name+0x3de>
 80113da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80113de:	f043 0310 	orr.w	r3, r3, #16
 80113e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80113e6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80113ea:	f003 030c 	and.w	r3, r3, #12
 80113ee:	2b04      	cmp	r3, #4
 80113f0:	d105      	bne.n	80113fe <create_name+0x3f6>
 80113f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80113f6:	f043 0308 	orr.w	r3, r3, #8
 80113fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8011404:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8011408:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801140a:	4618      	mov	r0, r3
 801140c:	3728      	adds	r7, #40	@ 0x28
 801140e:	46bd      	mov	sp, r7
 8011410:	bd80      	pop	{r7, pc}
 8011412:	bf00      	nop

08011414 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8011414:	b580      	push	{r7, lr}
 8011416:	b086      	sub	sp, #24
 8011418:	af00      	add	r7, sp, #0
 801141a:	6078      	str	r0, [r7, #4]
 801141c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8011422:	693b      	ldr	r3, [r7, #16]
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8011428:	683b      	ldr	r3, [r7, #0]
 801142a:	781b      	ldrb	r3, [r3, #0]
 801142c:	2b2f      	cmp	r3, #47	@ 0x2f
 801142e:	d00b      	beq.n	8011448 <follow_path+0x34>
 8011430:	683b      	ldr	r3, [r7, #0]
 8011432:	781b      	ldrb	r3, [r3, #0]
 8011434:	2b5c      	cmp	r3, #92	@ 0x5c
 8011436:	d007      	beq.n	8011448 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	69da      	ldr	r2, [r3, #28]
 801143c:	693b      	ldr	r3, [r7, #16]
 801143e:	609a      	str	r2, [r3, #8]
 8011440:	e00d      	b.n	801145e <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8011442:	683b      	ldr	r3, [r7, #0]
 8011444:	3301      	adds	r3, #1
 8011446:	603b      	str	r3, [r7, #0]
 8011448:	683b      	ldr	r3, [r7, #0]
 801144a:	781b      	ldrb	r3, [r3, #0]
 801144c:	2b2f      	cmp	r3, #47	@ 0x2f
 801144e:	d0f8      	beq.n	8011442 <follow_path+0x2e>
 8011450:	683b      	ldr	r3, [r7, #0]
 8011452:	781b      	ldrb	r3, [r3, #0]
 8011454:	2b5c      	cmp	r3, #92	@ 0x5c
 8011456:	d0f4      	beq.n	8011442 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8011458:	693b      	ldr	r3, [r7, #16]
 801145a:	2200      	movs	r2, #0
 801145c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801145e:	683b      	ldr	r3, [r7, #0]
 8011460:	781b      	ldrb	r3, [r3, #0]
 8011462:	2b1f      	cmp	r3, #31
 8011464:	d80a      	bhi.n	801147c <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	2280      	movs	r2, #128	@ 0x80
 801146a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801146e:	2100      	movs	r1, #0
 8011470:	6878      	ldr	r0, [r7, #4]
 8011472:	f7ff f8a4 	bl	80105be <dir_sdi>
 8011476:	4603      	mov	r3, r0
 8011478:	75fb      	strb	r3, [r7, #23]
 801147a:	e05b      	b.n	8011534 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801147c:	463b      	mov	r3, r7
 801147e:	4619      	mov	r1, r3
 8011480:	6878      	ldr	r0, [r7, #4]
 8011482:	f7ff fdc1 	bl	8011008 <create_name>
 8011486:	4603      	mov	r3, r0
 8011488:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801148a:	7dfb      	ldrb	r3, [r7, #23]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d14c      	bne.n	801152a <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8011490:	6878      	ldr	r0, [r7, #4]
 8011492:	f7ff fc00 	bl	8010c96 <dir_find>
 8011496:	4603      	mov	r3, r0
 8011498:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80114a0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80114a2:	7dfb      	ldrb	r3, [r7, #23]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d01b      	beq.n	80114e0 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80114a8:	7dfb      	ldrb	r3, [r7, #23]
 80114aa:	2b04      	cmp	r3, #4
 80114ac:	d13f      	bne.n	801152e <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 80114ae:	7afb      	ldrb	r3, [r7, #11]
 80114b0:	f003 0320 	and.w	r3, r3, #32
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d00b      	beq.n	80114d0 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80114b8:	7afb      	ldrb	r3, [r7, #11]
 80114ba:	f003 0304 	and.w	r3, r3, #4
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d031      	beq.n	8011526 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	2280      	movs	r2, #128	@ 0x80
 80114c6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
						res = FR_OK;
 80114ca:	2300      	movs	r3, #0
 80114cc:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 80114ce:	e02e      	b.n	801152e <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80114d0:	7afb      	ldrb	r3, [r7, #11]
 80114d2:	f003 0304 	and.w	r3, r3, #4
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d129      	bne.n	801152e <follow_path+0x11a>
 80114da:	2305      	movs	r3, #5
 80114dc:	75fb      	strb	r3, [r7, #23]
				break;
 80114de:	e026      	b.n	801152e <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80114e0:	7afb      	ldrb	r3, [r7, #11]
 80114e2:	f003 0304 	and.w	r3, r3, #4
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d123      	bne.n	8011532 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80114ea:	693b      	ldr	r3, [r7, #16]
 80114ec:	799b      	ldrb	r3, [r3, #6]
 80114ee:	f003 0310 	and.w	r3, r3, #16
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d102      	bne.n	80114fc <follow_path+0xe8>
				res = FR_NO_PATH; break;
 80114f6:	2305      	movs	r3, #5
 80114f8:	75fb      	strb	r3, [r7, #23]
 80114fa:	e01b      	b.n	8011534 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	695b      	ldr	r3, [r3, #20]
 8011506:	68fa      	ldr	r2, [r7, #12]
 8011508:	8992      	ldrh	r2, [r2, #12]
 801150a:	fbb3 f0f2 	udiv	r0, r3, r2
 801150e:	fb00 f202 	mul.w	r2, r0, r2
 8011512:	1a9b      	subs	r3, r3, r2
 8011514:	440b      	add	r3, r1
 8011516:	4619      	mov	r1, r3
 8011518:	68f8      	ldr	r0, [r7, #12]
 801151a:	f7ff f9f6 	bl	801090a <ld_clust>
 801151e:	4602      	mov	r2, r0
 8011520:	693b      	ldr	r3, [r7, #16]
 8011522:	609a      	str	r2, [r3, #8]
 8011524:	e7aa      	b.n	801147c <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8011526:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011528:	e7a8      	b.n	801147c <follow_path+0x68>
			if (res != FR_OK) break;
 801152a:	bf00      	nop
 801152c:	e002      	b.n	8011534 <follow_path+0x120>
				break;
 801152e:	bf00      	nop
 8011530:	e000      	b.n	8011534 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011532:	bf00      	nop
			}
		}
	}

	return res;
 8011534:	7dfb      	ldrb	r3, [r7, #23]
}
 8011536:	4618      	mov	r0, r3
 8011538:	3718      	adds	r7, #24
 801153a:	46bd      	mov	sp, r7
 801153c:	bd80      	pop	{r7, pc}

0801153e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801153e:	b480      	push	{r7}
 8011540:	b087      	sub	sp, #28
 8011542:	af00      	add	r7, sp, #0
 8011544:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8011546:	f04f 33ff 	mov.w	r3, #4294967295
 801154a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d031      	beq.n	80115b8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	617b      	str	r3, [r7, #20]
 801155a:	e002      	b.n	8011562 <get_ldnumber+0x24>
 801155c:	697b      	ldr	r3, [r7, #20]
 801155e:	3301      	adds	r3, #1
 8011560:	617b      	str	r3, [r7, #20]
 8011562:	697b      	ldr	r3, [r7, #20]
 8011564:	781b      	ldrb	r3, [r3, #0]
 8011566:	2b1f      	cmp	r3, #31
 8011568:	d903      	bls.n	8011572 <get_ldnumber+0x34>
 801156a:	697b      	ldr	r3, [r7, #20]
 801156c:	781b      	ldrb	r3, [r3, #0]
 801156e:	2b3a      	cmp	r3, #58	@ 0x3a
 8011570:	d1f4      	bne.n	801155c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8011572:	697b      	ldr	r3, [r7, #20]
 8011574:	781b      	ldrb	r3, [r3, #0]
 8011576:	2b3a      	cmp	r3, #58	@ 0x3a
 8011578:	d11c      	bne.n	80115b4 <get_ldnumber+0x76>
			tp = *path;
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	1c5a      	adds	r2, r3, #1
 8011584:	60fa      	str	r2, [r7, #12]
 8011586:	781b      	ldrb	r3, [r3, #0]
 8011588:	3b30      	subs	r3, #48	@ 0x30
 801158a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801158c:	68bb      	ldr	r3, [r7, #8]
 801158e:	2b09      	cmp	r3, #9
 8011590:	d80e      	bhi.n	80115b0 <get_ldnumber+0x72>
 8011592:	68fa      	ldr	r2, [r7, #12]
 8011594:	697b      	ldr	r3, [r7, #20]
 8011596:	429a      	cmp	r2, r3
 8011598:	d10a      	bne.n	80115b0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801159a:	68bb      	ldr	r3, [r7, #8]
 801159c:	2b00      	cmp	r3, #0
 801159e:	d107      	bne.n	80115b0 <get_ldnumber+0x72>
					vol = (int)i;
 80115a0:	68bb      	ldr	r3, [r7, #8]
 80115a2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80115a4:	697b      	ldr	r3, [r7, #20]
 80115a6:	3301      	adds	r3, #1
 80115a8:	617b      	str	r3, [r7, #20]
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	697a      	ldr	r2, [r7, #20]
 80115ae:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80115b0:	693b      	ldr	r3, [r7, #16]
 80115b2:	e002      	b.n	80115ba <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80115b4:	2300      	movs	r3, #0
 80115b6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80115b8:	693b      	ldr	r3, [r7, #16]
}
 80115ba:	4618      	mov	r0, r3
 80115bc:	371c      	adds	r7, #28
 80115be:	46bd      	mov	sp, r7
 80115c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c4:	4770      	bx	lr
	...

080115c8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80115c8:	b580      	push	{r7, lr}
 80115ca:	b082      	sub	sp, #8
 80115cc:	af00      	add	r7, sp, #0
 80115ce:	6078      	str	r0, [r7, #4]
 80115d0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	2200      	movs	r2, #0
 80115d6:	70da      	strb	r2, [r3, #3]
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	f04f 32ff 	mov.w	r2, #4294967295
 80115de:	639a      	str	r2, [r3, #56]	@ 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80115e0:	6839      	ldr	r1, [r7, #0]
 80115e2:	6878      	ldr	r0, [r7, #4]
 80115e4:	f7fe fc0c 	bl	800fe00 <move_window>
 80115e8:	4603      	mov	r3, r0
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d001      	beq.n	80115f2 <check_fs+0x2a>
 80115ee:	2304      	movs	r3, #4
 80115f0:	e038      	b.n	8011664 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	333c      	adds	r3, #60	@ 0x3c
 80115f6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80115fa:	4618      	mov	r0, r3
 80115fc:	f7fe f950 	bl	800f8a0 <ld_word>
 8011600:	4603      	mov	r3, r0
 8011602:	461a      	mov	r2, r3
 8011604:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8011608:	429a      	cmp	r2, r3
 801160a:	d001      	beq.n	8011610 <check_fs+0x48>
 801160c:	2303      	movs	r3, #3
 801160e:	e029      	b.n	8011664 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011616:	2be9      	cmp	r3, #233	@ 0xe9
 8011618:	d009      	beq.n	801162e <check_fs+0x66>
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011620:	2beb      	cmp	r3, #235	@ 0xeb
 8011622:	d11e      	bne.n	8011662 <check_fs+0x9a>
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 801162a:	2b90      	cmp	r3, #144	@ 0x90
 801162c:	d119      	bne.n	8011662 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	333c      	adds	r3, #60	@ 0x3c
 8011632:	3336      	adds	r3, #54	@ 0x36
 8011634:	4618      	mov	r0, r3
 8011636:	f7fe f94b 	bl	800f8d0 <ld_dword>
 801163a:	4603      	mov	r3, r0
 801163c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8011640:	4a0a      	ldr	r2, [pc, #40]	@ (801166c <check_fs+0xa4>)
 8011642:	4293      	cmp	r3, r2
 8011644:	d101      	bne.n	801164a <check_fs+0x82>
 8011646:	2300      	movs	r3, #0
 8011648:	e00c      	b.n	8011664 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	333c      	adds	r3, #60	@ 0x3c
 801164e:	3352      	adds	r3, #82	@ 0x52
 8011650:	4618      	mov	r0, r3
 8011652:	f7fe f93d 	bl	800f8d0 <ld_dword>
 8011656:	4603      	mov	r3, r0
 8011658:	4a05      	ldr	r2, [pc, #20]	@ (8011670 <check_fs+0xa8>)
 801165a:	4293      	cmp	r3, r2
 801165c:	d101      	bne.n	8011662 <check_fs+0x9a>
 801165e:	2300      	movs	r3, #0
 8011660:	e000      	b.n	8011664 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8011662:	2302      	movs	r3, #2
}
 8011664:	4618      	mov	r0, r3
 8011666:	3708      	adds	r7, #8
 8011668:	46bd      	mov	sp, r7
 801166a:	bd80      	pop	{r7, pc}
 801166c:	00544146 	.word	0x00544146
 8011670:	33544146 	.word	0x33544146

08011674 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8011674:	b580      	push	{r7, lr}
 8011676:	b096      	sub	sp, #88	@ 0x58
 8011678:	af00      	add	r7, sp, #0
 801167a:	60f8      	str	r0, [r7, #12]
 801167c:	60b9      	str	r1, [r7, #8]
 801167e:	4613      	mov	r3, r2
 8011680:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8011682:	68bb      	ldr	r3, [r7, #8]
 8011684:	2200      	movs	r2, #0
 8011686:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011688:	68f8      	ldr	r0, [r7, #12]
 801168a:	f7ff ff58 	bl	801153e <get_ldnumber>
 801168e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8011690:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011692:	2b00      	cmp	r3, #0
 8011694:	da01      	bge.n	801169a <find_volume+0x26>
 8011696:	230b      	movs	r3, #11
 8011698:	e268      	b.n	8011b6c <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801169a:	4a9f      	ldr	r2, [pc, #636]	@ (8011918 <find_volume+0x2a4>)
 801169c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801169e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80116a2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80116a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d101      	bne.n	80116ae <find_volume+0x3a>
 80116aa:	230c      	movs	r3, #12
 80116ac:	e25e      	b.n	8011b6c <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80116ae:	68bb      	ldr	r3, [r7, #8]
 80116b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80116b2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80116b4:	79fb      	ldrb	r3, [r7, #7]
 80116b6:	f023 0301 	bic.w	r3, r3, #1
 80116ba:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80116bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116be:	781b      	ldrb	r3, [r3, #0]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d01a      	beq.n	80116fa <find_volume+0x86>
		stat = disk_status(fs->drv);
 80116c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116c6:	785b      	ldrb	r3, [r3, #1]
 80116c8:	4618      	mov	r0, r3
 80116ca:	f7fe f849 	bl	800f760 <disk_status>
 80116ce:	4603      	mov	r3, r0
 80116d0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80116d4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80116d8:	f003 0301 	and.w	r3, r3, #1
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d10c      	bne.n	80116fa <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80116e0:	79fb      	ldrb	r3, [r7, #7]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d007      	beq.n	80116f6 <find_volume+0x82>
 80116e6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80116ea:	f003 0304 	and.w	r3, r3, #4
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d001      	beq.n	80116f6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80116f2:	230a      	movs	r3, #10
 80116f4:	e23a      	b.n	8011b6c <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 80116f6:	2300      	movs	r3, #0
 80116f8:	e238      	b.n	8011b6c <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80116fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116fc:	2200      	movs	r2, #0
 80116fe:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011700:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011702:	b2da      	uxtb	r2, r3
 8011704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011706:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801170a:	785b      	ldrb	r3, [r3, #1]
 801170c:	4618      	mov	r0, r3
 801170e:	f7fe f841 	bl	800f794 <disk_initialize>
 8011712:	4603      	mov	r3, r0
 8011714:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8011718:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801171c:	f003 0301 	and.w	r3, r3, #1
 8011720:	2b00      	cmp	r3, #0
 8011722:	d001      	beq.n	8011728 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011724:	2303      	movs	r3, #3
 8011726:	e221      	b.n	8011b6c <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8011728:	79fb      	ldrb	r3, [r7, #7]
 801172a:	2b00      	cmp	r3, #0
 801172c:	d007      	beq.n	801173e <find_volume+0xca>
 801172e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011732:	f003 0304 	and.w	r3, r3, #4
 8011736:	2b00      	cmp	r3, #0
 8011738:	d001      	beq.n	801173e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801173a:	230a      	movs	r3, #10
 801173c:	e216      	b.n	8011b6c <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801173e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011740:	7858      	ldrb	r0, [r3, #1]
 8011742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011744:	330c      	adds	r3, #12
 8011746:	461a      	mov	r2, r3
 8011748:	2102      	movs	r1, #2
 801174a:	f7fe f88b 	bl	800f864 <disk_ioctl>
 801174e:	4603      	mov	r3, r0
 8011750:	2b00      	cmp	r3, #0
 8011752:	d001      	beq.n	8011758 <find_volume+0xe4>
 8011754:	2301      	movs	r3, #1
 8011756:	e209      	b.n	8011b6c <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8011758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801175a:	899b      	ldrh	r3, [r3, #12]
 801175c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011760:	d80d      	bhi.n	801177e <find_volume+0x10a>
 8011762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011764:	899b      	ldrh	r3, [r3, #12]
 8011766:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801176a:	d308      	bcc.n	801177e <find_volume+0x10a>
 801176c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801176e:	899b      	ldrh	r3, [r3, #12]
 8011770:	461a      	mov	r2, r3
 8011772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011774:	899b      	ldrh	r3, [r3, #12]
 8011776:	3b01      	subs	r3, #1
 8011778:	4013      	ands	r3, r2
 801177a:	2b00      	cmp	r3, #0
 801177c:	d001      	beq.n	8011782 <find_volume+0x10e>
 801177e:	2301      	movs	r3, #1
 8011780:	e1f4      	b.n	8011b6c <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8011782:	2300      	movs	r3, #0
 8011784:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8011786:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011788:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801178a:	f7ff ff1d 	bl	80115c8 <check_fs>
 801178e:	4603      	mov	r3, r0
 8011790:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8011794:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011798:	2b02      	cmp	r3, #2
 801179a:	d149      	bne.n	8011830 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801179c:	2300      	movs	r3, #0
 801179e:	643b      	str	r3, [r7, #64]	@ 0x40
 80117a0:	e01e      	b.n	80117e0 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80117a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117a4:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80117a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80117aa:	011b      	lsls	r3, r3, #4
 80117ac:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80117b0:	4413      	add	r3, r2
 80117b2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80117b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117b6:	3304      	adds	r3, #4
 80117b8:	781b      	ldrb	r3, [r3, #0]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d006      	beq.n	80117cc <find_volume+0x158>
 80117be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117c0:	3308      	adds	r3, #8
 80117c2:	4618      	mov	r0, r3
 80117c4:	f7fe f884 	bl	800f8d0 <ld_dword>
 80117c8:	4602      	mov	r2, r0
 80117ca:	e000      	b.n	80117ce <find_volume+0x15a>
 80117cc:	2200      	movs	r2, #0
 80117ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80117d0:	009b      	lsls	r3, r3, #2
 80117d2:	3358      	adds	r3, #88	@ 0x58
 80117d4:	443b      	add	r3, r7
 80117d6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80117da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80117dc:	3301      	adds	r3, #1
 80117de:	643b      	str	r3, [r7, #64]	@ 0x40
 80117e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80117e2:	2b03      	cmp	r3, #3
 80117e4:	d9dd      	bls.n	80117a2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80117e6:	2300      	movs	r3, #0
 80117e8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80117ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d002      	beq.n	80117f6 <find_volume+0x182>
 80117f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80117f2:	3b01      	subs	r3, #1
 80117f4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80117f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80117f8:	009b      	lsls	r3, r3, #2
 80117fa:	3358      	adds	r3, #88	@ 0x58
 80117fc:	443b      	add	r3, r7
 80117fe:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011802:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011804:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011806:	2b00      	cmp	r3, #0
 8011808:	d005      	beq.n	8011816 <find_volume+0x1a2>
 801180a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801180c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801180e:	f7ff fedb 	bl	80115c8 <check_fs>
 8011812:	4603      	mov	r3, r0
 8011814:	e000      	b.n	8011818 <find_volume+0x1a4>
 8011816:	2303      	movs	r3, #3
 8011818:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801181c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011820:	2b01      	cmp	r3, #1
 8011822:	d905      	bls.n	8011830 <find_volume+0x1bc>
 8011824:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011826:	3301      	adds	r3, #1
 8011828:	643b      	str	r3, [r7, #64]	@ 0x40
 801182a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801182c:	2b03      	cmp	r3, #3
 801182e:	d9e2      	bls.n	80117f6 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011830:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011834:	2b04      	cmp	r3, #4
 8011836:	d101      	bne.n	801183c <find_volume+0x1c8>
 8011838:	2301      	movs	r3, #1
 801183a:	e197      	b.n	8011b6c <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801183c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011840:	2b01      	cmp	r3, #1
 8011842:	d901      	bls.n	8011848 <find_volume+0x1d4>
 8011844:	230d      	movs	r3, #13
 8011846:	e191      	b.n	8011b6c <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801184a:	333c      	adds	r3, #60	@ 0x3c
 801184c:	330b      	adds	r3, #11
 801184e:	4618      	mov	r0, r3
 8011850:	f7fe f826 	bl	800f8a0 <ld_word>
 8011854:	4603      	mov	r3, r0
 8011856:	461a      	mov	r2, r3
 8011858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801185a:	899b      	ldrh	r3, [r3, #12]
 801185c:	429a      	cmp	r2, r3
 801185e:	d001      	beq.n	8011864 <find_volume+0x1f0>
 8011860:	230d      	movs	r3, #13
 8011862:	e183      	b.n	8011b6c <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8011864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011866:	333c      	adds	r3, #60	@ 0x3c
 8011868:	3316      	adds	r3, #22
 801186a:	4618      	mov	r0, r3
 801186c:	f7fe f818 	bl	800f8a0 <ld_word>
 8011870:	4603      	mov	r3, r0
 8011872:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011874:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011876:	2b00      	cmp	r3, #0
 8011878:	d106      	bne.n	8011888 <find_volume+0x214>
 801187a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801187c:	333c      	adds	r3, #60	@ 0x3c
 801187e:	3324      	adds	r3, #36	@ 0x24
 8011880:	4618      	mov	r0, r3
 8011882:	f7fe f825 	bl	800f8d0 <ld_dword>
 8011886:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8011888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801188a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801188c:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801188e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011890:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 8011894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011896:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801189a:	789b      	ldrb	r3, [r3, #2]
 801189c:	2b01      	cmp	r3, #1
 801189e:	d005      	beq.n	80118ac <find_volume+0x238>
 80118a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118a2:	789b      	ldrb	r3, [r3, #2]
 80118a4:	2b02      	cmp	r3, #2
 80118a6:	d001      	beq.n	80118ac <find_volume+0x238>
 80118a8:	230d      	movs	r3, #13
 80118aa:	e15f      	b.n	8011b6c <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80118ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118ae:	789b      	ldrb	r3, [r3, #2]
 80118b0:	461a      	mov	r2, r3
 80118b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80118b4:	fb02 f303 	mul.w	r3, r2, r3
 80118b8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80118ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118bc:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80118c0:	461a      	mov	r2, r3
 80118c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118c4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80118c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118c8:	895b      	ldrh	r3, [r3, #10]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d008      	beq.n	80118e0 <find_volume+0x26c>
 80118ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118d0:	895b      	ldrh	r3, [r3, #10]
 80118d2:	461a      	mov	r2, r3
 80118d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118d6:	895b      	ldrh	r3, [r3, #10]
 80118d8:	3b01      	subs	r3, #1
 80118da:	4013      	ands	r3, r2
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d001      	beq.n	80118e4 <find_volume+0x270>
 80118e0:	230d      	movs	r3, #13
 80118e2:	e143      	b.n	8011b6c <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80118e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118e6:	333c      	adds	r3, #60	@ 0x3c
 80118e8:	3311      	adds	r3, #17
 80118ea:	4618      	mov	r0, r3
 80118ec:	f7fd ffd8 	bl	800f8a0 <ld_word>
 80118f0:	4603      	mov	r3, r0
 80118f2:	461a      	mov	r2, r3
 80118f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118f6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80118f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118fa:	891b      	ldrh	r3, [r3, #8]
 80118fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80118fe:	8992      	ldrh	r2, [r2, #12]
 8011900:	0952      	lsrs	r2, r2, #5
 8011902:	b292      	uxth	r2, r2
 8011904:	fbb3 f1f2 	udiv	r1, r3, r2
 8011908:	fb01 f202 	mul.w	r2, r1, r2
 801190c:	1a9b      	subs	r3, r3, r2
 801190e:	b29b      	uxth	r3, r3
 8011910:	2b00      	cmp	r3, #0
 8011912:	d003      	beq.n	801191c <find_volume+0x2a8>
 8011914:	230d      	movs	r3, #13
 8011916:	e129      	b.n	8011b6c <find_volume+0x4f8>
 8011918:	24002ad4 	.word	0x24002ad4

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801191c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801191e:	333c      	adds	r3, #60	@ 0x3c
 8011920:	3313      	adds	r3, #19
 8011922:	4618      	mov	r0, r3
 8011924:	f7fd ffbc 	bl	800f8a0 <ld_word>
 8011928:	4603      	mov	r3, r0
 801192a:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801192c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801192e:	2b00      	cmp	r3, #0
 8011930:	d106      	bne.n	8011940 <find_volume+0x2cc>
 8011932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011934:	333c      	adds	r3, #60	@ 0x3c
 8011936:	3320      	adds	r3, #32
 8011938:	4618      	mov	r0, r3
 801193a:	f7fd ffc9 	bl	800f8d0 <ld_dword>
 801193e:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8011940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011942:	333c      	adds	r3, #60	@ 0x3c
 8011944:	330e      	adds	r3, #14
 8011946:	4618      	mov	r0, r3
 8011948:	f7fd ffaa 	bl	800f8a0 <ld_word>
 801194c:	4603      	mov	r3, r0
 801194e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8011950:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011952:	2b00      	cmp	r3, #0
 8011954:	d101      	bne.n	801195a <find_volume+0x2e6>
 8011956:	230d      	movs	r3, #13
 8011958:	e108      	b.n	8011b6c <find_volume+0x4f8>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801195a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801195c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801195e:	4413      	add	r3, r2
 8011960:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011962:	8911      	ldrh	r1, [r2, #8]
 8011964:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011966:	8992      	ldrh	r2, [r2, #12]
 8011968:	0952      	lsrs	r2, r2, #5
 801196a:	b292      	uxth	r2, r2
 801196c:	fbb1 f2f2 	udiv	r2, r1, r2
 8011970:	b292      	uxth	r2, r2
 8011972:	4413      	add	r3, r2
 8011974:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8011976:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801197a:	429a      	cmp	r2, r3
 801197c:	d201      	bcs.n	8011982 <find_volume+0x30e>
 801197e:	230d      	movs	r3, #13
 8011980:	e0f4      	b.n	8011b6c <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8011982:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011986:	1ad3      	subs	r3, r2, r3
 8011988:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801198a:	8952      	ldrh	r2, [r2, #10]
 801198c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011990:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011994:	2b00      	cmp	r3, #0
 8011996:	d101      	bne.n	801199c <find_volume+0x328>
 8011998:	230d      	movs	r3, #13
 801199a:	e0e7      	b.n	8011b6c <find_volume+0x4f8>
		fmt = FS_FAT32;
 801199c:	2303      	movs	r3, #3
 801199e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80119a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119a4:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80119a8:	4293      	cmp	r3, r2
 80119aa:	d802      	bhi.n	80119b2 <find_volume+0x33e>
 80119ac:	2302      	movs	r3, #2
 80119ae:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80119b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119b4:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80119b8:	4293      	cmp	r3, r2
 80119ba:	d802      	bhi.n	80119c2 <find_volume+0x34e>
 80119bc:	2301      	movs	r3, #1
 80119be:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80119c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119c4:	1c9a      	adds	r2, r3, #2
 80119c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119c8:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 80119ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119cc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80119ce:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80119d0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80119d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80119d4:	441a      	add	r2, r3
 80119d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119d8:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 80119da:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80119dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119de:	441a      	add	r2, r3
 80119e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119e2:	635a      	str	r2, [r3, #52]	@ 0x34
		if (fmt == FS_FAT32) {
 80119e4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80119e8:	2b03      	cmp	r3, #3
 80119ea:	d11e      	bne.n	8011a2a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80119ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119ee:	333c      	adds	r3, #60	@ 0x3c
 80119f0:	332a      	adds	r3, #42	@ 0x2a
 80119f2:	4618      	mov	r0, r3
 80119f4:	f7fd ff54 	bl	800f8a0 <ld_word>
 80119f8:	4603      	mov	r3, r0
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d001      	beq.n	8011a02 <find_volume+0x38e>
 80119fe:	230d      	movs	r3, #13
 8011a00:	e0b4      	b.n	8011b6c <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a04:	891b      	ldrh	r3, [r3, #8]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d001      	beq.n	8011a0e <find_volume+0x39a>
 8011a0a:	230d      	movs	r3, #13
 8011a0c:	e0ae      	b.n	8011b6c <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a10:	333c      	adds	r3, #60	@ 0x3c
 8011a12:	332c      	adds	r3, #44	@ 0x2c
 8011a14:	4618      	mov	r0, r3
 8011a16:	f7fd ff5b 	bl	800f8d0 <ld_dword>
 8011a1a:	4602      	mov	r2, r0
 8011a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a1e:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a22:	6a1b      	ldr	r3, [r3, #32]
 8011a24:	009b      	lsls	r3, r3, #2
 8011a26:	647b      	str	r3, [r7, #68]	@ 0x44
 8011a28:	e01f      	b.n	8011a6a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8011a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a2c:	891b      	ldrh	r3, [r3, #8]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d101      	bne.n	8011a36 <find_volume+0x3c2>
 8011a32:	230d      	movs	r3, #13
 8011a34:	e09a      	b.n	8011b6c <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011a3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a3c:	441a      	add	r2, r3
 8011a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a40:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011a42:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011a46:	2b02      	cmp	r3, #2
 8011a48:	d103      	bne.n	8011a52 <find_volume+0x3de>
 8011a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a4c:	6a1b      	ldr	r3, [r3, #32]
 8011a4e:	005b      	lsls	r3, r3, #1
 8011a50:	e00a      	b.n	8011a68 <find_volume+0x3f4>
 8011a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a54:	6a1a      	ldr	r2, [r3, #32]
 8011a56:	4613      	mov	r3, r2
 8011a58:	005b      	lsls	r3, r3, #1
 8011a5a:	4413      	add	r3, r2
 8011a5c:	085a      	lsrs	r2, r3, #1
 8011a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a60:	6a1b      	ldr	r3, [r3, #32]
 8011a62:	f003 0301 	and.w	r3, r3, #1
 8011a66:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8011a68:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8011a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a70:	899b      	ldrh	r3, [r3, #12]
 8011a72:	4619      	mov	r1, r3
 8011a74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011a76:	440b      	add	r3, r1
 8011a78:	3b01      	subs	r3, #1
 8011a7a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011a7c:	8989      	ldrh	r1, [r1, #12]
 8011a7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011a82:	429a      	cmp	r2, r3
 8011a84:	d201      	bcs.n	8011a8a <find_volume+0x416>
 8011a86:	230d      	movs	r3, #13
 8011a88:	e070      	b.n	8011b6c <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8011a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8011a90:	619a      	str	r2, [r3, #24]
 8011a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a94:	699a      	ldr	r2, [r3, #24]
 8011a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a98:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8011a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a9c:	2280      	movs	r2, #128	@ 0x80
 8011a9e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8011aa0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011aa4:	2b03      	cmp	r3, #3
 8011aa6:	d149      	bne.n	8011b3c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8011aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011aaa:	333c      	adds	r3, #60	@ 0x3c
 8011aac:	3330      	adds	r3, #48	@ 0x30
 8011aae:	4618      	mov	r0, r3
 8011ab0:	f7fd fef6 	bl	800f8a0 <ld_word>
 8011ab4:	4603      	mov	r3, r0
 8011ab6:	2b01      	cmp	r3, #1
 8011ab8:	d140      	bne.n	8011b3c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8011aba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011abc:	3301      	adds	r3, #1
 8011abe:	4619      	mov	r1, r3
 8011ac0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011ac2:	f7fe f99d 	bl	800fe00 <move_window>
 8011ac6:	4603      	mov	r3, r0
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d137      	bne.n	8011b3c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8011acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ace:	2200      	movs	r2, #0
 8011ad0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ad4:	333c      	adds	r3, #60	@ 0x3c
 8011ad6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8011ada:	4618      	mov	r0, r3
 8011adc:	f7fd fee0 	bl	800f8a0 <ld_word>
 8011ae0:	4603      	mov	r3, r0
 8011ae2:	461a      	mov	r2, r3
 8011ae4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8011ae8:	429a      	cmp	r2, r3
 8011aea:	d127      	bne.n	8011b3c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011aee:	333c      	adds	r3, #60	@ 0x3c
 8011af0:	4618      	mov	r0, r3
 8011af2:	f7fd feed 	bl	800f8d0 <ld_dword>
 8011af6:	4603      	mov	r3, r0
 8011af8:	4a1e      	ldr	r2, [pc, #120]	@ (8011b74 <find_volume+0x500>)
 8011afa:	4293      	cmp	r3, r2
 8011afc:	d11e      	bne.n	8011b3c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b00:	333c      	adds	r3, #60	@ 0x3c
 8011b02:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8011b06:	4618      	mov	r0, r3
 8011b08:	f7fd fee2 	bl	800f8d0 <ld_dword>
 8011b0c:	4603      	mov	r3, r0
 8011b0e:	4a1a      	ldr	r2, [pc, #104]	@ (8011b78 <find_volume+0x504>)
 8011b10:	4293      	cmp	r3, r2
 8011b12:	d113      	bne.n	8011b3c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8011b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b16:	333c      	adds	r3, #60	@ 0x3c
 8011b18:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	f7fd fed7 	bl	800f8d0 <ld_dword>
 8011b22:	4602      	mov	r2, r0
 8011b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b26:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8011b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b2a:	333c      	adds	r3, #60	@ 0x3c
 8011b2c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8011b30:	4618      	mov	r0, r3
 8011b32:	f7fd fecd 	bl	800f8d0 <ld_dword>
 8011b36:	4602      	mov	r2, r0
 8011b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b3a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8011b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b3e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8011b42:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011b44:	4b0d      	ldr	r3, [pc, #52]	@ (8011b7c <find_volume+0x508>)
 8011b46:	881b      	ldrh	r3, [r3, #0]
 8011b48:	3301      	adds	r3, #1
 8011b4a:	b29a      	uxth	r2, r3
 8011b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8011b7c <find_volume+0x508>)
 8011b4e:	801a      	strh	r2, [r3, #0]
 8011b50:	4b0a      	ldr	r3, [pc, #40]	@ (8011b7c <find_volume+0x508>)
 8011b52:	881a      	ldrh	r2, [r3, #0]
 8011b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b56:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8011b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b5a:	4a09      	ldr	r2, [pc, #36]	@ (8011b80 <find_volume+0x50c>)
 8011b5c:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8011b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b60:	2200      	movs	r2, #0
 8011b62:	61da      	str	r2, [r3, #28]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8011b64:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011b66:	f7fe f8e3 	bl	800fd30 <clear_lock>
#endif
	return FR_OK;
 8011b6a:	2300      	movs	r3, #0
}
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	3758      	adds	r7, #88	@ 0x58
 8011b70:	46bd      	mov	sp, r7
 8011b72:	bd80      	pop	{r7, pc}
 8011b74:	41615252 	.word	0x41615252
 8011b78:	61417272 	.word	0x61417272
 8011b7c:	24002ad8 	.word	0x24002ad8
 8011b80:	24002afc 	.word	0x24002afc

08011b84 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8011b84:	b580      	push	{r7, lr}
 8011b86:	b084      	sub	sp, #16
 8011b88:	af00      	add	r7, sp, #0
 8011b8a:	6078      	str	r0, [r7, #4]
 8011b8c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8011b8e:	2309      	movs	r3, #9
 8011b90:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d01c      	beq.n	8011bd2 <validate+0x4e>
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d018      	beq.n	8011bd2 <validate+0x4e>
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	781b      	ldrb	r3, [r3, #0]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d013      	beq.n	8011bd2 <validate+0x4e>
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	889a      	ldrh	r2, [r3, #4]
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	88db      	ldrh	r3, [r3, #6]
 8011bb4:	429a      	cmp	r2, r3
 8011bb6:	d10c      	bne.n	8011bd2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	785b      	ldrb	r3, [r3, #1]
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	f7fd fdce 	bl	800f760 <disk_status>
 8011bc4:	4603      	mov	r3, r0
 8011bc6:	f003 0301 	and.w	r3, r3, #1
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d101      	bne.n	8011bd2 <validate+0x4e>
			res = FR_OK;
 8011bce:	2300      	movs	r3, #0
 8011bd0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8011bd2:	7bfb      	ldrb	r3, [r7, #15]
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d102      	bne.n	8011bde <validate+0x5a>
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	e000      	b.n	8011be0 <validate+0x5c>
 8011bde:	2300      	movs	r3, #0
 8011be0:	683a      	ldr	r2, [r7, #0]
 8011be2:	6013      	str	r3, [r2, #0]
	return res;
 8011be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011be6:	4618      	mov	r0, r3
 8011be8:	3710      	adds	r7, #16
 8011bea:	46bd      	mov	sp, r7
 8011bec:	bd80      	pop	{r7, pc}
	...

08011bf0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011bf0:	b580      	push	{r7, lr}
 8011bf2:	b088      	sub	sp, #32
 8011bf4:	af00      	add	r7, sp, #0
 8011bf6:	60f8      	str	r0, [r7, #12]
 8011bf8:	60b9      	str	r1, [r7, #8]
 8011bfa:	4613      	mov	r3, r2
 8011bfc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011bfe:	68bb      	ldr	r3, [r7, #8]
 8011c00:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8011c02:	f107 0310 	add.w	r3, r7, #16
 8011c06:	4618      	mov	r0, r3
 8011c08:	f7ff fc99 	bl	801153e <get_ldnumber>
 8011c0c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011c0e:	69fb      	ldr	r3, [r7, #28]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	da01      	bge.n	8011c18 <f_mount+0x28>
 8011c14:	230b      	movs	r3, #11
 8011c16:	e02b      	b.n	8011c70 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011c18:	4a17      	ldr	r2, [pc, #92]	@ (8011c78 <f_mount+0x88>)
 8011c1a:	69fb      	ldr	r3, [r7, #28]
 8011c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011c20:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8011c22:	69bb      	ldr	r3, [r7, #24]
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d005      	beq.n	8011c34 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011c28:	69b8      	ldr	r0, [r7, #24]
 8011c2a:	f7fe f881 	bl	800fd30 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011c2e:	69bb      	ldr	r3, [r7, #24]
 8011c30:	2200      	movs	r2, #0
 8011c32:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d002      	beq.n	8011c40 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	2200      	movs	r2, #0
 8011c3e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011c40:	68fa      	ldr	r2, [r7, #12]
 8011c42:	490d      	ldr	r1, [pc, #52]	@ (8011c78 <f_mount+0x88>)
 8011c44:	69fb      	ldr	r3, [r7, #28]
 8011c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d002      	beq.n	8011c56 <f_mount+0x66>
 8011c50:	79fb      	ldrb	r3, [r7, #7]
 8011c52:	2b01      	cmp	r3, #1
 8011c54:	d001      	beq.n	8011c5a <f_mount+0x6a>
 8011c56:	2300      	movs	r3, #0
 8011c58:	e00a      	b.n	8011c70 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8011c5a:	f107 010c 	add.w	r1, r7, #12
 8011c5e:	f107 0308 	add.w	r3, r7, #8
 8011c62:	2200      	movs	r2, #0
 8011c64:	4618      	mov	r0, r3
 8011c66:	f7ff fd05 	bl	8011674 <find_volume>
 8011c6a:	4603      	mov	r3, r0
 8011c6c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8011c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c70:	4618      	mov	r0, r3
 8011c72:	3720      	adds	r7, #32
 8011c74:	46bd      	mov	sp, r7
 8011c76:	bd80      	pop	{r7, pc}
 8011c78:	24002ad4 	.word	0x24002ad4

08011c7c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	b09a      	sub	sp, #104	@ 0x68
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	60f8      	str	r0, [r7, #12]
 8011c84:	60b9      	str	r1, [r7, #8]
 8011c86:	4613      	mov	r3, r2
 8011c88:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d101      	bne.n	8011c94 <f_open+0x18>
 8011c90:	2309      	movs	r3, #9
 8011c92:	e1b7      	b.n	8012004 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8011c94:	79fb      	ldrb	r3, [r7, #7]
 8011c96:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011c9a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8011c9c:	79fa      	ldrb	r2, [r7, #7]
 8011c9e:	f107 0114 	add.w	r1, r7, #20
 8011ca2:	f107 0308 	add.w	r3, r7, #8
 8011ca6:	4618      	mov	r0, r3
 8011ca8:	f7ff fce4 	bl	8011674 <find_volume>
 8011cac:	4603      	mov	r3, r0
 8011cae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8011cb2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	f040 819b 	bne.w	8011ff2 <f_open+0x376>
		dj.obj.fs = fs;
 8011cbc:	697b      	ldr	r3, [r7, #20]
 8011cbe:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8011cc0:	68ba      	ldr	r2, [r7, #8]
 8011cc2:	f107 0318 	add.w	r3, r7, #24
 8011cc6:	4611      	mov	r1, r2
 8011cc8:	4618      	mov	r0, r3
 8011cca:	f7ff fba3 	bl	8011414 <follow_path>
 8011cce:	4603      	mov	r3, r0
 8011cd0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8011cd4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d118      	bne.n	8011d0e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8011cdc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8011ce0:	b25b      	sxtb	r3, r3
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	da03      	bge.n	8011cee <f_open+0x72>
				res = FR_INVALID_NAME;
 8011ce6:	2306      	movs	r3, #6
 8011ce8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8011cec:	e00f      	b.n	8011d0e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011cee:	79fb      	ldrb	r3, [r7, #7]
 8011cf0:	2b01      	cmp	r3, #1
 8011cf2:	bf8c      	ite	hi
 8011cf4:	2301      	movhi	r3, #1
 8011cf6:	2300      	movls	r3, #0
 8011cf8:	b2db      	uxtb	r3, r3
 8011cfa:	461a      	mov	r2, r3
 8011cfc:	f107 0318 	add.w	r3, r7, #24
 8011d00:	4611      	mov	r1, r2
 8011d02:	4618      	mov	r0, r3
 8011d04:	f7fd fecc 	bl	800faa0 <chk_lock>
 8011d08:	4603      	mov	r3, r0
 8011d0a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8011d0e:	79fb      	ldrb	r3, [r7, #7]
 8011d10:	f003 031c 	and.w	r3, r3, #28
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d07f      	beq.n	8011e18 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8011d18:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d017      	beq.n	8011d50 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8011d20:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011d24:	2b04      	cmp	r3, #4
 8011d26:	d10e      	bne.n	8011d46 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8011d28:	f7fd ff16 	bl	800fb58 <enq_lock>
 8011d2c:	4603      	mov	r3, r0
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d006      	beq.n	8011d40 <f_open+0xc4>
 8011d32:	f107 0318 	add.w	r3, r7, #24
 8011d36:	4618      	mov	r0, r3
 8011d38:	f7ff f86e 	bl	8010e18 <dir_register>
 8011d3c:	4603      	mov	r3, r0
 8011d3e:	e000      	b.n	8011d42 <f_open+0xc6>
 8011d40:	2312      	movs	r3, #18
 8011d42:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8011d46:	79fb      	ldrb	r3, [r7, #7]
 8011d48:	f043 0308 	orr.w	r3, r3, #8
 8011d4c:	71fb      	strb	r3, [r7, #7]
 8011d4e:	e010      	b.n	8011d72 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8011d50:	7fbb      	ldrb	r3, [r7, #30]
 8011d52:	f003 0311 	and.w	r3, r3, #17
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d003      	beq.n	8011d62 <f_open+0xe6>
					res = FR_DENIED;
 8011d5a:	2307      	movs	r3, #7
 8011d5c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8011d60:	e007      	b.n	8011d72 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8011d62:	79fb      	ldrb	r3, [r7, #7]
 8011d64:	f003 0304 	and.w	r3, r3, #4
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d002      	beq.n	8011d72 <f_open+0xf6>
 8011d6c:	2308      	movs	r3, #8
 8011d6e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8011d72:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d168      	bne.n	8011e4c <f_open+0x1d0>
 8011d7a:	79fb      	ldrb	r3, [r7, #7]
 8011d7c:	f003 0308 	and.w	r3, r3, #8
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d063      	beq.n	8011e4c <f_open+0x1d0>
				dw = GET_FATTIME();
 8011d84:	f7fc ffca 	bl	800ed1c <get_fattime>
 8011d88:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8011d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d8c:	330e      	adds	r3, #14
 8011d8e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011d90:	4618      	mov	r0, r3
 8011d92:	f7fd fddb 	bl	800f94c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8011d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d98:	3316      	adds	r3, #22
 8011d9a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	f7fd fdd5 	bl	800f94c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8011da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011da4:	330b      	adds	r3, #11
 8011da6:	2220      	movs	r2, #32
 8011da8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8011daa:	697b      	ldr	r3, [r7, #20]
 8011dac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011dae:	4611      	mov	r1, r2
 8011db0:	4618      	mov	r0, r3
 8011db2:	f7fe fdaa 	bl	801090a <ld_clust>
 8011db6:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8011db8:	697b      	ldr	r3, [r7, #20]
 8011dba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011dbc:	2200      	movs	r2, #0
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	f7fe fdc2 	bl	8010948 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8011dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011dc6:	331c      	adds	r3, #28
 8011dc8:	2100      	movs	r1, #0
 8011dca:	4618      	mov	r0, r3
 8011dcc:	f7fd fdbe 	bl	800f94c <st_dword>
					fs->wflag = 1;
 8011dd0:	697b      	ldr	r3, [r7, #20]
 8011dd2:	2201      	movs	r2, #1
 8011dd4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8011dd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d037      	beq.n	8011e4c <f_open+0x1d0>
						dw = fs->winsect;
 8011ddc:	697b      	ldr	r3, [r7, #20]
 8011dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011de0:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8011de2:	f107 0318 	add.w	r3, r7, #24
 8011de6:	2200      	movs	r2, #0
 8011de8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011dea:	4618      	mov	r0, r3
 8011dec:	f7fe fab2 	bl	8010354 <remove_chain>
 8011df0:	4603      	mov	r3, r0
 8011df2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8011df6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d126      	bne.n	8011e4c <f_open+0x1d0>
							res = move_window(fs, dw);
 8011dfe:	697b      	ldr	r3, [r7, #20]
 8011e00:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011e02:	4618      	mov	r0, r3
 8011e04:	f7fd fffc 	bl	800fe00 <move_window>
 8011e08:	4603      	mov	r3, r0
 8011e0a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8011e0e:	697b      	ldr	r3, [r7, #20]
 8011e10:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011e12:	3a01      	subs	r2, #1
 8011e14:	615a      	str	r2, [r3, #20]
 8011e16:	e019      	b.n	8011e4c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8011e18:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d115      	bne.n	8011e4c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8011e20:	7fbb      	ldrb	r3, [r7, #30]
 8011e22:	f003 0310 	and.w	r3, r3, #16
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d003      	beq.n	8011e32 <f_open+0x1b6>
					res = FR_NO_FILE;
 8011e2a:	2304      	movs	r3, #4
 8011e2c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8011e30:	e00c      	b.n	8011e4c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8011e32:	79fb      	ldrb	r3, [r7, #7]
 8011e34:	f003 0302 	and.w	r3, r3, #2
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d007      	beq.n	8011e4c <f_open+0x1d0>
 8011e3c:	7fbb      	ldrb	r3, [r7, #30]
 8011e3e:	f003 0301 	and.w	r3, r3, #1
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d002      	beq.n	8011e4c <f_open+0x1d0>
						res = FR_DENIED;
 8011e46:	2307      	movs	r3, #7
 8011e48:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8011e4c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d126      	bne.n	8011ea2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8011e54:	79fb      	ldrb	r3, [r7, #7]
 8011e56:	f003 0308 	and.w	r3, r3, #8
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d003      	beq.n	8011e66 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8011e5e:	79fb      	ldrb	r3, [r7, #7]
 8011e60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e64:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8011e66:	697b      	ldr	r3, [r7, #20]
 8011e68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8011e6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011e74:	79fb      	ldrb	r3, [r7, #7]
 8011e76:	2b01      	cmp	r3, #1
 8011e78:	bf8c      	ite	hi
 8011e7a:	2301      	movhi	r3, #1
 8011e7c:	2300      	movls	r3, #0
 8011e7e:	b2db      	uxtb	r3, r3
 8011e80:	461a      	mov	r2, r3
 8011e82:	f107 0318 	add.w	r3, r7, #24
 8011e86:	4611      	mov	r1, r2
 8011e88:	4618      	mov	r0, r3
 8011e8a:	f7fd fe87 	bl	800fb9c <inc_lock>
 8011e8e:	4602      	mov	r2, r0
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	691b      	ldr	r3, [r3, #16]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d102      	bne.n	8011ea2 <f_open+0x226>
 8011e9c:	2302      	movs	r3, #2
 8011e9e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8011ea2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	f040 80a3 	bne.w	8011ff2 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8011eac:	697b      	ldr	r3, [r7, #20]
 8011eae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011eb0:	4611      	mov	r1, r2
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	f7fe fd29 	bl	801090a <ld_clust>
 8011eb8:	4602      	mov	r2, r0
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8011ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ec0:	331c      	adds	r3, #28
 8011ec2:	4618      	mov	r0, r3
 8011ec4:	f7fd fd04 	bl	800f8d0 <ld_dword>
 8011ec8:	4602      	mov	r2, r0
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	2200      	movs	r2, #0
 8011ed2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011ed4:	697a      	ldr	r2, [r7, #20]
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8011eda:	697b      	ldr	r3, [r7, #20]
 8011edc:	88da      	ldrh	r2, [r3, #6]
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	79fa      	ldrb	r2, [r7, #7]
 8011ee6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	2200      	movs	r2, #0
 8011eec:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	2200      	movs	r2, #0
 8011ef2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	2200      	movs	r2, #0
 8011ef8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	3330      	adds	r3, #48	@ 0x30
 8011efe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8011f02:	2100      	movs	r1, #0
 8011f04:	4618      	mov	r0, r3
 8011f06:	f7fd fd6e 	bl	800f9e6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8011f0a:	79fb      	ldrb	r3, [r7, #7]
 8011f0c:	f003 0320 	and.w	r3, r3, #32
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d06e      	beq.n	8011ff2 <f_open+0x376>
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	68db      	ldr	r3, [r3, #12]
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d06a      	beq.n	8011ff2 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	68da      	ldr	r2, [r3, #12]
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011f24:	697b      	ldr	r3, [r7, #20]
 8011f26:	895b      	ldrh	r3, [r3, #10]
 8011f28:	461a      	mov	r2, r3
 8011f2a:	697b      	ldr	r3, [r7, #20]
 8011f2c:	899b      	ldrh	r3, [r3, #12]
 8011f2e:	fb02 f303 	mul.w	r3, r2, r3
 8011f32:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	689b      	ldr	r3, [r3, #8]
 8011f38:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	68db      	ldr	r3, [r3, #12]
 8011f3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011f40:	e016      	b.n	8011f70 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8011f46:	4618      	mov	r0, r3
 8011f48:	f7fe f817 	bl	800ff7a <get_fat>
 8011f4c:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8011f4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011f50:	2b01      	cmp	r3, #1
 8011f52:	d802      	bhi.n	8011f5a <f_open+0x2de>
 8011f54:	2302      	movs	r3, #2
 8011f56:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011f5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f60:	d102      	bne.n	8011f68 <f_open+0x2ec>
 8011f62:	2301      	movs	r3, #1
 8011f64:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011f68:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011f6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011f6c:	1ad3      	subs	r3, r2, r3
 8011f6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011f70:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d103      	bne.n	8011f80 <f_open+0x304>
 8011f78:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011f7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011f7c:	429a      	cmp	r2, r3
 8011f7e:	d8e0      	bhi.n	8011f42 <f_open+0x2c6>
				}
				fp->clust = clst;
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011f84:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8011f86:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d131      	bne.n	8011ff2 <f_open+0x376>
 8011f8e:	697b      	ldr	r3, [r7, #20]
 8011f90:	899b      	ldrh	r3, [r3, #12]
 8011f92:	461a      	mov	r2, r3
 8011f94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011f96:	fbb3 f1f2 	udiv	r1, r3, r2
 8011f9a:	fb01 f202 	mul.w	r2, r1, r2
 8011f9e:	1a9b      	subs	r3, r3, r2
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d026      	beq.n	8011ff2 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8011fa4:	697b      	ldr	r3, [r7, #20]
 8011fa6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8011fa8:	4618      	mov	r0, r3
 8011faa:	f7fd ffc7 	bl	800ff3c <clust2sect>
 8011fae:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8011fb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d103      	bne.n	8011fbe <f_open+0x342>
						res = FR_INT_ERR;
 8011fb6:	2302      	movs	r3, #2
 8011fb8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8011fbc:	e019      	b.n	8011ff2 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8011fbe:	697b      	ldr	r3, [r7, #20]
 8011fc0:	899b      	ldrh	r3, [r3, #12]
 8011fc2:	461a      	mov	r2, r3
 8011fc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011fc6:	fbb3 f2f2 	udiv	r2, r3, r2
 8011fca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011fcc:	441a      	add	r2, r3
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8011fd2:	697b      	ldr	r3, [r7, #20]
 8011fd4:	7858      	ldrb	r0, [r3, #1]
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	6a1a      	ldr	r2, [r3, #32]
 8011fe0:	2301      	movs	r3, #1
 8011fe2:	f7fd fbff 	bl	800f7e4 <disk_read>
 8011fe6:	4603      	mov	r3, r0
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d002      	beq.n	8011ff2 <f_open+0x376>
 8011fec:	2301      	movs	r3, #1
 8011fee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8011ff2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d002      	beq.n	8012000 <f_open+0x384>
 8011ffa:	68fb      	ldr	r3, [r7, #12]
 8011ffc:	2200      	movs	r2, #0
 8011ffe:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012000:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8012004:	4618      	mov	r0, r3
 8012006:	3768      	adds	r7, #104	@ 0x68
 8012008:	46bd      	mov	sp, r7
 801200a:	bd80      	pop	{r7, pc}

0801200c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801200c:	b580      	push	{r7, lr}
 801200e:	b08c      	sub	sp, #48	@ 0x30
 8012010:	af00      	add	r7, sp, #0
 8012012:	60f8      	str	r0, [r7, #12]
 8012014:	60b9      	str	r1, [r7, #8]
 8012016:	607a      	str	r2, [r7, #4]
 8012018:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801201a:	68bb      	ldr	r3, [r7, #8]
 801201c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801201e:	683b      	ldr	r3, [r7, #0]
 8012020:	2200      	movs	r2, #0
 8012022:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	f107 0210 	add.w	r2, r7, #16
 801202a:	4611      	mov	r1, r2
 801202c:	4618      	mov	r0, r3
 801202e:	f7ff fda9 	bl	8011b84 <validate>
 8012032:	4603      	mov	r3, r0
 8012034:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012038:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801203c:	2b00      	cmp	r3, #0
 801203e:	d107      	bne.n	8012050 <f_write+0x44>
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	7d5b      	ldrb	r3, [r3, #21]
 8012044:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8012048:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801204c:	2b00      	cmp	r3, #0
 801204e:	d002      	beq.n	8012056 <f_write+0x4a>
 8012050:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012054:	e16a      	b.n	801232c <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	7d1b      	ldrb	r3, [r3, #20]
 801205a:	f003 0302 	and.w	r3, r3, #2
 801205e:	2b00      	cmp	r3, #0
 8012060:	d101      	bne.n	8012066 <f_write+0x5a>
 8012062:	2307      	movs	r3, #7
 8012064:	e162      	b.n	801232c <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	699a      	ldr	r2, [r3, #24]
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	441a      	add	r2, r3
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	699b      	ldr	r3, [r3, #24]
 8012072:	429a      	cmp	r2, r3
 8012074:	f080 814c 	bcs.w	8012310 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	699b      	ldr	r3, [r3, #24]
 801207c:	43db      	mvns	r3, r3
 801207e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8012080:	e146      	b.n	8012310 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	699b      	ldr	r3, [r3, #24]
 8012086:	693a      	ldr	r2, [r7, #16]
 8012088:	8992      	ldrh	r2, [r2, #12]
 801208a:	fbb3 f1f2 	udiv	r1, r3, r2
 801208e:	fb01 f202 	mul.w	r2, r1, r2
 8012092:	1a9b      	subs	r3, r3, r2
 8012094:	2b00      	cmp	r3, #0
 8012096:	f040 80f1 	bne.w	801227c <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	699b      	ldr	r3, [r3, #24]
 801209e:	693a      	ldr	r2, [r7, #16]
 80120a0:	8992      	ldrh	r2, [r2, #12]
 80120a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80120a6:	693a      	ldr	r2, [r7, #16]
 80120a8:	8952      	ldrh	r2, [r2, #10]
 80120aa:	3a01      	subs	r2, #1
 80120ac:	4013      	ands	r3, r2
 80120ae:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80120b0:	69bb      	ldr	r3, [r7, #24]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d143      	bne.n	801213e <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	699b      	ldr	r3, [r3, #24]
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d10c      	bne.n	80120d8 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	689b      	ldr	r3, [r3, #8]
 80120c2:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80120c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d11a      	bne.n	8012100 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	2100      	movs	r1, #0
 80120ce:	4618      	mov	r0, r3
 80120d0:	f7fe f9a5 	bl	801041e <create_chain>
 80120d4:	62b8      	str	r0, [r7, #40]	@ 0x28
 80120d6:	e013      	b.n	8012100 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d007      	beq.n	80120f0 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	699b      	ldr	r3, [r3, #24]
 80120e4:	4619      	mov	r1, r3
 80120e6:	68f8      	ldr	r0, [r7, #12]
 80120e8:	f7fe fa31 	bl	801054e <clmt_clust>
 80120ec:	62b8      	str	r0, [r7, #40]	@ 0x28
 80120ee:	e007      	b.n	8012100 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80120f0:	68fa      	ldr	r2, [r7, #12]
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	69db      	ldr	r3, [r3, #28]
 80120f6:	4619      	mov	r1, r3
 80120f8:	4610      	mov	r0, r2
 80120fa:	f7fe f990 	bl	801041e <create_chain>
 80120fe:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012102:	2b00      	cmp	r3, #0
 8012104:	f000 8109 	beq.w	801231a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8012108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801210a:	2b01      	cmp	r3, #1
 801210c:	d104      	bne.n	8012118 <f_write+0x10c>
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	2202      	movs	r2, #2
 8012112:	755a      	strb	r2, [r3, #21]
 8012114:	2302      	movs	r3, #2
 8012116:	e109      	b.n	801232c <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801211a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801211e:	d104      	bne.n	801212a <f_write+0x11e>
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	2201      	movs	r2, #1
 8012124:	755a      	strb	r2, [r3, #21]
 8012126:	2301      	movs	r3, #1
 8012128:	e100      	b.n	801232c <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801212e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	689b      	ldr	r3, [r3, #8]
 8012134:	2b00      	cmp	r3, #0
 8012136:	d102      	bne.n	801213e <f_write+0x132>
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801213c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	7d1b      	ldrb	r3, [r3, #20]
 8012142:	b25b      	sxtb	r3, r3
 8012144:	2b00      	cmp	r3, #0
 8012146:	da18      	bge.n	801217a <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012148:	693b      	ldr	r3, [r7, #16]
 801214a:	7858      	ldrb	r0, [r3, #1]
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	6a1a      	ldr	r2, [r3, #32]
 8012156:	2301      	movs	r3, #1
 8012158:	f7fd fb64 	bl	800f824 <disk_write>
 801215c:	4603      	mov	r3, r0
 801215e:	2b00      	cmp	r3, #0
 8012160:	d004      	beq.n	801216c <f_write+0x160>
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	2201      	movs	r2, #1
 8012166:	755a      	strb	r2, [r3, #21]
 8012168:	2301      	movs	r3, #1
 801216a:	e0df      	b.n	801232c <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	7d1b      	ldrb	r3, [r3, #20]
 8012170:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012174:	b2da      	uxtb	r2, r3
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801217a:	693a      	ldr	r2, [r7, #16]
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	69db      	ldr	r3, [r3, #28]
 8012180:	4619      	mov	r1, r3
 8012182:	4610      	mov	r0, r2
 8012184:	f7fd feda 	bl	800ff3c <clust2sect>
 8012188:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801218a:	697b      	ldr	r3, [r7, #20]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d104      	bne.n	801219a <f_write+0x18e>
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	2202      	movs	r2, #2
 8012194:	755a      	strb	r2, [r3, #21]
 8012196:	2302      	movs	r3, #2
 8012198:	e0c8      	b.n	801232c <f_write+0x320>
			sect += csect;
 801219a:	697a      	ldr	r2, [r7, #20]
 801219c:	69bb      	ldr	r3, [r7, #24]
 801219e:	4413      	add	r3, r2
 80121a0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80121a2:	693b      	ldr	r3, [r7, #16]
 80121a4:	899b      	ldrh	r3, [r3, #12]
 80121a6:	461a      	mov	r2, r3
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80121ae:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80121b0:	6a3b      	ldr	r3, [r7, #32]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d043      	beq.n	801223e <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80121b6:	69ba      	ldr	r2, [r7, #24]
 80121b8:	6a3b      	ldr	r3, [r7, #32]
 80121ba:	4413      	add	r3, r2
 80121bc:	693a      	ldr	r2, [r7, #16]
 80121be:	8952      	ldrh	r2, [r2, #10]
 80121c0:	4293      	cmp	r3, r2
 80121c2:	d905      	bls.n	80121d0 <f_write+0x1c4>
					cc = fs->csize - csect;
 80121c4:	693b      	ldr	r3, [r7, #16]
 80121c6:	895b      	ldrh	r3, [r3, #10]
 80121c8:	461a      	mov	r2, r3
 80121ca:	69bb      	ldr	r3, [r7, #24]
 80121cc:	1ad3      	subs	r3, r2, r3
 80121ce:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80121d0:	693b      	ldr	r3, [r7, #16]
 80121d2:	7858      	ldrb	r0, [r3, #1]
 80121d4:	6a3b      	ldr	r3, [r7, #32]
 80121d6:	697a      	ldr	r2, [r7, #20]
 80121d8:	69f9      	ldr	r1, [r7, #28]
 80121da:	f7fd fb23 	bl	800f824 <disk_write>
 80121de:	4603      	mov	r3, r0
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d004      	beq.n	80121ee <f_write+0x1e2>
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	2201      	movs	r2, #1
 80121e8:	755a      	strb	r2, [r3, #21]
 80121ea:	2301      	movs	r3, #1
 80121ec:	e09e      	b.n	801232c <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	6a1a      	ldr	r2, [r3, #32]
 80121f2:	697b      	ldr	r3, [r7, #20]
 80121f4:	1ad3      	subs	r3, r2, r3
 80121f6:	6a3a      	ldr	r2, [r7, #32]
 80121f8:	429a      	cmp	r2, r3
 80121fa:	d918      	bls.n	801222e <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	6a1a      	ldr	r2, [r3, #32]
 8012206:	697b      	ldr	r3, [r7, #20]
 8012208:	1ad3      	subs	r3, r2, r3
 801220a:	693a      	ldr	r2, [r7, #16]
 801220c:	8992      	ldrh	r2, [r2, #12]
 801220e:	fb02 f303 	mul.w	r3, r2, r3
 8012212:	69fa      	ldr	r2, [r7, #28]
 8012214:	18d1      	adds	r1, r2, r3
 8012216:	693b      	ldr	r3, [r7, #16]
 8012218:	899b      	ldrh	r3, [r3, #12]
 801221a:	461a      	mov	r2, r3
 801221c:	f7fd fbc2 	bl	800f9a4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	7d1b      	ldrb	r3, [r3, #20]
 8012224:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012228:	b2da      	uxtb	r2, r3
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801222e:	693b      	ldr	r3, [r7, #16]
 8012230:	899b      	ldrh	r3, [r3, #12]
 8012232:	461a      	mov	r2, r3
 8012234:	6a3b      	ldr	r3, [r7, #32]
 8012236:	fb02 f303 	mul.w	r3, r2, r3
 801223a:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801223c:	e04b      	b.n	80122d6 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	6a1b      	ldr	r3, [r3, #32]
 8012242:	697a      	ldr	r2, [r7, #20]
 8012244:	429a      	cmp	r2, r3
 8012246:	d016      	beq.n	8012276 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	699a      	ldr	r2, [r3, #24]
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012250:	429a      	cmp	r2, r3
 8012252:	d210      	bcs.n	8012276 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8012254:	693b      	ldr	r3, [r7, #16]
 8012256:	7858      	ldrb	r0, [r3, #1]
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801225e:	2301      	movs	r3, #1
 8012260:	697a      	ldr	r2, [r7, #20]
 8012262:	f7fd fabf 	bl	800f7e4 <disk_read>
 8012266:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8012268:	2b00      	cmp	r3, #0
 801226a:	d004      	beq.n	8012276 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	2201      	movs	r2, #1
 8012270:	755a      	strb	r2, [r3, #21]
 8012272:	2301      	movs	r3, #1
 8012274:	e05a      	b.n	801232c <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	697a      	ldr	r2, [r7, #20]
 801227a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801227c:	693b      	ldr	r3, [r7, #16]
 801227e:	899b      	ldrh	r3, [r3, #12]
 8012280:	4618      	mov	r0, r3
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	699b      	ldr	r3, [r3, #24]
 8012286:	693a      	ldr	r2, [r7, #16]
 8012288:	8992      	ldrh	r2, [r2, #12]
 801228a:	fbb3 f1f2 	udiv	r1, r3, r2
 801228e:	fb01 f202 	mul.w	r2, r1, r2
 8012292:	1a9b      	subs	r3, r3, r2
 8012294:	1ac3      	subs	r3, r0, r3
 8012296:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8012298:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	429a      	cmp	r2, r3
 801229e:	d901      	bls.n	80122a4 <f_write+0x298>
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	699b      	ldr	r3, [r3, #24]
 80122ae:	693a      	ldr	r2, [r7, #16]
 80122b0:	8992      	ldrh	r2, [r2, #12]
 80122b2:	fbb3 f0f2 	udiv	r0, r3, r2
 80122b6:	fb00 f202 	mul.w	r2, r0, r2
 80122ba:	1a9b      	subs	r3, r3, r2
 80122bc:	440b      	add	r3, r1
 80122be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80122c0:	69f9      	ldr	r1, [r7, #28]
 80122c2:	4618      	mov	r0, r3
 80122c4:	f7fd fb6e 	bl	800f9a4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	7d1b      	ldrb	r3, [r3, #20]
 80122cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80122d0:	b2da      	uxtb	r2, r3
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80122d6:	69fa      	ldr	r2, [r7, #28]
 80122d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122da:	4413      	add	r3, r2
 80122dc:	61fb      	str	r3, [r7, #28]
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	699a      	ldr	r2, [r3, #24]
 80122e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122e4:	441a      	add	r2, r3
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	619a      	str	r2, [r3, #24]
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	68da      	ldr	r2, [r3, #12]
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	699b      	ldr	r3, [r3, #24]
 80122f2:	429a      	cmp	r2, r3
 80122f4:	bf38      	it	cc
 80122f6:	461a      	movcc	r2, r3
 80122f8:	68fb      	ldr	r3, [r7, #12]
 80122fa:	60da      	str	r2, [r3, #12]
 80122fc:	683b      	ldr	r3, [r7, #0]
 80122fe:	681a      	ldr	r2, [r3, #0]
 8012300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012302:	441a      	add	r2, r3
 8012304:	683b      	ldr	r3, [r7, #0]
 8012306:	601a      	str	r2, [r3, #0]
 8012308:	687a      	ldr	r2, [r7, #4]
 801230a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801230c:	1ad3      	subs	r3, r2, r3
 801230e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	2b00      	cmp	r3, #0
 8012314:	f47f aeb5 	bne.w	8012082 <f_write+0x76>
 8012318:	e000      	b.n	801231c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801231a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	7d1b      	ldrb	r3, [r3, #20]
 8012320:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012324:	b2da      	uxtb	r2, r3
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801232a:	2300      	movs	r3, #0
}
 801232c:	4618      	mov	r0, r3
 801232e:	3730      	adds	r7, #48	@ 0x30
 8012330:	46bd      	mov	sp, r7
 8012332:	bd80      	pop	{r7, pc}

08012334 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8012334:	b580      	push	{r7, lr}
 8012336:	b086      	sub	sp, #24
 8012338:	af00      	add	r7, sp, #0
 801233a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	f107 0208 	add.w	r2, r7, #8
 8012342:	4611      	mov	r1, r2
 8012344:	4618      	mov	r0, r3
 8012346:	f7ff fc1d 	bl	8011b84 <validate>
 801234a:	4603      	mov	r3, r0
 801234c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801234e:	7dfb      	ldrb	r3, [r7, #23]
 8012350:	2b00      	cmp	r3, #0
 8012352:	d168      	bne.n	8012426 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	7d1b      	ldrb	r3, [r3, #20]
 8012358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801235c:	2b00      	cmp	r3, #0
 801235e:	d062      	beq.n	8012426 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	7d1b      	ldrb	r3, [r3, #20]
 8012364:	b25b      	sxtb	r3, r3
 8012366:	2b00      	cmp	r3, #0
 8012368:	da15      	bge.n	8012396 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801236a:	68bb      	ldr	r3, [r7, #8]
 801236c:	7858      	ldrb	r0, [r3, #1]
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	6a1a      	ldr	r2, [r3, #32]
 8012378:	2301      	movs	r3, #1
 801237a:	f7fd fa53 	bl	800f824 <disk_write>
 801237e:	4603      	mov	r3, r0
 8012380:	2b00      	cmp	r3, #0
 8012382:	d001      	beq.n	8012388 <f_sync+0x54>
 8012384:	2301      	movs	r3, #1
 8012386:	e04f      	b.n	8012428 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	7d1b      	ldrb	r3, [r3, #20]
 801238c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012390:	b2da      	uxtb	r2, r3
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8012396:	f7fc fcc1 	bl	800ed1c <get_fattime>
 801239a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801239c:	68ba      	ldr	r2, [r7, #8]
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80123a2:	4619      	mov	r1, r3
 80123a4:	4610      	mov	r0, r2
 80123a6:	f7fd fd2b 	bl	800fe00 <move_window>
 80123aa:	4603      	mov	r3, r0
 80123ac:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80123ae:	7dfb      	ldrb	r3, [r7, #23]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d138      	bne.n	8012426 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80123b8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	330b      	adds	r3, #11
 80123be:	781a      	ldrb	r2, [r3, #0]
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	330b      	adds	r3, #11
 80123c4:	f042 0220 	orr.w	r2, r2, #32
 80123c8:	b2d2      	uxtb	r2, r2
 80123ca:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	6818      	ldr	r0, [r3, #0]
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	689b      	ldr	r3, [r3, #8]
 80123d4:	461a      	mov	r2, r3
 80123d6:	68f9      	ldr	r1, [r7, #12]
 80123d8:	f7fe fab6 	bl	8010948 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	f103 021c 	add.w	r2, r3, #28
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	68db      	ldr	r3, [r3, #12]
 80123e6:	4619      	mov	r1, r3
 80123e8:	4610      	mov	r0, r2
 80123ea:	f7fd faaf 	bl	800f94c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	3316      	adds	r3, #22
 80123f2:	6939      	ldr	r1, [r7, #16]
 80123f4:	4618      	mov	r0, r3
 80123f6:	f7fd faa9 	bl	800f94c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	3312      	adds	r3, #18
 80123fe:	2100      	movs	r1, #0
 8012400:	4618      	mov	r0, r3
 8012402:	f7fd fa88 	bl	800f916 <st_word>
					fs->wflag = 1;
 8012406:	68bb      	ldr	r3, [r7, #8]
 8012408:	2201      	movs	r2, #1
 801240a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801240c:	68bb      	ldr	r3, [r7, #8]
 801240e:	4618      	mov	r0, r3
 8012410:	f7fd fd24 	bl	800fe5c <sync_fs>
 8012414:	4603      	mov	r3, r0
 8012416:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	7d1b      	ldrb	r3, [r3, #20]
 801241c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012420:	b2da      	uxtb	r2, r3
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8012426:	7dfb      	ldrb	r3, [r7, #23]
}
 8012428:	4618      	mov	r0, r3
 801242a:	3718      	adds	r7, #24
 801242c:	46bd      	mov	sp, r7
 801242e:	bd80      	pop	{r7, pc}

08012430 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8012430:	b580      	push	{r7, lr}
 8012432:	b084      	sub	sp, #16
 8012434:	af00      	add	r7, sp, #0
 8012436:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8012438:	6878      	ldr	r0, [r7, #4]
 801243a:	f7ff ff7b 	bl	8012334 <f_sync>
 801243e:	4603      	mov	r3, r0
 8012440:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8012442:	7bfb      	ldrb	r3, [r7, #15]
 8012444:	2b00      	cmp	r3, #0
 8012446:	d118      	bne.n	801247a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	f107 0208 	add.w	r2, r7, #8
 801244e:	4611      	mov	r1, r2
 8012450:	4618      	mov	r0, r3
 8012452:	f7ff fb97 	bl	8011b84 <validate>
 8012456:	4603      	mov	r3, r0
 8012458:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801245a:	7bfb      	ldrb	r3, [r7, #15]
 801245c:	2b00      	cmp	r3, #0
 801245e:	d10c      	bne.n	801247a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	691b      	ldr	r3, [r3, #16]
 8012464:	4618      	mov	r0, r3
 8012466:	f7fd fc27 	bl	800fcb8 <dec_lock>
 801246a:	4603      	mov	r3, r0
 801246c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801246e:	7bfb      	ldrb	r3, [r7, #15]
 8012470:	2b00      	cmp	r3, #0
 8012472:	d102      	bne.n	801247a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	2200      	movs	r2, #0
 8012478:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801247a:	7bfb      	ldrb	r3, [r7, #15]
}
 801247c:	4618      	mov	r0, r3
 801247e:	3710      	adds	r7, #16
 8012480:	46bd      	mov	sp, r7
 8012482:	bd80      	pop	{r7, pc}

08012484 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8012484:	b580      	push	{r7, lr}
 8012486:	b090      	sub	sp, #64	@ 0x40
 8012488:	af00      	add	r7, sp, #0
 801248a:	6078      	str	r0, [r7, #4]
 801248c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	f107 0208 	add.w	r2, r7, #8
 8012494:	4611      	mov	r1, r2
 8012496:	4618      	mov	r0, r3
 8012498:	f7ff fb74 	bl	8011b84 <validate>
 801249c:	4603      	mov	r3, r0
 801249e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80124a2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d103      	bne.n	80124b2 <f_lseek+0x2e>
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	7d5b      	ldrb	r3, [r3, #21]
 80124ae:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80124b2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d002      	beq.n	80124c0 <f_lseek+0x3c>
 80124ba:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80124be:	e201      	b.n	80128c4 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	f000 80d9 	beq.w	801267c <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80124ca:	683b      	ldr	r3, [r7, #0]
 80124cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124d0:	d15a      	bne.n	8012588 <f_lseek+0x104>
			tbl = fp->cltbl;
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80124d6:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80124d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124da:	1d1a      	adds	r2, r3, #4
 80124dc:	627a      	str	r2, [r7, #36]	@ 0x24
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	617b      	str	r3, [r7, #20]
 80124e2:	2302      	movs	r3, #2
 80124e4:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	689b      	ldr	r3, [r3, #8]
 80124ea:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 80124ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d03a      	beq.n	8012568 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80124f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80124f4:	613b      	str	r3, [r7, #16]
 80124f6:	2300      	movs	r3, #0
 80124f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80124fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124fc:	3302      	adds	r3, #2
 80124fe:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8012500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012502:	60fb      	str	r3, [r7, #12]
 8012504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012506:	3301      	adds	r3, #1
 8012508:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801250e:	4618      	mov	r0, r3
 8012510:	f7fd fd33 	bl	800ff7a <get_fat>
 8012514:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8012516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012518:	2b01      	cmp	r3, #1
 801251a:	d804      	bhi.n	8012526 <f_lseek+0xa2>
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	2202      	movs	r2, #2
 8012520:	755a      	strb	r2, [r3, #21]
 8012522:	2302      	movs	r3, #2
 8012524:	e1ce      	b.n	80128c4 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012528:	f1b3 3fff 	cmp.w	r3, #4294967295
 801252c:	d104      	bne.n	8012538 <f_lseek+0xb4>
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	2201      	movs	r2, #1
 8012532:	755a      	strb	r2, [r3, #21]
 8012534:	2301      	movs	r3, #1
 8012536:	e1c5      	b.n	80128c4 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	3301      	adds	r3, #1
 801253c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801253e:	429a      	cmp	r2, r3
 8012540:	d0de      	beq.n	8012500 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8012542:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012544:	697b      	ldr	r3, [r7, #20]
 8012546:	429a      	cmp	r2, r3
 8012548:	d809      	bhi.n	801255e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 801254a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801254c:	1d1a      	adds	r2, r3, #4
 801254e:	627a      	str	r2, [r7, #36]	@ 0x24
 8012550:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012552:	601a      	str	r2, [r3, #0]
 8012554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012556:	1d1a      	adds	r2, r3, #4
 8012558:	627a      	str	r2, [r7, #36]	@ 0x24
 801255a:	693a      	ldr	r2, [r7, #16]
 801255c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801255e:	68bb      	ldr	r3, [r7, #8]
 8012560:	6a1b      	ldr	r3, [r3, #32]
 8012562:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012564:	429a      	cmp	r2, r3
 8012566:	d3c4      	bcc.n	80124f2 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801256c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801256e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8012570:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012572:	697b      	ldr	r3, [r7, #20]
 8012574:	429a      	cmp	r2, r3
 8012576:	d803      	bhi.n	8012580 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8012578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801257a:	2200      	movs	r2, #0
 801257c:	601a      	str	r2, [r3, #0]
 801257e:	e19f      	b.n	80128c0 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8012580:	2311      	movs	r3, #17
 8012582:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8012586:	e19b      	b.n	80128c0 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	68db      	ldr	r3, [r3, #12]
 801258c:	683a      	ldr	r2, [r7, #0]
 801258e:	429a      	cmp	r2, r3
 8012590:	d902      	bls.n	8012598 <f_lseek+0x114>
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	68db      	ldr	r3, [r3, #12]
 8012596:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	683a      	ldr	r2, [r7, #0]
 801259c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801259e:	683b      	ldr	r3, [r7, #0]
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	f000 818d 	beq.w	80128c0 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80125a6:	683b      	ldr	r3, [r7, #0]
 80125a8:	3b01      	subs	r3, #1
 80125aa:	4619      	mov	r1, r3
 80125ac:	6878      	ldr	r0, [r7, #4]
 80125ae:	f7fd ffce 	bl	801054e <clmt_clust>
 80125b2:	4602      	mov	r2, r0
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80125b8:	68ba      	ldr	r2, [r7, #8]
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	69db      	ldr	r3, [r3, #28]
 80125be:	4619      	mov	r1, r3
 80125c0:	4610      	mov	r0, r2
 80125c2:	f7fd fcbb 	bl	800ff3c <clust2sect>
 80125c6:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80125c8:	69bb      	ldr	r3, [r7, #24]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d104      	bne.n	80125d8 <f_lseek+0x154>
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	2202      	movs	r2, #2
 80125d2:	755a      	strb	r2, [r3, #21]
 80125d4:	2302      	movs	r3, #2
 80125d6:	e175      	b.n	80128c4 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80125d8:	683b      	ldr	r3, [r7, #0]
 80125da:	3b01      	subs	r3, #1
 80125dc:	68ba      	ldr	r2, [r7, #8]
 80125de:	8992      	ldrh	r2, [r2, #12]
 80125e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80125e4:	68ba      	ldr	r2, [r7, #8]
 80125e6:	8952      	ldrh	r2, [r2, #10]
 80125e8:	3a01      	subs	r2, #1
 80125ea:	4013      	ands	r3, r2
 80125ec:	69ba      	ldr	r2, [r7, #24]
 80125ee:	4413      	add	r3, r2
 80125f0:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	699b      	ldr	r3, [r3, #24]
 80125f6:	68ba      	ldr	r2, [r7, #8]
 80125f8:	8992      	ldrh	r2, [r2, #12]
 80125fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80125fe:	fb01 f202 	mul.w	r2, r1, r2
 8012602:	1a9b      	subs	r3, r3, r2
 8012604:	2b00      	cmp	r3, #0
 8012606:	f000 815b 	beq.w	80128c0 <f_lseek+0x43c>
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	6a1b      	ldr	r3, [r3, #32]
 801260e:	69ba      	ldr	r2, [r7, #24]
 8012610:	429a      	cmp	r2, r3
 8012612:	f000 8155 	beq.w	80128c0 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	7d1b      	ldrb	r3, [r3, #20]
 801261a:	b25b      	sxtb	r3, r3
 801261c:	2b00      	cmp	r3, #0
 801261e:	da18      	bge.n	8012652 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012620:	68bb      	ldr	r3, [r7, #8]
 8012622:	7858      	ldrb	r0, [r3, #1]
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	6a1a      	ldr	r2, [r3, #32]
 801262e:	2301      	movs	r3, #1
 8012630:	f7fd f8f8 	bl	800f824 <disk_write>
 8012634:	4603      	mov	r3, r0
 8012636:	2b00      	cmp	r3, #0
 8012638:	d004      	beq.n	8012644 <f_lseek+0x1c0>
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	2201      	movs	r2, #1
 801263e:	755a      	strb	r2, [r3, #21]
 8012640:	2301      	movs	r3, #1
 8012642:	e13f      	b.n	80128c4 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	7d1b      	ldrb	r3, [r3, #20]
 8012648:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801264c:	b2da      	uxtb	r2, r3
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8012652:	68bb      	ldr	r3, [r7, #8]
 8012654:	7858      	ldrb	r0, [r3, #1]
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801265c:	2301      	movs	r3, #1
 801265e:	69ba      	ldr	r2, [r7, #24]
 8012660:	f7fd f8c0 	bl	800f7e4 <disk_read>
 8012664:	4603      	mov	r3, r0
 8012666:	2b00      	cmp	r3, #0
 8012668:	d004      	beq.n	8012674 <f_lseek+0x1f0>
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	2201      	movs	r2, #1
 801266e:	755a      	strb	r2, [r3, #21]
 8012670:	2301      	movs	r3, #1
 8012672:	e127      	b.n	80128c4 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	69ba      	ldr	r2, [r7, #24]
 8012678:	621a      	str	r2, [r3, #32]
 801267a:	e121      	b.n	80128c0 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	68db      	ldr	r3, [r3, #12]
 8012680:	683a      	ldr	r2, [r7, #0]
 8012682:	429a      	cmp	r2, r3
 8012684:	d908      	bls.n	8012698 <f_lseek+0x214>
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	7d1b      	ldrb	r3, [r3, #20]
 801268a:	f003 0302 	and.w	r3, r3, #2
 801268e:	2b00      	cmp	r3, #0
 8012690:	d102      	bne.n	8012698 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	68db      	ldr	r3, [r3, #12]
 8012696:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	699b      	ldr	r3, [r3, #24]
 801269c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801269e:	2300      	movs	r3, #0
 80126a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80126a6:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80126a8:	683b      	ldr	r3, [r7, #0]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	f000 80b5 	beq.w	801281a <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80126b0:	68bb      	ldr	r3, [r7, #8]
 80126b2:	895b      	ldrh	r3, [r3, #10]
 80126b4:	461a      	mov	r2, r3
 80126b6:	68bb      	ldr	r3, [r7, #8]
 80126b8:	899b      	ldrh	r3, [r3, #12]
 80126ba:	fb02 f303 	mul.w	r3, r2, r3
 80126be:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80126c0:	6a3b      	ldr	r3, [r7, #32]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d01b      	beq.n	80126fe <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80126c6:	683b      	ldr	r3, [r7, #0]
 80126c8:	1e5a      	subs	r2, r3, #1
 80126ca:	69fb      	ldr	r3, [r7, #28]
 80126cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80126d0:	6a3b      	ldr	r3, [r7, #32]
 80126d2:	1e59      	subs	r1, r3, #1
 80126d4:	69fb      	ldr	r3, [r7, #28]
 80126d6:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80126da:	429a      	cmp	r2, r3
 80126dc:	d30f      	bcc.n	80126fe <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80126de:	6a3b      	ldr	r3, [r7, #32]
 80126e0:	1e5a      	subs	r2, r3, #1
 80126e2:	69fb      	ldr	r3, [r7, #28]
 80126e4:	425b      	negs	r3, r3
 80126e6:	401a      	ands	r2, r3
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	699b      	ldr	r3, [r3, #24]
 80126f0:	683a      	ldr	r2, [r7, #0]
 80126f2:	1ad3      	subs	r3, r2, r3
 80126f4:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	69db      	ldr	r3, [r3, #28]
 80126fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80126fc:	e022      	b.n	8012744 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	689b      	ldr	r3, [r3, #8]
 8012702:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8012704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012706:	2b00      	cmp	r3, #0
 8012708:	d119      	bne.n	801273e <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	2100      	movs	r1, #0
 801270e:	4618      	mov	r0, r3
 8012710:	f7fd fe85 	bl	801041e <create_chain>
 8012714:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8012716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012718:	2b01      	cmp	r3, #1
 801271a:	d104      	bne.n	8012726 <f_lseek+0x2a2>
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	2202      	movs	r2, #2
 8012720:	755a      	strb	r2, [r3, #21]
 8012722:	2302      	movs	r3, #2
 8012724:	e0ce      	b.n	80128c4 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012728:	f1b3 3fff 	cmp.w	r3, #4294967295
 801272c:	d104      	bne.n	8012738 <f_lseek+0x2b4>
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	2201      	movs	r2, #1
 8012732:	755a      	strb	r2, [r3, #21]
 8012734:	2301      	movs	r3, #1
 8012736:	e0c5      	b.n	80128c4 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801273c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012742:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8012744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012746:	2b00      	cmp	r3, #0
 8012748:	d067      	beq.n	801281a <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 801274a:	e03a      	b.n	80127c2 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 801274c:	683a      	ldr	r2, [r7, #0]
 801274e:	69fb      	ldr	r3, [r7, #28]
 8012750:	1ad3      	subs	r3, r2, r3
 8012752:	603b      	str	r3, [r7, #0]
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	699a      	ldr	r2, [r3, #24]
 8012758:	69fb      	ldr	r3, [r7, #28]
 801275a:	441a      	add	r2, r3
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	7d1b      	ldrb	r3, [r3, #20]
 8012764:	f003 0302 	and.w	r3, r3, #2
 8012768:	2b00      	cmp	r3, #0
 801276a:	d00b      	beq.n	8012784 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012770:	4618      	mov	r0, r3
 8012772:	f7fd fe54 	bl	801041e <create_chain>
 8012776:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8012778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801277a:	2b00      	cmp	r3, #0
 801277c:	d108      	bne.n	8012790 <f_lseek+0x30c>
							ofs = 0; break;
 801277e:	2300      	movs	r3, #0
 8012780:	603b      	str	r3, [r7, #0]
 8012782:	e022      	b.n	80127ca <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012788:	4618      	mov	r0, r3
 801278a:	f7fd fbf6 	bl	800ff7a <get_fat>
 801278e:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012796:	d104      	bne.n	80127a2 <f_lseek+0x31e>
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	2201      	movs	r2, #1
 801279c:	755a      	strb	r2, [r3, #21]
 801279e:	2301      	movs	r3, #1
 80127a0:	e090      	b.n	80128c4 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80127a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80127a4:	2b01      	cmp	r3, #1
 80127a6:	d904      	bls.n	80127b2 <f_lseek+0x32e>
 80127a8:	68bb      	ldr	r3, [r7, #8]
 80127aa:	6a1b      	ldr	r3, [r3, #32]
 80127ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80127ae:	429a      	cmp	r2, r3
 80127b0:	d304      	bcc.n	80127bc <f_lseek+0x338>
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	2202      	movs	r2, #2
 80127b6:	755a      	strb	r2, [r3, #21]
 80127b8:	2302      	movs	r3, #2
 80127ba:	e083      	b.n	80128c4 <f_lseek+0x440>
					fp->clust = clst;
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80127c0:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80127c2:	683a      	ldr	r2, [r7, #0]
 80127c4:	69fb      	ldr	r3, [r7, #28]
 80127c6:	429a      	cmp	r2, r3
 80127c8:	d8c0      	bhi.n	801274c <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	699a      	ldr	r2, [r3, #24]
 80127ce:	683b      	ldr	r3, [r7, #0]
 80127d0:	441a      	add	r2, r3
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80127d6:	68bb      	ldr	r3, [r7, #8]
 80127d8:	899b      	ldrh	r3, [r3, #12]
 80127da:	461a      	mov	r2, r3
 80127dc:	683b      	ldr	r3, [r7, #0]
 80127de:	fbb3 f1f2 	udiv	r1, r3, r2
 80127e2:	fb01 f202 	mul.w	r2, r1, r2
 80127e6:	1a9b      	subs	r3, r3, r2
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d016      	beq.n	801281a <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80127ec:	68bb      	ldr	r3, [r7, #8]
 80127ee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80127f0:	4618      	mov	r0, r3
 80127f2:	f7fd fba3 	bl	800ff3c <clust2sect>
 80127f6:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80127f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d104      	bne.n	8012808 <f_lseek+0x384>
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	2202      	movs	r2, #2
 8012802:	755a      	strb	r2, [r3, #21]
 8012804:	2302      	movs	r3, #2
 8012806:	e05d      	b.n	80128c4 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8012808:	68bb      	ldr	r3, [r7, #8]
 801280a:	899b      	ldrh	r3, [r3, #12]
 801280c:	461a      	mov	r2, r3
 801280e:	683b      	ldr	r3, [r7, #0]
 8012810:	fbb3 f3f2 	udiv	r3, r3, r2
 8012814:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012816:	4413      	add	r3, r2
 8012818:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	699a      	ldr	r2, [r3, #24]
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	68db      	ldr	r3, [r3, #12]
 8012822:	429a      	cmp	r2, r3
 8012824:	d90a      	bls.n	801283c <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	699a      	ldr	r2, [r3, #24]
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	7d1b      	ldrb	r3, [r3, #20]
 8012832:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012836:	b2da      	uxtb	r2, r3
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	699b      	ldr	r3, [r3, #24]
 8012840:	68ba      	ldr	r2, [r7, #8]
 8012842:	8992      	ldrh	r2, [r2, #12]
 8012844:	fbb3 f1f2 	udiv	r1, r3, r2
 8012848:	fb01 f202 	mul.w	r2, r1, r2
 801284c:	1a9b      	subs	r3, r3, r2
 801284e:	2b00      	cmp	r3, #0
 8012850:	d036      	beq.n	80128c0 <f_lseek+0x43c>
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	6a1b      	ldr	r3, [r3, #32]
 8012856:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012858:	429a      	cmp	r2, r3
 801285a:	d031      	beq.n	80128c0 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	7d1b      	ldrb	r3, [r3, #20]
 8012860:	b25b      	sxtb	r3, r3
 8012862:	2b00      	cmp	r3, #0
 8012864:	da18      	bge.n	8012898 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012866:	68bb      	ldr	r3, [r7, #8]
 8012868:	7858      	ldrb	r0, [r3, #1]
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	6a1a      	ldr	r2, [r3, #32]
 8012874:	2301      	movs	r3, #1
 8012876:	f7fc ffd5 	bl	800f824 <disk_write>
 801287a:	4603      	mov	r3, r0
 801287c:	2b00      	cmp	r3, #0
 801287e:	d004      	beq.n	801288a <f_lseek+0x406>
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	2201      	movs	r2, #1
 8012884:	755a      	strb	r2, [r3, #21]
 8012886:	2301      	movs	r3, #1
 8012888:	e01c      	b.n	80128c4 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	7d1b      	ldrb	r3, [r3, #20]
 801288e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012892:	b2da      	uxtb	r2, r3
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8012898:	68bb      	ldr	r3, [r7, #8]
 801289a:	7858      	ldrb	r0, [r3, #1]
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80128a2:	2301      	movs	r3, #1
 80128a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80128a6:	f7fc ff9d 	bl	800f7e4 <disk_read>
 80128aa:	4603      	mov	r3, r0
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d004      	beq.n	80128ba <f_lseek+0x436>
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	2201      	movs	r2, #1
 80128b4:	755a      	strb	r2, [r3, #21]
 80128b6:	2301      	movs	r3, #1
 80128b8:	e004      	b.n	80128c4 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80128be:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80128c0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80128c4:	4618      	mov	r0, r3
 80128c6:	3740      	adds	r7, #64	@ 0x40
 80128c8:	46bd      	mov	sp, r7
 80128ca:	bd80      	pop	{r7, pc}

080128cc <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b084      	sub	sp, #16
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	6078      	str	r0, [r7, #4]
 80128d4:	460b      	mov	r3, r1
 80128d6:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80128d8:	78fb      	ldrb	r3, [r7, #3]
 80128da:	2b0a      	cmp	r3, #10
 80128dc:	d103      	bne.n	80128e6 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80128de:	210d      	movs	r1, #13
 80128e0:	6878      	ldr	r0, [r7, #4]
 80128e2:	f7ff fff3 	bl	80128cc <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	685b      	ldr	r3, [r3, #4]
 80128ea:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	db25      	blt.n	801293e <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80128f2:	68fb      	ldr	r3, [r7, #12]
 80128f4:	1c5a      	adds	r2, r3, #1
 80128f6:	60fa      	str	r2, [r7, #12]
 80128f8:	687a      	ldr	r2, [r7, #4]
 80128fa:	4413      	add	r3, r2
 80128fc:	78fa      	ldrb	r2, [r7, #3]
 80128fe:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	2b3c      	cmp	r3, #60	@ 0x3c
 8012904:	dd12      	ble.n	801292c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	6818      	ldr	r0, [r3, #0]
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	f103 010c 	add.w	r1, r3, #12
 8012910:	68fa      	ldr	r2, [r7, #12]
 8012912:	f107 0308 	add.w	r3, r7, #8
 8012916:	f7ff fb79 	bl	801200c <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801291a:	68ba      	ldr	r2, [r7, #8]
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	429a      	cmp	r2, r3
 8012920:	d101      	bne.n	8012926 <putc_bfd+0x5a>
 8012922:	2300      	movs	r3, #0
 8012924:	e001      	b.n	801292a <putc_bfd+0x5e>
 8012926:	f04f 33ff 	mov.w	r3, #4294967295
 801292a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	68fa      	ldr	r2, [r7, #12]
 8012930:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	689b      	ldr	r3, [r3, #8]
 8012936:	1c5a      	adds	r2, r3, #1
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	609a      	str	r2, [r3, #8]
 801293c:	e000      	b.n	8012940 <putc_bfd+0x74>
	if (i < 0) return;
 801293e:	bf00      	nop
}
 8012940:	3710      	adds	r7, #16
 8012942:	46bd      	mov	sp, r7
 8012944:	bd80      	pop	{r7, pc}

08012946 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8012946:	b580      	push	{r7, lr}
 8012948:	b084      	sub	sp, #16
 801294a:	af00      	add	r7, sp, #0
 801294c:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	685b      	ldr	r3, [r3, #4]
 8012952:	2b00      	cmp	r3, #0
 8012954:	db16      	blt.n	8012984 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	6818      	ldr	r0, [r3, #0]
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	f103 010c 	add.w	r1, r3, #12
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	685b      	ldr	r3, [r3, #4]
 8012964:	461a      	mov	r2, r3
 8012966:	f107 030c 	add.w	r3, r7, #12
 801296a:	f7ff fb4f 	bl	801200c <f_write>
 801296e:	4603      	mov	r3, r0
 8012970:	2b00      	cmp	r3, #0
 8012972:	d107      	bne.n	8012984 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	685b      	ldr	r3, [r3, #4]
 8012978:	68fa      	ldr	r2, [r7, #12]
 801297a:	4293      	cmp	r3, r2
 801297c:	d102      	bne.n	8012984 <putc_flush+0x3e>
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	689b      	ldr	r3, [r3, #8]
 8012982:	e001      	b.n	8012988 <putc_flush+0x42>
	return EOF;
 8012984:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012988:	4618      	mov	r0, r3
 801298a:	3710      	adds	r7, #16
 801298c:	46bd      	mov	sp, r7
 801298e:	bd80      	pop	{r7, pc}

08012990 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8012990:	b480      	push	{r7}
 8012992:	b083      	sub	sp, #12
 8012994:	af00      	add	r7, sp, #0
 8012996:	6078      	str	r0, [r7, #4]
 8012998:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	683a      	ldr	r2, [r7, #0]
 801299e:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	2200      	movs	r2, #0
 80129a4:	605a      	str	r2, [r3, #4]
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	685a      	ldr	r2, [r3, #4]
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	609a      	str	r2, [r3, #8]
}
 80129ae:	bf00      	nop
 80129b0:	370c      	adds	r7, #12
 80129b2:	46bd      	mov	sp, r7
 80129b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b8:	4770      	bx	lr
	...

080129bc <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 80129bc:	b40e      	push	{r1, r2, r3}
 80129be:	b580      	push	{r7, lr}
 80129c0:	b0a7      	sub	sp, #156	@ 0x9c
 80129c2:	af00      	add	r7, sp, #0
 80129c4:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 80129c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80129ca:	6879      	ldr	r1, [r7, #4]
 80129cc:	4618      	mov	r0, r3
 80129ce:	f7ff ffdf 	bl	8012990 <putc_init>

	va_start(arp, fmt);
 80129d2:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80129d6:	67bb      	str	r3, [r7, #120]	@ 0x78

	for (;;) {
		c = *fmt++;
 80129d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80129dc:	1c5a      	adds	r2, r3, #1
 80129de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80129e2:	781b      	ldrb	r3, [r3, #0]
 80129e4:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == 0) break;			/* End of string */
 80129e8:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	f000 81f2 	beq.w	8012dd6 <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 80129f2:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80129f6:	2b25      	cmp	r3, #37	@ 0x25
 80129f8:	d008      	beq.n	8012a0c <f_printf+0x50>
			putc_bfd(&pb, c);
 80129fa:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 80129fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012a02:	4611      	mov	r1, r2
 8012a04:	4618      	mov	r0, r3
 8012a06:	f7ff ff61 	bl	80128cc <putc_bfd>
			continue;
 8012a0a:	e1e3      	b.n	8012dd4 <f_printf+0x418>
		}
		w = f = 0;
 8012a0c:	2300      	movs	r3, #0
 8012a0e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8012a12:	2300      	movs	r3, #0
 8012a14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		c = *fmt++;
 8012a18:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012a1c:	1c5a      	adds	r2, r3, #1
 8012a1e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8012a22:	781b      	ldrb	r3, [r3, #0]
 8012a24:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8012a28:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8012a2c:	2b30      	cmp	r3, #48	@ 0x30
 8012a2e:	d10b      	bne.n	8012a48 <f_printf+0x8c>
			f = 1; c = *fmt++;
 8012a30:	2301      	movs	r3, #1
 8012a32:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8012a36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012a3a:	1c5a      	adds	r2, r3, #1
 8012a3c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8012a40:	781b      	ldrb	r3, [r3, #0]
 8012a42:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8012a46:	e024      	b.n	8012a92 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8012a48:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8012a4c:	2b2d      	cmp	r3, #45	@ 0x2d
 8012a4e:	d120      	bne.n	8012a92 <f_printf+0xd6>
				f = 2; c = *fmt++;
 8012a50:	2302      	movs	r3, #2
 8012a52:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8012a56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012a5a:	1c5a      	adds	r2, r3, #1
 8012a5c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8012a60:	781b      	ldrb	r3, [r3, #0]
 8012a62:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8012a66:	e014      	b.n	8012a92 <f_printf+0xd6>
			w = w * 10 + c - '0';
 8012a68:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012a6c:	4613      	mov	r3, r2
 8012a6e:	009b      	lsls	r3, r3, #2
 8012a70:	4413      	add	r3, r2
 8012a72:	005b      	lsls	r3, r3, #1
 8012a74:	461a      	mov	r2, r3
 8012a76:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8012a7a:	4413      	add	r3, r2
 8012a7c:	3b30      	subs	r3, #48	@ 0x30
 8012a7e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			c = *fmt++;
 8012a82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012a86:	1c5a      	adds	r2, r3, #1
 8012a88:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8012a8c:	781b      	ldrb	r3, [r3, #0]
 8012a8e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		while (IsDigit(c)) {		/* Precision */
 8012a92:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8012a96:	2b2f      	cmp	r3, #47	@ 0x2f
 8012a98:	d903      	bls.n	8012aa2 <f_printf+0xe6>
 8012a9a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8012a9e:	2b39      	cmp	r3, #57	@ 0x39
 8012aa0:	d9e2      	bls.n	8012a68 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8012aa2:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8012aa6:	2b6c      	cmp	r3, #108	@ 0x6c
 8012aa8:	d003      	beq.n	8012ab2 <f_printf+0xf6>
 8012aaa:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8012aae:	2b4c      	cmp	r3, #76	@ 0x4c
 8012ab0:	d10d      	bne.n	8012ace <f_printf+0x112>
			f |= 4; c = *fmt++;
 8012ab2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8012ab6:	f043 0304 	orr.w	r3, r3, #4
 8012aba:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8012abe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012ac2:	1c5a      	adds	r2, r3, #1
 8012ac4:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8012ac8:	781b      	ldrb	r3, [r3, #0]
 8012aca:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		}
		if (!c) break;
 8012ace:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	f000 8181 	beq.w	8012dda <f_printf+0x41e>
		d = c;
 8012ad8:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8012adc:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		if (IsLower(d)) d -= 0x20;
 8012ae0:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8012ae4:	2b60      	cmp	r3, #96	@ 0x60
 8012ae6:	d908      	bls.n	8012afa <f_printf+0x13e>
 8012ae8:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8012aec:	2b7a      	cmp	r3, #122	@ 0x7a
 8012aee:	d804      	bhi.n	8012afa <f_printf+0x13e>
 8012af0:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8012af4:	3b20      	subs	r3, #32
 8012af6:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		switch (d) {				/* Type is... */
 8012afa:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8012afe:	3b42      	subs	r3, #66	@ 0x42
 8012b00:	2b16      	cmp	r3, #22
 8012b02:	f200 8098 	bhi.w	8012c36 <f_printf+0x27a>
 8012b06:	a201      	add	r2, pc, #4	@ (adr r2, 8012b0c <f_printf+0x150>)
 8012b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b0c:	08012c17 	.word	0x08012c17
 8012b10:	08012bff 	.word	0x08012bff
 8012b14:	08012c27 	.word	0x08012c27
 8012b18:	08012c37 	.word	0x08012c37
 8012b1c:	08012c37 	.word	0x08012c37
 8012b20:	08012c37 	.word	0x08012c37
 8012b24:	08012c37 	.word	0x08012c37
 8012b28:	08012c37 	.word	0x08012c37
 8012b2c:	08012c37 	.word	0x08012c37
 8012b30:	08012c37 	.word	0x08012c37
 8012b34:	08012c37 	.word	0x08012c37
 8012b38:	08012c37 	.word	0x08012c37
 8012b3c:	08012c37 	.word	0x08012c37
 8012b40:	08012c1f 	.word	0x08012c1f
 8012b44:	08012c37 	.word	0x08012c37
 8012b48:	08012c37 	.word	0x08012c37
 8012b4c:	08012c37 	.word	0x08012c37
 8012b50:	08012b69 	.word	0x08012b69
 8012b54:	08012c37 	.word	0x08012c37
 8012b58:	08012c27 	.word	0x08012c27
 8012b5c:	08012c37 	.word	0x08012c37
 8012b60:	08012c37 	.word	0x08012c37
 8012b64:	08012c2f 	.word	0x08012c2f
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8012b68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012b6a:	1d1a      	adds	r2, r3, #4
 8012b6c:	67ba      	str	r2, [r7, #120]	@ 0x78
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	67fb      	str	r3, [r7, #124]	@ 0x7c
			for (j = 0; p[j]; j++) ;
 8012b72:	2300      	movs	r3, #0
 8012b74:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8012b78:	e004      	b.n	8012b84 <f_printf+0x1c8>
 8012b7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012b7e:	3301      	adds	r3, #1
 8012b80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8012b84:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8012b86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012b8a:	4413      	add	r3, r2
 8012b8c:	781b      	ldrb	r3, [r3, #0]
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d1f3      	bne.n	8012b7a <f_printf+0x1be>
			if (!(f & 2)) {
 8012b92:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8012b96:	f003 0302 	and.w	r3, r3, #2
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d11a      	bne.n	8012bd4 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8012b9e:	e005      	b.n	8012bac <f_printf+0x1f0>
 8012ba0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012ba4:	2120      	movs	r1, #32
 8012ba6:	4618      	mov	r0, r3
 8012ba8:	f7ff fe90 	bl	80128cc <putc_bfd>
 8012bac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012bb0:	1c5a      	adds	r2, r3, #1
 8012bb2:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8012bb6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012bba:	429a      	cmp	r2, r3
 8012bbc:	d8f0      	bhi.n	8012ba0 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8012bbe:	e009      	b.n	8012bd4 <f_printf+0x218>
 8012bc0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012bc2:	1c5a      	adds	r2, r3, #1
 8012bc4:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8012bc6:	781a      	ldrb	r2, [r3, #0]
 8012bc8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012bcc:	4611      	mov	r1, r2
 8012bce:	4618      	mov	r0, r3
 8012bd0:	f7ff fe7c 	bl	80128cc <putc_bfd>
 8012bd4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012bd6:	781b      	ldrb	r3, [r3, #0]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d1f1      	bne.n	8012bc0 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8012bdc:	e005      	b.n	8012bea <f_printf+0x22e>
 8012bde:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012be2:	2120      	movs	r1, #32
 8012be4:	4618      	mov	r0, r3
 8012be6:	f7ff fe71 	bl	80128cc <putc_bfd>
 8012bea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012bee:	1c5a      	adds	r2, r3, #1
 8012bf0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8012bf4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012bf8:	429a      	cmp	r2, r3
 8012bfa:	d8f0      	bhi.n	8012bde <f_printf+0x222>
			continue;
 8012bfc:	e0ea      	b.n	8012dd4 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8012bfe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012c00:	1d1a      	adds	r2, r3, #4
 8012c02:	67ba      	str	r2, [r7, #120]	@ 0x78
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	b2da      	uxtb	r2, r3
 8012c08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012c0c:	4611      	mov	r1, r2
 8012c0e:	4618      	mov	r0, r3
 8012c10:	f7ff fe5c 	bl	80128cc <putc_bfd>
 8012c14:	e0de      	b.n	8012dd4 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 8012c16:	2302      	movs	r3, #2
 8012c18:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8012c1c:	e014      	b.n	8012c48 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8012c1e:	2308      	movs	r3, #8
 8012c20:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8012c24:	e010      	b.n	8012c48 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8012c26:	230a      	movs	r3, #10
 8012c28:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8012c2c:	e00c      	b.n	8012c48 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8012c2e:	2310      	movs	r3, #16
 8012c30:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8012c34:	e008      	b.n	8012c48 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8012c36:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 8012c3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012c3e:	4611      	mov	r1, r2
 8012c40:	4618      	mov	r0, r3
 8012c42:	f7ff fe43 	bl	80128cc <putc_bfd>
 8012c46:	e0c5      	b.n	8012dd4 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8012c48:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8012c4c:	f003 0304 	and.w	r3, r3, #4
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d004      	beq.n	8012c5e <f_printf+0x2a2>
 8012c54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012c56:	1d1a      	adds	r2, r3, #4
 8012c58:	67ba      	str	r2, [r7, #120]	@ 0x78
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	e00c      	b.n	8012c78 <f_printf+0x2bc>
 8012c5e:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8012c62:	2b44      	cmp	r3, #68	@ 0x44
 8012c64:	d104      	bne.n	8012c70 <f_printf+0x2b4>
 8012c66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012c68:	1d1a      	adds	r2, r3, #4
 8012c6a:	67ba      	str	r2, [r7, #120]	@ 0x78
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	e003      	b.n	8012c78 <f_printf+0x2bc>
 8012c70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012c72:	1d1a      	adds	r2, r3, #4
 8012c74:	67ba      	str	r2, [r7, #120]	@ 0x78
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8012c7c:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8012c80:	2b44      	cmp	r3, #68	@ 0x44
 8012c82:	d10e      	bne.n	8012ca2 <f_printf+0x2e6>
 8012c84:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	da0a      	bge.n	8012ca2 <f_printf+0x2e6>
			v = 0 - v;
 8012c8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012c90:	425b      	negs	r3, r3
 8012c92:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			f |= 8;
 8012c96:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8012c9a:	f043 0308 	orr.w	r3, r3, #8
 8012c9e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}
		i = 0;
 8012ca2:	2300      	movs	r3, #0
 8012ca4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8012ca8:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 8012cac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012cb0:	fbb3 f1f2 	udiv	r1, r3, r2
 8012cb4:	fb01 f202 	mul.w	r2, r1, r2
 8012cb8:	1a9b      	subs	r3, r3, r2
 8012cba:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 8012cbe:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8012cc2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8012cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8012cca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8012cce:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8012cd2:	2b09      	cmp	r3, #9
 8012cd4:	d90b      	bls.n	8012cee <f_printf+0x332>
 8012cd6:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8012cda:	2b78      	cmp	r3, #120	@ 0x78
 8012cdc:	d101      	bne.n	8012ce2 <f_printf+0x326>
 8012cde:	2227      	movs	r2, #39	@ 0x27
 8012ce0:	e000      	b.n	8012ce4 <f_printf+0x328>
 8012ce2:	2207      	movs	r2, #7
 8012ce4:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8012ce8:	4413      	add	r3, r2
 8012cea:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
			str[i++] = d + '0';
 8012cee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012cf2:	1c5a      	adds	r2, r3, #1
 8012cf4:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8012cf8:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8012cfc:	3230      	adds	r2, #48	@ 0x30
 8012cfe:	b2d2      	uxtb	r2, r2
 8012d00:	3398      	adds	r3, #152	@ 0x98
 8012d02:	443b      	add	r3, r7
 8012d04:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8012d08:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d003      	beq.n	8012d18 <f_printf+0x35c>
 8012d10:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012d14:	2b1f      	cmp	r3, #31
 8012d16:	d9c7      	bls.n	8012ca8 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8012d18:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8012d1c:	f003 0308 	and.w	r3, r3, #8
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d009      	beq.n	8012d38 <f_printf+0x37c>
 8012d24:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012d28:	1c5a      	adds	r2, r3, #1
 8012d2a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8012d2e:	3398      	adds	r3, #152	@ 0x98
 8012d30:	443b      	add	r3, r7
 8012d32:	222d      	movs	r2, #45	@ 0x2d
 8012d34:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8012d38:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012d3c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8012d40:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8012d44:	f003 0301 	and.w	r3, r3, #1
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d001      	beq.n	8012d50 <f_printf+0x394>
 8012d4c:	2330      	movs	r3, #48	@ 0x30
 8012d4e:	e000      	b.n	8012d52 <f_printf+0x396>
 8012d50:	2320      	movs	r3, #32
 8012d52:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8012d56:	e007      	b.n	8012d68 <f_printf+0x3ac>
 8012d58:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8012d5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012d60:	4611      	mov	r1, r2
 8012d62:	4618      	mov	r0, r3
 8012d64:	f7ff fdb2 	bl	80128cc <putc_bfd>
 8012d68:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8012d6c:	f003 0302 	and.w	r3, r3, #2
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d108      	bne.n	8012d86 <f_printf+0x3ca>
 8012d74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012d78:	1c5a      	adds	r2, r3, #1
 8012d7a:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8012d7e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012d82:	429a      	cmp	r2, r3
 8012d84:	d8e8      	bhi.n	8012d58 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 8012d86:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012d8a:	3b01      	subs	r3, #1
 8012d8c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012d90:	f107 020c 	add.w	r2, r7, #12
 8012d94:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012d98:	4413      	add	r3, r2
 8012d9a:	781a      	ldrb	r2, [r3, #0]
 8012d9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012da0:	4611      	mov	r1, r2
 8012da2:	4618      	mov	r0, r3
 8012da4:	f7ff fd92 	bl	80128cc <putc_bfd>
		} while (i);
 8012da8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d1ea      	bne.n	8012d86 <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 8012db0:	e007      	b.n	8012dc2 <f_printf+0x406>
 8012db2:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8012db6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012dba:	4611      	mov	r1, r2
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	f7ff fd85 	bl	80128cc <putc_bfd>
 8012dc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012dc6:	1c5a      	adds	r2, r3, #1
 8012dc8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8012dcc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012dd0:	429a      	cmp	r2, r3
 8012dd2:	d8ee      	bhi.n	8012db2 <f_printf+0x3f6>
		c = *fmt++;
 8012dd4:	e600      	b.n	80129d8 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 8012dd6:	bf00      	nop
 8012dd8:	e000      	b.n	8012ddc <f_printf+0x420>
		if (!c) break;
 8012dda:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8012ddc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012de0:	4618      	mov	r0, r3
 8012de2:	f7ff fdb0 	bl	8012946 <putc_flush>
 8012de6:	4603      	mov	r3, r0
}
 8012de8:	4618      	mov	r0, r3
 8012dea:	379c      	adds	r7, #156	@ 0x9c
 8012dec:	46bd      	mov	sp, r7
 8012dee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012df2:	b003      	add	sp, #12
 8012df4:	4770      	bx	lr
 8012df6:	bf00      	nop

08012df8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012df8:	b480      	push	{r7}
 8012dfa:	b087      	sub	sp, #28
 8012dfc:	af00      	add	r7, sp, #0
 8012dfe:	60f8      	str	r0, [r7, #12]
 8012e00:	60b9      	str	r1, [r7, #8]
 8012e02:	4613      	mov	r3, r2
 8012e04:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012e06:	2301      	movs	r3, #1
 8012e08:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012e0a:	2300      	movs	r3, #0
 8012e0c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8012e0e:	4b1f      	ldr	r3, [pc, #124]	@ (8012e8c <FATFS_LinkDriverEx+0x94>)
 8012e10:	7a5b      	ldrb	r3, [r3, #9]
 8012e12:	b2db      	uxtb	r3, r3
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d131      	bne.n	8012e7c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012e18:	4b1c      	ldr	r3, [pc, #112]	@ (8012e8c <FATFS_LinkDriverEx+0x94>)
 8012e1a:	7a5b      	ldrb	r3, [r3, #9]
 8012e1c:	b2db      	uxtb	r3, r3
 8012e1e:	461a      	mov	r2, r3
 8012e20:	4b1a      	ldr	r3, [pc, #104]	@ (8012e8c <FATFS_LinkDriverEx+0x94>)
 8012e22:	2100      	movs	r1, #0
 8012e24:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8012e26:	4b19      	ldr	r3, [pc, #100]	@ (8012e8c <FATFS_LinkDriverEx+0x94>)
 8012e28:	7a5b      	ldrb	r3, [r3, #9]
 8012e2a:	b2db      	uxtb	r3, r3
 8012e2c:	4a17      	ldr	r2, [pc, #92]	@ (8012e8c <FATFS_LinkDriverEx+0x94>)
 8012e2e:	009b      	lsls	r3, r3, #2
 8012e30:	4413      	add	r3, r2
 8012e32:	68fa      	ldr	r2, [r7, #12]
 8012e34:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8012e36:	4b15      	ldr	r3, [pc, #84]	@ (8012e8c <FATFS_LinkDriverEx+0x94>)
 8012e38:	7a5b      	ldrb	r3, [r3, #9]
 8012e3a:	b2db      	uxtb	r3, r3
 8012e3c:	461a      	mov	r2, r3
 8012e3e:	4b13      	ldr	r3, [pc, #76]	@ (8012e8c <FATFS_LinkDriverEx+0x94>)
 8012e40:	4413      	add	r3, r2
 8012e42:	79fa      	ldrb	r2, [r7, #7]
 8012e44:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012e46:	4b11      	ldr	r3, [pc, #68]	@ (8012e8c <FATFS_LinkDriverEx+0x94>)
 8012e48:	7a5b      	ldrb	r3, [r3, #9]
 8012e4a:	b2db      	uxtb	r3, r3
 8012e4c:	1c5a      	adds	r2, r3, #1
 8012e4e:	b2d1      	uxtb	r1, r2
 8012e50:	4a0e      	ldr	r2, [pc, #56]	@ (8012e8c <FATFS_LinkDriverEx+0x94>)
 8012e52:	7251      	strb	r1, [r2, #9]
 8012e54:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012e56:	7dbb      	ldrb	r3, [r7, #22]
 8012e58:	3330      	adds	r3, #48	@ 0x30
 8012e5a:	b2da      	uxtb	r2, r3
 8012e5c:	68bb      	ldr	r3, [r7, #8]
 8012e5e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012e60:	68bb      	ldr	r3, [r7, #8]
 8012e62:	3301      	adds	r3, #1
 8012e64:	223a      	movs	r2, #58	@ 0x3a
 8012e66:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012e68:	68bb      	ldr	r3, [r7, #8]
 8012e6a:	3302      	adds	r3, #2
 8012e6c:	222f      	movs	r2, #47	@ 0x2f
 8012e6e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012e70:	68bb      	ldr	r3, [r7, #8]
 8012e72:	3303      	adds	r3, #3
 8012e74:	2200      	movs	r2, #0
 8012e76:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012e78:	2300      	movs	r3, #0
 8012e7a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e7e:	4618      	mov	r0, r3
 8012e80:	371c      	adds	r7, #28
 8012e82:	46bd      	mov	sp, r7
 8012e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e88:	4770      	bx	lr
 8012e8a:	bf00      	nop
 8012e8c:	24002cfc 	.word	0x24002cfc

08012e90 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012e90:	b580      	push	{r7, lr}
 8012e92:	b082      	sub	sp, #8
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	6078      	str	r0, [r7, #4]
 8012e98:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012e9a:	2200      	movs	r2, #0
 8012e9c:	6839      	ldr	r1, [r7, #0]
 8012e9e:	6878      	ldr	r0, [r7, #4]
 8012ea0:	f7ff ffaa 	bl	8012df8 <FATFS_LinkDriverEx>
 8012ea4:	4603      	mov	r3, r0
}
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	3708      	adds	r7, #8
 8012eaa:	46bd      	mov	sp, r7
 8012eac:	bd80      	pop	{r7, pc}
	...

08012eb0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8012eb0:	b480      	push	{r7}
 8012eb2:	b085      	sub	sp, #20
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	4603      	mov	r3, r0
 8012eb8:	6039      	str	r1, [r7, #0]
 8012eba:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8012ebc:	88fb      	ldrh	r3, [r7, #6]
 8012ebe:	2b7f      	cmp	r3, #127	@ 0x7f
 8012ec0:	d802      	bhi.n	8012ec8 <ff_convert+0x18>
		c = chr;
 8012ec2:	88fb      	ldrh	r3, [r7, #6]
 8012ec4:	81fb      	strh	r3, [r7, #14]
 8012ec6:	e025      	b.n	8012f14 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8012ec8:	683b      	ldr	r3, [r7, #0]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d00b      	beq.n	8012ee6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8012ece:	88fb      	ldrh	r3, [r7, #6]
 8012ed0:	2bff      	cmp	r3, #255	@ 0xff
 8012ed2:	d805      	bhi.n	8012ee0 <ff_convert+0x30>
 8012ed4:	88fb      	ldrh	r3, [r7, #6]
 8012ed6:	3b80      	subs	r3, #128	@ 0x80
 8012ed8:	4a12      	ldr	r2, [pc, #72]	@ (8012f24 <ff_convert+0x74>)
 8012eda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012ede:	e000      	b.n	8012ee2 <ff_convert+0x32>
 8012ee0:	2300      	movs	r3, #0
 8012ee2:	81fb      	strh	r3, [r7, #14]
 8012ee4:	e016      	b.n	8012f14 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8012ee6:	2300      	movs	r3, #0
 8012ee8:	81fb      	strh	r3, [r7, #14]
 8012eea:	e009      	b.n	8012f00 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8012eec:	89fb      	ldrh	r3, [r7, #14]
 8012eee:	4a0d      	ldr	r2, [pc, #52]	@ (8012f24 <ff_convert+0x74>)
 8012ef0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012ef4:	88fa      	ldrh	r2, [r7, #6]
 8012ef6:	429a      	cmp	r2, r3
 8012ef8:	d006      	beq.n	8012f08 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8012efa:	89fb      	ldrh	r3, [r7, #14]
 8012efc:	3301      	adds	r3, #1
 8012efe:	81fb      	strh	r3, [r7, #14]
 8012f00:	89fb      	ldrh	r3, [r7, #14]
 8012f02:	2b7f      	cmp	r3, #127	@ 0x7f
 8012f04:	d9f2      	bls.n	8012eec <ff_convert+0x3c>
 8012f06:	e000      	b.n	8012f0a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8012f08:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8012f0a:	89fb      	ldrh	r3, [r7, #14]
 8012f0c:	3380      	adds	r3, #128	@ 0x80
 8012f0e:	b29b      	uxth	r3, r3
 8012f10:	b2db      	uxtb	r3, r3
 8012f12:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8012f14:	89fb      	ldrh	r3, [r7, #14]
}
 8012f16:	4618      	mov	r0, r3
 8012f18:	3714      	adds	r7, #20
 8012f1a:	46bd      	mov	sp, r7
 8012f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f20:	4770      	bx	lr
 8012f22:	bf00      	nop
 8012f24:	080134e0 	.word	0x080134e0

08012f28 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8012f28:	b480      	push	{r7}
 8012f2a:	b087      	sub	sp, #28
 8012f2c:	af00      	add	r7, sp, #0
 8012f2e:	4603      	mov	r3, r0
 8012f30:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8012f32:	88fb      	ldrh	r3, [r7, #6]
 8012f34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012f38:	d201      	bcs.n	8012f3e <ff_wtoupper+0x16>
 8012f3a:	4b3e      	ldr	r3, [pc, #248]	@ (8013034 <ff_wtoupper+0x10c>)
 8012f3c:	e000      	b.n	8012f40 <ff_wtoupper+0x18>
 8012f3e:	4b3e      	ldr	r3, [pc, #248]	@ (8013038 <ff_wtoupper+0x110>)
 8012f40:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8012f42:	697b      	ldr	r3, [r7, #20]
 8012f44:	1c9a      	adds	r2, r3, #2
 8012f46:	617a      	str	r2, [r7, #20]
 8012f48:	881b      	ldrh	r3, [r3, #0]
 8012f4a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8012f4c:	8a7b      	ldrh	r3, [r7, #18]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d068      	beq.n	8013024 <ff_wtoupper+0xfc>
 8012f52:	88fa      	ldrh	r2, [r7, #6]
 8012f54:	8a7b      	ldrh	r3, [r7, #18]
 8012f56:	429a      	cmp	r2, r3
 8012f58:	d364      	bcc.n	8013024 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8012f5a:	697b      	ldr	r3, [r7, #20]
 8012f5c:	1c9a      	adds	r2, r3, #2
 8012f5e:	617a      	str	r2, [r7, #20]
 8012f60:	881b      	ldrh	r3, [r3, #0]
 8012f62:	823b      	strh	r3, [r7, #16]
 8012f64:	8a3b      	ldrh	r3, [r7, #16]
 8012f66:	0a1b      	lsrs	r3, r3, #8
 8012f68:	81fb      	strh	r3, [r7, #14]
 8012f6a:	8a3b      	ldrh	r3, [r7, #16]
 8012f6c:	b2db      	uxtb	r3, r3
 8012f6e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8012f70:	88fa      	ldrh	r2, [r7, #6]
 8012f72:	8a79      	ldrh	r1, [r7, #18]
 8012f74:	8a3b      	ldrh	r3, [r7, #16]
 8012f76:	440b      	add	r3, r1
 8012f78:	429a      	cmp	r2, r3
 8012f7a:	da49      	bge.n	8013010 <ff_wtoupper+0xe8>
			switch (cmd) {
 8012f7c:	89fb      	ldrh	r3, [r7, #14]
 8012f7e:	2b08      	cmp	r3, #8
 8012f80:	d84f      	bhi.n	8013022 <ff_wtoupper+0xfa>
 8012f82:	a201      	add	r2, pc, #4	@ (adr r2, 8012f88 <ff_wtoupper+0x60>)
 8012f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f88:	08012fad 	.word	0x08012fad
 8012f8c:	08012fbf 	.word	0x08012fbf
 8012f90:	08012fd5 	.word	0x08012fd5
 8012f94:	08012fdd 	.word	0x08012fdd
 8012f98:	08012fe5 	.word	0x08012fe5
 8012f9c:	08012fed 	.word	0x08012fed
 8012fa0:	08012ff5 	.word	0x08012ff5
 8012fa4:	08012ffd 	.word	0x08012ffd
 8012fa8:	08013005 	.word	0x08013005
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8012fac:	88fa      	ldrh	r2, [r7, #6]
 8012fae:	8a7b      	ldrh	r3, [r7, #18]
 8012fb0:	1ad3      	subs	r3, r2, r3
 8012fb2:	005b      	lsls	r3, r3, #1
 8012fb4:	697a      	ldr	r2, [r7, #20]
 8012fb6:	4413      	add	r3, r2
 8012fb8:	881b      	ldrh	r3, [r3, #0]
 8012fba:	80fb      	strh	r3, [r7, #6]
 8012fbc:	e027      	b.n	801300e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8012fbe:	88fa      	ldrh	r2, [r7, #6]
 8012fc0:	8a7b      	ldrh	r3, [r7, #18]
 8012fc2:	1ad3      	subs	r3, r2, r3
 8012fc4:	b29b      	uxth	r3, r3
 8012fc6:	f003 0301 	and.w	r3, r3, #1
 8012fca:	b29b      	uxth	r3, r3
 8012fcc:	88fa      	ldrh	r2, [r7, #6]
 8012fce:	1ad3      	subs	r3, r2, r3
 8012fd0:	80fb      	strh	r3, [r7, #6]
 8012fd2:	e01c      	b.n	801300e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8012fd4:	88fb      	ldrh	r3, [r7, #6]
 8012fd6:	3b10      	subs	r3, #16
 8012fd8:	80fb      	strh	r3, [r7, #6]
 8012fda:	e018      	b.n	801300e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8012fdc:	88fb      	ldrh	r3, [r7, #6]
 8012fde:	3b20      	subs	r3, #32
 8012fe0:	80fb      	strh	r3, [r7, #6]
 8012fe2:	e014      	b.n	801300e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8012fe4:	88fb      	ldrh	r3, [r7, #6]
 8012fe6:	3b30      	subs	r3, #48	@ 0x30
 8012fe8:	80fb      	strh	r3, [r7, #6]
 8012fea:	e010      	b.n	801300e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8012fec:	88fb      	ldrh	r3, [r7, #6]
 8012fee:	3b1a      	subs	r3, #26
 8012ff0:	80fb      	strh	r3, [r7, #6]
 8012ff2:	e00c      	b.n	801300e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8012ff4:	88fb      	ldrh	r3, [r7, #6]
 8012ff6:	3308      	adds	r3, #8
 8012ff8:	80fb      	strh	r3, [r7, #6]
 8012ffa:	e008      	b.n	801300e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8012ffc:	88fb      	ldrh	r3, [r7, #6]
 8012ffe:	3b50      	subs	r3, #80	@ 0x50
 8013000:	80fb      	strh	r3, [r7, #6]
 8013002:	e004      	b.n	801300e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8013004:	88fb      	ldrh	r3, [r7, #6]
 8013006:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 801300a:	80fb      	strh	r3, [r7, #6]
 801300c:	bf00      	nop
			}
			break;
 801300e:	e008      	b.n	8013022 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8013010:	89fb      	ldrh	r3, [r7, #14]
 8013012:	2b00      	cmp	r3, #0
 8013014:	d195      	bne.n	8012f42 <ff_wtoupper+0x1a>
 8013016:	8a3b      	ldrh	r3, [r7, #16]
 8013018:	005b      	lsls	r3, r3, #1
 801301a:	697a      	ldr	r2, [r7, #20]
 801301c:	4413      	add	r3, r2
 801301e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8013020:	e78f      	b.n	8012f42 <ff_wtoupper+0x1a>
			break;
 8013022:	bf00      	nop
	}

	return chr;
 8013024:	88fb      	ldrh	r3, [r7, #6]
}
 8013026:	4618      	mov	r0, r3
 8013028:	371c      	adds	r7, #28
 801302a:	46bd      	mov	sp, r7
 801302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013030:	4770      	bx	lr
 8013032:	bf00      	nop
 8013034:	080135e0 	.word	0x080135e0
 8013038:	080137d4 	.word	0x080137d4

0801303c <memset>:
 801303c:	4402      	add	r2, r0
 801303e:	4603      	mov	r3, r0
 8013040:	4293      	cmp	r3, r2
 8013042:	d100      	bne.n	8013046 <memset+0xa>
 8013044:	4770      	bx	lr
 8013046:	f803 1b01 	strb.w	r1, [r3], #1
 801304a:	e7f9      	b.n	8013040 <memset+0x4>

0801304c <__errno>:
 801304c:	4b01      	ldr	r3, [pc, #4]	@ (8013054 <__errno+0x8>)
 801304e:	6818      	ldr	r0, [r3, #0]
 8013050:	4770      	bx	lr
 8013052:	bf00      	nop
 8013054:	240000c0 	.word	0x240000c0

08013058 <__libc_init_array>:
 8013058:	b570      	push	{r4, r5, r6, lr}
 801305a:	4d0d      	ldr	r5, [pc, #52]	@ (8013090 <__libc_init_array+0x38>)
 801305c:	4c0d      	ldr	r4, [pc, #52]	@ (8013094 <__libc_init_array+0x3c>)
 801305e:	1b64      	subs	r4, r4, r5
 8013060:	10a4      	asrs	r4, r4, #2
 8013062:	2600      	movs	r6, #0
 8013064:	42a6      	cmp	r6, r4
 8013066:	d109      	bne.n	801307c <__libc_init_array+0x24>
 8013068:	4d0b      	ldr	r5, [pc, #44]	@ (8013098 <__libc_init_array+0x40>)
 801306a:	4c0c      	ldr	r4, [pc, #48]	@ (801309c <__libc_init_array+0x44>)
 801306c:	f000 f954 	bl	8013318 <_init>
 8013070:	1b64      	subs	r4, r4, r5
 8013072:	10a4      	asrs	r4, r4, #2
 8013074:	2600      	movs	r6, #0
 8013076:	42a6      	cmp	r6, r4
 8013078:	d105      	bne.n	8013086 <__libc_init_array+0x2e>
 801307a:	bd70      	pop	{r4, r5, r6, pc}
 801307c:	f855 3b04 	ldr.w	r3, [r5], #4
 8013080:	4798      	blx	r3
 8013082:	3601      	adds	r6, #1
 8013084:	e7ee      	b.n	8013064 <__libc_init_array+0xc>
 8013086:	f855 3b04 	ldr.w	r3, [r5], #4
 801308a:	4798      	blx	r3
 801308c:	3601      	adds	r6, #1
 801308e:	e7f2      	b.n	8013076 <__libc_init_array+0x1e>
 8013090:	08014128 	.word	0x08014128
 8013094:	08014128 	.word	0x08014128
 8013098:	08014128 	.word	0x08014128
 801309c:	0801412c 	.word	0x0801412c

080130a0 <memcpy>:
 80130a0:	440a      	add	r2, r1
 80130a2:	4291      	cmp	r1, r2
 80130a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80130a8:	d100      	bne.n	80130ac <memcpy+0xc>
 80130aa:	4770      	bx	lr
 80130ac:	b510      	push	{r4, lr}
 80130ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80130b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80130b6:	4291      	cmp	r1, r2
 80130b8:	d1f9      	bne.n	80130ae <memcpy+0xe>
 80130ba:	bd10      	pop	{r4, pc}
 80130bc:	0000      	movs	r0, r0
	...

080130c0 <log>:
 80130c0:	b4f0      	push	{r4, r5, r6, r7}
 80130c2:	ee10 0a90 	vmov	r0, s1
 80130c6:	ee10 3a10 	vmov	r3, s0
 80130ca:	f04f 34ff 	mov.w	r4, #4294967295
 80130ce:	429c      	cmp	r4, r3
 80130d0:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 80130d4:	4c70      	ldr	r4, [pc, #448]	@ (8013298 <log+0x1d8>)
 80130d6:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 80130da:	418c      	sbcs	r4, r1
 80130dc:	ed2d 8b02 	vpush	{d8}
 80130e0:	ea4f 4210 	mov.w	r2, r0, lsr #16
 80130e4:	d35a      	bcc.n	801319c <log+0xdc>
 80130e6:	4a6d      	ldr	r2, [pc, #436]	@ (801329c <log+0x1dc>)
 80130e8:	4290      	cmp	r0, r2
 80130ea:	bf08      	it	eq
 80130ec:	2b00      	cmpeq	r3, #0
 80130ee:	f000 80c4 	beq.w	801327a <log+0x1ba>
 80130f2:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 80130f6:	ee30 0b47 	vsub.f64	d0, d0, d7
 80130fa:	4b69      	ldr	r3, [pc, #420]	@ (80132a0 <log+0x1e0>)
 80130fc:	ee20 2b00 	vmul.f64	d2, d0, d0
 8013100:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8013104:	ee20 4b02 	vmul.f64	d4, d0, d2
 8013108:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 801310c:	eea6 7b00 	vfma.f64	d7, d6, d0
 8013110:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 8013114:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 8013118:	eea6 7b02 	vfma.f64	d7, d6, d2
 801311c:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 8013120:	eea5 6b00 	vfma.f64	d6, d5, d0
 8013124:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 8013128:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 801312c:	eea5 6b02 	vfma.f64	d6, d5, d2
 8013130:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 8013134:	eea3 5b00 	vfma.f64	d5, d3, d0
 8013138:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 801313c:	eea3 5b02 	vfma.f64	d5, d3, d2
 8013140:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 8013144:	eea3 5b04 	vfma.f64	d5, d3, d4
 8013148:	eea5 6b04 	vfma.f64	d6, d5, d4
 801314c:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8013150:	eea6 7b04 	vfma.f64	d7, d6, d4
 8013154:	eeb0 2b47 	vmov.f64	d2, d7
 8013158:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 8013280 <log+0x1c0>
 801315c:	eeb0 6b40 	vmov.f64	d6, d0
 8013160:	eeb0 3b40 	vmov.f64	d3, d0
 8013164:	eea0 6b07 	vfma.f64	d6, d0, d7
 8013168:	eea0 6b47 	vfms.f64	d6, d0, d7
 801316c:	ee30 8b46 	vsub.f64	d8, d0, d6
 8013170:	ee26 1b06 	vmul.f64	d1, d6, d6
 8013174:	eea1 3b05 	vfma.f64	d3, d1, d5
 8013178:	ee30 7b43 	vsub.f64	d7, d0, d3
 801317c:	ee30 0b06 	vadd.f64	d0, d0, d6
 8013180:	eea1 7b05 	vfma.f64	d7, d1, d5
 8013184:	ee25 5b08 	vmul.f64	d5, d5, d8
 8013188:	eea5 7b00 	vfma.f64	d7, d5, d0
 801318c:	eea2 7b04 	vfma.f64	d7, d2, d4
 8013190:	ee33 0b07 	vadd.f64	d0, d3, d7
 8013194:	ecbd 8b02 	vpop	{d8}
 8013198:	bcf0      	pop	{r4, r5, r6, r7}
 801319a:	4770      	bx	lr
 801319c:	f1a2 0410 	sub.w	r4, r2, #16
 80131a0:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 80131a4:	428c      	cmp	r4, r1
 80131a6:	d923      	bls.n	80131f0 <log+0x130>
 80131a8:	18d9      	adds	r1, r3, r3
 80131aa:	eb40 0400 	adc.w	r4, r0, r0
 80131ae:	4321      	orrs	r1, r4
 80131b0:	d105      	bne.n	80131be <log+0xfe>
 80131b2:	ecbd 8b02 	vpop	{d8}
 80131b6:	2001      	movs	r0, #1
 80131b8:	bcf0      	pop	{r4, r5, r6, r7}
 80131ba:	f000 b885 	b.w	80132c8 <__math_divzero>
 80131be:	4939      	ldr	r1, [pc, #228]	@ (80132a4 <log+0x1e4>)
 80131c0:	4288      	cmp	r0, r1
 80131c2:	bf08      	it	eq
 80131c4:	2b00      	cmpeq	r3, #0
 80131c6:	d0e5      	beq.n	8013194 <log+0xd4>
 80131c8:	0413      	lsls	r3, r2, #16
 80131ca:	d403      	bmi.n	80131d4 <log+0x114>
 80131cc:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80131d0:	4393      	bics	r3, r2
 80131d2:	d104      	bne.n	80131de <log+0x11e>
 80131d4:	ecbd 8b02 	vpop	{d8}
 80131d8:	bcf0      	pop	{r4, r5, r6, r7}
 80131da:	f000 b88d 	b.w	80132f8 <__math_invalid>
 80131de:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8013288 <log+0x1c8>
 80131e2:	ee20 7b07 	vmul.f64	d7, d0, d7
 80131e6:	ec53 2b17 	vmov	r2, r3, d7
 80131ea:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 80131ee:	4613      	mov	r3, r2
 80131f0:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 80131f4:	492a      	ldr	r1, [pc, #168]	@ (80132a0 <log+0x1e0>)
 80131f6:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 80131fa:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 80131fe:	f3c2 3446 	ubfx	r4, r2, #13, #7
 8013202:	0d15      	lsrs	r5, r2, #20
 8013204:	eb01 1c04 	add.w	ip, r1, r4, lsl #4
 8013208:	052d      	lsls	r5, r5, #20
 801320a:	ed9c 7b24 	vldr	d7, [ip, #144]	@ 0x90
 801320e:	1e1e      	subs	r6, r3, #0
 8013210:	1b47      	subs	r7, r0, r5
 8013212:	ec47 6b16 	vmov	d6, r6, r7
 8013216:	1512      	asrs	r2, r2, #20
 8013218:	eea7 5b06 	vfma.f64	d5, d7, d6
 801321c:	ee07 2a90 	vmov	s15, r2
 8013220:	ee25 2b05 	vmul.f64	d2, d5, d5
 8013224:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8013228:	ed91 4b00 	vldr	d4, [r1]
 801322c:	ee25 1b02 	vmul.f64	d1, d5, d2
 8013230:	ed9c 7b26 	vldr	d7, [ip, #152]	@ 0x98
 8013234:	eea4 7b06 	vfma.f64	d7, d4, d6
 8013238:	ee35 4b07 	vadd.f64	d4, d5, d7
 801323c:	ee37 0b44 	vsub.f64	d0, d7, d4
 8013240:	ed91 7b02 	vldr	d7, [r1, #8]
 8013244:	ee30 0b05 	vadd.f64	d0, d0, d5
 8013248:	eea7 0b06 	vfma.f64	d0, d7, d6
 801324c:	ed91 7b04 	vldr	d7, [r1, #16]
 8013250:	ed91 6b08 	vldr	d6, [r1, #32]
 8013254:	eea7 0b02 	vfma.f64	d0, d7, d2
 8013258:	ed91 7b06 	vldr	d7, [r1, #24]
 801325c:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 8013260:	eea6 7b05 	vfma.f64	d7, d6, d5
 8013264:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 8013268:	eea3 6b05 	vfma.f64	d6, d3, d5
 801326c:	eea6 7b02 	vfma.f64	d7, d6, d2
 8013270:	eea1 0b07 	vfma.f64	d0, d1, d7
 8013274:	ee30 0b04 	vadd.f64	d0, d0, d4
 8013278:	e78c      	b.n	8013194 <log+0xd4>
 801327a:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 8013290 <log+0x1d0>
 801327e:	e789      	b.n	8013194 <log+0xd4>
 8013280:	00000000 	.word	0x00000000
 8013284:	41a00000 	.word	0x41a00000
 8013288:	00000000 	.word	0x00000000
 801328c:	43300000 	.word	0x43300000
	...
 8013298:	000308ff 	.word	0x000308ff
 801329c:	3ff00000 	.word	0x3ff00000
 80132a0:	08013890 	.word	0x08013890
 80132a4:	7ff00000 	.word	0x7ff00000

080132a8 <with_errno>:
 80132a8:	b510      	push	{r4, lr}
 80132aa:	ed2d 8b02 	vpush	{d8}
 80132ae:	eeb0 8b40 	vmov.f64	d8, d0
 80132b2:	4604      	mov	r4, r0
 80132b4:	f7ff feca 	bl	801304c <__errno>
 80132b8:	eeb0 0b48 	vmov.f64	d0, d8
 80132bc:	ecbd 8b02 	vpop	{d8}
 80132c0:	6004      	str	r4, [r0, #0]
 80132c2:	bd10      	pop	{r4, pc}
 80132c4:	0000      	movs	r0, r0
	...

080132c8 <__math_divzero>:
 80132c8:	b082      	sub	sp, #8
 80132ca:	2800      	cmp	r0, #0
 80132cc:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 80132d0:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 80132d4:	fe07 7b06 	vseleq.f64	d7, d7, d6
 80132d8:	ed8d 7b00 	vstr	d7, [sp]
 80132dc:	ed9d 0b00 	vldr	d0, [sp]
 80132e0:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 80132f0 <__math_divzero+0x28>
 80132e4:	2022      	movs	r0, #34	@ 0x22
 80132e6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 80132ea:	b002      	add	sp, #8
 80132ec:	f7ff bfdc 	b.w	80132a8 <with_errno>
	...

080132f8 <__math_invalid>:
 80132f8:	eeb0 7b40 	vmov.f64	d7, d0
 80132fc:	eeb4 7b47 	vcmp.f64	d7, d7
 8013300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013304:	ee30 6b40 	vsub.f64	d6, d0, d0
 8013308:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801330c:	d602      	bvs.n	8013314 <__math_invalid+0x1c>
 801330e:	2021      	movs	r0, #33	@ 0x21
 8013310:	f7ff bfca 	b.w	80132a8 <with_errno>
 8013314:	4770      	bx	lr
	...

08013318 <_init>:
 8013318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801331a:	bf00      	nop
 801331c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801331e:	bc08      	pop	{r3}
 8013320:	469e      	mov	lr, r3
 8013322:	4770      	bx	lr

08013324 <_fini>:
 8013324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013326:	bf00      	nop
 8013328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801332a:	bc08      	pop	{r3}
 801332c:	469e      	mov	lr, r3
 801332e:	4770      	bx	lr
