
Controladora-de-vuelo-V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000185e0  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d90  08018890  08018890  00019890  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08019620  08019620  0001a620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08019628  08019628  0001a628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801962c  0801962c  0001a62c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000290  24000000  08019630  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000064d4  24000290  080198c0  0001b290  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24006764  080198c0  0001b764  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001b290  2**0
                  CONTENTS, READONLY
 10 .debug_info   00033d66  00000000  00000000  0001b2be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000072b4  00000000  00000000  0004f024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000027c0  00000000  00000000  000562d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001ebe  00000000  00000000  00058a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a2fa  00000000  00000000  0005a956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003c1dc  00000000  00000000  00094c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00160e72  00000000  00000000  000d0e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00231c9e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b760  00000000  00000000  00231ce4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006a  00000000  00000000  0023d444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000290 	.word	0x24000290
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08018878 	.word	0x08018878

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000294 	.word	0x24000294
 80002ec:	08018878 	.word	0x08018878

080002f0 <strcmp>:
 80002f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002f8:	2a01      	cmp	r2, #1
 80002fa:	bf28      	it	cs
 80002fc:	429a      	cmpcs	r2, r3
 80002fe:	d0f7      	beq.n	80002f0 <strcmp>
 8000300:	1ad0      	subs	r0, r2, r3
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_ldivmod>:
 8000728:	b97b      	cbnz	r3, 800074a <__aeabi_ldivmod+0x22>
 800072a:	b972      	cbnz	r2, 800074a <__aeabi_ldivmod+0x22>
 800072c:	2900      	cmp	r1, #0
 800072e:	bfbe      	ittt	lt
 8000730:	2000      	movlt	r0, #0
 8000732:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000736:	e006      	blt.n	8000746 <__aeabi_ldivmod+0x1e>
 8000738:	bf08      	it	eq
 800073a:	2800      	cmpeq	r0, #0
 800073c:	bf1c      	itt	ne
 800073e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000742:	f04f 30ff 	movne.w	r0, #4294967295
 8000746:	f000 b9ed 	b.w	8000b24 <__aeabi_idiv0>
 800074a:	f1ad 0c08 	sub.w	ip, sp, #8
 800074e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000752:	2900      	cmp	r1, #0
 8000754:	db09      	blt.n	800076a <__aeabi_ldivmod+0x42>
 8000756:	2b00      	cmp	r3, #0
 8000758:	db1a      	blt.n	8000790 <__aeabi_ldivmod+0x68>
 800075a:	f000 f885 	bl	8000868 <__udivmoddi4>
 800075e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000762:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000766:	b004      	add	sp, #16
 8000768:	4770      	bx	lr
 800076a:	4240      	negs	r0, r0
 800076c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000770:	2b00      	cmp	r3, #0
 8000772:	db1b      	blt.n	80007ac <__aeabi_ldivmod+0x84>
 8000774:	f000 f878 	bl	8000868 <__udivmoddi4>
 8000778:	f8dd e004 	ldr.w	lr, [sp, #4]
 800077c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000780:	b004      	add	sp, #16
 8000782:	4240      	negs	r0, r0
 8000784:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000788:	4252      	negs	r2, r2
 800078a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800078e:	4770      	bx	lr
 8000790:	4252      	negs	r2, r2
 8000792:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000796:	f000 f867 	bl	8000868 <__udivmoddi4>
 800079a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800079e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007a2:	b004      	add	sp, #16
 80007a4:	4240      	negs	r0, r0
 80007a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007aa:	4770      	bx	lr
 80007ac:	4252      	negs	r2, r2
 80007ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007b2:	f000 f859 	bl	8000868 <__udivmoddi4>
 80007b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007be:	b004      	add	sp, #16
 80007c0:	4252      	negs	r2, r2
 80007c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007c6:	4770      	bx	lr

080007c8 <__aeabi_uldivmod>:
 80007c8:	b953      	cbnz	r3, 80007e0 <__aeabi_uldivmod+0x18>
 80007ca:	b94a      	cbnz	r2, 80007e0 <__aeabi_uldivmod+0x18>
 80007cc:	2900      	cmp	r1, #0
 80007ce:	bf08      	it	eq
 80007d0:	2800      	cmpeq	r0, #0
 80007d2:	bf1c      	itt	ne
 80007d4:	f04f 31ff 	movne.w	r1, #4294967295
 80007d8:	f04f 30ff 	movne.w	r0, #4294967295
 80007dc:	f000 b9a2 	b.w	8000b24 <__aeabi_idiv0>
 80007e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007e8:	f000 f83e 	bl	8000868 <__udivmoddi4>
 80007ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f4:	b004      	add	sp, #16
 80007f6:	4770      	bx	lr

080007f8 <__aeabi_d2lz>:
 80007f8:	b508      	push	{r3, lr}
 80007fa:	4602      	mov	r2, r0
 80007fc:	460b      	mov	r3, r1
 80007fe:	ec43 2b17 	vmov	d7, r2, r3
 8000802:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800080a:	d403      	bmi.n	8000814 <__aeabi_d2lz+0x1c>
 800080c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000810:	f000 b80a 	b.w	8000828 <__aeabi_d2ulz>
 8000814:	eeb1 7b47 	vneg.f64	d7, d7
 8000818:	ec51 0b17 	vmov	r0, r1, d7
 800081c:	f000 f804 	bl	8000828 <__aeabi_d2ulz>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	bd08      	pop	{r3, pc}

08000828 <__aeabi_d2ulz>:
 8000828:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000858 <__aeabi_d2ulz+0x30>
 800082c:	ec41 0b17 	vmov	d7, r0, r1
 8000830:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000860 <__aeabi_d2ulz+0x38>
 8000834:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000838:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800083c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000840:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000844:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000848:	ee16 1a10 	vmov	r1, s12
 800084c:	ee17 0a90 	vmov	r0, s15
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	f3af 8000 	nop.w
 8000858:	00000000 	.word	0x00000000
 800085c:	3df00000 	.word	0x3df00000
 8000860:	00000000 	.word	0x00000000
 8000864:	41f00000 	.word	0x41f00000

08000868 <__udivmoddi4>:
 8000868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800086c:	9d08      	ldr	r5, [sp, #32]
 800086e:	460c      	mov	r4, r1
 8000870:	2b00      	cmp	r3, #0
 8000872:	d14e      	bne.n	8000912 <__udivmoddi4+0xaa>
 8000874:	4694      	mov	ip, r2
 8000876:	458c      	cmp	ip, r1
 8000878:	4686      	mov	lr, r0
 800087a:	fab2 f282 	clz	r2, r2
 800087e:	d962      	bls.n	8000946 <__udivmoddi4+0xde>
 8000880:	b14a      	cbz	r2, 8000896 <__udivmoddi4+0x2e>
 8000882:	f1c2 0320 	rsb	r3, r2, #32
 8000886:	4091      	lsls	r1, r2
 8000888:	fa20 f303 	lsr.w	r3, r0, r3
 800088c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000890:	4319      	orrs	r1, r3
 8000892:	fa00 fe02 	lsl.w	lr, r0, r2
 8000896:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800089a:	fa1f f68c 	uxth.w	r6, ip
 800089e:	fbb1 f4f7 	udiv	r4, r1, r7
 80008a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a6:	fb07 1114 	mls	r1, r7, r4, r1
 80008aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ae:	fb04 f106 	mul.w	r1, r4, r6
 80008b2:	4299      	cmp	r1, r3
 80008b4:	d90a      	bls.n	80008cc <__udivmoddi4+0x64>
 80008b6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80008be:	f080 8112 	bcs.w	8000ae6 <__udivmoddi4+0x27e>
 80008c2:	4299      	cmp	r1, r3
 80008c4:	f240 810f 	bls.w	8000ae6 <__udivmoddi4+0x27e>
 80008c8:	3c02      	subs	r4, #2
 80008ca:	4463      	add	r3, ip
 80008cc:	1a59      	subs	r1, r3, r1
 80008ce:	fa1f f38e 	uxth.w	r3, lr
 80008d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80008d6:	fb07 1110 	mls	r1, r7, r0, r1
 80008da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008de:	fb00 f606 	mul.w	r6, r0, r6
 80008e2:	429e      	cmp	r6, r3
 80008e4:	d90a      	bls.n	80008fc <__udivmoddi4+0x94>
 80008e6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80008ee:	f080 80fc 	bcs.w	8000aea <__udivmoddi4+0x282>
 80008f2:	429e      	cmp	r6, r3
 80008f4:	f240 80f9 	bls.w	8000aea <__udivmoddi4+0x282>
 80008f8:	4463      	add	r3, ip
 80008fa:	3802      	subs	r0, #2
 80008fc:	1b9b      	subs	r3, r3, r6
 80008fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000902:	2100      	movs	r1, #0
 8000904:	b11d      	cbz	r5, 800090e <__udivmoddi4+0xa6>
 8000906:	40d3      	lsrs	r3, r2
 8000908:	2200      	movs	r2, #0
 800090a:	e9c5 3200 	strd	r3, r2, [r5]
 800090e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000912:	428b      	cmp	r3, r1
 8000914:	d905      	bls.n	8000922 <__udivmoddi4+0xba>
 8000916:	b10d      	cbz	r5, 800091c <__udivmoddi4+0xb4>
 8000918:	e9c5 0100 	strd	r0, r1, [r5]
 800091c:	2100      	movs	r1, #0
 800091e:	4608      	mov	r0, r1
 8000920:	e7f5      	b.n	800090e <__udivmoddi4+0xa6>
 8000922:	fab3 f183 	clz	r1, r3
 8000926:	2900      	cmp	r1, #0
 8000928:	d146      	bne.n	80009b8 <__udivmoddi4+0x150>
 800092a:	42a3      	cmp	r3, r4
 800092c:	d302      	bcc.n	8000934 <__udivmoddi4+0xcc>
 800092e:	4290      	cmp	r0, r2
 8000930:	f0c0 80f0 	bcc.w	8000b14 <__udivmoddi4+0x2ac>
 8000934:	1a86      	subs	r6, r0, r2
 8000936:	eb64 0303 	sbc.w	r3, r4, r3
 800093a:	2001      	movs	r0, #1
 800093c:	2d00      	cmp	r5, #0
 800093e:	d0e6      	beq.n	800090e <__udivmoddi4+0xa6>
 8000940:	e9c5 6300 	strd	r6, r3, [r5]
 8000944:	e7e3      	b.n	800090e <__udivmoddi4+0xa6>
 8000946:	2a00      	cmp	r2, #0
 8000948:	f040 8090 	bne.w	8000a6c <__udivmoddi4+0x204>
 800094c:	eba1 040c 	sub.w	r4, r1, ip
 8000950:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000954:	fa1f f78c 	uxth.w	r7, ip
 8000958:	2101      	movs	r1, #1
 800095a:	fbb4 f6f8 	udiv	r6, r4, r8
 800095e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000962:	fb08 4416 	mls	r4, r8, r6, r4
 8000966:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800096a:	fb07 f006 	mul.w	r0, r7, r6
 800096e:	4298      	cmp	r0, r3
 8000970:	d908      	bls.n	8000984 <__udivmoddi4+0x11c>
 8000972:	eb1c 0303 	adds.w	r3, ip, r3
 8000976:	f106 34ff 	add.w	r4, r6, #4294967295
 800097a:	d202      	bcs.n	8000982 <__udivmoddi4+0x11a>
 800097c:	4298      	cmp	r0, r3
 800097e:	f200 80cd 	bhi.w	8000b1c <__udivmoddi4+0x2b4>
 8000982:	4626      	mov	r6, r4
 8000984:	1a1c      	subs	r4, r3, r0
 8000986:	fa1f f38e 	uxth.w	r3, lr
 800098a:	fbb4 f0f8 	udiv	r0, r4, r8
 800098e:	fb08 4410 	mls	r4, r8, r0, r4
 8000992:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000996:	fb00 f707 	mul.w	r7, r0, r7
 800099a:	429f      	cmp	r7, r3
 800099c:	d908      	bls.n	80009b0 <__udivmoddi4+0x148>
 800099e:	eb1c 0303 	adds.w	r3, ip, r3
 80009a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80009a6:	d202      	bcs.n	80009ae <__udivmoddi4+0x146>
 80009a8:	429f      	cmp	r7, r3
 80009aa:	f200 80b0 	bhi.w	8000b0e <__udivmoddi4+0x2a6>
 80009ae:	4620      	mov	r0, r4
 80009b0:	1bdb      	subs	r3, r3, r7
 80009b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009b6:	e7a5      	b.n	8000904 <__udivmoddi4+0x9c>
 80009b8:	f1c1 0620 	rsb	r6, r1, #32
 80009bc:	408b      	lsls	r3, r1
 80009be:	fa22 f706 	lsr.w	r7, r2, r6
 80009c2:	431f      	orrs	r7, r3
 80009c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80009c8:	fa04 f301 	lsl.w	r3, r4, r1
 80009cc:	ea43 030c 	orr.w	r3, r3, ip
 80009d0:	40f4      	lsrs	r4, r6
 80009d2:	fa00 f801 	lsl.w	r8, r0, r1
 80009d6:	0c38      	lsrs	r0, r7, #16
 80009d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009dc:	fbb4 fef0 	udiv	lr, r4, r0
 80009e0:	fa1f fc87 	uxth.w	ip, r7
 80009e4:	fb00 441e 	mls	r4, r0, lr, r4
 80009e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009ec:	fb0e f90c 	mul.w	r9, lr, ip
 80009f0:	45a1      	cmp	r9, r4
 80009f2:	fa02 f201 	lsl.w	r2, r2, r1
 80009f6:	d90a      	bls.n	8000a0e <__udivmoddi4+0x1a6>
 80009f8:	193c      	adds	r4, r7, r4
 80009fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009fe:	f080 8084 	bcs.w	8000b0a <__udivmoddi4+0x2a2>
 8000a02:	45a1      	cmp	r9, r4
 8000a04:	f240 8081 	bls.w	8000b0a <__udivmoddi4+0x2a2>
 8000a08:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a0c:	443c      	add	r4, r7
 8000a0e:	eba4 0409 	sub.w	r4, r4, r9
 8000a12:	fa1f f983 	uxth.w	r9, r3
 8000a16:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a1a:	fb00 4413 	mls	r4, r0, r3, r4
 8000a1e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a22:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a26:	45a4      	cmp	ip, r4
 8000a28:	d907      	bls.n	8000a3a <__udivmoddi4+0x1d2>
 8000a2a:	193c      	adds	r4, r7, r4
 8000a2c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a30:	d267      	bcs.n	8000b02 <__udivmoddi4+0x29a>
 8000a32:	45a4      	cmp	ip, r4
 8000a34:	d965      	bls.n	8000b02 <__udivmoddi4+0x29a>
 8000a36:	3b02      	subs	r3, #2
 8000a38:	443c      	add	r4, r7
 8000a3a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a3e:	fba0 9302 	umull	r9, r3, r0, r2
 8000a42:	eba4 040c 	sub.w	r4, r4, ip
 8000a46:	429c      	cmp	r4, r3
 8000a48:	46ce      	mov	lr, r9
 8000a4a:	469c      	mov	ip, r3
 8000a4c:	d351      	bcc.n	8000af2 <__udivmoddi4+0x28a>
 8000a4e:	d04e      	beq.n	8000aee <__udivmoddi4+0x286>
 8000a50:	b155      	cbz	r5, 8000a68 <__udivmoddi4+0x200>
 8000a52:	ebb8 030e 	subs.w	r3, r8, lr
 8000a56:	eb64 040c 	sbc.w	r4, r4, ip
 8000a5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000a5e:	40cb      	lsrs	r3, r1
 8000a60:	431e      	orrs	r6, r3
 8000a62:	40cc      	lsrs	r4, r1
 8000a64:	e9c5 6400 	strd	r6, r4, [r5]
 8000a68:	2100      	movs	r1, #0
 8000a6a:	e750      	b.n	800090e <__udivmoddi4+0xa6>
 8000a6c:	f1c2 0320 	rsb	r3, r2, #32
 8000a70:	fa20 f103 	lsr.w	r1, r0, r3
 8000a74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a78:	fa24 f303 	lsr.w	r3, r4, r3
 8000a7c:	4094      	lsls	r4, r2
 8000a7e:	430c      	orrs	r4, r1
 8000a80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a84:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a88:	fa1f f78c 	uxth.w	r7, ip
 8000a8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a90:	fb08 3110 	mls	r1, r8, r0, r3
 8000a94:	0c23      	lsrs	r3, r4, #16
 8000a96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a9a:	fb00 f107 	mul.w	r1, r0, r7
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	d908      	bls.n	8000ab4 <__udivmoddi4+0x24c>
 8000aa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000aa6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000aaa:	d22c      	bcs.n	8000b06 <__udivmoddi4+0x29e>
 8000aac:	4299      	cmp	r1, r3
 8000aae:	d92a      	bls.n	8000b06 <__udivmoddi4+0x29e>
 8000ab0:	3802      	subs	r0, #2
 8000ab2:	4463      	add	r3, ip
 8000ab4:	1a5b      	subs	r3, r3, r1
 8000ab6:	b2a4      	uxth	r4, r4
 8000ab8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000abc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ac0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ac4:	fb01 f307 	mul.w	r3, r1, r7
 8000ac8:	42a3      	cmp	r3, r4
 8000aca:	d908      	bls.n	8000ade <__udivmoddi4+0x276>
 8000acc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ad0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ad4:	d213      	bcs.n	8000afe <__udivmoddi4+0x296>
 8000ad6:	42a3      	cmp	r3, r4
 8000ad8:	d911      	bls.n	8000afe <__udivmoddi4+0x296>
 8000ada:	3902      	subs	r1, #2
 8000adc:	4464      	add	r4, ip
 8000ade:	1ae4      	subs	r4, r4, r3
 8000ae0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ae4:	e739      	b.n	800095a <__udivmoddi4+0xf2>
 8000ae6:	4604      	mov	r4, r0
 8000ae8:	e6f0      	b.n	80008cc <__udivmoddi4+0x64>
 8000aea:	4608      	mov	r0, r1
 8000aec:	e706      	b.n	80008fc <__udivmoddi4+0x94>
 8000aee:	45c8      	cmp	r8, r9
 8000af0:	d2ae      	bcs.n	8000a50 <__udivmoddi4+0x1e8>
 8000af2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000af6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000afa:	3801      	subs	r0, #1
 8000afc:	e7a8      	b.n	8000a50 <__udivmoddi4+0x1e8>
 8000afe:	4631      	mov	r1, r6
 8000b00:	e7ed      	b.n	8000ade <__udivmoddi4+0x276>
 8000b02:	4603      	mov	r3, r0
 8000b04:	e799      	b.n	8000a3a <__udivmoddi4+0x1d2>
 8000b06:	4630      	mov	r0, r6
 8000b08:	e7d4      	b.n	8000ab4 <__udivmoddi4+0x24c>
 8000b0a:	46d6      	mov	lr, sl
 8000b0c:	e77f      	b.n	8000a0e <__udivmoddi4+0x1a6>
 8000b0e:	4463      	add	r3, ip
 8000b10:	3802      	subs	r0, #2
 8000b12:	e74d      	b.n	80009b0 <__udivmoddi4+0x148>
 8000b14:	4606      	mov	r6, r0
 8000b16:	4623      	mov	r3, r4
 8000b18:	4608      	mov	r0, r1
 8000b1a:	e70f      	b.n	800093c <__udivmoddi4+0xd4>
 8000b1c:	3e02      	subs	r6, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	e730      	b.n	8000984 <__udivmoddi4+0x11c>
 8000b22:	bf00      	nop

08000b24 <__aeabi_idiv0>:
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b2e:	4b15      	ldr	r3, [pc, #84]	@ (8000b84 <MX_DMA_Init+0x5c>)
 8000b30:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000b34:	4a13      	ldr	r2, [pc, #76]	@ (8000b84 <MX_DMA_Init+0x5c>)
 8000b36:	f043 0301 	orr.w	r3, r3, #1
 8000b3a:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000b3e:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <MX_DMA_Init+0x5c>)
 8000b40:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000b44:	f003 0301 	and.w	r3, r3, #1
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2105      	movs	r1, #5
 8000b50:	200b      	movs	r0, #11
 8000b52:	f004 fd61 	bl	8005618 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b56:	200b      	movs	r0, #11
 8000b58:	f004 fd78 	bl	800564c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2105      	movs	r1, #5
 8000b60:	200c      	movs	r0, #12
 8000b62:	f004 fd59 	bl	8005618 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b66:	200c      	movs	r0, #12
 8000b68:	f004 fd70 	bl	800564c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2105      	movs	r1, #5
 8000b70:	200d      	movs	r0, #13
 8000b72:	f004 fd51 	bl	8005618 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000b76:	200d      	movs	r0, #13
 8000b78:	f004 fd68 	bl	800564c <HAL_NVIC_EnableIRQ>

}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	58024400 	.word	0x58024400

08000b88 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000b8c:	4b2e      	ldr	r3, [pc, #184]	@ (8000c48 <MX_FDCAN1_Init+0xc0>)
 8000b8e:	4a2f      	ldr	r2, [pc, #188]	@ (8000c4c <MX_FDCAN1_Init+0xc4>)
 8000b90:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000b92:	4b2d      	ldr	r3, [pc, #180]	@ (8000c48 <MX_FDCAN1_Init+0xc0>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000b98:	4b2b      	ldr	r3, [pc, #172]	@ (8000c48 <MX_FDCAN1_Init+0xc0>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000b9e:	4b2a      	ldr	r3, [pc, #168]	@ (8000c48 <MX_FDCAN1_Init+0xc0>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000ba4:	4b28      	ldr	r3, [pc, #160]	@ (8000c48 <MX_FDCAN1_Init+0xc0>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000baa:	4b27      	ldr	r3, [pc, #156]	@ (8000c48 <MX_FDCAN1_Init+0xc0>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000bb0:	4b25      	ldr	r3, [pc, #148]	@ (8000c48 <MX_FDCAN1_Init+0xc0>)
 8000bb2:	2210      	movs	r2, #16
 8000bb4:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000bb6:	4b24      	ldr	r3, [pc, #144]	@ (8000c48 <MX_FDCAN1_Init+0xc0>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000bbc:	4b22      	ldr	r3, [pc, #136]	@ (8000c48 <MX_FDCAN1_Init+0xc0>)
 8000bbe:	2202      	movs	r2, #2
 8000bc0:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000bc2:	4b21      	ldr	r3, [pc, #132]	@ (8000c48 <MX_FDCAN1_Init+0xc0>)
 8000bc4:	2202      	movs	r2, #2
 8000bc6:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000bc8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c48 <MX_FDCAN1_Init+0xc0>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000bce:	4b1e      	ldr	r3, [pc, #120]	@ (8000c48 <MX_FDCAN1_Init+0xc0>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000bd4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c48 <MX_FDCAN1_Init+0xc0>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000bda:	4b1b      	ldr	r3, [pc, #108]	@ (8000c48 <MX_FDCAN1_Init+0xc0>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000be0:	4b19      	ldr	r3, [pc, #100]	@ (8000c48 <MX_FDCAN1_Init+0xc0>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000be6:	4b18      	ldr	r3, [pc, #96]	@ (8000c48 <MX_FDCAN1_Init+0xc0>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000bec:	4b16      	ldr	r3, [pc, #88]	@ (8000c48 <MX_FDCAN1_Init+0xc0>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000bf2:	4b15      	ldr	r3, [pc, #84]	@ (8000c48 <MX_FDCAN1_Init+0xc0>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000bf8:	4b13      	ldr	r3, [pc, #76]	@ (8000c48 <MX_FDCAN1_Init+0xc0>)
 8000bfa:	2204      	movs	r2, #4
 8000bfc:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000bfe:	4b12      	ldr	r3, [pc, #72]	@ (8000c48 <MX_FDCAN1_Init+0xc0>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000c04:	4b10      	ldr	r3, [pc, #64]	@ (8000c48 <MX_FDCAN1_Init+0xc0>)
 8000c06:	2204      	movs	r2, #4
 8000c08:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c48 <MX_FDCAN1_Init+0xc0>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000c10:	4b0d      	ldr	r3, [pc, #52]	@ (8000c48 <MX_FDCAN1_Init+0xc0>)
 8000c12:	2204      	movs	r2, #4
 8000c14:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000c16:	4b0c      	ldr	r3, [pc, #48]	@ (8000c48 <MX_FDCAN1_Init+0xc0>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c48 <MX_FDCAN1_Init+0xc0>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000c22:	4b09      	ldr	r3, [pc, #36]	@ (8000c48 <MX_FDCAN1_Init+0xc0>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000c28:	4b07      	ldr	r3, [pc, #28]	@ (8000c48 <MX_FDCAN1_Init+0xc0>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000c2e:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <MX_FDCAN1_Init+0xc0>)
 8000c30:	2204      	movs	r2, #4
 8000c32:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000c34:	4804      	ldr	r0, [pc, #16]	@ (8000c48 <MX_FDCAN1_Init+0xc0>)
 8000c36:	f007 fc79 	bl	800852c <HAL_FDCAN_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000c40:	f001 f82e 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	240002ac 	.word	0x240002ac
 8000c4c:	4000a000 	.word	0x4000a000

08000c50 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b0ba      	sub	sp, #232	@ 0xe8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c68:	f107 0310 	add.w	r3, r7, #16
 8000c6c:	22c0      	movs	r2, #192	@ 0xc0
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4618      	mov	r0, r3
 8000c72:	f015 fde8 	bl	8016846 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a2f      	ldr	r2, [pc, #188]	@ (8000d38 <HAL_FDCAN_MspInit+0xe8>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d157      	bne.n	8000d30 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000c80:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000c8c:	2304      	movs	r3, #4
 8000c8e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 8;
 8000c90:	2308      	movs	r3, #8
 8000c92:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000c94:	2302      	movs	r3, #2
 8000c96:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000ca0:	23c0      	movs	r3, #192	@ 0xc0
 8000ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8000cac:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000cb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cb4:	f107 0310 	add.w	r3, r7, #16
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f009 fad3 	bl	800a264 <HAL_RCCEx_PeriphCLKConfig>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 8000cc4:	f000 ffec 	bl	8001ca0 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000cc8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d3c <HAL_FDCAN_MspInit+0xec>)
 8000cca:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8000cce:	4a1b      	ldr	r2, [pc, #108]	@ (8000d3c <HAL_FDCAN_MspInit+0xec>)
 8000cd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cd4:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 8000cd8:	4b18      	ldr	r3, [pc, #96]	@ (8000d3c <HAL_FDCAN_MspInit+0xec>)
 8000cda:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8000cde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	4b15      	ldr	r3, [pc, #84]	@ (8000d3c <HAL_FDCAN_MspInit+0xec>)
 8000ce8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000cec:	4a13      	ldr	r2, [pc, #76]	@ (8000d3c <HAL_FDCAN_MspInit+0xec>)
 8000cee:	f043 0301 	orr.w	r3, r3, #1
 8000cf2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000cf6:	4b11      	ldr	r3, [pc, #68]	@ (8000d3c <HAL_FDCAN_MspInit+0xec>)
 8000cf8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000cfc:	f003 0301 	and.w	r3, r3, #1
 8000d00:	60bb      	str	r3, [r7, #8]
 8000d02:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d04:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000d08:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000d1e:	2309      	movs	r3, #9
 8000d20:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d24:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4805      	ldr	r0, [pc, #20]	@ (8000d40 <HAL_FDCAN_MspInit+0xf0>)
 8000d2c:	f007 ff62 	bl	8008bf4 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000d30:	bf00      	nop
 8000d32:	37e8      	adds	r7, #232	@ 0xe8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	4000a000 	.word	0x4000a000
 8000d3c:	58024400 	.word	0x58024400
 8000d40:	58020000 	.word	0x58020000

08000d44 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	4a07      	ldr	r2, [pc, #28]	@ (8000d70 <vApplicationGetIdleTaskMemory+0x2c>)
 8000d54:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	4a06      	ldr	r2, [pc, #24]	@ (8000d74 <vApplicationGetIdleTaskMemory+0x30>)
 8000d5a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2280      	movs	r2, #128	@ 0x80
 8000d60:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d62:	bf00      	nop
 8000d64:	3714      	adds	r7, #20
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	24000358 	.word	0x24000358
 8000d74:	240003ac 	.word	0x240003ac

08000d78 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000d78:	b5b0      	push	{r4, r5, r7, lr}
 8000d7a:	b096      	sub	sp, #88	@ 0x58
 8000d7c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task_1ms */
  osThreadDef(Task_1ms, fTask_1ms, osPriorityNormal, 0, 128);
 8000d7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000df4 <MX_FREERTOS_Init+0x7c>)
 8000d80:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000d84:	461d      	mov	r5, r3
 8000d86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d8a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_1msHandle = osThreadCreate(osThread(Task_1ms), NULL);
 8000d92:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000d96:	2100      	movs	r1, #0
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f012 fbe1 	bl	8013560 <osThreadCreate>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	4a15      	ldr	r2, [pc, #84]	@ (8000df8 <MX_FREERTOS_Init+0x80>)
 8000da2:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_10ms */
  osThreadDef(Task_10ms, fTask_10ms, osPriorityNormal, 0, 128);
 8000da4:	4b15      	ldr	r3, [pc, #84]	@ (8000dfc <MX_FREERTOS_Init+0x84>)
 8000da6:	f107 0420 	add.w	r4, r7, #32
 8000daa:	461d      	mov	r5, r3
 8000dac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000db0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000db4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_10msHandle = osThreadCreate(osThread(Task_10ms), NULL);
 8000db8:	f107 0320 	add.w	r3, r7, #32
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f012 fbce 	bl	8013560 <osThreadCreate>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	4a0e      	ldr	r2, [pc, #56]	@ (8000e00 <MX_FREERTOS_Init+0x88>)
 8000dc8:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_100ms */
  osThreadDef(Task_100ms, fTask_100ms, osPriorityNormal, 0, 128);
 8000dca:	4b0e      	ldr	r3, [pc, #56]	@ (8000e04 <MX_FREERTOS_Init+0x8c>)
 8000dcc:	1d3c      	adds	r4, r7, #4
 8000dce:	461d      	mov	r5, r3
 8000dd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dd4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dd8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_100msHandle = osThreadCreate(osThread(Task_100ms), NULL);
 8000ddc:	1d3b      	adds	r3, r7, #4
 8000dde:	2100      	movs	r1, #0
 8000de0:	4618      	mov	r0, r3
 8000de2:	f012 fbbd 	bl	8013560 <osThreadCreate>
 8000de6:	4603      	mov	r3, r0
 8000de8:	4a07      	ldr	r2, [pc, #28]	@ (8000e08 <MX_FREERTOS_Init+0x90>)
 8000dea:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000dec:	bf00      	nop
 8000dee:	3758      	adds	r7, #88	@ 0x58
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bdb0      	pop	{r4, r5, r7, pc}
 8000df4:	0801889c 	.word	0x0801889c
 8000df8:	2400034c 	.word	0x2400034c
 8000dfc:	080188c4 	.word	0x080188c4
 8000e00:	24000350 	.word	0x24000350
 8000e04:	080188ec 	.word	0x080188ec
 8000e08:	24000354 	.word	0x24000354

08000e0c <fTask_1ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTask_1ms */
void fTask_1ms(void const * argument)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTask_1ms */
  /* Infinite loop */
  for(;;)
  {
	TimeOn_Counter++;
 8000e14:	4b07      	ldr	r3, [pc, #28]	@ (8000e34 <fTask_1ms+0x28>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	4a06      	ldr	r2, [pc, #24]	@ (8000e34 <fTask_1ms+0x28>)
 8000e1c:	6013      	str	r3, [r2, #0]
	LED_Tasks();
 8000e1e:	f003 fc2b 	bl	8004678 <LED_Tasks>
	SBUS_IntegrityVerification();
 8000e22:	f004 f91f 	bl	8005064 <SBUS_IntegrityVerification>
	NMEA_process_task();
 8000e26:	f000 fdaf 	bl	8001988 <NMEA_process_task>
    osDelay(1);
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	f012 fbe4 	bl	80135f8 <osDelay>
	TimeOn_Counter++;
 8000e30:	bf00      	nop
 8000e32:	e7ef      	b.n	8000e14 <fTask_1ms+0x8>
 8000e34:	24000ce4 	.word	0x24000ce4

08000e38 <fTask_10ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTask_10ms */
void fTask_10ms(void const * argument)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTask_10ms */
  /* Infinite loop */
  for(;;)
  {
	BNO_Tasks();
 8000e40:	f003 fb56 	bl	80044f0 <BNO_Tasks>
	BMP280_calculate();
 8000e44:	f002 fda6 	bl	8003994 <BMP280_calculate>

	PWM_Assing();
 8000e48:	f003 fcc8 	bl	80047dc <PWM_Assing>
	SD_blackbox_write();
 8000e4c:	f004 fa20 	bl	8005290 <SD_blackbox_write>
    osDelay(10);
 8000e50:	200a      	movs	r0, #10
 8000e52:	f012 fbd1 	bl	80135f8 <osDelay>
	BNO_Tasks();
 8000e56:	bf00      	nop
 8000e58:	e7f2      	b.n	8000e40 <fTask_10ms+0x8>

08000e5a <fTask_100ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTask_100ms */
void fTask_100ms(void const * argument)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTask_100ms */
  /* Infinite loop */
  for(;;)
  {
	LR03_StateMachine();
 8000e62:	f003 fca3 	bl	80047ac <LR03_StateMachine>
    osDelay(100);
 8000e66:	2064      	movs	r0, #100	@ 0x64
 8000e68:	f012 fbc6 	bl	80135f8 <osDelay>
	LR03_StateMachine();
 8000e6c:	bf00      	nop
 8000e6e:	e7f8      	b.n	8000e62 <fTask_100ms+0x8>

08000e70 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	@ 0x28
 8000e74:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
 8000e84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e86:	4b4e      	ldr	r3, [pc, #312]	@ (8000fc0 <MX_GPIO_Init+0x150>)
 8000e88:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e8c:	4a4c      	ldr	r2, [pc, #304]	@ (8000fc0 <MX_GPIO_Init+0x150>)
 8000e8e:	f043 0304 	orr.w	r3, r3, #4
 8000e92:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e96:	4b4a      	ldr	r3, [pc, #296]	@ (8000fc0 <MX_GPIO_Init+0x150>)
 8000e98:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e9c:	f003 0304 	and.w	r3, r3, #4
 8000ea0:	613b      	str	r3, [r7, #16]
 8000ea2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea4:	4b46      	ldr	r3, [pc, #280]	@ (8000fc0 <MX_GPIO_Init+0x150>)
 8000ea6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000eaa:	4a45      	ldr	r2, [pc, #276]	@ (8000fc0 <MX_GPIO_Init+0x150>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000eb4:	4b42      	ldr	r3, [pc, #264]	@ (8000fc0 <MX_GPIO_Init+0x150>)
 8000eb6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec2:	4b3f      	ldr	r3, [pc, #252]	@ (8000fc0 <MX_GPIO_Init+0x150>)
 8000ec4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ec8:	4a3d      	ldr	r2, [pc, #244]	@ (8000fc0 <MX_GPIO_Init+0x150>)
 8000eca:	f043 0302 	orr.w	r3, r3, #2
 8000ece:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ed2:	4b3b      	ldr	r3, [pc, #236]	@ (8000fc0 <MX_GPIO_Init+0x150>)
 8000ed4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ed8:	f003 0302 	and.w	r3, r3, #2
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ee0:	4b37      	ldr	r3, [pc, #220]	@ (8000fc0 <MX_GPIO_Init+0x150>)
 8000ee2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ee6:	4a36      	ldr	r2, [pc, #216]	@ (8000fc0 <MX_GPIO_Init+0x150>)
 8000ee8:	f043 0308 	orr.w	r3, r3, #8
 8000eec:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ef0:	4b33      	ldr	r3, [pc, #204]	@ (8000fc0 <MX_GPIO_Init+0x150>)
 8000ef2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ef6:	f003 0308 	and.w	r3, r3, #8
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8000efe:	2200      	movs	r2, #0
 8000f00:	f242 010f 	movw	r1, #8207	@ 0x200f
 8000f04:	482f      	ldr	r0, [pc, #188]	@ (8000fc4 <MX_GPIO_Init+0x154>)
 8000f06:	f008 f825 	bl	8008f54 <HAL_GPIO_WritePin>
                          |LED_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_NSS_GPIO_Port, SD_NSS_Pin, GPIO_PIN_RESET);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2110      	movs	r1, #16
 8000f0e:	482e      	ldr	r0, [pc, #184]	@ (8000fc8 <MX_GPIO_Init+0x158>)
 8000f10:	f008 f820 	bl	8008f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IMU_BOOT_Pin|BME_NSS_Pin, GPIO_PIN_RESET);
 8000f14:	2200      	movs	r2, #0
 8000f16:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8000f1a:	482c      	ldr	r0, [pc, #176]	@ (8000fcc <MX_GPIO_Init+0x15c>)
 8000f1c:	f008 f81a 	bl	8008f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, GPIO_PIN_RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2104      	movs	r1, #4
 8000f24:	482a      	ldr	r0, [pc, #168]	@ (8000fd0 <MX_GPIO_Init+0x160>)
 8000f26:	f008 f815 	bl	8008f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8000f2a:	f242 030f 	movw	r3, #8207	@ 0x200f
 8000f2e:	617b      	str	r3, [r7, #20]
                          |LED_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f30:	2301      	movs	r3, #1
 8000f32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	4619      	mov	r1, r3
 8000f42:	4820      	ldr	r0, [pc, #128]	@ (8000fc4 <MX_GPIO_Init+0x154>)
 8000f44:	f007 fe56 	bl	8008bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_NSS_Pin;
 8000f48:	2310      	movs	r3, #16
 8000f4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f54:	2300      	movs	r3, #0
 8000f56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_NSS_GPIO_Port, &GPIO_InitStruct);
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	481a      	ldr	r0, [pc, #104]	@ (8000fc8 <MX_GPIO_Init+0x158>)
 8000f60:	f007 fe48 	bl	8008bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IMU_BOOT_Pin|BME_NSS_Pin;
 8000f64:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f72:	2300      	movs	r3, #0
 8000f74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4813      	ldr	r0, [pc, #76]	@ (8000fcc <MX_GPIO_Init+0x15c>)
 8000f7e:	f007 fe39 	bl	8008bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8000f82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	4619      	mov	r1, r3
 8000f96:	480b      	ldr	r0, [pc, #44]	@ (8000fc4 <MX_GPIO_Init+0x154>)
 8000f98:	f007 fe2c 	bl	8008bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_RST_Pin;
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_RST_GPIO_Port, &GPIO_InitStruct);
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4807      	ldr	r0, [pc, #28]	@ (8000fd0 <MX_GPIO_Init+0x160>)
 8000fb4:	f007 fe1e 	bl	8008bf4 <HAL_GPIO_Init>

}
 8000fb8:	bf00      	nop
 8000fba:	3728      	adds	r7, #40	@ 0x28
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	58024400 	.word	0x58024400
 8000fc4:	58020800 	.word	0x58020800
 8000fc8:	58020000 	.word	0x58020000
 8000fcc:	58020400 	.word	0x58020400
 8000fd0:	58020c00 	.word	0x58020c00

08000fd4 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000fd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001048 <MX_I2C3_Init+0x74>)
 8000fda:	4a1c      	ldr	r2, [pc, #112]	@ (800104c <MX_I2C3_Init+0x78>)
 8000fdc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20B0CCFF;
 8000fde:	4b1a      	ldr	r3, [pc, #104]	@ (8001048 <MX_I2C3_Init+0x74>)
 8000fe0:	4a1b      	ldr	r2, [pc, #108]	@ (8001050 <MX_I2C3_Init+0x7c>)
 8000fe2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000fe4:	4b18      	ldr	r3, [pc, #96]	@ (8001048 <MX_I2C3_Init+0x74>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fea:	4b17      	ldr	r3, [pc, #92]	@ (8001048 <MX_I2C3_Init+0x74>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ff0:	4b15      	ldr	r3, [pc, #84]	@ (8001048 <MX_I2C3_Init+0x74>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000ff6:	4b14      	ldr	r3, [pc, #80]	@ (8001048 <MX_I2C3_Init+0x74>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ffc:	4b12      	ldr	r3, [pc, #72]	@ (8001048 <MX_I2C3_Init+0x74>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001002:	4b11      	ldr	r3, [pc, #68]	@ (8001048 <MX_I2C3_Init+0x74>)
 8001004:	2200      	movs	r2, #0
 8001006:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001008:	4b0f      	ldr	r3, [pc, #60]	@ (8001048 <MX_I2C3_Init+0x74>)
 800100a:	2200      	movs	r2, #0
 800100c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800100e:	480e      	ldr	r0, [pc, #56]	@ (8001048 <MX_I2C3_Init+0x74>)
 8001010:	f007 ffba 	bl	8008f88 <HAL_I2C_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800101a:	f000 fe41 	bl	8001ca0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800101e:	2100      	movs	r1, #0
 8001020:	4809      	ldr	r0, [pc, #36]	@ (8001048 <MX_I2C3_Init+0x74>)
 8001022:	f008 f84d 	bl	80090c0 <HAL_I2CEx_ConfigAnalogFilter>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800102c:	f000 fe38 	bl	8001ca0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001030:	2100      	movs	r1, #0
 8001032:	4805      	ldr	r0, [pc, #20]	@ (8001048 <MX_I2C3_Init+0x74>)
 8001034:	f008 f88f 	bl	8009156 <HAL_I2CEx_ConfigDigitalFilter>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800103e:	f000 fe2f 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	240005ac 	.word	0x240005ac
 800104c:	40005c00 	.word	0x40005c00
 8001050:	20b0ccff 	.word	0x20b0ccff

08001054 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b0bc      	sub	sp, #240	@ 0xf0
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800106c:	f107 0318 	add.w	r3, r7, #24
 8001070:	22c0      	movs	r2, #192	@ 0xc0
 8001072:	2100      	movs	r1, #0
 8001074:	4618      	mov	r0, r3
 8001076:	f015 fbe6 	bl	8016846 <memset>
  if(i2cHandle->Instance==I2C3)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a39      	ldr	r2, [pc, #228]	@ (8001164 <HAL_I2C_MspInit+0x110>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d16b      	bne.n	800115c <HAL_I2C_MspInit+0x108>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001084:	f04f 0208 	mov.w	r2, #8
 8001088:	f04f 0300 	mov.w	r3, #0
 800108c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001090:	2300      	movs	r3, #0
 8001092:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001096:	f107 0318 	add.w	r3, r7, #24
 800109a:	4618      	mov	r0, r3
 800109c:	f009 f8e2 	bl	800a264 <HAL_RCCEx_PeriphCLKConfig>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80010a6:	f000 fdfb 	bl	8001ca0 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001168 <HAL_I2C_MspInit+0x114>)
 80010ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80010b0:	4a2d      	ldr	r2, [pc, #180]	@ (8001168 <HAL_I2C_MspInit+0x114>)
 80010b2:	f043 0304 	orr.w	r3, r3, #4
 80010b6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80010ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001168 <HAL_I2C_MspInit+0x114>)
 80010bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80010c0:	f003 0304 	and.w	r3, r3, #4
 80010c4:	617b      	str	r3, [r7, #20]
 80010c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c8:	4b27      	ldr	r3, [pc, #156]	@ (8001168 <HAL_I2C_MspInit+0x114>)
 80010ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80010ce:	4a26      	ldr	r2, [pc, #152]	@ (8001168 <HAL_I2C_MspInit+0x114>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80010d8:	4b23      	ldr	r3, [pc, #140]	@ (8001168 <HAL_I2C_MspInit+0x114>)
 80010da:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ee:	2312      	movs	r3, #18
 80010f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fa:	2300      	movs	r3, #0
 80010fc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001100:	2304      	movs	r3, #4
 8001102:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001106:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800110a:	4619      	mov	r1, r3
 800110c:	4817      	ldr	r0, [pc, #92]	@ (800116c <HAL_I2C_MspInit+0x118>)
 800110e:	f007 fd71 	bl	8008bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001112:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001116:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800111a:	2312      	movs	r3, #18
 800111c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001126:	2300      	movs	r3, #0
 8001128:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800112c:	2304      	movs	r3, #4
 800112e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001132:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001136:	4619      	mov	r1, r3
 8001138:	480d      	ldr	r0, [pc, #52]	@ (8001170 <HAL_I2C_MspInit+0x11c>)
 800113a:	f007 fd5b 	bl	8008bf4 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800113e:	4b0a      	ldr	r3, [pc, #40]	@ (8001168 <HAL_I2C_MspInit+0x114>)
 8001140:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001144:	4a08      	ldr	r2, [pc, #32]	@ (8001168 <HAL_I2C_MspInit+0x114>)
 8001146:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800114a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800114e:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <HAL_I2C_MspInit+0x114>)
 8001150:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001154:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800115c:	bf00      	nop
 800115e:	37f0      	adds	r7, #240	@ 0xf0
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40005c00 	.word	0x40005c00
 8001168:	58024400 	.word	0x58024400
 800116c:	58020800 	.word	0x58020800
 8001170:	58020000 	.word	0x58020000

08001174 <default_CB>:
static float speed_fall_barrier;	/**< Barrier of decreasing speed*/
/**
 * default_CB() is a default function for all the CB pointers which do nothing.\n
 * The unregistering CB pointer is setting to pointer of this function.  
 */
static void default_CB(void){}
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
	...

08001184 <NMEA_parser>:
 * NMEA_parser is function which parses single correct NMEA message.\n
 * Inside this function all known types of NMEA message are recognized and nmea_data structure fields are set.\n
 * There is also implemented mechanism of recognizing specified events and calling corresponding to them callbacks.
 * @param[in]	message	pointer to buffer storing NMEA message.
 */
static void 	NMEA_parser(char *message){
 8001184:	b5b0      	push	{r4, r5, r7, lr}
 8001186:	b0b2      	sub	sp, #200	@ 0xc8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]

	NMEA_data previous_data = nmea_data;
 800118c:	4ba9      	ldr	r3, [pc, #676]	@ (8001434 <NMEA_parser+0x2b0>)
 800118e:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8001192:	461d      	mov	r5, r3
 8001194:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001196:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800119a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800119c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800119e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011a4:	e884 0003 	stmia.w	r4, {r0, r1}

	int num = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	char *fields[32]={NULL};
 80011ae:	f107 030c 	add.w	r3, r7, #12
 80011b2:	2280      	movs	r2, #128	@ 0x80
 80011b4:	2100      	movs	r1, #0
 80011b6:	4618      	mov	r0, r3
 80011b8:	f015 fb45 	bl	8016846 <memset>
	fields[num++]=message;
 80011bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80011c0:	1c5a      	adds	r2, r3, #1
 80011c2:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	33c8      	adds	r3, #200	@ 0xc8
 80011ca:	443b      	add	r3, r7
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	f843 2cbc 	str.w	r2, [r3, #-188]
	while ((message = strchr(message, ','))) {
 80011d2:	e00f      	b.n	80011f4 <NMEA_parser+0x70>
		*message++ = 0;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	1c5a      	adds	r2, r3, #1
 80011d8:	607a      	str	r2, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	701a      	strb	r2, [r3, #0]
		fields[num++]=message;
 80011de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80011e2:	1c5a      	adds	r2, r3, #1
 80011e4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	33c8      	adds	r3, #200	@ 0xc8
 80011ec:	443b      	add	r3, r7
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	f843 2cbc 	str.w	r2, [r3, #-188]
	while ((message = strchr(message, ','))) {
 80011f4:	212c      	movs	r1, #44	@ 0x2c
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f015 fb2d 	bl	8016856 <strchr>
 80011fc:	6078      	str	r0, [r7, #4]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1e7      	bne.n	80011d4 <NMEA_parser+0x50>
	}

	if(strcmp(fields[0],"$GPGLL")==0){
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	498c      	ldr	r1, [pc, #560]	@ (8001438 <NMEA_parser+0x2b4>)
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f871 	bl	80002f0 <strcmp>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d11e      	bne.n	8001252 <NMEA_parser+0xce>

		nmea_data.latitude = atof(fields[1]);
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4618      	mov	r0, r3
 8001218:	f014 fbc6 	bl	80159a8 <atof>
 800121c:	eeb0 7b40 	vmov.f64	d7, d0
 8001220:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001224:	4b83      	ldr	r3, [pc, #524]	@ (8001434 <NMEA_parser+0x2b0>)
 8001226:	edc3 7a02 	vstr	s15, [r3, #8]
		nmea_data.latitude_direction = *fields[2];
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	781a      	ldrb	r2, [r3, #0]
 800122e:	4b81      	ldr	r3, [pc, #516]	@ (8001434 <NMEA_parser+0x2b0>)
 8001230:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[3]);
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	4618      	mov	r0, r3
 8001236:	f014 fbb7 	bl	80159a8 <atof>
 800123a:	eeb0 7b40 	vmov.f64	d7, d0
 800123e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001242:	4b7c      	ldr	r3, [pc, #496]	@ (8001434 <NMEA_parser+0x2b0>)
 8001244:	edc3 7a04 	vstr	s15, [r3, #16]
		nmea_data.longitude_direction = *fields[4];
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	781a      	ldrb	r2, [r3, #0]
 800124c:	4b79      	ldr	r3, [pc, #484]	@ (8001434 <NMEA_parser+0x2b0>)
 800124e:	751a      	strb	r2, [r3, #20]
 8001250:	e10d      	b.n	800146e <NMEA_parser+0x2ea>

	}else if(strcmp(fields[0],"$GPRMC")==0){
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	4979      	ldr	r1, [pc, #484]	@ (800143c <NMEA_parser+0x2b8>)
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f84a 	bl	80002f0 <strcmp>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d130      	bne.n	80012c4 <NMEA_parser+0x140>

		nmea_data.UTC_time = atof(fields[1]);
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	4618      	mov	r0, r3
 8001266:	f014 fb9f 	bl	80159a8 <atof>
 800126a:	eeb0 7b40 	vmov.f64	d7, d0
 800126e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001272:	4b70      	ldr	r3, [pc, #448]	@ (8001434 <NMEA_parser+0x2b0>)
 8001274:	edc3 7a00 	vstr	s15, [r3]
		nmea_data.UT_date = atoi(fields[9]);
 8001278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800127a:	4618      	mov	r0, r3
 800127c:	f014 fb97 	bl	80159ae <atoi>
 8001280:	4603      	mov	r3, r0
 8001282:	4a6c      	ldr	r2, [pc, #432]	@ (8001434 <NMEA_parser+0x2b0>)
 8001284:	6053      	str	r3, [r2, #4]

		nmea_data.latitude = atof(fields[3]);
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	4618      	mov	r0, r3
 800128a:	f014 fb8d 	bl	80159a8 <atof>
 800128e:	eeb0 7b40 	vmov.f64	d7, d0
 8001292:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001296:	4b67      	ldr	r3, [pc, #412]	@ (8001434 <NMEA_parser+0x2b0>)
 8001298:	edc3 7a02 	vstr	s15, [r3, #8]
		nmea_data.latitude_direction = *fields[4];
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	781a      	ldrb	r2, [r3, #0]
 80012a0:	4b64      	ldr	r3, [pc, #400]	@ (8001434 <NMEA_parser+0x2b0>)
 80012a2:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[5]);
 80012a4:	6a3b      	ldr	r3, [r7, #32]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f014 fb7e 	bl	80159a8 <atof>
 80012ac:	eeb0 7b40 	vmov.f64	d7, d0
 80012b0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80012b4:	4b5f      	ldr	r3, [pc, #380]	@ (8001434 <NMEA_parser+0x2b0>)
 80012b6:	edc3 7a04 	vstr	s15, [r3, #16]
		nmea_data.longitude_direction = *fields[6];
 80012ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012bc:	781a      	ldrb	r2, [r3, #0]
 80012be:	4b5d      	ldr	r3, [pc, #372]	@ (8001434 <NMEA_parser+0x2b0>)
 80012c0:	751a      	strb	r2, [r3, #20]
 80012c2:	e0d4      	b.n	800146e <NMEA_parser+0x2ea>


	}else if(strcmp(fields[0],"$GPVTG")==0){
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	495e      	ldr	r1, [pc, #376]	@ (8001440 <NMEA_parser+0x2bc>)
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff f811 	bl	80002f0 <strcmp>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d116      	bne.n	8001302 <NMEA_parser+0x17e>

		nmea_data.speed_knots =  atoi(fields[5]);
 80012d4:	6a3b      	ldr	r3, [r7, #32]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f014 fb69 	bl	80159ae <atoi>
 80012dc:	ee07 0a90 	vmov	s15, r0
 80012e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012e4:	4b53      	ldr	r3, [pc, #332]	@ (8001434 <NMEA_parser+0x2b0>)
 80012e6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		nmea_data.speed_kmph =  atoi(fields[7]);
 80012ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012ec:	4618      	mov	r0, r3
 80012ee:	f014 fb5e 	bl	80159ae <atoi>
 80012f2:	ee07 0a90 	vmov	s15, r0
 80012f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012fa:	4b4e      	ldr	r3, [pc, #312]	@ (8001434 <NMEA_parser+0x2b0>)
 80012fc:	edc3 7a08 	vstr	s15, [r3, #32]
 8001300:	e0b5      	b.n	800146e <NMEA_parser+0x2ea>

	}else if(strcmp(fields[0],"$GPGGA")==0){
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	494f      	ldr	r1, [pc, #316]	@ (8001444 <NMEA_parser+0x2c0>)
 8001306:	4618      	mov	r0, r3
 8001308:	f7fe fff2 	bl	80002f0 <strcmp>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d15c      	bne.n	80013cc <NMEA_parser+0x248>

		nmea_data.UTC_time = atof(fields[1]);
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	4618      	mov	r0, r3
 8001316:	f014 fb47 	bl	80159a8 <atof>
 800131a:	eeb0 7b40 	vmov.f64	d7, d0
 800131e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001322:	4b44      	ldr	r3, [pc, #272]	@ (8001434 <NMEA_parser+0x2b0>)
 8001324:	edc3 7a00 	vstr	s15, [r3]

		nmea_data.latitude = atof(fields[2]);
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	4618      	mov	r0, r3
 800132c:	f014 fb3c 	bl	80159a8 <atof>
 8001330:	eeb0 7b40 	vmov.f64	d7, d0
 8001334:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001338:	4b3e      	ldr	r3, [pc, #248]	@ (8001434 <NMEA_parser+0x2b0>)
 800133a:	edc3 7a02 	vstr	s15, [r3, #8]
		nmea_data.latitude_direction = *fields[3];
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	781a      	ldrb	r2, [r3, #0]
 8001342:	4b3c      	ldr	r3, [pc, #240]	@ (8001434 <NMEA_parser+0x2b0>)
 8001344:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[4]);
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	4618      	mov	r0, r3
 800134a:	f014 fb2d 	bl	80159a8 <atof>
 800134e:	eeb0 7b40 	vmov.f64	d7, d0
 8001352:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001356:	4b37      	ldr	r3, [pc, #220]	@ (8001434 <NMEA_parser+0x2b0>)
 8001358:	edc3 7a04 	vstr	s15, [r3, #16]
		nmea_data.longitude_direction = *fields[5];
 800135c:	6a3b      	ldr	r3, [r7, #32]
 800135e:	781a      	ldrb	r2, [r3, #0]
 8001360:	4b34      	ldr	r3, [pc, #208]	@ (8001434 <NMEA_parser+0x2b0>)
 8001362:	751a      	strb	r2, [r3, #20]

		nmea_data.fix = atoi(fields[6]);
 8001364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001366:	4618      	mov	r0, r3
 8001368:	f014 fb21 	bl	80159ae <atoi>
 800136c:	4603      	mov	r3, r0
 800136e:	b2da      	uxtb	r2, r3
 8001370:	4b30      	ldr	r3, [pc, #192]	@ (8001434 <NMEA_parser+0x2b0>)
 8001372:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		nmea_data.sat_in_use = atoi(fields[7]);
 8001376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001378:	4618      	mov	r0, r3
 800137a:	f014 fb18 	bl	80159ae <atoi>
 800137e:	4603      	mov	r3, r0
 8001380:	b2da      	uxtb	r2, r3
 8001382:	4b2c      	ldr	r3, [pc, #176]	@ (8001434 <NMEA_parser+0x2b0>)
 8001384:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		nmea_data.HDOP = atof(fields[8]);
 8001388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800138a:	4618      	mov	r0, r3
 800138c:	f014 fb0c 	bl	80159a8 <atof>
 8001390:	eeb0 7b40 	vmov.f64	d7, d0
 8001394:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001398:	4b26      	ldr	r3, [pc, #152]	@ (8001434 <NMEA_parser+0x2b0>)
 800139a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

		nmea_data.altitude = atof(fields[9]);
 800139e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013a0:	4618      	mov	r0, r3
 80013a2:	f014 fb01 	bl	80159a8 <atof>
 80013a6:	eeb0 7b40 	vmov.f64	d7, d0
 80013aa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80013ae:	4b21      	ldr	r3, [pc, #132]	@ (8001434 <NMEA_parser+0x2b0>)
 80013b0:	edc3 7a06 	vstr	s15, [r3, #24]
		nmea_data.geoidal_separation = atof(fields[11]);
 80013b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013b6:	4618      	mov	r0, r3
 80013b8:	f014 faf6 	bl	80159a8 <atof>
 80013bc:	eeb0 7b40 	vmov.f64	d7, d0
 80013c0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80013c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001434 <NMEA_parser+0x2b0>)
 80013c6:	edc3 7a07 	vstr	s15, [r3, #28]
 80013ca:	e050      	b.n	800146e <NMEA_parser+0x2ea>

	}else if(strcmp(fields[0],"$GPGSA")==0){
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	491e      	ldr	r1, [pc, #120]	@ (8001448 <NMEA_parser+0x2c4>)
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7fe ff8d 	bl	80002f0 <strcmp>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d137      	bne.n	800144c <NMEA_parser+0x2c8>

		nmea_data.fix_mode = atoi(fields[2]);
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	4618      	mov	r0, r3
 80013e0:	f014 fae5 	bl	80159ae <atoi>
 80013e4:	4603      	mov	r3, r0
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	4b12      	ldr	r3, [pc, #72]	@ (8001434 <NMEA_parser+0x2b0>)
 80013ea:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

		nmea_data.PDOP = atof(fields[15]);
 80013ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80013f0:	4618      	mov	r0, r3
 80013f2:	f014 fad9 	bl	80159a8 <atof>
 80013f6:	eeb0 7b40 	vmov.f64	d7, d0
 80013fa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80013fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001434 <NMEA_parser+0x2b0>)
 8001400:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		nmea_data.HDOP = atof(fields[16]);
 8001404:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001406:	4618      	mov	r0, r3
 8001408:	f014 face 	bl	80159a8 <atof>
 800140c:	eeb0 7b40 	vmov.f64	d7, d0
 8001410:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001414:	4b07      	ldr	r3, [pc, #28]	@ (8001434 <NMEA_parser+0x2b0>)
 8001416:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		nmea_data.VDOP = atof(fields[17]);
 800141a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800141c:	4618      	mov	r0, r3
 800141e:	f014 fac3 	bl	80159a8 <atof>
 8001422:	eeb0 7b40 	vmov.f64	d7, d0
 8001426:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800142a:	4b02      	ldr	r3, [pc, #8]	@ (8001434 <NMEA_parser+0x2b0>)
 800142c:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
 8001430:	e01d      	b.n	800146e <NMEA_parser+0x2ea>
 8001432:	bf00      	nop
 8001434:	24000ca8 	.word	0x24000ca8
 8001438:	08018908 	.word	0x08018908
 800143c:	08018910 	.word	0x08018910
 8001440:	08018918 	.word	0x08018918
 8001444:	08018920 	.word	0x08018920
 8001448:	08018928 	.word	0x08018928

	}else if(strcmp(fields[0],"$GPGSV")==0){
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4931      	ldr	r1, [pc, #196]	@ (8001514 <NMEA_parser+0x390>)
 8001450:	4618      	mov	r0, r3
 8001452:	f7fe ff4d 	bl	80002f0 <strcmp>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d108      	bne.n	800146e <NMEA_parser+0x2ea>
		nmea_data.sat_in_view = atoi(fields[3]);
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	4618      	mov	r0, r3
 8001460:	f014 faa5 	bl	80159ae <atoi>
 8001464:	4603      	mov	r3, r0
 8001466:	b2da      	uxtb	r2, r3
 8001468:	4b2b      	ldr	r3, [pc, #172]	@ (8001518 <NMEA_parser+0x394>)
 800146a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	}

	if (abs(nmea_data.speed_kmph - previous_data.speed_kmph) > speed_change_tolerance){
 800146e:	4b2a      	ldr	r3, [pc, #168]	@ (8001518 <NMEA_parser+0x394>)
 8001470:	ed93 7a08 	vldr	s14, [r3, #32]
 8001474:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8001478:	ee77 7a67 	vsub.f32	s15, s14, s15
 800147c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001480:	ee17 3a90 	vmov	r3, s15
 8001484:	2b00      	cmp	r3, #0
 8001486:	bfb8      	it	lt
 8001488:	425b      	neglt	r3, r3
 800148a:	ee07 3a90 	vmov	s15, r3
 800148e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001492:	4b22      	ldr	r3, [pc, #136]	@ (800151c <NMEA_parser+0x398>)
 8001494:	edd3 7a00 	vldr	s15, [r3]
 8001498:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800149c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a0:	dd02      	ble.n	80014a8 <NMEA_parser+0x324>
		speed_change_CB_fun_ptr();
 80014a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001520 <NMEA_parser+0x39c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4798      	blx	r3
	}

	if (nmea_data.speed_kmph > speed_raise_barrier && previous_data.speed_kmph <= speed_raise_barrier){
 80014a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001518 <NMEA_parser+0x394>)
 80014aa:	ed93 7a08 	vldr	s14, [r3, #32]
 80014ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001524 <NMEA_parser+0x3a0>)
 80014b0:	edd3 7a00 	vldr	s15, [r3]
 80014b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014bc:	dd0c      	ble.n	80014d8 <NMEA_parser+0x354>
 80014be:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 80014c2:	4b18      	ldr	r3, [pc, #96]	@ (8001524 <NMEA_parser+0x3a0>)
 80014c4:	edd3 7a00 	vldr	s15, [r3]
 80014c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d0:	d802      	bhi.n	80014d8 <NMEA_parser+0x354>
		speed_raise_barrier_CB_fun_ptr();
 80014d2:	4b15      	ldr	r3, [pc, #84]	@ (8001528 <NMEA_parser+0x3a4>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4798      	blx	r3
	}

	if (nmea_data.speed_kmph < speed_raise_barrier && previous_data.speed_kmph >= speed_raise_barrier){
 80014d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001518 <NMEA_parser+0x394>)
 80014da:	ed93 7a08 	vldr	s14, [r3, #32]
 80014de:	4b11      	ldr	r3, [pc, #68]	@ (8001524 <NMEA_parser+0x3a0>)
 80014e0:	edd3 7a00 	vldr	s15, [r3]
 80014e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ec:	d400      	bmi.n	80014f0 <NMEA_parser+0x36c>
		speed_fall_barrier_CB_fun_ptr();
	}
}
 80014ee:	e00d      	b.n	800150c <NMEA_parser+0x388>
	if (nmea_data.speed_kmph < speed_raise_barrier && previous_data.speed_kmph >= speed_raise_barrier){
 80014f0:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 80014f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001524 <NMEA_parser+0x3a0>)
 80014f6:	edd3 7a00 	vldr	s15, [r3]
 80014fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001502:	da00      	bge.n	8001506 <NMEA_parser+0x382>
}
 8001504:	e002      	b.n	800150c <NMEA_parser+0x388>
		speed_fall_barrier_CB_fun_ptr();
 8001506:	4b09      	ldr	r3, [pc, #36]	@ (800152c <NMEA_parser+0x3a8>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4798      	blx	r3
}
 800150c:	bf00      	nop
 800150e:	37c8      	adds	r7, #200	@ 0xc8
 8001510:	46bd      	mov	sp, r7
 8001512:	bdb0      	pop	{r4, r5, r7, pc}
 8001514:	08018930 	.word	0x08018930
 8001518:	24000ca8 	.word	0x24000ca8
 800151c:	24000c90 	.word	0x24000c90
 8001520:	24000c8c 	.word	0x24000c8c
 8001524:	24000c98 	.word	0x24000c98
 8001528:	24000c94 	.word	0x24000c94
 800152c:	24000c9c 	.word	0x24000c9c

08001530 <hx2int>:
 * hx2int is function which converts hex number written using characters to corresponding integer.
 * @param[in]	n2		is older position ix hex code
 * @param[in]	n1		is younger position ix hex code
 * @param[out]	uint8_t	is integer corresponding to input hex
 */
static uint8_t hx2int(uint8_t n2, uint8_t n1){
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	460a      	mov	r2, r1
 800153a:	71fb      	strb	r3, [r7, #7]
 800153c:	4613      	mov	r3, r2
 800153e:	71bb      	strb	r3, [r7, #6]
	if (n2 <= '9') n2-='0';
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	2b39      	cmp	r3, #57	@ 0x39
 8001544:	d803      	bhi.n	800154e <hx2int+0x1e>
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	3b30      	subs	r3, #48	@ 0x30
 800154a:	71fb      	strb	r3, [r7, #7]
 800154c:	e002      	b.n	8001554 <hx2int+0x24>
	else n2=n2-'A'+10;
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	3b37      	subs	r3, #55	@ 0x37
 8001552:	71fb      	strb	r3, [r7, #7]

	if (n1 <= '9') n1-='0';
 8001554:	79bb      	ldrb	r3, [r7, #6]
 8001556:	2b39      	cmp	r3, #57	@ 0x39
 8001558:	d803      	bhi.n	8001562 <hx2int+0x32>
 800155a:	79bb      	ldrb	r3, [r7, #6]
 800155c:	3b30      	subs	r3, #48	@ 0x30
 800155e:	71bb      	strb	r3, [r7, #6]
 8001560:	e002      	b.n	8001568 <hx2int+0x38>
	else n1=n1-'A'+10;
 8001562:	79bb      	ldrb	r3, [r7, #6]
 8001564:	3b37      	subs	r3, #55	@ 0x37
 8001566:	71bb      	strb	r3, [r7, #6]

	return n2*16+n1;
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	011b      	lsls	r3, r3, #4
 800156c:	b2da      	uxtb	r2, r3
 800156e:	79bb      	ldrb	r3, [r7, #6]
 8001570:	4413      	add	r3, r2
 8001572:	b2db      	uxtb	r3, r3

}
 8001574:	4618      	mov	r0, r3
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <NMEA_checksum_clc>:
 * NMEA_checksum_clc is function which calculates checksum of the message and compares it to checksum value given in NMEA message.\n
 * To convert given checksum it uses hx2int function.
 * @param[in]	message	pointer to buffer storing NMEA message.
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more information check out NMEA_status documentation.
 */
static NMEA_status NMEA_checksum_clc(uint8_t * message){
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	uint8_t index = 1;
 8001588:	2301      	movs	r3, #1
 800158a:	73fb      	strb	r3, [r7, #15]
	uint8_t checksum_clc =0;
 800158c:	2300      	movs	r3, #0
 800158e:	73bb      	strb	r3, [r7, #14]

	while (message[index]!='*' && index<NMEA_WORKING_BUFFER_SIZE-2){
 8001590:	e009      	b.n	80015a6 <NMEA_checksum_clc+0x26>
		checksum_clc^=message[index++];
 8001592:	7bfb      	ldrb	r3, [r7, #15]
 8001594:	1c5a      	adds	r2, r3, #1
 8001596:	73fa      	strb	r2, [r7, #15]
 8001598:	461a      	mov	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	781a      	ldrb	r2, [r3, #0]
 80015a0:	7bbb      	ldrb	r3, [r7, #14]
 80015a2:	4053      	eors	r3, r2
 80015a4:	73bb      	strb	r3, [r7, #14]
	while (message[index]!='*' && index<NMEA_WORKING_BUFFER_SIZE-2){
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	4413      	add	r3, r2
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80015b0:	d002      	beq.n	80015b8 <NMEA_checksum_clc+0x38>
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
 80015b4:	2b7d      	cmp	r3, #125	@ 0x7d
 80015b6:	d9ec      	bls.n	8001592 <NMEA_checksum_clc+0x12>
	}

	uint8_t checksum = hx2int(message[index+1],message[index+2]);
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	3301      	adds	r3, #1
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	4413      	add	r3, r2
 80015c0:	7818      	ldrb	r0, [r3, #0]
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
 80015c4:	3302      	adds	r3, #2
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	4413      	add	r3, r2
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	4619      	mov	r1, r3
 80015ce:	f7ff ffaf 	bl	8001530 <hx2int>
 80015d2:	4603      	mov	r3, r0
 80015d4:	737b      	strb	r3, [r7, #13]
	if (checksum!=checksum_clc){
 80015d6:	7b7a      	ldrb	r2, [r7, #13]
 80015d8:	7bbb      	ldrb	r3, [r7, #14]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d001      	beq.n	80015e2 <NMEA_checksum_clc+0x62>
		return NMEA_CHECKSUM_ERROR;
 80015de:	2302      	movs	r3, #2
 80015e0:	e000      	b.n	80015e4 <NMEA_checksum_clc+0x64>
	}
	return NMEA_OK;
 80015e2:	2300      	movs	r3, #0


}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <NMEA_read_line>:

/**
 * NMEA_read_line is function which reads one NMEA message line from NMEA_UART_buffer circular buffer to NMEA_working_buffer.
 */
static void NMEA_read_line(void){
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
	int index = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	607b      	str	r3, [r7, #4]
	while (index < NMEA_WORKING_BUFFER_SIZE) NMEA_working_buffer[index++]=0;	// Clean up working buffer.
 80015f6:	e005      	b.n	8001604 <NMEA_read_line+0x18>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	1c5a      	adds	r2, r3, #1
 80015fc:	607a      	str	r2, [r7, #4]
 80015fe:	4a2b      	ldr	r2, [pc, #172]	@ (80016ac <NMEA_read_line+0xc0>)
 8001600:	2100      	movs	r1, #0
 8001602:	54d1      	strb	r1, [r2, r3]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b7f      	cmp	r3, #127	@ 0x7f
 8001608:	ddf6      	ble.n	80015f8 <NMEA_read_line+0xc>

	index = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	607b      	str	r3, [r7, #4]
	while(NMEA_UART_buffer[UART_buffer_tail]!= '\n' && index < NMEA_WORKING_BUFFER_SIZE-2){
 800160e:	e01c      	b.n	800164a <NMEA_read_line+0x5e>
		NMEA_working_buffer[index]=NMEA_UART_buffer[UART_buffer_tail];
 8001610:	4b27      	ldr	r3, [pc, #156]	@ (80016b0 <NMEA_read_line+0xc4>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a27      	ldr	r2, [pc, #156]	@ (80016b4 <NMEA_read_line+0xc8>)
 8001616:	5cd1      	ldrb	r1, [r2, r3]
 8001618:	4a24      	ldr	r2, [pc, #144]	@ (80016ac <NMEA_read_line+0xc0>)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4413      	add	r3, r2
 800161e:	460a      	mov	r2, r1
 8001620:	701a      	strb	r2, [r3, #0]
		NMEA_UART_buffer[UART_buffer_tail] = 0;
 8001622:	4b23      	ldr	r3, [pc, #140]	@ (80016b0 <NMEA_read_line+0xc4>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a23      	ldr	r2, [pc, #140]	@ (80016b4 <NMEA_read_line+0xc8>)
 8001628:	2100      	movs	r1, #0
 800162a:	54d1      	strb	r1, [r2, r3]
		UART_buffer_tail = (UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 800162c:	4b20      	ldr	r3, [pc, #128]	@ (80016b0 <NMEA_read_line+0xc4>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	3301      	adds	r3, #1
 8001632:	425a      	negs	r2, r3
 8001634:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001638:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800163c:	bf58      	it	pl
 800163e:	4253      	negpl	r3, r2
 8001640:	4a1b      	ldr	r2, [pc, #108]	@ (80016b0 <NMEA_read_line+0xc4>)
 8001642:	6013      	str	r3, [r2, #0]
		++index;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3301      	adds	r3, #1
 8001648:	607b      	str	r3, [r7, #4]
	while(NMEA_UART_buffer[UART_buffer_tail]!= '\n' && index < NMEA_WORKING_BUFFER_SIZE-2){
 800164a:	4b19      	ldr	r3, [pc, #100]	@ (80016b0 <NMEA_read_line+0xc4>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a19      	ldr	r2, [pc, #100]	@ (80016b4 <NMEA_read_line+0xc8>)
 8001650:	5cd3      	ldrb	r3, [r2, r3]
 8001652:	2b0a      	cmp	r3, #10
 8001654:	d002      	beq.n	800165c <NMEA_read_line+0x70>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2b7d      	cmp	r3, #125	@ 0x7d
 800165a:	ddd9      	ble.n	8001610 <NMEA_read_line+0x24>
	}
	NMEA_working_buffer[index]=NMEA_UART_buffer[UART_buffer_tail];
 800165c:	4b14      	ldr	r3, [pc, #80]	@ (80016b0 <NMEA_read_line+0xc4>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a14      	ldr	r2, [pc, #80]	@ (80016b4 <NMEA_read_line+0xc8>)
 8001662:	5cd1      	ldrb	r1, [r2, r3]
 8001664:	4a11      	ldr	r2, [pc, #68]	@ (80016ac <NMEA_read_line+0xc0>)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4413      	add	r3, r2
 800166a:	460a      	mov	r2, r1
 800166c:	701a      	strb	r2, [r3, #0]
	NMEA_UART_buffer[UART_buffer_tail] = 0;
 800166e:	4b10      	ldr	r3, [pc, #64]	@ (80016b0 <NMEA_read_line+0xc4>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a10      	ldr	r2, [pc, #64]	@ (80016b4 <NMEA_read_line+0xc8>)
 8001674:	2100      	movs	r1, #0
 8001676:	54d1      	strb	r1, [r2, r3]
	UART_buffer_tail = (UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8001678:	4b0d      	ldr	r3, [pc, #52]	@ (80016b0 <NMEA_read_line+0xc4>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	3301      	adds	r3, #1
 800167e:	425a      	negs	r2, r3
 8001680:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001684:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001688:	bf58      	it	pl
 800168a:	4253      	negpl	r3, r2
 800168c:	4a08      	ldr	r2, [pc, #32]	@ (80016b0 <NMEA_read_line+0xc4>)
 800168e:	6013      	str	r3, [r2, #0]
	++index;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3301      	adds	r3, #1
 8001694:	607b      	str	r3, [r7, #4]
	--UART_buffer_lines;
 8001696:	4b08      	ldr	r3, [pc, #32]	@ (80016b8 <NMEA_read_line+0xcc>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	3b01      	subs	r3, #1
 800169c:	4a06      	ldr	r2, [pc, #24]	@ (80016b8 <NMEA_read_line+0xcc>)
 800169e:	6013      	str	r3, [r2, #0]

}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	24000c00 	.word	0x24000c00
 80016b0:	24000c84 	.word	0x24000c84
 80016b4:	24000800 	.word	0x24000800
 80016b8:	24000c88 	.word	0x24000c88

080016bc <NMEA_init>:

void NMEA_init(UART_HandleTypeDef *huart, DMA_HandleTypeDef *DMA){
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
	HAL_Delay(10);
 80016c6:	200a      	movs	r0, #10
 80016c8:	f003 feca 	bl	8005460 <HAL_Delay>
	NMEA_huart=huart;
 80016cc:	4a12      	ldr	r2, [pc, #72]	@ (8001718 <NMEA_init+0x5c>)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6013      	str	r3, [r2, #0]
	NMEA_DMA=DMA;
 80016d2:	4a12      	ldr	r2, [pc, #72]	@ (800171c <NMEA_init+0x60>)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	6013      	str	r3, [r2, #0]
	__HAL_UART_ENABLE_IT(NMEA_huart,UART_IT_IDLE);
 80016d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001718 <NMEA_init+0x5c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001718 <NMEA_init+0x5c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f042 0210 	orr.w	r2, r2, #16
 80016ea:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(NMEA_huart, NMEA_UART_DMA_buffer, NMEA_UART_DMA_BUFFER_SIZE);
 80016ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001718 <NMEA_init+0x5c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016f4:	490a      	ldr	r1, [pc, #40]	@ (8001720 <NMEA_init+0x64>)
 80016f6:	4618      	mov	r0, r3
 80016f8:	f00c ffc0 	bl	800e67c <HAL_UART_Receive_DMA>


	speed_change_CB_fun_ptr = &default_CB;
 80016fc:	4b09      	ldr	r3, [pc, #36]	@ (8001724 <NMEA_init+0x68>)
 80016fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001728 <NMEA_init+0x6c>)
 8001700:	601a      	str	r2, [r3, #0]
	speed_raise_barrier_CB_fun_ptr = &default_CB;
 8001702:	4b0a      	ldr	r3, [pc, #40]	@ (800172c <NMEA_init+0x70>)
 8001704:	4a08      	ldr	r2, [pc, #32]	@ (8001728 <NMEA_init+0x6c>)
 8001706:	601a      	str	r2, [r3, #0]
	speed_fall_barrier_CB_fun_ptr = &default_CB;
 8001708:	4b09      	ldr	r3, [pc, #36]	@ (8001730 <NMEA_init+0x74>)
 800170a:	4a07      	ldr	r2, [pc, #28]	@ (8001728 <NMEA_init+0x6c>)
 800170c:	601a      	str	r2, [r3, #0]
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	24000ca0 	.word	0x24000ca0
 800171c:	24000ca4 	.word	0x24000ca4
 8001720:	24000600 	.word	0x24000600
 8001724:	24000c8c 	.word	0x24000c8c
 8001728:	08001175 	.word	0x08001175
 800172c:	24000c94 	.word	0x24000c94
 8001730:	24000c9c 	.word	0x24000c9c

08001734 <NMEA_UART_DMA_get_char>:
 * If buffer overflowes, the oldest NMEA message will be deleted to make space for incoming messages.\n
 * If new line character is detected ('\ n'), the line counter (UART_buffer_lines) increases.
 * @param[in]	DMA_char	character from DMA buffer
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more information check out NMEA_status documentation.
 */
static NMEA_status NMEA_UART_DMA_get_char(uint8_t DMA_char){
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]
	int position = (UART_buffer_head + 1)%NMEA_UART_BUFFER_SIZE;
 800173e:	4b2d      	ldr	r3, [pc, #180]	@ (80017f4 <NMEA_UART_DMA_get_char+0xc0>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	3301      	adds	r3, #1
 8001744:	425a      	negs	r2, r3
 8001746:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800174a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800174e:	bf58      	it	pl
 8001750:	4253      	negpl	r3, r2
 8001752:	60bb      	str	r3, [r7, #8]
	NMEA_status stat=NMEA_OK;
 8001754:	2300      	movs	r3, #0
 8001756:	73fb      	strb	r3, [r7, #15]

	if (position == UART_buffer_tail){		//buffer overflowed! make space for new message
 8001758:	4b27      	ldr	r3, [pc, #156]	@ (80017f8 <NMEA_UART_DMA_get_char+0xc4>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	68ba      	ldr	r2, [r7, #8]
 800175e:	429a      	cmp	r2, r3
 8001760:	d130      	bne.n	80017c4 <NMEA_UART_DMA_get_char+0x90>
		while (NMEA_UART_buffer[UART_buffer_tail]!='\n' && NMEA_UART_buffer[UART_buffer_tail]!=0){
 8001762:	e010      	b.n	8001786 <NMEA_UART_DMA_get_char+0x52>
			NMEA_UART_buffer[UART_buffer_tail]=0;
 8001764:	4b24      	ldr	r3, [pc, #144]	@ (80017f8 <NMEA_UART_DMA_get_char+0xc4>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a24      	ldr	r2, [pc, #144]	@ (80017fc <NMEA_UART_DMA_get_char+0xc8>)
 800176a:	2100      	movs	r1, #0
 800176c:	54d1      	strb	r1, [r2, r3]
			UART_buffer_tail=(UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 800176e:	4b22      	ldr	r3, [pc, #136]	@ (80017f8 <NMEA_UART_DMA_get_char+0xc4>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	3301      	adds	r3, #1
 8001774:	425a      	negs	r2, r3
 8001776:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800177a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800177e:	bf58      	it	pl
 8001780:	4253      	negpl	r3, r2
 8001782:	4a1d      	ldr	r2, [pc, #116]	@ (80017f8 <NMEA_UART_DMA_get_char+0xc4>)
 8001784:	6013      	str	r3, [r2, #0]
		while (NMEA_UART_buffer[UART_buffer_tail]!='\n' && NMEA_UART_buffer[UART_buffer_tail]!=0){
 8001786:	4b1c      	ldr	r3, [pc, #112]	@ (80017f8 <NMEA_UART_DMA_get_char+0xc4>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a1c      	ldr	r2, [pc, #112]	@ (80017fc <NMEA_UART_DMA_get_char+0xc8>)
 800178c:	5cd3      	ldrb	r3, [r2, r3]
 800178e:	2b0a      	cmp	r3, #10
 8001790:	d005      	beq.n	800179e <NMEA_UART_DMA_get_char+0x6a>
 8001792:	4b19      	ldr	r3, [pc, #100]	@ (80017f8 <NMEA_UART_DMA_get_char+0xc4>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a19      	ldr	r2, [pc, #100]	@ (80017fc <NMEA_UART_DMA_get_char+0xc8>)
 8001798:	5cd3      	ldrb	r3, [r2, r3]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1e2      	bne.n	8001764 <NMEA_UART_DMA_get_char+0x30>
		}
		NMEA_UART_buffer[UART_buffer_tail]=0;
 800179e:	4b16      	ldr	r3, [pc, #88]	@ (80017f8 <NMEA_UART_DMA_get_char+0xc4>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a16      	ldr	r2, [pc, #88]	@ (80017fc <NMEA_UART_DMA_get_char+0xc8>)
 80017a4:	2100      	movs	r1, #0
 80017a6:	54d1      	strb	r1, [r2, r3]
		UART_buffer_tail=(UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 80017a8:	4b13      	ldr	r3, [pc, #76]	@ (80017f8 <NMEA_UART_DMA_get_char+0xc4>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	3301      	adds	r3, #1
 80017ae:	425a      	negs	r2, r3
 80017b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017b4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80017b8:	bf58      	it	pl
 80017ba:	4253      	negpl	r3, r2
 80017bc:	4a0e      	ldr	r2, [pc, #56]	@ (80017f8 <NMEA_UART_DMA_get_char+0xc4>)
 80017be:	6013      	str	r3, [r2, #0]
		stat=NMEA_BUFFER_OVERFLOWED;
 80017c0:	2301      	movs	r3, #1
 80017c2:	73fb      	strb	r3, [r7, #15]
	}

	NMEA_UART_buffer[UART_buffer_head]=DMA_char;
 80017c4:	4b0b      	ldr	r3, [pc, #44]	@ (80017f4 <NMEA_UART_DMA_get_char+0xc0>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	490c      	ldr	r1, [pc, #48]	@ (80017fc <NMEA_UART_DMA_get_char+0xc8>)
 80017ca:	79fa      	ldrb	r2, [r7, #7]
 80017cc:	54ca      	strb	r2, [r1, r3]

	UART_buffer_head=position;
 80017ce:	4a09      	ldr	r2, [pc, #36]	@ (80017f4 <NMEA_UART_DMA_get_char+0xc0>)
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	6013      	str	r3, [r2, #0]

	if(DMA_char=='\n'){
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	2b0a      	cmp	r3, #10
 80017d8:	d104      	bne.n	80017e4 <NMEA_UART_DMA_get_char+0xb0>
		++UART_buffer_lines;	//increment lines counter
 80017da:	4b09      	ldr	r3, [pc, #36]	@ (8001800 <NMEA_UART_DMA_get_char+0xcc>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	3301      	adds	r3, #1
 80017e0:	4a07      	ldr	r2, [pc, #28]	@ (8001800 <NMEA_UART_DMA_get_char+0xcc>)
 80017e2:	6013      	str	r3, [r2, #0]
	}

	return stat;
 80017e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	24000c80 	.word	0x24000c80
 80017f8:	24000c84 	.word	0x24000c84
 80017fc:	24000800 	.word	0x24000800
 8001800:	24000c88 	.word	0x24000c88

08001804 <NMEA_UART_DMA_copy_buffer>:
/**
 * NMEA_UART_DMA_copy_buffer is a function which copies messages from DMA buffer to UART circular buffer.\n
 * To do so, it uses NMEA_UART_DMA_get_char function for every character in NMEA_UART_DMA_buffer from 0 to (NMEA_UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(NMEA_DMA)).
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more information check out NMEA_status documentation.
 */
static NMEA_status NMEA_UART_DMA_copy_buffer(void){
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0


	NMEA_status stat=NMEA_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	73fb      	strb	r3, [r7, #15]

	int data_length = NMEA_UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(NMEA_DMA);
 800180e:	4b4b      	ldr	r3, [pc, #300]	@ (800193c <NMEA_UART_DMA_copy_buffer+0x138>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a4a      	ldr	r2, [pc, #296]	@ (8001940 <NMEA_UART_DMA_copy_buffer+0x13c>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d059      	beq.n	80018ce <NMEA_UART_DMA_copy_buffer+0xca>
 800181a:	4b48      	ldr	r3, [pc, #288]	@ (800193c <NMEA_UART_DMA_copy_buffer+0x138>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a48      	ldr	r2, [pc, #288]	@ (8001944 <NMEA_UART_DMA_copy_buffer+0x140>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d053      	beq.n	80018ce <NMEA_UART_DMA_copy_buffer+0xca>
 8001826:	4b45      	ldr	r3, [pc, #276]	@ (800193c <NMEA_UART_DMA_copy_buffer+0x138>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a46      	ldr	r2, [pc, #280]	@ (8001948 <NMEA_UART_DMA_copy_buffer+0x144>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d04d      	beq.n	80018ce <NMEA_UART_DMA_copy_buffer+0xca>
 8001832:	4b42      	ldr	r3, [pc, #264]	@ (800193c <NMEA_UART_DMA_copy_buffer+0x138>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a44      	ldr	r2, [pc, #272]	@ (800194c <NMEA_UART_DMA_copy_buffer+0x148>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d047      	beq.n	80018ce <NMEA_UART_DMA_copy_buffer+0xca>
 800183e:	4b3f      	ldr	r3, [pc, #252]	@ (800193c <NMEA_UART_DMA_copy_buffer+0x138>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a42      	ldr	r2, [pc, #264]	@ (8001950 <NMEA_UART_DMA_copy_buffer+0x14c>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d041      	beq.n	80018ce <NMEA_UART_DMA_copy_buffer+0xca>
 800184a:	4b3c      	ldr	r3, [pc, #240]	@ (800193c <NMEA_UART_DMA_copy_buffer+0x138>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a40      	ldr	r2, [pc, #256]	@ (8001954 <NMEA_UART_DMA_copy_buffer+0x150>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d03b      	beq.n	80018ce <NMEA_UART_DMA_copy_buffer+0xca>
 8001856:	4b39      	ldr	r3, [pc, #228]	@ (800193c <NMEA_UART_DMA_copy_buffer+0x138>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a3e      	ldr	r2, [pc, #248]	@ (8001958 <NMEA_UART_DMA_copy_buffer+0x154>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d035      	beq.n	80018ce <NMEA_UART_DMA_copy_buffer+0xca>
 8001862:	4b36      	ldr	r3, [pc, #216]	@ (800193c <NMEA_UART_DMA_copy_buffer+0x138>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a3c      	ldr	r2, [pc, #240]	@ (800195c <NMEA_UART_DMA_copy_buffer+0x158>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d02f      	beq.n	80018ce <NMEA_UART_DMA_copy_buffer+0xca>
 800186e:	4b33      	ldr	r3, [pc, #204]	@ (800193c <NMEA_UART_DMA_copy_buffer+0x138>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a3a      	ldr	r2, [pc, #232]	@ (8001960 <NMEA_UART_DMA_copy_buffer+0x15c>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d029      	beq.n	80018ce <NMEA_UART_DMA_copy_buffer+0xca>
 800187a:	4b30      	ldr	r3, [pc, #192]	@ (800193c <NMEA_UART_DMA_copy_buffer+0x138>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a38      	ldr	r2, [pc, #224]	@ (8001964 <NMEA_UART_DMA_copy_buffer+0x160>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d023      	beq.n	80018ce <NMEA_UART_DMA_copy_buffer+0xca>
 8001886:	4b2d      	ldr	r3, [pc, #180]	@ (800193c <NMEA_UART_DMA_copy_buffer+0x138>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a36      	ldr	r2, [pc, #216]	@ (8001968 <NMEA_UART_DMA_copy_buffer+0x164>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d01d      	beq.n	80018ce <NMEA_UART_DMA_copy_buffer+0xca>
 8001892:	4b2a      	ldr	r3, [pc, #168]	@ (800193c <NMEA_UART_DMA_copy_buffer+0x138>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a34      	ldr	r2, [pc, #208]	@ (800196c <NMEA_UART_DMA_copy_buffer+0x168>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d017      	beq.n	80018ce <NMEA_UART_DMA_copy_buffer+0xca>
 800189e:	4b27      	ldr	r3, [pc, #156]	@ (800193c <NMEA_UART_DMA_copy_buffer+0x138>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a32      	ldr	r2, [pc, #200]	@ (8001970 <NMEA_UART_DMA_copy_buffer+0x16c>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d011      	beq.n	80018ce <NMEA_UART_DMA_copy_buffer+0xca>
 80018aa:	4b24      	ldr	r3, [pc, #144]	@ (800193c <NMEA_UART_DMA_copy_buffer+0x138>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a30      	ldr	r2, [pc, #192]	@ (8001974 <NMEA_UART_DMA_copy_buffer+0x170>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d00b      	beq.n	80018ce <NMEA_UART_DMA_copy_buffer+0xca>
 80018b6:	4b21      	ldr	r3, [pc, #132]	@ (800193c <NMEA_UART_DMA_copy_buffer+0x138>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a2e      	ldr	r2, [pc, #184]	@ (8001978 <NMEA_UART_DMA_copy_buffer+0x174>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d005      	beq.n	80018ce <NMEA_UART_DMA_copy_buffer+0xca>
 80018c2:	4b1e      	ldr	r3, [pc, #120]	@ (800193c <NMEA_UART_DMA_copy_buffer+0x138>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a2c      	ldr	r2, [pc, #176]	@ (800197c <NMEA_UART_DMA_copy_buffer+0x178>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d106      	bne.n	80018dc <NMEA_UART_DMA_copy_buffer+0xd8>
 80018ce:	4b1b      	ldr	r3, [pc, #108]	@ (800193c <NMEA_UART_DMA_copy_buffer+0x138>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80018da:	e005      	b.n	80018e8 <NMEA_UART_DMA_copy_buffer+0xe4>
 80018dc:	4b17      	ldr	r3, [pc, #92]	@ (800193c <NMEA_UART_DMA_copy_buffer+0x138>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80018e8:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < data_length; i++){
 80018ea:	2300      	movs	r3, #0
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	e013      	b.n	8001918 <NMEA_UART_DMA_copy_buffer+0x114>
		if (NMEA_UART_DMA_get_char(NMEA_UART_DMA_buffer[i])==NMEA_BUFFER_OVERFLOWED){
 80018f0:	4a23      	ldr	r2, [pc, #140]	@ (8001980 <NMEA_UART_DMA_copy_buffer+0x17c>)
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	4413      	add	r3, r2
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff ff1b 	bl	8001734 <NMEA_UART_DMA_get_char>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b01      	cmp	r3, #1
 8001902:	d101      	bne.n	8001908 <NMEA_UART_DMA_copy_buffer+0x104>
			stat=NMEA_BUFFER_OVERFLOWED;
 8001904:	2301      	movs	r3, #1
 8001906:	73fb      	strb	r3, [r7, #15]
		}
		NMEA_UART_DMA_buffer[i]=0;
 8001908:	4a1d      	ldr	r2, [pc, #116]	@ (8001980 <NMEA_UART_DMA_copy_buffer+0x17c>)
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	4413      	add	r3, r2
 800190e:	2200      	movs	r2, #0
 8001910:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < data_length; i++){
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	3301      	adds	r3, #1
 8001916:	60bb      	str	r3, [r7, #8]
 8001918:	68ba      	ldr	r2, [r7, #8]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	429a      	cmp	r2, r3
 800191e:	dbe7      	blt.n	80018f0 <NMEA_UART_DMA_copy_buffer+0xec>
	}

	HAL_UART_Receive_DMA(NMEA_huart, NMEA_UART_DMA_buffer, NMEA_UART_DMA_BUFFER_SIZE);
 8001920:	4b18      	ldr	r3, [pc, #96]	@ (8001984 <NMEA_UART_DMA_copy_buffer+0x180>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001928:	4915      	ldr	r1, [pc, #84]	@ (8001980 <NMEA_UART_DMA_copy_buffer+0x17c>)
 800192a:	4618      	mov	r0, r3
 800192c:	f00c fea6 	bl	800e67c <HAL_UART_Receive_DMA>
	return stat;
 8001930:	7bfb      	ldrb	r3, [r7, #15]
}
 8001932:	4618      	mov	r0, r3
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	24000ca4 	.word	0x24000ca4
 8001940:	40020010 	.word	0x40020010
 8001944:	40020028 	.word	0x40020028
 8001948:	40020040 	.word	0x40020040
 800194c:	40020058 	.word	0x40020058
 8001950:	40020070 	.word	0x40020070
 8001954:	40020088 	.word	0x40020088
 8001958:	400200a0 	.word	0x400200a0
 800195c:	400200b8 	.word	0x400200b8
 8001960:	40020410 	.word	0x40020410
 8001964:	40020428 	.word	0x40020428
 8001968:	40020440 	.word	0x40020440
 800196c:	40020458 	.word	0x40020458
 8001970:	40020470 	.word	0x40020470
 8001974:	40020488 	.word	0x40020488
 8001978:	400204a0 	.word	0x400204a0
 800197c:	400204b8 	.word	0x400204b8
 8001980:	24000600 	.word	0x24000600
 8001984:	24000ca0 	.word	0x24000ca0

08001988 <NMEA_process_task>:

NMEA_status NMEA_process_task(void){
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
	NMEA_status stat = NMEA_OK;
 800198e:	2300      	movs	r3, #0
 8001990:	71fb      	strb	r3, [r7, #7]
	while(UART_buffer_lines>0) {
 8001992:	e00d      	b.n	80019b0 <NMEA_process_task+0x28>
		NMEA_read_line();
 8001994:	f7ff fe2a 	bl	80015ec <NMEA_read_line>
		if (NMEA_checksum_clc(NMEA_working_buffer) == NMEA_OK){
 8001998:	480a      	ldr	r0, [pc, #40]	@ (80019c4 <NMEA_process_task+0x3c>)
 800199a:	f7ff fdf1 	bl	8001580 <NMEA_checksum_clc>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d103      	bne.n	80019ac <NMEA_process_task+0x24>
			NMEA_parser((char *)NMEA_working_buffer);
 80019a4:	4807      	ldr	r0, [pc, #28]	@ (80019c4 <NMEA_process_task+0x3c>)
 80019a6:	f7ff fbed 	bl	8001184 <NMEA_parser>
 80019aa:	e001      	b.n	80019b0 <NMEA_process_task+0x28>
		}else stat = NMEA_CHECKSUM_ERROR;
 80019ac:	2302      	movs	r3, #2
 80019ae:	71fb      	strb	r3, [r7, #7]
	while(UART_buffer_lines>0) {
 80019b0:	4b05      	ldr	r3, [pc, #20]	@ (80019c8 <NMEA_process_task+0x40>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	dced      	bgt.n	8001994 <NMEA_process_task+0xc>
	}
	return stat;
 80019b8:	79fb      	ldrb	r3, [r7, #7]
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	24000c00 	.word	0x24000c00
 80019c8:	24000c88 	.word	0x24000c88

080019cc <user_UART_IDLE_IT_handler>:

NMEA_status user_UART_IDLE_IT_handler(void){
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
	NMEA_status stat = NMEA_OK;
 80019d2:	2300      	movs	r3, #0
 80019d4:	71fb      	strb	r3, [r7, #7]
	if (__HAL_UART_GET_FLAG(NMEA_huart, UART_FLAG_IDLE) == SET) {
 80019d6:	4b0d      	ldr	r3, [pc, #52]	@ (8001a0c <user_UART_IDLE_IT_handler+0x40>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	f003 0310 	and.w	r3, r3, #16
 80019e2:	2b10      	cmp	r3, #16
 80019e4:	d10d      	bne.n	8001a02 <user_UART_IDLE_IT_handler+0x36>
		__HAL_UART_CLEAR_FLAG(NMEA_huart,UART_FLAG_IDLE);
 80019e6:	4b09      	ldr	r3, [pc, #36]	@ (8001a0c <user_UART_IDLE_IT_handler+0x40>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2210      	movs	r2, #16
 80019ee:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(NMEA_huart);
 80019f0:	4b06      	ldr	r3, [pc, #24]	@ (8001a0c <user_UART_IDLE_IT_handler+0x40>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f00c fe8d 	bl	800e714 <HAL_UART_DMAStop>
		stat = NMEA_UART_DMA_copy_buffer();
 80019fa:	f7ff ff03 	bl	8001804 <NMEA_UART_DMA_copy_buffer>
 80019fe:	4603      	mov	r3, r0
 8001a00:	71fb      	strb	r3, [r7, #7]
	}
	return stat;
 8001a02:	79fb      	ldrb	r3, [r7, #7]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	24000ca0 	.word	0x24000ca0

08001a10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001a14:	f000 f906 	bl	8001c24 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a18:	f003 fcc6 	bl	80053a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a1c:	f000 f842 	bl	8001aa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a20:	f7ff fa26 	bl	8000e70 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a24:	f7ff f880 	bl	8000b28 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8001a28:	f7ff f8ae 	bl	8000b88 <MX_FDCAN1_Init>
  MX_I2C3_Init();
 8001a2c:	f7ff fad2 	bl	8000fd4 <MX_I2C3_Init>
  MX_SPI1_Init();
 8001a30:	f000 f93c 	bl	8001cac <MX_SPI1_Init>
  MX_SPI2_Init();
 8001a34:	f000 f990 	bl	8001d58 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001a38:	f000 fcc8 	bl	80023cc <MX_TIM2_Init>
  MX_TIM3_Init();
 8001a3c:	f000 fd42 	bl	80024c4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001a40:	f000 fda6 	bl	8002590 <MX_TIM4_Init>
  MX_UART4_Init();
 8001a44:	f000 ff5e 	bl	8002904 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8001a48:	f000 ffa8 	bl	800299c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001a4c:	f001 f842 	bl	8002ad4 <MX_USART6_UART_Init>
  MX_TIM13_Init();
 8001a50:	f000 fe1a 	bl	8002688 <MX_TIM13_Init>
  MX_USART3_UART_Init();
 8001a54:	f000 fff2 	bl	8002a3c <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8001a58:	f010 f84c 	bl	8011af4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  BMP280_init();
 8001a5c:	f001 ff74 	bl	8003948 <BMP280_init>
  //SD_init();
  SBUS_init();
 8001a60:	f002 ff20 	bl	80048a4 <SBUS_init>
  HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 8001a64:	2201      	movs	r2, #1
 8001a66:	4909      	ldr	r1, [pc, #36]	@ (8001a8c <main+0x7c>)
 8001a68:	4809      	ldr	r0, [pc, #36]	@ (8001a90 <main+0x80>)
 8001a6a:	f00c fe07 	bl	800e67c <HAL_UART_Receive_DMA>
  HAL_UART_Receive_IT(&huart6, &LR03_RxByte,1);
 8001a6e:	2201      	movs	r2, #1
 8001a70:	4908      	ldr	r1, [pc, #32]	@ (8001a94 <main+0x84>)
 8001a72:	4809      	ldr	r0, [pc, #36]	@ (8001a98 <main+0x88>)
 8001a74:	f00c fdb6 	bl	800e5e4 <HAL_UART_Receive_IT>
  NMEA_init(&huart4, &hdma_uart4_rx);
 8001a78:	4908      	ldr	r1, [pc, #32]	@ (8001a9c <main+0x8c>)
 8001a7a:	4809      	ldr	r0, [pc, #36]	@ (8001aa0 <main+0x90>)
 8001a7c:	f7ff fe1e 	bl	80016bc <NMEA_init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001a80:	f7ff f97a 	bl	8000d78 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001a84:	f011 fd65 	bl	8013552 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a88:	bf00      	nop
 8001a8a:	e7fd      	b.n	8001a88 <main+0x78>
 8001a8c:	24001467 	.word	0x24001467
 8001a90:	240010a0 	.word	0x240010a0
 8001a94:	24000ce0 	.word	0x24000ce0
 8001a98:	24001134 	.word	0x24001134
 8001a9c:	240011c8 	.word	0x240011c8
 8001aa0:	24000f78 	.word	0x24000f78

08001aa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b09c      	sub	sp, #112	@ 0x70
 8001aa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001aae:	224c      	movs	r2, #76	@ 0x4c
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f014 fec7 	bl	8016846 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ab8:	1d3b      	adds	r3, r7, #4
 8001aba:	2220      	movs	r2, #32
 8001abc:	2100      	movs	r1, #0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f014 fec1 	bl	8016846 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8001ac4:	4b30      	ldr	r3, [pc, #192]	@ (8001b88 <SystemClock_Config+0xe4>)
 8001ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8001aca:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001ace:	2002      	movs	r0, #2
 8001ad0:	f007 fb8e 	bl	80091f0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	603b      	str	r3, [r7, #0]
 8001ad8:	4b2c      	ldr	r3, [pc, #176]	@ (8001b8c <SystemClock_Config+0xe8>)
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	4a2b      	ldr	r2, [pc, #172]	@ (8001b8c <SystemClock_Config+0xe8>)
 8001ade:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ae2:	6193      	str	r3, [r2, #24]
 8001ae4:	4b29      	ldr	r3, [pc, #164]	@ (8001b8c <SystemClock_Config+0xe8>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001aec:	603b      	str	r3, [r7, #0]
 8001aee:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001af0:	bf00      	nop
 8001af2:	4b26      	ldr	r3, [pc, #152]	@ (8001b8c <SystemClock_Config+0xe8>)
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001afa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001afe:	d1f8      	bne.n	8001af2 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b00:	2302      	movs	r3, #2
 8001b02:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001b04:	2301      	movs	r3, #1
 8001b06:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001b08:	2340      	movs	r3, #64	@ 0x40
 8001b0a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b10:	2300      	movs	r3, #0
 8001b12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b14:	2304      	movs	r3, #4
 8001b16:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8001b18:	2323      	movs	r3, #35	@ 0x23
 8001b1a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001b20:	2302      	movs	r3, #2
 8001b22:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b24:	2302      	movs	r3, #2
 8001b26:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001b28:	230c      	movs	r3, #12
 8001b2a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f007 fb93 	bl	8009264 <HAL_RCC_OscConfig>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001b44:	f000 f8ac 	bl	8001ca0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b48:	233f      	movs	r3, #63	@ 0x3f
 8001b4a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001b54:	2300      	movs	r3, #0
 8001b56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001b58:	2340      	movs	r3, #64	@ 0x40
 8001b5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001b5c:	2340      	movs	r3, #64	@ 0x40
 8001b5e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001b60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b64:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001b66:	2340      	movs	r3, #64	@ 0x40
 8001b68:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001b6a:	1d3b      	adds	r3, r7, #4
 8001b6c:	2106      	movs	r1, #6
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f007 ffaa 	bl	8009ac8 <HAL_RCC_ClockConfig>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <SystemClock_Config+0xda>
  {
    Error_Handler();
 8001b7a:	f000 f891 	bl	8001ca0 <Error_Handler>
  }
}
 8001b7e:	bf00      	nop
 8001b80:	3770      	adds	r7, #112	@ 0x70
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	58024400 	.word	0x58024400
 8001b8c:	58024800 	.word	0x58024800

08001b90 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == USART1){
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a18      	ldr	r2, [pc, #96]	@ (8001c00 <HAL_UART_RxCpltCallback+0x70>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d10a      	bne.n	8001bb8 <HAL_UART_RxCpltCallback+0x28>
		SBUS_Receive(SBUS_RxBuffer);
 8001ba2:	4b18      	ldr	r3, [pc, #96]	@ (8001c04 <HAL_UART_RxCpltCallback+0x74>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f002 fe8a 	bl	80048c0 <SBUS_Receive>
		HAL_UART_Receive_DMA(&huart1, &SBUS_RxBuffer, 1);
 8001bac:	2201      	movs	r2, #1
 8001bae:	4915      	ldr	r1, [pc, #84]	@ (8001c04 <HAL_UART_RxCpltCallback+0x74>)
 8001bb0:	4815      	ldr	r0, [pc, #84]	@ (8001c08 <HAL_UART_RxCpltCallback+0x78>)
 8001bb2:	f00c fd63 	bl	800e67c <HAL_UART_Receive_DMA>
    }
    else if(huart -> Instance == USART6){
    	LR03_Receive(LR03_RxByte);
    	HAL_UART_Receive_IT(&huart6, &LR03_RxByte,1);
    }
}
 8001bb6:	e01e      	b.n	8001bf6 <HAL_UART_RxCpltCallback+0x66>
    else if (huart -> Instance == USART3){
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a13      	ldr	r2, [pc, #76]	@ (8001c0c <HAL_UART_RxCpltCallback+0x7c>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d10a      	bne.n	8001bd8 <HAL_UART_RxCpltCallback+0x48>
        BNO_Receive(BNO_BufferByte);
 8001bc2:	4b13      	ldr	r3, [pc, #76]	@ (8001c10 <HAL_UART_RxCpltCallback+0x80>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f002 fbf2 	bl	80043b0 <BNO_Receive>
        HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 8001bcc:	2201      	movs	r2, #1
 8001bce:	4910      	ldr	r1, [pc, #64]	@ (8001c10 <HAL_UART_RxCpltCallback+0x80>)
 8001bd0:	4810      	ldr	r0, [pc, #64]	@ (8001c14 <HAL_UART_RxCpltCallback+0x84>)
 8001bd2:	f00c fd53 	bl	800e67c <HAL_UART_Receive_DMA>
}
 8001bd6:	e00e      	b.n	8001bf6 <HAL_UART_RxCpltCallback+0x66>
    else if(huart -> Instance == USART6){
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a0e      	ldr	r2, [pc, #56]	@ (8001c18 <HAL_UART_RxCpltCallback+0x88>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d109      	bne.n	8001bf6 <HAL_UART_RxCpltCallback+0x66>
    	LR03_Receive(LR03_RxByte);
 8001be2:	4b0e      	ldr	r3, [pc, #56]	@ (8001c1c <HAL_UART_RxCpltCallback+0x8c>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f002 fdc4 	bl	8004774 <LR03_Receive>
    	HAL_UART_Receive_IT(&huart6, &LR03_RxByte,1);
 8001bec:	2201      	movs	r2, #1
 8001bee:	490b      	ldr	r1, [pc, #44]	@ (8001c1c <HAL_UART_RxCpltCallback+0x8c>)
 8001bf0:	480b      	ldr	r0, [pc, #44]	@ (8001c20 <HAL_UART_RxCpltCallback+0x90>)
 8001bf2:	f00c fcf7 	bl	800e5e4 <HAL_UART_Receive_IT>
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40011000 	.word	0x40011000
 8001c04:	240015f1 	.word	0x240015f1
 8001c08:	2400100c 	.word	0x2400100c
 8001c0c:	40004800 	.word	0x40004800
 8001c10:	24001467 	.word	0x24001467
 8001c14:	240010a0 	.word	0x240010a0
 8001c18:	40011400 	.word	0x40011400
 8001c1c:	24000ce0 	.word	0x24000ce0
 8001c20:	24001134 	.word	0x24001134

08001c24 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001c2a:	463b      	mov	r3, r7
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001c36:	f003 fd17 	bl	8005668 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001c46:	231f      	movs	r3, #31
 8001c48:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001c4a:	2387      	movs	r3, #135	@ 0x87
 8001c4c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001c52:	2300      	movs	r3, #0
 8001c54:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001c56:	2301      	movs	r3, #1
 8001c58:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001c62:	2300      	movs	r3, #0
 8001c64:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001c66:	463b      	mov	r3, r7
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f003 fd35 	bl	80056d8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001c6e:	2004      	movs	r0, #4
 8001c70:	f003 fd12 	bl	8005698 <HAL_MPU_Enable>

}
 8001c74:	bf00      	nop
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a04      	ldr	r2, [pc, #16]	@ (8001c9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d101      	bne.n	8001c92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c8e:	f003 fbc7 	bl	8005420 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40014800 	.word	0x40014800

08001ca0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ca4:	b672      	cpsid	i
}
 8001ca6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ca8:	bf00      	nop
 8001caa:	e7fd      	b.n	8001ca8 <Error_Handler+0x8>

08001cac <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001cb0:	4b27      	ldr	r3, [pc, #156]	@ (8001d50 <MX_SPI1_Init+0xa4>)
 8001cb2:	4a28      	ldr	r2, [pc, #160]	@ (8001d54 <MX_SPI1_Init+0xa8>)
 8001cb4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cb6:	4b26      	ldr	r3, [pc, #152]	@ (8001d50 <MX_SPI1_Init+0xa4>)
 8001cb8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001cbc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cbe:	4b24      	ldr	r3, [pc, #144]	@ (8001d50 <MX_SPI1_Init+0xa4>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cc4:	4b22      	ldr	r3, [pc, #136]	@ (8001d50 <MX_SPI1_Init+0xa4>)
 8001cc6:	2207      	movs	r2, #7
 8001cc8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cca:	4b21      	ldr	r3, [pc, #132]	@ (8001d50 <MX_SPI1_Init+0xa4>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cd0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d50 <MX_SPI1_Init+0xa4>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cd6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d50 <MX_SPI1_Init+0xa4>)
 8001cd8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001cdc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001cde:	4b1c      	ldr	r3, [pc, #112]	@ (8001d50 <MX_SPI1_Init+0xa4>)
 8001ce0:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 8001ce4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d50 <MX_SPI1_Init+0xa4>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cec:	4b18      	ldr	r3, [pc, #96]	@ (8001d50 <MX_SPI1_Init+0xa4>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cf2:	4b17      	ldr	r3, [pc, #92]	@ (8001d50 <MX_SPI1_Init+0xa4>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001cf8:	4b15      	ldr	r3, [pc, #84]	@ (8001d50 <MX_SPI1_Init+0xa4>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001cfe:	4b14      	ldr	r3, [pc, #80]	@ (8001d50 <MX_SPI1_Init+0xa4>)
 8001d00:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d04:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001d06:	4b12      	ldr	r3, [pc, #72]	@ (8001d50 <MX_SPI1_Init+0xa4>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001d0c:	4b10      	ldr	r3, [pc, #64]	@ (8001d50 <MX_SPI1_Init+0xa4>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001d12:	4b0f      	ldr	r3, [pc, #60]	@ (8001d50 <MX_SPI1_Init+0xa4>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001d18:	4b0d      	ldr	r3, [pc, #52]	@ (8001d50 <MX_SPI1_Init+0xa4>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d50 <MX_SPI1_Init+0xa4>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001d24:	4b0a      	ldr	r3, [pc, #40]	@ (8001d50 <MX_SPI1_Init+0xa4>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001d2a:	4b09      	ldr	r3, [pc, #36]	@ (8001d50 <MX_SPI1_Init+0xa4>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001d30:	4b07      	ldr	r3, [pc, #28]	@ (8001d50 <MX_SPI1_Init+0xa4>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001d36:	4b06      	ldr	r3, [pc, #24]	@ (8001d50 <MX_SPI1_Init+0xa4>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d3c:	4804      	ldr	r0, [pc, #16]	@ (8001d50 <MX_SPI1_Init+0xa4>)
 8001d3e:	f00a f871 	bl	800be24 <HAL_SPI_Init>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001d48:	f7ff ffaa 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d4c:	bf00      	nop
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	24000ce8 	.word	0x24000ce8
 8001d54:	40013000 	.word	0x40013000

08001d58 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001d5c:	4b27      	ldr	r3, [pc, #156]	@ (8001dfc <MX_SPI2_Init+0xa4>)
 8001d5e:	4a28      	ldr	r2, [pc, #160]	@ (8001e00 <MX_SPI2_Init+0xa8>)
 8001d60:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d62:	4b26      	ldr	r3, [pc, #152]	@ (8001dfc <MX_SPI2_Init+0xa4>)
 8001d64:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001d68:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d6a:	4b24      	ldr	r3, [pc, #144]	@ (8001dfc <MX_SPI2_Init+0xa4>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d70:	4b22      	ldr	r3, [pc, #136]	@ (8001dfc <MX_SPI2_Init+0xa4>)
 8001d72:	2207      	movs	r2, #7
 8001d74:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d76:	4b21      	ldr	r3, [pc, #132]	@ (8001dfc <MX_SPI2_Init+0xa4>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d7c:	4b1f      	ldr	r3, [pc, #124]	@ (8001dfc <MX_SPI2_Init+0xa4>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d82:	4b1e      	ldr	r3, [pc, #120]	@ (8001dfc <MX_SPI2_Init+0xa4>)
 8001d84:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001d88:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001d8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001dfc <MX_SPI2_Init+0xa4>)
 8001d8c:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8001d90:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d92:	4b1a      	ldr	r3, [pc, #104]	@ (8001dfc <MX_SPI2_Init+0xa4>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d98:	4b18      	ldr	r3, [pc, #96]	@ (8001dfc <MX_SPI2_Init+0xa4>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d9e:	4b17      	ldr	r3, [pc, #92]	@ (8001dfc <MX_SPI2_Init+0xa4>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001da4:	4b15      	ldr	r3, [pc, #84]	@ (8001dfc <MX_SPI2_Init+0xa4>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001daa:	4b14      	ldr	r3, [pc, #80]	@ (8001dfc <MX_SPI2_Init+0xa4>)
 8001dac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001db0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001db2:	4b12      	ldr	r3, [pc, #72]	@ (8001dfc <MX_SPI2_Init+0xa4>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001db8:	4b10      	ldr	r3, [pc, #64]	@ (8001dfc <MX_SPI2_Init+0xa4>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8001dfc <MX_SPI2_Init+0xa4>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8001dfc <MX_SPI2_Init+0xa4>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001dca:	4b0c      	ldr	r3, [pc, #48]	@ (8001dfc <MX_SPI2_Init+0xa4>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8001dfc <MX_SPI2_Init+0xa4>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001dd6:	4b09      	ldr	r3, [pc, #36]	@ (8001dfc <MX_SPI2_Init+0xa4>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001ddc:	4b07      	ldr	r3, [pc, #28]	@ (8001dfc <MX_SPI2_Init+0xa4>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001de2:	4b06      	ldr	r3, [pc, #24]	@ (8001dfc <MX_SPI2_Init+0xa4>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001de8:	4804      	ldr	r0, [pc, #16]	@ (8001dfc <MX_SPI2_Init+0xa4>)
 8001dea:	f00a f81b 	bl	800be24 <HAL_SPI_Init>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001df4:	f7ff ff54 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001df8:	bf00      	nop
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	24000d70 	.word	0x24000d70
 8001e00:	40003800 	.word	0x40003800

08001e04 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b0bc      	sub	sp, #240	@ 0xf0
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e1c:	f107 0318 	add.w	r3, r7, #24
 8001e20:	22c0      	movs	r2, #192	@ 0xc0
 8001e22:	2100      	movs	r1, #0
 8001e24:	4618      	mov	r0, r3
 8001e26:	f014 fd0e 	bl	8016846 <memset>
  if(spiHandle->Instance==SPI1)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a4c      	ldr	r2, [pc, #304]	@ (8001f60 <HAL_SPI_MspInit+0x15c>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d145      	bne.n	8001ec0 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001e34:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001e38:	f04f 0300 	mov.w	r3, #0
 8001e3c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e44:	f107 0318 	add.w	r3, r7, #24
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f008 fa0b 	bl	800a264 <HAL_RCCEx_PeriphCLKConfig>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001e54:	f7ff ff24 	bl	8001ca0 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e58:	4b42      	ldr	r3, [pc, #264]	@ (8001f64 <HAL_SPI_MspInit+0x160>)
 8001e5a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001e5e:	4a41      	ldr	r2, [pc, #260]	@ (8001f64 <HAL_SPI_MspInit+0x160>)
 8001e60:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e64:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8001e68:	4b3e      	ldr	r3, [pc, #248]	@ (8001f64 <HAL_SPI_MspInit+0x160>)
 8001e6a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001e6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e72:	617b      	str	r3, [r7, #20]
 8001e74:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e76:	4b3b      	ldr	r3, [pc, #236]	@ (8001f64 <HAL_SPI_MspInit+0x160>)
 8001e78:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001e7c:	4a39      	ldr	r2, [pc, #228]	@ (8001f64 <HAL_SPI_MspInit+0x160>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001e86:	4b37      	ldr	r3, [pc, #220]	@ (8001f64 <HAL_SPI_MspInit+0x160>)
 8001e88:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	613b      	str	r3, [r7, #16]
 8001e92:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8001e94:	23e0      	movs	r3, #224	@ 0xe0
 8001e96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001eac:	2305      	movs	r3, #5
 8001eae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	482b      	ldr	r0, [pc, #172]	@ (8001f68 <HAL_SPI_MspInit+0x164>)
 8001eba:	f006 fe9b 	bl	8008bf4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001ebe:	e04a      	b.n	8001f56 <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI2)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a29      	ldr	r2, [pc, #164]	@ (8001f6c <HAL_SPI_MspInit+0x168>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d145      	bne.n	8001f56 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001eca:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ece:	f04f 0300 	mov.w	r3, #0
 8001ed2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eda:	f107 0318 	add.w	r3, r7, #24
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f008 f9c0 	bl	800a264 <HAL_RCCEx_PeriphCLKConfig>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8001eea:	f7ff fed9 	bl	8001ca0 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001eee:	4b1d      	ldr	r3, [pc, #116]	@ (8001f64 <HAL_SPI_MspInit+0x160>)
 8001ef0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001ef4:	4a1b      	ldr	r2, [pc, #108]	@ (8001f64 <HAL_SPI_MspInit+0x160>)
 8001ef6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001efa:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001efe:	4b19      	ldr	r3, [pc, #100]	@ (8001f64 <HAL_SPI_MspInit+0x160>)
 8001f00:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001f04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f0c:	4b15      	ldr	r3, [pc, #84]	@ (8001f64 <HAL_SPI_MspInit+0x160>)
 8001f0e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f12:	4a14      	ldr	r2, [pc, #80]	@ (8001f64 <HAL_SPI_MspInit+0x160>)
 8001f14:	f043 0302 	orr.w	r3, r3, #2
 8001f18:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001f1c:	4b11      	ldr	r3, [pc, #68]	@ (8001f64 <HAL_SPI_MspInit+0x160>)
 8001f1e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	60bb      	str	r3, [r7, #8]
 8001f28:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BMP_SCK_Pin|BMP_MISO_Pin|BMP_MOSI_Pin;
 8001f2a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001f2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f32:	2302      	movs	r3, #2
 8001f34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f44:	2305      	movs	r3, #5
 8001f46:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f4a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4807      	ldr	r0, [pc, #28]	@ (8001f70 <HAL_SPI_MspInit+0x16c>)
 8001f52:	f006 fe4f 	bl	8008bf4 <HAL_GPIO_Init>
}
 8001f56:	bf00      	nop
 8001f58:	37f0      	adds	r7, #240	@ 0xf0
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40013000 	.word	0x40013000
 8001f64:	58024400 	.word	0x58024400
 8001f68:	58020000 	.word	0x58020000
 8001f6c:	40003800 	.word	0x40003800
 8001f70:	58020400 	.word	0x58020400

08001f74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001fac <HAL_MspInit+0x38>)
 8001f7c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001f80:	4a0a      	ldr	r2, [pc, #40]	@ (8001fac <HAL_MspInit+0x38>)
 8001f82:	f043 0302 	orr.w	r3, r3, #2
 8001f86:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001f8a:	4b08      	ldr	r3, [pc, #32]	@ (8001fac <HAL_MspInit+0x38>)
 8001f8c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	607b      	str	r3, [r7, #4]
 8001f96:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f98:	2200      	movs	r2, #0
 8001f9a:	210f      	movs	r1, #15
 8001f9c:	f06f 0001 	mvn.w	r0, #1
 8001fa0:	f003 fb3a 	bl	8005618 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fa4:	bf00      	nop
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	58024400 	.word	0x58024400

08001fb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08e      	sub	sp, #56	@ 0x38
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b0f      	cmp	r3, #15
 8001fbc:	d844      	bhi.n	8002048 <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	6879      	ldr	r1, [r7, #4]
 8001fc2:	2076      	movs	r0, #118	@ 0x76
 8001fc4:	f003 fb28 	bl	8005618 <HAL_NVIC_SetPriority>

     /* Enable the TIM17 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001fc8:	2076      	movs	r0, #118	@ 0x76
 8001fca:	f003 fb3f 	bl	800564c <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001fce:	4a24      	ldr	r2, [pc, #144]	@ (8002060 <HAL_InitTick+0xb0>)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001fd4:	4b23      	ldr	r3, [pc, #140]	@ (8002064 <HAL_InitTick+0xb4>)
 8001fd6:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001fda:	4a22      	ldr	r2, [pc, #136]	@ (8002064 <HAL_InitTick+0xb4>)
 8001fdc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fe0:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8001fe4:	4b1f      	ldr	r3, [pc, #124]	@ (8002064 <HAL_InitTick+0xb4>)
 8001fe6:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001fea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fee:	60bb      	str	r3, [r7, #8]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ff2:	f107 020c 	add.w	r2, r7, #12
 8001ff6:	f107 0310 	add.w	r3, r7, #16
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f008 f8ef 	bl	800a1e0 <HAL_RCC_GetClockConfig>
  /* Compute TIM17 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002002:	f008 f8d7 	bl	800a1b4 <HAL_RCC_GetPCLK2Freq>
 8002006:	4603      	mov	r3, r0
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800200c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800200e:	4a16      	ldr	r2, [pc, #88]	@ (8002068 <HAL_InitTick+0xb8>)
 8002010:	fba2 2303 	umull	r2, r3, r2, r3
 8002014:	0c9b      	lsrs	r3, r3, #18
 8002016:	3b01      	subs	r3, #1
 8002018:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 800201a:	4b14      	ldr	r3, [pc, #80]	@ (800206c <HAL_InitTick+0xbc>)
 800201c:	4a14      	ldr	r2, [pc, #80]	@ (8002070 <HAL_InitTick+0xc0>)
 800201e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8002020:	4b12      	ldr	r3, [pc, #72]	@ (800206c <HAL_InitTick+0xbc>)
 8002022:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002026:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8002028:	4a10      	ldr	r2, [pc, #64]	@ (800206c <HAL_InitTick+0xbc>)
 800202a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800202c:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 800202e:	4b0f      	ldr	r3, [pc, #60]	@ (800206c <HAL_InitTick+0xbc>)
 8002030:	2200      	movs	r2, #0
 8002032:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002034:	4b0d      	ldr	r3, [pc, #52]	@ (800206c <HAL_InitTick+0xbc>)
 8002036:	2200      	movs	r2, #0
 8002038:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 800203a:	480c      	ldr	r0, [pc, #48]	@ (800206c <HAL_InitTick+0xbc>)
 800203c:	f00b f899 	bl	800d172 <HAL_TIM_Base_Init>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d107      	bne.n	8002056 <HAL_InitTick+0xa6>
 8002046:	e001      	b.n	800204c <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e005      	b.n	8002058 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 800204c:	4807      	ldr	r0, [pc, #28]	@ (800206c <HAL_InitTick+0xbc>)
 800204e:	f00b f8e7 	bl	800d220 <HAL_TIM_Base_Start_IT>
 8002052:	4603      	mov	r3, r0
 8002054:	e000      	b.n	8002058 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
}
 8002058:	4618      	mov	r0, r3
 800205a:	3738      	adds	r7, #56	@ 0x38
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	240000a4 	.word	0x240000a4
 8002064:	58024400 	.word	0x58024400
 8002068:	431bde83 	.word	0x431bde83
 800206c:	24000df8 	.word	0x24000df8
 8002070:	40014800 	.word	0x40014800

08002074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002078:	bf00      	nop
 800207a:	e7fd      	b.n	8002078 <NMI_Handler+0x4>

0800207c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002080:	bf00      	nop
 8002082:	e7fd      	b.n	8002080 <HardFault_Handler+0x4>

08002084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002088:	bf00      	nop
 800208a:	e7fd      	b.n	8002088 <MemManage_Handler+0x4>

0800208c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002090:	bf00      	nop
 8002092:	e7fd      	b.n	8002090 <BusFault_Handler+0x4>

08002094 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002098:	bf00      	nop
 800209a:	e7fd      	b.n	8002098 <UsageFault_Handler+0x4>

0800209c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
	...

080020ac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80020b0:	4802      	ldr	r0, [pc, #8]	@ (80020bc <DMA1_Stream0_IRQHandler+0x10>)
 80020b2:	f004 fead 	bl	8006e10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	24001240 	.word	0x24001240

080020c0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80020c4:	4802      	ldr	r0, [pc, #8]	@ (80020d0 <DMA1_Stream1_IRQHandler+0x10>)
 80020c6:	f004 fea3 	bl	8006e10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	240012b8 	.word	0x240012b8

080020d4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80020d8:	4802      	ldr	r0, [pc, #8]	@ (80020e4 <DMA1_Stream2_IRQHandler+0x10>)
 80020da:	f004 fe99 	bl	8006e10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	240011c8 	.word	0x240011c8

080020e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020ec:	4802      	ldr	r0, [pc, #8]	@ (80020f8 <USART1_IRQHandler+0x10>)
 80020ee:	f00c fce3 	bl	800eab8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	2400100c 	.word	0x2400100c

080020fc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002100:	4802      	ldr	r0, [pc, #8]	@ (800210c <USART3_IRQHandler+0x10>)
 8002102:	f00c fcd9 	bl	800eab8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	240010a0 	.word	0x240010a0

08002110 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	user_UART_IDLE_IT_handler();
 8002114:	f7ff fc5a 	bl	80019cc <user_UART_IDLE_IT_handler>
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002118:	4802      	ldr	r0, [pc, #8]	@ (8002124 <UART4_IRQHandler+0x14>)
 800211a:	f00c fccd 	bl	800eab8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	24000f78 	.word	0x24000f78

08002128 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800212c:	4802      	ldr	r0, [pc, #8]	@ (8002138 <USART6_IRQHandler+0x10>)
 800212e:	f00c fcc3 	bl	800eab8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	24001134 	.word	0x24001134

0800213c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002140:	4802      	ldr	r0, [pc, #8]	@ (800214c <TIM17_IRQHandler+0x10>)
 8002142:	f00b fa4b 	bl	800d5dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	24000df8 	.word	0x24000df8

08002150 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  return 1;
 8002154:	2301      	movs	r3, #1
}
 8002156:	4618      	mov	r0, r3
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <_kill>:

int _kill(int pid, int sig)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800216a:	f014 fbd9 	bl	8016920 <__errno>
 800216e:	4603      	mov	r3, r0
 8002170:	2216      	movs	r2, #22
 8002172:	601a      	str	r2, [r3, #0]
  return -1;
 8002174:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002178:	4618      	mov	r0, r3
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <_exit>:

void _exit (int status)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002188:	f04f 31ff 	mov.w	r1, #4294967295
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff ffe7 	bl	8002160 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002192:	bf00      	nop
 8002194:	e7fd      	b.n	8002192 <_exit+0x12>

08002196 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b086      	sub	sp, #24
 800219a:	af00      	add	r7, sp, #0
 800219c:	60f8      	str	r0, [r7, #12]
 800219e:	60b9      	str	r1, [r7, #8]
 80021a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a2:	2300      	movs	r3, #0
 80021a4:	617b      	str	r3, [r7, #20]
 80021a6:	e00a      	b.n	80021be <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021a8:	f3af 8000 	nop.w
 80021ac:	4601      	mov	r1, r0
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	1c5a      	adds	r2, r3, #1
 80021b2:	60ba      	str	r2, [r7, #8]
 80021b4:	b2ca      	uxtb	r2, r1
 80021b6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	3301      	adds	r3, #1
 80021bc:	617b      	str	r3, [r7, #20]
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	dbf0      	blt.n	80021a8 <_read+0x12>
  }

  return len;
 80021c6:	687b      	ldr	r3, [r7, #4]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]
 80021e0:	e009      	b.n	80021f6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	1c5a      	adds	r2, r3, #1
 80021e6:	60ba      	str	r2, [r7, #8]
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	3301      	adds	r3, #1
 80021f4:	617b      	str	r3, [r7, #20]
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	dbf1      	blt.n	80021e2 <_write+0x12>
  }
  return len;
 80021fe:	687b      	ldr	r3, [r7, #4]
}
 8002200:	4618      	mov	r0, r3
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <_close>:

int _close(int file)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002210:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002214:	4618      	mov	r0, r3
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002230:	605a      	str	r2, [r3, #4]
  return 0;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <_isatty>:

int _isatty(int file)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002248:	2301      	movs	r3, #1
}
 800224a:	4618      	mov	r0, r3
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002256:	b480      	push	{r7}
 8002258:	b085      	sub	sp, #20
 800225a:	af00      	add	r7, sp, #0
 800225c:	60f8      	str	r0, [r7, #12]
 800225e:	60b9      	str	r1, [r7, #8]
 8002260:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002278:	4a14      	ldr	r2, [pc, #80]	@ (80022cc <_sbrk+0x5c>)
 800227a:	4b15      	ldr	r3, [pc, #84]	@ (80022d0 <_sbrk+0x60>)
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002284:	4b13      	ldr	r3, [pc, #76]	@ (80022d4 <_sbrk+0x64>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d102      	bne.n	8002292 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800228c:	4b11      	ldr	r3, [pc, #68]	@ (80022d4 <_sbrk+0x64>)
 800228e:	4a12      	ldr	r2, [pc, #72]	@ (80022d8 <_sbrk+0x68>)
 8002290:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002292:	4b10      	ldr	r3, [pc, #64]	@ (80022d4 <_sbrk+0x64>)
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4413      	add	r3, r2
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	429a      	cmp	r2, r3
 800229e:	d207      	bcs.n	80022b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022a0:	f014 fb3e 	bl	8016920 <__errno>
 80022a4:	4603      	mov	r3, r0
 80022a6:	220c      	movs	r2, #12
 80022a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022aa:	f04f 33ff 	mov.w	r3, #4294967295
 80022ae:	e009      	b.n	80022c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022b0:	4b08      	ldr	r3, [pc, #32]	@ (80022d4 <_sbrk+0x64>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022b6:	4b07      	ldr	r3, [pc, #28]	@ (80022d4 <_sbrk+0x64>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4413      	add	r3, r2
 80022be:	4a05      	ldr	r2, [pc, #20]	@ (80022d4 <_sbrk+0x64>)
 80022c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022c2:	68fb      	ldr	r3, [r7, #12]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3718      	adds	r7, #24
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	24100000 	.word	0x24100000
 80022d0:	00000400 	.word	0x00000400
 80022d4:	24000e44 	.word	0x24000e44
 80022d8:	24006768 	.word	0x24006768

080022dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80022e0:	4b32      	ldr	r3, [pc, #200]	@ (80023ac <SystemInit+0xd0>)
 80022e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e6:	4a31      	ldr	r2, [pc, #196]	@ (80023ac <SystemInit+0xd0>)
 80022e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80022f0:	4b2f      	ldr	r3, [pc, #188]	@ (80023b0 <SystemInit+0xd4>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 030f 	and.w	r3, r3, #15
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d807      	bhi.n	800230c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80022fc:	4b2c      	ldr	r3, [pc, #176]	@ (80023b0 <SystemInit+0xd4>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f023 030f 	bic.w	r3, r3, #15
 8002304:	4a2a      	ldr	r2, [pc, #168]	@ (80023b0 <SystemInit+0xd4>)
 8002306:	f043 0303 	orr.w	r3, r3, #3
 800230a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800230c:	4b29      	ldr	r3, [pc, #164]	@ (80023b4 <SystemInit+0xd8>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a28      	ldr	r2, [pc, #160]	@ (80023b4 <SystemInit+0xd8>)
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002318:	4b26      	ldr	r3, [pc, #152]	@ (80023b4 <SystemInit+0xd8>)
 800231a:	2200      	movs	r2, #0
 800231c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800231e:	4b25      	ldr	r3, [pc, #148]	@ (80023b4 <SystemInit+0xd8>)
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	4924      	ldr	r1, [pc, #144]	@ (80023b4 <SystemInit+0xd8>)
 8002324:	4b24      	ldr	r3, [pc, #144]	@ (80023b8 <SystemInit+0xdc>)
 8002326:	4013      	ands	r3, r2
 8002328:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800232a:	4b21      	ldr	r3, [pc, #132]	@ (80023b0 <SystemInit+0xd4>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 030c 	and.w	r3, r3, #12
 8002332:	2b00      	cmp	r3, #0
 8002334:	d007      	beq.n	8002346 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002336:	4b1e      	ldr	r3, [pc, #120]	@ (80023b0 <SystemInit+0xd4>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f023 030f 	bic.w	r3, r3, #15
 800233e:	4a1c      	ldr	r2, [pc, #112]	@ (80023b0 <SystemInit+0xd4>)
 8002340:	f043 0303 	orr.w	r3, r3, #3
 8002344:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8002346:	4b1b      	ldr	r3, [pc, #108]	@ (80023b4 <SystemInit+0xd8>)
 8002348:	2200      	movs	r2, #0
 800234a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800234c:	4b19      	ldr	r3, [pc, #100]	@ (80023b4 <SystemInit+0xd8>)
 800234e:	2200      	movs	r2, #0
 8002350:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8002352:	4b18      	ldr	r3, [pc, #96]	@ (80023b4 <SystemInit+0xd8>)
 8002354:	2200      	movs	r2, #0
 8002356:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002358:	4b16      	ldr	r3, [pc, #88]	@ (80023b4 <SystemInit+0xd8>)
 800235a:	4a18      	ldr	r2, [pc, #96]	@ (80023bc <SystemInit+0xe0>)
 800235c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800235e:	4b15      	ldr	r3, [pc, #84]	@ (80023b4 <SystemInit+0xd8>)
 8002360:	4a17      	ldr	r2, [pc, #92]	@ (80023c0 <SystemInit+0xe4>)
 8002362:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002364:	4b13      	ldr	r3, [pc, #76]	@ (80023b4 <SystemInit+0xd8>)
 8002366:	4a17      	ldr	r2, [pc, #92]	@ (80023c4 <SystemInit+0xe8>)
 8002368:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800236a:	4b12      	ldr	r3, [pc, #72]	@ (80023b4 <SystemInit+0xd8>)
 800236c:	2200      	movs	r2, #0
 800236e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002370:	4b10      	ldr	r3, [pc, #64]	@ (80023b4 <SystemInit+0xd8>)
 8002372:	4a14      	ldr	r2, [pc, #80]	@ (80023c4 <SystemInit+0xe8>)
 8002374:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002376:	4b0f      	ldr	r3, [pc, #60]	@ (80023b4 <SystemInit+0xd8>)
 8002378:	2200      	movs	r2, #0
 800237a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800237c:	4b0d      	ldr	r3, [pc, #52]	@ (80023b4 <SystemInit+0xd8>)
 800237e:	4a11      	ldr	r2, [pc, #68]	@ (80023c4 <SystemInit+0xe8>)
 8002380:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002382:	4b0c      	ldr	r3, [pc, #48]	@ (80023b4 <SystemInit+0xd8>)
 8002384:	2200      	movs	r2, #0
 8002386:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002388:	4b0a      	ldr	r3, [pc, #40]	@ (80023b4 <SystemInit+0xd8>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a09      	ldr	r2, [pc, #36]	@ (80023b4 <SystemInit+0xd8>)
 800238e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002392:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002394:	4b07      	ldr	r3, [pc, #28]	@ (80023b4 <SystemInit+0xd8>)
 8002396:	2200      	movs	r2, #0
 8002398:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800239a:	4b0b      	ldr	r3, [pc, #44]	@ (80023c8 <SystemInit+0xec>)
 800239c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80023a0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80023a2:	bf00      	nop
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	e000ed00 	.word	0xe000ed00
 80023b0:	52002000 	.word	0x52002000
 80023b4:	58024400 	.word	0x58024400
 80023b8:	eaf6ed7f 	.word	0xeaf6ed7f
 80023bc:	02020200 	.word	0x02020200
 80023c0:	01ff0000 	.word	0x01ff0000
 80023c4:	01010280 	.word	0x01010280
 80023c8:	52004000 	.word	0x52004000

080023cc <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08a      	sub	sp, #40	@ 0x28
 80023d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023d2:	f107 031c 	add.w	r3, r7, #28
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	605a      	str	r2, [r3, #4]
 80023dc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023de:	463b      	mov	r3, r7
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	60da      	str	r2, [r3, #12]
 80023ea:	611a      	str	r2, [r3, #16]
 80023ec:	615a      	str	r2, [r3, #20]
 80023ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023f0:	4b33      	ldr	r3, [pc, #204]	@ (80024c0 <MX_TIM2_Init+0xf4>)
 80023f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80023f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 280-1;
 80023f8:	4b31      	ldr	r3, [pc, #196]	@ (80024c0 <MX_TIM2_Init+0xf4>)
 80023fa:	f240 1217 	movw	r2, #279	@ 0x117
 80023fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002400:	4b2f      	ldr	r3, [pc, #188]	@ (80024c0 <MX_TIM2_Init+0xf4>)
 8002402:	2200      	movs	r2, #0
 8002404:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7000;
 8002406:	4b2e      	ldr	r3, [pc, #184]	@ (80024c0 <MX_TIM2_Init+0xf4>)
 8002408:	f641 3258 	movw	r2, #7000	@ 0x1b58
 800240c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800240e:	4b2c      	ldr	r3, [pc, #176]	@ (80024c0 <MX_TIM2_Init+0xf4>)
 8002410:	2200      	movs	r2, #0
 8002412:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002414:	4b2a      	ldr	r3, [pc, #168]	@ (80024c0 <MX_TIM2_Init+0xf4>)
 8002416:	2280      	movs	r2, #128	@ 0x80
 8002418:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800241a:	4829      	ldr	r0, [pc, #164]	@ (80024c0 <MX_TIM2_Init+0xf4>)
 800241c:	f00a ff78 	bl	800d310 <HAL_TIM_PWM_Init>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8002426:	f7ff fc3b 	bl	8001ca0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800242a:	2300      	movs	r3, #0
 800242c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800242e:	2300      	movs	r3, #0
 8002430:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002432:	f107 031c 	add.w	r3, r7, #28
 8002436:	4619      	mov	r1, r3
 8002438:	4821      	ldr	r0, [pc, #132]	@ (80024c0 <MX_TIM2_Init+0xf4>)
 800243a:	f00b feb5 	bl	800e1a8 <HAL_TIMEx_MasterConfigSynchronization>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8002444:	f7ff fc2c 	bl	8001ca0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002448:	2360      	movs	r3, #96	@ 0x60
 800244a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800244c:	2300      	movs	r3, #0
 800244e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002450:	2300      	movs	r3, #0
 8002452:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002454:	2300      	movs	r3, #0
 8002456:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002458:	463b      	mov	r3, r7
 800245a:	2200      	movs	r2, #0
 800245c:	4619      	mov	r1, r3
 800245e:	4818      	ldr	r0, [pc, #96]	@ (80024c0 <MX_TIM2_Init+0xf4>)
 8002460:	f00b f9c4 	bl	800d7ec <HAL_TIM_PWM_ConfigChannel>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800246a:	f7ff fc19 	bl	8001ca0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800246e:	463b      	mov	r3, r7
 8002470:	2204      	movs	r2, #4
 8002472:	4619      	mov	r1, r3
 8002474:	4812      	ldr	r0, [pc, #72]	@ (80024c0 <MX_TIM2_Init+0xf4>)
 8002476:	f00b f9b9 	bl	800d7ec <HAL_TIM_PWM_ConfigChannel>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8002480:	f7ff fc0e 	bl	8001ca0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002484:	463b      	mov	r3, r7
 8002486:	2208      	movs	r2, #8
 8002488:	4619      	mov	r1, r3
 800248a:	480d      	ldr	r0, [pc, #52]	@ (80024c0 <MX_TIM2_Init+0xf4>)
 800248c:	f00b f9ae 	bl	800d7ec <HAL_TIM_PWM_ConfigChannel>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 8002496:	f7ff fc03 	bl	8001ca0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800249a:	463b      	mov	r3, r7
 800249c:	220c      	movs	r2, #12
 800249e:	4619      	mov	r1, r3
 80024a0:	4807      	ldr	r0, [pc, #28]	@ (80024c0 <MX_TIM2_Init+0xf4>)
 80024a2:	f00b f9a3 	bl	800d7ec <HAL_TIM_PWM_ConfigChannel>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 80024ac:	f7ff fbf8 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80024b0:	4803      	ldr	r0, [pc, #12]	@ (80024c0 <MX_TIM2_Init+0xf4>)
 80024b2:	f000 f97d 	bl	80027b0 <HAL_TIM_MspPostInit>

}
 80024b6:	bf00      	nop
 80024b8:	3728      	adds	r7, #40	@ 0x28
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	24000e48 	.word	0x24000e48

080024c4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08a      	sub	sp, #40	@ 0x28
 80024c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024ca:	f107 031c 	add.w	r3, r7, #28
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	605a      	str	r2, [r3, #4]
 80024d4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024d6:	463b      	mov	r3, r7
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	605a      	str	r2, [r3, #4]
 80024de:	609a      	str	r2, [r3, #8]
 80024e0:	60da      	str	r2, [r3, #12]
 80024e2:	611a      	str	r2, [r3, #16]
 80024e4:	615a      	str	r2, [r3, #20]
 80024e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024e8:	4b27      	ldr	r3, [pc, #156]	@ (8002588 <MX_TIM3_Init+0xc4>)
 80024ea:	4a28      	ldr	r2, [pc, #160]	@ (800258c <MX_TIM3_Init+0xc8>)
 80024ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 280-1;
 80024ee:	4b26      	ldr	r3, [pc, #152]	@ (8002588 <MX_TIM3_Init+0xc4>)
 80024f0:	f240 1217 	movw	r2, #279	@ 0x117
 80024f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024f6:	4b24      	ldr	r3, [pc, #144]	@ (8002588 <MX_TIM3_Init+0xc4>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7000;
 80024fc:	4b22      	ldr	r3, [pc, #136]	@ (8002588 <MX_TIM3_Init+0xc4>)
 80024fe:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8002502:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002504:	4b20      	ldr	r3, [pc, #128]	@ (8002588 <MX_TIM3_Init+0xc4>)
 8002506:	2200      	movs	r2, #0
 8002508:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800250a:	4b1f      	ldr	r3, [pc, #124]	@ (8002588 <MX_TIM3_Init+0xc4>)
 800250c:	2280      	movs	r2, #128	@ 0x80
 800250e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002510:	481d      	ldr	r0, [pc, #116]	@ (8002588 <MX_TIM3_Init+0xc4>)
 8002512:	f00a fefd 	bl	800d310 <HAL_TIM_PWM_Init>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 800251c:	f7ff fbc0 	bl	8001ca0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002520:	2300      	movs	r3, #0
 8002522:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002524:	2300      	movs	r3, #0
 8002526:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002528:	f107 031c 	add.w	r3, r7, #28
 800252c:	4619      	mov	r1, r3
 800252e:	4816      	ldr	r0, [pc, #88]	@ (8002588 <MX_TIM3_Init+0xc4>)
 8002530:	f00b fe3a 	bl	800e1a8 <HAL_TIMEx_MasterConfigSynchronization>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800253a:	f7ff fbb1 	bl	8001ca0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800253e:	2360      	movs	r3, #96	@ 0x60
 8002540:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002542:	2300      	movs	r3, #0
 8002544:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002546:	2300      	movs	r3, #0
 8002548:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800254a:	2300      	movs	r3, #0
 800254c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800254e:	463b      	mov	r3, r7
 8002550:	2200      	movs	r2, #0
 8002552:	4619      	mov	r1, r3
 8002554:	480c      	ldr	r0, [pc, #48]	@ (8002588 <MX_TIM3_Init+0xc4>)
 8002556:	f00b f949 	bl	800d7ec <HAL_TIM_PWM_ConfigChannel>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8002560:	f7ff fb9e 	bl	8001ca0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002564:	463b      	mov	r3, r7
 8002566:	2204      	movs	r2, #4
 8002568:	4619      	mov	r1, r3
 800256a:	4807      	ldr	r0, [pc, #28]	@ (8002588 <MX_TIM3_Init+0xc4>)
 800256c:	f00b f93e 	bl	800d7ec <HAL_TIM_PWM_ConfigChannel>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8002576:	f7ff fb93 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800257a:	4803      	ldr	r0, [pc, #12]	@ (8002588 <MX_TIM3_Init+0xc4>)
 800257c:	f000 f918 	bl	80027b0 <HAL_TIM_MspPostInit>

}
 8002580:	bf00      	nop
 8002582:	3728      	adds	r7, #40	@ 0x28
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	24000e94 	.word	0x24000e94
 800258c:	40000400 	.word	0x40000400

08002590 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b08a      	sub	sp, #40	@ 0x28
 8002594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002596:	f107 031c 	add.w	r3, r7, #28
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	605a      	str	r2, [r3, #4]
 80025a0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025a2:	463b      	mov	r3, r7
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	609a      	str	r2, [r3, #8]
 80025ac:	60da      	str	r2, [r3, #12]
 80025ae:	611a      	str	r2, [r3, #16]
 80025b0:	615a      	str	r2, [r3, #20]
 80025b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80025b4:	4b32      	ldr	r3, [pc, #200]	@ (8002680 <MX_TIM4_Init+0xf0>)
 80025b6:	4a33      	ldr	r2, [pc, #204]	@ (8002684 <MX_TIM4_Init+0xf4>)
 80025b8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 280-1;
 80025ba:	4b31      	ldr	r3, [pc, #196]	@ (8002680 <MX_TIM4_Init+0xf0>)
 80025bc:	f240 1217 	movw	r2, #279	@ 0x117
 80025c0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025c2:	4b2f      	ldr	r3, [pc, #188]	@ (8002680 <MX_TIM4_Init+0xf0>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7000;
 80025c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002680 <MX_TIM4_Init+0xf0>)
 80025ca:	f641 3258 	movw	r2, #7000	@ 0x1b58
 80025ce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002680 <MX_TIM4_Init+0xf0>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002680 <MX_TIM4_Init+0xf0>)
 80025d8:	2280      	movs	r2, #128	@ 0x80
 80025da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80025dc:	4828      	ldr	r0, [pc, #160]	@ (8002680 <MX_TIM4_Init+0xf0>)
 80025de:	f00a fe97 	bl	800d310 <HAL_TIM_PWM_Init>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 80025e8:	f7ff fb5a 	bl	8001ca0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025ec:	2300      	movs	r3, #0
 80025ee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025f0:	2300      	movs	r3, #0
 80025f2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80025f4:	f107 031c 	add.w	r3, r7, #28
 80025f8:	4619      	mov	r1, r3
 80025fa:	4821      	ldr	r0, [pc, #132]	@ (8002680 <MX_TIM4_Init+0xf0>)
 80025fc:	f00b fdd4 	bl	800e1a8 <HAL_TIMEx_MasterConfigSynchronization>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8002606:	f7ff fb4b 	bl	8001ca0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800260a:	2360      	movs	r3, #96	@ 0x60
 800260c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800260e:	2300      	movs	r3, #0
 8002610:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002612:	2300      	movs	r3, #0
 8002614:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002616:	2300      	movs	r3, #0
 8002618:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800261a:	463b      	mov	r3, r7
 800261c:	2200      	movs	r2, #0
 800261e:	4619      	mov	r1, r3
 8002620:	4817      	ldr	r0, [pc, #92]	@ (8002680 <MX_TIM4_Init+0xf0>)
 8002622:	f00b f8e3 	bl	800d7ec <HAL_TIM_PWM_ConfigChannel>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 800262c:	f7ff fb38 	bl	8001ca0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002630:	463b      	mov	r3, r7
 8002632:	2204      	movs	r2, #4
 8002634:	4619      	mov	r1, r3
 8002636:	4812      	ldr	r0, [pc, #72]	@ (8002680 <MX_TIM4_Init+0xf0>)
 8002638:	f00b f8d8 	bl	800d7ec <HAL_TIM_PWM_ConfigChannel>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8002642:	f7ff fb2d 	bl	8001ca0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002646:	463b      	mov	r3, r7
 8002648:	2208      	movs	r2, #8
 800264a:	4619      	mov	r1, r3
 800264c:	480c      	ldr	r0, [pc, #48]	@ (8002680 <MX_TIM4_Init+0xf0>)
 800264e:	f00b f8cd 	bl	800d7ec <HAL_TIM_PWM_ConfigChannel>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8002658:	f7ff fb22 	bl	8001ca0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800265c:	463b      	mov	r3, r7
 800265e:	220c      	movs	r2, #12
 8002660:	4619      	mov	r1, r3
 8002662:	4807      	ldr	r0, [pc, #28]	@ (8002680 <MX_TIM4_Init+0xf0>)
 8002664:	f00b f8c2 	bl	800d7ec <HAL_TIM_PWM_ConfigChannel>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 800266e:	f7ff fb17 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002672:	4803      	ldr	r0, [pc, #12]	@ (8002680 <MX_TIM4_Init+0xf0>)
 8002674:	f000 f89c 	bl	80027b0 <HAL_TIM_MspPostInit>

}
 8002678:	bf00      	nop
 800267a:	3728      	adds	r7, #40	@ 0x28
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	24000ee0 	.word	0x24000ee0
 8002684:	40000800 	.word	0x40000800

08002688 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800268c:	4b0e      	ldr	r3, [pc, #56]	@ (80026c8 <MX_TIM13_Init+0x40>)
 800268e:	4a0f      	ldr	r2, [pc, #60]	@ (80026cc <MX_TIM13_Init+0x44>)
 8002690:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 280-1;
 8002692:	4b0d      	ldr	r3, [pc, #52]	@ (80026c8 <MX_TIM13_Init+0x40>)
 8002694:	f240 1217 	movw	r2, #279	@ 0x117
 8002698:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800269a:	4b0b      	ldr	r3, [pc, #44]	@ (80026c8 <MX_TIM13_Init+0x40>)
 800269c:	2200      	movs	r2, #0
 800269e:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 80026a0:	4b09      	ldr	r3, [pc, #36]	@ (80026c8 <MX_TIM13_Init+0x40>)
 80026a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80026a6:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026a8:	4b07      	ldr	r3, [pc, #28]	@ (80026c8 <MX_TIM13_Init+0x40>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80026ae:	4b06      	ldr	r3, [pc, #24]	@ (80026c8 <MX_TIM13_Init+0x40>)
 80026b0:	2280      	movs	r2, #128	@ 0x80
 80026b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80026b4:	4804      	ldr	r0, [pc, #16]	@ (80026c8 <MX_TIM13_Init+0x40>)
 80026b6:	f00a fd5c 	bl	800d172 <HAL_TIM_Base_Init>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 80026c0:	f7ff faee 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80026c4:	bf00      	nop
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	24000f2c 	.word	0x24000f2c
 80026cc:	40001c00 	.word	0x40001c00

080026d0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b087      	sub	sp, #28
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026e0:	d10f      	bne.n	8002702 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026e2:	4b1f      	ldr	r3, [pc, #124]	@ (8002760 <HAL_TIM_PWM_MspInit+0x90>)
 80026e4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80026e8:	4a1d      	ldr	r2, [pc, #116]	@ (8002760 <HAL_TIM_PWM_MspInit+0x90>)
 80026ea:	f043 0301 	orr.w	r3, r3, #1
 80026ee:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80026f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002760 <HAL_TIM_PWM_MspInit+0x90>)
 80026f4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	617b      	str	r3, [r7, #20]
 80026fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002700:	e028      	b.n	8002754 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM3)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a17      	ldr	r2, [pc, #92]	@ (8002764 <HAL_TIM_PWM_MspInit+0x94>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d10f      	bne.n	800272c <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800270c:	4b14      	ldr	r3, [pc, #80]	@ (8002760 <HAL_TIM_PWM_MspInit+0x90>)
 800270e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002712:	4a13      	ldr	r2, [pc, #76]	@ (8002760 <HAL_TIM_PWM_MspInit+0x90>)
 8002714:	f043 0302 	orr.w	r3, r3, #2
 8002718:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800271c:	4b10      	ldr	r3, [pc, #64]	@ (8002760 <HAL_TIM_PWM_MspInit+0x90>)
 800271e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	693b      	ldr	r3, [r7, #16]
}
 800272a:	e013      	b.n	8002754 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM4)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a0d      	ldr	r2, [pc, #52]	@ (8002768 <HAL_TIM_PWM_MspInit+0x98>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d10e      	bne.n	8002754 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002736:	4b0a      	ldr	r3, [pc, #40]	@ (8002760 <HAL_TIM_PWM_MspInit+0x90>)
 8002738:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800273c:	4a08      	ldr	r2, [pc, #32]	@ (8002760 <HAL_TIM_PWM_MspInit+0x90>)
 800273e:	f043 0304 	orr.w	r3, r3, #4
 8002742:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002746:	4b06      	ldr	r3, [pc, #24]	@ (8002760 <HAL_TIM_PWM_MspInit+0x90>)
 8002748:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	68fb      	ldr	r3, [r7, #12]
}
 8002754:	bf00      	nop
 8002756:	371c      	adds	r7, #28
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	58024400 	.word	0x58024400
 8002764:	40000400 	.word	0x40000400
 8002768:	40000800 	.word	0x40000800

0800276c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a0b      	ldr	r2, [pc, #44]	@ (80027a8 <HAL_TIM_Base_MspInit+0x3c>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d10e      	bne.n	800279c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 800277e:	4b0b      	ldr	r3, [pc, #44]	@ (80027ac <HAL_TIM_Base_MspInit+0x40>)
 8002780:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002784:	4a09      	ldr	r2, [pc, #36]	@ (80027ac <HAL_TIM_Base_MspInit+0x40>)
 8002786:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800278a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800278e:	4b07      	ldr	r3, [pc, #28]	@ (80027ac <HAL_TIM_Base_MspInit+0x40>)
 8002790:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002794:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 800279c:	bf00      	nop
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	40001c00 	.word	0x40001c00
 80027ac:	58024400 	.word	0x58024400

080027b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08c      	sub	sp, #48	@ 0x30
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b8:	f107 031c 	add.w	r3, r7, #28
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	609a      	str	r2, [r3, #8]
 80027c4:	60da      	str	r2, [r3, #12]
 80027c6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027d0:	d13f      	bne.n	8002852 <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d2:	4b47      	ldr	r3, [pc, #284]	@ (80028f0 <HAL_TIM_MspPostInit+0x140>)
 80027d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80027d8:	4a45      	ldr	r2, [pc, #276]	@ (80028f0 <HAL_TIM_MspPostInit+0x140>)
 80027da:	f043 0301 	orr.w	r3, r3, #1
 80027de:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80027e2:	4b43      	ldr	r3, [pc, #268]	@ (80028f0 <HAL_TIM_MspPostInit+0x140>)
 80027e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	61bb      	str	r3, [r7, #24]
 80027ee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027f0:	4b3f      	ldr	r3, [pc, #252]	@ (80028f0 <HAL_TIM_MspPostInit+0x140>)
 80027f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80027f6:	4a3e      	ldr	r2, [pc, #248]	@ (80028f0 <HAL_TIM_MspPostInit+0x140>)
 80027f8:	f043 0302 	orr.w	r3, r3, #2
 80027fc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002800:	4b3b      	ldr	r3, [pc, #236]	@ (80028f0 <HAL_TIM_MspPostInit+0x140>)
 8002802:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	617b      	str	r3, [r7, #20]
 800280c:	697b      	ldr	r3, [r7, #20]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 800280e:	f248 030c 	movw	r3, #32780	@ 0x800c
 8002812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002814:	2302      	movs	r3, #2
 8002816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002818:	2300      	movs	r3, #0
 800281a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281c:	2300      	movs	r3, #0
 800281e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002820:	2301      	movs	r3, #1
 8002822:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002824:	f107 031c 	add.w	r3, r7, #28
 8002828:	4619      	mov	r1, r3
 800282a:	4832      	ldr	r0, [pc, #200]	@ (80028f4 <HAL_TIM_MspPostInit+0x144>)
 800282c:	f006 f9e2 	bl	8008bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002830:	2308      	movs	r3, #8
 8002832:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002834:	2302      	movs	r3, #2
 8002836:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002838:	2300      	movs	r3, #0
 800283a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283c:	2300      	movs	r3, #0
 800283e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002840:	2301      	movs	r3, #1
 8002842:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002844:	f107 031c 	add.w	r3, r7, #28
 8002848:	4619      	mov	r1, r3
 800284a:	482b      	ldr	r0, [pc, #172]	@ (80028f8 <HAL_TIM_MspPostInit+0x148>)
 800284c:	f006 f9d2 	bl	8008bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002850:	e049      	b.n	80028e6 <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM3)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a29      	ldr	r2, [pc, #164]	@ (80028fc <HAL_TIM_MspPostInit+0x14c>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d11f      	bne.n	800289c <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800285c:	4b24      	ldr	r3, [pc, #144]	@ (80028f0 <HAL_TIM_MspPostInit+0x140>)
 800285e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002862:	4a23      	ldr	r2, [pc, #140]	@ (80028f0 <HAL_TIM_MspPostInit+0x140>)
 8002864:	f043 0302 	orr.w	r3, r3, #2
 8002868:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800286c:	4b20      	ldr	r3, [pc, #128]	@ (80028f0 <HAL_TIM_MspPostInit+0x140>)
 800286e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	613b      	str	r3, [r7, #16]
 8002878:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800287a:	2330      	movs	r3, #48	@ 0x30
 800287c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287e:	2302      	movs	r3, #2
 8002880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002882:	2300      	movs	r3, #0
 8002884:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002886:	2300      	movs	r3, #0
 8002888:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800288a:	2302      	movs	r3, #2
 800288c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800288e:	f107 031c 	add.w	r3, r7, #28
 8002892:	4619      	mov	r1, r3
 8002894:	4818      	ldr	r0, [pc, #96]	@ (80028f8 <HAL_TIM_MspPostInit+0x148>)
 8002896:	f006 f9ad 	bl	8008bf4 <HAL_GPIO_Init>
}
 800289a:	e024      	b.n	80028e6 <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM4)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a17      	ldr	r2, [pc, #92]	@ (8002900 <HAL_TIM_MspPostInit+0x150>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d11f      	bne.n	80028e6 <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028a6:	4b12      	ldr	r3, [pc, #72]	@ (80028f0 <HAL_TIM_MspPostInit+0x140>)
 80028a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80028ac:	4a10      	ldr	r2, [pc, #64]	@ (80028f0 <HAL_TIM_MspPostInit+0x140>)
 80028ae:	f043 0302 	orr.w	r3, r3, #2
 80028b2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80028b6:	4b0e      	ldr	r3, [pc, #56]	@ (80028f0 <HAL_TIM_MspPostInit+0x140>)
 80028b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80028c4:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80028c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ca:	2302      	movs	r3, #2
 80028cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d2:	2300      	movs	r3, #0
 80028d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80028d6:	2302      	movs	r3, #2
 80028d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028da:	f107 031c 	add.w	r3, r7, #28
 80028de:	4619      	mov	r1, r3
 80028e0:	4805      	ldr	r0, [pc, #20]	@ (80028f8 <HAL_TIM_MspPostInit+0x148>)
 80028e2:	f006 f987 	bl	8008bf4 <HAL_GPIO_Init>
}
 80028e6:	bf00      	nop
 80028e8:	3730      	adds	r7, #48	@ 0x30
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	58024400 	.word	0x58024400
 80028f4:	58020000 	.word	0x58020000
 80028f8:	58020400 	.word	0x58020400
 80028fc:	40000400 	.word	0x40000400
 8002900:	40000800 	.word	0x40000800

08002904 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart3_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002908:	4b22      	ldr	r3, [pc, #136]	@ (8002994 <MX_UART4_Init+0x90>)
 800290a:	4a23      	ldr	r2, [pc, #140]	@ (8002998 <MX_UART4_Init+0x94>)
 800290c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800290e:	4b21      	ldr	r3, [pc, #132]	@ (8002994 <MX_UART4_Init+0x90>)
 8002910:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002914:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002916:	4b1f      	ldr	r3, [pc, #124]	@ (8002994 <MX_UART4_Init+0x90>)
 8002918:	2200      	movs	r2, #0
 800291a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800291c:	4b1d      	ldr	r3, [pc, #116]	@ (8002994 <MX_UART4_Init+0x90>)
 800291e:	2200      	movs	r2, #0
 8002920:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002922:	4b1c      	ldr	r3, [pc, #112]	@ (8002994 <MX_UART4_Init+0x90>)
 8002924:	2200      	movs	r2, #0
 8002926:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002928:	4b1a      	ldr	r3, [pc, #104]	@ (8002994 <MX_UART4_Init+0x90>)
 800292a:	220c      	movs	r2, #12
 800292c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800292e:	4b19      	ldr	r3, [pc, #100]	@ (8002994 <MX_UART4_Init+0x90>)
 8002930:	2200      	movs	r2, #0
 8002932:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002934:	4b17      	ldr	r3, [pc, #92]	@ (8002994 <MX_UART4_Init+0x90>)
 8002936:	2200      	movs	r2, #0
 8002938:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800293a:	4b16      	ldr	r3, [pc, #88]	@ (8002994 <MX_UART4_Init+0x90>)
 800293c:	2200      	movs	r2, #0
 800293e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002940:	4b14      	ldr	r3, [pc, #80]	@ (8002994 <MX_UART4_Init+0x90>)
 8002942:	2200      	movs	r2, #0
 8002944:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002946:	4b13      	ldr	r3, [pc, #76]	@ (8002994 <MX_UART4_Init+0x90>)
 8002948:	2200      	movs	r2, #0
 800294a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800294c:	4811      	ldr	r0, [pc, #68]	@ (8002994 <MX_UART4_Init+0x90>)
 800294e:	f00b fcd7 	bl	800e300 <HAL_UART_Init>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002958:	f7ff f9a2 	bl	8001ca0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800295c:	2100      	movs	r1, #0
 800295e:	480d      	ldr	r0, [pc, #52]	@ (8002994 <MX_UART4_Init+0x90>)
 8002960:	f00e fffd 	bl	801195e <HAL_UARTEx_SetTxFifoThreshold>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800296a:	f7ff f999 	bl	8001ca0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800296e:	2100      	movs	r1, #0
 8002970:	4808      	ldr	r0, [pc, #32]	@ (8002994 <MX_UART4_Init+0x90>)
 8002972:	f00f f832 	bl	80119da <HAL_UARTEx_SetRxFifoThreshold>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800297c:	f7ff f990 	bl	8001ca0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002980:	4804      	ldr	r0, [pc, #16]	@ (8002994 <MX_UART4_Init+0x90>)
 8002982:	f00e ffb3 	bl	80118ec <HAL_UARTEx_DisableFifoMode>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800298c:	f7ff f988 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002990:	bf00      	nop
 8002992:	bd80      	pop	{r7, pc}
 8002994:	24000f78 	.word	0x24000f78
 8002998:	40004c00 	.word	0x40004c00

0800299c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80029a0:	4b23      	ldr	r3, [pc, #140]	@ (8002a30 <MX_USART1_UART_Init+0x94>)
 80029a2:	4a24      	ldr	r2, [pc, #144]	@ (8002a34 <MX_USART1_UART_Init+0x98>)
 80029a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 80029a6:	4b22      	ldr	r3, [pc, #136]	@ (8002a30 <MX_USART1_UART_Init+0x94>)
 80029a8:	4a23      	ldr	r2, [pc, #140]	@ (8002a38 <MX_USART1_UART_Init+0x9c>)
 80029aa:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 80029ac:	4b20      	ldr	r3, [pc, #128]	@ (8002a30 <MX_USART1_UART_Init+0x94>)
 80029ae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80029b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80029b4:	4b1e      	ldr	r3, [pc, #120]	@ (8002a30 <MX_USART1_UART_Init+0x94>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 80029ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002a30 <MX_USART1_UART_Init+0x94>)
 80029bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029c0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80029c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002a30 <MX_USART1_UART_Init+0x94>)
 80029c4:	220c      	movs	r2, #12
 80029c6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029c8:	4b19      	ldr	r3, [pc, #100]	@ (8002a30 <MX_USART1_UART_Init+0x94>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80029ce:	4b18      	ldr	r3, [pc, #96]	@ (8002a30 <MX_USART1_UART_Init+0x94>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029d4:	4b16      	ldr	r3, [pc, #88]	@ (8002a30 <MX_USART1_UART_Init+0x94>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80029da:	4b15      	ldr	r3, [pc, #84]	@ (8002a30 <MX_USART1_UART_Init+0x94>)
 80029dc:	2200      	movs	r2, #0
 80029de:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029e0:	4b13      	ldr	r3, [pc, #76]	@ (8002a30 <MX_USART1_UART_Init+0x94>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029e6:	4812      	ldr	r0, [pc, #72]	@ (8002a30 <MX_USART1_UART_Init+0x94>)
 80029e8:	f00b fc8a 	bl	800e300 <HAL_UART_Init>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80029f2:	f7ff f955 	bl	8001ca0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029f6:	2100      	movs	r1, #0
 80029f8:	480d      	ldr	r0, [pc, #52]	@ (8002a30 <MX_USART1_UART_Init+0x94>)
 80029fa:	f00e ffb0 	bl	801195e <HAL_UARTEx_SetTxFifoThreshold>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002a04:	f7ff f94c 	bl	8001ca0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a08:	2100      	movs	r1, #0
 8002a0a:	4809      	ldr	r0, [pc, #36]	@ (8002a30 <MX_USART1_UART_Init+0x94>)
 8002a0c:	f00e ffe5 	bl	80119da <HAL_UARTEx_SetRxFifoThreshold>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002a16:	f7ff f943 	bl	8001ca0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002a1a:	4805      	ldr	r0, [pc, #20]	@ (8002a30 <MX_USART1_UART_Init+0x94>)
 8002a1c:	f00e ff66 	bl	80118ec <HAL_UARTEx_DisableFifoMode>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8002a26:	f7ff f93b 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a2a:	bf00      	nop
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	2400100c 	.word	0x2400100c
 8002a34:	40011000 	.word	0x40011000
 8002a38:	000186a0 	.word	0x000186a0

08002a3c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002a40:	4b22      	ldr	r3, [pc, #136]	@ (8002acc <MX_USART3_UART_Init+0x90>)
 8002a42:	4a23      	ldr	r2, [pc, #140]	@ (8002ad0 <MX_USART3_UART_Init+0x94>)
 8002a44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002a46:	4b21      	ldr	r3, [pc, #132]	@ (8002acc <MX_USART3_UART_Init+0x90>)
 8002a48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002a4e:	4b1f      	ldr	r3, [pc, #124]	@ (8002acc <MX_USART3_UART_Init+0x90>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002a54:	4b1d      	ldr	r3, [pc, #116]	@ (8002acc <MX_USART3_UART_Init+0x90>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002a5a:	4b1c      	ldr	r3, [pc, #112]	@ (8002acc <MX_USART3_UART_Init+0x90>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002a60:	4b1a      	ldr	r3, [pc, #104]	@ (8002acc <MX_USART3_UART_Init+0x90>)
 8002a62:	220c      	movs	r2, #12
 8002a64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a66:	4b19      	ldr	r3, [pc, #100]	@ (8002acc <MX_USART3_UART_Init+0x90>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a6c:	4b17      	ldr	r3, [pc, #92]	@ (8002acc <MX_USART3_UART_Init+0x90>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a72:	4b16      	ldr	r3, [pc, #88]	@ (8002acc <MX_USART3_UART_Init+0x90>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a78:	4b14      	ldr	r3, [pc, #80]	@ (8002acc <MX_USART3_UART_Init+0x90>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a7e:	4b13      	ldr	r3, [pc, #76]	@ (8002acc <MX_USART3_UART_Init+0x90>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002a84:	4811      	ldr	r0, [pc, #68]	@ (8002acc <MX_USART3_UART_Init+0x90>)
 8002a86:	f00b fc3b 	bl	800e300 <HAL_UART_Init>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002a90:	f7ff f906 	bl	8001ca0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a94:	2100      	movs	r1, #0
 8002a96:	480d      	ldr	r0, [pc, #52]	@ (8002acc <MX_USART3_UART_Init+0x90>)
 8002a98:	f00e ff61 	bl	801195e <HAL_UARTEx_SetTxFifoThreshold>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002aa2:	f7ff f8fd 	bl	8001ca0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	4808      	ldr	r0, [pc, #32]	@ (8002acc <MX_USART3_UART_Init+0x90>)
 8002aaa:	f00e ff96 	bl	80119da <HAL_UARTEx_SetRxFifoThreshold>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002ab4:	f7ff f8f4 	bl	8001ca0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002ab8:	4804      	ldr	r0, [pc, #16]	@ (8002acc <MX_USART3_UART_Init+0x90>)
 8002aba:	f00e ff17 	bl	80118ec <HAL_UARTEx_DisableFifoMode>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002ac4:	f7ff f8ec 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002ac8:	bf00      	nop
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	240010a0 	.word	0x240010a0
 8002ad0:	40004800 	.word	0x40004800

08002ad4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002ad8:	4b22      	ldr	r3, [pc, #136]	@ (8002b64 <MX_USART6_UART_Init+0x90>)
 8002ada:	4a23      	ldr	r2, [pc, #140]	@ (8002b68 <MX_USART6_UART_Init+0x94>)
 8002adc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002ade:	4b21      	ldr	r3, [pc, #132]	@ (8002b64 <MX_USART6_UART_Init+0x90>)
 8002ae0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ae4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002ae6:	4b1f      	ldr	r3, [pc, #124]	@ (8002b64 <MX_USART6_UART_Init+0x90>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002aec:	4b1d      	ldr	r3, [pc, #116]	@ (8002b64 <MX_USART6_UART_Init+0x90>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002af2:	4b1c      	ldr	r3, [pc, #112]	@ (8002b64 <MX_USART6_UART_Init+0x90>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002af8:	4b1a      	ldr	r3, [pc, #104]	@ (8002b64 <MX_USART6_UART_Init+0x90>)
 8002afa:	220c      	movs	r2, #12
 8002afc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002afe:	4b19      	ldr	r3, [pc, #100]	@ (8002b64 <MX_USART6_UART_Init+0x90>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b04:	4b17      	ldr	r3, [pc, #92]	@ (8002b64 <MX_USART6_UART_Init+0x90>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b0a:	4b16      	ldr	r3, [pc, #88]	@ (8002b64 <MX_USART6_UART_Init+0x90>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b10:	4b14      	ldr	r3, [pc, #80]	@ (8002b64 <MX_USART6_UART_Init+0x90>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b16:	4b13      	ldr	r3, [pc, #76]	@ (8002b64 <MX_USART6_UART_Init+0x90>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002b1c:	4811      	ldr	r0, [pc, #68]	@ (8002b64 <MX_USART6_UART_Init+0x90>)
 8002b1e:	f00b fbef 	bl	800e300 <HAL_UART_Init>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8002b28:	f7ff f8ba 	bl	8001ca0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	480d      	ldr	r0, [pc, #52]	@ (8002b64 <MX_USART6_UART_Init+0x90>)
 8002b30:	f00e ff15 	bl	801195e <HAL_UARTEx_SetTxFifoThreshold>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8002b3a:	f7ff f8b1 	bl	8001ca0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b3e:	2100      	movs	r1, #0
 8002b40:	4808      	ldr	r0, [pc, #32]	@ (8002b64 <MX_USART6_UART_Init+0x90>)
 8002b42:	f00e ff4a 	bl	80119da <HAL_UARTEx_SetRxFifoThreshold>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8002b4c:	f7ff f8a8 	bl	8001ca0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8002b50:	4804      	ldr	r0, [pc, #16]	@ (8002b64 <MX_USART6_UART_Init+0x90>)
 8002b52:	f00e fecb 	bl	80118ec <HAL_UARTEx_DisableFifoMode>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8002b5c:	f7ff f8a0 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002b60:	bf00      	nop
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	24001134 	.word	0x24001134
 8002b68:	40011400 	.word	0x40011400

08002b6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b0c0      	sub	sp, #256	@ 0x100
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b74:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	605a      	str	r2, [r3, #4]
 8002b7e:	609a      	str	r2, [r3, #8]
 8002b80:	60da      	str	r2, [r3, #12]
 8002b82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b84:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002b88:	22c0      	movs	r2, #192	@ 0xc0
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f013 fe5a 	bl	8016846 <memset>
  if(uartHandle->Instance==UART4)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a82      	ldr	r2, [pc, #520]	@ (8002da0 <HAL_UART_MspInit+0x234>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d17c      	bne.n	8002c96 <HAL_UART_MspInit+0x12a>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002b9c:	f04f 0202 	mov.w	r2, #2
 8002ba0:	f04f 0300 	mov.w	r3, #0
 8002ba4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f007 fb56 	bl	800a264 <HAL_RCCEx_PeriphCLKConfig>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002bbe:	f7ff f86f 	bl	8001ca0 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002bc2:	4b78      	ldr	r3, [pc, #480]	@ (8002da4 <HAL_UART_MspInit+0x238>)
 8002bc4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002bc8:	4a76      	ldr	r2, [pc, #472]	@ (8002da4 <HAL_UART_MspInit+0x238>)
 8002bca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002bce:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002bd2:	4b74      	ldr	r3, [pc, #464]	@ (8002da4 <HAL_UART_MspInit+0x238>)
 8002bd4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002bd8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be0:	4b70      	ldr	r3, [pc, #448]	@ (8002da4 <HAL_UART_MspInit+0x238>)
 8002be2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002be6:	4a6f      	ldr	r2, [pc, #444]	@ (8002da4 <HAL_UART_MspInit+0x238>)
 8002be8:	f043 0301 	orr.w	r3, r3, #1
 8002bec:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002bf0:	4b6c      	ldr	r3, [pc, #432]	@ (8002da4 <HAL_UART_MspInit+0x238>)
 8002bf2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	623b      	str	r3, [r7, #32]
 8002bfc:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c04:	2302      	movs	r3, #2
 8002c06:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c10:	2300      	movs	r3, #0
 8002c12:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002c16:	2308      	movs	r3, #8
 8002c18:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c1c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002c20:	4619      	mov	r1, r3
 8002c22:	4861      	ldr	r0, [pc, #388]	@ (8002da8 <HAL_UART_MspInit+0x23c>)
 8002c24:	f005 ffe6 	bl	8008bf4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8002c28:	4b60      	ldr	r3, [pc, #384]	@ (8002dac <HAL_UART_MspInit+0x240>)
 8002c2a:	4a61      	ldr	r2, [pc, #388]	@ (8002db0 <HAL_UART_MspInit+0x244>)
 8002c2c:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8002c2e:	4b5f      	ldr	r3, [pc, #380]	@ (8002dac <HAL_UART_MspInit+0x240>)
 8002c30:	223f      	movs	r2, #63	@ 0x3f
 8002c32:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c34:	4b5d      	ldr	r3, [pc, #372]	@ (8002dac <HAL_UART_MspInit+0x240>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c3a:	4b5c      	ldr	r3, [pc, #368]	@ (8002dac <HAL_UART_MspInit+0x240>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c40:	4b5a      	ldr	r3, [pc, #360]	@ (8002dac <HAL_UART_MspInit+0x240>)
 8002c42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c46:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c48:	4b58      	ldr	r3, [pc, #352]	@ (8002dac <HAL_UART_MspInit+0x240>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c4e:	4b57      	ldr	r3, [pc, #348]	@ (8002dac <HAL_UART_MspInit+0x240>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8002c54:	4b55      	ldr	r3, [pc, #340]	@ (8002dac <HAL_UART_MspInit+0x240>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c5a:	4b54      	ldr	r3, [pc, #336]	@ (8002dac <HAL_UART_MspInit+0x240>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c60:	4b52      	ldr	r3, [pc, #328]	@ (8002dac <HAL_UART_MspInit+0x240>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002c66:	4851      	ldr	r0, [pc, #324]	@ (8002dac <HAL_UART_MspInit+0x240>)
 8002c68:	f002 fd76 	bl	8005758 <HAL_DMA_Init>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8002c72:	f7ff f815 	bl	8001ca0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a4c      	ldr	r2, [pc, #304]	@ (8002dac <HAL_UART_MspInit+0x240>)
 8002c7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002c7e:	4a4b      	ldr	r2, [pc, #300]	@ (8002dac <HAL_UART_MspInit+0x240>)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002c84:	2200      	movs	r2, #0
 8002c86:	2105      	movs	r1, #5
 8002c88:	2034      	movs	r0, #52	@ 0x34
 8002c8a:	f002 fcc5 	bl	8005618 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002c8e:	2034      	movs	r0, #52	@ 0x34
 8002c90:	f002 fcdc 	bl	800564c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002c94:	e16a      	b.n	8002f6c <HAL_UART_MspInit+0x400>
  else if(uartHandle->Instance==USART1)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a46      	ldr	r2, [pc, #280]	@ (8002db4 <HAL_UART_MspInit+0x248>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	f040 808f 	bne.w	8002dc0 <HAL_UART_MspInit+0x254>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002ca2:	f04f 0201 	mov.w	r2, #1
 8002ca6:	f04f 0300 	mov.w	r3, #0
 8002caa:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cb4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f007 fad3 	bl	800a264 <HAL_RCCEx_PeriphCLKConfig>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <HAL_UART_MspInit+0x15c>
      Error_Handler();
 8002cc4:	f7fe ffec 	bl	8001ca0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cc8:	4b36      	ldr	r3, [pc, #216]	@ (8002da4 <HAL_UART_MspInit+0x238>)
 8002cca:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002cce:	4a35      	ldr	r2, [pc, #212]	@ (8002da4 <HAL_UART_MspInit+0x238>)
 8002cd0:	f043 0310 	orr.w	r3, r3, #16
 8002cd4:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8002cd8:	4b32      	ldr	r3, [pc, #200]	@ (8002da4 <HAL_UART_MspInit+0x238>)
 8002cda:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002cde:	f003 0310 	and.w	r3, r3, #16
 8002ce2:	61fb      	str	r3, [r7, #28]
 8002ce4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ce6:	4b2f      	ldr	r3, [pc, #188]	@ (8002da4 <HAL_UART_MspInit+0x238>)
 8002ce8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002cec:	4a2d      	ldr	r2, [pc, #180]	@ (8002da4 <HAL_UART_MspInit+0x238>)
 8002cee:	f043 0301 	orr.w	r3, r3, #1
 8002cf2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002cf6:	4b2b      	ldr	r3, [pc, #172]	@ (8002da4 <HAL_UART_MspInit+0x238>)
 8002cf8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	61bb      	str	r3, [r7, #24]
 8002d02:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|SBUS_RX_Pin;
 8002d04:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002d08:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d12:	2300      	movs	r3, #0
 8002d14:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d1e:	2307      	movs	r3, #7
 8002d20:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d24:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002d28:	4619      	mov	r1, r3
 8002d2a:	481f      	ldr	r0, [pc, #124]	@ (8002da8 <HAL_UART_MspInit+0x23c>)
 8002d2c:	f005 ff62 	bl	8008bf4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8002d30:	4b21      	ldr	r3, [pc, #132]	@ (8002db8 <HAL_UART_MspInit+0x24c>)
 8002d32:	4a22      	ldr	r2, [pc, #136]	@ (8002dbc <HAL_UART_MspInit+0x250>)
 8002d34:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002d36:	4b20      	ldr	r3, [pc, #128]	@ (8002db8 <HAL_UART_MspInit+0x24c>)
 8002d38:	2229      	movs	r2, #41	@ 0x29
 8002d3a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d3c:	4b1e      	ldr	r3, [pc, #120]	@ (8002db8 <HAL_UART_MspInit+0x24c>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d42:	4b1d      	ldr	r3, [pc, #116]	@ (8002db8 <HAL_UART_MspInit+0x24c>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d48:	4b1b      	ldr	r3, [pc, #108]	@ (8002db8 <HAL_UART_MspInit+0x24c>)
 8002d4a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d4e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d50:	4b19      	ldr	r3, [pc, #100]	@ (8002db8 <HAL_UART_MspInit+0x24c>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d56:	4b18      	ldr	r3, [pc, #96]	@ (8002db8 <HAL_UART_MspInit+0x24c>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002d5c:	4b16      	ldr	r3, [pc, #88]	@ (8002db8 <HAL_UART_MspInit+0x24c>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002d62:	4b15      	ldr	r3, [pc, #84]	@ (8002db8 <HAL_UART_MspInit+0x24c>)
 8002d64:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002d68:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d6a:	4b13      	ldr	r3, [pc, #76]	@ (8002db8 <HAL_UART_MspInit+0x24c>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002d70:	4811      	ldr	r0, [pc, #68]	@ (8002db8 <HAL_UART_MspInit+0x24c>)
 8002d72:	f002 fcf1 	bl	8005758 <HAL_DMA_Init>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <HAL_UART_MspInit+0x214>
      Error_Handler();
 8002d7c:	f7fe ff90 	bl	8001ca0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a0d      	ldr	r2, [pc, #52]	@ (8002db8 <HAL_UART_MspInit+0x24c>)
 8002d84:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002d88:	4a0b      	ldr	r2, [pc, #44]	@ (8002db8 <HAL_UART_MspInit+0x24c>)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002d8e:	2200      	movs	r2, #0
 8002d90:	2105      	movs	r1, #5
 8002d92:	2025      	movs	r0, #37	@ 0x25
 8002d94:	f002 fc40 	bl	8005618 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d98:	2025      	movs	r0, #37	@ 0x25
 8002d9a:	f002 fc57 	bl	800564c <HAL_NVIC_EnableIRQ>
}
 8002d9e:	e0e5      	b.n	8002f6c <HAL_UART_MspInit+0x400>
 8002da0:	40004c00 	.word	0x40004c00
 8002da4:	58024400 	.word	0x58024400
 8002da8:	58020000 	.word	0x58020000
 8002dac:	240011c8 	.word	0x240011c8
 8002db0:	40020040 	.word	0x40020040
 8002db4:	40011000 	.word	0x40011000
 8002db8:	24001240 	.word	0x24001240
 8002dbc:	40020010 	.word	0x40020010
  else if(uartHandle->Instance==USART3)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a6c      	ldr	r2, [pc, #432]	@ (8002f78 <HAL_UART_MspInit+0x40c>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d17d      	bne.n	8002ec6 <HAL_UART_MspInit+0x35a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002dca:	f04f 0202 	mov.w	r2, #2
 8002dce:	f04f 0300 	mov.w	r3, #0
 8002dd2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ddc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002de0:	4618      	mov	r0, r3
 8002de2:	f007 fa3f 	bl	800a264 <HAL_RCCEx_PeriphCLKConfig>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <HAL_UART_MspInit+0x284>
      Error_Handler();
 8002dec:	f7fe ff58 	bl	8001ca0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002df0:	4b62      	ldr	r3, [pc, #392]	@ (8002f7c <HAL_UART_MspInit+0x410>)
 8002df2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002df6:	4a61      	ldr	r2, [pc, #388]	@ (8002f7c <HAL_UART_MspInit+0x410>)
 8002df8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dfc:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002e00:	4b5e      	ldr	r3, [pc, #376]	@ (8002f7c <HAL_UART_MspInit+0x410>)
 8002e02:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002e06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e0a:	617b      	str	r3, [r7, #20]
 8002e0c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e0e:	4b5b      	ldr	r3, [pc, #364]	@ (8002f7c <HAL_UART_MspInit+0x410>)
 8002e10:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002e14:	4a59      	ldr	r2, [pc, #356]	@ (8002f7c <HAL_UART_MspInit+0x410>)
 8002e16:	f043 0304 	orr.w	r3, r3, #4
 8002e1a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002e1e:	4b57      	ldr	r3, [pc, #348]	@ (8002f7c <HAL_UART_MspInit+0x410>)
 8002e20:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002e2c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002e30:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e34:	2302      	movs	r3, #2
 8002e36:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e40:	2300      	movs	r3, #0
 8002e42:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e46:	2307      	movs	r3, #7
 8002e48:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e4c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002e50:	4619      	mov	r1, r3
 8002e52:	484b      	ldr	r0, [pc, #300]	@ (8002f80 <HAL_UART_MspInit+0x414>)
 8002e54:	f005 fece 	bl	8008bf4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002e58:	4b4a      	ldr	r3, [pc, #296]	@ (8002f84 <HAL_UART_MspInit+0x418>)
 8002e5a:	4a4b      	ldr	r2, [pc, #300]	@ (8002f88 <HAL_UART_MspInit+0x41c>)
 8002e5c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002e5e:	4b49      	ldr	r3, [pc, #292]	@ (8002f84 <HAL_UART_MspInit+0x418>)
 8002e60:	222d      	movs	r2, #45	@ 0x2d
 8002e62:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e64:	4b47      	ldr	r3, [pc, #284]	@ (8002f84 <HAL_UART_MspInit+0x418>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e6a:	4b46      	ldr	r3, [pc, #280]	@ (8002f84 <HAL_UART_MspInit+0x418>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e70:	4b44      	ldr	r3, [pc, #272]	@ (8002f84 <HAL_UART_MspInit+0x418>)
 8002e72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e76:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e78:	4b42      	ldr	r3, [pc, #264]	@ (8002f84 <HAL_UART_MspInit+0x418>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e7e:	4b41      	ldr	r3, [pc, #260]	@ (8002f84 <HAL_UART_MspInit+0x418>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002e84:	4b3f      	ldr	r3, [pc, #252]	@ (8002f84 <HAL_UART_MspInit+0x418>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e8a:	4b3e      	ldr	r3, [pc, #248]	@ (8002f84 <HAL_UART_MspInit+0x418>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e90:	4b3c      	ldr	r3, [pc, #240]	@ (8002f84 <HAL_UART_MspInit+0x418>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002e96:	483b      	ldr	r0, [pc, #236]	@ (8002f84 <HAL_UART_MspInit+0x418>)
 8002e98:	f002 fc5e 	bl	8005758 <HAL_DMA_Init>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <HAL_UART_MspInit+0x33a>
      Error_Handler();
 8002ea2:	f7fe fefd 	bl	8001ca0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a36      	ldr	r2, [pc, #216]	@ (8002f84 <HAL_UART_MspInit+0x418>)
 8002eaa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002eae:	4a35      	ldr	r2, [pc, #212]	@ (8002f84 <HAL_UART_MspInit+0x418>)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	2105      	movs	r1, #5
 8002eb8:	2027      	movs	r0, #39	@ 0x27
 8002eba:	f002 fbad 	bl	8005618 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002ebe:	2027      	movs	r0, #39	@ 0x27
 8002ec0:	f002 fbc4 	bl	800564c <HAL_NVIC_EnableIRQ>
}
 8002ec4:	e052      	b.n	8002f6c <HAL_UART_MspInit+0x400>
  else if(uartHandle->Instance==USART6)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a30      	ldr	r2, [pc, #192]	@ (8002f8c <HAL_UART_MspInit+0x420>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d14d      	bne.n	8002f6c <HAL_UART_MspInit+0x400>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002ed0:	f04f 0201 	mov.w	r2, #1
 8002ed4:	f04f 0300 	mov.w	r3, #0
 8002ed8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002edc:	2300      	movs	r3, #0
 8002ede:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ee2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f007 f9bc 	bl	800a264 <HAL_RCCEx_PeriphCLKConfig>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <HAL_UART_MspInit+0x38a>
      Error_Handler();
 8002ef2:	f7fe fed5 	bl	8001ca0 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002ef6:	4b21      	ldr	r3, [pc, #132]	@ (8002f7c <HAL_UART_MspInit+0x410>)
 8002ef8:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002efc:	4a1f      	ldr	r2, [pc, #124]	@ (8002f7c <HAL_UART_MspInit+0x410>)
 8002efe:	f043 0320 	orr.w	r3, r3, #32
 8002f02:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8002f06:	4b1d      	ldr	r3, [pc, #116]	@ (8002f7c <HAL_UART_MspInit+0x410>)
 8002f08:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002f0c:	f003 0320 	and.w	r3, r3, #32
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f14:	4b19      	ldr	r3, [pc, #100]	@ (8002f7c <HAL_UART_MspInit+0x410>)
 8002f16:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002f1a:	4a18      	ldr	r2, [pc, #96]	@ (8002f7c <HAL_UART_MspInit+0x410>)
 8002f1c:	f043 0304 	orr.w	r3, r3, #4
 8002f20:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002f24:	4b15      	ldr	r3, [pc, #84]	@ (8002f7c <HAL_UART_MspInit+0x410>)
 8002f26:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002f2a:	f003 0304 	and.w	r3, r3, #4
 8002f2e:	60bb      	str	r3, [r7, #8]
 8002f30:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f32:	23c0      	movs	r3, #192	@ 0xc0
 8002f34:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f38:	2302      	movs	r3, #2
 8002f3a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f44:	2300      	movs	r3, #0
 8002f46:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8002f4a:	2307      	movs	r3, #7
 8002f4c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f50:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002f54:	4619      	mov	r1, r3
 8002f56:	480a      	ldr	r0, [pc, #40]	@ (8002f80 <HAL_UART_MspInit+0x414>)
 8002f58:	f005 fe4c 	bl	8008bf4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	2105      	movs	r1, #5
 8002f60:	2047      	movs	r0, #71	@ 0x47
 8002f62:	f002 fb59 	bl	8005618 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002f66:	2047      	movs	r0, #71	@ 0x47
 8002f68:	f002 fb70 	bl	800564c <HAL_NVIC_EnableIRQ>
}
 8002f6c:	bf00      	nop
 8002f6e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	40004800 	.word	0x40004800
 8002f7c:	58024400 	.word	0x58024400
 8002f80:	58020800 	.word	0x58020800
 8002f84:	240012b8 	.word	0x240012b8
 8002f88:	40020028 	.word	0x40020028
 8002f8c:	40011400 	.word	0x40011400

08002f90 <Reset_UART>:
  /* USER CODE END USART6_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void Reset_UART(UART_HandleTypeDef *huart) {
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]

      // Clear any pending error flags
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF | UART_CLEAR_FEF | UART_CLEAR_NEF | UART_CLEAR_OREF);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	220f      	movs	r2, #15
 8002f9e:	621a      	str	r2, [r3, #32]

    // Abort ongoing UART transfer
    if (HAL_UART_Abort_IT(huart) != HAL_OK) {
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f00b fc4d 	bl	800e840 <HAL_UART_Abort_IT>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <Reset_UART+0x20>
        // Abort Error
        Error_Handler();
 8002fac:	f7fe fe78 	bl	8001ca0 <Error_Handler>
    }
     if(huart == &huart3){
    	 MX_USART3_UART_Init();
     }
*/
}
 8002fb0:	bf00      	nop
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <BMP280_write>:
uint16_t dig_T1, dig_P1;
int16_t  dig_T2, dig_T3, dig_P2,dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;

int32_t T_raw, P_raw, t_fine;

void BMP280_write(uint8_t Address, uint8_t Data){
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	460a      	mov	r2, r1
 8002fc2:	71fb      	strb	r3, [r7, #7]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	71bb      	strb	r3, [r7, #6]
	BMP280_select();
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002fce:	480f      	ldr	r0, [pc, #60]	@ (800300c <BMP280_write+0x54>)
 8002fd0:	f005 ffc0 	bl	8008f54 <HAL_GPIO_WritePin>
	Address &= 0x7F;
 8002fd4:	79fb      	ldrb	r3, [r7, #7]
 8002fd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8002fde:	1df9      	adds	r1, r7, #7
 8002fe0:	2364      	movs	r3, #100	@ 0x64
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	480a      	ldr	r0, [pc, #40]	@ (8003010 <BMP280_write+0x58>)
 8002fe6:	f009 f841 	bl	800c06c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BMP280, &Data, 1, 100);
 8002fea:	1db9      	adds	r1, r7, #6
 8002fec:	2364      	movs	r3, #100	@ 0x64
 8002fee:	2201      	movs	r2, #1
 8002ff0:	4807      	ldr	r0, [pc, #28]	@ (8003010 <BMP280_write+0x58>)
 8002ff2:	f009 f83b 	bl	800c06c <HAL_SPI_Transmit>

	BMP280_unselect();
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002ffc:	4803      	ldr	r0, [pc, #12]	@ (800300c <BMP280_write+0x54>)
 8002ffe:	f005 ffa9 	bl	8008f54 <HAL_GPIO_WritePin>
}
 8003002:	bf00      	nop
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	58020400 	.word	0x58020400
 8003010:	24000d70 	.word	0x24000d70

08003014 <BMP280_read>:

uint8_t BMP280_read(uint8_t Address){
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	4603      	mov	r3, r0
 800301c:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer = (Address|0x80);
 800301e:	79fb      	ldrb	r3, [r7, #7]
 8003020:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003024:	b2db      	uxtb	r3, r3
 8003026:	73fb      	strb	r3, [r7, #15]
	BMP280_select();
 8003028:	2200      	movs	r2, #0
 800302a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800302e:	480e      	ldr	r0, [pc, #56]	@ (8003068 <BMP280_read+0x54>)
 8003030:	f005 ff90 	bl	8008f54 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Buffer, 1, 100);
 8003034:	f107 010f 	add.w	r1, r7, #15
 8003038:	2364      	movs	r3, #100	@ 0x64
 800303a:	2201      	movs	r2, #1
 800303c:	480b      	ldr	r0, [pc, #44]	@ (800306c <BMP280_read+0x58>)
 800303e:	f009 f815 	bl	800c06c <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, &Buffer, 1, 100);
 8003042:	f107 010f 	add.w	r1, r7, #15
 8003046:	2364      	movs	r3, #100	@ 0x64
 8003048:	2201      	movs	r2, #1
 800304a:	4808      	ldr	r0, [pc, #32]	@ (800306c <BMP280_read+0x58>)
 800304c:	f009 f9fc 	bl	800c448 <HAL_SPI_Receive>
	BMP280_unselect();
 8003050:	2201      	movs	r2, #1
 8003052:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003056:	4804      	ldr	r0, [pc, #16]	@ (8003068 <BMP280_read+0x54>)
 8003058:	f005 ff7c 	bl	8008f54 <HAL_GPIO_WritePin>

	return Buffer;
 800305c:	7bfb      	ldrb	r3, [r7, #15]
}
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	58020400 	.word	0x58020400
 800306c:	24000d70 	.word	0x24000d70

08003070 <BMP280_config>:

void BMP280_config(void){
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
	BMP280_write(ctrl_meas, 0x57);
 8003074:	2157      	movs	r1, #87	@ 0x57
 8003076:	20f4      	movs	r0, #244	@ 0xf4
 8003078:	f7ff ff9e 	bl	8002fb8 <BMP280_write>
	BMP280_write(config, 0x10);
 800307c:	2110      	movs	r1, #16
 800307e:	20f5      	movs	r0, #245	@ 0xf5
 8003080:	f7ff ff9a 	bl	8002fb8 <BMP280_write>
}
 8003084:	bf00      	nop
 8003086:	bd80      	pop	{r7, pc}

08003088 <BMP280_calibrationData>:

void BMP280_reset(void){
	BMP280_write(reset, 0xB6);
}

void BMP280_calibrationData(void){
 8003088:	b580      	push	{r7, lr}
 800308a:	b088      	sub	sp, #32
 800308c:	af00      	add	r7, sp, #0
	uint8_t Address = 0x88;
 800308e:	2388      	movs	r3, #136	@ 0x88
 8003090:	77fb      	strb	r3, [r7, #31]
	uint8_t Buffer[24] = {0};
 8003092:	2300      	movs	r3, #0
 8003094:	607b      	str	r3, [r7, #4]
 8003096:	f107 0308 	add.w	r3, r7, #8
 800309a:	2200      	movs	r2, #0
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	605a      	str	r2, [r3, #4]
 80030a0:	609a      	str	r2, [r3, #8]
 80030a2:	60da      	str	r2, [r3, #12]
 80030a4:	611a      	str	r2, [r3, #16]
	BMP280_select();
 80030a6:	2200      	movs	r2, #0
 80030a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80030ac:	4843      	ldr	r0, [pc, #268]	@ (80031bc <BMP280_calibrationData+0x134>)
 80030ae:	f005 ff51 	bl	8008f54 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80030b2:	f107 011f 	add.w	r1, r7, #31
 80030b6:	2364      	movs	r3, #100	@ 0x64
 80030b8:	2201      	movs	r2, #1
 80030ba:	4841      	ldr	r0, [pc, #260]	@ (80031c0 <BMP280_calibrationData+0x138>)
 80030bc:	f008 ffd6 	bl	800c06c <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 24, 100);
 80030c0:	1d39      	adds	r1, r7, #4
 80030c2:	2364      	movs	r3, #100	@ 0x64
 80030c4:	2218      	movs	r2, #24
 80030c6:	483e      	ldr	r0, [pc, #248]	@ (80031c0 <BMP280_calibrationData+0x138>)
 80030c8:	f009 f9be 	bl	800c448 <HAL_SPI_Receive>
	BMP280_unselect();
 80030cc:	2201      	movs	r2, #1
 80030ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80030d2:	483a      	ldr	r0, [pc, #232]	@ (80031bc <BMP280_calibrationData+0x134>)
 80030d4:	f005 ff3e 	bl	8008f54 <HAL_GPIO_WritePin>

	dig_T1 = (Buffer[1]<<8)|Buffer[0];
 80030d8:	797b      	ldrb	r3, [r7, #5]
 80030da:	021b      	lsls	r3, r3, #8
 80030dc:	b21a      	sxth	r2, r3
 80030de:	793b      	ldrb	r3, [r7, #4]
 80030e0:	b21b      	sxth	r3, r3
 80030e2:	4313      	orrs	r3, r2
 80030e4:	b21b      	sxth	r3, r3
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	4b36      	ldr	r3, [pc, #216]	@ (80031c4 <BMP280_calibrationData+0x13c>)
 80030ea:	801a      	strh	r2, [r3, #0]
	dig_T2 = (Buffer[3]<<8)|Buffer[2];
 80030ec:	79fb      	ldrb	r3, [r7, #7]
 80030ee:	021b      	lsls	r3, r3, #8
 80030f0:	b21a      	sxth	r2, r3
 80030f2:	79bb      	ldrb	r3, [r7, #6]
 80030f4:	b21b      	sxth	r3, r3
 80030f6:	4313      	orrs	r3, r2
 80030f8:	b21a      	sxth	r2, r3
 80030fa:	4b33      	ldr	r3, [pc, #204]	@ (80031c8 <BMP280_calibrationData+0x140>)
 80030fc:	801a      	strh	r2, [r3, #0]
	dig_T3 = (Buffer[5]<<8)|Buffer[4];
 80030fe:	7a7b      	ldrb	r3, [r7, #9]
 8003100:	021b      	lsls	r3, r3, #8
 8003102:	b21a      	sxth	r2, r3
 8003104:	7a3b      	ldrb	r3, [r7, #8]
 8003106:	b21b      	sxth	r3, r3
 8003108:	4313      	orrs	r3, r2
 800310a:	b21a      	sxth	r2, r3
 800310c:	4b2f      	ldr	r3, [pc, #188]	@ (80031cc <BMP280_calibrationData+0x144>)
 800310e:	801a      	strh	r2, [r3, #0]

	dig_P1 = (Buffer[7]<<8)|Buffer[6];
 8003110:	7afb      	ldrb	r3, [r7, #11]
 8003112:	021b      	lsls	r3, r3, #8
 8003114:	b21a      	sxth	r2, r3
 8003116:	7abb      	ldrb	r3, [r7, #10]
 8003118:	b21b      	sxth	r3, r3
 800311a:	4313      	orrs	r3, r2
 800311c:	b21b      	sxth	r3, r3
 800311e:	b29a      	uxth	r2, r3
 8003120:	4b2b      	ldr	r3, [pc, #172]	@ (80031d0 <BMP280_calibrationData+0x148>)
 8003122:	801a      	strh	r2, [r3, #0]
	dig_P2 = (Buffer[9]<<8)|Buffer[8];
 8003124:	7b7b      	ldrb	r3, [r7, #13]
 8003126:	021b      	lsls	r3, r3, #8
 8003128:	b21a      	sxth	r2, r3
 800312a:	7b3b      	ldrb	r3, [r7, #12]
 800312c:	b21b      	sxth	r3, r3
 800312e:	4313      	orrs	r3, r2
 8003130:	b21a      	sxth	r2, r3
 8003132:	4b28      	ldr	r3, [pc, #160]	@ (80031d4 <BMP280_calibrationData+0x14c>)
 8003134:	801a      	strh	r2, [r3, #0]
	dig_P3 = (Buffer[11]<<8)|Buffer[10];
 8003136:	7bfb      	ldrb	r3, [r7, #15]
 8003138:	021b      	lsls	r3, r3, #8
 800313a:	b21a      	sxth	r2, r3
 800313c:	7bbb      	ldrb	r3, [r7, #14]
 800313e:	b21b      	sxth	r3, r3
 8003140:	4313      	orrs	r3, r2
 8003142:	b21a      	sxth	r2, r3
 8003144:	4b24      	ldr	r3, [pc, #144]	@ (80031d8 <BMP280_calibrationData+0x150>)
 8003146:	801a      	strh	r2, [r3, #0]
	dig_P4 = (Buffer[13]<<8)|Buffer[12];
 8003148:	7c7b      	ldrb	r3, [r7, #17]
 800314a:	021b      	lsls	r3, r3, #8
 800314c:	b21a      	sxth	r2, r3
 800314e:	7c3b      	ldrb	r3, [r7, #16]
 8003150:	b21b      	sxth	r3, r3
 8003152:	4313      	orrs	r3, r2
 8003154:	b21a      	sxth	r2, r3
 8003156:	4b21      	ldr	r3, [pc, #132]	@ (80031dc <BMP280_calibrationData+0x154>)
 8003158:	801a      	strh	r2, [r3, #0]
	dig_P5 = (Buffer[15]<<8)|Buffer[14];
 800315a:	7cfb      	ldrb	r3, [r7, #19]
 800315c:	021b      	lsls	r3, r3, #8
 800315e:	b21a      	sxth	r2, r3
 8003160:	7cbb      	ldrb	r3, [r7, #18]
 8003162:	b21b      	sxth	r3, r3
 8003164:	4313      	orrs	r3, r2
 8003166:	b21a      	sxth	r2, r3
 8003168:	4b1d      	ldr	r3, [pc, #116]	@ (80031e0 <BMP280_calibrationData+0x158>)
 800316a:	801a      	strh	r2, [r3, #0]
	dig_P6 = (Buffer[17]<<8)|Buffer[16];
 800316c:	7d7b      	ldrb	r3, [r7, #21]
 800316e:	021b      	lsls	r3, r3, #8
 8003170:	b21a      	sxth	r2, r3
 8003172:	7d3b      	ldrb	r3, [r7, #20]
 8003174:	b21b      	sxth	r3, r3
 8003176:	4313      	orrs	r3, r2
 8003178:	b21a      	sxth	r2, r3
 800317a:	4b1a      	ldr	r3, [pc, #104]	@ (80031e4 <BMP280_calibrationData+0x15c>)
 800317c:	801a      	strh	r2, [r3, #0]
	dig_P7 = (Buffer[19]<<8)|Buffer[18];
 800317e:	7dfb      	ldrb	r3, [r7, #23]
 8003180:	021b      	lsls	r3, r3, #8
 8003182:	b21a      	sxth	r2, r3
 8003184:	7dbb      	ldrb	r3, [r7, #22]
 8003186:	b21b      	sxth	r3, r3
 8003188:	4313      	orrs	r3, r2
 800318a:	b21a      	sxth	r2, r3
 800318c:	4b16      	ldr	r3, [pc, #88]	@ (80031e8 <BMP280_calibrationData+0x160>)
 800318e:	801a      	strh	r2, [r3, #0]
	dig_P8 = (Buffer[21]<<8)|Buffer[20];
 8003190:	7e7b      	ldrb	r3, [r7, #25]
 8003192:	021b      	lsls	r3, r3, #8
 8003194:	b21a      	sxth	r2, r3
 8003196:	7e3b      	ldrb	r3, [r7, #24]
 8003198:	b21b      	sxth	r3, r3
 800319a:	4313      	orrs	r3, r2
 800319c:	b21a      	sxth	r2, r3
 800319e:	4b13      	ldr	r3, [pc, #76]	@ (80031ec <BMP280_calibrationData+0x164>)
 80031a0:	801a      	strh	r2, [r3, #0]
	dig_P9 = (Buffer[23]<<8)|Buffer[22];
 80031a2:	7efb      	ldrb	r3, [r7, #27]
 80031a4:	021b      	lsls	r3, r3, #8
 80031a6:	b21a      	sxth	r2, r3
 80031a8:	7ebb      	ldrb	r3, [r7, #26]
 80031aa:	b21b      	sxth	r3, r3
 80031ac:	4313      	orrs	r3, r2
 80031ae:	b21a      	sxth	r2, r3
 80031b0:	4b0f      	ldr	r3, [pc, #60]	@ (80031f0 <BMP280_calibrationData+0x168>)
 80031b2:	801a      	strh	r2, [r3, #0]
}
 80031b4:	bf00      	nop
 80031b6:	3720      	adds	r7, #32
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	58020400 	.word	0x58020400
 80031c0:	24000d70 	.word	0x24000d70
 80031c4:	24001344 	.word	0x24001344
 80031c8:	24001348 	.word	0x24001348
 80031cc:	2400134a 	.word	0x2400134a
 80031d0:	24001346 	.word	0x24001346
 80031d4:	2400134c 	.word	0x2400134c
 80031d8:	2400134e 	.word	0x2400134e
 80031dc:	24001350 	.word	0x24001350
 80031e0:	24001352 	.word	0x24001352
 80031e4:	24001354 	.word	0x24001354
 80031e8:	24001356 	.word	0x24001356
 80031ec:	24001358 	.word	0x24001358
 80031f0:	2400135a 	.word	0x2400135a

080031f4 <BMP280_readRawValues>:

void BMP280_readRawValues(void){
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
	uint8_t Address = press_msb;
 80031fa:	23f7      	movs	r3, #247	@ 0xf7
 80031fc:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[6] = {0};
 80031fe:	2300      	movs	r3, #0
 8003200:	603b      	str	r3, [r7, #0]
 8003202:	2300      	movs	r3, #0
 8003204:	80bb      	strh	r3, [r7, #4]
	BMP280_select();
 8003206:	2200      	movs	r2, #0
 8003208:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800320c:	4817      	ldr	r0, [pc, #92]	@ (800326c <BMP280_readRawValues+0x78>)
 800320e:	f005 fea1 	bl	8008f54 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8003212:	1df9      	adds	r1, r7, #7
 8003214:	2364      	movs	r3, #100	@ 0x64
 8003216:	2201      	movs	r2, #1
 8003218:	4815      	ldr	r0, [pc, #84]	@ (8003270 <BMP280_readRawValues+0x7c>)
 800321a:	f008 ff27 	bl	800c06c <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 6, 100);
 800321e:	4639      	mov	r1, r7
 8003220:	2364      	movs	r3, #100	@ 0x64
 8003222:	2206      	movs	r2, #6
 8003224:	4812      	ldr	r0, [pc, #72]	@ (8003270 <BMP280_readRawValues+0x7c>)
 8003226:	f009 f90f 	bl	800c448 <HAL_SPI_Receive>
	BMP280_unselect();
 800322a:	2201      	movs	r2, #1
 800322c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003230:	480e      	ldr	r0, [pc, #56]	@ (800326c <BMP280_readRawValues+0x78>)
 8003232:	f005 fe8f 	bl	8008f54 <HAL_GPIO_WritePin>

	P_raw = (Buffer[0]<<12)|(Buffer[1]<<4)|(Buffer[2]>>4);
 8003236:	783b      	ldrb	r3, [r7, #0]
 8003238:	031a      	lsls	r2, r3, #12
 800323a:	787b      	ldrb	r3, [r7, #1]
 800323c:	011b      	lsls	r3, r3, #4
 800323e:	4313      	orrs	r3, r2
 8003240:	78ba      	ldrb	r2, [r7, #2]
 8003242:	0912      	lsrs	r2, r2, #4
 8003244:	b2d2      	uxtb	r2, r2
 8003246:	4313      	orrs	r3, r2
 8003248:	4a0a      	ldr	r2, [pc, #40]	@ (8003274 <BMP280_readRawValues+0x80>)
 800324a:	6013      	str	r3, [r2, #0]
	T_raw = (Buffer[3]<<12)|(Buffer[4]<<4)|(Buffer[5]>>4);
 800324c:	78fb      	ldrb	r3, [r7, #3]
 800324e:	031a      	lsls	r2, r3, #12
 8003250:	793b      	ldrb	r3, [r7, #4]
 8003252:	011b      	lsls	r3, r3, #4
 8003254:	4313      	orrs	r3, r2
 8003256:	797a      	ldrb	r2, [r7, #5]
 8003258:	0912      	lsrs	r2, r2, #4
 800325a:	b2d2      	uxtb	r2, r2
 800325c:	4313      	orrs	r3, r2
 800325e:	4a06      	ldr	r2, [pc, #24]	@ (8003278 <BMP280_readRawValues+0x84>)
 8003260:	6013      	str	r3, [r2, #0]
}
 8003262:	bf00      	nop
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	58020400 	.word	0x58020400
 8003270:	24000d70 	.word	0x24000d70
 8003274:	24001360 	.word	0x24001360
 8003278:	2400135c 	.word	0x2400135c

0800327c <BMP280_measureT>:

int32_t BMP280_measureT(int32_t adc_T){
 800327c:	b480      	push	{r7}
 800327e:	b087      	sub	sp, #28
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 =  ((((T_raw>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8003284:	4b1a      	ldr	r3, [pc, #104]	@ (80032f0 <BMP280_measureT+0x74>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	10da      	asrs	r2, r3, #3
 800328a:	4b1a      	ldr	r3, [pc, #104]	@ (80032f4 <BMP280_measureT+0x78>)
 800328c:	881b      	ldrh	r3, [r3, #0]
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	4a19      	ldr	r2, [pc, #100]	@ (80032f8 <BMP280_measureT+0x7c>)
 8003294:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003298:	fb02 f303 	mul.w	r3, r2, r3
 800329c:	12db      	asrs	r3, r3, #11
 800329e:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	111b      	asrs	r3, r3, #4
 80032a4:	4a13      	ldr	r2, [pc, #76]	@ (80032f4 <BMP280_measureT+0x78>)
 80032a6:	8812      	ldrh	r2, [r2, #0]
 80032a8:	1a9b      	subs	r3, r3, r2
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	1112      	asrs	r2, r2, #4
 80032ae:	4911      	ldr	r1, [pc, #68]	@ (80032f4 <BMP280_measureT+0x78>)
 80032b0:	8809      	ldrh	r1, [r1, #0]
 80032b2:	1a52      	subs	r2, r2, r1
 80032b4:	fb02 f303 	mul.w	r3, r2, r3
 80032b8:	131b      	asrs	r3, r3, #12
 80032ba:	4a10      	ldr	r2, [pc, #64]	@ (80032fc <BMP280_measureT+0x80>)
 80032bc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80032c0:	fb02 f303 	mul.w	r3, r2, r3
 80032c4:	139b      	asrs	r3, r3, #14
 80032c6:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 80032c8:	697a      	ldr	r2, [r7, #20]
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	4413      	add	r3, r2
 80032ce:	4a0c      	ldr	r2, [pc, #48]	@ (8003300 <BMP280_measureT+0x84>)
 80032d0:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 80032d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003300 <BMP280_measureT+0x84>)
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	4613      	mov	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4413      	add	r3, r2
 80032dc:	3380      	adds	r3, #128	@ 0x80
 80032de:	121b      	asrs	r3, r3, #8
 80032e0:	60fb      	str	r3, [r7, #12]
	return T;
 80032e2:	68fb      	ldr	r3, [r7, #12]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	371c      	adds	r7, #28
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	2400135c 	.word	0x2400135c
 80032f4:	24001344 	.word	0x24001344
 80032f8:	24001348 	.word	0x24001348
 80032fc:	2400134a 	.word	0x2400134a
 8003300:	24001364 	.word	0x24001364

08003304 <BMP280_measureP>:

uint32_t BMP280_measureP(int32_t adc_P){
 8003304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003308:	b0ca      	sub	sp, #296	@ 0x128
 800330a:	af00      	add	r7, sp, #0
 800330c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8003310:	4baf      	ldr	r3, [pc, #700]	@ (80035d0 <BMP280_measureP+0x2cc>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	17da      	asrs	r2, r3, #31
 8003316:	461c      	mov	r4, r3
 8003318:	4615      	mov	r5, r2
 800331a:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 800331e:	f145 3bff 	adc.w	fp, r5, #4294967295
 8003322:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 8003326:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800332a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800332e:	fb03 f102 	mul.w	r1, r3, r2
 8003332:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8003336:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800333a:	fb02 f303 	mul.w	r3, r2, r3
 800333e:	18ca      	adds	r2, r1, r3
 8003340:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003344:	fba3 8903 	umull	r8, r9, r3, r3
 8003348:	eb02 0309 	add.w	r3, r2, r9
 800334c:	4699      	mov	r9, r3
 800334e:	4ba1      	ldr	r3, [pc, #644]	@ (80035d4 <BMP280_measureP+0x2d0>)
 8003350:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003354:	b21b      	sxth	r3, r3
 8003356:	17da      	asrs	r2, r3, #31
 8003358:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800335c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003360:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8003364:	4603      	mov	r3, r0
 8003366:	fb03 f209 	mul.w	r2, r3, r9
 800336a:	460b      	mov	r3, r1
 800336c:	fb08 f303 	mul.w	r3, r8, r3
 8003370:	4413      	add	r3, r2
 8003372:	4602      	mov	r2, r0
 8003374:	fba8 1202 	umull	r1, r2, r8, r2
 8003378:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800337c:	460a      	mov	r2, r1
 800337e:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8003382:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003386:	4413      	add	r3, r2
 8003388:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800338c:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8003390:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8003394:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8003398:	4b8f      	ldr	r3, [pc, #572]	@ (80035d8 <BMP280_measureP+0x2d4>)
 800339a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800339e:	b21b      	sxth	r3, r3
 80033a0:	17da      	asrs	r2, r3, #31
 80033a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033a6:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80033aa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80033ae:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80033b2:	462a      	mov	r2, r5
 80033b4:	fb02 f203 	mul.w	r2, r2, r3
 80033b8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80033bc:	4621      	mov	r1, r4
 80033be:	fb01 f303 	mul.w	r3, r1, r3
 80033c2:	441a      	add	r2, r3
 80033c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80033c8:	4621      	mov	r1, r4
 80033ca:	fba3 1301 	umull	r1, r3, r3, r1
 80033ce:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80033d2:	460b      	mov	r3, r1
 80033d4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80033d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033dc:	18d3      	adds	r3, r2, r3
 80033de:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80033e2:	f04f 0000 	mov.w	r0, #0
 80033e6:	f04f 0100 	mov.w	r1, #0
 80033ea:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 80033ee:	462b      	mov	r3, r5
 80033f0:	0459      	lsls	r1, r3, #17
 80033f2:	4623      	mov	r3, r4
 80033f4:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 80033f8:	4623      	mov	r3, r4
 80033fa:	0458      	lsls	r0, r3, #17
 80033fc:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8003400:	1814      	adds	r4, r2, r0
 8003402:	643c      	str	r4, [r7, #64]	@ 0x40
 8003404:	414b      	adcs	r3, r1
 8003406:	647b      	str	r3, [r7, #68]	@ 0x44
 8003408:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800340c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8003410:	4b72      	ldr	r3, [pc, #456]	@ (80035dc <BMP280_measureP+0x2d8>)
 8003412:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003416:	b21b      	sxth	r3, r3
 8003418:	17da      	asrs	r2, r3, #31
 800341a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800341e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003422:	f04f 0000 	mov.w	r0, #0
 8003426:	f04f 0100 	mov.w	r1, #0
 800342a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800342e:	00d9      	lsls	r1, r3, #3
 8003430:	2000      	movs	r0, #0
 8003432:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8003436:	1814      	adds	r4, r2, r0
 8003438:	63bc      	str	r4, [r7, #56]	@ 0x38
 800343a:	414b      	adcs	r3, r1
 800343c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800343e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8003442:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8003446:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800344a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800344e:	fb03 f102 	mul.w	r1, r3, r2
 8003452:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8003456:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800345a:	fb02 f303 	mul.w	r3, r2, r3
 800345e:	18ca      	adds	r2, r1, r3
 8003460:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003464:	fba3 1303 	umull	r1, r3, r3, r3
 8003468:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800346c:	460b      	mov	r3, r1
 800346e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003472:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003476:	18d3      	adds	r3, r2, r3
 8003478:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800347c:	4b58      	ldr	r3, [pc, #352]	@ (80035e0 <BMP280_measureP+0x2dc>)
 800347e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003482:	b21b      	sxth	r3, r3
 8003484:	17da      	asrs	r2, r3, #31
 8003486:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800348a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800348e:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8003492:	462b      	mov	r3, r5
 8003494:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003498:	4642      	mov	r2, r8
 800349a:	fb02 f203 	mul.w	r2, r2, r3
 800349e:	464b      	mov	r3, r9
 80034a0:	4621      	mov	r1, r4
 80034a2:	fb01 f303 	mul.w	r3, r1, r3
 80034a6:	4413      	add	r3, r2
 80034a8:	4622      	mov	r2, r4
 80034aa:	4641      	mov	r1, r8
 80034ac:	fba2 1201 	umull	r1, r2, r2, r1
 80034b0:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80034b4:	460a      	mov	r2, r1
 80034b6:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 80034ba:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80034be:	4413      	add	r3, r2
 80034c0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80034c4:	f04f 0000 	mov.w	r0, #0
 80034c8:	f04f 0100 	mov.w	r1, #0
 80034cc:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 80034d0:	4623      	mov	r3, r4
 80034d2:	0a18      	lsrs	r0, r3, #8
 80034d4:	462b      	mov	r3, r5
 80034d6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80034da:	462b      	mov	r3, r5
 80034dc:	1219      	asrs	r1, r3, #8
 80034de:	4b41      	ldr	r3, [pc, #260]	@ (80035e4 <BMP280_measureP+0x2e0>)
 80034e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034e4:	b21b      	sxth	r3, r3
 80034e6:	17da      	asrs	r2, r3, #31
 80034e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80034ec:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80034f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80034f4:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 80034f8:	464a      	mov	r2, r9
 80034fa:	fb02 f203 	mul.w	r2, r2, r3
 80034fe:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003502:	4644      	mov	r4, r8
 8003504:	fb04 f303 	mul.w	r3, r4, r3
 8003508:	441a      	add	r2, r3
 800350a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800350e:	4644      	mov	r4, r8
 8003510:	fba3 4304 	umull	r4, r3, r3, r4
 8003514:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003518:	4623      	mov	r3, r4
 800351a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800351e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003522:	18d3      	adds	r3, r2, r3
 8003524:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003528:	f04f 0200 	mov.w	r2, #0
 800352c:	f04f 0300 	mov.w	r3, #0
 8003530:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8003534:	464c      	mov	r4, r9
 8003536:	0323      	lsls	r3, r4, #12
 8003538:	4644      	mov	r4, r8
 800353a:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800353e:	4644      	mov	r4, r8
 8003540:	0322      	lsls	r2, r4, #12
 8003542:	1884      	adds	r4, r0, r2
 8003544:	633c      	str	r4, [r7, #48]	@ 0x30
 8003546:	eb41 0303 	adc.w	r3, r1, r3
 800354a:	637b      	str	r3, [r7, #52]	@ 0x34
 800354c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8003550:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8003554:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8003558:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 800355c:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8003560:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8003564:	4b20      	ldr	r3, [pc, #128]	@ (80035e8 <BMP280_measureP+0x2e4>)
 8003566:	881b      	ldrh	r3, [r3, #0]
 8003568:	b29b      	uxth	r3, r3
 800356a:	2200      	movs	r2, #0
 800356c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003570:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003574:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003578:	462b      	mov	r3, r5
 800357a:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800357e:	4642      	mov	r2, r8
 8003580:	fb02 f203 	mul.w	r2, r2, r3
 8003584:	464b      	mov	r3, r9
 8003586:	4621      	mov	r1, r4
 8003588:	fb01 f303 	mul.w	r3, r1, r3
 800358c:	4413      	add	r3, r2
 800358e:	4622      	mov	r2, r4
 8003590:	4641      	mov	r1, r8
 8003592:	fba2 1201 	umull	r1, r2, r2, r1
 8003596:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800359a:	460a      	mov	r2, r1
 800359c:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 80035a0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80035a4:	4413      	add	r3, r2
 80035a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80035aa:	f04f 0200 	mov.w	r2, #0
 80035ae:	f04f 0300 	mov.w	r3, #0
 80035b2:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 80035b6:	4629      	mov	r1, r5
 80035b8:	104a      	asrs	r2, r1, #1
 80035ba:	4629      	mov	r1, r5
 80035bc:	17cb      	asrs	r3, r1, #31
 80035be:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 80035c2:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80035c6:	4313      	orrs	r3, r2
 80035c8:	d110      	bne.n	80035ec <BMP280_measureP+0x2e8>
	{
	return 0;
 80035ca:	2300      	movs	r3, #0
 80035cc:	e154      	b.n	8003878 <BMP280_measureP+0x574>
 80035ce:	bf00      	nop
 80035d0:	24001364 	.word	0x24001364
 80035d4:	24001354 	.word	0x24001354
 80035d8:	24001352 	.word	0x24001352
 80035dc:	24001350 	.word	0x24001350
 80035e0:	2400134e 	.word	0x2400134e
 80035e4:	2400134c 	.word	0x2400134c
 80035e8:	24001346 	.word	0x24001346
	}
	p = 1048576-adc_P;
 80035ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035f0:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 80035f4:	17da      	asrs	r2, r3, #31
 80035f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035fa:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80035fe:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8003602:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003606:	105b      	asrs	r3, r3, #1
 8003608:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800360c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003610:	07db      	lsls	r3, r3, #31
 8003612:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003616:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800361a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800361e:	4621      	mov	r1, r4
 8003620:	1a89      	subs	r1, r1, r2
 8003622:	67b9      	str	r1, [r7, #120]	@ 0x78
 8003624:	4629      	mov	r1, r5
 8003626:	eb61 0303 	sbc.w	r3, r1, r3
 800362a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800362c:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003630:	4622      	mov	r2, r4
 8003632:	462b      	mov	r3, r5
 8003634:	1891      	adds	r1, r2, r2
 8003636:	6239      	str	r1, [r7, #32]
 8003638:	415b      	adcs	r3, r3
 800363a:	627b      	str	r3, [r7, #36]	@ 0x24
 800363c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003640:	4621      	mov	r1, r4
 8003642:	1851      	adds	r1, r2, r1
 8003644:	61b9      	str	r1, [r7, #24]
 8003646:	4629      	mov	r1, r5
 8003648:	414b      	adcs	r3, r1
 800364a:	61fb      	str	r3, [r7, #28]
 800364c:	f04f 0200 	mov.w	r2, #0
 8003650:	f04f 0300 	mov.w	r3, #0
 8003654:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8003658:	4649      	mov	r1, r9
 800365a:	018b      	lsls	r3, r1, #6
 800365c:	4641      	mov	r1, r8
 800365e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003662:	4641      	mov	r1, r8
 8003664:	018a      	lsls	r2, r1, #6
 8003666:	4641      	mov	r1, r8
 8003668:	1889      	adds	r1, r1, r2
 800366a:	6139      	str	r1, [r7, #16]
 800366c:	4649      	mov	r1, r9
 800366e:	eb43 0101 	adc.w	r1, r3, r1
 8003672:	6179      	str	r1, [r7, #20]
 8003674:	f04f 0200 	mov.w	r2, #0
 8003678:	f04f 0300 	mov.w	r3, #0
 800367c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8003680:	4649      	mov	r1, r9
 8003682:	008b      	lsls	r3, r1, #2
 8003684:	4641      	mov	r1, r8
 8003686:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800368a:	4641      	mov	r1, r8
 800368c:	008a      	lsls	r2, r1, #2
 800368e:	4610      	mov	r0, r2
 8003690:	4619      	mov	r1, r3
 8003692:	4603      	mov	r3, r0
 8003694:	4622      	mov	r2, r4
 8003696:	189b      	adds	r3, r3, r2
 8003698:	60bb      	str	r3, [r7, #8]
 800369a:	460b      	mov	r3, r1
 800369c:	462a      	mov	r2, r5
 800369e:	eb42 0303 	adc.w	r3, r2, r3
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	f04f 0200 	mov.w	r2, #0
 80036a8:	f04f 0300 	mov.w	r3, #0
 80036ac:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80036b0:	4649      	mov	r1, r9
 80036b2:	008b      	lsls	r3, r1, #2
 80036b4:	4641      	mov	r1, r8
 80036b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036ba:	4641      	mov	r1, r8
 80036bc:	008a      	lsls	r2, r1, #2
 80036be:	4610      	mov	r0, r2
 80036c0:	4619      	mov	r1, r3
 80036c2:	4603      	mov	r3, r0
 80036c4:	4622      	mov	r2, r4
 80036c6:	189b      	adds	r3, r3, r2
 80036c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80036ca:	462b      	mov	r3, r5
 80036cc:	460a      	mov	r2, r1
 80036ce:	eb42 0303 	adc.w	r3, r2, r3
 80036d2:	677b      	str	r3, [r7, #116]	@ 0x74
 80036d4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80036d8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80036dc:	f7fd f824 	bl	8000728 <__aeabi_ldivmod>
 80036e0:	4602      	mov	r2, r0
 80036e2:	460b      	mov	r3, r1
 80036e4:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 80036e8:	4b66      	ldr	r3, [pc, #408]	@ (8003884 <BMP280_measureP+0x580>)
 80036ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036ee:	b21b      	sxth	r3, r3
 80036f0:	17da      	asrs	r2, r3, #31
 80036f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036f4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80036f6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80036fa:	f04f 0000 	mov.w	r0, #0
 80036fe:	f04f 0100 	mov.w	r1, #0
 8003702:	0b50      	lsrs	r0, r2, #13
 8003704:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8003708:	1359      	asrs	r1, r3, #13
 800370a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800370e:	462b      	mov	r3, r5
 8003710:	fb00 f203 	mul.w	r2, r0, r3
 8003714:	4623      	mov	r3, r4
 8003716:	fb03 f301 	mul.w	r3, r3, r1
 800371a:	4413      	add	r3, r2
 800371c:	4622      	mov	r2, r4
 800371e:	fba2 1200 	umull	r1, r2, r2, r0
 8003722:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003726:	460a      	mov	r2, r1
 8003728:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 800372c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003730:	4413      	add	r3, r2
 8003732:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003736:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800373a:	f04f 0000 	mov.w	r0, #0
 800373e:	f04f 0100 	mov.w	r1, #0
 8003742:	0b50      	lsrs	r0, r2, #13
 8003744:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8003748:	1359      	asrs	r1, r3, #13
 800374a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 800374e:	462b      	mov	r3, r5
 8003750:	fb00 f203 	mul.w	r2, r0, r3
 8003754:	4623      	mov	r3, r4
 8003756:	fb03 f301 	mul.w	r3, r3, r1
 800375a:	4413      	add	r3, r2
 800375c:	4622      	mov	r2, r4
 800375e:	fba2 1200 	umull	r1, r2, r2, r0
 8003762:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003766:	460a      	mov	r2, r1
 8003768:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 800376c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8003770:	4413      	add	r3, r2
 8003772:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003776:	f04f 0200 	mov.w	r2, #0
 800377a:	f04f 0300 	mov.w	r3, #0
 800377e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8003782:	4621      	mov	r1, r4
 8003784:	0e4a      	lsrs	r2, r1, #25
 8003786:	4629      	mov	r1, r5
 8003788:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800378c:	4629      	mov	r1, r5
 800378e:	164b      	asrs	r3, r1, #25
 8003790:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8003794:	4b3c      	ldr	r3, [pc, #240]	@ (8003888 <BMP280_measureP+0x584>)
 8003796:	f9b3 3000 	ldrsh.w	r3, [r3]
 800379a:	b21b      	sxth	r3, r3
 800379c:	17da      	asrs	r2, r3, #31
 800379e:	663b      	str	r3, [r7, #96]	@ 0x60
 80037a0:	667a      	str	r2, [r7, #100]	@ 0x64
 80037a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80037a6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80037aa:	462a      	mov	r2, r5
 80037ac:	fb02 f203 	mul.w	r2, r2, r3
 80037b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b4:	4621      	mov	r1, r4
 80037b6:	fb01 f303 	mul.w	r3, r1, r3
 80037ba:	4413      	add	r3, r2
 80037bc:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80037c0:	4621      	mov	r1, r4
 80037c2:	fba2 1201 	umull	r1, r2, r2, r1
 80037c6:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80037ca:	460a      	mov	r2, r1
 80037cc:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 80037d0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80037d4:	4413      	add	r3, r2
 80037d6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80037da:	f04f 0200 	mov.w	r2, #0
 80037de:	f04f 0300 	mov.w	r3, #0
 80037e2:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 80037e6:	4621      	mov	r1, r4
 80037e8:	0cca      	lsrs	r2, r1, #19
 80037ea:	4629      	mov	r1, r5
 80037ec:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80037f0:	4629      	mov	r1, r5
 80037f2:	14cb      	asrs	r3, r1, #19
 80037f4:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 80037f8:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 80037fc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8003800:	1884      	adds	r4, r0, r2
 8003802:	65bc      	str	r4, [r7, #88]	@ 0x58
 8003804:	eb41 0303 	adc.w	r3, r1, r3
 8003808:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800380a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800380e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8003812:	4621      	mov	r1, r4
 8003814:	1889      	adds	r1, r1, r2
 8003816:	6539      	str	r1, [r7, #80]	@ 0x50
 8003818:	4629      	mov	r1, r5
 800381a:	eb43 0101 	adc.w	r1, r3, r1
 800381e:	6579      	str	r1, [r7, #84]	@ 0x54
 8003820:	f04f 0000 	mov.w	r0, #0
 8003824:	f04f 0100 	mov.w	r1, #0
 8003828:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800382c:	4623      	mov	r3, r4
 800382e:	0a18      	lsrs	r0, r3, #8
 8003830:	462b      	mov	r3, r5
 8003832:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8003836:	462b      	mov	r3, r5
 8003838:	1219      	asrs	r1, r3, #8
 800383a:	4b14      	ldr	r3, [pc, #80]	@ (800388c <BMP280_measureP+0x588>)
 800383c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003840:	b21b      	sxth	r3, r3
 8003842:	17da      	asrs	r2, r3, #31
 8003844:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003846:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003848:	f04f 0200 	mov.w	r2, #0
 800384c:	f04f 0300 	mov.w	r3, #0
 8003850:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8003854:	464c      	mov	r4, r9
 8003856:	0123      	lsls	r3, r4, #4
 8003858:	4644      	mov	r4, r8
 800385a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800385e:	4644      	mov	r4, r8
 8003860:	0122      	lsls	r2, r4, #4
 8003862:	1884      	adds	r4, r0, r2
 8003864:	603c      	str	r4, [r7, #0]
 8003866:	eb41 0303 	adc.w	r3, r1, r3
 800386a:	607b      	str	r3, [r7, #4]
 800386c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003870:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 8003874:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8003878:	4618      	mov	r0, r3
 800387a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800387e:	46bd      	mov	sp, r7
 8003880:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003884:	2400135a 	.word	0x2400135a
 8003888:	24001358 	.word	0x24001358
 800388c:	24001356 	.word	0x24001356

08003890 <BMP280_measureH>:

uint16_t BMP280_measureH(uint32_t Pres, int32_t Temp){
 8003890:	b580      	push	{r7, lr}
 8003892:	b088      	sub	sp, #32
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
	double var1, var2, h;

	if(Pres == 0) return 0;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d101      	bne.n	80038a4 <BMP280_measureH+0x14>
 80038a0:	2300      	movs	r3, #0
 80038a2:	e03d      	b.n	8003920 <BMP280_measureH+0x90>
	var1 = -log(((double)Pres)/101325);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	ee07 3a90 	vmov	s15, r3
 80038aa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80038ae:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8003928 <BMP280_measureH+0x98>
 80038b2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80038b6:	eeb0 0b46 	vmov.f64	d0, d6
 80038ba:	f014 feb1 	bl	8018620 <log>
 80038be:	eeb0 7b40 	vmov.f64	d7, d0
 80038c2:	eeb1 7b47 	vneg.f64	d7, d7
 80038c6:	ed87 7b06 	vstr	d7, [r7, #24]

	if(var1 == 0) return 0;
 80038ca:	ed97 7b06 	vldr	d7, [r7, #24]
 80038ce:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80038d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038d6:	d101      	bne.n	80038dc <BMP280_measureH+0x4c>
 80038d8:	2300      	movs	r3, #0
 80038da:	e021      	b.n	8003920 <BMP280_measureH+0x90>
	var2 = 0.0341663/((((double)Temp)/100)+273.15);
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	ee07 3a90 	vmov	s15, r3
 80038e2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80038e6:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8003930 <BMP280_measureH+0xa0>
 80038ea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80038ee:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 8003938 <BMP280_measureH+0xa8>
 80038f2:	ee37 6b06 	vadd.f64	d6, d7, d6
 80038f6:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8003940 <BMP280_measureH+0xb0>
 80038fa:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80038fe:	ed87 7b04 	vstr	d7, [r7, #16]
	h = var1/var2;
 8003902:	ed97 5b06 	vldr	d5, [r7, #24]
 8003906:	ed97 6b04 	vldr	d6, [r7, #16]
 800390a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800390e:	ed87 7b02 	vstr	d7, [r7, #8]
	return (uint16_t)h;
 8003912:	ed97 7b02 	vldr	d7, [r7, #8]
 8003916:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800391a:	ee17 3a90 	vmov	r3, s15
 800391e:	b29b      	uxth	r3, r3
}
 8003920:	4618      	mov	r0, r3
 8003922:	3720      	adds	r7, #32
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	00000000 	.word	0x00000000
 800392c:	40f8bcd0 	.word	0x40f8bcd0
 8003930:	00000000 	.word	0x00000000
 8003934:	40590000 	.word	0x40590000
 8003938:	66666666 	.word	0x66666666
 800393c:	40711266 	.word	0x40711266
 8003940:	ca402a92 	.word	0xca402a92
 8003944:	3fa17e3e 	.word	0x3fa17e3e

08003948 <BMP280_init>:

void BMP280_init(void){
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
	BMP280_unselect();
 800394c:	2201      	movs	r2, #1
 800394e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003952:	480d      	ldr	r0, [pc, #52]	@ (8003988 <BMP280_init+0x40>)
 8003954:	f005 fafe 	bl	8008f54 <HAL_GPIO_WritePin>
	BMP280_config();
 8003958:	f7ff fb8a 	bl	8003070 <BMP280_config>
	BMP280.ID = BMP280_read(0x89);
 800395c:	2089      	movs	r0, #137	@ 0x89
 800395e:	f7ff fb59 	bl	8003014 <BMP280_read>
 8003962:	4603      	mov	r3, r0
 8003964:	461a      	mov	r2, r3
 8003966:	4b09      	ldr	r3, [pc, #36]	@ (800398c <BMP280_init+0x44>)
 8003968:	701a      	strb	r2, [r3, #0]
	BMP280_calibrationData();
 800396a:	f7ff fb8d 	bl	8003088 <BMP280_calibrationData>
	BMP280_readRawValues();
 800396e:	f7ff fc41 	bl	80031f4 <BMP280_readRawValues>
	BMP280.Temp_inicial = BMP280_measureT(T_raw);
 8003972:	4b07      	ldr	r3, [pc, #28]	@ (8003990 <BMP280_init+0x48>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff fc80 	bl	800327c <BMP280_measureT>
 800397c:	4603      	mov	r3, r0
 800397e:	4a03      	ldr	r2, [pc, #12]	@ (800398c <BMP280_init+0x44>)
 8003980:	6093      	str	r3, [r2, #8]
}
 8003982:	bf00      	nop
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	58020400 	.word	0x58020400
 800398c:	24001330 	.word	0x24001330
 8003990:	2400135c 	.word	0x2400135c

08003994 <BMP280_calculate>:

void BMP280_calculate(void){
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
	//BMP280.ID = 0;
	BMP280.ID = BMP280_read(0x89);
 8003998:	2089      	movs	r0, #137	@ 0x89
 800399a:	f7ff fb3b 	bl	8003014 <BMP280_read>
 800399e:	4603      	mov	r3, r0
 80039a0:	461a      	mov	r2, r3
 80039a2:	4b16      	ldr	r3, [pc, #88]	@ (80039fc <BMP280_calculate+0x68>)
 80039a4:	701a      	strb	r2, [r3, #0]
	BMP280_readRawValues();
 80039a6:	f7ff fc25 	bl	80031f4 <BMP280_readRawValues>
	BMP280.Temp = BMP280_measureT(T_raw);
 80039aa:	4b15      	ldr	r3, [pc, #84]	@ (8003a00 <BMP280_calculate+0x6c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7ff fc64 	bl	800327c <BMP280_measureT>
 80039b4:	4603      	mov	r3, r0
 80039b6:	4a11      	ldr	r2, [pc, #68]	@ (80039fc <BMP280_calculate+0x68>)
 80039b8:	6053      	str	r3, [r2, #4]
	BMP280.Pressure    		= BMP280_measureP(P_raw)/256;
 80039ba:	4b12      	ldr	r3, [pc, #72]	@ (8003a04 <BMP280_calculate+0x70>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4618      	mov	r0, r3
 80039c0:	f7ff fca0 	bl	8003304 <BMP280_measureP>
 80039c4:	4603      	mov	r3, r0
 80039c6:	0a1b      	lsrs	r3, r3, #8
 80039c8:	4a0c      	ldr	r2, [pc, #48]	@ (80039fc <BMP280_calculate+0x68>)
 80039ca:	60d3      	str	r3, [r2, #12]
	BMP280.Barometric_Altitude = BMP280_measureH(BMP280.Pressure, BMP280.Temp_inicial);
 80039cc:	4b0b      	ldr	r3, [pc, #44]	@ (80039fc <BMP280_calculate+0x68>)
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	4a0a      	ldr	r2, [pc, #40]	@ (80039fc <BMP280_calculate+0x68>)
 80039d2:	6892      	ldr	r2, [r2, #8]
 80039d4:	4611      	mov	r1, r2
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7ff ff5a 	bl	8003890 <BMP280_measureH>
 80039dc:	4603      	mov	r3, r0
 80039de:	461a      	mov	r2, r3
 80039e0:	4b06      	ldr	r3, [pc, #24]	@ (80039fc <BMP280_calculate+0x68>)
 80039e2:	821a      	strh	r2, [r3, #16]

	if(BMP280.Barometric_Altitude > BMP280.Max_Altitude) BMP280.Max_Altitude = BMP280.Barometric_Altitude;
 80039e4:	4b05      	ldr	r3, [pc, #20]	@ (80039fc <BMP280_calculate+0x68>)
 80039e6:	8a1a      	ldrh	r2, [r3, #16]
 80039e8:	4b04      	ldr	r3, [pc, #16]	@ (80039fc <BMP280_calculate+0x68>)
 80039ea:	8a5b      	ldrh	r3, [r3, #18]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d903      	bls.n	80039f8 <BMP280_calculate+0x64>
 80039f0:	4b02      	ldr	r3, [pc, #8]	@ (80039fc <BMP280_calculate+0x68>)
 80039f2:	8a1a      	ldrh	r2, [r3, #16]
 80039f4:	4b01      	ldr	r3, [pc, #4]	@ (80039fc <BMP280_calculate+0x68>)
 80039f6:	825a      	strh	r2, [r3, #18]
}
 80039f8:	bf00      	nop
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	24001330 	.word	0x24001330
 8003a00:	2400135c 	.word	0x2400135c
 8003a04:	24001360 	.word	0x24001360

08003a08 <bno055_delay>:

BNO_CurrentState_e BNO_CurrentState = Init;

IMU_t IMU;

void bno055_delay(uint8_t time) {
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	4603      	mov	r3, r0
 8003a10:	71fb      	strb	r3, [r7, #7]
	BNO_DelayCounter += time;
 8003a12:	4b06      	ldr	r3, [pc, #24]	@ (8003a2c <bno055_delay+0x24>)
 8003a14:	781a      	ldrb	r2, [r3, #0]
 8003a16:	79fb      	ldrb	r3, [r7, #7]
 8003a18:	4413      	add	r3, r2
 8003a1a:	b2da      	uxtb	r2, r3
 8003a1c:	4b03      	ldr	r3, [pc, #12]	@ (8003a2c <bno055_delay+0x24>)
 8003a1e:	701a      	strb	r2, [r3, #0]
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	2400146b 	.word	0x2400146b

08003a30 <BNO_Read>:

HAL_StatusTypeDef BNO_Read(uint8_t Address,uint8_t Size){
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	4603      	mov	r3, r0
 8003a38:	460a      	mov	r2, r1
 8003a3a:	71fb      	strb	r3, [r7, #7]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	71bb      	strb	r3, [r7, #6]
	uint8_t ReadCommand[4] = {0xAA, 0x01, Address, Size};
 8003a40:	23aa      	movs	r3, #170	@ 0xaa
 8003a42:	723b      	strb	r3, [r7, #8]
 8003a44:	2301      	movs	r3, #1
 8003a46:	727b      	strb	r3, [r7, #9]
 8003a48:	79fb      	ldrb	r3, [r7, #7]
 8003a4a:	72bb      	strb	r3, [r7, #10]
 8003a4c:	79bb      	ldrb	r3, [r7, #6]
 8003a4e:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef uartError;

	BNO_RxBuffer[0] = Address;
 8003a50:	4a08      	ldr	r2, [pc, #32]	@ (8003a74 <BNO_Read+0x44>)
 8003a52:	79fb      	ldrb	r3, [r7, #7]
 8003a54:	7013      	strb	r3, [r2, #0]

	uartError = HAL_UART_Transmit(&huart3, ReadCommand, 4,100);
 8003a56:	f107 0108 	add.w	r1, r7, #8
 8003a5a:	2364      	movs	r3, #100	@ 0x64
 8003a5c:	2204      	movs	r2, #4
 8003a5e:	4806      	ldr	r0, [pc, #24]	@ (8003a78 <BNO_Read+0x48>)
 8003a60:	f00a fc9e 	bl	800e3a0 <HAL_UART_Transmit>
 8003a64:	4603      	mov	r3, r0
 8003a66:	73fb      	strb	r3, [r7, #15]
	return uartError;
 8003a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	24001368 	.word	0x24001368
 8003a78:	240010a0 	.word	0x240010a0

08003a7c <BNO_Write>:

HAL_StatusTypeDef BNO_Write(uint8_t Address,uint8_t Data){
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	4603      	mov	r3, r0
 8003a84:	460a      	mov	r2, r1
 8003a86:	71fb      	strb	r3, [r7, #7]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	71bb      	strb	r3, [r7, #6]
	uint8_t WriteCommand[5];
	HAL_StatusTypeDef uartError;

	WriteCommand[0] = 0xAA;
 8003a8c:	23aa      	movs	r3, #170	@ 0xaa
 8003a8e:	723b      	strb	r3, [r7, #8]
	WriteCommand[1] = 0x00;
 8003a90:	2300      	movs	r3, #0
 8003a92:	727b      	strb	r3, [r7, #9]
	WriteCommand[2] = Address;
 8003a94:	79fb      	ldrb	r3, [r7, #7]
 8003a96:	72bb      	strb	r3, [r7, #10]
	WriteCommand[3] = 1;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	72fb      	strb	r3, [r7, #11]
	WriteCommand[4] = Data;
 8003a9c:	79bb      	ldrb	r3, [r7, #6]
 8003a9e:	733b      	strb	r3, [r7, #12]

	uartError = HAL_UART_Transmit(&huart3, WriteCommand,5,100);
 8003aa0:	f107 0108 	add.w	r1, r7, #8
 8003aa4:	2364      	movs	r3, #100	@ 0x64
 8003aa6:	2205      	movs	r2, #5
 8003aa8:	4804      	ldr	r0, [pc, #16]	@ (8003abc <BNO_Write+0x40>)
 8003aaa:	f00a fc79 	bl	800e3a0 <HAL_UART_Transmit>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	73fb      	strb	r3, [r7, #15]
	return uartError;
 8003ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	240010a0 	.word	0x240010a0

08003ac0 <BNO_Write_MB>:

HAL_StatusTypeDef BNO_Write_MB(uint8_t Address,uint8_t Size, uint8_t *pData){
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b0c4      	sub	sp, #272	@ 0x110
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003aca:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003ad4:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8003ad8:	4602      	mov	r2, r0
 8003ada:	701a      	strb	r2, [r3, #0]
 8003adc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003ae0:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8003ae4:	460a      	mov	r2, r1
 8003ae6:	701a      	strb	r2, [r3, #0]
    uint8_t WriteCommand[255];
    HAL_StatusTypeDef uartError;

    WriteCommand[0] = 0xAA;
 8003ae8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003aec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003af0:	22aa      	movs	r2, #170	@ 0xaa
 8003af2:	701a      	strb	r2, [r3, #0]
    WriteCommand[1] = 0x00;
 8003af4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003af8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003afc:	2200      	movs	r2, #0
 8003afe:	705a      	strb	r2, [r3, #1]
    WriteCommand[2] = Address;
 8003b00:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003b04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003b08:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003b0c:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 8003b10:	7812      	ldrb	r2, [r2, #0]
 8003b12:	709a      	strb	r2, [r3, #2]
    WriteCommand[3] = Size;
 8003b14:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003b18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003b1c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003b20:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8003b24:	7812      	ldrb	r2, [r2, #0]
 8003b26:	70da      	strb	r2, [r3, #3]

    for (uint8_t n = 0; n < Size; ++n) {
 8003b28:	2300      	movs	r3, #0
 8003b2a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8003b2e:	e015      	b.n	8003b5c <BNO_Write_MB+0x9c>
        WriteCommand[n + 4] = pData[n];
 8003b30:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8003b34:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003b38:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8003b3c:	6812      	ldr	r2, [r2, #0]
 8003b3e:	441a      	add	r2, r3
 8003b40:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8003b44:	3304      	adds	r3, #4
 8003b46:	7811      	ldrb	r1, [r2, #0]
 8003b48:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003b4c:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8003b50:	54d1      	strb	r1, [r2, r3]
    for (uint8_t n = 0; n < Size; ++n) {
 8003b52:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8003b56:	3301      	adds	r3, #1
 8003b58:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8003b5c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003b60:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8003b64:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d3e0      	bcc.n	8003b30 <BNO_Write_MB+0x70>
    }

    uartError = HAL_UART_Transmit(&huart3, WriteCommand, (Size + 4),100);
 8003b6e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003b72:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	3304      	adds	r3, #4
 8003b7c:	b29a      	uxth	r2, r3
 8003b7e:	f107 010c 	add.w	r1, r7, #12
 8003b82:	2364      	movs	r3, #100	@ 0x64
 8003b84:	4806      	ldr	r0, [pc, #24]	@ (8003ba0 <BNO_Write_MB+0xe0>)
 8003b86:	f00a fc0b 	bl	800e3a0 <HAL_UART_Transmit>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
    return uartError;
 8003b90:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	240010a0 	.word	0x240010a0

08003ba4 <BNO_Page0Adress>:

void BNO_Page0Adress(void){
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
	switch (BNO_RxBuffer[0]) {
 8003ba8:	4ba6      	ldr	r3, [pc, #664]	@ (8003e44 <BNO_Page0Adress+0x2a0>)
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	2b55      	cmp	r3, #85	@ 0x55
 8003bae:	f300 8247 	bgt.w	8004040 <BNO_Page0Adress+0x49c>
 8003bb2:	2b35      	cmp	r3, #53	@ 0x35
 8003bb4:	da0a      	bge.n	8003bcc <BNO_Page0Adress+0x28>
 8003bb6:	2b08      	cmp	r3, #8
 8003bb8:	f000 814a 	beq.w	8003e50 <BNO_Page0Adress+0x2ac>
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	f300 823f 	bgt.w	8004040 <BNO_Page0Adress+0x49c>
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d04c      	beq.n	8003c60 <BNO_Page0Adress+0xbc>
 8003bc6:	2b07      	cmp	r3, #7
 8003bc8:	d064      	beq.n	8003c94 <BNO_Page0Adress+0xf0>
			IMU.Roll = ((float)((int16_t)((BNO_RxBuffer[24] << 8) | BNO_RxBuffer[23])))/16;

			BNO_ErrorHandler = ReadSucces;
			break;
		default:
			break;
 8003bca:	e239      	b.n	8004040 <BNO_Page0Adress+0x49c>
	switch (BNO_RxBuffer[0]) {
 8003bcc:	3b35      	subs	r3, #53	@ 0x35
 8003bce:	2b20      	cmp	r3, #32
 8003bd0:	f200 8236 	bhi.w	8004040 <BNO_Page0Adress+0x49c>
 8003bd4:	a201      	add	r2, pc, #4	@ (adr r2, 8003bdc <BNO_Page0Adress+0x38>)
 8003bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bda:	bf00      	nop
 8003bdc:	08003cdd 	.word	0x08003cdd
 8003be0:	08004041 	.word	0x08004041
 8003be4:	08004041 	.word	0x08004041
 8003be8:	08004041 	.word	0x08004041
 8003bec:	08003cb9 	.word	0x08003cb9
 8003bf0:	08004041 	.word	0x08004041
 8003bf4:	08003ca7 	.word	0x08003ca7
 8003bf8:	08004041 	.word	0x08004041
 8003bfc:	08003ccb 	.word	0x08003ccb
 8003c00:	08004041 	.word	0x08004041
 8003c04:	08004041 	.word	0x08004041
 8003c08:	08004041 	.word	0x08004041
 8003c0c:	08004041 	.word	0x08004041
 8003c10:	08004041 	.word	0x08004041
 8003c14:	08004041 	.word	0x08004041
 8003c18:	08004041 	.word	0x08004041
 8003c1c:	08004041 	.word	0x08004041
 8003c20:	08004041 	.word	0x08004041
 8003c24:	08004041 	.word	0x08004041
 8003c28:	08004041 	.word	0x08004041
 8003c2c:	08004041 	.word	0x08004041
 8003c30:	08004041 	.word	0x08004041
 8003c34:	08004041 	.word	0x08004041
 8003c38:	08004041 	.word	0x08004041
 8003c3c:	08004041 	.word	0x08004041
 8003c40:	08004041 	.word	0x08004041
 8003c44:	08004041 	.word	0x08004041
 8003c48:	08004041 	.word	0x08004041
 8003c4c:	08004041 	.word	0x08004041
 8003c50:	08004041 	.word	0x08004041
 8003c54:	08004041 	.word	0x08004041
 8003c58:	08004041 	.word	0x08004041
 8003c5c:	08003d35 	.word	0x08003d35
			if(BNO_RxBuffer[1] != 160) return;
 8003c60:	4b78      	ldr	r3, [pc, #480]	@ (8003e44 <BNO_Page0Adress+0x2a0>)
 8003c62:	785b      	ldrb	r3, [r3, #1]
 8003c64:	2ba0      	cmp	r3, #160	@ 0xa0
 8003c66:	f040 81ed 	bne.w	8004044 <BNO_Page0Adress+0x4a0>
			IMU.ID = BNO_RxBuffer[1];
 8003c6a:	4b76      	ldr	r3, [pc, #472]	@ (8003e44 <BNO_Page0Adress+0x2a0>)
 8003c6c:	785a      	ldrb	r2, [r3, #1]
 8003c6e:	4b76      	ldr	r3, [pc, #472]	@ (8003e48 <BNO_Page0Adress+0x2a4>)
 8003c70:	701a      	strb	r2, [r3, #0]
			IMU.ACC.ID = BNO_RxBuffer[2];
 8003c72:	4b74      	ldr	r3, [pc, #464]	@ (8003e44 <BNO_Page0Adress+0x2a0>)
 8003c74:	789a      	ldrb	r2, [r3, #2]
 8003c76:	4b74      	ldr	r3, [pc, #464]	@ (8003e48 <BNO_Page0Adress+0x2a4>)
 8003c78:	711a      	strb	r2, [r3, #4]
			IMU.MAG.ID = BNO_RxBuffer[3];
 8003c7a:	4b72      	ldr	r3, [pc, #456]	@ (8003e44 <BNO_Page0Adress+0x2a0>)
 8003c7c:	78da      	ldrb	r2, [r3, #3]
 8003c7e:	4b72      	ldr	r3, [pc, #456]	@ (8003e48 <BNO_Page0Adress+0x2a4>)
 8003c80:	751a      	strb	r2, [r3, #20]
			IMU.GYR.ID = BNO_RxBuffer[4];
 8003c82:	4b70      	ldr	r3, [pc, #448]	@ (8003e44 <BNO_Page0Adress+0x2a0>)
 8003c84:	791a      	ldrb	r2, [r3, #4]
 8003c86:	4b70      	ldr	r3, [pc, #448]	@ (8003e48 <BNO_Page0Adress+0x2a4>)
 8003c88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			BNO_ErrorHandler = ReadSucces;
 8003c8c:	4b6f      	ldr	r3, [pc, #444]	@ (8003e4c <BNO_Page0Adress+0x2a8>)
 8003c8e:	220b      	movs	r2, #11
 8003c90:	701a      	strb	r2, [r3, #0]
			break;
 8003c92:	e1d8      	b.n	8004046 <BNO_Page0Adress+0x4a2>
			IMU.Page = BNO_RxBuffer[1];
 8003c94:	4b6b      	ldr	r3, [pc, #428]	@ (8003e44 <BNO_Page0Adress+0x2a0>)
 8003c96:	785a      	ldrb	r2, [r3, #1]
 8003c98:	4b6b      	ldr	r3, [pc, #428]	@ (8003e48 <BNO_Page0Adress+0x2a4>)
 8003c9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			BNO_ErrorHandler = ReadSucces;
 8003c9e:	4b6b      	ldr	r3, [pc, #428]	@ (8003e4c <BNO_Page0Adress+0x2a8>)
 8003ca0:	220b      	movs	r2, #11
 8003ca2:	701a      	strb	r2, [r3, #0]
			break;
 8003ca4:	e1cf      	b.n	8004046 <BNO_Page0Adress+0x4a2>
			IMU.Unit_Select = BNO_RxBuffer[1];
 8003ca6:	4b67      	ldr	r3, [pc, #412]	@ (8003e44 <BNO_Page0Adress+0x2a0>)
 8003ca8:	785a      	ldrb	r2, [r3, #1]
 8003caa:	4b67      	ldr	r3, [pc, #412]	@ (8003e48 <BNO_Page0Adress+0x2a4>)
 8003cac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
			BNO_ErrorHandler = ReadSucces;
 8003cb0:	4b66      	ldr	r3, [pc, #408]	@ (8003e4c <BNO_Page0Adress+0x2a8>)
 8003cb2:	220b      	movs	r2, #11
 8003cb4:	701a      	strb	r2, [r3, #0]
			break;
 8003cb6:	e1c6      	b.n	8004046 <BNO_Page0Adress+0x4a2>
			IMU.System_Status = BNO_RxBuffer[1];
 8003cb8:	4b62      	ldr	r3, [pc, #392]	@ (8003e44 <BNO_Page0Adress+0x2a0>)
 8003cba:	785a      	ldrb	r2, [r3, #1]
 8003cbc:	4b62      	ldr	r3, [pc, #392]	@ (8003e48 <BNO_Page0Adress+0x2a4>)
 8003cbe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
			BNO_ErrorHandler = ReadSucces;
 8003cc2:	4b62      	ldr	r3, [pc, #392]	@ (8003e4c <BNO_Page0Adress+0x2a8>)
 8003cc4:	220b      	movs	r2, #11
 8003cc6:	701a      	strb	r2, [r3, #0]
			break;
 8003cc8:	e1bd      	b.n	8004046 <BNO_Page0Adress+0x4a2>
			IMU.Op_Mode = BNO_RxBuffer[1];
 8003cca:	4b5e      	ldr	r3, [pc, #376]	@ (8003e44 <BNO_Page0Adress+0x2a0>)
 8003ccc:	785a      	ldrb	r2, [r3, #1]
 8003cce:	4b5e      	ldr	r3, [pc, #376]	@ (8003e48 <BNO_Page0Adress+0x2a4>)
 8003cd0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
			BNO_ErrorHandler = ReadSucces;
 8003cd4:	4b5d      	ldr	r3, [pc, #372]	@ (8003e4c <BNO_Page0Adress+0x2a8>)
 8003cd6:	220b      	movs	r2, #11
 8003cd8:	701a      	strb	r2, [r3, #0]
			break;
 8003cda:	e1b4      	b.n	8004046 <BNO_Page0Adress+0x4a2>
			IMU.CalSatus.Full = BNO_RxBuffer[1];
 8003cdc:	4b59      	ldr	r3, [pc, #356]	@ (8003e44 <BNO_Page0Adress+0x2a0>)
 8003cde:	785a      	ldrb	r2, [r3, #1]
 8003ce0:	4b59      	ldr	r3, [pc, #356]	@ (8003e48 <BNO_Page0Adress+0x2a4>)
 8003ce2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			IMU.CalSatus.Sys = (BNO_RxBuffer[1] >> 6) & 0x03;
 8003ce6:	4b57      	ldr	r3, [pc, #348]	@ (8003e44 <BNO_Page0Adress+0x2a0>)
 8003ce8:	785b      	ldrb	r3, [r3, #1]
 8003cea:	099b      	lsrs	r3, r3, #6
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	4b56      	ldr	r3, [pc, #344]	@ (8003e48 <BNO_Page0Adress+0x2a4>)
 8003cf0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			IMU.CalSatus.Gyr = (BNO_RxBuffer[1] >> 4) & 0x03;
 8003cf4:	4b53      	ldr	r3, [pc, #332]	@ (8003e44 <BNO_Page0Adress+0x2a0>)
 8003cf6:	785b      	ldrb	r3, [r3, #1]
 8003cf8:	091b      	lsrs	r3, r3, #4
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	f003 0303 	and.w	r3, r3, #3
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	4b51      	ldr	r3, [pc, #324]	@ (8003e48 <BNO_Page0Adress+0x2a4>)
 8003d04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
			IMU.CalSatus.Acc = (BNO_RxBuffer[1] >> 2) & 0x03;
 8003d08:	4b4e      	ldr	r3, [pc, #312]	@ (8003e44 <BNO_Page0Adress+0x2a0>)
 8003d0a:	785b      	ldrb	r3, [r3, #1]
 8003d0c:	089b      	lsrs	r3, r3, #2
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	f003 0303 	and.w	r3, r3, #3
 8003d14:	b2da      	uxtb	r2, r3
 8003d16:	4b4c      	ldr	r3, [pc, #304]	@ (8003e48 <BNO_Page0Adress+0x2a4>)
 8003d18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
			IMU.CalSatus.Mag = BNO_RxBuffer[1] & 0x03;
 8003d1c:	4b49      	ldr	r3, [pc, #292]	@ (8003e44 <BNO_Page0Adress+0x2a0>)
 8003d1e:	785b      	ldrb	r3, [r3, #1]
 8003d20:	f003 0303 	and.w	r3, r3, #3
 8003d24:	b2da      	uxtb	r2, r3
 8003d26:	4b48      	ldr	r3, [pc, #288]	@ (8003e48 <BNO_Page0Adress+0x2a4>)
 8003d28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			BNO_ErrorHandler = ReadSucces;
 8003d2c:	4b47      	ldr	r3, [pc, #284]	@ (8003e4c <BNO_Page0Adress+0x2a8>)
 8003d2e:	220b      	movs	r2, #11
 8003d30:	701a      	strb	r2, [r3, #0]
			break;
 8003d32:	e188      	b.n	8004046 <BNO_Page0Adress+0x4a2>
			IMU.Calibration_Data.offset.accel.x = (int16_t)((BNO_RxBuffer[2] << 8) | BNO_RxBuffer[1]);
 8003d34:	4b43      	ldr	r3, [pc, #268]	@ (8003e44 <BNO_Page0Adress+0x2a0>)
 8003d36:	789b      	ldrb	r3, [r3, #2]
 8003d38:	021b      	lsls	r3, r3, #8
 8003d3a:	b21a      	sxth	r2, r3
 8003d3c:	4b41      	ldr	r3, [pc, #260]	@ (8003e44 <BNO_Page0Adress+0x2a0>)
 8003d3e:	785b      	ldrb	r3, [r3, #1]
 8003d40:	b21b      	sxth	r3, r3
 8003d42:	4313      	orrs	r3, r2
 8003d44:	b21a      	sxth	r2, r3
 8003d46:	4b40      	ldr	r3, [pc, #256]	@ (8003e48 <BNO_Page0Adress+0x2a4>)
 8003d48:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
			IMU.Calibration_Data.offset.accel.y = (int16_t)((BNO_RxBuffer[4] << 8) | BNO_RxBuffer[3]);
 8003d4c:	4b3d      	ldr	r3, [pc, #244]	@ (8003e44 <BNO_Page0Adress+0x2a0>)
 8003d4e:	791b      	ldrb	r3, [r3, #4]
 8003d50:	021b      	lsls	r3, r3, #8
 8003d52:	b21a      	sxth	r2, r3
 8003d54:	4b3b      	ldr	r3, [pc, #236]	@ (8003e44 <BNO_Page0Adress+0x2a0>)
 8003d56:	78db      	ldrb	r3, [r3, #3]
 8003d58:	b21b      	sxth	r3, r3
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	b21a      	sxth	r2, r3
 8003d5e:	4b3a      	ldr	r3, [pc, #232]	@ (8003e48 <BNO_Page0Adress+0x2a4>)
 8003d60:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
			IMU.Calibration_Data.offset.accel.z = (int16_t)((BNO_RxBuffer[6] << 8) | BNO_RxBuffer[5]);
 8003d64:	4b37      	ldr	r3, [pc, #220]	@ (8003e44 <BNO_Page0Adress+0x2a0>)
 8003d66:	799b      	ldrb	r3, [r3, #6]
 8003d68:	021b      	lsls	r3, r3, #8
 8003d6a:	b21a      	sxth	r2, r3
 8003d6c:	4b35      	ldr	r3, [pc, #212]	@ (8003e44 <BNO_Page0Adress+0x2a0>)
 8003d6e:	795b      	ldrb	r3, [r3, #5]
 8003d70:	b21b      	sxth	r3, r3
 8003d72:	4313      	orrs	r3, r2
 8003d74:	b21a      	sxth	r2, r3
 8003d76:	4b34      	ldr	r3, [pc, #208]	@ (8003e48 <BNO_Page0Adress+0x2a4>)
 8003d78:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
			IMU.Calibration_Data.offset.mag.x = (int16_t)((BNO_RxBuffer[8] << 8) | BNO_RxBuffer[7]);
 8003d7c:	4b31      	ldr	r3, [pc, #196]	@ (8003e44 <BNO_Page0Adress+0x2a0>)
 8003d7e:	7a1b      	ldrb	r3, [r3, #8]
 8003d80:	021b      	lsls	r3, r3, #8
 8003d82:	b21a      	sxth	r2, r3
 8003d84:	4b2f      	ldr	r3, [pc, #188]	@ (8003e44 <BNO_Page0Adress+0x2a0>)
 8003d86:	79db      	ldrb	r3, [r3, #7]
 8003d88:	b21b      	sxth	r3, r3
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	b21a      	sxth	r2, r3
 8003d8e:	4b2e      	ldr	r3, [pc, #184]	@ (8003e48 <BNO_Page0Adress+0x2a4>)
 8003d90:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
			IMU.Calibration_Data.offset.mag.y = (int16_t)((BNO_RxBuffer[10] << 8) | BNO_RxBuffer[9]);
 8003d94:	4b2b      	ldr	r3, [pc, #172]	@ (8003e44 <BNO_Page0Adress+0x2a0>)
 8003d96:	7a9b      	ldrb	r3, [r3, #10]
 8003d98:	021b      	lsls	r3, r3, #8
 8003d9a:	b21a      	sxth	r2, r3
 8003d9c:	4b29      	ldr	r3, [pc, #164]	@ (8003e44 <BNO_Page0Adress+0x2a0>)
 8003d9e:	7a5b      	ldrb	r3, [r3, #9]
 8003da0:	b21b      	sxth	r3, r3
 8003da2:	4313      	orrs	r3, r2
 8003da4:	b21a      	sxth	r2, r3
 8003da6:	4b28      	ldr	r3, [pc, #160]	@ (8003e48 <BNO_Page0Adress+0x2a4>)
 8003da8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
			IMU.Calibration_Data.offset.mag.z = (int16_t)((BNO_RxBuffer[12] << 8) | BNO_RxBuffer[11]);
 8003dac:	4b25      	ldr	r3, [pc, #148]	@ (8003e44 <BNO_Page0Adress+0x2a0>)
 8003dae:	7b1b      	ldrb	r3, [r3, #12]
 8003db0:	021b      	lsls	r3, r3, #8
 8003db2:	b21a      	sxth	r2, r3
 8003db4:	4b23      	ldr	r3, [pc, #140]	@ (8003e44 <BNO_Page0Adress+0x2a0>)
 8003db6:	7adb      	ldrb	r3, [r3, #11]
 8003db8:	b21b      	sxth	r3, r3
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	b21a      	sxth	r2, r3
 8003dbe:	4b22      	ldr	r3, [pc, #136]	@ (8003e48 <BNO_Page0Adress+0x2a4>)
 8003dc0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
			IMU.Calibration_Data.offset.gyro.x = (int16_t)((BNO_RxBuffer[14] << 8) | BNO_RxBuffer[13]);
 8003dc4:	4b1f      	ldr	r3, [pc, #124]	@ (8003e44 <BNO_Page0Adress+0x2a0>)
 8003dc6:	7b9b      	ldrb	r3, [r3, #14]
 8003dc8:	021b      	lsls	r3, r3, #8
 8003dca:	b21a      	sxth	r2, r3
 8003dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8003e44 <BNO_Page0Adress+0x2a0>)
 8003dce:	7b5b      	ldrb	r3, [r3, #13]
 8003dd0:	b21b      	sxth	r3, r3
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	b21a      	sxth	r2, r3
 8003dd6:	4b1c      	ldr	r3, [pc, #112]	@ (8003e48 <BNO_Page0Adress+0x2a4>)
 8003dd8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
			IMU.Calibration_Data.offset.gyro.y = (int16_t)((BNO_RxBuffer[16] << 8) | BNO_RxBuffer[15]);
 8003ddc:	4b19      	ldr	r3, [pc, #100]	@ (8003e44 <BNO_Page0Adress+0x2a0>)
 8003dde:	7c1b      	ldrb	r3, [r3, #16]
 8003de0:	021b      	lsls	r3, r3, #8
 8003de2:	b21a      	sxth	r2, r3
 8003de4:	4b17      	ldr	r3, [pc, #92]	@ (8003e44 <BNO_Page0Adress+0x2a0>)
 8003de6:	7bdb      	ldrb	r3, [r3, #15]
 8003de8:	b21b      	sxth	r3, r3
 8003dea:	4313      	orrs	r3, r2
 8003dec:	b21a      	sxth	r2, r3
 8003dee:	4b16      	ldr	r3, [pc, #88]	@ (8003e48 <BNO_Page0Adress+0x2a4>)
 8003df0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
			IMU.Calibration_Data.offset.gyro.z = (int16_t)((BNO_RxBuffer[18] << 8) | BNO_RxBuffer[17]);
 8003df4:	4b13      	ldr	r3, [pc, #76]	@ (8003e44 <BNO_Page0Adress+0x2a0>)
 8003df6:	7c9b      	ldrb	r3, [r3, #18]
 8003df8:	021b      	lsls	r3, r3, #8
 8003dfa:	b21a      	sxth	r2, r3
 8003dfc:	4b11      	ldr	r3, [pc, #68]	@ (8003e44 <BNO_Page0Adress+0x2a0>)
 8003dfe:	7c5b      	ldrb	r3, [r3, #17]
 8003e00:	b21b      	sxth	r3, r3
 8003e02:	4313      	orrs	r3, r2
 8003e04:	b21a      	sxth	r2, r3
 8003e06:	4b10      	ldr	r3, [pc, #64]	@ (8003e48 <BNO_Page0Adress+0x2a4>)
 8003e08:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
			IMU.Calibration_Data.radius.accel = (uint16_t)((BNO_RxBuffer[20] << 8) | BNO_RxBuffer[19]);
 8003e0c:	4b0d      	ldr	r3, [pc, #52]	@ (8003e44 <BNO_Page0Adress+0x2a0>)
 8003e0e:	7d1b      	ldrb	r3, [r3, #20]
 8003e10:	021b      	lsls	r3, r3, #8
 8003e12:	b21a      	sxth	r2, r3
 8003e14:	4b0b      	ldr	r3, [pc, #44]	@ (8003e44 <BNO_Page0Adress+0x2a0>)
 8003e16:	7cdb      	ldrb	r3, [r3, #19]
 8003e18:	b21b      	sxth	r3, r3
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	b21b      	sxth	r3, r3
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	4b09      	ldr	r3, [pc, #36]	@ (8003e48 <BNO_Page0Adress+0x2a4>)
 8003e22:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
			IMU.Calibration_Data.radius.mag   = (uint16_t)((BNO_RxBuffer[22] << 8) | BNO_RxBuffer[21]);
 8003e26:	4b07      	ldr	r3, [pc, #28]	@ (8003e44 <BNO_Page0Adress+0x2a0>)
 8003e28:	7d9b      	ldrb	r3, [r3, #22]
 8003e2a:	021b      	lsls	r3, r3, #8
 8003e2c:	b21a      	sxth	r2, r3
 8003e2e:	4b05      	ldr	r3, [pc, #20]	@ (8003e44 <BNO_Page0Adress+0x2a0>)
 8003e30:	7d5b      	ldrb	r3, [r3, #21]
 8003e32:	b21b      	sxth	r3, r3
 8003e34:	4313      	orrs	r3, r2
 8003e36:	b21b      	sxth	r3, r3
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	4b03      	ldr	r3, [pc, #12]	@ (8003e48 <BNO_Page0Adress+0x2a4>)
 8003e3c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
			break;
 8003e40:	e101      	b.n	8004046 <BNO_Page0Adress+0x4a2>
 8003e42:	bf00      	nop
 8003e44:	24001368 	.word	0x24001368
 8003e48:	24001470 	.word	0x24001470
 8003e4c:	24001469 	.word	0x24001469
			IMU.ACC.x = ((float)((int16_t)((BNO_RxBuffer[2] << 8) | BNO_RxBuffer[1])))/100;
 8003e50:	4b7f      	ldr	r3, [pc, #508]	@ (8004050 <BNO_Page0Adress+0x4ac>)
 8003e52:	789b      	ldrb	r3, [r3, #2]
 8003e54:	021b      	lsls	r3, r3, #8
 8003e56:	b21a      	sxth	r2, r3
 8003e58:	4b7d      	ldr	r3, [pc, #500]	@ (8004050 <BNO_Page0Adress+0x4ac>)
 8003e5a:	785b      	ldrb	r3, [r3, #1]
 8003e5c:	b21b      	sxth	r3, r3
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	b21b      	sxth	r3, r3
 8003e62:	ee07 3a90 	vmov	s15, r3
 8003e66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e6a:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8004054 <BNO_Page0Adress+0x4b0>
 8003e6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e72:	4b79      	ldr	r3, [pc, #484]	@ (8004058 <BNO_Page0Adress+0x4b4>)
 8003e74:	edc3 7a02 	vstr	s15, [r3, #8]
			IMU.ACC.y = ((float)((int16_t)((BNO_RxBuffer[4] << 8) | BNO_RxBuffer[3])))/100;
 8003e78:	4b75      	ldr	r3, [pc, #468]	@ (8004050 <BNO_Page0Adress+0x4ac>)
 8003e7a:	791b      	ldrb	r3, [r3, #4]
 8003e7c:	021b      	lsls	r3, r3, #8
 8003e7e:	b21a      	sxth	r2, r3
 8003e80:	4b73      	ldr	r3, [pc, #460]	@ (8004050 <BNO_Page0Adress+0x4ac>)
 8003e82:	78db      	ldrb	r3, [r3, #3]
 8003e84:	b21b      	sxth	r3, r3
 8003e86:	4313      	orrs	r3, r2
 8003e88:	b21b      	sxth	r3, r3
 8003e8a:	ee07 3a90 	vmov	s15, r3
 8003e8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e92:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8004054 <BNO_Page0Adress+0x4b0>
 8003e96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e9a:	4b6f      	ldr	r3, [pc, #444]	@ (8004058 <BNO_Page0Adress+0x4b4>)
 8003e9c:	edc3 7a03 	vstr	s15, [r3, #12]
			IMU.ACC.z = ((float)((int16_t)((BNO_RxBuffer[6] << 8) | BNO_RxBuffer[5])))/100;
 8003ea0:	4b6b      	ldr	r3, [pc, #428]	@ (8004050 <BNO_Page0Adress+0x4ac>)
 8003ea2:	799b      	ldrb	r3, [r3, #6]
 8003ea4:	021b      	lsls	r3, r3, #8
 8003ea6:	b21a      	sxth	r2, r3
 8003ea8:	4b69      	ldr	r3, [pc, #420]	@ (8004050 <BNO_Page0Adress+0x4ac>)
 8003eaa:	795b      	ldrb	r3, [r3, #5]
 8003eac:	b21b      	sxth	r3, r3
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	b21b      	sxth	r3, r3
 8003eb2:	ee07 3a90 	vmov	s15, r3
 8003eb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003eba:	eddf 6a66 	vldr	s13, [pc, #408]	@ 8004054 <BNO_Page0Adress+0x4b0>
 8003ebe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ec2:	4b65      	ldr	r3, [pc, #404]	@ (8004058 <BNO_Page0Adress+0x4b4>)
 8003ec4:	edc3 7a04 	vstr	s15, [r3, #16]
			IMU.MAG.x = ((float)((int16_t)((BNO_RxBuffer[8] << 8) | BNO_RxBuffer[7])))/16;
 8003ec8:	4b61      	ldr	r3, [pc, #388]	@ (8004050 <BNO_Page0Adress+0x4ac>)
 8003eca:	7a1b      	ldrb	r3, [r3, #8]
 8003ecc:	021b      	lsls	r3, r3, #8
 8003ece:	b21a      	sxth	r2, r3
 8003ed0:	4b5f      	ldr	r3, [pc, #380]	@ (8004050 <BNO_Page0Adress+0x4ac>)
 8003ed2:	79db      	ldrb	r3, [r3, #7]
 8003ed4:	b21b      	sxth	r3, r3
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	b21b      	sxth	r3, r3
 8003eda:	ee07 3a90 	vmov	s15, r3
 8003ede:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ee2:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8003ee6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003eea:	4b5b      	ldr	r3, [pc, #364]	@ (8004058 <BNO_Page0Adress+0x4b4>)
 8003eec:	edc3 7a06 	vstr	s15, [r3, #24]
			IMU.MAG.y = ((float)((int16_t)((BNO_RxBuffer[10] << 8) | BNO_RxBuffer[9])))/16;
 8003ef0:	4b57      	ldr	r3, [pc, #348]	@ (8004050 <BNO_Page0Adress+0x4ac>)
 8003ef2:	7a9b      	ldrb	r3, [r3, #10]
 8003ef4:	021b      	lsls	r3, r3, #8
 8003ef6:	b21a      	sxth	r2, r3
 8003ef8:	4b55      	ldr	r3, [pc, #340]	@ (8004050 <BNO_Page0Adress+0x4ac>)
 8003efa:	7a5b      	ldrb	r3, [r3, #9]
 8003efc:	b21b      	sxth	r3, r3
 8003efe:	4313      	orrs	r3, r2
 8003f00:	b21b      	sxth	r3, r3
 8003f02:	ee07 3a90 	vmov	s15, r3
 8003f06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f0a:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8003f0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f12:	4b51      	ldr	r3, [pc, #324]	@ (8004058 <BNO_Page0Adress+0x4b4>)
 8003f14:	edc3 7a07 	vstr	s15, [r3, #28]
			IMU.MAG.z = ((float)((int16_t)((BNO_RxBuffer[12] << 8) | BNO_RxBuffer[11])))/16;
 8003f18:	4b4d      	ldr	r3, [pc, #308]	@ (8004050 <BNO_Page0Adress+0x4ac>)
 8003f1a:	7b1b      	ldrb	r3, [r3, #12]
 8003f1c:	021b      	lsls	r3, r3, #8
 8003f1e:	b21a      	sxth	r2, r3
 8003f20:	4b4b      	ldr	r3, [pc, #300]	@ (8004050 <BNO_Page0Adress+0x4ac>)
 8003f22:	7adb      	ldrb	r3, [r3, #11]
 8003f24:	b21b      	sxth	r3, r3
 8003f26:	4313      	orrs	r3, r2
 8003f28:	b21b      	sxth	r3, r3
 8003f2a:	ee07 3a90 	vmov	s15, r3
 8003f2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f32:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8003f36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f3a:	4b47      	ldr	r3, [pc, #284]	@ (8004058 <BNO_Page0Adress+0x4b4>)
 8003f3c:	edc3 7a08 	vstr	s15, [r3, #32]
			IMU.GYR.x = ((float)((int16_t)((BNO_RxBuffer[14] << 8) | BNO_RxBuffer[13])))/16;
 8003f40:	4b43      	ldr	r3, [pc, #268]	@ (8004050 <BNO_Page0Adress+0x4ac>)
 8003f42:	7b9b      	ldrb	r3, [r3, #14]
 8003f44:	021b      	lsls	r3, r3, #8
 8003f46:	b21a      	sxth	r2, r3
 8003f48:	4b41      	ldr	r3, [pc, #260]	@ (8004050 <BNO_Page0Adress+0x4ac>)
 8003f4a:	7b5b      	ldrb	r3, [r3, #13]
 8003f4c:	b21b      	sxth	r3, r3
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	b21b      	sxth	r3, r3
 8003f52:	ee07 3a90 	vmov	s15, r3
 8003f56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f5a:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8003f5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f62:	4b3d      	ldr	r3, [pc, #244]	@ (8004058 <BNO_Page0Adress+0x4b4>)
 8003f64:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
			IMU.GYR.y = -((float)((int16_t)((BNO_RxBuffer[16] << 8) | BNO_RxBuffer[15])))/16;
 8003f68:	4b39      	ldr	r3, [pc, #228]	@ (8004050 <BNO_Page0Adress+0x4ac>)
 8003f6a:	7c1b      	ldrb	r3, [r3, #16]
 8003f6c:	021b      	lsls	r3, r3, #8
 8003f6e:	b21a      	sxth	r2, r3
 8003f70:	4b37      	ldr	r3, [pc, #220]	@ (8004050 <BNO_Page0Adress+0x4ac>)
 8003f72:	7bdb      	ldrb	r3, [r3, #15]
 8003f74:	b21b      	sxth	r3, r3
 8003f76:	4313      	orrs	r3, r2
 8003f78:	b21b      	sxth	r3, r3
 8003f7a:	ee07 3a90 	vmov	s15, r3
 8003f7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f82:	eeb1 7a67 	vneg.f32	s14, s15
 8003f86:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8003f8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f8e:	4b32      	ldr	r3, [pc, #200]	@ (8004058 <BNO_Page0Adress+0x4b4>)
 8003f90:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
			IMU.GYR.z = -((float)((int16_t)((BNO_RxBuffer[18] << 8) | BNO_RxBuffer[17])))/16;
 8003f94:	4b2e      	ldr	r3, [pc, #184]	@ (8004050 <BNO_Page0Adress+0x4ac>)
 8003f96:	7c9b      	ldrb	r3, [r3, #18]
 8003f98:	021b      	lsls	r3, r3, #8
 8003f9a:	b21a      	sxth	r2, r3
 8003f9c:	4b2c      	ldr	r3, [pc, #176]	@ (8004050 <BNO_Page0Adress+0x4ac>)
 8003f9e:	7c5b      	ldrb	r3, [r3, #17]
 8003fa0:	b21b      	sxth	r3, r3
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	b21b      	sxth	r3, r3
 8003fa6:	ee07 3a90 	vmov	s15, r3
 8003faa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fae:	eeb1 7a67 	vneg.f32	s14, s15
 8003fb2:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8003fb6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fba:	4b27      	ldr	r3, [pc, #156]	@ (8004058 <BNO_Page0Adress+0x4b4>)
 8003fbc:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
			IMU.Heading = ((float)((int16_t)((BNO_RxBuffer[20] << 8) | BNO_RxBuffer[19])))/16;
 8003fc0:	4b23      	ldr	r3, [pc, #140]	@ (8004050 <BNO_Page0Adress+0x4ac>)
 8003fc2:	7d1b      	ldrb	r3, [r3, #20]
 8003fc4:	021b      	lsls	r3, r3, #8
 8003fc6:	b21a      	sxth	r2, r3
 8003fc8:	4b21      	ldr	r3, [pc, #132]	@ (8004050 <BNO_Page0Adress+0x4ac>)
 8003fca:	7cdb      	ldrb	r3, [r3, #19]
 8003fcc:	b21b      	sxth	r3, r3
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	b21b      	sxth	r3, r3
 8003fd2:	ee07 3a90 	vmov	s15, r3
 8003fd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fda:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8003fde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fe2:	4b1d      	ldr	r3, [pc, #116]	@ (8004058 <BNO_Page0Adress+0x4b4>)
 8003fe4:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
			IMU.Pitch = ((float)((int16_t)((BNO_RxBuffer[22] << 8) | BNO_RxBuffer[21])))/16;
 8003fe8:	4b19      	ldr	r3, [pc, #100]	@ (8004050 <BNO_Page0Adress+0x4ac>)
 8003fea:	7d9b      	ldrb	r3, [r3, #22]
 8003fec:	021b      	lsls	r3, r3, #8
 8003fee:	b21a      	sxth	r2, r3
 8003ff0:	4b17      	ldr	r3, [pc, #92]	@ (8004050 <BNO_Page0Adress+0x4ac>)
 8003ff2:	7d5b      	ldrb	r3, [r3, #21]
 8003ff4:	b21b      	sxth	r3, r3
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	b21b      	sxth	r3, r3
 8003ffa:	ee07 3a90 	vmov	s15, r3
 8003ffe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004002:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8004006:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800400a:	4b13      	ldr	r3, [pc, #76]	@ (8004058 <BNO_Page0Adress+0x4b4>)
 800400c:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
			IMU.Roll = ((float)((int16_t)((BNO_RxBuffer[24] << 8) | BNO_RxBuffer[23])))/16;
 8004010:	4b0f      	ldr	r3, [pc, #60]	@ (8004050 <BNO_Page0Adress+0x4ac>)
 8004012:	7e1b      	ldrb	r3, [r3, #24]
 8004014:	021b      	lsls	r3, r3, #8
 8004016:	b21a      	sxth	r2, r3
 8004018:	4b0d      	ldr	r3, [pc, #52]	@ (8004050 <BNO_Page0Adress+0x4ac>)
 800401a:	7ddb      	ldrb	r3, [r3, #23]
 800401c:	b21b      	sxth	r3, r3
 800401e:	4313      	orrs	r3, r2
 8004020:	b21b      	sxth	r3, r3
 8004022:	ee07 3a90 	vmov	s15, r3
 8004026:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800402a:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800402e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004032:	4b09      	ldr	r3, [pc, #36]	@ (8004058 <BNO_Page0Adress+0x4b4>)
 8004034:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
			BNO_ErrorHandler = ReadSucces;
 8004038:	4b08      	ldr	r3, [pc, #32]	@ (800405c <BNO_Page0Adress+0x4b8>)
 800403a:	220b      	movs	r2, #11
 800403c:	701a      	strb	r2, [r3, #0]
			break;
 800403e:	e002      	b.n	8004046 <BNO_Page0Adress+0x4a2>
			break;
 8004040:	bf00      	nop
 8004042:	e000      	b.n	8004046 <BNO_Page0Adress+0x4a2>
			if(BNO_RxBuffer[1] != 160) return;
 8004044:	bf00      	nop
	}
}
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	24001368 	.word	0x24001368
 8004054:	42c80000 	.word	0x42c80000
 8004058:	24001470 	.word	0x24001470
 800405c:	24001469 	.word	0x24001469

08004060 <BNO_Page1Adress>:

void BNO_Page1Adress(void){
 8004060:	b480      	push	{r7}
 8004062:	af00      	add	r7, sp, #0
	switch (BNO_RxBuffer[0]) {
 8004064:	4b09      	ldr	r3, [pc, #36]	@ (800408c <BNO_Page1Adress+0x2c>)
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	2b07      	cmp	r3, #7
 800406a:	d108      	bne.n	800407e <BNO_Page1Adress+0x1e>
		case BNO055_PAGE_ID:
			IMU.Page = BNO_RxBuffer[1];
 800406c:	4b07      	ldr	r3, [pc, #28]	@ (800408c <BNO_Page1Adress+0x2c>)
 800406e:	785a      	ldrb	r2, [r3, #1]
 8004070:	4b07      	ldr	r3, [pc, #28]	@ (8004090 <BNO_Page1Adress+0x30>)
 8004072:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			BNO_ErrorHandler = ReadSucces;
 8004076:	4b07      	ldr	r3, [pc, #28]	@ (8004094 <BNO_Page1Adress+0x34>)
 8004078:	220b      	movs	r2, #11
 800407a:	701a      	strb	r2, [r3, #0]
			break;
 800407c:	e000      	b.n	8004080 <BNO_Page1Adress+0x20>

		default:
			break;
 800407e:	bf00      	nop
	}
}
 8004080:	bf00      	nop
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	24001368 	.word	0x24001368
 8004090:	24001470 	.word	0x24001470
 8004094:	24001469 	.word	0x24001469

08004098 <BNO_EmptyingBuffer>:

void BNO_EmptyingBuffer(void){
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
	switch (IMU.Page) {
 800409c:	4b0a      	ldr	r3, [pc, #40]	@ (80040c8 <BNO_EmptyingBuffer+0x30>)
 800409e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d002      	beq.n	80040ac <BNO_EmptyingBuffer+0x14>
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d003      	beq.n	80040b2 <BNO_EmptyingBuffer+0x1a>
			break;
		case 1:
			BNO_Page1Adress();
			break;
		default:
			break;
 80040aa:	e005      	b.n	80040b8 <BNO_EmptyingBuffer+0x20>
			BNO_Page0Adress();
 80040ac:	f7ff fd7a 	bl	8003ba4 <BNO_Page0Adress>
			break;
 80040b0:	e002      	b.n	80040b8 <BNO_EmptyingBuffer+0x20>
			BNO_Page1Adress();
 80040b2:	f7ff ffd5 	bl	8004060 <BNO_Page1Adress>
			break;
 80040b6:	bf00      	nop
	}
	memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 80040b8:	22ff      	movs	r2, #255	@ 0xff
 80040ba:	2100      	movs	r1, #0
 80040bc:	4803      	ldr	r0, [pc, #12]	@ (80040cc <BNO_EmptyingBuffer+0x34>)
 80040be:	f012 fbc2 	bl	8016846 <memset>
}
 80040c2:	bf00      	nop
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	24001470 	.word	0x24001470
 80040cc:	24001368 	.word	0x24001368

080040d0 <BNO_SWReset>:
		default:
			break;
	}
}

void BNO_SWReset(void){
 80040d0:	b580      	push	{r7, lr}
 80040d2:	af00      	add	r7, sp, #0
	BNO_Write(BNO055_SYS_TRIGGER,0x20);
 80040d4:	2120      	movs	r1, #32
 80040d6:	203f      	movs	r0, #63	@ 0x3f
 80040d8:	f7ff fcd0 	bl	8003a7c <BNO_Write>
	bno055_delay(70);
 80040dc:	2046      	movs	r0, #70	@ 0x46
 80040de:	f7ff fc93 	bl	8003a08 <bno055_delay>
	IMU.ID = 0x00;
 80040e2:	4b04      	ldr	r3, [pc, #16]	@ (80040f4 <BNO_SWReset+0x24>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	701a      	strb	r2, [r3, #0]
	BNO_CurrentState = Configuration;
 80040e8:	4b03      	ldr	r3, [pc, #12]	@ (80040f8 <BNO_SWReset+0x28>)
 80040ea:	2201      	movs	r2, #1
 80040ec:	701a      	strb	r2, [r3, #0]
}
 80040ee:	bf00      	nop
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	24001470 	.word	0x24001470
 80040f8:	2400146c 	.word	0x2400146c

080040fc <bno055_setOperationMode>:

void bno055_setOperationMode(bno055_opmode_t mode) {
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	4603      	mov	r3, r0
 8004104:	71fb      	strb	r3, [r7, #7]
  BNO_Write(BNO055_OPR_MODE, mode);
 8004106:	79fb      	ldrb	r3, [r7, #7]
 8004108:	4619      	mov	r1, r3
 800410a:	203d      	movs	r0, #61	@ 0x3d
 800410c:	f7ff fcb6 	bl	8003a7c <BNO_Write>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8004110:	79fb      	ldrb	r3, [r7, #7]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d103      	bne.n	800411e <bno055_setOperationMode+0x22>
    bno055_delay(5);
 8004116:	2005      	movs	r0, #5
 8004118:	f7ff fc76 	bl	8003a08 <bno055_delay>
  } else {
    bno055_delay(3);
  }
}
 800411c:	e002      	b.n	8004124 <bno055_setOperationMode+0x28>
    bno055_delay(3);
 800411e:	2003      	movs	r0, #3
 8004120:	f7ff fc72 	bl	8003a08 <bno055_delay>
}
 8004124:	bf00      	nop
 8004126:	3708      	adds	r7, #8
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8004130:	2000      	movs	r0, #0
 8004132:	f7ff ffe3 	bl	80040fc <bno055_setOperationMode>
}
 8004136:	bf00      	nop
 8004138:	bd80      	pop	{r7, pc}

0800413a <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 800413a:	b580      	push	{r7, lr}
 800413c:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 800413e:	200c      	movs	r0, #12
 8004140:	f7ff ffdc 	bl	80040fc <bno055_setOperationMode>
}
 8004144:	bf00      	nop
 8004146:	bd80      	pop	{r7, pc}

08004148 <BNO_GetCalibrationData>:

void BNO_GetCalibrationData(void){
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
	BNO_Read(BNO055_ACC_OFFSET_X_LSB, 22);
 800414c:	2116      	movs	r1, #22
 800414e:	2055      	movs	r0, #85	@ 0x55
 8004150:	f7ff fc6e 	bl	8003a30 <BNO_Read>
}
 8004154:	bf00      	nop
 8004156:	bd80      	pop	{r7, pc}

08004158 <BNO_SetCalibrationData>:

void BNO_SetCalibrationData(void){
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
	uint8_t buffer[22];

	  memcpy(&IMU.Calibration_Data.offset.accel, buffer, 6);
 800415e:	463b      	mov	r3, r7
 8004160:	2206      	movs	r2, #6
 8004162:	4619      	mov	r1, r3
 8004164:	4814      	ldr	r0, [pc, #80]	@ (80041b8 <BNO_SetCalibrationData+0x60>)
 8004166:	f012 fc08 	bl	801697a <memcpy>
	  memcpy(&IMU.Calibration_Data.offset.mag, buffer + 6, 6);
 800416a:	463b      	mov	r3, r7
 800416c:	3306      	adds	r3, #6
 800416e:	2206      	movs	r2, #6
 8004170:	4619      	mov	r1, r3
 8004172:	4812      	ldr	r0, [pc, #72]	@ (80041bc <BNO_SetCalibrationData+0x64>)
 8004174:	f012 fc01 	bl	801697a <memcpy>
	  memcpy(&IMU.Calibration_Data.offset.gyro, buffer + 12, 6);
 8004178:	463b      	mov	r3, r7
 800417a:	330c      	adds	r3, #12
 800417c:	2206      	movs	r2, #6
 800417e:	4619      	mov	r1, r3
 8004180:	480f      	ldr	r0, [pc, #60]	@ (80041c0 <BNO_SetCalibrationData+0x68>)
 8004182:	f012 fbfa 	bl	801697a <memcpy>
	  memcpy(&IMU.Calibration_Data.radius.accel, buffer + 18, 2);
 8004186:	463b      	mov	r3, r7
 8004188:	3312      	adds	r3, #18
 800418a:	881b      	ldrh	r3, [r3, #0]
 800418c:	b29a      	uxth	r2, r3
 800418e:	4b0d      	ldr	r3, [pc, #52]	@ (80041c4 <BNO_SetCalibrationData+0x6c>)
 8004190:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
	  memcpy(&IMU.Calibration_Data.radius.mag, buffer + 20, 2);
 8004194:	463b      	mov	r3, r7
 8004196:	3314      	adds	r3, #20
 8004198:	881b      	ldrh	r3, [r3, #0]
 800419a:	b29a      	uxth	r2, r3
 800419c:	4b09      	ldr	r3, [pc, #36]	@ (80041c4 <BNO_SetCalibrationData+0x6c>)
 800419e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

	BNO_Write_MB(BNO055_ACC_OFFSET_X_LSB, 22, buffer);
 80041a2:	463b      	mov	r3, r7
 80041a4:	461a      	mov	r2, r3
 80041a6:	2116      	movs	r1, #22
 80041a8:	2055      	movs	r0, #85	@ 0x55
 80041aa:	f7ff fc89 	bl	8003ac0 <BNO_Write_MB>
}
 80041ae:	bf00      	nop
 80041b0:	3718      	adds	r7, #24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	240014c6 	.word	0x240014c6
 80041bc:	240014c0 	.word	0x240014c0
 80041c0:	240014ba 	.word	0x240014ba
 80041c4:	24001470 	.word	0x24001470

080041c8 <BNO_Init>:

void BNO_Init(void){
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, SET);
 80041cc:	2201      	movs	r2, #1
 80041ce:	2104      	movs	r1, #4
 80041d0:	4808      	ldr	r0, [pc, #32]	@ (80041f4 <BNO_Init+0x2c>)
 80041d2:	f004 febf 	bl	8008f54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IMU_BOOT_GPIO_Port, IMU_BOOT_Pin, SET);
 80041d6:	2201      	movs	r2, #1
 80041d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80041dc:	4806      	ldr	r0, [pc, #24]	@ (80041f8 <BNO_Init+0x30>)
 80041de:	f004 feb9 	bl	8008f54 <HAL_GPIO_WritePin>

	bno055_delay(100);
 80041e2:	2064      	movs	r0, #100	@ 0x64
 80041e4:	f7ff fc10 	bl	8003a08 <bno055_delay>

	BNO_CurrentState = Reset;
 80041e8:	4b04      	ldr	r3, [pc, #16]	@ (80041fc <BNO_Init+0x34>)
 80041ea:	2204      	movs	r2, #4
 80041ec:	701a      	strb	r2, [r3, #0]
}
 80041ee:	bf00      	nop
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	58020c00 	.word	0x58020c00
 80041f8:	58020400 	.word	0x58020400
 80041fc:	2400146c 	.word	0x2400146c

08004200 <BNO_Config>:

void BNO_Config(void){
 8004200:	b580      	push	{r7, lr}
 8004202:	af00      	add	r7, sp, #0
	static uint8_t ConfigFlag = 0;

	switch (ConfigFlag) {
 8004204:	4b20      	ldr	r3, [pc, #128]	@ (8004288 <BNO_Config+0x88>)
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	2b03      	cmp	r3, #3
 800420a:	d839      	bhi.n	8004280 <BNO_Config+0x80>
 800420c:	a201      	add	r2, pc, #4	@ (adr r2, 8004214 <BNO_Config+0x14>)
 800420e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004212:	bf00      	nop
 8004214:	08004225 	.word	0x08004225
 8004218:	08004235 	.word	0x08004235
 800421c:	08004241 	.word	0x08004241
 8004220:	08004263 	.word	0x08004263
		case 0:
			BNO_Write(BNO055_SYS_TRIGGER,0x00);
 8004224:	2100      	movs	r1, #0
 8004226:	203f      	movs	r0, #63	@ 0x3f
 8004228:	f7ff fc28 	bl	8003a7c <BNO_Write>
			ConfigFlag = 1;
 800422c:	4b16      	ldr	r3, [pc, #88]	@ (8004288 <BNO_Config+0x88>)
 800422e:	2201      	movs	r2, #1
 8004230:	701a      	strb	r2, [r3, #0]
			break;
 8004232:	e026      	b.n	8004282 <BNO_Config+0x82>
		case 1:
			bno055_setOperationModeConfig();
 8004234:	f7ff ff7a 	bl	800412c <bno055_setOperationModeConfig>
			ConfigFlag = 2;
 8004238:	4b13      	ldr	r3, [pc, #76]	@ (8004288 <BNO_Config+0x88>)
 800423a:	2202      	movs	r2, #2
 800423c:	701a      	strb	r2, [r3, #0]
			break;
 800423e:	e020      	b.n	8004282 <BNO_Config+0x82>
		case 2:
			BNO_Read(BNO055_OPR_MODE, 1);
 8004240:	2101      	movs	r1, #1
 8004242:	203d      	movs	r0, #61	@ 0x3d
 8004244:	f7ff fbf4 	bl	8003a30 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_CONFIG){
 8004248:	4b10      	ldr	r3, [pc, #64]	@ (800428c <BNO_Config+0x8c>)
 800424a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800424e:	2b00      	cmp	r3, #0
 8004250:	d103      	bne.n	800425a <BNO_Config+0x5a>
				ConfigFlag = 3;
 8004252:	4b0d      	ldr	r3, [pc, #52]	@ (8004288 <BNO_Config+0x88>)
 8004254:	2203      	movs	r2, #3
 8004256:	701a      	strb	r2, [r3, #0]
			}
			else ConfigFlag = 1;
			break;
 8004258:	e013      	b.n	8004282 <BNO_Config+0x82>
			else ConfigFlag = 1;
 800425a:	4b0b      	ldr	r3, [pc, #44]	@ (8004288 <BNO_Config+0x88>)
 800425c:	2201      	movs	r2, #1
 800425e:	701a      	strb	r2, [r3, #0]
			break;
 8004260:	e00f      	b.n	8004282 <BNO_Config+0x82>
		case 3:
			BNO_Read(BNO055_CHIP_ID, 4);
 8004262:	2104      	movs	r1, #4
 8004264:	2000      	movs	r0, #0
 8004266:	f7ff fbe3 	bl	8003a30 <BNO_Read>

			if(IMU.ID == BNO055_ID){
 800426a:	4b08      	ldr	r3, [pc, #32]	@ (800428c <BNO_Config+0x8c>)
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004270:	d102      	bne.n	8004278 <BNO_Config+0x78>
				BNO_CurrentState = Calibration;
 8004272:	4b07      	ldr	r3, [pc, #28]	@ (8004290 <BNO_Config+0x90>)
 8004274:	2202      	movs	r2, #2
 8004276:	701a      	strb	r2, [r3, #0]
			}
			ConfigFlag = 0;
 8004278:	4b03      	ldr	r3, [pc, #12]	@ (8004288 <BNO_Config+0x88>)
 800427a:	2200      	movs	r2, #0
 800427c:	701a      	strb	r2, [r3, #0]
			break;
 800427e:	e000      	b.n	8004282 <BNO_Config+0x82>
		default:
			break;
 8004280:	bf00      	nop
	}

}
 8004282:	bf00      	nop
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	240014d0 	.word	0x240014d0
 800428c:	24001470 	.word	0x24001470
 8004290:	2400146c 	.word	0x2400146c

08004294 <BNO_CalibrationStatus>:

void BNO_CalibrationStatus(void){
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
	static uint8_t CalibrationFlag = 0;
	static uint8_t Calibrated = 1;

	switch (CalibrationFlag) {
 8004298:	4b3d      	ldr	r3, [pc, #244]	@ (8004390 <BNO_CalibrationStatus+0xfc>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	2b07      	cmp	r3, #7
 800429e:	d870      	bhi.n	8004382 <BNO_CalibrationStatus+0xee>
 80042a0:	a201      	add	r2, pc, #4	@ (adr r2, 80042a8 <BNO_CalibrationStatus+0x14>)
 80042a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a6:	bf00      	nop
 80042a8:	080042c9 	.word	0x080042c9
 80042ac:	080042d9 	.word	0x080042d9
 80042b0:	080042e5 	.word	0x080042e5
 80042b4:	0800431d 	.word	0x0800431d
 80042b8:	08004337 	.word	0x08004337
 80042bc:	08004343 	.word	0x08004343
 80042c0:	08004365 	.word	0x08004365
 80042c4:	08004377 	.word	0x08004377
		case 0:
			BNO_Write(BNO055_SYS_TRIGGER,0x00);
 80042c8:	2100      	movs	r1, #0
 80042ca:	203f      	movs	r0, #63	@ 0x3f
 80042cc:	f7ff fbd6 	bl	8003a7c <BNO_Write>
			CalibrationFlag = 1;
 80042d0:	4b2f      	ldr	r3, [pc, #188]	@ (8004390 <BNO_CalibrationStatus+0xfc>)
 80042d2:	2201      	movs	r2, #1
 80042d4:	701a      	strb	r2, [r3, #0]
			break;
 80042d6:	e059      	b.n	800438c <BNO_CalibrationStatus+0xf8>
		case 1:
			bno055_setOperationModeNDOF();
 80042d8:	f7ff ff2f 	bl	800413a <bno055_setOperationModeNDOF>
			CalibrationFlag = 2;
 80042dc:	4b2c      	ldr	r3, [pc, #176]	@ (8004390 <BNO_CalibrationStatus+0xfc>)
 80042de:	2202      	movs	r2, #2
 80042e0:	701a      	strb	r2, [r3, #0]
			break;
 80042e2:	e053      	b.n	800438c <BNO_CalibrationStatus+0xf8>
		case 2:
			BNO_Read(BNO055_OPR_MODE, 1);
 80042e4:	2101      	movs	r1, #1
 80042e6:	203d      	movs	r0, #61	@ 0x3d
 80042e8:	f7ff fba2 	bl	8003a30 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_NDOF){
 80042ec:	4b29      	ldr	r3, [pc, #164]	@ (8004394 <BNO_CalibrationStatus+0x100>)
 80042ee:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80042f2:	2b0c      	cmp	r3, #12
 80042f4:	d10e      	bne.n	8004314 <BNO_CalibrationStatus+0x80>
				if(Calibrated){
 80042f6:	4b28      	ldr	r3, [pc, #160]	@ (8004398 <BNO_CalibrationStatus+0x104>)
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d006      	beq.n	800430c <BNO_CalibrationStatus+0x78>
					CalibrationFlag = 0;
 80042fe:	4b24      	ldr	r3, [pc, #144]	@ (8004390 <BNO_CalibrationStatus+0xfc>)
 8004300:	2200      	movs	r2, #0
 8004302:	701a      	strb	r2, [r3, #0]
					BNO_CurrentState = Operation;
 8004304:	4b25      	ldr	r3, [pc, #148]	@ (800439c <BNO_CalibrationStatus+0x108>)
 8004306:	2203      	movs	r2, #3
 8004308:	701a      	strb	r2, [r3, #0]
				}
				else CalibrationFlag = 3;
			}
			else CalibrationFlag = 1;
			break;
 800430a:	e03f      	b.n	800438c <BNO_CalibrationStatus+0xf8>
				else CalibrationFlag = 3;
 800430c:	4b20      	ldr	r3, [pc, #128]	@ (8004390 <BNO_CalibrationStatus+0xfc>)
 800430e:	2203      	movs	r2, #3
 8004310:	701a      	strb	r2, [r3, #0]
			break;
 8004312:	e03b      	b.n	800438c <BNO_CalibrationStatus+0xf8>
			else CalibrationFlag = 1;
 8004314:	4b1e      	ldr	r3, [pc, #120]	@ (8004390 <BNO_CalibrationStatus+0xfc>)
 8004316:	2201      	movs	r2, #1
 8004318:	701a      	strb	r2, [r3, #0]
			break;
 800431a:	e037      	b.n	800438c <BNO_CalibrationStatus+0xf8>
		case 3:
			BNO_Read(BNO055_CALIB_STAT, 1);
 800431c:	2101      	movs	r1, #1
 800431e:	2035      	movs	r0, #53	@ 0x35
 8004320:	f7ff fb86 	bl	8003a30 <BNO_Read>
			if(IMU.CalSatus.Full == 0xFF){
 8004324:	4b1b      	ldr	r3, [pc, #108]	@ (8004394 <BNO_CalibrationStatus+0x100>)
 8004326:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800432a:	2bff      	cmp	r3, #255	@ 0xff
 800432c:	d12d      	bne.n	800438a <BNO_CalibrationStatus+0xf6>
				CalibrationFlag = 4;
 800432e:	4b18      	ldr	r3, [pc, #96]	@ (8004390 <BNO_CalibrationStatus+0xfc>)
 8004330:	2204      	movs	r2, #4
 8004332:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004334:	e029      	b.n	800438a <BNO_CalibrationStatus+0xf6>
		case 4:
			bno055_setOperationModeConfig();
 8004336:	f7ff fef9 	bl	800412c <bno055_setOperationModeConfig>
			CalibrationFlag = 5;
 800433a:	4b15      	ldr	r3, [pc, #84]	@ (8004390 <BNO_CalibrationStatus+0xfc>)
 800433c:	2205      	movs	r2, #5
 800433e:	701a      	strb	r2, [r3, #0]
			break;
 8004340:	e024      	b.n	800438c <BNO_CalibrationStatus+0xf8>
		case 5:
			BNO_Read(BNO055_OPR_MODE, 1);
 8004342:	2101      	movs	r1, #1
 8004344:	203d      	movs	r0, #61	@ 0x3d
 8004346:	f7ff fb73 	bl	8003a30 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_CONFIG){
 800434a:	4b12      	ldr	r3, [pc, #72]	@ (8004394 <BNO_CalibrationStatus+0x100>)
 800434c:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8004350:	2b00      	cmp	r3, #0
 8004352:	d103      	bne.n	800435c <BNO_CalibrationStatus+0xc8>
				CalibrationFlag = 6;
 8004354:	4b0e      	ldr	r3, [pc, #56]	@ (8004390 <BNO_CalibrationStatus+0xfc>)
 8004356:	2206      	movs	r2, #6
 8004358:	701a      	strb	r2, [r3, #0]

			}
			else CalibrationFlag = 4;
			break;
 800435a:	e017      	b.n	800438c <BNO_CalibrationStatus+0xf8>
			else CalibrationFlag = 4;
 800435c:	4b0c      	ldr	r3, [pc, #48]	@ (8004390 <BNO_CalibrationStatus+0xfc>)
 800435e:	2204      	movs	r2, #4
 8004360:	701a      	strb	r2, [r3, #0]
			break;
 8004362:	e013      	b.n	800438c <BNO_CalibrationStatus+0xf8>
		case 6:
			BNO_GetCalibrationData();
 8004364:	f7ff fef0 	bl	8004148 <BNO_GetCalibrationData>
			Calibrated = 1;
 8004368:	4b0b      	ldr	r3, [pc, #44]	@ (8004398 <BNO_CalibrationStatus+0x104>)
 800436a:	2201      	movs	r2, #1
 800436c:	701a      	strb	r2, [r3, #0]
			CalibrationFlag = 1;
 800436e:	4b08      	ldr	r3, [pc, #32]	@ (8004390 <BNO_CalibrationStatus+0xfc>)
 8004370:	2201      	movs	r2, #1
 8004372:	701a      	strb	r2, [r3, #0]
			break;
 8004374:	e00a      	b.n	800438c <BNO_CalibrationStatus+0xf8>
		case 7:
			BNO_SetCalibrationData();
 8004376:	f7ff feef 	bl	8004158 <BNO_SetCalibrationData>
			CalibrationFlag = 1;
 800437a:	4b05      	ldr	r3, [pc, #20]	@ (8004390 <BNO_CalibrationStatus+0xfc>)
 800437c:	2201      	movs	r2, #1
 800437e:	701a      	strb	r2, [r3, #0]
			break;
 8004380:	e004      	b.n	800438c <BNO_CalibrationStatus+0xf8>
		default:
			CalibrationFlag = 0;
 8004382:	4b03      	ldr	r3, [pc, #12]	@ (8004390 <BNO_CalibrationStatus+0xfc>)
 8004384:	2200      	movs	r2, #0
 8004386:	701a      	strb	r2, [r3, #0]
			break;
 8004388:	e000      	b.n	800438c <BNO_CalibrationStatus+0xf8>
			break;
 800438a:	bf00      	nop
    	BNO_CurrentState = Operation;
    }
    else bno055_setOperationModeNDOF();
    */

}
 800438c:	bf00      	nop
 800438e:	bd80      	pop	{r7, pc}
 8004390:	240014d1 	.word	0x240014d1
 8004394:	24001470 	.word	0x24001470
 8004398:	24000008 	.word	0x24000008
 800439c:	2400146c 	.word	0x2400146c

080043a0 <BNO_GetData>:

void BNO_GetData(void){
 80043a0:	b580      	push	{r7, lr}
 80043a2:	af00      	add	r7, sp, #0
	BNO_Read(BNO055_ACC_DATA_X_LSB,24);
 80043a4:	2118      	movs	r1, #24
 80043a6:	2008      	movs	r0, #8
 80043a8:	f7ff fb42 	bl	8003a30 <BNO_Read>
}
 80043ac:	bf00      	nop
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <BNO_Receive>:

void BNO_Receive(uint8_t Buffer){
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	4603      	mov	r3, r0
 80043b8:	71fb      	strb	r3, [r7, #7]
	static uint8_t MsgSize = 0;
	static uint8_t Counter = 0;

	BNO_ComsCounter = 0;
 80043ba:	4b2c      	ldr	r3, [pc, #176]	@ (800446c <BNO_Receive+0xbc>)
 80043bc:	2200      	movs	r2, #0
 80043be:	701a      	strb	r2, [r3, #0]

	switch (BNO_Rx_Status) {
 80043c0:	4b2b      	ldr	r3, [pc, #172]	@ (8004470 <BNO_Receive+0xc0>)
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	2bff      	cmp	r3, #255	@ 0xff
 80043c6:	d027      	beq.n	8004418 <BNO_Receive+0x68>
 80043c8:	2bff      	cmp	r3, #255	@ 0xff
 80043ca:	dc46      	bgt.n	800445a <BNO_Receive+0xaa>
 80043cc:	2bee      	cmp	r3, #238	@ 0xee
 80043ce:	d017      	beq.n	8004400 <BNO_Receive+0x50>
 80043d0:	2bee      	cmp	r3, #238	@ 0xee
 80043d2:	dc42      	bgt.n	800445a <BNO_Receive+0xaa>
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d002      	beq.n	80043de <BNO_Receive+0x2e>
 80043d8:	2bbb      	cmp	r3, #187	@ 0xbb
 80043da:	d00a      	beq.n	80043f2 <BNO_Receive+0x42>
				BNO_EmptyingBuffer();
			}

			break;
		default:
			break;
 80043dc:	e03d      	b.n	800445a <BNO_Receive+0xaa>
			if(Buffer == Read_Response || Buffer == Header) BNO_Rx_Status = Buffer;
 80043de:	79fb      	ldrb	r3, [r7, #7]
 80043e0:	2bbb      	cmp	r3, #187	@ 0xbb
 80043e2:	d002      	beq.n	80043ea <BNO_Receive+0x3a>
 80043e4:	79fb      	ldrb	r3, [r7, #7]
 80043e6:	2bee      	cmp	r3, #238	@ 0xee
 80043e8:	d139      	bne.n	800445e <BNO_Receive+0xae>
 80043ea:	4a21      	ldr	r2, [pc, #132]	@ (8004470 <BNO_Receive+0xc0>)
 80043ec:	79fb      	ldrb	r3, [r7, #7]
 80043ee:	7013      	strb	r3, [r2, #0]
			break;
 80043f0:	e035      	b.n	800445e <BNO_Receive+0xae>
			MsgSize = Buffer;
 80043f2:	4a20      	ldr	r2, [pc, #128]	@ (8004474 <BNO_Receive+0xc4>)
 80043f4:	79fb      	ldrb	r3, [r7, #7]
 80043f6:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = Emptying_Buffer;
 80043f8:	4b1d      	ldr	r3, [pc, #116]	@ (8004470 <BNO_Receive+0xc0>)
 80043fa:	22ff      	movs	r2, #255	@ 0xff
 80043fc:	701a      	strb	r2, [r3, #0]
			break;
 80043fe:	e031      	b.n	8004464 <BNO_Receive+0xb4>
			BNO_ErrorHandler = Buffer;
 8004400:	4a1d      	ldr	r2, [pc, #116]	@ (8004478 <BNO_Receive+0xc8>)
 8004402:	79fb      	ldrb	r3, [r7, #7]
 8004404:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = AwaitingMsg;
 8004406:	4b1a      	ldr	r3, [pc, #104]	@ (8004470 <BNO_Receive+0xc0>)
 8004408:	2200      	movs	r2, #0
 800440a:	701a      	strb	r2, [r3, #0]
			memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 800440c:	22ff      	movs	r2, #255	@ 0xff
 800440e:	2100      	movs	r1, #0
 8004410:	481a      	ldr	r0, [pc, #104]	@ (800447c <BNO_Receive+0xcc>)
 8004412:	f012 fa18 	bl	8016846 <memset>
			break;
 8004416:	e025      	b.n	8004464 <BNO_Receive+0xb4>
			BNO_RxBuffer[Counter + 1] = Buffer;
 8004418:	4b19      	ldr	r3, [pc, #100]	@ (8004480 <BNO_Receive+0xd0>)
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	3301      	adds	r3, #1
 800441e:	4917      	ldr	r1, [pc, #92]	@ (800447c <BNO_Receive+0xcc>)
 8004420:	79fa      	ldrb	r2, [r7, #7]
 8004422:	54ca      	strb	r2, [r1, r3]
			Counter++;
 8004424:	4b16      	ldr	r3, [pc, #88]	@ (8004480 <BNO_Receive+0xd0>)
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	3301      	adds	r3, #1
 800442a:	b2da      	uxtb	r2, r3
 800442c:	4b14      	ldr	r3, [pc, #80]	@ (8004480 <BNO_Receive+0xd0>)
 800442e:	701a      	strb	r2, [r3, #0]
			if(Counter == MsgSize){
 8004430:	4b13      	ldr	r3, [pc, #76]	@ (8004480 <BNO_Receive+0xd0>)
 8004432:	781a      	ldrb	r2, [r3, #0]
 8004434:	4b0f      	ldr	r3, [pc, #60]	@ (8004474 <BNO_Receive+0xc4>)
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	429a      	cmp	r2, r3
 800443a:	d112      	bne.n	8004462 <BNO_Receive+0xb2>
				Counter = 0;
 800443c:	4b10      	ldr	r3, [pc, #64]	@ (8004480 <BNO_Receive+0xd0>)
 800443e:	2200      	movs	r2, #0
 8004440:	701a      	strb	r2, [r3, #0]
				MsgSize = 0;
 8004442:	4b0c      	ldr	r3, [pc, #48]	@ (8004474 <BNO_Receive+0xc4>)
 8004444:	2200      	movs	r2, #0
 8004446:	701a      	strb	r2, [r3, #0]
				BNO_Rx_Status = AwaitingMsg;
 8004448:	4b09      	ldr	r3, [pc, #36]	@ (8004470 <BNO_Receive+0xc0>)
 800444a:	2200      	movs	r2, #0
 800444c:	701a      	strb	r2, [r3, #0]
				BNO_ErrorHandler = ReadSucces;
 800444e:	4b0a      	ldr	r3, [pc, #40]	@ (8004478 <BNO_Receive+0xc8>)
 8004450:	220b      	movs	r2, #11
 8004452:	701a      	strb	r2, [r3, #0]
				BNO_EmptyingBuffer();
 8004454:	f7ff fe20 	bl	8004098 <BNO_EmptyingBuffer>
			break;
 8004458:	e003      	b.n	8004462 <BNO_Receive+0xb2>
			break;
 800445a:	bf00      	nop
 800445c:	e002      	b.n	8004464 <BNO_Receive+0xb4>
			break;
 800445e:	bf00      	nop
 8004460:	e000      	b.n	8004464 <BNO_Receive+0xb4>
			break;
 8004462:	bf00      	nop
	}
}
 8004464:	bf00      	nop
 8004466:	3708      	adds	r7, #8
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	2400146a 	.word	0x2400146a
 8004470:	24001468 	.word	0x24001468
 8004474:	240014d2 	.word	0x240014d2
 8004478:	24001469 	.word	0x24001469
 800447c:	24001368 	.word	0x24001368
 8004480:	240014d3 	.word	0x240014d3

08004484 <BNO_FaultManager>:

void BNO_FaultManager(void){
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
	if(BNO_ComsCounter > 3){
 800448a:	4b13      	ldr	r3, [pc, #76]	@ (80044d8 <BNO_FaultManager+0x54>)
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	2b03      	cmp	r3, #3
 8004490:	d90f      	bls.n	80044b2 <BNO_FaultManager+0x2e>
		Reset_UART(&huart3);
 8004492:	4812      	ldr	r0, [pc, #72]	@ (80044dc <BNO_FaultManager+0x58>)
 8004494:	f7fe fd7c 	bl	8002f90 <Reset_UART>
		BNO_Rx_Status = AwaitingMsg;
 8004498:	4b11      	ldr	r3, [pc, #68]	@ (80044e0 <BNO_FaultManager+0x5c>)
 800449a:	2200      	movs	r2, #0
 800449c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 800449e:	2201      	movs	r2, #1
 80044a0:	4910      	ldr	r1, [pc, #64]	@ (80044e4 <BNO_FaultManager+0x60>)
 80044a2:	480e      	ldr	r0, [pc, #56]	@ (80044dc <BNO_FaultManager+0x58>)
 80044a4:	f00a f8ea 	bl	800e67c <HAL_UART_Receive_DMA>
		memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 80044a8:	22ff      	movs	r2, #255	@ 0xff
 80044aa:	2100      	movs	r1, #0
 80044ac:	480e      	ldr	r0, [pc, #56]	@ (80044e8 <BNO_FaultManager+0x64>)
 80044ae:	f012 f9ca 	bl	8016846 <memset>
	}
	if(BNO_ErrorHandler == WRONG_START_BYTE){
 80044b2:	4b0e      	ldr	r3, [pc, #56]	@ (80044ec <BNO_FaultManager+0x68>)
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	2b06      	cmp	r3, #6
 80044b8:	d10a      	bne.n	80044d0 <BNO_FaultManager+0x4c>
		uint8_t Buffer = 0x00;
 80044ba:	2300      	movs	r3, #0
 80044bc:	71fb      	strb	r3, [r7, #7]

		HAL_UART_Transmit_IT(&huart3, &Buffer, 1);
 80044be:	1dfb      	adds	r3, r7, #7
 80044c0:	2201      	movs	r2, #1
 80044c2:	4619      	mov	r1, r3
 80044c4:	4805      	ldr	r0, [pc, #20]	@ (80044dc <BNO_FaultManager+0x58>)
 80044c6:	f009 fff9 	bl	800e4bc <HAL_UART_Transmit_IT>
		BNO_ErrorHandler = 0;
 80044ca:	4b08      	ldr	r3, [pc, #32]	@ (80044ec <BNO_FaultManager+0x68>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	701a      	strb	r2, [r3, #0]
	}
}
 80044d0:	bf00      	nop
 80044d2:	3708      	adds	r7, #8
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	2400146a 	.word	0x2400146a
 80044dc:	240010a0 	.word	0x240010a0
 80044e0:	24001468 	.word	0x24001468
 80044e4:	24001467 	.word	0x24001467
 80044e8:	24001368 	.word	0x24001368
 80044ec:	24001469 	.word	0x24001469

080044f0 <BNO_Tasks>:

void BNO_Tasks(void){
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
	if(BNO_DelayCounter == 0){
 80044f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004564 <BNO_Tasks+0x74>)
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d128      	bne.n	800454e <BNO_Tasks+0x5e>
		switch (BNO_CurrentState) {
 80044fc:	4b1a      	ldr	r3, [pc, #104]	@ (8004568 <BNO_Tasks+0x78>)
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	2b04      	cmp	r3, #4
 8004502:	d81c      	bhi.n	800453e <BNO_Tasks+0x4e>
 8004504:	a201      	add	r2, pc, #4	@ (adr r2, 800450c <BNO_Tasks+0x1c>)
 8004506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450a:	bf00      	nop
 800450c:	08004521 	.word	0x08004521
 8004510:	0800452d 	.word	0x0800452d
 8004514:	08004533 	.word	0x08004533
 8004518:	08004539 	.word	0x08004539
 800451c:	08004527 	.word	0x08004527
			case Init:
				BNO_Init();
 8004520:	f7ff fe52 	bl	80041c8 <BNO_Init>
				break;
 8004524:	e00c      	b.n	8004540 <BNO_Tasks+0x50>
			case Reset:
				BNO_SWReset();
 8004526:	f7ff fdd3 	bl	80040d0 <BNO_SWReset>
			break;
 800452a:	e009      	b.n	8004540 <BNO_Tasks+0x50>
			case Configuration:
				BNO_Config();
 800452c:	f7ff fe68 	bl	8004200 <BNO_Config>
				break;
 8004530:	e006      	b.n	8004540 <BNO_Tasks+0x50>
			case Calibration:
				BNO_CalibrationStatus();
 8004532:	f7ff feaf 	bl	8004294 <BNO_CalibrationStatus>
				break;
 8004536:	e003      	b.n	8004540 <BNO_Tasks+0x50>
			case Operation:
				BNO_GetData();
 8004538:	f7ff ff32 	bl	80043a0 <BNO_GetData>
				break;
 800453c:	e000      	b.n	8004540 <BNO_Tasks+0x50>

			default:
				break;
 800453e:	bf00      	nop
		}
		++BNO_ComsCounter;
 8004540:	4b0a      	ldr	r3, [pc, #40]	@ (800456c <BNO_Tasks+0x7c>)
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	3301      	adds	r3, #1
 8004546:	b2da      	uxtb	r2, r3
 8004548:	4b08      	ldr	r3, [pc, #32]	@ (800456c <BNO_Tasks+0x7c>)
 800454a:	701a      	strb	r2, [r3, #0]
 800454c:	e005      	b.n	800455a <BNO_Tasks+0x6a>
	}
	else{
		--BNO_DelayCounter;
 800454e:	4b05      	ldr	r3, [pc, #20]	@ (8004564 <BNO_Tasks+0x74>)
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	3b01      	subs	r3, #1
 8004554:	b2da      	uxtb	r2, r3
 8004556:	4b03      	ldr	r3, [pc, #12]	@ (8004564 <BNO_Tasks+0x74>)
 8004558:	701a      	strb	r2, [r3, #0]
	}
	BNO_FaultManager();
 800455a:	f7ff ff93 	bl	8004484 <BNO_FaultManager>
}
 800455e:	bf00      	nop
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	2400146b 	.word	0x2400146b
 8004568:	2400146c 	.word	0x2400146c
 800456c:	2400146a 	.word	0x2400146a

08004570 <LED_blink>:

		.G_LED.LED_GPIO_GPIOx = LED_5_GPIO_Port,
		.G_LED.LED_GPIO_Pin   = LED_5_Pin
};

LED_config_t LED_blink(LED_config_t LED){
 8004570:	b084      	sub	sp, #16
 8004572:	b590      	push	{r4, r7, lr}
 8004574:	b083      	sub	sp, #12
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
 800457a:	f107 001c 	add.w	r0, r7, #28
 800457e:	e880 000e 	stmia.w	r0, {r1, r2, r3}

		switch (LED.Blink_status) {
 8004582:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004586:	2b00      	cmp	r3, #0
 8004588:	d002      	beq.n	8004590 <LED_blink+0x20>
 800458a:	2b01      	cmp	r3, #1
 800458c:	d010      	beq.n	80045b0 <LED_blink+0x40>
 800458e:	e01f      	b.n	80045d0 <LED_blink+0x60>
			case 0x00:
				if(LED.count >= LED.Time_Off){
 8004590:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8004592:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004594:	429a      	cmp	r2, r3
 8004596:	d31f      	bcc.n	80045d8 <LED_blink+0x68>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	8c39      	ldrh	r1, [r7, #32]
 800459c:	2201      	movs	r2, #1
 800459e:	4618      	mov	r0, r3
 80045a0:	f004 fcd8 	bl	8008f54 <HAL_GPIO_WritePin>
					LED.Blink_status = 1;
 80045a4:	2301      	movs	r3, #1
 80045a6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 80045aa:	2300      	movs	r3, #0
 80045ac:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 80045ae:	e013      	b.n	80045d8 <LED_blink+0x68>
			case 0x01:
				if(LED.count >= LED.Time_On){
 80045b0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80045b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d311      	bcc.n	80045dc <LED_blink+0x6c>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	8c39      	ldrh	r1, [r7, #32]
 80045bc:	2200      	movs	r2, #0
 80045be:	4618      	mov	r0, r3
 80045c0:	f004 fcc8 	bl	8008f54 <HAL_GPIO_WritePin>
					LED.Blink_status = 0;
 80045c4:	2300      	movs	r3, #0
 80045c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 80045ca:	2300      	movs	r3, #0
 80045cc:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 80045ce:	e005      	b.n	80045dc <LED_blink+0x6c>
			default:
				LED.Blink_status = 0;
 80045d0:	2300      	movs	r3, #0
 80045d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
				break;
 80045d6:	e002      	b.n	80045de <LED_blink+0x6e>
				break;
 80045d8:	bf00      	nop
 80045da:	e000      	b.n	80045de <LED_blink+0x6e>
				break;
 80045dc:	bf00      	nop
		}

	LED.count++;
 80045de:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80045e0:	3301      	adds	r3, #1
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	853b      	strh	r3, [r7, #40]	@ 0x28
	return LED;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	461c      	mov	r4, r3
 80045ea:	f107 031c 	add.w	r3, r7, #28
 80045ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80045fe:	b004      	add	sp, #16
 8004600:	4770      	bx	lr

08004602 <LED_Rutine>:

LED_config_t LED_Rutine(LED_config_t LED){
 8004602:	b084      	sub	sp, #16
 8004604:	b590      	push	{r4, r7, lr}
 8004606:	b085      	sub	sp, #20
 8004608:	af02      	add	r7, sp, #8
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	f107 001c 	add.w	r0, r7, #28
 8004610:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(LED.LED_status == 1){
 8004614:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8004618:	2b01      	cmp	r3, #1
 800461a:	d117      	bne.n	800464c <LED_Rutine+0x4a>
		switch (LED.Sequence) {
 800461c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004620:	2b00      	cmp	r3, #0
 8004622:	d002      	beq.n	800462a <LED_Rutine+0x28>
 8004624:	2b01      	cmp	r3, #1
 8004626:	d007      	beq.n	8004638 <LED_Rutine+0x36>
				break;
			case Blink:
				LED = LED_blink(LED);
				break;
			default:
				break;
 8004628:	e018      	b.n	800465c <LED_Rutine+0x5a>
				HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	8c39      	ldrh	r1, [r7, #32]
 800462e:	2201      	movs	r2, #1
 8004630:	4618      	mov	r0, r3
 8004632:	f004 fc8f 	bl	8008f54 <HAL_GPIO_WritePin>
				break;
 8004636:	e011      	b.n	800465c <LED_Rutine+0x5a>
				LED = LED_blink(LED);
 8004638:	f107 001c 	add.w	r0, r7, #28
 800463c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	f107 031c 	add.w	r3, r7, #28
 8004644:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004646:	f7ff ff93 	bl	8004570 <LED_blink>
				break;
 800464a:	e007      	b.n	800465c <LED_Rutine+0x5a>
		}
	}
	else{
		HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	8c39      	ldrh	r1, [r7, #32]
 8004650:	2200      	movs	r2, #0
 8004652:	4618      	mov	r0, r3
 8004654:	f004 fc7e 	bl	8008f54 <HAL_GPIO_WritePin>
		LED.count = 0;
 8004658:	2300      	movs	r3, #0
 800465a:	853b      	strh	r3, [r7, #40]	@ 0x28
	}
	return LED;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	461c      	mov	r4, r3
 8004660:	f107 031c 	add.w	r3, r7, #28
 8004664:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004666:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004674:	b004      	add	sp, #16
 8004676:	4770      	bx	lr

08004678 <LED_Tasks>:

void LED_Tasks (void){
 8004678:	b590      	push	{r4, r7, lr}
 800467a:	b087      	sub	sp, #28
 800467c:	af02      	add	r7, sp, #8
	LED_Info.R_LED = LED_Rutine(LED_Info.R_LED);
 800467e:	4c24      	ldr	r4, [pc, #144]	@ (8004710 <LED_Tasks+0x98>)
 8004680:	4638      	mov	r0, r7
 8004682:	4b23      	ldr	r3, [pc, #140]	@ (8004710 <LED_Tasks+0x98>)
 8004684:	68da      	ldr	r2, [r3, #12]
 8004686:	9200      	str	r2, [sp, #0]
 8004688:	cb0e      	ldmia	r3, {r1, r2, r3}
 800468a:	f7ff ffba 	bl	8004602 <LED_Rutine>
 800468e:	463b      	mov	r3, r7
 8004690:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004692:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED1 = LED_Rutine(LED_Info.B_LED1);
 8004696:	4c1e      	ldr	r4, [pc, #120]	@ (8004710 <LED_Tasks+0x98>)
 8004698:	4638      	mov	r0, r7
 800469a:	4b1d      	ldr	r3, [pc, #116]	@ (8004710 <LED_Tasks+0x98>)
 800469c:	69da      	ldr	r2, [r3, #28]
 800469e:	9200      	str	r2, [sp, #0]
 80046a0:	3310      	adds	r3, #16
 80046a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046a4:	f7ff ffad 	bl	8004602 <LED_Rutine>
 80046a8:	3410      	adds	r4, #16
 80046aa:	463b      	mov	r3, r7
 80046ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80046ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED2 = LED_Rutine(LED_Info.B_LED2);
 80046b2:	4c17      	ldr	r4, [pc, #92]	@ (8004710 <LED_Tasks+0x98>)
 80046b4:	4638      	mov	r0, r7
 80046b6:	4b16      	ldr	r3, [pc, #88]	@ (8004710 <LED_Tasks+0x98>)
 80046b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046ba:	9200      	str	r2, [sp, #0]
 80046bc:	3320      	adds	r3, #32
 80046be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046c0:	f7ff ff9f 	bl	8004602 <LED_Rutine>
 80046c4:	3420      	adds	r4, #32
 80046c6:	463b      	mov	r3, r7
 80046c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80046ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED3 = LED_Rutine(LED_Info.B_LED3);
 80046ce:	4c10      	ldr	r4, [pc, #64]	@ (8004710 <LED_Tasks+0x98>)
 80046d0:	4638      	mov	r0, r7
 80046d2:	4b0f      	ldr	r3, [pc, #60]	@ (8004710 <LED_Tasks+0x98>)
 80046d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80046d6:	9200      	str	r2, [sp, #0]
 80046d8:	3330      	adds	r3, #48	@ 0x30
 80046da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046dc:	f7ff ff91 	bl	8004602 <LED_Rutine>
 80046e0:	3430      	adds	r4, #48	@ 0x30
 80046e2:	463b      	mov	r3, r7
 80046e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80046e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.G_LED = LED_Rutine(LED_Info.G_LED);
 80046ea:	4c09      	ldr	r4, [pc, #36]	@ (8004710 <LED_Tasks+0x98>)
 80046ec:	4638      	mov	r0, r7
 80046ee:	4b08      	ldr	r3, [pc, #32]	@ (8004710 <LED_Tasks+0x98>)
 80046f0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80046f2:	9200      	str	r2, [sp, #0]
 80046f4:	3340      	adds	r3, #64	@ 0x40
 80046f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046f8:	f7ff ff83 	bl	8004602 <LED_Rutine>
 80046fc:	3440      	adds	r4, #64	@ 0x40
 80046fe:	463b      	mov	r3, r7
 8004700:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004702:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8004706:	bf00      	nop
 8004708:	3714      	adds	r7, #20
 800470a:	46bd      	mov	sp, r7
 800470c:	bd90      	pop	{r4, r7, pc}
 800470e:	bf00      	nop
 8004710:	2400000c 	.word	0x2400000c

08004714 <LR03_AT>:

uint8_t LR03_RxBuffer[256] = {0};

uint8_t Test_1;

void LR03_AT(void){
 8004714:	b580      	push	{r7, lr}
 8004716:	af00      	add	r7, sp, #0

	HAL_UART_Transmit_IT(&huart6, (uint8_t*)"+++\r\n", 5);
 8004718:	2205      	movs	r2, #5
 800471a:	4903      	ldr	r1, [pc, #12]	@ (8004728 <LR03_AT+0x14>)
 800471c:	4803      	ldr	r0, [pc, #12]	@ (800472c <LR03_AT+0x18>)
 800471e:	f009 fecd 	bl	800e4bc <HAL_UART_Transmit_IT>
}
 8004722:	bf00      	nop
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	08018938 	.word	0x08018938
 800472c:	24001134 	.word	0x24001134

08004730 <LR03_Level>:

void LR03_Level(uint8_t Level){
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	4603      	mov	r3, r0
 8004738:	71fb      	strb	r3, [r7, #7]
	static uint8_t Level_Command[] = {"AT+LEVEL7\r\n"};
	if(Level > 7) Level = 7;
 800473a:	79fb      	ldrb	r3, [r7, #7]
 800473c:	2b07      	cmp	r3, #7
 800473e:	d901      	bls.n	8004744 <LR03_Level+0x14>
 8004740:	2307      	movs	r3, #7
 8004742:	71fb      	strb	r3, [r7, #7]
	if(Level < 1) Level = 1;
 8004744:	79fb      	ldrb	r3, [r7, #7]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <LR03_Level+0x1e>
 800474a:	2301      	movs	r3, #1
 800474c:	71fb      	strb	r3, [r7, #7]
	Level_Command[8] = Level + 48;
 800474e:	79fb      	ldrb	r3, [r7, #7]
 8004750:	3330      	adds	r3, #48	@ 0x30
 8004752:	b2da      	uxtb	r2, r3
 8004754:	4b05      	ldr	r3, [pc, #20]	@ (800476c <LR03_Level+0x3c>)
 8004756:	721a      	strb	r2, [r3, #8]
	HAL_UART_Transmit_IT(&huart6, Level_Command, 11);
 8004758:	220b      	movs	r2, #11
 800475a:	4904      	ldr	r1, [pc, #16]	@ (800476c <LR03_Level+0x3c>)
 800475c:	4804      	ldr	r0, [pc, #16]	@ (8004770 <LR03_Level+0x40>)
 800475e:	f009 fead 	bl	800e4bc <HAL_UART_Transmit_IT>
}
 8004762:	bf00      	nop
 8004764:	3708      	adds	r7, #8
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	2400005c 	.word	0x2400005c
 8004770:	24001134 	.word	0x24001134

08004774 <LR03_Receive>:

void LR03_Receive(uint8_t Data){
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	4603      	mov	r3, r0
 800477c:	71fb      	strb	r3, [r7, #7]
	static uint8_t DataPointer = 0;
	LR03_RxBuffer[DataPointer] = Data;
 800477e:	4b09      	ldr	r3, [pc, #36]	@ (80047a4 <LR03_Receive+0x30>)
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	4619      	mov	r1, r3
 8004784:	4a08      	ldr	r2, [pc, #32]	@ (80047a8 <LR03_Receive+0x34>)
 8004786:	79fb      	ldrb	r3, [r7, #7]
 8004788:	5453      	strb	r3, [r2, r1]
	DataPointer++;
 800478a:	4b06      	ldr	r3, [pc, #24]	@ (80047a4 <LR03_Receive+0x30>)
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	3301      	adds	r3, #1
 8004790:	b2da      	uxtb	r2, r3
 8004792:	4b04      	ldr	r3, [pc, #16]	@ (80047a4 <LR03_Receive+0x30>)
 8004794:	701a      	strb	r2, [r3, #0]
}
 8004796:	bf00      	nop
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	240015d5 	.word	0x240015d5
 80047a8:	240014d4 	.word	0x240014d4

080047ac <LR03_StateMachine>:

void LR03_StateMachine(void){
 80047ac:	b580      	push	{r7, lr}
 80047ae:	af00      	add	r7, sp, #0

	switch (Test_1) {
 80047b0:	4b09      	ldr	r3, [pc, #36]	@ (80047d8 <LR03_StateMachine+0x2c>)
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d002      	beq.n	80047be <LR03_StateMachine+0x12>
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d003      	beq.n	80047c4 <LR03_StateMachine+0x18>
			break;
		case 2:
			LR03_Level(7);
			break;
		default:
			break;
 80047bc:	e006      	b.n	80047cc <LR03_StateMachine+0x20>
			LR03_AT();
 80047be:	f7ff ffa9 	bl	8004714 <LR03_AT>
			break;
 80047c2:	e003      	b.n	80047cc <LR03_StateMachine+0x20>
			LR03_Level(7);
 80047c4:	2007      	movs	r0, #7
 80047c6:	f7ff ffb3 	bl	8004730 <LR03_Level>
			break;
 80047ca:	bf00      	nop
	}
	Test_1 = 0;
 80047cc:	4b02      	ldr	r3, [pc, #8]	@ (80047d8 <LR03_StateMachine+0x2c>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	701a      	strb	r2, [r3, #0]
}
 80047d2:	bf00      	nop
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	240015d4 	.word	0x240015d4

080047dc <PWM_Assing>:
		.Canal_8  = 1500,
		.Canal_9  = 1500,
		.Canal_10 = 1500,
};

void PWM_Assing(void){
 80047dc:	b580      	push	{r7, lr}
 80047de:	af00      	add	r7, sp, #0
	TIM2->CCR1 = PWM_Output.Canal_1;
 80047e0:	4b2a      	ldr	r3, [pc, #168]	@ (800488c <PWM_Assing+0xb0>)
 80047e2:	881a      	ldrh	r2, [r3, #0]
 80047e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80047e8:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2->CCR2 = PWM_Output.Canal_2;
 80047ea:	4b28      	ldr	r3, [pc, #160]	@ (800488c <PWM_Assing+0xb0>)
 80047ec:	885a      	ldrh	r2, [r3, #2]
 80047ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80047f2:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM3->CCR1 = PWM_Output.Canal_3;
 80047f4:	4b25      	ldr	r3, [pc, #148]	@ (800488c <PWM_Assing+0xb0>)
 80047f6:	889a      	ldrh	r2, [r3, #4]
 80047f8:	4b25      	ldr	r3, [pc, #148]	@ (8004890 <PWM_Assing+0xb4>)
 80047fa:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = PWM_Output.Canal_4;
 80047fc:	4b23      	ldr	r3, [pc, #140]	@ (800488c <PWM_Assing+0xb0>)
 80047fe:	88da      	ldrh	r2, [r3, #6]
 8004800:	4b23      	ldr	r3, [pc, #140]	@ (8004890 <PWM_Assing+0xb4>)
 8004802:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM4->CCR1 = PWM_Output.Canal_5;
 8004804:	4b21      	ldr	r3, [pc, #132]	@ (800488c <PWM_Assing+0xb0>)
 8004806:	891a      	ldrh	r2, [r3, #8]
 8004808:	4b22      	ldr	r3, [pc, #136]	@ (8004894 <PWM_Assing+0xb8>)
 800480a:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM4->CCR2 = PWM_Output.Canal_6;
 800480c:	4b1f      	ldr	r3, [pc, #124]	@ (800488c <PWM_Assing+0xb0>)
 800480e:	895a      	ldrh	r2, [r3, #10]
 8004810:	4b20      	ldr	r3, [pc, #128]	@ (8004894 <PWM_Assing+0xb8>)
 8004812:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM4->CCR3 = PWM_Output.Canal_7;
 8004814:	4b1d      	ldr	r3, [pc, #116]	@ (800488c <PWM_Assing+0xb0>)
 8004816:	899a      	ldrh	r2, [r3, #12]
 8004818:	4b1e      	ldr	r3, [pc, #120]	@ (8004894 <PWM_Assing+0xb8>)
 800481a:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM4->CCR4 = PWM_Output.Canal_8;
 800481c:	4b1b      	ldr	r3, [pc, #108]	@ (800488c <PWM_Assing+0xb0>)
 800481e:	89da      	ldrh	r2, [r3, #14]
 8004820:	4b1c      	ldr	r3, [pc, #112]	@ (8004894 <PWM_Assing+0xb8>)
 8004822:	641a      	str	r2, [r3, #64]	@ 0x40

	TIM2->CCR4 = PWM_Output.Canal_9;
 8004824:	4b19      	ldr	r3, [pc, #100]	@ (800488c <PWM_Assing+0xb0>)
 8004826:	8a1a      	ldrh	r2, [r3, #16]
 8004828:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800482c:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM2->CCR3 = PWM_Output.Canal_10;
 800482e:	4b17      	ldr	r3, [pc, #92]	@ (800488c <PWM_Assing+0xb0>)
 8004830:	8a5a      	ldrh	r2, [r3, #18]
 8004832:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004836:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8004838:	2100      	movs	r1, #0
 800483a:	4817      	ldr	r0, [pc, #92]	@ (8004898 <PWM_Assing+0xbc>)
 800483c:	f008 fdc0 	bl	800d3c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8004840:	2104      	movs	r1, #4
 8004842:	4815      	ldr	r0, [pc, #84]	@ (8004898 <PWM_Assing+0xbc>)
 8004844:	f008 fdbc 	bl	800d3c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8004848:	2108      	movs	r1, #8
 800484a:	4813      	ldr	r0, [pc, #76]	@ (8004898 <PWM_Assing+0xbc>)
 800484c:	f008 fdb8 	bl	800d3c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8004850:	210c      	movs	r1, #12
 8004852:	4811      	ldr	r0, [pc, #68]	@ (8004898 <PWM_Assing+0xbc>)
 8004854:	f008 fdb4 	bl	800d3c0 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8004858:	2100      	movs	r1, #0
 800485a:	4810      	ldr	r0, [pc, #64]	@ (800489c <PWM_Assing+0xc0>)
 800485c:	f008 fdb0 	bl	800d3c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8004860:	2104      	movs	r1, #4
 8004862:	480e      	ldr	r0, [pc, #56]	@ (800489c <PWM_Assing+0xc0>)
 8004864:	f008 fdac 	bl	800d3c0 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8004868:	2100      	movs	r1, #0
 800486a:	480d      	ldr	r0, [pc, #52]	@ (80048a0 <PWM_Assing+0xc4>)
 800486c:	f008 fda8 	bl	800d3c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8004870:	2104      	movs	r1, #4
 8004872:	480b      	ldr	r0, [pc, #44]	@ (80048a0 <PWM_Assing+0xc4>)
 8004874:	f008 fda4 	bl	800d3c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004878:	2108      	movs	r1, #8
 800487a:	4809      	ldr	r0, [pc, #36]	@ (80048a0 <PWM_Assing+0xc4>)
 800487c:	f008 fda0 	bl	800d3c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004880:	210c      	movs	r1, #12
 8004882:	4807      	ldr	r0, [pc, #28]	@ (80048a0 <PWM_Assing+0xc4>)
 8004884:	f008 fd9c 	bl	800d3c0 <HAL_TIM_PWM_Start>
}
 8004888:	bf00      	nop
 800488a:	bd80      	pop	{r7, pc}
 800488c:	24000068 	.word	0x24000068
 8004890:	40000400 	.word	0x40000400
 8004894:	40000800 	.word	0x40000800
 8004898:	24000e48 	.word	0x24000e48
 800489c:	24000e94 	.word	0x24000e94
 80048a0:	24000ee0 	.word	0x24000ee0

080048a4 <SBUS_init>:

extern UART_HandleTypeDef huart1;
#define SBUS_UART_handler &huart1


void SBUS_init(void){
 80048a4:	b580      	push	{r7, lr}
 80048a6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(SBUS_UART_handler, &SBUS_RxBuffer, 1);
 80048a8:	2201      	movs	r2, #1
 80048aa:	4903      	ldr	r1, [pc, #12]	@ (80048b8 <SBUS_init+0x14>)
 80048ac:	4803      	ldr	r0, [pc, #12]	@ (80048bc <SBUS_init+0x18>)
 80048ae:	f009 fee5 	bl	800e67c <HAL_UART_Receive_DMA>

}
 80048b2:	bf00      	nop
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	240015f1 	.word	0x240015f1
 80048bc:	2400100c 	.word	0x2400100c

080048c0 <SBUS_Receive>:

void SBUS_Receive(uint8_t SBUS_RxBuffer){
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	4603      	mov	r3, r0
 80048c8:	71fb      	strb	r3, [r7, #7]
	static uint8_t Actual_status = 0;
	static uint8_t RxCount;

	switch (Actual_status) {
 80048ca:	4b20      	ldr	r3, [pc, #128]	@ (800494c <SBUS_Receive+0x8c>)
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d002      	beq.n	80048d8 <SBUS_Receive+0x18>
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d017      	beq.n	8004906 <SBUS_Receive+0x46>
 80048d6:	e02f      	b.n	8004938 <SBUS_Receive+0x78>
		case 0:
			if(SBUS_RxBuffer == 0x0F){
 80048d8:	79fb      	ldrb	r3, [r7, #7]
 80048da:	2b0f      	cmp	r3, #15
 80048dc:	d10f      	bne.n	80048fe <SBUS_Receive+0x3e>
				SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 80048de:	4b1c      	ldr	r3, [pc, #112]	@ (8004950 <SBUS_Receive+0x90>)
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	4619      	mov	r1, r3
 80048e4:	4a1b      	ldr	r2, [pc, #108]	@ (8004954 <SBUS_Receive+0x94>)
 80048e6:	79fb      	ldrb	r3, [r7, #7]
 80048e8:	5453      	strb	r3, [r2, r1]
				Actual_status = 1;
 80048ea:	4b18      	ldr	r3, [pc, #96]	@ (800494c <SBUS_Receive+0x8c>)
 80048ec:	2201      	movs	r2, #1
 80048ee:	701a      	strb	r2, [r3, #0]
				RxCount++;
 80048f0:	4b17      	ldr	r3, [pc, #92]	@ (8004950 <SBUS_Receive+0x90>)
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	3301      	adds	r3, #1
 80048f6:	b2da      	uxtb	r2, r3
 80048f8:	4b15      	ldr	r3, [pc, #84]	@ (8004950 <SBUS_Receive+0x90>)
 80048fa:	701a      	strb	r2, [r3, #0]
			}
			else{
				RxCount = 0;
			}
			break;
 80048fc:	e021      	b.n	8004942 <SBUS_Receive+0x82>
				RxCount = 0;
 80048fe:	4b14      	ldr	r3, [pc, #80]	@ (8004950 <SBUS_Receive+0x90>)
 8004900:	2200      	movs	r2, #0
 8004902:	701a      	strb	r2, [r3, #0]
			break;
 8004904:	e01d      	b.n	8004942 <SBUS_Receive+0x82>
		case 1:
			SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 8004906:	4b12      	ldr	r3, [pc, #72]	@ (8004950 <SBUS_Receive+0x90>)
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	4619      	mov	r1, r3
 800490c:	4a11      	ldr	r2, [pc, #68]	@ (8004954 <SBUS_Receive+0x94>)
 800490e:	79fb      	ldrb	r3, [r7, #7]
 8004910:	5453      	strb	r3, [r2, r1]
			RxCount++;
 8004912:	4b0f      	ldr	r3, [pc, #60]	@ (8004950 <SBUS_Receive+0x90>)
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	3301      	adds	r3, #1
 8004918:	b2da      	uxtb	r2, r3
 800491a:	4b0d      	ldr	r3, [pc, #52]	@ (8004950 <SBUS_Receive+0x90>)
 800491c:	701a      	strb	r2, [r3, #0]
			if(RxCount == 24){
 800491e:	4b0c      	ldr	r3, [pc, #48]	@ (8004950 <SBUS_Receive+0x90>)
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	2b18      	cmp	r3, #24
 8004924:	d10c      	bne.n	8004940 <SBUS_Receive+0x80>
				RxCount = 0;
 8004926:	4b0a      	ldr	r3, [pc, #40]	@ (8004950 <SBUS_Receive+0x90>)
 8004928:	2200      	movs	r2, #0
 800492a:	701a      	strb	r2, [r3, #0]
				Actual_status = 0;
 800492c:	4b07      	ldr	r3, [pc, #28]	@ (800494c <SBUS_Receive+0x8c>)
 800492e:	2200      	movs	r2, #0
 8004930:	701a      	strb	r2, [r3, #0]
				SBUS_getData();
 8004932:	f000 f845 	bl	80049c0 <SBUS_getData>
			}
			break;
 8004936:	e003      	b.n	8004940 <SBUS_Receive+0x80>
		default:
			Actual_status = 0;
 8004938:	4b04      	ldr	r3, [pc, #16]	@ (800494c <SBUS_Receive+0x8c>)
 800493a:	2200      	movs	r2, #0
 800493c:	701a      	strb	r2, [r3, #0]
			break;
 800493e:	e000      	b.n	8004942 <SBUS_Receive+0x82>
			break;
 8004940:	bf00      	nop
	}
}
 8004942:	bf00      	nop
 8004944:	3708      	adds	r7, #8
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	240015f2 	.word	0x240015f2
 8004950:	240015f3 	.word	0x240015f3
 8004954:	240015d8 	.word	0x240015d8

08004958 <Temp_BypassFunct>:

void Temp_BypassFunct (void){
 8004958:	b480      	push	{r7}
 800495a:	af00      	add	r7, sp, #0
	PWM_Output.Canal_1  = Radio_input.Canal_1;
 800495c:	4b16      	ldr	r3, [pc, #88]	@ (80049b8 <Temp_BypassFunct+0x60>)
 800495e:	885a      	ldrh	r2, [r3, #2]
 8004960:	4b16      	ldr	r3, [pc, #88]	@ (80049bc <Temp_BypassFunct+0x64>)
 8004962:	801a      	strh	r2, [r3, #0]
	PWM_Output.Canal_2  = Radio_input.Canal_2;
 8004964:	4b14      	ldr	r3, [pc, #80]	@ (80049b8 <Temp_BypassFunct+0x60>)
 8004966:	889a      	ldrh	r2, [r3, #4]
 8004968:	4b14      	ldr	r3, [pc, #80]	@ (80049bc <Temp_BypassFunct+0x64>)
 800496a:	805a      	strh	r2, [r3, #2]
	PWM_Output.Canal_3  = Radio_input.Canal_3;
 800496c:	4b12      	ldr	r3, [pc, #72]	@ (80049b8 <Temp_BypassFunct+0x60>)
 800496e:	88da      	ldrh	r2, [r3, #6]
 8004970:	4b12      	ldr	r3, [pc, #72]	@ (80049bc <Temp_BypassFunct+0x64>)
 8004972:	809a      	strh	r2, [r3, #4]
	PWM_Output.Canal_4  = Radio_input.Canal_4;
 8004974:	4b10      	ldr	r3, [pc, #64]	@ (80049b8 <Temp_BypassFunct+0x60>)
 8004976:	891a      	ldrh	r2, [r3, #8]
 8004978:	4b10      	ldr	r3, [pc, #64]	@ (80049bc <Temp_BypassFunct+0x64>)
 800497a:	80da      	strh	r2, [r3, #6]
	PWM_Output.Canal_5  = Radio_input.Canal_5;
 800497c:	4b0e      	ldr	r3, [pc, #56]	@ (80049b8 <Temp_BypassFunct+0x60>)
 800497e:	895a      	ldrh	r2, [r3, #10]
 8004980:	4b0e      	ldr	r3, [pc, #56]	@ (80049bc <Temp_BypassFunct+0x64>)
 8004982:	811a      	strh	r2, [r3, #8]
	PWM_Output.Canal_6  = Radio_input.Canal_6;
 8004984:	4b0c      	ldr	r3, [pc, #48]	@ (80049b8 <Temp_BypassFunct+0x60>)
 8004986:	899a      	ldrh	r2, [r3, #12]
 8004988:	4b0c      	ldr	r3, [pc, #48]	@ (80049bc <Temp_BypassFunct+0x64>)
 800498a:	815a      	strh	r2, [r3, #10]
	PWM_Output.Canal_7  = Radio_input.Canal_7;
 800498c:	4b0a      	ldr	r3, [pc, #40]	@ (80049b8 <Temp_BypassFunct+0x60>)
 800498e:	89da      	ldrh	r2, [r3, #14]
 8004990:	4b0a      	ldr	r3, [pc, #40]	@ (80049bc <Temp_BypassFunct+0x64>)
 8004992:	819a      	strh	r2, [r3, #12]
	PWM_Output.Canal_8  = Radio_input.Canal_8;
 8004994:	4b08      	ldr	r3, [pc, #32]	@ (80049b8 <Temp_BypassFunct+0x60>)
 8004996:	8a1a      	ldrh	r2, [r3, #16]
 8004998:	4b08      	ldr	r3, [pc, #32]	@ (80049bc <Temp_BypassFunct+0x64>)
 800499a:	81da      	strh	r2, [r3, #14]
	PWM_Output.Canal_9  = Radio_input.Canal_9;
 800499c:	4b06      	ldr	r3, [pc, #24]	@ (80049b8 <Temp_BypassFunct+0x60>)
 800499e:	8a5a      	ldrh	r2, [r3, #18]
 80049a0:	4b06      	ldr	r3, [pc, #24]	@ (80049bc <Temp_BypassFunct+0x64>)
 80049a2:	821a      	strh	r2, [r3, #16]
	PWM_Output.Canal_10 = Radio_input.Canal_10;
 80049a4:	4b04      	ldr	r3, [pc, #16]	@ (80049b8 <Temp_BypassFunct+0x60>)
 80049a6:	8a9a      	ldrh	r2, [r3, #20]
 80049a8:	4b04      	ldr	r3, [pc, #16]	@ (80049bc <Temp_BypassFunct+0x64>)
 80049aa:	825a      	strh	r2, [r3, #18]
}
 80049ac:	bf00      	nop
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	2400007c 	.word	0x2400007c
 80049bc:	24000068 	.word	0x24000068

080049c0 <SBUS_getData>:

void SBUS_getData(void){
 80049c0:	b580      	push	{r7, lr}
 80049c2:	af00      	add	r7, sp, #0
	//Se hace el corrimiento de bits para dar la estructura de los 16 canales, donde cada canal esta compuesto por 11 bits
	//pero cada paquete es de 1 byte. Para cada canal se utilizan los 8 bits (O los que correspondan) de el byte 1
	//(O el que corresponda) como los bits menos significativos del canal 1, y los tres bits faltantes se toman los 3 bits
	// menos significativos (O los que correspondan) del byte 2 y se colocan como los 3 bits más significativos del canal 1.
	Radio_input.Canal_1 = ((SBUS_UART_Rx[1] | SBUS_UART_Rx[2] << 8) & 0x07FF);
 80049c4:	4b95      	ldr	r3, [pc, #596]	@ (8004c1c <SBUS_getData+0x25c>)
 80049c6:	785b      	ldrb	r3, [r3, #1]
 80049c8:	b21a      	sxth	r2, r3
 80049ca:	4b94      	ldr	r3, [pc, #592]	@ (8004c1c <SBUS_getData+0x25c>)
 80049cc:	789b      	ldrb	r3, [r3, #2]
 80049ce:	021b      	lsls	r3, r3, #8
 80049d0:	b21b      	sxth	r3, r3
 80049d2:	4313      	orrs	r3, r2
 80049d4:	b21b      	sxth	r3, r3
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049dc:	b29a      	uxth	r2, r3
 80049de:	4b90      	ldr	r3, [pc, #576]	@ (8004c20 <SBUS_getData+0x260>)
 80049e0:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_2 = ((SBUS_UART_Rx[2] >> 3 | SBUS_UART_Rx[3] << 5) & 0x07FF);
 80049e2:	4b8e      	ldr	r3, [pc, #568]	@ (8004c1c <SBUS_getData+0x25c>)
 80049e4:	789b      	ldrb	r3, [r3, #2]
 80049e6:	08db      	lsrs	r3, r3, #3
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	b21a      	sxth	r2, r3
 80049ec:	4b8b      	ldr	r3, [pc, #556]	@ (8004c1c <SBUS_getData+0x25c>)
 80049ee:	78db      	ldrb	r3, [r3, #3]
 80049f0:	015b      	lsls	r3, r3, #5
 80049f2:	b21b      	sxth	r3, r3
 80049f4:	4313      	orrs	r3, r2
 80049f6:	b21b      	sxth	r3, r3
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	4b87      	ldr	r3, [pc, #540]	@ (8004c20 <SBUS_getData+0x260>)
 8004a02:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_3 = ((SBUS_UART_Rx[3] >> 6 | SBUS_UART_Rx[4] << 2 | SBUS_UART_Rx[5] << 10) & 0x07FF);
 8004a04:	4b85      	ldr	r3, [pc, #532]	@ (8004c1c <SBUS_getData+0x25c>)
 8004a06:	78db      	ldrb	r3, [r3, #3]
 8004a08:	099b      	lsrs	r3, r3, #6
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	b21a      	sxth	r2, r3
 8004a0e:	4b83      	ldr	r3, [pc, #524]	@ (8004c1c <SBUS_getData+0x25c>)
 8004a10:	791b      	ldrb	r3, [r3, #4]
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	b21b      	sxth	r3, r3
 8004a16:	4313      	orrs	r3, r2
 8004a18:	b21a      	sxth	r2, r3
 8004a1a:	4b80      	ldr	r3, [pc, #512]	@ (8004c1c <SBUS_getData+0x25c>)
 8004a1c:	795b      	ldrb	r3, [r3, #5]
 8004a1e:	029b      	lsls	r3, r3, #10
 8004a20:	b21b      	sxth	r3, r3
 8004a22:	4313      	orrs	r3, r2
 8004a24:	b21b      	sxth	r3, r3
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	4b7c      	ldr	r3, [pc, #496]	@ (8004c20 <SBUS_getData+0x260>)
 8004a30:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_4 = ((SBUS_UART_Rx[5] >> 1 | SBUS_UART_Rx[6] << 7) & 0x07FF);
 8004a32:	4b7a      	ldr	r3, [pc, #488]	@ (8004c1c <SBUS_getData+0x25c>)
 8004a34:	795b      	ldrb	r3, [r3, #5]
 8004a36:	085b      	lsrs	r3, r3, #1
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	b21a      	sxth	r2, r3
 8004a3c:	4b77      	ldr	r3, [pc, #476]	@ (8004c1c <SBUS_getData+0x25c>)
 8004a3e:	799b      	ldrb	r3, [r3, #6]
 8004a40:	01db      	lsls	r3, r3, #7
 8004a42:	b21b      	sxth	r3, r3
 8004a44:	4313      	orrs	r3, r2
 8004a46:	b21b      	sxth	r3, r3
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	4b73      	ldr	r3, [pc, #460]	@ (8004c20 <SBUS_getData+0x260>)
 8004a52:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_5 = ((SBUS_UART_Rx[6] >> 4 | SBUS_UART_Rx[7] << 4) & 0x07FF);
 8004a54:	4b71      	ldr	r3, [pc, #452]	@ (8004c1c <SBUS_getData+0x25c>)
 8004a56:	799b      	ldrb	r3, [r3, #6]
 8004a58:	091b      	lsrs	r3, r3, #4
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	b21a      	sxth	r2, r3
 8004a5e:	4b6f      	ldr	r3, [pc, #444]	@ (8004c1c <SBUS_getData+0x25c>)
 8004a60:	79db      	ldrb	r3, [r3, #7]
 8004a62:	011b      	lsls	r3, r3, #4
 8004a64:	b21b      	sxth	r3, r3
 8004a66:	4313      	orrs	r3, r2
 8004a68:	b21b      	sxth	r3, r3
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	4b6b      	ldr	r3, [pc, #428]	@ (8004c20 <SBUS_getData+0x260>)
 8004a74:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_6 = ((SBUS_UART_Rx[7] >> 7 | SBUS_UART_Rx[8] << 1 | SBUS_UART_Rx[9] << 9) & 0x07FF);
 8004a76:	4b69      	ldr	r3, [pc, #420]	@ (8004c1c <SBUS_getData+0x25c>)
 8004a78:	79db      	ldrb	r3, [r3, #7]
 8004a7a:	09db      	lsrs	r3, r3, #7
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	b21a      	sxth	r2, r3
 8004a80:	4b66      	ldr	r3, [pc, #408]	@ (8004c1c <SBUS_getData+0x25c>)
 8004a82:	7a1b      	ldrb	r3, [r3, #8]
 8004a84:	005b      	lsls	r3, r3, #1
 8004a86:	b21b      	sxth	r3, r3
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	b21a      	sxth	r2, r3
 8004a8c:	4b63      	ldr	r3, [pc, #396]	@ (8004c1c <SBUS_getData+0x25c>)
 8004a8e:	7a5b      	ldrb	r3, [r3, #9]
 8004a90:	025b      	lsls	r3, r3, #9
 8004a92:	b21b      	sxth	r3, r3
 8004a94:	4313      	orrs	r3, r2
 8004a96:	b21b      	sxth	r3, r3
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	4b5f      	ldr	r3, [pc, #380]	@ (8004c20 <SBUS_getData+0x260>)
 8004aa2:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_7 = ((SBUS_UART_Rx[9] >> 2 | SBUS_UART_Rx[10] << 6) & 0x07FF);
 8004aa4:	4b5d      	ldr	r3, [pc, #372]	@ (8004c1c <SBUS_getData+0x25c>)
 8004aa6:	7a5b      	ldrb	r3, [r3, #9]
 8004aa8:	089b      	lsrs	r3, r3, #2
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	b21a      	sxth	r2, r3
 8004aae:	4b5b      	ldr	r3, [pc, #364]	@ (8004c1c <SBUS_getData+0x25c>)
 8004ab0:	7a9b      	ldrb	r3, [r3, #10]
 8004ab2:	019b      	lsls	r3, r3, #6
 8004ab4:	b21b      	sxth	r3, r3
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	b21b      	sxth	r3, r3
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	4b57      	ldr	r3, [pc, #348]	@ (8004c20 <SBUS_getData+0x260>)
 8004ac4:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_8 = ((SBUS_UART_Rx[10] >> 5 | SBUS_UART_Rx[11] << 3) & 0x07FF);
 8004ac6:	4b55      	ldr	r3, [pc, #340]	@ (8004c1c <SBUS_getData+0x25c>)
 8004ac8:	7a9b      	ldrb	r3, [r3, #10]
 8004aca:	095b      	lsrs	r3, r3, #5
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	b21a      	sxth	r2, r3
 8004ad0:	4b52      	ldr	r3, [pc, #328]	@ (8004c1c <SBUS_getData+0x25c>)
 8004ad2:	7adb      	ldrb	r3, [r3, #11]
 8004ad4:	00db      	lsls	r3, r3, #3
 8004ad6:	b21b      	sxth	r3, r3
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	b21b      	sxth	r3, r3
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	4b4e      	ldr	r3, [pc, #312]	@ (8004c20 <SBUS_getData+0x260>)
 8004ae6:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_9 = ((SBUS_UART_Rx[12] | SBUS_UART_Rx[13] << 8) & 0x07FF);
 8004ae8:	4b4c      	ldr	r3, [pc, #304]	@ (8004c1c <SBUS_getData+0x25c>)
 8004aea:	7b1b      	ldrb	r3, [r3, #12]
 8004aec:	b21a      	sxth	r2, r3
 8004aee:	4b4b      	ldr	r3, [pc, #300]	@ (8004c1c <SBUS_getData+0x25c>)
 8004af0:	7b5b      	ldrb	r3, [r3, #13]
 8004af2:	021b      	lsls	r3, r3, #8
 8004af4:	b21b      	sxth	r3, r3
 8004af6:	4313      	orrs	r3, r2
 8004af8:	b21b      	sxth	r3, r3
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	4b47      	ldr	r3, [pc, #284]	@ (8004c20 <SBUS_getData+0x260>)
 8004b04:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_10 = ((SBUS_UART_Rx[13] >> 3 | SBUS_UART_Rx[14] << 5) & 0x07FF);
 8004b06:	4b45      	ldr	r3, [pc, #276]	@ (8004c1c <SBUS_getData+0x25c>)
 8004b08:	7b5b      	ldrb	r3, [r3, #13]
 8004b0a:	08db      	lsrs	r3, r3, #3
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	b21a      	sxth	r2, r3
 8004b10:	4b42      	ldr	r3, [pc, #264]	@ (8004c1c <SBUS_getData+0x25c>)
 8004b12:	7b9b      	ldrb	r3, [r3, #14]
 8004b14:	015b      	lsls	r3, r3, #5
 8004b16:	b21b      	sxth	r3, r3
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	b21b      	sxth	r3, r3
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	4b3e      	ldr	r3, [pc, #248]	@ (8004c20 <SBUS_getData+0x260>)
 8004b26:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_11 = ((SBUS_UART_Rx[14] >> 6 | SBUS_UART_Rx[15] << 2 | SBUS_UART_Rx[16] << 10) & 0x07FF);
 8004b28:	4b3c      	ldr	r3, [pc, #240]	@ (8004c1c <SBUS_getData+0x25c>)
 8004b2a:	7b9b      	ldrb	r3, [r3, #14]
 8004b2c:	099b      	lsrs	r3, r3, #6
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	b21a      	sxth	r2, r3
 8004b32:	4b3a      	ldr	r3, [pc, #232]	@ (8004c1c <SBUS_getData+0x25c>)
 8004b34:	7bdb      	ldrb	r3, [r3, #15]
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	b21b      	sxth	r3, r3
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	b21a      	sxth	r2, r3
 8004b3e:	4b37      	ldr	r3, [pc, #220]	@ (8004c1c <SBUS_getData+0x25c>)
 8004b40:	7c1b      	ldrb	r3, [r3, #16]
 8004b42:	029b      	lsls	r3, r3, #10
 8004b44:	b21b      	sxth	r3, r3
 8004b46:	4313      	orrs	r3, r2
 8004b48:	b21b      	sxth	r3, r3
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	4b33      	ldr	r3, [pc, #204]	@ (8004c20 <SBUS_getData+0x260>)
 8004b54:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_12 = ((SBUS_UART_Rx[16] >> 1 | SBUS_UART_Rx[17] << 7) & 0x07FF);
 8004b56:	4b31      	ldr	r3, [pc, #196]	@ (8004c1c <SBUS_getData+0x25c>)
 8004b58:	7c1b      	ldrb	r3, [r3, #16]
 8004b5a:	085b      	lsrs	r3, r3, #1
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	b21a      	sxth	r2, r3
 8004b60:	4b2e      	ldr	r3, [pc, #184]	@ (8004c1c <SBUS_getData+0x25c>)
 8004b62:	7c5b      	ldrb	r3, [r3, #17]
 8004b64:	01db      	lsls	r3, r3, #7
 8004b66:	b21b      	sxth	r3, r3
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	b21b      	sxth	r3, r3
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	4b2a      	ldr	r3, [pc, #168]	@ (8004c20 <SBUS_getData+0x260>)
 8004b76:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_13 = ((SBUS_UART_Rx[17] >> 4 | SBUS_UART_Rx[18] << 4) & 0x07FF);
 8004b78:	4b28      	ldr	r3, [pc, #160]	@ (8004c1c <SBUS_getData+0x25c>)
 8004b7a:	7c5b      	ldrb	r3, [r3, #17]
 8004b7c:	091b      	lsrs	r3, r3, #4
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	b21a      	sxth	r2, r3
 8004b82:	4b26      	ldr	r3, [pc, #152]	@ (8004c1c <SBUS_getData+0x25c>)
 8004b84:	7c9b      	ldrb	r3, [r3, #18]
 8004b86:	011b      	lsls	r3, r3, #4
 8004b88:	b21b      	sxth	r3, r3
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	b21b      	sxth	r3, r3
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	4b22      	ldr	r3, [pc, #136]	@ (8004c20 <SBUS_getData+0x260>)
 8004b98:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_14 = ((SBUS_UART_Rx[18] >> 7 | SBUS_UART_Rx[19] << 1 | SBUS_UART_Rx[20] << 9) & 0x07FF);
 8004b9a:	4b20      	ldr	r3, [pc, #128]	@ (8004c1c <SBUS_getData+0x25c>)
 8004b9c:	7c9b      	ldrb	r3, [r3, #18]
 8004b9e:	09db      	lsrs	r3, r3, #7
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	b21a      	sxth	r2, r3
 8004ba4:	4b1d      	ldr	r3, [pc, #116]	@ (8004c1c <SBUS_getData+0x25c>)
 8004ba6:	7cdb      	ldrb	r3, [r3, #19]
 8004ba8:	005b      	lsls	r3, r3, #1
 8004baa:	b21b      	sxth	r3, r3
 8004bac:	4313      	orrs	r3, r2
 8004bae:	b21a      	sxth	r2, r3
 8004bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8004c1c <SBUS_getData+0x25c>)
 8004bb2:	7d1b      	ldrb	r3, [r3, #20]
 8004bb4:	025b      	lsls	r3, r3, #9
 8004bb6:	b21b      	sxth	r3, r3
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	b21b      	sxth	r3, r3
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	4b16      	ldr	r3, [pc, #88]	@ (8004c20 <SBUS_getData+0x260>)
 8004bc6:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_15 = ((SBUS_UART_Rx[20] >> 2 | SBUS_UART_Rx[21] << 6) & 0x07FF);
 8004bc8:	4b14      	ldr	r3, [pc, #80]	@ (8004c1c <SBUS_getData+0x25c>)
 8004bca:	7d1b      	ldrb	r3, [r3, #20]
 8004bcc:	089b      	lsrs	r3, r3, #2
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	b21a      	sxth	r2, r3
 8004bd2:	4b12      	ldr	r3, [pc, #72]	@ (8004c1c <SBUS_getData+0x25c>)
 8004bd4:	7d5b      	ldrb	r3, [r3, #21]
 8004bd6:	019b      	lsls	r3, r3, #6
 8004bd8:	b21b      	sxth	r3, r3
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	b21b      	sxth	r3, r3
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	4b0e      	ldr	r3, [pc, #56]	@ (8004c20 <SBUS_getData+0x260>)
 8004be8:	83da      	strh	r2, [r3, #30]
	Radio_input.Canal_16 = ((SBUS_UART_Rx[21] >> 5 | SBUS_UART_Rx[22] << 3) & 0x07FF);
 8004bea:	4b0c      	ldr	r3, [pc, #48]	@ (8004c1c <SBUS_getData+0x25c>)
 8004bec:	7d5b      	ldrb	r3, [r3, #21]
 8004bee:	095b      	lsrs	r3, r3, #5
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	b21a      	sxth	r2, r3
 8004bf4:	4b09      	ldr	r3, [pc, #36]	@ (8004c1c <SBUS_getData+0x25c>)
 8004bf6:	7d9b      	ldrb	r3, [r3, #22]
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	b21b      	sxth	r3, r3
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	b21b      	sxth	r3, r3
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	4b05      	ldr	r3, [pc, #20]	@ (8004c20 <SBUS_getData+0x260>)
 8004c0a:	841a      	strh	r2, [r3, #32]

	Radio_input.Canal_1 = (uint16_t)((((float)Radio_input.Canal_1 - 352) /1344 ) * 1000) + 1000;
 8004c0c:	4b04      	ldr	r3, [pc, #16]	@ (8004c20 <SBUS_getData+0x260>)
 8004c0e:	885b      	ldrh	r3, [r3, #2]
 8004c10:	ee07 3a90 	vmov	s15, r3
 8004c14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c18:	e00a      	b.n	8004c30 <SBUS_getData+0x270>
 8004c1a:	bf00      	nop
 8004c1c:	240015d8 	.word	0x240015d8
 8004c20:	2400007c 	.word	0x2400007c
 8004c24:	43b00000 	.word	0x43b00000
 8004c28:	44a80000 	.word	0x44a80000
 8004c2c:	447a0000 	.word	0x447a0000
 8004c30:	ed1f 7a04 	vldr	s14, [pc, #-16]	@ 8004c24 <SBUS_getData+0x264>
 8004c34:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004c38:	ed5f 6a05 	vldr	s13, [pc, #-20]	@ 8004c28 <SBUS_getData+0x268>
 8004c3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c40:	ed1f 7a06 	vldr	s14, [pc, #-24]	@ 8004c2c <SBUS_getData+0x26c>
 8004c44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c4c:	ee17 3a90 	vmov	r3, s15
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	4bd1      	ldr	r3, [pc, #836]	@ (8004fa0 <SBUS_getData+0x5e0>)
 8004c5a:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_2 = (uint16_t)((((float)Radio_input.Canal_2 - 352) /1344 ) * 1000) + 1000;
 8004c5c:	4bd0      	ldr	r3, [pc, #832]	@ (8004fa0 <SBUS_getData+0x5e0>)
 8004c5e:	889b      	ldrh	r3, [r3, #4]
 8004c60:	ee07 3a90 	vmov	s15, r3
 8004c64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c68:	ed9f 7ace 	vldr	s14, [pc, #824]	@ 8004fa4 <SBUS_getData+0x5e4>
 8004c6c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004c70:	eddf 6acd 	vldr	s13, [pc, #820]	@ 8004fa8 <SBUS_getData+0x5e8>
 8004c74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c78:	ed9f 7acc 	vldr	s14, [pc, #816]	@ 8004fac <SBUS_getData+0x5ec>
 8004c7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c84:	ee17 3a90 	vmov	r3, s15
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	4bc3      	ldr	r3, [pc, #780]	@ (8004fa0 <SBUS_getData+0x5e0>)
 8004c92:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_3 = (uint16_t)((((float)Radio_input.Canal_3 - 352) /1344 ) * 1000) + 1000;
 8004c94:	4bc2      	ldr	r3, [pc, #776]	@ (8004fa0 <SBUS_getData+0x5e0>)
 8004c96:	88db      	ldrh	r3, [r3, #6]
 8004c98:	ee07 3a90 	vmov	s15, r3
 8004c9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ca0:	ed9f 7ac0 	vldr	s14, [pc, #768]	@ 8004fa4 <SBUS_getData+0x5e4>
 8004ca4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004ca8:	eddf 6abf 	vldr	s13, [pc, #764]	@ 8004fa8 <SBUS_getData+0x5e8>
 8004cac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004cb0:	ed9f 7abe 	vldr	s14, [pc, #760]	@ 8004fac <SBUS_getData+0x5ec>
 8004cb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cbc:	ee17 3a90 	vmov	r3, s15
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	4bb5      	ldr	r3, [pc, #724]	@ (8004fa0 <SBUS_getData+0x5e0>)
 8004cca:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_4 = (uint16_t)((((float)Radio_input.Canal_4 - 352) /1344 ) * 1000) + 1000;
 8004ccc:	4bb4      	ldr	r3, [pc, #720]	@ (8004fa0 <SBUS_getData+0x5e0>)
 8004cce:	891b      	ldrh	r3, [r3, #8]
 8004cd0:	ee07 3a90 	vmov	s15, r3
 8004cd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cd8:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 8004fa4 <SBUS_getData+0x5e4>
 8004cdc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004ce0:	eddf 6ab1 	vldr	s13, [pc, #708]	@ 8004fa8 <SBUS_getData+0x5e8>
 8004ce4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ce8:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8004fac <SBUS_getData+0x5ec>
 8004cec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cf4:	ee17 3a90 	vmov	r3, s15
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	4ba7      	ldr	r3, [pc, #668]	@ (8004fa0 <SBUS_getData+0x5e0>)
 8004d02:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_5 = (uint16_t)((((float)Radio_input.Canal_5 - 352) /1344 ) * 1000) + 1000;
 8004d04:	4ba6      	ldr	r3, [pc, #664]	@ (8004fa0 <SBUS_getData+0x5e0>)
 8004d06:	895b      	ldrh	r3, [r3, #10]
 8004d08:	ee07 3a90 	vmov	s15, r3
 8004d0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d10:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 8004fa4 <SBUS_getData+0x5e4>
 8004d14:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004d18:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8004fa8 <SBUS_getData+0x5e8>
 8004d1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d20:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8004fac <SBUS_getData+0x5ec>
 8004d24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d2c:	ee17 3a90 	vmov	r3, s15
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	4b99      	ldr	r3, [pc, #612]	@ (8004fa0 <SBUS_getData+0x5e0>)
 8004d3a:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_6 = (uint16_t)((((float)Radio_input.Canal_6 - 352) /1344 ) * 1000) + 1000;
 8004d3c:	4b98      	ldr	r3, [pc, #608]	@ (8004fa0 <SBUS_getData+0x5e0>)
 8004d3e:	899b      	ldrh	r3, [r3, #12]
 8004d40:	ee07 3a90 	vmov	s15, r3
 8004d44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d48:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8004fa4 <SBUS_getData+0x5e4>
 8004d4c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004d50:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8004fa8 <SBUS_getData+0x5e8>
 8004d54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d58:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8004fac <SBUS_getData+0x5ec>
 8004d5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d64:	ee17 3a90 	vmov	r3, s15
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	4b8b      	ldr	r3, [pc, #556]	@ (8004fa0 <SBUS_getData+0x5e0>)
 8004d72:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_7 = (uint16_t)((((float)Radio_input.Canal_7 - 352) /1344 ) * 1000) + 1000;
 8004d74:	4b8a      	ldr	r3, [pc, #552]	@ (8004fa0 <SBUS_getData+0x5e0>)
 8004d76:	89db      	ldrh	r3, [r3, #14]
 8004d78:	ee07 3a90 	vmov	s15, r3
 8004d7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d80:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8004fa4 <SBUS_getData+0x5e4>
 8004d84:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004d88:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8004fa8 <SBUS_getData+0x5e8>
 8004d8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d90:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8004fac <SBUS_getData+0x5ec>
 8004d94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d9c:	ee17 3a90 	vmov	r3, s15
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	4b7d      	ldr	r3, [pc, #500]	@ (8004fa0 <SBUS_getData+0x5e0>)
 8004daa:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_8 = (uint16_t)((((float)Radio_input.Canal_8 - 352) /1344 ) * 1000) + 1000;
 8004dac:	4b7c      	ldr	r3, [pc, #496]	@ (8004fa0 <SBUS_getData+0x5e0>)
 8004dae:	8a1b      	ldrh	r3, [r3, #16]
 8004db0:	ee07 3a90 	vmov	s15, r3
 8004db4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004db8:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8004fa4 <SBUS_getData+0x5e4>
 8004dbc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004dc0:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8004fa8 <SBUS_getData+0x5e8>
 8004dc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004dc8:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8004fac <SBUS_getData+0x5ec>
 8004dcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004dd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dd4:	ee17 3a90 	vmov	r3, s15
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	4b6f      	ldr	r3, [pc, #444]	@ (8004fa0 <SBUS_getData+0x5e0>)
 8004de2:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_9 = (uint16_t)((((float)Radio_input.Canal_9 - 352) /1344 ) * 1000) + 1000;
 8004de4:	4b6e      	ldr	r3, [pc, #440]	@ (8004fa0 <SBUS_getData+0x5e0>)
 8004de6:	8a5b      	ldrh	r3, [r3, #18]
 8004de8:	ee07 3a90 	vmov	s15, r3
 8004dec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004df0:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8004fa4 <SBUS_getData+0x5e4>
 8004df4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004df8:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8004fa8 <SBUS_getData+0x5e8>
 8004dfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004e00:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 8004fac <SBUS_getData+0x5ec>
 8004e04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e0c:	ee17 3a90 	vmov	r3, s15
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	4b61      	ldr	r3, [pc, #388]	@ (8004fa0 <SBUS_getData+0x5e0>)
 8004e1a:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_10 = (uint16_t)((((float)Radio_input.Canal_10 - 352) /1344 ) * 1000) + 1000;
 8004e1c:	4b60      	ldr	r3, [pc, #384]	@ (8004fa0 <SBUS_getData+0x5e0>)
 8004e1e:	8a9b      	ldrh	r3, [r3, #20]
 8004e20:	ee07 3a90 	vmov	s15, r3
 8004e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e28:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8004fa4 <SBUS_getData+0x5e4>
 8004e2c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004e30:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8004fa8 <SBUS_getData+0x5e8>
 8004e34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004e38:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8004fac <SBUS_getData+0x5ec>
 8004e3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e44:	ee17 3a90 	vmov	r3, s15
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	4b53      	ldr	r3, [pc, #332]	@ (8004fa0 <SBUS_getData+0x5e0>)
 8004e52:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_11 = (uint16_t)((((float)Radio_input.Canal_11 - 352) /1344 ) * 1000) + 1000;
 8004e54:	4b52      	ldr	r3, [pc, #328]	@ (8004fa0 <SBUS_getData+0x5e0>)
 8004e56:	8adb      	ldrh	r3, [r3, #22]
 8004e58:	ee07 3a90 	vmov	s15, r3
 8004e5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e60:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8004fa4 <SBUS_getData+0x5e4>
 8004e64:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004e68:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004fa8 <SBUS_getData+0x5e8>
 8004e6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004e70:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8004fac <SBUS_getData+0x5ec>
 8004e74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e7c:	ee17 3a90 	vmov	r3, s15
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	4b45      	ldr	r3, [pc, #276]	@ (8004fa0 <SBUS_getData+0x5e0>)
 8004e8a:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_12 = (uint16_t)((((float)Radio_input.Canal_12 - 352) /1344 ) * 1000) + 1000;
 8004e8c:	4b44      	ldr	r3, [pc, #272]	@ (8004fa0 <SBUS_getData+0x5e0>)
 8004e8e:	8b1b      	ldrh	r3, [r3, #24]
 8004e90:	ee07 3a90 	vmov	s15, r3
 8004e94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e98:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8004fa4 <SBUS_getData+0x5e4>
 8004e9c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004ea0:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8004fa8 <SBUS_getData+0x5e8>
 8004ea4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ea8:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8004fac <SBUS_getData+0x5ec>
 8004eac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004eb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004eb4:	ee17 3a90 	vmov	r3, s15
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	4b37      	ldr	r3, [pc, #220]	@ (8004fa0 <SBUS_getData+0x5e0>)
 8004ec2:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_13 = (uint16_t)((((float)Radio_input.Canal_13 - 352) /1344 ) * 1000) + 1000;
 8004ec4:	4b36      	ldr	r3, [pc, #216]	@ (8004fa0 <SBUS_getData+0x5e0>)
 8004ec6:	8b5b      	ldrh	r3, [r3, #26]
 8004ec8:	ee07 3a90 	vmov	s15, r3
 8004ecc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ed0:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8004fa4 <SBUS_getData+0x5e4>
 8004ed4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004ed8:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8004fa8 <SBUS_getData+0x5e8>
 8004edc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ee0:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8004fac <SBUS_getData+0x5ec>
 8004ee4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ee8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004eec:	ee17 3a90 	vmov	r3, s15
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	4b29      	ldr	r3, [pc, #164]	@ (8004fa0 <SBUS_getData+0x5e0>)
 8004efa:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_14 = (uint16_t)((((float)Radio_input.Canal_14 - 352) /1344 ) * 1000) + 1000;
 8004efc:	4b28      	ldr	r3, [pc, #160]	@ (8004fa0 <SBUS_getData+0x5e0>)
 8004efe:	8b9b      	ldrh	r3, [r3, #28]
 8004f00:	ee07 3a90 	vmov	s15, r3
 8004f04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f08:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8004fa4 <SBUS_getData+0x5e4>
 8004f0c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004f10:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8004fa8 <SBUS_getData+0x5e8>
 8004f14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f18:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8004fac <SBUS_getData+0x5ec>
 8004f1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f24:	ee17 3a90 	vmov	r3, s15
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	4b1b      	ldr	r3, [pc, #108]	@ (8004fa0 <SBUS_getData+0x5e0>)
 8004f32:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_15 = (uint16_t)((((float)Radio_input.Canal_15 - 352) /1344 ) * 1000) + 1000;
 8004f34:	4b1a      	ldr	r3, [pc, #104]	@ (8004fa0 <SBUS_getData+0x5e0>)
 8004f36:	8bdb      	ldrh	r3, [r3, #30]
 8004f38:	ee07 3a90 	vmov	s15, r3
 8004f3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f40:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8004fa4 <SBUS_getData+0x5e4>
 8004f44:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004f48:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8004fa8 <SBUS_getData+0x5e8>
 8004f4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f50:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8004fac <SBUS_getData+0x5ec>
 8004f54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f5c:	ee17 3a90 	vmov	r3, s15
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	4b0d      	ldr	r3, [pc, #52]	@ (8004fa0 <SBUS_getData+0x5e0>)
 8004f6a:	83da      	strh	r2, [r3, #30]
	Radio_input.Canal_16 = (uint16_t)((((float)Radio_input.Canal_16 - 352) /1344 ) * 1000) + 1000;
 8004f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8004fa0 <SBUS_getData+0x5e0>)
 8004f6e:	8c1b      	ldrh	r3, [r3, #32]
 8004f70:	ee07 3a90 	vmov	s15, r3
 8004f74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f78:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8004fa4 <SBUS_getData+0x5e4>
 8004f7c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004f80:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8004fa8 <SBUS_getData+0x5e8>
 8004f84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f88:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8004fac <SBUS_getData+0x5ec>
 8004f8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f94:	ee17 3a90 	vmov	r3, s15
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8004f9e:	e007      	b.n	8004fb0 <SBUS_getData+0x5f0>
 8004fa0:	2400007c 	.word	0x2400007c
 8004fa4:	43b00000 	.word	0x43b00000
 8004fa8:	44a80000 	.word	0x44a80000
 8004fac:	447a0000 	.word	0x447a0000
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	4b2a      	ldr	r3, [pc, #168]	@ (800505c <SBUS_getData+0x69c>)
 8004fb4:	841a      	strh	r2, [r3, #32]

	//En el caso del byte 24, el primer bit menos significativo corresponde al canal 17, el segundo al canal 18, el tercero a el fail safe y
	//el cuarto a la perdida de paquetes. Los 4 restantes no se utilizan.

	Radio_input.Banderas = SBUS_UART_Rx[23];
 8004fb6:	4b2a      	ldr	r3, [pc, #168]	@ (8005060 <SBUS_getData+0x6a0>)
 8004fb8:	7dda      	ldrb	r2, [r3, #23]
 8004fba:	4b28      	ldr	r3, [pc, #160]	@ (800505c <SBUS_getData+0x69c>)
 8004fbc:	701a      	strb	r2, [r3, #0]
	if(SBUS_UART_Rx[23]>=8){
 8004fbe:	4b28      	ldr	r3, [pc, #160]	@ (8005060 <SBUS_getData+0x6a0>)
 8004fc0:	7ddb      	ldrb	r3, [r3, #23]
 8004fc2:	2b07      	cmp	r3, #7
 8004fc4:	d90a      	bls.n	8004fdc <SBUS_getData+0x61c>
		SBUS_UART_Rx[23]-=8;
 8004fc6:	4b26      	ldr	r3, [pc, #152]	@ (8005060 <SBUS_getData+0x6a0>)
 8004fc8:	7ddb      	ldrb	r3, [r3, #23]
 8004fca:	3b08      	subs	r3, #8
 8004fcc:	b2da      	uxtb	r2, r3
 8004fce:	4b24      	ldr	r3, [pc, #144]	@ (8005060 <SBUS_getData+0x6a0>)
 8004fd0:	75da      	strb	r2, [r3, #23]
		Radio_input.fail_safe = FailSafe;
 8004fd2:	4b22      	ldr	r3, [pc, #136]	@ (800505c <SBUS_getData+0x69c>)
 8004fd4:	2235      	movs	r2, #53	@ 0x35
 8004fd6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 8004fda:	e003      	b.n	8004fe4 <SBUS_getData+0x624>
	}else Radio_input.fail_safe= Ok;
 8004fdc:	4b1f      	ldr	r3, [pc, #124]	@ (800505c <SBUS_getData+0x69c>)
 8004fde:	22aa      	movs	r2, #170	@ 0xaa
 8004fe0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

	if(SBUS_UART_Rx[23]>=4){
 8004fe4:	4b1e      	ldr	r3, [pc, #120]	@ (8005060 <SBUS_getData+0x6a0>)
 8004fe6:	7ddb      	ldrb	r3, [r3, #23]
 8004fe8:	2b03      	cmp	r3, #3
 8004fea:	d90a      	bls.n	8005002 <SBUS_getData+0x642>
		SBUS_UART_Rx[23]-=4;
 8004fec:	4b1c      	ldr	r3, [pc, #112]	@ (8005060 <SBUS_getData+0x6a0>)
 8004fee:	7ddb      	ldrb	r3, [r3, #23]
 8004ff0:	3b04      	subs	r3, #4
 8004ff2:	b2da      	uxtb	r2, r3
 8004ff4:	4b1a      	ldr	r3, [pc, #104]	@ (8005060 <SBUS_getData+0x6a0>)
 8004ff6:	75da      	strb	r2, [r3, #23]
		Radio_input.pkg_lost = Pkg_Lost;
 8004ff8:	4b18      	ldr	r3, [pc, #96]	@ (800505c <SBUS_getData+0x69c>)
 8004ffa:	2210      	movs	r2, #16
 8004ffc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005000:	e003      	b.n	800500a <SBUS_getData+0x64a>
	}else Radio_input.pkg_lost=Ok;
 8005002:	4b16      	ldr	r3, [pc, #88]	@ (800505c <SBUS_getData+0x69c>)
 8005004:	22aa      	movs	r2, #170	@ 0xaa
 8005006:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if(SBUS_UART_Rx[23]>=2){
 800500a:	4b15      	ldr	r3, [pc, #84]	@ (8005060 <SBUS_getData+0x6a0>)
 800500c:	7ddb      	ldrb	r3, [r3, #23]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d90a      	bls.n	8005028 <SBUS_getData+0x668>
		SBUS_UART_Rx[23]-=2;
 8005012:	4b13      	ldr	r3, [pc, #76]	@ (8005060 <SBUS_getData+0x6a0>)
 8005014:	7ddb      	ldrb	r3, [r3, #23]
 8005016:	3b02      	subs	r3, #2
 8005018:	b2da      	uxtb	r2, r3
 800501a:	4b11      	ldr	r3, [pc, #68]	@ (8005060 <SBUS_getData+0x6a0>)
 800501c:	75da      	strb	r2, [r3, #23]
		Radio_input.Interruptor_2=ON;
 800501e:	4b0f      	ldr	r3, [pc, #60]	@ (800505c <SBUS_getData+0x69c>)
 8005020:	2201      	movs	r2, #1
 8005022:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 8005026:	e003      	b.n	8005030 <SBUS_getData+0x670>
	}else Radio_input.Interruptor_2=OFF;
 8005028:	4b0c      	ldr	r3, [pc, #48]	@ (800505c <SBUS_getData+0x69c>)
 800502a:	2200      	movs	r2, #0
 800502c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

	if(SBUS_UART_Rx[23]){
 8005030:	4b0b      	ldr	r3, [pc, #44]	@ (8005060 <SBUS_getData+0x6a0>)
 8005032:	7ddb      	ldrb	r3, [r3, #23]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d004      	beq.n	8005042 <SBUS_getData+0x682>
		Radio_input.Interruptor_1=ON;
 8005038:	4b08      	ldr	r3, [pc, #32]	@ (800505c <SBUS_getData+0x69c>)
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8005040:	e003      	b.n	800504a <SBUS_getData+0x68a>
	}else Radio_input.Interruptor_1=OFF;
 8005042:	4b06      	ldr	r3, [pc, #24]	@ (800505c <SBUS_getData+0x69c>)
 8005044:	2200      	movs	r2, #0
 8005046:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22


	Radio_input.Uart_Counter = 0;
 800504a:	4b04      	ldr	r3, [pc, #16]	@ (800505c <SBUS_getData+0x69c>)
 800504c:	2200      	movs	r2, #0
 800504e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	Temp_BypassFunct();
 8005052:	f7ff fc81 	bl	8004958 <Temp_BypassFunct>

}
 8005056:	bf00      	nop
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	2400007c 	.word	0x2400007c
 8005060:	240015d8 	.word	0x240015d8

08005064 <SBUS_IntegrityVerification>:

void SBUS_IntegrityVerification(void){
 8005064:	b480      	push	{r7}
 8005066:	af00      	add	r7, sp, #0

	if(Radio_input.Uart_Counter != 255){
 8005068:	4b0f      	ldr	r3, [pc, #60]	@ (80050a8 <SBUS_IntegrityVerification+0x44>)
 800506a:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800506e:	2bff      	cmp	r3, #255	@ 0xff
 8005070:	d00c      	beq.n	800508c <SBUS_IntegrityVerification+0x28>
		Radio_input.Uart_Counter++;
 8005072:	4b0d      	ldr	r3, [pc, #52]	@ (80050a8 <SBUS_IntegrityVerification+0x44>)
 8005074:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8005078:	3301      	adds	r3, #1
 800507a:	b2da      	uxtb	r2, r3
 800507c:	4b0a      	ldr	r3, [pc, #40]	@ (80050a8 <SBUS_IntegrityVerification+0x44>)
 800507e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		Radio_input.uart_error = Ok;
 8005082:	4b09      	ldr	r3, [pc, #36]	@ (80050a8 <SBUS_IntegrityVerification+0x44>)
 8005084:	22aa      	movs	r2, #170	@ 0xaa
 8005086:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	}
	else{
		Radio_input.uart_error = Uart_Error;
		Radio_input.fail_safe = FailSafe;
	}
}
 800508a:	e007      	b.n	800509c <SBUS_IntegrityVerification+0x38>
		Radio_input.uart_error = Uart_Error;
 800508c:	4b06      	ldr	r3, [pc, #24]	@ (80050a8 <SBUS_IntegrityVerification+0x44>)
 800508e:	2220      	movs	r2, #32
 8005090:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		Radio_input.fail_safe = FailSafe;
 8005094:	4b04      	ldr	r3, [pc, #16]	@ (80050a8 <SBUS_IntegrityVerification+0x44>)
 8005096:	2235      	movs	r2, #53	@ 0x35
 8005098:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 800509c:	bf00      	nop
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	2400007c 	.word	0x2400007c

080050ac <SD_blackbox_refresh>:
void SD_blackbox_init(void){

	f_open(&BlackBox, BlackBoxFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
}

void SD_blackbox_refresh(void){
 80050ac:	b480      	push	{r7}
 80050ae:	af00      	add	r7, sp, #0

	blackbox_data.Time = TimeOn_Counter;
 80050b0:	4b71      	ldr	r3, [pc, #452]	@ (8005278 <SD_blackbox_refresh+0x1cc>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a71      	ldr	r2, [pc, #452]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 80050b6:	6353      	str	r3, [r2, #52]	@ 0x34

	blackbox_data.Ax = IMU.ACC.x;
 80050b8:	4b71      	ldr	r3, [pc, #452]	@ (8005280 <SD_blackbox_refresh+0x1d4>)
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	4a6f      	ldr	r2, [pc, #444]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 80050be:	6013      	str	r3, [r2, #0]
	blackbox_data.Ay = IMU.ACC.y;
 80050c0:	4b6f      	ldr	r3, [pc, #444]	@ (8005280 <SD_blackbox_refresh+0x1d4>)
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	4a6d      	ldr	r2, [pc, #436]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 80050c6:	6053      	str	r3, [r2, #4]
	blackbox_data.Az = IMU.ACC.z;
 80050c8:	4b6d      	ldr	r3, [pc, #436]	@ (8005280 <SD_blackbox_refresh+0x1d4>)
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	4a6b      	ldr	r2, [pc, #428]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 80050ce:	6093      	str	r3, [r2, #8]

	blackbox_data.Gx = IMU.GYR.x;
 80050d0:	4b6b      	ldr	r3, [pc, #428]	@ (8005280 <SD_blackbox_refresh+0x1d4>)
 80050d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d4:	4a69      	ldr	r2, [pc, #420]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 80050d6:	60d3      	str	r3, [r2, #12]
	blackbox_data.Gy = IMU.GYR.y;
 80050d8:	4b69      	ldr	r3, [pc, #420]	@ (8005280 <SD_blackbox_refresh+0x1d4>)
 80050da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050dc:	4a67      	ldr	r2, [pc, #412]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 80050de:	6113      	str	r3, [r2, #16]
	blackbox_data.Gz = IMU.GYR.z;
 80050e0:	4b67      	ldr	r3, [pc, #412]	@ (8005280 <SD_blackbox_refresh+0x1d4>)
 80050e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e4:	4a65      	ldr	r2, [pc, #404]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 80050e6:	6153      	str	r3, [r2, #20]

	blackbox_data.Gfx = 0;
 80050e8:	4b64      	ldr	r3, [pc, #400]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 80050ea:	f04f 0200 	mov.w	r2, #0
 80050ee:	619a      	str	r2, [r3, #24]
	blackbox_data.Gfy = 0;
 80050f0:	4b62      	ldr	r3, [pc, #392]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 80050f2:	f04f 0200 	mov.w	r2, #0
 80050f6:	61da      	str	r2, [r3, #28]
	blackbox_data.Gfz = 0;
 80050f8:	4b60      	ldr	r3, [pc, #384]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 80050fa:	f04f 0200 	mov.w	r2, #0
 80050fe:	621a      	str	r2, [r3, #32]

	blackbox_data.Roll    = IMU.Roll;
 8005100:	4b5f      	ldr	r3, [pc, #380]	@ (8005280 <SD_blackbox_refresh+0x1d4>)
 8005102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005104:	4a5d      	ldr	r2, [pc, #372]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 8005106:	6253      	str	r3, [r2, #36]	@ 0x24
	blackbox_data.Pitch   = IMU.Pitch;
 8005108:	4b5d      	ldr	r3, [pc, #372]	@ (8005280 <SD_blackbox_refresh+0x1d4>)
 800510a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800510c:	4a5b      	ldr	r2, [pc, #364]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 800510e:	6293      	str	r3, [r2, #40]	@ 0x28
	blackbox_data.Heading = IMU.Heading;
 8005110:	4b5b      	ldr	r3, [pc, #364]	@ (8005280 <SD_blackbox_refresh+0x1d4>)
 8005112:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005114:	4a59      	ldr	r2, [pc, #356]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 8005116:	62d3      	str	r3, [r2, #44]	@ 0x2c

	blackbox_data.Alt = BMP280.Barometric_Altitude;
 8005118:	4b5a      	ldr	r3, [pc, #360]	@ (8005284 <SD_blackbox_refresh+0x1d8>)
 800511a:	8a1a      	ldrh	r2, [r3, #16]
 800511c:	4b57      	ldr	r3, [pc, #348]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 800511e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
	blackbox_data.Latitude = 0;
 8005122:	4b56      	ldr	r3, [pc, #344]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 8005124:	2200      	movs	r2, #0
 8005126:	639a      	str	r2, [r3, #56]	@ 0x38
	blackbox_data.Longitude= 0;
 8005128:	4b54      	ldr	r3, [pc, #336]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 800512a:	2200      	movs	r2, #0
 800512c:	63da      	str	r2, [r3, #60]	@ 0x3c

	blackbox_data.ARSP = 0;
 800512e:	4b53      	ldr	r3, [pc, #332]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 8005130:	2200      	movs	r2, #0
 8005132:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

	blackbox_data.Pressure = BMP280.Pressure;
 8005136:	4b53      	ldr	r3, [pc, #332]	@ (8005284 <SD_blackbox_refresh+0x1d8>)
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	4a50      	ldr	r2, [pc, #320]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 800513c:	6413      	str	r3, [r2, #64]	@ 0x40

	blackbox_data.SBUS_Flags = Radio_input.Banderas;
 800513e:	4b52      	ldr	r3, [pc, #328]	@ (8005288 <SD_blackbox_refresh+0x1dc>)
 8005140:	781a      	ldrb	r2, [r3, #0]
 8005142:	4b4e      	ldr	r3, [pc, #312]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 8005144:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
	blackbox_data.Flight_Mode = 0;
 8005148:	4b4c      	ldr	r3, [pc, #304]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 800514a:	2200      	movs	r2, #0
 800514c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

	blackbox_data.Canal_1 = Radio_input.Canal_1;
 8005150:	4b4d      	ldr	r3, [pc, #308]	@ (8005288 <SD_blackbox_refresh+0x1dc>)
 8005152:	885a      	ldrh	r2, [r3, #2]
 8005154:	4b49      	ldr	r3, [pc, #292]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 8005156:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	blackbox_data.Canal_2 = Radio_input.Canal_2;
 800515a:	4b4b      	ldr	r3, [pc, #300]	@ (8005288 <SD_blackbox_refresh+0x1dc>)
 800515c:	889a      	ldrh	r2, [r3, #4]
 800515e:	4b47      	ldr	r3, [pc, #284]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 8005160:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
	blackbox_data.Canal_3 = Radio_input.Canal_3;
 8005164:	4b48      	ldr	r3, [pc, #288]	@ (8005288 <SD_blackbox_refresh+0x1dc>)
 8005166:	88da      	ldrh	r2, [r3, #6]
 8005168:	4b44      	ldr	r3, [pc, #272]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 800516a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
	blackbox_data.Canal_4 = Radio_input.Canal_4;
 800516e:	4b46      	ldr	r3, [pc, #280]	@ (8005288 <SD_blackbox_refresh+0x1dc>)
 8005170:	891a      	ldrh	r2, [r3, #8]
 8005172:	4b42      	ldr	r3, [pc, #264]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 8005174:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
	blackbox_data.Canal_5 = Radio_input.Canal_5;
 8005178:	4b43      	ldr	r3, [pc, #268]	@ (8005288 <SD_blackbox_refresh+0x1dc>)
 800517a:	895a      	ldrh	r2, [r3, #10]
 800517c:	4b3f      	ldr	r3, [pc, #252]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 800517e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
	blackbox_data.Canal_6 = Radio_input.Canal_6;
 8005182:	4b41      	ldr	r3, [pc, #260]	@ (8005288 <SD_blackbox_refresh+0x1dc>)
 8005184:	899a      	ldrh	r2, [r3, #12]
 8005186:	4b3d      	ldr	r3, [pc, #244]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 8005188:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
	blackbox_data.Canal_7 = Radio_input.Canal_7;
 800518c:	4b3e      	ldr	r3, [pc, #248]	@ (8005288 <SD_blackbox_refresh+0x1dc>)
 800518e:	89da      	ldrh	r2, [r3, #14]
 8005190:	4b3a      	ldr	r3, [pc, #232]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 8005192:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
	blackbox_data.Canal_8 = Radio_input.Canal_8;
 8005196:	4b3c      	ldr	r3, [pc, #240]	@ (8005288 <SD_blackbox_refresh+0x1dc>)
 8005198:	8a1a      	ldrh	r2, [r3, #16]
 800519a:	4b38      	ldr	r3, [pc, #224]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 800519c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
	blackbox_data.Canal_9 = Radio_input.Canal_9;
 80051a0:	4b39      	ldr	r3, [pc, #228]	@ (8005288 <SD_blackbox_refresh+0x1dc>)
 80051a2:	8a5a      	ldrh	r2, [r3, #18]
 80051a4:	4b35      	ldr	r3, [pc, #212]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 80051a6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
	blackbox_data.Canal_10 = Radio_input.Canal_10;
 80051aa:	4b37      	ldr	r3, [pc, #220]	@ (8005288 <SD_blackbox_refresh+0x1dc>)
 80051ac:	8a9a      	ldrh	r2, [r3, #20]
 80051ae:	4b33      	ldr	r3, [pc, #204]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 80051b0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
	blackbox_data.Canal_11 = Radio_input.Canal_11;
 80051b4:	4b34      	ldr	r3, [pc, #208]	@ (8005288 <SD_blackbox_refresh+0x1dc>)
 80051b6:	8ada      	ldrh	r2, [r3, #22]
 80051b8:	4b30      	ldr	r3, [pc, #192]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 80051ba:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
	blackbox_data.Canal_12 = Radio_input.Canal_12;
 80051be:	4b32      	ldr	r3, [pc, #200]	@ (8005288 <SD_blackbox_refresh+0x1dc>)
 80051c0:	8b1a      	ldrh	r2, [r3, #24]
 80051c2:	4b2e      	ldr	r3, [pc, #184]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 80051c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
	blackbox_data.Canal_13 = Radio_input.Canal_13;
 80051c8:	4b2f      	ldr	r3, [pc, #188]	@ (8005288 <SD_blackbox_refresh+0x1dc>)
 80051ca:	8b5a      	ldrh	r2, [r3, #26]
 80051cc:	4b2b      	ldr	r3, [pc, #172]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 80051ce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
	blackbox_data.Canal_14 = Radio_input.Canal_14;
 80051d2:	4b2d      	ldr	r3, [pc, #180]	@ (8005288 <SD_blackbox_refresh+0x1dc>)
 80051d4:	8b9a      	ldrh	r2, [r3, #28]
 80051d6:	4b29      	ldr	r3, [pc, #164]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 80051d8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
	blackbox_data.Canal_15 = Radio_input.Canal_15;
 80051dc:	4b2a      	ldr	r3, [pc, #168]	@ (8005288 <SD_blackbox_refresh+0x1dc>)
 80051de:	8bda      	ldrh	r2, [r3, #30]
 80051e0:	4b26      	ldr	r3, [pc, #152]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 80051e2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
	blackbox_data.Canal_16 = Radio_input.Canal_16;
 80051e6:	4b28      	ldr	r3, [pc, #160]	@ (8005288 <SD_blackbox_refresh+0x1dc>)
 80051e8:	8c1a      	ldrh	r2, [r3, #32]
 80051ea:	4b24      	ldr	r3, [pc, #144]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 80051ec:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

	blackbox_data.Interruptor_1 = Radio_input.Interruptor_1;
 80051f0:	4b25      	ldr	r3, [pc, #148]	@ (8005288 <SD_blackbox_refresh+0x1dc>)
 80051f2:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80051f6:	4b21      	ldr	r3, [pc, #132]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 80051f8:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
	blackbox_data.Interruptor_2 = Radio_input.Interruptor_2;
 80051fc:	4b22      	ldr	r3, [pc, #136]	@ (8005288 <SD_blackbox_refresh+0x1dc>)
 80051fe:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8005202:	4b1e      	ldr	r3, [pc, #120]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 8005204:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f

	blackbox_data.OUT1  = PWM_Output.Canal_1;
 8005208:	4b20      	ldr	r3, [pc, #128]	@ (800528c <SD_blackbox_refresh+0x1e0>)
 800520a:	881a      	ldrh	r2, [r3, #0]
 800520c:	4b1b      	ldr	r3, [pc, #108]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 800520e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
	blackbox_data.OUT2  = PWM_Output.Canal_2;
 8005212:	4b1e      	ldr	r3, [pc, #120]	@ (800528c <SD_blackbox_refresh+0x1e0>)
 8005214:	885a      	ldrh	r2, [r3, #2]
 8005216:	4b19      	ldr	r3, [pc, #100]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 8005218:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
	blackbox_data.OUT3  = PWM_Output.Canal_3;
 800521c:	4b1b      	ldr	r3, [pc, #108]	@ (800528c <SD_blackbox_refresh+0x1e0>)
 800521e:	889a      	ldrh	r2, [r3, #4]
 8005220:	4b16      	ldr	r3, [pc, #88]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 8005222:	f8a3 206c 	strh.w	r2, [r3, #108]	@ 0x6c
	blackbox_data.OUT4  = PWM_Output.Canal_4;
 8005226:	4b19      	ldr	r3, [pc, #100]	@ (800528c <SD_blackbox_refresh+0x1e0>)
 8005228:	88da      	ldrh	r2, [r3, #6]
 800522a:	4b14      	ldr	r3, [pc, #80]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 800522c:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
	blackbox_data.OUT5  = PWM_Output.Canal_5;
 8005230:	4b16      	ldr	r3, [pc, #88]	@ (800528c <SD_blackbox_refresh+0x1e0>)
 8005232:	891a      	ldrh	r2, [r3, #8]
 8005234:	4b11      	ldr	r3, [pc, #68]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 8005236:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
	blackbox_data.OUT6  = PWM_Output.Canal_6;
 800523a:	4b14      	ldr	r3, [pc, #80]	@ (800528c <SD_blackbox_refresh+0x1e0>)
 800523c:	895a      	ldrh	r2, [r3, #10]
 800523e:	4b0f      	ldr	r3, [pc, #60]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 8005240:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
	blackbox_data.OUT7  = PWM_Output.Canal_7;
 8005244:	4b11      	ldr	r3, [pc, #68]	@ (800528c <SD_blackbox_refresh+0x1e0>)
 8005246:	899a      	ldrh	r2, [r3, #12]
 8005248:	4b0c      	ldr	r3, [pc, #48]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 800524a:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
	blackbox_data.OUT8  = PWM_Output.Canal_8;
 800524e:	4b0f      	ldr	r3, [pc, #60]	@ (800528c <SD_blackbox_refresh+0x1e0>)
 8005250:	89da      	ldrh	r2, [r3, #14]
 8005252:	4b0a      	ldr	r3, [pc, #40]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 8005254:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76
	blackbox_data.OUT9  = PWM_Output.Canal_9;
 8005258:	4b0c      	ldr	r3, [pc, #48]	@ (800528c <SD_blackbox_refresh+0x1e0>)
 800525a:	8a1a      	ldrh	r2, [r3, #16]
 800525c:	4b07      	ldr	r3, [pc, #28]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 800525e:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
	blackbox_data.OUT10 = PWM_Output.Canal_10;
 8005262:	4b0a      	ldr	r3, [pc, #40]	@ (800528c <SD_blackbox_refresh+0x1e0>)
 8005264:	8a5a      	ldrh	r2, [r3, #18]
 8005266:	4b05      	ldr	r3, [pc, #20]	@ (800527c <SD_blackbox_refresh+0x1d0>)
 8005268:	f8a3 207a 	strh.w	r2, [r3, #122]	@ 0x7a
}
 800526c:	bf00      	nop
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	24000ce4 	.word	0x24000ce4
 800527c:	2400281c 	.word	0x2400281c
 8005280:	24001470 	.word	0x24001470
 8005284:	24001330 	.word	0x24001330
 8005288:	2400007c 	.word	0x2400007c
 800528c:	24000068 	.word	0x24000068

08005290 <SD_blackbox_write>:
	BlackBoxFile[4] = ActualFile[4];

	f_open(&BlackBox, BlackBoxFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
}

void SD_blackbox_write(void){
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
	static uint8_t NewFileCount = 0;
	static uint32_t DataCount = 0;
	static uint16_t WriteCount = 0;

	SD_blackbox_refresh();
 8005296:	f7ff ff09 	bl	80050ac <SD_blackbox_refresh>

	blackbox_data.Nmsg = DataCount;
 800529a:	4b26      	ldr	r3, [pc, #152]	@ (8005334 <SD_blackbox_write+0xa4>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a26      	ldr	r2, [pc, #152]	@ (8005338 <SD_blackbox_write+0xa8>)
 80052a0:	6313      	str	r3, [r2, #48]	@ 0x30
	memcpy(&BlackBoxBuffer[WriteCount],&blackbox_data,sizeof(blackbox_data));
 80052a2:	4b26      	ldr	r3, [pc, #152]	@ (800533c <SD_blackbox_write+0xac>)
 80052a4:	881b      	ldrh	r3, [r3, #0]
 80052a6:	461a      	mov	r2, r3
 80052a8:	4613      	mov	r3, r2
 80052aa:	021b      	lsls	r3, r3, #8
 80052ac:	1a9b      	subs	r3, r3, r2
 80052ae:	4a24      	ldr	r2, [pc, #144]	@ (8005340 <SD_blackbox_write+0xb0>)
 80052b0:	4413      	add	r3, r2
 80052b2:	2280      	movs	r2, #128	@ 0x80
 80052b4:	4920      	ldr	r1, [pc, #128]	@ (8005338 <SD_blackbox_write+0xa8>)
 80052b6:	4618      	mov	r0, r3
 80052b8:	f011 fb5f 	bl	801697a <memcpy>

	if(WriteCount == 15){
 80052bc:	4b1f      	ldr	r3, [pc, #124]	@ (800533c <SD_blackbox_write+0xac>)
 80052be:	881b      	ldrh	r3, [r3, #0]
 80052c0:	2b0f      	cmp	r3, #15
 80052c2:	d129      	bne.n	8005318 <SD_blackbox_write+0x88>
		for (uint8_t n = 0; n < 16; ++n) {
 80052c4:	2300      	movs	r3, #0
 80052c6:	71fb      	strb	r3, [r7, #7]
 80052c8:	e00d      	b.n	80052e6 <SD_blackbox_write+0x56>
			f_write(&BlackBox, &BlackBoxBuffer[n], sizeof(blackbox_data), &bw);
 80052ca:	79fa      	ldrb	r2, [r7, #7]
 80052cc:	4613      	mov	r3, r2
 80052ce:	021b      	lsls	r3, r3, #8
 80052d0:	1a9b      	subs	r3, r3, r2
 80052d2:	4a1b      	ldr	r2, [pc, #108]	@ (8005340 <SD_blackbox_write+0xb0>)
 80052d4:	1899      	adds	r1, r3, r2
 80052d6:	4b1b      	ldr	r3, [pc, #108]	@ (8005344 <SD_blackbox_write+0xb4>)
 80052d8:	2280      	movs	r2, #128	@ 0x80
 80052da:	481b      	ldr	r0, [pc, #108]	@ (8005348 <SD_blackbox_write+0xb8>)
 80052dc:	f00d fe67 	bl	8012fae <f_write>
		for (uint8_t n = 0; n < 16; ++n) {
 80052e0:	79fb      	ldrb	r3, [r7, #7]
 80052e2:	3301      	adds	r3, #1
 80052e4:	71fb      	strb	r3, [r7, #7]
 80052e6:	79fb      	ldrb	r3, [r7, #7]
 80052e8:	2b0f      	cmp	r3, #15
 80052ea:	d9ee      	bls.n	80052ca <SD_blackbox_write+0x3a>
		}
		fresult = f_sync(&BlackBox);
 80052ec:	4816      	ldr	r0, [pc, #88]	@ (8005348 <SD_blackbox_write+0xb8>)
 80052ee:	f00e f802 	bl	80132f6 <f_sync>
 80052f2:	4603      	mov	r3, r0
 80052f4:	461a      	mov	r2, r3
 80052f6:	4b15      	ldr	r3, [pc, #84]	@ (800534c <SD_blackbox_write+0xbc>)
 80052f8:	701a      	strb	r2, [r3, #0]
		WriteCount = 0;
 80052fa:	4b10      	ldr	r3, [pc, #64]	@ (800533c <SD_blackbox_write+0xac>)
 80052fc:	2200      	movs	r2, #0
 80052fe:	801a      	strh	r2, [r3, #0]
		++NewFileCount;
 8005300:	4b13      	ldr	r3, [pc, #76]	@ (8005350 <SD_blackbox_write+0xc0>)
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	3301      	adds	r3, #1
 8005306:	b2da      	uxtb	r2, r3
 8005308:	4b11      	ldr	r3, [pc, #68]	@ (8005350 <SD_blackbox_write+0xc0>)
 800530a:	701a      	strb	r2, [r3, #0]
		++DataCount;
 800530c:	4b09      	ldr	r3, [pc, #36]	@ (8005334 <SD_blackbox_write+0xa4>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	3301      	adds	r3, #1
 8005312:	4a08      	ldr	r2, [pc, #32]	@ (8005334 <SD_blackbox_write+0xa4>)
 8005314:	6013      	str	r3, [r2, #0]
		return;
 8005316:	e00a      	b.n	800532e <SD_blackbox_write+0x9e>
	}
	++WriteCount;
 8005318:	4b08      	ldr	r3, [pc, #32]	@ (800533c <SD_blackbox_write+0xac>)
 800531a:	881b      	ldrh	r3, [r3, #0]
 800531c:	3301      	adds	r3, #1
 800531e:	b29a      	uxth	r2, r3
 8005320:	4b06      	ldr	r3, [pc, #24]	@ (800533c <SD_blackbox_write+0xac>)
 8005322:	801a      	strh	r2, [r3, #0]
	++DataCount;
 8005324:	4b03      	ldr	r3, [pc, #12]	@ (8005334 <SD_blackbox_write+0xa4>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	3301      	adds	r3, #1
 800532a:	4a02      	ldr	r2, [pc, #8]	@ (8005334 <SD_blackbox_write+0xa4>)
 800532c:	6013      	str	r3, [r2, #0]
}
 800532e:	3708      	adds	r7, #8
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	2400289c 	.word	0x2400289c
 8005338:	2400281c 	.word	0x2400281c
 800533c:	240028a0 	.word	0x240028a0
 8005340:	2400182c 	.word	0x2400182c
 8005344:	24001828 	.word	0x24001828
 8005348:	240015f4 	.word	0x240015f4
 800534c:	24001824 	.word	0x24001824
 8005350:	240028a2 	.word	0x240028a2

08005354 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005354:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800538c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005358:	f7fc ffc0 	bl	80022dc <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800535c:	480c      	ldr	r0, [pc, #48]	@ (8005390 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800535e:	490d      	ldr	r1, [pc, #52]	@ (8005394 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005360:	4a0d      	ldr	r2, [pc, #52]	@ (8005398 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005364:	e002      	b.n	800536c <LoopCopyDataInit>

08005366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800536a:	3304      	adds	r3, #4

0800536c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 800536c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800536e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005370:	d3f9      	bcc.n	8005366 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005372:	4a0a      	ldr	r2, [pc, #40]	@ (800539c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005374:	4c0a      	ldr	r4, [pc, #40]	@ (80053a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005378:	e001      	b.n	800537e <LoopFillZerobss>

0800537a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800537a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800537c:	3204      	adds	r2, #4

0800537e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800537e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005380:	d3fb      	bcc.n	800537a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8005382:	f011 fad3 	bl	801692c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005386:	f7fc fb43 	bl	8001a10 <main>
  bx  lr
 800538a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800538c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8005390:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005394:	24000290 	.word	0x24000290
  ldr r2, =_sidata
 8005398:	08019630 	.word	0x08019630
  ldr r2, =_sbss
 800539c:	24000290 	.word	0x24000290
  ldr r4, =_ebss
 80053a0:	24006764 	.word	0x24006764

080053a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80053a4:	e7fe      	b.n	80053a4 <ADC_IRQHandler>
	...

080053a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80053ae:	2003      	movs	r0, #3
 80053b0:	f000 f927 	bl	8005602 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80053b4:	f004 fd3e 	bl	8009e34 <HAL_RCC_GetSysClockFreq>
 80053b8:	4602      	mov	r2, r0
 80053ba:	4b15      	ldr	r3, [pc, #84]	@ (8005410 <HAL_Init+0x68>)
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	0a1b      	lsrs	r3, r3, #8
 80053c0:	f003 030f 	and.w	r3, r3, #15
 80053c4:	4913      	ldr	r1, [pc, #76]	@ (8005414 <HAL_Init+0x6c>)
 80053c6:	5ccb      	ldrb	r3, [r1, r3]
 80053c8:	f003 031f 	and.w	r3, r3, #31
 80053cc:	fa22 f303 	lsr.w	r3, r2, r3
 80053d0:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80053d2:	4b0f      	ldr	r3, [pc, #60]	@ (8005410 <HAL_Init+0x68>)
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	f003 030f 	and.w	r3, r3, #15
 80053da:	4a0e      	ldr	r2, [pc, #56]	@ (8005414 <HAL_Init+0x6c>)
 80053dc:	5cd3      	ldrb	r3, [r2, r3]
 80053de:	f003 031f 	and.w	r3, r3, #31
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	fa22 f303 	lsr.w	r3, r2, r3
 80053e8:	4a0b      	ldr	r2, [pc, #44]	@ (8005418 <HAL_Init+0x70>)
 80053ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80053ec:	4a0b      	ldr	r2, [pc, #44]	@ (800541c <HAL_Init+0x74>)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80053f2:	200f      	movs	r0, #15
 80053f4:	f7fc fddc 	bl	8001fb0 <HAL_InitTick>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e002      	b.n	8005408 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005402:	f7fc fdb7 	bl	8001f74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3708      	adds	r7, #8
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	58024400 	.word	0x58024400
 8005414:	08018994 	.word	0x08018994
 8005418:	24000004 	.word	0x24000004
 800541c:	24000000 	.word	0x24000000

08005420 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005420:	b480      	push	{r7}
 8005422:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005424:	4b06      	ldr	r3, [pc, #24]	@ (8005440 <HAL_IncTick+0x20>)
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	461a      	mov	r2, r3
 800542a:	4b06      	ldr	r3, [pc, #24]	@ (8005444 <HAL_IncTick+0x24>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4413      	add	r3, r2
 8005430:	4a04      	ldr	r2, [pc, #16]	@ (8005444 <HAL_IncTick+0x24>)
 8005432:	6013      	str	r3, [r2, #0]
}
 8005434:	bf00      	nop
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	240000a8 	.word	0x240000a8
 8005444:	240028a4 	.word	0x240028a4

08005448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005448:	b480      	push	{r7}
 800544a:	af00      	add	r7, sp, #0
  return uwTick;
 800544c:	4b03      	ldr	r3, [pc, #12]	@ (800545c <HAL_GetTick+0x14>)
 800544e:	681b      	ldr	r3, [r3, #0]
}
 8005450:	4618      	mov	r0, r3
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	240028a4 	.word	0x240028a4

08005460 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005468:	f7ff ffee 	bl	8005448 <HAL_GetTick>
 800546c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005478:	d005      	beq.n	8005486 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800547a:	4b0a      	ldr	r3, [pc, #40]	@ (80054a4 <HAL_Delay+0x44>)
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	461a      	mov	r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4413      	add	r3, r2
 8005484:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005486:	bf00      	nop
 8005488:	f7ff ffde 	bl	8005448 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	429a      	cmp	r2, r3
 8005496:	d8f7      	bhi.n	8005488 <HAL_Delay+0x28>
  {
  }
}
 8005498:	bf00      	nop
 800549a:	bf00      	nop
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	240000a8 	.word	0x240000a8

080054a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f003 0307 	and.w	r3, r3, #7
 80054b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80054b8:	4b0b      	ldr	r3, [pc, #44]	@ (80054e8 <__NVIC_SetPriorityGrouping+0x40>)
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80054c4:	4013      	ands	r3, r2
 80054c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80054d0:	4b06      	ldr	r3, [pc, #24]	@ (80054ec <__NVIC_SetPriorityGrouping+0x44>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80054d6:	4a04      	ldr	r2, [pc, #16]	@ (80054e8 <__NVIC_SetPriorityGrouping+0x40>)
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	60d3      	str	r3, [r2, #12]
}
 80054dc:	bf00      	nop
 80054de:	3714      	adds	r7, #20
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr
 80054e8:	e000ed00 	.word	0xe000ed00
 80054ec:	05fa0000 	.word	0x05fa0000

080054f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80054f0:	b480      	push	{r7}
 80054f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054f4:	4b04      	ldr	r3, [pc, #16]	@ (8005508 <__NVIC_GetPriorityGrouping+0x18>)
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	0a1b      	lsrs	r3, r3, #8
 80054fa:	f003 0307 	and.w	r3, r3, #7
}
 80054fe:	4618      	mov	r0, r3
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr
 8005508:	e000ed00 	.word	0xe000ed00

0800550c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	4603      	mov	r3, r0
 8005514:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005516:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800551a:	2b00      	cmp	r3, #0
 800551c:	db0b      	blt.n	8005536 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800551e:	88fb      	ldrh	r3, [r7, #6]
 8005520:	f003 021f 	and.w	r2, r3, #31
 8005524:	4907      	ldr	r1, [pc, #28]	@ (8005544 <__NVIC_EnableIRQ+0x38>)
 8005526:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800552a:	095b      	lsrs	r3, r3, #5
 800552c:	2001      	movs	r0, #1
 800552e:	fa00 f202 	lsl.w	r2, r0, r2
 8005532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005536:	bf00      	nop
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	e000e100 	.word	0xe000e100

08005548 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	4603      	mov	r3, r0
 8005550:	6039      	str	r1, [r7, #0]
 8005552:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005554:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005558:	2b00      	cmp	r3, #0
 800555a:	db0a      	blt.n	8005572 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	b2da      	uxtb	r2, r3
 8005560:	490c      	ldr	r1, [pc, #48]	@ (8005594 <__NVIC_SetPriority+0x4c>)
 8005562:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005566:	0112      	lsls	r2, r2, #4
 8005568:	b2d2      	uxtb	r2, r2
 800556a:	440b      	add	r3, r1
 800556c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005570:	e00a      	b.n	8005588 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	b2da      	uxtb	r2, r3
 8005576:	4908      	ldr	r1, [pc, #32]	@ (8005598 <__NVIC_SetPriority+0x50>)
 8005578:	88fb      	ldrh	r3, [r7, #6]
 800557a:	f003 030f 	and.w	r3, r3, #15
 800557e:	3b04      	subs	r3, #4
 8005580:	0112      	lsls	r2, r2, #4
 8005582:	b2d2      	uxtb	r2, r2
 8005584:	440b      	add	r3, r1
 8005586:	761a      	strb	r2, [r3, #24]
}
 8005588:	bf00      	nop
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr
 8005594:	e000e100 	.word	0xe000e100
 8005598:	e000ed00 	.word	0xe000ed00

0800559c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800559c:	b480      	push	{r7}
 800559e:	b089      	sub	sp, #36	@ 0x24
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f003 0307 	and.w	r3, r3, #7
 80055ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	f1c3 0307 	rsb	r3, r3, #7
 80055b6:	2b04      	cmp	r3, #4
 80055b8:	bf28      	it	cs
 80055ba:	2304      	movcs	r3, #4
 80055bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	3304      	adds	r3, #4
 80055c2:	2b06      	cmp	r3, #6
 80055c4:	d902      	bls.n	80055cc <NVIC_EncodePriority+0x30>
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	3b03      	subs	r3, #3
 80055ca:	e000      	b.n	80055ce <NVIC_EncodePriority+0x32>
 80055cc:	2300      	movs	r3, #0
 80055ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055d0:	f04f 32ff 	mov.w	r2, #4294967295
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	fa02 f303 	lsl.w	r3, r2, r3
 80055da:	43da      	mvns	r2, r3
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	401a      	ands	r2, r3
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80055e4:	f04f 31ff 	mov.w	r1, #4294967295
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	fa01 f303 	lsl.w	r3, r1, r3
 80055ee:	43d9      	mvns	r1, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055f4:	4313      	orrs	r3, r2
         );
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3724      	adds	r7, #36	@ 0x24
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr

08005602 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b082      	sub	sp, #8
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7ff ff4c 	bl	80054a8 <__NVIC_SetPriorityGrouping>
}
 8005610:	bf00      	nop
 8005612:	3708      	adds	r7, #8
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af00      	add	r7, sp, #0
 800561e:	4603      	mov	r3, r0
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
 8005624:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005626:	f7ff ff63 	bl	80054f0 <__NVIC_GetPriorityGrouping>
 800562a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	68b9      	ldr	r1, [r7, #8]
 8005630:	6978      	ldr	r0, [r7, #20]
 8005632:	f7ff ffb3 	bl	800559c <NVIC_EncodePriority>
 8005636:	4602      	mov	r2, r0
 8005638:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800563c:	4611      	mov	r1, r2
 800563e:	4618      	mov	r0, r3
 8005640:	f7ff ff82 	bl	8005548 <__NVIC_SetPriority>
}
 8005644:	bf00      	nop
 8005646:	3718      	adds	r7, #24
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	4603      	mov	r3, r0
 8005654:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005656:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800565a:	4618      	mov	r0, r3
 800565c:	f7ff ff56 	bl	800550c <__NVIC_EnableIRQ>
}
 8005660:	bf00      	nop
 8005662:	3708      	adds	r7, #8
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8005668:	b480      	push	{r7}
 800566a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800566c:	f3bf 8f5f 	dmb	sy
}
 8005670:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005672:	4b07      	ldr	r3, [pc, #28]	@ (8005690 <HAL_MPU_Disable+0x28>)
 8005674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005676:	4a06      	ldr	r2, [pc, #24]	@ (8005690 <HAL_MPU_Disable+0x28>)
 8005678:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800567c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800567e:	4b05      	ldr	r3, [pc, #20]	@ (8005694 <HAL_MPU_Disable+0x2c>)
 8005680:	2200      	movs	r2, #0
 8005682:	605a      	str	r2, [r3, #4]
}
 8005684:	bf00      	nop
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	e000ed00 	.word	0xe000ed00
 8005694:	e000ed90 	.word	0xe000ed90

08005698 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80056a0:	4a0b      	ldr	r2, [pc, #44]	@ (80056d0 <HAL_MPU_Enable+0x38>)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f043 0301 	orr.w	r3, r3, #1
 80056a8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80056aa:	4b0a      	ldr	r3, [pc, #40]	@ (80056d4 <HAL_MPU_Enable+0x3c>)
 80056ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ae:	4a09      	ldr	r2, [pc, #36]	@ (80056d4 <HAL_MPU_Enable+0x3c>)
 80056b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056b4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80056b6:	f3bf 8f4f 	dsb	sy
}
 80056ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80056bc:	f3bf 8f6f 	isb	sy
}
 80056c0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80056c2:	bf00      	nop
 80056c4:	370c      	adds	r7, #12
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	e000ed90 	.word	0xe000ed90
 80056d4:	e000ed00 	.word	0xe000ed00

080056d8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	785a      	ldrb	r2, [r3, #1]
 80056e4:	4b1b      	ldr	r3, [pc, #108]	@ (8005754 <HAL_MPU_ConfigRegion+0x7c>)
 80056e6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80056e8:	4b1a      	ldr	r3, [pc, #104]	@ (8005754 <HAL_MPU_ConfigRegion+0x7c>)
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	4a19      	ldr	r2, [pc, #100]	@ (8005754 <HAL_MPU_ConfigRegion+0x7c>)
 80056ee:	f023 0301 	bic.w	r3, r3, #1
 80056f2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80056f4:	4a17      	ldr	r2, [pc, #92]	@ (8005754 <HAL_MPU_ConfigRegion+0x7c>)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	7b1b      	ldrb	r3, [r3, #12]
 8005700:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	7adb      	ldrb	r3, [r3, #11]
 8005706:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005708:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	7a9b      	ldrb	r3, [r3, #10]
 800570e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005710:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	7b5b      	ldrb	r3, [r3, #13]
 8005716:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005718:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	7b9b      	ldrb	r3, [r3, #14]
 800571e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005720:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	7bdb      	ldrb	r3, [r3, #15]
 8005726:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005728:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	7a5b      	ldrb	r3, [r3, #9]
 800572e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005730:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	7a1b      	ldrb	r3, [r3, #8]
 8005736:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005738:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	7812      	ldrb	r2, [r2, #0]
 800573e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005740:	4a04      	ldr	r2, [pc, #16]	@ (8005754 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005742:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005744:	6113      	str	r3, [r2, #16]
}
 8005746:	bf00      	nop
 8005748:	370c      	adds	r7, #12
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	e000ed90 	.word	0xe000ed90

08005758 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b086      	sub	sp, #24
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005760:	f7ff fe72 	bl	8005448 <HAL_GetTick>
 8005764:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d101      	bne.n	8005770 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e37d      	b.n	8005e6c <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a66      	ldr	r2, [pc, #408]	@ (8005910 <HAL_DMA_Init+0x1b8>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d04a      	beq.n	8005810 <HAL_DMA_Init+0xb8>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a65      	ldr	r2, [pc, #404]	@ (8005914 <HAL_DMA_Init+0x1bc>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d045      	beq.n	8005810 <HAL_DMA_Init+0xb8>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a63      	ldr	r2, [pc, #396]	@ (8005918 <HAL_DMA_Init+0x1c0>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d040      	beq.n	8005810 <HAL_DMA_Init+0xb8>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a62      	ldr	r2, [pc, #392]	@ (800591c <HAL_DMA_Init+0x1c4>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d03b      	beq.n	8005810 <HAL_DMA_Init+0xb8>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a60      	ldr	r2, [pc, #384]	@ (8005920 <HAL_DMA_Init+0x1c8>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d036      	beq.n	8005810 <HAL_DMA_Init+0xb8>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a5f      	ldr	r2, [pc, #380]	@ (8005924 <HAL_DMA_Init+0x1cc>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d031      	beq.n	8005810 <HAL_DMA_Init+0xb8>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a5d      	ldr	r2, [pc, #372]	@ (8005928 <HAL_DMA_Init+0x1d0>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d02c      	beq.n	8005810 <HAL_DMA_Init+0xb8>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a5c      	ldr	r2, [pc, #368]	@ (800592c <HAL_DMA_Init+0x1d4>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d027      	beq.n	8005810 <HAL_DMA_Init+0xb8>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a5a      	ldr	r2, [pc, #360]	@ (8005930 <HAL_DMA_Init+0x1d8>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d022      	beq.n	8005810 <HAL_DMA_Init+0xb8>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a59      	ldr	r2, [pc, #356]	@ (8005934 <HAL_DMA_Init+0x1dc>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d01d      	beq.n	8005810 <HAL_DMA_Init+0xb8>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a57      	ldr	r2, [pc, #348]	@ (8005938 <HAL_DMA_Init+0x1e0>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d018      	beq.n	8005810 <HAL_DMA_Init+0xb8>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a56      	ldr	r2, [pc, #344]	@ (800593c <HAL_DMA_Init+0x1e4>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d013      	beq.n	8005810 <HAL_DMA_Init+0xb8>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a54      	ldr	r2, [pc, #336]	@ (8005940 <HAL_DMA_Init+0x1e8>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d00e      	beq.n	8005810 <HAL_DMA_Init+0xb8>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a53      	ldr	r2, [pc, #332]	@ (8005944 <HAL_DMA_Init+0x1ec>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d009      	beq.n	8005810 <HAL_DMA_Init+0xb8>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a51      	ldr	r2, [pc, #324]	@ (8005948 <HAL_DMA_Init+0x1f0>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d004      	beq.n	8005810 <HAL_DMA_Init+0xb8>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a50      	ldr	r2, [pc, #320]	@ (800594c <HAL_DMA_Init+0x1f4>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d101      	bne.n	8005814 <HAL_DMA_Init+0xbc>
 8005810:	2301      	movs	r3, #1
 8005812:	e000      	b.n	8005816 <HAL_DMA_Init+0xbe>
 8005814:	2300      	movs	r3, #0
 8005816:	2b00      	cmp	r3, #0
 8005818:	f000 813c 	beq.w	8005a94 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2202      	movs	r2, #2
 8005820:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a37      	ldr	r2, [pc, #220]	@ (8005910 <HAL_DMA_Init+0x1b8>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d04a      	beq.n	80058cc <HAL_DMA_Init+0x174>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a36      	ldr	r2, [pc, #216]	@ (8005914 <HAL_DMA_Init+0x1bc>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d045      	beq.n	80058cc <HAL_DMA_Init+0x174>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a34      	ldr	r2, [pc, #208]	@ (8005918 <HAL_DMA_Init+0x1c0>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d040      	beq.n	80058cc <HAL_DMA_Init+0x174>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a33      	ldr	r2, [pc, #204]	@ (800591c <HAL_DMA_Init+0x1c4>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d03b      	beq.n	80058cc <HAL_DMA_Init+0x174>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a31      	ldr	r2, [pc, #196]	@ (8005920 <HAL_DMA_Init+0x1c8>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d036      	beq.n	80058cc <HAL_DMA_Init+0x174>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a30      	ldr	r2, [pc, #192]	@ (8005924 <HAL_DMA_Init+0x1cc>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d031      	beq.n	80058cc <HAL_DMA_Init+0x174>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a2e      	ldr	r2, [pc, #184]	@ (8005928 <HAL_DMA_Init+0x1d0>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d02c      	beq.n	80058cc <HAL_DMA_Init+0x174>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a2d      	ldr	r2, [pc, #180]	@ (800592c <HAL_DMA_Init+0x1d4>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d027      	beq.n	80058cc <HAL_DMA_Init+0x174>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a2b      	ldr	r2, [pc, #172]	@ (8005930 <HAL_DMA_Init+0x1d8>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d022      	beq.n	80058cc <HAL_DMA_Init+0x174>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a2a      	ldr	r2, [pc, #168]	@ (8005934 <HAL_DMA_Init+0x1dc>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d01d      	beq.n	80058cc <HAL_DMA_Init+0x174>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a28      	ldr	r2, [pc, #160]	@ (8005938 <HAL_DMA_Init+0x1e0>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d018      	beq.n	80058cc <HAL_DMA_Init+0x174>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a27      	ldr	r2, [pc, #156]	@ (800593c <HAL_DMA_Init+0x1e4>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d013      	beq.n	80058cc <HAL_DMA_Init+0x174>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a25      	ldr	r2, [pc, #148]	@ (8005940 <HAL_DMA_Init+0x1e8>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d00e      	beq.n	80058cc <HAL_DMA_Init+0x174>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a24      	ldr	r2, [pc, #144]	@ (8005944 <HAL_DMA_Init+0x1ec>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d009      	beq.n	80058cc <HAL_DMA_Init+0x174>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a22      	ldr	r2, [pc, #136]	@ (8005948 <HAL_DMA_Init+0x1f0>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d004      	beq.n	80058cc <HAL_DMA_Init+0x174>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a21      	ldr	r2, [pc, #132]	@ (800594c <HAL_DMA_Init+0x1f4>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d108      	bne.n	80058de <HAL_DMA_Init+0x186>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f022 0201 	bic.w	r2, r2, #1
 80058da:	601a      	str	r2, [r3, #0]
 80058dc:	e007      	b.n	80058ee <HAL_DMA_Init+0x196>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f022 0201 	bic.w	r2, r2, #1
 80058ec:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80058ee:	e02f      	b.n	8005950 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80058f0:	f7ff fdaa 	bl	8005448 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	2b05      	cmp	r3, #5
 80058fc:	d928      	bls.n	8005950 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2220      	movs	r2, #32
 8005902:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2203      	movs	r2, #3
 8005908:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e2ad      	b.n	8005e6c <HAL_DMA_Init+0x714>
 8005910:	40020010 	.word	0x40020010
 8005914:	40020028 	.word	0x40020028
 8005918:	40020040 	.word	0x40020040
 800591c:	40020058 	.word	0x40020058
 8005920:	40020070 	.word	0x40020070
 8005924:	40020088 	.word	0x40020088
 8005928:	400200a0 	.word	0x400200a0
 800592c:	400200b8 	.word	0x400200b8
 8005930:	40020410 	.word	0x40020410
 8005934:	40020428 	.word	0x40020428
 8005938:	40020440 	.word	0x40020440
 800593c:	40020458 	.word	0x40020458
 8005940:	40020470 	.word	0x40020470
 8005944:	40020488 	.word	0x40020488
 8005948:	400204a0 	.word	0x400204a0
 800594c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1c8      	bne.n	80058f0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	4b73      	ldr	r3, [pc, #460]	@ (8005b38 <HAL_DMA_Init+0x3e0>)
 800596a:	4013      	ands	r3, r2
 800596c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005976:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005982:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800598e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	4313      	orrs	r3, r2
 800599a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a0:	2b04      	cmp	r3, #4
 80059a2:	d107      	bne.n	80059b4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ac:	4313      	orrs	r3, r2
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	2b28      	cmp	r3, #40	@ 0x28
 80059ba:	d903      	bls.n	80059c4 <HAL_DMA_Init+0x26c>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80059c2:	d91f      	bls.n	8005a04 <HAL_DMA_Init+0x2ac>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80059ca:	d903      	bls.n	80059d4 <HAL_DMA_Init+0x27c>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	2b42      	cmp	r3, #66	@ 0x42
 80059d2:	d917      	bls.n	8005a04 <HAL_DMA_Init+0x2ac>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	2b46      	cmp	r3, #70	@ 0x46
 80059da:	d903      	bls.n	80059e4 <HAL_DMA_Init+0x28c>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	2b48      	cmp	r3, #72	@ 0x48
 80059e2:	d90f      	bls.n	8005a04 <HAL_DMA_Init+0x2ac>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	2b4e      	cmp	r3, #78	@ 0x4e
 80059ea:	d903      	bls.n	80059f4 <HAL_DMA_Init+0x29c>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	2b52      	cmp	r3, #82	@ 0x52
 80059f2:	d907      	bls.n	8005a04 <HAL_DMA_Init+0x2ac>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	2b73      	cmp	r3, #115	@ 0x73
 80059fa:	d905      	bls.n	8005a08 <HAL_DMA_Init+0x2b0>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	2b77      	cmp	r3, #119	@ 0x77
 8005a02:	d801      	bhi.n	8005a08 <HAL_DMA_Init+0x2b0>
 8005a04:	2301      	movs	r3, #1
 8005a06:	e000      	b.n	8005a0a <HAL_DMA_Init+0x2b2>
 8005a08:	2300      	movs	r3, #0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d003      	beq.n	8005a16 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a14:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	695b      	ldr	r3, [r3, #20]
 8005a24:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	f023 0307 	bic.w	r3, r3, #7
 8005a2c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a3c:	2b04      	cmp	r3, #4
 8005a3e:	d117      	bne.n	8005a70 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00e      	beq.n	8005a70 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f002 fbe0 	bl	8008218 <DMA_CheckFifoParam>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d008      	beq.n	8005a70 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2240      	movs	r2, #64	@ 0x40
 8005a62:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e1fd      	b.n	8005e6c <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f002 fb1b 	bl	80080b4 <DMA_CalcBaseAndBitshift>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a86:	f003 031f 	and.w	r3, r3, #31
 8005a8a:	223f      	movs	r2, #63	@ 0x3f
 8005a8c:	409a      	lsls	r2, r3
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	609a      	str	r2, [r3, #8]
 8005a92:	e0fd      	b.n	8005c90 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a28      	ldr	r2, [pc, #160]	@ (8005b3c <HAL_DMA_Init+0x3e4>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d04a      	beq.n	8005b34 <HAL_DMA_Init+0x3dc>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a27      	ldr	r2, [pc, #156]	@ (8005b40 <HAL_DMA_Init+0x3e8>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d045      	beq.n	8005b34 <HAL_DMA_Init+0x3dc>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a25      	ldr	r2, [pc, #148]	@ (8005b44 <HAL_DMA_Init+0x3ec>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d040      	beq.n	8005b34 <HAL_DMA_Init+0x3dc>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a24      	ldr	r2, [pc, #144]	@ (8005b48 <HAL_DMA_Init+0x3f0>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d03b      	beq.n	8005b34 <HAL_DMA_Init+0x3dc>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a22      	ldr	r2, [pc, #136]	@ (8005b4c <HAL_DMA_Init+0x3f4>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d036      	beq.n	8005b34 <HAL_DMA_Init+0x3dc>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a21      	ldr	r2, [pc, #132]	@ (8005b50 <HAL_DMA_Init+0x3f8>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d031      	beq.n	8005b34 <HAL_DMA_Init+0x3dc>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a1f      	ldr	r2, [pc, #124]	@ (8005b54 <HAL_DMA_Init+0x3fc>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d02c      	beq.n	8005b34 <HAL_DMA_Init+0x3dc>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a1e      	ldr	r2, [pc, #120]	@ (8005b58 <HAL_DMA_Init+0x400>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d027      	beq.n	8005b34 <HAL_DMA_Init+0x3dc>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a1c      	ldr	r2, [pc, #112]	@ (8005b5c <HAL_DMA_Init+0x404>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d022      	beq.n	8005b34 <HAL_DMA_Init+0x3dc>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a1b      	ldr	r2, [pc, #108]	@ (8005b60 <HAL_DMA_Init+0x408>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d01d      	beq.n	8005b34 <HAL_DMA_Init+0x3dc>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a19      	ldr	r2, [pc, #100]	@ (8005b64 <HAL_DMA_Init+0x40c>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d018      	beq.n	8005b34 <HAL_DMA_Init+0x3dc>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a18      	ldr	r2, [pc, #96]	@ (8005b68 <HAL_DMA_Init+0x410>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d013      	beq.n	8005b34 <HAL_DMA_Init+0x3dc>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a16      	ldr	r2, [pc, #88]	@ (8005b6c <HAL_DMA_Init+0x414>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d00e      	beq.n	8005b34 <HAL_DMA_Init+0x3dc>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a15      	ldr	r2, [pc, #84]	@ (8005b70 <HAL_DMA_Init+0x418>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d009      	beq.n	8005b34 <HAL_DMA_Init+0x3dc>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a13      	ldr	r2, [pc, #76]	@ (8005b74 <HAL_DMA_Init+0x41c>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d004      	beq.n	8005b34 <HAL_DMA_Init+0x3dc>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a12      	ldr	r2, [pc, #72]	@ (8005b78 <HAL_DMA_Init+0x420>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d123      	bne.n	8005b7c <HAL_DMA_Init+0x424>
 8005b34:	2301      	movs	r3, #1
 8005b36:	e022      	b.n	8005b7e <HAL_DMA_Init+0x426>
 8005b38:	fe10803f 	.word	0xfe10803f
 8005b3c:	48022c08 	.word	0x48022c08
 8005b40:	48022c1c 	.word	0x48022c1c
 8005b44:	48022c30 	.word	0x48022c30
 8005b48:	48022c44 	.word	0x48022c44
 8005b4c:	48022c58 	.word	0x48022c58
 8005b50:	48022c6c 	.word	0x48022c6c
 8005b54:	48022c80 	.word	0x48022c80
 8005b58:	48022c94 	.word	0x48022c94
 8005b5c:	58025408 	.word	0x58025408
 8005b60:	5802541c 	.word	0x5802541c
 8005b64:	58025430 	.word	0x58025430
 8005b68:	58025444 	.word	0x58025444
 8005b6c:	58025458 	.word	0x58025458
 8005b70:	5802546c 	.word	0x5802546c
 8005b74:	58025480 	.word	0x58025480
 8005b78:	58025494 	.word	0x58025494
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d07d      	beq.n	8005c7e <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a7f      	ldr	r2, [pc, #508]	@ (8005d84 <HAL_DMA_Init+0x62c>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d021      	beq.n	8005bd0 <HAL_DMA_Init+0x478>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a7d      	ldr	r2, [pc, #500]	@ (8005d88 <HAL_DMA_Init+0x630>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d01c      	beq.n	8005bd0 <HAL_DMA_Init+0x478>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a7c      	ldr	r2, [pc, #496]	@ (8005d8c <HAL_DMA_Init+0x634>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d017      	beq.n	8005bd0 <HAL_DMA_Init+0x478>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a7a      	ldr	r2, [pc, #488]	@ (8005d90 <HAL_DMA_Init+0x638>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d012      	beq.n	8005bd0 <HAL_DMA_Init+0x478>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a79      	ldr	r2, [pc, #484]	@ (8005d94 <HAL_DMA_Init+0x63c>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d00d      	beq.n	8005bd0 <HAL_DMA_Init+0x478>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a77      	ldr	r2, [pc, #476]	@ (8005d98 <HAL_DMA_Init+0x640>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d008      	beq.n	8005bd0 <HAL_DMA_Init+0x478>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a76      	ldr	r2, [pc, #472]	@ (8005d9c <HAL_DMA_Init+0x644>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d003      	beq.n	8005bd0 <HAL_DMA_Init+0x478>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a74      	ldr	r2, [pc, #464]	@ (8005da0 <HAL_DMA_Init+0x648>)
 8005bce:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2202      	movs	r2, #2
 8005bd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005be8:	697a      	ldr	r2, [r7, #20]
 8005bea:	4b6e      	ldr	r3, [pc, #440]	@ (8005da4 <HAL_DMA_Init+0x64c>)
 8005bec:	4013      	ands	r3, r2
 8005bee:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	2b40      	cmp	r3, #64	@ 0x40
 8005bf6:	d008      	beq.n	8005c0a <HAL_DMA_Init+0x4b2>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	2b80      	cmp	r3, #128	@ 0x80
 8005bfe:	d102      	bne.n	8005c06 <HAL_DMA_Init+0x4ae>
 8005c00:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005c04:	e002      	b.n	8005c0c <HAL_DMA_Init+0x4b4>
 8005c06:	2300      	movs	r3, #0
 8005c08:	e000      	b.n	8005c0c <HAL_DMA_Init+0x4b4>
 8005c0a:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	68d2      	ldr	r2, [r2, #12]
 8005c10:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005c12:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005c1a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	695b      	ldr	r3, [r3, #20]
 8005c20:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005c22:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005c2a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	69db      	ldr	r3, [r3, #28]
 8005c30:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005c32:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a1b      	ldr	r3, [r3, #32]
 8005c38:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005c3a:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005c3c:	697a      	ldr	r2, [r7, #20]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	4b55      	ldr	r3, [pc, #340]	@ (8005da8 <HAL_DMA_Init+0x650>)
 8005c52:	4413      	add	r3, r2
 8005c54:	4a55      	ldr	r2, [pc, #340]	@ (8005dac <HAL_DMA_Init+0x654>)
 8005c56:	fba2 2303 	umull	r2, r3, r2, r3
 8005c5a:	091b      	lsrs	r3, r3, #4
 8005c5c:	009a      	lsls	r2, r3, #2
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f002 fa26 	bl	80080b4 <DMA_CalcBaseAndBitshift>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c70:	f003 031f 	and.w	r3, r3, #31
 8005c74:	2201      	movs	r2, #1
 8005c76:	409a      	lsls	r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	605a      	str	r2, [r3, #4]
 8005c7c:	e008      	b.n	8005c90 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2240      	movs	r2, #64	@ 0x40
 8005c82:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2203      	movs	r2, #3
 8005c88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e0ed      	b.n	8005e6c <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a46      	ldr	r2, [pc, #280]	@ (8005db0 <HAL_DMA_Init+0x658>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d072      	beq.n	8005d80 <HAL_DMA_Init+0x628>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a45      	ldr	r2, [pc, #276]	@ (8005db4 <HAL_DMA_Init+0x65c>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d06d      	beq.n	8005d80 <HAL_DMA_Init+0x628>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a43      	ldr	r2, [pc, #268]	@ (8005db8 <HAL_DMA_Init+0x660>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d068      	beq.n	8005d80 <HAL_DMA_Init+0x628>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a42      	ldr	r2, [pc, #264]	@ (8005dbc <HAL_DMA_Init+0x664>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d063      	beq.n	8005d80 <HAL_DMA_Init+0x628>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a40      	ldr	r2, [pc, #256]	@ (8005dc0 <HAL_DMA_Init+0x668>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d05e      	beq.n	8005d80 <HAL_DMA_Init+0x628>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a3f      	ldr	r2, [pc, #252]	@ (8005dc4 <HAL_DMA_Init+0x66c>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d059      	beq.n	8005d80 <HAL_DMA_Init+0x628>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a3d      	ldr	r2, [pc, #244]	@ (8005dc8 <HAL_DMA_Init+0x670>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d054      	beq.n	8005d80 <HAL_DMA_Init+0x628>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a3c      	ldr	r2, [pc, #240]	@ (8005dcc <HAL_DMA_Init+0x674>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d04f      	beq.n	8005d80 <HAL_DMA_Init+0x628>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a3a      	ldr	r2, [pc, #232]	@ (8005dd0 <HAL_DMA_Init+0x678>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d04a      	beq.n	8005d80 <HAL_DMA_Init+0x628>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a39      	ldr	r2, [pc, #228]	@ (8005dd4 <HAL_DMA_Init+0x67c>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d045      	beq.n	8005d80 <HAL_DMA_Init+0x628>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a37      	ldr	r2, [pc, #220]	@ (8005dd8 <HAL_DMA_Init+0x680>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d040      	beq.n	8005d80 <HAL_DMA_Init+0x628>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a36      	ldr	r2, [pc, #216]	@ (8005ddc <HAL_DMA_Init+0x684>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d03b      	beq.n	8005d80 <HAL_DMA_Init+0x628>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a34      	ldr	r2, [pc, #208]	@ (8005de0 <HAL_DMA_Init+0x688>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d036      	beq.n	8005d80 <HAL_DMA_Init+0x628>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a33      	ldr	r2, [pc, #204]	@ (8005de4 <HAL_DMA_Init+0x68c>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d031      	beq.n	8005d80 <HAL_DMA_Init+0x628>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a31      	ldr	r2, [pc, #196]	@ (8005de8 <HAL_DMA_Init+0x690>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d02c      	beq.n	8005d80 <HAL_DMA_Init+0x628>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a30      	ldr	r2, [pc, #192]	@ (8005dec <HAL_DMA_Init+0x694>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d027      	beq.n	8005d80 <HAL_DMA_Init+0x628>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a13      	ldr	r2, [pc, #76]	@ (8005d84 <HAL_DMA_Init+0x62c>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d022      	beq.n	8005d80 <HAL_DMA_Init+0x628>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a12      	ldr	r2, [pc, #72]	@ (8005d88 <HAL_DMA_Init+0x630>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d01d      	beq.n	8005d80 <HAL_DMA_Init+0x628>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a10      	ldr	r2, [pc, #64]	@ (8005d8c <HAL_DMA_Init+0x634>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d018      	beq.n	8005d80 <HAL_DMA_Init+0x628>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a0f      	ldr	r2, [pc, #60]	@ (8005d90 <HAL_DMA_Init+0x638>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d013      	beq.n	8005d80 <HAL_DMA_Init+0x628>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a0d      	ldr	r2, [pc, #52]	@ (8005d94 <HAL_DMA_Init+0x63c>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d00e      	beq.n	8005d80 <HAL_DMA_Init+0x628>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a0c      	ldr	r2, [pc, #48]	@ (8005d98 <HAL_DMA_Init+0x640>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d009      	beq.n	8005d80 <HAL_DMA_Init+0x628>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a0a      	ldr	r2, [pc, #40]	@ (8005d9c <HAL_DMA_Init+0x644>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d004      	beq.n	8005d80 <HAL_DMA_Init+0x628>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a09      	ldr	r2, [pc, #36]	@ (8005da0 <HAL_DMA_Init+0x648>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d137      	bne.n	8005df0 <HAL_DMA_Init+0x698>
 8005d80:	2301      	movs	r3, #1
 8005d82:	e036      	b.n	8005df2 <HAL_DMA_Init+0x69a>
 8005d84:	58025408 	.word	0x58025408
 8005d88:	5802541c 	.word	0x5802541c
 8005d8c:	58025430 	.word	0x58025430
 8005d90:	58025444 	.word	0x58025444
 8005d94:	58025458 	.word	0x58025458
 8005d98:	5802546c 	.word	0x5802546c
 8005d9c:	58025480 	.word	0x58025480
 8005da0:	58025494 	.word	0x58025494
 8005da4:	fffe000f 	.word	0xfffe000f
 8005da8:	a7fdabf8 	.word	0xa7fdabf8
 8005dac:	cccccccd 	.word	0xcccccccd
 8005db0:	40020010 	.word	0x40020010
 8005db4:	40020028 	.word	0x40020028
 8005db8:	40020040 	.word	0x40020040
 8005dbc:	40020058 	.word	0x40020058
 8005dc0:	40020070 	.word	0x40020070
 8005dc4:	40020088 	.word	0x40020088
 8005dc8:	400200a0 	.word	0x400200a0
 8005dcc:	400200b8 	.word	0x400200b8
 8005dd0:	40020410 	.word	0x40020410
 8005dd4:	40020428 	.word	0x40020428
 8005dd8:	40020440 	.word	0x40020440
 8005ddc:	40020458 	.word	0x40020458
 8005de0:	40020470 	.word	0x40020470
 8005de4:	40020488 	.word	0x40020488
 8005de8:	400204a0 	.word	0x400204a0
 8005dec:	400204b8 	.word	0x400204b8
 8005df0:	2300      	movs	r3, #0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d032      	beq.n	8005e5c <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f002 fa8a 	bl	8008310 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	2b80      	cmp	r3, #128	@ 0x80
 8005e02:	d102      	bne.n	8005e0a <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	685a      	ldr	r2, [r3, #4]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e12:	b2d2      	uxtb	r2, r2
 8005e14:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005e1e:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d010      	beq.n	8005e4a <HAL_DMA_Init+0x6f2>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	2b08      	cmp	r3, #8
 8005e2e:	d80c      	bhi.n	8005e4a <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f002 fb07 	bl	8008444 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005e46:	605a      	str	r2, [r3, #4]
 8005e48:	e008      	b.n	8005e5c <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2201      	movs	r2, #1
 8005e66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3718      	adds	r7, #24
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b086      	sub	sp, #24
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
 8005e80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e82:	2300      	movs	r3, #0
 8005e84:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d101      	bne.n	8005e90 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e226      	b.n	80062de <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d101      	bne.n	8005e9e <HAL_DMA_Start_IT+0x2a>
 8005e9a:	2302      	movs	r3, #2
 8005e9c:	e21f      	b.n	80062de <HAL_DMA_Start_IT+0x46a>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	f040 820a 	bne.w	80062c8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a68      	ldr	r2, [pc, #416]	@ (8006068 <HAL_DMA_Start_IT+0x1f4>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d04a      	beq.n	8005f62 <HAL_DMA_Start_IT+0xee>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a66      	ldr	r2, [pc, #408]	@ (800606c <HAL_DMA_Start_IT+0x1f8>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d045      	beq.n	8005f62 <HAL_DMA_Start_IT+0xee>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a65      	ldr	r2, [pc, #404]	@ (8006070 <HAL_DMA_Start_IT+0x1fc>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d040      	beq.n	8005f62 <HAL_DMA_Start_IT+0xee>
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a63      	ldr	r2, [pc, #396]	@ (8006074 <HAL_DMA_Start_IT+0x200>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d03b      	beq.n	8005f62 <HAL_DMA_Start_IT+0xee>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a62      	ldr	r2, [pc, #392]	@ (8006078 <HAL_DMA_Start_IT+0x204>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d036      	beq.n	8005f62 <HAL_DMA_Start_IT+0xee>
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a60      	ldr	r2, [pc, #384]	@ (800607c <HAL_DMA_Start_IT+0x208>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d031      	beq.n	8005f62 <HAL_DMA_Start_IT+0xee>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a5f      	ldr	r2, [pc, #380]	@ (8006080 <HAL_DMA_Start_IT+0x20c>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d02c      	beq.n	8005f62 <HAL_DMA_Start_IT+0xee>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a5d      	ldr	r2, [pc, #372]	@ (8006084 <HAL_DMA_Start_IT+0x210>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d027      	beq.n	8005f62 <HAL_DMA_Start_IT+0xee>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a5c      	ldr	r2, [pc, #368]	@ (8006088 <HAL_DMA_Start_IT+0x214>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d022      	beq.n	8005f62 <HAL_DMA_Start_IT+0xee>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a5a      	ldr	r2, [pc, #360]	@ (800608c <HAL_DMA_Start_IT+0x218>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d01d      	beq.n	8005f62 <HAL_DMA_Start_IT+0xee>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a59      	ldr	r2, [pc, #356]	@ (8006090 <HAL_DMA_Start_IT+0x21c>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d018      	beq.n	8005f62 <HAL_DMA_Start_IT+0xee>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a57      	ldr	r2, [pc, #348]	@ (8006094 <HAL_DMA_Start_IT+0x220>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d013      	beq.n	8005f62 <HAL_DMA_Start_IT+0xee>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a56      	ldr	r2, [pc, #344]	@ (8006098 <HAL_DMA_Start_IT+0x224>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d00e      	beq.n	8005f62 <HAL_DMA_Start_IT+0xee>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a54      	ldr	r2, [pc, #336]	@ (800609c <HAL_DMA_Start_IT+0x228>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d009      	beq.n	8005f62 <HAL_DMA_Start_IT+0xee>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a53      	ldr	r2, [pc, #332]	@ (80060a0 <HAL_DMA_Start_IT+0x22c>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d004      	beq.n	8005f62 <HAL_DMA_Start_IT+0xee>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a51      	ldr	r2, [pc, #324]	@ (80060a4 <HAL_DMA_Start_IT+0x230>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d108      	bne.n	8005f74 <HAL_DMA_Start_IT+0x100>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f022 0201 	bic.w	r2, r2, #1
 8005f70:	601a      	str	r2, [r3, #0]
 8005f72:	e007      	b.n	8005f84 <HAL_DMA_Start_IT+0x110>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f022 0201 	bic.w	r2, r2, #1
 8005f82:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	68b9      	ldr	r1, [r7, #8]
 8005f8a:	68f8      	ldr	r0, [r7, #12]
 8005f8c:	f001 feae 	bl	8007cec <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a34      	ldr	r2, [pc, #208]	@ (8006068 <HAL_DMA_Start_IT+0x1f4>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d04a      	beq.n	8006030 <HAL_DMA_Start_IT+0x1bc>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a33      	ldr	r2, [pc, #204]	@ (800606c <HAL_DMA_Start_IT+0x1f8>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d045      	beq.n	8006030 <HAL_DMA_Start_IT+0x1bc>
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a31      	ldr	r2, [pc, #196]	@ (8006070 <HAL_DMA_Start_IT+0x1fc>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d040      	beq.n	8006030 <HAL_DMA_Start_IT+0x1bc>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a30      	ldr	r2, [pc, #192]	@ (8006074 <HAL_DMA_Start_IT+0x200>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d03b      	beq.n	8006030 <HAL_DMA_Start_IT+0x1bc>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a2e      	ldr	r2, [pc, #184]	@ (8006078 <HAL_DMA_Start_IT+0x204>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d036      	beq.n	8006030 <HAL_DMA_Start_IT+0x1bc>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a2d      	ldr	r2, [pc, #180]	@ (800607c <HAL_DMA_Start_IT+0x208>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d031      	beq.n	8006030 <HAL_DMA_Start_IT+0x1bc>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a2b      	ldr	r2, [pc, #172]	@ (8006080 <HAL_DMA_Start_IT+0x20c>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d02c      	beq.n	8006030 <HAL_DMA_Start_IT+0x1bc>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a2a      	ldr	r2, [pc, #168]	@ (8006084 <HAL_DMA_Start_IT+0x210>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d027      	beq.n	8006030 <HAL_DMA_Start_IT+0x1bc>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a28      	ldr	r2, [pc, #160]	@ (8006088 <HAL_DMA_Start_IT+0x214>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d022      	beq.n	8006030 <HAL_DMA_Start_IT+0x1bc>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a27      	ldr	r2, [pc, #156]	@ (800608c <HAL_DMA_Start_IT+0x218>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d01d      	beq.n	8006030 <HAL_DMA_Start_IT+0x1bc>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a25      	ldr	r2, [pc, #148]	@ (8006090 <HAL_DMA_Start_IT+0x21c>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d018      	beq.n	8006030 <HAL_DMA_Start_IT+0x1bc>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a24      	ldr	r2, [pc, #144]	@ (8006094 <HAL_DMA_Start_IT+0x220>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d013      	beq.n	8006030 <HAL_DMA_Start_IT+0x1bc>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a22      	ldr	r2, [pc, #136]	@ (8006098 <HAL_DMA_Start_IT+0x224>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d00e      	beq.n	8006030 <HAL_DMA_Start_IT+0x1bc>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a21      	ldr	r2, [pc, #132]	@ (800609c <HAL_DMA_Start_IT+0x228>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d009      	beq.n	8006030 <HAL_DMA_Start_IT+0x1bc>
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a1f      	ldr	r2, [pc, #124]	@ (80060a0 <HAL_DMA_Start_IT+0x22c>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d004      	beq.n	8006030 <HAL_DMA_Start_IT+0x1bc>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a1e      	ldr	r2, [pc, #120]	@ (80060a4 <HAL_DMA_Start_IT+0x230>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d101      	bne.n	8006034 <HAL_DMA_Start_IT+0x1c0>
 8006030:	2301      	movs	r3, #1
 8006032:	e000      	b.n	8006036 <HAL_DMA_Start_IT+0x1c2>
 8006034:	2300      	movs	r3, #0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d036      	beq.n	80060a8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f023 021e 	bic.w	r2, r3, #30
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f042 0216 	orr.w	r2, r2, #22
 800604c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006052:	2b00      	cmp	r3, #0
 8006054:	d03e      	beq.n	80060d4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f042 0208 	orr.w	r2, r2, #8
 8006064:	601a      	str	r2, [r3, #0]
 8006066:	e035      	b.n	80060d4 <HAL_DMA_Start_IT+0x260>
 8006068:	40020010 	.word	0x40020010
 800606c:	40020028 	.word	0x40020028
 8006070:	40020040 	.word	0x40020040
 8006074:	40020058 	.word	0x40020058
 8006078:	40020070 	.word	0x40020070
 800607c:	40020088 	.word	0x40020088
 8006080:	400200a0 	.word	0x400200a0
 8006084:	400200b8 	.word	0x400200b8
 8006088:	40020410 	.word	0x40020410
 800608c:	40020428 	.word	0x40020428
 8006090:	40020440 	.word	0x40020440
 8006094:	40020458 	.word	0x40020458
 8006098:	40020470 	.word	0x40020470
 800609c:	40020488 	.word	0x40020488
 80060a0:	400204a0 	.word	0x400204a0
 80060a4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f023 020e 	bic.w	r2, r3, #14
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f042 020a 	orr.w	r2, r2, #10
 80060ba:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d007      	beq.n	80060d4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f042 0204 	orr.w	r2, r2, #4
 80060d2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a83      	ldr	r2, [pc, #524]	@ (80062e8 <HAL_DMA_Start_IT+0x474>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d072      	beq.n	80061c4 <HAL_DMA_Start_IT+0x350>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a82      	ldr	r2, [pc, #520]	@ (80062ec <HAL_DMA_Start_IT+0x478>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d06d      	beq.n	80061c4 <HAL_DMA_Start_IT+0x350>
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a80      	ldr	r2, [pc, #512]	@ (80062f0 <HAL_DMA_Start_IT+0x47c>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d068      	beq.n	80061c4 <HAL_DMA_Start_IT+0x350>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a7f      	ldr	r2, [pc, #508]	@ (80062f4 <HAL_DMA_Start_IT+0x480>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d063      	beq.n	80061c4 <HAL_DMA_Start_IT+0x350>
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a7d      	ldr	r2, [pc, #500]	@ (80062f8 <HAL_DMA_Start_IT+0x484>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d05e      	beq.n	80061c4 <HAL_DMA_Start_IT+0x350>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a7c      	ldr	r2, [pc, #496]	@ (80062fc <HAL_DMA_Start_IT+0x488>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d059      	beq.n	80061c4 <HAL_DMA_Start_IT+0x350>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a7a      	ldr	r2, [pc, #488]	@ (8006300 <HAL_DMA_Start_IT+0x48c>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d054      	beq.n	80061c4 <HAL_DMA_Start_IT+0x350>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a79      	ldr	r2, [pc, #484]	@ (8006304 <HAL_DMA_Start_IT+0x490>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d04f      	beq.n	80061c4 <HAL_DMA_Start_IT+0x350>
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a77      	ldr	r2, [pc, #476]	@ (8006308 <HAL_DMA_Start_IT+0x494>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d04a      	beq.n	80061c4 <HAL_DMA_Start_IT+0x350>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a76      	ldr	r2, [pc, #472]	@ (800630c <HAL_DMA_Start_IT+0x498>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d045      	beq.n	80061c4 <HAL_DMA_Start_IT+0x350>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a74      	ldr	r2, [pc, #464]	@ (8006310 <HAL_DMA_Start_IT+0x49c>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d040      	beq.n	80061c4 <HAL_DMA_Start_IT+0x350>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a73      	ldr	r2, [pc, #460]	@ (8006314 <HAL_DMA_Start_IT+0x4a0>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d03b      	beq.n	80061c4 <HAL_DMA_Start_IT+0x350>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a71      	ldr	r2, [pc, #452]	@ (8006318 <HAL_DMA_Start_IT+0x4a4>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d036      	beq.n	80061c4 <HAL_DMA_Start_IT+0x350>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a70      	ldr	r2, [pc, #448]	@ (800631c <HAL_DMA_Start_IT+0x4a8>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d031      	beq.n	80061c4 <HAL_DMA_Start_IT+0x350>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a6e      	ldr	r2, [pc, #440]	@ (8006320 <HAL_DMA_Start_IT+0x4ac>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d02c      	beq.n	80061c4 <HAL_DMA_Start_IT+0x350>
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a6d      	ldr	r2, [pc, #436]	@ (8006324 <HAL_DMA_Start_IT+0x4b0>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d027      	beq.n	80061c4 <HAL_DMA_Start_IT+0x350>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a6b      	ldr	r2, [pc, #428]	@ (8006328 <HAL_DMA_Start_IT+0x4b4>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d022      	beq.n	80061c4 <HAL_DMA_Start_IT+0x350>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a6a      	ldr	r2, [pc, #424]	@ (800632c <HAL_DMA_Start_IT+0x4b8>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d01d      	beq.n	80061c4 <HAL_DMA_Start_IT+0x350>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a68      	ldr	r2, [pc, #416]	@ (8006330 <HAL_DMA_Start_IT+0x4bc>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d018      	beq.n	80061c4 <HAL_DMA_Start_IT+0x350>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a67      	ldr	r2, [pc, #412]	@ (8006334 <HAL_DMA_Start_IT+0x4c0>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d013      	beq.n	80061c4 <HAL_DMA_Start_IT+0x350>
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a65      	ldr	r2, [pc, #404]	@ (8006338 <HAL_DMA_Start_IT+0x4c4>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d00e      	beq.n	80061c4 <HAL_DMA_Start_IT+0x350>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a64      	ldr	r2, [pc, #400]	@ (800633c <HAL_DMA_Start_IT+0x4c8>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d009      	beq.n	80061c4 <HAL_DMA_Start_IT+0x350>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a62      	ldr	r2, [pc, #392]	@ (8006340 <HAL_DMA_Start_IT+0x4cc>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d004      	beq.n	80061c4 <HAL_DMA_Start_IT+0x350>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a61      	ldr	r2, [pc, #388]	@ (8006344 <HAL_DMA_Start_IT+0x4d0>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d101      	bne.n	80061c8 <HAL_DMA_Start_IT+0x354>
 80061c4:	2301      	movs	r3, #1
 80061c6:	e000      	b.n	80061ca <HAL_DMA_Start_IT+0x356>
 80061c8:	2300      	movs	r3, #0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d01a      	beq.n	8006204 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d007      	beq.n	80061ec <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061ea:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d007      	beq.n	8006204 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006202:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a37      	ldr	r2, [pc, #220]	@ (80062e8 <HAL_DMA_Start_IT+0x474>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d04a      	beq.n	80062a4 <HAL_DMA_Start_IT+0x430>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a36      	ldr	r2, [pc, #216]	@ (80062ec <HAL_DMA_Start_IT+0x478>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d045      	beq.n	80062a4 <HAL_DMA_Start_IT+0x430>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a34      	ldr	r2, [pc, #208]	@ (80062f0 <HAL_DMA_Start_IT+0x47c>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d040      	beq.n	80062a4 <HAL_DMA_Start_IT+0x430>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a33      	ldr	r2, [pc, #204]	@ (80062f4 <HAL_DMA_Start_IT+0x480>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d03b      	beq.n	80062a4 <HAL_DMA_Start_IT+0x430>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a31      	ldr	r2, [pc, #196]	@ (80062f8 <HAL_DMA_Start_IT+0x484>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d036      	beq.n	80062a4 <HAL_DMA_Start_IT+0x430>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a30      	ldr	r2, [pc, #192]	@ (80062fc <HAL_DMA_Start_IT+0x488>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d031      	beq.n	80062a4 <HAL_DMA_Start_IT+0x430>
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a2e      	ldr	r2, [pc, #184]	@ (8006300 <HAL_DMA_Start_IT+0x48c>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d02c      	beq.n	80062a4 <HAL_DMA_Start_IT+0x430>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a2d      	ldr	r2, [pc, #180]	@ (8006304 <HAL_DMA_Start_IT+0x490>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d027      	beq.n	80062a4 <HAL_DMA_Start_IT+0x430>
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a2b      	ldr	r2, [pc, #172]	@ (8006308 <HAL_DMA_Start_IT+0x494>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d022      	beq.n	80062a4 <HAL_DMA_Start_IT+0x430>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a2a      	ldr	r2, [pc, #168]	@ (800630c <HAL_DMA_Start_IT+0x498>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d01d      	beq.n	80062a4 <HAL_DMA_Start_IT+0x430>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a28      	ldr	r2, [pc, #160]	@ (8006310 <HAL_DMA_Start_IT+0x49c>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d018      	beq.n	80062a4 <HAL_DMA_Start_IT+0x430>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a27      	ldr	r2, [pc, #156]	@ (8006314 <HAL_DMA_Start_IT+0x4a0>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d013      	beq.n	80062a4 <HAL_DMA_Start_IT+0x430>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a25      	ldr	r2, [pc, #148]	@ (8006318 <HAL_DMA_Start_IT+0x4a4>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d00e      	beq.n	80062a4 <HAL_DMA_Start_IT+0x430>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a24      	ldr	r2, [pc, #144]	@ (800631c <HAL_DMA_Start_IT+0x4a8>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d009      	beq.n	80062a4 <HAL_DMA_Start_IT+0x430>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a22      	ldr	r2, [pc, #136]	@ (8006320 <HAL_DMA_Start_IT+0x4ac>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d004      	beq.n	80062a4 <HAL_DMA_Start_IT+0x430>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a21      	ldr	r2, [pc, #132]	@ (8006324 <HAL_DMA_Start_IT+0x4b0>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d108      	bne.n	80062b6 <HAL_DMA_Start_IT+0x442>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f042 0201 	orr.w	r2, r2, #1
 80062b2:	601a      	str	r2, [r3, #0]
 80062b4:	e012      	b.n	80062dc <HAL_DMA_Start_IT+0x468>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f042 0201 	orr.w	r2, r2, #1
 80062c4:	601a      	str	r2, [r3, #0]
 80062c6:	e009      	b.n	80062dc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80062ce:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80062dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3718      	adds	r7, #24
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	40020010 	.word	0x40020010
 80062ec:	40020028 	.word	0x40020028
 80062f0:	40020040 	.word	0x40020040
 80062f4:	40020058 	.word	0x40020058
 80062f8:	40020070 	.word	0x40020070
 80062fc:	40020088 	.word	0x40020088
 8006300:	400200a0 	.word	0x400200a0
 8006304:	400200b8 	.word	0x400200b8
 8006308:	40020410 	.word	0x40020410
 800630c:	40020428 	.word	0x40020428
 8006310:	40020440 	.word	0x40020440
 8006314:	40020458 	.word	0x40020458
 8006318:	40020470 	.word	0x40020470
 800631c:	40020488 	.word	0x40020488
 8006320:	400204a0 	.word	0x400204a0
 8006324:	400204b8 	.word	0x400204b8
 8006328:	58025408 	.word	0x58025408
 800632c:	5802541c 	.word	0x5802541c
 8006330:	58025430 	.word	0x58025430
 8006334:	58025444 	.word	0x58025444
 8006338:	58025458 	.word	0x58025458
 800633c:	5802546c 	.word	0x5802546c
 8006340:	58025480 	.word	0x58025480
 8006344:	58025494 	.word	0x58025494

08006348 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b086      	sub	sp, #24
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006350:	f7ff f87a 	bl	8005448 <HAL_GetTick>
 8006354:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d101      	bne.n	8006360 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e2dc      	b.n	800691a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006366:	b2db      	uxtb	r3, r3
 8006368:	2b02      	cmp	r3, #2
 800636a:	d008      	beq.n	800637e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2280      	movs	r2, #128	@ 0x80
 8006370:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e2cd      	b.n	800691a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a76      	ldr	r2, [pc, #472]	@ (800655c <HAL_DMA_Abort+0x214>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d04a      	beq.n	800641e <HAL_DMA_Abort+0xd6>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a74      	ldr	r2, [pc, #464]	@ (8006560 <HAL_DMA_Abort+0x218>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d045      	beq.n	800641e <HAL_DMA_Abort+0xd6>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a73      	ldr	r2, [pc, #460]	@ (8006564 <HAL_DMA_Abort+0x21c>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d040      	beq.n	800641e <HAL_DMA_Abort+0xd6>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a71      	ldr	r2, [pc, #452]	@ (8006568 <HAL_DMA_Abort+0x220>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d03b      	beq.n	800641e <HAL_DMA_Abort+0xd6>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a70      	ldr	r2, [pc, #448]	@ (800656c <HAL_DMA_Abort+0x224>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d036      	beq.n	800641e <HAL_DMA_Abort+0xd6>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a6e      	ldr	r2, [pc, #440]	@ (8006570 <HAL_DMA_Abort+0x228>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d031      	beq.n	800641e <HAL_DMA_Abort+0xd6>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a6d      	ldr	r2, [pc, #436]	@ (8006574 <HAL_DMA_Abort+0x22c>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d02c      	beq.n	800641e <HAL_DMA_Abort+0xd6>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a6b      	ldr	r2, [pc, #428]	@ (8006578 <HAL_DMA_Abort+0x230>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d027      	beq.n	800641e <HAL_DMA_Abort+0xd6>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a6a      	ldr	r2, [pc, #424]	@ (800657c <HAL_DMA_Abort+0x234>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d022      	beq.n	800641e <HAL_DMA_Abort+0xd6>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a68      	ldr	r2, [pc, #416]	@ (8006580 <HAL_DMA_Abort+0x238>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d01d      	beq.n	800641e <HAL_DMA_Abort+0xd6>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a67      	ldr	r2, [pc, #412]	@ (8006584 <HAL_DMA_Abort+0x23c>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d018      	beq.n	800641e <HAL_DMA_Abort+0xd6>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a65      	ldr	r2, [pc, #404]	@ (8006588 <HAL_DMA_Abort+0x240>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d013      	beq.n	800641e <HAL_DMA_Abort+0xd6>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a64      	ldr	r2, [pc, #400]	@ (800658c <HAL_DMA_Abort+0x244>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d00e      	beq.n	800641e <HAL_DMA_Abort+0xd6>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a62      	ldr	r2, [pc, #392]	@ (8006590 <HAL_DMA_Abort+0x248>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d009      	beq.n	800641e <HAL_DMA_Abort+0xd6>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a61      	ldr	r2, [pc, #388]	@ (8006594 <HAL_DMA_Abort+0x24c>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d004      	beq.n	800641e <HAL_DMA_Abort+0xd6>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a5f      	ldr	r2, [pc, #380]	@ (8006598 <HAL_DMA_Abort+0x250>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d101      	bne.n	8006422 <HAL_DMA_Abort+0xda>
 800641e:	2301      	movs	r3, #1
 8006420:	e000      	b.n	8006424 <HAL_DMA_Abort+0xdc>
 8006422:	2300      	movs	r3, #0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d013      	beq.n	8006450 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f022 021e 	bic.w	r2, r2, #30
 8006436:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	695a      	ldr	r2, [r3, #20]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006446:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	617b      	str	r3, [r7, #20]
 800644e:	e00a      	b.n	8006466 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f022 020e 	bic.w	r2, r2, #14
 800645e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a3c      	ldr	r2, [pc, #240]	@ (800655c <HAL_DMA_Abort+0x214>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d072      	beq.n	8006556 <HAL_DMA_Abort+0x20e>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a3a      	ldr	r2, [pc, #232]	@ (8006560 <HAL_DMA_Abort+0x218>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d06d      	beq.n	8006556 <HAL_DMA_Abort+0x20e>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a39      	ldr	r2, [pc, #228]	@ (8006564 <HAL_DMA_Abort+0x21c>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d068      	beq.n	8006556 <HAL_DMA_Abort+0x20e>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a37      	ldr	r2, [pc, #220]	@ (8006568 <HAL_DMA_Abort+0x220>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d063      	beq.n	8006556 <HAL_DMA_Abort+0x20e>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a36      	ldr	r2, [pc, #216]	@ (800656c <HAL_DMA_Abort+0x224>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d05e      	beq.n	8006556 <HAL_DMA_Abort+0x20e>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a34      	ldr	r2, [pc, #208]	@ (8006570 <HAL_DMA_Abort+0x228>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d059      	beq.n	8006556 <HAL_DMA_Abort+0x20e>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a33      	ldr	r2, [pc, #204]	@ (8006574 <HAL_DMA_Abort+0x22c>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d054      	beq.n	8006556 <HAL_DMA_Abort+0x20e>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a31      	ldr	r2, [pc, #196]	@ (8006578 <HAL_DMA_Abort+0x230>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d04f      	beq.n	8006556 <HAL_DMA_Abort+0x20e>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a30      	ldr	r2, [pc, #192]	@ (800657c <HAL_DMA_Abort+0x234>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d04a      	beq.n	8006556 <HAL_DMA_Abort+0x20e>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a2e      	ldr	r2, [pc, #184]	@ (8006580 <HAL_DMA_Abort+0x238>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d045      	beq.n	8006556 <HAL_DMA_Abort+0x20e>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a2d      	ldr	r2, [pc, #180]	@ (8006584 <HAL_DMA_Abort+0x23c>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d040      	beq.n	8006556 <HAL_DMA_Abort+0x20e>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a2b      	ldr	r2, [pc, #172]	@ (8006588 <HAL_DMA_Abort+0x240>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d03b      	beq.n	8006556 <HAL_DMA_Abort+0x20e>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a2a      	ldr	r2, [pc, #168]	@ (800658c <HAL_DMA_Abort+0x244>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d036      	beq.n	8006556 <HAL_DMA_Abort+0x20e>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a28      	ldr	r2, [pc, #160]	@ (8006590 <HAL_DMA_Abort+0x248>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d031      	beq.n	8006556 <HAL_DMA_Abort+0x20e>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a27      	ldr	r2, [pc, #156]	@ (8006594 <HAL_DMA_Abort+0x24c>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d02c      	beq.n	8006556 <HAL_DMA_Abort+0x20e>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a25      	ldr	r2, [pc, #148]	@ (8006598 <HAL_DMA_Abort+0x250>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d027      	beq.n	8006556 <HAL_DMA_Abort+0x20e>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a24      	ldr	r2, [pc, #144]	@ (800659c <HAL_DMA_Abort+0x254>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d022      	beq.n	8006556 <HAL_DMA_Abort+0x20e>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a22      	ldr	r2, [pc, #136]	@ (80065a0 <HAL_DMA_Abort+0x258>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d01d      	beq.n	8006556 <HAL_DMA_Abort+0x20e>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a21      	ldr	r2, [pc, #132]	@ (80065a4 <HAL_DMA_Abort+0x25c>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d018      	beq.n	8006556 <HAL_DMA_Abort+0x20e>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a1f      	ldr	r2, [pc, #124]	@ (80065a8 <HAL_DMA_Abort+0x260>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d013      	beq.n	8006556 <HAL_DMA_Abort+0x20e>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a1e      	ldr	r2, [pc, #120]	@ (80065ac <HAL_DMA_Abort+0x264>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d00e      	beq.n	8006556 <HAL_DMA_Abort+0x20e>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a1c      	ldr	r2, [pc, #112]	@ (80065b0 <HAL_DMA_Abort+0x268>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d009      	beq.n	8006556 <HAL_DMA_Abort+0x20e>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a1b      	ldr	r2, [pc, #108]	@ (80065b4 <HAL_DMA_Abort+0x26c>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d004      	beq.n	8006556 <HAL_DMA_Abort+0x20e>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a19      	ldr	r2, [pc, #100]	@ (80065b8 <HAL_DMA_Abort+0x270>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d132      	bne.n	80065bc <HAL_DMA_Abort+0x274>
 8006556:	2301      	movs	r3, #1
 8006558:	e031      	b.n	80065be <HAL_DMA_Abort+0x276>
 800655a:	bf00      	nop
 800655c:	40020010 	.word	0x40020010
 8006560:	40020028 	.word	0x40020028
 8006564:	40020040 	.word	0x40020040
 8006568:	40020058 	.word	0x40020058
 800656c:	40020070 	.word	0x40020070
 8006570:	40020088 	.word	0x40020088
 8006574:	400200a0 	.word	0x400200a0
 8006578:	400200b8 	.word	0x400200b8
 800657c:	40020410 	.word	0x40020410
 8006580:	40020428 	.word	0x40020428
 8006584:	40020440 	.word	0x40020440
 8006588:	40020458 	.word	0x40020458
 800658c:	40020470 	.word	0x40020470
 8006590:	40020488 	.word	0x40020488
 8006594:	400204a0 	.word	0x400204a0
 8006598:	400204b8 	.word	0x400204b8
 800659c:	58025408 	.word	0x58025408
 80065a0:	5802541c 	.word	0x5802541c
 80065a4:	58025430 	.word	0x58025430
 80065a8:	58025444 	.word	0x58025444
 80065ac:	58025458 	.word	0x58025458
 80065b0:	5802546c 	.word	0x5802546c
 80065b4:	58025480 	.word	0x58025480
 80065b8:	58025494 	.word	0x58025494
 80065bc:	2300      	movs	r3, #0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d007      	beq.n	80065d2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80065d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a6d      	ldr	r2, [pc, #436]	@ (800678c <HAL_DMA_Abort+0x444>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d04a      	beq.n	8006672 <HAL_DMA_Abort+0x32a>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a6b      	ldr	r2, [pc, #428]	@ (8006790 <HAL_DMA_Abort+0x448>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d045      	beq.n	8006672 <HAL_DMA_Abort+0x32a>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a6a      	ldr	r2, [pc, #424]	@ (8006794 <HAL_DMA_Abort+0x44c>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d040      	beq.n	8006672 <HAL_DMA_Abort+0x32a>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a68      	ldr	r2, [pc, #416]	@ (8006798 <HAL_DMA_Abort+0x450>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d03b      	beq.n	8006672 <HAL_DMA_Abort+0x32a>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a67      	ldr	r2, [pc, #412]	@ (800679c <HAL_DMA_Abort+0x454>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d036      	beq.n	8006672 <HAL_DMA_Abort+0x32a>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a65      	ldr	r2, [pc, #404]	@ (80067a0 <HAL_DMA_Abort+0x458>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d031      	beq.n	8006672 <HAL_DMA_Abort+0x32a>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a64      	ldr	r2, [pc, #400]	@ (80067a4 <HAL_DMA_Abort+0x45c>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d02c      	beq.n	8006672 <HAL_DMA_Abort+0x32a>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a62      	ldr	r2, [pc, #392]	@ (80067a8 <HAL_DMA_Abort+0x460>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d027      	beq.n	8006672 <HAL_DMA_Abort+0x32a>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a61      	ldr	r2, [pc, #388]	@ (80067ac <HAL_DMA_Abort+0x464>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d022      	beq.n	8006672 <HAL_DMA_Abort+0x32a>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a5f      	ldr	r2, [pc, #380]	@ (80067b0 <HAL_DMA_Abort+0x468>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d01d      	beq.n	8006672 <HAL_DMA_Abort+0x32a>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a5e      	ldr	r2, [pc, #376]	@ (80067b4 <HAL_DMA_Abort+0x46c>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d018      	beq.n	8006672 <HAL_DMA_Abort+0x32a>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a5c      	ldr	r2, [pc, #368]	@ (80067b8 <HAL_DMA_Abort+0x470>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d013      	beq.n	8006672 <HAL_DMA_Abort+0x32a>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a5b      	ldr	r2, [pc, #364]	@ (80067bc <HAL_DMA_Abort+0x474>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d00e      	beq.n	8006672 <HAL_DMA_Abort+0x32a>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a59      	ldr	r2, [pc, #356]	@ (80067c0 <HAL_DMA_Abort+0x478>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d009      	beq.n	8006672 <HAL_DMA_Abort+0x32a>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a58      	ldr	r2, [pc, #352]	@ (80067c4 <HAL_DMA_Abort+0x47c>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d004      	beq.n	8006672 <HAL_DMA_Abort+0x32a>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a56      	ldr	r2, [pc, #344]	@ (80067c8 <HAL_DMA_Abort+0x480>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d108      	bne.n	8006684 <HAL_DMA_Abort+0x33c>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f022 0201 	bic.w	r2, r2, #1
 8006680:	601a      	str	r2, [r3, #0]
 8006682:	e007      	b.n	8006694 <HAL_DMA_Abort+0x34c>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f022 0201 	bic.w	r2, r2, #1
 8006692:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006694:	e013      	b.n	80066be <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006696:	f7fe fed7 	bl	8005448 <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	2b05      	cmp	r3, #5
 80066a2:	d90c      	bls.n	80066be <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2220      	movs	r2, #32
 80066a8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2203      	movs	r2, #3
 80066ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e12d      	b.n	800691a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0301 	and.w	r3, r3, #1
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1e5      	bne.n	8006696 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a2f      	ldr	r2, [pc, #188]	@ (800678c <HAL_DMA_Abort+0x444>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d04a      	beq.n	800676a <HAL_DMA_Abort+0x422>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a2d      	ldr	r2, [pc, #180]	@ (8006790 <HAL_DMA_Abort+0x448>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d045      	beq.n	800676a <HAL_DMA_Abort+0x422>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a2c      	ldr	r2, [pc, #176]	@ (8006794 <HAL_DMA_Abort+0x44c>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d040      	beq.n	800676a <HAL_DMA_Abort+0x422>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a2a      	ldr	r2, [pc, #168]	@ (8006798 <HAL_DMA_Abort+0x450>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d03b      	beq.n	800676a <HAL_DMA_Abort+0x422>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a29      	ldr	r2, [pc, #164]	@ (800679c <HAL_DMA_Abort+0x454>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d036      	beq.n	800676a <HAL_DMA_Abort+0x422>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a27      	ldr	r2, [pc, #156]	@ (80067a0 <HAL_DMA_Abort+0x458>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d031      	beq.n	800676a <HAL_DMA_Abort+0x422>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a26      	ldr	r2, [pc, #152]	@ (80067a4 <HAL_DMA_Abort+0x45c>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d02c      	beq.n	800676a <HAL_DMA_Abort+0x422>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a24      	ldr	r2, [pc, #144]	@ (80067a8 <HAL_DMA_Abort+0x460>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d027      	beq.n	800676a <HAL_DMA_Abort+0x422>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a23      	ldr	r2, [pc, #140]	@ (80067ac <HAL_DMA_Abort+0x464>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d022      	beq.n	800676a <HAL_DMA_Abort+0x422>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a21      	ldr	r2, [pc, #132]	@ (80067b0 <HAL_DMA_Abort+0x468>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d01d      	beq.n	800676a <HAL_DMA_Abort+0x422>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a20      	ldr	r2, [pc, #128]	@ (80067b4 <HAL_DMA_Abort+0x46c>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d018      	beq.n	800676a <HAL_DMA_Abort+0x422>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a1e      	ldr	r2, [pc, #120]	@ (80067b8 <HAL_DMA_Abort+0x470>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d013      	beq.n	800676a <HAL_DMA_Abort+0x422>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a1d      	ldr	r2, [pc, #116]	@ (80067bc <HAL_DMA_Abort+0x474>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d00e      	beq.n	800676a <HAL_DMA_Abort+0x422>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a1b      	ldr	r2, [pc, #108]	@ (80067c0 <HAL_DMA_Abort+0x478>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d009      	beq.n	800676a <HAL_DMA_Abort+0x422>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a1a      	ldr	r2, [pc, #104]	@ (80067c4 <HAL_DMA_Abort+0x47c>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d004      	beq.n	800676a <HAL_DMA_Abort+0x422>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a18      	ldr	r2, [pc, #96]	@ (80067c8 <HAL_DMA_Abort+0x480>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d101      	bne.n	800676e <HAL_DMA_Abort+0x426>
 800676a:	2301      	movs	r3, #1
 800676c:	e000      	b.n	8006770 <HAL_DMA_Abort+0x428>
 800676e:	2300      	movs	r3, #0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d02b      	beq.n	80067cc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006778:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800677e:	f003 031f 	and.w	r3, r3, #31
 8006782:	223f      	movs	r2, #63	@ 0x3f
 8006784:	409a      	lsls	r2, r3
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	609a      	str	r2, [r3, #8]
 800678a:	e02a      	b.n	80067e2 <HAL_DMA_Abort+0x49a>
 800678c:	40020010 	.word	0x40020010
 8006790:	40020028 	.word	0x40020028
 8006794:	40020040 	.word	0x40020040
 8006798:	40020058 	.word	0x40020058
 800679c:	40020070 	.word	0x40020070
 80067a0:	40020088 	.word	0x40020088
 80067a4:	400200a0 	.word	0x400200a0
 80067a8:	400200b8 	.word	0x400200b8
 80067ac:	40020410 	.word	0x40020410
 80067b0:	40020428 	.word	0x40020428
 80067b4:	40020440 	.word	0x40020440
 80067b8:	40020458 	.word	0x40020458
 80067bc:	40020470 	.word	0x40020470
 80067c0:	40020488 	.word	0x40020488
 80067c4:	400204a0 	.word	0x400204a0
 80067c8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067d0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067d6:	f003 031f 	and.w	r3, r3, #31
 80067da:	2201      	movs	r2, #1
 80067dc:	409a      	lsls	r2, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a4f      	ldr	r2, [pc, #316]	@ (8006924 <HAL_DMA_Abort+0x5dc>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d072      	beq.n	80068d2 <HAL_DMA_Abort+0x58a>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a4d      	ldr	r2, [pc, #308]	@ (8006928 <HAL_DMA_Abort+0x5e0>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d06d      	beq.n	80068d2 <HAL_DMA_Abort+0x58a>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a4c      	ldr	r2, [pc, #304]	@ (800692c <HAL_DMA_Abort+0x5e4>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d068      	beq.n	80068d2 <HAL_DMA_Abort+0x58a>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a4a      	ldr	r2, [pc, #296]	@ (8006930 <HAL_DMA_Abort+0x5e8>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d063      	beq.n	80068d2 <HAL_DMA_Abort+0x58a>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a49      	ldr	r2, [pc, #292]	@ (8006934 <HAL_DMA_Abort+0x5ec>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d05e      	beq.n	80068d2 <HAL_DMA_Abort+0x58a>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a47      	ldr	r2, [pc, #284]	@ (8006938 <HAL_DMA_Abort+0x5f0>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d059      	beq.n	80068d2 <HAL_DMA_Abort+0x58a>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a46      	ldr	r2, [pc, #280]	@ (800693c <HAL_DMA_Abort+0x5f4>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d054      	beq.n	80068d2 <HAL_DMA_Abort+0x58a>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a44      	ldr	r2, [pc, #272]	@ (8006940 <HAL_DMA_Abort+0x5f8>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d04f      	beq.n	80068d2 <HAL_DMA_Abort+0x58a>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a43      	ldr	r2, [pc, #268]	@ (8006944 <HAL_DMA_Abort+0x5fc>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d04a      	beq.n	80068d2 <HAL_DMA_Abort+0x58a>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a41      	ldr	r2, [pc, #260]	@ (8006948 <HAL_DMA_Abort+0x600>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d045      	beq.n	80068d2 <HAL_DMA_Abort+0x58a>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a40      	ldr	r2, [pc, #256]	@ (800694c <HAL_DMA_Abort+0x604>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d040      	beq.n	80068d2 <HAL_DMA_Abort+0x58a>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a3e      	ldr	r2, [pc, #248]	@ (8006950 <HAL_DMA_Abort+0x608>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d03b      	beq.n	80068d2 <HAL_DMA_Abort+0x58a>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a3d      	ldr	r2, [pc, #244]	@ (8006954 <HAL_DMA_Abort+0x60c>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d036      	beq.n	80068d2 <HAL_DMA_Abort+0x58a>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a3b      	ldr	r2, [pc, #236]	@ (8006958 <HAL_DMA_Abort+0x610>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d031      	beq.n	80068d2 <HAL_DMA_Abort+0x58a>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a3a      	ldr	r2, [pc, #232]	@ (800695c <HAL_DMA_Abort+0x614>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d02c      	beq.n	80068d2 <HAL_DMA_Abort+0x58a>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a38      	ldr	r2, [pc, #224]	@ (8006960 <HAL_DMA_Abort+0x618>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d027      	beq.n	80068d2 <HAL_DMA_Abort+0x58a>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a37      	ldr	r2, [pc, #220]	@ (8006964 <HAL_DMA_Abort+0x61c>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d022      	beq.n	80068d2 <HAL_DMA_Abort+0x58a>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a35      	ldr	r2, [pc, #212]	@ (8006968 <HAL_DMA_Abort+0x620>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d01d      	beq.n	80068d2 <HAL_DMA_Abort+0x58a>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a34      	ldr	r2, [pc, #208]	@ (800696c <HAL_DMA_Abort+0x624>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d018      	beq.n	80068d2 <HAL_DMA_Abort+0x58a>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a32      	ldr	r2, [pc, #200]	@ (8006970 <HAL_DMA_Abort+0x628>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d013      	beq.n	80068d2 <HAL_DMA_Abort+0x58a>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a31      	ldr	r2, [pc, #196]	@ (8006974 <HAL_DMA_Abort+0x62c>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d00e      	beq.n	80068d2 <HAL_DMA_Abort+0x58a>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a2f      	ldr	r2, [pc, #188]	@ (8006978 <HAL_DMA_Abort+0x630>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d009      	beq.n	80068d2 <HAL_DMA_Abort+0x58a>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a2e      	ldr	r2, [pc, #184]	@ (800697c <HAL_DMA_Abort+0x634>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d004      	beq.n	80068d2 <HAL_DMA_Abort+0x58a>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a2c      	ldr	r2, [pc, #176]	@ (8006980 <HAL_DMA_Abort+0x638>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d101      	bne.n	80068d6 <HAL_DMA_Abort+0x58e>
 80068d2:	2301      	movs	r3, #1
 80068d4:	e000      	b.n	80068d8 <HAL_DMA_Abort+0x590>
 80068d6:	2300      	movs	r3, #0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d015      	beq.n	8006908 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80068e4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d00c      	beq.n	8006908 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80068fc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006906:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3718      	adds	r7, #24
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	40020010 	.word	0x40020010
 8006928:	40020028 	.word	0x40020028
 800692c:	40020040 	.word	0x40020040
 8006930:	40020058 	.word	0x40020058
 8006934:	40020070 	.word	0x40020070
 8006938:	40020088 	.word	0x40020088
 800693c:	400200a0 	.word	0x400200a0
 8006940:	400200b8 	.word	0x400200b8
 8006944:	40020410 	.word	0x40020410
 8006948:	40020428 	.word	0x40020428
 800694c:	40020440 	.word	0x40020440
 8006950:	40020458 	.word	0x40020458
 8006954:	40020470 	.word	0x40020470
 8006958:	40020488 	.word	0x40020488
 800695c:	400204a0 	.word	0x400204a0
 8006960:	400204b8 	.word	0x400204b8
 8006964:	58025408 	.word	0x58025408
 8006968:	5802541c 	.word	0x5802541c
 800696c:	58025430 	.word	0x58025430
 8006970:	58025444 	.word	0x58025444
 8006974:	58025458 	.word	0x58025458
 8006978:	5802546c 	.word	0x5802546c
 800697c:	58025480 	.word	0x58025480
 8006980:	58025494 	.word	0x58025494

08006984 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d101      	bne.n	8006996 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e237      	b.n	8006e06 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800699c:	b2db      	uxtb	r3, r3
 800699e:	2b02      	cmp	r3, #2
 80069a0:	d004      	beq.n	80069ac <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2280      	movs	r2, #128	@ 0x80
 80069a6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e22c      	b.n	8006e06 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a5c      	ldr	r2, [pc, #368]	@ (8006b24 <HAL_DMA_Abort_IT+0x1a0>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d04a      	beq.n	8006a4c <HAL_DMA_Abort_IT+0xc8>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a5b      	ldr	r2, [pc, #364]	@ (8006b28 <HAL_DMA_Abort_IT+0x1a4>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d045      	beq.n	8006a4c <HAL_DMA_Abort_IT+0xc8>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a59      	ldr	r2, [pc, #356]	@ (8006b2c <HAL_DMA_Abort_IT+0x1a8>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d040      	beq.n	8006a4c <HAL_DMA_Abort_IT+0xc8>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a58      	ldr	r2, [pc, #352]	@ (8006b30 <HAL_DMA_Abort_IT+0x1ac>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d03b      	beq.n	8006a4c <HAL_DMA_Abort_IT+0xc8>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a56      	ldr	r2, [pc, #344]	@ (8006b34 <HAL_DMA_Abort_IT+0x1b0>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d036      	beq.n	8006a4c <HAL_DMA_Abort_IT+0xc8>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a55      	ldr	r2, [pc, #340]	@ (8006b38 <HAL_DMA_Abort_IT+0x1b4>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d031      	beq.n	8006a4c <HAL_DMA_Abort_IT+0xc8>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a53      	ldr	r2, [pc, #332]	@ (8006b3c <HAL_DMA_Abort_IT+0x1b8>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d02c      	beq.n	8006a4c <HAL_DMA_Abort_IT+0xc8>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a52      	ldr	r2, [pc, #328]	@ (8006b40 <HAL_DMA_Abort_IT+0x1bc>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d027      	beq.n	8006a4c <HAL_DMA_Abort_IT+0xc8>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a50      	ldr	r2, [pc, #320]	@ (8006b44 <HAL_DMA_Abort_IT+0x1c0>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d022      	beq.n	8006a4c <HAL_DMA_Abort_IT+0xc8>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a4f      	ldr	r2, [pc, #316]	@ (8006b48 <HAL_DMA_Abort_IT+0x1c4>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d01d      	beq.n	8006a4c <HAL_DMA_Abort_IT+0xc8>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a4d      	ldr	r2, [pc, #308]	@ (8006b4c <HAL_DMA_Abort_IT+0x1c8>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d018      	beq.n	8006a4c <HAL_DMA_Abort_IT+0xc8>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a4c      	ldr	r2, [pc, #304]	@ (8006b50 <HAL_DMA_Abort_IT+0x1cc>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d013      	beq.n	8006a4c <HAL_DMA_Abort_IT+0xc8>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a4a      	ldr	r2, [pc, #296]	@ (8006b54 <HAL_DMA_Abort_IT+0x1d0>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d00e      	beq.n	8006a4c <HAL_DMA_Abort_IT+0xc8>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a49      	ldr	r2, [pc, #292]	@ (8006b58 <HAL_DMA_Abort_IT+0x1d4>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d009      	beq.n	8006a4c <HAL_DMA_Abort_IT+0xc8>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a47      	ldr	r2, [pc, #284]	@ (8006b5c <HAL_DMA_Abort_IT+0x1d8>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d004      	beq.n	8006a4c <HAL_DMA_Abort_IT+0xc8>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a46      	ldr	r2, [pc, #280]	@ (8006b60 <HAL_DMA_Abort_IT+0x1dc>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d101      	bne.n	8006a50 <HAL_DMA_Abort_IT+0xcc>
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e000      	b.n	8006a52 <HAL_DMA_Abort_IT+0xce>
 8006a50:	2300      	movs	r3, #0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f000 8086 	beq.w	8006b64 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2204      	movs	r2, #4
 8006a5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a2f      	ldr	r2, [pc, #188]	@ (8006b24 <HAL_DMA_Abort_IT+0x1a0>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d04a      	beq.n	8006b00 <HAL_DMA_Abort_IT+0x17c>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a2e      	ldr	r2, [pc, #184]	@ (8006b28 <HAL_DMA_Abort_IT+0x1a4>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d045      	beq.n	8006b00 <HAL_DMA_Abort_IT+0x17c>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a2c      	ldr	r2, [pc, #176]	@ (8006b2c <HAL_DMA_Abort_IT+0x1a8>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d040      	beq.n	8006b00 <HAL_DMA_Abort_IT+0x17c>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a2b      	ldr	r2, [pc, #172]	@ (8006b30 <HAL_DMA_Abort_IT+0x1ac>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d03b      	beq.n	8006b00 <HAL_DMA_Abort_IT+0x17c>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a29      	ldr	r2, [pc, #164]	@ (8006b34 <HAL_DMA_Abort_IT+0x1b0>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d036      	beq.n	8006b00 <HAL_DMA_Abort_IT+0x17c>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a28      	ldr	r2, [pc, #160]	@ (8006b38 <HAL_DMA_Abort_IT+0x1b4>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d031      	beq.n	8006b00 <HAL_DMA_Abort_IT+0x17c>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a26      	ldr	r2, [pc, #152]	@ (8006b3c <HAL_DMA_Abort_IT+0x1b8>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d02c      	beq.n	8006b00 <HAL_DMA_Abort_IT+0x17c>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a25      	ldr	r2, [pc, #148]	@ (8006b40 <HAL_DMA_Abort_IT+0x1bc>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d027      	beq.n	8006b00 <HAL_DMA_Abort_IT+0x17c>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a23      	ldr	r2, [pc, #140]	@ (8006b44 <HAL_DMA_Abort_IT+0x1c0>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d022      	beq.n	8006b00 <HAL_DMA_Abort_IT+0x17c>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a22      	ldr	r2, [pc, #136]	@ (8006b48 <HAL_DMA_Abort_IT+0x1c4>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d01d      	beq.n	8006b00 <HAL_DMA_Abort_IT+0x17c>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a20      	ldr	r2, [pc, #128]	@ (8006b4c <HAL_DMA_Abort_IT+0x1c8>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d018      	beq.n	8006b00 <HAL_DMA_Abort_IT+0x17c>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a1f      	ldr	r2, [pc, #124]	@ (8006b50 <HAL_DMA_Abort_IT+0x1cc>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d013      	beq.n	8006b00 <HAL_DMA_Abort_IT+0x17c>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a1d      	ldr	r2, [pc, #116]	@ (8006b54 <HAL_DMA_Abort_IT+0x1d0>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d00e      	beq.n	8006b00 <HAL_DMA_Abort_IT+0x17c>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a1c      	ldr	r2, [pc, #112]	@ (8006b58 <HAL_DMA_Abort_IT+0x1d4>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d009      	beq.n	8006b00 <HAL_DMA_Abort_IT+0x17c>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a1a      	ldr	r2, [pc, #104]	@ (8006b5c <HAL_DMA_Abort_IT+0x1d8>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d004      	beq.n	8006b00 <HAL_DMA_Abort_IT+0x17c>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a19      	ldr	r2, [pc, #100]	@ (8006b60 <HAL_DMA_Abort_IT+0x1dc>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d108      	bne.n	8006b12 <HAL_DMA_Abort_IT+0x18e>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f022 0201 	bic.w	r2, r2, #1
 8006b0e:	601a      	str	r2, [r3, #0]
 8006b10:	e178      	b.n	8006e04 <HAL_DMA_Abort_IT+0x480>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f022 0201 	bic.w	r2, r2, #1
 8006b20:	601a      	str	r2, [r3, #0]
 8006b22:	e16f      	b.n	8006e04 <HAL_DMA_Abort_IT+0x480>
 8006b24:	40020010 	.word	0x40020010
 8006b28:	40020028 	.word	0x40020028
 8006b2c:	40020040 	.word	0x40020040
 8006b30:	40020058 	.word	0x40020058
 8006b34:	40020070 	.word	0x40020070
 8006b38:	40020088 	.word	0x40020088
 8006b3c:	400200a0 	.word	0x400200a0
 8006b40:	400200b8 	.word	0x400200b8
 8006b44:	40020410 	.word	0x40020410
 8006b48:	40020428 	.word	0x40020428
 8006b4c:	40020440 	.word	0x40020440
 8006b50:	40020458 	.word	0x40020458
 8006b54:	40020470 	.word	0x40020470
 8006b58:	40020488 	.word	0x40020488
 8006b5c:	400204a0 	.word	0x400204a0
 8006b60:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f022 020e 	bic.w	r2, r2, #14
 8006b72:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a6c      	ldr	r2, [pc, #432]	@ (8006d2c <HAL_DMA_Abort_IT+0x3a8>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d04a      	beq.n	8006c14 <HAL_DMA_Abort_IT+0x290>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a6b      	ldr	r2, [pc, #428]	@ (8006d30 <HAL_DMA_Abort_IT+0x3ac>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d045      	beq.n	8006c14 <HAL_DMA_Abort_IT+0x290>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a69      	ldr	r2, [pc, #420]	@ (8006d34 <HAL_DMA_Abort_IT+0x3b0>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d040      	beq.n	8006c14 <HAL_DMA_Abort_IT+0x290>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a68      	ldr	r2, [pc, #416]	@ (8006d38 <HAL_DMA_Abort_IT+0x3b4>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d03b      	beq.n	8006c14 <HAL_DMA_Abort_IT+0x290>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a66      	ldr	r2, [pc, #408]	@ (8006d3c <HAL_DMA_Abort_IT+0x3b8>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d036      	beq.n	8006c14 <HAL_DMA_Abort_IT+0x290>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a65      	ldr	r2, [pc, #404]	@ (8006d40 <HAL_DMA_Abort_IT+0x3bc>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d031      	beq.n	8006c14 <HAL_DMA_Abort_IT+0x290>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a63      	ldr	r2, [pc, #396]	@ (8006d44 <HAL_DMA_Abort_IT+0x3c0>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d02c      	beq.n	8006c14 <HAL_DMA_Abort_IT+0x290>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a62      	ldr	r2, [pc, #392]	@ (8006d48 <HAL_DMA_Abort_IT+0x3c4>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d027      	beq.n	8006c14 <HAL_DMA_Abort_IT+0x290>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a60      	ldr	r2, [pc, #384]	@ (8006d4c <HAL_DMA_Abort_IT+0x3c8>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d022      	beq.n	8006c14 <HAL_DMA_Abort_IT+0x290>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a5f      	ldr	r2, [pc, #380]	@ (8006d50 <HAL_DMA_Abort_IT+0x3cc>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d01d      	beq.n	8006c14 <HAL_DMA_Abort_IT+0x290>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a5d      	ldr	r2, [pc, #372]	@ (8006d54 <HAL_DMA_Abort_IT+0x3d0>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d018      	beq.n	8006c14 <HAL_DMA_Abort_IT+0x290>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a5c      	ldr	r2, [pc, #368]	@ (8006d58 <HAL_DMA_Abort_IT+0x3d4>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d013      	beq.n	8006c14 <HAL_DMA_Abort_IT+0x290>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a5a      	ldr	r2, [pc, #360]	@ (8006d5c <HAL_DMA_Abort_IT+0x3d8>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d00e      	beq.n	8006c14 <HAL_DMA_Abort_IT+0x290>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a59      	ldr	r2, [pc, #356]	@ (8006d60 <HAL_DMA_Abort_IT+0x3dc>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d009      	beq.n	8006c14 <HAL_DMA_Abort_IT+0x290>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a57      	ldr	r2, [pc, #348]	@ (8006d64 <HAL_DMA_Abort_IT+0x3e0>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d004      	beq.n	8006c14 <HAL_DMA_Abort_IT+0x290>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a56      	ldr	r2, [pc, #344]	@ (8006d68 <HAL_DMA_Abort_IT+0x3e4>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d108      	bne.n	8006c26 <HAL_DMA_Abort_IT+0x2a2>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f022 0201 	bic.w	r2, r2, #1
 8006c22:	601a      	str	r2, [r3, #0]
 8006c24:	e007      	b.n	8006c36 <HAL_DMA_Abort_IT+0x2b2>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f022 0201 	bic.w	r2, r2, #1
 8006c34:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a3c      	ldr	r2, [pc, #240]	@ (8006d2c <HAL_DMA_Abort_IT+0x3a8>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d072      	beq.n	8006d26 <HAL_DMA_Abort_IT+0x3a2>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a3a      	ldr	r2, [pc, #232]	@ (8006d30 <HAL_DMA_Abort_IT+0x3ac>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d06d      	beq.n	8006d26 <HAL_DMA_Abort_IT+0x3a2>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a39      	ldr	r2, [pc, #228]	@ (8006d34 <HAL_DMA_Abort_IT+0x3b0>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d068      	beq.n	8006d26 <HAL_DMA_Abort_IT+0x3a2>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a37      	ldr	r2, [pc, #220]	@ (8006d38 <HAL_DMA_Abort_IT+0x3b4>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d063      	beq.n	8006d26 <HAL_DMA_Abort_IT+0x3a2>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a36      	ldr	r2, [pc, #216]	@ (8006d3c <HAL_DMA_Abort_IT+0x3b8>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d05e      	beq.n	8006d26 <HAL_DMA_Abort_IT+0x3a2>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a34      	ldr	r2, [pc, #208]	@ (8006d40 <HAL_DMA_Abort_IT+0x3bc>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d059      	beq.n	8006d26 <HAL_DMA_Abort_IT+0x3a2>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a33      	ldr	r2, [pc, #204]	@ (8006d44 <HAL_DMA_Abort_IT+0x3c0>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d054      	beq.n	8006d26 <HAL_DMA_Abort_IT+0x3a2>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a31      	ldr	r2, [pc, #196]	@ (8006d48 <HAL_DMA_Abort_IT+0x3c4>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d04f      	beq.n	8006d26 <HAL_DMA_Abort_IT+0x3a2>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a30      	ldr	r2, [pc, #192]	@ (8006d4c <HAL_DMA_Abort_IT+0x3c8>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d04a      	beq.n	8006d26 <HAL_DMA_Abort_IT+0x3a2>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a2e      	ldr	r2, [pc, #184]	@ (8006d50 <HAL_DMA_Abort_IT+0x3cc>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d045      	beq.n	8006d26 <HAL_DMA_Abort_IT+0x3a2>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a2d      	ldr	r2, [pc, #180]	@ (8006d54 <HAL_DMA_Abort_IT+0x3d0>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d040      	beq.n	8006d26 <HAL_DMA_Abort_IT+0x3a2>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a2b      	ldr	r2, [pc, #172]	@ (8006d58 <HAL_DMA_Abort_IT+0x3d4>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d03b      	beq.n	8006d26 <HAL_DMA_Abort_IT+0x3a2>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a2a      	ldr	r2, [pc, #168]	@ (8006d5c <HAL_DMA_Abort_IT+0x3d8>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d036      	beq.n	8006d26 <HAL_DMA_Abort_IT+0x3a2>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a28      	ldr	r2, [pc, #160]	@ (8006d60 <HAL_DMA_Abort_IT+0x3dc>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d031      	beq.n	8006d26 <HAL_DMA_Abort_IT+0x3a2>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a27      	ldr	r2, [pc, #156]	@ (8006d64 <HAL_DMA_Abort_IT+0x3e0>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d02c      	beq.n	8006d26 <HAL_DMA_Abort_IT+0x3a2>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a25      	ldr	r2, [pc, #148]	@ (8006d68 <HAL_DMA_Abort_IT+0x3e4>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d027      	beq.n	8006d26 <HAL_DMA_Abort_IT+0x3a2>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a24      	ldr	r2, [pc, #144]	@ (8006d6c <HAL_DMA_Abort_IT+0x3e8>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d022      	beq.n	8006d26 <HAL_DMA_Abort_IT+0x3a2>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a22      	ldr	r2, [pc, #136]	@ (8006d70 <HAL_DMA_Abort_IT+0x3ec>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d01d      	beq.n	8006d26 <HAL_DMA_Abort_IT+0x3a2>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a21      	ldr	r2, [pc, #132]	@ (8006d74 <HAL_DMA_Abort_IT+0x3f0>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d018      	beq.n	8006d26 <HAL_DMA_Abort_IT+0x3a2>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a1f      	ldr	r2, [pc, #124]	@ (8006d78 <HAL_DMA_Abort_IT+0x3f4>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d013      	beq.n	8006d26 <HAL_DMA_Abort_IT+0x3a2>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a1e      	ldr	r2, [pc, #120]	@ (8006d7c <HAL_DMA_Abort_IT+0x3f8>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d00e      	beq.n	8006d26 <HAL_DMA_Abort_IT+0x3a2>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a1c      	ldr	r2, [pc, #112]	@ (8006d80 <HAL_DMA_Abort_IT+0x3fc>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d009      	beq.n	8006d26 <HAL_DMA_Abort_IT+0x3a2>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a1b      	ldr	r2, [pc, #108]	@ (8006d84 <HAL_DMA_Abort_IT+0x400>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d004      	beq.n	8006d26 <HAL_DMA_Abort_IT+0x3a2>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a19      	ldr	r2, [pc, #100]	@ (8006d88 <HAL_DMA_Abort_IT+0x404>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d132      	bne.n	8006d8c <HAL_DMA_Abort_IT+0x408>
 8006d26:	2301      	movs	r3, #1
 8006d28:	e031      	b.n	8006d8e <HAL_DMA_Abort_IT+0x40a>
 8006d2a:	bf00      	nop
 8006d2c:	40020010 	.word	0x40020010
 8006d30:	40020028 	.word	0x40020028
 8006d34:	40020040 	.word	0x40020040
 8006d38:	40020058 	.word	0x40020058
 8006d3c:	40020070 	.word	0x40020070
 8006d40:	40020088 	.word	0x40020088
 8006d44:	400200a0 	.word	0x400200a0
 8006d48:	400200b8 	.word	0x400200b8
 8006d4c:	40020410 	.word	0x40020410
 8006d50:	40020428 	.word	0x40020428
 8006d54:	40020440 	.word	0x40020440
 8006d58:	40020458 	.word	0x40020458
 8006d5c:	40020470 	.word	0x40020470
 8006d60:	40020488 	.word	0x40020488
 8006d64:	400204a0 	.word	0x400204a0
 8006d68:	400204b8 	.word	0x400204b8
 8006d6c:	58025408 	.word	0x58025408
 8006d70:	5802541c 	.word	0x5802541c
 8006d74:	58025430 	.word	0x58025430
 8006d78:	58025444 	.word	0x58025444
 8006d7c:	58025458 	.word	0x58025458
 8006d80:	5802546c 	.word	0x5802546c
 8006d84:	58025480 	.word	0x58025480
 8006d88:	58025494 	.word	0x58025494
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d028      	beq.n	8006de4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006da0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006da6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dac:	f003 031f 	and.w	r3, r3, #31
 8006db0:	2201      	movs	r2, #1
 8006db2:	409a      	lsls	r2, r3
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006dc0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d00c      	beq.n	8006de4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006dd4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006dd8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006de2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d003      	beq.n	8006e04 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop

08006e10 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b08a      	sub	sp, #40	@ 0x28
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006e1c:	4b67      	ldr	r3, [pc, #412]	@ (8006fbc <HAL_DMA_IRQHandler+0x1ac>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a67      	ldr	r2, [pc, #412]	@ (8006fc0 <HAL_DMA_IRQHandler+0x1b0>)
 8006e22:	fba2 2303 	umull	r2, r3, r2, r3
 8006e26:	0a9b      	lsrs	r3, r3, #10
 8006e28:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e2e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e34:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006e36:	6a3b      	ldr	r3, [r7, #32]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a5f      	ldr	r2, [pc, #380]	@ (8006fc4 <HAL_DMA_IRQHandler+0x1b4>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d04a      	beq.n	8006ee2 <HAL_DMA_IRQHandler+0xd2>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a5d      	ldr	r2, [pc, #372]	@ (8006fc8 <HAL_DMA_IRQHandler+0x1b8>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d045      	beq.n	8006ee2 <HAL_DMA_IRQHandler+0xd2>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a5c      	ldr	r2, [pc, #368]	@ (8006fcc <HAL_DMA_IRQHandler+0x1bc>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d040      	beq.n	8006ee2 <HAL_DMA_IRQHandler+0xd2>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a5a      	ldr	r2, [pc, #360]	@ (8006fd0 <HAL_DMA_IRQHandler+0x1c0>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d03b      	beq.n	8006ee2 <HAL_DMA_IRQHandler+0xd2>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a59      	ldr	r2, [pc, #356]	@ (8006fd4 <HAL_DMA_IRQHandler+0x1c4>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d036      	beq.n	8006ee2 <HAL_DMA_IRQHandler+0xd2>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a57      	ldr	r2, [pc, #348]	@ (8006fd8 <HAL_DMA_IRQHandler+0x1c8>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d031      	beq.n	8006ee2 <HAL_DMA_IRQHandler+0xd2>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a56      	ldr	r2, [pc, #344]	@ (8006fdc <HAL_DMA_IRQHandler+0x1cc>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d02c      	beq.n	8006ee2 <HAL_DMA_IRQHandler+0xd2>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a54      	ldr	r2, [pc, #336]	@ (8006fe0 <HAL_DMA_IRQHandler+0x1d0>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d027      	beq.n	8006ee2 <HAL_DMA_IRQHandler+0xd2>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a53      	ldr	r2, [pc, #332]	@ (8006fe4 <HAL_DMA_IRQHandler+0x1d4>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d022      	beq.n	8006ee2 <HAL_DMA_IRQHandler+0xd2>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a51      	ldr	r2, [pc, #324]	@ (8006fe8 <HAL_DMA_IRQHandler+0x1d8>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d01d      	beq.n	8006ee2 <HAL_DMA_IRQHandler+0xd2>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a50      	ldr	r2, [pc, #320]	@ (8006fec <HAL_DMA_IRQHandler+0x1dc>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d018      	beq.n	8006ee2 <HAL_DMA_IRQHandler+0xd2>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a4e      	ldr	r2, [pc, #312]	@ (8006ff0 <HAL_DMA_IRQHandler+0x1e0>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d013      	beq.n	8006ee2 <HAL_DMA_IRQHandler+0xd2>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a4d      	ldr	r2, [pc, #308]	@ (8006ff4 <HAL_DMA_IRQHandler+0x1e4>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d00e      	beq.n	8006ee2 <HAL_DMA_IRQHandler+0xd2>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a4b      	ldr	r2, [pc, #300]	@ (8006ff8 <HAL_DMA_IRQHandler+0x1e8>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d009      	beq.n	8006ee2 <HAL_DMA_IRQHandler+0xd2>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a4a      	ldr	r2, [pc, #296]	@ (8006ffc <HAL_DMA_IRQHandler+0x1ec>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d004      	beq.n	8006ee2 <HAL_DMA_IRQHandler+0xd2>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a48      	ldr	r2, [pc, #288]	@ (8007000 <HAL_DMA_IRQHandler+0x1f0>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d101      	bne.n	8006ee6 <HAL_DMA_IRQHandler+0xd6>
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e000      	b.n	8006ee8 <HAL_DMA_IRQHandler+0xd8>
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	f000 842b 	beq.w	8007744 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ef2:	f003 031f 	and.w	r3, r3, #31
 8006ef6:	2208      	movs	r2, #8
 8006ef8:	409a      	lsls	r2, r3
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	4013      	ands	r3, r2
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	f000 80a2 	beq.w	8007048 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a2e      	ldr	r2, [pc, #184]	@ (8006fc4 <HAL_DMA_IRQHandler+0x1b4>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d04a      	beq.n	8006fa4 <HAL_DMA_IRQHandler+0x194>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a2d      	ldr	r2, [pc, #180]	@ (8006fc8 <HAL_DMA_IRQHandler+0x1b8>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d045      	beq.n	8006fa4 <HAL_DMA_IRQHandler+0x194>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a2b      	ldr	r2, [pc, #172]	@ (8006fcc <HAL_DMA_IRQHandler+0x1bc>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d040      	beq.n	8006fa4 <HAL_DMA_IRQHandler+0x194>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a2a      	ldr	r2, [pc, #168]	@ (8006fd0 <HAL_DMA_IRQHandler+0x1c0>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d03b      	beq.n	8006fa4 <HAL_DMA_IRQHandler+0x194>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a28      	ldr	r2, [pc, #160]	@ (8006fd4 <HAL_DMA_IRQHandler+0x1c4>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d036      	beq.n	8006fa4 <HAL_DMA_IRQHandler+0x194>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a27      	ldr	r2, [pc, #156]	@ (8006fd8 <HAL_DMA_IRQHandler+0x1c8>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d031      	beq.n	8006fa4 <HAL_DMA_IRQHandler+0x194>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a25      	ldr	r2, [pc, #148]	@ (8006fdc <HAL_DMA_IRQHandler+0x1cc>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d02c      	beq.n	8006fa4 <HAL_DMA_IRQHandler+0x194>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a24      	ldr	r2, [pc, #144]	@ (8006fe0 <HAL_DMA_IRQHandler+0x1d0>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d027      	beq.n	8006fa4 <HAL_DMA_IRQHandler+0x194>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a22      	ldr	r2, [pc, #136]	@ (8006fe4 <HAL_DMA_IRQHandler+0x1d4>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d022      	beq.n	8006fa4 <HAL_DMA_IRQHandler+0x194>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a21      	ldr	r2, [pc, #132]	@ (8006fe8 <HAL_DMA_IRQHandler+0x1d8>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d01d      	beq.n	8006fa4 <HAL_DMA_IRQHandler+0x194>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a1f      	ldr	r2, [pc, #124]	@ (8006fec <HAL_DMA_IRQHandler+0x1dc>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d018      	beq.n	8006fa4 <HAL_DMA_IRQHandler+0x194>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a1e      	ldr	r2, [pc, #120]	@ (8006ff0 <HAL_DMA_IRQHandler+0x1e0>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d013      	beq.n	8006fa4 <HAL_DMA_IRQHandler+0x194>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a1c      	ldr	r2, [pc, #112]	@ (8006ff4 <HAL_DMA_IRQHandler+0x1e4>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d00e      	beq.n	8006fa4 <HAL_DMA_IRQHandler+0x194>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a1b      	ldr	r2, [pc, #108]	@ (8006ff8 <HAL_DMA_IRQHandler+0x1e8>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d009      	beq.n	8006fa4 <HAL_DMA_IRQHandler+0x194>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a19      	ldr	r2, [pc, #100]	@ (8006ffc <HAL_DMA_IRQHandler+0x1ec>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d004      	beq.n	8006fa4 <HAL_DMA_IRQHandler+0x194>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a18      	ldr	r2, [pc, #96]	@ (8007000 <HAL_DMA_IRQHandler+0x1f0>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d12f      	bne.n	8007004 <HAL_DMA_IRQHandler+0x1f4>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f003 0304 	and.w	r3, r3, #4
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	bf14      	ite	ne
 8006fb2:	2301      	movne	r3, #1
 8006fb4:	2300      	moveq	r3, #0
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	e02e      	b.n	8007018 <HAL_DMA_IRQHandler+0x208>
 8006fba:	bf00      	nop
 8006fbc:	24000000 	.word	0x24000000
 8006fc0:	1b4e81b5 	.word	0x1b4e81b5
 8006fc4:	40020010 	.word	0x40020010
 8006fc8:	40020028 	.word	0x40020028
 8006fcc:	40020040 	.word	0x40020040
 8006fd0:	40020058 	.word	0x40020058
 8006fd4:	40020070 	.word	0x40020070
 8006fd8:	40020088 	.word	0x40020088
 8006fdc:	400200a0 	.word	0x400200a0
 8006fe0:	400200b8 	.word	0x400200b8
 8006fe4:	40020410 	.word	0x40020410
 8006fe8:	40020428 	.word	0x40020428
 8006fec:	40020440 	.word	0x40020440
 8006ff0:	40020458 	.word	0x40020458
 8006ff4:	40020470 	.word	0x40020470
 8006ff8:	40020488 	.word	0x40020488
 8006ffc:	400204a0 	.word	0x400204a0
 8007000:	400204b8 	.word	0x400204b8
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f003 0308 	and.w	r3, r3, #8
 800700e:	2b00      	cmp	r3, #0
 8007010:	bf14      	ite	ne
 8007012:	2301      	movne	r3, #1
 8007014:	2300      	moveq	r3, #0
 8007016:	b2db      	uxtb	r3, r3
 8007018:	2b00      	cmp	r3, #0
 800701a:	d015      	beq.n	8007048 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f022 0204 	bic.w	r2, r2, #4
 800702a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007030:	f003 031f 	and.w	r3, r3, #31
 8007034:	2208      	movs	r2, #8
 8007036:	409a      	lsls	r2, r3
 8007038:	6a3b      	ldr	r3, [r7, #32]
 800703a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007040:	f043 0201 	orr.w	r2, r3, #1
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800704c:	f003 031f 	and.w	r3, r3, #31
 8007050:	69ba      	ldr	r2, [r7, #24]
 8007052:	fa22 f303 	lsr.w	r3, r2, r3
 8007056:	f003 0301 	and.w	r3, r3, #1
 800705a:	2b00      	cmp	r3, #0
 800705c:	d06e      	beq.n	800713c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a69      	ldr	r2, [pc, #420]	@ (8007208 <HAL_DMA_IRQHandler+0x3f8>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d04a      	beq.n	80070fe <HAL_DMA_IRQHandler+0x2ee>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a67      	ldr	r2, [pc, #412]	@ (800720c <HAL_DMA_IRQHandler+0x3fc>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d045      	beq.n	80070fe <HAL_DMA_IRQHandler+0x2ee>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a66      	ldr	r2, [pc, #408]	@ (8007210 <HAL_DMA_IRQHandler+0x400>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d040      	beq.n	80070fe <HAL_DMA_IRQHandler+0x2ee>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a64      	ldr	r2, [pc, #400]	@ (8007214 <HAL_DMA_IRQHandler+0x404>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d03b      	beq.n	80070fe <HAL_DMA_IRQHandler+0x2ee>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a63      	ldr	r2, [pc, #396]	@ (8007218 <HAL_DMA_IRQHandler+0x408>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d036      	beq.n	80070fe <HAL_DMA_IRQHandler+0x2ee>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a61      	ldr	r2, [pc, #388]	@ (800721c <HAL_DMA_IRQHandler+0x40c>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d031      	beq.n	80070fe <HAL_DMA_IRQHandler+0x2ee>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a60      	ldr	r2, [pc, #384]	@ (8007220 <HAL_DMA_IRQHandler+0x410>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d02c      	beq.n	80070fe <HAL_DMA_IRQHandler+0x2ee>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a5e      	ldr	r2, [pc, #376]	@ (8007224 <HAL_DMA_IRQHandler+0x414>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d027      	beq.n	80070fe <HAL_DMA_IRQHandler+0x2ee>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a5d      	ldr	r2, [pc, #372]	@ (8007228 <HAL_DMA_IRQHandler+0x418>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d022      	beq.n	80070fe <HAL_DMA_IRQHandler+0x2ee>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a5b      	ldr	r2, [pc, #364]	@ (800722c <HAL_DMA_IRQHandler+0x41c>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d01d      	beq.n	80070fe <HAL_DMA_IRQHandler+0x2ee>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a5a      	ldr	r2, [pc, #360]	@ (8007230 <HAL_DMA_IRQHandler+0x420>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d018      	beq.n	80070fe <HAL_DMA_IRQHandler+0x2ee>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a58      	ldr	r2, [pc, #352]	@ (8007234 <HAL_DMA_IRQHandler+0x424>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d013      	beq.n	80070fe <HAL_DMA_IRQHandler+0x2ee>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a57      	ldr	r2, [pc, #348]	@ (8007238 <HAL_DMA_IRQHandler+0x428>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d00e      	beq.n	80070fe <HAL_DMA_IRQHandler+0x2ee>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a55      	ldr	r2, [pc, #340]	@ (800723c <HAL_DMA_IRQHandler+0x42c>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d009      	beq.n	80070fe <HAL_DMA_IRQHandler+0x2ee>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a54      	ldr	r2, [pc, #336]	@ (8007240 <HAL_DMA_IRQHandler+0x430>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d004      	beq.n	80070fe <HAL_DMA_IRQHandler+0x2ee>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a52      	ldr	r2, [pc, #328]	@ (8007244 <HAL_DMA_IRQHandler+0x434>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d10a      	bne.n	8007114 <HAL_DMA_IRQHandler+0x304>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	695b      	ldr	r3, [r3, #20]
 8007104:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007108:	2b00      	cmp	r3, #0
 800710a:	bf14      	ite	ne
 800710c:	2301      	movne	r3, #1
 800710e:	2300      	moveq	r3, #0
 8007110:	b2db      	uxtb	r3, r3
 8007112:	e003      	b.n	800711c <HAL_DMA_IRQHandler+0x30c>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2300      	movs	r3, #0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00d      	beq.n	800713c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007124:	f003 031f 	and.w	r3, r3, #31
 8007128:	2201      	movs	r2, #1
 800712a:	409a      	lsls	r2, r3
 800712c:	6a3b      	ldr	r3, [r7, #32]
 800712e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007134:	f043 0202 	orr.w	r2, r3, #2
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007140:	f003 031f 	and.w	r3, r3, #31
 8007144:	2204      	movs	r2, #4
 8007146:	409a      	lsls	r2, r3
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	4013      	ands	r3, r2
 800714c:	2b00      	cmp	r3, #0
 800714e:	f000 808f 	beq.w	8007270 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a2c      	ldr	r2, [pc, #176]	@ (8007208 <HAL_DMA_IRQHandler+0x3f8>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d04a      	beq.n	80071f2 <HAL_DMA_IRQHandler+0x3e2>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a2a      	ldr	r2, [pc, #168]	@ (800720c <HAL_DMA_IRQHandler+0x3fc>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d045      	beq.n	80071f2 <HAL_DMA_IRQHandler+0x3e2>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a29      	ldr	r2, [pc, #164]	@ (8007210 <HAL_DMA_IRQHandler+0x400>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d040      	beq.n	80071f2 <HAL_DMA_IRQHandler+0x3e2>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a27      	ldr	r2, [pc, #156]	@ (8007214 <HAL_DMA_IRQHandler+0x404>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d03b      	beq.n	80071f2 <HAL_DMA_IRQHandler+0x3e2>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a26      	ldr	r2, [pc, #152]	@ (8007218 <HAL_DMA_IRQHandler+0x408>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d036      	beq.n	80071f2 <HAL_DMA_IRQHandler+0x3e2>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a24      	ldr	r2, [pc, #144]	@ (800721c <HAL_DMA_IRQHandler+0x40c>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d031      	beq.n	80071f2 <HAL_DMA_IRQHandler+0x3e2>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a23      	ldr	r2, [pc, #140]	@ (8007220 <HAL_DMA_IRQHandler+0x410>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d02c      	beq.n	80071f2 <HAL_DMA_IRQHandler+0x3e2>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a21      	ldr	r2, [pc, #132]	@ (8007224 <HAL_DMA_IRQHandler+0x414>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d027      	beq.n	80071f2 <HAL_DMA_IRQHandler+0x3e2>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a20      	ldr	r2, [pc, #128]	@ (8007228 <HAL_DMA_IRQHandler+0x418>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d022      	beq.n	80071f2 <HAL_DMA_IRQHandler+0x3e2>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a1e      	ldr	r2, [pc, #120]	@ (800722c <HAL_DMA_IRQHandler+0x41c>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d01d      	beq.n	80071f2 <HAL_DMA_IRQHandler+0x3e2>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a1d      	ldr	r2, [pc, #116]	@ (8007230 <HAL_DMA_IRQHandler+0x420>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d018      	beq.n	80071f2 <HAL_DMA_IRQHandler+0x3e2>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a1b      	ldr	r2, [pc, #108]	@ (8007234 <HAL_DMA_IRQHandler+0x424>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d013      	beq.n	80071f2 <HAL_DMA_IRQHandler+0x3e2>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a1a      	ldr	r2, [pc, #104]	@ (8007238 <HAL_DMA_IRQHandler+0x428>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d00e      	beq.n	80071f2 <HAL_DMA_IRQHandler+0x3e2>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a18      	ldr	r2, [pc, #96]	@ (800723c <HAL_DMA_IRQHandler+0x42c>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d009      	beq.n	80071f2 <HAL_DMA_IRQHandler+0x3e2>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a17      	ldr	r2, [pc, #92]	@ (8007240 <HAL_DMA_IRQHandler+0x430>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d004      	beq.n	80071f2 <HAL_DMA_IRQHandler+0x3e2>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a15      	ldr	r2, [pc, #84]	@ (8007244 <HAL_DMA_IRQHandler+0x434>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d12a      	bne.n	8007248 <HAL_DMA_IRQHandler+0x438>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 0302 	and.w	r3, r3, #2
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	bf14      	ite	ne
 8007200:	2301      	movne	r3, #1
 8007202:	2300      	moveq	r3, #0
 8007204:	b2db      	uxtb	r3, r3
 8007206:	e023      	b.n	8007250 <HAL_DMA_IRQHandler+0x440>
 8007208:	40020010 	.word	0x40020010
 800720c:	40020028 	.word	0x40020028
 8007210:	40020040 	.word	0x40020040
 8007214:	40020058 	.word	0x40020058
 8007218:	40020070 	.word	0x40020070
 800721c:	40020088 	.word	0x40020088
 8007220:	400200a0 	.word	0x400200a0
 8007224:	400200b8 	.word	0x400200b8
 8007228:	40020410 	.word	0x40020410
 800722c:	40020428 	.word	0x40020428
 8007230:	40020440 	.word	0x40020440
 8007234:	40020458 	.word	0x40020458
 8007238:	40020470 	.word	0x40020470
 800723c:	40020488 	.word	0x40020488
 8007240:	400204a0 	.word	0x400204a0
 8007244:	400204b8 	.word	0x400204b8
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2300      	movs	r3, #0
 8007250:	2b00      	cmp	r3, #0
 8007252:	d00d      	beq.n	8007270 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007258:	f003 031f 	and.w	r3, r3, #31
 800725c:	2204      	movs	r2, #4
 800725e:	409a      	lsls	r2, r3
 8007260:	6a3b      	ldr	r3, [r7, #32]
 8007262:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007268:	f043 0204 	orr.w	r2, r3, #4
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007274:	f003 031f 	and.w	r3, r3, #31
 8007278:	2210      	movs	r2, #16
 800727a:	409a      	lsls	r2, r3
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	4013      	ands	r3, r2
 8007280:	2b00      	cmp	r3, #0
 8007282:	f000 80a6 	beq.w	80073d2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a85      	ldr	r2, [pc, #532]	@ (80074a0 <HAL_DMA_IRQHandler+0x690>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d04a      	beq.n	8007326 <HAL_DMA_IRQHandler+0x516>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a83      	ldr	r2, [pc, #524]	@ (80074a4 <HAL_DMA_IRQHandler+0x694>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d045      	beq.n	8007326 <HAL_DMA_IRQHandler+0x516>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a82      	ldr	r2, [pc, #520]	@ (80074a8 <HAL_DMA_IRQHandler+0x698>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d040      	beq.n	8007326 <HAL_DMA_IRQHandler+0x516>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a80      	ldr	r2, [pc, #512]	@ (80074ac <HAL_DMA_IRQHandler+0x69c>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d03b      	beq.n	8007326 <HAL_DMA_IRQHandler+0x516>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a7f      	ldr	r2, [pc, #508]	@ (80074b0 <HAL_DMA_IRQHandler+0x6a0>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d036      	beq.n	8007326 <HAL_DMA_IRQHandler+0x516>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a7d      	ldr	r2, [pc, #500]	@ (80074b4 <HAL_DMA_IRQHandler+0x6a4>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d031      	beq.n	8007326 <HAL_DMA_IRQHandler+0x516>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a7c      	ldr	r2, [pc, #496]	@ (80074b8 <HAL_DMA_IRQHandler+0x6a8>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d02c      	beq.n	8007326 <HAL_DMA_IRQHandler+0x516>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a7a      	ldr	r2, [pc, #488]	@ (80074bc <HAL_DMA_IRQHandler+0x6ac>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d027      	beq.n	8007326 <HAL_DMA_IRQHandler+0x516>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a79      	ldr	r2, [pc, #484]	@ (80074c0 <HAL_DMA_IRQHandler+0x6b0>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d022      	beq.n	8007326 <HAL_DMA_IRQHandler+0x516>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a77      	ldr	r2, [pc, #476]	@ (80074c4 <HAL_DMA_IRQHandler+0x6b4>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d01d      	beq.n	8007326 <HAL_DMA_IRQHandler+0x516>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a76      	ldr	r2, [pc, #472]	@ (80074c8 <HAL_DMA_IRQHandler+0x6b8>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d018      	beq.n	8007326 <HAL_DMA_IRQHandler+0x516>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a74      	ldr	r2, [pc, #464]	@ (80074cc <HAL_DMA_IRQHandler+0x6bc>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d013      	beq.n	8007326 <HAL_DMA_IRQHandler+0x516>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a73      	ldr	r2, [pc, #460]	@ (80074d0 <HAL_DMA_IRQHandler+0x6c0>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d00e      	beq.n	8007326 <HAL_DMA_IRQHandler+0x516>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a71      	ldr	r2, [pc, #452]	@ (80074d4 <HAL_DMA_IRQHandler+0x6c4>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d009      	beq.n	8007326 <HAL_DMA_IRQHandler+0x516>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a70      	ldr	r2, [pc, #448]	@ (80074d8 <HAL_DMA_IRQHandler+0x6c8>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d004      	beq.n	8007326 <HAL_DMA_IRQHandler+0x516>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a6e      	ldr	r2, [pc, #440]	@ (80074dc <HAL_DMA_IRQHandler+0x6cc>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d10a      	bne.n	800733c <HAL_DMA_IRQHandler+0x52c>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 0308 	and.w	r3, r3, #8
 8007330:	2b00      	cmp	r3, #0
 8007332:	bf14      	ite	ne
 8007334:	2301      	movne	r3, #1
 8007336:	2300      	moveq	r3, #0
 8007338:	b2db      	uxtb	r3, r3
 800733a:	e009      	b.n	8007350 <HAL_DMA_IRQHandler+0x540>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f003 0304 	and.w	r3, r3, #4
 8007346:	2b00      	cmp	r3, #0
 8007348:	bf14      	ite	ne
 800734a:	2301      	movne	r3, #1
 800734c:	2300      	moveq	r3, #0
 800734e:	b2db      	uxtb	r3, r3
 8007350:	2b00      	cmp	r3, #0
 8007352:	d03e      	beq.n	80073d2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007358:	f003 031f 	and.w	r3, r3, #31
 800735c:	2210      	movs	r2, #16
 800735e:	409a      	lsls	r2, r3
 8007360:	6a3b      	ldr	r3, [r7, #32]
 8007362:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800736e:	2b00      	cmp	r3, #0
 8007370:	d018      	beq.n	80073a4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800737c:	2b00      	cmp	r3, #0
 800737e:	d108      	bne.n	8007392 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007384:	2b00      	cmp	r3, #0
 8007386:	d024      	beq.n	80073d2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	4798      	blx	r3
 8007390:	e01f      	b.n	80073d2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007396:	2b00      	cmp	r3, #0
 8007398:	d01b      	beq.n	80073d2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	4798      	blx	r3
 80073a2:	e016      	b.n	80073d2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d107      	bne.n	80073c2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f022 0208 	bic.w	r2, r2, #8
 80073c0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d003      	beq.n	80073d2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073d6:	f003 031f 	and.w	r3, r3, #31
 80073da:	2220      	movs	r2, #32
 80073dc:	409a      	lsls	r2, r3
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	4013      	ands	r3, r2
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	f000 8110 	beq.w	8007608 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a2c      	ldr	r2, [pc, #176]	@ (80074a0 <HAL_DMA_IRQHandler+0x690>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d04a      	beq.n	8007488 <HAL_DMA_IRQHandler+0x678>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a2b      	ldr	r2, [pc, #172]	@ (80074a4 <HAL_DMA_IRQHandler+0x694>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d045      	beq.n	8007488 <HAL_DMA_IRQHandler+0x678>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a29      	ldr	r2, [pc, #164]	@ (80074a8 <HAL_DMA_IRQHandler+0x698>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d040      	beq.n	8007488 <HAL_DMA_IRQHandler+0x678>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a28      	ldr	r2, [pc, #160]	@ (80074ac <HAL_DMA_IRQHandler+0x69c>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d03b      	beq.n	8007488 <HAL_DMA_IRQHandler+0x678>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a26      	ldr	r2, [pc, #152]	@ (80074b0 <HAL_DMA_IRQHandler+0x6a0>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d036      	beq.n	8007488 <HAL_DMA_IRQHandler+0x678>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a25      	ldr	r2, [pc, #148]	@ (80074b4 <HAL_DMA_IRQHandler+0x6a4>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d031      	beq.n	8007488 <HAL_DMA_IRQHandler+0x678>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a23      	ldr	r2, [pc, #140]	@ (80074b8 <HAL_DMA_IRQHandler+0x6a8>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d02c      	beq.n	8007488 <HAL_DMA_IRQHandler+0x678>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a22      	ldr	r2, [pc, #136]	@ (80074bc <HAL_DMA_IRQHandler+0x6ac>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d027      	beq.n	8007488 <HAL_DMA_IRQHandler+0x678>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a20      	ldr	r2, [pc, #128]	@ (80074c0 <HAL_DMA_IRQHandler+0x6b0>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d022      	beq.n	8007488 <HAL_DMA_IRQHandler+0x678>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a1f      	ldr	r2, [pc, #124]	@ (80074c4 <HAL_DMA_IRQHandler+0x6b4>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d01d      	beq.n	8007488 <HAL_DMA_IRQHandler+0x678>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a1d      	ldr	r2, [pc, #116]	@ (80074c8 <HAL_DMA_IRQHandler+0x6b8>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d018      	beq.n	8007488 <HAL_DMA_IRQHandler+0x678>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a1c      	ldr	r2, [pc, #112]	@ (80074cc <HAL_DMA_IRQHandler+0x6bc>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d013      	beq.n	8007488 <HAL_DMA_IRQHandler+0x678>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a1a      	ldr	r2, [pc, #104]	@ (80074d0 <HAL_DMA_IRQHandler+0x6c0>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d00e      	beq.n	8007488 <HAL_DMA_IRQHandler+0x678>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a19      	ldr	r2, [pc, #100]	@ (80074d4 <HAL_DMA_IRQHandler+0x6c4>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d009      	beq.n	8007488 <HAL_DMA_IRQHandler+0x678>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a17      	ldr	r2, [pc, #92]	@ (80074d8 <HAL_DMA_IRQHandler+0x6c8>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d004      	beq.n	8007488 <HAL_DMA_IRQHandler+0x678>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a16      	ldr	r2, [pc, #88]	@ (80074dc <HAL_DMA_IRQHandler+0x6cc>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d12b      	bne.n	80074e0 <HAL_DMA_IRQHandler+0x6d0>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f003 0310 	and.w	r3, r3, #16
 8007492:	2b00      	cmp	r3, #0
 8007494:	bf14      	ite	ne
 8007496:	2301      	movne	r3, #1
 8007498:	2300      	moveq	r3, #0
 800749a:	b2db      	uxtb	r3, r3
 800749c:	e02a      	b.n	80074f4 <HAL_DMA_IRQHandler+0x6e4>
 800749e:	bf00      	nop
 80074a0:	40020010 	.word	0x40020010
 80074a4:	40020028 	.word	0x40020028
 80074a8:	40020040 	.word	0x40020040
 80074ac:	40020058 	.word	0x40020058
 80074b0:	40020070 	.word	0x40020070
 80074b4:	40020088 	.word	0x40020088
 80074b8:	400200a0 	.word	0x400200a0
 80074bc:	400200b8 	.word	0x400200b8
 80074c0:	40020410 	.word	0x40020410
 80074c4:	40020428 	.word	0x40020428
 80074c8:	40020440 	.word	0x40020440
 80074cc:	40020458 	.word	0x40020458
 80074d0:	40020470 	.word	0x40020470
 80074d4:	40020488 	.word	0x40020488
 80074d8:	400204a0 	.word	0x400204a0
 80074dc:	400204b8 	.word	0x400204b8
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f003 0302 	and.w	r3, r3, #2
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	bf14      	ite	ne
 80074ee:	2301      	movne	r3, #1
 80074f0:	2300      	moveq	r3, #0
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f000 8087 	beq.w	8007608 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074fe:	f003 031f 	and.w	r3, r3, #31
 8007502:	2220      	movs	r2, #32
 8007504:	409a      	lsls	r2, r3
 8007506:	6a3b      	ldr	r3, [r7, #32]
 8007508:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007510:	b2db      	uxtb	r3, r3
 8007512:	2b04      	cmp	r3, #4
 8007514:	d139      	bne.n	800758a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f022 0216 	bic.w	r2, r2, #22
 8007524:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	695a      	ldr	r2, [r3, #20]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007534:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800753a:	2b00      	cmp	r3, #0
 800753c:	d103      	bne.n	8007546 <HAL_DMA_IRQHandler+0x736>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007542:	2b00      	cmp	r3, #0
 8007544:	d007      	beq.n	8007556 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f022 0208 	bic.w	r2, r2, #8
 8007554:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800755a:	f003 031f 	and.w	r3, r3, #31
 800755e:	223f      	movs	r2, #63	@ 0x3f
 8007560:	409a      	lsls	r2, r3
 8007562:	6a3b      	ldr	r3, [r7, #32]
 8007564:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800757a:	2b00      	cmp	r3, #0
 800757c:	f000 8382 	beq.w	8007c84 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	4798      	blx	r3
          }
          return;
 8007588:	e37c      	b.n	8007c84 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007594:	2b00      	cmp	r3, #0
 8007596:	d018      	beq.n	80075ca <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d108      	bne.n	80075b8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d02c      	beq.n	8007608 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	4798      	blx	r3
 80075b6:	e027      	b.n	8007608 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d023      	beq.n	8007608 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	4798      	blx	r3
 80075c8:	e01e      	b.n	8007608 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d10f      	bne.n	80075f8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f022 0210 	bic.w	r2, r2, #16
 80075e6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d003      	beq.n	8007608 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800760c:	2b00      	cmp	r3, #0
 800760e:	f000 833e 	beq.w	8007c8e <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007616:	f003 0301 	and.w	r3, r3, #1
 800761a:	2b00      	cmp	r3, #0
 800761c:	f000 8088 	beq.w	8007730 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2204      	movs	r2, #4
 8007624:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a89      	ldr	r2, [pc, #548]	@ (8007854 <HAL_DMA_IRQHandler+0xa44>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d04a      	beq.n	80076c8 <HAL_DMA_IRQHandler+0x8b8>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a88      	ldr	r2, [pc, #544]	@ (8007858 <HAL_DMA_IRQHandler+0xa48>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d045      	beq.n	80076c8 <HAL_DMA_IRQHandler+0x8b8>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a86      	ldr	r2, [pc, #536]	@ (800785c <HAL_DMA_IRQHandler+0xa4c>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d040      	beq.n	80076c8 <HAL_DMA_IRQHandler+0x8b8>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a85      	ldr	r2, [pc, #532]	@ (8007860 <HAL_DMA_IRQHandler+0xa50>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d03b      	beq.n	80076c8 <HAL_DMA_IRQHandler+0x8b8>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a83      	ldr	r2, [pc, #524]	@ (8007864 <HAL_DMA_IRQHandler+0xa54>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d036      	beq.n	80076c8 <HAL_DMA_IRQHandler+0x8b8>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a82      	ldr	r2, [pc, #520]	@ (8007868 <HAL_DMA_IRQHandler+0xa58>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d031      	beq.n	80076c8 <HAL_DMA_IRQHandler+0x8b8>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a80      	ldr	r2, [pc, #512]	@ (800786c <HAL_DMA_IRQHandler+0xa5c>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d02c      	beq.n	80076c8 <HAL_DMA_IRQHandler+0x8b8>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a7f      	ldr	r2, [pc, #508]	@ (8007870 <HAL_DMA_IRQHandler+0xa60>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d027      	beq.n	80076c8 <HAL_DMA_IRQHandler+0x8b8>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a7d      	ldr	r2, [pc, #500]	@ (8007874 <HAL_DMA_IRQHandler+0xa64>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d022      	beq.n	80076c8 <HAL_DMA_IRQHandler+0x8b8>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a7c      	ldr	r2, [pc, #496]	@ (8007878 <HAL_DMA_IRQHandler+0xa68>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d01d      	beq.n	80076c8 <HAL_DMA_IRQHandler+0x8b8>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a7a      	ldr	r2, [pc, #488]	@ (800787c <HAL_DMA_IRQHandler+0xa6c>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d018      	beq.n	80076c8 <HAL_DMA_IRQHandler+0x8b8>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a79      	ldr	r2, [pc, #484]	@ (8007880 <HAL_DMA_IRQHandler+0xa70>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d013      	beq.n	80076c8 <HAL_DMA_IRQHandler+0x8b8>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a77      	ldr	r2, [pc, #476]	@ (8007884 <HAL_DMA_IRQHandler+0xa74>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d00e      	beq.n	80076c8 <HAL_DMA_IRQHandler+0x8b8>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a76      	ldr	r2, [pc, #472]	@ (8007888 <HAL_DMA_IRQHandler+0xa78>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d009      	beq.n	80076c8 <HAL_DMA_IRQHandler+0x8b8>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a74      	ldr	r2, [pc, #464]	@ (800788c <HAL_DMA_IRQHandler+0xa7c>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d004      	beq.n	80076c8 <HAL_DMA_IRQHandler+0x8b8>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a73      	ldr	r2, [pc, #460]	@ (8007890 <HAL_DMA_IRQHandler+0xa80>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d108      	bne.n	80076da <HAL_DMA_IRQHandler+0x8ca>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f022 0201 	bic.w	r2, r2, #1
 80076d6:	601a      	str	r2, [r3, #0]
 80076d8:	e007      	b.n	80076ea <HAL_DMA_IRQHandler+0x8da>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f022 0201 	bic.w	r2, r2, #1
 80076e8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	3301      	adds	r3, #1
 80076ee:	60fb      	str	r3, [r7, #12]
 80076f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d307      	bcc.n	8007706 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 0301 	and.w	r3, r3, #1
 8007700:	2b00      	cmp	r3, #0
 8007702:	d1f2      	bne.n	80076ea <HAL_DMA_IRQHandler+0x8da>
 8007704:	e000      	b.n	8007708 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007706:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f003 0301 	and.w	r3, r3, #1
 8007712:	2b00      	cmp	r3, #0
 8007714:	d004      	beq.n	8007720 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2203      	movs	r2, #3
 800771a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800771e:	e003      	b.n	8007728 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007734:	2b00      	cmp	r3, #0
 8007736:	f000 82aa 	beq.w	8007c8e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	4798      	blx	r3
 8007742:	e2a4      	b.n	8007c8e <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a52      	ldr	r2, [pc, #328]	@ (8007894 <HAL_DMA_IRQHandler+0xa84>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d04a      	beq.n	80077e4 <HAL_DMA_IRQHandler+0x9d4>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a51      	ldr	r2, [pc, #324]	@ (8007898 <HAL_DMA_IRQHandler+0xa88>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d045      	beq.n	80077e4 <HAL_DMA_IRQHandler+0x9d4>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a4f      	ldr	r2, [pc, #316]	@ (800789c <HAL_DMA_IRQHandler+0xa8c>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d040      	beq.n	80077e4 <HAL_DMA_IRQHandler+0x9d4>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a4e      	ldr	r2, [pc, #312]	@ (80078a0 <HAL_DMA_IRQHandler+0xa90>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d03b      	beq.n	80077e4 <HAL_DMA_IRQHandler+0x9d4>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a4c      	ldr	r2, [pc, #304]	@ (80078a4 <HAL_DMA_IRQHandler+0xa94>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d036      	beq.n	80077e4 <HAL_DMA_IRQHandler+0x9d4>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a4b      	ldr	r2, [pc, #300]	@ (80078a8 <HAL_DMA_IRQHandler+0xa98>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d031      	beq.n	80077e4 <HAL_DMA_IRQHandler+0x9d4>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a49      	ldr	r2, [pc, #292]	@ (80078ac <HAL_DMA_IRQHandler+0xa9c>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d02c      	beq.n	80077e4 <HAL_DMA_IRQHandler+0x9d4>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a48      	ldr	r2, [pc, #288]	@ (80078b0 <HAL_DMA_IRQHandler+0xaa0>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d027      	beq.n	80077e4 <HAL_DMA_IRQHandler+0x9d4>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a46      	ldr	r2, [pc, #280]	@ (80078b4 <HAL_DMA_IRQHandler+0xaa4>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d022      	beq.n	80077e4 <HAL_DMA_IRQHandler+0x9d4>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a45      	ldr	r2, [pc, #276]	@ (80078b8 <HAL_DMA_IRQHandler+0xaa8>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d01d      	beq.n	80077e4 <HAL_DMA_IRQHandler+0x9d4>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a43      	ldr	r2, [pc, #268]	@ (80078bc <HAL_DMA_IRQHandler+0xaac>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d018      	beq.n	80077e4 <HAL_DMA_IRQHandler+0x9d4>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a42      	ldr	r2, [pc, #264]	@ (80078c0 <HAL_DMA_IRQHandler+0xab0>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d013      	beq.n	80077e4 <HAL_DMA_IRQHandler+0x9d4>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a40      	ldr	r2, [pc, #256]	@ (80078c4 <HAL_DMA_IRQHandler+0xab4>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d00e      	beq.n	80077e4 <HAL_DMA_IRQHandler+0x9d4>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a3f      	ldr	r2, [pc, #252]	@ (80078c8 <HAL_DMA_IRQHandler+0xab8>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d009      	beq.n	80077e4 <HAL_DMA_IRQHandler+0x9d4>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a3d      	ldr	r2, [pc, #244]	@ (80078cc <HAL_DMA_IRQHandler+0xabc>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d004      	beq.n	80077e4 <HAL_DMA_IRQHandler+0x9d4>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a3c      	ldr	r2, [pc, #240]	@ (80078d0 <HAL_DMA_IRQHandler+0xac0>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d101      	bne.n	80077e8 <HAL_DMA_IRQHandler+0x9d8>
 80077e4:	2301      	movs	r3, #1
 80077e6:	e000      	b.n	80077ea <HAL_DMA_IRQHandler+0x9da>
 80077e8:	2300      	movs	r3, #0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	f000 824f 	beq.w	8007c8e <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077fc:	f003 031f 	and.w	r3, r3, #31
 8007800:	2204      	movs	r2, #4
 8007802:	409a      	lsls	r2, r3
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	4013      	ands	r3, r2
 8007808:	2b00      	cmp	r3, #0
 800780a:	f000 80dd 	beq.w	80079c8 <HAL_DMA_IRQHandler+0xbb8>
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	f003 0304 	and.w	r3, r3, #4
 8007814:	2b00      	cmp	r3, #0
 8007816:	f000 80d7 	beq.w	80079c8 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800781e:	f003 031f 	and.w	r3, r3, #31
 8007822:	2204      	movs	r2, #4
 8007824:	409a      	lsls	r2, r3
 8007826:	69fb      	ldr	r3, [r7, #28]
 8007828:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007830:	2b00      	cmp	r3, #0
 8007832:	d059      	beq.n	80078e8 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800783a:	2b00      	cmp	r3, #0
 800783c:	d14a      	bne.n	80078d4 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007842:	2b00      	cmp	r3, #0
 8007844:	f000 8220 	beq.w	8007c88 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007850:	e21a      	b.n	8007c88 <HAL_DMA_IRQHandler+0xe78>
 8007852:	bf00      	nop
 8007854:	40020010 	.word	0x40020010
 8007858:	40020028 	.word	0x40020028
 800785c:	40020040 	.word	0x40020040
 8007860:	40020058 	.word	0x40020058
 8007864:	40020070 	.word	0x40020070
 8007868:	40020088 	.word	0x40020088
 800786c:	400200a0 	.word	0x400200a0
 8007870:	400200b8 	.word	0x400200b8
 8007874:	40020410 	.word	0x40020410
 8007878:	40020428 	.word	0x40020428
 800787c:	40020440 	.word	0x40020440
 8007880:	40020458 	.word	0x40020458
 8007884:	40020470 	.word	0x40020470
 8007888:	40020488 	.word	0x40020488
 800788c:	400204a0 	.word	0x400204a0
 8007890:	400204b8 	.word	0x400204b8
 8007894:	48022c08 	.word	0x48022c08
 8007898:	48022c1c 	.word	0x48022c1c
 800789c:	48022c30 	.word	0x48022c30
 80078a0:	48022c44 	.word	0x48022c44
 80078a4:	48022c58 	.word	0x48022c58
 80078a8:	48022c6c 	.word	0x48022c6c
 80078ac:	48022c80 	.word	0x48022c80
 80078b0:	48022c94 	.word	0x48022c94
 80078b4:	58025408 	.word	0x58025408
 80078b8:	5802541c 	.word	0x5802541c
 80078bc:	58025430 	.word	0x58025430
 80078c0:	58025444 	.word	0x58025444
 80078c4:	58025458 	.word	0x58025458
 80078c8:	5802546c 	.word	0x5802546c
 80078cc:	58025480 	.word	0x58025480
 80078d0:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078d8:	2b00      	cmp	r3, #0
 80078da:	f000 81d5 	beq.w	8007c88 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80078e6:	e1cf      	b.n	8007c88 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	f003 0320 	and.w	r3, r3, #32
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d160      	bne.n	80079b4 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a7f      	ldr	r2, [pc, #508]	@ (8007af4 <HAL_DMA_IRQHandler+0xce4>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d04a      	beq.n	8007992 <HAL_DMA_IRQHandler+0xb82>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a7d      	ldr	r2, [pc, #500]	@ (8007af8 <HAL_DMA_IRQHandler+0xce8>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d045      	beq.n	8007992 <HAL_DMA_IRQHandler+0xb82>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a7c      	ldr	r2, [pc, #496]	@ (8007afc <HAL_DMA_IRQHandler+0xcec>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d040      	beq.n	8007992 <HAL_DMA_IRQHandler+0xb82>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a7a      	ldr	r2, [pc, #488]	@ (8007b00 <HAL_DMA_IRQHandler+0xcf0>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d03b      	beq.n	8007992 <HAL_DMA_IRQHandler+0xb82>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a79      	ldr	r2, [pc, #484]	@ (8007b04 <HAL_DMA_IRQHandler+0xcf4>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d036      	beq.n	8007992 <HAL_DMA_IRQHandler+0xb82>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a77      	ldr	r2, [pc, #476]	@ (8007b08 <HAL_DMA_IRQHandler+0xcf8>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d031      	beq.n	8007992 <HAL_DMA_IRQHandler+0xb82>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a76      	ldr	r2, [pc, #472]	@ (8007b0c <HAL_DMA_IRQHandler+0xcfc>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d02c      	beq.n	8007992 <HAL_DMA_IRQHandler+0xb82>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a74      	ldr	r2, [pc, #464]	@ (8007b10 <HAL_DMA_IRQHandler+0xd00>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d027      	beq.n	8007992 <HAL_DMA_IRQHandler+0xb82>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a73      	ldr	r2, [pc, #460]	@ (8007b14 <HAL_DMA_IRQHandler+0xd04>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d022      	beq.n	8007992 <HAL_DMA_IRQHandler+0xb82>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a71      	ldr	r2, [pc, #452]	@ (8007b18 <HAL_DMA_IRQHandler+0xd08>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d01d      	beq.n	8007992 <HAL_DMA_IRQHandler+0xb82>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a70      	ldr	r2, [pc, #448]	@ (8007b1c <HAL_DMA_IRQHandler+0xd0c>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d018      	beq.n	8007992 <HAL_DMA_IRQHandler+0xb82>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a6e      	ldr	r2, [pc, #440]	@ (8007b20 <HAL_DMA_IRQHandler+0xd10>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d013      	beq.n	8007992 <HAL_DMA_IRQHandler+0xb82>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a6d      	ldr	r2, [pc, #436]	@ (8007b24 <HAL_DMA_IRQHandler+0xd14>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d00e      	beq.n	8007992 <HAL_DMA_IRQHandler+0xb82>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a6b      	ldr	r2, [pc, #428]	@ (8007b28 <HAL_DMA_IRQHandler+0xd18>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d009      	beq.n	8007992 <HAL_DMA_IRQHandler+0xb82>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a6a      	ldr	r2, [pc, #424]	@ (8007b2c <HAL_DMA_IRQHandler+0xd1c>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d004      	beq.n	8007992 <HAL_DMA_IRQHandler+0xb82>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a68      	ldr	r2, [pc, #416]	@ (8007b30 <HAL_DMA_IRQHandler+0xd20>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d108      	bne.n	80079a4 <HAL_DMA_IRQHandler+0xb94>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f022 0208 	bic.w	r2, r2, #8
 80079a0:	601a      	str	r2, [r3, #0]
 80079a2:	e007      	b.n	80079b4 <HAL_DMA_IRQHandler+0xba4>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f022 0204 	bic.w	r2, r2, #4
 80079b2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f000 8165 	beq.w	8007c88 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079c6:	e15f      	b.n	8007c88 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079cc:	f003 031f 	and.w	r3, r3, #31
 80079d0:	2202      	movs	r2, #2
 80079d2:	409a      	lsls	r2, r3
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	4013      	ands	r3, r2
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f000 80c5 	beq.w	8007b68 <HAL_DMA_IRQHandler+0xd58>
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	f003 0302 	and.w	r3, r3, #2
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	f000 80bf 	beq.w	8007b68 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079ee:	f003 031f 	and.w	r3, r3, #31
 80079f2:	2202      	movs	r2, #2
 80079f4:	409a      	lsls	r2, r3
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d018      	beq.n	8007a36 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d109      	bne.n	8007a22 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	f000 813a 	beq.w	8007c8c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a20:	e134      	b.n	8007c8c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	f000 8130 	beq.w	8007c8c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a34:	e12a      	b.n	8007c8c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	f003 0320 	and.w	r3, r3, #32
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	f040 8089 	bne.w	8007b54 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a2b      	ldr	r2, [pc, #172]	@ (8007af4 <HAL_DMA_IRQHandler+0xce4>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d04a      	beq.n	8007ae2 <HAL_DMA_IRQHandler+0xcd2>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a29      	ldr	r2, [pc, #164]	@ (8007af8 <HAL_DMA_IRQHandler+0xce8>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d045      	beq.n	8007ae2 <HAL_DMA_IRQHandler+0xcd2>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a28      	ldr	r2, [pc, #160]	@ (8007afc <HAL_DMA_IRQHandler+0xcec>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d040      	beq.n	8007ae2 <HAL_DMA_IRQHandler+0xcd2>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a26      	ldr	r2, [pc, #152]	@ (8007b00 <HAL_DMA_IRQHandler+0xcf0>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d03b      	beq.n	8007ae2 <HAL_DMA_IRQHandler+0xcd2>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a25      	ldr	r2, [pc, #148]	@ (8007b04 <HAL_DMA_IRQHandler+0xcf4>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d036      	beq.n	8007ae2 <HAL_DMA_IRQHandler+0xcd2>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a23      	ldr	r2, [pc, #140]	@ (8007b08 <HAL_DMA_IRQHandler+0xcf8>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d031      	beq.n	8007ae2 <HAL_DMA_IRQHandler+0xcd2>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a22      	ldr	r2, [pc, #136]	@ (8007b0c <HAL_DMA_IRQHandler+0xcfc>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d02c      	beq.n	8007ae2 <HAL_DMA_IRQHandler+0xcd2>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a20      	ldr	r2, [pc, #128]	@ (8007b10 <HAL_DMA_IRQHandler+0xd00>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d027      	beq.n	8007ae2 <HAL_DMA_IRQHandler+0xcd2>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a1f      	ldr	r2, [pc, #124]	@ (8007b14 <HAL_DMA_IRQHandler+0xd04>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d022      	beq.n	8007ae2 <HAL_DMA_IRQHandler+0xcd2>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a1d      	ldr	r2, [pc, #116]	@ (8007b18 <HAL_DMA_IRQHandler+0xd08>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d01d      	beq.n	8007ae2 <HAL_DMA_IRQHandler+0xcd2>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a1c      	ldr	r2, [pc, #112]	@ (8007b1c <HAL_DMA_IRQHandler+0xd0c>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d018      	beq.n	8007ae2 <HAL_DMA_IRQHandler+0xcd2>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a1a      	ldr	r2, [pc, #104]	@ (8007b20 <HAL_DMA_IRQHandler+0xd10>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d013      	beq.n	8007ae2 <HAL_DMA_IRQHandler+0xcd2>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a19      	ldr	r2, [pc, #100]	@ (8007b24 <HAL_DMA_IRQHandler+0xd14>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d00e      	beq.n	8007ae2 <HAL_DMA_IRQHandler+0xcd2>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a17      	ldr	r2, [pc, #92]	@ (8007b28 <HAL_DMA_IRQHandler+0xd18>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d009      	beq.n	8007ae2 <HAL_DMA_IRQHandler+0xcd2>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a16      	ldr	r2, [pc, #88]	@ (8007b2c <HAL_DMA_IRQHandler+0xd1c>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d004      	beq.n	8007ae2 <HAL_DMA_IRQHandler+0xcd2>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a14      	ldr	r2, [pc, #80]	@ (8007b30 <HAL_DMA_IRQHandler+0xd20>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d128      	bne.n	8007b34 <HAL_DMA_IRQHandler+0xd24>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f022 0214 	bic.w	r2, r2, #20
 8007af0:	601a      	str	r2, [r3, #0]
 8007af2:	e027      	b.n	8007b44 <HAL_DMA_IRQHandler+0xd34>
 8007af4:	40020010 	.word	0x40020010
 8007af8:	40020028 	.word	0x40020028
 8007afc:	40020040 	.word	0x40020040
 8007b00:	40020058 	.word	0x40020058
 8007b04:	40020070 	.word	0x40020070
 8007b08:	40020088 	.word	0x40020088
 8007b0c:	400200a0 	.word	0x400200a0
 8007b10:	400200b8 	.word	0x400200b8
 8007b14:	40020410 	.word	0x40020410
 8007b18:	40020428 	.word	0x40020428
 8007b1c:	40020440 	.word	0x40020440
 8007b20:	40020458 	.word	0x40020458
 8007b24:	40020470 	.word	0x40020470
 8007b28:	40020488 	.word	0x40020488
 8007b2c:	400204a0 	.word	0x400204a0
 8007b30:	400204b8 	.word	0x400204b8
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f022 020a 	bic.w	r2, r2, #10
 8007b42:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f000 8097 	beq.w	8007c8c <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b66:	e091      	b.n	8007c8c <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b6c:	f003 031f 	and.w	r3, r3, #31
 8007b70:	2208      	movs	r2, #8
 8007b72:	409a      	lsls	r2, r3
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	4013      	ands	r3, r2
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	f000 8088 	beq.w	8007c8e <HAL_DMA_IRQHandler+0xe7e>
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	f003 0308 	and.w	r3, r3, #8
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	f000 8082 	beq.w	8007c8e <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a41      	ldr	r2, [pc, #260]	@ (8007c94 <HAL_DMA_IRQHandler+0xe84>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d04a      	beq.n	8007c2a <HAL_DMA_IRQHandler+0xe1a>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a3f      	ldr	r2, [pc, #252]	@ (8007c98 <HAL_DMA_IRQHandler+0xe88>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d045      	beq.n	8007c2a <HAL_DMA_IRQHandler+0xe1a>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a3e      	ldr	r2, [pc, #248]	@ (8007c9c <HAL_DMA_IRQHandler+0xe8c>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d040      	beq.n	8007c2a <HAL_DMA_IRQHandler+0xe1a>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a3c      	ldr	r2, [pc, #240]	@ (8007ca0 <HAL_DMA_IRQHandler+0xe90>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d03b      	beq.n	8007c2a <HAL_DMA_IRQHandler+0xe1a>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a3b      	ldr	r2, [pc, #236]	@ (8007ca4 <HAL_DMA_IRQHandler+0xe94>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d036      	beq.n	8007c2a <HAL_DMA_IRQHandler+0xe1a>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a39      	ldr	r2, [pc, #228]	@ (8007ca8 <HAL_DMA_IRQHandler+0xe98>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d031      	beq.n	8007c2a <HAL_DMA_IRQHandler+0xe1a>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a38      	ldr	r2, [pc, #224]	@ (8007cac <HAL_DMA_IRQHandler+0xe9c>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d02c      	beq.n	8007c2a <HAL_DMA_IRQHandler+0xe1a>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a36      	ldr	r2, [pc, #216]	@ (8007cb0 <HAL_DMA_IRQHandler+0xea0>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d027      	beq.n	8007c2a <HAL_DMA_IRQHandler+0xe1a>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a35      	ldr	r2, [pc, #212]	@ (8007cb4 <HAL_DMA_IRQHandler+0xea4>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d022      	beq.n	8007c2a <HAL_DMA_IRQHandler+0xe1a>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a33      	ldr	r2, [pc, #204]	@ (8007cb8 <HAL_DMA_IRQHandler+0xea8>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d01d      	beq.n	8007c2a <HAL_DMA_IRQHandler+0xe1a>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a32      	ldr	r2, [pc, #200]	@ (8007cbc <HAL_DMA_IRQHandler+0xeac>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d018      	beq.n	8007c2a <HAL_DMA_IRQHandler+0xe1a>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a30      	ldr	r2, [pc, #192]	@ (8007cc0 <HAL_DMA_IRQHandler+0xeb0>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d013      	beq.n	8007c2a <HAL_DMA_IRQHandler+0xe1a>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a2f      	ldr	r2, [pc, #188]	@ (8007cc4 <HAL_DMA_IRQHandler+0xeb4>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d00e      	beq.n	8007c2a <HAL_DMA_IRQHandler+0xe1a>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a2d      	ldr	r2, [pc, #180]	@ (8007cc8 <HAL_DMA_IRQHandler+0xeb8>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d009      	beq.n	8007c2a <HAL_DMA_IRQHandler+0xe1a>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a2c      	ldr	r2, [pc, #176]	@ (8007ccc <HAL_DMA_IRQHandler+0xebc>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d004      	beq.n	8007c2a <HAL_DMA_IRQHandler+0xe1a>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a2a      	ldr	r2, [pc, #168]	@ (8007cd0 <HAL_DMA_IRQHandler+0xec0>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d108      	bne.n	8007c3c <HAL_DMA_IRQHandler+0xe2c>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f022 021c 	bic.w	r2, r2, #28
 8007c38:	601a      	str	r2, [r3, #0]
 8007c3a:	e007      	b.n	8007c4c <HAL_DMA_IRQHandler+0xe3c>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f022 020e 	bic.w	r2, r2, #14
 8007c4a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c50:	f003 031f 	and.w	r3, r3, #31
 8007c54:	2201      	movs	r2, #1
 8007c56:	409a      	lsls	r2, r3
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2201      	movs	r2, #1
 8007c66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d009      	beq.n	8007c8e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	4798      	blx	r3
 8007c82:	e004      	b.n	8007c8e <HAL_DMA_IRQHandler+0xe7e>
          return;
 8007c84:	bf00      	nop
 8007c86:	e002      	b.n	8007c8e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c88:	bf00      	nop
 8007c8a:	e000      	b.n	8007c8e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c8c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007c8e:	3728      	adds	r7, #40	@ 0x28
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	40020010 	.word	0x40020010
 8007c98:	40020028 	.word	0x40020028
 8007c9c:	40020040 	.word	0x40020040
 8007ca0:	40020058 	.word	0x40020058
 8007ca4:	40020070 	.word	0x40020070
 8007ca8:	40020088 	.word	0x40020088
 8007cac:	400200a0 	.word	0x400200a0
 8007cb0:	400200b8 	.word	0x400200b8
 8007cb4:	40020410 	.word	0x40020410
 8007cb8:	40020428 	.word	0x40020428
 8007cbc:	40020440 	.word	0x40020440
 8007cc0:	40020458 	.word	0x40020458
 8007cc4:	40020470 	.word	0x40020470
 8007cc8:	40020488 	.word	0x40020488
 8007ccc:	400204a0 	.word	0x400204a0
 8007cd0:	400204b8 	.word	0x400204b8

08007cd4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b087      	sub	sp, #28
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	60b9      	str	r1, [r7, #8]
 8007cf6:	607a      	str	r2, [r7, #4]
 8007cf8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cfe:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d04:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a7f      	ldr	r2, [pc, #508]	@ (8007f08 <DMA_SetConfig+0x21c>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d072      	beq.n	8007df6 <DMA_SetConfig+0x10a>
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a7d      	ldr	r2, [pc, #500]	@ (8007f0c <DMA_SetConfig+0x220>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d06d      	beq.n	8007df6 <DMA_SetConfig+0x10a>
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a7c      	ldr	r2, [pc, #496]	@ (8007f10 <DMA_SetConfig+0x224>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d068      	beq.n	8007df6 <DMA_SetConfig+0x10a>
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a7a      	ldr	r2, [pc, #488]	@ (8007f14 <DMA_SetConfig+0x228>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d063      	beq.n	8007df6 <DMA_SetConfig+0x10a>
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a79      	ldr	r2, [pc, #484]	@ (8007f18 <DMA_SetConfig+0x22c>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d05e      	beq.n	8007df6 <DMA_SetConfig+0x10a>
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a77      	ldr	r2, [pc, #476]	@ (8007f1c <DMA_SetConfig+0x230>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d059      	beq.n	8007df6 <DMA_SetConfig+0x10a>
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a76      	ldr	r2, [pc, #472]	@ (8007f20 <DMA_SetConfig+0x234>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d054      	beq.n	8007df6 <DMA_SetConfig+0x10a>
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a74      	ldr	r2, [pc, #464]	@ (8007f24 <DMA_SetConfig+0x238>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d04f      	beq.n	8007df6 <DMA_SetConfig+0x10a>
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a73      	ldr	r2, [pc, #460]	@ (8007f28 <DMA_SetConfig+0x23c>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d04a      	beq.n	8007df6 <DMA_SetConfig+0x10a>
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a71      	ldr	r2, [pc, #452]	@ (8007f2c <DMA_SetConfig+0x240>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d045      	beq.n	8007df6 <DMA_SetConfig+0x10a>
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a70      	ldr	r2, [pc, #448]	@ (8007f30 <DMA_SetConfig+0x244>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d040      	beq.n	8007df6 <DMA_SetConfig+0x10a>
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a6e      	ldr	r2, [pc, #440]	@ (8007f34 <DMA_SetConfig+0x248>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d03b      	beq.n	8007df6 <DMA_SetConfig+0x10a>
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a6d      	ldr	r2, [pc, #436]	@ (8007f38 <DMA_SetConfig+0x24c>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d036      	beq.n	8007df6 <DMA_SetConfig+0x10a>
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a6b      	ldr	r2, [pc, #428]	@ (8007f3c <DMA_SetConfig+0x250>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d031      	beq.n	8007df6 <DMA_SetConfig+0x10a>
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a6a      	ldr	r2, [pc, #424]	@ (8007f40 <DMA_SetConfig+0x254>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d02c      	beq.n	8007df6 <DMA_SetConfig+0x10a>
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a68      	ldr	r2, [pc, #416]	@ (8007f44 <DMA_SetConfig+0x258>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d027      	beq.n	8007df6 <DMA_SetConfig+0x10a>
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a67      	ldr	r2, [pc, #412]	@ (8007f48 <DMA_SetConfig+0x25c>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d022      	beq.n	8007df6 <DMA_SetConfig+0x10a>
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a65      	ldr	r2, [pc, #404]	@ (8007f4c <DMA_SetConfig+0x260>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d01d      	beq.n	8007df6 <DMA_SetConfig+0x10a>
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a64      	ldr	r2, [pc, #400]	@ (8007f50 <DMA_SetConfig+0x264>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d018      	beq.n	8007df6 <DMA_SetConfig+0x10a>
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a62      	ldr	r2, [pc, #392]	@ (8007f54 <DMA_SetConfig+0x268>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d013      	beq.n	8007df6 <DMA_SetConfig+0x10a>
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a61      	ldr	r2, [pc, #388]	@ (8007f58 <DMA_SetConfig+0x26c>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d00e      	beq.n	8007df6 <DMA_SetConfig+0x10a>
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a5f      	ldr	r2, [pc, #380]	@ (8007f5c <DMA_SetConfig+0x270>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d009      	beq.n	8007df6 <DMA_SetConfig+0x10a>
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a5e      	ldr	r2, [pc, #376]	@ (8007f60 <DMA_SetConfig+0x274>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d004      	beq.n	8007df6 <DMA_SetConfig+0x10a>
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a5c      	ldr	r2, [pc, #368]	@ (8007f64 <DMA_SetConfig+0x278>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d101      	bne.n	8007dfa <DMA_SetConfig+0x10e>
 8007df6:	2301      	movs	r3, #1
 8007df8:	e000      	b.n	8007dfc <DMA_SetConfig+0x110>
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d00d      	beq.n	8007e1c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e04:	68fa      	ldr	r2, [r7, #12]
 8007e06:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007e08:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d004      	beq.n	8007e1c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e16:	68fa      	ldr	r2, [r7, #12]
 8007e18:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007e1a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a39      	ldr	r2, [pc, #228]	@ (8007f08 <DMA_SetConfig+0x21c>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d04a      	beq.n	8007ebc <DMA_SetConfig+0x1d0>
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a38      	ldr	r2, [pc, #224]	@ (8007f0c <DMA_SetConfig+0x220>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d045      	beq.n	8007ebc <DMA_SetConfig+0x1d0>
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a36      	ldr	r2, [pc, #216]	@ (8007f10 <DMA_SetConfig+0x224>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d040      	beq.n	8007ebc <DMA_SetConfig+0x1d0>
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a35      	ldr	r2, [pc, #212]	@ (8007f14 <DMA_SetConfig+0x228>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d03b      	beq.n	8007ebc <DMA_SetConfig+0x1d0>
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a33      	ldr	r2, [pc, #204]	@ (8007f18 <DMA_SetConfig+0x22c>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d036      	beq.n	8007ebc <DMA_SetConfig+0x1d0>
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a32      	ldr	r2, [pc, #200]	@ (8007f1c <DMA_SetConfig+0x230>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d031      	beq.n	8007ebc <DMA_SetConfig+0x1d0>
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a30      	ldr	r2, [pc, #192]	@ (8007f20 <DMA_SetConfig+0x234>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d02c      	beq.n	8007ebc <DMA_SetConfig+0x1d0>
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a2f      	ldr	r2, [pc, #188]	@ (8007f24 <DMA_SetConfig+0x238>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d027      	beq.n	8007ebc <DMA_SetConfig+0x1d0>
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a2d      	ldr	r2, [pc, #180]	@ (8007f28 <DMA_SetConfig+0x23c>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d022      	beq.n	8007ebc <DMA_SetConfig+0x1d0>
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a2c      	ldr	r2, [pc, #176]	@ (8007f2c <DMA_SetConfig+0x240>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d01d      	beq.n	8007ebc <DMA_SetConfig+0x1d0>
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a2a      	ldr	r2, [pc, #168]	@ (8007f30 <DMA_SetConfig+0x244>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d018      	beq.n	8007ebc <DMA_SetConfig+0x1d0>
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a29      	ldr	r2, [pc, #164]	@ (8007f34 <DMA_SetConfig+0x248>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d013      	beq.n	8007ebc <DMA_SetConfig+0x1d0>
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a27      	ldr	r2, [pc, #156]	@ (8007f38 <DMA_SetConfig+0x24c>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d00e      	beq.n	8007ebc <DMA_SetConfig+0x1d0>
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a26      	ldr	r2, [pc, #152]	@ (8007f3c <DMA_SetConfig+0x250>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d009      	beq.n	8007ebc <DMA_SetConfig+0x1d0>
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a24      	ldr	r2, [pc, #144]	@ (8007f40 <DMA_SetConfig+0x254>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d004      	beq.n	8007ebc <DMA_SetConfig+0x1d0>
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a23      	ldr	r2, [pc, #140]	@ (8007f44 <DMA_SetConfig+0x258>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d101      	bne.n	8007ec0 <DMA_SetConfig+0x1d4>
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e000      	b.n	8007ec2 <DMA_SetConfig+0x1d6>
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d059      	beq.n	8007f7a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007eca:	f003 031f 	and.w	r3, r3, #31
 8007ece:	223f      	movs	r2, #63	@ 0x3f
 8007ed0:	409a      	lsls	r2, r3
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007ee4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	683a      	ldr	r2, [r7, #0]
 8007eec:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	2b40      	cmp	r3, #64	@ 0x40
 8007ef4:	d138      	bne.n	8007f68 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	68ba      	ldr	r2, [r7, #8]
 8007f04:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007f06:	e0ae      	b.n	8008066 <DMA_SetConfig+0x37a>
 8007f08:	40020010 	.word	0x40020010
 8007f0c:	40020028 	.word	0x40020028
 8007f10:	40020040 	.word	0x40020040
 8007f14:	40020058 	.word	0x40020058
 8007f18:	40020070 	.word	0x40020070
 8007f1c:	40020088 	.word	0x40020088
 8007f20:	400200a0 	.word	0x400200a0
 8007f24:	400200b8 	.word	0x400200b8
 8007f28:	40020410 	.word	0x40020410
 8007f2c:	40020428 	.word	0x40020428
 8007f30:	40020440 	.word	0x40020440
 8007f34:	40020458 	.word	0x40020458
 8007f38:	40020470 	.word	0x40020470
 8007f3c:	40020488 	.word	0x40020488
 8007f40:	400204a0 	.word	0x400204a0
 8007f44:	400204b8 	.word	0x400204b8
 8007f48:	58025408 	.word	0x58025408
 8007f4c:	5802541c 	.word	0x5802541c
 8007f50:	58025430 	.word	0x58025430
 8007f54:	58025444 	.word	0x58025444
 8007f58:	58025458 	.word	0x58025458
 8007f5c:	5802546c 	.word	0x5802546c
 8007f60:	58025480 	.word	0x58025480
 8007f64:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	68ba      	ldr	r2, [r7, #8]
 8007f6e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	60da      	str	r2, [r3, #12]
}
 8007f78:	e075      	b.n	8008066 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a3d      	ldr	r2, [pc, #244]	@ (8008074 <DMA_SetConfig+0x388>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d04a      	beq.n	800801a <DMA_SetConfig+0x32e>
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a3b      	ldr	r2, [pc, #236]	@ (8008078 <DMA_SetConfig+0x38c>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d045      	beq.n	800801a <DMA_SetConfig+0x32e>
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a3a      	ldr	r2, [pc, #232]	@ (800807c <DMA_SetConfig+0x390>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d040      	beq.n	800801a <DMA_SetConfig+0x32e>
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a38      	ldr	r2, [pc, #224]	@ (8008080 <DMA_SetConfig+0x394>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d03b      	beq.n	800801a <DMA_SetConfig+0x32e>
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a37      	ldr	r2, [pc, #220]	@ (8008084 <DMA_SetConfig+0x398>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d036      	beq.n	800801a <DMA_SetConfig+0x32e>
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a35      	ldr	r2, [pc, #212]	@ (8008088 <DMA_SetConfig+0x39c>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d031      	beq.n	800801a <DMA_SetConfig+0x32e>
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a34      	ldr	r2, [pc, #208]	@ (800808c <DMA_SetConfig+0x3a0>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d02c      	beq.n	800801a <DMA_SetConfig+0x32e>
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a32      	ldr	r2, [pc, #200]	@ (8008090 <DMA_SetConfig+0x3a4>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d027      	beq.n	800801a <DMA_SetConfig+0x32e>
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a31      	ldr	r2, [pc, #196]	@ (8008094 <DMA_SetConfig+0x3a8>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d022      	beq.n	800801a <DMA_SetConfig+0x32e>
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a2f      	ldr	r2, [pc, #188]	@ (8008098 <DMA_SetConfig+0x3ac>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d01d      	beq.n	800801a <DMA_SetConfig+0x32e>
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a2e      	ldr	r2, [pc, #184]	@ (800809c <DMA_SetConfig+0x3b0>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d018      	beq.n	800801a <DMA_SetConfig+0x32e>
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a2c      	ldr	r2, [pc, #176]	@ (80080a0 <DMA_SetConfig+0x3b4>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d013      	beq.n	800801a <DMA_SetConfig+0x32e>
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a2b      	ldr	r2, [pc, #172]	@ (80080a4 <DMA_SetConfig+0x3b8>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d00e      	beq.n	800801a <DMA_SetConfig+0x32e>
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a29      	ldr	r2, [pc, #164]	@ (80080a8 <DMA_SetConfig+0x3bc>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d009      	beq.n	800801a <DMA_SetConfig+0x32e>
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a28      	ldr	r2, [pc, #160]	@ (80080ac <DMA_SetConfig+0x3c0>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d004      	beq.n	800801a <DMA_SetConfig+0x32e>
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a26      	ldr	r2, [pc, #152]	@ (80080b0 <DMA_SetConfig+0x3c4>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d101      	bne.n	800801e <DMA_SetConfig+0x332>
 800801a:	2301      	movs	r3, #1
 800801c:	e000      	b.n	8008020 <DMA_SetConfig+0x334>
 800801e:	2300      	movs	r3, #0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d020      	beq.n	8008066 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008028:	f003 031f 	and.w	r3, r3, #31
 800802c:	2201      	movs	r2, #1
 800802e:	409a      	lsls	r2, r3
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	683a      	ldr	r2, [r7, #0]
 800803a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	2b40      	cmp	r3, #64	@ 0x40
 8008042:	d108      	bne.n	8008056 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	68ba      	ldr	r2, [r7, #8]
 8008052:	60da      	str	r2, [r3, #12]
}
 8008054:	e007      	b.n	8008066 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	68ba      	ldr	r2, [r7, #8]
 800805c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	60da      	str	r2, [r3, #12]
}
 8008066:	bf00      	nop
 8008068:	371c      	adds	r7, #28
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	48022c08 	.word	0x48022c08
 8008078:	48022c1c 	.word	0x48022c1c
 800807c:	48022c30 	.word	0x48022c30
 8008080:	48022c44 	.word	0x48022c44
 8008084:	48022c58 	.word	0x48022c58
 8008088:	48022c6c 	.word	0x48022c6c
 800808c:	48022c80 	.word	0x48022c80
 8008090:	48022c94 	.word	0x48022c94
 8008094:	58025408 	.word	0x58025408
 8008098:	5802541c 	.word	0x5802541c
 800809c:	58025430 	.word	0x58025430
 80080a0:	58025444 	.word	0x58025444
 80080a4:	58025458 	.word	0x58025458
 80080a8:	5802546c 	.word	0x5802546c
 80080ac:	58025480 	.word	0x58025480
 80080b0:	58025494 	.word	0x58025494

080080b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b085      	sub	sp, #20
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a42      	ldr	r2, [pc, #264]	@ (80081cc <DMA_CalcBaseAndBitshift+0x118>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d04a      	beq.n	800815c <DMA_CalcBaseAndBitshift+0xa8>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a41      	ldr	r2, [pc, #260]	@ (80081d0 <DMA_CalcBaseAndBitshift+0x11c>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d045      	beq.n	800815c <DMA_CalcBaseAndBitshift+0xa8>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a3f      	ldr	r2, [pc, #252]	@ (80081d4 <DMA_CalcBaseAndBitshift+0x120>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d040      	beq.n	800815c <DMA_CalcBaseAndBitshift+0xa8>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a3e      	ldr	r2, [pc, #248]	@ (80081d8 <DMA_CalcBaseAndBitshift+0x124>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d03b      	beq.n	800815c <DMA_CalcBaseAndBitshift+0xa8>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a3c      	ldr	r2, [pc, #240]	@ (80081dc <DMA_CalcBaseAndBitshift+0x128>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d036      	beq.n	800815c <DMA_CalcBaseAndBitshift+0xa8>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a3b      	ldr	r2, [pc, #236]	@ (80081e0 <DMA_CalcBaseAndBitshift+0x12c>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d031      	beq.n	800815c <DMA_CalcBaseAndBitshift+0xa8>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a39      	ldr	r2, [pc, #228]	@ (80081e4 <DMA_CalcBaseAndBitshift+0x130>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d02c      	beq.n	800815c <DMA_CalcBaseAndBitshift+0xa8>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a38      	ldr	r2, [pc, #224]	@ (80081e8 <DMA_CalcBaseAndBitshift+0x134>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d027      	beq.n	800815c <DMA_CalcBaseAndBitshift+0xa8>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a36      	ldr	r2, [pc, #216]	@ (80081ec <DMA_CalcBaseAndBitshift+0x138>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d022      	beq.n	800815c <DMA_CalcBaseAndBitshift+0xa8>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a35      	ldr	r2, [pc, #212]	@ (80081f0 <DMA_CalcBaseAndBitshift+0x13c>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d01d      	beq.n	800815c <DMA_CalcBaseAndBitshift+0xa8>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a33      	ldr	r2, [pc, #204]	@ (80081f4 <DMA_CalcBaseAndBitshift+0x140>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d018      	beq.n	800815c <DMA_CalcBaseAndBitshift+0xa8>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a32      	ldr	r2, [pc, #200]	@ (80081f8 <DMA_CalcBaseAndBitshift+0x144>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d013      	beq.n	800815c <DMA_CalcBaseAndBitshift+0xa8>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a30      	ldr	r2, [pc, #192]	@ (80081fc <DMA_CalcBaseAndBitshift+0x148>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d00e      	beq.n	800815c <DMA_CalcBaseAndBitshift+0xa8>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a2f      	ldr	r2, [pc, #188]	@ (8008200 <DMA_CalcBaseAndBitshift+0x14c>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d009      	beq.n	800815c <DMA_CalcBaseAndBitshift+0xa8>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a2d      	ldr	r2, [pc, #180]	@ (8008204 <DMA_CalcBaseAndBitshift+0x150>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d004      	beq.n	800815c <DMA_CalcBaseAndBitshift+0xa8>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a2c      	ldr	r2, [pc, #176]	@ (8008208 <DMA_CalcBaseAndBitshift+0x154>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d101      	bne.n	8008160 <DMA_CalcBaseAndBitshift+0xac>
 800815c:	2301      	movs	r3, #1
 800815e:	e000      	b.n	8008162 <DMA_CalcBaseAndBitshift+0xae>
 8008160:	2300      	movs	r3, #0
 8008162:	2b00      	cmp	r3, #0
 8008164:	d024      	beq.n	80081b0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	b2db      	uxtb	r3, r3
 800816c:	3b10      	subs	r3, #16
 800816e:	4a27      	ldr	r2, [pc, #156]	@ (800820c <DMA_CalcBaseAndBitshift+0x158>)
 8008170:	fba2 2303 	umull	r2, r3, r2, r3
 8008174:	091b      	lsrs	r3, r3, #4
 8008176:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f003 0307 	and.w	r3, r3, #7
 800817e:	4a24      	ldr	r2, [pc, #144]	@ (8008210 <DMA_CalcBaseAndBitshift+0x15c>)
 8008180:	5cd3      	ldrb	r3, [r2, r3]
 8008182:	461a      	mov	r2, r3
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2b03      	cmp	r3, #3
 800818c:	d908      	bls.n	80081a0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	461a      	mov	r2, r3
 8008194:	4b1f      	ldr	r3, [pc, #124]	@ (8008214 <DMA_CalcBaseAndBitshift+0x160>)
 8008196:	4013      	ands	r3, r2
 8008198:	1d1a      	adds	r2, r3, #4
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	659a      	str	r2, [r3, #88]	@ 0x58
 800819e:	e00d      	b.n	80081bc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	461a      	mov	r2, r3
 80081a6:	4b1b      	ldr	r3, [pc, #108]	@ (8008214 <DMA_CalcBaseAndBitshift+0x160>)
 80081a8:	4013      	ands	r3, r2
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80081ae:	e005      	b.n	80081bc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3714      	adds	r7, #20
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr
 80081cc:	40020010 	.word	0x40020010
 80081d0:	40020028 	.word	0x40020028
 80081d4:	40020040 	.word	0x40020040
 80081d8:	40020058 	.word	0x40020058
 80081dc:	40020070 	.word	0x40020070
 80081e0:	40020088 	.word	0x40020088
 80081e4:	400200a0 	.word	0x400200a0
 80081e8:	400200b8 	.word	0x400200b8
 80081ec:	40020410 	.word	0x40020410
 80081f0:	40020428 	.word	0x40020428
 80081f4:	40020440 	.word	0x40020440
 80081f8:	40020458 	.word	0x40020458
 80081fc:	40020470 	.word	0x40020470
 8008200:	40020488 	.word	0x40020488
 8008204:	400204a0 	.word	0x400204a0
 8008208:	400204b8 	.word	0x400204b8
 800820c:	aaaaaaab 	.word	0xaaaaaaab
 8008210:	080189a4 	.word	0x080189a4
 8008214:	fffffc00 	.word	0xfffffc00

08008218 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008218:	b480      	push	{r7}
 800821a:	b085      	sub	sp, #20
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008220:	2300      	movs	r3, #0
 8008222:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	699b      	ldr	r3, [r3, #24]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d120      	bne.n	800826e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008230:	2b03      	cmp	r3, #3
 8008232:	d858      	bhi.n	80082e6 <DMA_CheckFifoParam+0xce>
 8008234:	a201      	add	r2, pc, #4	@ (adr r2, 800823c <DMA_CheckFifoParam+0x24>)
 8008236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800823a:	bf00      	nop
 800823c:	0800824d 	.word	0x0800824d
 8008240:	0800825f 	.word	0x0800825f
 8008244:	0800824d 	.word	0x0800824d
 8008248:	080082e7 	.word	0x080082e7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008250:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008254:	2b00      	cmp	r3, #0
 8008256:	d048      	beq.n	80082ea <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008258:	2301      	movs	r3, #1
 800825a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800825c:	e045      	b.n	80082ea <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008262:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008266:	d142      	bne.n	80082ee <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008268:	2301      	movs	r3, #1
 800826a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800826c:	e03f      	b.n	80082ee <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	699b      	ldr	r3, [r3, #24]
 8008272:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008276:	d123      	bne.n	80082c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800827c:	2b03      	cmp	r3, #3
 800827e:	d838      	bhi.n	80082f2 <DMA_CheckFifoParam+0xda>
 8008280:	a201      	add	r2, pc, #4	@ (adr r2, 8008288 <DMA_CheckFifoParam+0x70>)
 8008282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008286:	bf00      	nop
 8008288:	08008299 	.word	0x08008299
 800828c:	0800829f 	.word	0x0800829f
 8008290:	08008299 	.word	0x08008299
 8008294:	080082b1 	.word	0x080082b1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	73fb      	strb	r3, [r7, #15]
        break;
 800829c:	e030      	b.n	8008300 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d025      	beq.n	80082f6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80082ae:	e022      	b.n	80082f6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082b4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80082b8:	d11f      	bne.n	80082fa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80082be:	e01c      	b.n	80082fa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082c4:	2b02      	cmp	r3, #2
 80082c6:	d902      	bls.n	80082ce <DMA_CheckFifoParam+0xb6>
 80082c8:	2b03      	cmp	r3, #3
 80082ca:	d003      	beq.n	80082d4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80082cc:	e018      	b.n	8008300 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80082ce:	2301      	movs	r3, #1
 80082d0:	73fb      	strb	r3, [r7, #15]
        break;
 80082d2:	e015      	b.n	8008300 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d00e      	beq.n	80082fe <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80082e0:	2301      	movs	r3, #1
 80082e2:	73fb      	strb	r3, [r7, #15]
    break;
 80082e4:	e00b      	b.n	80082fe <DMA_CheckFifoParam+0xe6>
        break;
 80082e6:	bf00      	nop
 80082e8:	e00a      	b.n	8008300 <DMA_CheckFifoParam+0xe8>
        break;
 80082ea:	bf00      	nop
 80082ec:	e008      	b.n	8008300 <DMA_CheckFifoParam+0xe8>
        break;
 80082ee:	bf00      	nop
 80082f0:	e006      	b.n	8008300 <DMA_CheckFifoParam+0xe8>
        break;
 80082f2:	bf00      	nop
 80082f4:	e004      	b.n	8008300 <DMA_CheckFifoParam+0xe8>
        break;
 80082f6:	bf00      	nop
 80082f8:	e002      	b.n	8008300 <DMA_CheckFifoParam+0xe8>
        break;
 80082fa:	bf00      	nop
 80082fc:	e000      	b.n	8008300 <DMA_CheckFifoParam+0xe8>
    break;
 80082fe:	bf00      	nop
    }
  }

  return status;
 8008300:	7bfb      	ldrb	r3, [r7, #15]
}
 8008302:	4618      	mov	r0, r3
 8008304:	3714      	adds	r7, #20
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop

08008310 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a38      	ldr	r2, [pc, #224]	@ (8008404 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d022      	beq.n	800836e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a36      	ldr	r2, [pc, #216]	@ (8008408 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d01d      	beq.n	800836e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a35      	ldr	r2, [pc, #212]	@ (800840c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d018      	beq.n	800836e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a33      	ldr	r2, [pc, #204]	@ (8008410 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d013      	beq.n	800836e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a32      	ldr	r2, [pc, #200]	@ (8008414 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d00e      	beq.n	800836e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a30      	ldr	r2, [pc, #192]	@ (8008418 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d009      	beq.n	800836e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a2f      	ldr	r2, [pc, #188]	@ (800841c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d004      	beq.n	800836e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a2d      	ldr	r2, [pc, #180]	@ (8008420 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d101      	bne.n	8008372 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800836e:	2301      	movs	r3, #1
 8008370:	e000      	b.n	8008374 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008372:	2300      	movs	r3, #0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d01a      	beq.n	80083ae <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	b2db      	uxtb	r3, r3
 800837e:	3b08      	subs	r3, #8
 8008380:	4a28      	ldr	r2, [pc, #160]	@ (8008424 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008382:	fba2 2303 	umull	r2, r3, r2, r3
 8008386:	091b      	lsrs	r3, r3, #4
 8008388:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800838a:	68fa      	ldr	r2, [r7, #12]
 800838c:	4b26      	ldr	r3, [pc, #152]	@ (8008428 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800838e:	4413      	add	r3, r2
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	461a      	mov	r2, r3
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a24      	ldr	r2, [pc, #144]	@ (800842c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800839c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	f003 031f 	and.w	r3, r3, #31
 80083a4:	2201      	movs	r2, #1
 80083a6:	409a      	lsls	r2, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80083ac:	e024      	b.n	80083f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	b2db      	uxtb	r3, r3
 80083b4:	3b10      	subs	r3, #16
 80083b6:	4a1e      	ldr	r2, [pc, #120]	@ (8008430 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80083b8:	fba2 2303 	umull	r2, r3, r2, r3
 80083bc:	091b      	lsrs	r3, r3, #4
 80083be:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	4a1c      	ldr	r2, [pc, #112]	@ (8008434 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d806      	bhi.n	80083d6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	4a1b      	ldr	r2, [pc, #108]	@ (8008438 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d902      	bls.n	80083d6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	3308      	adds	r3, #8
 80083d4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80083d6:	68fa      	ldr	r2, [r7, #12]
 80083d8:	4b18      	ldr	r3, [pc, #96]	@ (800843c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80083da:	4413      	add	r3, r2
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	461a      	mov	r2, r3
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	4a16      	ldr	r2, [pc, #88]	@ (8008440 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80083e8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f003 031f 	and.w	r3, r3, #31
 80083f0:	2201      	movs	r2, #1
 80083f2:	409a      	lsls	r2, r3
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80083f8:	bf00      	nop
 80083fa:	3714      	adds	r7, #20
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr
 8008404:	58025408 	.word	0x58025408
 8008408:	5802541c 	.word	0x5802541c
 800840c:	58025430 	.word	0x58025430
 8008410:	58025444 	.word	0x58025444
 8008414:	58025458 	.word	0x58025458
 8008418:	5802546c 	.word	0x5802546c
 800841c:	58025480 	.word	0x58025480
 8008420:	58025494 	.word	0x58025494
 8008424:	cccccccd 	.word	0xcccccccd
 8008428:	16009600 	.word	0x16009600
 800842c:	58025880 	.word	0x58025880
 8008430:	aaaaaaab 	.word	0xaaaaaaab
 8008434:	400204b8 	.word	0x400204b8
 8008438:	4002040f 	.word	0x4002040f
 800843c:	10008200 	.word	0x10008200
 8008440:	40020880 	.word	0x40020880

08008444 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008444:	b480      	push	{r7}
 8008446:	b085      	sub	sp, #20
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	b2db      	uxtb	r3, r3
 8008452:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d04a      	beq.n	80084f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2b08      	cmp	r3, #8
 800845e:	d847      	bhi.n	80084f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a25      	ldr	r2, [pc, #148]	@ (80084fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d022      	beq.n	80084b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a24      	ldr	r2, [pc, #144]	@ (8008500 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d01d      	beq.n	80084b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a22      	ldr	r2, [pc, #136]	@ (8008504 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d018      	beq.n	80084b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a21      	ldr	r2, [pc, #132]	@ (8008508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d013      	beq.n	80084b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a1f      	ldr	r2, [pc, #124]	@ (800850c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d00e      	beq.n	80084b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a1e      	ldr	r2, [pc, #120]	@ (8008510 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d009      	beq.n	80084b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a1c      	ldr	r2, [pc, #112]	@ (8008514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d004      	beq.n	80084b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a1b      	ldr	r2, [pc, #108]	@ (8008518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d101      	bne.n	80084b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80084b0:	2301      	movs	r3, #1
 80084b2:	e000      	b.n	80084b6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80084b4:	2300      	movs	r3, #0
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d00a      	beq.n	80084d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	4b17      	ldr	r3, [pc, #92]	@ (800851c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80084be:	4413      	add	r3, r2
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	461a      	mov	r2, r3
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	4a15      	ldr	r2, [pc, #84]	@ (8008520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80084cc:	671a      	str	r2, [r3, #112]	@ 0x70
 80084ce:	e009      	b.n	80084e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80084d0:	68fa      	ldr	r2, [r7, #12]
 80084d2:	4b14      	ldr	r3, [pc, #80]	@ (8008524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80084d4:	4413      	add	r3, r2
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	461a      	mov	r2, r3
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4a11      	ldr	r2, [pc, #68]	@ (8008528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80084e2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	3b01      	subs	r3, #1
 80084e8:	2201      	movs	r2, #1
 80084ea:	409a      	lsls	r2, r3
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80084f0:	bf00      	nop
 80084f2:	3714      	adds	r7, #20
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr
 80084fc:	58025408 	.word	0x58025408
 8008500:	5802541c 	.word	0x5802541c
 8008504:	58025430 	.word	0x58025430
 8008508:	58025444 	.word	0x58025444
 800850c:	58025458 	.word	0x58025458
 8008510:	5802546c 	.word	0x5802546c
 8008514:	58025480 	.word	0x58025480
 8008518:	58025494 	.word	0x58025494
 800851c:	1600963f 	.word	0x1600963f
 8008520:	58025940 	.word	0x58025940
 8008524:	1000823f 	.word	0x1000823f
 8008528:	40020940 	.word	0x40020940

0800852c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b098      	sub	sp, #96	@ 0x60
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8008534:	4a84      	ldr	r2, [pc, #528]	@ (8008748 <HAL_FDCAN_Init+0x21c>)
 8008536:	f107 030c 	add.w	r3, r7, #12
 800853a:	4611      	mov	r1, r2
 800853c:	224c      	movs	r2, #76	@ 0x4c
 800853e:	4618      	mov	r0, r3
 8008540:	f00e fa1b 	bl	801697a <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d101      	bne.n	800854e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800854a:	2301      	movs	r3, #1
 800854c:	e1c6      	b.n	80088dc <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a7e      	ldr	r2, [pc, #504]	@ (800874c <HAL_FDCAN_Init+0x220>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d106      	bne.n	8008566 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8008560:	461a      	mov	r2, r3
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800856c:	b2db      	uxtb	r3, r3
 800856e:	2b00      	cmp	r3, #0
 8008570:	d106      	bne.n	8008580 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2200      	movs	r2, #0
 8008576:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f7f8 fb68 	bl	8000c50 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	699a      	ldr	r2, [r3, #24]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f022 0210 	bic.w	r2, r2, #16
 800858e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008590:	f7fc ff5a 	bl	8005448 <HAL_GetTick>
 8008594:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8008596:	e014      	b.n	80085c2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008598:	f7fc ff56 	bl	8005448 <HAL_GetTick>
 800859c:	4602      	mov	r2, r0
 800859e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80085a0:	1ad3      	subs	r3, r2, r3
 80085a2:	2b0a      	cmp	r3, #10
 80085a4:	d90d      	bls.n	80085c2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80085ac:	f043 0201 	orr.w	r2, r3, #1
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2203      	movs	r2, #3
 80085ba:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	e18c      	b.n	80088dc <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	699b      	ldr	r3, [r3, #24]
 80085c8:	f003 0308 	and.w	r3, r3, #8
 80085cc:	2b08      	cmp	r3, #8
 80085ce:	d0e3      	beq.n	8008598 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	699a      	ldr	r2, [r3, #24]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f042 0201 	orr.w	r2, r2, #1
 80085de:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80085e0:	f7fc ff32 	bl	8005448 <HAL_GetTick>
 80085e4:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80085e6:	e014      	b.n	8008612 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80085e8:	f7fc ff2e 	bl	8005448 <HAL_GetTick>
 80085ec:	4602      	mov	r2, r0
 80085ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80085f0:	1ad3      	subs	r3, r2, r3
 80085f2:	2b0a      	cmp	r3, #10
 80085f4:	d90d      	bls.n	8008612 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80085fc:	f043 0201 	orr.w	r2, r3, #1
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2203      	movs	r2, #3
 800860a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800860e:	2301      	movs	r3, #1
 8008610:	e164      	b.n	80088dc <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	699b      	ldr	r3, [r3, #24]
 8008618:	f003 0301 	and.w	r3, r3, #1
 800861c:	2b00      	cmp	r3, #0
 800861e:	d0e3      	beq.n	80085e8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	699a      	ldr	r2, [r3, #24]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f042 0202 	orr.w	r2, r2, #2
 800862e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	7c1b      	ldrb	r3, [r3, #16]
 8008634:	2b01      	cmp	r3, #1
 8008636:	d108      	bne.n	800864a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	699a      	ldr	r2, [r3, #24]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008646:	619a      	str	r2, [r3, #24]
 8008648:	e007      	b.n	800865a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	699a      	ldr	r2, [r3, #24]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008658:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	7c5b      	ldrb	r3, [r3, #17]
 800865e:	2b01      	cmp	r3, #1
 8008660:	d108      	bne.n	8008674 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	699a      	ldr	r2, [r3, #24]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008670:	619a      	str	r2, [r3, #24]
 8008672:	e007      	b.n	8008684 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	699a      	ldr	r2, [r3, #24]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008682:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	7c9b      	ldrb	r3, [r3, #18]
 8008688:	2b01      	cmp	r3, #1
 800868a:	d108      	bne.n	800869e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	699a      	ldr	r2, [r3, #24]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800869a:	619a      	str	r2, [r3, #24]
 800869c:	e007      	b.n	80086ae <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	699a      	ldr	r2, [r3, #24]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80086ac:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	699b      	ldr	r3, [r3, #24]
 80086b4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	689a      	ldr	r2, [r3, #8]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	430a      	orrs	r2, r1
 80086c2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	699a      	ldr	r2, [r3, #24]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80086d2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	691a      	ldr	r2, [r3, #16]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f022 0210 	bic.w	r2, r2, #16
 80086e2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	68db      	ldr	r3, [r3, #12]
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d108      	bne.n	80086fe <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	699a      	ldr	r2, [r3, #24]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f042 0204 	orr.w	r2, r2, #4
 80086fa:	619a      	str	r2, [r3, #24]
 80086fc:	e030      	b.n	8008760 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	68db      	ldr	r3, [r3, #12]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d02c      	beq.n	8008760 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	68db      	ldr	r3, [r3, #12]
 800870a:	2b02      	cmp	r3, #2
 800870c:	d020      	beq.n	8008750 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	699a      	ldr	r2, [r3, #24]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800871c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	691a      	ldr	r2, [r3, #16]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f042 0210 	orr.w	r2, r2, #16
 800872c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	2b03      	cmp	r3, #3
 8008734:	d114      	bne.n	8008760 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	699a      	ldr	r2, [r3, #24]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f042 0220 	orr.w	r2, r2, #32
 8008744:	619a      	str	r2, [r3, #24]
 8008746:	e00b      	b.n	8008760 <HAL_FDCAN_Init+0x234>
 8008748:	08018940 	.word	0x08018940
 800874c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	699a      	ldr	r2, [r3, #24]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f042 0220 	orr.w	r2, r2, #32
 800875e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	699b      	ldr	r3, [r3, #24]
 8008764:	3b01      	subs	r3, #1
 8008766:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	69db      	ldr	r3, [r3, #28]
 800876c:	3b01      	subs	r3, #1
 800876e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008770:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6a1b      	ldr	r3, [r3, #32]
 8008776:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008778:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	695b      	ldr	r3, [r3, #20]
 8008780:	3b01      	subs	r3, #1
 8008782:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008788:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800878a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	689b      	ldr	r3, [r3, #8]
 8008790:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008794:	d115      	bne.n	80087c2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800879a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087a0:	3b01      	subs	r3, #1
 80087a2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80087a4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087aa:	3b01      	subs	r3, #1
 80087ac:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80087ae:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087b6:	3b01      	subs	r3, #1
 80087b8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80087be:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80087c0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00a      	beq.n	80087e0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	430a      	orrs	r2, r1
 80087dc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087e8:	4413      	add	r3, r2
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d011      	beq.n	8008812 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80087f6:	f023 0107 	bic.w	r1, r3, #7
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	3360      	adds	r3, #96	@ 0x60
 8008802:	443b      	add	r3, r7
 8008804:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	430a      	orrs	r2, r1
 800880e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008816:	2b00      	cmp	r3, #0
 8008818:	d011      	beq.n	800883e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008822:	f023 0107 	bic.w	r1, r3, #7
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800882a:	009b      	lsls	r3, r3, #2
 800882c:	3360      	adds	r3, #96	@ 0x60
 800882e:	443b      	add	r3, r7
 8008830:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	430a      	orrs	r2, r1
 800883a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008842:	2b00      	cmp	r3, #0
 8008844:	d012      	beq.n	800886c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800884e:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	3360      	adds	r3, #96	@ 0x60
 800885a:	443b      	add	r3, r7
 800885c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8008860:	011a      	lsls	r2, r3, #4
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	430a      	orrs	r2, r1
 8008868:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008870:	2b00      	cmp	r3, #0
 8008872:	d012      	beq.n	800889a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800887c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	3360      	adds	r3, #96	@ 0x60
 8008888:	443b      	add	r3, r7
 800888a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800888e:	021a      	lsls	r2, r3, #8
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	430a      	orrs	r2, r1
 8008896:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a11      	ldr	r2, [pc, #68]	@ (80088e4 <HAL_FDCAN_Init+0x3b8>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d107      	bne.n	80088b4 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	689a      	ldr	r2, [r3, #8]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	f022 0203 	bic.w	r2, r2, #3
 80088b2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 f80b 	bl	80088e8 <FDCAN_CalcultateRamBlockAddresses>
 80088d2:	4603      	mov	r3, r0
 80088d4:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 80088d8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3760      	adds	r7, #96	@ 0x60
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}
 80088e4:	4000a000 	.word	0x4000a000

080088e8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b085      	sub	sp, #20
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088f4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80088fe:	4ba7      	ldr	r3, [pc, #668]	@ (8008b9c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008900:	4013      	ands	r3, r2
 8008902:	68ba      	ldr	r2, [r7, #8]
 8008904:	0091      	lsls	r1, r2, #2
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	6812      	ldr	r2, [r2, #0]
 800890a:	430b      	orrs	r3, r1
 800890c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008918:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008920:	041a      	lsls	r2, r3, #16
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	430a      	orrs	r2, r1
 8008928:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008930:	68ba      	ldr	r2, [r7, #8]
 8008932:	4413      	add	r3, r2
 8008934:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800893e:	4b97      	ldr	r3, [pc, #604]	@ (8008b9c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008940:	4013      	ands	r3, r2
 8008942:	68ba      	ldr	r2, [r7, #8]
 8008944:	0091      	lsls	r1, r2, #2
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	6812      	ldr	r2, [r2, #0]
 800894a:	430b      	orrs	r3, r1
 800894c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008958:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008960:	041a      	lsls	r2, r3, #16
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	430a      	orrs	r2, r1
 8008968:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008970:	005b      	lsls	r3, r3, #1
 8008972:	68ba      	ldr	r2, [r7, #8]
 8008974:	4413      	add	r3, r2
 8008976:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8008980:	4b86      	ldr	r3, [pc, #536]	@ (8008b9c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008982:	4013      	ands	r3, r2
 8008984:	68ba      	ldr	r2, [r7, #8]
 8008986:	0091      	lsls	r1, r2, #2
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	6812      	ldr	r2, [r2, #0]
 800898c:	430b      	orrs	r3, r1
 800898e:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800899a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089a2:	041a      	lsls	r2, r3, #16
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	430a      	orrs	r2, r1
 80089aa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80089b6:	fb02 f303 	mul.w	r3, r2, r3
 80089ba:	68ba      	ldr	r2, [r7, #8]
 80089bc:	4413      	add	r3, r2
 80089be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80089c8:	4b74      	ldr	r3, [pc, #464]	@ (8008b9c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80089ca:	4013      	ands	r3, r2
 80089cc:	68ba      	ldr	r2, [r7, #8]
 80089ce:	0091      	lsls	r1, r2, #2
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	6812      	ldr	r2, [r2, #0]
 80089d4:	430b      	orrs	r3, r1
 80089d6:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80089e2:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089ea:	041a      	lsls	r2, r3, #16
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	430a      	orrs	r2, r1
 80089f2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80089fe:	fb02 f303 	mul.w	r3, r2, r3
 8008a02:	68ba      	ldr	r2, [r7, #8]
 8008a04:	4413      	add	r3, r2
 8008a06:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8008a10:	4b62      	ldr	r3, [pc, #392]	@ (8008b9c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008a12:	4013      	ands	r3, r2
 8008a14:	68ba      	ldr	r2, [r7, #8]
 8008a16:	0091      	lsls	r1, r2, #2
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	6812      	ldr	r2, [r2, #0]
 8008a1c:	430b      	orrs	r3, r1
 8008a1e:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008a2a:	fb02 f303 	mul.w	r3, r2, r3
 8008a2e:	68ba      	ldr	r2, [r7, #8]
 8008a30:	4413      	add	r3, r2
 8008a32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8008a3c:	4b57      	ldr	r3, [pc, #348]	@ (8008b9c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008a3e:	4013      	ands	r3, r2
 8008a40:	68ba      	ldr	r2, [r7, #8]
 8008a42:	0091      	lsls	r1, r2, #2
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	6812      	ldr	r2, [r2, #0]
 8008a48:	430b      	orrs	r3, r1
 8008a4a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a56:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a5e:	041a      	lsls	r2, r3, #16
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	430a      	orrs	r2, r1
 8008a66:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a6e:	005b      	lsls	r3, r3, #1
 8008a70:	68ba      	ldr	r2, [r7, #8]
 8008a72:	4413      	add	r3, r2
 8008a74:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8008a7e:	4b47      	ldr	r3, [pc, #284]	@ (8008b9c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008a80:	4013      	ands	r3, r2
 8008a82:	68ba      	ldr	r2, [r7, #8]
 8008a84:	0091      	lsls	r1, r2, #2
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	6812      	ldr	r2, [r2, #0]
 8008a8a:	430b      	orrs	r3, r1
 8008a8c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008a98:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008aa0:	041a      	lsls	r2, r3, #16
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	430a      	orrs	r2, r1
 8008aa8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008ab4:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008abc:	061a      	lsls	r2, r3, #24
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	430a      	orrs	r2, r1
 8008ac4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008acc:	4b34      	ldr	r3, [pc, #208]	@ (8008ba0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8008ace:	4413      	add	r3, r2
 8008ad0:	009a      	lsls	r2, r3, #2
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	441a      	add	r2, r3
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008aee:	00db      	lsls	r3, r3, #3
 8008af0:	441a      	add	r2, r3
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008afe:	6879      	ldr	r1, [r7, #4]
 8008b00:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8008b02:	fb01 f303 	mul.w	r3, r1, r3
 8008b06:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8008b08:	441a      	add	r2, r3
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b16:	6879      	ldr	r1, [r7, #4]
 8008b18:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8008b1a:	fb01 f303 	mul.w	r3, r1, r3
 8008b1e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8008b20:	441a      	add	r2, r3
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b2e:	6879      	ldr	r1, [r7, #4]
 8008b30:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8008b32:	fb01 f303 	mul.w	r3, r1, r3
 8008b36:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8008b38:	441a      	add	r2, r3
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b4a:	00db      	lsls	r3, r3, #3
 8008b4c:	441a      	add	r2, r3
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b5e:	6879      	ldr	r1, [r7, #4]
 8008b60:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8008b62:	fb01 f303 	mul.w	r3, r1, r3
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	441a      	add	r2, r3
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b7a:	6879      	ldr	r1, [r7, #4]
 8008b7c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8008b7e:	fb01 f303 	mul.w	r3, r1, r3
 8008b82:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8008b84:	441a      	add	r2, r3
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b92:	4a04      	ldr	r2, [pc, #16]	@ (8008ba4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d915      	bls.n	8008bc4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8008b98:	e006      	b.n	8008ba8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8008b9a:	bf00      	nop
 8008b9c:	ffff0003 	.word	0xffff0003
 8008ba0:	10002b00 	.word	0x10002b00
 8008ba4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008bae:	f043 0220 	orr.w	r2, r3, #32
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2203      	movs	r2, #3
 8008bbc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e010      	b.n	8008be6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008bc8:	60fb      	str	r3, [r7, #12]
 8008bca:	e005      	b.n	8008bd8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	3304      	adds	r3, #4
 8008bd6:	60fb      	str	r3, [r7, #12]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bde:	68fa      	ldr	r2, [r7, #12]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d3f3      	bcc.n	8008bcc <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3714      	adds	r7, #20
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr
 8008bf2:	bf00      	nop

08008bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b089      	sub	sp, #36	@ 0x24
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008c02:	4b89      	ldr	r3, [pc, #548]	@ (8008e28 <HAL_GPIO_Init+0x234>)
 8008c04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008c06:	e194      	b.n	8008f32 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	2101      	movs	r1, #1
 8008c0e:	69fb      	ldr	r3, [r7, #28]
 8008c10:	fa01 f303 	lsl.w	r3, r1, r3
 8008c14:	4013      	ands	r3, r2
 8008c16:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	f000 8186 	beq.w	8008f2c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	f003 0303 	and.w	r3, r3, #3
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d005      	beq.n	8008c38 <HAL_GPIO_Init+0x44>
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	f003 0303 	and.w	r3, r3, #3
 8008c34:	2b02      	cmp	r3, #2
 8008c36:	d130      	bne.n	8008c9a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	689b      	ldr	r3, [r3, #8]
 8008c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008c3e:	69fb      	ldr	r3, [r7, #28]
 8008c40:	005b      	lsls	r3, r3, #1
 8008c42:	2203      	movs	r2, #3
 8008c44:	fa02 f303 	lsl.w	r3, r2, r3
 8008c48:	43db      	mvns	r3, r3
 8008c4a:	69ba      	ldr	r2, [r7, #24]
 8008c4c:	4013      	ands	r3, r2
 8008c4e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	68da      	ldr	r2, [r3, #12]
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	005b      	lsls	r3, r3, #1
 8008c58:	fa02 f303 	lsl.w	r3, r2, r3
 8008c5c:	69ba      	ldr	r2, [r7, #24]
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	69ba      	ldr	r2, [r7, #24]
 8008c66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008c6e:	2201      	movs	r2, #1
 8008c70:	69fb      	ldr	r3, [r7, #28]
 8008c72:	fa02 f303 	lsl.w	r3, r2, r3
 8008c76:	43db      	mvns	r3, r3
 8008c78:	69ba      	ldr	r2, [r7, #24]
 8008c7a:	4013      	ands	r3, r2
 8008c7c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	091b      	lsrs	r3, r3, #4
 8008c84:	f003 0201 	and.w	r2, r3, #1
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c8e:	69ba      	ldr	r2, [r7, #24]
 8008c90:	4313      	orrs	r3, r2
 8008c92:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	69ba      	ldr	r2, [r7, #24]
 8008c98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	f003 0303 	and.w	r3, r3, #3
 8008ca2:	2b03      	cmp	r3, #3
 8008ca4:	d017      	beq.n	8008cd6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	68db      	ldr	r3, [r3, #12]
 8008caa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008cac:	69fb      	ldr	r3, [r7, #28]
 8008cae:	005b      	lsls	r3, r3, #1
 8008cb0:	2203      	movs	r2, #3
 8008cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8008cb6:	43db      	mvns	r3, r3
 8008cb8:	69ba      	ldr	r2, [r7, #24]
 8008cba:	4013      	ands	r3, r2
 8008cbc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	689a      	ldr	r2, [r3, #8]
 8008cc2:	69fb      	ldr	r3, [r7, #28]
 8008cc4:	005b      	lsls	r3, r3, #1
 8008cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8008cca:	69ba      	ldr	r2, [r7, #24]
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	69ba      	ldr	r2, [r7, #24]
 8008cd4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	f003 0303 	and.w	r3, r3, #3
 8008cde:	2b02      	cmp	r3, #2
 8008ce0:	d123      	bne.n	8008d2a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008ce2:	69fb      	ldr	r3, [r7, #28]
 8008ce4:	08da      	lsrs	r2, r3, #3
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	3208      	adds	r2, #8
 8008cea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008cf0:	69fb      	ldr	r3, [r7, #28]
 8008cf2:	f003 0307 	and.w	r3, r3, #7
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	220f      	movs	r2, #15
 8008cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8008cfe:	43db      	mvns	r3, r3
 8008d00:	69ba      	ldr	r2, [r7, #24]
 8008d02:	4013      	ands	r3, r2
 8008d04:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	691a      	ldr	r2, [r3, #16]
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	f003 0307 	and.w	r3, r3, #7
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	fa02 f303 	lsl.w	r3, r2, r3
 8008d16:	69ba      	ldr	r2, [r7, #24]
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008d1c:	69fb      	ldr	r3, [r7, #28]
 8008d1e:	08da      	lsrs	r2, r3, #3
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	3208      	adds	r2, #8
 8008d24:	69b9      	ldr	r1, [r7, #24]
 8008d26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	005b      	lsls	r3, r3, #1
 8008d34:	2203      	movs	r2, #3
 8008d36:	fa02 f303 	lsl.w	r3, r2, r3
 8008d3a:	43db      	mvns	r3, r3
 8008d3c:	69ba      	ldr	r2, [r7, #24]
 8008d3e:	4013      	ands	r3, r2
 8008d40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	f003 0203 	and.w	r2, r3, #3
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	005b      	lsls	r3, r3, #1
 8008d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d52:	69ba      	ldr	r2, [r7, #24]
 8008d54:	4313      	orrs	r3, r2
 8008d56:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	69ba      	ldr	r2, [r7, #24]
 8008d5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	f000 80e0 	beq.w	8008f2c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d6c:	4b2f      	ldr	r3, [pc, #188]	@ (8008e2c <HAL_GPIO_Init+0x238>)
 8008d6e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8008d72:	4a2e      	ldr	r2, [pc, #184]	@ (8008e2c <HAL_GPIO_Init+0x238>)
 8008d74:	f043 0302 	orr.w	r3, r3, #2
 8008d78:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8008d7c:	4b2b      	ldr	r3, [pc, #172]	@ (8008e2c <HAL_GPIO_Init+0x238>)
 8008d7e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8008d82:	f003 0302 	and.w	r3, r3, #2
 8008d86:	60fb      	str	r3, [r7, #12]
 8008d88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008d8a:	4a29      	ldr	r2, [pc, #164]	@ (8008e30 <HAL_GPIO_Init+0x23c>)
 8008d8c:	69fb      	ldr	r3, [r7, #28]
 8008d8e:	089b      	lsrs	r3, r3, #2
 8008d90:	3302      	adds	r3, #2
 8008d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008d98:	69fb      	ldr	r3, [r7, #28]
 8008d9a:	f003 0303 	and.w	r3, r3, #3
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	220f      	movs	r2, #15
 8008da2:	fa02 f303 	lsl.w	r3, r2, r3
 8008da6:	43db      	mvns	r3, r3
 8008da8:	69ba      	ldr	r2, [r7, #24]
 8008daa:	4013      	ands	r3, r2
 8008dac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4a20      	ldr	r2, [pc, #128]	@ (8008e34 <HAL_GPIO_Init+0x240>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d052      	beq.n	8008e5c <HAL_GPIO_Init+0x268>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	4a1f      	ldr	r2, [pc, #124]	@ (8008e38 <HAL_GPIO_Init+0x244>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d031      	beq.n	8008e22 <HAL_GPIO_Init+0x22e>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	4a1e      	ldr	r2, [pc, #120]	@ (8008e3c <HAL_GPIO_Init+0x248>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d02b      	beq.n	8008e1e <HAL_GPIO_Init+0x22a>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8008e40 <HAL_GPIO_Init+0x24c>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d025      	beq.n	8008e1a <HAL_GPIO_Init+0x226>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	4a1c      	ldr	r2, [pc, #112]	@ (8008e44 <HAL_GPIO_Init+0x250>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d01f      	beq.n	8008e16 <HAL_GPIO_Init+0x222>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	4a1b      	ldr	r2, [pc, #108]	@ (8008e48 <HAL_GPIO_Init+0x254>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d019      	beq.n	8008e12 <HAL_GPIO_Init+0x21e>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	4a1a      	ldr	r2, [pc, #104]	@ (8008e4c <HAL_GPIO_Init+0x258>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d013      	beq.n	8008e0e <HAL_GPIO_Init+0x21a>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	4a19      	ldr	r2, [pc, #100]	@ (8008e50 <HAL_GPIO_Init+0x25c>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d00d      	beq.n	8008e0a <HAL_GPIO_Init+0x216>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4a18      	ldr	r2, [pc, #96]	@ (8008e54 <HAL_GPIO_Init+0x260>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d007      	beq.n	8008e06 <HAL_GPIO_Init+0x212>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	4a17      	ldr	r2, [pc, #92]	@ (8008e58 <HAL_GPIO_Init+0x264>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d101      	bne.n	8008e02 <HAL_GPIO_Init+0x20e>
 8008dfe:	2309      	movs	r3, #9
 8008e00:	e02d      	b.n	8008e5e <HAL_GPIO_Init+0x26a>
 8008e02:	230a      	movs	r3, #10
 8008e04:	e02b      	b.n	8008e5e <HAL_GPIO_Init+0x26a>
 8008e06:	2308      	movs	r3, #8
 8008e08:	e029      	b.n	8008e5e <HAL_GPIO_Init+0x26a>
 8008e0a:	2307      	movs	r3, #7
 8008e0c:	e027      	b.n	8008e5e <HAL_GPIO_Init+0x26a>
 8008e0e:	2306      	movs	r3, #6
 8008e10:	e025      	b.n	8008e5e <HAL_GPIO_Init+0x26a>
 8008e12:	2305      	movs	r3, #5
 8008e14:	e023      	b.n	8008e5e <HAL_GPIO_Init+0x26a>
 8008e16:	2304      	movs	r3, #4
 8008e18:	e021      	b.n	8008e5e <HAL_GPIO_Init+0x26a>
 8008e1a:	2303      	movs	r3, #3
 8008e1c:	e01f      	b.n	8008e5e <HAL_GPIO_Init+0x26a>
 8008e1e:	2302      	movs	r3, #2
 8008e20:	e01d      	b.n	8008e5e <HAL_GPIO_Init+0x26a>
 8008e22:	2301      	movs	r3, #1
 8008e24:	e01b      	b.n	8008e5e <HAL_GPIO_Init+0x26a>
 8008e26:	bf00      	nop
 8008e28:	58000080 	.word	0x58000080
 8008e2c:	58024400 	.word	0x58024400
 8008e30:	58000400 	.word	0x58000400
 8008e34:	58020000 	.word	0x58020000
 8008e38:	58020400 	.word	0x58020400
 8008e3c:	58020800 	.word	0x58020800
 8008e40:	58020c00 	.word	0x58020c00
 8008e44:	58021000 	.word	0x58021000
 8008e48:	58021400 	.word	0x58021400
 8008e4c:	58021800 	.word	0x58021800
 8008e50:	58021c00 	.word	0x58021c00
 8008e54:	58022000 	.word	0x58022000
 8008e58:	58022400 	.word	0x58022400
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	69fa      	ldr	r2, [r7, #28]
 8008e60:	f002 0203 	and.w	r2, r2, #3
 8008e64:	0092      	lsls	r2, r2, #2
 8008e66:	4093      	lsls	r3, r2
 8008e68:	69ba      	ldr	r2, [r7, #24]
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008e6e:	4938      	ldr	r1, [pc, #224]	@ (8008f50 <HAL_GPIO_Init+0x35c>)
 8008e70:	69fb      	ldr	r3, [r7, #28]
 8008e72:	089b      	lsrs	r3, r3, #2
 8008e74:	3302      	adds	r3, #2
 8008e76:	69ba      	ldr	r2, [r7, #24]
 8008e78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008e7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	43db      	mvns	r3, r3
 8008e88:	69ba      	ldr	r2, [r7, #24]
 8008e8a:	4013      	ands	r3, r2
 8008e8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d003      	beq.n	8008ea2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008e9a:	69ba      	ldr	r2, [r7, #24]
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008ea2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008ea6:	69bb      	ldr	r3, [r7, #24]
 8008ea8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008eaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	43db      	mvns	r3, r3
 8008eb6:	69ba      	ldr	r2, [r7, #24]
 8008eb8:	4013      	ands	r3, r2
 8008eba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d003      	beq.n	8008ed0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008ec8:	69ba      	ldr	r2, [r7, #24]
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008ed0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008ed4:	69bb      	ldr	r3, [r7, #24]
 8008ed6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	43db      	mvns	r3, r3
 8008ee2:	69ba      	ldr	r2, [r7, #24]
 8008ee4:	4013      	ands	r3, r2
 8008ee6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d003      	beq.n	8008efc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008ef4:	69ba      	ldr	r2, [r7, #24]
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	69ba      	ldr	r2, [r7, #24]
 8008f00:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	43db      	mvns	r3, r3
 8008f0c:	69ba      	ldr	r2, [r7, #24]
 8008f0e:	4013      	ands	r3, r2
 8008f10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d003      	beq.n	8008f26 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008f1e:	69ba      	ldr	r2, [r7, #24]
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	4313      	orrs	r3, r2
 8008f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	69ba      	ldr	r2, [r7, #24]
 8008f2a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008f2c:	69fb      	ldr	r3, [r7, #28]
 8008f2e:	3301      	adds	r3, #1
 8008f30:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	69fb      	ldr	r3, [r7, #28]
 8008f38:	fa22 f303 	lsr.w	r3, r2, r3
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	f47f ae63 	bne.w	8008c08 <HAL_GPIO_Init+0x14>
  }
}
 8008f42:	bf00      	nop
 8008f44:	bf00      	nop
 8008f46:	3724      	adds	r7, #36	@ 0x24
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr
 8008f50:	58000400 	.word	0x58000400

08008f54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	807b      	strh	r3, [r7, #2]
 8008f60:	4613      	mov	r3, r2
 8008f62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008f64:	787b      	ldrb	r3, [r7, #1]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d003      	beq.n	8008f72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008f6a:	887a      	ldrh	r2, [r7, #2]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008f70:	e003      	b.n	8008f7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008f72:	887b      	ldrh	r3, [r7, #2]
 8008f74:	041a      	lsls	r2, r3, #16
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	619a      	str	r2, [r3, #24]
}
 8008f7a:	bf00      	nop
 8008f7c:	370c      	adds	r7, #12
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr
	...

08008f88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d101      	bne.n	8008f9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008f96:	2301      	movs	r3, #1
 8008f98:	e08b      	b.n	80090b2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d106      	bne.n	8008fb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f7f8 f850 	bl	8001054 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2224      	movs	r2, #36	@ 0x24
 8008fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f022 0201 	bic.w	r2, r2, #1
 8008fca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	685a      	ldr	r2, [r3, #4]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008fd8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	689a      	ldr	r2, [r3, #8]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008fe8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	d107      	bne.n	8009002 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	689a      	ldr	r2, [r3, #8]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008ffe:	609a      	str	r2, [r3, #8]
 8009000:	e006      	b.n	8009010 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	689a      	ldr	r2, [r3, #8]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800900e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	2b02      	cmp	r3, #2
 8009016:	d108      	bne.n	800902a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	685a      	ldr	r2, [r3, #4]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009026:	605a      	str	r2, [r3, #4]
 8009028:	e007      	b.n	800903a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	685a      	ldr	r2, [r3, #4]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009038:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	6859      	ldr	r1, [r3, #4]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681a      	ldr	r2, [r3, #0]
 8009044:	4b1d      	ldr	r3, [pc, #116]	@ (80090bc <HAL_I2C_Init+0x134>)
 8009046:	430b      	orrs	r3, r1
 8009048:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	68da      	ldr	r2, [r3, #12]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009058:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	691a      	ldr	r2, [r3, #16]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	695b      	ldr	r3, [r3, #20]
 8009062:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	699b      	ldr	r3, [r3, #24]
 800906a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	430a      	orrs	r2, r1
 8009072:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	69d9      	ldr	r1, [r3, #28]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6a1a      	ldr	r2, [r3, #32]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	430a      	orrs	r2, r1
 8009082:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f042 0201 	orr.w	r2, r2, #1
 8009092:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2220      	movs	r2, #32
 800909e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2200      	movs	r2, #0
 80090a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2200      	movs	r2, #0
 80090ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80090b0:	2300      	movs	r3, #0
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3708      	adds	r7, #8
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	02008000 	.word	0x02008000

080090c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80090d0:	b2db      	uxtb	r3, r3
 80090d2:	2b20      	cmp	r3, #32
 80090d4:	d138      	bne.n	8009148 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d101      	bne.n	80090e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80090e0:	2302      	movs	r3, #2
 80090e2:	e032      	b.n	800914a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2201      	movs	r2, #1
 80090e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2224      	movs	r2, #36	@ 0x24
 80090f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f022 0201 	bic.w	r2, r2, #1
 8009102:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009112:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	6819      	ldr	r1, [r3, #0]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	683a      	ldr	r2, [r7, #0]
 8009120:	430a      	orrs	r2, r1
 8009122:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f042 0201 	orr.w	r2, r2, #1
 8009132:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2220      	movs	r2, #32
 8009138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2200      	movs	r2, #0
 8009140:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009144:	2300      	movs	r3, #0
 8009146:	e000      	b.n	800914a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009148:	2302      	movs	r3, #2
  }
}
 800914a:	4618      	mov	r0, r3
 800914c:	370c      	adds	r7, #12
 800914e:	46bd      	mov	sp, r7
 8009150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009154:	4770      	bx	lr

08009156 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009156:	b480      	push	{r7}
 8009158:	b085      	sub	sp, #20
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
 800915e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009166:	b2db      	uxtb	r3, r3
 8009168:	2b20      	cmp	r3, #32
 800916a:	d139      	bne.n	80091e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009172:	2b01      	cmp	r3, #1
 8009174:	d101      	bne.n	800917a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009176:	2302      	movs	r3, #2
 8009178:	e033      	b.n	80091e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2201      	movs	r2, #1
 800917e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2224      	movs	r2, #36	@ 0x24
 8009186:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	681a      	ldr	r2, [r3, #0]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f022 0201 	bic.w	r2, r2, #1
 8009198:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80091a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	021b      	lsls	r3, r3, #8
 80091ae:	68fa      	ldr	r2, [r7, #12]
 80091b0:	4313      	orrs	r3, r2
 80091b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f042 0201 	orr.w	r2, r2, #1
 80091ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2220      	movs	r2, #32
 80091d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80091dc:	2300      	movs	r3, #0
 80091de:	e000      	b.n	80091e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80091e0:	2302      	movs	r3, #2
  }
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3714      	adds	r7, #20
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr
	...

080091f0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80091f8:	4b19      	ldr	r3, [pc, #100]	@ (8009260 <HAL_PWREx_ConfigSupply+0x70>)
 80091fa:	68db      	ldr	r3, [r3, #12]
 80091fc:	f003 0304 	and.w	r3, r3, #4
 8009200:	2b04      	cmp	r3, #4
 8009202:	d00a      	beq.n	800921a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009204:	4b16      	ldr	r3, [pc, #88]	@ (8009260 <HAL_PWREx_ConfigSupply+0x70>)
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	f003 0307 	and.w	r3, r3, #7
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	429a      	cmp	r2, r3
 8009210:	d001      	beq.n	8009216 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009212:	2301      	movs	r3, #1
 8009214:	e01f      	b.n	8009256 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009216:	2300      	movs	r3, #0
 8009218:	e01d      	b.n	8009256 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800921a:	4b11      	ldr	r3, [pc, #68]	@ (8009260 <HAL_PWREx_ConfigSupply+0x70>)
 800921c:	68db      	ldr	r3, [r3, #12]
 800921e:	f023 0207 	bic.w	r2, r3, #7
 8009222:	490f      	ldr	r1, [pc, #60]	@ (8009260 <HAL_PWREx_ConfigSupply+0x70>)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	4313      	orrs	r3, r2
 8009228:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800922a:	f7fc f90d 	bl	8005448 <HAL_GetTick>
 800922e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009230:	e009      	b.n	8009246 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009232:	f7fc f909 	bl	8005448 <HAL_GetTick>
 8009236:	4602      	mov	r2, r0
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	1ad3      	subs	r3, r2, r3
 800923c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009240:	d901      	bls.n	8009246 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009242:	2301      	movs	r3, #1
 8009244:	e007      	b.n	8009256 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009246:	4b06      	ldr	r3, [pc, #24]	@ (8009260 <HAL_PWREx_ConfigSupply+0x70>)
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800924e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009252:	d1ee      	bne.n	8009232 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009254:	2300      	movs	r3, #0
}
 8009256:	4618      	mov	r0, r3
 8009258:	3710      	adds	r7, #16
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	58024800 	.word	0x58024800

08009264 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b08c      	sub	sp, #48	@ 0x30
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d102      	bne.n	8009278 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009272:	2301      	movs	r3, #1
 8009274:	f000 bc1f 	b.w	8009ab6 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f003 0301 	and.w	r3, r3, #1
 8009280:	2b00      	cmp	r3, #0
 8009282:	f000 80b3 	beq.w	80093ec <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009286:	4b95      	ldr	r3, [pc, #596]	@ (80094dc <HAL_RCC_OscConfig+0x278>)
 8009288:	691b      	ldr	r3, [r3, #16]
 800928a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800928e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009290:	4b92      	ldr	r3, [pc, #584]	@ (80094dc <HAL_RCC_OscConfig+0x278>)
 8009292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009294:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009298:	2b10      	cmp	r3, #16
 800929a:	d007      	beq.n	80092ac <HAL_RCC_OscConfig+0x48>
 800929c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800929e:	2b18      	cmp	r3, #24
 80092a0:	d112      	bne.n	80092c8 <HAL_RCC_OscConfig+0x64>
 80092a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092a4:	f003 0303 	and.w	r3, r3, #3
 80092a8:	2b02      	cmp	r3, #2
 80092aa:	d10d      	bne.n	80092c8 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80092ac:	4b8b      	ldr	r3, [pc, #556]	@ (80094dc <HAL_RCC_OscConfig+0x278>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	f000 8098 	beq.w	80093ea <HAL_RCC_OscConfig+0x186>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	f040 8093 	bne.w	80093ea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80092c4:	2301      	movs	r3, #1
 80092c6:	e3f6      	b.n	8009ab6 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092d0:	d106      	bne.n	80092e0 <HAL_RCC_OscConfig+0x7c>
 80092d2:	4b82      	ldr	r3, [pc, #520]	@ (80094dc <HAL_RCC_OscConfig+0x278>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	4a81      	ldr	r2, [pc, #516]	@ (80094dc <HAL_RCC_OscConfig+0x278>)
 80092d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80092dc:	6013      	str	r3, [r2, #0]
 80092de:	e058      	b.n	8009392 <HAL_RCC_OscConfig+0x12e>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d112      	bne.n	800930e <HAL_RCC_OscConfig+0xaa>
 80092e8:	4b7c      	ldr	r3, [pc, #496]	@ (80094dc <HAL_RCC_OscConfig+0x278>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4a7b      	ldr	r2, [pc, #492]	@ (80094dc <HAL_RCC_OscConfig+0x278>)
 80092ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80092f2:	6013      	str	r3, [r2, #0]
 80092f4:	4b79      	ldr	r3, [pc, #484]	@ (80094dc <HAL_RCC_OscConfig+0x278>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a78      	ldr	r2, [pc, #480]	@ (80094dc <HAL_RCC_OscConfig+0x278>)
 80092fa:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80092fe:	6013      	str	r3, [r2, #0]
 8009300:	4b76      	ldr	r3, [pc, #472]	@ (80094dc <HAL_RCC_OscConfig+0x278>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a75      	ldr	r2, [pc, #468]	@ (80094dc <HAL_RCC_OscConfig+0x278>)
 8009306:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800930a:	6013      	str	r3, [r2, #0]
 800930c:	e041      	b.n	8009392 <HAL_RCC_OscConfig+0x12e>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009316:	d112      	bne.n	800933e <HAL_RCC_OscConfig+0xda>
 8009318:	4b70      	ldr	r3, [pc, #448]	@ (80094dc <HAL_RCC_OscConfig+0x278>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a6f      	ldr	r2, [pc, #444]	@ (80094dc <HAL_RCC_OscConfig+0x278>)
 800931e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009322:	6013      	str	r3, [r2, #0]
 8009324:	4b6d      	ldr	r3, [pc, #436]	@ (80094dc <HAL_RCC_OscConfig+0x278>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4a6c      	ldr	r2, [pc, #432]	@ (80094dc <HAL_RCC_OscConfig+0x278>)
 800932a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800932e:	6013      	str	r3, [r2, #0]
 8009330:	4b6a      	ldr	r3, [pc, #424]	@ (80094dc <HAL_RCC_OscConfig+0x278>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a69      	ldr	r2, [pc, #420]	@ (80094dc <HAL_RCC_OscConfig+0x278>)
 8009336:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800933a:	6013      	str	r3, [r2, #0]
 800933c:	e029      	b.n	8009392 <HAL_RCC_OscConfig+0x12e>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	685b      	ldr	r3, [r3, #4]
 8009342:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8009346:	d112      	bne.n	800936e <HAL_RCC_OscConfig+0x10a>
 8009348:	4b64      	ldr	r3, [pc, #400]	@ (80094dc <HAL_RCC_OscConfig+0x278>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a63      	ldr	r2, [pc, #396]	@ (80094dc <HAL_RCC_OscConfig+0x278>)
 800934e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009352:	6013      	str	r3, [r2, #0]
 8009354:	4b61      	ldr	r3, [pc, #388]	@ (80094dc <HAL_RCC_OscConfig+0x278>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a60      	ldr	r2, [pc, #384]	@ (80094dc <HAL_RCC_OscConfig+0x278>)
 800935a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800935e:	6013      	str	r3, [r2, #0]
 8009360:	4b5e      	ldr	r3, [pc, #376]	@ (80094dc <HAL_RCC_OscConfig+0x278>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4a5d      	ldr	r2, [pc, #372]	@ (80094dc <HAL_RCC_OscConfig+0x278>)
 8009366:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800936a:	6013      	str	r3, [r2, #0]
 800936c:	e011      	b.n	8009392 <HAL_RCC_OscConfig+0x12e>
 800936e:	4b5b      	ldr	r3, [pc, #364]	@ (80094dc <HAL_RCC_OscConfig+0x278>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4a5a      	ldr	r2, [pc, #360]	@ (80094dc <HAL_RCC_OscConfig+0x278>)
 8009374:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009378:	6013      	str	r3, [r2, #0]
 800937a:	4b58      	ldr	r3, [pc, #352]	@ (80094dc <HAL_RCC_OscConfig+0x278>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	4a57      	ldr	r2, [pc, #348]	@ (80094dc <HAL_RCC_OscConfig+0x278>)
 8009380:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009384:	6013      	str	r3, [r2, #0]
 8009386:	4b55      	ldr	r3, [pc, #340]	@ (80094dc <HAL_RCC_OscConfig+0x278>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a54      	ldr	r2, [pc, #336]	@ (80094dc <HAL_RCC_OscConfig+0x278>)
 800938c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009390:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d013      	beq.n	80093c2 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800939a:	f7fc f855 	bl	8005448 <HAL_GetTick>
 800939e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80093a0:	e008      	b.n	80093b4 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80093a2:	f7fc f851 	bl	8005448 <HAL_GetTick>
 80093a6:	4602      	mov	r2, r0
 80093a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093aa:	1ad3      	subs	r3, r2, r3
 80093ac:	2b64      	cmp	r3, #100	@ 0x64
 80093ae:	d901      	bls.n	80093b4 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80093b0:	2303      	movs	r3, #3
 80093b2:	e380      	b.n	8009ab6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80093b4:	4b49      	ldr	r3, [pc, #292]	@ (80094dc <HAL_RCC_OscConfig+0x278>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d0f0      	beq.n	80093a2 <HAL_RCC_OscConfig+0x13e>
 80093c0:	e014      	b.n	80093ec <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093c2:	f7fc f841 	bl	8005448 <HAL_GetTick>
 80093c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80093c8:	e008      	b.n	80093dc <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80093ca:	f7fc f83d 	bl	8005448 <HAL_GetTick>
 80093ce:	4602      	mov	r2, r0
 80093d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d2:	1ad3      	subs	r3, r2, r3
 80093d4:	2b64      	cmp	r3, #100	@ 0x64
 80093d6:	d901      	bls.n	80093dc <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80093d8:	2303      	movs	r3, #3
 80093da:	e36c      	b.n	8009ab6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80093dc:	4b3f      	ldr	r3, [pc, #252]	@ (80094dc <HAL_RCC_OscConfig+0x278>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d1f0      	bne.n	80093ca <HAL_RCC_OscConfig+0x166>
 80093e8:	e000      	b.n	80093ec <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80093ea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f003 0302 	and.w	r3, r3, #2
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	f000 808c 	beq.w	8009512 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80093fa:	4b38      	ldr	r3, [pc, #224]	@ (80094dc <HAL_RCC_OscConfig+0x278>)
 80093fc:	691b      	ldr	r3, [r3, #16]
 80093fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009402:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009404:	4b35      	ldr	r3, [pc, #212]	@ (80094dc <HAL_RCC_OscConfig+0x278>)
 8009406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009408:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800940a:	6a3b      	ldr	r3, [r7, #32]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d007      	beq.n	8009420 <HAL_RCC_OscConfig+0x1bc>
 8009410:	6a3b      	ldr	r3, [r7, #32]
 8009412:	2b18      	cmp	r3, #24
 8009414:	d137      	bne.n	8009486 <HAL_RCC_OscConfig+0x222>
 8009416:	69fb      	ldr	r3, [r7, #28]
 8009418:	f003 0303 	and.w	r3, r3, #3
 800941c:	2b00      	cmp	r3, #0
 800941e:	d132      	bne.n	8009486 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009420:	4b2e      	ldr	r3, [pc, #184]	@ (80094dc <HAL_RCC_OscConfig+0x278>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f003 0304 	and.w	r3, r3, #4
 8009428:	2b00      	cmp	r3, #0
 800942a:	d005      	beq.n	8009438 <HAL_RCC_OscConfig+0x1d4>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	68db      	ldr	r3, [r3, #12]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d101      	bne.n	8009438 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8009434:	2301      	movs	r3, #1
 8009436:	e33e      	b.n	8009ab6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009438:	4b28      	ldr	r3, [pc, #160]	@ (80094dc <HAL_RCC_OscConfig+0x278>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f023 0219 	bic.w	r2, r3, #25
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	68db      	ldr	r3, [r3, #12]
 8009444:	4925      	ldr	r1, [pc, #148]	@ (80094dc <HAL_RCC_OscConfig+0x278>)
 8009446:	4313      	orrs	r3, r2
 8009448:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800944a:	f7fb fffd 	bl	8005448 <HAL_GetTick>
 800944e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009450:	e008      	b.n	8009464 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009452:	f7fb fff9 	bl	8005448 <HAL_GetTick>
 8009456:	4602      	mov	r2, r0
 8009458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800945a:	1ad3      	subs	r3, r2, r3
 800945c:	2b02      	cmp	r3, #2
 800945e:	d901      	bls.n	8009464 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8009460:	2303      	movs	r3, #3
 8009462:	e328      	b.n	8009ab6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009464:	4b1d      	ldr	r3, [pc, #116]	@ (80094dc <HAL_RCC_OscConfig+0x278>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f003 0304 	and.w	r3, r3, #4
 800946c:	2b00      	cmp	r3, #0
 800946e:	d0f0      	beq.n	8009452 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009470:	4b1a      	ldr	r3, [pc, #104]	@ (80094dc <HAL_RCC_OscConfig+0x278>)
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	691b      	ldr	r3, [r3, #16]
 800947c:	061b      	lsls	r3, r3, #24
 800947e:	4917      	ldr	r1, [pc, #92]	@ (80094dc <HAL_RCC_OscConfig+0x278>)
 8009480:	4313      	orrs	r3, r2
 8009482:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009484:	e045      	b.n	8009512 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d028      	beq.n	80094e0 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800948e:	4b13      	ldr	r3, [pc, #76]	@ (80094dc <HAL_RCC_OscConfig+0x278>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f023 0219 	bic.w	r2, r3, #25
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	68db      	ldr	r3, [r3, #12]
 800949a:	4910      	ldr	r1, [pc, #64]	@ (80094dc <HAL_RCC_OscConfig+0x278>)
 800949c:	4313      	orrs	r3, r2
 800949e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094a0:	f7fb ffd2 	bl	8005448 <HAL_GetTick>
 80094a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80094a6:	e008      	b.n	80094ba <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80094a8:	f7fb ffce 	bl	8005448 <HAL_GetTick>
 80094ac:	4602      	mov	r2, r0
 80094ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094b0:	1ad3      	subs	r3, r2, r3
 80094b2:	2b02      	cmp	r3, #2
 80094b4:	d901      	bls.n	80094ba <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80094b6:	2303      	movs	r3, #3
 80094b8:	e2fd      	b.n	8009ab6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80094ba:	4b08      	ldr	r3, [pc, #32]	@ (80094dc <HAL_RCC_OscConfig+0x278>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f003 0304 	and.w	r3, r3, #4
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d0f0      	beq.n	80094a8 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80094c6:	4b05      	ldr	r3, [pc, #20]	@ (80094dc <HAL_RCC_OscConfig+0x278>)
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	691b      	ldr	r3, [r3, #16]
 80094d2:	061b      	lsls	r3, r3, #24
 80094d4:	4901      	ldr	r1, [pc, #4]	@ (80094dc <HAL_RCC_OscConfig+0x278>)
 80094d6:	4313      	orrs	r3, r2
 80094d8:	604b      	str	r3, [r1, #4]
 80094da:	e01a      	b.n	8009512 <HAL_RCC_OscConfig+0x2ae>
 80094dc:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80094e0:	4b97      	ldr	r3, [pc, #604]	@ (8009740 <HAL_RCC_OscConfig+0x4dc>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a96      	ldr	r2, [pc, #600]	@ (8009740 <HAL_RCC_OscConfig+0x4dc>)
 80094e6:	f023 0301 	bic.w	r3, r3, #1
 80094ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094ec:	f7fb ffac 	bl	8005448 <HAL_GetTick>
 80094f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80094f2:	e008      	b.n	8009506 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80094f4:	f7fb ffa8 	bl	8005448 <HAL_GetTick>
 80094f8:	4602      	mov	r2, r0
 80094fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094fc:	1ad3      	subs	r3, r2, r3
 80094fe:	2b02      	cmp	r3, #2
 8009500:	d901      	bls.n	8009506 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8009502:	2303      	movs	r3, #3
 8009504:	e2d7      	b.n	8009ab6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009506:	4b8e      	ldr	r3, [pc, #568]	@ (8009740 <HAL_RCC_OscConfig+0x4dc>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f003 0304 	and.w	r3, r3, #4
 800950e:	2b00      	cmp	r3, #0
 8009510:	d1f0      	bne.n	80094f4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f003 0310 	and.w	r3, r3, #16
 800951a:	2b00      	cmp	r3, #0
 800951c:	d06a      	beq.n	80095f4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800951e:	4b88      	ldr	r3, [pc, #544]	@ (8009740 <HAL_RCC_OscConfig+0x4dc>)
 8009520:	691b      	ldr	r3, [r3, #16]
 8009522:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009526:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009528:	4b85      	ldr	r3, [pc, #532]	@ (8009740 <HAL_RCC_OscConfig+0x4dc>)
 800952a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800952c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800952e:	69bb      	ldr	r3, [r7, #24]
 8009530:	2b08      	cmp	r3, #8
 8009532:	d007      	beq.n	8009544 <HAL_RCC_OscConfig+0x2e0>
 8009534:	69bb      	ldr	r3, [r7, #24]
 8009536:	2b18      	cmp	r3, #24
 8009538:	d11b      	bne.n	8009572 <HAL_RCC_OscConfig+0x30e>
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	f003 0303 	and.w	r3, r3, #3
 8009540:	2b01      	cmp	r3, #1
 8009542:	d116      	bne.n	8009572 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009544:	4b7e      	ldr	r3, [pc, #504]	@ (8009740 <HAL_RCC_OscConfig+0x4dc>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800954c:	2b00      	cmp	r3, #0
 800954e:	d005      	beq.n	800955c <HAL_RCC_OscConfig+0x2f8>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	69db      	ldr	r3, [r3, #28]
 8009554:	2b80      	cmp	r3, #128	@ 0x80
 8009556:	d001      	beq.n	800955c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8009558:	2301      	movs	r3, #1
 800955a:	e2ac      	b.n	8009ab6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800955c:	4b78      	ldr	r3, [pc, #480]	@ (8009740 <HAL_RCC_OscConfig+0x4dc>)
 800955e:	68db      	ldr	r3, [r3, #12]
 8009560:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6a1b      	ldr	r3, [r3, #32]
 8009568:	061b      	lsls	r3, r3, #24
 800956a:	4975      	ldr	r1, [pc, #468]	@ (8009740 <HAL_RCC_OscConfig+0x4dc>)
 800956c:	4313      	orrs	r3, r2
 800956e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009570:	e040      	b.n	80095f4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	69db      	ldr	r3, [r3, #28]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d023      	beq.n	80095c2 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800957a:	4b71      	ldr	r3, [pc, #452]	@ (8009740 <HAL_RCC_OscConfig+0x4dc>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a70      	ldr	r2, [pc, #448]	@ (8009740 <HAL_RCC_OscConfig+0x4dc>)
 8009580:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009584:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009586:	f7fb ff5f 	bl	8005448 <HAL_GetTick>
 800958a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800958c:	e008      	b.n	80095a0 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800958e:	f7fb ff5b 	bl	8005448 <HAL_GetTick>
 8009592:	4602      	mov	r2, r0
 8009594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009596:	1ad3      	subs	r3, r2, r3
 8009598:	2b02      	cmp	r3, #2
 800959a:	d901      	bls.n	80095a0 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800959c:	2303      	movs	r3, #3
 800959e:	e28a      	b.n	8009ab6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80095a0:	4b67      	ldr	r3, [pc, #412]	@ (8009740 <HAL_RCC_OscConfig+0x4dc>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d0f0      	beq.n	800958e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80095ac:	4b64      	ldr	r3, [pc, #400]	@ (8009740 <HAL_RCC_OscConfig+0x4dc>)
 80095ae:	68db      	ldr	r3, [r3, #12]
 80095b0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6a1b      	ldr	r3, [r3, #32]
 80095b8:	061b      	lsls	r3, r3, #24
 80095ba:	4961      	ldr	r1, [pc, #388]	@ (8009740 <HAL_RCC_OscConfig+0x4dc>)
 80095bc:	4313      	orrs	r3, r2
 80095be:	60cb      	str	r3, [r1, #12]
 80095c0:	e018      	b.n	80095f4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80095c2:	4b5f      	ldr	r3, [pc, #380]	@ (8009740 <HAL_RCC_OscConfig+0x4dc>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a5e      	ldr	r2, [pc, #376]	@ (8009740 <HAL_RCC_OscConfig+0x4dc>)
 80095c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80095cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095ce:	f7fb ff3b 	bl	8005448 <HAL_GetTick>
 80095d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80095d4:	e008      	b.n	80095e8 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80095d6:	f7fb ff37 	bl	8005448 <HAL_GetTick>
 80095da:	4602      	mov	r2, r0
 80095dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095de:	1ad3      	subs	r3, r2, r3
 80095e0:	2b02      	cmp	r3, #2
 80095e2:	d901      	bls.n	80095e8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80095e4:	2303      	movs	r3, #3
 80095e6:	e266      	b.n	8009ab6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80095e8:	4b55      	ldr	r3, [pc, #340]	@ (8009740 <HAL_RCC_OscConfig+0x4dc>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d1f0      	bne.n	80095d6 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f003 0308 	and.w	r3, r3, #8
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d036      	beq.n	800966e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	695b      	ldr	r3, [r3, #20]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d019      	beq.n	800963c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009608:	4b4d      	ldr	r3, [pc, #308]	@ (8009740 <HAL_RCC_OscConfig+0x4dc>)
 800960a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800960c:	4a4c      	ldr	r2, [pc, #304]	@ (8009740 <HAL_RCC_OscConfig+0x4dc>)
 800960e:	f043 0301 	orr.w	r3, r3, #1
 8009612:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009614:	f7fb ff18 	bl	8005448 <HAL_GetTick>
 8009618:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800961a:	e008      	b.n	800962e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800961c:	f7fb ff14 	bl	8005448 <HAL_GetTick>
 8009620:	4602      	mov	r2, r0
 8009622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009624:	1ad3      	subs	r3, r2, r3
 8009626:	2b02      	cmp	r3, #2
 8009628:	d901      	bls.n	800962e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800962a:	2303      	movs	r3, #3
 800962c:	e243      	b.n	8009ab6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800962e:	4b44      	ldr	r3, [pc, #272]	@ (8009740 <HAL_RCC_OscConfig+0x4dc>)
 8009630:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009632:	f003 0302 	and.w	r3, r3, #2
 8009636:	2b00      	cmp	r3, #0
 8009638:	d0f0      	beq.n	800961c <HAL_RCC_OscConfig+0x3b8>
 800963a:	e018      	b.n	800966e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800963c:	4b40      	ldr	r3, [pc, #256]	@ (8009740 <HAL_RCC_OscConfig+0x4dc>)
 800963e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009640:	4a3f      	ldr	r2, [pc, #252]	@ (8009740 <HAL_RCC_OscConfig+0x4dc>)
 8009642:	f023 0301 	bic.w	r3, r3, #1
 8009646:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009648:	f7fb fefe 	bl	8005448 <HAL_GetTick>
 800964c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800964e:	e008      	b.n	8009662 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009650:	f7fb fefa 	bl	8005448 <HAL_GetTick>
 8009654:	4602      	mov	r2, r0
 8009656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009658:	1ad3      	subs	r3, r2, r3
 800965a:	2b02      	cmp	r3, #2
 800965c:	d901      	bls.n	8009662 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800965e:	2303      	movs	r3, #3
 8009660:	e229      	b.n	8009ab6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009662:	4b37      	ldr	r3, [pc, #220]	@ (8009740 <HAL_RCC_OscConfig+0x4dc>)
 8009664:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009666:	f003 0302 	and.w	r3, r3, #2
 800966a:	2b00      	cmp	r3, #0
 800966c:	d1f0      	bne.n	8009650 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f003 0320 	and.w	r3, r3, #32
 8009676:	2b00      	cmp	r3, #0
 8009678:	d036      	beq.n	80096e8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	699b      	ldr	r3, [r3, #24]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d019      	beq.n	80096b6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009682:	4b2f      	ldr	r3, [pc, #188]	@ (8009740 <HAL_RCC_OscConfig+0x4dc>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a2e      	ldr	r2, [pc, #184]	@ (8009740 <HAL_RCC_OscConfig+0x4dc>)
 8009688:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800968c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800968e:	f7fb fedb 	bl	8005448 <HAL_GetTick>
 8009692:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009694:	e008      	b.n	80096a8 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009696:	f7fb fed7 	bl	8005448 <HAL_GetTick>
 800969a:	4602      	mov	r2, r0
 800969c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800969e:	1ad3      	subs	r3, r2, r3
 80096a0:	2b02      	cmp	r3, #2
 80096a2:	d901      	bls.n	80096a8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80096a4:	2303      	movs	r3, #3
 80096a6:	e206      	b.n	8009ab6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80096a8:	4b25      	ldr	r3, [pc, #148]	@ (8009740 <HAL_RCC_OscConfig+0x4dc>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d0f0      	beq.n	8009696 <HAL_RCC_OscConfig+0x432>
 80096b4:	e018      	b.n	80096e8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80096b6:	4b22      	ldr	r3, [pc, #136]	@ (8009740 <HAL_RCC_OscConfig+0x4dc>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a21      	ldr	r2, [pc, #132]	@ (8009740 <HAL_RCC_OscConfig+0x4dc>)
 80096bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80096c0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80096c2:	f7fb fec1 	bl	8005448 <HAL_GetTick>
 80096c6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80096c8:	e008      	b.n	80096dc <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80096ca:	f7fb febd 	bl	8005448 <HAL_GetTick>
 80096ce:	4602      	mov	r2, r0
 80096d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096d2:	1ad3      	subs	r3, r2, r3
 80096d4:	2b02      	cmp	r3, #2
 80096d6:	d901      	bls.n	80096dc <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80096d8:	2303      	movs	r3, #3
 80096da:	e1ec      	b.n	8009ab6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80096dc:	4b18      	ldr	r3, [pc, #96]	@ (8009740 <HAL_RCC_OscConfig+0x4dc>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d1f0      	bne.n	80096ca <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f003 0304 	and.w	r3, r3, #4
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	f000 80af 	beq.w	8009854 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80096f6:	4b13      	ldr	r3, [pc, #76]	@ (8009744 <HAL_RCC_OscConfig+0x4e0>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a12      	ldr	r2, [pc, #72]	@ (8009744 <HAL_RCC_OscConfig+0x4e0>)
 80096fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009700:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009702:	f7fb fea1 	bl	8005448 <HAL_GetTick>
 8009706:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009708:	e008      	b.n	800971c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800970a:	f7fb fe9d 	bl	8005448 <HAL_GetTick>
 800970e:	4602      	mov	r2, r0
 8009710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009712:	1ad3      	subs	r3, r2, r3
 8009714:	2b64      	cmp	r3, #100	@ 0x64
 8009716:	d901      	bls.n	800971c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8009718:	2303      	movs	r3, #3
 800971a:	e1cc      	b.n	8009ab6 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800971c:	4b09      	ldr	r3, [pc, #36]	@ (8009744 <HAL_RCC_OscConfig+0x4e0>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009724:	2b00      	cmp	r3, #0
 8009726:	d0f0      	beq.n	800970a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	2b01      	cmp	r3, #1
 800972e:	d10b      	bne.n	8009748 <HAL_RCC_OscConfig+0x4e4>
 8009730:	4b03      	ldr	r3, [pc, #12]	@ (8009740 <HAL_RCC_OscConfig+0x4dc>)
 8009732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009734:	4a02      	ldr	r2, [pc, #8]	@ (8009740 <HAL_RCC_OscConfig+0x4dc>)
 8009736:	f043 0301 	orr.w	r3, r3, #1
 800973a:	6713      	str	r3, [r2, #112]	@ 0x70
 800973c:	e05b      	b.n	80097f6 <HAL_RCC_OscConfig+0x592>
 800973e:	bf00      	nop
 8009740:	58024400 	.word	0x58024400
 8009744:	58024800 	.word	0x58024800
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d112      	bne.n	8009776 <HAL_RCC_OscConfig+0x512>
 8009750:	4b9d      	ldr	r3, [pc, #628]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 8009752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009754:	4a9c      	ldr	r2, [pc, #624]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 8009756:	f023 0301 	bic.w	r3, r3, #1
 800975a:	6713      	str	r3, [r2, #112]	@ 0x70
 800975c:	4b9a      	ldr	r3, [pc, #616]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 800975e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009760:	4a99      	ldr	r2, [pc, #612]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 8009762:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009766:	6713      	str	r3, [r2, #112]	@ 0x70
 8009768:	4b97      	ldr	r3, [pc, #604]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 800976a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800976c:	4a96      	ldr	r2, [pc, #600]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 800976e:	f023 0304 	bic.w	r3, r3, #4
 8009772:	6713      	str	r3, [r2, #112]	@ 0x70
 8009774:	e03f      	b.n	80097f6 <HAL_RCC_OscConfig+0x592>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	689b      	ldr	r3, [r3, #8]
 800977a:	2b05      	cmp	r3, #5
 800977c:	d112      	bne.n	80097a4 <HAL_RCC_OscConfig+0x540>
 800977e:	4b92      	ldr	r3, [pc, #584]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 8009780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009782:	4a91      	ldr	r2, [pc, #580]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 8009784:	f043 0304 	orr.w	r3, r3, #4
 8009788:	6713      	str	r3, [r2, #112]	@ 0x70
 800978a:	4b8f      	ldr	r3, [pc, #572]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 800978c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800978e:	4a8e      	ldr	r2, [pc, #568]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 8009790:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009794:	6713      	str	r3, [r2, #112]	@ 0x70
 8009796:	4b8c      	ldr	r3, [pc, #560]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 8009798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800979a:	4a8b      	ldr	r2, [pc, #556]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 800979c:	f043 0301 	orr.w	r3, r3, #1
 80097a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80097a2:	e028      	b.n	80097f6 <HAL_RCC_OscConfig+0x592>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	2b85      	cmp	r3, #133	@ 0x85
 80097aa:	d112      	bne.n	80097d2 <HAL_RCC_OscConfig+0x56e>
 80097ac:	4b86      	ldr	r3, [pc, #536]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 80097ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097b0:	4a85      	ldr	r2, [pc, #532]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 80097b2:	f043 0304 	orr.w	r3, r3, #4
 80097b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80097b8:	4b83      	ldr	r3, [pc, #524]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 80097ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097bc:	4a82      	ldr	r2, [pc, #520]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 80097be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80097c4:	4b80      	ldr	r3, [pc, #512]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 80097c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097c8:	4a7f      	ldr	r2, [pc, #508]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 80097ca:	f043 0301 	orr.w	r3, r3, #1
 80097ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80097d0:	e011      	b.n	80097f6 <HAL_RCC_OscConfig+0x592>
 80097d2:	4b7d      	ldr	r3, [pc, #500]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 80097d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097d6:	4a7c      	ldr	r2, [pc, #496]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 80097d8:	f023 0301 	bic.w	r3, r3, #1
 80097dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80097de:	4b7a      	ldr	r3, [pc, #488]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 80097e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097e2:	4a79      	ldr	r2, [pc, #484]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 80097e4:	f023 0304 	bic.w	r3, r3, #4
 80097e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80097ea:	4b77      	ldr	r3, [pc, #476]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 80097ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097ee:	4a76      	ldr	r2, [pc, #472]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 80097f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80097f4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	689b      	ldr	r3, [r3, #8]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d015      	beq.n	800982a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097fe:	f7fb fe23 	bl	8005448 <HAL_GetTick>
 8009802:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009804:	e00a      	b.n	800981c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009806:	f7fb fe1f 	bl	8005448 <HAL_GetTick>
 800980a:	4602      	mov	r2, r0
 800980c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800980e:	1ad3      	subs	r3, r2, r3
 8009810:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009814:	4293      	cmp	r3, r2
 8009816:	d901      	bls.n	800981c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8009818:	2303      	movs	r3, #3
 800981a:	e14c      	b.n	8009ab6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800981c:	4b6a      	ldr	r3, [pc, #424]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 800981e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009820:	f003 0302 	and.w	r3, r3, #2
 8009824:	2b00      	cmp	r3, #0
 8009826:	d0ee      	beq.n	8009806 <HAL_RCC_OscConfig+0x5a2>
 8009828:	e014      	b.n	8009854 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800982a:	f7fb fe0d 	bl	8005448 <HAL_GetTick>
 800982e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009830:	e00a      	b.n	8009848 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009832:	f7fb fe09 	bl	8005448 <HAL_GetTick>
 8009836:	4602      	mov	r2, r0
 8009838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800983a:	1ad3      	subs	r3, r2, r3
 800983c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009840:	4293      	cmp	r3, r2
 8009842:	d901      	bls.n	8009848 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8009844:	2303      	movs	r3, #3
 8009846:	e136      	b.n	8009ab6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009848:	4b5f      	ldr	r3, [pc, #380]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 800984a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800984c:	f003 0302 	and.w	r3, r3, #2
 8009850:	2b00      	cmp	r3, #0
 8009852:	d1ee      	bne.n	8009832 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009858:	2b00      	cmp	r3, #0
 800985a:	f000 812b 	beq.w	8009ab4 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800985e:	4b5a      	ldr	r3, [pc, #360]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 8009860:	691b      	ldr	r3, [r3, #16]
 8009862:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009866:	2b18      	cmp	r3, #24
 8009868:	f000 80bb 	beq.w	80099e2 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009870:	2b02      	cmp	r3, #2
 8009872:	f040 8095 	bne.w	80099a0 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009876:	4b54      	ldr	r3, [pc, #336]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a53      	ldr	r2, [pc, #332]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 800987c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009880:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009882:	f7fb fde1 	bl	8005448 <HAL_GetTick>
 8009886:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009888:	e008      	b.n	800989c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800988a:	f7fb fddd 	bl	8005448 <HAL_GetTick>
 800988e:	4602      	mov	r2, r0
 8009890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009892:	1ad3      	subs	r3, r2, r3
 8009894:	2b02      	cmp	r3, #2
 8009896:	d901      	bls.n	800989c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8009898:	2303      	movs	r3, #3
 800989a:	e10c      	b.n	8009ab6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800989c:	4b4a      	ldr	r3, [pc, #296]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d1f0      	bne.n	800988a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80098a8:	4b47      	ldr	r3, [pc, #284]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 80098aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80098ac:	4b47      	ldr	r3, [pc, #284]	@ (80099cc <HAL_RCC_OscConfig+0x768>)
 80098ae:	4013      	ands	r3, r2
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80098b4:	687a      	ldr	r2, [r7, #4]
 80098b6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80098b8:	0112      	lsls	r2, r2, #4
 80098ba:	430a      	orrs	r2, r1
 80098bc:	4942      	ldr	r1, [pc, #264]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 80098be:	4313      	orrs	r3, r2
 80098c0:	628b      	str	r3, [r1, #40]	@ 0x28
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098c6:	3b01      	subs	r3, #1
 80098c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098d0:	3b01      	subs	r3, #1
 80098d2:	025b      	lsls	r3, r3, #9
 80098d4:	b29b      	uxth	r3, r3
 80098d6:	431a      	orrs	r2, r3
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098dc:	3b01      	subs	r3, #1
 80098de:	041b      	lsls	r3, r3, #16
 80098e0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80098e4:	431a      	orrs	r2, r3
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098ea:	3b01      	subs	r3, #1
 80098ec:	061b      	lsls	r3, r3, #24
 80098ee:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80098f2:	4935      	ldr	r1, [pc, #212]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 80098f4:	4313      	orrs	r3, r2
 80098f6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80098f8:	4b33      	ldr	r3, [pc, #204]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 80098fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098fc:	4a32      	ldr	r2, [pc, #200]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 80098fe:	f023 0301 	bic.w	r3, r3, #1
 8009902:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009904:	4b30      	ldr	r3, [pc, #192]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 8009906:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009908:	4b31      	ldr	r3, [pc, #196]	@ (80099d0 <HAL_RCC_OscConfig+0x76c>)
 800990a:	4013      	ands	r3, r2
 800990c:	687a      	ldr	r2, [r7, #4]
 800990e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009910:	00d2      	lsls	r2, r2, #3
 8009912:	492d      	ldr	r1, [pc, #180]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 8009914:	4313      	orrs	r3, r2
 8009916:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009918:	4b2b      	ldr	r3, [pc, #172]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 800991a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800991c:	f023 020c 	bic.w	r2, r3, #12
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009924:	4928      	ldr	r1, [pc, #160]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 8009926:	4313      	orrs	r3, r2
 8009928:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800992a:	4b27      	ldr	r3, [pc, #156]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 800992c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800992e:	f023 0202 	bic.w	r2, r3, #2
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009936:	4924      	ldr	r1, [pc, #144]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 8009938:	4313      	orrs	r3, r2
 800993a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800993c:	4b22      	ldr	r3, [pc, #136]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 800993e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009940:	4a21      	ldr	r2, [pc, #132]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 8009942:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009946:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009948:	4b1f      	ldr	r3, [pc, #124]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 800994a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800994c:	4a1e      	ldr	r2, [pc, #120]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 800994e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009952:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009954:	4b1c      	ldr	r3, [pc, #112]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 8009956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009958:	4a1b      	ldr	r2, [pc, #108]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 800995a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800995e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009960:	4b19      	ldr	r3, [pc, #100]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 8009962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009964:	4a18      	ldr	r2, [pc, #96]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 8009966:	f043 0301 	orr.w	r3, r3, #1
 800996a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800996c:	4b16      	ldr	r3, [pc, #88]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a15      	ldr	r2, [pc, #84]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 8009972:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009976:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009978:	f7fb fd66 	bl	8005448 <HAL_GetTick>
 800997c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800997e:	e008      	b.n	8009992 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009980:	f7fb fd62 	bl	8005448 <HAL_GetTick>
 8009984:	4602      	mov	r2, r0
 8009986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009988:	1ad3      	subs	r3, r2, r3
 800998a:	2b02      	cmp	r3, #2
 800998c:	d901      	bls.n	8009992 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800998e:	2303      	movs	r3, #3
 8009990:	e091      	b.n	8009ab6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009992:	4b0d      	ldr	r3, [pc, #52]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800999a:	2b00      	cmp	r3, #0
 800999c:	d0f0      	beq.n	8009980 <HAL_RCC_OscConfig+0x71c>
 800999e:	e089      	b.n	8009ab4 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80099a0:	4b09      	ldr	r3, [pc, #36]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a08      	ldr	r2, [pc, #32]	@ (80099c8 <HAL_RCC_OscConfig+0x764>)
 80099a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80099aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099ac:	f7fb fd4c 	bl	8005448 <HAL_GetTick>
 80099b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80099b2:	e00f      	b.n	80099d4 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80099b4:	f7fb fd48 	bl	8005448 <HAL_GetTick>
 80099b8:	4602      	mov	r2, r0
 80099ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099bc:	1ad3      	subs	r3, r2, r3
 80099be:	2b02      	cmp	r3, #2
 80099c0:	d908      	bls.n	80099d4 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80099c2:	2303      	movs	r3, #3
 80099c4:	e077      	b.n	8009ab6 <HAL_RCC_OscConfig+0x852>
 80099c6:	bf00      	nop
 80099c8:	58024400 	.word	0x58024400
 80099cc:	fffffc0c 	.word	0xfffffc0c
 80099d0:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80099d4:	4b3a      	ldr	r3, [pc, #232]	@ (8009ac0 <HAL_RCC_OscConfig+0x85c>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d1e9      	bne.n	80099b4 <HAL_RCC_OscConfig+0x750>
 80099e0:	e068      	b.n	8009ab4 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80099e2:	4b37      	ldr	r3, [pc, #220]	@ (8009ac0 <HAL_RCC_OscConfig+0x85c>)
 80099e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099e6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80099e8:	4b35      	ldr	r3, [pc, #212]	@ (8009ac0 <HAL_RCC_OscConfig+0x85c>)
 80099ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099ec:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	d031      	beq.n	8009a5a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	f003 0203 	and.w	r2, r3, #3
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d12a      	bne.n	8009a5a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	091b      	lsrs	r3, r3, #4
 8009a08:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d122      	bne.n	8009a5a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a1e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d11a      	bne.n	8009a5a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	0a5b      	lsrs	r3, r3, #9
 8009a28:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a30:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d111      	bne.n	8009a5a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	0c1b      	lsrs	r3, r3, #16
 8009a3a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a42:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009a44:	429a      	cmp	r2, r3
 8009a46:	d108      	bne.n	8009a5a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	0e1b      	lsrs	r3, r3, #24
 8009a4c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a54:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009a56:	429a      	cmp	r2, r3
 8009a58:	d001      	beq.n	8009a5e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	e02b      	b.n	8009ab6 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009a5e:	4b18      	ldr	r3, [pc, #96]	@ (8009ac0 <HAL_RCC_OscConfig+0x85c>)
 8009a60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a62:	08db      	lsrs	r3, r3, #3
 8009a64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a68:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a6e:	693a      	ldr	r2, [r7, #16]
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d01f      	beq.n	8009ab4 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009a74:	4b12      	ldr	r3, [pc, #72]	@ (8009ac0 <HAL_RCC_OscConfig+0x85c>)
 8009a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a78:	4a11      	ldr	r2, [pc, #68]	@ (8009ac0 <HAL_RCC_OscConfig+0x85c>)
 8009a7a:	f023 0301 	bic.w	r3, r3, #1
 8009a7e:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009a80:	f7fb fce2 	bl	8005448 <HAL_GetTick>
 8009a84:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009a86:	bf00      	nop
 8009a88:	f7fb fcde 	bl	8005448 <HAL_GetTick>
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d0f9      	beq.n	8009a88 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009a94:	4b0a      	ldr	r3, [pc, #40]	@ (8009ac0 <HAL_RCC_OscConfig+0x85c>)
 8009a96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009a98:	4b0a      	ldr	r3, [pc, #40]	@ (8009ac4 <HAL_RCC_OscConfig+0x860>)
 8009a9a:	4013      	ands	r3, r2
 8009a9c:	687a      	ldr	r2, [r7, #4]
 8009a9e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009aa0:	00d2      	lsls	r2, r2, #3
 8009aa2:	4907      	ldr	r1, [pc, #28]	@ (8009ac0 <HAL_RCC_OscConfig+0x85c>)
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009aa8:	4b05      	ldr	r3, [pc, #20]	@ (8009ac0 <HAL_RCC_OscConfig+0x85c>)
 8009aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aac:	4a04      	ldr	r2, [pc, #16]	@ (8009ac0 <HAL_RCC_OscConfig+0x85c>)
 8009aae:	f043 0301 	orr.w	r3, r3, #1
 8009ab2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009ab4:	2300      	movs	r3, #0
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3730      	adds	r7, #48	@ 0x30
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	58024400 	.word	0x58024400
 8009ac4:	ffff0007 	.word	0xffff0007

08009ac8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b086      	sub	sp, #24
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d101      	bne.n	8009adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	e19c      	b.n	8009e16 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009adc:	4b8a      	ldr	r3, [pc, #552]	@ (8009d08 <HAL_RCC_ClockConfig+0x240>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f003 030f 	and.w	r3, r3, #15
 8009ae4:	683a      	ldr	r2, [r7, #0]
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d910      	bls.n	8009b0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009aea:	4b87      	ldr	r3, [pc, #540]	@ (8009d08 <HAL_RCC_ClockConfig+0x240>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f023 020f 	bic.w	r2, r3, #15
 8009af2:	4985      	ldr	r1, [pc, #532]	@ (8009d08 <HAL_RCC_ClockConfig+0x240>)
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	4313      	orrs	r3, r2
 8009af8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009afa:	4b83      	ldr	r3, [pc, #524]	@ (8009d08 <HAL_RCC_ClockConfig+0x240>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f003 030f 	and.w	r3, r3, #15
 8009b02:	683a      	ldr	r2, [r7, #0]
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d001      	beq.n	8009b0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009b08:	2301      	movs	r3, #1
 8009b0a:	e184      	b.n	8009e16 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f003 0304 	and.w	r3, r3, #4
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d010      	beq.n	8009b3a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	691a      	ldr	r2, [r3, #16]
 8009b1c:	4b7b      	ldr	r3, [pc, #492]	@ (8009d0c <HAL_RCC_ClockConfig+0x244>)
 8009b1e:	699b      	ldr	r3, [r3, #24]
 8009b20:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d908      	bls.n	8009b3a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009b28:	4b78      	ldr	r3, [pc, #480]	@ (8009d0c <HAL_RCC_ClockConfig+0x244>)
 8009b2a:	699b      	ldr	r3, [r3, #24]
 8009b2c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	691b      	ldr	r3, [r3, #16]
 8009b34:	4975      	ldr	r1, [pc, #468]	@ (8009d0c <HAL_RCC_ClockConfig+0x244>)
 8009b36:	4313      	orrs	r3, r2
 8009b38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f003 0308 	and.w	r3, r3, #8
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d010      	beq.n	8009b68 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	695a      	ldr	r2, [r3, #20]
 8009b4a:	4b70      	ldr	r3, [pc, #448]	@ (8009d0c <HAL_RCC_ClockConfig+0x244>)
 8009b4c:	69db      	ldr	r3, [r3, #28]
 8009b4e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009b52:	429a      	cmp	r2, r3
 8009b54:	d908      	bls.n	8009b68 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009b56:	4b6d      	ldr	r3, [pc, #436]	@ (8009d0c <HAL_RCC_ClockConfig+0x244>)
 8009b58:	69db      	ldr	r3, [r3, #28]
 8009b5a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	695b      	ldr	r3, [r3, #20]
 8009b62:	496a      	ldr	r1, [pc, #424]	@ (8009d0c <HAL_RCC_ClockConfig+0x244>)
 8009b64:	4313      	orrs	r3, r2
 8009b66:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f003 0310 	and.w	r3, r3, #16
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d010      	beq.n	8009b96 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	699a      	ldr	r2, [r3, #24]
 8009b78:	4b64      	ldr	r3, [pc, #400]	@ (8009d0c <HAL_RCC_ClockConfig+0x244>)
 8009b7a:	69db      	ldr	r3, [r3, #28]
 8009b7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d908      	bls.n	8009b96 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009b84:	4b61      	ldr	r3, [pc, #388]	@ (8009d0c <HAL_RCC_ClockConfig+0x244>)
 8009b86:	69db      	ldr	r3, [r3, #28]
 8009b88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	699b      	ldr	r3, [r3, #24]
 8009b90:	495e      	ldr	r1, [pc, #376]	@ (8009d0c <HAL_RCC_ClockConfig+0x244>)
 8009b92:	4313      	orrs	r3, r2
 8009b94:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f003 0320 	and.w	r3, r3, #32
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d010      	beq.n	8009bc4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	69da      	ldr	r2, [r3, #28]
 8009ba6:	4b59      	ldr	r3, [pc, #356]	@ (8009d0c <HAL_RCC_ClockConfig+0x244>)
 8009ba8:	6a1b      	ldr	r3, [r3, #32]
 8009baa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d908      	bls.n	8009bc4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009bb2:	4b56      	ldr	r3, [pc, #344]	@ (8009d0c <HAL_RCC_ClockConfig+0x244>)
 8009bb4:	6a1b      	ldr	r3, [r3, #32]
 8009bb6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	69db      	ldr	r3, [r3, #28]
 8009bbe:	4953      	ldr	r1, [pc, #332]	@ (8009d0c <HAL_RCC_ClockConfig+0x244>)
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f003 0302 	and.w	r3, r3, #2
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d010      	beq.n	8009bf2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	68da      	ldr	r2, [r3, #12]
 8009bd4:	4b4d      	ldr	r3, [pc, #308]	@ (8009d0c <HAL_RCC_ClockConfig+0x244>)
 8009bd6:	699b      	ldr	r3, [r3, #24]
 8009bd8:	f003 030f 	and.w	r3, r3, #15
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d908      	bls.n	8009bf2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009be0:	4b4a      	ldr	r3, [pc, #296]	@ (8009d0c <HAL_RCC_ClockConfig+0x244>)
 8009be2:	699b      	ldr	r3, [r3, #24]
 8009be4:	f023 020f 	bic.w	r2, r3, #15
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	68db      	ldr	r3, [r3, #12]
 8009bec:	4947      	ldr	r1, [pc, #284]	@ (8009d0c <HAL_RCC_ClockConfig+0x244>)
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f003 0301 	and.w	r3, r3, #1
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d055      	beq.n	8009caa <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009bfe:	4b43      	ldr	r3, [pc, #268]	@ (8009d0c <HAL_RCC_ClockConfig+0x244>)
 8009c00:	699b      	ldr	r3, [r3, #24]
 8009c02:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	689b      	ldr	r3, [r3, #8]
 8009c0a:	4940      	ldr	r1, [pc, #256]	@ (8009d0c <HAL_RCC_ClockConfig+0x244>)
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	2b02      	cmp	r3, #2
 8009c16:	d107      	bne.n	8009c28 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009c18:	4b3c      	ldr	r3, [pc, #240]	@ (8009d0c <HAL_RCC_ClockConfig+0x244>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d121      	bne.n	8009c68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009c24:	2301      	movs	r3, #1
 8009c26:	e0f6      	b.n	8009e16 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	2b03      	cmp	r3, #3
 8009c2e:	d107      	bne.n	8009c40 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009c30:	4b36      	ldr	r3, [pc, #216]	@ (8009d0c <HAL_RCC_ClockConfig+0x244>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d115      	bne.n	8009c68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	e0ea      	b.n	8009e16 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d107      	bne.n	8009c58 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009c48:	4b30      	ldr	r3, [pc, #192]	@ (8009d0c <HAL_RCC_ClockConfig+0x244>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d109      	bne.n	8009c68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009c54:	2301      	movs	r3, #1
 8009c56:	e0de      	b.n	8009e16 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c58:	4b2c      	ldr	r3, [pc, #176]	@ (8009d0c <HAL_RCC_ClockConfig+0x244>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f003 0304 	and.w	r3, r3, #4
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d101      	bne.n	8009c68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009c64:	2301      	movs	r3, #1
 8009c66:	e0d6      	b.n	8009e16 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009c68:	4b28      	ldr	r3, [pc, #160]	@ (8009d0c <HAL_RCC_ClockConfig+0x244>)
 8009c6a:	691b      	ldr	r3, [r3, #16]
 8009c6c:	f023 0207 	bic.w	r2, r3, #7
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	4925      	ldr	r1, [pc, #148]	@ (8009d0c <HAL_RCC_ClockConfig+0x244>)
 8009c76:	4313      	orrs	r3, r2
 8009c78:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c7a:	f7fb fbe5 	bl	8005448 <HAL_GetTick>
 8009c7e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c80:	e00a      	b.n	8009c98 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009c82:	f7fb fbe1 	bl	8005448 <HAL_GetTick>
 8009c86:	4602      	mov	r2, r0
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	1ad3      	subs	r3, r2, r3
 8009c8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d901      	bls.n	8009c98 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009c94:	2303      	movs	r3, #3
 8009c96:	e0be      	b.n	8009e16 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c98:	4b1c      	ldr	r3, [pc, #112]	@ (8009d0c <HAL_RCC_ClockConfig+0x244>)
 8009c9a:	691b      	ldr	r3, [r3, #16]
 8009c9c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	00db      	lsls	r3, r3, #3
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d1eb      	bne.n	8009c82 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f003 0302 	and.w	r3, r3, #2
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d010      	beq.n	8009cd8 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	68da      	ldr	r2, [r3, #12]
 8009cba:	4b14      	ldr	r3, [pc, #80]	@ (8009d0c <HAL_RCC_ClockConfig+0x244>)
 8009cbc:	699b      	ldr	r3, [r3, #24]
 8009cbe:	f003 030f 	and.w	r3, r3, #15
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d208      	bcs.n	8009cd8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009cc6:	4b11      	ldr	r3, [pc, #68]	@ (8009d0c <HAL_RCC_ClockConfig+0x244>)
 8009cc8:	699b      	ldr	r3, [r3, #24]
 8009cca:	f023 020f 	bic.w	r2, r3, #15
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	68db      	ldr	r3, [r3, #12]
 8009cd2:	490e      	ldr	r1, [pc, #56]	@ (8009d0c <HAL_RCC_ClockConfig+0x244>)
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8009d08 <HAL_RCC_ClockConfig+0x240>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f003 030f 	and.w	r3, r3, #15
 8009ce0:	683a      	ldr	r2, [r7, #0]
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d214      	bcs.n	8009d10 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ce6:	4b08      	ldr	r3, [pc, #32]	@ (8009d08 <HAL_RCC_ClockConfig+0x240>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f023 020f 	bic.w	r2, r3, #15
 8009cee:	4906      	ldr	r1, [pc, #24]	@ (8009d08 <HAL_RCC_ClockConfig+0x240>)
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009cf6:	4b04      	ldr	r3, [pc, #16]	@ (8009d08 <HAL_RCC_ClockConfig+0x240>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f003 030f 	and.w	r3, r3, #15
 8009cfe:	683a      	ldr	r2, [r7, #0]
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d005      	beq.n	8009d10 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009d04:	2301      	movs	r3, #1
 8009d06:	e086      	b.n	8009e16 <HAL_RCC_ClockConfig+0x34e>
 8009d08:	52002000 	.word	0x52002000
 8009d0c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f003 0304 	and.w	r3, r3, #4
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d010      	beq.n	8009d3e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	691a      	ldr	r2, [r3, #16]
 8009d20:	4b3f      	ldr	r3, [pc, #252]	@ (8009e20 <HAL_RCC_ClockConfig+0x358>)
 8009d22:	699b      	ldr	r3, [r3, #24]
 8009d24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d208      	bcs.n	8009d3e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009d2c:	4b3c      	ldr	r3, [pc, #240]	@ (8009e20 <HAL_RCC_ClockConfig+0x358>)
 8009d2e:	699b      	ldr	r3, [r3, #24]
 8009d30:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	691b      	ldr	r3, [r3, #16]
 8009d38:	4939      	ldr	r1, [pc, #228]	@ (8009e20 <HAL_RCC_ClockConfig+0x358>)
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f003 0308 	and.w	r3, r3, #8
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d010      	beq.n	8009d6c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	695a      	ldr	r2, [r3, #20]
 8009d4e:	4b34      	ldr	r3, [pc, #208]	@ (8009e20 <HAL_RCC_ClockConfig+0x358>)
 8009d50:	69db      	ldr	r3, [r3, #28]
 8009d52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d208      	bcs.n	8009d6c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009d5a:	4b31      	ldr	r3, [pc, #196]	@ (8009e20 <HAL_RCC_ClockConfig+0x358>)
 8009d5c:	69db      	ldr	r3, [r3, #28]
 8009d5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	695b      	ldr	r3, [r3, #20]
 8009d66:	492e      	ldr	r1, [pc, #184]	@ (8009e20 <HAL_RCC_ClockConfig+0x358>)
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f003 0310 	and.w	r3, r3, #16
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d010      	beq.n	8009d9a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	699a      	ldr	r2, [r3, #24]
 8009d7c:	4b28      	ldr	r3, [pc, #160]	@ (8009e20 <HAL_RCC_ClockConfig+0x358>)
 8009d7e:	69db      	ldr	r3, [r3, #28]
 8009d80:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d208      	bcs.n	8009d9a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009d88:	4b25      	ldr	r3, [pc, #148]	@ (8009e20 <HAL_RCC_ClockConfig+0x358>)
 8009d8a:	69db      	ldr	r3, [r3, #28]
 8009d8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	699b      	ldr	r3, [r3, #24]
 8009d94:	4922      	ldr	r1, [pc, #136]	@ (8009e20 <HAL_RCC_ClockConfig+0x358>)
 8009d96:	4313      	orrs	r3, r2
 8009d98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f003 0320 	and.w	r3, r3, #32
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d010      	beq.n	8009dc8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	69da      	ldr	r2, [r3, #28]
 8009daa:	4b1d      	ldr	r3, [pc, #116]	@ (8009e20 <HAL_RCC_ClockConfig+0x358>)
 8009dac:	6a1b      	ldr	r3, [r3, #32]
 8009dae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009db2:	429a      	cmp	r2, r3
 8009db4:	d208      	bcs.n	8009dc8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009db6:	4b1a      	ldr	r3, [pc, #104]	@ (8009e20 <HAL_RCC_ClockConfig+0x358>)
 8009db8:	6a1b      	ldr	r3, [r3, #32]
 8009dba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	69db      	ldr	r3, [r3, #28]
 8009dc2:	4917      	ldr	r1, [pc, #92]	@ (8009e20 <HAL_RCC_ClockConfig+0x358>)
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8009dc8:	f000 f834 	bl	8009e34 <HAL_RCC_GetSysClockFreq>
 8009dcc:	4602      	mov	r2, r0
 8009dce:	4b14      	ldr	r3, [pc, #80]	@ (8009e20 <HAL_RCC_ClockConfig+0x358>)
 8009dd0:	699b      	ldr	r3, [r3, #24]
 8009dd2:	0a1b      	lsrs	r3, r3, #8
 8009dd4:	f003 030f 	and.w	r3, r3, #15
 8009dd8:	4912      	ldr	r1, [pc, #72]	@ (8009e24 <HAL_RCC_ClockConfig+0x35c>)
 8009dda:	5ccb      	ldrb	r3, [r1, r3]
 8009ddc:	f003 031f 	and.w	r3, r3, #31
 8009de0:	fa22 f303 	lsr.w	r3, r2, r3
 8009de4:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8009de6:	4b0e      	ldr	r3, [pc, #56]	@ (8009e20 <HAL_RCC_ClockConfig+0x358>)
 8009de8:	699b      	ldr	r3, [r3, #24]
 8009dea:	f003 030f 	and.w	r3, r3, #15
 8009dee:	4a0d      	ldr	r2, [pc, #52]	@ (8009e24 <HAL_RCC_ClockConfig+0x35c>)
 8009df0:	5cd3      	ldrb	r3, [r2, r3]
 8009df2:	f003 031f 	and.w	r3, r3, #31
 8009df6:	693a      	ldr	r2, [r7, #16]
 8009df8:	fa22 f303 	lsr.w	r3, r2, r3
 8009dfc:	4a0a      	ldr	r2, [pc, #40]	@ (8009e28 <HAL_RCC_ClockConfig+0x360>)
 8009dfe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009e00:	4a0a      	ldr	r2, [pc, #40]	@ (8009e2c <HAL_RCC_ClockConfig+0x364>)
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009e06:	4b0a      	ldr	r3, [pc, #40]	@ (8009e30 <HAL_RCC_ClockConfig+0x368>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7f8 f8d0 	bl	8001fb0 <HAL_InitTick>
 8009e10:	4603      	mov	r3, r0
 8009e12:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3718      	adds	r7, #24
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}
 8009e1e:	bf00      	nop
 8009e20:	58024400 	.word	0x58024400
 8009e24:	08018994 	.word	0x08018994
 8009e28:	24000004 	.word	0x24000004
 8009e2c:	24000000 	.word	0x24000000
 8009e30:	240000a4 	.word	0x240000a4

08009e34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b089      	sub	sp, #36	@ 0x24
 8009e38:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009e3a:	4bb3      	ldr	r3, [pc, #716]	@ (800a108 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e3c:	691b      	ldr	r3, [r3, #16]
 8009e3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009e42:	2b18      	cmp	r3, #24
 8009e44:	f200 8155 	bhi.w	800a0f2 <HAL_RCC_GetSysClockFreq+0x2be>
 8009e48:	a201      	add	r2, pc, #4	@ (adr r2, 8009e50 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e4e:	bf00      	nop
 8009e50:	08009eb5 	.word	0x08009eb5
 8009e54:	0800a0f3 	.word	0x0800a0f3
 8009e58:	0800a0f3 	.word	0x0800a0f3
 8009e5c:	0800a0f3 	.word	0x0800a0f3
 8009e60:	0800a0f3 	.word	0x0800a0f3
 8009e64:	0800a0f3 	.word	0x0800a0f3
 8009e68:	0800a0f3 	.word	0x0800a0f3
 8009e6c:	0800a0f3 	.word	0x0800a0f3
 8009e70:	08009edb 	.word	0x08009edb
 8009e74:	0800a0f3 	.word	0x0800a0f3
 8009e78:	0800a0f3 	.word	0x0800a0f3
 8009e7c:	0800a0f3 	.word	0x0800a0f3
 8009e80:	0800a0f3 	.word	0x0800a0f3
 8009e84:	0800a0f3 	.word	0x0800a0f3
 8009e88:	0800a0f3 	.word	0x0800a0f3
 8009e8c:	0800a0f3 	.word	0x0800a0f3
 8009e90:	08009ee1 	.word	0x08009ee1
 8009e94:	0800a0f3 	.word	0x0800a0f3
 8009e98:	0800a0f3 	.word	0x0800a0f3
 8009e9c:	0800a0f3 	.word	0x0800a0f3
 8009ea0:	0800a0f3 	.word	0x0800a0f3
 8009ea4:	0800a0f3 	.word	0x0800a0f3
 8009ea8:	0800a0f3 	.word	0x0800a0f3
 8009eac:	0800a0f3 	.word	0x0800a0f3
 8009eb0:	08009ee7 	.word	0x08009ee7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009eb4:	4b94      	ldr	r3, [pc, #592]	@ (800a108 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f003 0320 	and.w	r3, r3, #32
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d009      	beq.n	8009ed4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ec0:	4b91      	ldr	r3, [pc, #580]	@ (800a108 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	08db      	lsrs	r3, r3, #3
 8009ec6:	f003 0303 	and.w	r3, r3, #3
 8009eca:	4a90      	ldr	r2, [pc, #576]	@ (800a10c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8009ed0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009ed2:	e111      	b.n	800a0f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009ed4:	4b8d      	ldr	r3, [pc, #564]	@ (800a10c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009ed6:	61bb      	str	r3, [r7, #24]
      break;
 8009ed8:	e10e      	b.n	800a0f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009eda:	4b8d      	ldr	r3, [pc, #564]	@ (800a110 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009edc:	61bb      	str	r3, [r7, #24]
      break;
 8009ede:	e10b      	b.n	800a0f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009ee0:	4b8c      	ldr	r3, [pc, #560]	@ (800a114 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009ee2:	61bb      	str	r3, [r7, #24]
      break;
 8009ee4:	e108      	b.n	800a0f8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ee6:	4b88      	ldr	r3, [pc, #544]	@ (800a108 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eea:	f003 0303 	and.w	r3, r3, #3
 8009eee:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009ef0:	4b85      	ldr	r3, [pc, #532]	@ (800a108 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ef4:	091b      	lsrs	r3, r3, #4
 8009ef6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009efa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009efc:	4b82      	ldr	r3, [pc, #520]	@ (800a108 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f00:	f003 0301 	and.w	r3, r3, #1
 8009f04:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009f06:	4b80      	ldr	r3, [pc, #512]	@ (800a108 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f0a:	08db      	lsrs	r3, r3, #3
 8009f0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f10:	68fa      	ldr	r2, [r7, #12]
 8009f12:	fb02 f303 	mul.w	r3, r2, r3
 8009f16:	ee07 3a90 	vmov	s15, r3
 8009f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f1e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	f000 80e1 	beq.w	800a0ec <HAL_RCC_GetSysClockFreq+0x2b8>
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	2b02      	cmp	r3, #2
 8009f2e:	f000 8083 	beq.w	800a038 <HAL_RCC_GetSysClockFreq+0x204>
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	2b02      	cmp	r3, #2
 8009f36:	f200 80a1 	bhi.w	800a07c <HAL_RCC_GetSysClockFreq+0x248>
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d003      	beq.n	8009f48 <HAL_RCC_GetSysClockFreq+0x114>
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	d056      	beq.n	8009ff4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009f46:	e099      	b.n	800a07c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f48:	4b6f      	ldr	r3, [pc, #444]	@ (800a108 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f003 0320 	and.w	r3, r3, #32
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d02d      	beq.n	8009fb0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f54:	4b6c      	ldr	r3, [pc, #432]	@ (800a108 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	08db      	lsrs	r3, r3, #3
 8009f5a:	f003 0303 	and.w	r3, r3, #3
 8009f5e:	4a6b      	ldr	r2, [pc, #428]	@ (800a10c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009f60:	fa22 f303 	lsr.w	r3, r2, r3
 8009f64:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	ee07 3a90 	vmov	s15, r3
 8009f6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	ee07 3a90 	vmov	s15, r3
 8009f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f7e:	4b62      	ldr	r3, [pc, #392]	@ (800a108 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f86:	ee07 3a90 	vmov	s15, r3
 8009f8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009f92:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800a118 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009f96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009fa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009faa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009fae:	e087      	b.n	800a0c0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	ee07 3a90 	vmov	s15, r3
 8009fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fba:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800a11c <HAL_RCC_GetSysClockFreq+0x2e8>
 8009fbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fc2:	4b51      	ldr	r3, [pc, #324]	@ (800a108 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fca:	ee07 3a90 	vmov	s15, r3
 8009fce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8009fd6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800a118 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009fda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fe2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009fe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009ff2:	e065      	b.n	800a0c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	ee07 3a90 	vmov	s15, r3
 8009ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ffe:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800a120 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a006:	4b40      	ldr	r3, [pc, #256]	@ (800a108 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a00a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a00e:	ee07 3a90 	vmov	s15, r3
 800a012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a016:	ed97 6a02 	vldr	s12, [r7, #8]
 800a01a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800a118 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a01e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a026:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a02a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a02e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a032:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a036:	e043      	b.n	800a0c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	ee07 3a90 	vmov	s15, r3
 800a03e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a042:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800a124 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a04a:	4b2f      	ldr	r3, [pc, #188]	@ (800a108 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a04c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a04e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a052:	ee07 3a90 	vmov	s15, r3
 800a056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a05a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a05e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800a118 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a062:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a066:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a06a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a06e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a072:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a076:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a07a:	e021      	b.n	800a0c0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	ee07 3a90 	vmov	s15, r3
 800a082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a086:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800a120 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a08a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a08e:	4b1e      	ldr	r3, [pc, #120]	@ (800a108 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a096:	ee07 3a90 	vmov	s15, r3
 800a09a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a09e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a0a2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800a118 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a0a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a0be:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a0c0:	4b11      	ldr	r3, [pc, #68]	@ (800a108 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a0c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0c4:	0a5b      	lsrs	r3, r3, #9
 800a0c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0ca:	3301      	adds	r3, #1
 800a0cc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	ee07 3a90 	vmov	s15, r3
 800a0d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a0d8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0e4:	ee17 3a90 	vmov	r3, s15
 800a0e8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a0ea:	e005      	b.n	800a0f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	61bb      	str	r3, [r7, #24]
      break;
 800a0f0:	e002      	b.n	800a0f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a0f2:	4b07      	ldr	r3, [pc, #28]	@ (800a110 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a0f4:	61bb      	str	r3, [r7, #24]
      break;
 800a0f6:	bf00      	nop
  }

  return sysclockfreq;
 800a0f8:	69bb      	ldr	r3, [r7, #24]
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3724      	adds	r7, #36	@ 0x24
 800a0fe:	46bd      	mov	sp, r7
 800a100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a104:	4770      	bx	lr
 800a106:	bf00      	nop
 800a108:	58024400 	.word	0x58024400
 800a10c:	03d09000 	.word	0x03d09000
 800a110:	003d0900 	.word	0x003d0900
 800a114:	016e3600 	.word	0x016e3600
 800a118:	46000000 	.word	0x46000000
 800a11c:	4c742400 	.word	0x4c742400
 800a120:	4a742400 	.word	0x4a742400
 800a124:	4bb71b00 	.word	0x4bb71b00

0800a128 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800a12e:	f7ff fe81 	bl	8009e34 <HAL_RCC_GetSysClockFreq>
 800a132:	4602      	mov	r2, r0
 800a134:	4b10      	ldr	r3, [pc, #64]	@ (800a178 <HAL_RCC_GetHCLKFreq+0x50>)
 800a136:	699b      	ldr	r3, [r3, #24]
 800a138:	0a1b      	lsrs	r3, r3, #8
 800a13a:	f003 030f 	and.w	r3, r3, #15
 800a13e:	490f      	ldr	r1, [pc, #60]	@ (800a17c <HAL_RCC_GetHCLKFreq+0x54>)
 800a140:	5ccb      	ldrb	r3, [r1, r3]
 800a142:	f003 031f 	and.w	r3, r3, #31
 800a146:	fa22 f303 	lsr.w	r3, r2, r3
 800a14a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800a14c:	4b0a      	ldr	r3, [pc, #40]	@ (800a178 <HAL_RCC_GetHCLKFreq+0x50>)
 800a14e:	699b      	ldr	r3, [r3, #24]
 800a150:	f003 030f 	and.w	r3, r3, #15
 800a154:	4a09      	ldr	r2, [pc, #36]	@ (800a17c <HAL_RCC_GetHCLKFreq+0x54>)
 800a156:	5cd3      	ldrb	r3, [r2, r3]
 800a158:	f003 031f 	and.w	r3, r3, #31
 800a15c:	687a      	ldr	r2, [r7, #4]
 800a15e:	fa22 f303 	lsr.w	r3, r2, r3
 800a162:	4a07      	ldr	r2, [pc, #28]	@ (800a180 <HAL_RCC_GetHCLKFreq+0x58>)
 800a164:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a166:	4a07      	ldr	r2, [pc, #28]	@ (800a184 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a16c:	4b04      	ldr	r3, [pc, #16]	@ (800a180 <HAL_RCC_GetHCLKFreq+0x58>)
 800a16e:	681b      	ldr	r3, [r3, #0]
}
 800a170:	4618      	mov	r0, r3
 800a172:	3708      	adds	r7, #8
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}
 800a178:	58024400 	.word	0x58024400
 800a17c:	08018994 	.word	0x08018994
 800a180:	24000004 	.word	0x24000004
 800a184:	24000000 	.word	0x24000000

0800a188 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800a18c:	f7ff ffcc 	bl	800a128 <HAL_RCC_GetHCLKFreq>
 800a190:	4602      	mov	r2, r0
 800a192:	4b06      	ldr	r3, [pc, #24]	@ (800a1ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800a194:	69db      	ldr	r3, [r3, #28]
 800a196:	091b      	lsrs	r3, r3, #4
 800a198:	f003 0307 	and.w	r3, r3, #7
 800a19c:	4904      	ldr	r1, [pc, #16]	@ (800a1b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a19e:	5ccb      	ldrb	r3, [r1, r3]
 800a1a0:	f003 031f 	and.w	r3, r3, #31
 800a1a4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	bd80      	pop	{r7, pc}
 800a1ac:	58024400 	.word	0x58024400
 800a1b0:	08018994 	.word	0x08018994

0800a1b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800a1b8:	f7ff ffb6 	bl	800a128 <HAL_RCC_GetHCLKFreq>
 800a1bc:	4602      	mov	r2, r0
 800a1be:	4b06      	ldr	r3, [pc, #24]	@ (800a1d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a1c0:	69db      	ldr	r3, [r3, #28]
 800a1c2:	0a1b      	lsrs	r3, r3, #8
 800a1c4:	f003 0307 	and.w	r3, r3, #7
 800a1c8:	4904      	ldr	r1, [pc, #16]	@ (800a1dc <HAL_RCC_GetPCLK2Freq+0x28>)
 800a1ca:	5ccb      	ldrb	r3, [r1, r3]
 800a1cc:	f003 031f 	and.w	r3, r3, #31
 800a1d0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	bd80      	pop	{r7, pc}
 800a1d8:	58024400 	.word	0x58024400
 800a1dc:	08018994 	.word	0x08018994

0800a1e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b083      	sub	sp, #12
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
 800a1e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	223f      	movs	r2, #63	@ 0x3f
 800a1ee:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a1f0:	4b1a      	ldr	r3, [pc, #104]	@ (800a25c <HAL_RCC_GetClockConfig+0x7c>)
 800a1f2:	691b      	ldr	r3, [r3, #16]
 800a1f4:	f003 0207 	and.w	r2, r3, #7
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 800a1fc:	4b17      	ldr	r3, [pc, #92]	@ (800a25c <HAL_RCC_GetClockConfig+0x7c>)
 800a1fe:	699b      	ldr	r3, [r3, #24]
 800a200:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 800a208:	4b14      	ldr	r3, [pc, #80]	@ (800a25c <HAL_RCC_GetClockConfig+0x7c>)
 800a20a:	699b      	ldr	r3, [r3, #24]
 800a20c:	f003 020f 	and.w	r2, r3, #15
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 800a214:	4b11      	ldr	r3, [pc, #68]	@ (800a25c <HAL_RCC_GetClockConfig+0x7c>)
 800a216:	699b      	ldr	r3, [r3, #24]
 800a218:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 800a220:	4b0e      	ldr	r3, [pc, #56]	@ (800a25c <HAL_RCC_GetClockConfig+0x7c>)
 800a222:	69db      	ldr	r3, [r3, #28]
 800a224:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 800a22c:	4b0b      	ldr	r3, [pc, #44]	@ (800a25c <HAL_RCC_GetClockConfig+0x7c>)
 800a22e:	69db      	ldr	r3, [r3, #28]
 800a230:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 800a238:	4b08      	ldr	r3, [pc, #32]	@ (800a25c <HAL_RCC_GetClockConfig+0x7c>)
 800a23a:	6a1b      	ldr	r3, [r3, #32]
 800a23c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a244:	4b06      	ldr	r3, [pc, #24]	@ (800a260 <HAL_RCC_GetClockConfig+0x80>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f003 020f 	and.w	r2, r3, #15
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	601a      	str	r2, [r3, #0]
}
 800a250:	bf00      	nop
 800a252:	370c      	adds	r7, #12
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr
 800a25c:	58024400 	.word	0x58024400
 800a260:	52002000 	.word	0x52002000

0800a264 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a264:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a268:	b0c8      	sub	sp, #288	@ 0x120
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a270:	2300      	movs	r3, #0
 800a272:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a276:	2300      	movs	r3, #0
 800a278:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a27c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a284:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800a288:	2500      	movs	r5, #0
 800a28a:	ea54 0305 	orrs.w	r3, r4, r5
 800a28e:	d049      	beq.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a290:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a294:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a296:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a29a:	d02f      	beq.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a29c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a2a0:	d828      	bhi.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a2a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a2a6:	d01a      	beq.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a2a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a2ac:	d822      	bhi.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d003      	beq.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a2b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a2b6:	d007      	beq.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a2b8:	e01c      	b.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2ba:	4ba7      	ldr	r3, [pc, #668]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a2bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2be:	4aa6      	ldr	r2, [pc, #664]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a2c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a2c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a2c6:	e01a      	b.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a2c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2cc:	3308      	adds	r3, #8
 800a2ce:	2102      	movs	r1, #2
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f001 fc43 	bl	800bb5c <RCCEx_PLL2_Config>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a2dc:	e00f      	b.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a2de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2e2:	3328      	adds	r3, #40	@ 0x28
 800a2e4:	2102      	movs	r1, #2
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f001 fcea 	bl	800bcc0 <RCCEx_PLL3_Config>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a2f2:	e004      	b.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a2fa:	e000      	b.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a2fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a302:	2b00      	cmp	r3, #0
 800a304:	d10a      	bne.n	800a31c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a306:	4b94      	ldr	r3, [pc, #592]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a308:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a30a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a30e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a312:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a314:	4a90      	ldr	r2, [pc, #576]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a316:	430b      	orrs	r3, r1
 800a318:	6513      	str	r3, [r2, #80]	@ 0x50
 800a31a:	e003      	b.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a31c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a320:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a324:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a32c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800a330:	f04f 0900 	mov.w	r9, #0
 800a334:	ea58 0309 	orrs.w	r3, r8, r9
 800a338:	d047      	beq.n	800a3ca <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a33a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a33e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a340:	2b04      	cmp	r3, #4
 800a342:	d82a      	bhi.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a344:	a201      	add	r2, pc, #4	@ (adr r2, 800a34c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a34a:	bf00      	nop
 800a34c:	0800a361 	.word	0x0800a361
 800a350:	0800a36f 	.word	0x0800a36f
 800a354:	0800a385 	.word	0x0800a385
 800a358:	0800a3a3 	.word	0x0800a3a3
 800a35c:	0800a3a3 	.word	0x0800a3a3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a360:	4b7d      	ldr	r3, [pc, #500]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a364:	4a7c      	ldr	r2, [pc, #496]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a366:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a36a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a36c:	e01a      	b.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a36e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a372:	3308      	adds	r3, #8
 800a374:	2100      	movs	r1, #0
 800a376:	4618      	mov	r0, r3
 800a378:	f001 fbf0 	bl	800bb5c <RCCEx_PLL2_Config>
 800a37c:	4603      	mov	r3, r0
 800a37e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a382:	e00f      	b.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a384:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a388:	3328      	adds	r3, #40	@ 0x28
 800a38a:	2100      	movs	r1, #0
 800a38c:	4618      	mov	r0, r3
 800a38e:	f001 fc97 	bl	800bcc0 <RCCEx_PLL3_Config>
 800a392:	4603      	mov	r3, r0
 800a394:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a398:	e004      	b.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a39a:	2301      	movs	r3, #1
 800a39c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a3a0:	e000      	b.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a3a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d10a      	bne.n	800a3c2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a3ac:	4b6a      	ldr	r3, [pc, #424]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a3ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3b0:	f023 0107 	bic.w	r1, r3, #7
 800a3b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3ba:	4a67      	ldr	r2, [pc, #412]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a3bc:	430b      	orrs	r3, r1
 800a3be:	6513      	str	r3, [r2, #80]	@ 0x50
 800a3c0:	e003      	b.n	800a3ca <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a3c6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800a3ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800a3d6:	f04f 0b00 	mov.w	fp, #0
 800a3da:	ea5a 030b 	orrs.w	r3, sl, fp
 800a3de:	d054      	beq.n	800a48a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800a3e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a3e6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800a3ea:	d036      	beq.n	800a45a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800a3ec:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800a3f0:	d82f      	bhi.n	800a452 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a3f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3f6:	d032      	beq.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a3f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3fc:	d829      	bhi.n	800a452 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a3fe:	2bc0      	cmp	r3, #192	@ 0xc0
 800a400:	d02f      	beq.n	800a462 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800a402:	2bc0      	cmp	r3, #192	@ 0xc0
 800a404:	d825      	bhi.n	800a452 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a406:	2b80      	cmp	r3, #128	@ 0x80
 800a408:	d018      	beq.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800a40a:	2b80      	cmp	r3, #128	@ 0x80
 800a40c:	d821      	bhi.n	800a452 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d002      	beq.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800a412:	2b40      	cmp	r3, #64	@ 0x40
 800a414:	d007      	beq.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800a416:	e01c      	b.n	800a452 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a418:	4b4f      	ldr	r3, [pc, #316]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a41a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a41c:	4a4e      	ldr	r2, [pc, #312]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a41e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a422:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800a424:	e01e      	b.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a426:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a42a:	3308      	adds	r3, #8
 800a42c:	2100      	movs	r1, #0
 800a42e:	4618      	mov	r0, r3
 800a430:	f001 fb94 	bl	800bb5c <RCCEx_PLL2_Config>
 800a434:	4603      	mov	r3, r0
 800a436:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800a43a:	e013      	b.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a43c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a440:	3328      	adds	r3, #40	@ 0x28
 800a442:	2100      	movs	r1, #0
 800a444:	4618      	mov	r0, r3
 800a446:	f001 fc3b 	bl	800bcc0 <RCCEx_PLL3_Config>
 800a44a:	4603      	mov	r3, r0
 800a44c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800a450:	e008      	b.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a452:	2301      	movs	r3, #1
 800a454:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a458:	e004      	b.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800a45a:	bf00      	nop
 800a45c:	e002      	b.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800a45e:	bf00      	nop
 800a460:	e000      	b.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800a462:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a464:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d10a      	bne.n	800a482 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800a46c:	4b3a      	ldr	r3, [pc, #232]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a46e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a470:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800a474:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a478:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a47a:	4a37      	ldr	r2, [pc, #220]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a47c:	430b      	orrs	r3, r1
 800a47e:	6513      	str	r3, [r2, #80]	@ 0x50
 800a480:	e003      	b.n	800a48a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a482:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a486:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800a48a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a492:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800a496:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a49a:	2300      	movs	r3, #0
 800a49c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800a4a0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800a4a4:	460b      	mov	r3, r1
 800a4a6:	4313      	orrs	r3, r2
 800a4a8:	d05c      	beq.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800a4aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4b0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800a4b4:	d03b      	beq.n	800a52e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a4b6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800a4ba:	d834      	bhi.n	800a526 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800a4bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a4c0:	d037      	beq.n	800a532 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800a4c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a4c6:	d82e      	bhi.n	800a526 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800a4c8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a4cc:	d033      	beq.n	800a536 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a4ce:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a4d2:	d828      	bhi.n	800a526 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800a4d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a4d8:	d01a      	beq.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800a4da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a4de:	d822      	bhi.n	800a526 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d003      	beq.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0x288>
 800a4e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4e8:	d007      	beq.n	800a4fa <HAL_RCCEx_PeriphCLKConfig+0x296>
 800a4ea:	e01c      	b.n	800a526 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4ec:	4b1a      	ldr	r3, [pc, #104]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a4ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4f0:	4a19      	ldr	r2, [pc, #100]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a4f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a4f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800a4f8:	e01e      	b.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a4fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4fe:	3308      	adds	r3, #8
 800a500:	2100      	movs	r1, #0
 800a502:	4618      	mov	r0, r3
 800a504:	f001 fb2a 	bl	800bb5c <RCCEx_PLL2_Config>
 800a508:	4603      	mov	r3, r0
 800a50a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800a50e:	e013      	b.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a510:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a514:	3328      	adds	r3, #40	@ 0x28
 800a516:	2100      	movs	r1, #0
 800a518:	4618      	mov	r0, r3
 800a51a:	f001 fbd1 	bl	800bcc0 <RCCEx_PLL3_Config>
 800a51e:	4603      	mov	r3, r0
 800a520:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800a524:	e008      	b.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a526:	2301      	movs	r3, #1
 800a528:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a52c:	e004      	b.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800a52e:	bf00      	nop
 800a530:	e002      	b.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800a532:	bf00      	nop
 800a534:	e000      	b.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800a536:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a538:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d10d      	bne.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800a540:	4b05      	ldr	r3, [pc, #20]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a542:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a544:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800a548:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a54c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a54e:	4a02      	ldr	r2, [pc, #8]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a550:	430b      	orrs	r3, r1
 800a552:	6513      	str	r3, [r2, #80]	@ 0x50
 800a554:	e006      	b.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800a556:	bf00      	nop
 800a558:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a55c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a560:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a564:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a56c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800a570:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a574:	2300      	movs	r3, #0
 800a576:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a57a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800a57e:	460b      	mov	r3, r1
 800a580:	4313      	orrs	r3, r2
 800a582:	d03a      	beq.n	800a5fa <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800a584:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a58a:	2b30      	cmp	r3, #48	@ 0x30
 800a58c:	d01f      	beq.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800a58e:	2b30      	cmp	r3, #48	@ 0x30
 800a590:	d819      	bhi.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800a592:	2b20      	cmp	r3, #32
 800a594:	d00c      	beq.n	800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800a596:	2b20      	cmp	r3, #32
 800a598:	d815      	bhi.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d019      	beq.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800a59e:	2b10      	cmp	r3, #16
 800a5a0:	d111      	bne.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5a2:	4bae      	ldr	r3, [pc, #696]	@ (800a85c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a5a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5a6:	4aad      	ldr	r2, [pc, #692]	@ (800a85c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a5a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a5ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a5ae:	e011      	b.n	800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a5b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5b4:	3308      	adds	r3, #8
 800a5b6:	2102      	movs	r1, #2
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f001 facf 	bl	800bb5c <RCCEx_PLL2_Config>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a5c4:	e006      	b.n	800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a5cc:	e002      	b.n	800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800a5ce:	bf00      	nop
 800a5d0:	e000      	b.n	800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800a5d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d10a      	bne.n	800a5f2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a5dc:	4b9f      	ldr	r3, [pc, #636]	@ (800a85c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a5de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5e0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800a5e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5ea:	4a9c      	ldr	r2, [pc, #624]	@ (800a85c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a5ec:	430b      	orrs	r3, r1
 800a5ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a5f0:	e003      	b.n	800a5fa <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5f2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a5f6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a5fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a602:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800a606:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a60a:	2300      	movs	r3, #0
 800a60c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a610:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800a614:	460b      	mov	r3, r1
 800a616:	4313      	orrs	r3, r2
 800a618:	d051      	beq.n	800a6be <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a61a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a61e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a620:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a624:	d035      	beq.n	800a692 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800a626:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a62a:	d82e      	bhi.n	800a68a <HAL_RCCEx_PeriphCLKConfig+0x426>
 800a62c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a630:	d031      	beq.n	800a696 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800a632:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a636:	d828      	bhi.n	800a68a <HAL_RCCEx_PeriphCLKConfig+0x426>
 800a638:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a63c:	d01a      	beq.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800a63e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a642:	d822      	bhi.n	800a68a <HAL_RCCEx_PeriphCLKConfig+0x426>
 800a644:	2b00      	cmp	r3, #0
 800a646:	d003      	beq.n	800a650 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800a648:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a64c:	d007      	beq.n	800a65e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800a64e:	e01c      	b.n	800a68a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a650:	4b82      	ldr	r3, [pc, #520]	@ (800a85c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a654:	4a81      	ldr	r2, [pc, #516]	@ (800a85c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a656:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a65a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a65c:	e01c      	b.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a65e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a662:	3308      	adds	r3, #8
 800a664:	2100      	movs	r1, #0
 800a666:	4618      	mov	r0, r3
 800a668:	f001 fa78 	bl	800bb5c <RCCEx_PLL2_Config>
 800a66c:	4603      	mov	r3, r0
 800a66e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a672:	e011      	b.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a674:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a678:	3328      	adds	r3, #40	@ 0x28
 800a67a:	2100      	movs	r1, #0
 800a67c:	4618      	mov	r0, r3
 800a67e:	f001 fb1f 	bl	800bcc0 <RCCEx_PLL3_Config>
 800a682:	4603      	mov	r3, r0
 800a684:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a688:	e006      	b.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a68a:	2301      	movs	r3, #1
 800a68c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a690:	e002      	b.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800a692:	bf00      	nop
 800a694:	e000      	b.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800a696:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a698:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d10a      	bne.n	800a6b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a6a0:	4b6e      	ldr	r3, [pc, #440]	@ (800a85c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a6a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6a4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800a6a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6ae:	4a6b      	ldr	r2, [pc, #428]	@ (800a85c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a6b0:	430b      	orrs	r3, r1
 800a6b2:	6513      	str	r3, [r2, #80]	@ 0x50
 800a6b4:	e003      	b.n	800a6be <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6b6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a6ba:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a6be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800a6ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a6d4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800a6d8:	460b      	mov	r3, r1
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	d053      	beq.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a6de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a6e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a6e8:	d033      	beq.n	800a752 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800a6ea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a6ee:	d82c      	bhi.n	800a74a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800a6f0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a6f4:	d02f      	beq.n	800a756 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800a6f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a6fa:	d826      	bhi.n	800a74a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800a6fc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a700:	d02b      	beq.n	800a75a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a702:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a706:	d820      	bhi.n	800a74a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800a708:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a70c:	d012      	beq.n	800a734 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800a70e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a712:	d81a      	bhi.n	800a74a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800a714:	2b00      	cmp	r3, #0
 800a716:	d022      	beq.n	800a75e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800a718:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a71c:	d115      	bne.n	800a74a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a71e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a722:	3308      	adds	r3, #8
 800a724:	2101      	movs	r1, #1
 800a726:	4618      	mov	r0, r3
 800a728:	f001 fa18 	bl	800bb5c <RCCEx_PLL2_Config>
 800a72c:	4603      	mov	r3, r0
 800a72e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a732:	e015      	b.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a734:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a738:	3328      	adds	r3, #40	@ 0x28
 800a73a:	2101      	movs	r1, #1
 800a73c:	4618      	mov	r0, r3
 800a73e:	f001 fabf 	bl	800bcc0 <RCCEx_PLL3_Config>
 800a742:	4603      	mov	r3, r0
 800a744:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a748:	e00a      	b.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a74a:	2301      	movs	r3, #1
 800a74c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a750:	e006      	b.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800a752:	bf00      	nop
 800a754:	e004      	b.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800a756:	bf00      	nop
 800a758:	e002      	b.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800a75a:	bf00      	nop
 800a75c:	e000      	b.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800a75e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a760:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a764:	2b00      	cmp	r3, #0
 800a766:	d10a      	bne.n	800a77e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a768:	4b3c      	ldr	r3, [pc, #240]	@ (800a85c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a76a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a76c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800a770:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a774:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a776:	4a39      	ldr	r2, [pc, #228]	@ (800a85c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a778:	430b      	orrs	r3, r1
 800a77a:	6513      	str	r3, [r2, #80]	@ 0x50
 800a77c:	e003      	b.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a77e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a782:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a786:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800a792:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a796:	2300      	movs	r3, #0
 800a798:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a79c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a7a0:	460b      	mov	r3, r1
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	d060      	beq.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a7a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a7ae:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800a7b2:	d039      	beq.n	800a828 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800a7b4:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800a7b8:	d832      	bhi.n	800a820 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800a7ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a7be:	d035      	beq.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800a7c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a7c4:	d82c      	bhi.n	800a820 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800a7c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7ca:	d031      	beq.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800a7cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7d0:	d826      	bhi.n	800a820 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800a7d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a7d6:	d02d      	beq.n	800a834 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800a7d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a7dc:	d820      	bhi.n	800a820 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800a7de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7e2:	d012      	beq.n	800a80a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800a7e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7e8:	d81a      	bhi.n	800a820 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d024      	beq.n	800a838 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a7ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a7f2:	d115      	bne.n	800a820 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a7f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7f8:	3308      	adds	r3, #8
 800a7fa:	2101      	movs	r1, #1
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f001 f9ad 	bl	800bb5c <RCCEx_PLL2_Config>
 800a802:	4603      	mov	r3, r0
 800a804:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a808:	e017      	b.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a80a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a80e:	3328      	adds	r3, #40	@ 0x28
 800a810:	2101      	movs	r1, #1
 800a812:	4618      	mov	r0, r3
 800a814:	f001 fa54 	bl	800bcc0 <RCCEx_PLL3_Config>
 800a818:	4603      	mov	r3, r0
 800a81a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a81e:	e00c      	b.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a820:	2301      	movs	r3, #1
 800a822:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a826:	e008      	b.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a828:	bf00      	nop
 800a82a:	e006      	b.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a82c:	bf00      	nop
 800a82e:	e004      	b.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a830:	bf00      	nop
 800a832:	e002      	b.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a834:	bf00      	nop
 800a836:	e000      	b.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a838:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a83a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d10e      	bne.n	800a860 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a842:	4b06      	ldr	r3, [pc, #24]	@ (800a85c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a846:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a84a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a84e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a852:	4a02      	ldr	r2, [pc, #8]	@ (800a85c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a854:	430b      	orrs	r3, r1
 800a856:	6593      	str	r3, [r2, #88]	@ 0x58
 800a858:	e006      	b.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800a85a:	bf00      	nop
 800a85c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a860:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a864:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a868:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a870:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800a874:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a878:	2300      	movs	r3, #0
 800a87a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a87e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a882:	460b      	mov	r3, r1
 800a884:	4313      	orrs	r3, r2
 800a886:	d037      	beq.n	800a8f8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a888:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a88c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a88e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a892:	d00e      	beq.n	800a8b2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800a894:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a898:	d816      	bhi.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d018      	beq.n	800a8d0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800a89e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a8a2:	d111      	bne.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8a4:	4bc4      	ldr	r3, [pc, #784]	@ (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a8a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8a8:	4ac3      	ldr	r2, [pc, #780]	@ (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a8aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a8ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a8b0:	e00f      	b.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a8b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8b6:	3308      	adds	r3, #8
 800a8b8:	2101      	movs	r1, #1
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f001 f94e 	bl	800bb5c <RCCEx_PLL2_Config>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a8c6:	e004      	b.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a8ce:	e000      	b.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800a8d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8d2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d10a      	bne.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a8da:	4bb7      	ldr	r3, [pc, #732]	@ (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a8dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8de:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a8e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a8e8:	4ab3      	ldr	r2, [pc, #716]	@ (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a8ea:	430b      	orrs	r3, r1
 800a8ec:	6513      	str	r3, [r2, #80]	@ 0x50
 800a8ee:	e003      	b.n	800a8f8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a8f4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a8f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a900:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800a904:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a908:	2300      	movs	r3, #0
 800a90a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a90e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800a912:	460b      	mov	r3, r1
 800a914:	4313      	orrs	r3, r2
 800a916:	d039      	beq.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a918:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a91c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a91e:	2b03      	cmp	r3, #3
 800a920:	d81c      	bhi.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800a922:	a201      	add	r2, pc, #4	@ (adr r2, 800a928 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800a924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a928:	0800a965 	.word	0x0800a965
 800a92c:	0800a939 	.word	0x0800a939
 800a930:	0800a947 	.word	0x0800a947
 800a934:	0800a965 	.word	0x0800a965
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a938:	4b9f      	ldr	r3, [pc, #636]	@ (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a93a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a93c:	4a9e      	ldr	r2, [pc, #632]	@ (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a93e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a942:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a944:	e00f      	b.n	800a966 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a946:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a94a:	3308      	adds	r3, #8
 800a94c:	2102      	movs	r1, #2
 800a94e:	4618      	mov	r0, r3
 800a950:	f001 f904 	bl	800bb5c <RCCEx_PLL2_Config>
 800a954:	4603      	mov	r3, r0
 800a956:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a95a:	e004      	b.n	800a966 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a95c:	2301      	movs	r3, #1
 800a95e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a962:	e000      	b.n	800a966 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800a964:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a966:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d10a      	bne.n	800a984 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a96e:	4b92      	ldr	r3, [pc, #584]	@ (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a972:	f023 0103 	bic.w	r1, r3, #3
 800a976:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a97a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a97c:	4a8e      	ldr	r2, [pc, #568]	@ (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a97e:	430b      	orrs	r3, r1
 800a980:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a982:	e003      	b.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a984:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a988:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a98c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a994:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800a998:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a99c:	2300      	movs	r3, #0
 800a99e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a9a2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800a9a6:	460b      	mov	r3, r1
 800a9a8:	4313      	orrs	r3, r2
 800a9aa:	f000 8099 	beq.w	800aae0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a9ae:	4b83      	ldr	r3, [pc, #524]	@ (800abbc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	4a82      	ldr	r2, [pc, #520]	@ (800abbc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a9b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a9b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a9ba:	f7fa fd45 	bl	8005448 <HAL_GetTick>
 800a9be:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a9c2:	e00b      	b.n	800a9dc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a9c4:	f7fa fd40 	bl	8005448 <HAL_GetTick>
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800a9ce:	1ad3      	subs	r3, r2, r3
 800a9d0:	2b64      	cmp	r3, #100	@ 0x64
 800a9d2:	d903      	bls.n	800a9dc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800a9d4:	2303      	movs	r3, #3
 800a9d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a9da:	e005      	b.n	800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a9dc:	4b77      	ldr	r3, [pc, #476]	@ (800abbc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d0ed      	beq.n	800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800a9e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d173      	bne.n	800aad8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a9f0:	4b71      	ldr	r3, [pc, #452]	@ (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a9f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a9f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a9fc:	4053      	eors	r3, r2
 800a9fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d015      	beq.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800aa06:	4b6c      	ldr	r3, [pc, #432]	@ (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aa0e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800aa12:	4b69      	ldr	r3, [pc, #420]	@ (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa16:	4a68      	ldr	r2, [pc, #416]	@ (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aa1c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800aa1e:	4b66      	ldr	r3, [pc, #408]	@ (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa22:	4a65      	ldr	r2, [pc, #404]	@ (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aa28:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800aa2a:	4a63      	ldr	r2, [pc, #396]	@ (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa30:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800aa32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa36:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800aa3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa3e:	d118      	bne.n	800aa72 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa40:	f7fa fd02 	bl	8005448 <HAL_GetTick>
 800aa44:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aa48:	e00d      	b.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa4a:	f7fa fcfd 	bl	8005448 <HAL_GetTick>
 800aa4e:	4602      	mov	r2, r0
 800aa50:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800aa54:	1ad2      	subs	r2, r2, r3
 800aa56:	f241 3388 	movw	r3, #5000	@ 0x1388
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d903      	bls.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800aa5e:	2303      	movs	r3, #3
 800aa60:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 800aa64:	e005      	b.n	800aa72 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aa66:	4b54      	ldr	r3, [pc, #336]	@ (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa6a:	f003 0302 	and.w	r3, r3, #2
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d0eb      	beq.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800aa72:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d129      	bne.n	800aace <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aa7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800aa82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aa86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aa8a:	d10e      	bne.n	800aaaa <HAL_RCCEx_PeriphCLKConfig+0x846>
 800aa8c:	4b4a      	ldr	r3, [pc, #296]	@ (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa8e:	691b      	ldr	r3, [r3, #16]
 800aa90:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800aa94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800aa9c:	091a      	lsrs	r2, r3, #4
 800aa9e:	4b48      	ldr	r3, [pc, #288]	@ (800abc0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800aaa0:	4013      	ands	r3, r2
 800aaa2:	4a45      	ldr	r2, [pc, #276]	@ (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aaa4:	430b      	orrs	r3, r1
 800aaa6:	6113      	str	r3, [r2, #16]
 800aaa8:	e005      	b.n	800aab6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800aaaa:	4b43      	ldr	r3, [pc, #268]	@ (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aaac:	691b      	ldr	r3, [r3, #16]
 800aaae:	4a42      	ldr	r2, [pc, #264]	@ (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aab0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800aab4:	6113      	str	r3, [r2, #16]
 800aab6:	4b40      	ldr	r3, [pc, #256]	@ (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aab8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800aaba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aabe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800aac2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aac6:	4a3c      	ldr	r2, [pc, #240]	@ (800abb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aac8:	430b      	orrs	r3, r1
 800aaca:	6713      	str	r3, [r2, #112]	@ 0x70
 800aacc:	e008      	b.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800aace:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aad2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800aad6:	e003      	b.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aad8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aadc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800aae0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae8:	f002 0301 	and.w	r3, r2, #1
 800aaec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800aaf6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800aafa:	460b      	mov	r3, r1
 800aafc:	4313      	orrs	r3, r2
 800aafe:	f000 8090 	beq.w	800ac22 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800ab02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab0a:	2b28      	cmp	r3, #40	@ 0x28
 800ab0c:	d870      	bhi.n	800abf0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800ab0e:	a201      	add	r2, pc, #4	@ (adr r2, 800ab14 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800ab10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab14:	0800abf9 	.word	0x0800abf9
 800ab18:	0800abf1 	.word	0x0800abf1
 800ab1c:	0800abf1 	.word	0x0800abf1
 800ab20:	0800abf1 	.word	0x0800abf1
 800ab24:	0800abf1 	.word	0x0800abf1
 800ab28:	0800abf1 	.word	0x0800abf1
 800ab2c:	0800abf1 	.word	0x0800abf1
 800ab30:	0800abf1 	.word	0x0800abf1
 800ab34:	0800abc5 	.word	0x0800abc5
 800ab38:	0800abf1 	.word	0x0800abf1
 800ab3c:	0800abf1 	.word	0x0800abf1
 800ab40:	0800abf1 	.word	0x0800abf1
 800ab44:	0800abf1 	.word	0x0800abf1
 800ab48:	0800abf1 	.word	0x0800abf1
 800ab4c:	0800abf1 	.word	0x0800abf1
 800ab50:	0800abf1 	.word	0x0800abf1
 800ab54:	0800abdb 	.word	0x0800abdb
 800ab58:	0800abf1 	.word	0x0800abf1
 800ab5c:	0800abf1 	.word	0x0800abf1
 800ab60:	0800abf1 	.word	0x0800abf1
 800ab64:	0800abf1 	.word	0x0800abf1
 800ab68:	0800abf1 	.word	0x0800abf1
 800ab6c:	0800abf1 	.word	0x0800abf1
 800ab70:	0800abf1 	.word	0x0800abf1
 800ab74:	0800abf9 	.word	0x0800abf9
 800ab78:	0800abf1 	.word	0x0800abf1
 800ab7c:	0800abf1 	.word	0x0800abf1
 800ab80:	0800abf1 	.word	0x0800abf1
 800ab84:	0800abf1 	.word	0x0800abf1
 800ab88:	0800abf1 	.word	0x0800abf1
 800ab8c:	0800abf1 	.word	0x0800abf1
 800ab90:	0800abf1 	.word	0x0800abf1
 800ab94:	0800abf9 	.word	0x0800abf9
 800ab98:	0800abf1 	.word	0x0800abf1
 800ab9c:	0800abf1 	.word	0x0800abf1
 800aba0:	0800abf1 	.word	0x0800abf1
 800aba4:	0800abf1 	.word	0x0800abf1
 800aba8:	0800abf1 	.word	0x0800abf1
 800abac:	0800abf1 	.word	0x0800abf1
 800abb0:	0800abf1 	.word	0x0800abf1
 800abb4:	0800abf9 	.word	0x0800abf9
 800abb8:	58024400 	.word	0x58024400
 800abbc:	58024800 	.word	0x58024800
 800abc0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800abc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abc8:	3308      	adds	r3, #8
 800abca:	2101      	movs	r1, #1
 800abcc:	4618      	mov	r0, r3
 800abce:	f000 ffc5 	bl	800bb5c <RCCEx_PLL2_Config>
 800abd2:	4603      	mov	r3, r0
 800abd4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800abd8:	e00f      	b.n	800abfa <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800abda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abde:	3328      	adds	r3, #40	@ 0x28
 800abe0:	2101      	movs	r1, #1
 800abe2:	4618      	mov	r0, r3
 800abe4:	f001 f86c 	bl	800bcc0 <RCCEx_PLL3_Config>
 800abe8:	4603      	mov	r3, r0
 800abea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800abee:	e004      	b.n	800abfa <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800abf0:	2301      	movs	r3, #1
 800abf2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800abf6:	e000      	b.n	800abfa <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800abf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abfa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d10b      	bne.n	800ac1a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ac02:	4bc0      	ldr	r3, [pc, #768]	@ (800af04 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ac04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac06:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800ac0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac12:	4abc      	ldr	r2, [pc, #752]	@ (800af04 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ac14:	430b      	orrs	r3, r1
 800ac16:	6553      	str	r3, [r2, #84]	@ 0x54
 800ac18:	e003      	b.n	800ac22 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac1a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ac1e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ac22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac2a:	f002 0302 	and.w	r3, r2, #2
 800ac2e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ac32:	2300      	movs	r3, #0
 800ac34:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ac38:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800ac3c:	460b      	mov	r3, r1
 800ac3e:	4313      	orrs	r3, r2
 800ac40:	d043      	beq.n	800acca <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800ac42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac4a:	2b05      	cmp	r3, #5
 800ac4c:	d824      	bhi.n	800ac98 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800ac4e:	a201      	add	r2, pc, #4	@ (adr r2, 800ac54 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800ac50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac54:	0800aca1 	.word	0x0800aca1
 800ac58:	0800ac6d 	.word	0x0800ac6d
 800ac5c:	0800ac83 	.word	0x0800ac83
 800ac60:	0800aca1 	.word	0x0800aca1
 800ac64:	0800aca1 	.word	0x0800aca1
 800ac68:	0800aca1 	.word	0x0800aca1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ac6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac70:	3308      	adds	r3, #8
 800ac72:	2101      	movs	r1, #1
 800ac74:	4618      	mov	r0, r3
 800ac76:	f000 ff71 	bl	800bb5c <RCCEx_PLL2_Config>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ac80:	e00f      	b.n	800aca2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ac82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac86:	3328      	adds	r3, #40	@ 0x28
 800ac88:	2101      	movs	r1, #1
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f001 f818 	bl	800bcc0 <RCCEx_PLL3_Config>
 800ac90:	4603      	mov	r3, r0
 800ac92:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ac96:	e004      	b.n	800aca2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac98:	2301      	movs	r3, #1
 800ac9a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ac9e:	e000      	b.n	800aca2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800aca0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aca2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d10b      	bne.n	800acc2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800acaa:	4b96      	ldr	r3, [pc, #600]	@ (800af04 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800acac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acae:	f023 0107 	bic.w	r1, r3, #7
 800acb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800acba:	4a92      	ldr	r2, [pc, #584]	@ (800af04 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800acbc:	430b      	orrs	r3, r1
 800acbe:	6553      	str	r3, [r2, #84]	@ 0x54
 800acc0:	e003      	b.n	800acca <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acc2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800acc6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800acca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd2:	f002 0304 	and.w	r3, r2, #4
 800acd6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800acda:	2300      	movs	r3, #0
 800acdc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ace0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800ace4:	460b      	mov	r3, r1
 800ace6:	4313      	orrs	r3, r2
 800ace8:	d043      	beq.n	800ad72 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800acea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800acf2:	2b05      	cmp	r3, #5
 800acf4:	d824      	bhi.n	800ad40 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800acf6:	a201      	add	r2, pc, #4	@ (adr r2, 800acfc <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800acf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acfc:	0800ad49 	.word	0x0800ad49
 800ad00:	0800ad15 	.word	0x0800ad15
 800ad04:	0800ad2b 	.word	0x0800ad2b
 800ad08:	0800ad49 	.word	0x0800ad49
 800ad0c:	0800ad49 	.word	0x0800ad49
 800ad10:	0800ad49 	.word	0x0800ad49
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ad14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad18:	3308      	adds	r3, #8
 800ad1a:	2101      	movs	r1, #1
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f000 ff1d 	bl	800bb5c <RCCEx_PLL2_Config>
 800ad22:	4603      	mov	r3, r0
 800ad24:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ad28:	e00f      	b.n	800ad4a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ad2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad2e:	3328      	adds	r3, #40	@ 0x28
 800ad30:	2101      	movs	r1, #1
 800ad32:	4618      	mov	r0, r3
 800ad34:	f000 ffc4 	bl	800bcc0 <RCCEx_PLL3_Config>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ad3e:	e004      	b.n	800ad4a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad40:	2301      	movs	r3, #1
 800ad42:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ad46:	e000      	b.n	800ad4a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800ad48:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad4a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d10b      	bne.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ad52:	4b6c      	ldr	r3, [pc, #432]	@ (800af04 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ad54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad56:	f023 0107 	bic.w	r1, r3, #7
 800ad5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ad62:	4a68      	ldr	r2, [pc, #416]	@ (800af04 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ad64:	430b      	orrs	r3, r1
 800ad66:	6593      	str	r3, [r2, #88]	@ 0x58
 800ad68:	e003      	b.n	800ad72 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad6a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ad6e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ad72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad7a:	f002 0320 	and.w	r3, r2, #32
 800ad7e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ad82:	2300      	movs	r3, #0
 800ad84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ad88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ad8c:	460b      	mov	r3, r1
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	d055      	beq.n	800ae3e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800ad92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ad9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ad9e:	d033      	beq.n	800ae08 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800ada0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ada4:	d82c      	bhi.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800ada6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800adaa:	d02f      	beq.n	800ae0c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800adac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800adb0:	d826      	bhi.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800adb2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800adb6:	d02b      	beq.n	800ae10 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800adb8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800adbc:	d820      	bhi.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800adbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800adc2:	d012      	beq.n	800adea <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800adc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800adc8:	d81a      	bhi.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d022      	beq.n	800ae14 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800adce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800add2:	d115      	bne.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800add4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800add8:	3308      	adds	r3, #8
 800adda:	2100      	movs	r1, #0
 800addc:	4618      	mov	r0, r3
 800adde:	f000 febd 	bl	800bb5c <RCCEx_PLL2_Config>
 800ade2:	4603      	mov	r3, r0
 800ade4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ade8:	e015      	b.n	800ae16 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800adea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800adee:	3328      	adds	r3, #40	@ 0x28
 800adf0:	2102      	movs	r1, #2
 800adf2:	4618      	mov	r0, r3
 800adf4:	f000 ff64 	bl	800bcc0 <RCCEx_PLL3_Config>
 800adf8:	4603      	mov	r3, r0
 800adfa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800adfe:	e00a      	b.n	800ae16 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae00:	2301      	movs	r3, #1
 800ae02:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ae06:	e006      	b.n	800ae16 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800ae08:	bf00      	nop
 800ae0a:	e004      	b.n	800ae16 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800ae0c:	bf00      	nop
 800ae0e:	e002      	b.n	800ae16 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800ae10:	bf00      	nop
 800ae12:	e000      	b.n	800ae16 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800ae14:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae16:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d10b      	bne.n	800ae36 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ae1e:	4b39      	ldr	r3, [pc, #228]	@ (800af04 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ae20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae22:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800ae26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ae2e:	4a35      	ldr	r2, [pc, #212]	@ (800af04 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ae30:	430b      	orrs	r3, r1
 800ae32:	6553      	str	r3, [r2, #84]	@ 0x54
 800ae34:	e003      	b.n	800ae3e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae36:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ae3a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ae3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae46:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800ae4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ae4e:	2300      	movs	r3, #0
 800ae50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ae54:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800ae58:	460b      	mov	r3, r1
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	d058      	beq.n	800af10 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800ae5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ae66:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800ae6a:	d033      	beq.n	800aed4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800ae6c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800ae70:	d82c      	bhi.n	800aecc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800ae72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae76:	d02f      	beq.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800ae78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae7c:	d826      	bhi.n	800aecc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800ae7e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ae82:	d02b      	beq.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800ae84:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ae88:	d820      	bhi.n	800aecc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800ae8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ae8e:	d012      	beq.n	800aeb6 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800ae90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ae94:	d81a      	bhi.n	800aecc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d022      	beq.n	800aee0 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800ae9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ae9e:	d115      	bne.n	800aecc <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aea0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aea4:	3308      	adds	r3, #8
 800aea6:	2100      	movs	r1, #0
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f000 fe57 	bl	800bb5c <RCCEx_PLL2_Config>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800aeb4:	e015      	b.n	800aee2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aeb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aeba:	3328      	adds	r3, #40	@ 0x28
 800aebc:	2102      	movs	r1, #2
 800aebe:	4618      	mov	r0, r3
 800aec0:	f000 fefe 	bl	800bcc0 <RCCEx_PLL3_Config>
 800aec4:	4603      	mov	r3, r0
 800aec6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800aeca:	e00a      	b.n	800aee2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aecc:	2301      	movs	r3, #1
 800aece:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800aed2:	e006      	b.n	800aee2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800aed4:	bf00      	nop
 800aed6:	e004      	b.n	800aee2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800aed8:	bf00      	nop
 800aeda:	e002      	b.n	800aee2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800aedc:	bf00      	nop
 800aede:	e000      	b.n	800aee2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800aee0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aee2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d10e      	bne.n	800af08 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800aeea:	4b06      	ldr	r3, [pc, #24]	@ (800af04 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800aeec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aeee:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800aef2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aef6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800aefa:	4a02      	ldr	r2, [pc, #8]	@ (800af04 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800aefc:	430b      	orrs	r3, r1
 800aefe:	6593      	str	r3, [r2, #88]	@ 0x58
 800af00:	e006      	b.n	800af10 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800af02:	bf00      	nop
 800af04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af08:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800af0c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800af10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af18:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800af1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800af20:	2300      	movs	r3, #0
 800af22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800af26:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800af2a:	460b      	mov	r3, r1
 800af2c:	4313      	orrs	r3, r2
 800af2e:	d055      	beq.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800af30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af34:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800af38:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800af3c:	d033      	beq.n	800afa6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800af3e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800af42:	d82c      	bhi.n	800af9e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800af44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800af48:	d02f      	beq.n	800afaa <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800af4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800af4e:	d826      	bhi.n	800af9e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800af50:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800af54:	d02b      	beq.n	800afae <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800af56:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800af5a:	d820      	bhi.n	800af9e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800af5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800af60:	d012      	beq.n	800af88 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800af62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800af66:	d81a      	bhi.n	800af9e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d022      	beq.n	800afb2 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800af6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af70:	d115      	bne.n	800af9e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af76:	3308      	adds	r3, #8
 800af78:	2100      	movs	r1, #0
 800af7a:	4618      	mov	r0, r3
 800af7c:	f000 fdee 	bl	800bb5c <RCCEx_PLL2_Config>
 800af80:	4603      	mov	r3, r0
 800af82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800af86:	e015      	b.n	800afb4 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800af88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af8c:	3328      	adds	r3, #40	@ 0x28
 800af8e:	2102      	movs	r1, #2
 800af90:	4618      	mov	r0, r3
 800af92:	f000 fe95 	bl	800bcc0 <RCCEx_PLL3_Config>
 800af96:	4603      	mov	r3, r0
 800af98:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800af9c:	e00a      	b.n	800afb4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af9e:	2301      	movs	r3, #1
 800afa0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800afa4:	e006      	b.n	800afb4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800afa6:	bf00      	nop
 800afa8:	e004      	b.n	800afb4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800afaa:	bf00      	nop
 800afac:	e002      	b.n	800afb4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800afae:	bf00      	nop
 800afb0:	e000      	b.n	800afb4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800afb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800afb4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d10b      	bne.n	800afd4 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800afbc:	4ba1      	ldr	r3, [pc, #644]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800afbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800afc0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800afc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afc8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800afcc:	4a9d      	ldr	r2, [pc, #628]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800afce:	430b      	orrs	r3, r1
 800afd0:	6593      	str	r3, [r2, #88]	@ 0x58
 800afd2:	e003      	b.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afd4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800afd8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800afdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe4:	f002 0308 	and.w	r3, r2, #8
 800afe8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800afec:	2300      	movs	r3, #0
 800afee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800aff2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800aff6:	460b      	mov	r3, r1
 800aff8:	4313      	orrs	r3, r2
 800affa:	d01e      	beq.n	800b03a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800affc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b000:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b004:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b008:	d10c      	bne.n	800b024 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b00a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b00e:	3328      	adds	r3, #40	@ 0x28
 800b010:	2102      	movs	r1, #2
 800b012:	4618      	mov	r0, r3
 800b014:	f000 fe54 	bl	800bcc0 <RCCEx_PLL3_Config>
 800b018:	4603      	mov	r3, r0
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d002      	beq.n	800b024 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800b01e:	2301      	movs	r3, #1
 800b020:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b024:	4b87      	ldr	r3, [pc, #540]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b026:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b028:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b02c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b030:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b034:	4a83      	ldr	r2, [pc, #524]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b036:	430b      	orrs	r3, r1
 800b038:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b03a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b042:	f002 0310 	and.w	r3, r2, #16
 800b046:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b04a:	2300      	movs	r3, #0
 800b04c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b050:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800b054:	460b      	mov	r3, r1
 800b056:	4313      	orrs	r3, r2
 800b058:	d01e      	beq.n	800b098 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b05a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b05e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b062:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b066:	d10c      	bne.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b068:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b06c:	3328      	adds	r3, #40	@ 0x28
 800b06e:	2102      	movs	r1, #2
 800b070:	4618      	mov	r0, r3
 800b072:	f000 fe25 	bl	800bcc0 <RCCEx_PLL3_Config>
 800b076:	4603      	mov	r3, r0
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d002      	beq.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800b07c:	2301      	movs	r3, #1
 800b07e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b082:	4b70      	ldr	r3, [pc, #448]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b086:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b08a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b08e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b092:	4a6c      	ldr	r2, [pc, #432]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b094:	430b      	orrs	r3, r1
 800b096:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b098:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800b0a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b0ae:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800b0b2:	460b      	mov	r3, r1
 800b0b4:	4313      	orrs	r3, r2
 800b0b6:	d03e      	beq.n	800b136 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b0b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b0c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b0c4:	d022      	beq.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800b0c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b0ca:	d81b      	bhi.n	800b104 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d003      	beq.n	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800b0d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b0d4:	d00b      	beq.n	800b0ee <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800b0d6:	e015      	b.n	800b104 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b0d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0dc:	3308      	adds	r3, #8
 800b0de:	2100      	movs	r1, #0
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f000 fd3b 	bl	800bb5c <RCCEx_PLL2_Config>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b0ec:	e00f      	b.n	800b10e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b0ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0f2:	3328      	adds	r3, #40	@ 0x28
 800b0f4:	2102      	movs	r1, #2
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f000 fde2 	bl	800bcc0 <RCCEx_PLL3_Config>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b102:	e004      	b.n	800b10e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b104:	2301      	movs	r3, #1
 800b106:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b10a:	e000      	b.n	800b10e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800b10c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b10e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b112:	2b00      	cmp	r3, #0
 800b114:	d10b      	bne.n	800b12e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b116:	4b4b      	ldr	r3, [pc, #300]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b11a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b11e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b122:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b126:	4a47      	ldr	r2, [pc, #284]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b128:	430b      	orrs	r3, r1
 800b12a:	6593      	str	r3, [r2, #88]	@ 0x58
 800b12c:	e003      	b.n	800b136 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b12e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b132:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b136:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b13e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800b142:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b144:	2300      	movs	r3, #0
 800b146:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b148:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800b14c:	460b      	mov	r3, r1
 800b14e:	4313      	orrs	r3, r2
 800b150:	d03b      	beq.n	800b1ca <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b152:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b15a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b15e:	d01f      	beq.n	800b1a0 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800b160:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b164:	d818      	bhi.n	800b198 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b166:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b16a:	d003      	beq.n	800b174 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800b16c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b170:	d007      	beq.n	800b182 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800b172:	e011      	b.n	800b198 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b174:	4b33      	ldr	r3, [pc, #204]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b178:	4a32      	ldr	r2, [pc, #200]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b17a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b17e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b180:	e00f      	b.n	800b1a2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b182:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b186:	3328      	adds	r3, #40	@ 0x28
 800b188:	2101      	movs	r1, #1
 800b18a:	4618      	mov	r0, r3
 800b18c:	f000 fd98 	bl	800bcc0 <RCCEx_PLL3_Config>
 800b190:	4603      	mov	r3, r0
 800b192:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800b196:	e004      	b.n	800b1a2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b198:	2301      	movs	r3, #1
 800b19a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b19e:	e000      	b.n	800b1a2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800b1a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1a2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d10b      	bne.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b1aa:	4b26      	ldr	r3, [pc, #152]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b1ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b1ae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b1b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1ba:	4a22      	ldr	r2, [pc, #136]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b1bc:	430b      	orrs	r3, r1
 800b1be:	6553      	str	r3, [r2, #84]	@ 0x54
 800b1c0:	e003      	b.n	800b1ca <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b1c6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b1ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800b1d6:	673b      	str	r3, [r7, #112]	@ 0x70
 800b1d8:	2300      	movs	r3, #0
 800b1da:	677b      	str	r3, [r7, #116]	@ 0x74
 800b1dc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800b1e0:	460b      	mov	r3, r1
 800b1e2:	4313      	orrs	r3, r2
 800b1e4:	d034      	beq.n	800b250 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b1e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d003      	beq.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800b1f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b1f4:	d007      	beq.n	800b206 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800b1f6:	e011      	b.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1f8:	4b12      	ldr	r3, [pc, #72]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b1fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1fc:	4a11      	ldr	r2, [pc, #68]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b1fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b202:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b204:	e00e      	b.n	800b224 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b206:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b20a:	3308      	adds	r3, #8
 800b20c:	2102      	movs	r1, #2
 800b20e:	4618      	mov	r0, r3
 800b210:	f000 fca4 	bl	800bb5c <RCCEx_PLL2_Config>
 800b214:	4603      	mov	r3, r0
 800b216:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b21a:	e003      	b.n	800b224 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800b21c:	2301      	movs	r3, #1
 800b21e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b222:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b224:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d10d      	bne.n	800b248 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b22c:	4b05      	ldr	r3, [pc, #20]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b22e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b230:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b234:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b238:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b23a:	4a02      	ldr	r2, [pc, #8]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b23c:	430b      	orrs	r3, r1
 800b23e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b240:	e006      	b.n	800b250 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800b242:	bf00      	nop
 800b244:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b248:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b24c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b250:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b258:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800b25c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b25e:	2300      	movs	r3, #0
 800b260:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b262:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800b266:	460b      	mov	r3, r1
 800b268:	4313      	orrs	r3, r2
 800b26a:	d00c      	beq.n	800b286 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b26c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b270:	3328      	adds	r3, #40	@ 0x28
 800b272:	2102      	movs	r1, #2
 800b274:	4618      	mov	r0, r3
 800b276:	f000 fd23 	bl	800bcc0 <RCCEx_PLL3_Config>
 800b27a:	4603      	mov	r3, r0
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d002      	beq.n	800b286 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800b280:	2301      	movs	r3, #1
 800b282:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b286:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b28e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800b292:	663b      	str	r3, [r7, #96]	@ 0x60
 800b294:	2300      	movs	r3, #0
 800b296:	667b      	str	r3, [r7, #100]	@ 0x64
 800b298:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800b29c:	460b      	mov	r3, r1
 800b29e:	4313      	orrs	r3, r2
 800b2a0:	d038      	beq.n	800b314 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b2a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b2aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b2ae:	d018      	beq.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800b2b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b2b4:	d811      	bhi.n	800b2da <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800b2b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2ba:	d014      	beq.n	800b2e6 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800b2bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2c0:	d80b      	bhi.n	800b2da <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d011      	beq.n	800b2ea <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800b2c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2ca:	d106      	bne.n	800b2da <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2cc:	4bc3      	ldr	r3, [pc, #780]	@ (800b5dc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b2ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2d0:	4ac2      	ldr	r2, [pc, #776]	@ (800b5dc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b2d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b2d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b2d8:	e008      	b.n	800b2ec <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2da:	2301      	movs	r3, #1
 800b2dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b2e0:	e004      	b.n	800b2ec <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800b2e2:	bf00      	nop
 800b2e4:	e002      	b.n	800b2ec <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800b2e6:	bf00      	nop
 800b2e8:	e000      	b.n	800b2ec <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800b2ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d10b      	bne.n	800b30c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b2f4:	4bb9      	ldr	r3, [pc, #740]	@ (800b5dc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b2f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2f8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b2fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b300:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b304:	4ab5      	ldr	r2, [pc, #724]	@ (800b5dc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b306:	430b      	orrs	r3, r1
 800b308:	6553      	str	r3, [r2, #84]	@ 0x54
 800b30a:	e003      	b.n	800b314 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b30c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b310:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b314:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b31c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800b320:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b322:	2300      	movs	r3, #0
 800b324:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b326:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800b32a:	460b      	mov	r3, r1
 800b32c:	4313      	orrs	r3, r2
 800b32e:	d009      	beq.n	800b344 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b330:	4baa      	ldr	r3, [pc, #680]	@ (800b5dc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b332:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b334:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b338:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b33c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b33e:	4aa7      	ldr	r2, [pc, #668]	@ (800b5dc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b340:	430b      	orrs	r3, r1
 800b342:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b344:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b34c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800b350:	653b      	str	r3, [r7, #80]	@ 0x50
 800b352:	2300      	movs	r3, #0
 800b354:	657b      	str	r3, [r7, #84]	@ 0x54
 800b356:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800b35a:	460b      	mov	r3, r1
 800b35c:	4313      	orrs	r3, r2
 800b35e:	d009      	beq.n	800b374 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b360:	4b9e      	ldr	r3, [pc, #632]	@ (800b5dc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b364:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800b368:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b36c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b36e:	4a9b      	ldr	r2, [pc, #620]	@ (800b5dc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b370:	430b      	orrs	r3, r1
 800b372:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800b374:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b37c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800b380:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b382:	2300      	movs	r3, #0
 800b384:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b386:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800b38a:	460b      	mov	r3, r1
 800b38c:	4313      	orrs	r3, r2
 800b38e:	d009      	beq.n	800b3a4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800b390:	4b92      	ldr	r3, [pc, #584]	@ (800b5dc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b394:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 800b398:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b39c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b39e:	4a8f      	ldr	r2, [pc, #572]	@ (800b5dc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b3a0:	430b      	orrs	r3, r1
 800b3a2:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b3a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ac:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800b3b0:	643b      	str	r3, [r7, #64]	@ 0x40
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b3b6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800b3ba:	460b      	mov	r3, r1
 800b3bc:	4313      	orrs	r3, r2
 800b3be:	d00e      	beq.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b3c0:	4b86      	ldr	r3, [pc, #536]	@ (800b5dc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b3c2:	691b      	ldr	r3, [r3, #16]
 800b3c4:	4a85      	ldr	r2, [pc, #532]	@ (800b5dc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b3c6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b3ca:	6113      	str	r3, [r2, #16]
 800b3cc:	4b83      	ldr	r3, [pc, #524]	@ (800b5dc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b3ce:	6919      	ldr	r1, [r3, #16]
 800b3d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3d4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b3d8:	4a80      	ldr	r2, [pc, #512]	@ (800b5dc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b3da:	430b      	orrs	r3, r1
 800b3dc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b3de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800b3ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3f0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800b3f4:	460b      	mov	r3, r1
 800b3f6:	4313      	orrs	r3, r2
 800b3f8:	d009      	beq.n	800b40e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b3fa:	4b78      	ldr	r3, [pc, #480]	@ (800b5dc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b3fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b3fe:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800b402:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b408:	4a74      	ldr	r2, [pc, #464]	@ (800b5dc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b40a:	430b      	orrs	r3, r1
 800b40c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b40e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b416:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800b41a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b41c:	2300      	movs	r3, #0
 800b41e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b420:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800b424:	460b      	mov	r3, r1
 800b426:	4313      	orrs	r3, r2
 800b428:	d00a      	beq.n	800b440 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b42a:	4b6c      	ldr	r3, [pc, #432]	@ (800b5dc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b42c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b42e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800b432:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b436:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b43a:	4a68      	ldr	r2, [pc, #416]	@ (800b5dc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b43c:	430b      	orrs	r3, r1
 800b43e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b440:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b448:	2100      	movs	r1, #0
 800b44a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800b44c:	f003 0301 	and.w	r3, r3, #1
 800b450:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b452:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800b456:	460b      	mov	r3, r1
 800b458:	4313      	orrs	r3, r2
 800b45a:	d011      	beq.n	800b480 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b45c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b460:	3308      	adds	r3, #8
 800b462:	2100      	movs	r1, #0
 800b464:	4618      	mov	r0, r3
 800b466:	f000 fb79 	bl	800bb5c <RCCEx_PLL2_Config>
 800b46a:	4603      	mov	r3, r0
 800b46c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800b470:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b474:	2b00      	cmp	r3, #0
 800b476:	d003      	beq.n	800b480 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b478:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b47c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b480:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b488:	2100      	movs	r1, #0
 800b48a:	6239      	str	r1, [r7, #32]
 800b48c:	f003 0302 	and.w	r3, r3, #2
 800b490:	627b      	str	r3, [r7, #36]	@ 0x24
 800b492:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b496:	460b      	mov	r3, r1
 800b498:	4313      	orrs	r3, r2
 800b49a:	d011      	beq.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b49c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4a0:	3308      	adds	r3, #8
 800b4a2:	2101      	movs	r1, #1
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f000 fb59 	bl	800bb5c <RCCEx_PLL2_Config>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800b4b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d003      	beq.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b4bc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b4c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c8:	2100      	movs	r1, #0
 800b4ca:	61b9      	str	r1, [r7, #24]
 800b4cc:	f003 0304 	and.w	r3, r3, #4
 800b4d0:	61fb      	str	r3, [r7, #28]
 800b4d2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b4d6:	460b      	mov	r3, r1
 800b4d8:	4313      	orrs	r3, r2
 800b4da:	d011      	beq.n	800b500 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b4dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4e0:	3308      	adds	r3, #8
 800b4e2:	2102      	movs	r1, #2
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f000 fb39 	bl	800bb5c <RCCEx_PLL2_Config>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800b4f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d003      	beq.n	800b500 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b4fc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b500:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b508:	2100      	movs	r1, #0
 800b50a:	6139      	str	r1, [r7, #16]
 800b50c:	f003 0308 	and.w	r3, r3, #8
 800b510:	617b      	str	r3, [r7, #20]
 800b512:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b516:	460b      	mov	r3, r1
 800b518:	4313      	orrs	r3, r2
 800b51a:	d011      	beq.n	800b540 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b51c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b520:	3328      	adds	r3, #40	@ 0x28
 800b522:	2100      	movs	r1, #0
 800b524:	4618      	mov	r0, r3
 800b526:	f000 fbcb 	bl	800bcc0 <RCCEx_PLL3_Config>
 800b52a:	4603      	mov	r3, r0
 800b52c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800b530:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b534:	2b00      	cmp	r3, #0
 800b536:	d003      	beq.n	800b540 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b538:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b53c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b540:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b548:	2100      	movs	r1, #0
 800b54a:	60b9      	str	r1, [r7, #8]
 800b54c:	f003 0310 	and.w	r3, r3, #16
 800b550:	60fb      	str	r3, [r7, #12]
 800b552:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b556:	460b      	mov	r3, r1
 800b558:	4313      	orrs	r3, r2
 800b55a:	d011      	beq.n	800b580 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b55c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b560:	3328      	adds	r3, #40	@ 0x28
 800b562:	2101      	movs	r1, #1
 800b564:	4618      	mov	r0, r3
 800b566:	f000 fbab 	bl	800bcc0 <RCCEx_PLL3_Config>
 800b56a:	4603      	mov	r3, r0
 800b56c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800b570:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b574:	2b00      	cmp	r3, #0
 800b576:	d003      	beq.n	800b580 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b578:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b57c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b580:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b588:	2100      	movs	r1, #0
 800b58a:	6039      	str	r1, [r7, #0]
 800b58c:	f003 0320 	and.w	r3, r3, #32
 800b590:	607b      	str	r3, [r7, #4]
 800b592:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b596:	460b      	mov	r3, r1
 800b598:	4313      	orrs	r3, r2
 800b59a:	d011      	beq.n	800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b59c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5a0:	3328      	adds	r3, #40	@ 0x28
 800b5a2:	2102      	movs	r1, #2
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f000 fb8b 	bl	800bcc0 <RCCEx_PLL3_Config>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800b5b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d003      	beq.n	800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b5bc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800b5c0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d101      	bne.n	800b5cc <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	e000      	b.n	800b5ce <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800b5cc:	2301      	movs	r3, #1
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b5da:	bf00      	nop
 800b5dc:	58024400 	.word	0x58024400

0800b5e0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800b5e4:	f7fe fda0 	bl	800a128 <HAL_RCC_GetHCLKFreq>
 800b5e8:	4602      	mov	r2, r0
 800b5ea:	4b06      	ldr	r3, [pc, #24]	@ (800b604 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b5ec:	6a1b      	ldr	r3, [r3, #32]
 800b5ee:	091b      	lsrs	r3, r3, #4
 800b5f0:	f003 0307 	and.w	r3, r3, #7
 800b5f4:	4904      	ldr	r1, [pc, #16]	@ (800b608 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b5f6:	5ccb      	ldrb	r3, [r1, r3]
 800b5f8:	f003 031f 	and.w	r3, r3, #31
 800b5fc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b600:	4618      	mov	r0, r3
 800b602:	bd80      	pop	{r7, pc}
 800b604:	58024400 	.word	0x58024400
 800b608:	08018994 	.word	0x08018994

0800b60c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b60c:	b480      	push	{r7}
 800b60e:	b089      	sub	sp, #36	@ 0x24
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b614:	4ba1      	ldr	r3, [pc, #644]	@ (800b89c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b618:	f003 0303 	and.w	r3, r3, #3
 800b61c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b61e:	4b9f      	ldr	r3, [pc, #636]	@ (800b89c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b622:	0b1b      	lsrs	r3, r3, #12
 800b624:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b628:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b62a:	4b9c      	ldr	r3, [pc, #624]	@ (800b89c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b62c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b62e:	091b      	lsrs	r3, r3, #4
 800b630:	f003 0301 	and.w	r3, r3, #1
 800b634:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b636:	4b99      	ldr	r3, [pc, #612]	@ (800b89c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b63a:	08db      	lsrs	r3, r3, #3
 800b63c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b640:	693a      	ldr	r2, [r7, #16]
 800b642:	fb02 f303 	mul.w	r3, r2, r3
 800b646:	ee07 3a90 	vmov	s15, r3
 800b64a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b64e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	2b00      	cmp	r3, #0
 800b656:	f000 8111 	beq.w	800b87c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b65a:	69bb      	ldr	r3, [r7, #24]
 800b65c:	2b02      	cmp	r3, #2
 800b65e:	f000 8083 	beq.w	800b768 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b662:	69bb      	ldr	r3, [r7, #24]
 800b664:	2b02      	cmp	r3, #2
 800b666:	f200 80a1 	bhi.w	800b7ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b66a:	69bb      	ldr	r3, [r7, #24]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d003      	beq.n	800b678 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b670:	69bb      	ldr	r3, [r7, #24]
 800b672:	2b01      	cmp	r3, #1
 800b674:	d056      	beq.n	800b724 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b676:	e099      	b.n	800b7ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b678:	4b88      	ldr	r3, [pc, #544]	@ (800b89c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	f003 0320 	and.w	r3, r3, #32
 800b680:	2b00      	cmp	r3, #0
 800b682:	d02d      	beq.n	800b6e0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b684:	4b85      	ldr	r3, [pc, #532]	@ (800b89c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	08db      	lsrs	r3, r3, #3
 800b68a:	f003 0303 	and.w	r3, r3, #3
 800b68e:	4a84      	ldr	r2, [pc, #528]	@ (800b8a0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b690:	fa22 f303 	lsr.w	r3, r2, r3
 800b694:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	ee07 3a90 	vmov	s15, r3
 800b69c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6a0:	697b      	ldr	r3, [r7, #20]
 800b6a2:	ee07 3a90 	vmov	s15, r3
 800b6a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6ae:	4b7b      	ldr	r3, [pc, #492]	@ (800b89c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6b6:	ee07 3a90 	vmov	s15, r3
 800b6ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6be:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6c2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b8a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b6c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b6d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b6de:	e087      	b.n	800b7f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b6e0:	697b      	ldr	r3, [r7, #20]
 800b6e2:	ee07 3a90 	vmov	s15, r3
 800b6e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6ea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b8a8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b6ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6f2:	4b6a      	ldr	r3, [pc, #424]	@ (800b89c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6fa:	ee07 3a90 	vmov	s15, r3
 800b6fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b702:	ed97 6a03 	vldr	s12, [r7, #12]
 800b706:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b8a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b70a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b70e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b712:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b71a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b71e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b722:	e065      	b.n	800b7f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	ee07 3a90 	vmov	s15, r3
 800b72a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b72e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b8ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b736:	4b59      	ldr	r3, [pc, #356]	@ (800b89c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b73a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b73e:	ee07 3a90 	vmov	s15, r3
 800b742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b746:	ed97 6a03 	vldr	s12, [r7, #12]
 800b74a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b8a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b74e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b756:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b75a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b75e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b762:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b766:	e043      	b.n	800b7f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b768:	697b      	ldr	r3, [r7, #20]
 800b76a:	ee07 3a90 	vmov	s15, r3
 800b76e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b772:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b77a:	4b48      	ldr	r3, [pc, #288]	@ (800b89c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b77c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b77e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b782:	ee07 3a90 	vmov	s15, r3
 800b786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b78a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b78e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b8a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b79a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b79e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7aa:	e021      	b.n	800b7f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	ee07 3a90 	vmov	s15, r3
 800b7b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7b6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b8ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b7ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7be:	4b37      	ldr	r3, [pc, #220]	@ (800b89c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7c6:	ee07 3a90 	vmov	s15, r3
 800b7ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7d2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b8a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b7d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b7e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7ee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b7f0:	4b2a      	ldr	r3, [pc, #168]	@ (800b89c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7f4:	0a5b      	lsrs	r3, r3, #9
 800b7f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b7fa:	ee07 3a90 	vmov	s15, r3
 800b7fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b802:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b806:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b80a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b80e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b812:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b816:	ee17 2a90 	vmov	r2, s15
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b81e:	4b1f      	ldr	r3, [pc, #124]	@ (800b89c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b822:	0c1b      	lsrs	r3, r3, #16
 800b824:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b828:	ee07 3a90 	vmov	s15, r3
 800b82c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b830:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b834:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b838:	edd7 6a07 	vldr	s13, [r7, #28]
 800b83c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b840:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b844:	ee17 2a90 	vmov	r2, s15
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b84c:	4b13      	ldr	r3, [pc, #76]	@ (800b89c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b84e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b850:	0e1b      	lsrs	r3, r3, #24
 800b852:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b856:	ee07 3a90 	vmov	s15, r3
 800b85a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b85e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b862:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b866:	edd7 6a07 	vldr	s13, [r7, #28]
 800b86a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b86e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b872:	ee17 2a90 	vmov	r2, s15
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b87a:	e008      	b.n	800b88e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2200      	movs	r2, #0
 800b880:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2200      	movs	r2, #0
 800b886:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2200      	movs	r2, #0
 800b88c:	609a      	str	r2, [r3, #8]
}
 800b88e:	bf00      	nop
 800b890:	3724      	adds	r7, #36	@ 0x24
 800b892:	46bd      	mov	sp, r7
 800b894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b898:	4770      	bx	lr
 800b89a:	bf00      	nop
 800b89c:	58024400 	.word	0x58024400
 800b8a0:	03d09000 	.word	0x03d09000
 800b8a4:	46000000 	.word	0x46000000
 800b8a8:	4c742400 	.word	0x4c742400
 800b8ac:	4a742400 	.word	0x4a742400
 800b8b0:	4bb71b00 	.word	0x4bb71b00

0800b8b4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b089      	sub	sp, #36	@ 0x24
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b8bc:	4ba1      	ldr	r3, [pc, #644]	@ (800bb44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8c0:	f003 0303 	and.w	r3, r3, #3
 800b8c4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b8c6:	4b9f      	ldr	r3, [pc, #636]	@ (800bb44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8ca:	0d1b      	lsrs	r3, r3, #20
 800b8cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b8d0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b8d2:	4b9c      	ldr	r3, [pc, #624]	@ (800bb44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8d6:	0a1b      	lsrs	r3, r3, #8
 800b8d8:	f003 0301 	and.w	r3, r3, #1
 800b8dc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b8de:	4b99      	ldr	r3, [pc, #612]	@ (800bb44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b8e2:	08db      	lsrs	r3, r3, #3
 800b8e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b8e8:	693a      	ldr	r2, [r7, #16]
 800b8ea:	fb02 f303 	mul.w	r3, r2, r3
 800b8ee:	ee07 3a90 	vmov	s15, r3
 800b8f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b8fa:	697b      	ldr	r3, [r7, #20]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	f000 8111 	beq.w	800bb24 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b902:	69bb      	ldr	r3, [r7, #24]
 800b904:	2b02      	cmp	r3, #2
 800b906:	f000 8083 	beq.w	800ba10 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b90a:	69bb      	ldr	r3, [r7, #24]
 800b90c:	2b02      	cmp	r3, #2
 800b90e:	f200 80a1 	bhi.w	800ba54 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b912:	69bb      	ldr	r3, [r7, #24]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d003      	beq.n	800b920 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b918:	69bb      	ldr	r3, [r7, #24]
 800b91a:	2b01      	cmp	r3, #1
 800b91c:	d056      	beq.n	800b9cc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b91e:	e099      	b.n	800ba54 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b920:	4b88      	ldr	r3, [pc, #544]	@ (800bb44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	f003 0320 	and.w	r3, r3, #32
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d02d      	beq.n	800b988 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b92c:	4b85      	ldr	r3, [pc, #532]	@ (800bb44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	08db      	lsrs	r3, r3, #3
 800b932:	f003 0303 	and.w	r3, r3, #3
 800b936:	4a84      	ldr	r2, [pc, #528]	@ (800bb48 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b938:	fa22 f303 	lsr.w	r3, r2, r3
 800b93c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	ee07 3a90 	vmov	s15, r3
 800b944:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	ee07 3a90 	vmov	s15, r3
 800b94e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b956:	4b7b      	ldr	r3, [pc, #492]	@ (800bb44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b95a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b95e:	ee07 3a90 	vmov	s15, r3
 800b962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b966:	ed97 6a03 	vldr	s12, [r7, #12]
 800b96a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800bb4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b96e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b976:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b97a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b97e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b982:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b986:	e087      	b.n	800ba98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b988:	697b      	ldr	r3, [r7, #20]
 800b98a:	ee07 3a90 	vmov	s15, r3
 800b98e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b992:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bb50 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b99a:	4b6a      	ldr	r3, [pc, #424]	@ (800bb44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b99c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b99e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9a2:	ee07 3a90 	vmov	s15, r3
 800b9a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9ae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800bb4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b9b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b9be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b9ca:	e065      	b.n	800ba98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	ee07 3a90 	vmov	s15, r3
 800b9d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9d6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bb54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b9da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9de:	4b59      	ldr	r3, [pc, #356]	@ (800bb44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9e6:	ee07 3a90 	vmov	s15, r3
 800b9ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9f2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800bb4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b9f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba0e:	e043      	b.n	800ba98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	ee07 3a90 	vmov	s15, r3
 800ba16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba1a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800bb58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ba1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba22:	4b48      	ldr	r3, [pc, #288]	@ (800bb44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba2a:	ee07 3a90 	vmov	s15, r3
 800ba2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba32:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba36:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800bb4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba52:	e021      	b.n	800ba98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	ee07 3a90 	vmov	s15, r3
 800ba5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba5e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bb54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ba62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba66:	4b37      	ldr	r3, [pc, #220]	@ (800bb44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba6e:	ee07 3a90 	vmov	s15, r3
 800ba72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba76:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba7a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800bb4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba96:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ba98:	4b2a      	ldr	r3, [pc, #168]	@ (800bb44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba9c:	0a5b      	lsrs	r3, r3, #9
 800ba9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800baa2:	ee07 3a90 	vmov	s15, r3
 800baa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baaa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800baae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bab2:	edd7 6a07 	vldr	s13, [r7, #28]
 800bab6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800baba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800babe:	ee17 2a90 	vmov	r2, s15
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800bac6:	4b1f      	ldr	r3, [pc, #124]	@ (800bb44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800baca:	0c1b      	lsrs	r3, r3, #16
 800bacc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bad0:	ee07 3a90 	vmov	s15, r3
 800bad4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bad8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800badc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bae0:	edd7 6a07 	vldr	s13, [r7, #28]
 800bae4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bae8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800baec:	ee17 2a90 	vmov	r2, s15
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800baf4:	4b13      	ldr	r3, [pc, #76]	@ (800bb44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800baf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800baf8:	0e1b      	lsrs	r3, r3, #24
 800bafa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bafe:	ee07 3a90 	vmov	s15, r3
 800bb02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bb0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb0e:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb1a:	ee17 2a90 	vmov	r2, s15
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bb22:	e008      	b.n	800bb36 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2200      	movs	r2, #0
 800bb28:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2200      	movs	r2, #0
 800bb34:	609a      	str	r2, [r3, #8]
}
 800bb36:	bf00      	nop
 800bb38:	3724      	adds	r7, #36	@ 0x24
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb40:	4770      	bx	lr
 800bb42:	bf00      	nop
 800bb44:	58024400 	.word	0x58024400
 800bb48:	03d09000 	.word	0x03d09000
 800bb4c:	46000000 	.word	0x46000000
 800bb50:	4c742400 	.word	0x4c742400
 800bb54:	4a742400 	.word	0x4a742400
 800bb58:	4bb71b00 	.word	0x4bb71b00

0800bb5c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b084      	sub	sp, #16
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
 800bb64:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bb66:	2300      	movs	r3, #0
 800bb68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bb6a:	4b53      	ldr	r3, [pc, #332]	@ (800bcb8 <RCCEx_PLL2_Config+0x15c>)
 800bb6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb6e:	f003 0303 	and.w	r3, r3, #3
 800bb72:	2b03      	cmp	r3, #3
 800bb74:	d101      	bne.n	800bb7a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bb76:	2301      	movs	r3, #1
 800bb78:	e099      	b.n	800bcae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bb7a:	4b4f      	ldr	r3, [pc, #316]	@ (800bcb8 <RCCEx_PLL2_Config+0x15c>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	4a4e      	ldr	r2, [pc, #312]	@ (800bcb8 <RCCEx_PLL2_Config+0x15c>)
 800bb80:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bb84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb86:	f7f9 fc5f 	bl	8005448 <HAL_GetTick>
 800bb8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bb8c:	e008      	b.n	800bba0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bb8e:	f7f9 fc5b 	bl	8005448 <HAL_GetTick>
 800bb92:	4602      	mov	r2, r0
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	1ad3      	subs	r3, r2, r3
 800bb98:	2b02      	cmp	r3, #2
 800bb9a:	d901      	bls.n	800bba0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bb9c:	2303      	movs	r3, #3
 800bb9e:	e086      	b.n	800bcae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bba0:	4b45      	ldr	r3, [pc, #276]	@ (800bcb8 <RCCEx_PLL2_Config+0x15c>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d1f0      	bne.n	800bb8e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bbac:	4b42      	ldr	r3, [pc, #264]	@ (800bcb8 <RCCEx_PLL2_Config+0x15c>)
 800bbae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbb0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	031b      	lsls	r3, r3, #12
 800bbba:	493f      	ldr	r1, [pc, #252]	@ (800bcb8 <RCCEx_PLL2_Config+0x15c>)
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	628b      	str	r3, [r1, #40]	@ 0x28
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	685b      	ldr	r3, [r3, #4]
 800bbc4:	3b01      	subs	r3, #1
 800bbc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	689b      	ldr	r3, [r3, #8]
 800bbce:	3b01      	subs	r3, #1
 800bbd0:	025b      	lsls	r3, r3, #9
 800bbd2:	b29b      	uxth	r3, r3
 800bbd4:	431a      	orrs	r2, r3
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	68db      	ldr	r3, [r3, #12]
 800bbda:	3b01      	subs	r3, #1
 800bbdc:	041b      	lsls	r3, r3, #16
 800bbde:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bbe2:	431a      	orrs	r2, r3
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	691b      	ldr	r3, [r3, #16]
 800bbe8:	3b01      	subs	r3, #1
 800bbea:	061b      	lsls	r3, r3, #24
 800bbec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bbf0:	4931      	ldr	r1, [pc, #196]	@ (800bcb8 <RCCEx_PLL2_Config+0x15c>)
 800bbf2:	4313      	orrs	r3, r2
 800bbf4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bbf6:	4b30      	ldr	r3, [pc, #192]	@ (800bcb8 <RCCEx_PLL2_Config+0x15c>)
 800bbf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbfa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	695b      	ldr	r3, [r3, #20]
 800bc02:	492d      	ldr	r1, [pc, #180]	@ (800bcb8 <RCCEx_PLL2_Config+0x15c>)
 800bc04:	4313      	orrs	r3, r2
 800bc06:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bc08:	4b2b      	ldr	r3, [pc, #172]	@ (800bcb8 <RCCEx_PLL2_Config+0x15c>)
 800bc0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc0c:	f023 0220 	bic.w	r2, r3, #32
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	699b      	ldr	r3, [r3, #24]
 800bc14:	4928      	ldr	r1, [pc, #160]	@ (800bcb8 <RCCEx_PLL2_Config+0x15c>)
 800bc16:	4313      	orrs	r3, r2
 800bc18:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bc1a:	4b27      	ldr	r3, [pc, #156]	@ (800bcb8 <RCCEx_PLL2_Config+0x15c>)
 800bc1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc1e:	4a26      	ldr	r2, [pc, #152]	@ (800bcb8 <RCCEx_PLL2_Config+0x15c>)
 800bc20:	f023 0310 	bic.w	r3, r3, #16
 800bc24:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bc26:	4b24      	ldr	r3, [pc, #144]	@ (800bcb8 <RCCEx_PLL2_Config+0x15c>)
 800bc28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bc2a:	4b24      	ldr	r3, [pc, #144]	@ (800bcbc <RCCEx_PLL2_Config+0x160>)
 800bc2c:	4013      	ands	r3, r2
 800bc2e:	687a      	ldr	r2, [r7, #4]
 800bc30:	69d2      	ldr	r2, [r2, #28]
 800bc32:	00d2      	lsls	r2, r2, #3
 800bc34:	4920      	ldr	r1, [pc, #128]	@ (800bcb8 <RCCEx_PLL2_Config+0x15c>)
 800bc36:	4313      	orrs	r3, r2
 800bc38:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bc3a:	4b1f      	ldr	r3, [pc, #124]	@ (800bcb8 <RCCEx_PLL2_Config+0x15c>)
 800bc3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc3e:	4a1e      	ldr	r2, [pc, #120]	@ (800bcb8 <RCCEx_PLL2_Config+0x15c>)
 800bc40:	f043 0310 	orr.w	r3, r3, #16
 800bc44:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d106      	bne.n	800bc5a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bc4c:	4b1a      	ldr	r3, [pc, #104]	@ (800bcb8 <RCCEx_PLL2_Config+0x15c>)
 800bc4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc50:	4a19      	ldr	r2, [pc, #100]	@ (800bcb8 <RCCEx_PLL2_Config+0x15c>)
 800bc52:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bc56:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bc58:	e00f      	b.n	800bc7a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	2b01      	cmp	r3, #1
 800bc5e:	d106      	bne.n	800bc6e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bc60:	4b15      	ldr	r3, [pc, #84]	@ (800bcb8 <RCCEx_PLL2_Config+0x15c>)
 800bc62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc64:	4a14      	ldr	r2, [pc, #80]	@ (800bcb8 <RCCEx_PLL2_Config+0x15c>)
 800bc66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bc6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bc6c:	e005      	b.n	800bc7a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bc6e:	4b12      	ldr	r3, [pc, #72]	@ (800bcb8 <RCCEx_PLL2_Config+0x15c>)
 800bc70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc72:	4a11      	ldr	r2, [pc, #68]	@ (800bcb8 <RCCEx_PLL2_Config+0x15c>)
 800bc74:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bc78:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bc7a:	4b0f      	ldr	r3, [pc, #60]	@ (800bcb8 <RCCEx_PLL2_Config+0x15c>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	4a0e      	ldr	r2, [pc, #56]	@ (800bcb8 <RCCEx_PLL2_Config+0x15c>)
 800bc80:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bc84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc86:	f7f9 fbdf 	bl	8005448 <HAL_GetTick>
 800bc8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bc8c:	e008      	b.n	800bca0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bc8e:	f7f9 fbdb 	bl	8005448 <HAL_GetTick>
 800bc92:	4602      	mov	r2, r0
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	1ad3      	subs	r3, r2, r3
 800bc98:	2b02      	cmp	r3, #2
 800bc9a:	d901      	bls.n	800bca0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bc9c:	2303      	movs	r3, #3
 800bc9e:	e006      	b.n	800bcae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bca0:	4b05      	ldr	r3, [pc, #20]	@ (800bcb8 <RCCEx_PLL2_Config+0x15c>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d0f0      	beq.n	800bc8e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bcac:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3710      	adds	r7, #16
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}
 800bcb6:	bf00      	nop
 800bcb8:	58024400 	.word	0x58024400
 800bcbc:	ffff0007 	.word	0xffff0007

0800bcc0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b084      	sub	sp, #16
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
 800bcc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bcca:	2300      	movs	r3, #0
 800bccc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bcce:	4b53      	ldr	r3, [pc, #332]	@ (800be1c <RCCEx_PLL3_Config+0x15c>)
 800bcd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcd2:	f003 0303 	and.w	r3, r3, #3
 800bcd6:	2b03      	cmp	r3, #3
 800bcd8:	d101      	bne.n	800bcde <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bcda:	2301      	movs	r3, #1
 800bcdc:	e099      	b.n	800be12 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bcde:	4b4f      	ldr	r3, [pc, #316]	@ (800be1c <RCCEx_PLL3_Config+0x15c>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	4a4e      	ldr	r2, [pc, #312]	@ (800be1c <RCCEx_PLL3_Config+0x15c>)
 800bce4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bce8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bcea:	f7f9 fbad 	bl	8005448 <HAL_GetTick>
 800bcee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bcf0:	e008      	b.n	800bd04 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bcf2:	f7f9 fba9 	bl	8005448 <HAL_GetTick>
 800bcf6:	4602      	mov	r2, r0
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	1ad3      	subs	r3, r2, r3
 800bcfc:	2b02      	cmp	r3, #2
 800bcfe:	d901      	bls.n	800bd04 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bd00:	2303      	movs	r3, #3
 800bd02:	e086      	b.n	800be12 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bd04:	4b45      	ldr	r3, [pc, #276]	@ (800be1c <RCCEx_PLL3_Config+0x15c>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d1f0      	bne.n	800bcf2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bd10:	4b42      	ldr	r3, [pc, #264]	@ (800be1c <RCCEx_PLL3_Config+0x15c>)
 800bd12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd14:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	051b      	lsls	r3, r3, #20
 800bd1e:	493f      	ldr	r1, [pc, #252]	@ (800be1c <RCCEx_PLL3_Config+0x15c>)
 800bd20:	4313      	orrs	r3, r2
 800bd22:	628b      	str	r3, [r1, #40]	@ 0x28
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	685b      	ldr	r3, [r3, #4]
 800bd28:	3b01      	subs	r3, #1
 800bd2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	689b      	ldr	r3, [r3, #8]
 800bd32:	3b01      	subs	r3, #1
 800bd34:	025b      	lsls	r3, r3, #9
 800bd36:	b29b      	uxth	r3, r3
 800bd38:	431a      	orrs	r2, r3
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	68db      	ldr	r3, [r3, #12]
 800bd3e:	3b01      	subs	r3, #1
 800bd40:	041b      	lsls	r3, r3, #16
 800bd42:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bd46:	431a      	orrs	r2, r3
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	691b      	ldr	r3, [r3, #16]
 800bd4c:	3b01      	subs	r3, #1
 800bd4e:	061b      	lsls	r3, r3, #24
 800bd50:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bd54:	4931      	ldr	r1, [pc, #196]	@ (800be1c <RCCEx_PLL3_Config+0x15c>)
 800bd56:	4313      	orrs	r3, r2
 800bd58:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bd5a:	4b30      	ldr	r3, [pc, #192]	@ (800be1c <RCCEx_PLL3_Config+0x15c>)
 800bd5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd5e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	695b      	ldr	r3, [r3, #20]
 800bd66:	492d      	ldr	r1, [pc, #180]	@ (800be1c <RCCEx_PLL3_Config+0x15c>)
 800bd68:	4313      	orrs	r3, r2
 800bd6a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bd6c:	4b2b      	ldr	r3, [pc, #172]	@ (800be1c <RCCEx_PLL3_Config+0x15c>)
 800bd6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd70:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	699b      	ldr	r3, [r3, #24]
 800bd78:	4928      	ldr	r1, [pc, #160]	@ (800be1c <RCCEx_PLL3_Config+0x15c>)
 800bd7a:	4313      	orrs	r3, r2
 800bd7c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bd7e:	4b27      	ldr	r3, [pc, #156]	@ (800be1c <RCCEx_PLL3_Config+0x15c>)
 800bd80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd82:	4a26      	ldr	r2, [pc, #152]	@ (800be1c <RCCEx_PLL3_Config+0x15c>)
 800bd84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bd88:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bd8a:	4b24      	ldr	r3, [pc, #144]	@ (800be1c <RCCEx_PLL3_Config+0x15c>)
 800bd8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bd8e:	4b24      	ldr	r3, [pc, #144]	@ (800be20 <RCCEx_PLL3_Config+0x160>)
 800bd90:	4013      	ands	r3, r2
 800bd92:	687a      	ldr	r2, [r7, #4]
 800bd94:	69d2      	ldr	r2, [r2, #28]
 800bd96:	00d2      	lsls	r2, r2, #3
 800bd98:	4920      	ldr	r1, [pc, #128]	@ (800be1c <RCCEx_PLL3_Config+0x15c>)
 800bd9a:	4313      	orrs	r3, r2
 800bd9c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bd9e:	4b1f      	ldr	r3, [pc, #124]	@ (800be1c <RCCEx_PLL3_Config+0x15c>)
 800bda0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bda2:	4a1e      	ldr	r2, [pc, #120]	@ (800be1c <RCCEx_PLL3_Config+0x15c>)
 800bda4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bda8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d106      	bne.n	800bdbe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bdb0:	4b1a      	ldr	r3, [pc, #104]	@ (800be1c <RCCEx_PLL3_Config+0x15c>)
 800bdb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdb4:	4a19      	ldr	r2, [pc, #100]	@ (800be1c <RCCEx_PLL3_Config+0x15c>)
 800bdb6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800bdba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bdbc:	e00f      	b.n	800bdde <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	2b01      	cmp	r3, #1
 800bdc2:	d106      	bne.n	800bdd2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bdc4:	4b15      	ldr	r3, [pc, #84]	@ (800be1c <RCCEx_PLL3_Config+0x15c>)
 800bdc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdc8:	4a14      	ldr	r2, [pc, #80]	@ (800be1c <RCCEx_PLL3_Config+0x15c>)
 800bdca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bdce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bdd0:	e005      	b.n	800bdde <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bdd2:	4b12      	ldr	r3, [pc, #72]	@ (800be1c <RCCEx_PLL3_Config+0x15c>)
 800bdd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdd6:	4a11      	ldr	r2, [pc, #68]	@ (800be1c <RCCEx_PLL3_Config+0x15c>)
 800bdd8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bddc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bdde:	4b0f      	ldr	r3, [pc, #60]	@ (800be1c <RCCEx_PLL3_Config+0x15c>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	4a0e      	ldr	r2, [pc, #56]	@ (800be1c <RCCEx_PLL3_Config+0x15c>)
 800bde4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bde8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bdea:	f7f9 fb2d 	bl	8005448 <HAL_GetTick>
 800bdee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bdf0:	e008      	b.n	800be04 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bdf2:	f7f9 fb29 	bl	8005448 <HAL_GetTick>
 800bdf6:	4602      	mov	r2, r0
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	1ad3      	subs	r3, r2, r3
 800bdfc:	2b02      	cmp	r3, #2
 800bdfe:	d901      	bls.n	800be04 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800be00:	2303      	movs	r3, #3
 800be02:	e006      	b.n	800be12 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800be04:	4b05      	ldr	r3, [pc, #20]	@ (800be1c <RCCEx_PLL3_Config+0x15c>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d0f0      	beq.n	800bdf2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800be10:	7bfb      	ldrb	r3, [r7, #15]
}
 800be12:	4618      	mov	r0, r3
 800be14:	3710      	adds	r7, #16
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}
 800be1a:	bf00      	nop
 800be1c:	58024400 	.word	0x58024400
 800be20:	ffff0007 	.word	0xffff0007

0800be24 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b084      	sub	sp, #16
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d101      	bne.n	800be36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800be32:	2301      	movs	r3, #1
 800be34:	e10f      	b.n	800c056 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2200      	movs	r2, #0
 800be3a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	4a87      	ldr	r2, [pc, #540]	@ (800c060 <HAL_SPI_Init+0x23c>)
 800be42:	4293      	cmp	r3, r2
 800be44:	d00f      	beq.n	800be66 <HAL_SPI_Init+0x42>
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	4a86      	ldr	r2, [pc, #536]	@ (800c064 <HAL_SPI_Init+0x240>)
 800be4c:	4293      	cmp	r3, r2
 800be4e:	d00a      	beq.n	800be66 <HAL_SPI_Init+0x42>
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	4a84      	ldr	r2, [pc, #528]	@ (800c068 <HAL_SPI_Init+0x244>)
 800be56:	4293      	cmp	r3, r2
 800be58:	d005      	beq.n	800be66 <HAL_SPI_Init+0x42>
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	68db      	ldr	r3, [r3, #12]
 800be5e:	2b0f      	cmp	r3, #15
 800be60:	d901      	bls.n	800be66 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800be62:	2301      	movs	r3, #1
 800be64:	e0f7      	b.n	800c056 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f001 f968 	bl	800d13c <SPI_GetPacketSize>
 800be6c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	4a7b      	ldr	r2, [pc, #492]	@ (800c060 <HAL_SPI_Init+0x23c>)
 800be74:	4293      	cmp	r3, r2
 800be76:	d00c      	beq.n	800be92 <HAL_SPI_Init+0x6e>
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	4a79      	ldr	r2, [pc, #484]	@ (800c064 <HAL_SPI_Init+0x240>)
 800be7e:	4293      	cmp	r3, r2
 800be80:	d007      	beq.n	800be92 <HAL_SPI_Init+0x6e>
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	4a78      	ldr	r2, [pc, #480]	@ (800c068 <HAL_SPI_Init+0x244>)
 800be88:	4293      	cmp	r3, r2
 800be8a:	d002      	beq.n	800be92 <HAL_SPI_Init+0x6e>
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	2b08      	cmp	r3, #8
 800be90:	d811      	bhi.n	800beb6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800be96:	4a72      	ldr	r2, [pc, #456]	@ (800c060 <HAL_SPI_Init+0x23c>)
 800be98:	4293      	cmp	r3, r2
 800be9a:	d009      	beq.n	800beb0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	4a70      	ldr	r2, [pc, #448]	@ (800c064 <HAL_SPI_Init+0x240>)
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d004      	beq.n	800beb0 <HAL_SPI_Init+0x8c>
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	4a6f      	ldr	r2, [pc, #444]	@ (800c068 <HAL_SPI_Init+0x244>)
 800beac:	4293      	cmp	r3, r2
 800beae:	d104      	bne.n	800beba <HAL_SPI_Init+0x96>
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	2b10      	cmp	r3, #16
 800beb4:	d901      	bls.n	800beba <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800beb6:	2301      	movs	r3, #1
 800beb8:	e0cd      	b.n	800c056 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bec0:	b2db      	uxtb	r3, r3
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d106      	bne.n	800bed4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2200      	movs	r2, #0
 800beca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f7f5 ff98 	bl	8001e04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2202      	movs	r2, #2
 800bed8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	681a      	ldr	r2, [r3, #0]
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	f022 0201 	bic.w	r2, r2, #1
 800beea:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	689b      	ldr	r3, [r3, #8]
 800bef2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800bef6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	699b      	ldr	r3, [r3, #24]
 800befc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bf00:	d119      	bne.n	800bf36 <HAL_SPI_Init+0x112>
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	685b      	ldr	r3, [r3, #4]
 800bf06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bf0a:	d103      	bne.n	800bf14 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d008      	beq.n	800bf26 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d10c      	bne.n	800bf36 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bf20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bf24:	d107      	bne.n	800bf36 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	681a      	ldr	r2, [r3, #0]
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800bf34:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	685b      	ldr	r3, [r3, #4]
 800bf3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d00f      	beq.n	800bf62 <HAL_SPI_Init+0x13e>
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	68db      	ldr	r3, [r3, #12]
 800bf46:	2b06      	cmp	r3, #6
 800bf48:	d90b      	bls.n	800bf62 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	430a      	orrs	r2, r1
 800bf5e:	601a      	str	r2, [r3, #0]
 800bf60:	e007      	b.n	800bf72 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	681a      	ldr	r2, [r3, #0]
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bf70:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	69da      	ldr	r2, [r3, #28]
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf7a:	431a      	orrs	r2, r3
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	431a      	orrs	r2, r3
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf84:	ea42 0103 	orr.w	r1, r2, r3
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	68da      	ldr	r2, [r3, #12]
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	430a      	orrs	r2, r1
 800bf92:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf9c:	431a      	orrs	r2, r3
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfa2:	431a      	orrs	r2, r3
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	699b      	ldr	r3, [r3, #24]
 800bfa8:	431a      	orrs	r2, r3
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	691b      	ldr	r3, [r3, #16]
 800bfae:	431a      	orrs	r2, r3
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	695b      	ldr	r3, [r3, #20]
 800bfb4:	431a      	orrs	r2, r3
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6a1b      	ldr	r3, [r3, #32]
 800bfba:	431a      	orrs	r2, r3
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	685b      	ldr	r3, [r3, #4]
 800bfc0:	431a      	orrs	r2, r3
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bfc6:	431a      	orrs	r2, r3
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	689b      	ldr	r3, [r3, #8]
 800bfcc:	431a      	orrs	r2, r3
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bfd2:	ea42 0103 	orr.w	r1, r2, r3
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	430a      	orrs	r2, r1
 800bfe0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	685b      	ldr	r3, [r3, #4]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d113      	bne.n	800c012 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	689b      	ldr	r3, [r3, #8]
 800bff0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bffc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	689b      	ldr	r3, [r3, #8]
 800c004:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c010:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	f022 0201 	bic.w	r2, r2, #1
 800c020:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	685b      	ldr	r3, [r3, #4]
 800c026:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d00a      	beq.n	800c044 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	68db      	ldr	r3, [r3, #12]
 800c034:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	430a      	orrs	r2, r1
 800c042:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2200      	movs	r2, #0
 800c048:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2201      	movs	r2, #1
 800c050:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800c054:	2300      	movs	r3, #0
}
 800c056:	4618      	mov	r0, r3
 800c058:	3710      	adds	r7, #16
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}
 800c05e:	bf00      	nop
 800c060:	40013000 	.word	0x40013000
 800c064:	40003800 	.word	0x40003800
 800c068:	40003c00 	.word	0x40003c00

0800c06c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b088      	sub	sp, #32
 800c070:	af02      	add	r7, sp, #8
 800c072:	60f8      	str	r0, [r7, #12]
 800c074:	60b9      	str	r1, [r7, #8]
 800c076:	603b      	str	r3, [r7, #0]
 800c078:	4613      	mov	r3, r2
 800c07a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	3320      	adds	r3, #32
 800c082:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c084:	f7f9 f9e0 	bl	8005448 <HAL_GetTick>
 800c088:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c090:	b2db      	uxtb	r3, r3
 800c092:	2b01      	cmp	r3, #1
 800c094:	d001      	beq.n	800c09a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800c096:	2302      	movs	r3, #2
 800c098:	e1d1      	b.n	800c43e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d002      	beq.n	800c0a6 <HAL_SPI_Transmit+0x3a>
 800c0a0:	88fb      	ldrh	r3, [r7, #6]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d101      	bne.n	800c0aa <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	e1c9      	b.n	800c43e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800c0b0:	2b01      	cmp	r3, #1
 800c0b2:	d101      	bne.n	800c0b8 <HAL_SPI_Transmit+0x4c>
 800c0b4:	2302      	movs	r3, #2
 800c0b6:	e1c2      	b.n	800c43e <HAL_SPI_Transmit+0x3d2>
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	2201      	movs	r2, #1
 800c0bc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	2203      	movs	r2, #3
 800c0c4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	68ba      	ldr	r2, [r7, #8]
 800c0d4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	88fa      	ldrh	r2, [r7, #6]
 800c0da:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	88fa      	ldrh	r2, [r7, #6]
 800c0e2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	2200      	movs	r2, #0
 800c100:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	2200      	movs	r2, #0
 800c106:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	689b      	ldr	r3, [r3, #8]
 800c10c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800c110:	d108      	bne.n	800c124 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	681a      	ldr	r2, [r3, #0]
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c120:	601a      	str	r2, [r3, #0]
 800c122:	e009      	b.n	800c138 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	68db      	ldr	r3, [r3, #12]
 800c12a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800c136:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	685a      	ldr	r2, [r3, #4]
 800c13e:	4b96      	ldr	r3, [pc, #600]	@ (800c398 <HAL_SPI_Transmit+0x32c>)
 800c140:	4013      	ands	r3, r2
 800c142:	88f9      	ldrh	r1, [r7, #6]
 800c144:	68fa      	ldr	r2, [r7, #12]
 800c146:	6812      	ldr	r2, [r2, #0]
 800c148:	430b      	orrs	r3, r1
 800c14a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	681a      	ldr	r2, [r3, #0]
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f042 0201 	orr.w	r2, r2, #1
 800c15a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	685b      	ldr	r3, [r3, #4]
 800c160:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c164:	d107      	bne.n	800c176 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	681a      	ldr	r2, [r3, #0]
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c174:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	68db      	ldr	r3, [r3, #12]
 800c17a:	2b0f      	cmp	r3, #15
 800c17c:	d947      	bls.n	800c20e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c17e:	e03f      	b.n	800c200 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	695b      	ldr	r3, [r3, #20]
 800c186:	f003 0302 	and.w	r3, r3, #2
 800c18a:	2b02      	cmp	r3, #2
 800c18c:	d114      	bne.n	800c1b8 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	6812      	ldr	r2, [r2, #0]
 800c198:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c19e:	1d1a      	adds	r2, r3, #4
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c1aa:	b29b      	uxth	r3, r3
 800c1ac:	3b01      	subs	r3, #1
 800c1ae:	b29a      	uxth	r2, r3
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c1b6:	e023      	b.n	800c200 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c1b8:	f7f9 f946 	bl	8005448 <HAL_GetTick>
 800c1bc:	4602      	mov	r2, r0
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	1ad3      	subs	r3, r2, r3
 800c1c2:	683a      	ldr	r2, [r7, #0]
 800c1c4:	429a      	cmp	r2, r3
 800c1c6:	d803      	bhi.n	800c1d0 <HAL_SPI_Transmit+0x164>
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1ce:	d102      	bne.n	800c1d6 <HAL_SPI_Transmit+0x16a>
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d114      	bne.n	800c200 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c1d6:	68f8      	ldr	r0, [r7, #12]
 800c1d8:	f000 fee2 	bl	800cfa0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c1e2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	2201      	movs	r2, #1
 800c1f0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c1fc:	2303      	movs	r3, #3
 800c1fe:	e11e      	b.n	800c43e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c206:	b29b      	uxth	r3, r3
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d1b9      	bne.n	800c180 <HAL_SPI_Transmit+0x114>
 800c20c:	e0f1      	b.n	800c3f2 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	68db      	ldr	r3, [r3, #12]
 800c212:	2b07      	cmp	r3, #7
 800c214:	f240 80e6 	bls.w	800c3e4 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c218:	e05d      	b.n	800c2d6 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	695b      	ldr	r3, [r3, #20]
 800c220:	f003 0302 	and.w	r3, r3, #2
 800c224:	2b02      	cmp	r3, #2
 800c226:	d132      	bne.n	800c28e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c22e:	b29b      	uxth	r3, r3
 800c230:	2b01      	cmp	r3, #1
 800c232:	d918      	bls.n	800c266 <HAL_SPI_Transmit+0x1fa>
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d014      	beq.n	800c266 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	6812      	ldr	r2, [r2, #0]
 800c246:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c24c:	1d1a      	adds	r2, r3, #4
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c258:	b29b      	uxth	r3, r3
 800c25a:	3b02      	subs	r3, #2
 800c25c:	b29a      	uxth	r2, r3
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c264:	e037      	b.n	800c2d6 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c26a:	881a      	ldrh	r2, [r3, #0]
 800c26c:	697b      	ldr	r3, [r7, #20]
 800c26e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c274:	1c9a      	adds	r2, r3, #2
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c280:	b29b      	uxth	r3, r3
 800c282:	3b01      	subs	r3, #1
 800c284:	b29a      	uxth	r2, r3
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c28c:	e023      	b.n	800c2d6 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c28e:	f7f9 f8db 	bl	8005448 <HAL_GetTick>
 800c292:	4602      	mov	r2, r0
 800c294:	693b      	ldr	r3, [r7, #16]
 800c296:	1ad3      	subs	r3, r2, r3
 800c298:	683a      	ldr	r2, [r7, #0]
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d803      	bhi.n	800c2a6 <HAL_SPI_Transmit+0x23a>
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2a4:	d102      	bne.n	800c2ac <HAL_SPI_Transmit+0x240>
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d114      	bne.n	800c2d6 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c2ac:	68f8      	ldr	r0, [r7, #12]
 800c2ae:	f000 fe77 	bl	800cfa0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c2b8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	2201      	movs	r2, #1
 800c2c6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c2d2:	2303      	movs	r3, #3
 800c2d4:	e0b3      	b.n	800c43e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c2dc:	b29b      	uxth	r3, r3
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d19b      	bne.n	800c21a <HAL_SPI_Transmit+0x1ae>
 800c2e2:	e086      	b.n	800c3f2 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	695b      	ldr	r3, [r3, #20]
 800c2ea:	f003 0302 	and.w	r3, r3, #2
 800c2ee:	2b02      	cmp	r3, #2
 800c2f0:	d154      	bne.n	800c39c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c2f8:	b29b      	uxth	r3, r3
 800c2fa:	2b03      	cmp	r3, #3
 800c2fc:	d918      	bls.n	800c330 <HAL_SPI_Transmit+0x2c4>
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c302:	2b40      	cmp	r3, #64	@ 0x40
 800c304:	d914      	bls.n	800c330 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	6812      	ldr	r2, [r2, #0]
 800c310:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c316:	1d1a      	adds	r2, r3, #4
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c322:	b29b      	uxth	r3, r3
 800c324:	3b04      	subs	r3, #4
 800c326:	b29a      	uxth	r2, r3
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c32e:	e059      	b.n	800c3e4 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c336:	b29b      	uxth	r3, r3
 800c338:	2b01      	cmp	r3, #1
 800c33a:	d917      	bls.n	800c36c <HAL_SPI_Transmit+0x300>
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c340:	2b00      	cmp	r3, #0
 800c342:	d013      	beq.n	800c36c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c348:	881a      	ldrh	r2, [r3, #0]
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c352:	1c9a      	adds	r2, r3, #2
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c35e:	b29b      	uxth	r3, r3
 800c360:	3b02      	subs	r3, #2
 800c362:	b29a      	uxth	r2, r3
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c36a:	e03b      	b.n	800c3e4 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	3320      	adds	r3, #32
 800c376:	7812      	ldrb	r2, [r2, #0]
 800c378:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c37e:	1c5a      	adds	r2, r3, #1
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c38a:	b29b      	uxth	r3, r3
 800c38c:	3b01      	subs	r3, #1
 800c38e:	b29a      	uxth	r2, r3
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c396:	e025      	b.n	800c3e4 <HAL_SPI_Transmit+0x378>
 800c398:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c39c:	f7f9 f854 	bl	8005448 <HAL_GetTick>
 800c3a0:	4602      	mov	r2, r0
 800c3a2:	693b      	ldr	r3, [r7, #16]
 800c3a4:	1ad3      	subs	r3, r2, r3
 800c3a6:	683a      	ldr	r2, [r7, #0]
 800c3a8:	429a      	cmp	r2, r3
 800c3aa:	d803      	bhi.n	800c3b4 <HAL_SPI_Transmit+0x348>
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3b2:	d102      	bne.n	800c3ba <HAL_SPI_Transmit+0x34e>
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d114      	bne.n	800c3e4 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c3ba:	68f8      	ldr	r0, [r7, #12]
 800c3bc:	f000 fdf0 	bl	800cfa0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c3c6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	2201      	movs	r2, #1
 800c3d4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	2200      	movs	r2, #0
 800c3dc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c3e0:	2303      	movs	r3, #3
 800c3e2:	e02c      	b.n	800c43e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c3ea:	b29b      	uxth	r3, r3
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	f47f af79 	bne.w	800c2e4 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800c3f2:	693b      	ldr	r3, [r7, #16]
 800c3f4:	9300      	str	r3, [sp, #0]
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	2108      	movs	r1, #8
 800c3fc:	68f8      	ldr	r0, [r7, #12]
 800c3fe:	f000 fe6f 	bl	800d0e0 <SPI_WaitOnFlagUntilTimeout>
 800c402:	4603      	mov	r3, r0
 800c404:	2b00      	cmp	r3, #0
 800c406:	d007      	beq.n	800c418 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c40e:	f043 0220 	orr.w	r2, r3, #32
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c418:	68f8      	ldr	r0, [r7, #12]
 800c41a:	f000 fdc1 	bl	800cfa0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	2201      	movs	r2, #1
 800c422:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	2200      	movs	r2, #0
 800c42a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c434:	2b00      	cmp	r3, #0
 800c436:	d001      	beq.n	800c43c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800c438:	2301      	movs	r3, #1
 800c43a:	e000      	b.n	800c43e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800c43c:	2300      	movs	r3, #0
  }
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3718      	adds	r7, #24
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}
 800c446:	bf00      	nop

0800c448 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b088      	sub	sp, #32
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	60f8      	str	r0, [r7, #12]
 800c450:	60b9      	str	r1, [r7, #8]
 800c452:	603b      	str	r3, [r7, #0]
 800c454:	4613      	mov	r3, r2
 800c456:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c45c:	095b      	lsrs	r3, r3, #5
 800c45e:	b29b      	uxth	r3, r3
 800c460:	3301      	adds	r3, #1
 800c462:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	3330      	adds	r3, #48	@ 0x30
 800c46a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c46c:	f7f8 ffec 	bl	8005448 <HAL_GetTick>
 800c470:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c478:	b2db      	uxtb	r3, r3
 800c47a:	2b01      	cmp	r3, #1
 800c47c:	d001      	beq.n	800c482 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800c47e:	2302      	movs	r3, #2
 800c480:	e250      	b.n	800c924 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d002      	beq.n	800c48e <HAL_SPI_Receive+0x46>
 800c488:	88fb      	ldrh	r3, [r7, #6]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d101      	bne.n	800c492 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800c48e:	2301      	movs	r3, #1
 800c490:	e248      	b.n	800c924 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800c498:	2b01      	cmp	r3, #1
 800c49a:	d101      	bne.n	800c4a0 <HAL_SPI_Receive+0x58>
 800c49c:	2302      	movs	r3, #2
 800c49e:	e241      	b.n	800c924 <HAL_SPI_Receive+0x4dc>
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	2201      	movs	r2, #1
 800c4a4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	2204      	movs	r2, #4
 800c4ac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	68ba      	ldr	r2, [r7, #8]
 800c4bc:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	88fa      	ldrh	r2, [r7, #6]
 800c4c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	88fa      	ldrh	r2, [r7, #6]
 800c4ca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	2200      	movs	r2, #0
 800c4e0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	689b      	ldr	r3, [r3, #8]
 800c4f4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800c4f8:	d108      	bne.n	800c50c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	681a      	ldr	r2, [r3, #0]
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c508:	601a      	str	r2, [r3, #0]
 800c50a:	e009      	b.n	800c520 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	68db      	ldr	r3, [r3, #12]
 800c512:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800c51e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	685a      	ldr	r2, [r3, #4]
 800c526:	4b95      	ldr	r3, [pc, #596]	@ (800c77c <HAL_SPI_Receive+0x334>)
 800c528:	4013      	ands	r3, r2
 800c52a:	88f9      	ldrh	r1, [r7, #6]
 800c52c:	68fa      	ldr	r2, [r7, #12]
 800c52e:	6812      	ldr	r2, [r2, #0]
 800c530:	430b      	orrs	r3, r1
 800c532:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	681a      	ldr	r2, [r3, #0]
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	f042 0201 	orr.w	r2, r2, #1
 800c542:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	685b      	ldr	r3, [r3, #4]
 800c548:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c54c:	d107      	bne.n	800c55e <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	681a      	ldr	r2, [r3, #0]
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c55c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	68db      	ldr	r3, [r3, #12]
 800c562:	2b0f      	cmp	r3, #15
 800c564:	d96c      	bls.n	800c640 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c566:	e064      	b.n	800c632 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	695b      	ldr	r3, [r3, #20]
 800c56e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	695b      	ldr	r3, [r3, #20]
 800c576:	f003 0301 	and.w	r3, r3, #1
 800c57a:	2b01      	cmp	r3, #1
 800c57c:	d114      	bne.n	800c5a8 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	681a      	ldr	r2, [r3, #0]
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c586:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c588:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c58e:	1d1a      	adds	r2, r3, #4
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c59a:	b29b      	uxth	r3, r3
 800c59c:	3b01      	subs	r3, #1
 800c59e:	b29a      	uxth	r2, r3
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c5a6:	e044      	b.n	800c632 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c5ae:	b29b      	uxth	r3, r3
 800c5b0:	8bfa      	ldrh	r2, [r7, #30]
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	d919      	bls.n	800c5ea <HAL_SPI_Receive+0x1a2>
 800c5b6:	693b      	ldr	r3, [r7, #16]
 800c5b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d014      	beq.n	800c5ea <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	681a      	ldr	r2, [r3, #0]
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c5c8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c5ca:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c5d0:	1d1a      	adds	r2, r3, #4
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c5dc:	b29b      	uxth	r3, r3
 800c5de:	3b01      	subs	r3, #1
 800c5e0:	b29a      	uxth	r2, r3
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c5e8:	e023      	b.n	800c632 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c5ea:	f7f8 ff2d 	bl	8005448 <HAL_GetTick>
 800c5ee:	4602      	mov	r2, r0
 800c5f0:	697b      	ldr	r3, [r7, #20]
 800c5f2:	1ad3      	subs	r3, r2, r3
 800c5f4:	683a      	ldr	r2, [r7, #0]
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	d803      	bhi.n	800c602 <HAL_SPI_Receive+0x1ba>
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c600:	d102      	bne.n	800c608 <HAL_SPI_Receive+0x1c0>
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d114      	bne.n	800c632 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c608:	68f8      	ldr	r0, [r7, #12]
 800c60a:	f000 fcc9 	bl	800cfa0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c614:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	2201      	movs	r2, #1
 800c622:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	2200      	movs	r2, #0
 800c62a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c62e:	2303      	movs	r3, #3
 800c630:	e178      	b.n	800c924 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c638:	b29b      	uxth	r3, r3
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d194      	bne.n	800c568 <HAL_SPI_Receive+0x120>
 800c63e:	e15e      	b.n	800c8fe <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	68db      	ldr	r3, [r3, #12]
 800c644:	2b07      	cmp	r3, #7
 800c646:	f240 8153 	bls.w	800c8f0 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c64a:	e08f      	b.n	800c76c <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	695b      	ldr	r3, [r3, #20]
 800c652:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	695b      	ldr	r3, [r3, #20]
 800c65a:	f003 0301 	and.w	r3, r3, #1
 800c65e:	2b01      	cmp	r3, #1
 800c660:	d114      	bne.n	800c68c <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c666:	69ba      	ldr	r2, [r7, #24]
 800c668:	8812      	ldrh	r2, [r2, #0]
 800c66a:	b292      	uxth	r2, r2
 800c66c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c672:	1c9a      	adds	r2, r3, #2
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c67e:	b29b      	uxth	r3, r3
 800c680:	3b01      	subs	r3, #1
 800c682:	b29a      	uxth	r2, r3
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c68a:	e06f      	b.n	800c76c <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c692:	b29b      	uxth	r3, r3
 800c694:	8bfa      	ldrh	r2, [r7, #30]
 800c696:	429a      	cmp	r2, r3
 800c698:	d924      	bls.n	800c6e4 <HAL_SPI_Receive+0x29c>
 800c69a:	693b      	ldr	r3, [r7, #16]
 800c69c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d01f      	beq.n	800c6e4 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c6a8:	69ba      	ldr	r2, [r7, #24]
 800c6aa:	8812      	ldrh	r2, [r2, #0]
 800c6ac:	b292      	uxth	r2, r2
 800c6ae:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c6b4:	1c9a      	adds	r2, r3, #2
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c6be:	69ba      	ldr	r2, [r7, #24]
 800c6c0:	8812      	ldrh	r2, [r2, #0]
 800c6c2:	b292      	uxth	r2, r2
 800c6c4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c6ca:	1c9a      	adds	r2, r3, #2
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c6d6:	b29b      	uxth	r3, r3
 800c6d8:	3b02      	subs	r3, #2
 800c6da:	b29a      	uxth	r2, r3
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c6e2:	e043      	b.n	800c76c <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c6ea:	b29b      	uxth	r3, r3
 800c6ec:	2b01      	cmp	r3, #1
 800c6ee:	d119      	bne.n	800c724 <HAL_SPI_Receive+0x2dc>
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d014      	beq.n	800c724 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c6fe:	69ba      	ldr	r2, [r7, #24]
 800c700:	8812      	ldrh	r2, [r2, #0]
 800c702:	b292      	uxth	r2, r2
 800c704:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c70a:	1c9a      	adds	r2, r3, #2
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c716:	b29b      	uxth	r3, r3
 800c718:	3b01      	subs	r3, #1
 800c71a:	b29a      	uxth	r2, r3
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c722:	e023      	b.n	800c76c <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c724:	f7f8 fe90 	bl	8005448 <HAL_GetTick>
 800c728:	4602      	mov	r2, r0
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	1ad3      	subs	r3, r2, r3
 800c72e:	683a      	ldr	r2, [r7, #0]
 800c730:	429a      	cmp	r2, r3
 800c732:	d803      	bhi.n	800c73c <HAL_SPI_Receive+0x2f4>
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c73a:	d102      	bne.n	800c742 <HAL_SPI_Receive+0x2fa>
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d114      	bne.n	800c76c <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c742:	68f8      	ldr	r0, [r7, #12]
 800c744:	f000 fc2c 	bl	800cfa0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c74e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	2201      	movs	r2, #1
 800c75c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	2200      	movs	r2, #0
 800c764:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c768:	2303      	movs	r3, #3
 800c76a:	e0db      	b.n	800c924 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c772:	b29b      	uxth	r3, r3
 800c774:	2b00      	cmp	r3, #0
 800c776:	f47f af69 	bne.w	800c64c <HAL_SPI_Receive+0x204>
 800c77a:	e0c0      	b.n	800c8fe <HAL_SPI_Receive+0x4b6>
 800c77c:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	695b      	ldr	r3, [r3, #20]
 800c786:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	695b      	ldr	r3, [r3, #20]
 800c78e:	f003 0301 	and.w	r3, r3, #1
 800c792:	2b01      	cmp	r3, #1
 800c794:	d117      	bne.n	800c7c6 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c7a2:	7812      	ldrb	r2, [r2, #0]
 800c7a4:	b2d2      	uxtb	r2, r2
 800c7a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c7ac:	1c5a      	adds	r2, r3, #1
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c7b8:	b29b      	uxth	r3, r3
 800c7ba:	3b01      	subs	r3, #1
 800c7bc:	b29a      	uxth	r2, r3
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c7c4:	e094      	b.n	800c8f0 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c7cc:	b29b      	uxth	r3, r3
 800c7ce:	8bfa      	ldrh	r2, [r7, #30]
 800c7d0:	429a      	cmp	r2, r3
 800c7d2:	d946      	bls.n	800c862 <HAL_SPI_Receive+0x41a>
 800c7d4:	693b      	ldr	r3, [r7, #16]
 800c7d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d041      	beq.n	800c862 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c7ea:	7812      	ldrb	r2, [r2, #0]
 800c7ec:	b2d2      	uxtb	r2, r2
 800c7ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c7f4:	1c5a      	adds	r2, r3, #1
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c806:	7812      	ldrb	r2, [r2, #0]
 800c808:	b2d2      	uxtb	r2, r2
 800c80a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c810:	1c5a      	adds	r2, r3, #1
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c822:	7812      	ldrb	r2, [r2, #0]
 800c824:	b2d2      	uxtb	r2, r2
 800c826:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c82c:	1c5a      	adds	r2, r3, #1
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c83e:	7812      	ldrb	r2, [r2, #0]
 800c840:	b2d2      	uxtb	r2, r2
 800c842:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c848:	1c5a      	adds	r2, r3, #1
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c854:	b29b      	uxth	r3, r3
 800c856:	3b04      	subs	r3, #4
 800c858:	b29a      	uxth	r2, r3
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c860:	e046      	b.n	800c8f0 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c868:	b29b      	uxth	r3, r3
 800c86a:	2b03      	cmp	r3, #3
 800c86c:	d81c      	bhi.n	800c8a8 <HAL_SPI_Receive+0x460>
 800c86e:	693b      	ldr	r3, [r7, #16]
 800c870:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800c874:	2b00      	cmp	r3, #0
 800c876:	d017      	beq.n	800c8a8 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c884:	7812      	ldrb	r2, [r2, #0]
 800c886:	b2d2      	uxtb	r2, r2
 800c888:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c88e:	1c5a      	adds	r2, r3, #1
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c89a:	b29b      	uxth	r3, r3
 800c89c:	3b01      	subs	r3, #1
 800c89e:	b29a      	uxth	r2, r3
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c8a6:	e023      	b.n	800c8f0 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c8a8:	f7f8 fdce 	bl	8005448 <HAL_GetTick>
 800c8ac:	4602      	mov	r2, r0
 800c8ae:	697b      	ldr	r3, [r7, #20]
 800c8b0:	1ad3      	subs	r3, r2, r3
 800c8b2:	683a      	ldr	r2, [r7, #0]
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d803      	bhi.n	800c8c0 <HAL_SPI_Receive+0x478>
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8be:	d102      	bne.n	800c8c6 <HAL_SPI_Receive+0x47e>
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d114      	bne.n	800c8f0 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c8c6:	68f8      	ldr	r0, [r7, #12]
 800c8c8:	f000 fb6a 	bl	800cfa0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c8d2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	2201      	movs	r2, #1
 800c8e0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c8ec:	2303      	movs	r3, #3
 800c8ee:	e019      	b.n	800c924 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c8f6:	b29b      	uxth	r3, r3
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	f47f af41 	bne.w	800c780 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c8fe:	68f8      	ldr	r0, [r7, #12]
 800c900:	f000 fb4e 	bl	800cfa0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	2201      	movs	r2, #1
 800c908:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	2200      	movs	r2, #0
 800c910:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d001      	beq.n	800c922 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800c91e:	2301      	movs	r3, #1
 800c920:	e000      	b.n	800c924 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800c922:	2300      	movs	r3, #0
  }
}
 800c924:	4618      	mov	r0, r3
 800c926:	3720      	adds	r7, #32
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}

0800c92c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b08e      	sub	sp, #56	@ 0x38
 800c930:	af02      	add	r7, sp, #8
 800c932:	60f8      	str	r0, [r7, #12]
 800c934:	60b9      	str	r1, [r7, #8]
 800c936:	607a      	str	r2, [r7, #4]
 800c938:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	3320      	adds	r3, #32
 800c940:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	3330      	adds	r3, #48	@ 0x30
 800c948:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c94e:	095b      	lsrs	r3, r3, #5
 800c950:	b29b      	uxth	r3, r3
 800c952:	3301      	adds	r3, #1
 800c954:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c956:	f7f8 fd77 	bl	8005448 <HAL_GetTick>
 800c95a:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800c95c:	887b      	ldrh	r3, [r7, #2]
 800c95e:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800c960:	887b      	ldrh	r3, [r7, #2]
 800c962:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c96a:	b2db      	uxtb	r3, r3
 800c96c:	2b01      	cmp	r3, #1
 800c96e:	d001      	beq.n	800c974 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800c970:	2302      	movs	r3, #2
 800c972:	e310      	b.n	800cf96 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d005      	beq.n	800c986 <HAL_SPI_TransmitReceive+0x5a>
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d002      	beq.n	800c986 <HAL_SPI_TransmitReceive+0x5a>
 800c980:	887b      	ldrh	r3, [r7, #2]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d101      	bne.n	800c98a <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800c986:	2301      	movs	r3, #1
 800c988:	e305      	b.n	800cf96 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800c990:	2b01      	cmp	r3, #1
 800c992:	d101      	bne.n	800c998 <HAL_SPI_TransmitReceive+0x6c>
 800c994:	2302      	movs	r3, #2
 800c996:	e2fe      	b.n	800cf96 <HAL_SPI_TransmitReceive+0x66a>
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	2201      	movs	r2, #1
 800c99c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	2205      	movs	r2, #5
 800c9a4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	687a      	ldr	r2, [r7, #4]
 800c9b4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	887a      	ldrh	r2, [r7, #2]
 800c9ba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	887a      	ldrh	r2, [r7, #2]
 800c9c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	68ba      	ldr	r2, [r7, #8]
 800c9ca:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	887a      	ldrh	r2, [r7, #2]
 800c9d0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	887a      	ldrh	r2, [r7, #2]
 800c9d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	2200      	movs	r2, #0
 800c9e0:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	68da      	ldr	r2, [r3, #12]
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800c9f6:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	4a70      	ldr	r2, [pc, #448]	@ (800cbc0 <HAL_SPI_TransmitReceive+0x294>)
 800c9fe:	4293      	cmp	r3, r2
 800ca00:	d009      	beq.n	800ca16 <HAL_SPI_TransmitReceive+0xea>
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	4a6f      	ldr	r2, [pc, #444]	@ (800cbc4 <HAL_SPI_TransmitReceive+0x298>)
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	d004      	beq.n	800ca16 <HAL_SPI_TransmitReceive+0xea>
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	4a6d      	ldr	r2, [pc, #436]	@ (800cbc8 <HAL_SPI_TransmitReceive+0x29c>)
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d102      	bne.n	800ca1c <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800ca16:	2310      	movs	r3, #16
 800ca18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ca1a:	e001      	b.n	800ca20 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800ca1c:	2308      	movs	r3, #8
 800ca1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	685a      	ldr	r2, [r3, #4]
 800ca26:	4b69      	ldr	r3, [pc, #420]	@ (800cbcc <HAL_SPI_TransmitReceive+0x2a0>)
 800ca28:	4013      	ands	r3, r2
 800ca2a:	8879      	ldrh	r1, [r7, #2]
 800ca2c:	68fa      	ldr	r2, [r7, #12]
 800ca2e:	6812      	ldr	r2, [r2, #0]
 800ca30:	430b      	orrs	r3, r1
 800ca32:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	681a      	ldr	r2, [r3, #0]
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f042 0201 	orr.w	r2, r2, #1
 800ca42:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	685b      	ldr	r3, [r3, #4]
 800ca48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ca4c:	d107      	bne.n	800ca5e <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	681a      	ldr	r2, [r3, #0]
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ca5c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	68db      	ldr	r3, [r3, #12]
 800ca62:	2b0f      	cmp	r3, #15
 800ca64:	f240 80a2 	bls.w	800cbac <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800ca68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca6a:	089b      	lsrs	r3, r3, #2
 800ca6c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ca6e:	e094      	b.n	800cb9a <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	695b      	ldr	r3, [r3, #20]
 800ca76:	f003 0302 	and.w	r3, r3, #2
 800ca7a:	2b02      	cmp	r3, #2
 800ca7c:	d120      	bne.n	800cac0 <HAL_SPI_TransmitReceive+0x194>
 800ca7e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d01d      	beq.n	800cac0 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800ca84:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ca86:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800ca88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca8a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800ca8c:	429a      	cmp	r2, r3
 800ca8e:	d217      	bcs.n	800cac0 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	6812      	ldr	r2, [r2, #0]
 800ca9a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800caa0:	1d1a      	adds	r2, r3, #4
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800caac:	b29b      	uxth	r3, r3
 800caae:	3b01      	subs	r3, #1
 800cab0:	b29a      	uxth	r2, r3
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cabe:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	695b      	ldr	r3, [r3, #20]
 800cac6:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800cac8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d065      	beq.n	800cb9a <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	695b      	ldr	r3, [r3, #20]
 800cad4:	f003 0301 	and.w	r3, r3, #1
 800cad8:	2b01      	cmp	r3, #1
 800cada:	d118      	bne.n	800cb0e <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	681a      	ldr	r2, [r3, #0]
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cae4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800cae6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800caec:	1d1a      	adds	r2, r3, #4
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800caf8:	b29b      	uxth	r3, r3
 800cafa:	3b01      	subs	r3, #1
 800cafc:	b29a      	uxth	r2, r3
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cb0a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cb0c:	e045      	b.n	800cb9a <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800cb0e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800cb10:	8bfb      	ldrh	r3, [r7, #30]
 800cb12:	429a      	cmp	r2, r3
 800cb14:	d21d      	bcs.n	800cb52 <HAL_SPI_TransmitReceive+0x226>
 800cb16:	697b      	ldr	r3, [r7, #20]
 800cb18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d018      	beq.n	800cb52 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	681a      	ldr	r2, [r3, #0]
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb28:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800cb2a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb30:	1d1a      	adds	r2, r3, #4
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cb3c:	b29b      	uxth	r3, r3
 800cb3e:	3b01      	subs	r3, #1
 800cb40:	b29a      	uxth	r2, r3
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cb4e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cb50:	e023      	b.n	800cb9a <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cb52:	f7f8 fc79 	bl	8005448 <HAL_GetTick>
 800cb56:	4602      	mov	r2, r0
 800cb58:	69bb      	ldr	r3, [r7, #24]
 800cb5a:	1ad3      	subs	r3, r2, r3
 800cb5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb5e:	429a      	cmp	r2, r3
 800cb60:	d803      	bhi.n	800cb6a <HAL_SPI_TransmitReceive+0x23e>
 800cb62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb68:	d102      	bne.n	800cb70 <HAL_SPI_TransmitReceive+0x244>
 800cb6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d114      	bne.n	800cb9a <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800cb70:	68f8      	ldr	r0, [r7, #12]
 800cb72:	f000 fa15 	bl	800cfa0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cb7c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	2201      	movs	r2, #1
 800cb8a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	2200      	movs	r2, #0
 800cb92:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800cb96:	2303      	movs	r3, #3
 800cb98:	e1fd      	b.n	800cf96 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cb9a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	f47f af67 	bne.w	800ca70 <HAL_SPI_TransmitReceive+0x144>
 800cba2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	f47f af63 	bne.w	800ca70 <HAL_SPI_TransmitReceive+0x144>
 800cbaa:	e1ce      	b.n	800cf4a <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	68db      	ldr	r3, [r3, #12]
 800cbb0:	2b07      	cmp	r3, #7
 800cbb2:	f240 81c2 	bls.w	800cf3a <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800cbb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbb8:	085b      	lsrs	r3, r3, #1
 800cbba:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cbbc:	e0c9      	b.n	800cd52 <HAL_SPI_TransmitReceive+0x426>
 800cbbe:	bf00      	nop
 800cbc0:	40013000 	.word	0x40013000
 800cbc4:	40003800 	.word	0x40003800
 800cbc8:	40003c00 	.word	0x40003c00
 800cbcc:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	695b      	ldr	r3, [r3, #20]
 800cbd6:	f003 0302 	and.w	r3, r3, #2
 800cbda:	2b02      	cmp	r3, #2
 800cbdc:	d11f      	bne.n	800cc1e <HAL_SPI_TransmitReceive+0x2f2>
 800cbde:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d01c      	beq.n	800cc1e <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800cbe4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800cbe6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800cbe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbea:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d216      	bcs.n	800cc1e <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cbf4:	881a      	ldrh	r2, [r3, #0]
 800cbf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbf8:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cbfe:	1c9a      	adds	r2, r3, #2
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cc0a:	b29b      	uxth	r3, r3
 800cc0c:	3b01      	subs	r3, #1
 800cc0e:	b29a      	uxth	r2, r3
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cc1c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	695b      	ldr	r3, [r3, #20]
 800cc24:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800cc26:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	f000 8092 	beq.w	800cd52 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	695b      	ldr	r3, [r3, #20]
 800cc34:	f003 0301 	and.w	r3, r3, #1
 800cc38:	2b01      	cmp	r3, #1
 800cc3a:	d118      	bne.n	800cc6e <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc40:	6a3a      	ldr	r2, [r7, #32]
 800cc42:	8812      	ldrh	r2, [r2, #0]
 800cc44:	b292      	uxth	r2, r2
 800cc46:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc4c:	1c9a      	adds	r2, r3, #2
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cc58:	b29b      	uxth	r3, r3
 800cc5a:	3b01      	subs	r3, #1
 800cc5c:	b29a      	uxth	r2, r3
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cc6a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cc6c:	e071      	b.n	800cd52 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800cc6e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800cc70:	8bfb      	ldrh	r3, [r7, #30]
 800cc72:	429a      	cmp	r2, r3
 800cc74:	d228      	bcs.n	800ccc8 <HAL_SPI_TransmitReceive+0x39c>
 800cc76:	697b      	ldr	r3, [r7, #20]
 800cc78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d023      	beq.n	800ccc8 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc84:	6a3a      	ldr	r2, [r7, #32]
 800cc86:	8812      	ldrh	r2, [r2, #0]
 800cc88:	b292      	uxth	r2, r2
 800cc8a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc90:	1c9a      	adds	r2, r3, #2
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc9a:	6a3a      	ldr	r2, [r7, #32]
 800cc9c:	8812      	ldrh	r2, [r2, #0]
 800cc9e:	b292      	uxth	r2, r2
 800cca0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cca6:	1c9a      	adds	r2, r3, #2
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ccb2:	b29b      	uxth	r3, r3
 800ccb4:	3b02      	subs	r3, #2
 800ccb6:	b29a      	uxth	r2, r3
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ccc4:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ccc6:	e044      	b.n	800cd52 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800ccc8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ccca:	2b01      	cmp	r3, #1
 800cccc:	d11d      	bne.n	800cd0a <HAL_SPI_TransmitReceive+0x3de>
 800ccce:	697b      	ldr	r3, [r7, #20]
 800ccd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d018      	beq.n	800cd0a <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ccdc:	6a3a      	ldr	r2, [r7, #32]
 800ccde:	8812      	ldrh	r2, [r2, #0]
 800cce0:	b292      	uxth	r2, r2
 800cce2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cce8:	1c9a      	adds	r2, r3, #2
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ccf4:	b29b      	uxth	r3, r3
 800ccf6:	3b01      	subs	r3, #1
 800ccf8:	b29a      	uxth	r2, r3
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cd06:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cd08:	e023      	b.n	800cd52 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cd0a:	f7f8 fb9d 	bl	8005448 <HAL_GetTick>
 800cd0e:	4602      	mov	r2, r0
 800cd10:	69bb      	ldr	r3, [r7, #24]
 800cd12:	1ad3      	subs	r3, r2, r3
 800cd14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cd16:	429a      	cmp	r2, r3
 800cd18:	d803      	bhi.n	800cd22 <HAL_SPI_TransmitReceive+0x3f6>
 800cd1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd20:	d102      	bne.n	800cd28 <HAL_SPI_TransmitReceive+0x3fc>
 800cd22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d114      	bne.n	800cd52 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800cd28:	68f8      	ldr	r0, [r7, #12]
 800cd2a:	f000 f939 	bl	800cfa0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cd34:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	2201      	movs	r2, #1
 800cd42:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	2200      	movs	r2, #0
 800cd4a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800cd4e:	2303      	movs	r3, #3
 800cd50:	e121      	b.n	800cf96 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cd52:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	f47f af3b 	bne.w	800cbd0 <HAL_SPI_TransmitReceive+0x2a4>
 800cd5a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	f47f af37 	bne.w	800cbd0 <HAL_SPI_TransmitReceive+0x2a4>
 800cd62:	e0f2      	b.n	800cf4a <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	695b      	ldr	r3, [r3, #20]
 800cd6a:	f003 0302 	and.w	r3, r3, #2
 800cd6e:	2b02      	cmp	r3, #2
 800cd70:	d121      	bne.n	800cdb6 <HAL_SPI_TransmitReceive+0x48a>
 800cd72:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d01e      	beq.n	800cdb6 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800cd78:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800cd7a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800cd7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd7e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800cd80:	429a      	cmp	r2, r3
 800cd82:	d218      	bcs.n	800cdb6 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	3320      	adds	r3, #32
 800cd8e:	7812      	ldrb	r2, [r2, #0]
 800cd90:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd96:	1c5a      	adds	r2, r3, #1
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cda2:	b29b      	uxth	r3, r3
 800cda4:	3b01      	subs	r3, #1
 800cda6:	b29a      	uxth	r2, r3
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cdb4:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	695b      	ldr	r3, [r3, #20]
 800cdbc:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800cdbe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	f000 80ba 	beq.w	800cf3a <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	695b      	ldr	r3, [r3, #20]
 800cdcc:	f003 0301 	and.w	r3, r3, #1
 800cdd0:	2b01      	cmp	r3, #1
 800cdd2:	d11b      	bne.n	800ce0c <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cde0:	7812      	ldrb	r2, [r2, #0]
 800cde2:	b2d2      	uxtb	r2, r2
 800cde4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cdea:	1c5a      	adds	r2, r3, #1
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cdf6:	b29b      	uxth	r3, r3
 800cdf8:	3b01      	subs	r3, #1
 800cdfa:	b29a      	uxth	r2, r3
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ce08:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ce0a:	e096      	b.n	800cf3a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ce0c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ce0e:	8bfb      	ldrh	r3, [r7, #30]
 800ce10:	429a      	cmp	r2, r3
 800ce12:	d24a      	bcs.n	800ceaa <HAL_SPI_TransmitReceive+0x57e>
 800ce14:	697b      	ldr	r3, [r7, #20]
 800ce16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d045      	beq.n	800ceaa <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce2a:	7812      	ldrb	r2, [r2, #0]
 800ce2c:	b2d2      	uxtb	r2, r2
 800ce2e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce34:	1c5a      	adds	r2, r3, #1
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce46:	7812      	ldrb	r2, [r2, #0]
 800ce48:	b2d2      	uxtb	r2, r2
 800ce4a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce50:	1c5a      	adds	r2, r3, #1
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce62:	7812      	ldrb	r2, [r2, #0]
 800ce64:	b2d2      	uxtb	r2, r2
 800ce66:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce6c:	1c5a      	adds	r2, r3, #1
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce7e:	7812      	ldrb	r2, [r2, #0]
 800ce80:	b2d2      	uxtb	r2, r2
 800ce82:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce88:	1c5a      	adds	r2, r3, #1
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ce94:	b29b      	uxth	r3, r3
 800ce96:	3b04      	subs	r3, #4
 800ce98:	b29a      	uxth	r2, r3
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cea6:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cea8:	e047      	b.n	800cf3a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800ceaa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ceac:	2b03      	cmp	r3, #3
 800ceae:	d820      	bhi.n	800cef2 <HAL_SPI_TransmitReceive+0x5c6>
 800ceb0:	697b      	ldr	r3, [r7, #20]
 800ceb2:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d01b      	beq.n	800cef2 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cec6:	7812      	ldrb	r2, [r2, #0]
 800cec8:	b2d2      	uxtb	r2, r2
 800ceca:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ced0:	1c5a      	adds	r2, r3, #1
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cedc:	b29b      	uxth	r3, r3
 800cede:	3b01      	subs	r3, #1
 800cee0:	b29a      	uxth	r2, r3
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ceee:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cef0:	e023      	b.n	800cf3a <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cef2:	f7f8 faa9 	bl	8005448 <HAL_GetTick>
 800cef6:	4602      	mov	r2, r0
 800cef8:	69bb      	ldr	r3, [r7, #24]
 800cefa:	1ad3      	subs	r3, r2, r3
 800cefc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cefe:	429a      	cmp	r2, r3
 800cf00:	d803      	bhi.n	800cf0a <HAL_SPI_TransmitReceive+0x5de>
 800cf02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf08:	d102      	bne.n	800cf10 <HAL_SPI_TransmitReceive+0x5e4>
 800cf0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d114      	bne.n	800cf3a <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800cf10:	68f8      	ldr	r0, [r7, #12]
 800cf12:	f000 f845 	bl	800cfa0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cf1c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	2201      	movs	r2, #1
 800cf2a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	2200      	movs	r2, #0
 800cf32:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800cf36:	2303      	movs	r3, #3
 800cf38:	e02d      	b.n	800cf96 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cf3a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	f47f af11 	bne.w	800cd64 <HAL_SPI_TransmitReceive+0x438>
 800cf42:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	f47f af0d 	bne.w	800cd64 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800cf4a:	69bb      	ldr	r3, [r7, #24]
 800cf4c:	9300      	str	r3, [sp, #0]
 800cf4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf50:	2200      	movs	r2, #0
 800cf52:	2108      	movs	r1, #8
 800cf54:	68f8      	ldr	r0, [r7, #12]
 800cf56:	f000 f8c3 	bl	800d0e0 <SPI_WaitOnFlagUntilTimeout>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d007      	beq.n	800cf70 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cf66:	f043 0220 	orr.w	r2, r3, #32
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800cf70:	68f8      	ldr	r0, [r7, #12]
 800cf72:	f000 f815 	bl	800cfa0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	2201      	movs	r2, #1
 800cf7a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	2200      	movs	r2, #0
 800cf82:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d001      	beq.n	800cf94 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800cf90:	2301      	movs	r3, #1
 800cf92:	e000      	b.n	800cf96 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800cf94:	2300      	movs	r3, #0
  }
}
 800cf96:	4618      	mov	r0, r3
 800cf98:	3730      	adds	r7, #48	@ 0x30
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}
 800cf9e:	bf00      	nop

0800cfa0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800cfa0:	b480      	push	{r7}
 800cfa2:	b085      	sub	sp, #20
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	695b      	ldr	r3, [r3, #20]
 800cfae:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	699a      	ldr	r2, [r3, #24]
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	f042 0208 	orr.w	r2, r2, #8
 800cfbe:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	699a      	ldr	r2, [r3, #24]
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	f042 0210 	orr.w	r2, r2, #16
 800cfce:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	681a      	ldr	r2, [r3, #0]
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	f022 0201 	bic.w	r2, r2, #1
 800cfde:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	6919      	ldr	r1, [r3, #16]
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681a      	ldr	r2, [r3, #0]
 800cfea:	4b3c      	ldr	r3, [pc, #240]	@ (800d0dc <SPI_CloseTransfer+0x13c>)
 800cfec:	400b      	ands	r3, r1
 800cfee:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	689a      	ldr	r2, [r3, #8]
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800cffe:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d006:	b2db      	uxtb	r3, r3
 800d008:	2b04      	cmp	r3, #4
 800d00a:	d014      	beq.n	800d036 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	f003 0320 	and.w	r3, r3, #32
 800d012:	2b00      	cmp	r3, #0
 800d014:	d00f      	beq.n	800d036 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d01c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	699a      	ldr	r2, [r3, #24]
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	f042 0220 	orr.w	r2, r2, #32
 800d034:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d03c:	b2db      	uxtb	r3, r3
 800d03e:	2b03      	cmp	r3, #3
 800d040:	d014      	beq.n	800d06c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d00f      	beq.n	800d06c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d052:	f043 0204 	orr.w	r2, r3, #4
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	699a      	ldr	r2, [r3, #24]
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d06a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d072:	2b00      	cmp	r3, #0
 800d074:	d00f      	beq.n	800d096 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d07c:	f043 0201 	orr.w	r2, r3, #1
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	699a      	ldr	r2, [r3, #24]
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d094:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d00f      	beq.n	800d0c0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d0a6:	f043 0208 	orr.w	r2, r3, #8
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	699a      	ldr	r2, [r3, #24]
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d0be:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800d0d0:	bf00      	nop
 800d0d2:	3714      	adds	r7, #20
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0da:	4770      	bx	lr
 800d0dc:	fffffc90 	.word	0xfffffc90

0800d0e0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b084      	sub	sp, #16
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	60f8      	str	r0, [r7, #12]
 800d0e8:	60b9      	str	r1, [r7, #8]
 800d0ea:	603b      	str	r3, [r7, #0]
 800d0ec:	4613      	mov	r3, r2
 800d0ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d0f0:	e010      	b.n	800d114 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d0f2:	f7f8 f9a9 	bl	8005448 <HAL_GetTick>
 800d0f6:	4602      	mov	r2, r0
 800d0f8:	69bb      	ldr	r3, [r7, #24]
 800d0fa:	1ad3      	subs	r3, r2, r3
 800d0fc:	683a      	ldr	r2, [r7, #0]
 800d0fe:	429a      	cmp	r2, r3
 800d100:	d803      	bhi.n	800d10a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d108:	d102      	bne.n	800d110 <SPI_WaitOnFlagUntilTimeout+0x30>
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d101      	bne.n	800d114 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800d110:	2303      	movs	r3, #3
 800d112:	e00f      	b.n	800d134 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	695a      	ldr	r2, [r3, #20]
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	4013      	ands	r3, r2
 800d11e:	68ba      	ldr	r2, [r7, #8]
 800d120:	429a      	cmp	r2, r3
 800d122:	bf0c      	ite	eq
 800d124:	2301      	moveq	r3, #1
 800d126:	2300      	movne	r3, #0
 800d128:	b2db      	uxtb	r3, r3
 800d12a:	461a      	mov	r2, r3
 800d12c:	79fb      	ldrb	r3, [r7, #7]
 800d12e:	429a      	cmp	r2, r3
 800d130:	d0df      	beq.n	800d0f2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800d132:	2300      	movs	r3, #0
}
 800d134:	4618      	mov	r0, r3
 800d136:	3710      	adds	r7, #16
 800d138:	46bd      	mov	sp, r7
 800d13a:	bd80      	pop	{r7, pc}

0800d13c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800d13c:	b480      	push	{r7}
 800d13e:	b085      	sub	sp, #20
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d148:	095b      	lsrs	r3, r3, #5
 800d14a:	3301      	adds	r3, #1
 800d14c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	68db      	ldr	r3, [r3, #12]
 800d152:	3301      	adds	r3, #1
 800d154:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d156:	68bb      	ldr	r3, [r7, #8]
 800d158:	3307      	adds	r3, #7
 800d15a:	08db      	lsrs	r3, r3, #3
 800d15c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d15e:	68bb      	ldr	r3, [r7, #8]
 800d160:	68fa      	ldr	r2, [r7, #12]
 800d162:	fb02 f303 	mul.w	r3, r2, r3
}
 800d166:	4618      	mov	r0, r3
 800d168:	3714      	adds	r7, #20
 800d16a:	46bd      	mov	sp, r7
 800d16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d170:	4770      	bx	lr

0800d172 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d172:	b580      	push	{r7, lr}
 800d174:	b082      	sub	sp, #8
 800d176:	af00      	add	r7, sp, #0
 800d178:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d101      	bne.n	800d184 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d180:	2301      	movs	r3, #1
 800d182:	e049      	b.n	800d218 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d18a:	b2db      	uxtb	r3, r3
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d106      	bne.n	800d19e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2200      	movs	r2, #0
 800d194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	f7f5 fae7 	bl	800276c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	2202      	movs	r2, #2
 800d1a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681a      	ldr	r2, [r3, #0]
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	3304      	adds	r3, #4
 800d1ae:	4619      	mov	r1, r3
 800d1b0:	4610      	mov	r0, r2
 800d1b2:	f000 fc57 	bl	800da64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2201      	movs	r2, #1
 800d1ba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	2201      	movs	r2, #1
 800d1c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	2201      	movs	r2, #1
 800d1ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2201      	movs	r2, #1
 800d1d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2201      	movs	r2, #1
 800d1da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	2201      	movs	r2, #1
 800d1e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2201      	movs	r2, #1
 800d1ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	2201      	movs	r2, #1
 800d1f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	2201      	movs	r2, #1
 800d1fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2201      	movs	r2, #1
 800d202:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	2201      	movs	r2, #1
 800d20a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2201      	movs	r2, #1
 800d212:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d216:	2300      	movs	r3, #0
}
 800d218:	4618      	mov	r0, r3
 800d21a:	3708      	adds	r7, #8
 800d21c:	46bd      	mov	sp, r7
 800d21e:	bd80      	pop	{r7, pc}

0800d220 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d220:	b480      	push	{r7}
 800d222:	b085      	sub	sp, #20
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d22e:	b2db      	uxtb	r3, r3
 800d230:	2b01      	cmp	r3, #1
 800d232:	d001      	beq.n	800d238 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d234:	2301      	movs	r3, #1
 800d236:	e054      	b.n	800d2e2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2202      	movs	r2, #2
 800d23c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	68da      	ldr	r2, [r3, #12]
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	f042 0201 	orr.w	r2, r2, #1
 800d24e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	4a26      	ldr	r2, [pc, #152]	@ (800d2f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800d256:	4293      	cmp	r3, r2
 800d258:	d022      	beq.n	800d2a0 <HAL_TIM_Base_Start_IT+0x80>
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d262:	d01d      	beq.n	800d2a0 <HAL_TIM_Base_Start_IT+0x80>
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	4a22      	ldr	r2, [pc, #136]	@ (800d2f4 <HAL_TIM_Base_Start_IT+0xd4>)
 800d26a:	4293      	cmp	r3, r2
 800d26c:	d018      	beq.n	800d2a0 <HAL_TIM_Base_Start_IT+0x80>
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	4a21      	ldr	r2, [pc, #132]	@ (800d2f8 <HAL_TIM_Base_Start_IT+0xd8>)
 800d274:	4293      	cmp	r3, r2
 800d276:	d013      	beq.n	800d2a0 <HAL_TIM_Base_Start_IT+0x80>
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	4a1f      	ldr	r2, [pc, #124]	@ (800d2fc <HAL_TIM_Base_Start_IT+0xdc>)
 800d27e:	4293      	cmp	r3, r2
 800d280:	d00e      	beq.n	800d2a0 <HAL_TIM_Base_Start_IT+0x80>
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	4a1e      	ldr	r2, [pc, #120]	@ (800d300 <HAL_TIM_Base_Start_IT+0xe0>)
 800d288:	4293      	cmp	r3, r2
 800d28a:	d009      	beq.n	800d2a0 <HAL_TIM_Base_Start_IT+0x80>
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	4a1c      	ldr	r2, [pc, #112]	@ (800d304 <HAL_TIM_Base_Start_IT+0xe4>)
 800d292:	4293      	cmp	r3, r2
 800d294:	d004      	beq.n	800d2a0 <HAL_TIM_Base_Start_IT+0x80>
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	4a1b      	ldr	r2, [pc, #108]	@ (800d308 <HAL_TIM_Base_Start_IT+0xe8>)
 800d29c:	4293      	cmp	r3, r2
 800d29e:	d115      	bne.n	800d2cc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	689a      	ldr	r2, [r3, #8]
 800d2a6:	4b19      	ldr	r3, [pc, #100]	@ (800d30c <HAL_TIM_Base_Start_IT+0xec>)
 800d2a8:	4013      	ands	r3, r2
 800d2aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	2b06      	cmp	r3, #6
 800d2b0:	d015      	beq.n	800d2de <HAL_TIM_Base_Start_IT+0xbe>
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d2b8:	d011      	beq.n	800d2de <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	681a      	ldr	r2, [r3, #0]
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	f042 0201 	orr.w	r2, r2, #1
 800d2c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2ca:	e008      	b.n	800d2de <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	681a      	ldr	r2, [r3, #0]
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	f042 0201 	orr.w	r2, r2, #1
 800d2da:	601a      	str	r2, [r3, #0]
 800d2dc:	e000      	b.n	800d2e0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d2e0:	2300      	movs	r3, #0
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	3714      	adds	r7, #20
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ec:	4770      	bx	lr
 800d2ee:	bf00      	nop
 800d2f0:	40010000 	.word	0x40010000
 800d2f4:	40000400 	.word	0x40000400
 800d2f8:	40000800 	.word	0x40000800
 800d2fc:	40000c00 	.word	0x40000c00
 800d300:	40010400 	.word	0x40010400
 800d304:	40001800 	.word	0x40001800
 800d308:	40014000 	.word	0x40014000
 800d30c:	00010007 	.word	0x00010007

0800d310 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b082      	sub	sp, #8
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d101      	bne.n	800d322 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d31e:	2301      	movs	r3, #1
 800d320:	e049      	b.n	800d3b6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d328:	b2db      	uxtb	r3, r3
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d106      	bne.n	800d33c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	2200      	movs	r2, #0
 800d332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	f7f5 f9ca 	bl	80026d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2202      	movs	r2, #2
 800d340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681a      	ldr	r2, [r3, #0]
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	3304      	adds	r3, #4
 800d34c:	4619      	mov	r1, r3
 800d34e:	4610      	mov	r0, r2
 800d350:	f000 fb88 	bl	800da64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2201      	movs	r2, #1
 800d358:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2201      	movs	r2, #1
 800d360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2201      	movs	r2, #1
 800d368:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2201      	movs	r2, #1
 800d370:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2201      	movs	r2, #1
 800d378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2201      	movs	r2, #1
 800d380:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2201      	movs	r2, #1
 800d388:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2201      	movs	r2, #1
 800d390:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2201      	movs	r2, #1
 800d398:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2201      	movs	r2, #1
 800d3a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2201      	movs	r2, #1
 800d3a8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2201      	movs	r2, #1
 800d3b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d3b4:	2300      	movs	r3, #0
}
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	3708      	adds	r7, #8
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	bd80      	pop	{r7, pc}
	...

0800d3c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b084      	sub	sp, #16
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
 800d3c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d109      	bne.n	800d3e4 <HAL_TIM_PWM_Start+0x24>
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d3d6:	b2db      	uxtb	r3, r3
 800d3d8:	2b01      	cmp	r3, #1
 800d3da:	bf14      	ite	ne
 800d3dc:	2301      	movne	r3, #1
 800d3de:	2300      	moveq	r3, #0
 800d3e0:	b2db      	uxtb	r3, r3
 800d3e2:	e03c      	b.n	800d45e <HAL_TIM_PWM_Start+0x9e>
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	2b04      	cmp	r3, #4
 800d3e8:	d109      	bne.n	800d3fe <HAL_TIM_PWM_Start+0x3e>
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d3f0:	b2db      	uxtb	r3, r3
 800d3f2:	2b01      	cmp	r3, #1
 800d3f4:	bf14      	ite	ne
 800d3f6:	2301      	movne	r3, #1
 800d3f8:	2300      	moveq	r3, #0
 800d3fa:	b2db      	uxtb	r3, r3
 800d3fc:	e02f      	b.n	800d45e <HAL_TIM_PWM_Start+0x9e>
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	2b08      	cmp	r3, #8
 800d402:	d109      	bne.n	800d418 <HAL_TIM_PWM_Start+0x58>
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d40a:	b2db      	uxtb	r3, r3
 800d40c:	2b01      	cmp	r3, #1
 800d40e:	bf14      	ite	ne
 800d410:	2301      	movne	r3, #1
 800d412:	2300      	moveq	r3, #0
 800d414:	b2db      	uxtb	r3, r3
 800d416:	e022      	b.n	800d45e <HAL_TIM_PWM_Start+0x9e>
 800d418:	683b      	ldr	r3, [r7, #0]
 800d41a:	2b0c      	cmp	r3, #12
 800d41c:	d109      	bne.n	800d432 <HAL_TIM_PWM_Start+0x72>
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d424:	b2db      	uxtb	r3, r3
 800d426:	2b01      	cmp	r3, #1
 800d428:	bf14      	ite	ne
 800d42a:	2301      	movne	r3, #1
 800d42c:	2300      	moveq	r3, #0
 800d42e:	b2db      	uxtb	r3, r3
 800d430:	e015      	b.n	800d45e <HAL_TIM_PWM_Start+0x9e>
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	2b10      	cmp	r3, #16
 800d436:	d109      	bne.n	800d44c <HAL_TIM_PWM_Start+0x8c>
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d43e:	b2db      	uxtb	r3, r3
 800d440:	2b01      	cmp	r3, #1
 800d442:	bf14      	ite	ne
 800d444:	2301      	movne	r3, #1
 800d446:	2300      	moveq	r3, #0
 800d448:	b2db      	uxtb	r3, r3
 800d44a:	e008      	b.n	800d45e <HAL_TIM_PWM_Start+0x9e>
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d452:	b2db      	uxtb	r3, r3
 800d454:	2b01      	cmp	r3, #1
 800d456:	bf14      	ite	ne
 800d458:	2301      	movne	r3, #1
 800d45a:	2300      	moveq	r3, #0
 800d45c:	b2db      	uxtb	r3, r3
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d001      	beq.n	800d466 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d462:	2301      	movs	r3, #1
 800d464:	e0a1      	b.n	800d5aa <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d104      	bne.n	800d476 <HAL_TIM_PWM_Start+0xb6>
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2202      	movs	r2, #2
 800d470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d474:	e023      	b.n	800d4be <HAL_TIM_PWM_Start+0xfe>
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	2b04      	cmp	r3, #4
 800d47a:	d104      	bne.n	800d486 <HAL_TIM_PWM_Start+0xc6>
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2202      	movs	r2, #2
 800d480:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d484:	e01b      	b.n	800d4be <HAL_TIM_PWM_Start+0xfe>
 800d486:	683b      	ldr	r3, [r7, #0]
 800d488:	2b08      	cmp	r3, #8
 800d48a:	d104      	bne.n	800d496 <HAL_TIM_PWM_Start+0xd6>
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2202      	movs	r2, #2
 800d490:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d494:	e013      	b.n	800d4be <HAL_TIM_PWM_Start+0xfe>
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	2b0c      	cmp	r3, #12
 800d49a:	d104      	bne.n	800d4a6 <HAL_TIM_PWM_Start+0xe6>
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	2202      	movs	r2, #2
 800d4a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d4a4:	e00b      	b.n	800d4be <HAL_TIM_PWM_Start+0xfe>
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	2b10      	cmp	r3, #16
 800d4aa:	d104      	bne.n	800d4b6 <HAL_TIM_PWM_Start+0xf6>
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2202      	movs	r2, #2
 800d4b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d4b4:	e003      	b.n	800d4be <HAL_TIM_PWM_Start+0xfe>
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	2202      	movs	r2, #2
 800d4ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	2201      	movs	r2, #1
 800d4c4:	6839      	ldr	r1, [r7, #0]
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	f000 fe48 	bl	800e15c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	4a38      	ldr	r2, [pc, #224]	@ (800d5b4 <HAL_TIM_PWM_Start+0x1f4>)
 800d4d2:	4293      	cmp	r3, r2
 800d4d4:	d013      	beq.n	800d4fe <HAL_TIM_PWM_Start+0x13e>
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	4a37      	ldr	r2, [pc, #220]	@ (800d5b8 <HAL_TIM_PWM_Start+0x1f8>)
 800d4dc:	4293      	cmp	r3, r2
 800d4de:	d00e      	beq.n	800d4fe <HAL_TIM_PWM_Start+0x13e>
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	4a35      	ldr	r2, [pc, #212]	@ (800d5bc <HAL_TIM_PWM_Start+0x1fc>)
 800d4e6:	4293      	cmp	r3, r2
 800d4e8:	d009      	beq.n	800d4fe <HAL_TIM_PWM_Start+0x13e>
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	4a34      	ldr	r2, [pc, #208]	@ (800d5c0 <HAL_TIM_PWM_Start+0x200>)
 800d4f0:	4293      	cmp	r3, r2
 800d4f2:	d004      	beq.n	800d4fe <HAL_TIM_PWM_Start+0x13e>
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	4a32      	ldr	r2, [pc, #200]	@ (800d5c4 <HAL_TIM_PWM_Start+0x204>)
 800d4fa:	4293      	cmp	r3, r2
 800d4fc:	d101      	bne.n	800d502 <HAL_TIM_PWM_Start+0x142>
 800d4fe:	2301      	movs	r3, #1
 800d500:	e000      	b.n	800d504 <HAL_TIM_PWM_Start+0x144>
 800d502:	2300      	movs	r3, #0
 800d504:	2b00      	cmp	r3, #0
 800d506:	d007      	beq.n	800d518 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d516:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	4a25      	ldr	r2, [pc, #148]	@ (800d5b4 <HAL_TIM_PWM_Start+0x1f4>)
 800d51e:	4293      	cmp	r3, r2
 800d520:	d022      	beq.n	800d568 <HAL_TIM_PWM_Start+0x1a8>
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d52a:	d01d      	beq.n	800d568 <HAL_TIM_PWM_Start+0x1a8>
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	4a25      	ldr	r2, [pc, #148]	@ (800d5c8 <HAL_TIM_PWM_Start+0x208>)
 800d532:	4293      	cmp	r3, r2
 800d534:	d018      	beq.n	800d568 <HAL_TIM_PWM_Start+0x1a8>
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	4a24      	ldr	r2, [pc, #144]	@ (800d5cc <HAL_TIM_PWM_Start+0x20c>)
 800d53c:	4293      	cmp	r3, r2
 800d53e:	d013      	beq.n	800d568 <HAL_TIM_PWM_Start+0x1a8>
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	4a22      	ldr	r2, [pc, #136]	@ (800d5d0 <HAL_TIM_PWM_Start+0x210>)
 800d546:	4293      	cmp	r3, r2
 800d548:	d00e      	beq.n	800d568 <HAL_TIM_PWM_Start+0x1a8>
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	4a1a      	ldr	r2, [pc, #104]	@ (800d5b8 <HAL_TIM_PWM_Start+0x1f8>)
 800d550:	4293      	cmp	r3, r2
 800d552:	d009      	beq.n	800d568 <HAL_TIM_PWM_Start+0x1a8>
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	4a1e      	ldr	r2, [pc, #120]	@ (800d5d4 <HAL_TIM_PWM_Start+0x214>)
 800d55a:	4293      	cmp	r3, r2
 800d55c:	d004      	beq.n	800d568 <HAL_TIM_PWM_Start+0x1a8>
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	4a16      	ldr	r2, [pc, #88]	@ (800d5bc <HAL_TIM_PWM_Start+0x1fc>)
 800d564:	4293      	cmp	r3, r2
 800d566:	d115      	bne.n	800d594 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	689a      	ldr	r2, [r3, #8]
 800d56e:	4b1a      	ldr	r3, [pc, #104]	@ (800d5d8 <HAL_TIM_PWM_Start+0x218>)
 800d570:	4013      	ands	r3, r2
 800d572:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	2b06      	cmp	r3, #6
 800d578:	d015      	beq.n	800d5a6 <HAL_TIM_PWM_Start+0x1e6>
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d580:	d011      	beq.n	800d5a6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	681a      	ldr	r2, [r3, #0]
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	f042 0201 	orr.w	r2, r2, #1
 800d590:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d592:	e008      	b.n	800d5a6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	681a      	ldr	r2, [r3, #0]
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	f042 0201 	orr.w	r2, r2, #1
 800d5a2:	601a      	str	r2, [r3, #0]
 800d5a4:	e000      	b.n	800d5a8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d5a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d5a8:	2300      	movs	r3, #0
}
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	3710      	adds	r7, #16
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bd80      	pop	{r7, pc}
 800d5b2:	bf00      	nop
 800d5b4:	40010000 	.word	0x40010000
 800d5b8:	40010400 	.word	0x40010400
 800d5bc:	40014000 	.word	0x40014000
 800d5c0:	40014400 	.word	0x40014400
 800d5c4:	40014800 	.word	0x40014800
 800d5c8:	40000400 	.word	0x40000400
 800d5cc:	40000800 	.word	0x40000800
 800d5d0:	40000c00 	.word	0x40000c00
 800d5d4:	40001800 	.word	0x40001800
 800d5d8:	00010007 	.word	0x00010007

0800d5dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b084      	sub	sp, #16
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	68db      	ldr	r3, [r3, #12]
 800d5ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	691b      	ldr	r3, [r3, #16]
 800d5f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	f003 0302 	and.w	r3, r3, #2
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d020      	beq.n	800d640 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	f003 0302 	and.w	r3, r3, #2
 800d604:	2b00      	cmp	r3, #0
 800d606:	d01b      	beq.n	800d640 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	f06f 0202 	mvn.w	r2, #2
 800d610:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	2201      	movs	r2, #1
 800d616:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	699b      	ldr	r3, [r3, #24]
 800d61e:	f003 0303 	and.w	r3, r3, #3
 800d622:	2b00      	cmp	r3, #0
 800d624:	d003      	beq.n	800d62e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d626:	6878      	ldr	r0, [r7, #4]
 800d628:	f000 f9fe 	bl	800da28 <HAL_TIM_IC_CaptureCallback>
 800d62c:	e005      	b.n	800d63a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d62e:	6878      	ldr	r0, [r7, #4]
 800d630:	f000 f9f0 	bl	800da14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d634:	6878      	ldr	r0, [r7, #4]
 800d636:	f000 fa01 	bl	800da3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2200      	movs	r2, #0
 800d63e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d640:	68bb      	ldr	r3, [r7, #8]
 800d642:	f003 0304 	and.w	r3, r3, #4
 800d646:	2b00      	cmp	r3, #0
 800d648:	d020      	beq.n	800d68c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	f003 0304 	and.w	r3, r3, #4
 800d650:	2b00      	cmp	r3, #0
 800d652:	d01b      	beq.n	800d68c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	f06f 0204 	mvn.w	r2, #4
 800d65c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	2202      	movs	r2, #2
 800d662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	699b      	ldr	r3, [r3, #24]
 800d66a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d003      	beq.n	800d67a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f000 f9d8 	bl	800da28 <HAL_TIM_IC_CaptureCallback>
 800d678:	e005      	b.n	800d686 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	f000 f9ca 	bl	800da14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f000 f9db 	bl	800da3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	2200      	movs	r2, #0
 800d68a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d68c:	68bb      	ldr	r3, [r7, #8]
 800d68e:	f003 0308 	and.w	r3, r3, #8
 800d692:	2b00      	cmp	r3, #0
 800d694:	d020      	beq.n	800d6d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	f003 0308 	and.w	r3, r3, #8
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d01b      	beq.n	800d6d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	f06f 0208 	mvn.w	r2, #8
 800d6a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	2204      	movs	r2, #4
 800d6ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	69db      	ldr	r3, [r3, #28]
 800d6b6:	f003 0303 	and.w	r3, r3, #3
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d003      	beq.n	800d6c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d6be:	6878      	ldr	r0, [r7, #4]
 800d6c0:	f000 f9b2 	bl	800da28 <HAL_TIM_IC_CaptureCallback>
 800d6c4:	e005      	b.n	800d6d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	f000 f9a4 	bl	800da14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d6cc:	6878      	ldr	r0, [r7, #4]
 800d6ce:	f000 f9b5 	bl	800da3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d6d8:	68bb      	ldr	r3, [r7, #8]
 800d6da:	f003 0310 	and.w	r3, r3, #16
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d020      	beq.n	800d724 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	f003 0310 	and.w	r3, r3, #16
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d01b      	beq.n	800d724 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	f06f 0210 	mvn.w	r2, #16
 800d6f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2208      	movs	r2, #8
 800d6fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	69db      	ldr	r3, [r3, #28]
 800d702:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d706:	2b00      	cmp	r3, #0
 800d708:	d003      	beq.n	800d712 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f000 f98c 	bl	800da28 <HAL_TIM_IC_CaptureCallback>
 800d710:	e005      	b.n	800d71e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d712:	6878      	ldr	r0, [r7, #4]
 800d714:	f000 f97e 	bl	800da14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d718:	6878      	ldr	r0, [r7, #4]
 800d71a:	f000 f98f 	bl	800da3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	2200      	movs	r2, #0
 800d722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d724:	68bb      	ldr	r3, [r7, #8]
 800d726:	f003 0301 	and.w	r3, r3, #1
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d00c      	beq.n	800d748 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	f003 0301 	and.w	r3, r3, #1
 800d734:	2b00      	cmp	r3, #0
 800d736:	d007      	beq.n	800d748 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	f06f 0201 	mvn.w	r2, #1
 800d740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d742:	6878      	ldr	r0, [r7, #4]
 800d744:	f7f4 fa9a 	bl	8001c7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d104      	bne.n	800d75c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d00c      	beq.n	800d776 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d762:	2b00      	cmp	r3, #0
 800d764:	d007      	beq.n	800d776 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800d76e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	f000 fdb1 	bl	800e2d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d776:	68bb      	ldr	r3, [r7, #8]
 800d778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d00c      	beq.n	800d79a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d786:	2b00      	cmp	r3, #0
 800d788:	d007      	beq.n	800d79a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d794:	6878      	ldr	r0, [r7, #4]
 800d796:	f000 fda9 	bl	800e2ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d79a:	68bb      	ldr	r3, [r7, #8]
 800d79c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d00c      	beq.n	800d7be <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d007      	beq.n	800d7be <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d7b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d7b8:	6878      	ldr	r0, [r7, #4]
 800d7ba:	f000 f949 	bl	800da50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d7be:	68bb      	ldr	r3, [r7, #8]
 800d7c0:	f003 0320 	and.w	r3, r3, #32
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d00c      	beq.n	800d7e2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	f003 0320 	and.w	r3, r3, #32
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d007      	beq.n	800d7e2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	f06f 0220 	mvn.w	r2, #32
 800d7da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d7dc:	6878      	ldr	r0, [r7, #4]
 800d7de:	f000 fd71 	bl	800e2c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d7e2:	bf00      	nop
 800d7e4:	3710      	adds	r7, #16
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}
	...

0800d7ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b086      	sub	sp, #24
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	60f8      	str	r0, [r7, #12]
 800d7f4:	60b9      	str	r1, [r7, #8]
 800d7f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d802:	2b01      	cmp	r3, #1
 800d804:	d101      	bne.n	800d80a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d806:	2302      	movs	r3, #2
 800d808:	e0ff      	b.n	800da0a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	2201      	movs	r2, #1
 800d80e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2b14      	cmp	r3, #20
 800d816:	f200 80f0 	bhi.w	800d9fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d81a:	a201      	add	r2, pc, #4	@ (adr r2, 800d820 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d81c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d820:	0800d875 	.word	0x0800d875
 800d824:	0800d9fb 	.word	0x0800d9fb
 800d828:	0800d9fb 	.word	0x0800d9fb
 800d82c:	0800d9fb 	.word	0x0800d9fb
 800d830:	0800d8b5 	.word	0x0800d8b5
 800d834:	0800d9fb 	.word	0x0800d9fb
 800d838:	0800d9fb 	.word	0x0800d9fb
 800d83c:	0800d9fb 	.word	0x0800d9fb
 800d840:	0800d8f7 	.word	0x0800d8f7
 800d844:	0800d9fb 	.word	0x0800d9fb
 800d848:	0800d9fb 	.word	0x0800d9fb
 800d84c:	0800d9fb 	.word	0x0800d9fb
 800d850:	0800d937 	.word	0x0800d937
 800d854:	0800d9fb 	.word	0x0800d9fb
 800d858:	0800d9fb 	.word	0x0800d9fb
 800d85c:	0800d9fb 	.word	0x0800d9fb
 800d860:	0800d979 	.word	0x0800d979
 800d864:	0800d9fb 	.word	0x0800d9fb
 800d868:	0800d9fb 	.word	0x0800d9fb
 800d86c:	0800d9fb 	.word	0x0800d9fb
 800d870:	0800d9b9 	.word	0x0800d9b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	68b9      	ldr	r1, [r7, #8]
 800d87a:	4618      	mov	r0, r3
 800d87c:	f000 f998 	bl	800dbb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	699a      	ldr	r2, [r3, #24]
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	f042 0208 	orr.w	r2, r2, #8
 800d88e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	699a      	ldr	r2, [r3, #24]
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	f022 0204 	bic.w	r2, r2, #4
 800d89e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	6999      	ldr	r1, [r3, #24]
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	691a      	ldr	r2, [r3, #16]
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	430a      	orrs	r2, r1
 800d8b0:	619a      	str	r2, [r3, #24]
      break;
 800d8b2:	e0a5      	b.n	800da00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	68b9      	ldr	r1, [r7, #8]
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	f000 fa08 	bl	800dcd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	699a      	ldr	r2, [r3, #24]
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d8ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	699a      	ldr	r2, [r3, #24]
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d8de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	6999      	ldr	r1, [r3, #24]
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	691b      	ldr	r3, [r3, #16]
 800d8ea:	021a      	lsls	r2, r3, #8
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	430a      	orrs	r2, r1
 800d8f2:	619a      	str	r2, [r3, #24]
      break;
 800d8f4:	e084      	b.n	800da00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	68b9      	ldr	r1, [r7, #8]
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	f000 fa71 	bl	800dde4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	69da      	ldr	r2, [r3, #28]
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	f042 0208 	orr.w	r2, r2, #8
 800d910:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	69da      	ldr	r2, [r3, #28]
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	f022 0204 	bic.w	r2, r2, #4
 800d920:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	69d9      	ldr	r1, [r3, #28]
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	691a      	ldr	r2, [r3, #16]
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	430a      	orrs	r2, r1
 800d932:	61da      	str	r2, [r3, #28]
      break;
 800d934:	e064      	b.n	800da00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	68b9      	ldr	r1, [r7, #8]
 800d93c:	4618      	mov	r0, r3
 800d93e:	f000 fad9 	bl	800def4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	69da      	ldr	r2, [r3, #28]
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d950:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	69da      	ldr	r2, [r3, #28]
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d960:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	69d9      	ldr	r1, [r3, #28]
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	691b      	ldr	r3, [r3, #16]
 800d96c:	021a      	lsls	r2, r3, #8
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	430a      	orrs	r2, r1
 800d974:	61da      	str	r2, [r3, #28]
      break;
 800d976:	e043      	b.n	800da00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	68b9      	ldr	r1, [r7, #8]
 800d97e:	4618      	mov	r0, r3
 800d980:	f000 fb22 	bl	800dfc8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	f042 0208 	orr.w	r2, r2, #8
 800d992:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	f022 0204 	bic.w	r2, r2, #4
 800d9a2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d9aa:	68bb      	ldr	r3, [r7, #8]
 800d9ac:	691a      	ldr	r2, [r3, #16]
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	430a      	orrs	r2, r1
 800d9b4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d9b6:	e023      	b.n	800da00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	68b9      	ldr	r1, [r7, #8]
 800d9be:	4618      	mov	r0, r3
 800d9c0:	f000 fb66 	bl	800e090 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d9d2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d9e2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	691b      	ldr	r3, [r3, #16]
 800d9ee:	021a      	lsls	r2, r3, #8
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	430a      	orrs	r2, r1
 800d9f6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d9f8:	e002      	b.n	800da00 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d9fa:	2301      	movs	r3, #1
 800d9fc:	75fb      	strb	r3, [r7, #23]
      break;
 800d9fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	2200      	movs	r2, #0
 800da04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800da08:	7dfb      	ldrb	r3, [r7, #23]
}
 800da0a:	4618      	mov	r0, r3
 800da0c:	3718      	adds	r7, #24
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}
 800da12:	bf00      	nop

0800da14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800da14:	b480      	push	{r7}
 800da16:	b083      	sub	sp, #12
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800da1c:	bf00      	nop
 800da1e:	370c      	adds	r7, #12
 800da20:	46bd      	mov	sp, r7
 800da22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da26:	4770      	bx	lr

0800da28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800da28:	b480      	push	{r7}
 800da2a:	b083      	sub	sp, #12
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800da30:	bf00      	nop
 800da32:	370c      	adds	r7, #12
 800da34:	46bd      	mov	sp, r7
 800da36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3a:	4770      	bx	lr

0800da3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800da3c:	b480      	push	{r7}
 800da3e:	b083      	sub	sp, #12
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800da44:	bf00      	nop
 800da46:	370c      	adds	r7, #12
 800da48:	46bd      	mov	sp, r7
 800da4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4e:	4770      	bx	lr

0800da50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800da50:	b480      	push	{r7}
 800da52:	b083      	sub	sp, #12
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800da58:	bf00      	nop
 800da5a:	370c      	adds	r7, #12
 800da5c:	46bd      	mov	sp, r7
 800da5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da62:	4770      	bx	lr

0800da64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800da64:	b480      	push	{r7}
 800da66:	b085      	sub	sp, #20
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
 800da6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	4a46      	ldr	r2, [pc, #280]	@ (800db90 <TIM_Base_SetConfig+0x12c>)
 800da78:	4293      	cmp	r3, r2
 800da7a:	d013      	beq.n	800daa4 <TIM_Base_SetConfig+0x40>
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800da82:	d00f      	beq.n	800daa4 <TIM_Base_SetConfig+0x40>
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	4a43      	ldr	r2, [pc, #268]	@ (800db94 <TIM_Base_SetConfig+0x130>)
 800da88:	4293      	cmp	r3, r2
 800da8a:	d00b      	beq.n	800daa4 <TIM_Base_SetConfig+0x40>
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	4a42      	ldr	r2, [pc, #264]	@ (800db98 <TIM_Base_SetConfig+0x134>)
 800da90:	4293      	cmp	r3, r2
 800da92:	d007      	beq.n	800daa4 <TIM_Base_SetConfig+0x40>
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	4a41      	ldr	r2, [pc, #260]	@ (800db9c <TIM_Base_SetConfig+0x138>)
 800da98:	4293      	cmp	r3, r2
 800da9a:	d003      	beq.n	800daa4 <TIM_Base_SetConfig+0x40>
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	4a40      	ldr	r2, [pc, #256]	@ (800dba0 <TIM_Base_SetConfig+0x13c>)
 800daa0:	4293      	cmp	r3, r2
 800daa2:	d108      	bne.n	800dab6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800daaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	685b      	ldr	r3, [r3, #4]
 800dab0:	68fa      	ldr	r2, [r7, #12]
 800dab2:	4313      	orrs	r3, r2
 800dab4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	4a35      	ldr	r2, [pc, #212]	@ (800db90 <TIM_Base_SetConfig+0x12c>)
 800daba:	4293      	cmp	r3, r2
 800dabc:	d01f      	beq.n	800dafe <TIM_Base_SetConfig+0x9a>
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dac4:	d01b      	beq.n	800dafe <TIM_Base_SetConfig+0x9a>
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	4a32      	ldr	r2, [pc, #200]	@ (800db94 <TIM_Base_SetConfig+0x130>)
 800daca:	4293      	cmp	r3, r2
 800dacc:	d017      	beq.n	800dafe <TIM_Base_SetConfig+0x9a>
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	4a31      	ldr	r2, [pc, #196]	@ (800db98 <TIM_Base_SetConfig+0x134>)
 800dad2:	4293      	cmp	r3, r2
 800dad4:	d013      	beq.n	800dafe <TIM_Base_SetConfig+0x9a>
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	4a30      	ldr	r2, [pc, #192]	@ (800db9c <TIM_Base_SetConfig+0x138>)
 800dada:	4293      	cmp	r3, r2
 800dadc:	d00f      	beq.n	800dafe <TIM_Base_SetConfig+0x9a>
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	4a2f      	ldr	r2, [pc, #188]	@ (800dba0 <TIM_Base_SetConfig+0x13c>)
 800dae2:	4293      	cmp	r3, r2
 800dae4:	d00b      	beq.n	800dafe <TIM_Base_SetConfig+0x9a>
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	4a2e      	ldr	r2, [pc, #184]	@ (800dba4 <TIM_Base_SetConfig+0x140>)
 800daea:	4293      	cmp	r3, r2
 800daec:	d007      	beq.n	800dafe <TIM_Base_SetConfig+0x9a>
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	4a2d      	ldr	r2, [pc, #180]	@ (800dba8 <TIM_Base_SetConfig+0x144>)
 800daf2:	4293      	cmp	r3, r2
 800daf4:	d003      	beq.n	800dafe <TIM_Base_SetConfig+0x9a>
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	4a2c      	ldr	r2, [pc, #176]	@ (800dbac <TIM_Base_SetConfig+0x148>)
 800dafa:	4293      	cmp	r3, r2
 800dafc:	d108      	bne.n	800db10 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800db04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	68db      	ldr	r3, [r3, #12]
 800db0a:	68fa      	ldr	r2, [r7, #12]
 800db0c:	4313      	orrs	r3, r2
 800db0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	695b      	ldr	r3, [r3, #20]
 800db1a:	4313      	orrs	r3, r2
 800db1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	68fa      	ldr	r2, [r7, #12]
 800db22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	689a      	ldr	r2, [r3, #8]
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	681a      	ldr	r2, [r3, #0]
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	4a16      	ldr	r2, [pc, #88]	@ (800db90 <TIM_Base_SetConfig+0x12c>)
 800db38:	4293      	cmp	r3, r2
 800db3a:	d00f      	beq.n	800db5c <TIM_Base_SetConfig+0xf8>
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	4a18      	ldr	r2, [pc, #96]	@ (800dba0 <TIM_Base_SetConfig+0x13c>)
 800db40:	4293      	cmp	r3, r2
 800db42:	d00b      	beq.n	800db5c <TIM_Base_SetConfig+0xf8>
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	4a17      	ldr	r2, [pc, #92]	@ (800dba4 <TIM_Base_SetConfig+0x140>)
 800db48:	4293      	cmp	r3, r2
 800db4a:	d007      	beq.n	800db5c <TIM_Base_SetConfig+0xf8>
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	4a16      	ldr	r2, [pc, #88]	@ (800dba8 <TIM_Base_SetConfig+0x144>)
 800db50:	4293      	cmp	r3, r2
 800db52:	d003      	beq.n	800db5c <TIM_Base_SetConfig+0xf8>
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	4a15      	ldr	r2, [pc, #84]	@ (800dbac <TIM_Base_SetConfig+0x148>)
 800db58:	4293      	cmp	r3, r2
 800db5a:	d103      	bne.n	800db64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	691a      	ldr	r2, [r3, #16]
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2201      	movs	r2, #1
 800db68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	691b      	ldr	r3, [r3, #16]
 800db6e:	f003 0301 	and.w	r3, r3, #1
 800db72:	2b01      	cmp	r3, #1
 800db74:	d105      	bne.n	800db82 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	691b      	ldr	r3, [r3, #16]
 800db7a:	f023 0201 	bic.w	r2, r3, #1
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	611a      	str	r2, [r3, #16]
  }
}
 800db82:	bf00      	nop
 800db84:	3714      	adds	r7, #20
 800db86:	46bd      	mov	sp, r7
 800db88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8c:	4770      	bx	lr
 800db8e:	bf00      	nop
 800db90:	40010000 	.word	0x40010000
 800db94:	40000400 	.word	0x40000400
 800db98:	40000800 	.word	0x40000800
 800db9c:	40000c00 	.word	0x40000c00
 800dba0:	40010400 	.word	0x40010400
 800dba4:	40014000 	.word	0x40014000
 800dba8:	40014400 	.word	0x40014400
 800dbac:	40014800 	.word	0x40014800

0800dbb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dbb0:	b480      	push	{r7}
 800dbb2:	b087      	sub	sp, #28
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
 800dbb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	6a1b      	ldr	r3, [r3, #32]
 800dbbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	6a1b      	ldr	r3, [r3, #32]
 800dbc4:	f023 0201 	bic.w	r2, r3, #1
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	685b      	ldr	r3, [r3, #4]
 800dbd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	699b      	ldr	r3, [r3, #24]
 800dbd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800dbd8:	68fa      	ldr	r2, [r7, #12]
 800dbda:	4b37      	ldr	r3, [pc, #220]	@ (800dcb8 <TIM_OC1_SetConfig+0x108>)
 800dbdc:	4013      	ands	r3, r2
 800dbde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	f023 0303 	bic.w	r3, r3, #3
 800dbe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dbe8:	683b      	ldr	r3, [r7, #0]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	68fa      	ldr	r2, [r7, #12]
 800dbee:	4313      	orrs	r3, r2
 800dbf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800dbf2:	697b      	ldr	r3, [r7, #20]
 800dbf4:	f023 0302 	bic.w	r3, r3, #2
 800dbf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800dbfa:	683b      	ldr	r3, [r7, #0]
 800dbfc:	689b      	ldr	r3, [r3, #8]
 800dbfe:	697a      	ldr	r2, [r7, #20]
 800dc00:	4313      	orrs	r3, r2
 800dc02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	4a2d      	ldr	r2, [pc, #180]	@ (800dcbc <TIM_OC1_SetConfig+0x10c>)
 800dc08:	4293      	cmp	r3, r2
 800dc0a:	d00f      	beq.n	800dc2c <TIM_OC1_SetConfig+0x7c>
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	4a2c      	ldr	r2, [pc, #176]	@ (800dcc0 <TIM_OC1_SetConfig+0x110>)
 800dc10:	4293      	cmp	r3, r2
 800dc12:	d00b      	beq.n	800dc2c <TIM_OC1_SetConfig+0x7c>
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	4a2b      	ldr	r2, [pc, #172]	@ (800dcc4 <TIM_OC1_SetConfig+0x114>)
 800dc18:	4293      	cmp	r3, r2
 800dc1a:	d007      	beq.n	800dc2c <TIM_OC1_SetConfig+0x7c>
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	4a2a      	ldr	r2, [pc, #168]	@ (800dcc8 <TIM_OC1_SetConfig+0x118>)
 800dc20:	4293      	cmp	r3, r2
 800dc22:	d003      	beq.n	800dc2c <TIM_OC1_SetConfig+0x7c>
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	4a29      	ldr	r2, [pc, #164]	@ (800dccc <TIM_OC1_SetConfig+0x11c>)
 800dc28:	4293      	cmp	r3, r2
 800dc2a:	d10c      	bne.n	800dc46 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800dc2c:	697b      	ldr	r3, [r7, #20]
 800dc2e:	f023 0308 	bic.w	r3, r3, #8
 800dc32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	68db      	ldr	r3, [r3, #12]
 800dc38:	697a      	ldr	r2, [r7, #20]
 800dc3a:	4313      	orrs	r3, r2
 800dc3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800dc3e:	697b      	ldr	r3, [r7, #20]
 800dc40:	f023 0304 	bic.w	r3, r3, #4
 800dc44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	4a1c      	ldr	r2, [pc, #112]	@ (800dcbc <TIM_OC1_SetConfig+0x10c>)
 800dc4a:	4293      	cmp	r3, r2
 800dc4c:	d00f      	beq.n	800dc6e <TIM_OC1_SetConfig+0xbe>
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	4a1b      	ldr	r2, [pc, #108]	@ (800dcc0 <TIM_OC1_SetConfig+0x110>)
 800dc52:	4293      	cmp	r3, r2
 800dc54:	d00b      	beq.n	800dc6e <TIM_OC1_SetConfig+0xbe>
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	4a1a      	ldr	r2, [pc, #104]	@ (800dcc4 <TIM_OC1_SetConfig+0x114>)
 800dc5a:	4293      	cmp	r3, r2
 800dc5c:	d007      	beq.n	800dc6e <TIM_OC1_SetConfig+0xbe>
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	4a19      	ldr	r2, [pc, #100]	@ (800dcc8 <TIM_OC1_SetConfig+0x118>)
 800dc62:	4293      	cmp	r3, r2
 800dc64:	d003      	beq.n	800dc6e <TIM_OC1_SetConfig+0xbe>
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	4a18      	ldr	r2, [pc, #96]	@ (800dccc <TIM_OC1_SetConfig+0x11c>)
 800dc6a:	4293      	cmp	r3, r2
 800dc6c:	d111      	bne.n	800dc92 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800dc6e:	693b      	ldr	r3, [r7, #16]
 800dc70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dc74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800dc76:	693b      	ldr	r3, [r7, #16]
 800dc78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800dc7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	695b      	ldr	r3, [r3, #20]
 800dc82:	693a      	ldr	r2, [r7, #16]
 800dc84:	4313      	orrs	r3, r2
 800dc86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	699b      	ldr	r3, [r3, #24]
 800dc8c:	693a      	ldr	r2, [r7, #16]
 800dc8e:	4313      	orrs	r3, r2
 800dc90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	693a      	ldr	r2, [r7, #16]
 800dc96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	68fa      	ldr	r2, [r7, #12]
 800dc9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	685a      	ldr	r2, [r3, #4]
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	697a      	ldr	r2, [r7, #20]
 800dcaa:	621a      	str	r2, [r3, #32]
}
 800dcac:	bf00      	nop
 800dcae:	371c      	adds	r7, #28
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb6:	4770      	bx	lr
 800dcb8:	fffeff8f 	.word	0xfffeff8f
 800dcbc:	40010000 	.word	0x40010000
 800dcc0:	40010400 	.word	0x40010400
 800dcc4:	40014000 	.word	0x40014000
 800dcc8:	40014400 	.word	0x40014400
 800dccc:	40014800 	.word	0x40014800

0800dcd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dcd0:	b480      	push	{r7}
 800dcd2:	b087      	sub	sp, #28
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
 800dcd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6a1b      	ldr	r3, [r3, #32]
 800dcde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	6a1b      	ldr	r3, [r3, #32]
 800dce4:	f023 0210 	bic.w	r2, r3, #16
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	685b      	ldr	r3, [r3, #4]
 800dcf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	699b      	ldr	r3, [r3, #24]
 800dcf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800dcf8:	68fa      	ldr	r2, [r7, #12]
 800dcfa:	4b34      	ldr	r3, [pc, #208]	@ (800ddcc <TIM_OC2_SetConfig+0xfc>)
 800dcfc:	4013      	ands	r3, r2
 800dcfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dd06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dd08:	683b      	ldr	r3, [r7, #0]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	021b      	lsls	r3, r3, #8
 800dd0e:	68fa      	ldr	r2, [r7, #12]
 800dd10:	4313      	orrs	r3, r2
 800dd12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800dd14:	697b      	ldr	r3, [r7, #20]
 800dd16:	f023 0320 	bic.w	r3, r3, #32
 800dd1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	689b      	ldr	r3, [r3, #8]
 800dd20:	011b      	lsls	r3, r3, #4
 800dd22:	697a      	ldr	r2, [r7, #20]
 800dd24:	4313      	orrs	r3, r2
 800dd26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	4a29      	ldr	r2, [pc, #164]	@ (800ddd0 <TIM_OC2_SetConfig+0x100>)
 800dd2c:	4293      	cmp	r3, r2
 800dd2e:	d003      	beq.n	800dd38 <TIM_OC2_SetConfig+0x68>
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	4a28      	ldr	r2, [pc, #160]	@ (800ddd4 <TIM_OC2_SetConfig+0x104>)
 800dd34:	4293      	cmp	r3, r2
 800dd36:	d10d      	bne.n	800dd54 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800dd38:	697b      	ldr	r3, [r7, #20]
 800dd3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dd3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	68db      	ldr	r3, [r3, #12]
 800dd44:	011b      	lsls	r3, r3, #4
 800dd46:	697a      	ldr	r2, [r7, #20]
 800dd48:	4313      	orrs	r3, r2
 800dd4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800dd4c:	697b      	ldr	r3, [r7, #20]
 800dd4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dd52:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	4a1e      	ldr	r2, [pc, #120]	@ (800ddd0 <TIM_OC2_SetConfig+0x100>)
 800dd58:	4293      	cmp	r3, r2
 800dd5a:	d00f      	beq.n	800dd7c <TIM_OC2_SetConfig+0xac>
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	4a1d      	ldr	r2, [pc, #116]	@ (800ddd4 <TIM_OC2_SetConfig+0x104>)
 800dd60:	4293      	cmp	r3, r2
 800dd62:	d00b      	beq.n	800dd7c <TIM_OC2_SetConfig+0xac>
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	4a1c      	ldr	r2, [pc, #112]	@ (800ddd8 <TIM_OC2_SetConfig+0x108>)
 800dd68:	4293      	cmp	r3, r2
 800dd6a:	d007      	beq.n	800dd7c <TIM_OC2_SetConfig+0xac>
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	4a1b      	ldr	r2, [pc, #108]	@ (800dddc <TIM_OC2_SetConfig+0x10c>)
 800dd70:	4293      	cmp	r3, r2
 800dd72:	d003      	beq.n	800dd7c <TIM_OC2_SetConfig+0xac>
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	4a1a      	ldr	r2, [pc, #104]	@ (800dde0 <TIM_OC2_SetConfig+0x110>)
 800dd78:	4293      	cmp	r3, r2
 800dd7a:	d113      	bne.n	800dda4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800dd7c:	693b      	ldr	r3, [r7, #16]
 800dd7e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800dd82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800dd84:	693b      	ldr	r3, [r7, #16]
 800dd86:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800dd8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	695b      	ldr	r3, [r3, #20]
 800dd90:	009b      	lsls	r3, r3, #2
 800dd92:	693a      	ldr	r2, [r7, #16]
 800dd94:	4313      	orrs	r3, r2
 800dd96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	699b      	ldr	r3, [r3, #24]
 800dd9c:	009b      	lsls	r3, r3, #2
 800dd9e:	693a      	ldr	r2, [r7, #16]
 800dda0:	4313      	orrs	r3, r2
 800dda2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	693a      	ldr	r2, [r7, #16]
 800dda8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	68fa      	ldr	r2, [r7, #12]
 800ddae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ddb0:	683b      	ldr	r3, [r7, #0]
 800ddb2:	685a      	ldr	r2, [r3, #4]
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	697a      	ldr	r2, [r7, #20]
 800ddbc:	621a      	str	r2, [r3, #32]
}
 800ddbe:	bf00      	nop
 800ddc0:	371c      	adds	r7, #28
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc8:	4770      	bx	lr
 800ddca:	bf00      	nop
 800ddcc:	feff8fff 	.word	0xfeff8fff
 800ddd0:	40010000 	.word	0x40010000
 800ddd4:	40010400 	.word	0x40010400
 800ddd8:	40014000 	.word	0x40014000
 800dddc:	40014400 	.word	0x40014400
 800dde0:	40014800 	.word	0x40014800

0800dde4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dde4:	b480      	push	{r7}
 800dde6:	b087      	sub	sp, #28
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
 800ddec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	6a1b      	ldr	r3, [r3, #32]
 800ddf2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	6a1b      	ldr	r3, [r3, #32]
 800ddf8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	685b      	ldr	r3, [r3, #4]
 800de04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	69db      	ldr	r3, [r3, #28]
 800de0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800de0c:	68fa      	ldr	r2, [r7, #12]
 800de0e:	4b33      	ldr	r3, [pc, #204]	@ (800dedc <TIM_OC3_SetConfig+0xf8>)
 800de10:	4013      	ands	r3, r2
 800de12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	f023 0303 	bic.w	r3, r3, #3
 800de1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	68fa      	ldr	r2, [r7, #12]
 800de22:	4313      	orrs	r3, r2
 800de24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800de26:	697b      	ldr	r3, [r7, #20]
 800de28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800de2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800de2e:	683b      	ldr	r3, [r7, #0]
 800de30:	689b      	ldr	r3, [r3, #8]
 800de32:	021b      	lsls	r3, r3, #8
 800de34:	697a      	ldr	r2, [r7, #20]
 800de36:	4313      	orrs	r3, r2
 800de38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	4a28      	ldr	r2, [pc, #160]	@ (800dee0 <TIM_OC3_SetConfig+0xfc>)
 800de3e:	4293      	cmp	r3, r2
 800de40:	d003      	beq.n	800de4a <TIM_OC3_SetConfig+0x66>
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	4a27      	ldr	r2, [pc, #156]	@ (800dee4 <TIM_OC3_SetConfig+0x100>)
 800de46:	4293      	cmp	r3, r2
 800de48:	d10d      	bne.n	800de66 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800de4a:	697b      	ldr	r3, [r7, #20]
 800de4c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800de50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	68db      	ldr	r3, [r3, #12]
 800de56:	021b      	lsls	r3, r3, #8
 800de58:	697a      	ldr	r2, [r7, #20]
 800de5a:	4313      	orrs	r3, r2
 800de5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800de5e:	697b      	ldr	r3, [r7, #20]
 800de60:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800de64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	4a1d      	ldr	r2, [pc, #116]	@ (800dee0 <TIM_OC3_SetConfig+0xfc>)
 800de6a:	4293      	cmp	r3, r2
 800de6c:	d00f      	beq.n	800de8e <TIM_OC3_SetConfig+0xaa>
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	4a1c      	ldr	r2, [pc, #112]	@ (800dee4 <TIM_OC3_SetConfig+0x100>)
 800de72:	4293      	cmp	r3, r2
 800de74:	d00b      	beq.n	800de8e <TIM_OC3_SetConfig+0xaa>
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	4a1b      	ldr	r2, [pc, #108]	@ (800dee8 <TIM_OC3_SetConfig+0x104>)
 800de7a:	4293      	cmp	r3, r2
 800de7c:	d007      	beq.n	800de8e <TIM_OC3_SetConfig+0xaa>
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	4a1a      	ldr	r2, [pc, #104]	@ (800deec <TIM_OC3_SetConfig+0x108>)
 800de82:	4293      	cmp	r3, r2
 800de84:	d003      	beq.n	800de8e <TIM_OC3_SetConfig+0xaa>
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	4a19      	ldr	r2, [pc, #100]	@ (800def0 <TIM_OC3_SetConfig+0x10c>)
 800de8a:	4293      	cmp	r3, r2
 800de8c:	d113      	bne.n	800deb6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800de8e:	693b      	ldr	r3, [r7, #16]
 800de90:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800de94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800de96:	693b      	ldr	r3, [r7, #16]
 800de98:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800de9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	695b      	ldr	r3, [r3, #20]
 800dea2:	011b      	lsls	r3, r3, #4
 800dea4:	693a      	ldr	r2, [r7, #16]
 800dea6:	4313      	orrs	r3, r2
 800dea8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800deaa:	683b      	ldr	r3, [r7, #0]
 800deac:	699b      	ldr	r3, [r3, #24]
 800deae:	011b      	lsls	r3, r3, #4
 800deb0:	693a      	ldr	r2, [r7, #16]
 800deb2:	4313      	orrs	r3, r2
 800deb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	693a      	ldr	r2, [r7, #16]
 800deba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	68fa      	ldr	r2, [r7, #12]
 800dec0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800dec2:	683b      	ldr	r3, [r7, #0]
 800dec4:	685a      	ldr	r2, [r3, #4]
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	697a      	ldr	r2, [r7, #20]
 800dece:	621a      	str	r2, [r3, #32]
}
 800ded0:	bf00      	nop
 800ded2:	371c      	adds	r7, #28
 800ded4:	46bd      	mov	sp, r7
 800ded6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deda:	4770      	bx	lr
 800dedc:	fffeff8f 	.word	0xfffeff8f
 800dee0:	40010000 	.word	0x40010000
 800dee4:	40010400 	.word	0x40010400
 800dee8:	40014000 	.word	0x40014000
 800deec:	40014400 	.word	0x40014400
 800def0:	40014800 	.word	0x40014800

0800def4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800def4:	b480      	push	{r7}
 800def6:	b087      	sub	sp, #28
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
 800defc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	6a1b      	ldr	r3, [r3, #32]
 800df02:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	6a1b      	ldr	r3, [r3, #32]
 800df08:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	685b      	ldr	r3, [r3, #4]
 800df14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	69db      	ldr	r3, [r3, #28]
 800df1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800df1c:	68fa      	ldr	r2, [r7, #12]
 800df1e:	4b24      	ldr	r3, [pc, #144]	@ (800dfb0 <TIM_OC4_SetConfig+0xbc>)
 800df20:	4013      	ands	r3, r2
 800df22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800df2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800df2c:	683b      	ldr	r3, [r7, #0]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	021b      	lsls	r3, r3, #8
 800df32:	68fa      	ldr	r2, [r7, #12]
 800df34:	4313      	orrs	r3, r2
 800df36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800df38:	693b      	ldr	r3, [r7, #16]
 800df3a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800df3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800df40:	683b      	ldr	r3, [r7, #0]
 800df42:	689b      	ldr	r3, [r3, #8]
 800df44:	031b      	lsls	r3, r3, #12
 800df46:	693a      	ldr	r2, [r7, #16]
 800df48:	4313      	orrs	r3, r2
 800df4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	4a19      	ldr	r2, [pc, #100]	@ (800dfb4 <TIM_OC4_SetConfig+0xc0>)
 800df50:	4293      	cmp	r3, r2
 800df52:	d00f      	beq.n	800df74 <TIM_OC4_SetConfig+0x80>
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	4a18      	ldr	r2, [pc, #96]	@ (800dfb8 <TIM_OC4_SetConfig+0xc4>)
 800df58:	4293      	cmp	r3, r2
 800df5a:	d00b      	beq.n	800df74 <TIM_OC4_SetConfig+0x80>
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	4a17      	ldr	r2, [pc, #92]	@ (800dfbc <TIM_OC4_SetConfig+0xc8>)
 800df60:	4293      	cmp	r3, r2
 800df62:	d007      	beq.n	800df74 <TIM_OC4_SetConfig+0x80>
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	4a16      	ldr	r2, [pc, #88]	@ (800dfc0 <TIM_OC4_SetConfig+0xcc>)
 800df68:	4293      	cmp	r3, r2
 800df6a:	d003      	beq.n	800df74 <TIM_OC4_SetConfig+0x80>
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	4a15      	ldr	r2, [pc, #84]	@ (800dfc4 <TIM_OC4_SetConfig+0xd0>)
 800df70:	4293      	cmp	r3, r2
 800df72:	d109      	bne.n	800df88 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800df74:	697b      	ldr	r3, [r7, #20]
 800df76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800df7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800df7c:	683b      	ldr	r3, [r7, #0]
 800df7e:	695b      	ldr	r3, [r3, #20]
 800df80:	019b      	lsls	r3, r3, #6
 800df82:	697a      	ldr	r2, [r7, #20]
 800df84:	4313      	orrs	r3, r2
 800df86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	697a      	ldr	r2, [r7, #20]
 800df8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	68fa      	ldr	r2, [r7, #12]
 800df92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800df94:	683b      	ldr	r3, [r7, #0]
 800df96:	685a      	ldr	r2, [r3, #4]
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	693a      	ldr	r2, [r7, #16]
 800dfa0:	621a      	str	r2, [r3, #32]
}
 800dfa2:	bf00      	nop
 800dfa4:	371c      	adds	r7, #28
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfac:	4770      	bx	lr
 800dfae:	bf00      	nop
 800dfb0:	feff8fff 	.word	0xfeff8fff
 800dfb4:	40010000 	.word	0x40010000
 800dfb8:	40010400 	.word	0x40010400
 800dfbc:	40014000 	.word	0x40014000
 800dfc0:	40014400 	.word	0x40014400
 800dfc4:	40014800 	.word	0x40014800

0800dfc8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800dfc8:	b480      	push	{r7}
 800dfca:	b087      	sub	sp, #28
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
 800dfd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	6a1b      	ldr	r3, [r3, #32]
 800dfd6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	6a1b      	ldr	r3, [r3, #32]
 800dfdc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	685b      	ldr	r3, [r3, #4]
 800dfe8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dfee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800dff0:	68fa      	ldr	r2, [r7, #12]
 800dff2:	4b21      	ldr	r3, [pc, #132]	@ (800e078 <TIM_OC5_SetConfig+0xb0>)
 800dff4:	4013      	ands	r3, r2
 800dff6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	68fa      	ldr	r2, [r7, #12]
 800dffe:	4313      	orrs	r3, r2
 800e000:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e002:	693b      	ldr	r3, [r7, #16]
 800e004:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e008:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	689b      	ldr	r3, [r3, #8]
 800e00e:	041b      	lsls	r3, r3, #16
 800e010:	693a      	ldr	r2, [r7, #16]
 800e012:	4313      	orrs	r3, r2
 800e014:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	4a18      	ldr	r2, [pc, #96]	@ (800e07c <TIM_OC5_SetConfig+0xb4>)
 800e01a:	4293      	cmp	r3, r2
 800e01c:	d00f      	beq.n	800e03e <TIM_OC5_SetConfig+0x76>
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	4a17      	ldr	r2, [pc, #92]	@ (800e080 <TIM_OC5_SetConfig+0xb8>)
 800e022:	4293      	cmp	r3, r2
 800e024:	d00b      	beq.n	800e03e <TIM_OC5_SetConfig+0x76>
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	4a16      	ldr	r2, [pc, #88]	@ (800e084 <TIM_OC5_SetConfig+0xbc>)
 800e02a:	4293      	cmp	r3, r2
 800e02c:	d007      	beq.n	800e03e <TIM_OC5_SetConfig+0x76>
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	4a15      	ldr	r2, [pc, #84]	@ (800e088 <TIM_OC5_SetConfig+0xc0>)
 800e032:	4293      	cmp	r3, r2
 800e034:	d003      	beq.n	800e03e <TIM_OC5_SetConfig+0x76>
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	4a14      	ldr	r2, [pc, #80]	@ (800e08c <TIM_OC5_SetConfig+0xc4>)
 800e03a:	4293      	cmp	r3, r2
 800e03c:	d109      	bne.n	800e052 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e03e:	697b      	ldr	r3, [r7, #20]
 800e040:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e044:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	695b      	ldr	r3, [r3, #20]
 800e04a:	021b      	lsls	r3, r3, #8
 800e04c:	697a      	ldr	r2, [r7, #20]
 800e04e:	4313      	orrs	r3, r2
 800e050:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	697a      	ldr	r2, [r7, #20]
 800e056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	68fa      	ldr	r2, [r7, #12]
 800e05c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	685a      	ldr	r2, [r3, #4]
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	693a      	ldr	r2, [r7, #16]
 800e06a:	621a      	str	r2, [r3, #32]
}
 800e06c:	bf00      	nop
 800e06e:	371c      	adds	r7, #28
 800e070:	46bd      	mov	sp, r7
 800e072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e076:	4770      	bx	lr
 800e078:	fffeff8f 	.word	0xfffeff8f
 800e07c:	40010000 	.word	0x40010000
 800e080:	40010400 	.word	0x40010400
 800e084:	40014000 	.word	0x40014000
 800e088:	40014400 	.word	0x40014400
 800e08c:	40014800 	.word	0x40014800

0800e090 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e090:	b480      	push	{r7}
 800e092:	b087      	sub	sp, #28
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
 800e098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	6a1b      	ldr	r3, [r3, #32]
 800e09e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	6a1b      	ldr	r3, [r3, #32]
 800e0a4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	685b      	ldr	r3, [r3, #4]
 800e0b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e0b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e0b8:	68fa      	ldr	r2, [r7, #12]
 800e0ba:	4b22      	ldr	r3, [pc, #136]	@ (800e144 <TIM_OC6_SetConfig+0xb4>)
 800e0bc:	4013      	ands	r3, r2
 800e0be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e0c0:	683b      	ldr	r3, [r7, #0]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	021b      	lsls	r3, r3, #8
 800e0c6:	68fa      	ldr	r2, [r7, #12]
 800e0c8:	4313      	orrs	r3, r2
 800e0ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e0cc:	693b      	ldr	r3, [r7, #16]
 800e0ce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e0d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	689b      	ldr	r3, [r3, #8]
 800e0d8:	051b      	lsls	r3, r3, #20
 800e0da:	693a      	ldr	r2, [r7, #16]
 800e0dc:	4313      	orrs	r3, r2
 800e0de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	4a19      	ldr	r2, [pc, #100]	@ (800e148 <TIM_OC6_SetConfig+0xb8>)
 800e0e4:	4293      	cmp	r3, r2
 800e0e6:	d00f      	beq.n	800e108 <TIM_OC6_SetConfig+0x78>
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	4a18      	ldr	r2, [pc, #96]	@ (800e14c <TIM_OC6_SetConfig+0xbc>)
 800e0ec:	4293      	cmp	r3, r2
 800e0ee:	d00b      	beq.n	800e108 <TIM_OC6_SetConfig+0x78>
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	4a17      	ldr	r2, [pc, #92]	@ (800e150 <TIM_OC6_SetConfig+0xc0>)
 800e0f4:	4293      	cmp	r3, r2
 800e0f6:	d007      	beq.n	800e108 <TIM_OC6_SetConfig+0x78>
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	4a16      	ldr	r2, [pc, #88]	@ (800e154 <TIM_OC6_SetConfig+0xc4>)
 800e0fc:	4293      	cmp	r3, r2
 800e0fe:	d003      	beq.n	800e108 <TIM_OC6_SetConfig+0x78>
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	4a15      	ldr	r2, [pc, #84]	@ (800e158 <TIM_OC6_SetConfig+0xc8>)
 800e104:	4293      	cmp	r3, r2
 800e106:	d109      	bne.n	800e11c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e108:	697b      	ldr	r3, [r7, #20]
 800e10a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e10e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e110:	683b      	ldr	r3, [r7, #0]
 800e112:	695b      	ldr	r3, [r3, #20]
 800e114:	029b      	lsls	r3, r3, #10
 800e116:	697a      	ldr	r2, [r7, #20]
 800e118:	4313      	orrs	r3, r2
 800e11a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	697a      	ldr	r2, [r7, #20]
 800e120:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	68fa      	ldr	r2, [r7, #12]
 800e126:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e128:	683b      	ldr	r3, [r7, #0]
 800e12a:	685a      	ldr	r2, [r3, #4]
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	693a      	ldr	r2, [r7, #16]
 800e134:	621a      	str	r2, [r3, #32]
}
 800e136:	bf00      	nop
 800e138:	371c      	adds	r7, #28
 800e13a:	46bd      	mov	sp, r7
 800e13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e140:	4770      	bx	lr
 800e142:	bf00      	nop
 800e144:	feff8fff 	.word	0xfeff8fff
 800e148:	40010000 	.word	0x40010000
 800e14c:	40010400 	.word	0x40010400
 800e150:	40014000 	.word	0x40014000
 800e154:	40014400 	.word	0x40014400
 800e158:	40014800 	.word	0x40014800

0800e15c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e15c:	b480      	push	{r7}
 800e15e:	b087      	sub	sp, #28
 800e160:	af00      	add	r7, sp, #0
 800e162:	60f8      	str	r0, [r7, #12]
 800e164:	60b9      	str	r1, [r7, #8]
 800e166:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e168:	68bb      	ldr	r3, [r7, #8]
 800e16a:	f003 031f 	and.w	r3, r3, #31
 800e16e:	2201      	movs	r2, #1
 800e170:	fa02 f303 	lsl.w	r3, r2, r3
 800e174:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	6a1a      	ldr	r2, [r3, #32]
 800e17a:	697b      	ldr	r3, [r7, #20]
 800e17c:	43db      	mvns	r3, r3
 800e17e:	401a      	ands	r2, r3
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	6a1a      	ldr	r2, [r3, #32]
 800e188:	68bb      	ldr	r3, [r7, #8]
 800e18a:	f003 031f 	and.w	r3, r3, #31
 800e18e:	6879      	ldr	r1, [r7, #4]
 800e190:	fa01 f303 	lsl.w	r3, r1, r3
 800e194:	431a      	orrs	r2, r3
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	621a      	str	r2, [r3, #32]
}
 800e19a:	bf00      	nop
 800e19c:	371c      	adds	r7, #28
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a4:	4770      	bx	lr
	...

0800e1a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e1a8:	b480      	push	{r7}
 800e1aa:	b085      	sub	sp, #20
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
 800e1b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e1b8:	2b01      	cmp	r3, #1
 800e1ba:	d101      	bne.n	800e1c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e1bc:	2302      	movs	r3, #2
 800e1be:	e06d      	b.n	800e29c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2201      	movs	r2, #1
 800e1c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2202      	movs	r2, #2
 800e1cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	685b      	ldr	r3, [r3, #4]
 800e1d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	689b      	ldr	r3, [r3, #8]
 800e1de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	4a30      	ldr	r2, [pc, #192]	@ (800e2a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e1e6:	4293      	cmp	r3, r2
 800e1e8:	d004      	beq.n	800e1f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	4a2f      	ldr	r2, [pc, #188]	@ (800e2ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e1f0:	4293      	cmp	r3, r2
 800e1f2:	d108      	bne.n	800e206 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e1fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e1fc:	683b      	ldr	r3, [r7, #0]
 800e1fe:	685b      	ldr	r3, [r3, #4]
 800e200:	68fa      	ldr	r2, [r7, #12]
 800e202:	4313      	orrs	r3, r2
 800e204:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e20c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	68fa      	ldr	r2, [r7, #12]
 800e214:	4313      	orrs	r3, r2
 800e216:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	68fa      	ldr	r2, [r7, #12]
 800e21e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	4a20      	ldr	r2, [pc, #128]	@ (800e2a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e226:	4293      	cmp	r3, r2
 800e228:	d022      	beq.n	800e270 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e232:	d01d      	beq.n	800e270 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	4a1d      	ldr	r2, [pc, #116]	@ (800e2b0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e23a:	4293      	cmp	r3, r2
 800e23c:	d018      	beq.n	800e270 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	4a1c      	ldr	r2, [pc, #112]	@ (800e2b4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e244:	4293      	cmp	r3, r2
 800e246:	d013      	beq.n	800e270 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	4a1a      	ldr	r2, [pc, #104]	@ (800e2b8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e24e:	4293      	cmp	r3, r2
 800e250:	d00e      	beq.n	800e270 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	4a15      	ldr	r2, [pc, #84]	@ (800e2ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e258:	4293      	cmp	r3, r2
 800e25a:	d009      	beq.n	800e270 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	4a16      	ldr	r2, [pc, #88]	@ (800e2bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e262:	4293      	cmp	r3, r2
 800e264:	d004      	beq.n	800e270 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	4a15      	ldr	r2, [pc, #84]	@ (800e2c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e26c:	4293      	cmp	r3, r2
 800e26e:	d10c      	bne.n	800e28a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e270:	68bb      	ldr	r3, [r7, #8]
 800e272:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e276:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e278:	683b      	ldr	r3, [r7, #0]
 800e27a:	689b      	ldr	r3, [r3, #8]
 800e27c:	68ba      	ldr	r2, [r7, #8]
 800e27e:	4313      	orrs	r3, r2
 800e280:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	68ba      	ldr	r2, [r7, #8]
 800e288:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	2201      	movs	r2, #1
 800e28e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	2200      	movs	r2, #0
 800e296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e29a:	2300      	movs	r3, #0
}
 800e29c:	4618      	mov	r0, r3
 800e29e:	3714      	adds	r7, #20
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a6:	4770      	bx	lr
 800e2a8:	40010000 	.word	0x40010000
 800e2ac:	40010400 	.word	0x40010400
 800e2b0:	40000400 	.word	0x40000400
 800e2b4:	40000800 	.word	0x40000800
 800e2b8:	40000c00 	.word	0x40000c00
 800e2bc:	40001800 	.word	0x40001800
 800e2c0:	40014000 	.word	0x40014000

0800e2c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e2c4:	b480      	push	{r7}
 800e2c6:	b083      	sub	sp, #12
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e2cc:	bf00      	nop
 800e2ce:	370c      	adds	r7, #12
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d6:	4770      	bx	lr

0800e2d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e2d8:	b480      	push	{r7}
 800e2da:	b083      	sub	sp, #12
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e2e0:	bf00      	nop
 800e2e2:	370c      	adds	r7, #12
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ea:	4770      	bx	lr

0800e2ec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e2ec:	b480      	push	{r7}
 800e2ee:	b083      	sub	sp, #12
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e2f4:	bf00      	nop
 800e2f6:	370c      	adds	r7, #12
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fe:	4770      	bx	lr

0800e300 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b082      	sub	sp, #8
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d101      	bne.n	800e312 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e30e:	2301      	movs	r3, #1
 800e310:	e042      	b.n	800e398 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d106      	bne.n	800e32a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2200      	movs	r2, #0
 800e320:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e324:	6878      	ldr	r0, [r7, #4]
 800e326:	f7f4 fc21 	bl	8002b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	2224      	movs	r2, #36	@ 0x24
 800e32e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	681a      	ldr	r2, [r3, #0]
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	f022 0201 	bic.w	r2, r2, #1
 800e340:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e346:	2b00      	cmp	r3, #0
 800e348:	d002      	beq.n	800e350 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	f001 fe0e 	bl	800ff6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e350:	6878      	ldr	r0, [r7, #4]
 800e352:	f000 ff9f 	bl	800f294 <UART_SetConfig>
 800e356:	4603      	mov	r3, r0
 800e358:	2b01      	cmp	r3, #1
 800e35a:	d101      	bne.n	800e360 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e35c:	2301      	movs	r3, #1
 800e35e:	e01b      	b.n	800e398 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	685a      	ldr	r2, [r3, #4]
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e36e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	689a      	ldr	r2, [r3, #8]
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e37e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	681a      	ldr	r2, [r3, #0]
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	f042 0201 	orr.w	r2, r2, #1
 800e38e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e390:	6878      	ldr	r0, [r7, #4]
 800e392:	f001 fe8d 	bl	80100b0 <UART_CheckIdleState>
 800e396:	4603      	mov	r3, r0
}
 800e398:	4618      	mov	r0, r3
 800e39a:	3708      	adds	r7, #8
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bd80      	pop	{r7, pc}

0800e3a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b08a      	sub	sp, #40	@ 0x28
 800e3a4:	af02      	add	r7, sp, #8
 800e3a6:	60f8      	str	r0, [r7, #12]
 800e3a8:	60b9      	str	r1, [r7, #8]
 800e3aa:	603b      	str	r3, [r7, #0]
 800e3ac:	4613      	mov	r3, r2
 800e3ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e3b6:	2b20      	cmp	r3, #32
 800e3b8:	d17b      	bne.n	800e4b2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e3ba:	68bb      	ldr	r3, [r7, #8]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d002      	beq.n	800e3c6 <HAL_UART_Transmit+0x26>
 800e3c0:	88fb      	ldrh	r3, [r7, #6]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d101      	bne.n	800e3ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e3c6:	2301      	movs	r3, #1
 800e3c8:	e074      	b.n	800e4b4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	2221      	movs	r2, #33	@ 0x21
 800e3d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e3da:	f7f7 f835 	bl	8005448 <HAL_GetTick>
 800e3de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	88fa      	ldrh	r2, [r7, #6]
 800e3e4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	88fa      	ldrh	r2, [r7, #6]
 800e3ec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	689b      	ldr	r3, [r3, #8]
 800e3f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e3f8:	d108      	bne.n	800e40c <HAL_UART_Transmit+0x6c>
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	691b      	ldr	r3, [r3, #16]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d104      	bne.n	800e40c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e402:	2300      	movs	r3, #0
 800e404:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e406:	68bb      	ldr	r3, [r7, #8]
 800e408:	61bb      	str	r3, [r7, #24]
 800e40a:	e003      	b.n	800e414 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e40c:	68bb      	ldr	r3, [r7, #8]
 800e40e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e410:	2300      	movs	r3, #0
 800e412:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e414:	e030      	b.n	800e478 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e416:	683b      	ldr	r3, [r7, #0]
 800e418:	9300      	str	r3, [sp, #0]
 800e41a:	697b      	ldr	r3, [r7, #20]
 800e41c:	2200      	movs	r2, #0
 800e41e:	2180      	movs	r1, #128	@ 0x80
 800e420:	68f8      	ldr	r0, [r7, #12]
 800e422:	f001 feef 	bl	8010204 <UART_WaitOnFlagUntilTimeout>
 800e426:	4603      	mov	r3, r0
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d005      	beq.n	800e438 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	2220      	movs	r2, #32
 800e430:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800e434:	2303      	movs	r3, #3
 800e436:	e03d      	b.n	800e4b4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e438:	69fb      	ldr	r3, [r7, #28]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d10b      	bne.n	800e456 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e43e:	69bb      	ldr	r3, [r7, #24]
 800e440:	881b      	ldrh	r3, [r3, #0]
 800e442:	461a      	mov	r2, r3
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e44c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800e44e:	69bb      	ldr	r3, [r7, #24]
 800e450:	3302      	adds	r3, #2
 800e452:	61bb      	str	r3, [r7, #24]
 800e454:	e007      	b.n	800e466 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e456:	69fb      	ldr	r3, [r7, #28]
 800e458:	781a      	ldrb	r2, [r3, #0]
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800e460:	69fb      	ldr	r3, [r7, #28]
 800e462:	3301      	adds	r3, #1
 800e464:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e46c:	b29b      	uxth	r3, r3
 800e46e:	3b01      	subs	r3, #1
 800e470:	b29a      	uxth	r2, r3
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e47e:	b29b      	uxth	r3, r3
 800e480:	2b00      	cmp	r3, #0
 800e482:	d1c8      	bne.n	800e416 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e484:	683b      	ldr	r3, [r7, #0]
 800e486:	9300      	str	r3, [sp, #0]
 800e488:	697b      	ldr	r3, [r7, #20]
 800e48a:	2200      	movs	r2, #0
 800e48c:	2140      	movs	r1, #64	@ 0x40
 800e48e:	68f8      	ldr	r0, [r7, #12]
 800e490:	f001 feb8 	bl	8010204 <UART_WaitOnFlagUntilTimeout>
 800e494:	4603      	mov	r3, r0
 800e496:	2b00      	cmp	r3, #0
 800e498:	d005      	beq.n	800e4a6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	2220      	movs	r2, #32
 800e49e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800e4a2:	2303      	movs	r3, #3
 800e4a4:	e006      	b.n	800e4b4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	2220      	movs	r2, #32
 800e4aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	e000      	b.n	800e4b4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e4b2:	2302      	movs	r3, #2
  }
}
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	3720      	adds	r7, #32
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bd80      	pop	{r7, pc}

0800e4bc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800e4bc:	b480      	push	{r7}
 800e4be:	b091      	sub	sp, #68	@ 0x44
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	60f8      	str	r0, [r7, #12]
 800e4c4:	60b9      	str	r1, [r7, #8]
 800e4c6:	4613      	mov	r3, r2
 800e4c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e4d0:	2b20      	cmp	r3, #32
 800e4d2:	d178      	bne.n	800e5c6 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e4d4:	68bb      	ldr	r3, [r7, #8]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d002      	beq.n	800e4e0 <HAL_UART_Transmit_IT+0x24>
 800e4da:	88fb      	ldrh	r3, [r7, #6]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d101      	bne.n	800e4e4 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800e4e0:	2301      	movs	r3, #1
 800e4e2:	e071      	b.n	800e5c8 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	68ba      	ldr	r2, [r7, #8]
 800e4e8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	88fa      	ldrh	r2, [r7, #6]
 800e4ee:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	88fa      	ldrh	r2, [r7, #6]
 800e4f6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	2200      	movs	r2, #0
 800e504:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	2221      	movs	r2, #33	@ 0x21
 800e50c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e514:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e518:	d12a      	bne.n	800e570 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	689b      	ldr	r3, [r3, #8]
 800e51e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e522:	d107      	bne.n	800e534 <HAL_UART_Transmit_IT+0x78>
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	691b      	ldr	r3, [r3, #16]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d103      	bne.n	800e534 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	4a29      	ldr	r2, [pc, #164]	@ (800e5d4 <HAL_UART_Transmit_IT+0x118>)
 800e530:	679a      	str	r2, [r3, #120]	@ 0x78
 800e532:	e002      	b.n	800e53a <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	4a28      	ldr	r2, [pc, #160]	@ (800e5d8 <HAL_UART_Transmit_IT+0x11c>)
 800e538:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	3308      	adds	r3, #8
 800e540:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e544:	e853 3f00 	ldrex	r3, [r3]
 800e548:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e54a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e54c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800e550:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	3308      	adds	r3, #8
 800e558:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e55a:	637a      	str	r2, [r7, #52]	@ 0x34
 800e55c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e55e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e560:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e562:	e841 2300 	strex	r3, r2, [r1]
 800e566:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800e568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d1e5      	bne.n	800e53a <HAL_UART_Transmit_IT+0x7e>
 800e56e:	e028      	b.n	800e5c2 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	689b      	ldr	r3, [r3, #8]
 800e574:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e578:	d107      	bne.n	800e58a <HAL_UART_Transmit_IT+0xce>
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	691b      	ldr	r3, [r3, #16]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d103      	bne.n	800e58a <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	4a15      	ldr	r2, [pc, #84]	@ (800e5dc <HAL_UART_Transmit_IT+0x120>)
 800e586:	679a      	str	r2, [r3, #120]	@ 0x78
 800e588:	e002      	b.n	800e590 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	4a14      	ldr	r2, [pc, #80]	@ (800e5e0 <HAL_UART_Transmit_IT+0x124>)
 800e58e:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e596:	697b      	ldr	r3, [r7, #20]
 800e598:	e853 3f00 	ldrex	r3, [r3]
 800e59c:	613b      	str	r3, [r7, #16]
   return(result);
 800e59e:	693b      	ldr	r3, [r7, #16]
 800e5a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e5a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	461a      	mov	r2, r3
 800e5ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e5ae:	623b      	str	r3, [r7, #32]
 800e5b0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5b2:	69f9      	ldr	r1, [r7, #28]
 800e5b4:	6a3a      	ldr	r2, [r7, #32]
 800e5b6:	e841 2300 	strex	r3, r2, [r1]
 800e5ba:	61bb      	str	r3, [r7, #24]
   return(result);
 800e5bc:	69bb      	ldr	r3, [r7, #24]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d1e6      	bne.n	800e590 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	e000      	b.n	800e5c8 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800e5c6:	2302      	movs	r3, #2
  }
}
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	3744      	adds	r7, #68	@ 0x44
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d2:	4770      	bx	lr
 800e5d4:	08010d39 	.word	0x08010d39
 800e5d8:	08010c59 	.word	0x08010c59
 800e5dc:	08010b97 	.word	0x08010b97
 800e5e0:	08010adf 	.word	0x08010adf

0800e5e4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b08a      	sub	sp, #40	@ 0x28
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	60f8      	str	r0, [r7, #12]
 800e5ec:	60b9      	str	r1, [r7, #8]
 800e5ee:	4613      	mov	r3, r2
 800e5f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e5f8:	2b20      	cmp	r3, #32
 800e5fa:	d137      	bne.n	800e66c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800e5fc:	68bb      	ldr	r3, [r7, #8]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d002      	beq.n	800e608 <HAL_UART_Receive_IT+0x24>
 800e602:	88fb      	ldrh	r3, [r7, #6]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d101      	bne.n	800e60c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800e608:	2301      	movs	r3, #1
 800e60a:	e030      	b.n	800e66e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	2200      	movs	r2, #0
 800e610:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	4a18      	ldr	r2, [pc, #96]	@ (800e678 <HAL_UART_Receive_IT+0x94>)
 800e618:	4293      	cmp	r3, r2
 800e61a:	d01f      	beq.n	800e65c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	685b      	ldr	r3, [r3, #4]
 800e622:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e626:	2b00      	cmp	r3, #0
 800e628:	d018      	beq.n	800e65c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e630:	697b      	ldr	r3, [r7, #20]
 800e632:	e853 3f00 	ldrex	r3, [r3]
 800e636:	613b      	str	r3, [r7, #16]
   return(result);
 800e638:	693b      	ldr	r3, [r7, #16]
 800e63a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e63e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	461a      	mov	r2, r3
 800e646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e648:	623b      	str	r3, [r7, #32]
 800e64a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e64c:	69f9      	ldr	r1, [r7, #28]
 800e64e:	6a3a      	ldr	r2, [r7, #32]
 800e650:	e841 2300 	strex	r3, r2, [r1]
 800e654:	61bb      	str	r3, [r7, #24]
   return(result);
 800e656:	69bb      	ldr	r3, [r7, #24]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d1e6      	bne.n	800e62a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e65c:	88fb      	ldrh	r3, [r7, #6]
 800e65e:	461a      	mov	r2, r3
 800e660:	68b9      	ldr	r1, [r7, #8]
 800e662:	68f8      	ldr	r0, [r7, #12]
 800e664:	f001 fe3c 	bl	80102e0 <UART_Start_Receive_IT>
 800e668:	4603      	mov	r3, r0
 800e66a:	e000      	b.n	800e66e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e66c:	2302      	movs	r3, #2
  }
}
 800e66e:	4618      	mov	r0, r3
 800e670:	3728      	adds	r7, #40	@ 0x28
 800e672:	46bd      	mov	sp, r7
 800e674:	bd80      	pop	{r7, pc}
 800e676:	bf00      	nop
 800e678:	58000c00 	.word	0x58000c00

0800e67c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b08a      	sub	sp, #40	@ 0x28
 800e680:	af00      	add	r7, sp, #0
 800e682:	60f8      	str	r0, [r7, #12]
 800e684:	60b9      	str	r1, [r7, #8]
 800e686:	4613      	mov	r3, r2
 800e688:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e690:	2b20      	cmp	r3, #32
 800e692:	d137      	bne.n	800e704 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800e694:	68bb      	ldr	r3, [r7, #8]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d002      	beq.n	800e6a0 <HAL_UART_Receive_DMA+0x24>
 800e69a:	88fb      	ldrh	r3, [r7, #6]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d101      	bne.n	800e6a4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800e6a0:	2301      	movs	r3, #1
 800e6a2:	e030      	b.n	800e706 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	4a18      	ldr	r2, [pc, #96]	@ (800e710 <HAL_UART_Receive_DMA+0x94>)
 800e6b0:	4293      	cmp	r3, r2
 800e6b2:	d01f      	beq.n	800e6f4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	685b      	ldr	r3, [r3, #4]
 800e6ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d018      	beq.n	800e6f4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6c8:	697b      	ldr	r3, [r7, #20]
 800e6ca:	e853 3f00 	ldrex	r3, [r3]
 800e6ce:	613b      	str	r3, [r7, #16]
   return(result);
 800e6d0:	693b      	ldr	r3, [r7, #16]
 800e6d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e6d6:	627b      	str	r3, [r7, #36]	@ 0x24
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	461a      	mov	r2, r3
 800e6de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6e0:	623b      	str	r3, [r7, #32]
 800e6e2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6e4:	69f9      	ldr	r1, [r7, #28]
 800e6e6:	6a3a      	ldr	r2, [r7, #32]
 800e6e8:	e841 2300 	strex	r3, r2, [r1]
 800e6ec:	61bb      	str	r3, [r7, #24]
   return(result);
 800e6ee:	69bb      	ldr	r3, [r7, #24]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d1e6      	bne.n	800e6c2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e6f4:	88fb      	ldrh	r3, [r7, #6]
 800e6f6:	461a      	mov	r2, r3
 800e6f8:	68b9      	ldr	r1, [r7, #8]
 800e6fa:	68f8      	ldr	r0, [r7, #12]
 800e6fc:	f001 ff12 	bl	8010524 <UART_Start_Receive_DMA>
 800e700:	4603      	mov	r3, r0
 800e702:	e000      	b.n	800e706 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e704:	2302      	movs	r3, #2
  }
}
 800e706:	4618      	mov	r0, r3
 800e708:	3728      	adds	r7, #40	@ 0x28
 800e70a:	46bd      	mov	sp, r7
 800e70c:	bd80      	pop	{r7, pc}
 800e70e:	bf00      	nop
 800e710:	58000c00 	.word	0x58000c00

0800e714 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b090      	sub	sp, #64	@ 0x40
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e722:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e72a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	689b      	ldr	r3, [r3, #8]
 800e732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e736:	2b80      	cmp	r3, #128	@ 0x80
 800e738:	d139      	bne.n	800e7ae <HAL_UART_DMAStop+0x9a>
 800e73a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e73c:	2b21      	cmp	r3, #33	@ 0x21
 800e73e:	d136      	bne.n	800e7ae <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	3308      	adds	r3, #8
 800e746:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e748:	6a3b      	ldr	r3, [r7, #32]
 800e74a:	e853 3f00 	ldrex	r3, [r3]
 800e74e:	61fb      	str	r3, [r7, #28]
   return(result);
 800e750:	69fb      	ldr	r3, [r7, #28]
 800e752:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e756:	637b      	str	r3, [r7, #52]	@ 0x34
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	3308      	adds	r3, #8
 800e75e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e760:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e762:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e764:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e766:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e768:	e841 2300 	strex	r3, r2, [r1]
 800e76c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e76e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e770:	2b00      	cmp	r3, #0
 800e772:	d1e5      	bne.n	800e740 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d015      	beq.n	800e7a8 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e780:	4618      	mov	r0, r3
 800e782:	f7f7 fde1 	bl	8006348 <HAL_DMA_Abort>
 800e786:	4603      	mov	r3, r0
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d00d      	beq.n	800e7a8 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e790:	4618      	mov	r0, r3
 800e792:	f7f9 fa9f 	bl	8007cd4 <HAL_DMA_GetError>
 800e796:	4603      	mov	r3, r0
 800e798:	2b20      	cmp	r3, #32
 800e79a:	d105      	bne.n	800e7a8 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	2210      	movs	r2, #16
 800e7a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800e7a4:	2303      	movs	r3, #3
 800e7a6:	e047      	b.n	800e838 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800e7a8:	6878      	ldr	r0, [r7, #4]
 800e7aa:	f001 ff61 	bl	8010670 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	689b      	ldr	r3, [r3, #8]
 800e7b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e7b8:	2b40      	cmp	r3, #64	@ 0x40
 800e7ba:	d13c      	bne.n	800e836 <HAL_UART_DMAStop+0x122>
 800e7bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7be:	2b22      	cmp	r3, #34	@ 0x22
 800e7c0:	d139      	bne.n	800e836 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	3308      	adds	r3, #8
 800e7c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	e853 3f00 	ldrex	r3, [r3]
 800e7d0:	60bb      	str	r3, [r7, #8]
   return(result);
 800e7d2:	68bb      	ldr	r3, [r7, #8]
 800e7d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e7d8:	633b      	str	r3, [r7, #48]	@ 0x30
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	3308      	adds	r3, #8
 800e7e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e7e2:	61ba      	str	r2, [r7, #24]
 800e7e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7e6:	6979      	ldr	r1, [r7, #20]
 800e7e8:	69ba      	ldr	r2, [r7, #24]
 800e7ea:	e841 2300 	strex	r3, r2, [r1]
 800e7ee:	613b      	str	r3, [r7, #16]
   return(result);
 800e7f0:	693b      	ldr	r3, [r7, #16]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d1e5      	bne.n	800e7c2 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d017      	beq.n	800e830 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e806:	4618      	mov	r0, r3
 800e808:	f7f7 fd9e 	bl	8006348 <HAL_DMA_Abort>
 800e80c:	4603      	mov	r3, r0
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d00e      	beq.n	800e830 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e818:	4618      	mov	r0, r3
 800e81a:	f7f9 fa5b 	bl	8007cd4 <HAL_DMA_GetError>
 800e81e:	4603      	mov	r3, r0
 800e820:	2b20      	cmp	r3, #32
 800e822:	d105      	bne.n	800e830 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	2210      	movs	r2, #16
 800e828:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800e82c:	2303      	movs	r3, #3
 800e82e:	e003      	b.n	800e838 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800e830:	6878      	ldr	r0, [r7, #4]
 800e832:	f001 ff5f 	bl	80106f4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800e836:	2300      	movs	r3, #0
}
 800e838:	4618      	mov	r0, r3
 800e83a:	3740      	adds	r7, #64	@ 0x40
 800e83c:	46bd      	mov	sp, r7
 800e83e:	bd80      	pop	{r7, pc}

0800e840 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b0a2      	sub	sp, #136	@ 0x88
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 800e848:	2301      	movs	r3, #1
 800e84a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e854:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e856:	e853 3f00 	ldrex	r3, [r3]
 800e85a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e85c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e85e:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800e862:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	461a      	mov	r2, r3
 800e86c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e870:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e872:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e874:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e876:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e878:	e841 2300 	strex	r3, r2, [r1]
 800e87c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e87e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e880:	2b00      	cmp	r3, #0
 800e882:	d1e4      	bne.n	800e84e <HAL_UART_Abort_IT+0xe>
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	3308      	adds	r3, #8
 800e88a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e88c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e88e:	e853 3f00 	ldrex	r3, [r3]
 800e892:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e894:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e896:	4b85      	ldr	r3, [pc, #532]	@ (800eaac <HAL_UART_Abort_IT+0x26c>)
 800e898:	4013      	ands	r3, r2
 800e89a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	3308      	adds	r3, #8
 800e8a2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e8a4:	65ba      	str	r2, [r7, #88]	@ 0x58
 800e8a6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e8aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e8ac:	e841 2300 	strex	r3, r2, [r1]
 800e8b0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e8b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d1e5      	bne.n	800e884 <HAL_UART_Abort_IT+0x44>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e8bc:	2b01      	cmp	r3, #1
 800e8be:	d118      	bne.n	800e8f2 <HAL_UART_Abort_IT+0xb2>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8c8:	e853 3f00 	ldrex	r3, [r3]
 800e8cc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e8ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8d0:	f023 0310 	bic.w	r3, r3, #16
 800e8d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	461a      	mov	r2, r3
 800e8dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e8de:	647b      	str	r3, [r7, #68]	@ 0x44
 800e8e0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e8e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e8e6:	e841 2300 	strex	r3, r2, [r1]
 800e8ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e8ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d1e6      	bne.n	800e8c0 <HAL_UART_Abort_IT+0x80>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d00f      	beq.n	800e91a <HAL_UART_Abort_IT+0xda>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	689b      	ldr	r3, [r3, #8]
 800e900:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e904:	2b80      	cmp	r3, #128	@ 0x80
 800e906:	d104      	bne.n	800e912 <HAL_UART_Abort_IT+0xd2>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e90c:	4a68      	ldr	r2, [pc, #416]	@ (800eab0 <HAL_UART_Abort_IT+0x270>)
 800e90e:	651a      	str	r2, [r3, #80]	@ 0x50
 800e910:	e003      	b.n	800e91a <HAL_UART_Abort_IT+0xda>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e916:	2200      	movs	r2, #0
 800e918:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e920:	2b00      	cmp	r3, #0
 800e922:	d011      	beq.n	800e948 <HAL_UART_Abort_IT+0x108>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	689b      	ldr	r3, [r3, #8]
 800e92a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e92e:	2b40      	cmp	r3, #64	@ 0x40
 800e930:	d105      	bne.n	800e93e <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e938:	4a5e      	ldr	r2, [pc, #376]	@ (800eab4 <HAL_UART_Abort_IT+0x274>)
 800e93a:	651a      	str	r2, [r3, #80]	@ 0x50
 800e93c:	e004      	b.n	800e948 <HAL_UART_Abort_IT+0x108>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e944:	2200      	movs	r2, #0
 800e946:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	689b      	ldr	r3, [r3, #8]
 800e94e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e952:	2b80      	cmp	r3, #128	@ 0x80
 800e954:	d12d      	bne.n	800e9b2 <HAL_UART_Abort_IT+0x172>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	3308      	adds	r3, #8
 800e95c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e960:	e853 3f00 	ldrex	r3, [r3]
 800e964:	623b      	str	r3, [r7, #32]
   return(result);
 800e966:	6a3b      	ldr	r3, [r7, #32]
 800e968:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e96c:	677b      	str	r3, [r7, #116]	@ 0x74
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	3308      	adds	r3, #8
 800e974:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800e976:	633a      	str	r2, [r7, #48]	@ 0x30
 800e978:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e97a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e97c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e97e:	e841 2300 	strex	r3, r2, [r1]
 800e982:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e986:	2b00      	cmp	r3, #0
 800e988:	d1e5      	bne.n	800e956 <HAL_UART_Abort_IT+0x116>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d00f      	beq.n	800e9b2 <HAL_UART_Abort_IT+0x172>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e996:	4618      	mov	r0, r3
 800e998:	f7f7 fff4 	bl	8006984 <HAL_DMA_Abort_IT>
 800e99c:	4603      	mov	r3, r0
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d004      	beq.n	800e9ac <HAL_UART_Abort_IT+0x16c>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	651a      	str	r2, [r3, #80]	@ 0x50
 800e9aa:	e002      	b.n	800e9b2 <HAL_UART_Abort_IT+0x172>
      }
      else
      {
        abortcplt = 0U;
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	689b      	ldr	r3, [r3, #8]
 800e9b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e9bc:	2b40      	cmp	r3, #64	@ 0x40
 800e9be:	d133      	bne.n	800ea28 <HAL_UART_Abort_IT+0x1e8>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	3308      	adds	r3, #8
 800e9c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9c8:	693b      	ldr	r3, [r7, #16]
 800e9ca:	e853 3f00 	ldrex	r3, [r3]
 800e9ce:	60fb      	str	r3, [r7, #12]
   return(result);
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e9d6:	673b      	str	r3, [r7, #112]	@ 0x70
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	3308      	adds	r3, #8
 800e9de:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800e9e0:	61fa      	str	r2, [r7, #28]
 800e9e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9e4:	69b9      	ldr	r1, [r7, #24]
 800e9e6:	69fa      	ldr	r2, [r7, #28]
 800e9e8:	e841 2300 	strex	r3, r2, [r1]
 800e9ec:	617b      	str	r3, [r7, #20]
   return(result);
 800e9ee:	697b      	ldr	r3, [r7, #20]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d1e5      	bne.n	800e9c0 <HAL_UART_Abort_IT+0x180>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d014      	beq.n	800ea28 <HAL_UART_Abort_IT+0x1e8>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea04:	4618      	mov	r0, r3
 800ea06:	f7f7 ffbd 	bl	8006984 <HAL_DMA_Abort_IT>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d008      	beq.n	800ea22 <HAL_UART_Abort_IT+0x1e2>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea16:	2200      	movs	r2, #0
 800ea18:	651a      	str	r2, [r3, #80]	@ 0x50
        abortcplt = 1U;
 800ea1a:	2301      	movs	r3, #1
 800ea1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ea20:	e002      	b.n	800ea28 <HAL_UART_Abort_IT+0x1e8>
      }
      else
      {
        abortcplt = 0U;
 800ea22:	2300      	movs	r3, #0
 800ea24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 800ea28:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ea2c:	2b01      	cmp	r3, #1
 800ea2e:	d138      	bne.n	800eaa2 <HAL_UART_Abort_IT+0x262>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	2200      	movs	r2, #0
 800ea34:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->RxXferCount = 0U;
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	2200      	movs	r2, #0
 800ea44:	675a      	str	r2, [r3, #116]	@ 0x74
    huart->TxISR = NULL;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	2200      	movs	r2, #0
 800ea4a:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	2200      	movs	r2, #0
 800ea50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	220f      	movs	r2, #15
 800ea5a:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ea60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ea64:	d107      	bne.n	800ea76 <HAL_UART_Abort_IT+0x236>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	699a      	ldr	r2, [r3, #24]
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	f042 0210 	orr.w	r2, r2, #16
 800ea74:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	699a      	ldr	r2, [r3, #24]
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	f042 0208 	orr.w	r2, r2, #8
 800ea84:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	2220      	movs	r2, #32
 800ea8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    huart->RxState = HAL_UART_STATE_READY;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	2220      	movs	r2, #32
 800ea92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	2200      	movs	r2, #0
 800ea9a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 800ea9c:	6878      	ldr	r0, [r7, #4]
 800ea9e:	f000 fbe3 	bl	800f268 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800eaa2:	2300      	movs	r3, #0
}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	3788      	adds	r7, #136	@ 0x88
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd80      	pop	{r7, pc}
 800eaac:	ef7ffffe 	.word	0xef7ffffe
 800eab0:	080109d3 	.word	0x080109d3
 800eab4:	08010a5f 	.word	0x08010a5f

0800eab8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b0ba      	sub	sp, #232	@ 0xe8
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	69db      	ldr	r3, [r3, #28]
 800eac6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	689b      	ldr	r3, [r3, #8]
 800eada:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800eade:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800eae2:	f640 030f 	movw	r3, #2063	@ 0x80f
 800eae6:	4013      	ands	r3, r2
 800eae8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800eaec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d11b      	bne.n	800eb2c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800eaf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eaf8:	f003 0320 	and.w	r3, r3, #32
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d015      	beq.n	800eb2c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800eb00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eb04:	f003 0320 	and.w	r3, r3, #32
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d105      	bne.n	800eb18 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800eb0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800eb10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d009      	beq.n	800eb2c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	f000 8377 	beq.w	800f210 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eb26:	6878      	ldr	r0, [r7, #4]
 800eb28:	4798      	blx	r3
      }
      return;
 800eb2a:	e371      	b.n	800f210 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800eb2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	f000 8123 	beq.w	800ed7c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800eb36:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800eb3a:	4b8d      	ldr	r3, [pc, #564]	@ (800ed70 <HAL_UART_IRQHandler+0x2b8>)
 800eb3c:	4013      	ands	r3, r2
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d106      	bne.n	800eb50 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800eb42:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800eb46:	4b8b      	ldr	r3, [pc, #556]	@ (800ed74 <HAL_UART_IRQHandler+0x2bc>)
 800eb48:	4013      	ands	r3, r2
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	f000 8116 	beq.w	800ed7c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800eb50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb54:	f003 0301 	and.w	r3, r3, #1
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d011      	beq.n	800eb80 <HAL_UART_IRQHandler+0xc8>
 800eb5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eb60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d00b      	beq.n	800eb80 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	2201      	movs	r2, #1
 800eb6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eb76:	f043 0201 	orr.w	r2, r3, #1
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eb80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb84:	f003 0302 	and.w	r3, r3, #2
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d011      	beq.n	800ebb0 <HAL_UART_IRQHandler+0xf8>
 800eb8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800eb90:	f003 0301 	and.w	r3, r3, #1
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d00b      	beq.n	800ebb0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	2202      	movs	r2, #2
 800eb9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eba6:	f043 0204 	orr.w	r2, r3, #4
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ebb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ebb4:	f003 0304 	and.w	r3, r3, #4
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d011      	beq.n	800ebe0 <HAL_UART_IRQHandler+0x128>
 800ebbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ebc0:	f003 0301 	and.w	r3, r3, #1
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d00b      	beq.n	800ebe0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	2204      	movs	r2, #4
 800ebce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ebd6:	f043 0202 	orr.w	r2, r3, #2
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ebe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ebe4:	f003 0308 	and.w	r3, r3, #8
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d017      	beq.n	800ec1c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ebec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ebf0:	f003 0320 	and.w	r3, r3, #32
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d105      	bne.n	800ec04 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ebf8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ebfc:	4b5c      	ldr	r3, [pc, #368]	@ (800ed70 <HAL_UART_IRQHandler+0x2b8>)
 800ebfe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d00b      	beq.n	800ec1c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	2208      	movs	r2, #8
 800ec0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ec12:	f043 0208 	orr.w	r2, r3, #8
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ec1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ec20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d012      	beq.n	800ec4e <HAL_UART_IRQHandler+0x196>
 800ec28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ec2c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d00c      	beq.n	800ec4e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ec3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ec44:	f043 0220 	orr.w	r2, r3, #32
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	f000 82dd 	beq.w	800f214 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ec5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ec5e:	f003 0320 	and.w	r3, r3, #32
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d013      	beq.n	800ec8e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ec66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ec6a:	f003 0320 	and.w	r3, r3, #32
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d105      	bne.n	800ec7e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ec72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ec76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d007      	beq.n	800ec8e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d003      	beq.n	800ec8e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ec8a:	6878      	ldr	r0, [r7, #4]
 800ec8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ec94:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	689b      	ldr	r3, [r3, #8]
 800ec9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eca2:	2b40      	cmp	r3, #64	@ 0x40
 800eca4:	d005      	beq.n	800ecb2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800eca6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ecaa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d054      	beq.n	800ed5c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ecb2:	6878      	ldr	r0, [r7, #4]
 800ecb4:	f001 fd1e 	bl	80106f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	689b      	ldr	r3, [r3, #8]
 800ecbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ecc2:	2b40      	cmp	r3, #64	@ 0x40
 800ecc4:	d146      	bne.n	800ed54 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	3308      	adds	r3, #8
 800eccc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ecd4:	e853 3f00 	ldrex	r3, [r3]
 800ecd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ecdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ece0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ece4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	3308      	adds	r3, #8
 800ecee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ecf2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ecf6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecfa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ecfe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ed02:	e841 2300 	strex	r3, r2, [r1]
 800ed06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ed0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d1d9      	bne.n	800ecc6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d017      	beq.n	800ed4c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ed22:	4a15      	ldr	r2, [pc, #84]	@ (800ed78 <HAL_UART_IRQHandler+0x2c0>)
 800ed24:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	f7f7 fe29 	bl	8006984 <HAL_DMA_Abort_IT>
 800ed32:	4603      	mov	r3, r0
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d019      	beq.n	800ed6c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ed3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed40:	687a      	ldr	r2, [r7, #4]
 800ed42:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800ed46:	4610      	mov	r0, r2
 800ed48:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed4a:	e00f      	b.n	800ed6c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ed4c:	6878      	ldr	r0, [r7, #4]
 800ed4e:	f000 fa81 	bl	800f254 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed52:	e00b      	b.n	800ed6c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ed54:	6878      	ldr	r0, [r7, #4]
 800ed56:	f000 fa7d 	bl	800f254 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed5a:	e007      	b.n	800ed6c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ed5c:	6878      	ldr	r0, [r7, #4]
 800ed5e:	f000 fa79 	bl	800f254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	2200      	movs	r2, #0
 800ed66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800ed6a:	e253      	b.n	800f214 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed6c:	bf00      	nop
    return;
 800ed6e:	e251      	b.n	800f214 <HAL_UART_IRQHandler+0x75c>
 800ed70:	10000001 	.word	0x10000001
 800ed74:	04000120 	.word	0x04000120
 800ed78:	080109a7 	.word	0x080109a7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ed80:	2b01      	cmp	r3, #1
 800ed82:	f040 81e7 	bne.w	800f154 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ed86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ed8a:	f003 0310 	and.w	r3, r3, #16
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	f000 81e0 	beq.w	800f154 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ed94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ed98:	f003 0310 	and.w	r3, r3, #16
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	f000 81d9 	beq.w	800f154 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	2210      	movs	r2, #16
 800eda8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	689b      	ldr	r3, [r3, #8]
 800edb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800edb4:	2b40      	cmp	r3, #64	@ 0x40
 800edb6:	f040 8151 	bne.w	800f05c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	4a96      	ldr	r2, [pc, #600]	@ (800f01c <HAL_UART_IRQHandler+0x564>)
 800edc4:	4293      	cmp	r3, r2
 800edc6:	d068      	beq.n	800ee9a <HAL_UART_IRQHandler+0x3e2>
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	4a93      	ldr	r2, [pc, #588]	@ (800f020 <HAL_UART_IRQHandler+0x568>)
 800edd2:	4293      	cmp	r3, r2
 800edd4:	d061      	beq.n	800ee9a <HAL_UART_IRQHandler+0x3e2>
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	4a91      	ldr	r2, [pc, #580]	@ (800f024 <HAL_UART_IRQHandler+0x56c>)
 800ede0:	4293      	cmp	r3, r2
 800ede2:	d05a      	beq.n	800ee9a <HAL_UART_IRQHandler+0x3e2>
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	4a8e      	ldr	r2, [pc, #568]	@ (800f028 <HAL_UART_IRQHandler+0x570>)
 800edee:	4293      	cmp	r3, r2
 800edf0:	d053      	beq.n	800ee9a <HAL_UART_IRQHandler+0x3e2>
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	4a8c      	ldr	r2, [pc, #560]	@ (800f02c <HAL_UART_IRQHandler+0x574>)
 800edfc:	4293      	cmp	r3, r2
 800edfe:	d04c      	beq.n	800ee9a <HAL_UART_IRQHandler+0x3e2>
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	4a89      	ldr	r2, [pc, #548]	@ (800f030 <HAL_UART_IRQHandler+0x578>)
 800ee0a:	4293      	cmp	r3, r2
 800ee0c:	d045      	beq.n	800ee9a <HAL_UART_IRQHandler+0x3e2>
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	4a87      	ldr	r2, [pc, #540]	@ (800f034 <HAL_UART_IRQHandler+0x57c>)
 800ee18:	4293      	cmp	r3, r2
 800ee1a:	d03e      	beq.n	800ee9a <HAL_UART_IRQHandler+0x3e2>
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	4a84      	ldr	r2, [pc, #528]	@ (800f038 <HAL_UART_IRQHandler+0x580>)
 800ee26:	4293      	cmp	r3, r2
 800ee28:	d037      	beq.n	800ee9a <HAL_UART_IRQHandler+0x3e2>
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	4a82      	ldr	r2, [pc, #520]	@ (800f03c <HAL_UART_IRQHandler+0x584>)
 800ee34:	4293      	cmp	r3, r2
 800ee36:	d030      	beq.n	800ee9a <HAL_UART_IRQHandler+0x3e2>
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	4a7f      	ldr	r2, [pc, #508]	@ (800f040 <HAL_UART_IRQHandler+0x588>)
 800ee42:	4293      	cmp	r3, r2
 800ee44:	d029      	beq.n	800ee9a <HAL_UART_IRQHandler+0x3e2>
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	4a7d      	ldr	r2, [pc, #500]	@ (800f044 <HAL_UART_IRQHandler+0x58c>)
 800ee50:	4293      	cmp	r3, r2
 800ee52:	d022      	beq.n	800ee9a <HAL_UART_IRQHandler+0x3e2>
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	4a7a      	ldr	r2, [pc, #488]	@ (800f048 <HAL_UART_IRQHandler+0x590>)
 800ee5e:	4293      	cmp	r3, r2
 800ee60:	d01b      	beq.n	800ee9a <HAL_UART_IRQHandler+0x3e2>
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	4a78      	ldr	r2, [pc, #480]	@ (800f04c <HAL_UART_IRQHandler+0x594>)
 800ee6c:	4293      	cmp	r3, r2
 800ee6e:	d014      	beq.n	800ee9a <HAL_UART_IRQHandler+0x3e2>
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	4a75      	ldr	r2, [pc, #468]	@ (800f050 <HAL_UART_IRQHandler+0x598>)
 800ee7a:	4293      	cmp	r3, r2
 800ee7c:	d00d      	beq.n	800ee9a <HAL_UART_IRQHandler+0x3e2>
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	4a73      	ldr	r2, [pc, #460]	@ (800f054 <HAL_UART_IRQHandler+0x59c>)
 800ee88:	4293      	cmp	r3, r2
 800ee8a:	d006      	beq.n	800ee9a <HAL_UART_IRQHandler+0x3e2>
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	4a70      	ldr	r2, [pc, #448]	@ (800f058 <HAL_UART_IRQHandler+0x5a0>)
 800ee96:	4293      	cmp	r3, r2
 800ee98:	d106      	bne.n	800eea8 <HAL_UART_IRQHandler+0x3f0>
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	685b      	ldr	r3, [r3, #4]
 800eea4:	b29b      	uxth	r3, r3
 800eea6:	e005      	b.n	800eeb4 <HAL_UART_IRQHandler+0x3fc>
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	685b      	ldr	r3, [r3, #4]
 800eeb2:	b29b      	uxth	r3, r3
 800eeb4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800eeb8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	f000 81ab 	beq.w	800f218 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800eec8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800eecc:	429a      	cmp	r2, r3
 800eece:	f080 81a3 	bcs.w	800f218 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800eed8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eee2:	69db      	ldr	r3, [r3, #28]
 800eee4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eee8:	f000 8087 	beq.w	800effa <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eef4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800eef8:	e853 3f00 	ldrex	r3, [r3]
 800eefc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ef00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ef04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ef08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	461a      	mov	r2, r3
 800ef12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ef16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ef1a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ef22:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ef26:	e841 2300 	strex	r3, r2, [r1]
 800ef2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ef2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d1da      	bne.n	800eeec <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	3308      	adds	r3, #8
 800ef3c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ef40:	e853 3f00 	ldrex	r3, [r3]
 800ef44:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ef46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ef48:	f023 0301 	bic.w	r3, r3, #1
 800ef4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	3308      	adds	r3, #8
 800ef56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ef5a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ef5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef60:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ef62:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ef66:	e841 2300 	strex	r3, r2, [r1]
 800ef6a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ef6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d1e1      	bne.n	800ef36 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	3308      	adds	r3, #8
 800ef78:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ef7c:	e853 3f00 	ldrex	r3, [r3]
 800ef80:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ef82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ef84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ef88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	3308      	adds	r3, #8
 800ef92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ef96:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ef98:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef9a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ef9c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ef9e:	e841 2300 	strex	r3, r2, [r1]
 800efa2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800efa4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d1e3      	bne.n	800ef72 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	2220      	movs	r2, #32
 800efae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	2200      	movs	r2, #0
 800efb6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800efc0:	e853 3f00 	ldrex	r3, [r3]
 800efc4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800efc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800efc8:	f023 0310 	bic.w	r3, r3, #16
 800efcc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	461a      	mov	r2, r3
 800efd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800efda:	65bb      	str	r3, [r7, #88]	@ 0x58
 800efdc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efde:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800efe0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800efe2:	e841 2300 	strex	r3, r2, [r1]
 800efe6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800efe8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800efea:	2b00      	cmp	r3, #0
 800efec:	d1e4      	bne.n	800efb8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eff4:	4618      	mov	r0, r3
 800eff6:	f7f7 f9a7 	bl	8006348 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	2202      	movs	r2, #2
 800effe:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f00c:	b29b      	uxth	r3, r3
 800f00e:	1ad3      	subs	r3, r2, r3
 800f010:	b29b      	uxth	r3, r3
 800f012:	4619      	mov	r1, r3
 800f014:	6878      	ldr	r0, [r7, #4]
 800f016:	f000 f931 	bl	800f27c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f01a:	e0fd      	b.n	800f218 <HAL_UART_IRQHandler+0x760>
 800f01c:	40020010 	.word	0x40020010
 800f020:	40020028 	.word	0x40020028
 800f024:	40020040 	.word	0x40020040
 800f028:	40020058 	.word	0x40020058
 800f02c:	40020070 	.word	0x40020070
 800f030:	40020088 	.word	0x40020088
 800f034:	400200a0 	.word	0x400200a0
 800f038:	400200b8 	.word	0x400200b8
 800f03c:	40020410 	.word	0x40020410
 800f040:	40020428 	.word	0x40020428
 800f044:	40020440 	.word	0x40020440
 800f048:	40020458 	.word	0x40020458
 800f04c:	40020470 	.word	0x40020470
 800f050:	40020488 	.word	0x40020488
 800f054:	400204a0 	.word	0x400204a0
 800f058:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f068:	b29b      	uxth	r3, r3
 800f06a:	1ad3      	subs	r3, r2, r3
 800f06c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f076:	b29b      	uxth	r3, r3
 800f078:	2b00      	cmp	r3, #0
 800f07a:	f000 80cf 	beq.w	800f21c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800f07e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f082:	2b00      	cmp	r3, #0
 800f084:	f000 80ca 	beq.w	800f21c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f08e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f090:	e853 3f00 	ldrex	r3, [r3]
 800f094:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f098:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f09c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	461a      	mov	r2, r3
 800f0a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f0aa:	647b      	str	r3, [r7, #68]	@ 0x44
 800f0ac:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f0b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f0b2:	e841 2300 	strex	r3, r2, [r1]
 800f0b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f0b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d1e4      	bne.n	800f088 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	3308      	adds	r3, #8
 800f0c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0c8:	e853 3f00 	ldrex	r3, [r3]
 800f0cc:	623b      	str	r3, [r7, #32]
   return(result);
 800f0ce:	6a3a      	ldr	r2, [r7, #32]
 800f0d0:	4b55      	ldr	r3, [pc, #340]	@ (800f228 <HAL_UART_IRQHandler+0x770>)
 800f0d2:	4013      	ands	r3, r2
 800f0d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	3308      	adds	r3, #8
 800f0de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800f0e2:	633a      	str	r2, [r7, #48]	@ 0x30
 800f0e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f0e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f0ea:	e841 2300 	strex	r3, r2, [r1]
 800f0ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f0f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d1e3      	bne.n	800f0be <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	2220      	movs	r2, #32
 800f0fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	2200      	movs	r2, #0
 800f102:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	2200      	movs	r2, #0
 800f108:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f110:	693b      	ldr	r3, [r7, #16]
 800f112:	e853 3f00 	ldrex	r3, [r3]
 800f116:	60fb      	str	r3, [r7, #12]
   return(result);
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	f023 0310 	bic.w	r3, r3, #16
 800f11e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	461a      	mov	r2, r3
 800f128:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800f12c:	61fb      	str	r3, [r7, #28]
 800f12e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f130:	69b9      	ldr	r1, [r7, #24]
 800f132:	69fa      	ldr	r2, [r7, #28]
 800f134:	e841 2300 	strex	r3, r2, [r1]
 800f138:	617b      	str	r3, [r7, #20]
   return(result);
 800f13a:	697b      	ldr	r3, [r7, #20]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d1e4      	bne.n	800f10a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	2202      	movs	r2, #2
 800f144:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f146:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f14a:	4619      	mov	r1, r3
 800f14c:	6878      	ldr	r0, [r7, #4]
 800f14e:	f000 f895 	bl	800f27c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f152:	e063      	b.n	800f21c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f158:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d00e      	beq.n	800f17e <HAL_UART_IRQHandler+0x6c6>
 800f160:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f164:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d008      	beq.n	800f17e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800f174:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f176:	6878      	ldr	r0, [r7, #4]
 800f178:	f002 fb9a 	bl	80118b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f17c:	e051      	b.n	800f222 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f17e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f186:	2b00      	cmp	r3, #0
 800f188:	d014      	beq.n	800f1b4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f18a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f18e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f192:	2b00      	cmp	r3, #0
 800f194:	d105      	bne.n	800f1a2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f196:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f19a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d008      	beq.n	800f1b4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d03a      	beq.n	800f220 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f1ae:	6878      	ldr	r0, [r7, #4]
 800f1b0:	4798      	blx	r3
    }
    return;
 800f1b2:	e035      	b.n	800f220 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f1b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f1b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d009      	beq.n	800f1d4 <HAL_UART_IRQHandler+0x71c>
 800f1c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f1c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d003      	beq.n	800f1d4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800f1cc:	6878      	ldr	r0, [r7, #4]
 800f1ce:	f001 fe28 	bl	8010e22 <UART_EndTransmit_IT>
    return;
 800f1d2:	e026      	b.n	800f222 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f1d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f1d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d009      	beq.n	800f1f4 <HAL_UART_IRQHandler+0x73c>
 800f1e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f1e4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d003      	beq.n	800f1f4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f1ec:	6878      	ldr	r0, [r7, #4]
 800f1ee:	f002 fb73 	bl	80118d8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f1f2:	e016      	b.n	800f222 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f1f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f1f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d010      	beq.n	800f222 <HAL_UART_IRQHandler+0x76a>
 800f200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f204:	2b00      	cmp	r3, #0
 800f206:	da0c      	bge.n	800f222 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f208:	6878      	ldr	r0, [r7, #4]
 800f20a:	f002 fb5b 	bl	80118c4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f20e:	e008      	b.n	800f222 <HAL_UART_IRQHandler+0x76a>
      return;
 800f210:	bf00      	nop
 800f212:	e006      	b.n	800f222 <HAL_UART_IRQHandler+0x76a>
    return;
 800f214:	bf00      	nop
 800f216:	e004      	b.n	800f222 <HAL_UART_IRQHandler+0x76a>
      return;
 800f218:	bf00      	nop
 800f21a:	e002      	b.n	800f222 <HAL_UART_IRQHandler+0x76a>
      return;
 800f21c:	bf00      	nop
 800f21e:	e000      	b.n	800f222 <HAL_UART_IRQHandler+0x76a>
    return;
 800f220:	bf00      	nop
  }
}
 800f222:	37e8      	adds	r7, #232	@ 0xe8
 800f224:	46bd      	mov	sp, r7
 800f226:	bd80      	pop	{r7, pc}
 800f228:	effffffe 	.word	0xeffffffe

0800f22c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f22c:	b480      	push	{r7}
 800f22e:	b083      	sub	sp, #12
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f234:	bf00      	nop
 800f236:	370c      	adds	r7, #12
 800f238:	46bd      	mov	sp, r7
 800f23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23e:	4770      	bx	lr

0800f240 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f240:	b480      	push	{r7}
 800f242:	b083      	sub	sp, #12
 800f244:	af00      	add	r7, sp, #0
 800f246:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800f248:	bf00      	nop
 800f24a:	370c      	adds	r7, #12
 800f24c:	46bd      	mov	sp, r7
 800f24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f252:	4770      	bx	lr

0800f254 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f254:	b480      	push	{r7}
 800f256:	b083      	sub	sp, #12
 800f258:	af00      	add	r7, sp, #0
 800f25a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f25c:	bf00      	nop
 800f25e:	370c      	adds	r7, #12
 800f260:	46bd      	mov	sp, r7
 800f262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f266:	4770      	bx	lr

0800f268 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800f268:	b480      	push	{r7}
 800f26a:	b083      	sub	sp, #12
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800f270:	bf00      	nop
 800f272:	370c      	adds	r7, #12
 800f274:	46bd      	mov	sp, r7
 800f276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27a:	4770      	bx	lr

0800f27c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f27c:	b480      	push	{r7}
 800f27e:	b083      	sub	sp, #12
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
 800f284:	460b      	mov	r3, r1
 800f286:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f288:	bf00      	nop
 800f28a:	370c      	adds	r7, #12
 800f28c:	46bd      	mov	sp, r7
 800f28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f292:	4770      	bx	lr

0800f294 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f294:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f298:	b092      	sub	sp, #72	@ 0x48
 800f29a:	af00      	add	r7, sp, #0
 800f29c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f29e:	2300      	movs	r3, #0
 800f2a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f2a4:	697b      	ldr	r3, [r7, #20]
 800f2a6:	689a      	ldr	r2, [r3, #8]
 800f2a8:	697b      	ldr	r3, [r7, #20]
 800f2aa:	691b      	ldr	r3, [r3, #16]
 800f2ac:	431a      	orrs	r2, r3
 800f2ae:	697b      	ldr	r3, [r7, #20]
 800f2b0:	695b      	ldr	r3, [r3, #20]
 800f2b2:	431a      	orrs	r2, r3
 800f2b4:	697b      	ldr	r3, [r7, #20]
 800f2b6:	69db      	ldr	r3, [r3, #28]
 800f2b8:	4313      	orrs	r3, r2
 800f2ba:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f2bc:	697b      	ldr	r3, [r7, #20]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	681a      	ldr	r2, [r3, #0]
 800f2c2:	4bbe      	ldr	r3, [pc, #760]	@ (800f5bc <UART_SetConfig+0x328>)
 800f2c4:	4013      	ands	r3, r2
 800f2c6:	697a      	ldr	r2, [r7, #20]
 800f2c8:	6812      	ldr	r2, [r2, #0]
 800f2ca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f2cc:	430b      	orrs	r3, r1
 800f2ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f2d0:	697b      	ldr	r3, [r7, #20]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	685b      	ldr	r3, [r3, #4]
 800f2d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f2da:	697b      	ldr	r3, [r7, #20]
 800f2dc:	68da      	ldr	r2, [r3, #12]
 800f2de:	697b      	ldr	r3, [r7, #20]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	430a      	orrs	r2, r1
 800f2e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f2e6:	697b      	ldr	r3, [r7, #20]
 800f2e8:	699b      	ldr	r3, [r3, #24]
 800f2ea:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f2ec:	697b      	ldr	r3, [r7, #20]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	4ab3      	ldr	r2, [pc, #716]	@ (800f5c0 <UART_SetConfig+0x32c>)
 800f2f2:	4293      	cmp	r3, r2
 800f2f4:	d004      	beq.n	800f300 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f2f6:	697b      	ldr	r3, [r7, #20]
 800f2f8:	6a1b      	ldr	r3, [r3, #32]
 800f2fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f2fc:	4313      	orrs	r3, r2
 800f2fe:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f300:	697b      	ldr	r3, [r7, #20]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	689a      	ldr	r2, [r3, #8]
 800f306:	4baf      	ldr	r3, [pc, #700]	@ (800f5c4 <UART_SetConfig+0x330>)
 800f308:	4013      	ands	r3, r2
 800f30a:	697a      	ldr	r2, [r7, #20]
 800f30c:	6812      	ldr	r2, [r2, #0]
 800f30e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f310:	430b      	orrs	r3, r1
 800f312:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f314:	697b      	ldr	r3, [r7, #20]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f31a:	f023 010f 	bic.w	r1, r3, #15
 800f31e:	697b      	ldr	r3, [r7, #20]
 800f320:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f322:	697b      	ldr	r3, [r7, #20]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	430a      	orrs	r2, r1
 800f328:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f32a:	697b      	ldr	r3, [r7, #20]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	4aa6      	ldr	r2, [pc, #664]	@ (800f5c8 <UART_SetConfig+0x334>)
 800f330:	4293      	cmp	r3, r2
 800f332:	d177      	bne.n	800f424 <UART_SetConfig+0x190>
 800f334:	4ba5      	ldr	r3, [pc, #660]	@ (800f5cc <UART_SetConfig+0x338>)
 800f336:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f338:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f33c:	2b28      	cmp	r3, #40	@ 0x28
 800f33e:	d86d      	bhi.n	800f41c <UART_SetConfig+0x188>
 800f340:	a201      	add	r2, pc, #4	@ (adr r2, 800f348 <UART_SetConfig+0xb4>)
 800f342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f346:	bf00      	nop
 800f348:	0800f3ed 	.word	0x0800f3ed
 800f34c:	0800f41d 	.word	0x0800f41d
 800f350:	0800f41d 	.word	0x0800f41d
 800f354:	0800f41d 	.word	0x0800f41d
 800f358:	0800f41d 	.word	0x0800f41d
 800f35c:	0800f41d 	.word	0x0800f41d
 800f360:	0800f41d 	.word	0x0800f41d
 800f364:	0800f41d 	.word	0x0800f41d
 800f368:	0800f3f5 	.word	0x0800f3f5
 800f36c:	0800f41d 	.word	0x0800f41d
 800f370:	0800f41d 	.word	0x0800f41d
 800f374:	0800f41d 	.word	0x0800f41d
 800f378:	0800f41d 	.word	0x0800f41d
 800f37c:	0800f41d 	.word	0x0800f41d
 800f380:	0800f41d 	.word	0x0800f41d
 800f384:	0800f41d 	.word	0x0800f41d
 800f388:	0800f3fd 	.word	0x0800f3fd
 800f38c:	0800f41d 	.word	0x0800f41d
 800f390:	0800f41d 	.word	0x0800f41d
 800f394:	0800f41d 	.word	0x0800f41d
 800f398:	0800f41d 	.word	0x0800f41d
 800f39c:	0800f41d 	.word	0x0800f41d
 800f3a0:	0800f41d 	.word	0x0800f41d
 800f3a4:	0800f41d 	.word	0x0800f41d
 800f3a8:	0800f405 	.word	0x0800f405
 800f3ac:	0800f41d 	.word	0x0800f41d
 800f3b0:	0800f41d 	.word	0x0800f41d
 800f3b4:	0800f41d 	.word	0x0800f41d
 800f3b8:	0800f41d 	.word	0x0800f41d
 800f3bc:	0800f41d 	.word	0x0800f41d
 800f3c0:	0800f41d 	.word	0x0800f41d
 800f3c4:	0800f41d 	.word	0x0800f41d
 800f3c8:	0800f40d 	.word	0x0800f40d
 800f3cc:	0800f41d 	.word	0x0800f41d
 800f3d0:	0800f41d 	.word	0x0800f41d
 800f3d4:	0800f41d 	.word	0x0800f41d
 800f3d8:	0800f41d 	.word	0x0800f41d
 800f3dc:	0800f41d 	.word	0x0800f41d
 800f3e0:	0800f41d 	.word	0x0800f41d
 800f3e4:	0800f41d 	.word	0x0800f41d
 800f3e8:	0800f415 	.word	0x0800f415
 800f3ec:	2301      	movs	r3, #1
 800f3ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3f2:	e326      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f3f4:	2304      	movs	r3, #4
 800f3f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3fa:	e322      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f3fc:	2308      	movs	r3, #8
 800f3fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f402:	e31e      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f404:	2310      	movs	r3, #16
 800f406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f40a:	e31a      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f40c:	2320      	movs	r3, #32
 800f40e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f412:	e316      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f414:	2340      	movs	r3, #64	@ 0x40
 800f416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f41a:	e312      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f41c:	2380      	movs	r3, #128	@ 0x80
 800f41e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f422:	e30e      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f424:	697b      	ldr	r3, [r7, #20]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	4a69      	ldr	r2, [pc, #420]	@ (800f5d0 <UART_SetConfig+0x33c>)
 800f42a:	4293      	cmp	r3, r2
 800f42c:	d130      	bne.n	800f490 <UART_SetConfig+0x1fc>
 800f42e:	4b67      	ldr	r3, [pc, #412]	@ (800f5cc <UART_SetConfig+0x338>)
 800f430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f432:	f003 0307 	and.w	r3, r3, #7
 800f436:	2b05      	cmp	r3, #5
 800f438:	d826      	bhi.n	800f488 <UART_SetConfig+0x1f4>
 800f43a:	a201      	add	r2, pc, #4	@ (adr r2, 800f440 <UART_SetConfig+0x1ac>)
 800f43c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f440:	0800f459 	.word	0x0800f459
 800f444:	0800f461 	.word	0x0800f461
 800f448:	0800f469 	.word	0x0800f469
 800f44c:	0800f471 	.word	0x0800f471
 800f450:	0800f479 	.word	0x0800f479
 800f454:	0800f481 	.word	0x0800f481
 800f458:	2300      	movs	r3, #0
 800f45a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f45e:	e2f0      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f460:	2304      	movs	r3, #4
 800f462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f466:	e2ec      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f468:	2308      	movs	r3, #8
 800f46a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f46e:	e2e8      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f470:	2310      	movs	r3, #16
 800f472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f476:	e2e4      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f478:	2320      	movs	r3, #32
 800f47a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f47e:	e2e0      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f480:	2340      	movs	r3, #64	@ 0x40
 800f482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f486:	e2dc      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f488:	2380      	movs	r3, #128	@ 0x80
 800f48a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f48e:	e2d8      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f490:	697b      	ldr	r3, [r7, #20]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	4a4f      	ldr	r2, [pc, #316]	@ (800f5d4 <UART_SetConfig+0x340>)
 800f496:	4293      	cmp	r3, r2
 800f498:	d130      	bne.n	800f4fc <UART_SetConfig+0x268>
 800f49a:	4b4c      	ldr	r3, [pc, #304]	@ (800f5cc <UART_SetConfig+0x338>)
 800f49c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f49e:	f003 0307 	and.w	r3, r3, #7
 800f4a2:	2b05      	cmp	r3, #5
 800f4a4:	d826      	bhi.n	800f4f4 <UART_SetConfig+0x260>
 800f4a6:	a201      	add	r2, pc, #4	@ (adr r2, 800f4ac <UART_SetConfig+0x218>)
 800f4a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4ac:	0800f4c5 	.word	0x0800f4c5
 800f4b0:	0800f4cd 	.word	0x0800f4cd
 800f4b4:	0800f4d5 	.word	0x0800f4d5
 800f4b8:	0800f4dd 	.word	0x0800f4dd
 800f4bc:	0800f4e5 	.word	0x0800f4e5
 800f4c0:	0800f4ed 	.word	0x0800f4ed
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4ca:	e2ba      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f4cc:	2304      	movs	r3, #4
 800f4ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4d2:	e2b6      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f4d4:	2308      	movs	r3, #8
 800f4d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4da:	e2b2      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f4dc:	2310      	movs	r3, #16
 800f4de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4e2:	e2ae      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f4e4:	2320      	movs	r3, #32
 800f4e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4ea:	e2aa      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f4ec:	2340      	movs	r3, #64	@ 0x40
 800f4ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4f2:	e2a6      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f4f4:	2380      	movs	r3, #128	@ 0x80
 800f4f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4fa:	e2a2      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f4fc:	697b      	ldr	r3, [r7, #20]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	4a35      	ldr	r2, [pc, #212]	@ (800f5d8 <UART_SetConfig+0x344>)
 800f502:	4293      	cmp	r3, r2
 800f504:	d130      	bne.n	800f568 <UART_SetConfig+0x2d4>
 800f506:	4b31      	ldr	r3, [pc, #196]	@ (800f5cc <UART_SetConfig+0x338>)
 800f508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f50a:	f003 0307 	and.w	r3, r3, #7
 800f50e:	2b05      	cmp	r3, #5
 800f510:	d826      	bhi.n	800f560 <UART_SetConfig+0x2cc>
 800f512:	a201      	add	r2, pc, #4	@ (adr r2, 800f518 <UART_SetConfig+0x284>)
 800f514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f518:	0800f531 	.word	0x0800f531
 800f51c:	0800f539 	.word	0x0800f539
 800f520:	0800f541 	.word	0x0800f541
 800f524:	0800f549 	.word	0x0800f549
 800f528:	0800f551 	.word	0x0800f551
 800f52c:	0800f559 	.word	0x0800f559
 800f530:	2300      	movs	r3, #0
 800f532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f536:	e284      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f538:	2304      	movs	r3, #4
 800f53a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f53e:	e280      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f540:	2308      	movs	r3, #8
 800f542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f546:	e27c      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f548:	2310      	movs	r3, #16
 800f54a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f54e:	e278      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f550:	2320      	movs	r3, #32
 800f552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f556:	e274      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f558:	2340      	movs	r3, #64	@ 0x40
 800f55a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f55e:	e270      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f560:	2380      	movs	r3, #128	@ 0x80
 800f562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f566:	e26c      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f568:	697b      	ldr	r3, [r7, #20]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	4a1b      	ldr	r2, [pc, #108]	@ (800f5dc <UART_SetConfig+0x348>)
 800f56e:	4293      	cmp	r3, r2
 800f570:	d142      	bne.n	800f5f8 <UART_SetConfig+0x364>
 800f572:	4b16      	ldr	r3, [pc, #88]	@ (800f5cc <UART_SetConfig+0x338>)
 800f574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f576:	f003 0307 	and.w	r3, r3, #7
 800f57a:	2b05      	cmp	r3, #5
 800f57c:	d838      	bhi.n	800f5f0 <UART_SetConfig+0x35c>
 800f57e:	a201      	add	r2, pc, #4	@ (adr r2, 800f584 <UART_SetConfig+0x2f0>)
 800f580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f584:	0800f59d 	.word	0x0800f59d
 800f588:	0800f5a5 	.word	0x0800f5a5
 800f58c:	0800f5ad 	.word	0x0800f5ad
 800f590:	0800f5b5 	.word	0x0800f5b5
 800f594:	0800f5e1 	.word	0x0800f5e1
 800f598:	0800f5e9 	.word	0x0800f5e9
 800f59c:	2300      	movs	r3, #0
 800f59e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5a2:	e24e      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f5a4:	2304      	movs	r3, #4
 800f5a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5aa:	e24a      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f5ac:	2308      	movs	r3, #8
 800f5ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5b2:	e246      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f5b4:	2310      	movs	r3, #16
 800f5b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5ba:	e242      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f5bc:	cfff69f3 	.word	0xcfff69f3
 800f5c0:	58000c00 	.word	0x58000c00
 800f5c4:	11fff4ff 	.word	0x11fff4ff
 800f5c8:	40011000 	.word	0x40011000
 800f5cc:	58024400 	.word	0x58024400
 800f5d0:	40004400 	.word	0x40004400
 800f5d4:	40004800 	.word	0x40004800
 800f5d8:	40004c00 	.word	0x40004c00
 800f5dc:	40005000 	.word	0x40005000
 800f5e0:	2320      	movs	r3, #32
 800f5e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5e6:	e22c      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f5e8:	2340      	movs	r3, #64	@ 0x40
 800f5ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5ee:	e228      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f5f0:	2380      	movs	r3, #128	@ 0x80
 800f5f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5f6:	e224      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f5f8:	697b      	ldr	r3, [r7, #20]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	4ab1      	ldr	r2, [pc, #708]	@ (800f8c4 <UART_SetConfig+0x630>)
 800f5fe:	4293      	cmp	r3, r2
 800f600:	d176      	bne.n	800f6f0 <UART_SetConfig+0x45c>
 800f602:	4bb1      	ldr	r3, [pc, #708]	@ (800f8c8 <UART_SetConfig+0x634>)
 800f604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f606:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f60a:	2b28      	cmp	r3, #40	@ 0x28
 800f60c:	d86c      	bhi.n	800f6e8 <UART_SetConfig+0x454>
 800f60e:	a201      	add	r2, pc, #4	@ (adr r2, 800f614 <UART_SetConfig+0x380>)
 800f610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f614:	0800f6b9 	.word	0x0800f6b9
 800f618:	0800f6e9 	.word	0x0800f6e9
 800f61c:	0800f6e9 	.word	0x0800f6e9
 800f620:	0800f6e9 	.word	0x0800f6e9
 800f624:	0800f6e9 	.word	0x0800f6e9
 800f628:	0800f6e9 	.word	0x0800f6e9
 800f62c:	0800f6e9 	.word	0x0800f6e9
 800f630:	0800f6e9 	.word	0x0800f6e9
 800f634:	0800f6c1 	.word	0x0800f6c1
 800f638:	0800f6e9 	.word	0x0800f6e9
 800f63c:	0800f6e9 	.word	0x0800f6e9
 800f640:	0800f6e9 	.word	0x0800f6e9
 800f644:	0800f6e9 	.word	0x0800f6e9
 800f648:	0800f6e9 	.word	0x0800f6e9
 800f64c:	0800f6e9 	.word	0x0800f6e9
 800f650:	0800f6e9 	.word	0x0800f6e9
 800f654:	0800f6c9 	.word	0x0800f6c9
 800f658:	0800f6e9 	.word	0x0800f6e9
 800f65c:	0800f6e9 	.word	0x0800f6e9
 800f660:	0800f6e9 	.word	0x0800f6e9
 800f664:	0800f6e9 	.word	0x0800f6e9
 800f668:	0800f6e9 	.word	0x0800f6e9
 800f66c:	0800f6e9 	.word	0x0800f6e9
 800f670:	0800f6e9 	.word	0x0800f6e9
 800f674:	0800f6d1 	.word	0x0800f6d1
 800f678:	0800f6e9 	.word	0x0800f6e9
 800f67c:	0800f6e9 	.word	0x0800f6e9
 800f680:	0800f6e9 	.word	0x0800f6e9
 800f684:	0800f6e9 	.word	0x0800f6e9
 800f688:	0800f6e9 	.word	0x0800f6e9
 800f68c:	0800f6e9 	.word	0x0800f6e9
 800f690:	0800f6e9 	.word	0x0800f6e9
 800f694:	0800f6d9 	.word	0x0800f6d9
 800f698:	0800f6e9 	.word	0x0800f6e9
 800f69c:	0800f6e9 	.word	0x0800f6e9
 800f6a0:	0800f6e9 	.word	0x0800f6e9
 800f6a4:	0800f6e9 	.word	0x0800f6e9
 800f6a8:	0800f6e9 	.word	0x0800f6e9
 800f6ac:	0800f6e9 	.word	0x0800f6e9
 800f6b0:	0800f6e9 	.word	0x0800f6e9
 800f6b4:	0800f6e1 	.word	0x0800f6e1
 800f6b8:	2301      	movs	r3, #1
 800f6ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6be:	e1c0      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f6c0:	2304      	movs	r3, #4
 800f6c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6c6:	e1bc      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f6c8:	2308      	movs	r3, #8
 800f6ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6ce:	e1b8      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f6d0:	2310      	movs	r3, #16
 800f6d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6d6:	e1b4      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f6d8:	2320      	movs	r3, #32
 800f6da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6de:	e1b0      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f6e0:	2340      	movs	r3, #64	@ 0x40
 800f6e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6e6:	e1ac      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f6e8:	2380      	movs	r3, #128	@ 0x80
 800f6ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6ee:	e1a8      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f6f0:	697b      	ldr	r3, [r7, #20]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	4a75      	ldr	r2, [pc, #468]	@ (800f8cc <UART_SetConfig+0x638>)
 800f6f6:	4293      	cmp	r3, r2
 800f6f8:	d130      	bne.n	800f75c <UART_SetConfig+0x4c8>
 800f6fa:	4b73      	ldr	r3, [pc, #460]	@ (800f8c8 <UART_SetConfig+0x634>)
 800f6fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f6fe:	f003 0307 	and.w	r3, r3, #7
 800f702:	2b05      	cmp	r3, #5
 800f704:	d826      	bhi.n	800f754 <UART_SetConfig+0x4c0>
 800f706:	a201      	add	r2, pc, #4	@ (adr r2, 800f70c <UART_SetConfig+0x478>)
 800f708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f70c:	0800f725 	.word	0x0800f725
 800f710:	0800f72d 	.word	0x0800f72d
 800f714:	0800f735 	.word	0x0800f735
 800f718:	0800f73d 	.word	0x0800f73d
 800f71c:	0800f745 	.word	0x0800f745
 800f720:	0800f74d 	.word	0x0800f74d
 800f724:	2300      	movs	r3, #0
 800f726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f72a:	e18a      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f72c:	2304      	movs	r3, #4
 800f72e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f732:	e186      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f734:	2308      	movs	r3, #8
 800f736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f73a:	e182      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f73c:	2310      	movs	r3, #16
 800f73e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f742:	e17e      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f744:	2320      	movs	r3, #32
 800f746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f74a:	e17a      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f74c:	2340      	movs	r3, #64	@ 0x40
 800f74e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f752:	e176      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f754:	2380      	movs	r3, #128	@ 0x80
 800f756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f75a:	e172      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f75c:	697b      	ldr	r3, [r7, #20]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	4a5b      	ldr	r2, [pc, #364]	@ (800f8d0 <UART_SetConfig+0x63c>)
 800f762:	4293      	cmp	r3, r2
 800f764:	d130      	bne.n	800f7c8 <UART_SetConfig+0x534>
 800f766:	4b58      	ldr	r3, [pc, #352]	@ (800f8c8 <UART_SetConfig+0x634>)
 800f768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f76a:	f003 0307 	and.w	r3, r3, #7
 800f76e:	2b05      	cmp	r3, #5
 800f770:	d826      	bhi.n	800f7c0 <UART_SetConfig+0x52c>
 800f772:	a201      	add	r2, pc, #4	@ (adr r2, 800f778 <UART_SetConfig+0x4e4>)
 800f774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f778:	0800f791 	.word	0x0800f791
 800f77c:	0800f799 	.word	0x0800f799
 800f780:	0800f7a1 	.word	0x0800f7a1
 800f784:	0800f7a9 	.word	0x0800f7a9
 800f788:	0800f7b1 	.word	0x0800f7b1
 800f78c:	0800f7b9 	.word	0x0800f7b9
 800f790:	2300      	movs	r3, #0
 800f792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f796:	e154      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f798:	2304      	movs	r3, #4
 800f79a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f79e:	e150      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f7a0:	2308      	movs	r3, #8
 800f7a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7a6:	e14c      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f7a8:	2310      	movs	r3, #16
 800f7aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7ae:	e148      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f7b0:	2320      	movs	r3, #32
 800f7b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7b6:	e144      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f7b8:	2340      	movs	r3, #64	@ 0x40
 800f7ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7be:	e140      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f7c0:	2380      	movs	r3, #128	@ 0x80
 800f7c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7c6:	e13c      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f7c8:	697b      	ldr	r3, [r7, #20]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	4a41      	ldr	r2, [pc, #260]	@ (800f8d4 <UART_SetConfig+0x640>)
 800f7ce:	4293      	cmp	r3, r2
 800f7d0:	f040 8082 	bne.w	800f8d8 <UART_SetConfig+0x644>
 800f7d4:	4b3c      	ldr	r3, [pc, #240]	@ (800f8c8 <UART_SetConfig+0x634>)
 800f7d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f7d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f7dc:	2b28      	cmp	r3, #40	@ 0x28
 800f7de:	d86d      	bhi.n	800f8bc <UART_SetConfig+0x628>
 800f7e0:	a201      	add	r2, pc, #4	@ (adr r2, 800f7e8 <UART_SetConfig+0x554>)
 800f7e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7e6:	bf00      	nop
 800f7e8:	0800f88d 	.word	0x0800f88d
 800f7ec:	0800f8bd 	.word	0x0800f8bd
 800f7f0:	0800f8bd 	.word	0x0800f8bd
 800f7f4:	0800f8bd 	.word	0x0800f8bd
 800f7f8:	0800f8bd 	.word	0x0800f8bd
 800f7fc:	0800f8bd 	.word	0x0800f8bd
 800f800:	0800f8bd 	.word	0x0800f8bd
 800f804:	0800f8bd 	.word	0x0800f8bd
 800f808:	0800f895 	.word	0x0800f895
 800f80c:	0800f8bd 	.word	0x0800f8bd
 800f810:	0800f8bd 	.word	0x0800f8bd
 800f814:	0800f8bd 	.word	0x0800f8bd
 800f818:	0800f8bd 	.word	0x0800f8bd
 800f81c:	0800f8bd 	.word	0x0800f8bd
 800f820:	0800f8bd 	.word	0x0800f8bd
 800f824:	0800f8bd 	.word	0x0800f8bd
 800f828:	0800f89d 	.word	0x0800f89d
 800f82c:	0800f8bd 	.word	0x0800f8bd
 800f830:	0800f8bd 	.word	0x0800f8bd
 800f834:	0800f8bd 	.word	0x0800f8bd
 800f838:	0800f8bd 	.word	0x0800f8bd
 800f83c:	0800f8bd 	.word	0x0800f8bd
 800f840:	0800f8bd 	.word	0x0800f8bd
 800f844:	0800f8bd 	.word	0x0800f8bd
 800f848:	0800f8a5 	.word	0x0800f8a5
 800f84c:	0800f8bd 	.word	0x0800f8bd
 800f850:	0800f8bd 	.word	0x0800f8bd
 800f854:	0800f8bd 	.word	0x0800f8bd
 800f858:	0800f8bd 	.word	0x0800f8bd
 800f85c:	0800f8bd 	.word	0x0800f8bd
 800f860:	0800f8bd 	.word	0x0800f8bd
 800f864:	0800f8bd 	.word	0x0800f8bd
 800f868:	0800f8ad 	.word	0x0800f8ad
 800f86c:	0800f8bd 	.word	0x0800f8bd
 800f870:	0800f8bd 	.word	0x0800f8bd
 800f874:	0800f8bd 	.word	0x0800f8bd
 800f878:	0800f8bd 	.word	0x0800f8bd
 800f87c:	0800f8bd 	.word	0x0800f8bd
 800f880:	0800f8bd 	.word	0x0800f8bd
 800f884:	0800f8bd 	.word	0x0800f8bd
 800f888:	0800f8b5 	.word	0x0800f8b5
 800f88c:	2301      	movs	r3, #1
 800f88e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f892:	e0d6      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f894:	2304      	movs	r3, #4
 800f896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f89a:	e0d2      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f89c:	2308      	movs	r3, #8
 800f89e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8a2:	e0ce      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f8a4:	2310      	movs	r3, #16
 800f8a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8aa:	e0ca      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f8ac:	2320      	movs	r3, #32
 800f8ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8b2:	e0c6      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f8b4:	2340      	movs	r3, #64	@ 0x40
 800f8b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8ba:	e0c2      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f8bc:	2380      	movs	r3, #128	@ 0x80
 800f8be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8c2:	e0be      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f8c4:	40011400 	.word	0x40011400
 800f8c8:	58024400 	.word	0x58024400
 800f8cc:	40007800 	.word	0x40007800
 800f8d0:	40007c00 	.word	0x40007c00
 800f8d4:	40011800 	.word	0x40011800
 800f8d8:	697b      	ldr	r3, [r7, #20]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	4aad      	ldr	r2, [pc, #692]	@ (800fb94 <UART_SetConfig+0x900>)
 800f8de:	4293      	cmp	r3, r2
 800f8e0:	d176      	bne.n	800f9d0 <UART_SetConfig+0x73c>
 800f8e2:	4bad      	ldr	r3, [pc, #692]	@ (800fb98 <UART_SetConfig+0x904>)
 800f8e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f8e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f8ea:	2b28      	cmp	r3, #40	@ 0x28
 800f8ec:	d86c      	bhi.n	800f9c8 <UART_SetConfig+0x734>
 800f8ee:	a201      	add	r2, pc, #4	@ (adr r2, 800f8f4 <UART_SetConfig+0x660>)
 800f8f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8f4:	0800f999 	.word	0x0800f999
 800f8f8:	0800f9c9 	.word	0x0800f9c9
 800f8fc:	0800f9c9 	.word	0x0800f9c9
 800f900:	0800f9c9 	.word	0x0800f9c9
 800f904:	0800f9c9 	.word	0x0800f9c9
 800f908:	0800f9c9 	.word	0x0800f9c9
 800f90c:	0800f9c9 	.word	0x0800f9c9
 800f910:	0800f9c9 	.word	0x0800f9c9
 800f914:	0800f9a1 	.word	0x0800f9a1
 800f918:	0800f9c9 	.word	0x0800f9c9
 800f91c:	0800f9c9 	.word	0x0800f9c9
 800f920:	0800f9c9 	.word	0x0800f9c9
 800f924:	0800f9c9 	.word	0x0800f9c9
 800f928:	0800f9c9 	.word	0x0800f9c9
 800f92c:	0800f9c9 	.word	0x0800f9c9
 800f930:	0800f9c9 	.word	0x0800f9c9
 800f934:	0800f9a9 	.word	0x0800f9a9
 800f938:	0800f9c9 	.word	0x0800f9c9
 800f93c:	0800f9c9 	.word	0x0800f9c9
 800f940:	0800f9c9 	.word	0x0800f9c9
 800f944:	0800f9c9 	.word	0x0800f9c9
 800f948:	0800f9c9 	.word	0x0800f9c9
 800f94c:	0800f9c9 	.word	0x0800f9c9
 800f950:	0800f9c9 	.word	0x0800f9c9
 800f954:	0800f9b1 	.word	0x0800f9b1
 800f958:	0800f9c9 	.word	0x0800f9c9
 800f95c:	0800f9c9 	.word	0x0800f9c9
 800f960:	0800f9c9 	.word	0x0800f9c9
 800f964:	0800f9c9 	.word	0x0800f9c9
 800f968:	0800f9c9 	.word	0x0800f9c9
 800f96c:	0800f9c9 	.word	0x0800f9c9
 800f970:	0800f9c9 	.word	0x0800f9c9
 800f974:	0800f9b9 	.word	0x0800f9b9
 800f978:	0800f9c9 	.word	0x0800f9c9
 800f97c:	0800f9c9 	.word	0x0800f9c9
 800f980:	0800f9c9 	.word	0x0800f9c9
 800f984:	0800f9c9 	.word	0x0800f9c9
 800f988:	0800f9c9 	.word	0x0800f9c9
 800f98c:	0800f9c9 	.word	0x0800f9c9
 800f990:	0800f9c9 	.word	0x0800f9c9
 800f994:	0800f9c1 	.word	0x0800f9c1
 800f998:	2301      	movs	r3, #1
 800f99a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f99e:	e050      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f9a0:	2304      	movs	r3, #4
 800f9a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9a6:	e04c      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f9a8:	2308      	movs	r3, #8
 800f9aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9ae:	e048      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f9b0:	2310      	movs	r3, #16
 800f9b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9b6:	e044      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f9b8:	2320      	movs	r3, #32
 800f9ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9be:	e040      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f9c0:	2340      	movs	r3, #64	@ 0x40
 800f9c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9c6:	e03c      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f9c8:	2380      	movs	r3, #128	@ 0x80
 800f9ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9ce:	e038      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800f9d0:	697b      	ldr	r3, [r7, #20]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	4a71      	ldr	r2, [pc, #452]	@ (800fb9c <UART_SetConfig+0x908>)
 800f9d6:	4293      	cmp	r3, r2
 800f9d8:	d130      	bne.n	800fa3c <UART_SetConfig+0x7a8>
 800f9da:	4b6f      	ldr	r3, [pc, #444]	@ (800fb98 <UART_SetConfig+0x904>)
 800f9dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f9de:	f003 0307 	and.w	r3, r3, #7
 800f9e2:	2b05      	cmp	r3, #5
 800f9e4:	d826      	bhi.n	800fa34 <UART_SetConfig+0x7a0>
 800f9e6:	a201      	add	r2, pc, #4	@ (adr r2, 800f9ec <UART_SetConfig+0x758>)
 800f9e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9ec:	0800fa05 	.word	0x0800fa05
 800f9f0:	0800fa0d 	.word	0x0800fa0d
 800f9f4:	0800fa15 	.word	0x0800fa15
 800f9f8:	0800fa1d 	.word	0x0800fa1d
 800f9fc:	0800fa25 	.word	0x0800fa25
 800fa00:	0800fa2d 	.word	0x0800fa2d
 800fa04:	2302      	movs	r3, #2
 800fa06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa0a:	e01a      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800fa0c:	2304      	movs	r3, #4
 800fa0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa12:	e016      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800fa14:	2308      	movs	r3, #8
 800fa16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa1a:	e012      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800fa1c:	2310      	movs	r3, #16
 800fa1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa22:	e00e      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800fa24:	2320      	movs	r3, #32
 800fa26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa2a:	e00a      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800fa2c:	2340      	movs	r3, #64	@ 0x40
 800fa2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa32:	e006      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800fa34:	2380      	movs	r3, #128	@ 0x80
 800fa36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa3a:	e002      	b.n	800fa42 <UART_SetConfig+0x7ae>
 800fa3c:	2380      	movs	r3, #128	@ 0x80
 800fa3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fa42:	697b      	ldr	r3, [r7, #20]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	4a55      	ldr	r2, [pc, #340]	@ (800fb9c <UART_SetConfig+0x908>)
 800fa48:	4293      	cmp	r3, r2
 800fa4a:	f040 80f8 	bne.w	800fc3e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fa4e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fa52:	2b20      	cmp	r3, #32
 800fa54:	dc46      	bgt.n	800fae4 <UART_SetConfig+0x850>
 800fa56:	2b02      	cmp	r3, #2
 800fa58:	db75      	blt.n	800fb46 <UART_SetConfig+0x8b2>
 800fa5a:	3b02      	subs	r3, #2
 800fa5c:	2b1e      	cmp	r3, #30
 800fa5e:	d872      	bhi.n	800fb46 <UART_SetConfig+0x8b2>
 800fa60:	a201      	add	r2, pc, #4	@ (adr r2, 800fa68 <UART_SetConfig+0x7d4>)
 800fa62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa66:	bf00      	nop
 800fa68:	0800faeb 	.word	0x0800faeb
 800fa6c:	0800fb47 	.word	0x0800fb47
 800fa70:	0800faf3 	.word	0x0800faf3
 800fa74:	0800fb47 	.word	0x0800fb47
 800fa78:	0800fb47 	.word	0x0800fb47
 800fa7c:	0800fb47 	.word	0x0800fb47
 800fa80:	0800fb03 	.word	0x0800fb03
 800fa84:	0800fb47 	.word	0x0800fb47
 800fa88:	0800fb47 	.word	0x0800fb47
 800fa8c:	0800fb47 	.word	0x0800fb47
 800fa90:	0800fb47 	.word	0x0800fb47
 800fa94:	0800fb47 	.word	0x0800fb47
 800fa98:	0800fb47 	.word	0x0800fb47
 800fa9c:	0800fb47 	.word	0x0800fb47
 800faa0:	0800fb13 	.word	0x0800fb13
 800faa4:	0800fb47 	.word	0x0800fb47
 800faa8:	0800fb47 	.word	0x0800fb47
 800faac:	0800fb47 	.word	0x0800fb47
 800fab0:	0800fb47 	.word	0x0800fb47
 800fab4:	0800fb47 	.word	0x0800fb47
 800fab8:	0800fb47 	.word	0x0800fb47
 800fabc:	0800fb47 	.word	0x0800fb47
 800fac0:	0800fb47 	.word	0x0800fb47
 800fac4:	0800fb47 	.word	0x0800fb47
 800fac8:	0800fb47 	.word	0x0800fb47
 800facc:	0800fb47 	.word	0x0800fb47
 800fad0:	0800fb47 	.word	0x0800fb47
 800fad4:	0800fb47 	.word	0x0800fb47
 800fad8:	0800fb47 	.word	0x0800fb47
 800fadc:	0800fb47 	.word	0x0800fb47
 800fae0:	0800fb39 	.word	0x0800fb39
 800fae4:	2b40      	cmp	r3, #64	@ 0x40
 800fae6:	d02a      	beq.n	800fb3e <UART_SetConfig+0x8aa>
 800fae8:	e02d      	b.n	800fb46 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800faea:	f7fb fd79 	bl	800b5e0 <HAL_RCCEx_GetD3PCLK1Freq>
 800faee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800faf0:	e02f      	b.n	800fb52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800faf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800faf6:	4618      	mov	r0, r3
 800faf8:	f7fb fd88 	bl	800b60c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fafc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fafe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fb00:	e027      	b.n	800fb52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fb02:	f107 0318 	add.w	r3, r7, #24
 800fb06:	4618      	mov	r0, r3
 800fb08:	f7fb fed4 	bl	800b8b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fb0c:	69fb      	ldr	r3, [r7, #28]
 800fb0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fb10:	e01f      	b.n	800fb52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fb12:	4b21      	ldr	r3, [pc, #132]	@ (800fb98 <UART_SetConfig+0x904>)
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	f003 0320 	and.w	r3, r3, #32
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d009      	beq.n	800fb32 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fb1e:	4b1e      	ldr	r3, [pc, #120]	@ (800fb98 <UART_SetConfig+0x904>)
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	08db      	lsrs	r3, r3, #3
 800fb24:	f003 0303 	and.w	r3, r3, #3
 800fb28:	4a1d      	ldr	r2, [pc, #116]	@ (800fba0 <UART_SetConfig+0x90c>)
 800fb2a:	fa22 f303 	lsr.w	r3, r2, r3
 800fb2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fb30:	e00f      	b.n	800fb52 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800fb32:	4b1b      	ldr	r3, [pc, #108]	@ (800fba0 <UART_SetConfig+0x90c>)
 800fb34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fb36:	e00c      	b.n	800fb52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fb38:	4b1a      	ldr	r3, [pc, #104]	@ (800fba4 <UART_SetConfig+0x910>)
 800fb3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fb3c:	e009      	b.n	800fb52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fb3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fb42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fb44:	e005      	b.n	800fb52 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800fb46:	2300      	movs	r3, #0
 800fb48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800fb4a:	2301      	movs	r3, #1
 800fb4c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800fb50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fb52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	f000 81ee 	beq.w	800ff36 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fb5a:	697b      	ldr	r3, [r7, #20]
 800fb5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb5e:	4a12      	ldr	r2, [pc, #72]	@ (800fba8 <UART_SetConfig+0x914>)
 800fb60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fb64:	461a      	mov	r2, r3
 800fb66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb68:	fbb3 f3f2 	udiv	r3, r3, r2
 800fb6c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fb6e:	697b      	ldr	r3, [r7, #20]
 800fb70:	685a      	ldr	r2, [r3, #4]
 800fb72:	4613      	mov	r3, r2
 800fb74:	005b      	lsls	r3, r3, #1
 800fb76:	4413      	add	r3, r2
 800fb78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fb7a:	429a      	cmp	r2, r3
 800fb7c:	d305      	bcc.n	800fb8a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fb7e:	697b      	ldr	r3, [r7, #20]
 800fb80:	685b      	ldr	r3, [r3, #4]
 800fb82:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fb84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fb86:	429a      	cmp	r2, r3
 800fb88:	d910      	bls.n	800fbac <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800fb8a:	2301      	movs	r3, #1
 800fb8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fb90:	e1d1      	b.n	800ff36 <UART_SetConfig+0xca2>
 800fb92:	bf00      	nop
 800fb94:	40011c00 	.word	0x40011c00
 800fb98:	58024400 	.word	0x58024400
 800fb9c:	58000c00 	.word	0x58000c00
 800fba0:	03d09000 	.word	0x03d09000
 800fba4:	003d0900 	.word	0x003d0900
 800fba8:	080189ac 	.word	0x080189ac
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fbac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fbae:	2200      	movs	r2, #0
 800fbb0:	60bb      	str	r3, [r7, #8]
 800fbb2:	60fa      	str	r2, [r7, #12]
 800fbb4:	697b      	ldr	r3, [r7, #20]
 800fbb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbb8:	4ac0      	ldr	r2, [pc, #768]	@ (800febc <UART_SetConfig+0xc28>)
 800fbba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fbbe:	b29b      	uxth	r3, r3
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	603b      	str	r3, [r7, #0]
 800fbc4:	607a      	str	r2, [r7, #4]
 800fbc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fbca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fbce:	f7f0 fdfb 	bl	80007c8 <__aeabi_uldivmod>
 800fbd2:	4602      	mov	r2, r0
 800fbd4:	460b      	mov	r3, r1
 800fbd6:	4610      	mov	r0, r2
 800fbd8:	4619      	mov	r1, r3
 800fbda:	f04f 0200 	mov.w	r2, #0
 800fbde:	f04f 0300 	mov.w	r3, #0
 800fbe2:	020b      	lsls	r3, r1, #8
 800fbe4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fbe8:	0202      	lsls	r2, r0, #8
 800fbea:	6979      	ldr	r1, [r7, #20]
 800fbec:	6849      	ldr	r1, [r1, #4]
 800fbee:	0849      	lsrs	r1, r1, #1
 800fbf0:	2000      	movs	r0, #0
 800fbf2:	460c      	mov	r4, r1
 800fbf4:	4605      	mov	r5, r0
 800fbf6:	eb12 0804 	adds.w	r8, r2, r4
 800fbfa:	eb43 0905 	adc.w	r9, r3, r5
 800fbfe:	697b      	ldr	r3, [r7, #20]
 800fc00:	685b      	ldr	r3, [r3, #4]
 800fc02:	2200      	movs	r2, #0
 800fc04:	469a      	mov	sl, r3
 800fc06:	4693      	mov	fp, r2
 800fc08:	4652      	mov	r2, sl
 800fc0a:	465b      	mov	r3, fp
 800fc0c:	4640      	mov	r0, r8
 800fc0e:	4649      	mov	r1, r9
 800fc10:	f7f0 fdda 	bl	80007c8 <__aeabi_uldivmod>
 800fc14:	4602      	mov	r2, r0
 800fc16:	460b      	mov	r3, r1
 800fc18:	4613      	mov	r3, r2
 800fc1a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fc1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fc22:	d308      	bcc.n	800fc36 <UART_SetConfig+0x9a2>
 800fc24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fc2a:	d204      	bcs.n	800fc36 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800fc2c:	697b      	ldr	r3, [r7, #20]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fc32:	60da      	str	r2, [r3, #12]
 800fc34:	e17f      	b.n	800ff36 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800fc36:	2301      	movs	r3, #1
 800fc38:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fc3c:	e17b      	b.n	800ff36 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fc3e:	697b      	ldr	r3, [r7, #20]
 800fc40:	69db      	ldr	r3, [r3, #28]
 800fc42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fc46:	f040 80bd 	bne.w	800fdc4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800fc4a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fc4e:	2b20      	cmp	r3, #32
 800fc50:	dc48      	bgt.n	800fce4 <UART_SetConfig+0xa50>
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	db7b      	blt.n	800fd4e <UART_SetConfig+0xaba>
 800fc56:	2b20      	cmp	r3, #32
 800fc58:	d879      	bhi.n	800fd4e <UART_SetConfig+0xaba>
 800fc5a:	a201      	add	r2, pc, #4	@ (adr r2, 800fc60 <UART_SetConfig+0x9cc>)
 800fc5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc60:	0800fceb 	.word	0x0800fceb
 800fc64:	0800fcf3 	.word	0x0800fcf3
 800fc68:	0800fd4f 	.word	0x0800fd4f
 800fc6c:	0800fd4f 	.word	0x0800fd4f
 800fc70:	0800fcfb 	.word	0x0800fcfb
 800fc74:	0800fd4f 	.word	0x0800fd4f
 800fc78:	0800fd4f 	.word	0x0800fd4f
 800fc7c:	0800fd4f 	.word	0x0800fd4f
 800fc80:	0800fd0b 	.word	0x0800fd0b
 800fc84:	0800fd4f 	.word	0x0800fd4f
 800fc88:	0800fd4f 	.word	0x0800fd4f
 800fc8c:	0800fd4f 	.word	0x0800fd4f
 800fc90:	0800fd4f 	.word	0x0800fd4f
 800fc94:	0800fd4f 	.word	0x0800fd4f
 800fc98:	0800fd4f 	.word	0x0800fd4f
 800fc9c:	0800fd4f 	.word	0x0800fd4f
 800fca0:	0800fd1b 	.word	0x0800fd1b
 800fca4:	0800fd4f 	.word	0x0800fd4f
 800fca8:	0800fd4f 	.word	0x0800fd4f
 800fcac:	0800fd4f 	.word	0x0800fd4f
 800fcb0:	0800fd4f 	.word	0x0800fd4f
 800fcb4:	0800fd4f 	.word	0x0800fd4f
 800fcb8:	0800fd4f 	.word	0x0800fd4f
 800fcbc:	0800fd4f 	.word	0x0800fd4f
 800fcc0:	0800fd4f 	.word	0x0800fd4f
 800fcc4:	0800fd4f 	.word	0x0800fd4f
 800fcc8:	0800fd4f 	.word	0x0800fd4f
 800fccc:	0800fd4f 	.word	0x0800fd4f
 800fcd0:	0800fd4f 	.word	0x0800fd4f
 800fcd4:	0800fd4f 	.word	0x0800fd4f
 800fcd8:	0800fd4f 	.word	0x0800fd4f
 800fcdc:	0800fd4f 	.word	0x0800fd4f
 800fce0:	0800fd41 	.word	0x0800fd41
 800fce4:	2b40      	cmp	r3, #64	@ 0x40
 800fce6:	d02e      	beq.n	800fd46 <UART_SetConfig+0xab2>
 800fce8:	e031      	b.n	800fd4e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fcea:	f7fa fa4d 	bl	800a188 <HAL_RCC_GetPCLK1Freq>
 800fcee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fcf0:	e033      	b.n	800fd5a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fcf2:	f7fa fa5f 	bl	800a1b4 <HAL_RCC_GetPCLK2Freq>
 800fcf6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fcf8:	e02f      	b.n	800fd5a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fcfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fcfe:	4618      	mov	r0, r3
 800fd00:	f7fb fc84 	bl	800b60c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fd04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd08:	e027      	b.n	800fd5a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fd0a:	f107 0318 	add.w	r3, r7, #24
 800fd0e:	4618      	mov	r0, r3
 800fd10:	f7fb fdd0 	bl	800b8b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fd14:	69fb      	ldr	r3, [r7, #28]
 800fd16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd18:	e01f      	b.n	800fd5a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fd1a:	4b69      	ldr	r3, [pc, #420]	@ (800fec0 <UART_SetConfig+0xc2c>)
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	f003 0320 	and.w	r3, r3, #32
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d009      	beq.n	800fd3a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fd26:	4b66      	ldr	r3, [pc, #408]	@ (800fec0 <UART_SetConfig+0xc2c>)
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	08db      	lsrs	r3, r3, #3
 800fd2c:	f003 0303 	and.w	r3, r3, #3
 800fd30:	4a64      	ldr	r2, [pc, #400]	@ (800fec4 <UART_SetConfig+0xc30>)
 800fd32:	fa22 f303 	lsr.w	r3, r2, r3
 800fd36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fd38:	e00f      	b.n	800fd5a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800fd3a:	4b62      	ldr	r3, [pc, #392]	@ (800fec4 <UART_SetConfig+0xc30>)
 800fd3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd3e:	e00c      	b.n	800fd5a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fd40:	4b61      	ldr	r3, [pc, #388]	@ (800fec8 <UART_SetConfig+0xc34>)
 800fd42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd44:	e009      	b.n	800fd5a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fd46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fd4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd4c:	e005      	b.n	800fd5a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800fd4e:	2300      	movs	r3, #0
 800fd50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800fd52:	2301      	movs	r3, #1
 800fd54:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800fd58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fd5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	f000 80ea 	beq.w	800ff36 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fd62:	697b      	ldr	r3, [r7, #20]
 800fd64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd66:	4a55      	ldr	r2, [pc, #340]	@ (800febc <UART_SetConfig+0xc28>)
 800fd68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fd6c:	461a      	mov	r2, r3
 800fd6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd70:	fbb3 f3f2 	udiv	r3, r3, r2
 800fd74:	005a      	lsls	r2, r3, #1
 800fd76:	697b      	ldr	r3, [r7, #20]
 800fd78:	685b      	ldr	r3, [r3, #4]
 800fd7a:	085b      	lsrs	r3, r3, #1
 800fd7c:	441a      	add	r2, r3
 800fd7e:	697b      	ldr	r3, [r7, #20]
 800fd80:	685b      	ldr	r3, [r3, #4]
 800fd82:	fbb2 f3f3 	udiv	r3, r2, r3
 800fd86:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fd88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd8a:	2b0f      	cmp	r3, #15
 800fd8c:	d916      	bls.n	800fdbc <UART_SetConfig+0xb28>
 800fd8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fd94:	d212      	bcs.n	800fdbc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fd96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd98:	b29b      	uxth	r3, r3
 800fd9a:	f023 030f 	bic.w	r3, r3, #15
 800fd9e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fda0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fda2:	085b      	lsrs	r3, r3, #1
 800fda4:	b29b      	uxth	r3, r3
 800fda6:	f003 0307 	and.w	r3, r3, #7
 800fdaa:	b29a      	uxth	r2, r3
 800fdac:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800fdae:	4313      	orrs	r3, r2
 800fdb0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800fdb2:	697b      	ldr	r3, [r7, #20]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800fdb8:	60da      	str	r2, [r3, #12]
 800fdba:	e0bc      	b.n	800ff36 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800fdbc:	2301      	movs	r3, #1
 800fdbe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fdc2:	e0b8      	b.n	800ff36 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800fdc4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fdc8:	2b20      	cmp	r3, #32
 800fdca:	dc4b      	bgt.n	800fe64 <UART_SetConfig+0xbd0>
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	f2c0 8087 	blt.w	800fee0 <UART_SetConfig+0xc4c>
 800fdd2:	2b20      	cmp	r3, #32
 800fdd4:	f200 8084 	bhi.w	800fee0 <UART_SetConfig+0xc4c>
 800fdd8:	a201      	add	r2, pc, #4	@ (adr r2, 800fde0 <UART_SetConfig+0xb4c>)
 800fdda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdde:	bf00      	nop
 800fde0:	0800fe6b 	.word	0x0800fe6b
 800fde4:	0800fe73 	.word	0x0800fe73
 800fde8:	0800fee1 	.word	0x0800fee1
 800fdec:	0800fee1 	.word	0x0800fee1
 800fdf0:	0800fe7b 	.word	0x0800fe7b
 800fdf4:	0800fee1 	.word	0x0800fee1
 800fdf8:	0800fee1 	.word	0x0800fee1
 800fdfc:	0800fee1 	.word	0x0800fee1
 800fe00:	0800fe8b 	.word	0x0800fe8b
 800fe04:	0800fee1 	.word	0x0800fee1
 800fe08:	0800fee1 	.word	0x0800fee1
 800fe0c:	0800fee1 	.word	0x0800fee1
 800fe10:	0800fee1 	.word	0x0800fee1
 800fe14:	0800fee1 	.word	0x0800fee1
 800fe18:	0800fee1 	.word	0x0800fee1
 800fe1c:	0800fee1 	.word	0x0800fee1
 800fe20:	0800fe9b 	.word	0x0800fe9b
 800fe24:	0800fee1 	.word	0x0800fee1
 800fe28:	0800fee1 	.word	0x0800fee1
 800fe2c:	0800fee1 	.word	0x0800fee1
 800fe30:	0800fee1 	.word	0x0800fee1
 800fe34:	0800fee1 	.word	0x0800fee1
 800fe38:	0800fee1 	.word	0x0800fee1
 800fe3c:	0800fee1 	.word	0x0800fee1
 800fe40:	0800fee1 	.word	0x0800fee1
 800fe44:	0800fee1 	.word	0x0800fee1
 800fe48:	0800fee1 	.word	0x0800fee1
 800fe4c:	0800fee1 	.word	0x0800fee1
 800fe50:	0800fee1 	.word	0x0800fee1
 800fe54:	0800fee1 	.word	0x0800fee1
 800fe58:	0800fee1 	.word	0x0800fee1
 800fe5c:	0800fee1 	.word	0x0800fee1
 800fe60:	0800fed3 	.word	0x0800fed3
 800fe64:	2b40      	cmp	r3, #64	@ 0x40
 800fe66:	d037      	beq.n	800fed8 <UART_SetConfig+0xc44>
 800fe68:	e03a      	b.n	800fee0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fe6a:	f7fa f98d 	bl	800a188 <HAL_RCC_GetPCLK1Freq>
 800fe6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fe70:	e03c      	b.n	800feec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fe72:	f7fa f99f 	bl	800a1b4 <HAL_RCC_GetPCLK2Freq>
 800fe76:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fe78:	e038      	b.n	800feec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fe7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fe7e:	4618      	mov	r0, r3
 800fe80:	f7fb fbc4 	bl	800b60c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fe84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe88:	e030      	b.n	800feec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fe8a:	f107 0318 	add.w	r3, r7, #24
 800fe8e:	4618      	mov	r0, r3
 800fe90:	f7fb fd10 	bl	800b8b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fe94:	69fb      	ldr	r3, [r7, #28]
 800fe96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe98:	e028      	b.n	800feec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fe9a:	4b09      	ldr	r3, [pc, #36]	@ (800fec0 <UART_SetConfig+0xc2c>)
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	f003 0320 	and.w	r3, r3, #32
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d012      	beq.n	800fecc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fea6:	4b06      	ldr	r3, [pc, #24]	@ (800fec0 <UART_SetConfig+0xc2c>)
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	08db      	lsrs	r3, r3, #3
 800feac:	f003 0303 	and.w	r3, r3, #3
 800feb0:	4a04      	ldr	r2, [pc, #16]	@ (800fec4 <UART_SetConfig+0xc30>)
 800feb2:	fa22 f303 	lsr.w	r3, r2, r3
 800feb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800feb8:	e018      	b.n	800feec <UART_SetConfig+0xc58>
 800feba:	bf00      	nop
 800febc:	080189ac 	.word	0x080189ac
 800fec0:	58024400 	.word	0x58024400
 800fec4:	03d09000 	.word	0x03d09000
 800fec8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800fecc:	4b24      	ldr	r3, [pc, #144]	@ (800ff60 <UART_SetConfig+0xccc>)
 800fece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fed0:	e00c      	b.n	800feec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fed2:	4b24      	ldr	r3, [pc, #144]	@ (800ff64 <UART_SetConfig+0xcd0>)
 800fed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fed6:	e009      	b.n	800feec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fed8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fedc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fede:	e005      	b.n	800feec <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800fee0:	2300      	movs	r3, #0
 800fee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800fee4:	2301      	movs	r3, #1
 800fee6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800feea:	bf00      	nop
    }

    if (pclk != 0U)
 800feec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d021      	beq.n	800ff36 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fef2:	697b      	ldr	r3, [r7, #20]
 800fef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fef6:	4a1c      	ldr	r2, [pc, #112]	@ (800ff68 <UART_SetConfig+0xcd4>)
 800fef8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fefc:	461a      	mov	r2, r3
 800fefe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff00:	fbb3 f2f2 	udiv	r2, r3, r2
 800ff04:	697b      	ldr	r3, [r7, #20]
 800ff06:	685b      	ldr	r3, [r3, #4]
 800ff08:	085b      	lsrs	r3, r3, #1
 800ff0a:	441a      	add	r2, r3
 800ff0c:	697b      	ldr	r3, [r7, #20]
 800ff0e:	685b      	ldr	r3, [r3, #4]
 800ff10:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff14:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ff16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff18:	2b0f      	cmp	r3, #15
 800ff1a:	d909      	bls.n	800ff30 <UART_SetConfig+0xc9c>
 800ff1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ff22:	d205      	bcs.n	800ff30 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ff24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff26:	b29a      	uxth	r2, r3
 800ff28:	697b      	ldr	r3, [r7, #20]
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	60da      	str	r2, [r3, #12]
 800ff2e:	e002      	b.n	800ff36 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ff30:	2301      	movs	r3, #1
 800ff32:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ff36:	697b      	ldr	r3, [r7, #20]
 800ff38:	2201      	movs	r2, #1
 800ff3a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ff3e:	697b      	ldr	r3, [r7, #20]
 800ff40:	2201      	movs	r2, #1
 800ff42:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ff46:	697b      	ldr	r3, [r7, #20]
 800ff48:	2200      	movs	r2, #0
 800ff4a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ff4c:	697b      	ldr	r3, [r7, #20]
 800ff4e:	2200      	movs	r2, #0
 800ff50:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ff52:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800ff56:	4618      	mov	r0, r3
 800ff58:	3748      	adds	r7, #72	@ 0x48
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ff60:	03d09000 	.word	0x03d09000
 800ff64:	003d0900 	.word	0x003d0900
 800ff68:	080189ac 	.word	0x080189ac

0800ff6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ff6c:	b480      	push	{r7}
 800ff6e:	b083      	sub	sp, #12
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff78:	f003 0308 	and.w	r3, r3, #8
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d00a      	beq.n	800ff96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	685b      	ldr	r3, [r3, #4]
 800ff86:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	430a      	orrs	r2, r1
 800ff94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff9a:	f003 0301 	and.w	r3, r3, #1
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d00a      	beq.n	800ffb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	685b      	ldr	r3, [r3, #4]
 800ffa8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	430a      	orrs	r2, r1
 800ffb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ffbc:	f003 0302 	and.w	r3, r3, #2
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d00a      	beq.n	800ffda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	685b      	ldr	r3, [r3, #4]
 800ffca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	430a      	orrs	r2, r1
 800ffd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ffde:	f003 0304 	and.w	r3, r3, #4
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d00a      	beq.n	800fffc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	685b      	ldr	r3, [r3, #4]
 800ffec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	430a      	orrs	r2, r1
 800fffa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010000:	f003 0310 	and.w	r3, r3, #16
 8010004:	2b00      	cmp	r3, #0
 8010006:	d00a      	beq.n	801001e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	689b      	ldr	r3, [r3, #8]
 801000e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	430a      	orrs	r2, r1
 801001c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010022:	f003 0320 	and.w	r3, r3, #32
 8010026:	2b00      	cmp	r3, #0
 8010028:	d00a      	beq.n	8010040 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	689b      	ldr	r3, [r3, #8]
 8010030:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	430a      	orrs	r2, r1
 801003e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010048:	2b00      	cmp	r3, #0
 801004a:	d01a      	beq.n	8010082 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	685b      	ldr	r3, [r3, #4]
 8010052:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	430a      	orrs	r2, r1
 8010060:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010066:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801006a:	d10a      	bne.n	8010082 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	685b      	ldr	r3, [r3, #4]
 8010072:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	430a      	orrs	r2, r1
 8010080:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801008a:	2b00      	cmp	r3, #0
 801008c:	d00a      	beq.n	80100a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	685b      	ldr	r3, [r3, #4]
 8010094:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	430a      	orrs	r2, r1
 80100a2:	605a      	str	r2, [r3, #4]
  }
}
 80100a4:	bf00      	nop
 80100a6:	370c      	adds	r7, #12
 80100a8:	46bd      	mov	sp, r7
 80100aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ae:	4770      	bx	lr

080100b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b098      	sub	sp, #96	@ 0x60
 80100b4:	af02      	add	r7, sp, #8
 80100b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	2200      	movs	r2, #0
 80100bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80100c0:	f7f5 f9c2 	bl	8005448 <HAL_GetTick>
 80100c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	f003 0308 	and.w	r3, r3, #8
 80100d0:	2b08      	cmp	r3, #8
 80100d2:	d12f      	bne.n	8010134 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80100d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80100d8:	9300      	str	r3, [sp, #0]
 80100da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80100dc:	2200      	movs	r2, #0
 80100de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80100e2:	6878      	ldr	r0, [r7, #4]
 80100e4:	f000 f88e 	bl	8010204 <UART_WaitOnFlagUntilTimeout>
 80100e8:	4603      	mov	r3, r0
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d022      	beq.n	8010134 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100f6:	e853 3f00 	ldrex	r3, [r3]
 80100fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80100fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80100fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010102:	653b      	str	r3, [r7, #80]	@ 0x50
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	461a      	mov	r2, r3
 801010a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801010c:	647b      	str	r3, [r7, #68]	@ 0x44
 801010e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010110:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010112:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010114:	e841 2300 	strex	r3, r2, [r1]
 8010118:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801011a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801011c:	2b00      	cmp	r3, #0
 801011e:	d1e6      	bne.n	80100ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	2220      	movs	r2, #32
 8010124:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	2200      	movs	r2, #0
 801012c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010130:	2303      	movs	r3, #3
 8010132:	e063      	b.n	80101fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	f003 0304 	and.w	r3, r3, #4
 801013e:	2b04      	cmp	r3, #4
 8010140:	d149      	bne.n	80101d6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010142:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010146:	9300      	str	r3, [sp, #0]
 8010148:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801014a:	2200      	movs	r2, #0
 801014c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010150:	6878      	ldr	r0, [r7, #4]
 8010152:	f000 f857 	bl	8010204 <UART_WaitOnFlagUntilTimeout>
 8010156:	4603      	mov	r3, r0
 8010158:	2b00      	cmp	r3, #0
 801015a:	d03c      	beq.n	80101d6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010164:	e853 3f00 	ldrex	r3, [r3]
 8010168:	623b      	str	r3, [r7, #32]
   return(result);
 801016a:	6a3b      	ldr	r3, [r7, #32]
 801016c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010170:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	461a      	mov	r2, r3
 8010178:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801017a:	633b      	str	r3, [r7, #48]	@ 0x30
 801017c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801017e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010180:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010182:	e841 2300 	strex	r3, r2, [r1]
 8010186:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801018a:	2b00      	cmp	r3, #0
 801018c:	d1e6      	bne.n	801015c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	3308      	adds	r3, #8
 8010194:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010196:	693b      	ldr	r3, [r7, #16]
 8010198:	e853 3f00 	ldrex	r3, [r3]
 801019c:	60fb      	str	r3, [r7, #12]
   return(result);
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	f023 0301 	bic.w	r3, r3, #1
 80101a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	3308      	adds	r3, #8
 80101ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80101ae:	61fa      	str	r2, [r7, #28]
 80101b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101b2:	69b9      	ldr	r1, [r7, #24]
 80101b4:	69fa      	ldr	r2, [r7, #28]
 80101b6:	e841 2300 	strex	r3, r2, [r1]
 80101ba:	617b      	str	r3, [r7, #20]
   return(result);
 80101bc:	697b      	ldr	r3, [r7, #20]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d1e5      	bne.n	801018e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	2220      	movs	r2, #32
 80101c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	2200      	movs	r2, #0
 80101ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80101d2:	2303      	movs	r3, #3
 80101d4:	e012      	b.n	80101fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	2220      	movs	r2, #32
 80101da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	2220      	movs	r2, #32
 80101e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	2200      	movs	r2, #0
 80101ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	2200      	movs	r2, #0
 80101f0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	2200      	movs	r2, #0
 80101f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80101fa:	2300      	movs	r3, #0
}
 80101fc:	4618      	mov	r0, r3
 80101fe:	3758      	adds	r7, #88	@ 0x58
 8010200:	46bd      	mov	sp, r7
 8010202:	bd80      	pop	{r7, pc}

08010204 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010204:	b580      	push	{r7, lr}
 8010206:	b084      	sub	sp, #16
 8010208:	af00      	add	r7, sp, #0
 801020a:	60f8      	str	r0, [r7, #12]
 801020c:	60b9      	str	r1, [r7, #8]
 801020e:	603b      	str	r3, [r7, #0]
 8010210:	4613      	mov	r3, r2
 8010212:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010214:	e04f      	b.n	80102b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010216:	69bb      	ldr	r3, [r7, #24]
 8010218:	f1b3 3fff 	cmp.w	r3, #4294967295
 801021c:	d04b      	beq.n	80102b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801021e:	f7f5 f913 	bl	8005448 <HAL_GetTick>
 8010222:	4602      	mov	r2, r0
 8010224:	683b      	ldr	r3, [r7, #0]
 8010226:	1ad3      	subs	r3, r2, r3
 8010228:	69ba      	ldr	r2, [r7, #24]
 801022a:	429a      	cmp	r2, r3
 801022c:	d302      	bcc.n	8010234 <UART_WaitOnFlagUntilTimeout+0x30>
 801022e:	69bb      	ldr	r3, [r7, #24]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d101      	bne.n	8010238 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010234:	2303      	movs	r3, #3
 8010236:	e04e      	b.n	80102d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	f003 0304 	and.w	r3, r3, #4
 8010242:	2b00      	cmp	r3, #0
 8010244:	d037      	beq.n	80102b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010246:	68bb      	ldr	r3, [r7, #8]
 8010248:	2b80      	cmp	r3, #128	@ 0x80
 801024a:	d034      	beq.n	80102b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 801024c:	68bb      	ldr	r3, [r7, #8]
 801024e:	2b40      	cmp	r3, #64	@ 0x40
 8010250:	d031      	beq.n	80102b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	69db      	ldr	r3, [r3, #28]
 8010258:	f003 0308 	and.w	r3, r3, #8
 801025c:	2b08      	cmp	r3, #8
 801025e:	d110      	bne.n	8010282 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	2208      	movs	r2, #8
 8010266:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010268:	68f8      	ldr	r0, [r7, #12]
 801026a:	f000 fa43 	bl	80106f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	2208      	movs	r2, #8
 8010272:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	2200      	movs	r2, #0
 801027a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801027e:	2301      	movs	r3, #1
 8010280:	e029      	b.n	80102d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	69db      	ldr	r3, [r3, #28]
 8010288:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801028c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010290:	d111      	bne.n	80102b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801029a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801029c:	68f8      	ldr	r0, [r7, #12]
 801029e:	f000 fa29 	bl	80106f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	2220      	movs	r2, #32
 80102a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	2200      	movs	r2, #0
 80102ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80102b2:	2303      	movs	r3, #3
 80102b4:	e00f      	b.n	80102d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	69da      	ldr	r2, [r3, #28]
 80102bc:	68bb      	ldr	r3, [r7, #8]
 80102be:	4013      	ands	r3, r2
 80102c0:	68ba      	ldr	r2, [r7, #8]
 80102c2:	429a      	cmp	r2, r3
 80102c4:	bf0c      	ite	eq
 80102c6:	2301      	moveq	r3, #1
 80102c8:	2300      	movne	r3, #0
 80102ca:	b2db      	uxtb	r3, r3
 80102cc:	461a      	mov	r2, r3
 80102ce:	79fb      	ldrb	r3, [r7, #7]
 80102d0:	429a      	cmp	r2, r3
 80102d2:	d0a0      	beq.n	8010216 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80102d4:	2300      	movs	r3, #0
}
 80102d6:	4618      	mov	r0, r3
 80102d8:	3710      	adds	r7, #16
 80102da:	46bd      	mov	sp, r7
 80102dc:	bd80      	pop	{r7, pc}
	...

080102e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80102e0:	b480      	push	{r7}
 80102e2:	b0a3      	sub	sp, #140	@ 0x8c
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	60f8      	str	r0, [r7, #12]
 80102e8:	60b9      	str	r1, [r7, #8]
 80102ea:	4613      	mov	r3, r2
 80102ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	68ba      	ldr	r2, [r7, #8]
 80102f2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	88fa      	ldrh	r2, [r7, #6]
 80102f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	88fa      	ldrh	r2, [r7, #6]
 8010300:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	2200      	movs	r2, #0
 8010308:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	689b      	ldr	r3, [r3, #8]
 801030e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010312:	d10e      	bne.n	8010332 <UART_Start_Receive_IT+0x52>
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	691b      	ldr	r3, [r3, #16]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d105      	bne.n	8010328 <UART_Start_Receive_IT+0x48>
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8010322:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010326:	e02d      	b.n	8010384 <UART_Start_Receive_IT+0xa4>
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	22ff      	movs	r2, #255	@ 0xff
 801032c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010330:	e028      	b.n	8010384 <UART_Start_Receive_IT+0xa4>
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	689b      	ldr	r3, [r3, #8]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d10d      	bne.n	8010356 <UART_Start_Receive_IT+0x76>
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	691b      	ldr	r3, [r3, #16]
 801033e:	2b00      	cmp	r3, #0
 8010340:	d104      	bne.n	801034c <UART_Start_Receive_IT+0x6c>
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	22ff      	movs	r2, #255	@ 0xff
 8010346:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801034a:	e01b      	b.n	8010384 <UART_Start_Receive_IT+0xa4>
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	227f      	movs	r2, #127	@ 0x7f
 8010350:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010354:	e016      	b.n	8010384 <UART_Start_Receive_IT+0xa4>
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	689b      	ldr	r3, [r3, #8]
 801035a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801035e:	d10d      	bne.n	801037c <UART_Start_Receive_IT+0x9c>
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	691b      	ldr	r3, [r3, #16]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d104      	bne.n	8010372 <UART_Start_Receive_IT+0x92>
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	227f      	movs	r2, #127	@ 0x7f
 801036c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010370:	e008      	b.n	8010384 <UART_Start_Receive_IT+0xa4>
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	223f      	movs	r2, #63	@ 0x3f
 8010376:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801037a:	e003      	b.n	8010384 <UART_Start_Receive_IT+0xa4>
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	2200      	movs	r2, #0
 8010380:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	2200      	movs	r2, #0
 8010388:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	2222      	movs	r2, #34	@ 0x22
 8010390:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	3308      	adds	r3, #8
 801039a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801039c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801039e:	e853 3f00 	ldrex	r3, [r3]
 80103a2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80103a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80103a6:	f043 0301 	orr.w	r3, r3, #1
 80103aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	3308      	adds	r3, #8
 80103b4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80103b8:	673a      	str	r2, [r7, #112]	@ 0x70
 80103ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103bc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80103be:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80103c0:	e841 2300 	strex	r3, r2, [r1]
 80103c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80103c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d1e3      	bne.n	8010394 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80103d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80103d4:	d14f      	bne.n	8010476 <UART_Start_Receive_IT+0x196>
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80103dc:	88fa      	ldrh	r2, [r7, #6]
 80103de:	429a      	cmp	r2, r3
 80103e0:	d349      	bcc.n	8010476 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	689b      	ldr	r3, [r3, #8]
 80103e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80103ea:	d107      	bne.n	80103fc <UART_Start_Receive_IT+0x11c>
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	691b      	ldr	r3, [r3, #16]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d103      	bne.n	80103fc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	4a47      	ldr	r2, [pc, #284]	@ (8010514 <UART_Start_Receive_IT+0x234>)
 80103f8:	675a      	str	r2, [r3, #116]	@ 0x74
 80103fa:	e002      	b.n	8010402 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	4a46      	ldr	r2, [pc, #280]	@ (8010518 <UART_Start_Receive_IT+0x238>)
 8010400:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	691b      	ldr	r3, [r3, #16]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d01a      	beq.n	8010440 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010410:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010412:	e853 3f00 	ldrex	r3, [r3]
 8010416:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8010418:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801041a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801041e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	461a      	mov	r2, r3
 8010428:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801042c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801042e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010430:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8010432:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010434:	e841 2300 	strex	r3, r2, [r1]
 8010438:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 801043a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801043c:	2b00      	cmp	r3, #0
 801043e:	d1e4      	bne.n	801040a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	3308      	adds	r3, #8
 8010446:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801044a:	e853 3f00 	ldrex	r3, [r3]
 801044e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010452:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010456:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	3308      	adds	r3, #8
 801045e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8010460:	64ba      	str	r2, [r7, #72]	@ 0x48
 8010462:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010464:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010466:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010468:	e841 2300 	strex	r3, r2, [r1]
 801046c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 801046e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010470:	2b00      	cmp	r3, #0
 8010472:	d1e5      	bne.n	8010440 <UART_Start_Receive_IT+0x160>
 8010474:	e046      	b.n	8010504 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	689b      	ldr	r3, [r3, #8]
 801047a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801047e:	d107      	bne.n	8010490 <UART_Start_Receive_IT+0x1b0>
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	691b      	ldr	r3, [r3, #16]
 8010484:	2b00      	cmp	r3, #0
 8010486:	d103      	bne.n	8010490 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	4a24      	ldr	r2, [pc, #144]	@ (801051c <UART_Start_Receive_IT+0x23c>)
 801048c:	675a      	str	r2, [r3, #116]	@ 0x74
 801048e:	e002      	b.n	8010496 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	4a23      	ldr	r2, [pc, #140]	@ (8010520 <UART_Start_Receive_IT+0x240>)
 8010494:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	691b      	ldr	r3, [r3, #16]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d019      	beq.n	80104d2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104a6:	e853 3f00 	ldrex	r3, [r3]
 80104aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80104ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104ae:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80104b2:	677b      	str	r3, [r7, #116]	@ 0x74
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	461a      	mov	r2, r3
 80104ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80104bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80104be:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104c0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80104c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80104c4:	e841 2300 	strex	r3, r2, [r1]
 80104c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80104ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d1e6      	bne.n	801049e <UART_Start_Receive_IT+0x1be>
 80104d0:	e018      	b.n	8010504 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104d8:	697b      	ldr	r3, [r7, #20]
 80104da:	e853 3f00 	ldrex	r3, [r3]
 80104de:	613b      	str	r3, [r7, #16]
   return(result);
 80104e0:	693b      	ldr	r3, [r7, #16]
 80104e2:	f043 0320 	orr.w	r3, r3, #32
 80104e6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	461a      	mov	r2, r3
 80104ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80104f0:	623b      	str	r3, [r7, #32]
 80104f2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104f4:	69f9      	ldr	r1, [r7, #28]
 80104f6:	6a3a      	ldr	r2, [r7, #32]
 80104f8:	e841 2300 	strex	r3, r2, [r1]
 80104fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80104fe:	69bb      	ldr	r3, [r7, #24]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d1e6      	bne.n	80104d2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8010504:	2300      	movs	r3, #0
}
 8010506:	4618      	mov	r0, r3
 8010508:	378c      	adds	r7, #140	@ 0x8c
 801050a:	46bd      	mov	sp, r7
 801050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010510:	4770      	bx	lr
 8010512:	bf00      	nop
 8010514:	08011549 	.word	0x08011549
 8010518:	080111e9 	.word	0x080111e9
 801051c:	08011031 	.word	0x08011031
 8010520:	08010e79 	.word	0x08010e79

08010524 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010524:	b580      	push	{r7, lr}
 8010526:	b096      	sub	sp, #88	@ 0x58
 8010528:	af00      	add	r7, sp, #0
 801052a:	60f8      	str	r0, [r7, #12]
 801052c:	60b9      	str	r1, [r7, #8]
 801052e:	4613      	mov	r3, r2
 8010530:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	68ba      	ldr	r2, [r7, #8]
 8010536:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	88fa      	ldrh	r2, [r7, #6]
 801053c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	2200      	movs	r2, #0
 8010544:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	2222      	movs	r2, #34	@ 0x22
 801054c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010556:	2b00      	cmp	r3, #0
 8010558:	d02d      	beq.n	80105b6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010560:	4a40      	ldr	r2, [pc, #256]	@ (8010664 <UART_Start_Receive_DMA+0x140>)
 8010562:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801056a:	4a3f      	ldr	r2, [pc, #252]	@ (8010668 <UART_Start_Receive_DMA+0x144>)
 801056c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010574:	4a3d      	ldr	r2, [pc, #244]	@ (801066c <UART_Start_Receive_DMA+0x148>)
 8010576:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801057e:	2200      	movs	r2, #0
 8010580:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	3324      	adds	r3, #36	@ 0x24
 801058e:	4619      	mov	r1, r3
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010594:	461a      	mov	r2, r3
 8010596:	88fb      	ldrh	r3, [r7, #6]
 8010598:	f7f5 fc6c 	bl	8005e74 <HAL_DMA_Start_IT>
 801059c:	4603      	mov	r3, r0
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d009      	beq.n	80105b6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	2210      	movs	r2, #16
 80105a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	2220      	movs	r2, #32
 80105ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80105b2:	2301      	movs	r3, #1
 80105b4:	e051      	b.n	801065a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	691b      	ldr	r3, [r3, #16]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d018      	beq.n	80105f0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80105c6:	e853 3f00 	ldrex	r3, [r3]
 80105ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80105cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80105d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	461a      	mov	r2, r3
 80105da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80105dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80105de:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105e0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80105e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80105e4:	e841 2300 	strex	r3, r2, [r1]
 80105e8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80105ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d1e6      	bne.n	80105be <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	3308      	adds	r3, #8
 80105f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105fa:	e853 3f00 	ldrex	r3, [r3]
 80105fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010602:	f043 0301 	orr.w	r3, r3, #1
 8010606:	653b      	str	r3, [r7, #80]	@ 0x50
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	3308      	adds	r3, #8
 801060e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010610:	637a      	str	r2, [r7, #52]	@ 0x34
 8010612:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010614:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010616:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010618:	e841 2300 	strex	r3, r2, [r1]
 801061c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801061e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010620:	2b00      	cmp	r3, #0
 8010622:	d1e5      	bne.n	80105f0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	3308      	adds	r3, #8
 801062a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801062c:	697b      	ldr	r3, [r7, #20]
 801062e:	e853 3f00 	ldrex	r3, [r3]
 8010632:	613b      	str	r3, [r7, #16]
   return(result);
 8010634:	693b      	ldr	r3, [r7, #16]
 8010636:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801063a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	3308      	adds	r3, #8
 8010642:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010644:	623a      	str	r2, [r7, #32]
 8010646:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010648:	69f9      	ldr	r1, [r7, #28]
 801064a:	6a3a      	ldr	r2, [r7, #32]
 801064c:	e841 2300 	strex	r3, r2, [r1]
 8010650:	61bb      	str	r3, [r7, #24]
   return(result);
 8010652:	69bb      	ldr	r3, [r7, #24]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d1e5      	bne.n	8010624 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8010658:	2300      	movs	r3, #0
}
 801065a:	4618      	mov	r0, r3
 801065c:	3758      	adds	r7, #88	@ 0x58
 801065e:	46bd      	mov	sp, r7
 8010660:	bd80      	pop	{r7, pc}
 8010662:	bf00      	nop
 8010664:	080107c1 	.word	0x080107c1
 8010668:	080108e9 	.word	0x080108e9
 801066c:	08010927 	.word	0x08010927

08010670 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010670:	b480      	push	{r7}
 8010672:	b08f      	sub	sp, #60	@ 0x3c
 8010674:	af00      	add	r7, sp, #0
 8010676:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801067e:	6a3b      	ldr	r3, [r7, #32]
 8010680:	e853 3f00 	ldrex	r3, [r3]
 8010684:	61fb      	str	r3, [r7, #28]
   return(result);
 8010686:	69fb      	ldr	r3, [r7, #28]
 8010688:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 801068c:	637b      	str	r3, [r7, #52]	@ 0x34
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	461a      	mov	r2, r3
 8010694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010696:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010698:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801069a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801069c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801069e:	e841 2300 	strex	r3, r2, [r1]
 80106a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80106a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d1e6      	bne.n	8010678 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	3308      	adds	r3, #8
 80106b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	e853 3f00 	ldrex	r3, [r3]
 80106b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80106ba:	68bb      	ldr	r3, [r7, #8]
 80106bc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80106c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	3308      	adds	r3, #8
 80106c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80106ca:	61ba      	str	r2, [r7, #24]
 80106cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106ce:	6979      	ldr	r1, [r7, #20]
 80106d0:	69ba      	ldr	r2, [r7, #24]
 80106d2:	e841 2300 	strex	r3, r2, [r1]
 80106d6:	613b      	str	r3, [r7, #16]
   return(result);
 80106d8:	693b      	ldr	r3, [r7, #16]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d1e5      	bne.n	80106aa <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	2220      	movs	r2, #32
 80106e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80106e6:	bf00      	nop
 80106e8:	373c      	adds	r7, #60	@ 0x3c
 80106ea:	46bd      	mov	sp, r7
 80106ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f0:	4770      	bx	lr
	...

080106f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80106f4:	b480      	push	{r7}
 80106f6:	b095      	sub	sp, #84	@ 0x54
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010704:	e853 3f00 	ldrex	r3, [r3]
 8010708:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801070a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801070c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010710:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	461a      	mov	r2, r3
 8010718:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801071a:	643b      	str	r3, [r7, #64]	@ 0x40
 801071c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801071e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010720:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010722:	e841 2300 	strex	r3, r2, [r1]
 8010726:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801072a:	2b00      	cmp	r3, #0
 801072c:	d1e6      	bne.n	80106fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	3308      	adds	r3, #8
 8010734:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010736:	6a3b      	ldr	r3, [r7, #32]
 8010738:	e853 3f00 	ldrex	r3, [r3]
 801073c:	61fb      	str	r3, [r7, #28]
   return(result);
 801073e:	69fa      	ldr	r2, [r7, #28]
 8010740:	4b1e      	ldr	r3, [pc, #120]	@ (80107bc <UART_EndRxTransfer+0xc8>)
 8010742:	4013      	ands	r3, r2
 8010744:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	3308      	adds	r3, #8
 801074c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801074e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010750:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010752:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010754:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010756:	e841 2300 	strex	r3, r2, [r1]
 801075a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801075c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801075e:	2b00      	cmp	r3, #0
 8010760:	d1e5      	bne.n	801072e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010766:	2b01      	cmp	r3, #1
 8010768:	d118      	bne.n	801079c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	e853 3f00 	ldrex	r3, [r3]
 8010776:	60bb      	str	r3, [r7, #8]
   return(result);
 8010778:	68bb      	ldr	r3, [r7, #8]
 801077a:	f023 0310 	bic.w	r3, r3, #16
 801077e:	647b      	str	r3, [r7, #68]	@ 0x44
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	461a      	mov	r2, r3
 8010786:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010788:	61bb      	str	r3, [r7, #24]
 801078a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801078c:	6979      	ldr	r1, [r7, #20]
 801078e:	69ba      	ldr	r2, [r7, #24]
 8010790:	e841 2300 	strex	r3, r2, [r1]
 8010794:	613b      	str	r3, [r7, #16]
   return(result);
 8010796:	693b      	ldr	r3, [r7, #16]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d1e6      	bne.n	801076a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	2220      	movs	r2, #32
 80107a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	2200      	movs	r2, #0
 80107a8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	2200      	movs	r2, #0
 80107ae:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80107b0:	bf00      	nop
 80107b2:	3754      	adds	r7, #84	@ 0x54
 80107b4:	46bd      	mov	sp, r7
 80107b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ba:	4770      	bx	lr
 80107bc:	effffffe 	.word	0xeffffffe

080107c0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b09c      	sub	sp, #112	@ 0x70
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80107cc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	69db      	ldr	r3, [r3, #28]
 80107d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80107d6:	d071      	beq.n	80108bc <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80107d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80107da:	2200      	movs	r2, #0
 80107dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80107e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80107e8:	e853 3f00 	ldrex	r3, [r3]
 80107ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80107ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80107f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80107f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80107f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	461a      	mov	r2, r3
 80107fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80107fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010800:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010802:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010804:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010806:	e841 2300 	strex	r3, r2, [r1]
 801080a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801080c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801080e:	2b00      	cmp	r3, #0
 8010810:	d1e6      	bne.n	80107e0 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010812:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	3308      	adds	r3, #8
 8010818:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801081a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801081c:	e853 3f00 	ldrex	r3, [r3]
 8010820:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010824:	f023 0301 	bic.w	r3, r3, #1
 8010828:	667b      	str	r3, [r7, #100]	@ 0x64
 801082a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	3308      	adds	r3, #8
 8010830:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010832:	647a      	str	r2, [r7, #68]	@ 0x44
 8010834:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010836:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010838:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801083a:	e841 2300 	strex	r3, r2, [r1]
 801083e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010840:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010842:	2b00      	cmp	r3, #0
 8010844:	d1e5      	bne.n	8010812 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010846:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	3308      	adds	r3, #8
 801084c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801084e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010850:	e853 3f00 	ldrex	r3, [r3]
 8010854:	623b      	str	r3, [r7, #32]
   return(result);
 8010856:	6a3b      	ldr	r3, [r7, #32]
 8010858:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801085c:	663b      	str	r3, [r7, #96]	@ 0x60
 801085e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	3308      	adds	r3, #8
 8010864:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010866:	633a      	str	r2, [r7, #48]	@ 0x30
 8010868:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801086a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801086c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801086e:	e841 2300 	strex	r3, r2, [r1]
 8010872:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010876:	2b00      	cmp	r3, #0
 8010878:	d1e5      	bne.n	8010846 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801087a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801087c:	2220      	movs	r2, #32
 801087e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010882:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010884:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010886:	2b01      	cmp	r3, #1
 8010888:	d118      	bne.n	80108bc <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801088a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010890:	693b      	ldr	r3, [r7, #16]
 8010892:	e853 3f00 	ldrex	r3, [r3]
 8010896:	60fb      	str	r3, [r7, #12]
   return(result);
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	f023 0310 	bic.w	r3, r3, #16
 801089e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80108a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	461a      	mov	r2, r3
 80108a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80108a8:	61fb      	str	r3, [r7, #28]
 80108aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108ac:	69b9      	ldr	r1, [r7, #24]
 80108ae:	69fa      	ldr	r2, [r7, #28]
 80108b0:	e841 2300 	strex	r3, r2, [r1]
 80108b4:	617b      	str	r3, [r7, #20]
   return(result);
 80108b6:	697b      	ldr	r3, [r7, #20]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d1e6      	bne.n	801088a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80108bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80108be:	2200      	movs	r2, #0
 80108c0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80108c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80108c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80108c6:	2b01      	cmp	r3, #1
 80108c8:	d107      	bne.n	80108da <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80108ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80108cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80108d0:	4619      	mov	r1, r3
 80108d2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80108d4:	f7fe fcd2 	bl	800f27c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80108d8:	e002      	b.n	80108e0 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 80108da:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80108dc:	f7f1 f958 	bl	8001b90 <HAL_UART_RxCpltCallback>
}
 80108e0:	bf00      	nop
 80108e2:	3770      	adds	r7, #112	@ 0x70
 80108e4:	46bd      	mov	sp, r7
 80108e6:	bd80      	pop	{r7, pc}

080108e8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b084      	sub	sp, #16
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108f4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	2201      	movs	r2, #1
 80108fa:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010900:	2b01      	cmp	r3, #1
 8010902:	d109      	bne.n	8010918 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801090a:	085b      	lsrs	r3, r3, #1
 801090c:	b29b      	uxth	r3, r3
 801090e:	4619      	mov	r1, r3
 8010910:	68f8      	ldr	r0, [r7, #12]
 8010912:	f7fe fcb3 	bl	800f27c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010916:	e002      	b.n	801091e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8010918:	68f8      	ldr	r0, [r7, #12]
 801091a:	f7fe fc91 	bl	800f240 <HAL_UART_RxHalfCpltCallback>
}
 801091e:	bf00      	nop
 8010920:	3710      	adds	r7, #16
 8010922:	46bd      	mov	sp, r7
 8010924:	bd80      	pop	{r7, pc}

08010926 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010926:	b580      	push	{r7, lr}
 8010928:	b086      	sub	sp, #24
 801092a:	af00      	add	r7, sp, #0
 801092c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010932:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010934:	697b      	ldr	r3, [r7, #20]
 8010936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801093a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801093c:	697b      	ldr	r3, [r7, #20]
 801093e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010942:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010944:	697b      	ldr	r3, [r7, #20]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	689b      	ldr	r3, [r3, #8]
 801094a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801094e:	2b80      	cmp	r3, #128	@ 0x80
 8010950:	d109      	bne.n	8010966 <UART_DMAError+0x40>
 8010952:	693b      	ldr	r3, [r7, #16]
 8010954:	2b21      	cmp	r3, #33	@ 0x21
 8010956:	d106      	bne.n	8010966 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010958:	697b      	ldr	r3, [r7, #20]
 801095a:	2200      	movs	r2, #0
 801095c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8010960:	6978      	ldr	r0, [r7, #20]
 8010962:	f7ff fe85 	bl	8010670 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010966:	697b      	ldr	r3, [r7, #20]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	689b      	ldr	r3, [r3, #8]
 801096c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010970:	2b40      	cmp	r3, #64	@ 0x40
 8010972:	d109      	bne.n	8010988 <UART_DMAError+0x62>
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	2b22      	cmp	r3, #34	@ 0x22
 8010978:	d106      	bne.n	8010988 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801097a:	697b      	ldr	r3, [r7, #20]
 801097c:	2200      	movs	r2, #0
 801097e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8010982:	6978      	ldr	r0, [r7, #20]
 8010984:	f7ff feb6 	bl	80106f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010988:	697b      	ldr	r3, [r7, #20]
 801098a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801098e:	f043 0210 	orr.w	r2, r3, #16
 8010992:	697b      	ldr	r3, [r7, #20]
 8010994:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010998:	6978      	ldr	r0, [r7, #20]
 801099a:	f7fe fc5b 	bl	800f254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801099e:	bf00      	nop
 80109a0:	3718      	adds	r7, #24
 80109a2:	46bd      	mov	sp, r7
 80109a4:	bd80      	pop	{r7, pc}

080109a6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80109a6:	b580      	push	{r7, lr}
 80109a8:	b084      	sub	sp, #16
 80109aa:	af00      	add	r7, sp, #0
 80109ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80109b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	2200      	movs	r2, #0
 80109b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	2200      	movs	r2, #0
 80109c0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80109c4:	68f8      	ldr	r0, [r7, #12]
 80109c6:	f7fe fc45 	bl	800f254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80109ca:	bf00      	nop
 80109cc:	3710      	adds	r7, #16
 80109ce:	46bd      	mov	sp, r7
 80109d0:	bd80      	pop	{r7, pc}

080109d2 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80109d2:	b580      	push	{r7, lr}
 80109d4:	b084      	sub	sp, #16
 80109d6:	af00      	add	r7, sp, #0
 80109d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80109de:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80109e4:	2200      	movs	r2, #0
 80109e6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d005      	beq.n	80109fe <UART_DMATxAbortCallback+0x2c>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80109f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d12b      	bne.n	8010a56 <UART_DMATxAbortCallback+0x84>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	2200      	movs	r2, #0
 8010a02:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	2200      	movs	r2, #0
 8010a0a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	2200      	movs	r2, #0
 8010a12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	220f      	movs	r2, #15
 8010a1c:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010a22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010a26:	d107      	bne.n	8010a38 <UART_DMATxAbortCallback+0x66>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	699a      	ldr	r2, [r3, #24]
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	f042 0210 	orr.w	r2, r2, #16
 8010a36:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	2220      	movs	r2, #32
 8010a3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	2220      	movs	r2, #32
 8010a44:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	2200      	movs	r2, #0
 8010a4c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8010a4e:	68f8      	ldr	r0, [r7, #12]
 8010a50:	f7fe fc0a 	bl	800f268 <HAL_UART_AbortCpltCallback>
 8010a54:	e000      	b.n	8010a58 <UART_DMATxAbortCallback+0x86>
      return;
 8010a56:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010a58:	3710      	adds	r7, #16
 8010a5a:	46bd      	mov	sp, r7
 8010a5c:	bd80      	pop	{r7, pc}

08010a5e <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8010a5e:	b580      	push	{r7, lr}
 8010a60:	b084      	sub	sp, #16
 8010a62:	af00      	add	r7, sp, #0
 8010a64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a6a:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010a72:	2200      	movs	r2, #0
 8010a74:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d004      	beq.n	8010a88 <UART_DMARxAbortCallback+0x2a>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010a82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d126      	bne.n	8010ad6 <UART_DMARxAbortCallback+0x78>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	2200      	movs	r2, #0
 8010a8c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	2200      	movs	r2, #0
 8010a94:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	2200      	movs	r2, #0
 8010a9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	220f      	movs	r2, #15
 8010aa6:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	699a      	ldr	r2, [r3, #24]
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	f042 0208 	orr.w	r2, r2, #8
 8010ab6:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	2220      	movs	r2, #32
 8010abc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	2220      	movs	r2, #32
 8010ac4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	2200      	movs	r2, #0
 8010acc:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8010ace:	68f8      	ldr	r0, [r7, #12]
 8010ad0:	f7fe fbca 	bl	800f268 <HAL_UART_AbortCpltCallback>
 8010ad4:	e000      	b.n	8010ad8 <UART_DMARxAbortCallback+0x7a>
      return;
 8010ad6:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010ad8:	3710      	adds	r7, #16
 8010ada:	46bd      	mov	sp, r7
 8010adc:	bd80      	pop	{r7, pc}

08010ade <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8010ade:	b480      	push	{r7}
 8010ae0:	b08f      	sub	sp, #60	@ 0x3c
 8010ae2:	af00      	add	r7, sp, #0
 8010ae4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010aec:	2b21      	cmp	r3, #33	@ 0x21
 8010aee:	d14c      	bne.n	8010b8a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010af6:	b29b      	uxth	r3, r3
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d132      	bne.n	8010b62 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b02:	6a3b      	ldr	r3, [r7, #32]
 8010b04:	e853 3f00 	ldrex	r3, [r3]
 8010b08:	61fb      	str	r3, [r7, #28]
   return(result);
 8010b0a:	69fb      	ldr	r3, [r7, #28]
 8010b0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010b10:	637b      	str	r3, [r7, #52]	@ 0x34
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	461a      	mov	r2, r3
 8010b18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010b1c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010b20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010b22:	e841 2300 	strex	r3, r2, [r1]
 8010b26:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d1e6      	bne.n	8010afc <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	e853 3f00 	ldrex	r3, [r3]
 8010b3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8010b3c:	68bb      	ldr	r3, [r7, #8]
 8010b3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010b42:	633b      	str	r3, [r7, #48]	@ 0x30
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	461a      	mov	r2, r3
 8010b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b4c:	61bb      	str	r3, [r7, #24]
 8010b4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b50:	6979      	ldr	r1, [r7, #20]
 8010b52:	69ba      	ldr	r2, [r7, #24]
 8010b54:	e841 2300 	strex	r3, r2, [r1]
 8010b58:	613b      	str	r3, [r7, #16]
   return(result);
 8010b5a:	693b      	ldr	r3, [r7, #16]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d1e6      	bne.n	8010b2e <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8010b60:	e013      	b.n	8010b8a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010b66:	781a      	ldrb	r2, [r3, #0]
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010b72:	1c5a      	adds	r2, r3, #1
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010b7e:	b29b      	uxth	r3, r3
 8010b80:	3b01      	subs	r3, #1
 8010b82:	b29a      	uxth	r2, r3
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8010b8a:	bf00      	nop
 8010b8c:	373c      	adds	r7, #60	@ 0x3c
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b94:	4770      	bx	lr

08010b96 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8010b96:	b480      	push	{r7}
 8010b98:	b091      	sub	sp, #68	@ 0x44
 8010b9a:	af00      	add	r7, sp, #0
 8010b9c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010ba4:	2b21      	cmp	r3, #33	@ 0x21
 8010ba6:	d151      	bne.n	8010c4c <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010bae:	b29b      	uxth	r3, r3
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d132      	bne.n	8010c1a <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bbc:	e853 3f00 	ldrex	r3, [r3]
 8010bc0:	623b      	str	r3, [r7, #32]
   return(result);
 8010bc2:	6a3b      	ldr	r3, [r7, #32]
 8010bc4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010bc8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	461a      	mov	r2, r3
 8010bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bd2:	633b      	str	r3, [r7, #48]	@ 0x30
 8010bd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010bd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010bda:	e841 2300 	strex	r3, r2, [r1]
 8010bde:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d1e6      	bne.n	8010bb4 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bec:	693b      	ldr	r3, [r7, #16]
 8010bee:	e853 3f00 	ldrex	r3, [r3]
 8010bf2:	60fb      	str	r3, [r7, #12]
   return(result);
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010bfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	461a      	mov	r2, r3
 8010c02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c04:	61fb      	str	r3, [r7, #28]
 8010c06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c08:	69b9      	ldr	r1, [r7, #24]
 8010c0a:	69fa      	ldr	r2, [r7, #28]
 8010c0c:	e841 2300 	strex	r3, r2, [r1]
 8010c10:	617b      	str	r3, [r7, #20]
   return(result);
 8010c12:	697b      	ldr	r3, [r7, #20]
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d1e6      	bne.n	8010be6 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8010c18:	e018      	b.n	8010c4c <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8010c20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c22:	881b      	ldrh	r3, [r3, #0]
 8010c24:	461a      	mov	r2, r3
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010c2e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010c34:	1c9a      	adds	r2, r3, #2
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010c40:	b29b      	uxth	r3, r3
 8010c42:	3b01      	subs	r3, #1
 8010c44:	b29a      	uxth	r2, r3
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8010c4c:	bf00      	nop
 8010c4e:	3744      	adds	r7, #68	@ 0x44
 8010c50:	46bd      	mov	sp, r7
 8010c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c56:	4770      	bx	lr

08010c58 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010c58:	b480      	push	{r7}
 8010c5a:	b091      	sub	sp, #68	@ 0x44
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010c66:	2b21      	cmp	r3, #33	@ 0x21
 8010c68:	d160      	bne.n	8010d2c <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010c70:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8010c72:	e057      	b.n	8010d24 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010c7a:	b29b      	uxth	r3, r3
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d133      	bne.n	8010ce8 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	3308      	adds	r3, #8
 8010c86:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c8a:	e853 3f00 	ldrex	r3, [r3]
 8010c8e:	623b      	str	r3, [r7, #32]
   return(result);
 8010c90:	6a3b      	ldr	r3, [r7, #32]
 8010c92:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8010c96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	3308      	adds	r3, #8
 8010c9e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010ca0:	633a      	str	r2, [r7, #48]	@ 0x30
 8010ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ca4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010ca6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010ca8:	e841 2300 	strex	r3, r2, [r1]
 8010cac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d1e5      	bne.n	8010c80 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cba:	693b      	ldr	r3, [r7, #16]
 8010cbc:	e853 3f00 	ldrex	r3, [r3]
 8010cc0:	60fb      	str	r3, [r7, #12]
   return(result);
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010cc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	461a      	mov	r2, r3
 8010cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010cd2:	61fb      	str	r3, [r7, #28]
 8010cd4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cd6:	69b9      	ldr	r1, [r7, #24]
 8010cd8:	69fa      	ldr	r2, [r7, #28]
 8010cda:	e841 2300 	strex	r3, r2, [r1]
 8010cde:	617b      	str	r3, [r7, #20]
   return(result);
 8010ce0:	697b      	ldr	r3, [r7, #20]
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d1e6      	bne.n	8010cb4 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8010ce6:	e021      	b.n	8010d2c <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	69db      	ldr	r3, [r3, #28]
 8010cee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d013      	beq.n	8010d1e <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010cfa:	781a      	ldrb	r2, [r3, #0]
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010d06:	1c5a      	adds	r2, r3, #1
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010d12:	b29b      	uxth	r3, r3
 8010d14:	3b01      	subs	r3, #1
 8010d16:	b29a      	uxth	r2, r3
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8010d1e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010d20:	3b01      	subs	r3, #1
 8010d22:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8010d24:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d1a4      	bne.n	8010c74 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8010d2a:	e7ff      	b.n	8010d2c <UART_TxISR_8BIT_FIFOEN+0xd4>
 8010d2c:	bf00      	nop
 8010d2e:	3744      	adds	r7, #68	@ 0x44
 8010d30:	46bd      	mov	sp, r7
 8010d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d36:	4770      	bx	lr

08010d38 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010d38:	b480      	push	{r7}
 8010d3a:	b091      	sub	sp, #68	@ 0x44
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010d46:	2b21      	cmp	r3, #33	@ 0x21
 8010d48:	d165      	bne.n	8010e16 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010d50:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8010d52:	e05c      	b.n	8010e0e <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010d5a:	b29b      	uxth	r3, r3
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d133      	bne.n	8010dc8 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	3308      	adds	r3, #8
 8010d66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d68:	6a3b      	ldr	r3, [r7, #32]
 8010d6a:	e853 3f00 	ldrex	r3, [r3]
 8010d6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8010d70:	69fb      	ldr	r3, [r7, #28]
 8010d72:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8010d76:	637b      	str	r3, [r7, #52]	@ 0x34
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	3308      	adds	r3, #8
 8010d7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010d80:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010d82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010d86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010d88:	e841 2300 	strex	r3, r2, [r1]
 8010d8c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d1e5      	bne.n	8010d60 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	e853 3f00 	ldrex	r3, [r3]
 8010da0:	60bb      	str	r3, [r7, #8]
   return(result);
 8010da2:	68bb      	ldr	r3, [r7, #8]
 8010da4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010da8:	633b      	str	r3, [r7, #48]	@ 0x30
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	461a      	mov	r2, r3
 8010db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010db2:	61bb      	str	r3, [r7, #24]
 8010db4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010db6:	6979      	ldr	r1, [r7, #20]
 8010db8:	69ba      	ldr	r2, [r7, #24]
 8010dba:	e841 2300 	strex	r3, r2, [r1]
 8010dbe:	613b      	str	r3, [r7, #16]
   return(result);
 8010dc0:	693b      	ldr	r3, [r7, #16]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d1e6      	bne.n	8010d94 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8010dc6:	e026      	b.n	8010e16 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	69db      	ldr	r3, [r3, #28]
 8010dce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d018      	beq.n	8010e08 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010dda:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8010ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dde:	881b      	ldrh	r3, [r3, #0]
 8010de0:	461a      	mov	r2, r3
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010dea:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010df0:	1c9a      	adds	r2, r3, #2
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010dfc:	b29b      	uxth	r3, r3
 8010dfe:	3b01      	subs	r3, #1
 8010e00:	b29a      	uxth	r2, r3
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8010e08:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010e0a:	3b01      	subs	r3, #1
 8010e0c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8010e0e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d19f      	bne.n	8010d54 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8010e14:	e7ff      	b.n	8010e16 <UART_TxISR_16BIT_FIFOEN+0xde>
 8010e16:	bf00      	nop
 8010e18:	3744      	adds	r7, #68	@ 0x44
 8010e1a:	46bd      	mov	sp, r7
 8010e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e20:	4770      	bx	lr

08010e22 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010e22:	b580      	push	{r7, lr}
 8010e24:	b088      	sub	sp, #32
 8010e26:	af00      	add	r7, sp, #0
 8010e28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	e853 3f00 	ldrex	r3, [r3]
 8010e36:	60bb      	str	r3, [r7, #8]
   return(result);
 8010e38:	68bb      	ldr	r3, [r7, #8]
 8010e3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010e3e:	61fb      	str	r3, [r7, #28]
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	461a      	mov	r2, r3
 8010e46:	69fb      	ldr	r3, [r7, #28]
 8010e48:	61bb      	str	r3, [r7, #24]
 8010e4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e4c:	6979      	ldr	r1, [r7, #20]
 8010e4e:	69ba      	ldr	r2, [r7, #24]
 8010e50:	e841 2300 	strex	r3, r2, [r1]
 8010e54:	613b      	str	r3, [r7, #16]
   return(result);
 8010e56:	693b      	ldr	r3, [r7, #16]
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d1e6      	bne.n	8010e2a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	2220      	movs	r2, #32
 8010e60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	2200      	movs	r2, #0
 8010e68:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010e6a:	6878      	ldr	r0, [r7, #4]
 8010e6c:	f7fe f9de 	bl	800f22c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010e70:	bf00      	nop
 8010e72:	3720      	adds	r7, #32
 8010e74:	46bd      	mov	sp, r7
 8010e76:	bd80      	pop	{r7, pc}

08010e78 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	b09c      	sub	sp, #112	@ 0x70
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010e86:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010e90:	2b22      	cmp	r3, #34	@ 0x22
 8010e92:	f040 80be 	bne.w	8011012 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e9c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010ea0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8010ea4:	b2d9      	uxtb	r1, r3
 8010ea6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8010eaa:	b2da      	uxtb	r2, r3
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010eb0:	400a      	ands	r2, r1
 8010eb2:	b2d2      	uxtb	r2, r2
 8010eb4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010eba:	1c5a      	adds	r2, r3, #1
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010ec6:	b29b      	uxth	r3, r3
 8010ec8:	3b01      	subs	r3, #1
 8010eca:	b29a      	uxth	r2, r3
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010ed8:	b29b      	uxth	r3, r3
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	f040 80a1 	bne.w	8011022 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ee6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010ee8:	e853 3f00 	ldrex	r3, [r3]
 8010eec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010eee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010ef0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010ef4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	461a      	mov	r2, r3
 8010efc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010efe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010f00:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f02:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010f04:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010f06:	e841 2300 	strex	r3, r2, [r1]
 8010f0a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010f0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d1e6      	bne.n	8010ee0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	3308      	adds	r3, #8
 8010f18:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f1c:	e853 3f00 	ldrex	r3, [r3]
 8010f20:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010f22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f24:	f023 0301 	bic.w	r3, r3, #1
 8010f28:	667b      	str	r3, [r7, #100]	@ 0x64
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	3308      	adds	r3, #8
 8010f30:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010f32:	647a      	str	r2, [r7, #68]	@ 0x44
 8010f34:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f36:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010f38:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010f3a:	e841 2300 	strex	r3, r2, [r1]
 8010f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010f40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d1e5      	bne.n	8010f12 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	2220      	movs	r2, #32
 8010f4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	2200      	movs	r2, #0
 8010f52:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	2200      	movs	r2, #0
 8010f58:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	4a33      	ldr	r2, [pc, #204]	@ (801102c <UART_RxISR_8BIT+0x1b4>)
 8010f60:	4293      	cmp	r3, r2
 8010f62:	d01f      	beq.n	8010fa4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	685b      	ldr	r3, [r3, #4]
 8010f6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d018      	beq.n	8010fa4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f7a:	e853 3f00 	ldrex	r3, [r3]
 8010f7e:	623b      	str	r3, [r7, #32]
   return(result);
 8010f80:	6a3b      	ldr	r3, [r7, #32]
 8010f82:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8010f86:	663b      	str	r3, [r7, #96]	@ 0x60
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	461a      	mov	r2, r3
 8010f8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010f90:	633b      	str	r3, [r7, #48]	@ 0x30
 8010f92:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f94:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010f96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010f98:	e841 2300 	strex	r3, r2, [r1]
 8010f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d1e6      	bne.n	8010f72 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010fa8:	2b01      	cmp	r3, #1
 8010faa:	d12e      	bne.n	801100a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	2200      	movs	r2, #0
 8010fb0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fb8:	693b      	ldr	r3, [r7, #16]
 8010fba:	e853 3f00 	ldrex	r3, [r3]
 8010fbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	f023 0310 	bic.w	r3, r3, #16
 8010fc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	461a      	mov	r2, r3
 8010fce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010fd0:	61fb      	str	r3, [r7, #28]
 8010fd2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fd4:	69b9      	ldr	r1, [r7, #24]
 8010fd6:	69fa      	ldr	r2, [r7, #28]
 8010fd8:	e841 2300 	strex	r3, r2, [r1]
 8010fdc:	617b      	str	r3, [r7, #20]
   return(result);
 8010fde:	697b      	ldr	r3, [r7, #20]
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d1e6      	bne.n	8010fb2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	69db      	ldr	r3, [r3, #28]
 8010fea:	f003 0310 	and.w	r3, r3, #16
 8010fee:	2b10      	cmp	r3, #16
 8010ff0:	d103      	bne.n	8010ffa <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	2210      	movs	r2, #16
 8010ff8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011000:	4619      	mov	r1, r3
 8011002:	6878      	ldr	r0, [r7, #4]
 8011004:	f7fe f93a 	bl	800f27c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011008:	e00b      	b.n	8011022 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801100a:	6878      	ldr	r0, [r7, #4]
 801100c:	f7f0 fdc0 	bl	8001b90 <HAL_UART_RxCpltCallback>
}
 8011010:	e007      	b.n	8011022 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	699a      	ldr	r2, [r3, #24]
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	f042 0208 	orr.w	r2, r2, #8
 8011020:	619a      	str	r2, [r3, #24]
}
 8011022:	bf00      	nop
 8011024:	3770      	adds	r7, #112	@ 0x70
 8011026:	46bd      	mov	sp, r7
 8011028:	bd80      	pop	{r7, pc}
 801102a:	bf00      	nop
 801102c:	58000c00 	.word	0x58000c00

08011030 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8011030:	b580      	push	{r7, lr}
 8011032:	b09c      	sub	sp, #112	@ 0x70
 8011034:	af00      	add	r7, sp, #0
 8011036:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801103e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011048:	2b22      	cmp	r3, #34	@ 0x22
 801104a:	f040 80be 	bne.w	80111ca <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011054:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801105c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801105e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8011062:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8011066:	4013      	ands	r3, r2
 8011068:	b29a      	uxth	r2, r3
 801106a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801106c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011072:	1c9a      	adds	r2, r3, #2
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801107e:	b29b      	uxth	r3, r3
 8011080:	3b01      	subs	r3, #1
 8011082:	b29a      	uxth	r2, r3
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011090:	b29b      	uxth	r3, r3
 8011092:	2b00      	cmp	r3, #0
 8011094:	f040 80a1 	bne.w	80111da <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801109e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80110a0:	e853 3f00 	ldrex	r3, [r3]
 80110a4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80110a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80110a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80110ac:	667b      	str	r3, [r7, #100]	@ 0x64
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	461a      	mov	r2, r3
 80110b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80110b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80110b8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110ba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80110bc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80110be:	e841 2300 	strex	r3, r2, [r1]
 80110c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80110c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d1e6      	bne.n	8011098 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	3308      	adds	r3, #8
 80110d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80110d4:	e853 3f00 	ldrex	r3, [r3]
 80110d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80110da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110dc:	f023 0301 	bic.w	r3, r3, #1
 80110e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	3308      	adds	r3, #8
 80110e8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80110ea:	643a      	str	r2, [r7, #64]	@ 0x40
 80110ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80110f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80110f2:	e841 2300 	strex	r3, r2, [r1]
 80110f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80110f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d1e5      	bne.n	80110ca <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	2220      	movs	r2, #32
 8011102:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	2200      	movs	r2, #0
 801110a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	2200      	movs	r2, #0
 8011110:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	4a33      	ldr	r2, [pc, #204]	@ (80111e4 <UART_RxISR_16BIT+0x1b4>)
 8011118:	4293      	cmp	r3, r2
 801111a:	d01f      	beq.n	801115c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	685b      	ldr	r3, [r3, #4]
 8011122:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011126:	2b00      	cmp	r3, #0
 8011128:	d018      	beq.n	801115c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011130:	6a3b      	ldr	r3, [r7, #32]
 8011132:	e853 3f00 	ldrex	r3, [r3]
 8011136:	61fb      	str	r3, [r7, #28]
   return(result);
 8011138:	69fb      	ldr	r3, [r7, #28]
 801113a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801113e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	461a      	mov	r2, r3
 8011146:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011148:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801114a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801114c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801114e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011150:	e841 2300 	strex	r3, r2, [r1]
 8011154:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011158:	2b00      	cmp	r3, #0
 801115a:	d1e6      	bne.n	801112a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011160:	2b01      	cmp	r3, #1
 8011162:	d12e      	bne.n	80111c2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	2200      	movs	r2, #0
 8011168:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	e853 3f00 	ldrex	r3, [r3]
 8011176:	60bb      	str	r3, [r7, #8]
   return(result);
 8011178:	68bb      	ldr	r3, [r7, #8]
 801117a:	f023 0310 	bic.w	r3, r3, #16
 801117e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	461a      	mov	r2, r3
 8011186:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011188:	61bb      	str	r3, [r7, #24]
 801118a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801118c:	6979      	ldr	r1, [r7, #20]
 801118e:	69ba      	ldr	r2, [r7, #24]
 8011190:	e841 2300 	strex	r3, r2, [r1]
 8011194:	613b      	str	r3, [r7, #16]
   return(result);
 8011196:	693b      	ldr	r3, [r7, #16]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d1e6      	bne.n	801116a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	69db      	ldr	r3, [r3, #28]
 80111a2:	f003 0310 	and.w	r3, r3, #16
 80111a6:	2b10      	cmp	r3, #16
 80111a8:	d103      	bne.n	80111b2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	2210      	movs	r2, #16
 80111b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80111b8:	4619      	mov	r1, r3
 80111ba:	6878      	ldr	r0, [r7, #4]
 80111bc:	f7fe f85e 	bl	800f27c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80111c0:	e00b      	b.n	80111da <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80111c2:	6878      	ldr	r0, [r7, #4]
 80111c4:	f7f0 fce4 	bl	8001b90 <HAL_UART_RxCpltCallback>
}
 80111c8:	e007      	b.n	80111da <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	699a      	ldr	r2, [r3, #24]
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	f042 0208 	orr.w	r2, r2, #8
 80111d8:	619a      	str	r2, [r3, #24]
}
 80111da:	bf00      	nop
 80111dc:	3770      	adds	r7, #112	@ 0x70
 80111de:	46bd      	mov	sp, r7
 80111e0:	bd80      	pop	{r7, pc}
 80111e2:	bf00      	nop
 80111e4:	58000c00 	.word	0x58000c00

080111e8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80111e8:	b580      	push	{r7, lr}
 80111ea:	b0ac      	sub	sp, #176	@ 0xb0
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80111f6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	69db      	ldr	r3, [r3, #28]
 8011200:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	689b      	ldr	r3, [r3, #8]
 8011214:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801121e:	2b22      	cmp	r3, #34	@ 0x22
 8011220:	f040 8180 	bne.w	8011524 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801122a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801122e:	e123      	b.n	8011478 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011236:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801123a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 801123e:	b2d9      	uxtb	r1, r3
 8011240:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8011244:	b2da      	uxtb	r2, r3
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801124a:	400a      	ands	r2, r1
 801124c:	b2d2      	uxtb	r2, r2
 801124e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011254:	1c5a      	adds	r2, r3, #1
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011260:	b29b      	uxth	r3, r3
 8011262:	3b01      	subs	r3, #1
 8011264:	b29a      	uxth	r2, r3
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	69db      	ldr	r3, [r3, #28]
 8011272:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8011276:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801127a:	f003 0307 	and.w	r3, r3, #7
 801127e:	2b00      	cmp	r3, #0
 8011280:	d053      	beq.n	801132a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011282:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011286:	f003 0301 	and.w	r3, r3, #1
 801128a:	2b00      	cmp	r3, #0
 801128c:	d011      	beq.n	80112b2 <UART_RxISR_8BIT_FIFOEN+0xca>
 801128e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011296:	2b00      	cmp	r3, #0
 8011298:	d00b      	beq.n	80112b2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	2201      	movs	r2, #1
 80112a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80112a8:	f043 0201 	orr.w	r2, r3, #1
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80112b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80112b6:	f003 0302 	and.w	r3, r3, #2
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d011      	beq.n	80112e2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80112be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80112c2:	f003 0301 	and.w	r3, r3, #1
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d00b      	beq.n	80112e2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	2202      	movs	r2, #2
 80112d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80112d8:	f043 0204 	orr.w	r2, r3, #4
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80112e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80112e6:	f003 0304 	and.w	r3, r3, #4
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d011      	beq.n	8011312 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80112ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80112f2:	f003 0301 	and.w	r3, r3, #1
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d00b      	beq.n	8011312 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	2204      	movs	r2, #4
 8011300:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011308:	f043 0202 	orr.w	r2, r3, #2
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011318:	2b00      	cmp	r3, #0
 801131a:	d006      	beq.n	801132a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801131c:	6878      	ldr	r0, [r7, #4]
 801131e:	f7fd ff99 	bl	800f254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	2200      	movs	r2, #0
 8011326:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011330:	b29b      	uxth	r3, r3
 8011332:	2b00      	cmp	r3, #0
 8011334:	f040 80a0 	bne.w	8011478 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801133e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011340:	e853 3f00 	ldrex	r3, [r3]
 8011344:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8011346:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011348:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801134c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	461a      	mov	r2, r3
 8011356:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801135a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801135c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801135e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8011360:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8011362:	e841 2300 	strex	r3, r2, [r1]
 8011366:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8011368:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801136a:	2b00      	cmp	r3, #0
 801136c:	d1e4      	bne.n	8011338 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	3308      	adds	r3, #8
 8011374:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011376:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011378:	e853 3f00 	ldrex	r3, [r3]
 801137c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 801137e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011380:	4b6e      	ldr	r3, [pc, #440]	@ (801153c <UART_RxISR_8BIT_FIFOEN+0x354>)
 8011382:	4013      	ands	r3, r2
 8011384:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	3308      	adds	r3, #8
 801138e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8011392:	66ba      	str	r2, [r7, #104]	@ 0x68
 8011394:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011396:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8011398:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801139a:	e841 2300 	strex	r3, r2, [r1]
 801139e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80113a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d1e3      	bne.n	801136e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	2220      	movs	r2, #32
 80113aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	2200      	movs	r2, #0
 80113b2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	2200      	movs	r2, #0
 80113b8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	4a60      	ldr	r2, [pc, #384]	@ (8011540 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80113c0:	4293      	cmp	r3, r2
 80113c2:	d021      	beq.n	8011408 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	685b      	ldr	r3, [r3, #4]
 80113ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d01a      	beq.n	8011408 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80113da:	e853 3f00 	ldrex	r3, [r3]
 80113de:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80113e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80113e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80113e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	461a      	mov	r2, r3
 80113f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80113f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80113f6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113f8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80113fa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80113fc:	e841 2300 	strex	r3, r2, [r1]
 8011400:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8011402:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011404:	2b00      	cmp	r3, #0
 8011406:	d1e4      	bne.n	80113d2 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801140c:	2b01      	cmp	r3, #1
 801140e:	d130      	bne.n	8011472 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	2200      	movs	r2, #0
 8011414:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801141c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801141e:	e853 3f00 	ldrex	r3, [r3]
 8011422:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011426:	f023 0310 	bic.w	r3, r3, #16
 801142a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	461a      	mov	r2, r3
 8011434:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011438:	643b      	str	r3, [r7, #64]	@ 0x40
 801143a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801143c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801143e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011440:	e841 2300 	strex	r3, r2, [r1]
 8011444:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011448:	2b00      	cmp	r3, #0
 801144a:	d1e4      	bne.n	8011416 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	69db      	ldr	r3, [r3, #28]
 8011452:	f003 0310 	and.w	r3, r3, #16
 8011456:	2b10      	cmp	r3, #16
 8011458:	d103      	bne.n	8011462 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	2210      	movs	r2, #16
 8011460:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011468:	4619      	mov	r1, r3
 801146a:	6878      	ldr	r0, [r7, #4]
 801146c:	f7fd ff06 	bl	800f27c <HAL_UARTEx_RxEventCallback>
 8011470:	e002      	b.n	8011478 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8011472:	6878      	ldr	r0, [r7, #4]
 8011474:	f7f0 fb8c 	bl	8001b90 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011478:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 801147c:	2b00      	cmp	r3, #0
 801147e:	d006      	beq.n	801148e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8011480:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011484:	f003 0320 	and.w	r3, r3, #32
 8011488:	2b00      	cmp	r3, #0
 801148a:	f47f aed1 	bne.w	8011230 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011494:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8011498:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 801149c:	2b00      	cmp	r3, #0
 801149e:	d049      	beq.n	8011534 <UART_RxISR_8BIT_FIFOEN+0x34c>
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80114a6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80114aa:	429a      	cmp	r2, r3
 80114ac:	d242      	bcs.n	8011534 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	3308      	adds	r3, #8
 80114b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114b6:	6a3b      	ldr	r3, [r7, #32]
 80114b8:	e853 3f00 	ldrex	r3, [r3]
 80114bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80114be:	69fb      	ldr	r3, [r7, #28]
 80114c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80114c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	3308      	adds	r3, #8
 80114ce:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80114d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80114d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80114d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80114da:	e841 2300 	strex	r3, r2, [r1]
 80114de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80114e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d1e3      	bne.n	80114ae <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	4a16      	ldr	r2, [pc, #88]	@ (8011544 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80114ea:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	e853 3f00 	ldrex	r3, [r3]
 80114f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80114fa:	68bb      	ldr	r3, [r7, #8]
 80114fc:	f043 0320 	orr.w	r3, r3, #32
 8011500:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	461a      	mov	r2, r3
 801150a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801150e:	61bb      	str	r3, [r7, #24]
 8011510:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011512:	6979      	ldr	r1, [r7, #20]
 8011514:	69ba      	ldr	r2, [r7, #24]
 8011516:	e841 2300 	strex	r3, r2, [r1]
 801151a:	613b      	str	r3, [r7, #16]
   return(result);
 801151c:	693b      	ldr	r3, [r7, #16]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d1e4      	bne.n	80114ec <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011522:	e007      	b.n	8011534 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	699a      	ldr	r2, [r3, #24]
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	f042 0208 	orr.w	r2, r2, #8
 8011532:	619a      	str	r2, [r3, #24]
}
 8011534:	bf00      	nop
 8011536:	37b0      	adds	r7, #176	@ 0xb0
 8011538:	46bd      	mov	sp, r7
 801153a:	bd80      	pop	{r7, pc}
 801153c:	effffffe 	.word	0xeffffffe
 8011540:	58000c00 	.word	0x58000c00
 8011544:	08010e79 	.word	0x08010e79

08011548 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011548:	b580      	push	{r7, lr}
 801154a:	b0ae      	sub	sp, #184	@ 0xb8
 801154c:	af00      	add	r7, sp, #0
 801154e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011556:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	69db      	ldr	r3, [r3, #28]
 8011560:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	689b      	ldr	r3, [r3, #8]
 8011574:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801157e:	2b22      	cmp	r3, #34	@ 0x22
 8011580:	f040 8184 	bne.w	801188c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801158a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801158e:	e127      	b.n	80117e0 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011596:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801159e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80115a2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80115a6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80115aa:	4013      	ands	r3, r2
 80115ac:	b29a      	uxth	r2, r3
 80115ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80115b2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80115b8:	1c9a      	adds	r2, r3, #2
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80115c4:	b29b      	uxth	r3, r3
 80115c6:	3b01      	subs	r3, #1
 80115c8:	b29a      	uxth	r2, r3
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	69db      	ldr	r3, [r3, #28]
 80115d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80115da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80115de:	f003 0307 	and.w	r3, r3, #7
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d053      	beq.n	801168e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80115e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80115ea:	f003 0301 	and.w	r3, r3, #1
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d011      	beq.n	8011616 <UART_RxISR_16BIT_FIFOEN+0xce>
 80115f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80115f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d00b      	beq.n	8011616 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	2201      	movs	r2, #1
 8011604:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801160c:	f043 0201 	orr.w	r2, r3, #1
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011616:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801161a:	f003 0302 	and.w	r3, r3, #2
 801161e:	2b00      	cmp	r3, #0
 8011620:	d011      	beq.n	8011646 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8011622:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011626:	f003 0301 	and.w	r3, r3, #1
 801162a:	2b00      	cmp	r3, #0
 801162c:	d00b      	beq.n	8011646 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	2202      	movs	r2, #2
 8011634:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801163c:	f043 0204 	orr.w	r2, r3, #4
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011646:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801164a:	f003 0304 	and.w	r3, r3, #4
 801164e:	2b00      	cmp	r3, #0
 8011650:	d011      	beq.n	8011676 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8011652:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011656:	f003 0301 	and.w	r3, r3, #1
 801165a:	2b00      	cmp	r3, #0
 801165c:	d00b      	beq.n	8011676 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	2204      	movs	r2, #4
 8011664:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801166c:	f043 0202 	orr.w	r2, r3, #2
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801167c:	2b00      	cmp	r3, #0
 801167e:	d006      	beq.n	801168e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011680:	6878      	ldr	r0, [r7, #4]
 8011682:	f7fd fde7 	bl	800f254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	2200      	movs	r2, #0
 801168a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011694:	b29b      	uxth	r3, r3
 8011696:	2b00      	cmp	r3, #0
 8011698:	f040 80a2 	bne.w	80117e0 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80116a4:	e853 3f00 	ldrex	r3, [r3]
 80116a8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80116aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80116ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80116b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	461a      	mov	r2, r3
 80116ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80116be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80116c2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116c4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80116c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80116ca:	e841 2300 	strex	r3, r2, [r1]
 80116ce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80116d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d1e2      	bne.n	801169c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	3308      	adds	r3, #8
 80116dc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80116e0:	e853 3f00 	ldrex	r3, [r3]
 80116e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80116e6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80116e8:	4b6e      	ldr	r3, [pc, #440]	@ (80118a4 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 80116ea:	4013      	ands	r3, r2
 80116ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	3308      	adds	r3, #8
 80116f6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80116fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80116fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8011700:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011702:	e841 2300 	strex	r3, r2, [r1]
 8011706:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8011708:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801170a:	2b00      	cmp	r3, #0
 801170c:	d1e3      	bne.n	80116d6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	2220      	movs	r2, #32
 8011712:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	2200      	movs	r2, #0
 801171a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	2200      	movs	r2, #0
 8011720:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	4a60      	ldr	r2, [pc, #384]	@ (80118a8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8011728:	4293      	cmp	r3, r2
 801172a:	d021      	beq.n	8011770 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	685b      	ldr	r3, [r3, #4]
 8011732:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011736:	2b00      	cmp	r3, #0
 8011738:	d01a      	beq.n	8011770 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011740:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011742:	e853 3f00 	ldrex	r3, [r3]
 8011746:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8011748:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801174a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801174e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	461a      	mov	r2, r3
 8011758:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801175c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801175e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011760:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011762:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011764:	e841 2300 	strex	r3, r2, [r1]
 8011768:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801176a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801176c:	2b00      	cmp	r3, #0
 801176e:	d1e4      	bne.n	801173a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011774:	2b01      	cmp	r3, #1
 8011776:	d130      	bne.n	80117da <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	2200      	movs	r2, #0
 801177c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011786:	e853 3f00 	ldrex	r3, [r3]
 801178a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801178c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801178e:	f023 0310 	bic.w	r3, r3, #16
 8011792:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	461a      	mov	r2, r3
 801179c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80117a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80117a2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80117a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80117a8:	e841 2300 	strex	r3, r2, [r1]
 80117ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80117ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d1e4      	bne.n	801177e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	69db      	ldr	r3, [r3, #28]
 80117ba:	f003 0310 	and.w	r3, r3, #16
 80117be:	2b10      	cmp	r3, #16
 80117c0:	d103      	bne.n	80117ca <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	2210      	movs	r2, #16
 80117c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80117d0:	4619      	mov	r1, r3
 80117d2:	6878      	ldr	r0, [r7, #4]
 80117d4:	f7fd fd52 	bl	800f27c <HAL_UARTEx_RxEventCallback>
 80117d8:	e002      	b.n	80117e0 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80117da:	6878      	ldr	r0, [r7, #4]
 80117dc:	f7f0 f9d8 	bl	8001b90 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80117e0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d006      	beq.n	80117f6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 80117e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80117ec:	f003 0320 	and.w	r3, r3, #32
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	f47f aecd 	bne.w	8011590 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80117fc:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8011800:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8011804:	2b00      	cmp	r3, #0
 8011806:	d049      	beq.n	801189c <UART_RxISR_16BIT_FIFOEN+0x354>
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801180e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8011812:	429a      	cmp	r2, r3
 8011814:	d242      	bcs.n	801189c <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	3308      	adds	r3, #8
 801181c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801181e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011820:	e853 3f00 	ldrex	r3, [r3]
 8011824:	623b      	str	r3, [r7, #32]
   return(result);
 8011826:	6a3b      	ldr	r3, [r7, #32]
 8011828:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801182c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	3308      	adds	r3, #8
 8011836:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801183a:	633a      	str	r2, [r7, #48]	@ 0x30
 801183c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801183e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011840:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011842:	e841 2300 	strex	r3, r2, [r1]
 8011846:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801184a:	2b00      	cmp	r3, #0
 801184c:	d1e3      	bne.n	8011816 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	4a16      	ldr	r2, [pc, #88]	@ (80118ac <UART_RxISR_16BIT_FIFOEN+0x364>)
 8011852:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801185a:	693b      	ldr	r3, [r7, #16]
 801185c:	e853 3f00 	ldrex	r3, [r3]
 8011860:	60fb      	str	r3, [r7, #12]
   return(result);
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	f043 0320 	orr.w	r3, r3, #32
 8011868:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	461a      	mov	r2, r3
 8011872:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011876:	61fb      	str	r3, [r7, #28]
 8011878:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801187a:	69b9      	ldr	r1, [r7, #24]
 801187c:	69fa      	ldr	r2, [r7, #28]
 801187e:	e841 2300 	strex	r3, r2, [r1]
 8011882:	617b      	str	r3, [r7, #20]
   return(result);
 8011884:	697b      	ldr	r3, [r7, #20]
 8011886:	2b00      	cmp	r3, #0
 8011888:	d1e4      	bne.n	8011854 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801188a:	e007      	b.n	801189c <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	699a      	ldr	r2, [r3, #24]
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	f042 0208 	orr.w	r2, r2, #8
 801189a:	619a      	str	r2, [r3, #24]
}
 801189c:	bf00      	nop
 801189e:	37b8      	adds	r7, #184	@ 0xb8
 80118a0:	46bd      	mov	sp, r7
 80118a2:	bd80      	pop	{r7, pc}
 80118a4:	effffffe 	.word	0xeffffffe
 80118a8:	58000c00 	.word	0x58000c00
 80118ac:	08011031 	.word	0x08011031

080118b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80118b0:	b480      	push	{r7}
 80118b2:	b083      	sub	sp, #12
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80118b8:	bf00      	nop
 80118ba:	370c      	adds	r7, #12
 80118bc:	46bd      	mov	sp, r7
 80118be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c2:	4770      	bx	lr

080118c4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80118c4:	b480      	push	{r7}
 80118c6:	b083      	sub	sp, #12
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80118cc:	bf00      	nop
 80118ce:	370c      	adds	r7, #12
 80118d0:	46bd      	mov	sp, r7
 80118d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d6:	4770      	bx	lr

080118d8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80118d8:	b480      	push	{r7}
 80118da:	b083      	sub	sp, #12
 80118dc:	af00      	add	r7, sp, #0
 80118de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80118e0:	bf00      	nop
 80118e2:	370c      	adds	r7, #12
 80118e4:	46bd      	mov	sp, r7
 80118e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ea:	4770      	bx	lr

080118ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80118ec:	b480      	push	{r7}
 80118ee:	b085      	sub	sp, #20
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80118fa:	2b01      	cmp	r3, #1
 80118fc:	d101      	bne.n	8011902 <HAL_UARTEx_DisableFifoMode+0x16>
 80118fe:	2302      	movs	r3, #2
 8011900:	e027      	b.n	8011952 <HAL_UARTEx_DisableFifoMode+0x66>
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	2201      	movs	r2, #1
 8011906:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	2224      	movs	r2, #36	@ 0x24
 801190e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	681a      	ldr	r2, [r3, #0]
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	f022 0201 	bic.w	r2, r2, #1
 8011928:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8011930:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	2200      	movs	r2, #0
 8011936:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	68fa      	ldr	r2, [r7, #12]
 801193e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	2220      	movs	r2, #32
 8011944:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	2200      	movs	r2, #0
 801194c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011950:	2300      	movs	r3, #0
}
 8011952:	4618      	mov	r0, r3
 8011954:	3714      	adds	r7, #20
 8011956:	46bd      	mov	sp, r7
 8011958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801195c:	4770      	bx	lr

0801195e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801195e:	b580      	push	{r7, lr}
 8011960:	b084      	sub	sp, #16
 8011962:	af00      	add	r7, sp, #0
 8011964:	6078      	str	r0, [r7, #4]
 8011966:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801196e:	2b01      	cmp	r3, #1
 8011970:	d101      	bne.n	8011976 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011972:	2302      	movs	r3, #2
 8011974:	e02d      	b.n	80119d2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	2201      	movs	r2, #1
 801197a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	2224      	movs	r2, #36	@ 0x24
 8011982:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	681a      	ldr	r2, [r3, #0]
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	f022 0201 	bic.w	r2, r2, #1
 801199c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	689b      	ldr	r3, [r3, #8]
 80119a4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	683a      	ldr	r2, [r7, #0]
 80119ae:	430a      	orrs	r2, r1
 80119b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80119b2:	6878      	ldr	r0, [r7, #4]
 80119b4:	f000 f850 	bl	8011a58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	68fa      	ldr	r2, [r7, #12]
 80119be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	2220      	movs	r2, #32
 80119c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	2200      	movs	r2, #0
 80119cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80119d0:	2300      	movs	r3, #0
}
 80119d2:	4618      	mov	r0, r3
 80119d4:	3710      	adds	r7, #16
 80119d6:	46bd      	mov	sp, r7
 80119d8:	bd80      	pop	{r7, pc}

080119da <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80119da:	b580      	push	{r7, lr}
 80119dc:	b084      	sub	sp, #16
 80119de:	af00      	add	r7, sp, #0
 80119e0:	6078      	str	r0, [r7, #4]
 80119e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80119ea:	2b01      	cmp	r3, #1
 80119ec:	d101      	bne.n	80119f2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80119ee:	2302      	movs	r3, #2
 80119f0:	e02d      	b.n	8011a4e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	2201      	movs	r2, #1
 80119f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	2224      	movs	r2, #36	@ 0x24
 80119fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	681a      	ldr	r2, [r3, #0]
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	f022 0201 	bic.w	r2, r2, #1
 8011a18:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	689b      	ldr	r3, [r3, #8]
 8011a20:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	683a      	ldr	r2, [r7, #0]
 8011a2a:	430a      	orrs	r2, r1
 8011a2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011a2e:	6878      	ldr	r0, [r7, #4]
 8011a30:	f000 f812 	bl	8011a58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	68fa      	ldr	r2, [r7, #12]
 8011a3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	2220      	movs	r2, #32
 8011a40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	2200      	movs	r2, #0
 8011a48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011a4c:	2300      	movs	r3, #0
}
 8011a4e:	4618      	mov	r0, r3
 8011a50:	3710      	adds	r7, #16
 8011a52:	46bd      	mov	sp, r7
 8011a54:	bd80      	pop	{r7, pc}
	...

08011a58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011a58:	b480      	push	{r7}
 8011a5a:	b085      	sub	sp, #20
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d108      	bne.n	8011a7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	2201      	movs	r2, #1
 8011a6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	2201      	movs	r2, #1
 8011a74:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011a78:	e031      	b.n	8011ade <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011a7a:	2310      	movs	r3, #16
 8011a7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011a7e:	2310      	movs	r3, #16
 8011a80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	689b      	ldr	r3, [r3, #8]
 8011a88:	0e5b      	lsrs	r3, r3, #25
 8011a8a:	b2db      	uxtb	r3, r3
 8011a8c:	f003 0307 	and.w	r3, r3, #7
 8011a90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	689b      	ldr	r3, [r3, #8]
 8011a98:	0f5b      	lsrs	r3, r3, #29
 8011a9a:	b2db      	uxtb	r3, r3
 8011a9c:	f003 0307 	and.w	r3, r3, #7
 8011aa0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011aa2:	7bbb      	ldrb	r3, [r7, #14]
 8011aa4:	7b3a      	ldrb	r2, [r7, #12]
 8011aa6:	4911      	ldr	r1, [pc, #68]	@ (8011aec <UARTEx_SetNbDataToProcess+0x94>)
 8011aa8:	5c8a      	ldrb	r2, [r1, r2]
 8011aaa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011aae:	7b3a      	ldrb	r2, [r7, #12]
 8011ab0:	490f      	ldr	r1, [pc, #60]	@ (8011af0 <UARTEx_SetNbDataToProcess+0x98>)
 8011ab2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011ab4:	fb93 f3f2 	sdiv	r3, r3, r2
 8011ab8:	b29a      	uxth	r2, r3
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011ac0:	7bfb      	ldrb	r3, [r7, #15]
 8011ac2:	7b7a      	ldrb	r2, [r7, #13]
 8011ac4:	4909      	ldr	r1, [pc, #36]	@ (8011aec <UARTEx_SetNbDataToProcess+0x94>)
 8011ac6:	5c8a      	ldrb	r2, [r1, r2]
 8011ac8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011acc:	7b7a      	ldrb	r2, [r7, #13]
 8011ace:	4908      	ldr	r1, [pc, #32]	@ (8011af0 <UARTEx_SetNbDataToProcess+0x98>)
 8011ad0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011ad2:	fb93 f3f2 	sdiv	r3, r3, r2
 8011ad6:	b29a      	uxth	r2, r3
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8011ade:	bf00      	nop
 8011ae0:	3714      	adds	r7, #20
 8011ae2:	46bd      	mov	sp, r7
 8011ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae8:	4770      	bx	lr
 8011aea:	bf00      	nop
 8011aec:	080189c4 	.word	0x080189c4
 8011af0:	080189cc 	.word	0x080189cc

08011af4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8011af4:	b580      	push	{r7, lr}
 8011af6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8011af8:	4904      	ldr	r1, [pc, #16]	@ (8011b0c <MX_FATFS_Init+0x18>)
 8011afa:	4805      	ldr	r0, [pc, #20]	@ (8011b10 <MX_FATFS_Init+0x1c>)
 8011afc:	f001 fcd0 	bl	80134a0 <FATFS_LinkDriver>
 8011b00:	4603      	mov	r3, r0
 8011b02:	461a      	mov	r2, r3
 8011b04:	4b03      	ldr	r3, [pc, #12]	@ (8011b14 <MX_FATFS_Init+0x20>)
 8011b06:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8011b08:	bf00      	nop
 8011b0a:	bd80      	pop	{r7, pc}
 8011b0c:	240028ac 	.word	0x240028ac
 8011b10:	240000ac 	.word	0x240000ac
 8011b14:	240028a8 	.word	0x240028a8

08011b18 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8011b18:	b480      	push	{r7}
 8011b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8011b1c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8011b1e:	4618      	mov	r0, r3
 8011b20:	46bd      	mov	sp, r7
 8011b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b26:	4770      	bx	lr

08011b28 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b082      	sub	sp, #8
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	4603      	mov	r3, r0
 8011b30:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8011b32:	79fb      	ldrb	r3, [r7, #7]
 8011b34:	4618      	mov	r0, r3
 8011b36:	f000 f9fd 	bl	8011f34 <SD_disk_initialize>
 8011b3a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	3708      	adds	r7, #8
 8011b40:	46bd      	mov	sp, r7
 8011b42:	bd80      	pop	{r7, pc}

08011b44 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8011b44:	b580      	push	{r7, lr}
 8011b46:	b082      	sub	sp, #8
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	4603      	mov	r3, r0
 8011b4c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8011b4e:	79fb      	ldrb	r3, [r7, #7]
 8011b50:	4618      	mov	r0, r3
 8011b52:	f000 fad5 	bl	8012100 <SD_disk_status>
 8011b56:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8011b58:	4618      	mov	r0, r3
 8011b5a:	3708      	adds	r7, #8
 8011b5c:	46bd      	mov	sp, r7
 8011b5e:	bd80      	pop	{r7, pc}

08011b60 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8011b60:	b580      	push	{r7, lr}
 8011b62:	b084      	sub	sp, #16
 8011b64:	af00      	add	r7, sp, #0
 8011b66:	60b9      	str	r1, [r7, #8]
 8011b68:	607a      	str	r2, [r7, #4]
 8011b6a:	603b      	str	r3, [r7, #0]
 8011b6c:	4603      	mov	r3, r0
 8011b6e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8011b70:	7bf8      	ldrb	r0, [r7, #15]
 8011b72:	683b      	ldr	r3, [r7, #0]
 8011b74:	687a      	ldr	r2, [r7, #4]
 8011b76:	68b9      	ldr	r1, [r7, #8]
 8011b78:	f000 fad8 	bl	801212c <SD_disk_read>
 8011b7c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8011b7e:	4618      	mov	r0, r3
 8011b80:	3710      	adds	r7, #16
 8011b82:	46bd      	mov	sp, r7
 8011b84:	bd80      	pop	{r7, pc}

08011b86 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8011b86:	b580      	push	{r7, lr}
 8011b88:	b084      	sub	sp, #16
 8011b8a:	af00      	add	r7, sp, #0
 8011b8c:	60b9      	str	r1, [r7, #8]
 8011b8e:	607a      	str	r2, [r7, #4]
 8011b90:	603b      	str	r3, [r7, #0]
 8011b92:	4603      	mov	r3, r0
 8011b94:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8011b96:	7bf8      	ldrb	r0, [r7, #15]
 8011b98:	683b      	ldr	r3, [r7, #0]
 8011b9a:	687a      	ldr	r2, [r7, #4]
 8011b9c:	68b9      	ldr	r1, [r7, #8]
 8011b9e:	f000 fb2f 	bl	8012200 <SD_disk_write>
 8011ba2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	3710      	adds	r7, #16
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	bd80      	pop	{r7, pc}

08011bac <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8011bac:	b580      	push	{r7, lr}
 8011bae:	b082      	sub	sp, #8
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	4603      	mov	r3, r0
 8011bb4:	603a      	str	r2, [r7, #0]
 8011bb6:	71fb      	strb	r3, [r7, #7]
 8011bb8:	460b      	mov	r3, r1
 8011bba:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8011bbc:	79b9      	ldrb	r1, [r7, #6]
 8011bbe:	79fb      	ldrb	r3, [r7, #7]
 8011bc0:	683a      	ldr	r2, [r7, #0]
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	f000 fba0 	bl	8012308 <SD_disk_ioctl>
 8011bc8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8011bca:	4618      	mov	r0, r3
 8011bcc:	3708      	adds	r7, #8
 8011bce:	46bd      	mov	sp, r7
 8011bd0:	bd80      	pop	{r7, pc}
	...

08011bd4 <SELECT>:

//-----[ SPI Functions ]-----

/* slave select */
static void SELECT(void)
{
 8011bd4:	b580      	push	{r7, lr}
 8011bd6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8011bd8:	2200      	movs	r2, #0
 8011bda:	2110      	movs	r1, #16
 8011bdc:	4802      	ldr	r0, [pc, #8]	@ (8011be8 <SELECT+0x14>)
 8011bde:	f7f7 f9b9 	bl	8008f54 <HAL_GPIO_WritePin>
}
 8011be2:	bf00      	nop
 8011be4:	bd80      	pop	{r7, pc}
 8011be6:	bf00      	nop
 8011be8:	58020000 	.word	0x58020000

08011bec <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8011bec:	b580      	push	{r7, lr}
 8011bee:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8011bf0:	2201      	movs	r2, #1
 8011bf2:	2110      	movs	r1, #16
 8011bf4:	4802      	ldr	r0, [pc, #8]	@ (8011c00 <DESELECT+0x14>)
 8011bf6:	f7f7 f9ad 	bl	8008f54 <HAL_GPIO_WritePin>
}
 8011bfa:	bf00      	nop
 8011bfc:	bd80      	pop	{r7, pc}
 8011bfe:	bf00      	nop
 8011c00:	58020000 	.word	0x58020000

08011c04 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8011c04:	b580      	push	{r7, lr}
 8011c06:	b082      	sub	sp, #8
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	4603      	mov	r3, r0
 8011c0c:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8011c0e:	bf00      	nop
 8011c10:	4b08      	ldr	r3, [pc, #32]	@ (8011c34 <SPI_TxByte+0x30>)
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	695b      	ldr	r3, [r3, #20]
 8011c16:	f003 0302 	and.w	r3, r3, #2
 8011c1a:	2b02      	cmp	r3, #2
 8011c1c:	d1f8      	bne.n	8011c10 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8011c1e:	1df9      	adds	r1, r7, #7
 8011c20:	2364      	movs	r3, #100	@ 0x64
 8011c22:	2201      	movs	r2, #1
 8011c24:	4803      	ldr	r0, [pc, #12]	@ (8011c34 <SPI_TxByte+0x30>)
 8011c26:	f7fa fa21 	bl	800c06c <HAL_SPI_Transmit>
}
 8011c2a:	bf00      	nop
 8011c2c:	3708      	adds	r7, #8
 8011c2e:	46bd      	mov	sp, r7
 8011c30:	bd80      	pop	{r7, pc}
 8011c32:	bf00      	nop
 8011c34:	24000ce8 	.word	0x24000ce8

08011c38 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8011c38:	b580      	push	{r7, lr}
 8011c3a:	b082      	sub	sp, #8
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	6078      	str	r0, [r7, #4]
 8011c40:	460b      	mov	r3, r1
 8011c42:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8011c44:	bf00      	nop
 8011c46:	4b08      	ldr	r3, [pc, #32]	@ (8011c68 <SPI_TxBuffer+0x30>)
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	695b      	ldr	r3, [r3, #20]
 8011c4c:	f003 0302 	and.w	r3, r3, #2
 8011c50:	2b02      	cmp	r3, #2
 8011c52:	d1f8      	bne.n	8011c46 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8011c54:	887a      	ldrh	r2, [r7, #2]
 8011c56:	2364      	movs	r3, #100	@ 0x64
 8011c58:	6879      	ldr	r1, [r7, #4]
 8011c5a:	4803      	ldr	r0, [pc, #12]	@ (8011c68 <SPI_TxBuffer+0x30>)
 8011c5c:	f7fa fa06 	bl	800c06c <HAL_SPI_Transmit>
}
 8011c60:	bf00      	nop
 8011c62:	3708      	adds	r7, #8
 8011c64:	46bd      	mov	sp, r7
 8011c66:	bd80      	pop	{r7, pc}
 8011c68:	24000ce8 	.word	0x24000ce8

08011c6c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8011c6c:	b580      	push	{r7, lr}
 8011c6e:	b084      	sub	sp, #16
 8011c70:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8011c72:	23ff      	movs	r3, #255	@ 0xff
 8011c74:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8011c76:	bf00      	nop
 8011c78:	4b09      	ldr	r3, [pc, #36]	@ (8011ca0 <SPI_RxByte+0x34>)
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	695b      	ldr	r3, [r3, #20]
 8011c7e:	f003 0302 	and.w	r3, r3, #2
 8011c82:	2b02      	cmp	r3, #2
 8011c84:	d1f8      	bne.n	8011c78 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8011c86:	1dba      	adds	r2, r7, #6
 8011c88:	1df9      	adds	r1, r7, #7
 8011c8a:	2364      	movs	r3, #100	@ 0x64
 8011c8c:	9300      	str	r3, [sp, #0]
 8011c8e:	2301      	movs	r3, #1
 8011c90:	4803      	ldr	r0, [pc, #12]	@ (8011ca0 <SPI_RxByte+0x34>)
 8011c92:	f7fa fe4b 	bl	800c92c <HAL_SPI_TransmitReceive>
  return data;
 8011c96:	79bb      	ldrb	r3, [r7, #6]
}
 8011c98:	4618      	mov	r0, r3
 8011c9a:	3708      	adds	r7, #8
 8011c9c:	46bd      	mov	sp, r7
 8011c9e:	bd80      	pop	{r7, pc}
 8011ca0:	24000ce8 	.word	0x24000ce8

08011ca4 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8011ca4:	b580      	push	{r7, lr}
 8011ca6:	b082      	sub	sp, #8
 8011ca8:	af00      	add	r7, sp, #0
 8011caa:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8011cac:	f7ff ffde 	bl	8011c6c <SPI_RxByte>
 8011cb0:	4603      	mov	r3, r0
 8011cb2:	461a      	mov	r2, r3
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	701a      	strb	r2, [r3, #0]
}
 8011cb8:	bf00      	nop
 8011cba:	3708      	adds	r7, #8
 8011cbc:	46bd      	mov	sp, r7
 8011cbe:	bd80      	pop	{r7, pc}

08011cc0 <SD_ReadyWait>:

//-----[ SD Card Functions ]-----

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	b082      	sub	sp, #8
 8011cc4:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 8011cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8011cf0 <SD_ReadyWait+0x30>)
 8011cc8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8011ccc:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8011cce:	f7ff ffcd 	bl	8011c6c <SPI_RxByte>
 8011cd2:	4603      	mov	r3, r0
 8011cd4:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8011cd6:	79fb      	ldrb	r3, [r7, #7]
 8011cd8:	2bff      	cmp	r3, #255	@ 0xff
 8011cda:	d003      	beq.n	8011ce4 <SD_ReadyWait+0x24>
 8011cdc:	4b04      	ldr	r3, [pc, #16]	@ (8011cf0 <SD_ReadyWait+0x30>)
 8011cde:	881b      	ldrh	r3, [r3, #0]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d1f4      	bne.n	8011cce <SD_ReadyWait+0xe>
  return res;
 8011ce4:	79fb      	ldrb	r3, [r7, #7]
}
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	3708      	adds	r7, #8
 8011cea:	46bd      	mov	sp, r7
 8011cec:	bd80      	pop	{r7, pc}
 8011cee:	bf00      	nop
 8011cf0:	240028b2 	.word	0x240028b2

08011cf4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8011cf4:	b580      	push	{r7, lr}
 8011cf6:	b084      	sub	sp, #16
 8011cf8:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 8011cfa:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8011cfe:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 8011d00:	f7ff ff74 	bl	8011bec <DESELECT>
  for(int i = 0; i < 10; i++)
 8011d04:	2300      	movs	r3, #0
 8011d06:	60bb      	str	r3, [r7, #8]
 8011d08:	e005      	b.n	8011d16 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8011d0a:	20ff      	movs	r0, #255	@ 0xff
 8011d0c:	f7ff ff7a 	bl	8011c04 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8011d10:	68bb      	ldr	r3, [r7, #8]
 8011d12:	3301      	adds	r3, #1
 8011d14:	60bb      	str	r3, [r7, #8]
 8011d16:	68bb      	ldr	r3, [r7, #8]
 8011d18:	2b09      	cmp	r3, #9
 8011d1a:	ddf6      	ble.n	8011d0a <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 8011d1c:	f7ff ff5a 	bl	8011bd4 <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8011d20:	2340      	movs	r3, #64	@ 0x40
 8011d22:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8011d24:	2300      	movs	r3, #0
 8011d26:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8011d28:	2300      	movs	r3, #0
 8011d2a:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8011d30:	2300      	movs	r3, #0
 8011d32:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 8011d34:	2395      	movs	r3, #149	@ 0x95
 8011d36:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 8011d38:	463b      	mov	r3, r7
 8011d3a:	2106      	movs	r1, #6
 8011d3c:	4618      	mov	r0, r3
 8011d3e:	f7ff ff7b 	bl	8011c38 <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8011d42:	e002      	b.n	8011d4a <SD_PowerOn+0x56>
  {
    cnt--;
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	3b01      	subs	r3, #1
 8011d48:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8011d4a:	f7ff ff8f 	bl	8011c6c <SPI_RxByte>
 8011d4e:	4603      	mov	r3, r0
 8011d50:	2b01      	cmp	r3, #1
 8011d52:	d002      	beq.n	8011d5a <SD_PowerOn+0x66>
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d1f4      	bne.n	8011d44 <SD_PowerOn+0x50>
  }
  DESELECT();
 8011d5a:	f7ff ff47 	bl	8011bec <DESELECT>
  SPI_TxByte(0XFF);
 8011d5e:	20ff      	movs	r0, #255	@ 0xff
 8011d60:	f7ff ff50 	bl	8011c04 <SPI_TxByte>
  PowerFlag = 1;
 8011d64:	4b03      	ldr	r3, [pc, #12]	@ (8011d74 <SD_PowerOn+0x80>)
 8011d66:	2201      	movs	r2, #1
 8011d68:	701a      	strb	r2, [r3, #0]
}
 8011d6a:	bf00      	nop
 8011d6c:	3710      	adds	r7, #16
 8011d6e:	46bd      	mov	sp, r7
 8011d70:	bd80      	pop	{r7, pc}
 8011d72:	bf00      	nop
 8011d74:	240028b5 	.word	0x240028b5

08011d78 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8011d78:	b480      	push	{r7}
 8011d7a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8011d7c:	4b03      	ldr	r3, [pc, #12]	@ (8011d8c <SD_PowerOff+0x14>)
 8011d7e:	2200      	movs	r2, #0
 8011d80:	701a      	strb	r2, [r3, #0]
}
 8011d82:	bf00      	nop
 8011d84:	46bd      	mov	sp, r7
 8011d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d8a:	4770      	bx	lr
 8011d8c:	240028b5 	.word	0x240028b5

08011d90 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8011d90:	b480      	push	{r7}
 8011d92:	af00      	add	r7, sp, #0
  return PowerFlag;
 8011d94:	4b03      	ldr	r3, [pc, #12]	@ (8011da4 <SD_CheckPower+0x14>)
 8011d96:	781b      	ldrb	r3, [r3, #0]
}
 8011d98:	4618      	mov	r0, r3
 8011d9a:	46bd      	mov	sp, r7
 8011d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011da0:	4770      	bx	lr
 8011da2:	bf00      	nop
 8011da4:	240028b5 	.word	0x240028b5

08011da8 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8011da8:	b580      	push	{r7, lr}
 8011daa:	b084      	sub	sp, #16
 8011dac:	af00      	add	r7, sp, #0
 8011dae:	6078      	str	r0, [r7, #4]
 8011db0:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 8011db2:	4b13      	ldr	r3, [pc, #76]	@ (8011e00 <SD_RxDataBlock+0x58>)
 8011db4:	22c8      	movs	r2, #200	@ 0xc8
 8011db6:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8011db8:	f7ff ff58 	bl	8011c6c <SPI_RxByte>
 8011dbc:	4603      	mov	r3, r0
 8011dbe:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8011dc0:	7bfb      	ldrb	r3, [r7, #15]
 8011dc2:	2bff      	cmp	r3, #255	@ 0xff
 8011dc4:	d103      	bne.n	8011dce <SD_RxDataBlock+0x26>
 8011dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8011e00 <SD_RxDataBlock+0x58>)
 8011dc8:	881b      	ldrh	r3, [r3, #0]
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d1f4      	bne.n	8011db8 <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 8011dce:	7bfb      	ldrb	r3, [r7, #15]
 8011dd0:	2bfe      	cmp	r3, #254	@ 0xfe
 8011dd2:	d001      	beq.n	8011dd8 <SD_RxDataBlock+0x30>
 8011dd4:	2300      	movs	r3, #0
 8011dd6:	e00f      	b.n	8011df8 <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	1c5a      	adds	r2, r3, #1
 8011ddc:	607a      	str	r2, [r7, #4]
 8011dde:	4618      	mov	r0, r3
 8011de0:	f7ff ff60 	bl	8011ca4 <SPI_RxBytePtr>
  } while(len--);
 8011de4:	683b      	ldr	r3, [r7, #0]
 8011de6:	1e5a      	subs	r2, r3, #1
 8011de8:	603a      	str	r2, [r7, #0]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d1f4      	bne.n	8011dd8 <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 8011dee:	f7ff ff3d 	bl	8011c6c <SPI_RxByte>
  SPI_RxByte();
 8011df2:	f7ff ff3b 	bl	8011c6c <SPI_RxByte>
  return TRUE;
 8011df6:	2301      	movs	r3, #1
}
 8011df8:	4618      	mov	r0, r3
 8011dfa:	3710      	adds	r7, #16
 8011dfc:	46bd      	mov	sp, r7
 8011dfe:	bd80      	pop	{r7, pc}
 8011e00:	240028b0 	.word	0x240028b0

08011e04 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8011e04:	b580      	push	{r7, lr}
 8011e06:	b084      	sub	sp, #16
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
 8011e0c:	460b      	mov	r3, r1
 8011e0e:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8011e10:	2300      	movs	r3, #0
 8011e12:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8011e14:	f7ff ff54 	bl	8011cc0 <SD_ReadyWait>
 8011e18:	4603      	mov	r3, r0
 8011e1a:	2bff      	cmp	r3, #255	@ 0xff
 8011e1c:	d001      	beq.n	8011e22 <SD_TxDataBlock+0x1e>
 8011e1e:	2300      	movs	r3, #0
 8011e20:	e02f      	b.n	8011e82 <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 8011e22:	78fb      	ldrb	r3, [r7, #3]
 8011e24:	4618      	mov	r0, r3
 8011e26:	f7ff feed 	bl	8011c04 <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8011e2a:	78fb      	ldrb	r3, [r7, #3]
 8011e2c:	2bfd      	cmp	r3, #253	@ 0xfd
 8011e2e:	d020      	beq.n	8011e72 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8011e30:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8011e34:	6878      	ldr	r0, [r7, #4]
 8011e36:	f7ff feff 	bl	8011c38 <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 8011e3a:	f7ff ff17 	bl	8011c6c <SPI_RxByte>
    SPI_RxByte();
 8011e3e:	f7ff ff15 	bl	8011c6c <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 8011e42:	e00b      	b.n	8011e5c <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8011e44:	f7ff ff12 	bl	8011c6c <SPI_RxByte>
 8011e48:	4603      	mov	r3, r0
 8011e4a:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8011e4c:	7bfb      	ldrb	r3, [r7, #15]
 8011e4e:	f003 031f 	and.w	r3, r3, #31
 8011e52:	2b05      	cmp	r3, #5
 8011e54:	d006      	beq.n	8011e64 <SD_TxDataBlock+0x60>
      i++;
 8011e56:	7bbb      	ldrb	r3, [r7, #14]
 8011e58:	3301      	adds	r3, #1
 8011e5a:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8011e5c:	7bbb      	ldrb	r3, [r7, #14]
 8011e5e:	2b40      	cmp	r3, #64	@ 0x40
 8011e60:	d9f0      	bls.n	8011e44 <SD_TxDataBlock+0x40>
 8011e62:	e000      	b.n	8011e66 <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8011e64:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8011e66:	bf00      	nop
 8011e68:	f7ff ff00 	bl	8011c6c <SPI_RxByte>
 8011e6c:	4603      	mov	r3, r0
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d0fa      	beq.n	8011e68 <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8011e72:	7bfb      	ldrb	r3, [r7, #15]
 8011e74:	f003 031f 	and.w	r3, r3, #31
 8011e78:	2b05      	cmp	r3, #5
 8011e7a:	d101      	bne.n	8011e80 <SD_TxDataBlock+0x7c>
 8011e7c:	2301      	movs	r3, #1
 8011e7e:	e000      	b.n	8011e82 <SD_TxDataBlock+0x7e>

  return FALSE;
 8011e80:	2300      	movs	r3, #0
}
 8011e82:	4618      	mov	r0, r3
 8011e84:	3710      	adds	r7, #16
 8011e86:	46bd      	mov	sp, r7
 8011e88:	bd80      	pop	{r7, pc}

08011e8a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8011e8a:	b580      	push	{r7, lr}
 8011e8c:	b084      	sub	sp, #16
 8011e8e:	af00      	add	r7, sp, #0
 8011e90:	4603      	mov	r3, r0
 8011e92:	6039      	str	r1, [r7, #0]
 8011e94:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8011e96:	f7ff ff13 	bl	8011cc0 <SD_ReadyWait>
 8011e9a:	4603      	mov	r3, r0
 8011e9c:	2bff      	cmp	r3, #255	@ 0xff
 8011e9e:	d001      	beq.n	8011ea4 <SD_SendCmd+0x1a>
 8011ea0:	23ff      	movs	r3, #255	@ 0xff
 8011ea2:	e042      	b.n	8011f2a <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8011ea4:	79fb      	ldrb	r3, [r7, #7]
 8011ea6:	4618      	mov	r0, r3
 8011ea8:	f7ff feac 	bl	8011c04 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8011eac:	683b      	ldr	r3, [r7, #0]
 8011eae:	0e1b      	lsrs	r3, r3, #24
 8011eb0:	b2db      	uxtb	r3, r3
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	f7ff fea6 	bl	8011c04 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8011eb8:	683b      	ldr	r3, [r7, #0]
 8011eba:	0c1b      	lsrs	r3, r3, #16
 8011ebc:	b2db      	uxtb	r3, r3
 8011ebe:	4618      	mov	r0, r3
 8011ec0:	f7ff fea0 	bl	8011c04 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8011ec4:	683b      	ldr	r3, [r7, #0]
 8011ec6:	0a1b      	lsrs	r3, r3, #8
 8011ec8:	b2db      	uxtb	r3, r3
 8011eca:	4618      	mov	r0, r3
 8011ecc:	f7ff fe9a 	bl	8011c04 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8011ed0:	683b      	ldr	r3, [r7, #0]
 8011ed2:	b2db      	uxtb	r3, r3
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	f7ff fe95 	bl	8011c04 <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8011eda:	79fb      	ldrb	r3, [r7, #7]
 8011edc:	2b40      	cmp	r3, #64	@ 0x40
 8011ede:	d102      	bne.n	8011ee6 <SD_SendCmd+0x5c>
 8011ee0:	2395      	movs	r3, #149	@ 0x95
 8011ee2:	73fb      	strb	r3, [r7, #15]
 8011ee4:	e007      	b.n	8011ef6 <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 8011ee6:	79fb      	ldrb	r3, [r7, #7]
 8011ee8:	2b48      	cmp	r3, #72	@ 0x48
 8011eea:	d102      	bne.n	8011ef2 <SD_SendCmd+0x68>
 8011eec:	2387      	movs	r3, #135	@ 0x87
 8011eee:	73fb      	strb	r3, [r7, #15]
 8011ef0:	e001      	b.n	8011ef6 <SD_SendCmd+0x6c>
  else crc = 1;
 8011ef2:	2301      	movs	r3, #1
 8011ef4:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 8011ef6:	7bfb      	ldrb	r3, [r7, #15]
 8011ef8:	4618      	mov	r0, r3
 8011efa:	f7ff fe83 	bl	8011c04 <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8011efe:	79fb      	ldrb	r3, [r7, #7]
 8011f00:	2b4c      	cmp	r3, #76	@ 0x4c
 8011f02:	d101      	bne.n	8011f08 <SD_SendCmd+0x7e>
 8011f04:	f7ff feb2 	bl	8011c6c <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 8011f08:	230a      	movs	r3, #10
 8011f0a:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8011f0c:	f7ff feae 	bl	8011c6c <SPI_RxByte>
 8011f10:	4603      	mov	r3, r0
 8011f12:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8011f14:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	da05      	bge.n	8011f28 <SD_SendCmd+0x9e>
 8011f1c:	7bbb      	ldrb	r3, [r7, #14]
 8011f1e:	3b01      	subs	r3, #1
 8011f20:	73bb      	strb	r3, [r7, #14]
 8011f22:	7bbb      	ldrb	r3, [r7, #14]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d1f1      	bne.n	8011f0c <SD_SendCmd+0x82>

  return res;
 8011f28:	7b7b      	ldrb	r3, [r7, #13]
}
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	3710      	adds	r7, #16
 8011f2e:	46bd      	mov	sp, r7
 8011f30:	bd80      	pop	{r7, pc}
	...

08011f34 <SD_disk_initialize>:

//-----[ user_diskio.c Functions ]-----

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8011f34:	b590      	push	{r4, r7, lr}
 8011f36:	b085      	sub	sp, #20
 8011f38:	af00      	add	r7, sp, #0
 8011f3a:	4603      	mov	r3, r0
 8011f3c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8011f3e:	79fb      	ldrb	r3, [r7, #7]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d001      	beq.n	8011f48 <SD_disk_initialize+0x14>
 8011f44:	2301      	movs	r3, #1
 8011f46:	e0d1      	b.n	80120ec <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8011f48:	4b6a      	ldr	r3, [pc, #424]	@ (80120f4 <SD_disk_initialize+0x1c0>)
 8011f4a:	781b      	ldrb	r3, [r3, #0]
 8011f4c:	b2db      	uxtb	r3, r3
 8011f4e:	f003 0302 	and.w	r3, r3, #2
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d003      	beq.n	8011f5e <SD_disk_initialize+0x2a>
 8011f56:	4b67      	ldr	r3, [pc, #412]	@ (80120f4 <SD_disk_initialize+0x1c0>)
 8011f58:	781b      	ldrb	r3, [r3, #0]
 8011f5a:	b2db      	uxtb	r3, r3
 8011f5c:	e0c6      	b.n	80120ec <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 8011f5e:	f7ff fec9 	bl	8011cf4 <SD_PowerOn>
  /* slave select */
  SELECT();
 8011f62:	f7ff fe37 	bl	8011bd4 <SELECT>
  /* check disk type */
  type = 0;
 8011f66:	2300      	movs	r3, #0
 8011f68:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8011f6a:	2100      	movs	r1, #0
 8011f6c:	2040      	movs	r0, #64	@ 0x40
 8011f6e:	f7ff ff8c 	bl	8011e8a <SD_SendCmd>
 8011f72:	4603      	mov	r3, r0
 8011f74:	2b01      	cmp	r3, #1
 8011f76:	f040 80a1 	bne.w	80120bc <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8011f7a:	4b5f      	ldr	r3, [pc, #380]	@ (80120f8 <SD_disk_initialize+0x1c4>)
 8011f7c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011f80:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8011f82:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8011f86:	2048      	movs	r0, #72	@ 0x48
 8011f88:	f7ff ff7f 	bl	8011e8a <SD_SendCmd>
 8011f8c:	4603      	mov	r3, r0
 8011f8e:	2b01      	cmp	r3, #1
 8011f90:	d155      	bne.n	801203e <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8011f92:	2300      	movs	r3, #0
 8011f94:	73fb      	strb	r3, [r7, #15]
 8011f96:	e00c      	b.n	8011fb2 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8011f98:	7bfc      	ldrb	r4, [r7, #15]
 8011f9a:	f7ff fe67 	bl	8011c6c <SPI_RxByte>
 8011f9e:	4603      	mov	r3, r0
 8011fa0:	461a      	mov	r2, r3
 8011fa2:	f104 0310 	add.w	r3, r4, #16
 8011fa6:	443b      	add	r3, r7
 8011fa8:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8011fac:	7bfb      	ldrb	r3, [r7, #15]
 8011fae:	3301      	adds	r3, #1
 8011fb0:	73fb      	strb	r3, [r7, #15]
 8011fb2:	7bfb      	ldrb	r3, [r7, #15]
 8011fb4:	2b03      	cmp	r3, #3
 8011fb6:	d9ef      	bls.n	8011f98 <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8011fb8:	7abb      	ldrb	r3, [r7, #10]
 8011fba:	2b01      	cmp	r3, #1
 8011fbc:	d17e      	bne.n	80120bc <SD_disk_initialize+0x188>
 8011fbe:	7afb      	ldrb	r3, [r7, #11]
 8011fc0:	2baa      	cmp	r3, #170	@ 0xaa
 8011fc2:	d17b      	bne.n	80120bc <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8011fc4:	2100      	movs	r1, #0
 8011fc6:	2077      	movs	r0, #119	@ 0x77
 8011fc8:	f7ff ff5f 	bl	8011e8a <SD_SendCmd>
 8011fcc:	4603      	mov	r3, r0
 8011fce:	2b01      	cmp	r3, #1
 8011fd0:	d807      	bhi.n	8011fe2 <SD_disk_initialize+0xae>
 8011fd2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8011fd6:	2069      	movs	r0, #105	@ 0x69
 8011fd8:	f7ff ff57 	bl	8011e8a <SD_SendCmd>
 8011fdc:	4603      	mov	r3, r0
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d004      	beq.n	8011fec <SD_disk_initialize+0xb8>
        } while (Timer1);
 8011fe2:	4b45      	ldr	r3, [pc, #276]	@ (80120f8 <SD_disk_initialize+0x1c4>)
 8011fe4:	881b      	ldrh	r3, [r3, #0]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d1ec      	bne.n	8011fc4 <SD_disk_initialize+0x90>
 8011fea:	e000      	b.n	8011fee <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8011fec:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8011fee:	4b42      	ldr	r3, [pc, #264]	@ (80120f8 <SD_disk_initialize+0x1c4>)
 8011ff0:	881b      	ldrh	r3, [r3, #0]
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d062      	beq.n	80120bc <SD_disk_initialize+0x188>
 8011ff6:	2100      	movs	r1, #0
 8011ff8:	207a      	movs	r0, #122	@ 0x7a
 8011ffa:	f7ff ff46 	bl	8011e8a <SD_SendCmd>
 8011ffe:	4603      	mov	r3, r0
 8012000:	2b00      	cmp	r3, #0
 8012002:	d15b      	bne.n	80120bc <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8012004:	2300      	movs	r3, #0
 8012006:	73fb      	strb	r3, [r7, #15]
 8012008:	e00c      	b.n	8012024 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 801200a:	7bfc      	ldrb	r4, [r7, #15]
 801200c:	f7ff fe2e 	bl	8011c6c <SPI_RxByte>
 8012010:	4603      	mov	r3, r0
 8012012:	461a      	mov	r2, r3
 8012014:	f104 0310 	add.w	r3, r4, #16
 8012018:	443b      	add	r3, r7
 801201a:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 801201e:	7bfb      	ldrb	r3, [r7, #15]
 8012020:	3301      	adds	r3, #1
 8012022:	73fb      	strb	r3, [r7, #15]
 8012024:	7bfb      	ldrb	r3, [r7, #15]
 8012026:	2b03      	cmp	r3, #3
 8012028:	d9ef      	bls.n	801200a <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 801202a:	7a3b      	ldrb	r3, [r7, #8]
 801202c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012030:	2b00      	cmp	r3, #0
 8012032:	d001      	beq.n	8012038 <SD_disk_initialize+0x104>
 8012034:	230c      	movs	r3, #12
 8012036:	e000      	b.n	801203a <SD_disk_initialize+0x106>
 8012038:	2304      	movs	r3, #4
 801203a:	73bb      	strb	r3, [r7, #14]
 801203c:	e03e      	b.n	80120bc <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 801203e:	2100      	movs	r1, #0
 8012040:	2077      	movs	r0, #119	@ 0x77
 8012042:	f7ff ff22 	bl	8011e8a <SD_SendCmd>
 8012046:	4603      	mov	r3, r0
 8012048:	2b01      	cmp	r3, #1
 801204a:	d808      	bhi.n	801205e <SD_disk_initialize+0x12a>
 801204c:	2100      	movs	r1, #0
 801204e:	2069      	movs	r0, #105	@ 0x69
 8012050:	f7ff ff1b 	bl	8011e8a <SD_SendCmd>
 8012054:	4603      	mov	r3, r0
 8012056:	2b01      	cmp	r3, #1
 8012058:	d801      	bhi.n	801205e <SD_disk_initialize+0x12a>
 801205a:	2302      	movs	r3, #2
 801205c:	e000      	b.n	8012060 <SD_disk_initialize+0x12c>
 801205e:	2301      	movs	r3, #1
 8012060:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 8012062:	7bbb      	ldrb	r3, [r7, #14]
 8012064:	2b02      	cmp	r3, #2
 8012066:	d10e      	bne.n	8012086 <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8012068:	2100      	movs	r1, #0
 801206a:	2077      	movs	r0, #119	@ 0x77
 801206c:	f7ff ff0d 	bl	8011e8a <SD_SendCmd>
 8012070:	4603      	mov	r3, r0
 8012072:	2b01      	cmp	r3, #1
 8012074:	d80e      	bhi.n	8012094 <SD_disk_initialize+0x160>
 8012076:	2100      	movs	r1, #0
 8012078:	2069      	movs	r0, #105	@ 0x69
 801207a:	f7ff ff06 	bl	8011e8a <SD_SendCmd>
 801207e:	4603      	mov	r3, r0
 8012080:	2b00      	cmp	r3, #0
 8012082:	d107      	bne.n	8012094 <SD_disk_initialize+0x160>
 8012084:	e00c      	b.n	80120a0 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8012086:	2100      	movs	r1, #0
 8012088:	2041      	movs	r0, #65	@ 0x41
 801208a:	f7ff fefe 	bl	8011e8a <SD_SendCmd>
 801208e:	4603      	mov	r3, r0
 8012090:	2b00      	cmp	r3, #0
 8012092:	d004      	beq.n	801209e <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 8012094:	4b18      	ldr	r3, [pc, #96]	@ (80120f8 <SD_disk_initialize+0x1c4>)
 8012096:	881b      	ldrh	r3, [r3, #0]
 8012098:	2b00      	cmp	r3, #0
 801209a:	d1e2      	bne.n	8012062 <SD_disk_initialize+0x12e>
 801209c:	e000      	b.n	80120a0 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 801209e:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80120a0:	4b15      	ldr	r3, [pc, #84]	@ (80120f8 <SD_disk_initialize+0x1c4>)
 80120a2:	881b      	ldrh	r3, [r3, #0]
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d007      	beq.n	80120b8 <SD_disk_initialize+0x184>
 80120a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80120ac:	2050      	movs	r0, #80	@ 0x50
 80120ae:	f7ff feec 	bl	8011e8a <SD_SendCmd>
 80120b2:	4603      	mov	r3, r0
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d001      	beq.n	80120bc <SD_disk_initialize+0x188>
 80120b8:	2300      	movs	r3, #0
 80120ba:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 80120bc:	4a0f      	ldr	r2, [pc, #60]	@ (80120fc <SD_disk_initialize+0x1c8>)
 80120be:	7bbb      	ldrb	r3, [r7, #14]
 80120c0:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 80120c2:	f7ff fd93 	bl	8011bec <DESELECT>
  SPI_RxByte();
 80120c6:	f7ff fdd1 	bl	8011c6c <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 80120ca:	7bbb      	ldrb	r3, [r7, #14]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d008      	beq.n	80120e2 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 80120d0:	4b08      	ldr	r3, [pc, #32]	@ (80120f4 <SD_disk_initialize+0x1c0>)
 80120d2:	781b      	ldrb	r3, [r3, #0]
 80120d4:	b2db      	uxtb	r3, r3
 80120d6:	f023 0301 	bic.w	r3, r3, #1
 80120da:	b2da      	uxtb	r2, r3
 80120dc:	4b05      	ldr	r3, [pc, #20]	@ (80120f4 <SD_disk_initialize+0x1c0>)
 80120de:	701a      	strb	r2, [r3, #0]
 80120e0:	e001      	b.n	80120e6 <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80120e2:	f7ff fe49 	bl	8011d78 <SD_PowerOff>
  }
  return Stat;
 80120e6:	4b03      	ldr	r3, [pc, #12]	@ (80120f4 <SD_disk_initialize+0x1c0>)
 80120e8:	781b      	ldrb	r3, [r3, #0]
 80120ea:	b2db      	uxtb	r3, r3
}
 80120ec:	4618      	mov	r0, r3
 80120ee:	3714      	adds	r7, #20
 80120f0:	46bd      	mov	sp, r7
 80120f2:	bd90      	pop	{r4, r7, pc}
 80120f4:	240000c0 	.word	0x240000c0
 80120f8:	240028b0 	.word	0x240028b0
 80120fc:	240028b4 	.word	0x240028b4

08012100 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8012100:	b480      	push	{r7}
 8012102:	b083      	sub	sp, #12
 8012104:	af00      	add	r7, sp, #0
 8012106:	4603      	mov	r3, r0
 8012108:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 801210a:	79fb      	ldrb	r3, [r7, #7]
 801210c:	2b00      	cmp	r3, #0
 801210e:	d001      	beq.n	8012114 <SD_disk_status+0x14>
 8012110:	2301      	movs	r3, #1
 8012112:	e002      	b.n	801211a <SD_disk_status+0x1a>
  return Stat;
 8012114:	4b04      	ldr	r3, [pc, #16]	@ (8012128 <SD_disk_status+0x28>)
 8012116:	781b      	ldrb	r3, [r3, #0]
 8012118:	b2db      	uxtb	r3, r3
}
 801211a:	4618      	mov	r0, r3
 801211c:	370c      	adds	r7, #12
 801211e:	46bd      	mov	sp, r7
 8012120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012124:	4770      	bx	lr
 8012126:	bf00      	nop
 8012128:	240000c0 	.word	0x240000c0

0801212c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 801212c:	b580      	push	{r7, lr}
 801212e:	b084      	sub	sp, #16
 8012130:	af00      	add	r7, sp, #0
 8012132:	60b9      	str	r1, [r7, #8]
 8012134:	607a      	str	r2, [r7, #4]
 8012136:	603b      	str	r3, [r7, #0]
 8012138:	4603      	mov	r3, r0
 801213a:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 801213c:	7bfb      	ldrb	r3, [r7, #15]
 801213e:	2b00      	cmp	r3, #0
 8012140:	d102      	bne.n	8012148 <SD_disk_read+0x1c>
 8012142:	683b      	ldr	r3, [r7, #0]
 8012144:	2b00      	cmp	r3, #0
 8012146:	d101      	bne.n	801214c <SD_disk_read+0x20>
 8012148:	2304      	movs	r3, #4
 801214a:	e051      	b.n	80121f0 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801214c:	4b2a      	ldr	r3, [pc, #168]	@ (80121f8 <SD_disk_read+0xcc>)
 801214e:	781b      	ldrb	r3, [r3, #0]
 8012150:	b2db      	uxtb	r3, r3
 8012152:	f003 0301 	and.w	r3, r3, #1
 8012156:	2b00      	cmp	r3, #0
 8012158:	d001      	beq.n	801215e <SD_disk_read+0x32>
 801215a:	2303      	movs	r3, #3
 801215c:	e048      	b.n	80121f0 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 801215e:	4b27      	ldr	r3, [pc, #156]	@ (80121fc <SD_disk_read+0xd0>)
 8012160:	781b      	ldrb	r3, [r3, #0]
 8012162:	f003 0304 	and.w	r3, r3, #4
 8012166:	2b00      	cmp	r3, #0
 8012168:	d102      	bne.n	8012170 <SD_disk_read+0x44>
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	025b      	lsls	r3, r3, #9
 801216e:	607b      	str	r3, [r7, #4]

  SELECT();
 8012170:	f7ff fd30 	bl	8011bd4 <SELECT>

  if (count == 1)
 8012174:	683b      	ldr	r3, [r7, #0]
 8012176:	2b01      	cmp	r3, #1
 8012178:	d111      	bne.n	801219e <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 801217a:	6879      	ldr	r1, [r7, #4]
 801217c:	2051      	movs	r0, #81	@ 0x51
 801217e:	f7ff fe84 	bl	8011e8a <SD_SendCmd>
 8012182:	4603      	mov	r3, r0
 8012184:	2b00      	cmp	r3, #0
 8012186:	d129      	bne.n	80121dc <SD_disk_read+0xb0>
 8012188:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801218c:	68b8      	ldr	r0, [r7, #8]
 801218e:	f7ff fe0b 	bl	8011da8 <SD_RxDataBlock>
 8012192:	4603      	mov	r3, r0
 8012194:	2b00      	cmp	r3, #0
 8012196:	d021      	beq.n	80121dc <SD_disk_read+0xb0>
 8012198:	2300      	movs	r3, #0
 801219a:	603b      	str	r3, [r7, #0]
 801219c:	e01e      	b.n	80121dc <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 801219e:	6879      	ldr	r1, [r7, #4]
 80121a0:	2052      	movs	r0, #82	@ 0x52
 80121a2:	f7ff fe72 	bl	8011e8a <SD_SendCmd>
 80121a6:	4603      	mov	r3, r0
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d117      	bne.n	80121dc <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 80121ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80121b0:	68b8      	ldr	r0, [r7, #8]
 80121b2:	f7ff fdf9 	bl	8011da8 <SD_RxDataBlock>
 80121b6:	4603      	mov	r3, r0
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d00a      	beq.n	80121d2 <SD_disk_read+0xa6>
        buff += 512;
 80121bc:	68bb      	ldr	r3, [r7, #8]
 80121be:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80121c2:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80121c4:	683b      	ldr	r3, [r7, #0]
 80121c6:	3b01      	subs	r3, #1
 80121c8:	603b      	str	r3, [r7, #0]
 80121ca:	683b      	ldr	r3, [r7, #0]
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d1ed      	bne.n	80121ac <SD_disk_read+0x80>
 80121d0:	e000      	b.n	80121d4 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 80121d2:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 80121d4:	2100      	movs	r1, #0
 80121d6:	204c      	movs	r0, #76	@ 0x4c
 80121d8:	f7ff fe57 	bl	8011e8a <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 80121dc:	f7ff fd06 	bl	8011bec <DESELECT>
  SPI_RxByte();
 80121e0:	f7ff fd44 	bl	8011c6c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80121e4:	683b      	ldr	r3, [r7, #0]
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	bf14      	ite	ne
 80121ea:	2301      	movne	r3, #1
 80121ec:	2300      	moveq	r3, #0
 80121ee:	b2db      	uxtb	r3, r3
}
 80121f0:	4618      	mov	r0, r3
 80121f2:	3710      	adds	r7, #16
 80121f4:	46bd      	mov	sp, r7
 80121f6:	bd80      	pop	{r7, pc}
 80121f8:	240000c0 	.word	0x240000c0
 80121fc:	240028b4 	.word	0x240028b4

08012200 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8012200:	b580      	push	{r7, lr}
 8012202:	b084      	sub	sp, #16
 8012204:	af00      	add	r7, sp, #0
 8012206:	60b9      	str	r1, [r7, #8]
 8012208:	607a      	str	r2, [r7, #4]
 801220a:	603b      	str	r3, [r7, #0]
 801220c:	4603      	mov	r3, r0
 801220e:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8012210:	7bfb      	ldrb	r3, [r7, #15]
 8012212:	2b00      	cmp	r3, #0
 8012214:	d102      	bne.n	801221c <SD_disk_write+0x1c>
 8012216:	683b      	ldr	r3, [r7, #0]
 8012218:	2b00      	cmp	r3, #0
 801221a:	d101      	bne.n	8012220 <SD_disk_write+0x20>
 801221c:	2304      	movs	r3, #4
 801221e:	e06b      	b.n	80122f8 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8012220:	4b37      	ldr	r3, [pc, #220]	@ (8012300 <SD_disk_write+0x100>)
 8012222:	781b      	ldrb	r3, [r3, #0]
 8012224:	b2db      	uxtb	r3, r3
 8012226:	f003 0301 	and.w	r3, r3, #1
 801222a:	2b00      	cmp	r3, #0
 801222c:	d001      	beq.n	8012232 <SD_disk_write+0x32>
 801222e:	2303      	movs	r3, #3
 8012230:	e062      	b.n	80122f8 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8012232:	4b33      	ldr	r3, [pc, #204]	@ (8012300 <SD_disk_write+0x100>)
 8012234:	781b      	ldrb	r3, [r3, #0]
 8012236:	b2db      	uxtb	r3, r3
 8012238:	f003 0304 	and.w	r3, r3, #4
 801223c:	2b00      	cmp	r3, #0
 801223e:	d001      	beq.n	8012244 <SD_disk_write+0x44>
 8012240:	2302      	movs	r3, #2
 8012242:	e059      	b.n	80122f8 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8012244:	4b2f      	ldr	r3, [pc, #188]	@ (8012304 <SD_disk_write+0x104>)
 8012246:	781b      	ldrb	r3, [r3, #0]
 8012248:	f003 0304 	and.w	r3, r3, #4
 801224c:	2b00      	cmp	r3, #0
 801224e:	d102      	bne.n	8012256 <SD_disk_write+0x56>
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	025b      	lsls	r3, r3, #9
 8012254:	607b      	str	r3, [r7, #4]

  SELECT();
 8012256:	f7ff fcbd 	bl	8011bd4 <SELECT>

  if (count == 1)
 801225a:	683b      	ldr	r3, [r7, #0]
 801225c:	2b01      	cmp	r3, #1
 801225e:	d110      	bne.n	8012282 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8012260:	6879      	ldr	r1, [r7, #4]
 8012262:	2058      	movs	r0, #88	@ 0x58
 8012264:	f7ff fe11 	bl	8011e8a <SD_SendCmd>
 8012268:	4603      	mov	r3, r0
 801226a:	2b00      	cmp	r3, #0
 801226c:	d13a      	bne.n	80122e4 <SD_disk_write+0xe4>
 801226e:	21fe      	movs	r1, #254	@ 0xfe
 8012270:	68b8      	ldr	r0, [r7, #8]
 8012272:	f7ff fdc7 	bl	8011e04 <SD_TxDataBlock>
 8012276:	4603      	mov	r3, r0
 8012278:	2b00      	cmp	r3, #0
 801227a:	d033      	beq.n	80122e4 <SD_disk_write+0xe4>
      count = 0;
 801227c:	2300      	movs	r3, #0
 801227e:	603b      	str	r3, [r7, #0]
 8012280:	e030      	b.n	80122e4 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8012282:	4b20      	ldr	r3, [pc, #128]	@ (8012304 <SD_disk_write+0x104>)
 8012284:	781b      	ldrb	r3, [r3, #0]
 8012286:	f003 0302 	and.w	r3, r3, #2
 801228a:	2b00      	cmp	r3, #0
 801228c:	d007      	beq.n	801229e <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 801228e:	2100      	movs	r1, #0
 8012290:	2077      	movs	r0, #119	@ 0x77
 8012292:	f7ff fdfa 	bl	8011e8a <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8012296:	6839      	ldr	r1, [r7, #0]
 8012298:	2057      	movs	r0, #87	@ 0x57
 801229a:	f7ff fdf6 	bl	8011e8a <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 801229e:	6879      	ldr	r1, [r7, #4]
 80122a0:	2059      	movs	r0, #89	@ 0x59
 80122a2:	f7ff fdf2 	bl	8011e8a <SD_SendCmd>
 80122a6:	4603      	mov	r3, r0
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d11b      	bne.n	80122e4 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80122ac:	21fc      	movs	r1, #252	@ 0xfc
 80122ae:	68b8      	ldr	r0, [r7, #8]
 80122b0:	f7ff fda8 	bl	8011e04 <SD_TxDataBlock>
 80122b4:	4603      	mov	r3, r0
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d00a      	beq.n	80122d0 <SD_disk_write+0xd0>
        buff += 512;
 80122ba:	68bb      	ldr	r3, [r7, #8]
 80122bc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80122c0:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80122c2:	683b      	ldr	r3, [r7, #0]
 80122c4:	3b01      	subs	r3, #1
 80122c6:	603b      	str	r3, [r7, #0]
 80122c8:	683b      	ldr	r3, [r7, #0]
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d1ee      	bne.n	80122ac <SD_disk_write+0xac>
 80122ce:	e000      	b.n	80122d2 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80122d0:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 80122d2:	21fd      	movs	r1, #253	@ 0xfd
 80122d4:	2000      	movs	r0, #0
 80122d6:	f7ff fd95 	bl	8011e04 <SD_TxDataBlock>
 80122da:	4603      	mov	r3, r0
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d101      	bne.n	80122e4 <SD_disk_write+0xe4>
      {
        count = 1;
 80122e0:	2301      	movs	r3, #1
 80122e2:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 80122e4:	f7ff fc82 	bl	8011bec <DESELECT>
  SPI_RxByte();
 80122e8:	f7ff fcc0 	bl	8011c6c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80122ec:	683b      	ldr	r3, [r7, #0]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	bf14      	ite	ne
 80122f2:	2301      	movne	r3, #1
 80122f4:	2300      	moveq	r3, #0
 80122f6:	b2db      	uxtb	r3, r3
}
 80122f8:	4618      	mov	r0, r3
 80122fa:	3710      	adds	r7, #16
 80122fc:	46bd      	mov	sp, r7
 80122fe:	bd80      	pop	{r7, pc}
 8012300:	240000c0 	.word	0x240000c0
 8012304:	240028b4 	.word	0x240028b4

08012308 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8012308:	b590      	push	{r4, r7, lr}
 801230a:	b08b      	sub	sp, #44	@ 0x2c
 801230c:	af00      	add	r7, sp, #0
 801230e:	4603      	mov	r3, r0
 8012310:	603a      	str	r2, [r7, #0]
 8012312:	71fb      	strb	r3, [r7, #7]
 8012314:	460b      	mov	r3, r1
 8012316:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8012318:	683b      	ldr	r3, [r7, #0]
 801231a:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 801231c:	79fb      	ldrb	r3, [r7, #7]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d001      	beq.n	8012326 <SD_disk_ioctl+0x1e>
 8012322:	2304      	movs	r3, #4
 8012324:	e113      	b.n	801254e <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 8012326:	2301      	movs	r3, #1
 8012328:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 801232c:	79bb      	ldrb	r3, [r7, #6]
 801232e:	2b05      	cmp	r3, #5
 8012330:	d124      	bne.n	801237c <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8012332:	6a3b      	ldr	r3, [r7, #32]
 8012334:	781b      	ldrb	r3, [r3, #0]
 8012336:	2b02      	cmp	r3, #2
 8012338:	d012      	beq.n	8012360 <SD_disk_ioctl+0x58>
 801233a:	2b02      	cmp	r3, #2
 801233c:	dc1a      	bgt.n	8012374 <SD_disk_ioctl+0x6c>
 801233e:	2b00      	cmp	r3, #0
 8012340:	d002      	beq.n	8012348 <SD_disk_ioctl+0x40>
 8012342:	2b01      	cmp	r3, #1
 8012344:	d006      	beq.n	8012354 <SD_disk_ioctl+0x4c>
 8012346:	e015      	b.n	8012374 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8012348:	f7ff fd16 	bl	8011d78 <SD_PowerOff>
      res = RES_OK;
 801234c:	2300      	movs	r3, #0
 801234e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8012352:	e0fa      	b.n	801254a <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 8012354:	f7ff fcce 	bl	8011cf4 <SD_PowerOn>
      res = RES_OK;
 8012358:	2300      	movs	r3, #0
 801235a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 801235e:	e0f4      	b.n	801254a <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8012360:	6a3b      	ldr	r3, [r7, #32]
 8012362:	1c5c      	adds	r4, r3, #1
 8012364:	f7ff fd14 	bl	8011d90 <SD_CheckPower>
 8012368:	4603      	mov	r3, r0
 801236a:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 801236c:	2300      	movs	r3, #0
 801236e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8012372:	e0ea      	b.n	801254a <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 8012374:	2304      	movs	r3, #4
 8012376:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801237a:	e0e6      	b.n	801254a <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT){
 801237c:	4b76      	ldr	r3, [pc, #472]	@ (8012558 <SD_disk_ioctl+0x250>)
 801237e:	781b      	ldrb	r3, [r3, #0]
 8012380:	b2db      	uxtb	r3, r3
 8012382:	f003 0301 	and.w	r3, r3, #1
 8012386:	2b00      	cmp	r3, #0
 8012388:	d001      	beq.n	801238e <SD_disk_ioctl+0x86>
    	return RES_NOTRDY;
 801238a:	2303      	movs	r3, #3
 801238c:	e0df      	b.n	801254e <SD_disk_ioctl+0x246>
    }
    SELECT();
 801238e:	f7ff fc21 	bl	8011bd4 <SELECT>
    switch (ctrl)
 8012392:	79bb      	ldrb	r3, [r7, #6]
 8012394:	2b0d      	cmp	r3, #13
 8012396:	f200 80c9 	bhi.w	801252c <SD_disk_ioctl+0x224>
 801239a:	a201      	add	r2, pc, #4	@ (adr r2, 80123a0 <SD_disk_ioctl+0x98>)
 801239c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123a0:	08012497 	.word	0x08012497
 80123a4:	080123d9 	.word	0x080123d9
 80123a8:	08012487 	.word	0x08012487
 80123ac:	0801252d 	.word	0x0801252d
 80123b0:	0801252d 	.word	0x0801252d
 80123b4:	0801252d 	.word	0x0801252d
 80123b8:	0801252d 	.word	0x0801252d
 80123bc:	0801252d 	.word	0x0801252d
 80123c0:	0801252d 	.word	0x0801252d
 80123c4:	0801252d 	.word	0x0801252d
 80123c8:	0801252d 	.word	0x0801252d
 80123cc:	080124a9 	.word	0x080124a9
 80123d0:	080124cd 	.word	0x080124cd
 80123d4:	080124f1 	.word	0x080124f1
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80123d8:	2100      	movs	r1, #0
 80123da:	2049      	movs	r0, #73	@ 0x49
 80123dc:	f7ff fd55 	bl	8011e8a <SD_SendCmd>
 80123e0:	4603      	mov	r3, r0
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	f040 80a6 	bne.w	8012534 <SD_disk_ioctl+0x22c>
 80123e8:	f107 030c 	add.w	r3, r7, #12
 80123ec:	2110      	movs	r1, #16
 80123ee:	4618      	mov	r0, r3
 80123f0:	f7ff fcda 	bl	8011da8 <SD_RxDataBlock>
 80123f4:	4603      	mov	r3, r0
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	f000 809c 	beq.w	8012534 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 80123fc:	7b3b      	ldrb	r3, [r7, #12]
 80123fe:	099b      	lsrs	r3, r3, #6
 8012400:	b2db      	uxtb	r3, r3
 8012402:	2b01      	cmp	r3, #1
 8012404:	d10d      	bne.n	8012422 <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8012406:	7d7b      	ldrb	r3, [r7, #21]
 8012408:	461a      	mov	r2, r3
 801240a:	7d3b      	ldrb	r3, [r7, #20]
 801240c:	021b      	lsls	r3, r3, #8
 801240e:	b29b      	uxth	r3, r3
 8012410:	4413      	add	r3, r2
 8012412:	b29b      	uxth	r3, r3
 8012414:	3301      	adds	r3, #1
 8012416:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8012418:	8bfb      	ldrh	r3, [r7, #30]
 801241a:	029a      	lsls	r2, r3, #10
 801241c:	683b      	ldr	r3, [r7, #0]
 801241e:	601a      	str	r2, [r3, #0]
 8012420:	e02d      	b.n	801247e <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8012422:	7c7b      	ldrb	r3, [r7, #17]
 8012424:	f003 030f 	and.w	r3, r3, #15
 8012428:	b2da      	uxtb	r2, r3
 801242a:	7dbb      	ldrb	r3, [r7, #22]
 801242c:	09db      	lsrs	r3, r3, #7
 801242e:	b2db      	uxtb	r3, r3
 8012430:	4413      	add	r3, r2
 8012432:	b2da      	uxtb	r2, r3
 8012434:	7d7b      	ldrb	r3, [r7, #21]
 8012436:	005b      	lsls	r3, r3, #1
 8012438:	b2db      	uxtb	r3, r3
 801243a:	f003 0306 	and.w	r3, r3, #6
 801243e:	b2db      	uxtb	r3, r3
 8012440:	4413      	add	r3, r2
 8012442:	b2db      	uxtb	r3, r3
 8012444:	3302      	adds	r3, #2
 8012446:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 801244a:	7d3b      	ldrb	r3, [r7, #20]
 801244c:	099b      	lsrs	r3, r3, #6
 801244e:	b2db      	uxtb	r3, r3
 8012450:	461a      	mov	r2, r3
 8012452:	7cfb      	ldrb	r3, [r7, #19]
 8012454:	009b      	lsls	r3, r3, #2
 8012456:	b29b      	uxth	r3, r3
 8012458:	4413      	add	r3, r2
 801245a:	b29a      	uxth	r2, r3
 801245c:	7cbb      	ldrb	r3, [r7, #18]
 801245e:	029b      	lsls	r3, r3, #10
 8012460:	b29b      	uxth	r3, r3
 8012462:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8012466:	b29b      	uxth	r3, r3
 8012468:	4413      	add	r3, r2
 801246a:	b29b      	uxth	r3, r3
 801246c:	3301      	adds	r3, #1
 801246e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8012470:	8bfa      	ldrh	r2, [r7, #30]
 8012472:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012476:	3b09      	subs	r3, #9
 8012478:	409a      	lsls	r2, r3
 801247a:	683b      	ldr	r3, [r7, #0]
 801247c:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 801247e:	2300      	movs	r3, #0
 8012480:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8012484:	e056      	b.n	8012534 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8012486:	683b      	ldr	r3, [r7, #0]
 8012488:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801248c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 801248e:	2300      	movs	r3, #0
 8012490:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8012494:	e055      	b.n	8012542 <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8012496:	f7ff fc13 	bl	8011cc0 <SD_ReadyWait>
 801249a:	4603      	mov	r3, r0
 801249c:	2bff      	cmp	r3, #255	@ 0xff
 801249e:	d14b      	bne.n	8012538 <SD_disk_ioctl+0x230>
 80124a0:	2300      	movs	r3, #0
 80124a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80124a6:	e047      	b.n	8012538 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80124a8:	2100      	movs	r1, #0
 80124aa:	2049      	movs	r0, #73	@ 0x49
 80124ac:	f7ff fced 	bl	8011e8a <SD_SendCmd>
 80124b0:	4603      	mov	r3, r0
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d142      	bne.n	801253c <SD_disk_ioctl+0x234>
 80124b6:	2110      	movs	r1, #16
 80124b8:	6a38      	ldr	r0, [r7, #32]
 80124ba:	f7ff fc75 	bl	8011da8 <SD_RxDataBlock>
 80124be:	4603      	mov	r3, r0
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d03b      	beq.n	801253c <SD_disk_ioctl+0x234>
 80124c4:	2300      	movs	r3, #0
 80124c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80124ca:	e037      	b.n	801253c <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80124cc:	2100      	movs	r1, #0
 80124ce:	204a      	movs	r0, #74	@ 0x4a
 80124d0:	f7ff fcdb 	bl	8011e8a <SD_SendCmd>
 80124d4:	4603      	mov	r3, r0
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d132      	bne.n	8012540 <SD_disk_ioctl+0x238>
 80124da:	2110      	movs	r1, #16
 80124dc:	6a38      	ldr	r0, [r7, #32]
 80124de:	f7ff fc63 	bl	8011da8 <SD_RxDataBlock>
 80124e2:	4603      	mov	r3, r0
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d02b      	beq.n	8012540 <SD_disk_ioctl+0x238>
 80124e8:	2300      	movs	r3, #0
 80124ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80124ee:	e027      	b.n	8012540 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 80124f0:	2100      	movs	r1, #0
 80124f2:	207a      	movs	r0, #122	@ 0x7a
 80124f4:	f7ff fcc9 	bl	8011e8a <SD_SendCmd>
 80124f8:	4603      	mov	r3, r0
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d116      	bne.n	801252c <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 80124fe:	2300      	movs	r3, #0
 8012500:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012504:	e00b      	b.n	801251e <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 8012506:	6a3c      	ldr	r4, [r7, #32]
 8012508:	1c63      	adds	r3, r4, #1
 801250a:	623b      	str	r3, [r7, #32]
 801250c:	f7ff fbae 	bl	8011c6c <SPI_RxByte>
 8012510:	4603      	mov	r3, r0
 8012512:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8012514:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012518:	3301      	adds	r3, #1
 801251a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801251e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012522:	2b03      	cmp	r3, #3
 8012524:	d9ef      	bls.n	8012506 <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 8012526:	2300      	movs	r3, #0
 8012528:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 801252c:	2304      	movs	r3, #4
 801252e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012532:	e006      	b.n	8012542 <SD_disk_ioctl+0x23a>
      break;
 8012534:	bf00      	nop
 8012536:	e004      	b.n	8012542 <SD_disk_ioctl+0x23a>
      break;
 8012538:	bf00      	nop
 801253a:	e002      	b.n	8012542 <SD_disk_ioctl+0x23a>
      break;
 801253c:	bf00      	nop
 801253e:	e000      	b.n	8012542 <SD_disk_ioctl+0x23a>
      break;
 8012540:	bf00      	nop
    }
    DESELECT();
 8012542:	f7ff fb53 	bl	8011bec <DESELECT>
    SPI_RxByte();
 8012546:	f7ff fb91 	bl	8011c6c <SPI_RxByte>
  }
  return res;
 801254a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801254e:	4618      	mov	r0, r3
 8012550:	372c      	adds	r7, #44	@ 0x2c
 8012552:	46bd      	mov	sp, r7
 8012554:	bd90      	pop	{r4, r7, pc}
 8012556:	bf00      	nop
 8012558:	240000c0 	.word	0x240000c0

0801255c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801255c:	b580      	push	{r7, lr}
 801255e:	b084      	sub	sp, #16
 8012560:	af00      	add	r7, sp, #0
 8012562:	4603      	mov	r3, r0
 8012564:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8012566:	79fb      	ldrb	r3, [r7, #7]
 8012568:	4a08      	ldr	r2, [pc, #32]	@ (801258c <disk_status+0x30>)
 801256a:	009b      	lsls	r3, r3, #2
 801256c:	4413      	add	r3, r2
 801256e:	685b      	ldr	r3, [r3, #4]
 8012570:	685b      	ldr	r3, [r3, #4]
 8012572:	79fa      	ldrb	r2, [r7, #7]
 8012574:	4905      	ldr	r1, [pc, #20]	@ (801258c <disk_status+0x30>)
 8012576:	440a      	add	r2, r1
 8012578:	7a12      	ldrb	r2, [r2, #8]
 801257a:	4610      	mov	r0, r2
 801257c:	4798      	blx	r3
 801257e:	4603      	mov	r3, r0
 8012580:	73fb      	strb	r3, [r7, #15]
  return stat;
 8012582:	7bfb      	ldrb	r3, [r7, #15]
}
 8012584:	4618      	mov	r0, r3
 8012586:	3710      	adds	r7, #16
 8012588:	46bd      	mov	sp, r7
 801258a:	bd80      	pop	{r7, pc}
 801258c:	240028b8 	.word	0x240028b8

08012590 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8012590:	b590      	push	{r4, r7, lr}
 8012592:	b087      	sub	sp, #28
 8012594:	af00      	add	r7, sp, #0
 8012596:	60b9      	str	r1, [r7, #8]
 8012598:	607a      	str	r2, [r7, #4]
 801259a:	603b      	str	r3, [r7, #0]
 801259c:	4603      	mov	r3, r0
 801259e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80125a0:	7bfb      	ldrb	r3, [r7, #15]
 80125a2:	4a0a      	ldr	r2, [pc, #40]	@ (80125cc <disk_read+0x3c>)
 80125a4:	009b      	lsls	r3, r3, #2
 80125a6:	4413      	add	r3, r2
 80125a8:	685b      	ldr	r3, [r3, #4]
 80125aa:	689c      	ldr	r4, [r3, #8]
 80125ac:	7bfb      	ldrb	r3, [r7, #15]
 80125ae:	4a07      	ldr	r2, [pc, #28]	@ (80125cc <disk_read+0x3c>)
 80125b0:	4413      	add	r3, r2
 80125b2:	7a18      	ldrb	r0, [r3, #8]
 80125b4:	683b      	ldr	r3, [r7, #0]
 80125b6:	687a      	ldr	r2, [r7, #4]
 80125b8:	68b9      	ldr	r1, [r7, #8]
 80125ba:	47a0      	blx	r4
 80125bc:	4603      	mov	r3, r0
 80125be:	75fb      	strb	r3, [r7, #23]
  return res;
 80125c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80125c2:	4618      	mov	r0, r3
 80125c4:	371c      	adds	r7, #28
 80125c6:	46bd      	mov	sp, r7
 80125c8:	bd90      	pop	{r4, r7, pc}
 80125ca:	bf00      	nop
 80125cc:	240028b8 	.word	0x240028b8

080125d0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80125d0:	b590      	push	{r4, r7, lr}
 80125d2:	b087      	sub	sp, #28
 80125d4:	af00      	add	r7, sp, #0
 80125d6:	60b9      	str	r1, [r7, #8]
 80125d8:	607a      	str	r2, [r7, #4]
 80125da:	603b      	str	r3, [r7, #0]
 80125dc:	4603      	mov	r3, r0
 80125de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80125e0:	7bfb      	ldrb	r3, [r7, #15]
 80125e2:	4a0a      	ldr	r2, [pc, #40]	@ (801260c <disk_write+0x3c>)
 80125e4:	009b      	lsls	r3, r3, #2
 80125e6:	4413      	add	r3, r2
 80125e8:	685b      	ldr	r3, [r3, #4]
 80125ea:	68dc      	ldr	r4, [r3, #12]
 80125ec:	7bfb      	ldrb	r3, [r7, #15]
 80125ee:	4a07      	ldr	r2, [pc, #28]	@ (801260c <disk_write+0x3c>)
 80125f0:	4413      	add	r3, r2
 80125f2:	7a18      	ldrb	r0, [r3, #8]
 80125f4:	683b      	ldr	r3, [r7, #0]
 80125f6:	687a      	ldr	r2, [r7, #4]
 80125f8:	68b9      	ldr	r1, [r7, #8]
 80125fa:	47a0      	blx	r4
 80125fc:	4603      	mov	r3, r0
 80125fe:	75fb      	strb	r3, [r7, #23]
  return res;
 8012600:	7dfb      	ldrb	r3, [r7, #23]
}
 8012602:	4618      	mov	r0, r3
 8012604:	371c      	adds	r7, #28
 8012606:	46bd      	mov	sp, r7
 8012608:	bd90      	pop	{r4, r7, pc}
 801260a:	bf00      	nop
 801260c:	240028b8 	.word	0x240028b8

08012610 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012610:	b580      	push	{r7, lr}
 8012612:	b084      	sub	sp, #16
 8012614:	af00      	add	r7, sp, #0
 8012616:	4603      	mov	r3, r0
 8012618:	603a      	str	r2, [r7, #0]
 801261a:	71fb      	strb	r3, [r7, #7]
 801261c:	460b      	mov	r3, r1
 801261e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012620:	79fb      	ldrb	r3, [r7, #7]
 8012622:	4a09      	ldr	r2, [pc, #36]	@ (8012648 <disk_ioctl+0x38>)
 8012624:	009b      	lsls	r3, r3, #2
 8012626:	4413      	add	r3, r2
 8012628:	685b      	ldr	r3, [r3, #4]
 801262a:	691b      	ldr	r3, [r3, #16]
 801262c:	79fa      	ldrb	r2, [r7, #7]
 801262e:	4906      	ldr	r1, [pc, #24]	@ (8012648 <disk_ioctl+0x38>)
 8012630:	440a      	add	r2, r1
 8012632:	7a10      	ldrb	r0, [r2, #8]
 8012634:	79b9      	ldrb	r1, [r7, #6]
 8012636:	683a      	ldr	r2, [r7, #0]
 8012638:	4798      	blx	r3
 801263a:	4603      	mov	r3, r0
 801263c:	73fb      	strb	r3, [r7, #15]
  return res;
 801263e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012640:	4618      	mov	r0, r3
 8012642:	3710      	adds	r7, #16
 8012644:	46bd      	mov	sp, r7
 8012646:	bd80      	pop	{r7, pc}
 8012648:	240028b8 	.word	0x240028b8

0801264c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801264c:	b480      	push	{r7}
 801264e:	b085      	sub	sp, #20
 8012650:	af00      	add	r7, sp, #0
 8012652:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	3301      	adds	r3, #1
 8012658:	781b      	ldrb	r3, [r3, #0]
 801265a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801265c:	89fb      	ldrh	r3, [r7, #14]
 801265e:	021b      	lsls	r3, r3, #8
 8012660:	b21a      	sxth	r2, r3
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	781b      	ldrb	r3, [r3, #0]
 8012666:	b21b      	sxth	r3, r3
 8012668:	4313      	orrs	r3, r2
 801266a:	b21b      	sxth	r3, r3
 801266c:	81fb      	strh	r3, [r7, #14]
	return rv;
 801266e:	89fb      	ldrh	r3, [r7, #14]
}
 8012670:	4618      	mov	r0, r3
 8012672:	3714      	adds	r7, #20
 8012674:	46bd      	mov	sp, r7
 8012676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801267a:	4770      	bx	lr

0801267c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801267c:	b480      	push	{r7}
 801267e:	b085      	sub	sp, #20
 8012680:	af00      	add	r7, sp, #0
 8012682:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	3303      	adds	r3, #3
 8012688:	781b      	ldrb	r3, [r3, #0]
 801268a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	021b      	lsls	r3, r3, #8
 8012690:	687a      	ldr	r2, [r7, #4]
 8012692:	3202      	adds	r2, #2
 8012694:	7812      	ldrb	r2, [r2, #0]
 8012696:	4313      	orrs	r3, r2
 8012698:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	021b      	lsls	r3, r3, #8
 801269e:	687a      	ldr	r2, [r7, #4]
 80126a0:	3201      	adds	r2, #1
 80126a2:	7812      	ldrb	r2, [r2, #0]
 80126a4:	4313      	orrs	r3, r2
 80126a6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	021b      	lsls	r3, r3, #8
 80126ac:	687a      	ldr	r2, [r7, #4]
 80126ae:	7812      	ldrb	r2, [r2, #0]
 80126b0:	4313      	orrs	r3, r2
 80126b2:	60fb      	str	r3, [r7, #12]
	return rv;
 80126b4:	68fb      	ldr	r3, [r7, #12]
}
 80126b6:	4618      	mov	r0, r3
 80126b8:	3714      	adds	r7, #20
 80126ba:	46bd      	mov	sp, r7
 80126bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c0:	4770      	bx	lr

080126c2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80126c2:	b480      	push	{r7}
 80126c4:	b083      	sub	sp, #12
 80126c6:	af00      	add	r7, sp, #0
 80126c8:	6078      	str	r0, [r7, #4]
 80126ca:	460b      	mov	r3, r1
 80126cc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	1c5a      	adds	r2, r3, #1
 80126d2:	607a      	str	r2, [r7, #4]
 80126d4:	887a      	ldrh	r2, [r7, #2]
 80126d6:	b2d2      	uxtb	r2, r2
 80126d8:	701a      	strb	r2, [r3, #0]
 80126da:	887b      	ldrh	r3, [r7, #2]
 80126dc:	0a1b      	lsrs	r3, r3, #8
 80126de:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	1c5a      	adds	r2, r3, #1
 80126e4:	607a      	str	r2, [r7, #4]
 80126e6:	887a      	ldrh	r2, [r7, #2]
 80126e8:	b2d2      	uxtb	r2, r2
 80126ea:	701a      	strb	r2, [r3, #0]
}
 80126ec:	bf00      	nop
 80126ee:	370c      	adds	r7, #12
 80126f0:	46bd      	mov	sp, r7
 80126f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126f6:	4770      	bx	lr

080126f8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80126f8:	b480      	push	{r7}
 80126fa:	b083      	sub	sp, #12
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	6078      	str	r0, [r7, #4]
 8012700:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	1c5a      	adds	r2, r3, #1
 8012706:	607a      	str	r2, [r7, #4]
 8012708:	683a      	ldr	r2, [r7, #0]
 801270a:	b2d2      	uxtb	r2, r2
 801270c:	701a      	strb	r2, [r3, #0]
 801270e:	683b      	ldr	r3, [r7, #0]
 8012710:	0a1b      	lsrs	r3, r3, #8
 8012712:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	1c5a      	adds	r2, r3, #1
 8012718:	607a      	str	r2, [r7, #4]
 801271a:	683a      	ldr	r2, [r7, #0]
 801271c:	b2d2      	uxtb	r2, r2
 801271e:	701a      	strb	r2, [r3, #0]
 8012720:	683b      	ldr	r3, [r7, #0]
 8012722:	0a1b      	lsrs	r3, r3, #8
 8012724:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	1c5a      	adds	r2, r3, #1
 801272a:	607a      	str	r2, [r7, #4]
 801272c:	683a      	ldr	r2, [r7, #0]
 801272e:	b2d2      	uxtb	r2, r2
 8012730:	701a      	strb	r2, [r3, #0]
 8012732:	683b      	ldr	r3, [r7, #0]
 8012734:	0a1b      	lsrs	r3, r3, #8
 8012736:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	1c5a      	adds	r2, r3, #1
 801273c:	607a      	str	r2, [r7, #4]
 801273e:	683a      	ldr	r2, [r7, #0]
 8012740:	b2d2      	uxtb	r2, r2
 8012742:	701a      	strb	r2, [r3, #0]
}
 8012744:	bf00      	nop
 8012746:	370c      	adds	r7, #12
 8012748:	46bd      	mov	sp, r7
 801274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801274e:	4770      	bx	lr

08012750 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8012750:	b480      	push	{r7}
 8012752:	b087      	sub	sp, #28
 8012754:	af00      	add	r7, sp, #0
 8012756:	60f8      	str	r0, [r7, #12]
 8012758:	60b9      	str	r1, [r7, #8]
 801275a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8012760:	68bb      	ldr	r3, [r7, #8]
 8012762:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	2b00      	cmp	r3, #0
 8012768:	d00d      	beq.n	8012786 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801276a:	693a      	ldr	r2, [r7, #16]
 801276c:	1c53      	adds	r3, r2, #1
 801276e:	613b      	str	r3, [r7, #16]
 8012770:	697b      	ldr	r3, [r7, #20]
 8012772:	1c59      	adds	r1, r3, #1
 8012774:	6179      	str	r1, [r7, #20]
 8012776:	7812      	ldrb	r2, [r2, #0]
 8012778:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	3b01      	subs	r3, #1
 801277e:	607b      	str	r3, [r7, #4]
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d1f1      	bne.n	801276a <mem_cpy+0x1a>
	}
}
 8012786:	bf00      	nop
 8012788:	371c      	adds	r7, #28
 801278a:	46bd      	mov	sp, r7
 801278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012790:	4770      	bx	lr

08012792 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8012792:	b480      	push	{r7}
 8012794:	b087      	sub	sp, #28
 8012796:	af00      	add	r7, sp, #0
 8012798:	60f8      	str	r0, [r7, #12]
 801279a:	60b9      	str	r1, [r7, #8]
 801279c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80127a2:	697b      	ldr	r3, [r7, #20]
 80127a4:	1c5a      	adds	r2, r3, #1
 80127a6:	617a      	str	r2, [r7, #20]
 80127a8:	68ba      	ldr	r2, [r7, #8]
 80127aa:	b2d2      	uxtb	r2, r2
 80127ac:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	3b01      	subs	r3, #1
 80127b2:	607b      	str	r3, [r7, #4]
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d1f3      	bne.n	80127a2 <mem_set+0x10>
}
 80127ba:	bf00      	nop
 80127bc:	bf00      	nop
 80127be:	371c      	adds	r7, #28
 80127c0:	46bd      	mov	sp, r7
 80127c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127c6:	4770      	bx	lr

080127c8 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80127c8:	b580      	push	{r7, lr}
 80127ca:	b082      	sub	sp, #8
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d009      	beq.n	80127ea <lock_fs+0x22>
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	691b      	ldr	r3, [r3, #16]
 80127da:	4618      	mov	r0, r3
 80127dc:	f000 fe6f 	bl	80134be <ff_req_grant>
 80127e0:	4603      	mov	r3, r0
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d001      	beq.n	80127ea <lock_fs+0x22>
 80127e6:	2301      	movs	r3, #1
 80127e8:	e000      	b.n	80127ec <lock_fs+0x24>
 80127ea:	2300      	movs	r3, #0
}
 80127ec:	4618      	mov	r0, r3
 80127ee:	3708      	adds	r7, #8
 80127f0:	46bd      	mov	sp, r7
 80127f2:	bd80      	pop	{r7, pc}

080127f4 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b082      	sub	sp, #8
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6078      	str	r0, [r7, #4]
 80127fc:	460b      	mov	r3, r1
 80127fe:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d00d      	beq.n	8012822 <unlock_fs+0x2e>
 8012806:	78fb      	ldrb	r3, [r7, #3]
 8012808:	2b0c      	cmp	r3, #12
 801280a:	d00a      	beq.n	8012822 <unlock_fs+0x2e>
 801280c:	78fb      	ldrb	r3, [r7, #3]
 801280e:	2b0b      	cmp	r3, #11
 8012810:	d007      	beq.n	8012822 <unlock_fs+0x2e>
 8012812:	78fb      	ldrb	r3, [r7, #3]
 8012814:	2b0f      	cmp	r3, #15
 8012816:	d004      	beq.n	8012822 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	691b      	ldr	r3, [r3, #16]
 801281c:	4618      	mov	r0, r3
 801281e:	f000 fe63 	bl	80134e8 <ff_rel_grant>
	}
}
 8012822:	bf00      	nop
 8012824:	3708      	adds	r7, #8
 8012826:	46bd      	mov	sp, r7
 8012828:	bd80      	pop	{r7, pc}

0801282a <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801282a:	b580      	push	{r7, lr}
 801282c:	b086      	sub	sp, #24
 801282e:	af00      	add	r7, sp, #0
 8012830:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8012832:	2300      	movs	r3, #0
 8012834:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	78db      	ldrb	r3, [r3, #3]
 801283a:	2b00      	cmp	r3, #0
 801283c:	d034      	beq.n	80128a8 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012842:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	7858      	ldrb	r0, [r3, #1]
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801284e:	2301      	movs	r3, #1
 8012850:	697a      	ldr	r2, [r7, #20]
 8012852:	f7ff febd 	bl	80125d0 <disk_write>
 8012856:	4603      	mov	r3, r0
 8012858:	2b00      	cmp	r3, #0
 801285a:	d002      	beq.n	8012862 <sync_window+0x38>
			res = FR_DISK_ERR;
 801285c:	2301      	movs	r3, #1
 801285e:	73fb      	strb	r3, [r7, #15]
 8012860:	e022      	b.n	80128a8 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	2200      	movs	r2, #0
 8012866:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801286c:	697a      	ldr	r2, [r7, #20]
 801286e:	1ad2      	subs	r2, r2, r3
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	6a1b      	ldr	r3, [r3, #32]
 8012874:	429a      	cmp	r2, r3
 8012876:	d217      	bcs.n	80128a8 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	789b      	ldrb	r3, [r3, #2]
 801287c:	613b      	str	r3, [r7, #16]
 801287e:	e010      	b.n	80128a2 <sync_window+0x78>
					wsect += fs->fsize;
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	6a1b      	ldr	r3, [r3, #32]
 8012884:	697a      	ldr	r2, [r7, #20]
 8012886:	4413      	add	r3, r2
 8012888:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	7858      	ldrb	r0, [r3, #1]
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8012894:	2301      	movs	r3, #1
 8012896:	697a      	ldr	r2, [r7, #20]
 8012898:	f7ff fe9a 	bl	80125d0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801289c:	693b      	ldr	r3, [r7, #16]
 801289e:	3b01      	subs	r3, #1
 80128a0:	613b      	str	r3, [r7, #16]
 80128a2:	693b      	ldr	r3, [r7, #16]
 80128a4:	2b01      	cmp	r3, #1
 80128a6:	d8eb      	bhi.n	8012880 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80128a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80128aa:	4618      	mov	r0, r3
 80128ac:	3718      	adds	r7, #24
 80128ae:	46bd      	mov	sp, r7
 80128b0:	bd80      	pop	{r7, pc}

080128b2 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80128b2:	b580      	push	{r7, lr}
 80128b4:	b084      	sub	sp, #16
 80128b6:	af00      	add	r7, sp, #0
 80128b8:	6078      	str	r0, [r7, #4]
 80128ba:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80128bc:	2300      	movs	r3, #0
 80128be:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80128c4:	683a      	ldr	r2, [r7, #0]
 80128c6:	429a      	cmp	r2, r3
 80128c8:	d01b      	beq.n	8012902 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80128ca:	6878      	ldr	r0, [r7, #4]
 80128cc:	f7ff ffad 	bl	801282a <sync_window>
 80128d0:	4603      	mov	r3, r0
 80128d2:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80128d4:	7bfb      	ldrb	r3, [r7, #15]
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d113      	bne.n	8012902 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	7858      	ldrb	r0, [r3, #1]
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80128e4:	2301      	movs	r3, #1
 80128e6:	683a      	ldr	r2, [r7, #0]
 80128e8:	f7ff fe52 	bl	8012590 <disk_read>
 80128ec:	4603      	mov	r3, r0
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d004      	beq.n	80128fc <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80128f2:	f04f 33ff 	mov.w	r3, #4294967295
 80128f6:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80128f8:	2301      	movs	r3, #1
 80128fa:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	683a      	ldr	r2, [r7, #0]
 8012900:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8012902:	7bfb      	ldrb	r3, [r7, #15]
}
 8012904:	4618      	mov	r0, r3
 8012906:	3710      	adds	r7, #16
 8012908:	46bd      	mov	sp, r7
 801290a:	bd80      	pop	{r7, pc}

0801290c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801290c:	b580      	push	{r7, lr}
 801290e:	b084      	sub	sp, #16
 8012910:	af00      	add	r7, sp, #0
 8012912:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8012914:	6878      	ldr	r0, [r7, #4]
 8012916:	f7ff ff88 	bl	801282a <sync_window>
 801291a:	4603      	mov	r3, r0
 801291c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801291e:	7bfb      	ldrb	r3, [r7, #15]
 8012920:	2b00      	cmp	r3, #0
 8012922:	d158      	bne.n	80129d6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	781b      	ldrb	r3, [r3, #0]
 8012928:	2b03      	cmp	r3, #3
 801292a:	d148      	bne.n	80129be <sync_fs+0xb2>
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	791b      	ldrb	r3, [r3, #4]
 8012930:	2b01      	cmp	r3, #1
 8012932:	d144      	bne.n	80129be <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	3338      	adds	r3, #56	@ 0x38
 8012938:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801293c:	2100      	movs	r1, #0
 801293e:	4618      	mov	r0, r3
 8012940:	f7ff ff27 	bl	8012792 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	3338      	adds	r3, #56	@ 0x38
 8012948:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801294c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8012950:	4618      	mov	r0, r3
 8012952:	f7ff feb6 	bl	80126c2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	3338      	adds	r3, #56	@ 0x38
 801295a:	4921      	ldr	r1, [pc, #132]	@ (80129e0 <sync_fs+0xd4>)
 801295c:	4618      	mov	r0, r3
 801295e:	f7ff fecb 	bl	80126f8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	3338      	adds	r3, #56	@ 0x38
 8012966:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801296a:	491e      	ldr	r1, [pc, #120]	@ (80129e4 <sync_fs+0xd8>)
 801296c:	4618      	mov	r0, r3
 801296e:	f7ff fec3 	bl	80126f8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	3338      	adds	r3, #56	@ 0x38
 8012976:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	699b      	ldr	r3, [r3, #24]
 801297e:	4619      	mov	r1, r3
 8012980:	4610      	mov	r0, r2
 8012982:	f7ff feb9 	bl	80126f8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	3338      	adds	r3, #56	@ 0x38
 801298a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	695b      	ldr	r3, [r3, #20]
 8012992:	4619      	mov	r1, r3
 8012994:	4610      	mov	r0, r2
 8012996:	f7ff feaf 	bl	80126f8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801299e:	1c5a      	adds	r2, r3, #1
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	7858      	ldrb	r0, [r3, #1]
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80129b2:	2301      	movs	r3, #1
 80129b4:	f7ff fe0c 	bl	80125d0 <disk_write>
			fs->fsi_flag = 0;
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	2200      	movs	r2, #0
 80129bc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	785b      	ldrb	r3, [r3, #1]
 80129c2:	2200      	movs	r2, #0
 80129c4:	2100      	movs	r1, #0
 80129c6:	4618      	mov	r0, r3
 80129c8:	f7ff fe22 	bl	8012610 <disk_ioctl>
 80129cc:	4603      	mov	r3, r0
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d001      	beq.n	80129d6 <sync_fs+0xca>
 80129d2:	2301      	movs	r3, #1
 80129d4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80129d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80129d8:	4618      	mov	r0, r3
 80129da:	3710      	adds	r7, #16
 80129dc:	46bd      	mov	sp, r7
 80129de:	bd80      	pop	{r7, pc}
 80129e0:	41615252 	.word	0x41615252
 80129e4:	61417272 	.word	0x61417272

080129e8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80129e8:	b480      	push	{r7}
 80129ea:	b083      	sub	sp, #12
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	6078      	str	r0, [r7, #4]
 80129f0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80129f2:	683b      	ldr	r3, [r7, #0]
 80129f4:	3b02      	subs	r3, #2
 80129f6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	69db      	ldr	r3, [r3, #28]
 80129fc:	3b02      	subs	r3, #2
 80129fe:	683a      	ldr	r2, [r7, #0]
 8012a00:	429a      	cmp	r2, r3
 8012a02:	d301      	bcc.n	8012a08 <clust2sect+0x20>
 8012a04:	2300      	movs	r3, #0
 8012a06:	e008      	b.n	8012a1a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	895b      	ldrh	r3, [r3, #10]
 8012a0c:	461a      	mov	r2, r3
 8012a0e:	683b      	ldr	r3, [r7, #0]
 8012a10:	fb03 f202 	mul.w	r2, r3, r2
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012a18:	4413      	add	r3, r2
}
 8012a1a:	4618      	mov	r0, r3
 8012a1c:	370c      	adds	r7, #12
 8012a1e:	46bd      	mov	sp, r7
 8012a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a24:	4770      	bx	lr

08012a26 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8012a26:	b580      	push	{r7, lr}
 8012a28:	b086      	sub	sp, #24
 8012a2a:	af00      	add	r7, sp, #0
 8012a2c:	6078      	str	r0, [r7, #4]
 8012a2e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8012a36:	683b      	ldr	r3, [r7, #0]
 8012a38:	2b01      	cmp	r3, #1
 8012a3a:	d904      	bls.n	8012a46 <get_fat+0x20>
 8012a3c:	693b      	ldr	r3, [r7, #16]
 8012a3e:	69db      	ldr	r3, [r3, #28]
 8012a40:	683a      	ldr	r2, [r7, #0]
 8012a42:	429a      	cmp	r2, r3
 8012a44:	d302      	bcc.n	8012a4c <get_fat+0x26>
		val = 1;	/* Internal error */
 8012a46:	2301      	movs	r3, #1
 8012a48:	617b      	str	r3, [r7, #20]
 8012a4a:	e08e      	b.n	8012b6a <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8012a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8012a50:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8012a52:	693b      	ldr	r3, [r7, #16]
 8012a54:	781b      	ldrb	r3, [r3, #0]
 8012a56:	2b03      	cmp	r3, #3
 8012a58:	d061      	beq.n	8012b1e <get_fat+0xf8>
 8012a5a:	2b03      	cmp	r3, #3
 8012a5c:	dc7b      	bgt.n	8012b56 <get_fat+0x130>
 8012a5e:	2b01      	cmp	r3, #1
 8012a60:	d002      	beq.n	8012a68 <get_fat+0x42>
 8012a62:	2b02      	cmp	r3, #2
 8012a64:	d041      	beq.n	8012aea <get_fat+0xc4>
 8012a66:	e076      	b.n	8012b56 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8012a68:	683b      	ldr	r3, [r7, #0]
 8012a6a:	60fb      	str	r3, [r7, #12]
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	085b      	lsrs	r3, r3, #1
 8012a70:	68fa      	ldr	r2, [r7, #12]
 8012a72:	4413      	add	r3, r2
 8012a74:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012a76:	693b      	ldr	r3, [r7, #16]
 8012a78:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012a7a:	68fb      	ldr	r3, [r7, #12]
 8012a7c:	0a5b      	lsrs	r3, r3, #9
 8012a7e:	4413      	add	r3, r2
 8012a80:	4619      	mov	r1, r3
 8012a82:	6938      	ldr	r0, [r7, #16]
 8012a84:	f7ff ff15 	bl	80128b2 <move_window>
 8012a88:	4603      	mov	r3, r0
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d166      	bne.n	8012b5c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	1c5a      	adds	r2, r3, #1
 8012a92:	60fa      	str	r2, [r7, #12]
 8012a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012a98:	693a      	ldr	r2, [r7, #16]
 8012a9a:	4413      	add	r3, r2
 8012a9c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012aa0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012aa2:	693b      	ldr	r3, [r7, #16]
 8012aa4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	0a5b      	lsrs	r3, r3, #9
 8012aaa:	4413      	add	r3, r2
 8012aac:	4619      	mov	r1, r3
 8012aae:	6938      	ldr	r0, [r7, #16]
 8012ab0:	f7ff feff 	bl	80128b2 <move_window>
 8012ab4:	4603      	mov	r3, r0
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d152      	bne.n	8012b60 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012ac0:	693a      	ldr	r2, [r7, #16]
 8012ac2:	4413      	add	r3, r2
 8012ac4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012ac8:	021b      	lsls	r3, r3, #8
 8012aca:	68ba      	ldr	r2, [r7, #8]
 8012acc:	4313      	orrs	r3, r2
 8012ace:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012ad0:	683b      	ldr	r3, [r7, #0]
 8012ad2:	f003 0301 	and.w	r3, r3, #1
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d002      	beq.n	8012ae0 <get_fat+0xba>
 8012ada:	68bb      	ldr	r3, [r7, #8]
 8012adc:	091b      	lsrs	r3, r3, #4
 8012ade:	e002      	b.n	8012ae6 <get_fat+0xc0>
 8012ae0:	68bb      	ldr	r3, [r7, #8]
 8012ae2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012ae6:	617b      	str	r3, [r7, #20]
			break;
 8012ae8:	e03f      	b.n	8012b6a <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012aea:	693b      	ldr	r3, [r7, #16]
 8012aec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012aee:	683b      	ldr	r3, [r7, #0]
 8012af0:	0a1b      	lsrs	r3, r3, #8
 8012af2:	4413      	add	r3, r2
 8012af4:	4619      	mov	r1, r3
 8012af6:	6938      	ldr	r0, [r7, #16]
 8012af8:	f7ff fedb 	bl	80128b2 <move_window>
 8012afc:	4603      	mov	r3, r0
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d130      	bne.n	8012b64 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8012b02:	693b      	ldr	r3, [r7, #16]
 8012b04:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8012b08:	683b      	ldr	r3, [r7, #0]
 8012b0a:	005b      	lsls	r3, r3, #1
 8012b0c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8012b10:	4413      	add	r3, r2
 8012b12:	4618      	mov	r0, r3
 8012b14:	f7ff fd9a 	bl	801264c <ld_word>
 8012b18:	4603      	mov	r3, r0
 8012b1a:	617b      	str	r3, [r7, #20]
			break;
 8012b1c:	e025      	b.n	8012b6a <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012b1e:	693b      	ldr	r3, [r7, #16]
 8012b20:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012b22:	683b      	ldr	r3, [r7, #0]
 8012b24:	09db      	lsrs	r3, r3, #7
 8012b26:	4413      	add	r3, r2
 8012b28:	4619      	mov	r1, r3
 8012b2a:	6938      	ldr	r0, [r7, #16]
 8012b2c:	f7ff fec1 	bl	80128b2 <move_window>
 8012b30:	4603      	mov	r3, r0
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d118      	bne.n	8012b68 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8012b36:	693b      	ldr	r3, [r7, #16]
 8012b38:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8012b3c:	683b      	ldr	r3, [r7, #0]
 8012b3e:	009b      	lsls	r3, r3, #2
 8012b40:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8012b44:	4413      	add	r3, r2
 8012b46:	4618      	mov	r0, r3
 8012b48:	f7ff fd98 	bl	801267c <ld_dword>
 8012b4c:	4603      	mov	r3, r0
 8012b4e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8012b52:	617b      	str	r3, [r7, #20]
			break;
 8012b54:	e009      	b.n	8012b6a <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8012b56:	2301      	movs	r3, #1
 8012b58:	617b      	str	r3, [r7, #20]
 8012b5a:	e006      	b.n	8012b6a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012b5c:	bf00      	nop
 8012b5e:	e004      	b.n	8012b6a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012b60:	bf00      	nop
 8012b62:	e002      	b.n	8012b6a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012b64:	bf00      	nop
 8012b66:	e000      	b.n	8012b6a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012b68:	bf00      	nop
		}
	}

	return val;
 8012b6a:	697b      	ldr	r3, [r7, #20]
}
 8012b6c:	4618      	mov	r0, r3
 8012b6e:	3718      	adds	r7, #24
 8012b70:	46bd      	mov	sp, r7
 8012b72:	bd80      	pop	{r7, pc}

08012b74 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8012b74:	b590      	push	{r4, r7, lr}
 8012b76:	b089      	sub	sp, #36	@ 0x24
 8012b78:	af00      	add	r7, sp, #0
 8012b7a:	60f8      	str	r0, [r7, #12]
 8012b7c:	60b9      	str	r1, [r7, #8]
 8012b7e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8012b80:	2302      	movs	r3, #2
 8012b82:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8012b84:	68bb      	ldr	r3, [r7, #8]
 8012b86:	2b01      	cmp	r3, #1
 8012b88:	f240 80d9 	bls.w	8012d3e <put_fat+0x1ca>
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	69db      	ldr	r3, [r3, #28]
 8012b90:	68ba      	ldr	r2, [r7, #8]
 8012b92:	429a      	cmp	r2, r3
 8012b94:	f080 80d3 	bcs.w	8012d3e <put_fat+0x1ca>
		switch (fs->fs_type) {
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	781b      	ldrb	r3, [r3, #0]
 8012b9c:	2b03      	cmp	r3, #3
 8012b9e:	f000 8096 	beq.w	8012cce <put_fat+0x15a>
 8012ba2:	2b03      	cmp	r3, #3
 8012ba4:	f300 80cb 	bgt.w	8012d3e <put_fat+0x1ca>
 8012ba8:	2b01      	cmp	r3, #1
 8012baa:	d002      	beq.n	8012bb2 <put_fat+0x3e>
 8012bac:	2b02      	cmp	r3, #2
 8012bae:	d06e      	beq.n	8012c8e <put_fat+0x11a>
 8012bb0:	e0c5      	b.n	8012d3e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8012bb2:	68bb      	ldr	r3, [r7, #8]
 8012bb4:	61bb      	str	r3, [r7, #24]
 8012bb6:	69bb      	ldr	r3, [r7, #24]
 8012bb8:	085b      	lsrs	r3, r3, #1
 8012bba:	69ba      	ldr	r2, [r7, #24]
 8012bbc:	4413      	add	r3, r2
 8012bbe:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012bc4:	69bb      	ldr	r3, [r7, #24]
 8012bc6:	0a5b      	lsrs	r3, r3, #9
 8012bc8:	4413      	add	r3, r2
 8012bca:	4619      	mov	r1, r3
 8012bcc:	68f8      	ldr	r0, [r7, #12]
 8012bce:	f7ff fe70 	bl	80128b2 <move_window>
 8012bd2:	4603      	mov	r3, r0
 8012bd4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012bd6:	7ffb      	ldrb	r3, [r7, #31]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	f040 80a9 	bne.w	8012d30 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8012bde:	68fb      	ldr	r3, [r7, #12]
 8012be0:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8012be4:	69bb      	ldr	r3, [r7, #24]
 8012be6:	1c59      	adds	r1, r3, #1
 8012be8:	61b9      	str	r1, [r7, #24]
 8012bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012bee:	4413      	add	r3, r2
 8012bf0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8012bf2:	68bb      	ldr	r3, [r7, #8]
 8012bf4:	f003 0301 	and.w	r3, r3, #1
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d00d      	beq.n	8012c18 <put_fat+0xa4>
 8012bfc:	697b      	ldr	r3, [r7, #20]
 8012bfe:	781b      	ldrb	r3, [r3, #0]
 8012c00:	b25b      	sxtb	r3, r3
 8012c02:	f003 030f 	and.w	r3, r3, #15
 8012c06:	b25a      	sxtb	r2, r3
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	b2db      	uxtb	r3, r3
 8012c0c:	011b      	lsls	r3, r3, #4
 8012c0e:	b25b      	sxtb	r3, r3
 8012c10:	4313      	orrs	r3, r2
 8012c12:	b25b      	sxtb	r3, r3
 8012c14:	b2db      	uxtb	r3, r3
 8012c16:	e001      	b.n	8012c1c <put_fat+0xa8>
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	b2db      	uxtb	r3, r3
 8012c1c:	697a      	ldr	r2, [r7, #20]
 8012c1e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	2201      	movs	r2, #1
 8012c24:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012c2a:	69bb      	ldr	r3, [r7, #24]
 8012c2c:	0a5b      	lsrs	r3, r3, #9
 8012c2e:	4413      	add	r3, r2
 8012c30:	4619      	mov	r1, r3
 8012c32:	68f8      	ldr	r0, [r7, #12]
 8012c34:	f7ff fe3d 	bl	80128b2 <move_window>
 8012c38:	4603      	mov	r3, r0
 8012c3a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012c3c:	7ffb      	ldrb	r3, [r7, #31]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d178      	bne.n	8012d34 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8012c48:	69bb      	ldr	r3, [r7, #24]
 8012c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c4e:	4413      	add	r3, r2
 8012c50:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8012c52:	68bb      	ldr	r3, [r7, #8]
 8012c54:	f003 0301 	and.w	r3, r3, #1
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d003      	beq.n	8012c64 <put_fat+0xf0>
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	091b      	lsrs	r3, r3, #4
 8012c60:	b2db      	uxtb	r3, r3
 8012c62:	e00e      	b.n	8012c82 <put_fat+0x10e>
 8012c64:	697b      	ldr	r3, [r7, #20]
 8012c66:	781b      	ldrb	r3, [r3, #0]
 8012c68:	b25b      	sxtb	r3, r3
 8012c6a:	f023 030f 	bic.w	r3, r3, #15
 8012c6e:	b25a      	sxtb	r2, r3
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	0a1b      	lsrs	r3, r3, #8
 8012c74:	b25b      	sxtb	r3, r3
 8012c76:	f003 030f 	and.w	r3, r3, #15
 8012c7a:	b25b      	sxtb	r3, r3
 8012c7c:	4313      	orrs	r3, r2
 8012c7e:	b25b      	sxtb	r3, r3
 8012c80:	b2db      	uxtb	r3, r3
 8012c82:	697a      	ldr	r2, [r7, #20]
 8012c84:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012c86:	68fb      	ldr	r3, [r7, #12]
 8012c88:	2201      	movs	r2, #1
 8012c8a:	70da      	strb	r2, [r3, #3]
			break;
 8012c8c:	e057      	b.n	8012d3e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8012c8e:	68fb      	ldr	r3, [r7, #12]
 8012c90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012c92:	68bb      	ldr	r3, [r7, #8]
 8012c94:	0a1b      	lsrs	r3, r3, #8
 8012c96:	4413      	add	r3, r2
 8012c98:	4619      	mov	r1, r3
 8012c9a:	68f8      	ldr	r0, [r7, #12]
 8012c9c:	f7ff fe09 	bl	80128b2 <move_window>
 8012ca0:	4603      	mov	r3, r0
 8012ca2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012ca4:	7ffb      	ldrb	r3, [r7, #31]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d146      	bne.n	8012d38 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8012cb0:	68bb      	ldr	r3, [r7, #8]
 8012cb2:	005b      	lsls	r3, r3, #1
 8012cb4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8012cb8:	4413      	add	r3, r2
 8012cba:	687a      	ldr	r2, [r7, #4]
 8012cbc:	b292      	uxth	r2, r2
 8012cbe:	4611      	mov	r1, r2
 8012cc0:	4618      	mov	r0, r3
 8012cc2:	f7ff fcfe 	bl	80126c2 <st_word>
			fs->wflag = 1;
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	2201      	movs	r2, #1
 8012cca:	70da      	strb	r2, [r3, #3]
			break;
 8012ccc:	e037      	b.n	8012d3e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012cd2:	68bb      	ldr	r3, [r7, #8]
 8012cd4:	09db      	lsrs	r3, r3, #7
 8012cd6:	4413      	add	r3, r2
 8012cd8:	4619      	mov	r1, r3
 8012cda:	68f8      	ldr	r0, [r7, #12]
 8012cdc:	f7ff fde9 	bl	80128b2 <move_window>
 8012ce0:	4603      	mov	r3, r0
 8012ce2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012ce4:	7ffb      	ldrb	r3, [r7, #31]
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d128      	bne.n	8012d3c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8012cf6:	68bb      	ldr	r3, [r7, #8]
 8012cf8:	009b      	lsls	r3, r3, #2
 8012cfa:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8012cfe:	4413      	add	r3, r2
 8012d00:	4618      	mov	r0, r3
 8012d02:	f7ff fcbb 	bl	801267c <ld_dword>
 8012d06:	4603      	mov	r3, r0
 8012d08:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8012d0c:	4323      	orrs	r3, r4
 8012d0e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8012d16:	68bb      	ldr	r3, [r7, #8]
 8012d18:	009b      	lsls	r3, r3, #2
 8012d1a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8012d1e:	4413      	add	r3, r2
 8012d20:	6879      	ldr	r1, [r7, #4]
 8012d22:	4618      	mov	r0, r3
 8012d24:	f7ff fce8 	bl	80126f8 <st_dword>
			fs->wflag = 1;
 8012d28:	68fb      	ldr	r3, [r7, #12]
 8012d2a:	2201      	movs	r2, #1
 8012d2c:	70da      	strb	r2, [r3, #3]
			break;
 8012d2e:	e006      	b.n	8012d3e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012d30:	bf00      	nop
 8012d32:	e004      	b.n	8012d3e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012d34:	bf00      	nop
 8012d36:	e002      	b.n	8012d3e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012d38:	bf00      	nop
 8012d3a:	e000      	b.n	8012d3e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012d3c:	bf00      	nop
		}
	}
	return res;
 8012d3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8012d40:	4618      	mov	r0, r3
 8012d42:	3724      	adds	r7, #36	@ 0x24
 8012d44:	46bd      	mov	sp, r7
 8012d46:	bd90      	pop	{r4, r7, pc}

08012d48 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8012d48:	b580      	push	{r7, lr}
 8012d4a:	b088      	sub	sp, #32
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	6078      	str	r0, [r7, #4]
 8012d50:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8012d58:	683b      	ldr	r3, [r7, #0]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d10d      	bne.n	8012d7a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8012d5e:	693b      	ldr	r3, [r7, #16]
 8012d60:	695b      	ldr	r3, [r3, #20]
 8012d62:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012d64:	69bb      	ldr	r3, [r7, #24]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d004      	beq.n	8012d74 <create_chain+0x2c>
 8012d6a:	693b      	ldr	r3, [r7, #16]
 8012d6c:	69db      	ldr	r3, [r3, #28]
 8012d6e:	69ba      	ldr	r2, [r7, #24]
 8012d70:	429a      	cmp	r2, r3
 8012d72:	d31b      	bcc.n	8012dac <create_chain+0x64>
 8012d74:	2301      	movs	r3, #1
 8012d76:	61bb      	str	r3, [r7, #24]
 8012d78:	e018      	b.n	8012dac <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012d7a:	6839      	ldr	r1, [r7, #0]
 8012d7c:	6878      	ldr	r0, [r7, #4]
 8012d7e:	f7ff fe52 	bl	8012a26 <get_fat>
 8012d82:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	2b01      	cmp	r3, #1
 8012d88:	d801      	bhi.n	8012d8e <create_chain+0x46>
 8012d8a:	2301      	movs	r3, #1
 8012d8c:	e070      	b.n	8012e70 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d94:	d101      	bne.n	8012d9a <create_chain+0x52>
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	e06a      	b.n	8012e70 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8012d9a:	693b      	ldr	r3, [r7, #16]
 8012d9c:	69db      	ldr	r3, [r3, #28]
 8012d9e:	68fa      	ldr	r2, [r7, #12]
 8012da0:	429a      	cmp	r2, r3
 8012da2:	d201      	bcs.n	8012da8 <create_chain+0x60>
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	e063      	b.n	8012e70 <create_chain+0x128>
		scl = clst;
 8012da8:	683b      	ldr	r3, [r7, #0]
 8012daa:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8012dac:	69bb      	ldr	r3, [r7, #24]
 8012dae:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8012db0:	69fb      	ldr	r3, [r7, #28]
 8012db2:	3301      	adds	r3, #1
 8012db4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012db6:	693b      	ldr	r3, [r7, #16]
 8012db8:	69db      	ldr	r3, [r3, #28]
 8012dba:	69fa      	ldr	r2, [r7, #28]
 8012dbc:	429a      	cmp	r2, r3
 8012dbe:	d307      	bcc.n	8012dd0 <create_chain+0x88>
				ncl = 2;
 8012dc0:	2302      	movs	r3, #2
 8012dc2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8012dc4:	69fa      	ldr	r2, [r7, #28]
 8012dc6:	69bb      	ldr	r3, [r7, #24]
 8012dc8:	429a      	cmp	r2, r3
 8012dca:	d901      	bls.n	8012dd0 <create_chain+0x88>
 8012dcc:	2300      	movs	r3, #0
 8012dce:	e04f      	b.n	8012e70 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8012dd0:	69f9      	ldr	r1, [r7, #28]
 8012dd2:	6878      	ldr	r0, [r7, #4]
 8012dd4:	f7ff fe27 	bl	8012a26 <get_fat>
 8012dd8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d00e      	beq.n	8012dfe <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	2b01      	cmp	r3, #1
 8012de4:	d003      	beq.n	8012dee <create_chain+0xa6>
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012dec:	d101      	bne.n	8012df2 <create_chain+0xaa>
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	e03e      	b.n	8012e70 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8012df2:	69fa      	ldr	r2, [r7, #28]
 8012df4:	69bb      	ldr	r3, [r7, #24]
 8012df6:	429a      	cmp	r2, r3
 8012df8:	d1da      	bne.n	8012db0 <create_chain+0x68>
 8012dfa:	2300      	movs	r3, #0
 8012dfc:	e038      	b.n	8012e70 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8012dfe:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8012e00:	f04f 32ff 	mov.w	r2, #4294967295
 8012e04:	69f9      	ldr	r1, [r7, #28]
 8012e06:	6938      	ldr	r0, [r7, #16]
 8012e08:	f7ff feb4 	bl	8012b74 <put_fat>
 8012e0c:	4603      	mov	r3, r0
 8012e0e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8012e10:	7dfb      	ldrb	r3, [r7, #23]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d109      	bne.n	8012e2a <create_chain+0xe2>
 8012e16:	683b      	ldr	r3, [r7, #0]
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d006      	beq.n	8012e2a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8012e1c:	69fa      	ldr	r2, [r7, #28]
 8012e1e:	6839      	ldr	r1, [r7, #0]
 8012e20:	6938      	ldr	r0, [r7, #16]
 8012e22:	f7ff fea7 	bl	8012b74 <put_fat>
 8012e26:	4603      	mov	r3, r0
 8012e28:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8012e2a:	7dfb      	ldrb	r3, [r7, #23]
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d116      	bne.n	8012e5e <create_chain+0x116>
		fs->last_clst = ncl;
 8012e30:	693b      	ldr	r3, [r7, #16]
 8012e32:	69fa      	ldr	r2, [r7, #28]
 8012e34:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012e36:	693b      	ldr	r3, [r7, #16]
 8012e38:	699a      	ldr	r2, [r3, #24]
 8012e3a:	693b      	ldr	r3, [r7, #16]
 8012e3c:	69db      	ldr	r3, [r3, #28]
 8012e3e:	3b02      	subs	r3, #2
 8012e40:	429a      	cmp	r2, r3
 8012e42:	d804      	bhi.n	8012e4e <create_chain+0x106>
 8012e44:	693b      	ldr	r3, [r7, #16]
 8012e46:	699b      	ldr	r3, [r3, #24]
 8012e48:	1e5a      	subs	r2, r3, #1
 8012e4a:	693b      	ldr	r3, [r7, #16]
 8012e4c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8012e4e:	693b      	ldr	r3, [r7, #16]
 8012e50:	791b      	ldrb	r3, [r3, #4]
 8012e52:	f043 0301 	orr.w	r3, r3, #1
 8012e56:	b2da      	uxtb	r2, r3
 8012e58:	693b      	ldr	r3, [r7, #16]
 8012e5a:	711a      	strb	r2, [r3, #4]
 8012e5c:	e007      	b.n	8012e6e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012e5e:	7dfb      	ldrb	r3, [r7, #23]
 8012e60:	2b01      	cmp	r3, #1
 8012e62:	d102      	bne.n	8012e6a <create_chain+0x122>
 8012e64:	f04f 33ff 	mov.w	r3, #4294967295
 8012e68:	e000      	b.n	8012e6c <create_chain+0x124>
 8012e6a:	2301      	movs	r3, #1
 8012e6c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8012e6e:	69fb      	ldr	r3, [r7, #28]
}
 8012e70:	4618      	mov	r0, r3
 8012e72:	3720      	adds	r7, #32
 8012e74:	46bd      	mov	sp, r7
 8012e76:	bd80      	pop	{r7, pc}

08012e78 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8012e78:	b480      	push	{r7}
 8012e7a:	b087      	sub	sp, #28
 8012e7c:	af00      	add	r7, sp, #0
 8012e7e:	6078      	str	r0, [r7, #4]
 8012e80:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e8c:	3304      	adds	r3, #4
 8012e8e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8012e90:	683b      	ldr	r3, [r7, #0]
 8012e92:	0a5b      	lsrs	r3, r3, #9
 8012e94:	68fa      	ldr	r2, [r7, #12]
 8012e96:	8952      	ldrh	r2, [r2, #10]
 8012e98:	fbb3 f3f2 	udiv	r3, r3, r2
 8012e9c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012e9e:	693b      	ldr	r3, [r7, #16]
 8012ea0:	1d1a      	adds	r2, r3, #4
 8012ea2:	613a      	str	r2, [r7, #16]
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8012ea8:	68bb      	ldr	r3, [r7, #8]
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d101      	bne.n	8012eb2 <clmt_clust+0x3a>
 8012eae:	2300      	movs	r3, #0
 8012eb0:	e010      	b.n	8012ed4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8012eb2:	697a      	ldr	r2, [r7, #20]
 8012eb4:	68bb      	ldr	r3, [r7, #8]
 8012eb6:	429a      	cmp	r2, r3
 8012eb8:	d307      	bcc.n	8012eca <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8012eba:	697a      	ldr	r2, [r7, #20]
 8012ebc:	68bb      	ldr	r3, [r7, #8]
 8012ebe:	1ad3      	subs	r3, r2, r3
 8012ec0:	617b      	str	r3, [r7, #20]
 8012ec2:	693b      	ldr	r3, [r7, #16]
 8012ec4:	3304      	adds	r3, #4
 8012ec6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012ec8:	e7e9      	b.n	8012e9e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8012eca:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8012ecc:	693b      	ldr	r3, [r7, #16]
 8012ece:	681a      	ldr	r2, [r3, #0]
 8012ed0:	697b      	ldr	r3, [r7, #20]
 8012ed2:	4413      	add	r3, r2
}
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	371c      	adds	r7, #28
 8012ed8:	46bd      	mov	sp, r7
 8012eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ede:	4770      	bx	lr

08012ee0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8012ee0:	b580      	push	{r7, lr}
 8012ee2:	b084      	sub	sp, #16
 8012ee4:	af00      	add	r7, sp, #0
 8012ee6:	60f8      	str	r0, [r7, #12]
 8012ee8:	60b9      	str	r1, [r7, #8]
 8012eea:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012eec:	68bb      	ldr	r3, [r7, #8]
 8012eee:	331a      	adds	r3, #26
 8012ef0:	687a      	ldr	r2, [r7, #4]
 8012ef2:	b292      	uxth	r2, r2
 8012ef4:	4611      	mov	r1, r2
 8012ef6:	4618      	mov	r0, r3
 8012ef8:	f7ff fbe3 	bl	80126c2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	781b      	ldrb	r3, [r3, #0]
 8012f00:	2b03      	cmp	r3, #3
 8012f02:	d109      	bne.n	8012f18 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012f04:	68bb      	ldr	r3, [r7, #8]
 8012f06:	f103 0214 	add.w	r2, r3, #20
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	0c1b      	lsrs	r3, r3, #16
 8012f0e:	b29b      	uxth	r3, r3
 8012f10:	4619      	mov	r1, r3
 8012f12:	4610      	mov	r0, r2
 8012f14:	f7ff fbd5 	bl	80126c2 <st_word>
	}
}
 8012f18:	bf00      	nop
 8012f1a:	3710      	adds	r7, #16
 8012f1c:	46bd      	mov	sp, r7
 8012f1e:	bd80      	pop	{r7, pc}

08012f20 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012f20:	b580      	push	{r7, lr}
 8012f22:	b084      	sub	sp, #16
 8012f24:	af00      	add	r7, sp, #0
 8012f26:	6078      	str	r0, [r7, #4]
 8012f28:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8012f2a:	2309      	movs	r3, #9
 8012f2c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d02e      	beq.n	8012f92 <validate+0x72>
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d02a      	beq.n	8012f92 <validate+0x72>
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	781b      	ldrb	r3, [r3, #0]
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d025      	beq.n	8012f92 <validate+0x72>
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	889a      	ldrh	r2, [r3, #4]
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	88db      	ldrh	r3, [r3, #6]
 8012f50:	429a      	cmp	r2, r3
 8012f52:	d11e      	bne.n	8012f92 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	4618      	mov	r0, r3
 8012f5a:	f7ff fc35 	bl	80127c8 <lock_fs>
 8012f5e:	4603      	mov	r3, r0
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d014      	beq.n	8012f8e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	681b      	ldr	r3, [r3, #0]
 8012f68:	785b      	ldrb	r3, [r3, #1]
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	f7ff faf6 	bl	801255c <disk_status>
 8012f70:	4603      	mov	r3, r0
 8012f72:	f003 0301 	and.w	r3, r3, #1
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d102      	bne.n	8012f80 <validate+0x60>
				res = FR_OK;
 8012f7a:	2300      	movs	r3, #0
 8012f7c:	73fb      	strb	r3, [r7, #15]
 8012f7e:	e008      	b.n	8012f92 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	681b      	ldr	r3, [r3, #0]
 8012f84:	2100      	movs	r1, #0
 8012f86:	4618      	mov	r0, r3
 8012f88:	f7ff fc34 	bl	80127f4 <unlock_fs>
 8012f8c:	e001      	b.n	8012f92 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8012f8e:	230f      	movs	r3, #15
 8012f90:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012f92:	7bfb      	ldrb	r3, [r7, #15]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d102      	bne.n	8012f9e <validate+0x7e>
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	e000      	b.n	8012fa0 <validate+0x80>
 8012f9e:	2300      	movs	r3, #0
 8012fa0:	683a      	ldr	r2, [r7, #0]
 8012fa2:	6013      	str	r3, [r2, #0]
	return res;
 8012fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	3710      	adds	r7, #16
 8012faa:	46bd      	mov	sp, r7
 8012fac:	bd80      	pop	{r7, pc}

08012fae <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8012fae:	b580      	push	{r7, lr}
 8012fb0:	b08c      	sub	sp, #48	@ 0x30
 8012fb2:	af00      	add	r7, sp, #0
 8012fb4:	60f8      	str	r0, [r7, #12]
 8012fb6:	60b9      	str	r1, [r7, #8]
 8012fb8:	607a      	str	r2, [r7, #4]
 8012fba:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8012fbc:	68bb      	ldr	r3, [r7, #8]
 8012fbe:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8012fc0:	683b      	ldr	r3, [r7, #0]
 8012fc2:	2200      	movs	r2, #0
 8012fc4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	f107 0210 	add.w	r2, r7, #16
 8012fcc:	4611      	mov	r1, r2
 8012fce:	4618      	mov	r0, r3
 8012fd0:	f7ff ffa6 	bl	8012f20 <validate>
 8012fd4:	4603      	mov	r3, r0
 8012fd6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012fda:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d107      	bne.n	8012ff2 <f_write+0x44>
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	7d5b      	ldrb	r3, [r3, #21]
 8012fe6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8012fea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d009      	beq.n	8013006 <f_write+0x58>
 8012ff2:	693b      	ldr	r3, [r7, #16]
 8012ff4:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8012ff8:	4611      	mov	r1, r2
 8012ffa:	4618      	mov	r0, r3
 8012ffc:	f7ff fbfa 	bl	80127f4 <unlock_fs>
 8013000:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013004:	e173      	b.n	80132ee <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	7d1b      	ldrb	r3, [r3, #20]
 801300a:	f003 0302 	and.w	r3, r3, #2
 801300e:	2b00      	cmp	r3, #0
 8013010:	d106      	bne.n	8013020 <f_write+0x72>
 8013012:	693b      	ldr	r3, [r7, #16]
 8013014:	2107      	movs	r1, #7
 8013016:	4618      	mov	r0, r3
 8013018:	f7ff fbec 	bl	80127f4 <unlock_fs>
 801301c:	2307      	movs	r3, #7
 801301e:	e166      	b.n	80132ee <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	699a      	ldr	r2, [r3, #24]
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	441a      	add	r2, r3
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	699b      	ldr	r3, [r3, #24]
 801302c:	429a      	cmp	r2, r3
 801302e:	f080 814b 	bcs.w	80132c8 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	699b      	ldr	r3, [r3, #24]
 8013036:	43db      	mvns	r3, r3
 8013038:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801303a:	e145      	b.n	80132c8 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	699b      	ldr	r3, [r3, #24]
 8013040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013044:	2b00      	cmp	r3, #0
 8013046:	f040 8101 	bne.w	801324c <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	699b      	ldr	r3, [r3, #24]
 801304e:	0a5b      	lsrs	r3, r3, #9
 8013050:	693a      	ldr	r2, [r7, #16]
 8013052:	8952      	ldrh	r2, [r2, #10]
 8013054:	3a01      	subs	r2, #1
 8013056:	4013      	ands	r3, r2
 8013058:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801305a:	69bb      	ldr	r3, [r7, #24]
 801305c:	2b00      	cmp	r3, #0
 801305e:	d14d      	bne.n	80130fc <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	699b      	ldr	r3, [r3, #24]
 8013064:	2b00      	cmp	r3, #0
 8013066:	d10c      	bne.n	8013082 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	689b      	ldr	r3, [r3, #8]
 801306c:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801306e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013070:	2b00      	cmp	r3, #0
 8013072:	d11a      	bne.n	80130aa <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	2100      	movs	r1, #0
 8013078:	4618      	mov	r0, r3
 801307a:	f7ff fe65 	bl	8012d48 <create_chain>
 801307e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8013080:	e013      	b.n	80130aa <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013086:	2b00      	cmp	r3, #0
 8013088:	d007      	beq.n	801309a <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	699b      	ldr	r3, [r3, #24]
 801308e:	4619      	mov	r1, r3
 8013090:	68f8      	ldr	r0, [r7, #12]
 8013092:	f7ff fef1 	bl	8012e78 <clmt_clust>
 8013096:	62b8      	str	r0, [r7, #40]	@ 0x28
 8013098:	e007      	b.n	80130aa <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801309a:	68fa      	ldr	r2, [r7, #12]
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	69db      	ldr	r3, [r3, #28]
 80130a0:	4619      	mov	r1, r3
 80130a2:	4610      	mov	r0, r2
 80130a4:	f7ff fe50 	bl	8012d48 <create_chain>
 80130a8:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80130aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	f000 8110 	beq.w	80132d2 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80130b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130b4:	2b01      	cmp	r3, #1
 80130b6:	d109      	bne.n	80130cc <f_write+0x11e>
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	2202      	movs	r2, #2
 80130bc:	755a      	strb	r2, [r3, #21]
 80130be:	693b      	ldr	r3, [r7, #16]
 80130c0:	2102      	movs	r1, #2
 80130c2:	4618      	mov	r0, r3
 80130c4:	f7ff fb96 	bl	80127f4 <unlock_fs>
 80130c8:	2302      	movs	r3, #2
 80130ca:	e110      	b.n	80132ee <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80130cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130d2:	d109      	bne.n	80130e8 <f_write+0x13a>
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	2201      	movs	r2, #1
 80130d8:	755a      	strb	r2, [r3, #21]
 80130da:	693b      	ldr	r3, [r7, #16]
 80130dc:	2101      	movs	r1, #1
 80130de:	4618      	mov	r0, r3
 80130e0:	f7ff fb88 	bl	80127f4 <unlock_fs>
 80130e4:	2301      	movs	r3, #1
 80130e6:	e102      	b.n	80132ee <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80130ec:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	689b      	ldr	r3, [r3, #8]
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d102      	bne.n	80130fc <f_write+0x14e>
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80130fa:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80130fc:	68fb      	ldr	r3, [r7, #12]
 80130fe:	7d1b      	ldrb	r3, [r3, #20]
 8013100:	b25b      	sxtb	r3, r3
 8013102:	2b00      	cmp	r3, #0
 8013104:	da1d      	bge.n	8013142 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013106:	693b      	ldr	r3, [r7, #16]
 8013108:	7858      	ldrb	r0, [r3, #1]
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	6a1a      	ldr	r2, [r3, #32]
 8013114:	2301      	movs	r3, #1
 8013116:	f7ff fa5b 	bl	80125d0 <disk_write>
 801311a:	4603      	mov	r3, r0
 801311c:	2b00      	cmp	r3, #0
 801311e:	d009      	beq.n	8013134 <f_write+0x186>
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	2201      	movs	r2, #1
 8013124:	755a      	strb	r2, [r3, #21]
 8013126:	693b      	ldr	r3, [r7, #16]
 8013128:	2101      	movs	r1, #1
 801312a:	4618      	mov	r0, r3
 801312c:	f7ff fb62 	bl	80127f4 <unlock_fs>
 8013130:	2301      	movs	r3, #1
 8013132:	e0dc      	b.n	80132ee <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	7d1b      	ldrb	r3, [r3, #20]
 8013138:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801313c:	b2da      	uxtb	r2, r3
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013142:	693a      	ldr	r2, [r7, #16]
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	69db      	ldr	r3, [r3, #28]
 8013148:	4619      	mov	r1, r3
 801314a:	4610      	mov	r0, r2
 801314c:	f7ff fc4c 	bl	80129e8 <clust2sect>
 8013150:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013152:	697b      	ldr	r3, [r7, #20]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d109      	bne.n	801316c <f_write+0x1be>
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	2202      	movs	r2, #2
 801315c:	755a      	strb	r2, [r3, #21]
 801315e:	693b      	ldr	r3, [r7, #16]
 8013160:	2102      	movs	r1, #2
 8013162:	4618      	mov	r0, r3
 8013164:	f7ff fb46 	bl	80127f4 <unlock_fs>
 8013168:	2302      	movs	r3, #2
 801316a:	e0c0      	b.n	80132ee <f_write+0x340>
			sect += csect;
 801316c:	697a      	ldr	r2, [r7, #20]
 801316e:	69bb      	ldr	r3, [r7, #24]
 8013170:	4413      	add	r3, r2
 8013172:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	0a5b      	lsrs	r3, r3, #9
 8013178:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801317a:	6a3b      	ldr	r3, [r7, #32]
 801317c:	2b00      	cmp	r3, #0
 801317e:	d041      	beq.n	8013204 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013180:	69ba      	ldr	r2, [r7, #24]
 8013182:	6a3b      	ldr	r3, [r7, #32]
 8013184:	4413      	add	r3, r2
 8013186:	693a      	ldr	r2, [r7, #16]
 8013188:	8952      	ldrh	r2, [r2, #10]
 801318a:	4293      	cmp	r3, r2
 801318c:	d905      	bls.n	801319a <f_write+0x1ec>
					cc = fs->csize - csect;
 801318e:	693b      	ldr	r3, [r7, #16]
 8013190:	895b      	ldrh	r3, [r3, #10]
 8013192:	461a      	mov	r2, r3
 8013194:	69bb      	ldr	r3, [r7, #24]
 8013196:	1ad3      	subs	r3, r2, r3
 8013198:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801319a:	693b      	ldr	r3, [r7, #16]
 801319c:	7858      	ldrb	r0, [r3, #1]
 801319e:	6a3b      	ldr	r3, [r7, #32]
 80131a0:	697a      	ldr	r2, [r7, #20]
 80131a2:	69f9      	ldr	r1, [r7, #28]
 80131a4:	f7ff fa14 	bl	80125d0 <disk_write>
 80131a8:	4603      	mov	r3, r0
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d009      	beq.n	80131c2 <f_write+0x214>
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	2201      	movs	r2, #1
 80131b2:	755a      	strb	r2, [r3, #21]
 80131b4:	693b      	ldr	r3, [r7, #16]
 80131b6:	2101      	movs	r1, #1
 80131b8:	4618      	mov	r0, r3
 80131ba:	f7ff fb1b 	bl	80127f4 <unlock_fs>
 80131be:	2301      	movs	r3, #1
 80131c0:	e095      	b.n	80132ee <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	6a1a      	ldr	r2, [r3, #32]
 80131c6:	697b      	ldr	r3, [r7, #20]
 80131c8:	1ad3      	subs	r3, r2, r3
 80131ca:	6a3a      	ldr	r2, [r7, #32]
 80131cc:	429a      	cmp	r2, r3
 80131ce:	d915      	bls.n	80131fc <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80131d0:	68fb      	ldr	r3, [r7, #12]
 80131d2:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	6a1a      	ldr	r2, [r3, #32]
 80131da:	697b      	ldr	r3, [r7, #20]
 80131dc:	1ad3      	subs	r3, r2, r3
 80131de:	025b      	lsls	r3, r3, #9
 80131e0:	69fa      	ldr	r2, [r7, #28]
 80131e2:	4413      	add	r3, r2
 80131e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80131e8:	4619      	mov	r1, r3
 80131ea:	f7ff fab1 	bl	8012750 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	7d1b      	ldrb	r3, [r3, #20]
 80131f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80131f6:	b2da      	uxtb	r2, r3
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80131fc:	6a3b      	ldr	r3, [r7, #32]
 80131fe:	025b      	lsls	r3, r3, #9
 8013200:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8013202:	e044      	b.n	801328e <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	6a1b      	ldr	r3, [r3, #32]
 8013208:	697a      	ldr	r2, [r7, #20]
 801320a:	429a      	cmp	r2, r3
 801320c:	d01b      	beq.n	8013246 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 801320e:	68fb      	ldr	r3, [r7, #12]
 8013210:	699a      	ldr	r2, [r3, #24]
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013216:	429a      	cmp	r2, r3
 8013218:	d215      	bcs.n	8013246 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801321a:	693b      	ldr	r3, [r7, #16]
 801321c:	7858      	ldrb	r0, [r3, #1]
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013224:	2301      	movs	r3, #1
 8013226:	697a      	ldr	r2, [r7, #20]
 8013228:	f7ff f9b2 	bl	8012590 <disk_read>
 801322c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801322e:	2b00      	cmp	r3, #0
 8013230:	d009      	beq.n	8013246 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	2201      	movs	r2, #1
 8013236:	755a      	strb	r2, [r3, #21]
 8013238:	693b      	ldr	r3, [r7, #16]
 801323a:	2101      	movs	r1, #1
 801323c:	4618      	mov	r0, r3
 801323e:	f7ff fad9 	bl	80127f4 <unlock_fs>
 8013242:	2301      	movs	r3, #1
 8013244:	e053      	b.n	80132ee <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	697a      	ldr	r2, [r7, #20]
 801324a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	699b      	ldr	r3, [r3, #24]
 8013250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013254:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8013258:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801325a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	429a      	cmp	r2, r3
 8013260:	d901      	bls.n	8013266 <f_write+0x2b8>
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	699b      	ldr	r3, [r3, #24]
 8013270:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013274:	4413      	add	r3, r2
 8013276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013278:	69f9      	ldr	r1, [r7, #28]
 801327a:	4618      	mov	r0, r3
 801327c:	f7ff fa68 	bl	8012750 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	7d1b      	ldrb	r3, [r3, #20]
 8013284:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8013288:	b2da      	uxtb	r2, r3
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801328e:	69fa      	ldr	r2, [r7, #28]
 8013290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013292:	4413      	add	r3, r2
 8013294:	61fb      	str	r3, [r7, #28]
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	699a      	ldr	r2, [r3, #24]
 801329a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801329c:	441a      	add	r2, r3
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	619a      	str	r2, [r3, #24]
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	68da      	ldr	r2, [r3, #12]
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	699b      	ldr	r3, [r3, #24]
 80132aa:	429a      	cmp	r2, r3
 80132ac:	bf38      	it	cc
 80132ae:	461a      	movcc	r2, r3
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	60da      	str	r2, [r3, #12]
 80132b4:	683b      	ldr	r3, [r7, #0]
 80132b6:	681a      	ldr	r2, [r3, #0]
 80132b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132ba:	441a      	add	r2, r3
 80132bc:	683b      	ldr	r3, [r7, #0]
 80132be:	601a      	str	r2, [r3, #0]
 80132c0:	687a      	ldr	r2, [r7, #4]
 80132c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132c4:	1ad3      	subs	r3, r2, r3
 80132c6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	f47f aeb6 	bne.w	801303c <f_write+0x8e>
 80132d0:	e000      	b.n	80132d4 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80132d2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	7d1b      	ldrb	r3, [r3, #20]
 80132d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80132dc:	b2da      	uxtb	r2, r3
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80132e2:	693b      	ldr	r3, [r7, #16]
 80132e4:	2100      	movs	r1, #0
 80132e6:	4618      	mov	r0, r3
 80132e8:	f7ff fa84 	bl	80127f4 <unlock_fs>
 80132ec:	2300      	movs	r3, #0
}
 80132ee:	4618      	mov	r0, r3
 80132f0:	3730      	adds	r7, #48	@ 0x30
 80132f2:	46bd      	mov	sp, r7
 80132f4:	bd80      	pop	{r7, pc}

080132f6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80132f6:	b580      	push	{r7, lr}
 80132f8:	b086      	sub	sp, #24
 80132fa:	af00      	add	r7, sp, #0
 80132fc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	f107 0208 	add.w	r2, r7, #8
 8013304:	4611      	mov	r1, r2
 8013306:	4618      	mov	r0, r3
 8013308:	f7ff fe0a 	bl	8012f20 <validate>
 801330c:	4603      	mov	r3, r0
 801330e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013310:	7dfb      	ldrb	r3, [r7, #23]
 8013312:	2b00      	cmp	r3, #0
 8013314:	d16d      	bne.n	80133f2 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	7d1b      	ldrb	r3, [r3, #20]
 801331a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801331e:	2b00      	cmp	r3, #0
 8013320:	d067      	beq.n	80133f2 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	7d1b      	ldrb	r3, [r3, #20]
 8013326:	b25b      	sxtb	r3, r3
 8013328:	2b00      	cmp	r3, #0
 801332a:	da1a      	bge.n	8013362 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801332c:	68bb      	ldr	r3, [r7, #8]
 801332e:	7858      	ldrb	r0, [r3, #1]
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	6a1a      	ldr	r2, [r3, #32]
 801333a:	2301      	movs	r3, #1
 801333c:	f7ff f948 	bl	80125d0 <disk_write>
 8013340:	4603      	mov	r3, r0
 8013342:	2b00      	cmp	r3, #0
 8013344:	d006      	beq.n	8013354 <f_sync+0x5e>
 8013346:	68bb      	ldr	r3, [r7, #8]
 8013348:	2101      	movs	r1, #1
 801334a:	4618      	mov	r0, r3
 801334c:	f7ff fa52 	bl	80127f4 <unlock_fs>
 8013350:	2301      	movs	r3, #1
 8013352:	e055      	b.n	8013400 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	7d1b      	ldrb	r3, [r3, #20]
 8013358:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801335c:	b2da      	uxtb	r2, r3
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013362:	f7fe fbd9 	bl	8011b18 <get_fattime>
 8013366:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013368:	68ba      	ldr	r2, [r7, #8]
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801336e:	4619      	mov	r1, r3
 8013370:	4610      	mov	r0, r2
 8013372:	f7ff fa9e 	bl	80128b2 <move_window>
 8013376:	4603      	mov	r3, r0
 8013378:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801337a:	7dfb      	ldrb	r3, [r7, #23]
 801337c:	2b00      	cmp	r3, #0
 801337e:	d138      	bne.n	80133f2 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013384:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	330b      	adds	r3, #11
 801338a:	781a      	ldrb	r2, [r3, #0]
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	330b      	adds	r3, #11
 8013390:	f042 0220 	orr.w	r2, r2, #32
 8013394:	b2d2      	uxtb	r2, r2
 8013396:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	6818      	ldr	r0, [r3, #0]
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	689b      	ldr	r3, [r3, #8]
 80133a0:	461a      	mov	r2, r3
 80133a2:	68f9      	ldr	r1, [r7, #12]
 80133a4:	f7ff fd9c 	bl	8012ee0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	f103 021c 	add.w	r2, r3, #28
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	68db      	ldr	r3, [r3, #12]
 80133b2:	4619      	mov	r1, r3
 80133b4:	4610      	mov	r0, r2
 80133b6:	f7ff f99f 	bl	80126f8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80133ba:	68fb      	ldr	r3, [r7, #12]
 80133bc:	3316      	adds	r3, #22
 80133be:	6939      	ldr	r1, [r7, #16]
 80133c0:	4618      	mov	r0, r3
 80133c2:	f7ff f999 	bl	80126f8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	3312      	adds	r3, #18
 80133ca:	2100      	movs	r1, #0
 80133cc:	4618      	mov	r0, r3
 80133ce:	f7ff f978 	bl	80126c2 <st_word>
					fs->wflag = 1;
 80133d2:	68bb      	ldr	r3, [r7, #8]
 80133d4:	2201      	movs	r2, #1
 80133d6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80133d8:	68bb      	ldr	r3, [r7, #8]
 80133da:	4618      	mov	r0, r3
 80133dc:	f7ff fa96 	bl	801290c <sync_fs>
 80133e0:	4603      	mov	r3, r0
 80133e2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	7d1b      	ldrb	r3, [r3, #20]
 80133e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80133ec:	b2da      	uxtb	r2, r3
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80133f2:	68bb      	ldr	r3, [r7, #8]
 80133f4:	7dfa      	ldrb	r2, [r7, #23]
 80133f6:	4611      	mov	r1, r2
 80133f8:	4618      	mov	r0, r3
 80133fa:	f7ff f9fb 	bl	80127f4 <unlock_fs>
 80133fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8013400:	4618      	mov	r0, r3
 8013402:	3718      	adds	r7, #24
 8013404:	46bd      	mov	sp, r7
 8013406:	bd80      	pop	{r7, pc}

08013408 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013408:	b480      	push	{r7}
 801340a:	b087      	sub	sp, #28
 801340c:	af00      	add	r7, sp, #0
 801340e:	60f8      	str	r0, [r7, #12]
 8013410:	60b9      	str	r1, [r7, #8]
 8013412:	4613      	mov	r3, r2
 8013414:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8013416:	2301      	movs	r3, #1
 8013418:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801341a:	2300      	movs	r3, #0
 801341c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801341e:	4b1f      	ldr	r3, [pc, #124]	@ (801349c <FATFS_LinkDriverEx+0x94>)
 8013420:	7a5b      	ldrb	r3, [r3, #9]
 8013422:	b2db      	uxtb	r3, r3
 8013424:	2b00      	cmp	r3, #0
 8013426:	d131      	bne.n	801348c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013428:	4b1c      	ldr	r3, [pc, #112]	@ (801349c <FATFS_LinkDriverEx+0x94>)
 801342a:	7a5b      	ldrb	r3, [r3, #9]
 801342c:	b2db      	uxtb	r3, r3
 801342e:	461a      	mov	r2, r3
 8013430:	4b1a      	ldr	r3, [pc, #104]	@ (801349c <FATFS_LinkDriverEx+0x94>)
 8013432:	2100      	movs	r1, #0
 8013434:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8013436:	4b19      	ldr	r3, [pc, #100]	@ (801349c <FATFS_LinkDriverEx+0x94>)
 8013438:	7a5b      	ldrb	r3, [r3, #9]
 801343a:	b2db      	uxtb	r3, r3
 801343c:	4a17      	ldr	r2, [pc, #92]	@ (801349c <FATFS_LinkDriverEx+0x94>)
 801343e:	009b      	lsls	r3, r3, #2
 8013440:	4413      	add	r3, r2
 8013442:	68fa      	ldr	r2, [r7, #12]
 8013444:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8013446:	4b15      	ldr	r3, [pc, #84]	@ (801349c <FATFS_LinkDriverEx+0x94>)
 8013448:	7a5b      	ldrb	r3, [r3, #9]
 801344a:	b2db      	uxtb	r3, r3
 801344c:	461a      	mov	r2, r3
 801344e:	4b13      	ldr	r3, [pc, #76]	@ (801349c <FATFS_LinkDriverEx+0x94>)
 8013450:	4413      	add	r3, r2
 8013452:	79fa      	ldrb	r2, [r7, #7]
 8013454:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8013456:	4b11      	ldr	r3, [pc, #68]	@ (801349c <FATFS_LinkDriverEx+0x94>)
 8013458:	7a5b      	ldrb	r3, [r3, #9]
 801345a:	b2db      	uxtb	r3, r3
 801345c:	1c5a      	adds	r2, r3, #1
 801345e:	b2d1      	uxtb	r1, r2
 8013460:	4a0e      	ldr	r2, [pc, #56]	@ (801349c <FATFS_LinkDriverEx+0x94>)
 8013462:	7251      	strb	r1, [r2, #9]
 8013464:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8013466:	7dbb      	ldrb	r3, [r7, #22]
 8013468:	3330      	adds	r3, #48	@ 0x30
 801346a:	b2da      	uxtb	r2, r3
 801346c:	68bb      	ldr	r3, [r7, #8]
 801346e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013470:	68bb      	ldr	r3, [r7, #8]
 8013472:	3301      	adds	r3, #1
 8013474:	223a      	movs	r2, #58	@ 0x3a
 8013476:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8013478:	68bb      	ldr	r3, [r7, #8]
 801347a:	3302      	adds	r3, #2
 801347c:	222f      	movs	r2, #47	@ 0x2f
 801347e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013480:	68bb      	ldr	r3, [r7, #8]
 8013482:	3303      	adds	r3, #3
 8013484:	2200      	movs	r2, #0
 8013486:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8013488:	2300      	movs	r3, #0
 801348a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801348c:	7dfb      	ldrb	r3, [r7, #23]
}
 801348e:	4618      	mov	r0, r3
 8013490:	371c      	adds	r7, #28
 8013492:	46bd      	mov	sp, r7
 8013494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013498:	4770      	bx	lr
 801349a:	bf00      	nop
 801349c:	240028b8 	.word	0x240028b8

080134a0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80134a0:	b580      	push	{r7, lr}
 80134a2:	b082      	sub	sp, #8
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	6078      	str	r0, [r7, #4]
 80134a8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80134aa:	2200      	movs	r2, #0
 80134ac:	6839      	ldr	r1, [r7, #0]
 80134ae:	6878      	ldr	r0, [r7, #4]
 80134b0:	f7ff ffaa 	bl	8013408 <FATFS_LinkDriverEx>
 80134b4:	4603      	mov	r3, r0
}
 80134b6:	4618      	mov	r0, r3
 80134b8:	3708      	adds	r7, #8
 80134ba:	46bd      	mov	sp, r7
 80134bc:	bd80      	pop	{r7, pc}

080134be <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80134be:	b580      	push	{r7, lr}
 80134c0:	b084      	sub	sp, #16
 80134c2:	af00      	add	r7, sp, #0
 80134c4:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80134c6:	2300      	movs	r3, #0
 80134c8:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 80134ca:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80134ce:	6878      	ldr	r0, [r7, #4]
 80134d0:	f000 f8a6 	bl	8013620 <osSemaphoreWait>
 80134d4:	4603      	mov	r3, r0
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d101      	bne.n	80134de <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 80134da:	2301      	movs	r3, #1
 80134dc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80134de:	68fb      	ldr	r3, [r7, #12]
}
 80134e0:	4618      	mov	r0, r3
 80134e2:	3710      	adds	r7, #16
 80134e4:	46bd      	mov	sp, r7
 80134e6:	bd80      	pop	{r7, pc}

080134e8 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80134e8:	b580      	push	{r7, lr}
 80134ea:	b082      	sub	sp, #8
 80134ec:	af00      	add	r7, sp, #0
 80134ee:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80134f0:	6878      	ldr	r0, [r7, #4]
 80134f2:	f000 f8e3 	bl	80136bc <osSemaphoreRelease>
#endif
}
 80134f6:	bf00      	nop
 80134f8:	3708      	adds	r7, #8
 80134fa:	46bd      	mov	sp, r7
 80134fc:	bd80      	pop	{r7, pc}

080134fe <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80134fe:	b480      	push	{r7}
 8013500:	b085      	sub	sp, #20
 8013502:	af00      	add	r7, sp, #0
 8013504:	4603      	mov	r3, r0
 8013506:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8013508:	2300      	movs	r3, #0
 801350a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801350c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013510:	2b84      	cmp	r3, #132	@ 0x84
 8013512:	d005      	beq.n	8013520 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8013514:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	4413      	add	r3, r2
 801351c:	3303      	adds	r3, #3
 801351e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8013520:	68fb      	ldr	r3, [r7, #12]
}
 8013522:	4618      	mov	r0, r3
 8013524:	3714      	adds	r7, #20
 8013526:	46bd      	mov	sp, r7
 8013528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801352c:	4770      	bx	lr

0801352e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 801352e:	b480      	push	{r7}
 8013530:	b083      	sub	sp, #12
 8013532:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013534:	f3ef 8305 	mrs	r3, IPSR
 8013538:	607b      	str	r3, [r7, #4]
  return(result);
 801353a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 801353c:	2b00      	cmp	r3, #0
 801353e:	bf14      	ite	ne
 8013540:	2301      	movne	r3, #1
 8013542:	2300      	moveq	r3, #0
 8013544:	b2db      	uxtb	r3, r3
}
 8013546:	4618      	mov	r0, r3
 8013548:	370c      	adds	r7, #12
 801354a:	46bd      	mov	sp, r7
 801354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013550:	4770      	bx	lr

08013552 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8013552:	b580      	push	{r7, lr}
 8013554:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8013556:	f000 ffb5 	bl	80144c4 <vTaskStartScheduler>
  
  return osOK;
 801355a:	2300      	movs	r3, #0
}
 801355c:	4618      	mov	r0, r3
 801355e:	bd80      	pop	{r7, pc}

08013560 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8013560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013562:	b089      	sub	sp, #36	@ 0x24
 8013564:	af04      	add	r7, sp, #16
 8013566:	6078      	str	r0, [r7, #4]
 8013568:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	695b      	ldr	r3, [r3, #20]
 801356e:	2b00      	cmp	r3, #0
 8013570:	d020      	beq.n	80135b4 <osThreadCreate+0x54>
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	699b      	ldr	r3, [r3, #24]
 8013576:	2b00      	cmp	r3, #0
 8013578:	d01c      	beq.n	80135b4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	685c      	ldr	r4, [r3, #4]
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	691e      	ldr	r6, [r3, #16]
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801358c:	4618      	mov	r0, r3
 801358e:	f7ff ffb6 	bl	80134fe <makeFreeRtosPriority>
 8013592:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	695b      	ldr	r3, [r3, #20]
 8013598:	687a      	ldr	r2, [r7, #4]
 801359a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801359c:	9202      	str	r2, [sp, #8]
 801359e:	9301      	str	r3, [sp, #4]
 80135a0:	9100      	str	r1, [sp, #0]
 80135a2:	683b      	ldr	r3, [r7, #0]
 80135a4:	4632      	mov	r2, r6
 80135a6:	4629      	mov	r1, r5
 80135a8:	4620      	mov	r0, r4
 80135aa:	f000 fdbd 	bl	8014128 <xTaskCreateStatic>
 80135ae:	4603      	mov	r3, r0
 80135b0:	60fb      	str	r3, [r7, #12]
 80135b2:	e01c      	b.n	80135ee <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	685c      	ldr	r4, [r3, #4]
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80135c0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80135c8:	4618      	mov	r0, r3
 80135ca:	f7ff ff98 	bl	80134fe <makeFreeRtosPriority>
 80135ce:	4602      	mov	r2, r0
 80135d0:	f107 030c 	add.w	r3, r7, #12
 80135d4:	9301      	str	r3, [sp, #4]
 80135d6:	9200      	str	r2, [sp, #0]
 80135d8:	683b      	ldr	r3, [r7, #0]
 80135da:	4632      	mov	r2, r6
 80135dc:	4629      	mov	r1, r5
 80135de:	4620      	mov	r0, r4
 80135e0:	f000 fe02 	bl	80141e8 <xTaskCreate>
 80135e4:	4603      	mov	r3, r0
 80135e6:	2b01      	cmp	r3, #1
 80135e8:	d001      	beq.n	80135ee <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80135ea:	2300      	movs	r3, #0
 80135ec:	e000      	b.n	80135f0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80135ee:	68fb      	ldr	r3, [r7, #12]
}
 80135f0:	4618      	mov	r0, r3
 80135f2:	3714      	adds	r7, #20
 80135f4:	46bd      	mov	sp, r7
 80135f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080135f8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80135f8:	b580      	push	{r7, lr}
 80135fa:	b084      	sub	sp, #16
 80135fc:	af00      	add	r7, sp, #0
 80135fe:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	2b00      	cmp	r3, #0
 8013608:	d001      	beq.n	801360e <osDelay+0x16>
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	e000      	b.n	8013610 <osDelay+0x18>
 801360e:	2301      	movs	r3, #1
 8013610:	4618      	mov	r0, r3
 8013612:	f000 ff21 	bl	8014458 <vTaskDelay>
  
  return osOK;
 8013616:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8013618:	4618      	mov	r0, r3
 801361a:	3710      	adds	r7, #16
 801361c:	46bd      	mov	sp, r7
 801361e:	bd80      	pop	{r7, pc}

08013620 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8013620:	b580      	push	{r7, lr}
 8013622:	b084      	sub	sp, #16
 8013624:	af00      	add	r7, sp, #0
 8013626:	6078      	str	r0, [r7, #4]
 8013628:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801362a:	2300      	movs	r3, #0
 801362c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	2b00      	cmp	r3, #0
 8013632:	d101      	bne.n	8013638 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8013634:	2380      	movs	r3, #128	@ 0x80
 8013636:	e03a      	b.n	80136ae <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8013638:	2300      	movs	r3, #0
 801363a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 801363c:	683b      	ldr	r3, [r7, #0]
 801363e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013642:	d103      	bne.n	801364c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8013644:	f04f 33ff 	mov.w	r3, #4294967295
 8013648:	60fb      	str	r3, [r7, #12]
 801364a:	e009      	b.n	8013660 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 801364c:	683b      	ldr	r3, [r7, #0]
 801364e:	2b00      	cmp	r3, #0
 8013650:	d006      	beq.n	8013660 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8013652:	683b      	ldr	r3, [r7, #0]
 8013654:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	2b00      	cmp	r3, #0
 801365a:	d101      	bne.n	8013660 <osSemaphoreWait+0x40>
      ticks = 1;
 801365c:	2301      	movs	r3, #1
 801365e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8013660:	f7ff ff65 	bl	801352e <inHandlerMode>
 8013664:	4603      	mov	r3, r0
 8013666:	2b00      	cmp	r3, #0
 8013668:	d017      	beq.n	801369a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801366a:	f107 0308 	add.w	r3, r7, #8
 801366e:	461a      	mov	r2, r3
 8013670:	2100      	movs	r1, #0
 8013672:	6878      	ldr	r0, [r7, #4]
 8013674:	f000 fbae 	bl	8013dd4 <xQueueReceiveFromISR>
 8013678:	4603      	mov	r3, r0
 801367a:	2b01      	cmp	r3, #1
 801367c:	d001      	beq.n	8013682 <osSemaphoreWait+0x62>
      return osErrorOS;
 801367e:	23ff      	movs	r3, #255	@ 0xff
 8013680:	e015      	b.n	80136ae <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8013682:	68bb      	ldr	r3, [r7, #8]
 8013684:	2b00      	cmp	r3, #0
 8013686:	d011      	beq.n	80136ac <osSemaphoreWait+0x8c>
 8013688:	4b0b      	ldr	r3, [pc, #44]	@ (80136b8 <osSemaphoreWait+0x98>)
 801368a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801368e:	601a      	str	r2, [r3, #0]
 8013690:	f3bf 8f4f 	dsb	sy
 8013694:	f3bf 8f6f 	isb	sy
 8013698:	e008      	b.n	80136ac <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 801369a:	68f9      	ldr	r1, [r7, #12]
 801369c:	6878      	ldr	r0, [r7, #4]
 801369e:	f000 fa89 	bl	8013bb4 <xQueueSemaphoreTake>
 80136a2:	4603      	mov	r3, r0
 80136a4:	2b01      	cmp	r3, #1
 80136a6:	d001      	beq.n	80136ac <osSemaphoreWait+0x8c>
    return osErrorOS;
 80136a8:	23ff      	movs	r3, #255	@ 0xff
 80136aa:	e000      	b.n	80136ae <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80136ac:	2300      	movs	r3, #0
}
 80136ae:	4618      	mov	r0, r3
 80136b0:	3710      	adds	r7, #16
 80136b2:	46bd      	mov	sp, r7
 80136b4:	bd80      	pop	{r7, pc}
 80136b6:	bf00      	nop
 80136b8:	e000ed04 	.word	0xe000ed04

080136bc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80136bc:	b580      	push	{r7, lr}
 80136be:	b084      	sub	sp, #16
 80136c0:	af00      	add	r7, sp, #0
 80136c2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80136c4:	2300      	movs	r3, #0
 80136c6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80136c8:	2300      	movs	r3, #0
 80136ca:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80136cc:	f7ff ff2f 	bl	801352e <inHandlerMode>
 80136d0:	4603      	mov	r3, r0
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d016      	beq.n	8013704 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80136d6:	f107 0308 	add.w	r3, r7, #8
 80136da:	4619      	mov	r1, r3
 80136dc:	6878      	ldr	r0, [r7, #4]
 80136de:	f000 f9d9 	bl	8013a94 <xQueueGiveFromISR>
 80136e2:	4603      	mov	r3, r0
 80136e4:	2b01      	cmp	r3, #1
 80136e6:	d001      	beq.n	80136ec <osSemaphoreRelease+0x30>
      return osErrorOS;
 80136e8:	23ff      	movs	r3, #255	@ 0xff
 80136ea:	e017      	b.n	801371c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80136ec:	68bb      	ldr	r3, [r7, #8]
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d013      	beq.n	801371a <osSemaphoreRelease+0x5e>
 80136f2:	4b0c      	ldr	r3, [pc, #48]	@ (8013724 <osSemaphoreRelease+0x68>)
 80136f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80136f8:	601a      	str	r2, [r3, #0]
 80136fa:	f3bf 8f4f 	dsb	sy
 80136fe:	f3bf 8f6f 	isb	sy
 8013702:	e00a      	b.n	801371a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8013704:	2300      	movs	r3, #0
 8013706:	2200      	movs	r2, #0
 8013708:	2100      	movs	r1, #0
 801370a:	6878      	ldr	r0, [r7, #4]
 801370c:	f000 f8c0 	bl	8013890 <xQueueGenericSend>
 8013710:	4603      	mov	r3, r0
 8013712:	2b01      	cmp	r3, #1
 8013714:	d001      	beq.n	801371a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8013716:	23ff      	movs	r3, #255	@ 0xff
 8013718:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 801371a:	68fb      	ldr	r3, [r7, #12]
}
 801371c:	4618      	mov	r0, r3
 801371e:	3710      	adds	r7, #16
 8013720:	46bd      	mov	sp, r7
 8013722:	bd80      	pop	{r7, pc}
 8013724:	e000ed04 	.word	0xe000ed04

08013728 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013728:	b480      	push	{r7}
 801372a:	b083      	sub	sp, #12
 801372c:	af00      	add	r7, sp, #0
 801372e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	f103 0208 	add.w	r2, r3, #8
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	f04f 32ff 	mov.w	r2, #4294967295
 8013740:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	f103 0208 	add.w	r2, r3, #8
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	f103 0208 	add.w	r2, r3, #8
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	2200      	movs	r2, #0
 801375a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801375c:	bf00      	nop
 801375e:	370c      	adds	r7, #12
 8013760:	46bd      	mov	sp, r7
 8013762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013766:	4770      	bx	lr

08013768 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013768:	b480      	push	{r7}
 801376a:	b083      	sub	sp, #12
 801376c:	af00      	add	r7, sp, #0
 801376e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	2200      	movs	r2, #0
 8013774:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013776:	bf00      	nop
 8013778:	370c      	adds	r7, #12
 801377a:	46bd      	mov	sp, r7
 801377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013780:	4770      	bx	lr

08013782 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013782:	b480      	push	{r7}
 8013784:	b085      	sub	sp, #20
 8013786:	af00      	add	r7, sp, #0
 8013788:	6078      	str	r0, [r7, #4]
 801378a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	685b      	ldr	r3, [r3, #4]
 8013790:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013792:	683b      	ldr	r3, [r7, #0]
 8013794:	68fa      	ldr	r2, [r7, #12]
 8013796:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	689a      	ldr	r2, [r3, #8]
 801379c:	683b      	ldr	r3, [r7, #0]
 801379e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	689b      	ldr	r3, [r3, #8]
 80137a4:	683a      	ldr	r2, [r7, #0]
 80137a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	683a      	ldr	r2, [r7, #0]
 80137ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80137ae:	683b      	ldr	r3, [r7, #0]
 80137b0:	687a      	ldr	r2, [r7, #4]
 80137b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	681b      	ldr	r3, [r3, #0]
 80137b8:	1c5a      	adds	r2, r3, #1
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	601a      	str	r2, [r3, #0]
}
 80137be:	bf00      	nop
 80137c0:	3714      	adds	r7, #20
 80137c2:	46bd      	mov	sp, r7
 80137c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137c8:	4770      	bx	lr

080137ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80137ca:	b480      	push	{r7}
 80137cc:	b085      	sub	sp, #20
 80137ce:	af00      	add	r7, sp, #0
 80137d0:	6078      	str	r0, [r7, #4]
 80137d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80137d4:	683b      	ldr	r3, [r7, #0]
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80137da:	68bb      	ldr	r3, [r7, #8]
 80137dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137e0:	d103      	bne.n	80137ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	691b      	ldr	r3, [r3, #16]
 80137e6:	60fb      	str	r3, [r7, #12]
 80137e8:	e00c      	b.n	8013804 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	3308      	adds	r3, #8
 80137ee:	60fb      	str	r3, [r7, #12]
 80137f0:	e002      	b.n	80137f8 <vListInsert+0x2e>
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	685b      	ldr	r3, [r3, #4]
 80137f6:	60fb      	str	r3, [r7, #12]
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	685b      	ldr	r3, [r3, #4]
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	68ba      	ldr	r2, [r7, #8]
 8013800:	429a      	cmp	r2, r3
 8013802:	d2f6      	bcs.n	80137f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013804:	68fb      	ldr	r3, [r7, #12]
 8013806:	685a      	ldr	r2, [r3, #4]
 8013808:	683b      	ldr	r3, [r7, #0]
 801380a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801380c:	683b      	ldr	r3, [r7, #0]
 801380e:	685b      	ldr	r3, [r3, #4]
 8013810:	683a      	ldr	r2, [r7, #0]
 8013812:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013814:	683b      	ldr	r3, [r7, #0]
 8013816:	68fa      	ldr	r2, [r7, #12]
 8013818:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	683a      	ldr	r2, [r7, #0]
 801381e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013820:	683b      	ldr	r3, [r7, #0]
 8013822:	687a      	ldr	r2, [r7, #4]
 8013824:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	1c5a      	adds	r2, r3, #1
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	601a      	str	r2, [r3, #0]
}
 8013830:	bf00      	nop
 8013832:	3714      	adds	r7, #20
 8013834:	46bd      	mov	sp, r7
 8013836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801383a:	4770      	bx	lr

0801383c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801383c:	b480      	push	{r7}
 801383e:	b085      	sub	sp, #20
 8013840:	af00      	add	r7, sp, #0
 8013842:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	691b      	ldr	r3, [r3, #16]
 8013848:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	685b      	ldr	r3, [r3, #4]
 801384e:	687a      	ldr	r2, [r7, #4]
 8013850:	6892      	ldr	r2, [r2, #8]
 8013852:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	689b      	ldr	r3, [r3, #8]
 8013858:	687a      	ldr	r2, [r7, #4]
 801385a:	6852      	ldr	r2, [r2, #4]
 801385c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	685b      	ldr	r3, [r3, #4]
 8013862:	687a      	ldr	r2, [r7, #4]
 8013864:	429a      	cmp	r2, r3
 8013866:	d103      	bne.n	8013870 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	689a      	ldr	r2, [r3, #8]
 801386c:	68fb      	ldr	r3, [r7, #12]
 801386e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	2200      	movs	r2, #0
 8013874:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	1e5a      	subs	r2, r3, #1
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	681b      	ldr	r3, [r3, #0]
}
 8013884:	4618      	mov	r0, r3
 8013886:	3714      	adds	r7, #20
 8013888:	46bd      	mov	sp, r7
 801388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801388e:	4770      	bx	lr

08013890 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013890:	b580      	push	{r7, lr}
 8013892:	b08e      	sub	sp, #56	@ 0x38
 8013894:	af00      	add	r7, sp, #0
 8013896:	60f8      	str	r0, [r7, #12]
 8013898:	60b9      	str	r1, [r7, #8]
 801389a:	607a      	str	r2, [r7, #4]
 801389c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801389e:	2300      	movs	r3, #0
 80138a0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80138a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d10b      	bne.n	80138c4 <xQueueGenericSend+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80138ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80138b0:	f383 8811 	msr	BASEPRI, r3
 80138b4:	f3bf 8f6f 	isb	sy
 80138b8:	f3bf 8f4f 	dsb	sy
 80138bc:	62bb      	str	r3, [r7, #40]	@ 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80138be:	bf00      	nop
 80138c0:	bf00      	nop
 80138c2:	e7fd      	b.n	80138c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80138c4:	68bb      	ldr	r3, [r7, #8]
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d103      	bne.n	80138d2 <xQueueGenericSend+0x42>
 80138ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d101      	bne.n	80138d6 <xQueueGenericSend+0x46>
 80138d2:	2301      	movs	r3, #1
 80138d4:	e000      	b.n	80138d8 <xQueueGenericSend+0x48>
 80138d6:	2300      	movs	r3, #0
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d10b      	bne.n	80138f4 <xQueueGenericSend+0x64>
	__asm volatile
 80138dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80138e0:	f383 8811 	msr	BASEPRI, r3
 80138e4:	f3bf 8f6f 	isb	sy
 80138e8:	f3bf 8f4f 	dsb	sy
 80138ec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80138ee:	bf00      	nop
 80138f0:	bf00      	nop
 80138f2:	e7fd      	b.n	80138f0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80138f4:	683b      	ldr	r3, [r7, #0]
 80138f6:	2b02      	cmp	r3, #2
 80138f8:	d103      	bne.n	8013902 <xQueueGenericSend+0x72>
 80138fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80138fe:	2b01      	cmp	r3, #1
 8013900:	d101      	bne.n	8013906 <xQueueGenericSend+0x76>
 8013902:	2301      	movs	r3, #1
 8013904:	e000      	b.n	8013908 <xQueueGenericSend+0x78>
 8013906:	2300      	movs	r3, #0
 8013908:	2b00      	cmp	r3, #0
 801390a:	d10b      	bne.n	8013924 <xQueueGenericSend+0x94>
	__asm volatile
 801390c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013910:	f383 8811 	msr	BASEPRI, r3
 8013914:	f3bf 8f6f 	isb	sy
 8013918:	f3bf 8f4f 	dsb	sy
 801391c:	623b      	str	r3, [r7, #32]
}
 801391e:	bf00      	nop
 8013920:	bf00      	nop
 8013922:	e7fd      	b.n	8013920 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013924:	f001 f9d8 	bl	8014cd8 <xTaskGetSchedulerState>
 8013928:	4603      	mov	r3, r0
 801392a:	2b00      	cmp	r3, #0
 801392c:	d102      	bne.n	8013934 <xQueueGenericSend+0xa4>
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	2b00      	cmp	r3, #0
 8013932:	d101      	bne.n	8013938 <xQueueGenericSend+0xa8>
 8013934:	2301      	movs	r3, #1
 8013936:	e000      	b.n	801393a <xQueueGenericSend+0xaa>
 8013938:	2300      	movs	r3, #0
 801393a:	2b00      	cmp	r3, #0
 801393c:	d10b      	bne.n	8013956 <xQueueGenericSend+0xc6>
	__asm volatile
 801393e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013942:	f383 8811 	msr	BASEPRI, r3
 8013946:	f3bf 8f6f 	isb	sy
 801394a:	f3bf 8f4f 	dsb	sy
 801394e:	61fb      	str	r3, [r7, #28]
}
 8013950:	bf00      	nop
 8013952:	bf00      	nop
 8013954:	e7fd      	b.n	8013952 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013956:	f001 fd17 	bl	8015388 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801395a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801395c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801395e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013962:	429a      	cmp	r2, r3
 8013964:	d302      	bcc.n	801396c <xQueueGenericSend+0xdc>
 8013966:	683b      	ldr	r3, [r7, #0]
 8013968:	2b02      	cmp	r3, #2
 801396a:	d129      	bne.n	80139c0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801396c:	683a      	ldr	r2, [r7, #0]
 801396e:	68b9      	ldr	r1, [r7, #8]
 8013970:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013972:	f000 fac9 	bl	8013f08 <prvCopyDataToQueue>
 8013976:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801397a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801397c:	2b00      	cmp	r3, #0
 801397e:	d010      	beq.n	80139a2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013982:	3324      	adds	r3, #36	@ 0x24
 8013984:	4618      	mov	r0, r3
 8013986:	f000 ffe7 	bl	8014958 <xTaskRemoveFromEventList>
 801398a:	4603      	mov	r3, r0
 801398c:	2b00      	cmp	r3, #0
 801398e:	d013      	beq.n	80139b8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013990:	4b3f      	ldr	r3, [pc, #252]	@ (8013a90 <xQueueGenericSend+0x200>)
 8013992:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013996:	601a      	str	r2, [r3, #0]
 8013998:	f3bf 8f4f 	dsb	sy
 801399c:	f3bf 8f6f 	isb	sy
 80139a0:	e00a      	b.n	80139b8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80139a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d007      	beq.n	80139b8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80139a8:	4b39      	ldr	r3, [pc, #228]	@ (8013a90 <xQueueGenericSend+0x200>)
 80139aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80139ae:	601a      	str	r2, [r3, #0]
 80139b0:	f3bf 8f4f 	dsb	sy
 80139b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80139b8:	f001 fd18 	bl	80153ec <vPortExitCritical>
				return pdPASS;
 80139bc:	2301      	movs	r3, #1
 80139be:	e063      	b.n	8013a88 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d103      	bne.n	80139ce <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80139c6:	f001 fd11 	bl	80153ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80139ca:	2300      	movs	r3, #0
 80139cc:	e05c      	b.n	8013a88 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80139ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d106      	bne.n	80139e2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80139d4:	f107 0314 	add.w	r3, r7, #20
 80139d8:	4618      	mov	r0, r3
 80139da:	f001 f821 	bl	8014a20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80139de:	2301      	movs	r3, #1
 80139e0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80139e2:	f001 fd03 	bl	80153ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80139e6:	f000 fdcf 	bl	8014588 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80139ea:	f001 fccd 	bl	8015388 <vPortEnterCritical>
 80139ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80139f4:	b25b      	sxtb	r3, r3
 80139f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139fa:	d103      	bne.n	8013a04 <xQueueGenericSend+0x174>
 80139fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139fe:	2200      	movs	r2, #0
 8013a00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013a0a:	b25b      	sxtb	r3, r3
 8013a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a10:	d103      	bne.n	8013a1a <xQueueGenericSend+0x18a>
 8013a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a14:	2200      	movs	r2, #0
 8013a16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013a1a:	f001 fce7 	bl	80153ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013a1e:	1d3a      	adds	r2, r7, #4
 8013a20:	f107 0314 	add.w	r3, r7, #20
 8013a24:	4611      	mov	r1, r2
 8013a26:	4618      	mov	r0, r3
 8013a28:	f001 f810 	bl	8014a4c <xTaskCheckForTimeOut>
 8013a2c:	4603      	mov	r3, r0
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d124      	bne.n	8013a7c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013a32:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013a34:	f000 fb60 	bl	80140f8 <prvIsQueueFull>
 8013a38:	4603      	mov	r3, r0
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d018      	beq.n	8013a70 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a40:	3310      	adds	r3, #16
 8013a42:	687a      	ldr	r2, [r7, #4]
 8013a44:	4611      	mov	r1, r2
 8013a46:	4618      	mov	r0, r3
 8013a48:	f000 ff60 	bl	801490c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013a4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013a4e:	f000 faeb 	bl	8014028 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013a52:	f000 fda7 	bl	80145a4 <xTaskResumeAll>
 8013a56:	4603      	mov	r3, r0
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	f47f af7c 	bne.w	8013956 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8013a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8013a90 <xQueueGenericSend+0x200>)
 8013a60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013a64:	601a      	str	r2, [r3, #0]
 8013a66:	f3bf 8f4f 	dsb	sy
 8013a6a:	f3bf 8f6f 	isb	sy
 8013a6e:	e772      	b.n	8013956 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013a70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013a72:	f000 fad9 	bl	8014028 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013a76:	f000 fd95 	bl	80145a4 <xTaskResumeAll>
 8013a7a:	e76c      	b.n	8013956 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013a7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013a7e:	f000 fad3 	bl	8014028 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013a82:	f000 fd8f 	bl	80145a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013a86:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013a88:	4618      	mov	r0, r3
 8013a8a:	3738      	adds	r7, #56	@ 0x38
 8013a8c:	46bd      	mov	sp, r7
 8013a8e:	bd80      	pop	{r7, pc}
 8013a90:	e000ed04 	.word	0xe000ed04

08013a94 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013a94:	b580      	push	{r7, lr}
 8013a96:	b08e      	sub	sp, #56	@ 0x38
 8013a98:	af00      	add	r7, sp, #0
 8013a9a:	6078      	str	r0, [r7, #4]
 8013a9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8013aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d10b      	bne.n	8013ac0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8013aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013aac:	f383 8811 	msr	BASEPRI, r3
 8013ab0:	f3bf 8f6f 	isb	sy
 8013ab4:	f3bf 8f4f 	dsb	sy
 8013ab8:	623b      	str	r3, [r7, #32]
}
 8013aba:	bf00      	nop
 8013abc:	bf00      	nop
 8013abe:	e7fd      	b.n	8013abc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d00b      	beq.n	8013ae0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8013ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013acc:	f383 8811 	msr	BASEPRI, r3
 8013ad0:	f3bf 8f6f 	isb	sy
 8013ad4:	f3bf 8f4f 	dsb	sy
 8013ad8:	61fb      	str	r3, [r7, #28]
}
 8013ada:	bf00      	nop
 8013adc:	bf00      	nop
 8013ade:	e7fd      	b.n	8013adc <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8013ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d103      	bne.n	8013af0 <xQueueGiveFromISR+0x5c>
 8013ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013aea:	689b      	ldr	r3, [r3, #8]
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d101      	bne.n	8013af4 <xQueueGiveFromISR+0x60>
 8013af0:	2301      	movs	r3, #1
 8013af2:	e000      	b.n	8013af6 <xQueueGiveFromISR+0x62>
 8013af4:	2300      	movs	r3, #0
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d10b      	bne.n	8013b12 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8013afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013afe:	f383 8811 	msr	BASEPRI, r3
 8013b02:	f3bf 8f6f 	isb	sy
 8013b06:	f3bf 8f4f 	dsb	sy
 8013b0a:	61bb      	str	r3, [r7, #24]
}
 8013b0c:	bf00      	nop
 8013b0e:	bf00      	nop
 8013b10:	e7fd      	b.n	8013b0e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013b12:	f001 fd19 	bl	8015548 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013b16:	f3ef 8211 	mrs	r2, BASEPRI
 8013b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b1e:	f383 8811 	msr	BASEPRI, r3
 8013b22:	f3bf 8f6f 	isb	sy
 8013b26:	f3bf 8f4f 	dsb	sy
 8013b2a:	617a      	str	r2, [r7, #20]
 8013b2c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013b2e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013b36:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8013b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013b3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013b3e:	429a      	cmp	r2, r3
 8013b40:	d22b      	bcs.n	8013b9a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b44:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013b48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b4e:	1c5a      	adds	r2, r3, #1
 8013b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b52:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013b54:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b5c:	d112      	bne.n	8013b84 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d016      	beq.n	8013b94 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b68:	3324      	adds	r3, #36	@ 0x24
 8013b6a:	4618      	mov	r0, r3
 8013b6c:	f000 fef4 	bl	8014958 <xTaskRemoveFromEventList>
 8013b70:	4603      	mov	r3, r0
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d00e      	beq.n	8013b94 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013b76:	683b      	ldr	r3, [r7, #0]
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d00b      	beq.n	8013b94 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013b7c:	683b      	ldr	r3, [r7, #0]
 8013b7e:	2201      	movs	r2, #1
 8013b80:	601a      	str	r2, [r3, #0]
 8013b82:	e007      	b.n	8013b94 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013b84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013b88:	3301      	adds	r3, #1
 8013b8a:	b2db      	uxtb	r3, r3
 8013b8c:	b25a      	sxtb	r2, r3
 8013b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8013b94:	2301      	movs	r3, #1
 8013b96:	637b      	str	r3, [r7, #52]	@ 0x34
 8013b98:	e001      	b.n	8013b9e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013b9a:	2300      	movs	r3, #0
 8013b9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8013b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ba0:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013ba8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8013bac:	4618      	mov	r0, r3
 8013bae:	3738      	adds	r7, #56	@ 0x38
 8013bb0:	46bd      	mov	sp, r7
 8013bb2:	bd80      	pop	{r7, pc}

08013bb4 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8013bb4:	b580      	push	{r7, lr}
 8013bb6:	b08e      	sub	sp, #56	@ 0x38
 8013bb8:	af00      	add	r7, sp, #0
 8013bba:	6078      	str	r0, [r7, #4]
 8013bbc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8013bbe:	2300      	movs	r3, #0
 8013bc0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8013bc6:	2300      	movs	r3, #0
 8013bc8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d10b      	bne.n	8013be8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8013bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013bd4:	f383 8811 	msr	BASEPRI, r3
 8013bd8:	f3bf 8f6f 	isb	sy
 8013bdc:	f3bf 8f4f 	dsb	sy
 8013be0:	623b      	str	r3, [r7, #32]
}
 8013be2:	bf00      	nop
 8013be4:	bf00      	nop
 8013be6:	e7fd      	b.n	8013be4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d00b      	beq.n	8013c08 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8013bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013bf4:	f383 8811 	msr	BASEPRI, r3
 8013bf8:	f3bf 8f6f 	isb	sy
 8013bfc:	f3bf 8f4f 	dsb	sy
 8013c00:	61fb      	str	r3, [r7, #28]
}
 8013c02:	bf00      	nop
 8013c04:	bf00      	nop
 8013c06:	e7fd      	b.n	8013c04 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013c08:	f001 f866 	bl	8014cd8 <xTaskGetSchedulerState>
 8013c0c:	4603      	mov	r3, r0
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d102      	bne.n	8013c18 <xQueueSemaphoreTake+0x64>
 8013c12:	683b      	ldr	r3, [r7, #0]
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d101      	bne.n	8013c1c <xQueueSemaphoreTake+0x68>
 8013c18:	2301      	movs	r3, #1
 8013c1a:	e000      	b.n	8013c1e <xQueueSemaphoreTake+0x6a>
 8013c1c:	2300      	movs	r3, #0
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d10b      	bne.n	8013c3a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8013c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c26:	f383 8811 	msr	BASEPRI, r3
 8013c2a:	f3bf 8f6f 	isb	sy
 8013c2e:	f3bf 8f4f 	dsb	sy
 8013c32:	61bb      	str	r3, [r7, #24]
}
 8013c34:	bf00      	nop
 8013c36:	bf00      	nop
 8013c38:	e7fd      	b.n	8013c36 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013c3a:	f001 fba5 	bl	8015388 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8013c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c42:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8013c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d024      	beq.n	8013c94 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8013c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c4c:	1e5a      	subs	r2, r3, #1
 8013c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c50:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c54:	681b      	ldr	r3, [r3, #0]
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d104      	bne.n	8013c64 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8013c5a:	f001 f9e9 	bl	8015030 <pvTaskIncrementMutexHeldCount>
 8013c5e:	4602      	mov	r2, r0
 8013c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c62:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c66:	691b      	ldr	r3, [r3, #16]
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d00f      	beq.n	8013c8c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c6e:	3310      	adds	r3, #16
 8013c70:	4618      	mov	r0, r3
 8013c72:	f000 fe71 	bl	8014958 <xTaskRemoveFromEventList>
 8013c76:	4603      	mov	r3, r0
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d007      	beq.n	8013c8c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013c7c:	4b54      	ldr	r3, [pc, #336]	@ (8013dd0 <xQueueSemaphoreTake+0x21c>)
 8013c7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013c82:	601a      	str	r2, [r3, #0]
 8013c84:	f3bf 8f4f 	dsb	sy
 8013c88:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013c8c:	f001 fbae 	bl	80153ec <vPortExitCritical>
				return pdPASS;
 8013c90:	2301      	movs	r3, #1
 8013c92:	e098      	b.n	8013dc6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013c94:	683b      	ldr	r3, [r7, #0]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d112      	bne.n	8013cc0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8013c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d00b      	beq.n	8013cb8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8013ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ca4:	f383 8811 	msr	BASEPRI, r3
 8013ca8:	f3bf 8f6f 	isb	sy
 8013cac:	f3bf 8f4f 	dsb	sy
 8013cb0:	617b      	str	r3, [r7, #20]
}
 8013cb2:	bf00      	nop
 8013cb4:	bf00      	nop
 8013cb6:	e7fd      	b.n	8013cb4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8013cb8:	f001 fb98 	bl	80153ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013cbc:	2300      	movs	r3, #0
 8013cbe:	e082      	b.n	8013dc6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013cc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d106      	bne.n	8013cd4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013cc6:	f107 030c 	add.w	r3, r7, #12
 8013cca:	4618      	mov	r0, r3
 8013ccc:	f000 fea8 	bl	8014a20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013cd0:	2301      	movs	r3, #1
 8013cd2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013cd4:	f001 fb8a 	bl	80153ec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013cd8:	f000 fc56 	bl	8014588 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013cdc:	f001 fb54 	bl	8015388 <vPortEnterCritical>
 8013ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ce2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013ce6:	b25b      	sxtb	r3, r3
 8013ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013cec:	d103      	bne.n	8013cf6 <xQueueSemaphoreTake+0x142>
 8013cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013cf0:	2200      	movs	r2, #0
 8013cf2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013cf8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013cfc:	b25b      	sxtb	r3, r3
 8013cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d02:	d103      	bne.n	8013d0c <xQueueSemaphoreTake+0x158>
 8013d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d06:	2200      	movs	r2, #0
 8013d08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013d0c:	f001 fb6e 	bl	80153ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013d10:	463a      	mov	r2, r7
 8013d12:	f107 030c 	add.w	r3, r7, #12
 8013d16:	4611      	mov	r1, r2
 8013d18:	4618      	mov	r0, r3
 8013d1a:	f000 fe97 	bl	8014a4c <xTaskCheckForTimeOut>
 8013d1e:	4603      	mov	r3, r0
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d132      	bne.n	8013d8a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013d24:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013d26:	f000 f9d1 	bl	80140cc <prvIsQueueEmpty>
 8013d2a:	4603      	mov	r3, r0
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d026      	beq.n	8013d7e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d109      	bne.n	8013d4c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8013d38:	f001 fb26 	bl	8015388 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d3e:	689b      	ldr	r3, [r3, #8]
 8013d40:	4618      	mov	r0, r3
 8013d42:	f000 ffe7 	bl	8014d14 <xTaskPriorityInherit>
 8013d46:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8013d48:	f001 fb50 	bl	80153ec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d4e:	3324      	adds	r3, #36	@ 0x24
 8013d50:	683a      	ldr	r2, [r7, #0]
 8013d52:	4611      	mov	r1, r2
 8013d54:	4618      	mov	r0, r3
 8013d56:	f000 fdd9 	bl	801490c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013d5a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013d5c:	f000 f964 	bl	8014028 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013d60:	f000 fc20 	bl	80145a4 <xTaskResumeAll>
 8013d64:	4603      	mov	r3, r0
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	f47f af67 	bne.w	8013c3a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8013d6c:	4b18      	ldr	r3, [pc, #96]	@ (8013dd0 <xQueueSemaphoreTake+0x21c>)
 8013d6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013d72:	601a      	str	r2, [r3, #0]
 8013d74:	f3bf 8f4f 	dsb	sy
 8013d78:	f3bf 8f6f 	isb	sy
 8013d7c:	e75d      	b.n	8013c3a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8013d7e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013d80:	f000 f952 	bl	8014028 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013d84:	f000 fc0e 	bl	80145a4 <xTaskResumeAll>
 8013d88:	e757      	b.n	8013c3a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8013d8a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013d8c:	f000 f94c 	bl	8014028 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013d90:	f000 fc08 	bl	80145a4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013d94:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013d96:	f000 f999 	bl	80140cc <prvIsQueueEmpty>
 8013d9a:	4603      	mov	r3, r0
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	f43f af4c 	beq.w	8013c3a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8013da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d00d      	beq.n	8013dc4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8013da8:	f001 faee 	bl	8015388 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8013dac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013dae:	f000 f893 	bl	8013ed8 <prvGetDisinheritPriorityAfterTimeout>
 8013db2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8013db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013db6:	689b      	ldr	r3, [r3, #8]
 8013db8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013dba:	4618      	mov	r0, r3
 8013dbc:	f001 f8a8 	bl	8014f10 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8013dc0:	f001 fb14 	bl	80153ec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013dc4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013dc6:	4618      	mov	r0, r3
 8013dc8:	3738      	adds	r7, #56	@ 0x38
 8013dca:	46bd      	mov	sp, r7
 8013dcc:	bd80      	pop	{r7, pc}
 8013dce:	bf00      	nop
 8013dd0:	e000ed04 	.word	0xe000ed04

08013dd4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013dd4:	b580      	push	{r7, lr}
 8013dd6:	b08e      	sub	sp, #56	@ 0x38
 8013dd8:	af00      	add	r7, sp, #0
 8013dda:	60f8      	str	r0, [r7, #12]
 8013ddc:	60b9      	str	r1, [r7, #8]
 8013dde:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8013de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d10b      	bne.n	8013e02 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8013dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013dee:	f383 8811 	msr	BASEPRI, r3
 8013df2:	f3bf 8f6f 	isb	sy
 8013df6:	f3bf 8f4f 	dsb	sy
 8013dfa:	623b      	str	r3, [r7, #32]
}
 8013dfc:	bf00      	nop
 8013dfe:	bf00      	nop
 8013e00:	e7fd      	b.n	8013dfe <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013e02:	68bb      	ldr	r3, [r7, #8]
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d103      	bne.n	8013e10 <xQueueReceiveFromISR+0x3c>
 8013e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d101      	bne.n	8013e14 <xQueueReceiveFromISR+0x40>
 8013e10:	2301      	movs	r3, #1
 8013e12:	e000      	b.n	8013e16 <xQueueReceiveFromISR+0x42>
 8013e14:	2300      	movs	r3, #0
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d10b      	bne.n	8013e32 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8013e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e1e:	f383 8811 	msr	BASEPRI, r3
 8013e22:	f3bf 8f6f 	isb	sy
 8013e26:	f3bf 8f4f 	dsb	sy
 8013e2a:	61fb      	str	r3, [r7, #28]
}
 8013e2c:	bf00      	nop
 8013e2e:	bf00      	nop
 8013e30:	e7fd      	b.n	8013e2e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013e32:	f001 fb89 	bl	8015548 <vPortValidateInterruptPriority>
	__asm volatile
 8013e36:	f3ef 8211 	mrs	r2, BASEPRI
 8013e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e3e:	f383 8811 	msr	BASEPRI, r3
 8013e42:	f3bf 8f6f 	isb	sy
 8013e46:	f3bf 8f4f 	dsb	sy
 8013e4a:	61ba      	str	r2, [r7, #24]
 8013e4c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013e4e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013e56:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d02f      	beq.n	8013ebe <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013e64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013e68:	68b9      	ldr	r1, [r7, #8]
 8013e6a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013e6c:	f000 f8b6 	bl	8013fdc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e72:	1e5a      	subs	r2, r3, #1
 8013e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e76:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013e78:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e80:	d112      	bne.n	8013ea8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e84:	691b      	ldr	r3, [r3, #16]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d016      	beq.n	8013eb8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e8c:	3310      	adds	r3, #16
 8013e8e:	4618      	mov	r0, r3
 8013e90:	f000 fd62 	bl	8014958 <xTaskRemoveFromEventList>
 8013e94:	4603      	mov	r3, r0
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d00e      	beq.n	8013eb8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d00b      	beq.n	8013eb8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	2201      	movs	r2, #1
 8013ea4:	601a      	str	r2, [r3, #0]
 8013ea6:	e007      	b.n	8013eb8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013ea8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013eac:	3301      	adds	r3, #1
 8013eae:	b2db      	uxtb	r3, r3
 8013eb0:	b25a      	sxtb	r2, r3
 8013eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013eb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8013eb8:	2301      	movs	r3, #1
 8013eba:	637b      	str	r3, [r7, #52]	@ 0x34
 8013ebc:	e001      	b.n	8013ec2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8013ebe:	2300      	movs	r3, #0
 8013ec0:	637b      	str	r3, [r7, #52]	@ 0x34
 8013ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ec4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013ec6:	693b      	ldr	r3, [r7, #16]
 8013ec8:	f383 8811 	msr	BASEPRI, r3
}
 8013ecc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	3738      	adds	r7, #56	@ 0x38
 8013ed4:	46bd      	mov	sp, r7
 8013ed6:	bd80      	pop	{r7, pc}

08013ed8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8013ed8:	b480      	push	{r7}
 8013eda:	b085      	sub	sp, #20
 8013edc:	af00      	add	r7, sp, #0
 8013ede:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d006      	beq.n	8013ef6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	f1c3 0307 	rsb	r3, r3, #7
 8013ef2:	60fb      	str	r3, [r7, #12]
 8013ef4:	e001      	b.n	8013efa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8013ef6:	2300      	movs	r3, #0
 8013ef8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8013efa:	68fb      	ldr	r3, [r7, #12]
	}
 8013efc:	4618      	mov	r0, r3
 8013efe:	3714      	adds	r7, #20
 8013f00:	46bd      	mov	sp, r7
 8013f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f06:	4770      	bx	lr

08013f08 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013f08:	b580      	push	{r7, lr}
 8013f0a:	b086      	sub	sp, #24
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	60f8      	str	r0, [r7, #12]
 8013f10:	60b9      	str	r1, [r7, #8]
 8013f12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013f14:	2300      	movs	r3, #0
 8013f16:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013f1c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d10d      	bne.n	8013f42 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013f26:	68fb      	ldr	r3, [r7, #12]
 8013f28:	681b      	ldr	r3, [r3, #0]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d14d      	bne.n	8013fca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	689b      	ldr	r3, [r3, #8]
 8013f32:	4618      	mov	r0, r3
 8013f34:	f000 ff64 	bl	8014e00 <xTaskPriorityDisinherit>
 8013f38:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013f3a:	68fb      	ldr	r3, [r7, #12]
 8013f3c:	2200      	movs	r2, #0
 8013f3e:	609a      	str	r2, [r3, #8]
 8013f40:	e043      	b.n	8013fca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d119      	bne.n	8013f7c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	6858      	ldr	r0, [r3, #4]
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013f50:	461a      	mov	r2, r3
 8013f52:	68b9      	ldr	r1, [r7, #8]
 8013f54:	f002 fd11 	bl	801697a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	685a      	ldr	r2, [r3, #4]
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013f60:	441a      	add	r2, r3
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	685a      	ldr	r2, [r3, #4]
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	689b      	ldr	r3, [r3, #8]
 8013f6e:	429a      	cmp	r2, r3
 8013f70:	d32b      	bcc.n	8013fca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	681a      	ldr	r2, [r3, #0]
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	605a      	str	r2, [r3, #4]
 8013f7a:	e026      	b.n	8013fca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	68d8      	ldr	r0, [r3, #12]
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013f84:	461a      	mov	r2, r3
 8013f86:	68b9      	ldr	r1, [r7, #8]
 8013f88:	f002 fcf7 	bl	801697a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	68da      	ldr	r2, [r3, #12]
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013f94:	425b      	negs	r3, r3
 8013f96:	441a      	add	r2, r3
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013f9c:	68fb      	ldr	r3, [r7, #12]
 8013f9e:	68da      	ldr	r2, [r3, #12]
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	429a      	cmp	r2, r3
 8013fa6:	d207      	bcs.n	8013fb8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	689a      	ldr	r2, [r3, #8]
 8013fac:	68fb      	ldr	r3, [r7, #12]
 8013fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013fb0:	425b      	negs	r3, r3
 8013fb2:	441a      	add	r2, r3
 8013fb4:	68fb      	ldr	r3, [r7, #12]
 8013fb6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	2b02      	cmp	r3, #2
 8013fbc:	d105      	bne.n	8013fca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013fbe:	693b      	ldr	r3, [r7, #16]
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d002      	beq.n	8013fca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013fc4:	693b      	ldr	r3, [r7, #16]
 8013fc6:	3b01      	subs	r3, #1
 8013fc8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013fca:	693b      	ldr	r3, [r7, #16]
 8013fcc:	1c5a      	adds	r2, r3, #1
 8013fce:	68fb      	ldr	r3, [r7, #12]
 8013fd0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8013fd2:	697b      	ldr	r3, [r7, #20]
}
 8013fd4:	4618      	mov	r0, r3
 8013fd6:	3718      	adds	r7, #24
 8013fd8:	46bd      	mov	sp, r7
 8013fda:	bd80      	pop	{r7, pc}

08013fdc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013fdc:	b580      	push	{r7, lr}
 8013fde:	b082      	sub	sp, #8
 8013fe0:	af00      	add	r7, sp, #0
 8013fe2:	6078      	str	r0, [r7, #4]
 8013fe4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d018      	beq.n	8014020 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	68da      	ldr	r2, [r3, #12]
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013ff6:	441a      	add	r2, r3
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	68da      	ldr	r2, [r3, #12]
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	689b      	ldr	r3, [r3, #8]
 8014004:	429a      	cmp	r2, r3
 8014006:	d303      	bcc.n	8014010 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	681a      	ldr	r2, [r3, #0]
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	68d9      	ldr	r1, [r3, #12]
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014018:	461a      	mov	r2, r3
 801401a:	6838      	ldr	r0, [r7, #0]
 801401c:	f002 fcad 	bl	801697a <memcpy>
	}
}
 8014020:	bf00      	nop
 8014022:	3708      	adds	r7, #8
 8014024:	46bd      	mov	sp, r7
 8014026:	bd80      	pop	{r7, pc}

08014028 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014028:	b580      	push	{r7, lr}
 801402a:	b084      	sub	sp, #16
 801402c:	af00      	add	r7, sp, #0
 801402e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8014030:	f001 f9aa 	bl	8015388 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801403a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801403c:	e011      	b.n	8014062 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014042:	2b00      	cmp	r3, #0
 8014044:	d012      	beq.n	801406c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	3324      	adds	r3, #36	@ 0x24
 801404a:	4618      	mov	r0, r3
 801404c:	f000 fc84 	bl	8014958 <xTaskRemoveFromEventList>
 8014050:	4603      	mov	r3, r0
 8014052:	2b00      	cmp	r3, #0
 8014054:	d001      	beq.n	801405a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8014056:	f000 fd5d 	bl	8014b14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801405a:	7bfb      	ldrb	r3, [r7, #15]
 801405c:	3b01      	subs	r3, #1
 801405e:	b2db      	uxtb	r3, r3
 8014060:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014066:	2b00      	cmp	r3, #0
 8014068:	dce9      	bgt.n	801403e <prvUnlockQueue+0x16>
 801406a:	e000      	b.n	801406e <prvUnlockQueue+0x46>
					break;
 801406c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	22ff      	movs	r2, #255	@ 0xff
 8014072:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8014076:	f001 f9b9 	bl	80153ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801407a:	f001 f985 	bl	8015388 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014084:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014086:	e011      	b.n	80140ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	691b      	ldr	r3, [r3, #16]
 801408c:	2b00      	cmp	r3, #0
 801408e:	d012      	beq.n	80140b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	3310      	adds	r3, #16
 8014094:	4618      	mov	r0, r3
 8014096:	f000 fc5f 	bl	8014958 <xTaskRemoveFromEventList>
 801409a:	4603      	mov	r3, r0
 801409c:	2b00      	cmp	r3, #0
 801409e:	d001      	beq.n	80140a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80140a0:	f000 fd38 	bl	8014b14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80140a4:	7bbb      	ldrb	r3, [r7, #14]
 80140a6:	3b01      	subs	r3, #1
 80140a8:	b2db      	uxtb	r3, r3
 80140aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80140ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	dce9      	bgt.n	8014088 <prvUnlockQueue+0x60>
 80140b4:	e000      	b.n	80140b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80140b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	22ff      	movs	r2, #255	@ 0xff
 80140bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80140c0:	f001 f994 	bl	80153ec <vPortExitCritical>
}
 80140c4:	bf00      	nop
 80140c6:	3710      	adds	r7, #16
 80140c8:	46bd      	mov	sp, r7
 80140ca:	bd80      	pop	{r7, pc}

080140cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80140cc:	b580      	push	{r7, lr}
 80140ce:	b084      	sub	sp, #16
 80140d0:	af00      	add	r7, sp, #0
 80140d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80140d4:	f001 f958 	bl	8015388 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d102      	bne.n	80140e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80140e0:	2301      	movs	r3, #1
 80140e2:	60fb      	str	r3, [r7, #12]
 80140e4:	e001      	b.n	80140ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80140e6:	2300      	movs	r3, #0
 80140e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80140ea:	f001 f97f 	bl	80153ec <vPortExitCritical>

	return xReturn;
 80140ee:	68fb      	ldr	r3, [r7, #12]
}
 80140f0:	4618      	mov	r0, r3
 80140f2:	3710      	adds	r7, #16
 80140f4:	46bd      	mov	sp, r7
 80140f6:	bd80      	pop	{r7, pc}

080140f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80140f8:	b580      	push	{r7, lr}
 80140fa:	b084      	sub	sp, #16
 80140fc:	af00      	add	r7, sp, #0
 80140fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014100:	f001 f942 	bl	8015388 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801410c:	429a      	cmp	r2, r3
 801410e:	d102      	bne.n	8014116 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8014110:	2301      	movs	r3, #1
 8014112:	60fb      	str	r3, [r7, #12]
 8014114:	e001      	b.n	801411a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014116:	2300      	movs	r3, #0
 8014118:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801411a:	f001 f967 	bl	80153ec <vPortExitCritical>

	return xReturn;
 801411e:	68fb      	ldr	r3, [r7, #12]
}
 8014120:	4618      	mov	r0, r3
 8014122:	3710      	adds	r7, #16
 8014124:	46bd      	mov	sp, r7
 8014126:	bd80      	pop	{r7, pc}

08014128 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014128:	b580      	push	{r7, lr}
 801412a:	b08e      	sub	sp, #56	@ 0x38
 801412c:	af04      	add	r7, sp, #16
 801412e:	60f8      	str	r0, [r7, #12]
 8014130:	60b9      	str	r1, [r7, #8]
 8014132:	607a      	str	r2, [r7, #4]
 8014134:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8014136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014138:	2b00      	cmp	r3, #0
 801413a:	d10b      	bne.n	8014154 <xTaskCreateStatic+0x2c>
	__asm volatile
 801413c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014140:	f383 8811 	msr	BASEPRI, r3
 8014144:	f3bf 8f6f 	isb	sy
 8014148:	f3bf 8f4f 	dsb	sy
 801414c:	623b      	str	r3, [r7, #32]
}
 801414e:	bf00      	nop
 8014150:	bf00      	nop
 8014152:	e7fd      	b.n	8014150 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8014154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014156:	2b00      	cmp	r3, #0
 8014158:	d10b      	bne.n	8014172 <xTaskCreateStatic+0x4a>
	__asm volatile
 801415a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801415e:	f383 8811 	msr	BASEPRI, r3
 8014162:	f3bf 8f6f 	isb	sy
 8014166:	f3bf 8f4f 	dsb	sy
 801416a:	61fb      	str	r3, [r7, #28]
}
 801416c:	bf00      	nop
 801416e:	bf00      	nop
 8014170:	e7fd      	b.n	801416e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8014172:	2354      	movs	r3, #84	@ 0x54
 8014174:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8014176:	693b      	ldr	r3, [r7, #16]
 8014178:	2b54      	cmp	r3, #84	@ 0x54
 801417a:	d00b      	beq.n	8014194 <xTaskCreateStatic+0x6c>
	__asm volatile
 801417c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014180:	f383 8811 	msr	BASEPRI, r3
 8014184:	f3bf 8f6f 	isb	sy
 8014188:	f3bf 8f4f 	dsb	sy
 801418c:	61bb      	str	r3, [r7, #24]
}
 801418e:	bf00      	nop
 8014190:	bf00      	nop
 8014192:	e7fd      	b.n	8014190 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8014194:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014198:	2b00      	cmp	r3, #0
 801419a:	d01e      	beq.n	80141da <xTaskCreateStatic+0xb2>
 801419c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d01b      	beq.n	80141da <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80141a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80141a4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80141a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80141aa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80141ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141ae:	2202      	movs	r2, #2
 80141b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80141b4:	2300      	movs	r3, #0
 80141b6:	9303      	str	r3, [sp, #12]
 80141b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141ba:	9302      	str	r3, [sp, #8]
 80141bc:	f107 0314 	add.w	r3, r7, #20
 80141c0:	9301      	str	r3, [sp, #4]
 80141c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141c4:	9300      	str	r3, [sp, #0]
 80141c6:	683b      	ldr	r3, [r7, #0]
 80141c8:	687a      	ldr	r2, [r7, #4]
 80141ca:	68b9      	ldr	r1, [r7, #8]
 80141cc:	68f8      	ldr	r0, [r7, #12]
 80141ce:	f000 f850 	bl	8014272 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80141d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80141d4:	f000 f8d6 	bl	8014384 <prvAddNewTaskToReadyList>
 80141d8:	e001      	b.n	80141de <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80141da:	2300      	movs	r3, #0
 80141dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80141de:	697b      	ldr	r3, [r7, #20]
	}
 80141e0:	4618      	mov	r0, r3
 80141e2:	3728      	adds	r7, #40	@ 0x28
 80141e4:	46bd      	mov	sp, r7
 80141e6:	bd80      	pop	{r7, pc}

080141e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80141e8:	b580      	push	{r7, lr}
 80141ea:	b08c      	sub	sp, #48	@ 0x30
 80141ec:	af04      	add	r7, sp, #16
 80141ee:	60f8      	str	r0, [r7, #12]
 80141f0:	60b9      	str	r1, [r7, #8]
 80141f2:	603b      	str	r3, [r7, #0]
 80141f4:	4613      	mov	r3, r2
 80141f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80141f8:	88fb      	ldrh	r3, [r7, #6]
 80141fa:	009b      	lsls	r3, r3, #2
 80141fc:	4618      	mov	r0, r3
 80141fe:	f001 f9e5 	bl	80155cc <pvPortMalloc>
 8014202:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014204:	697b      	ldr	r3, [r7, #20]
 8014206:	2b00      	cmp	r3, #0
 8014208:	d00e      	beq.n	8014228 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801420a:	2054      	movs	r0, #84	@ 0x54
 801420c:	f001 f9de 	bl	80155cc <pvPortMalloc>
 8014210:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014212:	69fb      	ldr	r3, [r7, #28]
 8014214:	2b00      	cmp	r3, #0
 8014216:	d003      	beq.n	8014220 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014218:	69fb      	ldr	r3, [r7, #28]
 801421a:	697a      	ldr	r2, [r7, #20]
 801421c:	631a      	str	r2, [r3, #48]	@ 0x30
 801421e:	e005      	b.n	801422c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014220:	6978      	ldr	r0, [r7, #20]
 8014222:	f001 faa1 	bl	8015768 <vPortFree>
 8014226:	e001      	b.n	801422c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014228:	2300      	movs	r3, #0
 801422a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801422c:	69fb      	ldr	r3, [r7, #28]
 801422e:	2b00      	cmp	r3, #0
 8014230:	d017      	beq.n	8014262 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014232:	69fb      	ldr	r3, [r7, #28]
 8014234:	2200      	movs	r2, #0
 8014236:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801423a:	88fa      	ldrh	r2, [r7, #6]
 801423c:	2300      	movs	r3, #0
 801423e:	9303      	str	r3, [sp, #12]
 8014240:	69fb      	ldr	r3, [r7, #28]
 8014242:	9302      	str	r3, [sp, #8]
 8014244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014246:	9301      	str	r3, [sp, #4]
 8014248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801424a:	9300      	str	r3, [sp, #0]
 801424c:	683b      	ldr	r3, [r7, #0]
 801424e:	68b9      	ldr	r1, [r7, #8]
 8014250:	68f8      	ldr	r0, [r7, #12]
 8014252:	f000 f80e 	bl	8014272 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014256:	69f8      	ldr	r0, [r7, #28]
 8014258:	f000 f894 	bl	8014384 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801425c:	2301      	movs	r3, #1
 801425e:	61bb      	str	r3, [r7, #24]
 8014260:	e002      	b.n	8014268 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014262:	f04f 33ff 	mov.w	r3, #4294967295
 8014266:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014268:	69bb      	ldr	r3, [r7, #24]
	}
 801426a:	4618      	mov	r0, r3
 801426c:	3720      	adds	r7, #32
 801426e:	46bd      	mov	sp, r7
 8014270:	bd80      	pop	{r7, pc}

08014272 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014272:	b580      	push	{r7, lr}
 8014274:	b088      	sub	sp, #32
 8014276:	af00      	add	r7, sp, #0
 8014278:	60f8      	str	r0, [r7, #12]
 801427a:	60b9      	str	r1, [r7, #8]
 801427c:	607a      	str	r2, [r7, #4]
 801427e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014282:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8014284:	6879      	ldr	r1, [r7, #4]
 8014286:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801428a:	440b      	add	r3, r1
 801428c:	009b      	lsls	r3, r3, #2
 801428e:	4413      	add	r3, r2
 8014290:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014292:	69bb      	ldr	r3, [r7, #24]
 8014294:	f023 0307 	bic.w	r3, r3, #7
 8014298:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801429a:	69bb      	ldr	r3, [r7, #24]
 801429c:	f003 0307 	and.w	r3, r3, #7
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d00b      	beq.n	80142bc <prvInitialiseNewTask+0x4a>
	__asm volatile
 80142a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80142a8:	f383 8811 	msr	BASEPRI, r3
 80142ac:	f3bf 8f6f 	isb	sy
 80142b0:	f3bf 8f4f 	dsb	sy
 80142b4:	617b      	str	r3, [r7, #20]
}
 80142b6:	bf00      	nop
 80142b8:	bf00      	nop
 80142ba:	e7fd      	b.n	80142b8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80142bc:	68bb      	ldr	r3, [r7, #8]
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d01f      	beq.n	8014302 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80142c2:	2300      	movs	r3, #0
 80142c4:	61fb      	str	r3, [r7, #28]
 80142c6:	e012      	b.n	80142ee <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80142c8:	68ba      	ldr	r2, [r7, #8]
 80142ca:	69fb      	ldr	r3, [r7, #28]
 80142cc:	4413      	add	r3, r2
 80142ce:	7819      	ldrb	r1, [r3, #0]
 80142d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80142d2:	69fb      	ldr	r3, [r7, #28]
 80142d4:	4413      	add	r3, r2
 80142d6:	3334      	adds	r3, #52	@ 0x34
 80142d8:	460a      	mov	r2, r1
 80142da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80142dc:	68ba      	ldr	r2, [r7, #8]
 80142de:	69fb      	ldr	r3, [r7, #28]
 80142e0:	4413      	add	r3, r2
 80142e2:	781b      	ldrb	r3, [r3, #0]
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d006      	beq.n	80142f6 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80142e8:	69fb      	ldr	r3, [r7, #28]
 80142ea:	3301      	adds	r3, #1
 80142ec:	61fb      	str	r3, [r7, #28]
 80142ee:	69fb      	ldr	r3, [r7, #28]
 80142f0:	2b0f      	cmp	r3, #15
 80142f2:	d9e9      	bls.n	80142c8 <prvInitialiseNewTask+0x56>
 80142f4:	e000      	b.n	80142f8 <prvInitialiseNewTask+0x86>
			{
				break;
 80142f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80142f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80142fa:	2200      	movs	r2, #0
 80142fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8014300:	e003      	b.n	801430a <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014304:	2200      	movs	r2, #0
 8014306:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801430a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801430c:	2b06      	cmp	r3, #6
 801430e:	d901      	bls.n	8014314 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014310:	2306      	movs	r3, #6
 8014312:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014316:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014318:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801431a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801431c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801431e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8014320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014322:	2200      	movs	r2, #0
 8014324:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014328:	3304      	adds	r3, #4
 801432a:	4618      	mov	r0, r3
 801432c:	f7ff fa1c 	bl	8013768 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014332:	3318      	adds	r3, #24
 8014334:	4618      	mov	r0, r3
 8014336:	f7ff fa17 	bl	8013768 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801433a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801433c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801433e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014342:	f1c3 0207 	rsb	r2, r3, #7
 8014346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014348:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801434a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801434c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801434e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014352:	2200      	movs	r2, #0
 8014354:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014358:	2200      	movs	r2, #0
 801435a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801435e:	683a      	ldr	r2, [r7, #0]
 8014360:	68f9      	ldr	r1, [r7, #12]
 8014362:	69b8      	ldr	r0, [r7, #24]
 8014364:	f000 fede 	bl	8015124 <pxPortInitialiseStack>
 8014368:	4602      	mov	r2, r0
 801436a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801436c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801436e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014370:	2b00      	cmp	r3, #0
 8014372:	d002      	beq.n	801437a <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014376:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014378:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801437a:	bf00      	nop
 801437c:	3720      	adds	r7, #32
 801437e:	46bd      	mov	sp, r7
 8014380:	bd80      	pop	{r7, pc}
	...

08014384 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014384:	b580      	push	{r7, lr}
 8014386:	b082      	sub	sp, #8
 8014388:	af00      	add	r7, sp, #0
 801438a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801438c:	f000 fffc 	bl	8015388 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014390:	4b2a      	ldr	r3, [pc, #168]	@ (801443c <prvAddNewTaskToReadyList+0xb8>)
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	3301      	adds	r3, #1
 8014396:	4a29      	ldr	r2, [pc, #164]	@ (801443c <prvAddNewTaskToReadyList+0xb8>)
 8014398:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801439a:	4b29      	ldr	r3, [pc, #164]	@ (8014440 <prvAddNewTaskToReadyList+0xbc>)
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d109      	bne.n	80143b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80143a2:	4a27      	ldr	r2, [pc, #156]	@ (8014440 <prvAddNewTaskToReadyList+0xbc>)
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80143a8:	4b24      	ldr	r3, [pc, #144]	@ (801443c <prvAddNewTaskToReadyList+0xb8>)
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	2b01      	cmp	r3, #1
 80143ae:	d110      	bne.n	80143d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80143b0:	f000 fbd4 	bl	8014b5c <prvInitialiseTaskLists>
 80143b4:	e00d      	b.n	80143d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80143b6:	4b23      	ldr	r3, [pc, #140]	@ (8014444 <prvAddNewTaskToReadyList+0xc0>)
 80143b8:	681b      	ldr	r3, [r3, #0]
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d109      	bne.n	80143d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80143be:	4b20      	ldr	r3, [pc, #128]	@ (8014440 <prvAddNewTaskToReadyList+0xbc>)
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80143c8:	429a      	cmp	r2, r3
 80143ca:	d802      	bhi.n	80143d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80143cc:	4a1c      	ldr	r2, [pc, #112]	@ (8014440 <prvAddNewTaskToReadyList+0xbc>)
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80143d2:	4b1d      	ldr	r3, [pc, #116]	@ (8014448 <prvAddNewTaskToReadyList+0xc4>)
 80143d4:	681b      	ldr	r3, [r3, #0]
 80143d6:	3301      	adds	r3, #1
 80143d8:	4a1b      	ldr	r2, [pc, #108]	@ (8014448 <prvAddNewTaskToReadyList+0xc4>)
 80143da:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80143e0:	2201      	movs	r2, #1
 80143e2:	409a      	lsls	r2, r3
 80143e4:	4b19      	ldr	r3, [pc, #100]	@ (801444c <prvAddNewTaskToReadyList+0xc8>)
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	4313      	orrs	r3, r2
 80143ea:	4a18      	ldr	r2, [pc, #96]	@ (801444c <prvAddNewTaskToReadyList+0xc8>)
 80143ec:	6013      	str	r3, [r2, #0]
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80143f2:	4613      	mov	r3, r2
 80143f4:	009b      	lsls	r3, r3, #2
 80143f6:	4413      	add	r3, r2
 80143f8:	009b      	lsls	r3, r3, #2
 80143fa:	4a15      	ldr	r2, [pc, #84]	@ (8014450 <prvAddNewTaskToReadyList+0xcc>)
 80143fc:	441a      	add	r2, r3
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	3304      	adds	r3, #4
 8014402:	4619      	mov	r1, r3
 8014404:	4610      	mov	r0, r2
 8014406:	f7ff f9bc 	bl	8013782 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801440a:	f000 ffef 	bl	80153ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801440e:	4b0d      	ldr	r3, [pc, #52]	@ (8014444 <prvAddNewTaskToReadyList+0xc0>)
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	2b00      	cmp	r3, #0
 8014414:	d00e      	beq.n	8014434 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014416:	4b0a      	ldr	r3, [pc, #40]	@ (8014440 <prvAddNewTaskToReadyList+0xbc>)
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014420:	429a      	cmp	r2, r3
 8014422:	d207      	bcs.n	8014434 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014424:	4b0b      	ldr	r3, [pc, #44]	@ (8014454 <prvAddNewTaskToReadyList+0xd0>)
 8014426:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801442a:	601a      	str	r2, [r3, #0]
 801442c:	f3bf 8f4f 	dsb	sy
 8014430:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014434:	bf00      	nop
 8014436:	3708      	adds	r7, #8
 8014438:	46bd      	mov	sp, r7
 801443a:	bd80      	pop	{r7, pc}
 801443c:	240029c4 	.word	0x240029c4
 8014440:	240028c4 	.word	0x240028c4
 8014444:	240029d0 	.word	0x240029d0
 8014448:	240029e0 	.word	0x240029e0
 801444c:	240029cc 	.word	0x240029cc
 8014450:	240028c8 	.word	0x240028c8
 8014454:	e000ed04 	.word	0xe000ed04

08014458 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014458:	b580      	push	{r7, lr}
 801445a:	b084      	sub	sp, #16
 801445c:	af00      	add	r7, sp, #0
 801445e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014460:	2300      	movs	r3, #0
 8014462:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	2b00      	cmp	r3, #0
 8014468:	d018      	beq.n	801449c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801446a:	4b14      	ldr	r3, [pc, #80]	@ (80144bc <vTaskDelay+0x64>)
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	2b00      	cmp	r3, #0
 8014470:	d00b      	beq.n	801448a <vTaskDelay+0x32>
	__asm volatile
 8014472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014476:	f383 8811 	msr	BASEPRI, r3
 801447a:	f3bf 8f6f 	isb	sy
 801447e:	f3bf 8f4f 	dsb	sy
 8014482:	60bb      	str	r3, [r7, #8]
}
 8014484:	bf00      	nop
 8014486:	bf00      	nop
 8014488:	e7fd      	b.n	8014486 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801448a:	f000 f87d 	bl	8014588 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801448e:	2100      	movs	r1, #0
 8014490:	6878      	ldr	r0, [r7, #4]
 8014492:	f000 fde1 	bl	8015058 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014496:	f000 f885 	bl	80145a4 <xTaskResumeAll>
 801449a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801449c:	68fb      	ldr	r3, [r7, #12]
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d107      	bne.n	80144b2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80144a2:	4b07      	ldr	r3, [pc, #28]	@ (80144c0 <vTaskDelay+0x68>)
 80144a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80144a8:	601a      	str	r2, [r3, #0]
 80144aa:	f3bf 8f4f 	dsb	sy
 80144ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80144b2:	bf00      	nop
 80144b4:	3710      	adds	r7, #16
 80144b6:	46bd      	mov	sp, r7
 80144b8:	bd80      	pop	{r7, pc}
 80144ba:	bf00      	nop
 80144bc:	240029ec 	.word	0x240029ec
 80144c0:	e000ed04 	.word	0xe000ed04

080144c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80144c4:	b580      	push	{r7, lr}
 80144c6:	b08a      	sub	sp, #40	@ 0x28
 80144c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80144ca:	2300      	movs	r3, #0
 80144cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80144ce:	2300      	movs	r3, #0
 80144d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80144d2:	463a      	mov	r2, r7
 80144d4:	1d39      	adds	r1, r7, #4
 80144d6:	f107 0308 	add.w	r3, r7, #8
 80144da:	4618      	mov	r0, r3
 80144dc:	f7ec fc32 	bl	8000d44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80144e0:	6839      	ldr	r1, [r7, #0]
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	68ba      	ldr	r2, [r7, #8]
 80144e6:	9202      	str	r2, [sp, #8]
 80144e8:	9301      	str	r3, [sp, #4]
 80144ea:	2300      	movs	r3, #0
 80144ec:	9300      	str	r3, [sp, #0]
 80144ee:	2300      	movs	r3, #0
 80144f0:	460a      	mov	r2, r1
 80144f2:	491f      	ldr	r1, [pc, #124]	@ (8014570 <vTaskStartScheduler+0xac>)
 80144f4:	481f      	ldr	r0, [pc, #124]	@ (8014574 <vTaskStartScheduler+0xb0>)
 80144f6:	f7ff fe17 	bl	8014128 <xTaskCreateStatic>
 80144fa:	4603      	mov	r3, r0
 80144fc:	4a1e      	ldr	r2, [pc, #120]	@ (8014578 <vTaskStartScheduler+0xb4>)
 80144fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014500:	4b1d      	ldr	r3, [pc, #116]	@ (8014578 <vTaskStartScheduler+0xb4>)
 8014502:	681b      	ldr	r3, [r3, #0]
 8014504:	2b00      	cmp	r3, #0
 8014506:	d002      	beq.n	801450e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014508:	2301      	movs	r3, #1
 801450a:	617b      	str	r3, [r7, #20]
 801450c:	e001      	b.n	8014512 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801450e:	2300      	movs	r3, #0
 8014510:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014512:	697b      	ldr	r3, [r7, #20]
 8014514:	2b01      	cmp	r3, #1
 8014516:	d116      	bne.n	8014546 <vTaskStartScheduler+0x82>
	__asm volatile
 8014518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801451c:	f383 8811 	msr	BASEPRI, r3
 8014520:	f3bf 8f6f 	isb	sy
 8014524:	f3bf 8f4f 	dsb	sy
 8014528:	613b      	str	r3, [r7, #16]
}
 801452a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801452c:	4b13      	ldr	r3, [pc, #76]	@ (801457c <vTaskStartScheduler+0xb8>)
 801452e:	f04f 32ff 	mov.w	r2, #4294967295
 8014532:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014534:	4b12      	ldr	r3, [pc, #72]	@ (8014580 <vTaskStartScheduler+0xbc>)
 8014536:	2201      	movs	r2, #1
 8014538:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801453a:	4b12      	ldr	r3, [pc, #72]	@ (8014584 <vTaskStartScheduler+0xc0>)
 801453c:	2200      	movs	r2, #0
 801453e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014540:	f000 fe7e 	bl	8015240 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014544:	e00f      	b.n	8014566 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014546:	697b      	ldr	r3, [r7, #20]
 8014548:	f1b3 3fff 	cmp.w	r3, #4294967295
 801454c:	d10b      	bne.n	8014566 <vTaskStartScheduler+0xa2>
	__asm volatile
 801454e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014552:	f383 8811 	msr	BASEPRI, r3
 8014556:	f3bf 8f6f 	isb	sy
 801455a:	f3bf 8f4f 	dsb	sy
 801455e:	60fb      	str	r3, [r7, #12]
}
 8014560:	bf00      	nop
 8014562:	bf00      	nop
 8014564:	e7fd      	b.n	8014562 <vTaskStartScheduler+0x9e>
}
 8014566:	bf00      	nop
 8014568:	3718      	adds	r7, #24
 801456a:	46bd      	mov	sp, r7
 801456c:	bd80      	pop	{r7, pc}
 801456e:	bf00      	nop
 8014570:	0801898c 	.word	0x0801898c
 8014574:	08014b2d 	.word	0x08014b2d
 8014578:	240029e8 	.word	0x240029e8
 801457c:	240029e4 	.word	0x240029e4
 8014580:	240029d0 	.word	0x240029d0
 8014584:	240029c8 	.word	0x240029c8

08014588 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014588:	b480      	push	{r7}
 801458a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801458c:	4b04      	ldr	r3, [pc, #16]	@ (80145a0 <vTaskSuspendAll+0x18>)
 801458e:	681b      	ldr	r3, [r3, #0]
 8014590:	3301      	adds	r3, #1
 8014592:	4a03      	ldr	r2, [pc, #12]	@ (80145a0 <vTaskSuspendAll+0x18>)
 8014594:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8014596:	bf00      	nop
 8014598:	46bd      	mov	sp, r7
 801459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801459e:	4770      	bx	lr
 80145a0:	240029ec 	.word	0x240029ec

080145a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80145a4:	b580      	push	{r7, lr}
 80145a6:	b084      	sub	sp, #16
 80145a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80145aa:	2300      	movs	r3, #0
 80145ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80145ae:	2300      	movs	r3, #0
 80145b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80145b2:	4b42      	ldr	r3, [pc, #264]	@ (80146bc <xTaskResumeAll+0x118>)
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d10b      	bne.n	80145d2 <xTaskResumeAll+0x2e>
	__asm volatile
 80145ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80145be:	f383 8811 	msr	BASEPRI, r3
 80145c2:	f3bf 8f6f 	isb	sy
 80145c6:	f3bf 8f4f 	dsb	sy
 80145ca:	603b      	str	r3, [r7, #0]
}
 80145cc:	bf00      	nop
 80145ce:	bf00      	nop
 80145d0:	e7fd      	b.n	80145ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80145d2:	f000 fed9 	bl	8015388 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80145d6:	4b39      	ldr	r3, [pc, #228]	@ (80146bc <xTaskResumeAll+0x118>)
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	3b01      	subs	r3, #1
 80145dc:	4a37      	ldr	r2, [pc, #220]	@ (80146bc <xTaskResumeAll+0x118>)
 80145de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80145e0:	4b36      	ldr	r3, [pc, #216]	@ (80146bc <xTaskResumeAll+0x118>)
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d161      	bne.n	80146ac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80145e8:	4b35      	ldr	r3, [pc, #212]	@ (80146c0 <xTaskResumeAll+0x11c>)
 80145ea:	681b      	ldr	r3, [r3, #0]
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d05d      	beq.n	80146ac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80145f0:	e02e      	b.n	8014650 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80145f2:	4b34      	ldr	r3, [pc, #208]	@ (80146c4 <xTaskResumeAll+0x120>)
 80145f4:	68db      	ldr	r3, [r3, #12]
 80145f6:	68db      	ldr	r3, [r3, #12]
 80145f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80145fa:	68fb      	ldr	r3, [r7, #12]
 80145fc:	3318      	adds	r3, #24
 80145fe:	4618      	mov	r0, r3
 8014600:	f7ff f91c 	bl	801383c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014604:	68fb      	ldr	r3, [r7, #12]
 8014606:	3304      	adds	r3, #4
 8014608:	4618      	mov	r0, r3
 801460a:	f7ff f917 	bl	801383c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801460e:	68fb      	ldr	r3, [r7, #12]
 8014610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014612:	2201      	movs	r2, #1
 8014614:	409a      	lsls	r2, r3
 8014616:	4b2c      	ldr	r3, [pc, #176]	@ (80146c8 <xTaskResumeAll+0x124>)
 8014618:	681b      	ldr	r3, [r3, #0]
 801461a:	4313      	orrs	r3, r2
 801461c:	4a2a      	ldr	r2, [pc, #168]	@ (80146c8 <xTaskResumeAll+0x124>)
 801461e:	6013      	str	r3, [r2, #0]
 8014620:	68fb      	ldr	r3, [r7, #12]
 8014622:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014624:	4613      	mov	r3, r2
 8014626:	009b      	lsls	r3, r3, #2
 8014628:	4413      	add	r3, r2
 801462a:	009b      	lsls	r3, r3, #2
 801462c:	4a27      	ldr	r2, [pc, #156]	@ (80146cc <xTaskResumeAll+0x128>)
 801462e:	441a      	add	r2, r3
 8014630:	68fb      	ldr	r3, [r7, #12]
 8014632:	3304      	adds	r3, #4
 8014634:	4619      	mov	r1, r3
 8014636:	4610      	mov	r0, r2
 8014638:	f7ff f8a3 	bl	8013782 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801463c:	68fb      	ldr	r3, [r7, #12]
 801463e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014640:	4b23      	ldr	r3, [pc, #140]	@ (80146d0 <xTaskResumeAll+0x12c>)
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014646:	429a      	cmp	r2, r3
 8014648:	d302      	bcc.n	8014650 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801464a:	4b22      	ldr	r3, [pc, #136]	@ (80146d4 <xTaskResumeAll+0x130>)
 801464c:	2201      	movs	r2, #1
 801464e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014650:	4b1c      	ldr	r3, [pc, #112]	@ (80146c4 <xTaskResumeAll+0x120>)
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	2b00      	cmp	r3, #0
 8014656:	d1cc      	bne.n	80145f2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	2b00      	cmp	r3, #0
 801465c:	d001      	beq.n	8014662 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801465e:	f000 fb1b 	bl	8014c98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8014662:	4b1d      	ldr	r3, [pc, #116]	@ (80146d8 <xTaskResumeAll+0x134>)
 8014664:	681b      	ldr	r3, [r3, #0]
 8014666:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	2b00      	cmp	r3, #0
 801466c:	d010      	beq.n	8014690 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801466e:	f000 f837 	bl	80146e0 <xTaskIncrementTick>
 8014672:	4603      	mov	r3, r0
 8014674:	2b00      	cmp	r3, #0
 8014676:	d002      	beq.n	801467e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8014678:	4b16      	ldr	r3, [pc, #88]	@ (80146d4 <xTaskResumeAll+0x130>)
 801467a:	2201      	movs	r2, #1
 801467c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	3b01      	subs	r3, #1
 8014682:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	2b00      	cmp	r3, #0
 8014688:	d1f1      	bne.n	801466e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801468a:	4b13      	ldr	r3, [pc, #76]	@ (80146d8 <xTaskResumeAll+0x134>)
 801468c:	2200      	movs	r2, #0
 801468e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014690:	4b10      	ldr	r3, [pc, #64]	@ (80146d4 <xTaskResumeAll+0x130>)
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d009      	beq.n	80146ac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014698:	2301      	movs	r3, #1
 801469a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801469c:	4b0f      	ldr	r3, [pc, #60]	@ (80146dc <xTaskResumeAll+0x138>)
 801469e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80146a2:	601a      	str	r2, [r3, #0]
 80146a4:	f3bf 8f4f 	dsb	sy
 80146a8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80146ac:	f000 fe9e 	bl	80153ec <vPortExitCritical>

	return xAlreadyYielded;
 80146b0:	68bb      	ldr	r3, [r7, #8]
}
 80146b2:	4618      	mov	r0, r3
 80146b4:	3710      	adds	r7, #16
 80146b6:	46bd      	mov	sp, r7
 80146b8:	bd80      	pop	{r7, pc}
 80146ba:	bf00      	nop
 80146bc:	240029ec 	.word	0x240029ec
 80146c0:	240029c4 	.word	0x240029c4
 80146c4:	24002984 	.word	0x24002984
 80146c8:	240029cc 	.word	0x240029cc
 80146cc:	240028c8 	.word	0x240028c8
 80146d0:	240028c4 	.word	0x240028c4
 80146d4:	240029d8 	.word	0x240029d8
 80146d8:	240029d4 	.word	0x240029d4
 80146dc:	e000ed04 	.word	0xe000ed04

080146e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80146e0:	b580      	push	{r7, lr}
 80146e2:	b086      	sub	sp, #24
 80146e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80146e6:	2300      	movs	r3, #0
 80146e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80146ea:	4b4f      	ldr	r3, [pc, #316]	@ (8014828 <xTaskIncrementTick+0x148>)
 80146ec:	681b      	ldr	r3, [r3, #0]
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	f040 808f 	bne.w	8014812 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80146f4:	4b4d      	ldr	r3, [pc, #308]	@ (801482c <xTaskIncrementTick+0x14c>)
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	3301      	adds	r3, #1
 80146fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80146fc:	4a4b      	ldr	r2, [pc, #300]	@ (801482c <xTaskIncrementTick+0x14c>)
 80146fe:	693b      	ldr	r3, [r7, #16]
 8014700:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014702:	693b      	ldr	r3, [r7, #16]
 8014704:	2b00      	cmp	r3, #0
 8014706:	d121      	bne.n	801474c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8014708:	4b49      	ldr	r3, [pc, #292]	@ (8014830 <xTaskIncrementTick+0x150>)
 801470a:	681b      	ldr	r3, [r3, #0]
 801470c:	681b      	ldr	r3, [r3, #0]
 801470e:	2b00      	cmp	r3, #0
 8014710:	d00b      	beq.n	801472a <xTaskIncrementTick+0x4a>
	__asm volatile
 8014712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014716:	f383 8811 	msr	BASEPRI, r3
 801471a:	f3bf 8f6f 	isb	sy
 801471e:	f3bf 8f4f 	dsb	sy
 8014722:	603b      	str	r3, [r7, #0]
}
 8014724:	bf00      	nop
 8014726:	bf00      	nop
 8014728:	e7fd      	b.n	8014726 <xTaskIncrementTick+0x46>
 801472a:	4b41      	ldr	r3, [pc, #260]	@ (8014830 <xTaskIncrementTick+0x150>)
 801472c:	681b      	ldr	r3, [r3, #0]
 801472e:	60fb      	str	r3, [r7, #12]
 8014730:	4b40      	ldr	r3, [pc, #256]	@ (8014834 <xTaskIncrementTick+0x154>)
 8014732:	681b      	ldr	r3, [r3, #0]
 8014734:	4a3e      	ldr	r2, [pc, #248]	@ (8014830 <xTaskIncrementTick+0x150>)
 8014736:	6013      	str	r3, [r2, #0]
 8014738:	4a3e      	ldr	r2, [pc, #248]	@ (8014834 <xTaskIncrementTick+0x154>)
 801473a:	68fb      	ldr	r3, [r7, #12]
 801473c:	6013      	str	r3, [r2, #0]
 801473e:	4b3e      	ldr	r3, [pc, #248]	@ (8014838 <xTaskIncrementTick+0x158>)
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	3301      	adds	r3, #1
 8014744:	4a3c      	ldr	r2, [pc, #240]	@ (8014838 <xTaskIncrementTick+0x158>)
 8014746:	6013      	str	r3, [r2, #0]
 8014748:	f000 faa6 	bl	8014c98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801474c:	4b3b      	ldr	r3, [pc, #236]	@ (801483c <xTaskIncrementTick+0x15c>)
 801474e:	681b      	ldr	r3, [r3, #0]
 8014750:	693a      	ldr	r2, [r7, #16]
 8014752:	429a      	cmp	r2, r3
 8014754:	d348      	bcc.n	80147e8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014756:	4b36      	ldr	r3, [pc, #216]	@ (8014830 <xTaskIncrementTick+0x150>)
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	681b      	ldr	r3, [r3, #0]
 801475c:	2b00      	cmp	r3, #0
 801475e:	d104      	bne.n	801476a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014760:	4b36      	ldr	r3, [pc, #216]	@ (801483c <xTaskIncrementTick+0x15c>)
 8014762:	f04f 32ff 	mov.w	r2, #4294967295
 8014766:	601a      	str	r2, [r3, #0]
					break;
 8014768:	e03e      	b.n	80147e8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801476a:	4b31      	ldr	r3, [pc, #196]	@ (8014830 <xTaskIncrementTick+0x150>)
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	68db      	ldr	r3, [r3, #12]
 8014770:	68db      	ldr	r3, [r3, #12]
 8014772:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014774:	68bb      	ldr	r3, [r7, #8]
 8014776:	685b      	ldr	r3, [r3, #4]
 8014778:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801477a:	693a      	ldr	r2, [r7, #16]
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	429a      	cmp	r2, r3
 8014780:	d203      	bcs.n	801478a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014782:	4a2e      	ldr	r2, [pc, #184]	@ (801483c <xTaskIncrementTick+0x15c>)
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014788:	e02e      	b.n	80147e8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801478a:	68bb      	ldr	r3, [r7, #8]
 801478c:	3304      	adds	r3, #4
 801478e:	4618      	mov	r0, r3
 8014790:	f7ff f854 	bl	801383c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014794:	68bb      	ldr	r3, [r7, #8]
 8014796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014798:	2b00      	cmp	r3, #0
 801479a:	d004      	beq.n	80147a6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801479c:	68bb      	ldr	r3, [r7, #8]
 801479e:	3318      	adds	r3, #24
 80147a0:	4618      	mov	r0, r3
 80147a2:	f7ff f84b 	bl	801383c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80147a6:	68bb      	ldr	r3, [r7, #8]
 80147a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147aa:	2201      	movs	r2, #1
 80147ac:	409a      	lsls	r2, r3
 80147ae:	4b24      	ldr	r3, [pc, #144]	@ (8014840 <xTaskIncrementTick+0x160>)
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	4313      	orrs	r3, r2
 80147b4:	4a22      	ldr	r2, [pc, #136]	@ (8014840 <xTaskIncrementTick+0x160>)
 80147b6:	6013      	str	r3, [r2, #0]
 80147b8:	68bb      	ldr	r3, [r7, #8]
 80147ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80147bc:	4613      	mov	r3, r2
 80147be:	009b      	lsls	r3, r3, #2
 80147c0:	4413      	add	r3, r2
 80147c2:	009b      	lsls	r3, r3, #2
 80147c4:	4a1f      	ldr	r2, [pc, #124]	@ (8014844 <xTaskIncrementTick+0x164>)
 80147c6:	441a      	add	r2, r3
 80147c8:	68bb      	ldr	r3, [r7, #8]
 80147ca:	3304      	adds	r3, #4
 80147cc:	4619      	mov	r1, r3
 80147ce:	4610      	mov	r0, r2
 80147d0:	f7fe ffd7 	bl	8013782 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80147d4:	68bb      	ldr	r3, [r7, #8]
 80147d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80147d8:	4b1b      	ldr	r3, [pc, #108]	@ (8014848 <xTaskIncrementTick+0x168>)
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147de:	429a      	cmp	r2, r3
 80147e0:	d3b9      	bcc.n	8014756 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80147e2:	2301      	movs	r3, #1
 80147e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80147e6:	e7b6      	b.n	8014756 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80147e8:	4b17      	ldr	r3, [pc, #92]	@ (8014848 <xTaskIncrementTick+0x168>)
 80147ea:	681b      	ldr	r3, [r3, #0]
 80147ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80147ee:	4915      	ldr	r1, [pc, #84]	@ (8014844 <xTaskIncrementTick+0x164>)
 80147f0:	4613      	mov	r3, r2
 80147f2:	009b      	lsls	r3, r3, #2
 80147f4:	4413      	add	r3, r2
 80147f6:	009b      	lsls	r3, r3, #2
 80147f8:	440b      	add	r3, r1
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	2b01      	cmp	r3, #1
 80147fe:	d901      	bls.n	8014804 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8014800:	2301      	movs	r3, #1
 8014802:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8014804:	4b11      	ldr	r3, [pc, #68]	@ (801484c <xTaskIncrementTick+0x16c>)
 8014806:	681b      	ldr	r3, [r3, #0]
 8014808:	2b00      	cmp	r3, #0
 801480a:	d007      	beq.n	801481c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 801480c:	2301      	movs	r3, #1
 801480e:	617b      	str	r3, [r7, #20]
 8014810:	e004      	b.n	801481c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8014812:	4b0f      	ldr	r3, [pc, #60]	@ (8014850 <xTaskIncrementTick+0x170>)
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	3301      	adds	r3, #1
 8014818:	4a0d      	ldr	r2, [pc, #52]	@ (8014850 <xTaskIncrementTick+0x170>)
 801481a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801481c:	697b      	ldr	r3, [r7, #20]
}
 801481e:	4618      	mov	r0, r3
 8014820:	3718      	adds	r7, #24
 8014822:	46bd      	mov	sp, r7
 8014824:	bd80      	pop	{r7, pc}
 8014826:	bf00      	nop
 8014828:	240029ec 	.word	0x240029ec
 801482c:	240029c8 	.word	0x240029c8
 8014830:	2400297c 	.word	0x2400297c
 8014834:	24002980 	.word	0x24002980
 8014838:	240029dc 	.word	0x240029dc
 801483c:	240029e4 	.word	0x240029e4
 8014840:	240029cc 	.word	0x240029cc
 8014844:	240028c8 	.word	0x240028c8
 8014848:	240028c4 	.word	0x240028c4
 801484c:	240029d8 	.word	0x240029d8
 8014850:	240029d4 	.word	0x240029d4

08014854 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014854:	b480      	push	{r7}
 8014856:	b087      	sub	sp, #28
 8014858:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801485a:	4b27      	ldr	r3, [pc, #156]	@ (80148f8 <vTaskSwitchContext+0xa4>)
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	2b00      	cmp	r3, #0
 8014860:	d003      	beq.n	801486a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014862:	4b26      	ldr	r3, [pc, #152]	@ (80148fc <vTaskSwitchContext+0xa8>)
 8014864:	2201      	movs	r2, #1
 8014866:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014868:	e040      	b.n	80148ec <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 801486a:	4b24      	ldr	r3, [pc, #144]	@ (80148fc <vTaskSwitchContext+0xa8>)
 801486c:	2200      	movs	r2, #0
 801486e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014870:	4b23      	ldr	r3, [pc, #140]	@ (8014900 <vTaskSwitchContext+0xac>)
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	fab3 f383 	clz	r3, r3
 801487c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801487e:	7afb      	ldrb	r3, [r7, #11]
 8014880:	f1c3 031f 	rsb	r3, r3, #31
 8014884:	617b      	str	r3, [r7, #20]
 8014886:	491f      	ldr	r1, [pc, #124]	@ (8014904 <vTaskSwitchContext+0xb0>)
 8014888:	697a      	ldr	r2, [r7, #20]
 801488a:	4613      	mov	r3, r2
 801488c:	009b      	lsls	r3, r3, #2
 801488e:	4413      	add	r3, r2
 8014890:	009b      	lsls	r3, r3, #2
 8014892:	440b      	add	r3, r1
 8014894:	681b      	ldr	r3, [r3, #0]
 8014896:	2b00      	cmp	r3, #0
 8014898:	d10b      	bne.n	80148b2 <vTaskSwitchContext+0x5e>
	__asm volatile
 801489a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801489e:	f383 8811 	msr	BASEPRI, r3
 80148a2:	f3bf 8f6f 	isb	sy
 80148a6:	f3bf 8f4f 	dsb	sy
 80148aa:	607b      	str	r3, [r7, #4]
}
 80148ac:	bf00      	nop
 80148ae:	bf00      	nop
 80148b0:	e7fd      	b.n	80148ae <vTaskSwitchContext+0x5a>
 80148b2:	697a      	ldr	r2, [r7, #20]
 80148b4:	4613      	mov	r3, r2
 80148b6:	009b      	lsls	r3, r3, #2
 80148b8:	4413      	add	r3, r2
 80148ba:	009b      	lsls	r3, r3, #2
 80148bc:	4a11      	ldr	r2, [pc, #68]	@ (8014904 <vTaskSwitchContext+0xb0>)
 80148be:	4413      	add	r3, r2
 80148c0:	613b      	str	r3, [r7, #16]
 80148c2:	693b      	ldr	r3, [r7, #16]
 80148c4:	685b      	ldr	r3, [r3, #4]
 80148c6:	685a      	ldr	r2, [r3, #4]
 80148c8:	693b      	ldr	r3, [r7, #16]
 80148ca:	605a      	str	r2, [r3, #4]
 80148cc:	693b      	ldr	r3, [r7, #16]
 80148ce:	685a      	ldr	r2, [r3, #4]
 80148d0:	693b      	ldr	r3, [r7, #16]
 80148d2:	3308      	adds	r3, #8
 80148d4:	429a      	cmp	r2, r3
 80148d6:	d104      	bne.n	80148e2 <vTaskSwitchContext+0x8e>
 80148d8:	693b      	ldr	r3, [r7, #16]
 80148da:	685b      	ldr	r3, [r3, #4]
 80148dc:	685a      	ldr	r2, [r3, #4]
 80148de:	693b      	ldr	r3, [r7, #16]
 80148e0:	605a      	str	r2, [r3, #4]
 80148e2:	693b      	ldr	r3, [r7, #16]
 80148e4:	685b      	ldr	r3, [r3, #4]
 80148e6:	68db      	ldr	r3, [r3, #12]
 80148e8:	4a07      	ldr	r2, [pc, #28]	@ (8014908 <vTaskSwitchContext+0xb4>)
 80148ea:	6013      	str	r3, [r2, #0]
}
 80148ec:	bf00      	nop
 80148ee:	371c      	adds	r7, #28
 80148f0:	46bd      	mov	sp, r7
 80148f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148f6:	4770      	bx	lr
 80148f8:	240029ec 	.word	0x240029ec
 80148fc:	240029d8 	.word	0x240029d8
 8014900:	240029cc 	.word	0x240029cc
 8014904:	240028c8 	.word	0x240028c8
 8014908:	240028c4 	.word	0x240028c4

0801490c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801490c:	b580      	push	{r7, lr}
 801490e:	b084      	sub	sp, #16
 8014910:	af00      	add	r7, sp, #0
 8014912:	6078      	str	r0, [r7, #4]
 8014914:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	2b00      	cmp	r3, #0
 801491a:	d10b      	bne.n	8014934 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 801491c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014920:	f383 8811 	msr	BASEPRI, r3
 8014924:	f3bf 8f6f 	isb	sy
 8014928:	f3bf 8f4f 	dsb	sy
 801492c:	60fb      	str	r3, [r7, #12]
}
 801492e:	bf00      	nop
 8014930:	bf00      	nop
 8014932:	e7fd      	b.n	8014930 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014934:	4b07      	ldr	r3, [pc, #28]	@ (8014954 <vTaskPlaceOnEventList+0x48>)
 8014936:	681b      	ldr	r3, [r3, #0]
 8014938:	3318      	adds	r3, #24
 801493a:	4619      	mov	r1, r3
 801493c:	6878      	ldr	r0, [r7, #4]
 801493e:	f7fe ff44 	bl	80137ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014942:	2101      	movs	r1, #1
 8014944:	6838      	ldr	r0, [r7, #0]
 8014946:	f000 fb87 	bl	8015058 <prvAddCurrentTaskToDelayedList>
}
 801494a:	bf00      	nop
 801494c:	3710      	adds	r7, #16
 801494e:	46bd      	mov	sp, r7
 8014950:	bd80      	pop	{r7, pc}
 8014952:	bf00      	nop
 8014954:	240028c4 	.word	0x240028c4

08014958 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014958:	b580      	push	{r7, lr}
 801495a:	b086      	sub	sp, #24
 801495c:	af00      	add	r7, sp, #0
 801495e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	68db      	ldr	r3, [r3, #12]
 8014964:	68db      	ldr	r3, [r3, #12]
 8014966:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014968:	693b      	ldr	r3, [r7, #16]
 801496a:	2b00      	cmp	r3, #0
 801496c:	d10b      	bne.n	8014986 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 801496e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014972:	f383 8811 	msr	BASEPRI, r3
 8014976:	f3bf 8f6f 	isb	sy
 801497a:	f3bf 8f4f 	dsb	sy
 801497e:	60fb      	str	r3, [r7, #12]
}
 8014980:	bf00      	nop
 8014982:	bf00      	nop
 8014984:	e7fd      	b.n	8014982 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014986:	693b      	ldr	r3, [r7, #16]
 8014988:	3318      	adds	r3, #24
 801498a:	4618      	mov	r0, r3
 801498c:	f7fe ff56 	bl	801383c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014990:	4b1d      	ldr	r3, [pc, #116]	@ (8014a08 <xTaskRemoveFromEventList+0xb0>)
 8014992:	681b      	ldr	r3, [r3, #0]
 8014994:	2b00      	cmp	r3, #0
 8014996:	d11c      	bne.n	80149d2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014998:	693b      	ldr	r3, [r7, #16]
 801499a:	3304      	adds	r3, #4
 801499c:	4618      	mov	r0, r3
 801499e:	f7fe ff4d 	bl	801383c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80149a2:	693b      	ldr	r3, [r7, #16]
 80149a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80149a6:	2201      	movs	r2, #1
 80149a8:	409a      	lsls	r2, r3
 80149aa:	4b18      	ldr	r3, [pc, #96]	@ (8014a0c <xTaskRemoveFromEventList+0xb4>)
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	4313      	orrs	r3, r2
 80149b0:	4a16      	ldr	r2, [pc, #88]	@ (8014a0c <xTaskRemoveFromEventList+0xb4>)
 80149b2:	6013      	str	r3, [r2, #0]
 80149b4:	693b      	ldr	r3, [r7, #16]
 80149b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80149b8:	4613      	mov	r3, r2
 80149ba:	009b      	lsls	r3, r3, #2
 80149bc:	4413      	add	r3, r2
 80149be:	009b      	lsls	r3, r3, #2
 80149c0:	4a13      	ldr	r2, [pc, #76]	@ (8014a10 <xTaskRemoveFromEventList+0xb8>)
 80149c2:	441a      	add	r2, r3
 80149c4:	693b      	ldr	r3, [r7, #16]
 80149c6:	3304      	adds	r3, #4
 80149c8:	4619      	mov	r1, r3
 80149ca:	4610      	mov	r0, r2
 80149cc:	f7fe fed9 	bl	8013782 <vListInsertEnd>
 80149d0:	e005      	b.n	80149de <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80149d2:	693b      	ldr	r3, [r7, #16]
 80149d4:	3318      	adds	r3, #24
 80149d6:	4619      	mov	r1, r3
 80149d8:	480e      	ldr	r0, [pc, #56]	@ (8014a14 <xTaskRemoveFromEventList+0xbc>)
 80149da:	f7fe fed2 	bl	8013782 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80149de:	693b      	ldr	r3, [r7, #16]
 80149e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80149e2:	4b0d      	ldr	r3, [pc, #52]	@ (8014a18 <xTaskRemoveFromEventList+0xc0>)
 80149e4:	681b      	ldr	r3, [r3, #0]
 80149e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80149e8:	429a      	cmp	r2, r3
 80149ea:	d905      	bls.n	80149f8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80149ec:	2301      	movs	r3, #1
 80149ee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80149f0:	4b0a      	ldr	r3, [pc, #40]	@ (8014a1c <xTaskRemoveFromEventList+0xc4>)
 80149f2:	2201      	movs	r2, #1
 80149f4:	601a      	str	r2, [r3, #0]
 80149f6:	e001      	b.n	80149fc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80149f8:	2300      	movs	r3, #0
 80149fa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80149fc:	697b      	ldr	r3, [r7, #20]
}
 80149fe:	4618      	mov	r0, r3
 8014a00:	3718      	adds	r7, #24
 8014a02:	46bd      	mov	sp, r7
 8014a04:	bd80      	pop	{r7, pc}
 8014a06:	bf00      	nop
 8014a08:	240029ec 	.word	0x240029ec
 8014a0c:	240029cc 	.word	0x240029cc
 8014a10:	240028c8 	.word	0x240028c8
 8014a14:	24002984 	.word	0x24002984
 8014a18:	240028c4 	.word	0x240028c4
 8014a1c:	240029d8 	.word	0x240029d8

08014a20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014a20:	b480      	push	{r7}
 8014a22:	b083      	sub	sp, #12
 8014a24:	af00      	add	r7, sp, #0
 8014a26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014a28:	4b06      	ldr	r3, [pc, #24]	@ (8014a44 <vTaskInternalSetTimeOutState+0x24>)
 8014a2a:	681a      	ldr	r2, [r3, #0]
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014a30:	4b05      	ldr	r3, [pc, #20]	@ (8014a48 <vTaskInternalSetTimeOutState+0x28>)
 8014a32:	681a      	ldr	r2, [r3, #0]
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	605a      	str	r2, [r3, #4]
}
 8014a38:	bf00      	nop
 8014a3a:	370c      	adds	r7, #12
 8014a3c:	46bd      	mov	sp, r7
 8014a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a42:	4770      	bx	lr
 8014a44:	240029dc 	.word	0x240029dc
 8014a48:	240029c8 	.word	0x240029c8

08014a4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014a4c:	b580      	push	{r7, lr}
 8014a4e:	b088      	sub	sp, #32
 8014a50:	af00      	add	r7, sp, #0
 8014a52:	6078      	str	r0, [r7, #4]
 8014a54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d10b      	bne.n	8014a74 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8014a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a60:	f383 8811 	msr	BASEPRI, r3
 8014a64:	f3bf 8f6f 	isb	sy
 8014a68:	f3bf 8f4f 	dsb	sy
 8014a6c:	613b      	str	r3, [r7, #16]
}
 8014a6e:	bf00      	nop
 8014a70:	bf00      	nop
 8014a72:	e7fd      	b.n	8014a70 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014a74:	683b      	ldr	r3, [r7, #0]
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d10b      	bne.n	8014a92 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8014a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a7e:	f383 8811 	msr	BASEPRI, r3
 8014a82:	f3bf 8f6f 	isb	sy
 8014a86:	f3bf 8f4f 	dsb	sy
 8014a8a:	60fb      	str	r3, [r7, #12]
}
 8014a8c:	bf00      	nop
 8014a8e:	bf00      	nop
 8014a90:	e7fd      	b.n	8014a8e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8014a92:	f000 fc79 	bl	8015388 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014a96:	4b1d      	ldr	r3, [pc, #116]	@ (8014b0c <xTaskCheckForTimeOut+0xc0>)
 8014a98:	681b      	ldr	r3, [r3, #0]
 8014a9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	685b      	ldr	r3, [r3, #4]
 8014aa0:	69ba      	ldr	r2, [r7, #24]
 8014aa2:	1ad3      	subs	r3, r2, r3
 8014aa4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014aa6:	683b      	ldr	r3, [r7, #0]
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014aae:	d102      	bne.n	8014ab6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014ab0:	2300      	movs	r3, #0
 8014ab2:	61fb      	str	r3, [r7, #28]
 8014ab4:	e023      	b.n	8014afe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	681a      	ldr	r2, [r3, #0]
 8014aba:	4b15      	ldr	r3, [pc, #84]	@ (8014b10 <xTaskCheckForTimeOut+0xc4>)
 8014abc:	681b      	ldr	r3, [r3, #0]
 8014abe:	429a      	cmp	r2, r3
 8014ac0:	d007      	beq.n	8014ad2 <xTaskCheckForTimeOut+0x86>
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	685b      	ldr	r3, [r3, #4]
 8014ac6:	69ba      	ldr	r2, [r7, #24]
 8014ac8:	429a      	cmp	r2, r3
 8014aca:	d302      	bcc.n	8014ad2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014acc:	2301      	movs	r3, #1
 8014ace:	61fb      	str	r3, [r7, #28]
 8014ad0:	e015      	b.n	8014afe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014ad2:	683b      	ldr	r3, [r7, #0]
 8014ad4:	681b      	ldr	r3, [r3, #0]
 8014ad6:	697a      	ldr	r2, [r7, #20]
 8014ad8:	429a      	cmp	r2, r3
 8014ada:	d20b      	bcs.n	8014af4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014adc:	683b      	ldr	r3, [r7, #0]
 8014ade:	681a      	ldr	r2, [r3, #0]
 8014ae0:	697b      	ldr	r3, [r7, #20]
 8014ae2:	1ad2      	subs	r2, r2, r3
 8014ae4:	683b      	ldr	r3, [r7, #0]
 8014ae6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014ae8:	6878      	ldr	r0, [r7, #4]
 8014aea:	f7ff ff99 	bl	8014a20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014aee:	2300      	movs	r3, #0
 8014af0:	61fb      	str	r3, [r7, #28]
 8014af2:	e004      	b.n	8014afe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8014af4:	683b      	ldr	r3, [r7, #0]
 8014af6:	2200      	movs	r2, #0
 8014af8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014afa:	2301      	movs	r3, #1
 8014afc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014afe:	f000 fc75 	bl	80153ec <vPortExitCritical>

	return xReturn;
 8014b02:	69fb      	ldr	r3, [r7, #28]
}
 8014b04:	4618      	mov	r0, r3
 8014b06:	3720      	adds	r7, #32
 8014b08:	46bd      	mov	sp, r7
 8014b0a:	bd80      	pop	{r7, pc}
 8014b0c:	240029c8 	.word	0x240029c8
 8014b10:	240029dc 	.word	0x240029dc

08014b14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014b14:	b480      	push	{r7}
 8014b16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014b18:	4b03      	ldr	r3, [pc, #12]	@ (8014b28 <vTaskMissedYield+0x14>)
 8014b1a:	2201      	movs	r2, #1
 8014b1c:	601a      	str	r2, [r3, #0]
}
 8014b1e:	bf00      	nop
 8014b20:	46bd      	mov	sp, r7
 8014b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b26:	4770      	bx	lr
 8014b28:	240029d8 	.word	0x240029d8

08014b2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014b2c:	b580      	push	{r7, lr}
 8014b2e:	b082      	sub	sp, #8
 8014b30:	af00      	add	r7, sp, #0
 8014b32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014b34:	f000 f852 	bl	8014bdc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014b38:	4b06      	ldr	r3, [pc, #24]	@ (8014b54 <prvIdleTask+0x28>)
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	2b01      	cmp	r3, #1
 8014b3e:	d9f9      	bls.n	8014b34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014b40:	4b05      	ldr	r3, [pc, #20]	@ (8014b58 <prvIdleTask+0x2c>)
 8014b42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014b46:	601a      	str	r2, [r3, #0]
 8014b48:	f3bf 8f4f 	dsb	sy
 8014b4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014b50:	e7f0      	b.n	8014b34 <prvIdleTask+0x8>
 8014b52:	bf00      	nop
 8014b54:	240028c8 	.word	0x240028c8
 8014b58:	e000ed04 	.word	0xe000ed04

08014b5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014b5c:	b580      	push	{r7, lr}
 8014b5e:	b082      	sub	sp, #8
 8014b60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014b62:	2300      	movs	r3, #0
 8014b64:	607b      	str	r3, [r7, #4]
 8014b66:	e00c      	b.n	8014b82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014b68:	687a      	ldr	r2, [r7, #4]
 8014b6a:	4613      	mov	r3, r2
 8014b6c:	009b      	lsls	r3, r3, #2
 8014b6e:	4413      	add	r3, r2
 8014b70:	009b      	lsls	r3, r3, #2
 8014b72:	4a12      	ldr	r2, [pc, #72]	@ (8014bbc <prvInitialiseTaskLists+0x60>)
 8014b74:	4413      	add	r3, r2
 8014b76:	4618      	mov	r0, r3
 8014b78:	f7fe fdd6 	bl	8013728 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	3301      	adds	r3, #1
 8014b80:	607b      	str	r3, [r7, #4]
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	2b06      	cmp	r3, #6
 8014b86:	d9ef      	bls.n	8014b68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014b88:	480d      	ldr	r0, [pc, #52]	@ (8014bc0 <prvInitialiseTaskLists+0x64>)
 8014b8a:	f7fe fdcd 	bl	8013728 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014b8e:	480d      	ldr	r0, [pc, #52]	@ (8014bc4 <prvInitialiseTaskLists+0x68>)
 8014b90:	f7fe fdca 	bl	8013728 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014b94:	480c      	ldr	r0, [pc, #48]	@ (8014bc8 <prvInitialiseTaskLists+0x6c>)
 8014b96:	f7fe fdc7 	bl	8013728 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014b9a:	480c      	ldr	r0, [pc, #48]	@ (8014bcc <prvInitialiseTaskLists+0x70>)
 8014b9c:	f7fe fdc4 	bl	8013728 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014ba0:	480b      	ldr	r0, [pc, #44]	@ (8014bd0 <prvInitialiseTaskLists+0x74>)
 8014ba2:	f7fe fdc1 	bl	8013728 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8014bd4 <prvInitialiseTaskLists+0x78>)
 8014ba8:	4a05      	ldr	r2, [pc, #20]	@ (8014bc0 <prvInitialiseTaskLists+0x64>)
 8014baa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014bac:	4b0a      	ldr	r3, [pc, #40]	@ (8014bd8 <prvInitialiseTaskLists+0x7c>)
 8014bae:	4a05      	ldr	r2, [pc, #20]	@ (8014bc4 <prvInitialiseTaskLists+0x68>)
 8014bb0:	601a      	str	r2, [r3, #0]
}
 8014bb2:	bf00      	nop
 8014bb4:	3708      	adds	r7, #8
 8014bb6:	46bd      	mov	sp, r7
 8014bb8:	bd80      	pop	{r7, pc}
 8014bba:	bf00      	nop
 8014bbc:	240028c8 	.word	0x240028c8
 8014bc0:	24002954 	.word	0x24002954
 8014bc4:	24002968 	.word	0x24002968
 8014bc8:	24002984 	.word	0x24002984
 8014bcc:	24002998 	.word	0x24002998
 8014bd0:	240029b0 	.word	0x240029b0
 8014bd4:	2400297c 	.word	0x2400297c
 8014bd8:	24002980 	.word	0x24002980

08014bdc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014bdc:	b580      	push	{r7, lr}
 8014bde:	b082      	sub	sp, #8
 8014be0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014be2:	e019      	b.n	8014c18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014be4:	f000 fbd0 	bl	8015388 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014be8:	4b10      	ldr	r3, [pc, #64]	@ (8014c2c <prvCheckTasksWaitingTermination+0x50>)
 8014bea:	68db      	ldr	r3, [r3, #12]
 8014bec:	68db      	ldr	r3, [r3, #12]
 8014bee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	3304      	adds	r3, #4
 8014bf4:	4618      	mov	r0, r3
 8014bf6:	f7fe fe21 	bl	801383c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8014c30 <prvCheckTasksWaitingTermination+0x54>)
 8014bfc:	681b      	ldr	r3, [r3, #0]
 8014bfe:	3b01      	subs	r3, #1
 8014c00:	4a0b      	ldr	r2, [pc, #44]	@ (8014c30 <prvCheckTasksWaitingTermination+0x54>)
 8014c02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014c04:	4b0b      	ldr	r3, [pc, #44]	@ (8014c34 <prvCheckTasksWaitingTermination+0x58>)
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	3b01      	subs	r3, #1
 8014c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8014c34 <prvCheckTasksWaitingTermination+0x58>)
 8014c0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014c0e:	f000 fbed 	bl	80153ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014c12:	6878      	ldr	r0, [r7, #4]
 8014c14:	f000 f810 	bl	8014c38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014c18:	4b06      	ldr	r3, [pc, #24]	@ (8014c34 <prvCheckTasksWaitingTermination+0x58>)
 8014c1a:	681b      	ldr	r3, [r3, #0]
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d1e1      	bne.n	8014be4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014c20:	bf00      	nop
 8014c22:	bf00      	nop
 8014c24:	3708      	adds	r7, #8
 8014c26:	46bd      	mov	sp, r7
 8014c28:	bd80      	pop	{r7, pc}
 8014c2a:	bf00      	nop
 8014c2c:	24002998 	.word	0x24002998
 8014c30:	240029c4 	.word	0x240029c4
 8014c34:	240029ac 	.word	0x240029ac

08014c38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014c38:	b580      	push	{r7, lr}
 8014c3a:	b084      	sub	sp, #16
 8014c3c:	af00      	add	r7, sp, #0
 8014c3e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d108      	bne.n	8014c5c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014c4e:	4618      	mov	r0, r3
 8014c50:	f000 fd8a 	bl	8015768 <vPortFree>
				vPortFree( pxTCB );
 8014c54:	6878      	ldr	r0, [r7, #4]
 8014c56:	f000 fd87 	bl	8015768 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014c5a:	e019      	b.n	8014c90 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8014c62:	2b01      	cmp	r3, #1
 8014c64:	d103      	bne.n	8014c6e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8014c66:	6878      	ldr	r0, [r7, #4]
 8014c68:	f000 fd7e 	bl	8015768 <vPortFree>
	}
 8014c6c:	e010      	b.n	8014c90 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8014c74:	2b02      	cmp	r3, #2
 8014c76:	d00b      	beq.n	8014c90 <prvDeleteTCB+0x58>
	__asm volatile
 8014c78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c7c:	f383 8811 	msr	BASEPRI, r3
 8014c80:	f3bf 8f6f 	isb	sy
 8014c84:	f3bf 8f4f 	dsb	sy
 8014c88:	60fb      	str	r3, [r7, #12]
}
 8014c8a:	bf00      	nop
 8014c8c:	bf00      	nop
 8014c8e:	e7fd      	b.n	8014c8c <prvDeleteTCB+0x54>
	}
 8014c90:	bf00      	nop
 8014c92:	3710      	adds	r7, #16
 8014c94:	46bd      	mov	sp, r7
 8014c96:	bd80      	pop	{r7, pc}

08014c98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014c98:	b480      	push	{r7}
 8014c9a:	b083      	sub	sp, #12
 8014c9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8014cd0 <prvResetNextTaskUnblockTime+0x38>)
 8014ca0:	681b      	ldr	r3, [r3, #0]
 8014ca2:	681b      	ldr	r3, [r3, #0]
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d104      	bne.n	8014cb2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8014cd4 <prvResetNextTaskUnblockTime+0x3c>)
 8014caa:	f04f 32ff 	mov.w	r2, #4294967295
 8014cae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014cb0:	e008      	b.n	8014cc4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014cb2:	4b07      	ldr	r3, [pc, #28]	@ (8014cd0 <prvResetNextTaskUnblockTime+0x38>)
 8014cb4:	681b      	ldr	r3, [r3, #0]
 8014cb6:	68db      	ldr	r3, [r3, #12]
 8014cb8:	68db      	ldr	r3, [r3, #12]
 8014cba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	685b      	ldr	r3, [r3, #4]
 8014cc0:	4a04      	ldr	r2, [pc, #16]	@ (8014cd4 <prvResetNextTaskUnblockTime+0x3c>)
 8014cc2:	6013      	str	r3, [r2, #0]
}
 8014cc4:	bf00      	nop
 8014cc6:	370c      	adds	r7, #12
 8014cc8:	46bd      	mov	sp, r7
 8014cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cce:	4770      	bx	lr
 8014cd0:	2400297c 	.word	0x2400297c
 8014cd4:	240029e4 	.word	0x240029e4

08014cd8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014cd8:	b480      	push	{r7}
 8014cda:	b083      	sub	sp, #12
 8014cdc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014cde:	4b0b      	ldr	r3, [pc, #44]	@ (8014d0c <xTaskGetSchedulerState+0x34>)
 8014ce0:	681b      	ldr	r3, [r3, #0]
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d102      	bne.n	8014cec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014ce6:	2301      	movs	r3, #1
 8014ce8:	607b      	str	r3, [r7, #4]
 8014cea:	e008      	b.n	8014cfe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014cec:	4b08      	ldr	r3, [pc, #32]	@ (8014d10 <xTaskGetSchedulerState+0x38>)
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d102      	bne.n	8014cfa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014cf4:	2302      	movs	r3, #2
 8014cf6:	607b      	str	r3, [r7, #4]
 8014cf8:	e001      	b.n	8014cfe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014cfa:	2300      	movs	r3, #0
 8014cfc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014cfe:	687b      	ldr	r3, [r7, #4]
	}
 8014d00:	4618      	mov	r0, r3
 8014d02:	370c      	adds	r7, #12
 8014d04:	46bd      	mov	sp, r7
 8014d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d0a:	4770      	bx	lr
 8014d0c:	240029d0 	.word	0x240029d0
 8014d10:	240029ec 	.word	0x240029ec

08014d14 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8014d14:	b580      	push	{r7, lr}
 8014d16:	b084      	sub	sp, #16
 8014d18:	af00      	add	r7, sp, #0
 8014d1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014d20:	2300      	movs	r3, #0
 8014d22:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d05e      	beq.n	8014de8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8014d2a:	68bb      	ldr	r3, [r7, #8]
 8014d2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014d2e:	4b31      	ldr	r3, [pc, #196]	@ (8014df4 <xTaskPriorityInherit+0xe0>)
 8014d30:	681b      	ldr	r3, [r3, #0]
 8014d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014d34:	429a      	cmp	r2, r3
 8014d36:	d24e      	bcs.n	8014dd6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014d38:	68bb      	ldr	r3, [r7, #8]
 8014d3a:	699b      	ldr	r3, [r3, #24]
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	db06      	blt.n	8014d4e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014d40:	4b2c      	ldr	r3, [pc, #176]	@ (8014df4 <xTaskPriorityInherit+0xe0>)
 8014d42:	681b      	ldr	r3, [r3, #0]
 8014d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014d46:	f1c3 0207 	rsb	r2, r3, #7
 8014d4a:	68bb      	ldr	r3, [r7, #8]
 8014d4c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8014d4e:	68bb      	ldr	r3, [r7, #8]
 8014d50:	6959      	ldr	r1, [r3, #20]
 8014d52:	68bb      	ldr	r3, [r7, #8]
 8014d54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014d56:	4613      	mov	r3, r2
 8014d58:	009b      	lsls	r3, r3, #2
 8014d5a:	4413      	add	r3, r2
 8014d5c:	009b      	lsls	r3, r3, #2
 8014d5e:	4a26      	ldr	r2, [pc, #152]	@ (8014df8 <xTaskPriorityInherit+0xe4>)
 8014d60:	4413      	add	r3, r2
 8014d62:	4299      	cmp	r1, r3
 8014d64:	d12f      	bne.n	8014dc6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014d66:	68bb      	ldr	r3, [r7, #8]
 8014d68:	3304      	adds	r3, #4
 8014d6a:	4618      	mov	r0, r3
 8014d6c:	f7fe fd66 	bl	801383c <uxListRemove>
 8014d70:	4603      	mov	r3, r0
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d10a      	bne.n	8014d8c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8014d76:	68bb      	ldr	r3, [r7, #8]
 8014d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014d7a:	2201      	movs	r2, #1
 8014d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8014d80:	43da      	mvns	r2, r3
 8014d82:	4b1e      	ldr	r3, [pc, #120]	@ (8014dfc <xTaskPriorityInherit+0xe8>)
 8014d84:	681b      	ldr	r3, [r3, #0]
 8014d86:	4013      	ands	r3, r2
 8014d88:	4a1c      	ldr	r2, [pc, #112]	@ (8014dfc <xTaskPriorityInherit+0xe8>)
 8014d8a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014d8c:	4b19      	ldr	r3, [pc, #100]	@ (8014df4 <xTaskPriorityInherit+0xe0>)
 8014d8e:	681b      	ldr	r3, [r3, #0]
 8014d90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014d92:	68bb      	ldr	r3, [r7, #8]
 8014d94:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8014d96:	68bb      	ldr	r3, [r7, #8]
 8014d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014d9a:	2201      	movs	r2, #1
 8014d9c:	409a      	lsls	r2, r3
 8014d9e:	4b17      	ldr	r3, [pc, #92]	@ (8014dfc <xTaskPriorityInherit+0xe8>)
 8014da0:	681b      	ldr	r3, [r3, #0]
 8014da2:	4313      	orrs	r3, r2
 8014da4:	4a15      	ldr	r2, [pc, #84]	@ (8014dfc <xTaskPriorityInherit+0xe8>)
 8014da6:	6013      	str	r3, [r2, #0]
 8014da8:	68bb      	ldr	r3, [r7, #8]
 8014daa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014dac:	4613      	mov	r3, r2
 8014dae:	009b      	lsls	r3, r3, #2
 8014db0:	4413      	add	r3, r2
 8014db2:	009b      	lsls	r3, r3, #2
 8014db4:	4a10      	ldr	r2, [pc, #64]	@ (8014df8 <xTaskPriorityInherit+0xe4>)
 8014db6:	441a      	add	r2, r3
 8014db8:	68bb      	ldr	r3, [r7, #8]
 8014dba:	3304      	adds	r3, #4
 8014dbc:	4619      	mov	r1, r3
 8014dbe:	4610      	mov	r0, r2
 8014dc0:	f7fe fcdf 	bl	8013782 <vListInsertEnd>
 8014dc4:	e004      	b.n	8014dd0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8014df4 <xTaskPriorityInherit+0xe0>)
 8014dc8:	681b      	ldr	r3, [r3, #0]
 8014dca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014dcc:	68bb      	ldr	r3, [r7, #8]
 8014dce:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8014dd0:	2301      	movs	r3, #1
 8014dd2:	60fb      	str	r3, [r7, #12]
 8014dd4:	e008      	b.n	8014de8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8014dd6:	68bb      	ldr	r3, [r7, #8]
 8014dd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014dda:	4b06      	ldr	r3, [pc, #24]	@ (8014df4 <xTaskPriorityInherit+0xe0>)
 8014ddc:	681b      	ldr	r3, [r3, #0]
 8014dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014de0:	429a      	cmp	r2, r3
 8014de2:	d201      	bcs.n	8014de8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8014de4:	2301      	movs	r3, #1
 8014de6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014de8:	68fb      	ldr	r3, [r7, #12]
	}
 8014dea:	4618      	mov	r0, r3
 8014dec:	3710      	adds	r7, #16
 8014dee:	46bd      	mov	sp, r7
 8014df0:	bd80      	pop	{r7, pc}
 8014df2:	bf00      	nop
 8014df4:	240028c4 	.word	0x240028c4
 8014df8:	240028c8 	.word	0x240028c8
 8014dfc:	240029cc 	.word	0x240029cc

08014e00 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014e00:	b580      	push	{r7, lr}
 8014e02:	b086      	sub	sp, #24
 8014e04:	af00      	add	r7, sp, #0
 8014e06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014e0c:	2300      	movs	r3, #0
 8014e0e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d070      	beq.n	8014ef8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014e16:	4b3b      	ldr	r3, [pc, #236]	@ (8014f04 <xTaskPriorityDisinherit+0x104>)
 8014e18:	681b      	ldr	r3, [r3, #0]
 8014e1a:	693a      	ldr	r2, [r7, #16]
 8014e1c:	429a      	cmp	r2, r3
 8014e1e:	d00b      	beq.n	8014e38 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8014e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e24:	f383 8811 	msr	BASEPRI, r3
 8014e28:	f3bf 8f6f 	isb	sy
 8014e2c:	f3bf 8f4f 	dsb	sy
 8014e30:	60fb      	str	r3, [r7, #12]
}
 8014e32:	bf00      	nop
 8014e34:	bf00      	nop
 8014e36:	e7fd      	b.n	8014e34 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8014e38:	693b      	ldr	r3, [r7, #16]
 8014e3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d10b      	bne.n	8014e58 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8014e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e44:	f383 8811 	msr	BASEPRI, r3
 8014e48:	f3bf 8f6f 	isb	sy
 8014e4c:	f3bf 8f4f 	dsb	sy
 8014e50:	60bb      	str	r3, [r7, #8]
}
 8014e52:	bf00      	nop
 8014e54:	bf00      	nop
 8014e56:	e7fd      	b.n	8014e54 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8014e58:	693b      	ldr	r3, [r7, #16]
 8014e5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014e5c:	1e5a      	subs	r2, r3, #1
 8014e5e:	693b      	ldr	r3, [r7, #16]
 8014e60:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014e62:	693b      	ldr	r3, [r7, #16]
 8014e64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014e66:	693b      	ldr	r3, [r7, #16]
 8014e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014e6a:	429a      	cmp	r2, r3
 8014e6c:	d044      	beq.n	8014ef8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014e6e:	693b      	ldr	r3, [r7, #16]
 8014e70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d140      	bne.n	8014ef8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014e76:	693b      	ldr	r3, [r7, #16]
 8014e78:	3304      	adds	r3, #4
 8014e7a:	4618      	mov	r0, r3
 8014e7c:	f7fe fcde 	bl	801383c <uxListRemove>
 8014e80:	4603      	mov	r3, r0
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d115      	bne.n	8014eb2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014e86:	693b      	ldr	r3, [r7, #16]
 8014e88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014e8a:	491f      	ldr	r1, [pc, #124]	@ (8014f08 <xTaskPriorityDisinherit+0x108>)
 8014e8c:	4613      	mov	r3, r2
 8014e8e:	009b      	lsls	r3, r3, #2
 8014e90:	4413      	add	r3, r2
 8014e92:	009b      	lsls	r3, r3, #2
 8014e94:	440b      	add	r3, r1
 8014e96:	681b      	ldr	r3, [r3, #0]
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d10a      	bne.n	8014eb2 <xTaskPriorityDisinherit+0xb2>
 8014e9c:	693b      	ldr	r3, [r7, #16]
 8014e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ea0:	2201      	movs	r2, #1
 8014ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8014ea6:	43da      	mvns	r2, r3
 8014ea8:	4b18      	ldr	r3, [pc, #96]	@ (8014f0c <xTaskPriorityDisinherit+0x10c>)
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	4013      	ands	r3, r2
 8014eae:	4a17      	ldr	r2, [pc, #92]	@ (8014f0c <xTaskPriorityDisinherit+0x10c>)
 8014eb0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014eb2:	693b      	ldr	r3, [r7, #16]
 8014eb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014eb6:	693b      	ldr	r3, [r7, #16]
 8014eb8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014eba:	693b      	ldr	r3, [r7, #16]
 8014ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ebe:	f1c3 0207 	rsb	r2, r3, #7
 8014ec2:	693b      	ldr	r3, [r7, #16]
 8014ec4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014ec6:	693b      	ldr	r3, [r7, #16]
 8014ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014eca:	2201      	movs	r2, #1
 8014ecc:	409a      	lsls	r2, r3
 8014ece:	4b0f      	ldr	r3, [pc, #60]	@ (8014f0c <xTaskPriorityDisinherit+0x10c>)
 8014ed0:	681b      	ldr	r3, [r3, #0]
 8014ed2:	4313      	orrs	r3, r2
 8014ed4:	4a0d      	ldr	r2, [pc, #52]	@ (8014f0c <xTaskPriorityDisinherit+0x10c>)
 8014ed6:	6013      	str	r3, [r2, #0]
 8014ed8:	693b      	ldr	r3, [r7, #16]
 8014eda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014edc:	4613      	mov	r3, r2
 8014ede:	009b      	lsls	r3, r3, #2
 8014ee0:	4413      	add	r3, r2
 8014ee2:	009b      	lsls	r3, r3, #2
 8014ee4:	4a08      	ldr	r2, [pc, #32]	@ (8014f08 <xTaskPriorityDisinherit+0x108>)
 8014ee6:	441a      	add	r2, r3
 8014ee8:	693b      	ldr	r3, [r7, #16]
 8014eea:	3304      	adds	r3, #4
 8014eec:	4619      	mov	r1, r3
 8014eee:	4610      	mov	r0, r2
 8014ef0:	f7fe fc47 	bl	8013782 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014ef4:	2301      	movs	r3, #1
 8014ef6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014ef8:	697b      	ldr	r3, [r7, #20]
	}
 8014efa:	4618      	mov	r0, r3
 8014efc:	3718      	adds	r7, #24
 8014efe:	46bd      	mov	sp, r7
 8014f00:	bd80      	pop	{r7, pc}
 8014f02:	bf00      	nop
 8014f04:	240028c4 	.word	0x240028c4
 8014f08:	240028c8 	.word	0x240028c8
 8014f0c:	240029cc 	.word	0x240029cc

08014f10 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8014f10:	b580      	push	{r7, lr}
 8014f12:	b088      	sub	sp, #32
 8014f14:	af00      	add	r7, sp, #0
 8014f16:	6078      	str	r0, [r7, #4]
 8014f18:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8014f1e:	2301      	movs	r3, #1
 8014f20:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d079      	beq.n	801501c <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8014f28:	69bb      	ldr	r3, [r7, #24]
 8014f2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d10b      	bne.n	8014f48 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8014f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f34:	f383 8811 	msr	BASEPRI, r3
 8014f38:	f3bf 8f6f 	isb	sy
 8014f3c:	f3bf 8f4f 	dsb	sy
 8014f40:	60fb      	str	r3, [r7, #12]
}
 8014f42:	bf00      	nop
 8014f44:	bf00      	nop
 8014f46:	e7fd      	b.n	8014f44 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8014f48:	69bb      	ldr	r3, [r7, #24]
 8014f4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014f4c:	683a      	ldr	r2, [r7, #0]
 8014f4e:	429a      	cmp	r2, r3
 8014f50:	d902      	bls.n	8014f58 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8014f52:	683b      	ldr	r3, [r7, #0]
 8014f54:	61fb      	str	r3, [r7, #28]
 8014f56:	e002      	b.n	8014f5e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8014f58:	69bb      	ldr	r3, [r7, #24]
 8014f5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014f5c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8014f5e:	69bb      	ldr	r3, [r7, #24]
 8014f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f62:	69fa      	ldr	r2, [r7, #28]
 8014f64:	429a      	cmp	r2, r3
 8014f66:	d059      	beq.n	801501c <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8014f68:	69bb      	ldr	r3, [r7, #24]
 8014f6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014f6c:	697a      	ldr	r2, [r7, #20]
 8014f6e:	429a      	cmp	r2, r3
 8014f70:	d154      	bne.n	801501c <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8014f72:	4b2c      	ldr	r3, [pc, #176]	@ (8015024 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	69ba      	ldr	r2, [r7, #24]
 8014f78:	429a      	cmp	r2, r3
 8014f7a:	d10b      	bne.n	8014f94 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8014f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f80:	f383 8811 	msr	BASEPRI, r3
 8014f84:	f3bf 8f6f 	isb	sy
 8014f88:	f3bf 8f4f 	dsb	sy
 8014f8c:	60bb      	str	r3, [r7, #8]
}
 8014f8e:	bf00      	nop
 8014f90:	bf00      	nop
 8014f92:	e7fd      	b.n	8014f90 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8014f94:	69bb      	ldr	r3, [r7, #24]
 8014f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f98:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8014f9a:	69bb      	ldr	r3, [r7, #24]
 8014f9c:	69fa      	ldr	r2, [r7, #28]
 8014f9e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014fa0:	69bb      	ldr	r3, [r7, #24]
 8014fa2:	699b      	ldr	r3, [r3, #24]
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	db04      	blt.n	8014fb2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014fa8:	69fb      	ldr	r3, [r7, #28]
 8014faa:	f1c3 0207 	rsb	r2, r3, #7
 8014fae:	69bb      	ldr	r3, [r7, #24]
 8014fb0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014fb2:	69bb      	ldr	r3, [r7, #24]
 8014fb4:	6959      	ldr	r1, [r3, #20]
 8014fb6:	693a      	ldr	r2, [r7, #16]
 8014fb8:	4613      	mov	r3, r2
 8014fba:	009b      	lsls	r3, r3, #2
 8014fbc:	4413      	add	r3, r2
 8014fbe:	009b      	lsls	r3, r3, #2
 8014fc0:	4a19      	ldr	r2, [pc, #100]	@ (8015028 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8014fc2:	4413      	add	r3, r2
 8014fc4:	4299      	cmp	r1, r3
 8014fc6:	d129      	bne.n	801501c <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014fc8:	69bb      	ldr	r3, [r7, #24]
 8014fca:	3304      	adds	r3, #4
 8014fcc:	4618      	mov	r0, r3
 8014fce:	f7fe fc35 	bl	801383c <uxListRemove>
 8014fd2:	4603      	mov	r3, r0
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d10a      	bne.n	8014fee <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8014fd8:	69bb      	ldr	r3, [r7, #24]
 8014fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014fdc:	2201      	movs	r2, #1
 8014fde:	fa02 f303 	lsl.w	r3, r2, r3
 8014fe2:	43da      	mvns	r2, r3
 8014fe4:	4b11      	ldr	r3, [pc, #68]	@ (801502c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8014fe6:	681b      	ldr	r3, [r3, #0]
 8014fe8:	4013      	ands	r3, r2
 8014fea:	4a10      	ldr	r2, [pc, #64]	@ (801502c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8014fec:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8014fee:	69bb      	ldr	r3, [r7, #24]
 8014ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ff2:	2201      	movs	r2, #1
 8014ff4:	409a      	lsls	r2, r3
 8014ff6:	4b0d      	ldr	r3, [pc, #52]	@ (801502c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	4313      	orrs	r3, r2
 8014ffc:	4a0b      	ldr	r2, [pc, #44]	@ (801502c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8014ffe:	6013      	str	r3, [r2, #0]
 8015000:	69bb      	ldr	r3, [r7, #24]
 8015002:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015004:	4613      	mov	r3, r2
 8015006:	009b      	lsls	r3, r3, #2
 8015008:	4413      	add	r3, r2
 801500a:	009b      	lsls	r3, r3, #2
 801500c:	4a06      	ldr	r2, [pc, #24]	@ (8015028 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801500e:	441a      	add	r2, r3
 8015010:	69bb      	ldr	r3, [r7, #24]
 8015012:	3304      	adds	r3, #4
 8015014:	4619      	mov	r1, r3
 8015016:	4610      	mov	r0, r2
 8015018:	f7fe fbb3 	bl	8013782 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801501c:	bf00      	nop
 801501e:	3720      	adds	r7, #32
 8015020:	46bd      	mov	sp, r7
 8015022:	bd80      	pop	{r7, pc}
 8015024:	240028c4 	.word	0x240028c4
 8015028:	240028c8 	.word	0x240028c8
 801502c:	240029cc 	.word	0x240029cc

08015030 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8015030:	b480      	push	{r7}
 8015032:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8015034:	4b07      	ldr	r3, [pc, #28]	@ (8015054 <pvTaskIncrementMutexHeldCount+0x24>)
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	2b00      	cmp	r3, #0
 801503a:	d004      	beq.n	8015046 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801503c:	4b05      	ldr	r3, [pc, #20]	@ (8015054 <pvTaskIncrementMutexHeldCount+0x24>)
 801503e:	681b      	ldr	r3, [r3, #0]
 8015040:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8015042:	3201      	adds	r2, #1
 8015044:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8015046:	4b03      	ldr	r3, [pc, #12]	@ (8015054 <pvTaskIncrementMutexHeldCount+0x24>)
 8015048:	681b      	ldr	r3, [r3, #0]
	}
 801504a:	4618      	mov	r0, r3
 801504c:	46bd      	mov	sp, r7
 801504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015052:	4770      	bx	lr
 8015054:	240028c4 	.word	0x240028c4

08015058 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015058:	b580      	push	{r7, lr}
 801505a:	b084      	sub	sp, #16
 801505c:	af00      	add	r7, sp, #0
 801505e:	6078      	str	r0, [r7, #4]
 8015060:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015062:	4b29      	ldr	r3, [pc, #164]	@ (8015108 <prvAddCurrentTaskToDelayedList+0xb0>)
 8015064:	681b      	ldr	r3, [r3, #0]
 8015066:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015068:	4b28      	ldr	r3, [pc, #160]	@ (801510c <prvAddCurrentTaskToDelayedList+0xb4>)
 801506a:	681b      	ldr	r3, [r3, #0]
 801506c:	3304      	adds	r3, #4
 801506e:	4618      	mov	r0, r3
 8015070:	f7fe fbe4 	bl	801383c <uxListRemove>
 8015074:	4603      	mov	r3, r0
 8015076:	2b00      	cmp	r3, #0
 8015078:	d10b      	bne.n	8015092 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801507a:	4b24      	ldr	r3, [pc, #144]	@ (801510c <prvAddCurrentTaskToDelayedList+0xb4>)
 801507c:	681b      	ldr	r3, [r3, #0]
 801507e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015080:	2201      	movs	r2, #1
 8015082:	fa02 f303 	lsl.w	r3, r2, r3
 8015086:	43da      	mvns	r2, r3
 8015088:	4b21      	ldr	r3, [pc, #132]	@ (8015110 <prvAddCurrentTaskToDelayedList+0xb8>)
 801508a:	681b      	ldr	r3, [r3, #0]
 801508c:	4013      	ands	r3, r2
 801508e:	4a20      	ldr	r2, [pc, #128]	@ (8015110 <prvAddCurrentTaskToDelayedList+0xb8>)
 8015090:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015098:	d10a      	bne.n	80150b0 <prvAddCurrentTaskToDelayedList+0x58>
 801509a:	683b      	ldr	r3, [r7, #0]
 801509c:	2b00      	cmp	r3, #0
 801509e:	d007      	beq.n	80150b0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80150a0:	4b1a      	ldr	r3, [pc, #104]	@ (801510c <prvAddCurrentTaskToDelayedList+0xb4>)
 80150a2:	681b      	ldr	r3, [r3, #0]
 80150a4:	3304      	adds	r3, #4
 80150a6:	4619      	mov	r1, r3
 80150a8:	481a      	ldr	r0, [pc, #104]	@ (8015114 <prvAddCurrentTaskToDelayedList+0xbc>)
 80150aa:	f7fe fb6a 	bl	8013782 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80150ae:	e026      	b.n	80150fe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80150b0:	68fa      	ldr	r2, [r7, #12]
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	4413      	add	r3, r2
 80150b6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80150b8:	4b14      	ldr	r3, [pc, #80]	@ (801510c <prvAddCurrentTaskToDelayedList+0xb4>)
 80150ba:	681b      	ldr	r3, [r3, #0]
 80150bc:	68ba      	ldr	r2, [r7, #8]
 80150be:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80150c0:	68ba      	ldr	r2, [r7, #8]
 80150c2:	68fb      	ldr	r3, [r7, #12]
 80150c4:	429a      	cmp	r2, r3
 80150c6:	d209      	bcs.n	80150dc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80150c8:	4b13      	ldr	r3, [pc, #76]	@ (8015118 <prvAddCurrentTaskToDelayedList+0xc0>)
 80150ca:	681a      	ldr	r2, [r3, #0]
 80150cc:	4b0f      	ldr	r3, [pc, #60]	@ (801510c <prvAddCurrentTaskToDelayedList+0xb4>)
 80150ce:	681b      	ldr	r3, [r3, #0]
 80150d0:	3304      	adds	r3, #4
 80150d2:	4619      	mov	r1, r3
 80150d4:	4610      	mov	r0, r2
 80150d6:	f7fe fb78 	bl	80137ca <vListInsert>
}
 80150da:	e010      	b.n	80150fe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80150dc:	4b0f      	ldr	r3, [pc, #60]	@ (801511c <prvAddCurrentTaskToDelayedList+0xc4>)
 80150de:	681a      	ldr	r2, [r3, #0]
 80150e0:	4b0a      	ldr	r3, [pc, #40]	@ (801510c <prvAddCurrentTaskToDelayedList+0xb4>)
 80150e2:	681b      	ldr	r3, [r3, #0]
 80150e4:	3304      	adds	r3, #4
 80150e6:	4619      	mov	r1, r3
 80150e8:	4610      	mov	r0, r2
 80150ea:	f7fe fb6e 	bl	80137ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80150ee:	4b0c      	ldr	r3, [pc, #48]	@ (8015120 <prvAddCurrentTaskToDelayedList+0xc8>)
 80150f0:	681b      	ldr	r3, [r3, #0]
 80150f2:	68ba      	ldr	r2, [r7, #8]
 80150f4:	429a      	cmp	r2, r3
 80150f6:	d202      	bcs.n	80150fe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80150f8:	4a09      	ldr	r2, [pc, #36]	@ (8015120 <prvAddCurrentTaskToDelayedList+0xc8>)
 80150fa:	68bb      	ldr	r3, [r7, #8]
 80150fc:	6013      	str	r3, [r2, #0]
}
 80150fe:	bf00      	nop
 8015100:	3710      	adds	r7, #16
 8015102:	46bd      	mov	sp, r7
 8015104:	bd80      	pop	{r7, pc}
 8015106:	bf00      	nop
 8015108:	240029c8 	.word	0x240029c8
 801510c:	240028c4 	.word	0x240028c4
 8015110:	240029cc 	.word	0x240029cc
 8015114:	240029b0 	.word	0x240029b0
 8015118:	24002980 	.word	0x24002980
 801511c:	2400297c 	.word	0x2400297c
 8015120:	240029e4 	.word	0x240029e4

08015124 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015124:	b480      	push	{r7}
 8015126:	b085      	sub	sp, #20
 8015128:	af00      	add	r7, sp, #0
 801512a:	60f8      	str	r0, [r7, #12]
 801512c:	60b9      	str	r1, [r7, #8]
 801512e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	3b04      	subs	r3, #4
 8015134:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015136:	68fb      	ldr	r3, [r7, #12]
 8015138:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801513c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	3b04      	subs	r3, #4
 8015142:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015144:	68bb      	ldr	r3, [r7, #8]
 8015146:	f023 0201 	bic.w	r2, r3, #1
 801514a:	68fb      	ldr	r3, [r7, #12]
 801514c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801514e:	68fb      	ldr	r3, [r7, #12]
 8015150:	3b04      	subs	r3, #4
 8015152:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015154:	4a0c      	ldr	r2, [pc, #48]	@ (8015188 <pxPortInitialiseStack+0x64>)
 8015156:	68fb      	ldr	r3, [r7, #12]
 8015158:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	3b14      	subs	r3, #20
 801515e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015160:	687a      	ldr	r2, [r7, #4]
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015166:	68fb      	ldr	r3, [r7, #12]
 8015168:	3b04      	subs	r3, #4
 801516a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	f06f 0202 	mvn.w	r2, #2
 8015172:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	3b20      	subs	r3, #32
 8015178:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801517a:	68fb      	ldr	r3, [r7, #12]
}
 801517c:	4618      	mov	r0, r3
 801517e:	3714      	adds	r7, #20
 8015180:	46bd      	mov	sp, r7
 8015182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015186:	4770      	bx	lr
 8015188:	0801518d 	.word	0x0801518d

0801518c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801518c:	b480      	push	{r7}
 801518e:	b085      	sub	sp, #20
 8015190:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015192:	2300      	movs	r3, #0
 8015194:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015196:	4b13      	ldr	r3, [pc, #76]	@ (80151e4 <prvTaskExitError+0x58>)
 8015198:	681b      	ldr	r3, [r3, #0]
 801519a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801519e:	d00b      	beq.n	80151b8 <prvTaskExitError+0x2c>
	__asm volatile
 80151a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80151a4:	f383 8811 	msr	BASEPRI, r3
 80151a8:	f3bf 8f6f 	isb	sy
 80151ac:	f3bf 8f4f 	dsb	sy
 80151b0:	60fb      	str	r3, [r7, #12]
}
 80151b2:	bf00      	nop
 80151b4:	bf00      	nop
 80151b6:	e7fd      	b.n	80151b4 <prvTaskExitError+0x28>
	__asm volatile
 80151b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80151bc:	f383 8811 	msr	BASEPRI, r3
 80151c0:	f3bf 8f6f 	isb	sy
 80151c4:	f3bf 8f4f 	dsb	sy
 80151c8:	60bb      	str	r3, [r7, #8]
}
 80151ca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80151cc:	bf00      	nop
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	2b00      	cmp	r3, #0
 80151d2:	d0fc      	beq.n	80151ce <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80151d4:	bf00      	nop
 80151d6:	bf00      	nop
 80151d8:	3714      	adds	r7, #20
 80151da:	46bd      	mov	sp, r7
 80151dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151e0:	4770      	bx	lr
 80151e2:	bf00      	nop
 80151e4:	240000c4 	.word	0x240000c4
	...

080151f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80151f0:	4b07      	ldr	r3, [pc, #28]	@ (8015210 <pxCurrentTCBConst2>)
 80151f2:	6819      	ldr	r1, [r3, #0]
 80151f4:	6808      	ldr	r0, [r1, #0]
 80151f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151fa:	f380 8809 	msr	PSP, r0
 80151fe:	f3bf 8f6f 	isb	sy
 8015202:	f04f 0000 	mov.w	r0, #0
 8015206:	f380 8811 	msr	BASEPRI, r0
 801520a:	4770      	bx	lr
 801520c:	f3af 8000 	nop.w

08015210 <pxCurrentTCBConst2>:
 8015210:	240028c4 	.word	0x240028c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015214:	bf00      	nop
 8015216:	bf00      	nop

08015218 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015218:	4808      	ldr	r0, [pc, #32]	@ (801523c <prvPortStartFirstTask+0x24>)
 801521a:	6800      	ldr	r0, [r0, #0]
 801521c:	6800      	ldr	r0, [r0, #0]
 801521e:	f380 8808 	msr	MSP, r0
 8015222:	f04f 0000 	mov.w	r0, #0
 8015226:	f380 8814 	msr	CONTROL, r0
 801522a:	b662      	cpsie	i
 801522c:	b661      	cpsie	f
 801522e:	f3bf 8f4f 	dsb	sy
 8015232:	f3bf 8f6f 	isb	sy
 8015236:	df00      	svc	0
 8015238:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801523a:	bf00      	nop
 801523c:	e000ed08 	.word	0xe000ed08

08015240 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015240:	b580      	push	{r7, lr}
 8015242:	b086      	sub	sp, #24
 8015244:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015246:	4b47      	ldr	r3, [pc, #284]	@ (8015364 <xPortStartScheduler+0x124>)
 8015248:	681b      	ldr	r3, [r3, #0]
 801524a:	4a47      	ldr	r2, [pc, #284]	@ (8015368 <xPortStartScheduler+0x128>)
 801524c:	4293      	cmp	r3, r2
 801524e:	d10b      	bne.n	8015268 <xPortStartScheduler+0x28>
	__asm volatile
 8015250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015254:	f383 8811 	msr	BASEPRI, r3
 8015258:	f3bf 8f6f 	isb	sy
 801525c:	f3bf 8f4f 	dsb	sy
 8015260:	613b      	str	r3, [r7, #16]
}
 8015262:	bf00      	nop
 8015264:	bf00      	nop
 8015266:	e7fd      	b.n	8015264 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015268:	4b3e      	ldr	r3, [pc, #248]	@ (8015364 <xPortStartScheduler+0x124>)
 801526a:	681b      	ldr	r3, [r3, #0]
 801526c:	4a3f      	ldr	r2, [pc, #252]	@ (801536c <xPortStartScheduler+0x12c>)
 801526e:	4293      	cmp	r3, r2
 8015270:	d10b      	bne.n	801528a <xPortStartScheduler+0x4a>
	__asm volatile
 8015272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015276:	f383 8811 	msr	BASEPRI, r3
 801527a:	f3bf 8f6f 	isb	sy
 801527e:	f3bf 8f4f 	dsb	sy
 8015282:	60fb      	str	r3, [r7, #12]
}
 8015284:	bf00      	nop
 8015286:	bf00      	nop
 8015288:	e7fd      	b.n	8015286 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801528a:	4b39      	ldr	r3, [pc, #228]	@ (8015370 <xPortStartScheduler+0x130>)
 801528c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801528e:	697b      	ldr	r3, [r7, #20]
 8015290:	781b      	ldrb	r3, [r3, #0]
 8015292:	b2db      	uxtb	r3, r3
 8015294:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015296:	697b      	ldr	r3, [r7, #20]
 8015298:	22ff      	movs	r2, #255	@ 0xff
 801529a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801529c:	697b      	ldr	r3, [r7, #20]
 801529e:	781b      	ldrb	r3, [r3, #0]
 80152a0:	b2db      	uxtb	r3, r3
 80152a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80152a4:	78fb      	ldrb	r3, [r7, #3]
 80152a6:	b2db      	uxtb	r3, r3
 80152a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80152ac:	b2da      	uxtb	r2, r3
 80152ae:	4b31      	ldr	r3, [pc, #196]	@ (8015374 <xPortStartScheduler+0x134>)
 80152b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80152b2:	4b31      	ldr	r3, [pc, #196]	@ (8015378 <xPortStartScheduler+0x138>)
 80152b4:	2207      	movs	r2, #7
 80152b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80152b8:	e009      	b.n	80152ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80152ba:	4b2f      	ldr	r3, [pc, #188]	@ (8015378 <xPortStartScheduler+0x138>)
 80152bc:	681b      	ldr	r3, [r3, #0]
 80152be:	3b01      	subs	r3, #1
 80152c0:	4a2d      	ldr	r2, [pc, #180]	@ (8015378 <xPortStartScheduler+0x138>)
 80152c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80152c4:	78fb      	ldrb	r3, [r7, #3]
 80152c6:	b2db      	uxtb	r3, r3
 80152c8:	005b      	lsls	r3, r3, #1
 80152ca:	b2db      	uxtb	r3, r3
 80152cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80152ce:	78fb      	ldrb	r3, [r7, #3]
 80152d0:	b2db      	uxtb	r3, r3
 80152d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80152d6:	2b80      	cmp	r3, #128	@ 0x80
 80152d8:	d0ef      	beq.n	80152ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80152da:	4b27      	ldr	r3, [pc, #156]	@ (8015378 <xPortStartScheduler+0x138>)
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	f1c3 0307 	rsb	r3, r3, #7
 80152e2:	2b04      	cmp	r3, #4
 80152e4:	d00b      	beq.n	80152fe <xPortStartScheduler+0xbe>
	__asm volatile
 80152e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80152ea:	f383 8811 	msr	BASEPRI, r3
 80152ee:	f3bf 8f6f 	isb	sy
 80152f2:	f3bf 8f4f 	dsb	sy
 80152f6:	60bb      	str	r3, [r7, #8]
}
 80152f8:	bf00      	nop
 80152fa:	bf00      	nop
 80152fc:	e7fd      	b.n	80152fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80152fe:	4b1e      	ldr	r3, [pc, #120]	@ (8015378 <xPortStartScheduler+0x138>)
 8015300:	681b      	ldr	r3, [r3, #0]
 8015302:	021b      	lsls	r3, r3, #8
 8015304:	4a1c      	ldr	r2, [pc, #112]	@ (8015378 <xPortStartScheduler+0x138>)
 8015306:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015308:	4b1b      	ldr	r3, [pc, #108]	@ (8015378 <xPortStartScheduler+0x138>)
 801530a:	681b      	ldr	r3, [r3, #0]
 801530c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8015310:	4a19      	ldr	r2, [pc, #100]	@ (8015378 <xPortStartScheduler+0x138>)
 8015312:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	b2da      	uxtb	r2, r3
 8015318:	697b      	ldr	r3, [r7, #20]
 801531a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801531c:	4b17      	ldr	r3, [pc, #92]	@ (801537c <xPortStartScheduler+0x13c>)
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	4a16      	ldr	r2, [pc, #88]	@ (801537c <xPortStartScheduler+0x13c>)
 8015322:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8015326:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015328:	4b14      	ldr	r3, [pc, #80]	@ (801537c <xPortStartScheduler+0x13c>)
 801532a:	681b      	ldr	r3, [r3, #0]
 801532c:	4a13      	ldr	r2, [pc, #76]	@ (801537c <xPortStartScheduler+0x13c>)
 801532e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8015332:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015334:	f000 f8da 	bl	80154ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015338:	4b11      	ldr	r3, [pc, #68]	@ (8015380 <xPortStartScheduler+0x140>)
 801533a:	2200      	movs	r2, #0
 801533c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801533e:	f000 f8f9 	bl	8015534 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015342:	4b10      	ldr	r3, [pc, #64]	@ (8015384 <xPortStartScheduler+0x144>)
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	4a0f      	ldr	r2, [pc, #60]	@ (8015384 <xPortStartScheduler+0x144>)
 8015348:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801534c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801534e:	f7ff ff63 	bl	8015218 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015352:	f7ff fa7f 	bl	8014854 <vTaskSwitchContext>
	prvTaskExitError();
 8015356:	f7ff ff19 	bl	801518c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801535a:	2300      	movs	r3, #0
}
 801535c:	4618      	mov	r0, r3
 801535e:	3718      	adds	r7, #24
 8015360:	46bd      	mov	sp, r7
 8015362:	bd80      	pop	{r7, pc}
 8015364:	e000ed00 	.word	0xe000ed00
 8015368:	410fc271 	.word	0x410fc271
 801536c:	410fc270 	.word	0x410fc270
 8015370:	e000e400 	.word	0xe000e400
 8015374:	240029f0 	.word	0x240029f0
 8015378:	240029f4 	.word	0x240029f4
 801537c:	e000ed20 	.word	0xe000ed20
 8015380:	240000c4 	.word	0x240000c4
 8015384:	e000ef34 	.word	0xe000ef34

08015388 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015388:	b480      	push	{r7}
 801538a:	b083      	sub	sp, #12
 801538c:	af00      	add	r7, sp, #0
	__asm volatile
 801538e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015392:	f383 8811 	msr	BASEPRI, r3
 8015396:	f3bf 8f6f 	isb	sy
 801539a:	f3bf 8f4f 	dsb	sy
 801539e:	607b      	str	r3, [r7, #4]
}
 80153a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80153a2:	4b10      	ldr	r3, [pc, #64]	@ (80153e4 <vPortEnterCritical+0x5c>)
 80153a4:	681b      	ldr	r3, [r3, #0]
 80153a6:	3301      	adds	r3, #1
 80153a8:	4a0e      	ldr	r2, [pc, #56]	@ (80153e4 <vPortEnterCritical+0x5c>)
 80153aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80153ac:	4b0d      	ldr	r3, [pc, #52]	@ (80153e4 <vPortEnterCritical+0x5c>)
 80153ae:	681b      	ldr	r3, [r3, #0]
 80153b0:	2b01      	cmp	r3, #1
 80153b2:	d110      	bne.n	80153d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80153b4:	4b0c      	ldr	r3, [pc, #48]	@ (80153e8 <vPortEnterCritical+0x60>)
 80153b6:	681b      	ldr	r3, [r3, #0]
 80153b8:	b2db      	uxtb	r3, r3
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	d00b      	beq.n	80153d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80153be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80153c2:	f383 8811 	msr	BASEPRI, r3
 80153c6:	f3bf 8f6f 	isb	sy
 80153ca:	f3bf 8f4f 	dsb	sy
 80153ce:	603b      	str	r3, [r7, #0]
}
 80153d0:	bf00      	nop
 80153d2:	bf00      	nop
 80153d4:	e7fd      	b.n	80153d2 <vPortEnterCritical+0x4a>
	}
}
 80153d6:	bf00      	nop
 80153d8:	370c      	adds	r7, #12
 80153da:	46bd      	mov	sp, r7
 80153dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153e0:	4770      	bx	lr
 80153e2:	bf00      	nop
 80153e4:	240000c4 	.word	0x240000c4
 80153e8:	e000ed04 	.word	0xe000ed04

080153ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80153ec:	b480      	push	{r7}
 80153ee:	b083      	sub	sp, #12
 80153f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80153f2:	4b12      	ldr	r3, [pc, #72]	@ (801543c <vPortExitCritical+0x50>)
 80153f4:	681b      	ldr	r3, [r3, #0]
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d10b      	bne.n	8015412 <vPortExitCritical+0x26>
	__asm volatile
 80153fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80153fe:	f383 8811 	msr	BASEPRI, r3
 8015402:	f3bf 8f6f 	isb	sy
 8015406:	f3bf 8f4f 	dsb	sy
 801540a:	607b      	str	r3, [r7, #4]
}
 801540c:	bf00      	nop
 801540e:	bf00      	nop
 8015410:	e7fd      	b.n	801540e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015412:	4b0a      	ldr	r3, [pc, #40]	@ (801543c <vPortExitCritical+0x50>)
 8015414:	681b      	ldr	r3, [r3, #0]
 8015416:	3b01      	subs	r3, #1
 8015418:	4a08      	ldr	r2, [pc, #32]	@ (801543c <vPortExitCritical+0x50>)
 801541a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801541c:	4b07      	ldr	r3, [pc, #28]	@ (801543c <vPortExitCritical+0x50>)
 801541e:	681b      	ldr	r3, [r3, #0]
 8015420:	2b00      	cmp	r3, #0
 8015422:	d105      	bne.n	8015430 <vPortExitCritical+0x44>
 8015424:	2300      	movs	r3, #0
 8015426:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015428:	683b      	ldr	r3, [r7, #0]
 801542a:	f383 8811 	msr	BASEPRI, r3
}
 801542e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015430:	bf00      	nop
 8015432:	370c      	adds	r7, #12
 8015434:	46bd      	mov	sp, r7
 8015436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801543a:	4770      	bx	lr
 801543c:	240000c4 	.word	0x240000c4

08015440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015440:	f3ef 8009 	mrs	r0, PSP
 8015444:	f3bf 8f6f 	isb	sy
 8015448:	4b15      	ldr	r3, [pc, #84]	@ (80154a0 <pxCurrentTCBConst>)
 801544a:	681a      	ldr	r2, [r3, #0]
 801544c:	f01e 0f10 	tst.w	lr, #16
 8015450:	bf08      	it	eq
 8015452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801545a:	6010      	str	r0, [r2, #0]
 801545c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015460:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8015464:	f380 8811 	msr	BASEPRI, r0
 8015468:	f3bf 8f4f 	dsb	sy
 801546c:	f3bf 8f6f 	isb	sy
 8015470:	f7ff f9f0 	bl	8014854 <vTaskSwitchContext>
 8015474:	f04f 0000 	mov.w	r0, #0
 8015478:	f380 8811 	msr	BASEPRI, r0
 801547c:	bc09      	pop	{r0, r3}
 801547e:	6819      	ldr	r1, [r3, #0]
 8015480:	6808      	ldr	r0, [r1, #0]
 8015482:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015486:	f01e 0f10 	tst.w	lr, #16
 801548a:	bf08      	it	eq
 801548c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015490:	f380 8809 	msr	PSP, r0
 8015494:	f3bf 8f6f 	isb	sy
 8015498:	4770      	bx	lr
 801549a:	bf00      	nop
 801549c:	f3af 8000 	nop.w

080154a0 <pxCurrentTCBConst>:
 80154a0:	240028c4 	.word	0x240028c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80154a4:	bf00      	nop
 80154a6:	bf00      	nop

080154a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80154a8:	b580      	push	{r7, lr}
 80154aa:	b082      	sub	sp, #8
 80154ac:	af00      	add	r7, sp, #0
	__asm volatile
 80154ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80154b2:	f383 8811 	msr	BASEPRI, r3
 80154b6:	f3bf 8f6f 	isb	sy
 80154ba:	f3bf 8f4f 	dsb	sy
 80154be:	607b      	str	r3, [r7, #4]
}
 80154c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80154c2:	f7ff f90d 	bl	80146e0 <xTaskIncrementTick>
 80154c6:	4603      	mov	r3, r0
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	d003      	beq.n	80154d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80154cc:	4b06      	ldr	r3, [pc, #24]	@ (80154e8 <SysTick_Handler+0x40>)
 80154ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80154d2:	601a      	str	r2, [r3, #0]
 80154d4:	2300      	movs	r3, #0
 80154d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80154d8:	683b      	ldr	r3, [r7, #0]
 80154da:	f383 8811 	msr	BASEPRI, r3
}
 80154de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80154e0:	bf00      	nop
 80154e2:	3708      	adds	r7, #8
 80154e4:	46bd      	mov	sp, r7
 80154e6:	bd80      	pop	{r7, pc}
 80154e8:	e000ed04 	.word	0xe000ed04

080154ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80154ec:	b480      	push	{r7}
 80154ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80154f0:	4b0b      	ldr	r3, [pc, #44]	@ (8015520 <vPortSetupTimerInterrupt+0x34>)
 80154f2:	2200      	movs	r2, #0
 80154f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80154f6:	4b0b      	ldr	r3, [pc, #44]	@ (8015524 <vPortSetupTimerInterrupt+0x38>)
 80154f8:	2200      	movs	r2, #0
 80154fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80154fc:	4b0a      	ldr	r3, [pc, #40]	@ (8015528 <vPortSetupTimerInterrupt+0x3c>)
 80154fe:	681b      	ldr	r3, [r3, #0]
 8015500:	4a0a      	ldr	r2, [pc, #40]	@ (801552c <vPortSetupTimerInterrupt+0x40>)
 8015502:	fba2 2303 	umull	r2, r3, r2, r3
 8015506:	099b      	lsrs	r3, r3, #6
 8015508:	4a09      	ldr	r2, [pc, #36]	@ (8015530 <vPortSetupTimerInterrupt+0x44>)
 801550a:	3b01      	subs	r3, #1
 801550c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801550e:	4b04      	ldr	r3, [pc, #16]	@ (8015520 <vPortSetupTimerInterrupt+0x34>)
 8015510:	2207      	movs	r2, #7
 8015512:	601a      	str	r2, [r3, #0]
}
 8015514:	bf00      	nop
 8015516:	46bd      	mov	sp, r7
 8015518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801551c:	4770      	bx	lr
 801551e:	bf00      	nop
 8015520:	e000e010 	.word	0xe000e010
 8015524:	e000e018 	.word	0xe000e018
 8015528:	24000000 	.word	0x24000000
 801552c:	10624dd3 	.word	0x10624dd3
 8015530:	e000e014 	.word	0xe000e014

08015534 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015534:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8015544 <vPortEnableVFP+0x10>
 8015538:	6801      	ldr	r1, [r0, #0]
 801553a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801553e:	6001      	str	r1, [r0, #0]
 8015540:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015542:	bf00      	nop
 8015544:	e000ed88 	.word	0xe000ed88

08015548 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015548:	b480      	push	{r7}
 801554a:	b085      	sub	sp, #20
 801554c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801554e:	f3ef 8305 	mrs	r3, IPSR
 8015552:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015554:	68fb      	ldr	r3, [r7, #12]
 8015556:	2b0f      	cmp	r3, #15
 8015558:	d915      	bls.n	8015586 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801555a:	4a18      	ldr	r2, [pc, #96]	@ (80155bc <vPortValidateInterruptPriority+0x74>)
 801555c:	68fb      	ldr	r3, [r7, #12]
 801555e:	4413      	add	r3, r2
 8015560:	781b      	ldrb	r3, [r3, #0]
 8015562:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015564:	4b16      	ldr	r3, [pc, #88]	@ (80155c0 <vPortValidateInterruptPriority+0x78>)
 8015566:	781b      	ldrb	r3, [r3, #0]
 8015568:	7afa      	ldrb	r2, [r7, #11]
 801556a:	429a      	cmp	r2, r3
 801556c:	d20b      	bcs.n	8015586 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801556e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015572:	f383 8811 	msr	BASEPRI, r3
 8015576:	f3bf 8f6f 	isb	sy
 801557a:	f3bf 8f4f 	dsb	sy
 801557e:	607b      	str	r3, [r7, #4]
}
 8015580:	bf00      	nop
 8015582:	bf00      	nop
 8015584:	e7fd      	b.n	8015582 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015586:	4b0f      	ldr	r3, [pc, #60]	@ (80155c4 <vPortValidateInterruptPriority+0x7c>)
 8015588:	681b      	ldr	r3, [r3, #0]
 801558a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801558e:	4b0e      	ldr	r3, [pc, #56]	@ (80155c8 <vPortValidateInterruptPriority+0x80>)
 8015590:	681b      	ldr	r3, [r3, #0]
 8015592:	429a      	cmp	r2, r3
 8015594:	d90b      	bls.n	80155ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8015596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801559a:	f383 8811 	msr	BASEPRI, r3
 801559e:	f3bf 8f6f 	isb	sy
 80155a2:	f3bf 8f4f 	dsb	sy
 80155a6:	603b      	str	r3, [r7, #0]
}
 80155a8:	bf00      	nop
 80155aa:	bf00      	nop
 80155ac:	e7fd      	b.n	80155aa <vPortValidateInterruptPriority+0x62>
	}
 80155ae:	bf00      	nop
 80155b0:	3714      	adds	r7, #20
 80155b2:	46bd      	mov	sp, r7
 80155b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155b8:	4770      	bx	lr
 80155ba:	bf00      	nop
 80155bc:	e000e3f0 	.word	0xe000e3f0
 80155c0:	240029f0 	.word	0x240029f0
 80155c4:	e000ed0c 	.word	0xe000ed0c
 80155c8:	240029f4 	.word	0x240029f4

080155cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80155cc:	b580      	push	{r7, lr}
 80155ce:	b08a      	sub	sp, #40	@ 0x28
 80155d0:	af00      	add	r7, sp, #0
 80155d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80155d4:	2300      	movs	r3, #0
 80155d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80155d8:	f7fe ffd6 	bl	8014588 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80155dc:	4b5c      	ldr	r3, [pc, #368]	@ (8015750 <pvPortMalloc+0x184>)
 80155de:	681b      	ldr	r3, [r3, #0]
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d101      	bne.n	80155e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80155e4:	f000 f924 	bl	8015830 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80155e8:	4b5a      	ldr	r3, [pc, #360]	@ (8015754 <pvPortMalloc+0x188>)
 80155ea:	681a      	ldr	r2, [r3, #0]
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	4013      	ands	r3, r2
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	f040 8095 	bne.w	8015720 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d01e      	beq.n	801563a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80155fc:	2208      	movs	r2, #8
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	4413      	add	r3, r2
 8015602:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	f003 0307 	and.w	r3, r3, #7
 801560a:	2b00      	cmp	r3, #0
 801560c:	d015      	beq.n	801563a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	f023 0307 	bic.w	r3, r3, #7
 8015614:	3308      	adds	r3, #8
 8015616:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	f003 0307 	and.w	r3, r3, #7
 801561e:	2b00      	cmp	r3, #0
 8015620:	d00b      	beq.n	801563a <pvPortMalloc+0x6e>
	__asm volatile
 8015622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015626:	f383 8811 	msr	BASEPRI, r3
 801562a:	f3bf 8f6f 	isb	sy
 801562e:	f3bf 8f4f 	dsb	sy
 8015632:	617b      	str	r3, [r7, #20]
}
 8015634:	bf00      	nop
 8015636:	bf00      	nop
 8015638:	e7fd      	b.n	8015636 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	2b00      	cmp	r3, #0
 801563e:	d06f      	beq.n	8015720 <pvPortMalloc+0x154>
 8015640:	4b45      	ldr	r3, [pc, #276]	@ (8015758 <pvPortMalloc+0x18c>)
 8015642:	681b      	ldr	r3, [r3, #0]
 8015644:	687a      	ldr	r2, [r7, #4]
 8015646:	429a      	cmp	r2, r3
 8015648:	d86a      	bhi.n	8015720 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801564a:	4b44      	ldr	r3, [pc, #272]	@ (801575c <pvPortMalloc+0x190>)
 801564c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801564e:	4b43      	ldr	r3, [pc, #268]	@ (801575c <pvPortMalloc+0x190>)
 8015650:	681b      	ldr	r3, [r3, #0]
 8015652:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015654:	e004      	b.n	8015660 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8015656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015658:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801565a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801565c:	681b      	ldr	r3, [r3, #0]
 801565e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015662:	685b      	ldr	r3, [r3, #4]
 8015664:	687a      	ldr	r2, [r7, #4]
 8015666:	429a      	cmp	r2, r3
 8015668:	d903      	bls.n	8015672 <pvPortMalloc+0xa6>
 801566a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801566c:	681b      	ldr	r3, [r3, #0]
 801566e:	2b00      	cmp	r3, #0
 8015670:	d1f1      	bne.n	8015656 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015672:	4b37      	ldr	r3, [pc, #220]	@ (8015750 <pvPortMalloc+0x184>)
 8015674:	681b      	ldr	r3, [r3, #0]
 8015676:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015678:	429a      	cmp	r2, r3
 801567a:	d051      	beq.n	8015720 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801567c:	6a3b      	ldr	r3, [r7, #32]
 801567e:	681b      	ldr	r3, [r3, #0]
 8015680:	2208      	movs	r2, #8
 8015682:	4413      	add	r3, r2
 8015684:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015688:	681a      	ldr	r2, [r3, #0]
 801568a:	6a3b      	ldr	r3, [r7, #32]
 801568c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801568e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015690:	685a      	ldr	r2, [r3, #4]
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	1ad2      	subs	r2, r2, r3
 8015696:	2308      	movs	r3, #8
 8015698:	005b      	lsls	r3, r3, #1
 801569a:	429a      	cmp	r2, r3
 801569c:	d920      	bls.n	80156e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801569e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	4413      	add	r3, r2
 80156a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80156a6:	69bb      	ldr	r3, [r7, #24]
 80156a8:	f003 0307 	and.w	r3, r3, #7
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d00b      	beq.n	80156c8 <pvPortMalloc+0xfc>
	__asm volatile
 80156b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80156b4:	f383 8811 	msr	BASEPRI, r3
 80156b8:	f3bf 8f6f 	isb	sy
 80156bc:	f3bf 8f4f 	dsb	sy
 80156c0:	613b      	str	r3, [r7, #16]
}
 80156c2:	bf00      	nop
 80156c4:	bf00      	nop
 80156c6:	e7fd      	b.n	80156c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80156c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156ca:	685a      	ldr	r2, [r3, #4]
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	1ad2      	subs	r2, r2, r3
 80156d0:	69bb      	ldr	r3, [r7, #24]
 80156d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80156d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156d6:	687a      	ldr	r2, [r7, #4]
 80156d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80156da:	69b8      	ldr	r0, [r7, #24]
 80156dc:	f000 f90a 	bl	80158f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80156e0:	4b1d      	ldr	r3, [pc, #116]	@ (8015758 <pvPortMalloc+0x18c>)
 80156e2:	681a      	ldr	r2, [r3, #0]
 80156e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156e6:	685b      	ldr	r3, [r3, #4]
 80156e8:	1ad3      	subs	r3, r2, r3
 80156ea:	4a1b      	ldr	r2, [pc, #108]	@ (8015758 <pvPortMalloc+0x18c>)
 80156ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80156ee:	4b1a      	ldr	r3, [pc, #104]	@ (8015758 <pvPortMalloc+0x18c>)
 80156f0:	681a      	ldr	r2, [r3, #0]
 80156f2:	4b1b      	ldr	r3, [pc, #108]	@ (8015760 <pvPortMalloc+0x194>)
 80156f4:	681b      	ldr	r3, [r3, #0]
 80156f6:	429a      	cmp	r2, r3
 80156f8:	d203      	bcs.n	8015702 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80156fa:	4b17      	ldr	r3, [pc, #92]	@ (8015758 <pvPortMalloc+0x18c>)
 80156fc:	681b      	ldr	r3, [r3, #0]
 80156fe:	4a18      	ldr	r2, [pc, #96]	@ (8015760 <pvPortMalloc+0x194>)
 8015700:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015704:	685a      	ldr	r2, [r3, #4]
 8015706:	4b13      	ldr	r3, [pc, #76]	@ (8015754 <pvPortMalloc+0x188>)
 8015708:	681b      	ldr	r3, [r3, #0]
 801570a:	431a      	orrs	r2, r3
 801570c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801570e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015712:	2200      	movs	r2, #0
 8015714:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8015716:	4b13      	ldr	r3, [pc, #76]	@ (8015764 <pvPortMalloc+0x198>)
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	3301      	adds	r3, #1
 801571c:	4a11      	ldr	r2, [pc, #68]	@ (8015764 <pvPortMalloc+0x198>)
 801571e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015720:	f7fe ff40 	bl	80145a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015724:	69fb      	ldr	r3, [r7, #28]
 8015726:	f003 0307 	and.w	r3, r3, #7
 801572a:	2b00      	cmp	r3, #0
 801572c:	d00b      	beq.n	8015746 <pvPortMalloc+0x17a>
	__asm volatile
 801572e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015732:	f383 8811 	msr	BASEPRI, r3
 8015736:	f3bf 8f6f 	isb	sy
 801573a:	f3bf 8f4f 	dsb	sy
 801573e:	60fb      	str	r3, [r7, #12]
}
 8015740:	bf00      	nop
 8015742:	bf00      	nop
 8015744:	e7fd      	b.n	8015742 <pvPortMalloc+0x176>
	return pvReturn;
 8015746:	69fb      	ldr	r3, [r7, #28]
}
 8015748:	4618      	mov	r0, r3
 801574a:	3728      	adds	r7, #40	@ 0x28
 801574c:	46bd      	mov	sp, r7
 801574e:	bd80      	pop	{r7, pc}
 8015750:	24006600 	.word	0x24006600
 8015754:	24006614 	.word	0x24006614
 8015758:	24006604 	.word	0x24006604
 801575c:	240065f8 	.word	0x240065f8
 8015760:	24006608 	.word	0x24006608
 8015764:	2400660c 	.word	0x2400660c

08015768 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015768:	b580      	push	{r7, lr}
 801576a:	b086      	sub	sp, #24
 801576c:	af00      	add	r7, sp, #0
 801576e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	2b00      	cmp	r3, #0
 8015778:	d04f      	beq.n	801581a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801577a:	2308      	movs	r3, #8
 801577c:	425b      	negs	r3, r3
 801577e:	697a      	ldr	r2, [r7, #20]
 8015780:	4413      	add	r3, r2
 8015782:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015784:	697b      	ldr	r3, [r7, #20]
 8015786:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015788:	693b      	ldr	r3, [r7, #16]
 801578a:	685a      	ldr	r2, [r3, #4]
 801578c:	4b25      	ldr	r3, [pc, #148]	@ (8015824 <vPortFree+0xbc>)
 801578e:	681b      	ldr	r3, [r3, #0]
 8015790:	4013      	ands	r3, r2
 8015792:	2b00      	cmp	r3, #0
 8015794:	d10b      	bne.n	80157ae <vPortFree+0x46>
	__asm volatile
 8015796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801579a:	f383 8811 	msr	BASEPRI, r3
 801579e:	f3bf 8f6f 	isb	sy
 80157a2:	f3bf 8f4f 	dsb	sy
 80157a6:	60fb      	str	r3, [r7, #12]
}
 80157a8:	bf00      	nop
 80157aa:	bf00      	nop
 80157ac:	e7fd      	b.n	80157aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80157ae:	693b      	ldr	r3, [r7, #16]
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d00b      	beq.n	80157ce <vPortFree+0x66>
	__asm volatile
 80157b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80157ba:	f383 8811 	msr	BASEPRI, r3
 80157be:	f3bf 8f6f 	isb	sy
 80157c2:	f3bf 8f4f 	dsb	sy
 80157c6:	60bb      	str	r3, [r7, #8]
}
 80157c8:	bf00      	nop
 80157ca:	bf00      	nop
 80157cc:	e7fd      	b.n	80157ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80157ce:	693b      	ldr	r3, [r7, #16]
 80157d0:	685a      	ldr	r2, [r3, #4]
 80157d2:	4b14      	ldr	r3, [pc, #80]	@ (8015824 <vPortFree+0xbc>)
 80157d4:	681b      	ldr	r3, [r3, #0]
 80157d6:	4013      	ands	r3, r2
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d01e      	beq.n	801581a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80157dc:	693b      	ldr	r3, [r7, #16]
 80157de:	681b      	ldr	r3, [r3, #0]
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d11a      	bne.n	801581a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80157e4:	693b      	ldr	r3, [r7, #16]
 80157e6:	685a      	ldr	r2, [r3, #4]
 80157e8:	4b0e      	ldr	r3, [pc, #56]	@ (8015824 <vPortFree+0xbc>)
 80157ea:	681b      	ldr	r3, [r3, #0]
 80157ec:	43db      	mvns	r3, r3
 80157ee:	401a      	ands	r2, r3
 80157f0:	693b      	ldr	r3, [r7, #16]
 80157f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80157f4:	f7fe fec8 	bl	8014588 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80157f8:	693b      	ldr	r3, [r7, #16]
 80157fa:	685a      	ldr	r2, [r3, #4]
 80157fc:	4b0a      	ldr	r3, [pc, #40]	@ (8015828 <vPortFree+0xc0>)
 80157fe:	681b      	ldr	r3, [r3, #0]
 8015800:	4413      	add	r3, r2
 8015802:	4a09      	ldr	r2, [pc, #36]	@ (8015828 <vPortFree+0xc0>)
 8015804:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8015806:	6938      	ldr	r0, [r7, #16]
 8015808:	f000 f874 	bl	80158f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801580c:	4b07      	ldr	r3, [pc, #28]	@ (801582c <vPortFree+0xc4>)
 801580e:	681b      	ldr	r3, [r3, #0]
 8015810:	3301      	adds	r3, #1
 8015812:	4a06      	ldr	r2, [pc, #24]	@ (801582c <vPortFree+0xc4>)
 8015814:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8015816:	f7fe fec5 	bl	80145a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801581a:	bf00      	nop
 801581c:	3718      	adds	r7, #24
 801581e:	46bd      	mov	sp, r7
 8015820:	bd80      	pop	{r7, pc}
 8015822:	bf00      	nop
 8015824:	24006614 	.word	0x24006614
 8015828:	24006604 	.word	0x24006604
 801582c:	24006610 	.word	0x24006610

08015830 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015830:	b480      	push	{r7}
 8015832:	b085      	sub	sp, #20
 8015834:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8015836:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 801583a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801583c:	4b27      	ldr	r3, [pc, #156]	@ (80158dc <prvHeapInit+0xac>)
 801583e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015840:	68fb      	ldr	r3, [r7, #12]
 8015842:	f003 0307 	and.w	r3, r3, #7
 8015846:	2b00      	cmp	r3, #0
 8015848:	d00c      	beq.n	8015864 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801584a:	68fb      	ldr	r3, [r7, #12]
 801584c:	3307      	adds	r3, #7
 801584e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015850:	68fb      	ldr	r3, [r7, #12]
 8015852:	f023 0307 	bic.w	r3, r3, #7
 8015856:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8015858:	68ba      	ldr	r2, [r7, #8]
 801585a:	68fb      	ldr	r3, [r7, #12]
 801585c:	1ad3      	subs	r3, r2, r3
 801585e:	4a1f      	ldr	r2, [pc, #124]	@ (80158dc <prvHeapInit+0xac>)
 8015860:	4413      	add	r3, r2
 8015862:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015864:	68fb      	ldr	r3, [r7, #12]
 8015866:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8015868:	4a1d      	ldr	r2, [pc, #116]	@ (80158e0 <prvHeapInit+0xb0>)
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801586e:	4b1c      	ldr	r3, [pc, #112]	@ (80158e0 <prvHeapInit+0xb0>)
 8015870:	2200      	movs	r2, #0
 8015872:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	68ba      	ldr	r2, [r7, #8]
 8015878:	4413      	add	r3, r2
 801587a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801587c:	2208      	movs	r2, #8
 801587e:	68fb      	ldr	r3, [r7, #12]
 8015880:	1a9b      	subs	r3, r3, r2
 8015882:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015884:	68fb      	ldr	r3, [r7, #12]
 8015886:	f023 0307 	bic.w	r3, r3, #7
 801588a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	4a15      	ldr	r2, [pc, #84]	@ (80158e4 <prvHeapInit+0xb4>)
 8015890:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015892:	4b14      	ldr	r3, [pc, #80]	@ (80158e4 <prvHeapInit+0xb4>)
 8015894:	681b      	ldr	r3, [r3, #0]
 8015896:	2200      	movs	r2, #0
 8015898:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801589a:	4b12      	ldr	r3, [pc, #72]	@ (80158e4 <prvHeapInit+0xb4>)
 801589c:	681b      	ldr	r3, [r3, #0]
 801589e:	2200      	movs	r2, #0
 80158a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80158a6:	683b      	ldr	r3, [r7, #0]
 80158a8:	68fa      	ldr	r2, [r7, #12]
 80158aa:	1ad2      	subs	r2, r2, r3
 80158ac:	683b      	ldr	r3, [r7, #0]
 80158ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80158b0:	4b0c      	ldr	r3, [pc, #48]	@ (80158e4 <prvHeapInit+0xb4>)
 80158b2:	681a      	ldr	r2, [r3, #0]
 80158b4:	683b      	ldr	r3, [r7, #0]
 80158b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80158b8:	683b      	ldr	r3, [r7, #0]
 80158ba:	685b      	ldr	r3, [r3, #4]
 80158bc:	4a0a      	ldr	r2, [pc, #40]	@ (80158e8 <prvHeapInit+0xb8>)
 80158be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80158c0:	683b      	ldr	r3, [r7, #0]
 80158c2:	685b      	ldr	r3, [r3, #4]
 80158c4:	4a09      	ldr	r2, [pc, #36]	@ (80158ec <prvHeapInit+0xbc>)
 80158c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80158c8:	4b09      	ldr	r3, [pc, #36]	@ (80158f0 <prvHeapInit+0xc0>)
 80158ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80158ce:	601a      	str	r2, [r3, #0]
}
 80158d0:	bf00      	nop
 80158d2:	3714      	adds	r7, #20
 80158d4:	46bd      	mov	sp, r7
 80158d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158da:	4770      	bx	lr
 80158dc:	240029f8 	.word	0x240029f8
 80158e0:	240065f8 	.word	0x240065f8
 80158e4:	24006600 	.word	0x24006600
 80158e8:	24006608 	.word	0x24006608
 80158ec:	24006604 	.word	0x24006604
 80158f0:	24006614 	.word	0x24006614

080158f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80158f4:	b480      	push	{r7}
 80158f6:	b085      	sub	sp, #20
 80158f8:	af00      	add	r7, sp, #0
 80158fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80158fc:	4b28      	ldr	r3, [pc, #160]	@ (80159a0 <prvInsertBlockIntoFreeList+0xac>)
 80158fe:	60fb      	str	r3, [r7, #12]
 8015900:	e002      	b.n	8015908 <prvInsertBlockIntoFreeList+0x14>
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	681b      	ldr	r3, [r3, #0]
 8015906:	60fb      	str	r3, [r7, #12]
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	681b      	ldr	r3, [r3, #0]
 801590c:	687a      	ldr	r2, [r7, #4]
 801590e:	429a      	cmp	r2, r3
 8015910:	d8f7      	bhi.n	8015902 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015912:	68fb      	ldr	r3, [r7, #12]
 8015914:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8015916:	68fb      	ldr	r3, [r7, #12]
 8015918:	685b      	ldr	r3, [r3, #4]
 801591a:	68ba      	ldr	r2, [r7, #8]
 801591c:	4413      	add	r3, r2
 801591e:	687a      	ldr	r2, [r7, #4]
 8015920:	429a      	cmp	r2, r3
 8015922:	d108      	bne.n	8015936 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	685a      	ldr	r2, [r3, #4]
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	685b      	ldr	r3, [r3, #4]
 801592c:	441a      	add	r2, r3
 801592e:	68fb      	ldr	r3, [r7, #12]
 8015930:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015932:	68fb      	ldr	r3, [r7, #12]
 8015934:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	685b      	ldr	r3, [r3, #4]
 801593e:	68ba      	ldr	r2, [r7, #8]
 8015940:	441a      	add	r2, r3
 8015942:	68fb      	ldr	r3, [r7, #12]
 8015944:	681b      	ldr	r3, [r3, #0]
 8015946:	429a      	cmp	r2, r3
 8015948:	d118      	bne.n	801597c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801594a:	68fb      	ldr	r3, [r7, #12]
 801594c:	681a      	ldr	r2, [r3, #0]
 801594e:	4b15      	ldr	r3, [pc, #84]	@ (80159a4 <prvInsertBlockIntoFreeList+0xb0>)
 8015950:	681b      	ldr	r3, [r3, #0]
 8015952:	429a      	cmp	r2, r3
 8015954:	d00d      	beq.n	8015972 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	685a      	ldr	r2, [r3, #4]
 801595a:	68fb      	ldr	r3, [r7, #12]
 801595c:	681b      	ldr	r3, [r3, #0]
 801595e:	685b      	ldr	r3, [r3, #4]
 8015960:	441a      	add	r2, r3
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8015966:	68fb      	ldr	r3, [r7, #12]
 8015968:	681b      	ldr	r3, [r3, #0]
 801596a:	681a      	ldr	r2, [r3, #0]
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	601a      	str	r2, [r3, #0]
 8015970:	e008      	b.n	8015984 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015972:	4b0c      	ldr	r3, [pc, #48]	@ (80159a4 <prvInsertBlockIntoFreeList+0xb0>)
 8015974:	681a      	ldr	r2, [r3, #0]
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	601a      	str	r2, [r3, #0]
 801597a:	e003      	b.n	8015984 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801597c:	68fb      	ldr	r3, [r7, #12]
 801597e:	681a      	ldr	r2, [r3, #0]
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015984:	68fa      	ldr	r2, [r7, #12]
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	429a      	cmp	r2, r3
 801598a:	d002      	beq.n	8015992 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801598c:	68fb      	ldr	r3, [r7, #12]
 801598e:	687a      	ldr	r2, [r7, #4]
 8015990:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015992:	bf00      	nop
 8015994:	3714      	adds	r7, #20
 8015996:	46bd      	mov	sp, r7
 8015998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801599c:	4770      	bx	lr
 801599e:	bf00      	nop
 80159a0:	240065f8 	.word	0x240065f8
 80159a4:	24006600 	.word	0x24006600

080159a8 <atof>:
 80159a8:	2100      	movs	r1, #0
 80159aa:	f000 bdb7 	b.w	801651c <strtod>

080159ae <atoi>:
 80159ae:	220a      	movs	r2, #10
 80159b0:	2100      	movs	r1, #0
 80159b2:	f000 be39 	b.w	8016628 <strtol>

080159b6 <sulp>:
 80159b6:	b570      	push	{r4, r5, r6, lr}
 80159b8:	4604      	mov	r4, r0
 80159ba:	460d      	mov	r5, r1
 80159bc:	4616      	mov	r6, r2
 80159be:	ec45 4b10 	vmov	d0, r4, r5
 80159c2:	f001 ffa9 	bl	8017918 <__ulp>
 80159c6:	b17e      	cbz	r6, 80159e8 <sulp+0x32>
 80159c8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80159cc:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	dd09      	ble.n	80159e8 <sulp+0x32>
 80159d4:	051b      	lsls	r3, r3, #20
 80159d6:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 80159da:	2000      	movs	r0, #0
 80159dc:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 80159e0:	ec41 0b17 	vmov	d7, r0, r1
 80159e4:	ee20 0b07 	vmul.f64	d0, d0, d7
 80159e8:	bd70      	pop	{r4, r5, r6, pc}
 80159ea:	0000      	movs	r0, r0
 80159ec:	0000      	movs	r0, r0
	...

080159f0 <_strtod_l>:
 80159f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159f4:	ed2d 8b0a 	vpush	{d8-d12}
 80159f8:	b097      	sub	sp, #92	@ 0x5c
 80159fa:	4688      	mov	r8, r1
 80159fc:	920e      	str	r2, [sp, #56]	@ 0x38
 80159fe:	2200      	movs	r2, #0
 8015a00:	9212      	str	r2, [sp, #72]	@ 0x48
 8015a02:	9005      	str	r0, [sp, #20]
 8015a04:	f04f 0a00 	mov.w	sl, #0
 8015a08:	f04f 0b00 	mov.w	fp, #0
 8015a0c:	460a      	mov	r2, r1
 8015a0e:	9211      	str	r2, [sp, #68]	@ 0x44
 8015a10:	7811      	ldrb	r1, [r2, #0]
 8015a12:	292b      	cmp	r1, #43	@ 0x2b
 8015a14:	d04c      	beq.n	8015ab0 <_strtod_l+0xc0>
 8015a16:	d839      	bhi.n	8015a8c <_strtod_l+0x9c>
 8015a18:	290d      	cmp	r1, #13
 8015a1a:	d833      	bhi.n	8015a84 <_strtod_l+0x94>
 8015a1c:	2908      	cmp	r1, #8
 8015a1e:	d833      	bhi.n	8015a88 <_strtod_l+0x98>
 8015a20:	2900      	cmp	r1, #0
 8015a22:	d03c      	beq.n	8015a9e <_strtod_l+0xae>
 8015a24:	2200      	movs	r2, #0
 8015a26:	9208      	str	r2, [sp, #32]
 8015a28:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8015a2a:	782a      	ldrb	r2, [r5, #0]
 8015a2c:	2a30      	cmp	r2, #48	@ 0x30
 8015a2e:	f040 80b5 	bne.w	8015b9c <_strtod_l+0x1ac>
 8015a32:	786a      	ldrb	r2, [r5, #1]
 8015a34:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8015a38:	2a58      	cmp	r2, #88	@ 0x58
 8015a3a:	d170      	bne.n	8015b1e <_strtod_l+0x12e>
 8015a3c:	9302      	str	r3, [sp, #8]
 8015a3e:	9b08      	ldr	r3, [sp, #32]
 8015a40:	9301      	str	r3, [sp, #4]
 8015a42:	ab12      	add	r3, sp, #72	@ 0x48
 8015a44:	9300      	str	r3, [sp, #0]
 8015a46:	4a8b      	ldr	r2, [pc, #556]	@ (8015c74 <_strtod_l+0x284>)
 8015a48:	9805      	ldr	r0, [sp, #20]
 8015a4a:	ab13      	add	r3, sp, #76	@ 0x4c
 8015a4c:	a911      	add	r1, sp, #68	@ 0x44
 8015a4e:	f001 f85d 	bl	8016b0c <__gethex>
 8015a52:	f010 060f 	ands.w	r6, r0, #15
 8015a56:	4604      	mov	r4, r0
 8015a58:	d005      	beq.n	8015a66 <_strtod_l+0x76>
 8015a5a:	2e06      	cmp	r6, #6
 8015a5c:	d12a      	bne.n	8015ab4 <_strtod_l+0xc4>
 8015a5e:	3501      	adds	r5, #1
 8015a60:	2300      	movs	r3, #0
 8015a62:	9511      	str	r5, [sp, #68]	@ 0x44
 8015a64:	9308      	str	r3, [sp, #32]
 8015a66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	f040 852f 	bne.w	80164cc <_strtod_l+0xadc>
 8015a6e:	9b08      	ldr	r3, [sp, #32]
 8015a70:	ec4b ab10 	vmov	d0, sl, fp
 8015a74:	b1cb      	cbz	r3, 8015aaa <_strtod_l+0xba>
 8015a76:	eeb1 0b40 	vneg.f64	d0, d0
 8015a7a:	b017      	add	sp, #92	@ 0x5c
 8015a7c:	ecbd 8b0a 	vpop	{d8-d12}
 8015a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a84:	2920      	cmp	r1, #32
 8015a86:	d1cd      	bne.n	8015a24 <_strtod_l+0x34>
 8015a88:	3201      	adds	r2, #1
 8015a8a:	e7c0      	b.n	8015a0e <_strtod_l+0x1e>
 8015a8c:	292d      	cmp	r1, #45	@ 0x2d
 8015a8e:	d1c9      	bne.n	8015a24 <_strtod_l+0x34>
 8015a90:	2101      	movs	r1, #1
 8015a92:	9108      	str	r1, [sp, #32]
 8015a94:	1c51      	adds	r1, r2, #1
 8015a96:	9111      	str	r1, [sp, #68]	@ 0x44
 8015a98:	7852      	ldrb	r2, [r2, #1]
 8015a9a:	2a00      	cmp	r2, #0
 8015a9c:	d1c4      	bne.n	8015a28 <_strtod_l+0x38>
 8015a9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015aa0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	f040 850f 	bne.w	80164c8 <_strtod_l+0xad8>
 8015aaa:	ec4b ab10 	vmov	d0, sl, fp
 8015aae:	e7e4      	b.n	8015a7a <_strtod_l+0x8a>
 8015ab0:	2100      	movs	r1, #0
 8015ab2:	e7ee      	b.n	8015a92 <_strtod_l+0xa2>
 8015ab4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8015ab6:	b13a      	cbz	r2, 8015ac8 <_strtod_l+0xd8>
 8015ab8:	2135      	movs	r1, #53	@ 0x35
 8015aba:	a814      	add	r0, sp, #80	@ 0x50
 8015abc:	f002 f823 	bl	8017b06 <__copybits>
 8015ac0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8015ac2:	9805      	ldr	r0, [sp, #20]
 8015ac4:	f001 fbf4 	bl	80172b0 <_Bfree>
 8015ac8:	1e73      	subs	r3, r6, #1
 8015aca:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8015acc:	2b04      	cmp	r3, #4
 8015ace:	d806      	bhi.n	8015ade <_strtod_l+0xee>
 8015ad0:	e8df f003 	tbb	[pc, r3]
 8015ad4:	201d0314 	.word	0x201d0314
 8015ad8:	14          	.byte	0x14
 8015ad9:	00          	.byte	0x00
 8015ada:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8015ade:	05e3      	lsls	r3, r4, #23
 8015ae0:	bf48      	it	mi
 8015ae2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8015ae6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015aea:	0d1b      	lsrs	r3, r3, #20
 8015aec:	051b      	lsls	r3, r3, #20
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d1b9      	bne.n	8015a66 <_strtod_l+0x76>
 8015af2:	f000 ff15 	bl	8016920 <__errno>
 8015af6:	2322      	movs	r3, #34	@ 0x22
 8015af8:	6003      	str	r3, [r0, #0]
 8015afa:	e7b4      	b.n	8015a66 <_strtod_l+0x76>
 8015afc:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8015b00:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8015b04:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8015b08:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8015b0c:	e7e7      	b.n	8015ade <_strtod_l+0xee>
 8015b0e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8015c7c <_strtod_l+0x28c>
 8015b12:	e7e4      	b.n	8015ade <_strtod_l+0xee>
 8015b14:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8015b18:	f04f 3aff 	mov.w	sl, #4294967295
 8015b1c:	e7df      	b.n	8015ade <_strtod_l+0xee>
 8015b1e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015b20:	1c5a      	adds	r2, r3, #1
 8015b22:	9211      	str	r2, [sp, #68]	@ 0x44
 8015b24:	785b      	ldrb	r3, [r3, #1]
 8015b26:	2b30      	cmp	r3, #48	@ 0x30
 8015b28:	d0f9      	beq.n	8015b1e <_strtod_l+0x12e>
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d09b      	beq.n	8015a66 <_strtod_l+0x76>
 8015b2e:	2301      	movs	r3, #1
 8015b30:	2600      	movs	r6, #0
 8015b32:	9307      	str	r3, [sp, #28]
 8015b34:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015b36:	930a      	str	r3, [sp, #40]	@ 0x28
 8015b38:	46b1      	mov	r9, r6
 8015b3a:	4635      	mov	r5, r6
 8015b3c:	220a      	movs	r2, #10
 8015b3e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8015b40:	7804      	ldrb	r4, [r0, #0]
 8015b42:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8015b46:	b2d9      	uxtb	r1, r3
 8015b48:	2909      	cmp	r1, #9
 8015b4a:	d929      	bls.n	8015ba0 <_strtod_l+0x1b0>
 8015b4c:	494a      	ldr	r1, [pc, #296]	@ (8015c78 <_strtod_l+0x288>)
 8015b4e:	2201      	movs	r2, #1
 8015b50:	f000 fe8e 	bl	8016870 <strncmp>
 8015b54:	b378      	cbz	r0, 8015bb6 <_strtod_l+0x1c6>
 8015b56:	2000      	movs	r0, #0
 8015b58:	4622      	mov	r2, r4
 8015b5a:	462b      	mov	r3, r5
 8015b5c:	4607      	mov	r7, r0
 8015b5e:	9006      	str	r0, [sp, #24]
 8015b60:	2a65      	cmp	r2, #101	@ 0x65
 8015b62:	d001      	beq.n	8015b68 <_strtod_l+0x178>
 8015b64:	2a45      	cmp	r2, #69	@ 0x45
 8015b66:	d117      	bne.n	8015b98 <_strtod_l+0x1a8>
 8015b68:	b91b      	cbnz	r3, 8015b72 <_strtod_l+0x182>
 8015b6a:	9b07      	ldr	r3, [sp, #28]
 8015b6c:	4303      	orrs	r3, r0
 8015b6e:	d096      	beq.n	8015a9e <_strtod_l+0xae>
 8015b70:	2300      	movs	r3, #0
 8015b72:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8015b76:	f108 0201 	add.w	r2, r8, #1
 8015b7a:	9211      	str	r2, [sp, #68]	@ 0x44
 8015b7c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8015b80:	2a2b      	cmp	r2, #43	@ 0x2b
 8015b82:	d06b      	beq.n	8015c5c <_strtod_l+0x26c>
 8015b84:	2a2d      	cmp	r2, #45	@ 0x2d
 8015b86:	d071      	beq.n	8015c6c <_strtod_l+0x27c>
 8015b88:	f04f 0e00 	mov.w	lr, #0
 8015b8c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8015b90:	2c09      	cmp	r4, #9
 8015b92:	d979      	bls.n	8015c88 <_strtod_l+0x298>
 8015b94:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8015b98:	2400      	movs	r4, #0
 8015b9a:	e094      	b.n	8015cc6 <_strtod_l+0x2d6>
 8015b9c:	2300      	movs	r3, #0
 8015b9e:	e7c7      	b.n	8015b30 <_strtod_l+0x140>
 8015ba0:	2d08      	cmp	r5, #8
 8015ba2:	f100 0001 	add.w	r0, r0, #1
 8015ba6:	bfd4      	ite	le
 8015ba8:	fb02 3909 	mlale	r9, r2, r9, r3
 8015bac:	fb02 3606 	mlagt	r6, r2, r6, r3
 8015bb0:	3501      	adds	r5, #1
 8015bb2:	9011      	str	r0, [sp, #68]	@ 0x44
 8015bb4:	e7c3      	b.n	8015b3e <_strtod_l+0x14e>
 8015bb6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015bb8:	1c5a      	adds	r2, r3, #1
 8015bba:	9211      	str	r2, [sp, #68]	@ 0x44
 8015bbc:	785a      	ldrb	r2, [r3, #1]
 8015bbe:	b375      	cbz	r5, 8015c1e <_strtod_l+0x22e>
 8015bc0:	4607      	mov	r7, r0
 8015bc2:	462b      	mov	r3, r5
 8015bc4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8015bc8:	2909      	cmp	r1, #9
 8015bca:	d913      	bls.n	8015bf4 <_strtod_l+0x204>
 8015bcc:	2101      	movs	r1, #1
 8015bce:	9106      	str	r1, [sp, #24]
 8015bd0:	e7c6      	b.n	8015b60 <_strtod_l+0x170>
 8015bd2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015bd4:	1c5a      	adds	r2, r3, #1
 8015bd6:	9211      	str	r2, [sp, #68]	@ 0x44
 8015bd8:	785a      	ldrb	r2, [r3, #1]
 8015bda:	3001      	adds	r0, #1
 8015bdc:	2a30      	cmp	r2, #48	@ 0x30
 8015bde:	d0f8      	beq.n	8015bd2 <_strtod_l+0x1e2>
 8015be0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8015be4:	2b08      	cmp	r3, #8
 8015be6:	f200 8476 	bhi.w	80164d6 <_strtod_l+0xae6>
 8015bea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015bec:	930a      	str	r3, [sp, #40]	@ 0x28
 8015bee:	4607      	mov	r7, r0
 8015bf0:	2000      	movs	r0, #0
 8015bf2:	4603      	mov	r3, r0
 8015bf4:	3a30      	subs	r2, #48	@ 0x30
 8015bf6:	f100 0101 	add.w	r1, r0, #1
 8015bfa:	d023      	beq.n	8015c44 <_strtod_l+0x254>
 8015bfc:	440f      	add	r7, r1
 8015bfe:	eb00 0c03 	add.w	ip, r0, r3
 8015c02:	4619      	mov	r1, r3
 8015c04:	240a      	movs	r4, #10
 8015c06:	4561      	cmp	r1, ip
 8015c08:	d10b      	bne.n	8015c22 <_strtod_l+0x232>
 8015c0a:	1c5c      	adds	r4, r3, #1
 8015c0c:	4403      	add	r3, r0
 8015c0e:	2b08      	cmp	r3, #8
 8015c10:	4404      	add	r4, r0
 8015c12:	dc11      	bgt.n	8015c38 <_strtod_l+0x248>
 8015c14:	230a      	movs	r3, #10
 8015c16:	fb03 2909 	mla	r9, r3, r9, r2
 8015c1a:	2100      	movs	r1, #0
 8015c1c:	e013      	b.n	8015c46 <_strtod_l+0x256>
 8015c1e:	4628      	mov	r0, r5
 8015c20:	e7dc      	b.n	8015bdc <_strtod_l+0x1ec>
 8015c22:	2908      	cmp	r1, #8
 8015c24:	f101 0101 	add.w	r1, r1, #1
 8015c28:	dc02      	bgt.n	8015c30 <_strtod_l+0x240>
 8015c2a:	fb04 f909 	mul.w	r9, r4, r9
 8015c2e:	e7ea      	b.n	8015c06 <_strtod_l+0x216>
 8015c30:	2910      	cmp	r1, #16
 8015c32:	bfd8      	it	le
 8015c34:	4366      	mulle	r6, r4
 8015c36:	e7e6      	b.n	8015c06 <_strtod_l+0x216>
 8015c38:	2b0f      	cmp	r3, #15
 8015c3a:	dcee      	bgt.n	8015c1a <_strtod_l+0x22a>
 8015c3c:	230a      	movs	r3, #10
 8015c3e:	fb03 2606 	mla	r6, r3, r6, r2
 8015c42:	e7ea      	b.n	8015c1a <_strtod_l+0x22a>
 8015c44:	461c      	mov	r4, r3
 8015c46:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015c48:	1c5a      	adds	r2, r3, #1
 8015c4a:	9211      	str	r2, [sp, #68]	@ 0x44
 8015c4c:	785a      	ldrb	r2, [r3, #1]
 8015c4e:	4608      	mov	r0, r1
 8015c50:	4623      	mov	r3, r4
 8015c52:	e7b7      	b.n	8015bc4 <_strtod_l+0x1d4>
 8015c54:	2301      	movs	r3, #1
 8015c56:	2700      	movs	r7, #0
 8015c58:	9306      	str	r3, [sp, #24]
 8015c5a:	e786      	b.n	8015b6a <_strtod_l+0x17a>
 8015c5c:	f04f 0e00 	mov.w	lr, #0
 8015c60:	f108 0202 	add.w	r2, r8, #2
 8015c64:	9211      	str	r2, [sp, #68]	@ 0x44
 8015c66:	f898 2002 	ldrb.w	r2, [r8, #2]
 8015c6a:	e78f      	b.n	8015b8c <_strtod_l+0x19c>
 8015c6c:	f04f 0e01 	mov.w	lr, #1
 8015c70:	e7f6      	b.n	8015c60 <_strtod_l+0x270>
 8015c72:	bf00      	nop
 8015c74:	080189f8 	.word	0x080189f8
 8015c78:	080189d4 	.word	0x080189d4
 8015c7c:	7ff00000 	.word	0x7ff00000
 8015c80:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015c82:	1c54      	adds	r4, r2, #1
 8015c84:	9411      	str	r4, [sp, #68]	@ 0x44
 8015c86:	7852      	ldrb	r2, [r2, #1]
 8015c88:	2a30      	cmp	r2, #48	@ 0x30
 8015c8a:	d0f9      	beq.n	8015c80 <_strtod_l+0x290>
 8015c8c:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8015c90:	2c08      	cmp	r4, #8
 8015c92:	d881      	bhi.n	8015b98 <_strtod_l+0x1a8>
 8015c94:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8015c98:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015c9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8015c9c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015c9e:	1c51      	adds	r1, r2, #1
 8015ca0:	9111      	str	r1, [sp, #68]	@ 0x44
 8015ca2:	7852      	ldrb	r2, [r2, #1]
 8015ca4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8015ca8:	2c09      	cmp	r4, #9
 8015caa:	d938      	bls.n	8015d1e <_strtod_l+0x32e>
 8015cac:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8015cae:	1b0c      	subs	r4, r1, r4
 8015cb0:	2c08      	cmp	r4, #8
 8015cb2:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8015cb6:	dc02      	bgt.n	8015cbe <_strtod_l+0x2ce>
 8015cb8:	4564      	cmp	r4, ip
 8015cba:	bfa8      	it	ge
 8015cbc:	4664      	movge	r4, ip
 8015cbe:	f1be 0f00 	cmp.w	lr, #0
 8015cc2:	d000      	beq.n	8015cc6 <_strtod_l+0x2d6>
 8015cc4:	4264      	negs	r4, r4
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	d14e      	bne.n	8015d68 <_strtod_l+0x378>
 8015cca:	9b07      	ldr	r3, [sp, #28]
 8015ccc:	4318      	orrs	r0, r3
 8015cce:	f47f aeca 	bne.w	8015a66 <_strtod_l+0x76>
 8015cd2:	9b06      	ldr	r3, [sp, #24]
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	f47f aee2 	bne.w	8015a9e <_strtod_l+0xae>
 8015cda:	2a69      	cmp	r2, #105	@ 0x69
 8015cdc:	d027      	beq.n	8015d2e <_strtod_l+0x33e>
 8015cde:	dc24      	bgt.n	8015d2a <_strtod_l+0x33a>
 8015ce0:	2a49      	cmp	r2, #73	@ 0x49
 8015ce2:	d024      	beq.n	8015d2e <_strtod_l+0x33e>
 8015ce4:	2a4e      	cmp	r2, #78	@ 0x4e
 8015ce6:	f47f aeda 	bne.w	8015a9e <_strtod_l+0xae>
 8015cea:	4997      	ldr	r1, [pc, #604]	@ (8015f48 <_strtod_l+0x558>)
 8015cec:	a811      	add	r0, sp, #68	@ 0x44
 8015cee:	f001 f92f 	bl	8016f50 <__match>
 8015cf2:	2800      	cmp	r0, #0
 8015cf4:	f43f aed3 	beq.w	8015a9e <_strtod_l+0xae>
 8015cf8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015cfa:	781b      	ldrb	r3, [r3, #0]
 8015cfc:	2b28      	cmp	r3, #40	@ 0x28
 8015cfe:	d12d      	bne.n	8015d5c <_strtod_l+0x36c>
 8015d00:	4992      	ldr	r1, [pc, #584]	@ (8015f4c <_strtod_l+0x55c>)
 8015d02:	aa14      	add	r2, sp, #80	@ 0x50
 8015d04:	a811      	add	r0, sp, #68	@ 0x44
 8015d06:	f001 f937 	bl	8016f78 <__hexnan>
 8015d0a:	2805      	cmp	r0, #5
 8015d0c:	d126      	bne.n	8015d5c <_strtod_l+0x36c>
 8015d0e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015d10:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8015d14:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8015d18:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8015d1c:	e6a3      	b.n	8015a66 <_strtod_l+0x76>
 8015d1e:	240a      	movs	r4, #10
 8015d20:	fb04 2c0c 	mla	ip, r4, ip, r2
 8015d24:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8015d28:	e7b8      	b.n	8015c9c <_strtod_l+0x2ac>
 8015d2a:	2a6e      	cmp	r2, #110	@ 0x6e
 8015d2c:	e7db      	b.n	8015ce6 <_strtod_l+0x2f6>
 8015d2e:	4988      	ldr	r1, [pc, #544]	@ (8015f50 <_strtod_l+0x560>)
 8015d30:	a811      	add	r0, sp, #68	@ 0x44
 8015d32:	f001 f90d 	bl	8016f50 <__match>
 8015d36:	2800      	cmp	r0, #0
 8015d38:	f43f aeb1 	beq.w	8015a9e <_strtod_l+0xae>
 8015d3c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015d3e:	4985      	ldr	r1, [pc, #532]	@ (8015f54 <_strtod_l+0x564>)
 8015d40:	3b01      	subs	r3, #1
 8015d42:	a811      	add	r0, sp, #68	@ 0x44
 8015d44:	9311      	str	r3, [sp, #68]	@ 0x44
 8015d46:	f001 f903 	bl	8016f50 <__match>
 8015d4a:	b910      	cbnz	r0, 8015d52 <_strtod_l+0x362>
 8015d4c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015d4e:	3301      	adds	r3, #1
 8015d50:	9311      	str	r3, [sp, #68]	@ 0x44
 8015d52:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8015f68 <_strtod_l+0x578>
 8015d56:	f04f 0a00 	mov.w	sl, #0
 8015d5a:	e684      	b.n	8015a66 <_strtod_l+0x76>
 8015d5c:	487e      	ldr	r0, [pc, #504]	@ (8015f58 <_strtod_l+0x568>)
 8015d5e:	f000 fe1b 	bl	8016998 <nan>
 8015d62:	ec5b ab10 	vmov	sl, fp, d0
 8015d66:	e67e      	b.n	8015a66 <_strtod_l+0x76>
 8015d68:	ee07 9a90 	vmov	s15, r9
 8015d6c:	1be2      	subs	r2, r4, r7
 8015d6e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8015d72:	2d00      	cmp	r5, #0
 8015d74:	bf08      	it	eq
 8015d76:	461d      	moveq	r5, r3
 8015d78:	2b10      	cmp	r3, #16
 8015d7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8015d7c:	461a      	mov	r2, r3
 8015d7e:	bfa8      	it	ge
 8015d80:	2210      	movge	r2, #16
 8015d82:	2b09      	cmp	r3, #9
 8015d84:	ec5b ab17 	vmov	sl, fp, d7
 8015d88:	dc15      	bgt.n	8015db6 <_strtod_l+0x3c6>
 8015d8a:	1be1      	subs	r1, r4, r7
 8015d8c:	2900      	cmp	r1, #0
 8015d8e:	f43f ae6a 	beq.w	8015a66 <_strtod_l+0x76>
 8015d92:	eba4 0107 	sub.w	r1, r4, r7
 8015d96:	dd72      	ble.n	8015e7e <_strtod_l+0x48e>
 8015d98:	2916      	cmp	r1, #22
 8015d9a:	dc59      	bgt.n	8015e50 <_strtod_l+0x460>
 8015d9c:	4b6f      	ldr	r3, [pc, #444]	@ (8015f5c <_strtod_l+0x56c>)
 8015d9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015da0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015da4:	ed93 7b00 	vldr	d7, [r3]
 8015da8:	ec4b ab16 	vmov	d6, sl, fp
 8015dac:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015db0:	ec5b ab17 	vmov	sl, fp, d7
 8015db4:	e657      	b.n	8015a66 <_strtod_l+0x76>
 8015db6:	4969      	ldr	r1, [pc, #420]	@ (8015f5c <_strtod_l+0x56c>)
 8015db8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8015dbc:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8015dc0:	ee06 6a90 	vmov	s13, r6
 8015dc4:	2b0f      	cmp	r3, #15
 8015dc6:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8015dca:	eea7 6b05 	vfma.f64	d6, d7, d5
 8015dce:	ec5b ab16 	vmov	sl, fp, d6
 8015dd2:	ddda      	ble.n	8015d8a <_strtod_l+0x39a>
 8015dd4:	1a9a      	subs	r2, r3, r2
 8015dd6:	1be1      	subs	r1, r4, r7
 8015dd8:	440a      	add	r2, r1
 8015dda:	2a00      	cmp	r2, #0
 8015ddc:	f340 8094 	ble.w	8015f08 <_strtod_l+0x518>
 8015de0:	f012 000f 	ands.w	r0, r2, #15
 8015de4:	d00a      	beq.n	8015dfc <_strtod_l+0x40c>
 8015de6:	495d      	ldr	r1, [pc, #372]	@ (8015f5c <_strtod_l+0x56c>)
 8015de8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8015dec:	ed91 7b00 	vldr	d7, [r1]
 8015df0:	ec4b ab16 	vmov	d6, sl, fp
 8015df4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015df8:	ec5b ab17 	vmov	sl, fp, d7
 8015dfc:	f032 020f 	bics.w	r2, r2, #15
 8015e00:	d073      	beq.n	8015eea <_strtod_l+0x4fa>
 8015e02:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8015e06:	dd47      	ble.n	8015e98 <_strtod_l+0x4a8>
 8015e08:	2400      	movs	r4, #0
 8015e0a:	4625      	mov	r5, r4
 8015e0c:	9407      	str	r4, [sp, #28]
 8015e0e:	4626      	mov	r6, r4
 8015e10:	9a05      	ldr	r2, [sp, #20]
 8015e12:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8015f68 <_strtod_l+0x578>
 8015e16:	2322      	movs	r3, #34	@ 0x22
 8015e18:	6013      	str	r3, [r2, #0]
 8015e1a:	f04f 0a00 	mov.w	sl, #0
 8015e1e:	9b07      	ldr	r3, [sp, #28]
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	f43f ae20 	beq.w	8015a66 <_strtod_l+0x76>
 8015e26:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8015e28:	9805      	ldr	r0, [sp, #20]
 8015e2a:	f001 fa41 	bl	80172b0 <_Bfree>
 8015e2e:	9805      	ldr	r0, [sp, #20]
 8015e30:	4631      	mov	r1, r6
 8015e32:	f001 fa3d 	bl	80172b0 <_Bfree>
 8015e36:	9805      	ldr	r0, [sp, #20]
 8015e38:	4629      	mov	r1, r5
 8015e3a:	f001 fa39 	bl	80172b0 <_Bfree>
 8015e3e:	9907      	ldr	r1, [sp, #28]
 8015e40:	9805      	ldr	r0, [sp, #20]
 8015e42:	f001 fa35 	bl	80172b0 <_Bfree>
 8015e46:	9805      	ldr	r0, [sp, #20]
 8015e48:	4621      	mov	r1, r4
 8015e4a:	f001 fa31 	bl	80172b0 <_Bfree>
 8015e4e:	e60a      	b.n	8015a66 <_strtod_l+0x76>
 8015e50:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8015e54:	1be0      	subs	r0, r4, r7
 8015e56:	4281      	cmp	r1, r0
 8015e58:	dbbc      	blt.n	8015dd4 <_strtod_l+0x3e4>
 8015e5a:	4a40      	ldr	r2, [pc, #256]	@ (8015f5c <_strtod_l+0x56c>)
 8015e5c:	f1c3 030f 	rsb	r3, r3, #15
 8015e60:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8015e64:	ed91 7b00 	vldr	d7, [r1]
 8015e68:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015e6a:	ec4b ab16 	vmov	d6, sl, fp
 8015e6e:	1acb      	subs	r3, r1, r3
 8015e70:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8015e74:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015e78:	ed92 6b00 	vldr	d6, [r2]
 8015e7c:	e796      	b.n	8015dac <_strtod_l+0x3bc>
 8015e7e:	3116      	adds	r1, #22
 8015e80:	dba8      	blt.n	8015dd4 <_strtod_l+0x3e4>
 8015e82:	4b36      	ldr	r3, [pc, #216]	@ (8015f5c <_strtod_l+0x56c>)
 8015e84:	1b3c      	subs	r4, r7, r4
 8015e86:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8015e8a:	ed94 7b00 	vldr	d7, [r4]
 8015e8e:	ec4b ab16 	vmov	d6, sl, fp
 8015e92:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8015e96:	e78b      	b.n	8015db0 <_strtod_l+0x3c0>
 8015e98:	2000      	movs	r0, #0
 8015e9a:	ec4b ab17 	vmov	d7, sl, fp
 8015e9e:	4e30      	ldr	r6, [pc, #192]	@ (8015f60 <_strtod_l+0x570>)
 8015ea0:	1112      	asrs	r2, r2, #4
 8015ea2:	4601      	mov	r1, r0
 8015ea4:	2a01      	cmp	r2, #1
 8015ea6:	dc23      	bgt.n	8015ef0 <_strtod_l+0x500>
 8015ea8:	b108      	cbz	r0, 8015eae <_strtod_l+0x4be>
 8015eaa:	ec5b ab17 	vmov	sl, fp, d7
 8015eae:	4a2c      	ldr	r2, [pc, #176]	@ (8015f60 <_strtod_l+0x570>)
 8015eb0:	482c      	ldr	r0, [pc, #176]	@ (8015f64 <_strtod_l+0x574>)
 8015eb2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8015eb6:	ed92 7b00 	vldr	d7, [r2]
 8015eba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8015ebe:	ec4b ab16 	vmov	d6, sl, fp
 8015ec2:	4a29      	ldr	r2, [pc, #164]	@ (8015f68 <_strtod_l+0x578>)
 8015ec4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015ec8:	ee17 1a90 	vmov	r1, s15
 8015ecc:	400a      	ands	r2, r1
 8015ece:	4282      	cmp	r2, r0
 8015ed0:	ec5b ab17 	vmov	sl, fp, d7
 8015ed4:	d898      	bhi.n	8015e08 <_strtod_l+0x418>
 8015ed6:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8015eda:	4282      	cmp	r2, r0
 8015edc:	bf86      	itte	hi
 8015ede:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8015f6c <_strtod_l+0x57c>
 8015ee2:	f04f 3aff 	movhi.w	sl, #4294967295
 8015ee6:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8015eea:	2200      	movs	r2, #0
 8015eec:	9206      	str	r2, [sp, #24]
 8015eee:	e076      	b.n	8015fde <_strtod_l+0x5ee>
 8015ef0:	f012 0f01 	tst.w	r2, #1
 8015ef4:	d004      	beq.n	8015f00 <_strtod_l+0x510>
 8015ef6:	ed96 6b00 	vldr	d6, [r6]
 8015efa:	2001      	movs	r0, #1
 8015efc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015f00:	3101      	adds	r1, #1
 8015f02:	1052      	asrs	r2, r2, #1
 8015f04:	3608      	adds	r6, #8
 8015f06:	e7cd      	b.n	8015ea4 <_strtod_l+0x4b4>
 8015f08:	d0ef      	beq.n	8015eea <_strtod_l+0x4fa>
 8015f0a:	4252      	negs	r2, r2
 8015f0c:	f012 000f 	ands.w	r0, r2, #15
 8015f10:	d00a      	beq.n	8015f28 <_strtod_l+0x538>
 8015f12:	4912      	ldr	r1, [pc, #72]	@ (8015f5c <_strtod_l+0x56c>)
 8015f14:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8015f18:	ed91 7b00 	vldr	d7, [r1]
 8015f1c:	ec4b ab16 	vmov	d6, sl, fp
 8015f20:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8015f24:	ec5b ab17 	vmov	sl, fp, d7
 8015f28:	1112      	asrs	r2, r2, #4
 8015f2a:	d0de      	beq.n	8015eea <_strtod_l+0x4fa>
 8015f2c:	2a1f      	cmp	r2, #31
 8015f2e:	dd1f      	ble.n	8015f70 <_strtod_l+0x580>
 8015f30:	2400      	movs	r4, #0
 8015f32:	4625      	mov	r5, r4
 8015f34:	9407      	str	r4, [sp, #28]
 8015f36:	4626      	mov	r6, r4
 8015f38:	9a05      	ldr	r2, [sp, #20]
 8015f3a:	2322      	movs	r3, #34	@ 0x22
 8015f3c:	f04f 0a00 	mov.w	sl, #0
 8015f40:	f04f 0b00 	mov.w	fp, #0
 8015f44:	6013      	str	r3, [r2, #0]
 8015f46:	e76a      	b.n	8015e1e <_strtod_l+0x42e>
 8015f48:	080189df 	.word	0x080189df
 8015f4c:	080189e4 	.word	0x080189e4
 8015f50:	080189d6 	.word	0x080189d6
 8015f54:	080189d9 	.word	0x080189d9
 8015f58:	08018d5b 	.word	0x08018d5b
 8015f5c:	08018c58 	.word	0x08018c58
 8015f60:	08018c30 	.word	0x08018c30
 8015f64:	7ca00000 	.word	0x7ca00000
 8015f68:	7ff00000 	.word	0x7ff00000
 8015f6c:	7fefffff 	.word	0x7fefffff
 8015f70:	f012 0110 	ands.w	r1, r2, #16
 8015f74:	bf18      	it	ne
 8015f76:	216a      	movne	r1, #106	@ 0x6a
 8015f78:	9106      	str	r1, [sp, #24]
 8015f7a:	ec4b ab17 	vmov	d7, sl, fp
 8015f7e:	49b0      	ldr	r1, [pc, #704]	@ (8016240 <_strtod_l+0x850>)
 8015f80:	2000      	movs	r0, #0
 8015f82:	07d6      	lsls	r6, r2, #31
 8015f84:	d504      	bpl.n	8015f90 <_strtod_l+0x5a0>
 8015f86:	ed91 6b00 	vldr	d6, [r1]
 8015f8a:	2001      	movs	r0, #1
 8015f8c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015f90:	1052      	asrs	r2, r2, #1
 8015f92:	f101 0108 	add.w	r1, r1, #8
 8015f96:	d1f4      	bne.n	8015f82 <_strtod_l+0x592>
 8015f98:	b108      	cbz	r0, 8015f9e <_strtod_l+0x5ae>
 8015f9a:	ec5b ab17 	vmov	sl, fp, d7
 8015f9e:	9a06      	ldr	r2, [sp, #24]
 8015fa0:	b1b2      	cbz	r2, 8015fd0 <_strtod_l+0x5e0>
 8015fa2:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8015fa6:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8015faa:	2a00      	cmp	r2, #0
 8015fac:	4658      	mov	r0, fp
 8015fae:	dd0f      	ble.n	8015fd0 <_strtod_l+0x5e0>
 8015fb0:	2a1f      	cmp	r2, #31
 8015fb2:	dd55      	ble.n	8016060 <_strtod_l+0x670>
 8015fb4:	2a34      	cmp	r2, #52	@ 0x34
 8015fb6:	bfde      	ittt	le
 8015fb8:	f04f 32ff 	movle.w	r2, #4294967295
 8015fbc:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8015fc0:	408a      	lslle	r2, r1
 8015fc2:	f04f 0a00 	mov.w	sl, #0
 8015fc6:	bfcc      	ite	gt
 8015fc8:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8015fcc:	ea02 0b00 	andle.w	fp, r2, r0
 8015fd0:	ec4b ab17 	vmov	d7, sl, fp
 8015fd4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fdc:	d0a8      	beq.n	8015f30 <_strtod_l+0x540>
 8015fde:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8015fe0:	9805      	ldr	r0, [sp, #20]
 8015fe2:	f8cd 9000 	str.w	r9, [sp]
 8015fe6:	462a      	mov	r2, r5
 8015fe8:	f001 f9ca 	bl	8017380 <__s2b>
 8015fec:	9007      	str	r0, [sp, #28]
 8015fee:	2800      	cmp	r0, #0
 8015ff0:	f43f af0a 	beq.w	8015e08 <_strtod_l+0x418>
 8015ff4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015ff6:	1b3f      	subs	r7, r7, r4
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	bfb4      	ite	lt
 8015ffc:	463b      	movlt	r3, r7
 8015ffe:	2300      	movge	r3, #0
 8016000:	930a      	str	r3, [sp, #40]	@ 0x28
 8016002:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016004:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8016230 <_strtod_l+0x840>
 8016008:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801600c:	2400      	movs	r4, #0
 801600e:	930d      	str	r3, [sp, #52]	@ 0x34
 8016010:	4625      	mov	r5, r4
 8016012:	9b07      	ldr	r3, [sp, #28]
 8016014:	9805      	ldr	r0, [sp, #20]
 8016016:	6859      	ldr	r1, [r3, #4]
 8016018:	f001 f90a 	bl	8017230 <_Balloc>
 801601c:	4606      	mov	r6, r0
 801601e:	2800      	cmp	r0, #0
 8016020:	f43f aef6 	beq.w	8015e10 <_strtod_l+0x420>
 8016024:	9b07      	ldr	r3, [sp, #28]
 8016026:	691a      	ldr	r2, [r3, #16]
 8016028:	ec4b ab19 	vmov	d9, sl, fp
 801602c:	3202      	adds	r2, #2
 801602e:	f103 010c 	add.w	r1, r3, #12
 8016032:	0092      	lsls	r2, r2, #2
 8016034:	300c      	adds	r0, #12
 8016036:	f000 fca0 	bl	801697a <memcpy>
 801603a:	eeb0 0b49 	vmov.f64	d0, d9
 801603e:	9805      	ldr	r0, [sp, #20]
 8016040:	aa14      	add	r2, sp, #80	@ 0x50
 8016042:	a913      	add	r1, sp, #76	@ 0x4c
 8016044:	f001 fcd8 	bl	80179f8 <__d2b>
 8016048:	9012      	str	r0, [sp, #72]	@ 0x48
 801604a:	2800      	cmp	r0, #0
 801604c:	f43f aee0 	beq.w	8015e10 <_strtod_l+0x420>
 8016050:	9805      	ldr	r0, [sp, #20]
 8016052:	2101      	movs	r1, #1
 8016054:	f001 fa2a 	bl	80174ac <__i2b>
 8016058:	4605      	mov	r5, r0
 801605a:	b940      	cbnz	r0, 801606e <_strtod_l+0x67e>
 801605c:	2500      	movs	r5, #0
 801605e:	e6d7      	b.n	8015e10 <_strtod_l+0x420>
 8016060:	f04f 31ff 	mov.w	r1, #4294967295
 8016064:	fa01 f202 	lsl.w	r2, r1, r2
 8016068:	ea02 0a0a 	and.w	sl, r2, sl
 801606c:	e7b0      	b.n	8015fd0 <_strtod_l+0x5e0>
 801606e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8016070:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8016072:	2f00      	cmp	r7, #0
 8016074:	bfab      	itete	ge
 8016076:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8016078:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 801607a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 801607e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8016082:	bfac      	ite	ge
 8016084:	eb07 0903 	addge.w	r9, r7, r3
 8016088:	eba3 0807 	sublt.w	r8, r3, r7
 801608c:	9b06      	ldr	r3, [sp, #24]
 801608e:	1aff      	subs	r7, r7, r3
 8016090:	4417      	add	r7, r2
 8016092:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8016096:	4a6b      	ldr	r2, [pc, #428]	@ (8016244 <_strtod_l+0x854>)
 8016098:	3f01      	subs	r7, #1
 801609a:	4297      	cmp	r7, r2
 801609c:	da51      	bge.n	8016142 <_strtod_l+0x752>
 801609e:	1bd1      	subs	r1, r2, r7
 80160a0:	291f      	cmp	r1, #31
 80160a2:	eba3 0301 	sub.w	r3, r3, r1
 80160a6:	f04f 0201 	mov.w	r2, #1
 80160aa:	dc3e      	bgt.n	801612a <_strtod_l+0x73a>
 80160ac:	408a      	lsls	r2, r1
 80160ae:	920c      	str	r2, [sp, #48]	@ 0x30
 80160b0:	2200      	movs	r2, #0
 80160b2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80160b4:	eb09 0703 	add.w	r7, r9, r3
 80160b8:	4498      	add	r8, r3
 80160ba:	9b06      	ldr	r3, [sp, #24]
 80160bc:	45b9      	cmp	r9, r7
 80160be:	4498      	add	r8, r3
 80160c0:	464b      	mov	r3, r9
 80160c2:	bfa8      	it	ge
 80160c4:	463b      	movge	r3, r7
 80160c6:	4543      	cmp	r3, r8
 80160c8:	bfa8      	it	ge
 80160ca:	4643      	movge	r3, r8
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	bfc2      	ittt	gt
 80160d0:	1aff      	subgt	r7, r7, r3
 80160d2:	eba8 0803 	subgt.w	r8, r8, r3
 80160d6:	eba9 0903 	subgt.w	r9, r9, r3
 80160da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80160dc:	2b00      	cmp	r3, #0
 80160de:	dd16      	ble.n	801610e <_strtod_l+0x71e>
 80160e0:	4629      	mov	r1, r5
 80160e2:	9805      	ldr	r0, [sp, #20]
 80160e4:	461a      	mov	r2, r3
 80160e6:	f001 faa1 	bl	801762c <__pow5mult>
 80160ea:	4605      	mov	r5, r0
 80160ec:	2800      	cmp	r0, #0
 80160ee:	d0b5      	beq.n	801605c <_strtod_l+0x66c>
 80160f0:	4601      	mov	r1, r0
 80160f2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80160f4:	9805      	ldr	r0, [sp, #20]
 80160f6:	f001 f9ef 	bl	80174d8 <__multiply>
 80160fa:	900f      	str	r0, [sp, #60]	@ 0x3c
 80160fc:	2800      	cmp	r0, #0
 80160fe:	f43f ae87 	beq.w	8015e10 <_strtod_l+0x420>
 8016102:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016104:	9805      	ldr	r0, [sp, #20]
 8016106:	f001 f8d3 	bl	80172b0 <_Bfree>
 801610a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801610c:	9312      	str	r3, [sp, #72]	@ 0x48
 801610e:	2f00      	cmp	r7, #0
 8016110:	dc1b      	bgt.n	801614a <_strtod_l+0x75a>
 8016112:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016114:	2b00      	cmp	r3, #0
 8016116:	dd21      	ble.n	801615c <_strtod_l+0x76c>
 8016118:	4631      	mov	r1, r6
 801611a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801611c:	9805      	ldr	r0, [sp, #20]
 801611e:	f001 fa85 	bl	801762c <__pow5mult>
 8016122:	4606      	mov	r6, r0
 8016124:	b9d0      	cbnz	r0, 801615c <_strtod_l+0x76c>
 8016126:	2600      	movs	r6, #0
 8016128:	e672      	b.n	8015e10 <_strtod_l+0x420>
 801612a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 801612e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8016132:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8016136:	37e2      	adds	r7, #226	@ 0xe2
 8016138:	fa02 f107 	lsl.w	r1, r2, r7
 801613c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801613e:	920c      	str	r2, [sp, #48]	@ 0x30
 8016140:	e7b8      	b.n	80160b4 <_strtod_l+0x6c4>
 8016142:	2200      	movs	r2, #0
 8016144:	920b      	str	r2, [sp, #44]	@ 0x2c
 8016146:	2201      	movs	r2, #1
 8016148:	e7f9      	b.n	801613e <_strtod_l+0x74e>
 801614a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801614c:	9805      	ldr	r0, [sp, #20]
 801614e:	463a      	mov	r2, r7
 8016150:	f001 fac6 	bl	80176e0 <__lshift>
 8016154:	9012      	str	r0, [sp, #72]	@ 0x48
 8016156:	2800      	cmp	r0, #0
 8016158:	d1db      	bne.n	8016112 <_strtod_l+0x722>
 801615a:	e659      	b.n	8015e10 <_strtod_l+0x420>
 801615c:	f1b8 0f00 	cmp.w	r8, #0
 8016160:	dd07      	ble.n	8016172 <_strtod_l+0x782>
 8016162:	4631      	mov	r1, r6
 8016164:	9805      	ldr	r0, [sp, #20]
 8016166:	4642      	mov	r2, r8
 8016168:	f001 faba 	bl	80176e0 <__lshift>
 801616c:	4606      	mov	r6, r0
 801616e:	2800      	cmp	r0, #0
 8016170:	d0d9      	beq.n	8016126 <_strtod_l+0x736>
 8016172:	f1b9 0f00 	cmp.w	r9, #0
 8016176:	dd08      	ble.n	801618a <_strtod_l+0x79a>
 8016178:	4629      	mov	r1, r5
 801617a:	9805      	ldr	r0, [sp, #20]
 801617c:	464a      	mov	r2, r9
 801617e:	f001 faaf 	bl	80176e0 <__lshift>
 8016182:	4605      	mov	r5, r0
 8016184:	2800      	cmp	r0, #0
 8016186:	f43f ae43 	beq.w	8015e10 <_strtod_l+0x420>
 801618a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801618c:	9805      	ldr	r0, [sp, #20]
 801618e:	4632      	mov	r2, r6
 8016190:	f001 fb2e 	bl	80177f0 <__mdiff>
 8016194:	4604      	mov	r4, r0
 8016196:	2800      	cmp	r0, #0
 8016198:	f43f ae3a 	beq.w	8015e10 <_strtod_l+0x420>
 801619c:	2300      	movs	r3, #0
 801619e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80161a2:	60c3      	str	r3, [r0, #12]
 80161a4:	4629      	mov	r1, r5
 80161a6:	f001 fb07 	bl	80177b8 <__mcmp>
 80161aa:	2800      	cmp	r0, #0
 80161ac:	da4e      	bge.n	801624c <_strtod_l+0x85c>
 80161ae:	ea58 080a 	orrs.w	r8, r8, sl
 80161b2:	d174      	bne.n	801629e <_strtod_l+0x8ae>
 80161b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	d170      	bne.n	801629e <_strtod_l+0x8ae>
 80161bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80161c0:	0d1b      	lsrs	r3, r3, #20
 80161c2:	051b      	lsls	r3, r3, #20
 80161c4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80161c8:	d969      	bls.n	801629e <_strtod_l+0x8ae>
 80161ca:	6963      	ldr	r3, [r4, #20]
 80161cc:	b913      	cbnz	r3, 80161d4 <_strtod_l+0x7e4>
 80161ce:	6923      	ldr	r3, [r4, #16]
 80161d0:	2b01      	cmp	r3, #1
 80161d2:	dd64      	ble.n	801629e <_strtod_l+0x8ae>
 80161d4:	4621      	mov	r1, r4
 80161d6:	2201      	movs	r2, #1
 80161d8:	9805      	ldr	r0, [sp, #20]
 80161da:	f001 fa81 	bl	80176e0 <__lshift>
 80161de:	4629      	mov	r1, r5
 80161e0:	4604      	mov	r4, r0
 80161e2:	f001 fae9 	bl	80177b8 <__mcmp>
 80161e6:	2800      	cmp	r0, #0
 80161e8:	dd59      	ble.n	801629e <_strtod_l+0x8ae>
 80161ea:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80161ee:	9a06      	ldr	r2, [sp, #24]
 80161f0:	0d1b      	lsrs	r3, r3, #20
 80161f2:	051b      	lsls	r3, r3, #20
 80161f4:	2a00      	cmp	r2, #0
 80161f6:	d070      	beq.n	80162da <_strtod_l+0x8ea>
 80161f8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80161fc:	d86d      	bhi.n	80162da <_strtod_l+0x8ea>
 80161fe:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8016202:	f67f ae99 	bls.w	8015f38 <_strtod_l+0x548>
 8016206:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8016238 <_strtod_l+0x848>
 801620a:	ec4b ab16 	vmov	d6, sl, fp
 801620e:	4b0e      	ldr	r3, [pc, #56]	@ (8016248 <_strtod_l+0x858>)
 8016210:	ee26 7b07 	vmul.f64	d7, d6, d7
 8016214:	ee17 2a90 	vmov	r2, s15
 8016218:	4013      	ands	r3, r2
 801621a:	ec5b ab17 	vmov	sl, fp, d7
 801621e:	2b00      	cmp	r3, #0
 8016220:	f47f ae01 	bne.w	8015e26 <_strtod_l+0x436>
 8016224:	9a05      	ldr	r2, [sp, #20]
 8016226:	2322      	movs	r3, #34	@ 0x22
 8016228:	6013      	str	r3, [r2, #0]
 801622a:	e5fc      	b.n	8015e26 <_strtod_l+0x436>
 801622c:	f3af 8000 	nop.w
 8016230:	ffc00000 	.word	0xffc00000
 8016234:	41dfffff 	.word	0x41dfffff
 8016238:	00000000 	.word	0x00000000
 801623c:	39500000 	.word	0x39500000
 8016240:	08018a10 	.word	0x08018a10
 8016244:	fffffc02 	.word	0xfffffc02
 8016248:	7ff00000 	.word	0x7ff00000
 801624c:	46d9      	mov	r9, fp
 801624e:	d15d      	bne.n	801630c <_strtod_l+0x91c>
 8016250:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016254:	f1b8 0f00 	cmp.w	r8, #0
 8016258:	d02a      	beq.n	80162b0 <_strtod_l+0x8c0>
 801625a:	4aab      	ldr	r2, [pc, #684]	@ (8016508 <_strtod_l+0xb18>)
 801625c:	4293      	cmp	r3, r2
 801625e:	d12a      	bne.n	80162b6 <_strtod_l+0x8c6>
 8016260:	9b06      	ldr	r3, [sp, #24]
 8016262:	4652      	mov	r2, sl
 8016264:	b1fb      	cbz	r3, 80162a6 <_strtod_l+0x8b6>
 8016266:	4ba9      	ldr	r3, [pc, #676]	@ (801650c <_strtod_l+0xb1c>)
 8016268:	ea0b 0303 	and.w	r3, fp, r3
 801626c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8016270:	f04f 31ff 	mov.w	r1, #4294967295
 8016274:	d81a      	bhi.n	80162ac <_strtod_l+0x8bc>
 8016276:	0d1b      	lsrs	r3, r3, #20
 8016278:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801627c:	fa01 f303 	lsl.w	r3, r1, r3
 8016280:	429a      	cmp	r2, r3
 8016282:	d118      	bne.n	80162b6 <_strtod_l+0x8c6>
 8016284:	4ba2      	ldr	r3, [pc, #648]	@ (8016510 <_strtod_l+0xb20>)
 8016286:	4599      	cmp	r9, r3
 8016288:	d102      	bne.n	8016290 <_strtod_l+0x8a0>
 801628a:	3201      	adds	r2, #1
 801628c:	f43f adc0 	beq.w	8015e10 <_strtod_l+0x420>
 8016290:	4b9e      	ldr	r3, [pc, #632]	@ (801650c <_strtod_l+0xb1c>)
 8016292:	ea09 0303 	and.w	r3, r9, r3
 8016296:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 801629a:	f04f 0a00 	mov.w	sl, #0
 801629e:	9b06      	ldr	r3, [sp, #24]
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d1b0      	bne.n	8016206 <_strtod_l+0x816>
 80162a4:	e5bf      	b.n	8015e26 <_strtod_l+0x436>
 80162a6:	f04f 33ff 	mov.w	r3, #4294967295
 80162aa:	e7e9      	b.n	8016280 <_strtod_l+0x890>
 80162ac:	460b      	mov	r3, r1
 80162ae:	e7e7      	b.n	8016280 <_strtod_l+0x890>
 80162b0:	ea53 030a 	orrs.w	r3, r3, sl
 80162b4:	d099      	beq.n	80161ea <_strtod_l+0x7fa>
 80162b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80162b8:	b1c3      	cbz	r3, 80162ec <_strtod_l+0x8fc>
 80162ba:	ea13 0f09 	tst.w	r3, r9
 80162be:	d0ee      	beq.n	801629e <_strtod_l+0x8ae>
 80162c0:	9a06      	ldr	r2, [sp, #24]
 80162c2:	4650      	mov	r0, sl
 80162c4:	4659      	mov	r1, fp
 80162c6:	f1b8 0f00 	cmp.w	r8, #0
 80162ca:	d013      	beq.n	80162f4 <_strtod_l+0x904>
 80162cc:	f7ff fb73 	bl	80159b6 <sulp>
 80162d0:	ee39 7b00 	vadd.f64	d7, d9, d0
 80162d4:	ec5b ab17 	vmov	sl, fp, d7
 80162d8:	e7e1      	b.n	801629e <_strtod_l+0x8ae>
 80162da:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80162de:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80162e2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80162e6:	f04f 3aff 	mov.w	sl, #4294967295
 80162ea:	e7d8      	b.n	801629e <_strtod_l+0x8ae>
 80162ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80162ee:	ea13 0f0a 	tst.w	r3, sl
 80162f2:	e7e4      	b.n	80162be <_strtod_l+0x8ce>
 80162f4:	f7ff fb5f 	bl	80159b6 <sulp>
 80162f8:	ee39 0b40 	vsub.f64	d0, d9, d0
 80162fc:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8016300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016304:	ec5b ab10 	vmov	sl, fp, d0
 8016308:	d1c9      	bne.n	801629e <_strtod_l+0x8ae>
 801630a:	e615      	b.n	8015f38 <_strtod_l+0x548>
 801630c:	4629      	mov	r1, r5
 801630e:	4620      	mov	r0, r4
 8016310:	f001 fbca 	bl	8017aa8 <__ratio>
 8016314:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8016318:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801631c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016320:	d85d      	bhi.n	80163de <_strtod_l+0x9ee>
 8016322:	f1b8 0f00 	cmp.w	r8, #0
 8016326:	d164      	bne.n	80163f2 <_strtod_l+0xa02>
 8016328:	f1ba 0f00 	cmp.w	sl, #0
 801632c:	d14b      	bne.n	80163c6 <_strtod_l+0x9d6>
 801632e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016332:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8016336:	2b00      	cmp	r3, #0
 8016338:	d160      	bne.n	80163fc <_strtod_l+0xa0c>
 801633a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 801633e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8016342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016346:	d401      	bmi.n	801634c <_strtod_l+0x95c>
 8016348:	ee20 8b08 	vmul.f64	d8, d0, d8
 801634c:	eeb1 ab48 	vneg.f64	d10, d8
 8016350:	486e      	ldr	r0, [pc, #440]	@ (801650c <_strtod_l+0xb1c>)
 8016352:	4970      	ldr	r1, [pc, #448]	@ (8016514 <_strtod_l+0xb24>)
 8016354:	ea09 0700 	and.w	r7, r9, r0
 8016358:	428f      	cmp	r7, r1
 801635a:	ec53 2b1a 	vmov	r2, r3, d10
 801635e:	d17d      	bne.n	801645c <_strtod_l+0xa6c>
 8016360:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8016364:	ec4b ab1c 	vmov	d12, sl, fp
 8016368:	eeb0 0b4c 	vmov.f64	d0, d12
 801636c:	f001 fad4 	bl	8017918 <__ulp>
 8016370:	4866      	ldr	r0, [pc, #408]	@ (801650c <_strtod_l+0xb1c>)
 8016372:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8016376:	ee1c 3a90 	vmov	r3, s25
 801637a:	4a67      	ldr	r2, [pc, #412]	@ (8016518 <_strtod_l+0xb28>)
 801637c:	ea03 0100 	and.w	r1, r3, r0
 8016380:	4291      	cmp	r1, r2
 8016382:	ec5b ab1c 	vmov	sl, fp, d12
 8016386:	d93c      	bls.n	8016402 <_strtod_l+0xa12>
 8016388:	ee19 2a90 	vmov	r2, s19
 801638c:	4b60      	ldr	r3, [pc, #384]	@ (8016510 <_strtod_l+0xb20>)
 801638e:	429a      	cmp	r2, r3
 8016390:	d104      	bne.n	801639c <_strtod_l+0x9ac>
 8016392:	ee19 3a10 	vmov	r3, s18
 8016396:	3301      	adds	r3, #1
 8016398:	f43f ad3a 	beq.w	8015e10 <_strtod_l+0x420>
 801639c:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8016510 <_strtod_l+0xb20>
 80163a0:	f04f 3aff 	mov.w	sl, #4294967295
 80163a4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80163a6:	9805      	ldr	r0, [sp, #20]
 80163a8:	f000 ff82 	bl	80172b0 <_Bfree>
 80163ac:	9805      	ldr	r0, [sp, #20]
 80163ae:	4631      	mov	r1, r6
 80163b0:	f000 ff7e 	bl	80172b0 <_Bfree>
 80163b4:	9805      	ldr	r0, [sp, #20]
 80163b6:	4629      	mov	r1, r5
 80163b8:	f000 ff7a 	bl	80172b0 <_Bfree>
 80163bc:	9805      	ldr	r0, [sp, #20]
 80163be:	4621      	mov	r1, r4
 80163c0:	f000 ff76 	bl	80172b0 <_Bfree>
 80163c4:	e625      	b.n	8016012 <_strtod_l+0x622>
 80163c6:	f1ba 0f01 	cmp.w	sl, #1
 80163ca:	d103      	bne.n	80163d4 <_strtod_l+0x9e4>
 80163cc:	f1bb 0f00 	cmp.w	fp, #0
 80163d0:	f43f adb2 	beq.w	8015f38 <_strtod_l+0x548>
 80163d4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80163d8:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80163dc:	e7b8      	b.n	8016350 <_strtod_l+0x960>
 80163de:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80163e2:	ee20 8b08 	vmul.f64	d8, d0, d8
 80163e6:	f1b8 0f00 	cmp.w	r8, #0
 80163ea:	d0af      	beq.n	801634c <_strtod_l+0x95c>
 80163ec:	eeb0 ab48 	vmov.f64	d10, d8
 80163f0:	e7ae      	b.n	8016350 <_strtod_l+0x960>
 80163f2:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 80163f6:	eeb0 8b4a 	vmov.f64	d8, d10
 80163fa:	e7a9      	b.n	8016350 <_strtod_l+0x960>
 80163fc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8016400:	e7a6      	b.n	8016350 <_strtod_l+0x960>
 8016402:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8016406:	9b06      	ldr	r3, [sp, #24]
 8016408:	46d9      	mov	r9, fp
 801640a:	2b00      	cmp	r3, #0
 801640c:	d1ca      	bne.n	80163a4 <_strtod_l+0x9b4>
 801640e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016412:	0d1b      	lsrs	r3, r3, #20
 8016414:	051b      	lsls	r3, r3, #20
 8016416:	429f      	cmp	r7, r3
 8016418:	d1c4      	bne.n	80163a4 <_strtod_l+0x9b4>
 801641a:	ec51 0b18 	vmov	r0, r1, d8
 801641e:	f7ea f9eb 	bl	80007f8 <__aeabi_d2lz>
 8016422:	f7ea f953 	bl	80006cc <__aeabi_l2d>
 8016426:	f3cb 0913 	ubfx	r9, fp, #0, #20
 801642a:	ec41 0b17 	vmov	d7, r0, r1
 801642e:	ea49 090a 	orr.w	r9, r9, sl
 8016432:	ea59 0908 	orrs.w	r9, r9, r8
 8016436:	ee38 8b47 	vsub.f64	d8, d8, d7
 801643a:	d03c      	beq.n	80164b6 <_strtod_l+0xac6>
 801643c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 80164f0 <_strtod_l+0xb00>
 8016440:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8016444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016448:	f53f aced 	bmi.w	8015e26 <_strtod_l+0x436>
 801644c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80164f8 <_strtod_l+0xb08>
 8016450:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8016454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016458:	dda4      	ble.n	80163a4 <_strtod_l+0x9b4>
 801645a:	e4e4      	b.n	8015e26 <_strtod_l+0x436>
 801645c:	9906      	ldr	r1, [sp, #24]
 801645e:	b1e1      	cbz	r1, 801649a <_strtod_l+0xaaa>
 8016460:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8016464:	d819      	bhi.n	801649a <_strtod_l+0xaaa>
 8016466:	eeb4 8bcb 	vcmpe.f64	d8, d11
 801646a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801646e:	d811      	bhi.n	8016494 <_strtod_l+0xaa4>
 8016470:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8016474:	ee18 3a10 	vmov	r3, s16
 8016478:	2b01      	cmp	r3, #1
 801647a:	bf38      	it	cc
 801647c:	2301      	movcc	r3, #1
 801647e:	ee08 3a10 	vmov	s16, r3
 8016482:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8016486:	f1b8 0f00 	cmp.w	r8, #0
 801648a:	d111      	bne.n	80164b0 <_strtod_l+0xac0>
 801648c:	eeb1 7b48 	vneg.f64	d7, d8
 8016490:	ec53 2b17 	vmov	r2, r3, d7
 8016494:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8016498:	1bcb      	subs	r3, r1, r7
 801649a:	eeb0 0b49 	vmov.f64	d0, d9
 801649e:	ec43 2b1a 	vmov	d10, r2, r3
 80164a2:	f001 fa39 	bl	8017918 <__ulp>
 80164a6:	eeaa 9b00 	vfma.f64	d9, d10, d0
 80164aa:	ec5b ab19 	vmov	sl, fp, d9
 80164ae:	e7aa      	b.n	8016406 <_strtod_l+0xa16>
 80164b0:	eeb0 7b48 	vmov.f64	d7, d8
 80164b4:	e7ec      	b.n	8016490 <_strtod_l+0xaa0>
 80164b6:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8016500 <_strtod_l+0xb10>
 80164ba:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80164be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164c2:	f57f af6f 	bpl.w	80163a4 <_strtod_l+0x9b4>
 80164c6:	e4ae      	b.n	8015e26 <_strtod_l+0x436>
 80164c8:	2300      	movs	r3, #0
 80164ca:	9308      	str	r3, [sp, #32]
 80164cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80164ce:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80164d0:	6013      	str	r3, [r2, #0]
 80164d2:	f7ff bacc 	b.w	8015a6e <_strtod_l+0x7e>
 80164d6:	2a65      	cmp	r2, #101	@ 0x65
 80164d8:	f43f abbc 	beq.w	8015c54 <_strtod_l+0x264>
 80164dc:	2a45      	cmp	r2, #69	@ 0x45
 80164de:	f43f abb9 	beq.w	8015c54 <_strtod_l+0x264>
 80164e2:	2301      	movs	r3, #1
 80164e4:	9306      	str	r3, [sp, #24]
 80164e6:	f7ff bbf0 	b.w	8015cca <_strtod_l+0x2da>
 80164ea:	bf00      	nop
 80164ec:	f3af 8000 	nop.w
 80164f0:	94a03595 	.word	0x94a03595
 80164f4:	3fdfffff 	.word	0x3fdfffff
 80164f8:	35afe535 	.word	0x35afe535
 80164fc:	3fe00000 	.word	0x3fe00000
 8016500:	94a03595 	.word	0x94a03595
 8016504:	3fcfffff 	.word	0x3fcfffff
 8016508:	000fffff 	.word	0x000fffff
 801650c:	7ff00000 	.word	0x7ff00000
 8016510:	7fefffff 	.word	0x7fefffff
 8016514:	7fe00000 	.word	0x7fe00000
 8016518:	7c9fffff 	.word	0x7c9fffff

0801651c <strtod>:
 801651c:	460a      	mov	r2, r1
 801651e:	4601      	mov	r1, r0
 8016520:	4802      	ldr	r0, [pc, #8]	@ (801652c <strtod+0x10>)
 8016522:	4b03      	ldr	r3, [pc, #12]	@ (8016530 <strtod+0x14>)
 8016524:	6800      	ldr	r0, [r0, #0]
 8016526:	f7ff ba63 	b.w	80159f0 <_strtod_l>
 801652a:	bf00      	nop
 801652c:	24000240 	.word	0x24000240
 8016530:	240000d4 	.word	0x240000d4

08016534 <_strtol_l.constprop.0>:
 8016534:	2b24      	cmp	r3, #36	@ 0x24
 8016536:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801653a:	4686      	mov	lr, r0
 801653c:	4690      	mov	r8, r2
 801653e:	d801      	bhi.n	8016544 <_strtol_l.constprop.0+0x10>
 8016540:	2b01      	cmp	r3, #1
 8016542:	d106      	bne.n	8016552 <_strtol_l.constprop.0+0x1e>
 8016544:	f000 f9ec 	bl	8016920 <__errno>
 8016548:	2316      	movs	r3, #22
 801654a:	6003      	str	r3, [r0, #0]
 801654c:	2000      	movs	r0, #0
 801654e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016552:	4834      	ldr	r0, [pc, #208]	@ (8016624 <_strtol_l.constprop.0+0xf0>)
 8016554:	460d      	mov	r5, r1
 8016556:	462a      	mov	r2, r5
 8016558:	f815 4b01 	ldrb.w	r4, [r5], #1
 801655c:	5d06      	ldrb	r6, [r0, r4]
 801655e:	f016 0608 	ands.w	r6, r6, #8
 8016562:	d1f8      	bne.n	8016556 <_strtol_l.constprop.0+0x22>
 8016564:	2c2d      	cmp	r4, #45	@ 0x2d
 8016566:	d12d      	bne.n	80165c4 <_strtol_l.constprop.0+0x90>
 8016568:	782c      	ldrb	r4, [r5, #0]
 801656a:	2601      	movs	r6, #1
 801656c:	1c95      	adds	r5, r2, #2
 801656e:	f033 0210 	bics.w	r2, r3, #16
 8016572:	d109      	bne.n	8016588 <_strtol_l.constprop.0+0x54>
 8016574:	2c30      	cmp	r4, #48	@ 0x30
 8016576:	d12a      	bne.n	80165ce <_strtol_l.constprop.0+0x9a>
 8016578:	782a      	ldrb	r2, [r5, #0]
 801657a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801657e:	2a58      	cmp	r2, #88	@ 0x58
 8016580:	d125      	bne.n	80165ce <_strtol_l.constprop.0+0x9a>
 8016582:	786c      	ldrb	r4, [r5, #1]
 8016584:	2310      	movs	r3, #16
 8016586:	3502      	adds	r5, #2
 8016588:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801658c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016590:	2200      	movs	r2, #0
 8016592:	fbbc f9f3 	udiv	r9, ip, r3
 8016596:	4610      	mov	r0, r2
 8016598:	fb03 ca19 	mls	sl, r3, r9, ip
 801659c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80165a0:	2f09      	cmp	r7, #9
 80165a2:	d81b      	bhi.n	80165dc <_strtol_l.constprop.0+0xa8>
 80165a4:	463c      	mov	r4, r7
 80165a6:	42a3      	cmp	r3, r4
 80165a8:	dd27      	ble.n	80165fa <_strtol_l.constprop.0+0xc6>
 80165aa:	1c57      	adds	r7, r2, #1
 80165ac:	d007      	beq.n	80165be <_strtol_l.constprop.0+0x8a>
 80165ae:	4581      	cmp	r9, r0
 80165b0:	d320      	bcc.n	80165f4 <_strtol_l.constprop.0+0xc0>
 80165b2:	d101      	bne.n	80165b8 <_strtol_l.constprop.0+0x84>
 80165b4:	45a2      	cmp	sl, r4
 80165b6:	db1d      	blt.n	80165f4 <_strtol_l.constprop.0+0xc0>
 80165b8:	fb00 4003 	mla	r0, r0, r3, r4
 80165bc:	2201      	movs	r2, #1
 80165be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80165c2:	e7eb      	b.n	801659c <_strtol_l.constprop.0+0x68>
 80165c4:	2c2b      	cmp	r4, #43	@ 0x2b
 80165c6:	bf04      	itt	eq
 80165c8:	782c      	ldrbeq	r4, [r5, #0]
 80165ca:	1c95      	addeq	r5, r2, #2
 80165cc:	e7cf      	b.n	801656e <_strtol_l.constprop.0+0x3a>
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d1da      	bne.n	8016588 <_strtol_l.constprop.0+0x54>
 80165d2:	2c30      	cmp	r4, #48	@ 0x30
 80165d4:	bf0c      	ite	eq
 80165d6:	2308      	moveq	r3, #8
 80165d8:	230a      	movne	r3, #10
 80165da:	e7d5      	b.n	8016588 <_strtol_l.constprop.0+0x54>
 80165dc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80165e0:	2f19      	cmp	r7, #25
 80165e2:	d801      	bhi.n	80165e8 <_strtol_l.constprop.0+0xb4>
 80165e4:	3c37      	subs	r4, #55	@ 0x37
 80165e6:	e7de      	b.n	80165a6 <_strtol_l.constprop.0+0x72>
 80165e8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80165ec:	2f19      	cmp	r7, #25
 80165ee:	d804      	bhi.n	80165fa <_strtol_l.constprop.0+0xc6>
 80165f0:	3c57      	subs	r4, #87	@ 0x57
 80165f2:	e7d8      	b.n	80165a6 <_strtol_l.constprop.0+0x72>
 80165f4:	f04f 32ff 	mov.w	r2, #4294967295
 80165f8:	e7e1      	b.n	80165be <_strtol_l.constprop.0+0x8a>
 80165fa:	1c53      	adds	r3, r2, #1
 80165fc:	d108      	bne.n	8016610 <_strtol_l.constprop.0+0xdc>
 80165fe:	2322      	movs	r3, #34	@ 0x22
 8016600:	f8ce 3000 	str.w	r3, [lr]
 8016604:	4660      	mov	r0, ip
 8016606:	f1b8 0f00 	cmp.w	r8, #0
 801660a:	d0a0      	beq.n	801654e <_strtol_l.constprop.0+0x1a>
 801660c:	1e69      	subs	r1, r5, #1
 801660e:	e006      	b.n	801661e <_strtol_l.constprop.0+0xea>
 8016610:	b106      	cbz	r6, 8016614 <_strtol_l.constprop.0+0xe0>
 8016612:	4240      	negs	r0, r0
 8016614:	f1b8 0f00 	cmp.w	r8, #0
 8016618:	d099      	beq.n	801654e <_strtol_l.constprop.0+0x1a>
 801661a:	2a00      	cmp	r2, #0
 801661c:	d1f6      	bne.n	801660c <_strtol_l.constprop.0+0xd8>
 801661e:	f8c8 1000 	str.w	r1, [r8]
 8016622:	e794      	b.n	801654e <_strtol_l.constprop.0+0x1a>
 8016624:	08018a39 	.word	0x08018a39

08016628 <strtol>:
 8016628:	4613      	mov	r3, r2
 801662a:	460a      	mov	r2, r1
 801662c:	4601      	mov	r1, r0
 801662e:	4802      	ldr	r0, [pc, #8]	@ (8016638 <strtol+0x10>)
 8016630:	6800      	ldr	r0, [r0, #0]
 8016632:	f7ff bf7f 	b.w	8016534 <_strtol_l.constprop.0>
 8016636:	bf00      	nop
 8016638:	24000240 	.word	0x24000240

0801663c <std>:
 801663c:	2300      	movs	r3, #0
 801663e:	b510      	push	{r4, lr}
 8016640:	4604      	mov	r4, r0
 8016642:	e9c0 3300 	strd	r3, r3, [r0]
 8016646:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801664a:	6083      	str	r3, [r0, #8]
 801664c:	8181      	strh	r1, [r0, #12]
 801664e:	6643      	str	r3, [r0, #100]	@ 0x64
 8016650:	81c2      	strh	r2, [r0, #14]
 8016652:	6183      	str	r3, [r0, #24]
 8016654:	4619      	mov	r1, r3
 8016656:	2208      	movs	r2, #8
 8016658:	305c      	adds	r0, #92	@ 0x5c
 801665a:	f000 f8f4 	bl	8016846 <memset>
 801665e:	4b0d      	ldr	r3, [pc, #52]	@ (8016694 <std+0x58>)
 8016660:	6263      	str	r3, [r4, #36]	@ 0x24
 8016662:	4b0d      	ldr	r3, [pc, #52]	@ (8016698 <std+0x5c>)
 8016664:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016666:	4b0d      	ldr	r3, [pc, #52]	@ (801669c <std+0x60>)
 8016668:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801666a:	4b0d      	ldr	r3, [pc, #52]	@ (80166a0 <std+0x64>)
 801666c:	6323      	str	r3, [r4, #48]	@ 0x30
 801666e:	4b0d      	ldr	r3, [pc, #52]	@ (80166a4 <std+0x68>)
 8016670:	6224      	str	r4, [r4, #32]
 8016672:	429c      	cmp	r4, r3
 8016674:	d006      	beq.n	8016684 <std+0x48>
 8016676:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801667a:	4294      	cmp	r4, r2
 801667c:	d002      	beq.n	8016684 <std+0x48>
 801667e:	33d0      	adds	r3, #208	@ 0xd0
 8016680:	429c      	cmp	r4, r3
 8016682:	d105      	bne.n	8016690 <std+0x54>
 8016684:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801668c:	f000 b972 	b.w	8016974 <__retarget_lock_init_recursive>
 8016690:	bd10      	pop	{r4, pc}
 8016692:	bf00      	nop
 8016694:	080167c1 	.word	0x080167c1
 8016698:	080167e3 	.word	0x080167e3
 801669c:	0801681b 	.word	0x0801681b
 80166a0:	0801683f 	.word	0x0801683f
 80166a4:	24006618 	.word	0x24006618

080166a8 <stdio_exit_handler>:
 80166a8:	4a02      	ldr	r2, [pc, #8]	@ (80166b4 <stdio_exit_handler+0xc>)
 80166aa:	4903      	ldr	r1, [pc, #12]	@ (80166b8 <stdio_exit_handler+0x10>)
 80166ac:	4803      	ldr	r0, [pc, #12]	@ (80166bc <stdio_exit_handler+0x14>)
 80166ae:	f000 b869 	b.w	8016784 <_fwalk_sglue>
 80166b2:	bf00      	nop
 80166b4:	240000c8 	.word	0x240000c8
 80166b8:	08017cb1 	.word	0x08017cb1
 80166bc:	24000244 	.word	0x24000244

080166c0 <cleanup_stdio>:
 80166c0:	6841      	ldr	r1, [r0, #4]
 80166c2:	4b0c      	ldr	r3, [pc, #48]	@ (80166f4 <cleanup_stdio+0x34>)
 80166c4:	4299      	cmp	r1, r3
 80166c6:	b510      	push	{r4, lr}
 80166c8:	4604      	mov	r4, r0
 80166ca:	d001      	beq.n	80166d0 <cleanup_stdio+0x10>
 80166cc:	f001 faf0 	bl	8017cb0 <_fflush_r>
 80166d0:	68a1      	ldr	r1, [r4, #8]
 80166d2:	4b09      	ldr	r3, [pc, #36]	@ (80166f8 <cleanup_stdio+0x38>)
 80166d4:	4299      	cmp	r1, r3
 80166d6:	d002      	beq.n	80166de <cleanup_stdio+0x1e>
 80166d8:	4620      	mov	r0, r4
 80166da:	f001 fae9 	bl	8017cb0 <_fflush_r>
 80166de:	68e1      	ldr	r1, [r4, #12]
 80166e0:	4b06      	ldr	r3, [pc, #24]	@ (80166fc <cleanup_stdio+0x3c>)
 80166e2:	4299      	cmp	r1, r3
 80166e4:	d004      	beq.n	80166f0 <cleanup_stdio+0x30>
 80166e6:	4620      	mov	r0, r4
 80166e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80166ec:	f001 bae0 	b.w	8017cb0 <_fflush_r>
 80166f0:	bd10      	pop	{r4, pc}
 80166f2:	bf00      	nop
 80166f4:	24006618 	.word	0x24006618
 80166f8:	24006680 	.word	0x24006680
 80166fc:	240066e8 	.word	0x240066e8

08016700 <global_stdio_init.part.0>:
 8016700:	b510      	push	{r4, lr}
 8016702:	4b0b      	ldr	r3, [pc, #44]	@ (8016730 <global_stdio_init.part.0+0x30>)
 8016704:	4c0b      	ldr	r4, [pc, #44]	@ (8016734 <global_stdio_init.part.0+0x34>)
 8016706:	4a0c      	ldr	r2, [pc, #48]	@ (8016738 <global_stdio_init.part.0+0x38>)
 8016708:	601a      	str	r2, [r3, #0]
 801670a:	4620      	mov	r0, r4
 801670c:	2200      	movs	r2, #0
 801670e:	2104      	movs	r1, #4
 8016710:	f7ff ff94 	bl	801663c <std>
 8016714:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016718:	2201      	movs	r2, #1
 801671a:	2109      	movs	r1, #9
 801671c:	f7ff ff8e 	bl	801663c <std>
 8016720:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016724:	2202      	movs	r2, #2
 8016726:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801672a:	2112      	movs	r1, #18
 801672c:	f7ff bf86 	b.w	801663c <std>
 8016730:	24006750 	.word	0x24006750
 8016734:	24006618 	.word	0x24006618
 8016738:	080166a9 	.word	0x080166a9

0801673c <__sfp_lock_acquire>:
 801673c:	4801      	ldr	r0, [pc, #4]	@ (8016744 <__sfp_lock_acquire+0x8>)
 801673e:	f000 b91a 	b.w	8016976 <__retarget_lock_acquire_recursive>
 8016742:	bf00      	nop
 8016744:	24006759 	.word	0x24006759

08016748 <__sfp_lock_release>:
 8016748:	4801      	ldr	r0, [pc, #4]	@ (8016750 <__sfp_lock_release+0x8>)
 801674a:	f000 b915 	b.w	8016978 <__retarget_lock_release_recursive>
 801674e:	bf00      	nop
 8016750:	24006759 	.word	0x24006759

08016754 <__sinit>:
 8016754:	b510      	push	{r4, lr}
 8016756:	4604      	mov	r4, r0
 8016758:	f7ff fff0 	bl	801673c <__sfp_lock_acquire>
 801675c:	6a23      	ldr	r3, [r4, #32]
 801675e:	b11b      	cbz	r3, 8016768 <__sinit+0x14>
 8016760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016764:	f7ff bff0 	b.w	8016748 <__sfp_lock_release>
 8016768:	4b04      	ldr	r3, [pc, #16]	@ (801677c <__sinit+0x28>)
 801676a:	6223      	str	r3, [r4, #32]
 801676c:	4b04      	ldr	r3, [pc, #16]	@ (8016780 <__sinit+0x2c>)
 801676e:	681b      	ldr	r3, [r3, #0]
 8016770:	2b00      	cmp	r3, #0
 8016772:	d1f5      	bne.n	8016760 <__sinit+0xc>
 8016774:	f7ff ffc4 	bl	8016700 <global_stdio_init.part.0>
 8016778:	e7f2      	b.n	8016760 <__sinit+0xc>
 801677a:	bf00      	nop
 801677c:	080166c1 	.word	0x080166c1
 8016780:	24006750 	.word	0x24006750

08016784 <_fwalk_sglue>:
 8016784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016788:	4607      	mov	r7, r0
 801678a:	4688      	mov	r8, r1
 801678c:	4614      	mov	r4, r2
 801678e:	2600      	movs	r6, #0
 8016790:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016794:	f1b9 0901 	subs.w	r9, r9, #1
 8016798:	d505      	bpl.n	80167a6 <_fwalk_sglue+0x22>
 801679a:	6824      	ldr	r4, [r4, #0]
 801679c:	2c00      	cmp	r4, #0
 801679e:	d1f7      	bne.n	8016790 <_fwalk_sglue+0xc>
 80167a0:	4630      	mov	r0, r6
 80167a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80167a6:	89ab      	ldrh	r3, [r5, #12]
 80167a8:	2b01      	cmp	r3, #1
 80167aa:	d907      	bls.n	80167bc <_fwalk_sglue+0x38>
 80167ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80167b0:	3301      	adds	r3, #1
 80167b2:	d003      	beq.n	80167bc <_fwalk_sglue+0x38>
 80167b4:	4629      	mov	r1, r5
 80167b6:	4638      	mov	r0, r7
 80167b8:	47c0      	blx	r8
 80167ba:	4306      	orrs	r6, r0
 80167bc:	3568      	adds	r5, #104	@ 0x68
 80167be:	e7e9      	b.n	8016794 <_fwalk_sglue+0x10>

080167c0 <__sread>:
 80167c0:	b510      	push	{r4, lr}
 80167c2:	460c      	mov	r4, r1
 80167c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80167c8:	f000 f886 	bl	80168d8 <_read_r>
 80167cc:	2800      	cmp	r0, #0
 80167ce:	bfab      	itete	ge
 80167d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80167d2:	89a3      	ldrhlt	r3, [r4, #12]
 80167d4:	181b      	addge	r3, r3, r0
 80167d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80167da:	bfac      	ite	ge
 80167dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80167de:	81a3      	strhlt	r3, [r4, #12]
 80167e0:	bd10      	pop	{r4, pc}

080167e2 <__swrite>:
 80167e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167e6:	461f      	mov	r7, r3
 80167e8:	898b      	ldrh	r3, [r1, #12]
 80167ea:	05db      	lsls	r3, r3, #23
 80167ec:	4605      	mov	r5, r0
 80167ee:	460c      	mov	r4, r1
 80167f0:	4616      	mov	r6, r2
 80167f2:	d505      	bpl.n	8016800 <__swrite+0x1e>
 80167f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80167f8:	2302      	movs	r3, #2
 80167fa:	2200      	movs	r2, #0
 80167fc:	f000 f85a 	bl	80168b4 <_lseek_r>
 8016800:	89a3      	ldrh	r3, [r4, #12]
 8016802:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016806:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801680a:	81a3      	strh	r3, [r4, #12]
 801680c:	4632      	mov	r2, r6
 801680e:	463b      	mov	r3, r7
 8016810:	4628      	mov	r0, r5
 8016812:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016816:	f000 b871 	b.w	80168fc <_write_r>

0801681a <__sseek>:
 801681a:	b510      	push	{r4, lr}
 801681c:	460c      	mov	r4, r1
 801681e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016822:	f000 f847 	bl	80168b4 <_lseek_r>
 8016826:	1c43      	adds	r3, r0, #1
 8016828:	89a3      	ldrh	r3, [r4, #12]
 801682a:	bf15      	itete	ne
 801682c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801682e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016832:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016836:	81a3      	strheq	r3, [r4, #12]
 8016838:	bf18      	it	ne
 801683a:	81a3      	strhne	r3, [r4, #12]
 801683c:	bd10      	pop	{r4, pc}

0801683e <__sclose>:
 801683e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016842:	f000 b827 	b.w	8016894 <_close_r>

08016846 <memset>:
 8016846:	4402      	add	r2, r0
 8016848:	4603      	mov	r3, r0
 801684a:	4293      	cmp	r3, r2
 801684c:	d100      	bne.n	8016850 <memset+0xa>
 801684e:	4770      	bx	lr
 8016850:	f803 1b01 	strb.w	r1, [r3], #1
 8016854:	e7f9      	b.n	801684a <memset+0x4>

08016856 <strchr>:
 8016856:	b2c9      	uxtb	r1, r1
 8016858:	4603      	mov	r3, r0
 801685a:	4618      	mov	r0, r3
 801685c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016860:	b112      	cbz	r2, 8016868 <strchr+0x12>
 8016862:	428a      	cmp	r2, r1
 8016864:	d1f9      	bne.n	801685a <strchr+0x4>
 8016866:	4770      	bx	lr
 8016868:	2900      	cmp	r1, #0
 801686a:	bf18      	it	ne
 801686c:	2000      	movne	r0, #0
 801686e:	4770      	bx	lr

08016870 <strncmp>:
 8016870:	b510      	push	{r4, lr}
 8016872:	b16a      	cbz	r2, 8016890 <strncmp+0x20>
 8016874:	3901      	subs	r1, #1
 8016876:	1884      	adds	r4, r0, r2
 8016878:	f810 2b01 	ldrb.w	r2, [r0], #1
 801687c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8016880:	429a      	cmp	r2, r3
 8016882:	d103      	bne.n	801688c <strncmp+0x1c>
 8016884:	42a0      	cmp	r0, r4
 8016886:	d001      	beq.n	801688c <strncmp+0x1c>
 8016888:	2a00      	cmp	r2, #0
 801688a:	d1f5      	bne.n	8016878 <strncmp+0x8>
 801688c:	1ad0      	subs	r0, r2, r3
 801688e:	bd10      	pop	{r4, pc}
 8016890:	4610      	mov	r0, r2
 8016892:	e7fc      	b.n	801688e <strncmp+0x1e>

08016894 <_close_r>:
 8016894:	b538      	push	{r3, r4, r5, lr}
 8016896:	4d06      	ldr	r5, [pc, #24]	@ (80168b0 <_close_r+0x1c>)
 8016898:	2300      	movs	r3, #0
 801689a:	4604      	mov	r4, r0
 801689c:	4608      	mov	r0, r1
 801689e:	602b      	str	r3, [r5, #0]
 80168a0:	f7eb fcb2 	bl	8002208 <_close>
 80168a4:	1c43      	adds	r3, r0, #1
 80168a6:	d102      	bne.n	80168ae <_close_r+0x1a>
 80168a8:	682b      	ldr	r3, [r5, #0]
 80168aa:	b103      	cbz	r3, 80168ae <_close_r+0x1a>
 80168ac:	6023      	str	r3, [r4, #0]
 80168ae:	bd38      	pop	{r3, r4, r5, pc}
 80168b0:	24006754 	.word	0x24006754

080168b4 <_lseek_r>:
 80168b4:	b538      	push	{r3, r4, r5, lr}
 80168b6:	4d07      	ldr	r5, [pc, #28]	@ (80168d4 <_lseek_r+0x20>)
 80168b8:	4604      	mov	r4, r0
 80168ba:	4608      	mov	r0, r1
 80168bc:	4611      	mov	r1, r2
 80168be:	2200      	movs	r2, #0
 80168c0:	602a      	str	r2, [r5, #0]
 80168c2:	461a      	mov	r2, r3
 80168c4:	f7eb fcc7 	bl	8002256 <_lseek>
 80168c8:	1c43      	adds	r3, r0, #1
 80168ca:	d102      	bne.n	80168d2 <_lseek_r+0x1e>
 80168cc:	682b      	ldr	r3, [r5, #0]
 80168ce:	b103      	cbz	r3, 80168d2 <_lseek_r+0x1e>
 80168d0:	6023      	str	r3, [r4, #0]
 80168d2:	bd38      	pop	{r3, r4, r5, pc}
 80168d4:	24006754 	.word	0x24006754

080168d8 <_read_r>:
 80168d8:	b538      	push	{r3, r4, r5, lr}
 80168da:	4d07      	ldr	r5, [pc, #28]	@ (80168f8 <_read_r+0x20>)
 80168dc:	4604      	mov	r4, r0
 80168de:	4608      	mov	r0, r1
 80168e0:	4611      	mov	r1, r2
 80168e2:	2200      	movs	r2, #0
 80168e4:	602a      	str	r2, [r5, #0]
 80168e6:	461a      	mov	r2, r3
 80168e8:	f7eb fc55 	bl	8002196 <_read>
 80168ec:	1c43      	adds	r3, r0, #1
 80168ee:	d102      	bne.n	80168f6 <_read_r+0x1e>
 80168f0:	682b      	ldr	r3, [r5, #0]
 80168f2:	b103      	cbz	r3, 80168f6 <_read_r+0x1e>
 80168f4:	6023      	str	r3, [r4, #0]
 80168f6:	bd38      	pop	{r3, r4, r5, pc}
 80168f8:	24006754 	.word	0x24006754

080168fc <_write_r>:
 80168fc:	b538      	push	{r3, r4, r5, lr}
 80168fe:	4d07      	ldr	r5, [pc, #28]	@ (801691c <_write_r+0x20>)
 8016900:	4604      	mov	r4, r0
 8016902:	4608      	mov	r0, r1
 8016904:	4611      	mov	r1, r2
 8016906:	2200      	movs	r2, #0
 8016908:	602a      	str	r2, [r5, #0]
 801690a:	461a      	mov	r2, r3
 801690c:	f7eb fc60 	bl	80021d0 <_write>
 8016910:	1c43      	adds	r3, r0, #1
 8016912:	d102      	bne.n	801691a <_write_r+0x1e>
 8016914:	682b      	ldr	r3, [r5, #0]
 8016916:	b103      	cbz	r3, 801691a <_write_r+0x1e>
 8016918:	6023      	str	r3, [r4, #0]
 801691a:	bd38      	pop	{r3, r4, r5, pc}
 801691c:	24006754 	.word	0x24006754

08016920 <__errno>:
 8016920:	4b01      	ldr	r3, [pc, #4]	@ (8016928 <__errno+0x8>)
 8016922:	6818      	ldr	r0, [r3, #0]
 8016924:	4770      	bx	lr
 8016926:	bf00      	nop
 8016928:	24000240 	.word	0x24000240

0801692c <__libc_init_array>:
 801692c:	b570      	push	{r4, r5, r6, lr}
 801692e:	4d0d      	ldr	r5, [pc, #52]	@ (8016964 <__libc_init_array+0x38>)
 8016930:	4c0d      	ldr	r4, [pc, #52]	@ (8016968 <__libc_init_array+0x3c>)
 8016932:	1b64      	subs	r4, r4, r5
 8016934:	10a4      	asrs	r4, r4, #2
 8016936:	2600      	movs	r6, #0
 8016938:	42a6      	cmp	r6, r4
 801693a:	d109      	bne.n	8016950 <__libc_init_array+0x24>
 801693c:	4d0b      	ldr	r5, [pc, #44]	@ (801696c <__libc_init_array+0x40>)
 801693e:	4c0c      	ldr	r4, [pc, #48]	@ (8016970 <__libc_init_array+0x44>)
 8016940:	f001 ff9a 	bl	8018878 <_init>
 8016944:	1b64      	subs	r4, r4, r5
 8016946:	10a4      	asrs	r4, r4, #2
 8016948:	2600      	movs	r6, #0
 801694a:	42a6      	cmp	r6, r4
 801694c:	d105      	bne.n	801695a <__libc_init_array+0x2e>
 801694e:	bd70      	pop	{r4, r5, r6, pc}
 8016950:	f855 3b04 	ldr.w	r3, [r5], #4
 8016954:	4798      	blx	r3
 8016956:	3601      	adds	r6, #1
 8016958:	e7ee      	b.n	8016938 <__libc_init_array+0xc>
 801695a:	f855 3b04 	ldr.w	r3, [r5], #4
 801695e:	4798      	blx	r3
 8016960:	3601      	adds	r6, #1
 8016962:	e7f2      	b.n	801694a <__libc_init_array+0x1e>
 8016964:	08019628 	.word	0x08019628
 8016968:	08019628 	.word	0x08019628
 801696c:	08019628 	.word	0x08019628
 8016970:	0801962c 	.word	0x0801962c

08016974 <__retarget_lock_init_recursive>:
 8016974:	4770      	bx	lr

08016976 <__retarget_lock_acquire_recursive>:
 8016976:	4770      	bx	lr

08016978 <__retarget_lock_release_recursive>:
 8016978:	4770      	bx	lr

0801697a <memcpy>:
 801697a:	440a      	add	r2, r1
 801697c:	4291      	cmp	r1, r2
 801697e:	f100 33ff 	add.w	r3, r0, #4294967295
 8016982:	d100      	bne.n	8016986 <memcpy+0xc>
 8016984:	4770      	bx	lr
 8016986:	b510      	push	{r4, lr}
 8016988:	f811 4b01 	ldrb.w	r4, [r1], #1
 801698c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016990:	4291      	cmp	r1, r2
 8016992:	d1f9      	bne.n	8016988 <memcpy+0xe>
 8016994:	bd10      	pop	{r4, pc}
	...

08016998 <nan>:
 8016998:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80169a0 <nan+0x8>
 801699c:	4770      	bx	lr
 801699e:	bf00      	nop
 80169a0:	00000000 	.word	0x00000000
 80169a4:	7ff80000 	.word	0x7ff80000

080169a8 <_free_r>:
 80169a8:	b538      	push	{r3, r4, r5, lr}
 80169aa:	4605      	mov	r5, r0
 80169ac:	2900      	cmp	r1, #0
 80169ae:	d041      	beq.n	8016a34 <_free_r+0x8c>
 80169b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80169b4:	1f0c      	subs	r4, r1, #4
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	bfb8      	it	lt
 80169ba:	18e4      	addlt	r4, r4, r3
 80169bc:	f000 fc2c 	bl	8017218 <__malloc_lock>
 80169c0:	4a1d      	ldr	r2, [pc, #116]	@ (8016a38 <_free_r+0x90>)
 80169c2:	6813      	ldr	r3, [r2, #0]
 80169c4:	b933      	cbnz	r3, 80169d4 <_free_r+0x2c>
 80169c6:	6063      	str	r3, [r4, #4]
 80169c8:	6014      	str	r4, [r2, #0]
 80169ca:	4628      	mov	r0, r5
 80169cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80169d0:	f000 bc28 	b.w	8017224 <__malloc_unlock>
 80169d4:	42a3      	cmp	r3, r4
 80169d6:	d908      	bls.n	80169ea <_free_r+0x42>
 80169d8:	6820      	ldr	r0, [r4, #0]
 80169da:	1821      	adds	r1, r4, r0
 80169dc:	428b      	cmp	r3, r1
 80169de:	bf01      	itttt	eq
 80169e0:	6819      	ldreq	r1, [r3, #0]
 80169e2:	685b      	ldreq	r3, [r3, #4]
 80169e4:	1809      	addeq	r1, r1, r0
 80169e6:	6021      	streq	r1, [r4, #0]
 80169e8:	e7ed      	b.n	80169c6 <_free_r+0x1e>
 80169ea:	461a      	mov	r2, r3
 80169ec:	685b      	ldr	r3, [r3, #4]
 80169ee:	b10b      	cbz	r3, 80169f4 <_free_r+0x4c>
 80169f0:	42a3      	cmp	r3, r4
 80169f2:	d9fa      	bls.n	80169ea <_free_r+0x42>
 80169f4:	6811      	ldr	r1, [r2, #0]
 80169f6:	1850      	adds	r0, r2, r1
 80169f8:	42a0      	cmp	r0, r4
 80169fa:	d10b      	bne.n	8016a14 <_free_r+0x6c>
 80169fc:	6820      	ldr	r0, [r4, #0]
 80169fe:	4401      	add	r1, r0
 8016a00:	1850      	adds	r0, r2, r1
 8016a02:	4283      	cmp	r3, r0
 8016a04:	6011      	str	r1, [r2, #0]
 8016a06:	d1e0      	bne.n	80169ca <_free_r+0x22>
 8016a08:	6818      	ldr	r0, [r3, #0]
 8016a0a:	685b      	ldr	r3, [r3, #4]
 8016a0c:	6053      	str	r3, [r2, #4]
 8016a0e:	4408      	add	r0, r1
 8016a10:	6010      	str	r0, [r2, #0]
 8016a12:	e7da      	b.n	80169ca <_free_r+0x22>
 8016a14:	d902      	bls.n	8016a1c <_free_r+0x74>
 8016a16:	230c      	movs	r3, #12
 8016a18:	602b      	str	r3, [r5, #0]
 8016a1a:	e7d6      	b.n	80169ca <_free_r+0x22>
 8016a1c:	6820      	ldr	r0, [r4, #0]
 8016a1e:	1821      	adds	r1, r4, r0
 8016a20:	428b      	cmp	r3, r1
 8016a22:	bf04      	itt	eq
 8016a24:	6819      	ldreq	r1, [r3, #0]
 8016a26:	685b      	ldreq	r3, [r3, #4]
 8016a28:	6063      	str	r3, [r4, #4]
 8016a2a:	bf04      	itt	eq
 8016a2c:	1809      	addeq	r1, r1, r0
 8016a2e:	6021      	streq	r1, [r4, #0]
 8016a30:	6054      	str	r4, [r2, #4]
 8016a32:	e7ca      	b.n	80169ca <_free_r+0x22>
 8016a34:	bd38      	pop	{r3, r4, r5, pc}
 8016a36:	bf00      	nop
 8016a38:	24006760 	.word	0x24006760

08016a3c <rshift>:
 8016a3c:	6903      	ldr	r3, [r0, #16]
 8016a3e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8016a42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016a46:	ea4f 1261 	mov.w	r2, r1, asr #5
 8016a4a:	f100 0414 	add.w	r4, r0, #20
 8016a4e:	dd45      	ble.n	8016adc <rshift+0xa0>
 8016a50:	f011 011f 	ands.w	r1, r1, #31
 8016a54:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8016a58:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8016a5c:	d10c      	bne.n	8016a78 <rshift+0x3c>
 8016a5e:	f100 0710 	add.w	r7, r0, #16
 8016a62:	4629      	mov	r1, r5
 8016a64:	42b1      	cmp	r1, r6
 8016a66:	d334      	bcc.n	8016ad2 <rshift+0x96>
 8016a68:	1a9b      	subs	r3, r3, r2
 8016a6a:	009b      	lsls	r3, r3, #2
 8016a6c:	1eea      	subs	r2, r5, #3
 8016a6e:	4296      	cmp	r6, r2
 8016a70:	bf38      	it	cc
 8016a72:	2300      	movcc	r3, #0
 8016a74:	4423      	add	r3, r4
 8016a76:	e015      	b.n	8016aa4 <rshift+0x68>
 8016a78:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8016a7c:	f1c1 0820 	rsb	r8, r1, #32
 8016a80:	40cf      	lsrs	r7, r1
 8016a82:	f105 0e04 	add.w	lr, r5, #4
 8016a86:	46a1      	mov	r9, r4
 8016a88:	4576      	cmp	r6, lr
 8016a8a:	46f4      	mov	ip, lr
 8016a8c:	d815      	bhi.n	8016aba <rshift+0x7e>
 8016a8e:	1a9a      	subs	r2, r3, r2
 8016a90:	0092      	lsls	r2, r2, #2
 8016a92:	3a04      	subs	r2, #4
 8016a94:	3501      	adds	r5, #1
 8016a96:	42ae      	cmp	r6, r5
 8016a98:	bf38      	it	cc
 8016a9a:	2200      	movcc	r2, #0
 8016a9c:	18a3      	adds	r3, r4, r2
 8016a9e:	50a7      	str	r7, [r4, r2]
 8016aa0:	b107      	cbz	r7, 8016aa4 <rshift+0x68>
 8016aa2:	3304      	adds	r3, #4
 8016aa4:	1b1a      	subs	r2, r3, r4
 8016aa6:	42a3      	cmp	r3, r4
 8016aa8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016aac:	bf08      	it	eq
 8016aae:	2300      	moveq	r3, #0
 8016ab0:	6102      	str	r2, [r0, #16]
 8016ab2:	bf08      	it	eq
 8016ab4:	6143      	streq	r3, [r0, #20]
 8016ab6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016aba:	f8dc c000 	ldr.w	ip, [ip]
 8016abe:	fa0c fc08 	lsl.w	ip, ip, r8
 8016ac2:	ea4c 0707 	orr.w	r7, ip, r7
 8016ac6:	f849 7b04 	str.w	r7, [r9], #4
 8016aca:	f85e 7b04 	ldr.w	r7, [lr], #4
 8016ace:	40cf      	lsrs	r7, r1
 8016ad0:	e7da      	b.n	8016a88 <rshift+0x4c>
 8016ad2:	f851 cb04 	ldr.w	ip, [r1], #4
 8016ad6:	f847 cf04 	str.w	ip, [r7, #4]!
 8016ada:	e7c3      	b.n	8016a64 <rshift+0x28>
 8016adc:	4623      	mov	r3, r4
 8016ade:	e7e1      	b.n	8016aa4 <rshift+0x68>

08016ae0 <__hexdig_fun>:
 8016ae0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8016ae4:	2b09      	cmp	r3, #9
 8016ae6:	d802      	bhi.n	8016aee <__hexdig_fun+0xe>
 8016ae8:	3820      	subs	r0, #32
 8016aea:	b2c0      	uxtb	r0, r0
 8016aec:	4770      	bx	lr
 8016aee:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8016af2:	2b05      	cmp	r3, #5
 8016af4:	d801      	bhi.n	8016afa <__hexdig_fun+0x1a>
 8016af6:	3847      	subs	r0, #71	@ 0x47
 8016af8:	e7f7      	b.n	8016aea <__hexdig_fun+0xa>
 8016afa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8016afe:	2b05      	cmp	r3, #5
 8016b00:	d801      	bhi.n	8016b06 <__hexdig_fun+0x26>
 8016b02:	3827      	subs	r0, #39	@ 0x27
 8016b04:	e7f1      	b.n	8016aea <__hexdig_fun+0xa>
 8016b06:	2000      	movs	r0, #0
 8016b08:	4770      	bx	lr
	...

08016b0c <__gethex>:
 8016b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b10:	b085      	sub	sp, #20
 8016b12:	468a      	mov	sl, r1
 8016b14:	9302      	str	r3, [sp, #8]
 8016b16:	680b      	ldr	r3, [r1, #0]
 8016b18:	9001      	str	r0, [sp, #4]
 8016b1a:	4690      	mov	r8, r2
 8016b1c:	1c9c      	adds	r4, r3, #2
 8016b1e:	46a1      	mov	r9, r4
 8016b20:	f814 0b01 	ldrb.w	r0, [r4], #1
 8016b24:	2830      	cmp	r0, #48	@ 0x30
 8016b26:	d0fa      	beq.n	8016b1e <__gethex+0x12>
 8016b28:	eba9 0303 	sub.w	r3, r9, r3
 8016b2c:	f1a3 0b02 	sub.w	fp, r3, #2
 8016b30:	f7ff ffd6 	bl	8016ae0 <__hexdig_fun>
 8016b34:	4605      	mov	r5, r0
 8016b36:	2800      	cmp	r0, #0
 8016b38:	d168      	bne.n	8016c0c <__gethex+0x100>
 8016b3a:	49a0      	ldr	r1, [pc, #640]	@ (8016dbc <__gethex+0x2b0>)
 8016b3c:	2201      	movs	r2, #1
 8016b3e:	4648      	mov	r0, r9
 8016b40:	f7ff fe96 	bl	8016870 <strncmp>
 8016b44:	4607      	mov	r7, r0
 8016b46:	2800      	cmp	r0, #0
 8016b48:	d167      	bne.n	8016c1a <__gethex+0x10e>
 8016b4a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8016b4e:	4626      	mov	r6, r4
 8016b50:	f7ff ffc6 	bl	8016ae0 <__hexdig_fun>
 8016b54:	2800      	cmp	r0, #0
 8016b56:	d062      	beq.n	8016c1e <__gethex+0x112>
 8016b58:	4623      	mov	r3, r4
 8016b5a:	7818      	ldrb	r0, [r3, #0]
 8016b5c:	2830      	cmp	r0, #48	@ 0x30
 8016b5e:	4699      	mov	r9, r3
 8016b60:	f103 0301 	add.w	r3, r3, #1
 8016b64:	d0f9      	beq.n	8016b5a <__gethex+0x4e>
 8016b66:	f7ff ffbb 	bl	8016ae0 <__hexdig_fun>
 8016b6a:	fab0 f580 	clz	r5, r0
 8016b6e:	096d      	lsrs	r5, r5, #5
 8016b70:	f04f 0b01 	mov.w	fp, #1
 8016b74:	464a      	mov	r2, r9
 8016b76:	4616      	mov	r6, r2
 8016b78:	3201      	adds	r2, #1
 8016b7a:	7830      	ldrb	r0, [r6, #0]
 8016b7c:	f7ff ffb0 	bl	8016ae0 <__hexdig_fun>
 8016b80:	2800      	cmp	r0, #0
 8016b82:	d1f8      	bne.n	8016b76 <__gethex+0x6a>
 8016b84:	498d      	ldr	r1, [pc, #564]	@ (8016dbc <__gethex+0x2b0>)
 8016b86:	2201      	movs	r2, #1
 8016b88:	4630      	mov	r0, r6
 8016b8a:	f7ff fe71 	bl	8016870 <strncmp>
 8016b8e:	2800      	cmp	r0, #0
 8016b90:	d13f      	bne.n	8016c12 <__gethex+0x106>
 8016b92:	b944      	cbnz	r4, 8016ba6 <__gethex+0x9a>
 8016b94:	1c74      	adds	r4, r6, #1
 8016b96:	4622      	mov	r2, r4
 8016b98:	4616      	mov	r6, r2
 8016b9a:	3201      	adds	r2, #1
 8016b9c:	7830      	ldrb	r0, [r6, #0]
 8016b9e:	f7ff ff9f 	bl	8016ae0 <__hexdig_fun>
 8016ba2:	2800      	cmp	r0, #0
 8016ba4:	d1f8      	bne.n	8016b98 <__gethex+0x8c>
 8016ba6:	1ba4      	subs	r4, r4, r6
 8016ba8:	00a7      	lsls	r7, r4, #2
 8016baa:	7833      	ldrb	r3, [r6, #0]
 8016bac:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8016bb0:	2b50      	cmp	r3, #80	@ 0x50
 8016bb2:	d13e      	bne.n	8016c32 <__gethex+0x126>
 8016bb4:	7873      	ldrb	r3, [r6, #1]
 8016bb6:	2b2b      	cmp	r3, #43	@ 0x2b
 8016bb8:	d033      	beq.n	8016c22 <__gethex+0x116>
 8016bba:	2b2d      	cmp	r3, #45	@ 0x2d
 8016bbc:	d034      	beq.n	8016c28 <__gethex+0x11c>
 8016bbe:	1c71      	adds	r1, r6, #1
 8016bc0:	2400      	movs	r4, #0
 8016bc2:	7808      	ldrb	r0, [r1, #0]
 8016bc4:	f7ff ff8c 	bl	8016ae0 <__hexdig_fun>
 8016bc8:	1e43      	subs	r3, r0, #1
 8016bca:	b2db      	uxtb	r3, r3
 8016bcc:	2b18      	cmp	r3, #24
 8016bce:	d830      	bhi.n	8016c32 <__gethex+0x126>
 8016bd0:	f1a0 0210 	sub.w	r2, r0, #16
 8016bd4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016bd8:	f7ff ff82 	bl	8016ae0 <__hexdig_fun>
 8016bdc:	f100 3cff 	add.w	ip, r0, #4294967295
 8016be0:	fa5f fc8c 	uxtb.w	ip, ip
 8016be4:	f1bc 0f18 	cmp.w	ip, #24
 8016be8:	f04f 030a 	mov.w	r3, #10
 8016bec:	d91e      	bls.n	8016c2c <__gethex+0x120>
 8016bee:	b104      	cbz	r4, 8016bf2 <__gethex+0xe6>
 8016bf0:	4252      	negs	r2, r2
 8016bf2:	4417      	add	r7, r2
 8016bf4:	f8ca 1000 	str.w	r1, [sl]
 8016bf8:	b1ed      	cbz	r5, 8016c36 <__gethex+0x12a>
 8016bfa:	f1bb 0f00 	cmp.w	fp, #0
 8016bfe:	bf0c      	ite	eq
 8016c00:	2506      	moveq	r5, #6
 8016c02:	2500      	movne	r5, #0
 8016c04:	4628      	mov	r0, r5
 8016c06:	b005      	add	sp, #20
 8016c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c0c:	2500      	movs	r5, #0
 8016c0e:	462c      	mov	r4, r5
 8016c10:	e7b0      	b.n	8016b74 <__gethex+0x68>
 8016c12:	2c00      	cmp	r4, #0
 8016c14:	d1c7      	bne.n	8016ba6 <__gethex+0x9a>
 8016c16:	4627      	mov	r7, r4
 8016c18:	e7c7      	b.n	8016baa <__gethex+0x9e>
 8016c1a:	464e      	mov	r6, r9
 8016c1c:	462f      	mov	r7, r5
 8016c1e:	2501      	movs	r5, #1
 8016c20:	e7c3      	b.n	8016baa <__gethex+0x9e>
 8016c22:	2400      	movs	r4, #0
 8016c24:	1cb1      	adds	r1, r6, #2
 8016c26:	e7cc      	b.n	8016bc2 <__gethex+0xb6>
 8016c28:	2401      	movs	r4, #1
 8016c2a:	e7fb      	b.n	8016c24 <__gethex+0x118>
 8016c2c:	fb03 0002 	mla	r0, r3, r2, r0
 8016c30:	e7ce      	b.n	8016bd0 <__gethex+0xc4>
 8016c32:	4631      	mov	r1, r6
 8016c34:	e7de      	b.n	8016bf4 <__gethex+0xe8>
 8016c36:	eba6 0309 	sub.w	r3, r6, r9
 8016c3a:	3b01      	subs	r3, #1
 8016c3c:	4629      	mov	r1, r5
 8016c3e:	2b07      	cmp	r3, #7
 8016c40:	dc0a      	bgt.n	8016c58 <__gethex+0x14c>
 8016c42:	9801      	ldr	r0, [sp, #4]
 8016c44:	f000 faf4 	bl	8017230 <_Balloc>
 8016c48:	4604      	mov	r4, r0
 8016c4a:	b940      	cbnz	r0, 8016c5e <__gethex+0x152>
 8016c4c:	4b5c      	ldr	r3, [pc, #368]	@ (8016dc0 <__gethex+0x2b4>)
 8016c4e:	4602      	mov	r2, r0
 8016c50:	21e4      	movs	r1, #228	@ 0xe4
 8016c52:	485c      	ldr	r0, [pc, #368]	@ (8016dc4 <__gethex+0x2b8>)
 8016c54:	f001 f864 	bl	8017d20 <__assert_func>
 8016c58:	3101      	adds	r1, #1
 8016c5a:	105b      	asrs	r3, r3, #1
 8016c5c:	e7ef      	b.n	8016c3e <__gethex+0x132>
 8016c5e:	f100 0a14 	add.w	sl, r0, #20
 8016c62:	2300      	movs	r3, #0
 8016c64:	4655      	mov	r5, sl
 8016c66:	469b      	mov	fp, r3
 8016c68:	45b1      	cmp	r9, r6
 8016c6a:	d337      	bcc.n	8016cdc <__gethex+0x1d0>
 8016c6c:	f845 bb04 	str.w	fp, [r5], #4
 8016c70:	eba5 050a 	sub.w	r5, r5, sl
 8016c74:	10ad      	asrs	r5, r5, #2
 8016c76:	6125      	str	r5, [r4, #16]
 8016c78:	4658      	mov	r0, fp
 8016c7a:	f000 fbcb 	bl	8017414 <__hi0bits>
 8016c7e:	016d      	lsls	r5, r5, #5
 8016c80:	f8d8 6000 	ldr.w	r6, [r8]
 8016c84:	1a2d      	subs	r5, r5, r0
 8016c86:	42b5      	cmp	r5, r6
 8016c88:	dd54      	ble.n	8016d34 <__gethex+0x228>
 8016c8a:	1bad      	subs	r5, r5, r6
 8016c8c:	4629      	mov	r1, r5
 8016c8e:	4620      	mov	r0, r4
 8016c90:	f000 ff5c 	bl	8017b4c <__any_on>
 8016c94:	4681      	mov	r9, r0
 8016c96:	b178      	cbz	r0, 8016cb8 <__gethex+0x1ac>
 8016c98:	1e6b      	subs	r3, r5, #1
 8016c9a:	1159      	asrs	r1, r3, #5
 8016c9c:	f003 021f 	and.w	r2, r3, #31
 8016ca0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8016ca4:	f04f 0901 	mov.w	r9, #1
 8016ca8:	fa09 f202 	lsl.w	r2, r9, r2
 8016cac:	420a      	tst	r2, r1
 8016cae:	d003      	beq.n	8016cb8 <__gethex+0x1ac>
 8016cb0:	454b      	cmp	r3, r9
 8016cb2:	dc36      	bgt.n	8016d22 <__gethex+0x216>
 8016cb4:	f04f 0902 	mov.w	r9, #2
 8016cb8:	4629      	mov	r1, r5
 8016cba:	4620      	mov	r0, r4
 8016cbc:	f7ff febe 	bl	8016a3c <rshift>
 8016cc0:	442f      	add	r7, r5
 8016cc2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016cc6:	42bb      	cmp	r3, r7
 8016cc8:	da42      	bge.n	8016d50 <__gethex+0x244>
 8016cca:	9801      	ldr	r0, [sp, #4]
 8016ccc:	4621      	mov	r1, r4
 8016cce:	f000 faef 	bl	80172b0 <_Bfree>
 8016cd2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016cd4:	2300      	movs	r3, #0
 8016cd6:	6013      	str	r3, [r2, #0]
 8016cd8:	25a3      	movs	r5, #163	@ 0xa3
 8016cda:	e793      	b.n	8016c04 <__gethex+0xf8>
 8016cdc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8016ce0:	2a2e      	cmp	r2, #46	@ 0x2e
 8016ce2:	d012      	beq.n	8016d0a <__gethex+0x1fe>
 8016ce4:	2b20      	cmp	r3, #32
 8016ce6:	d104      	bne.n	8016cf2 <__gethex+0x1e6>
 8016ce8:	f845 bb04 	str.w	fp, [r5], #4
 8016cec:	f04f 0b00 	mov.w	fp, #0
 8016cf0:	465b      	mov	r3, fp
 8016cf2:	7830      	ldrb	r0, [r6, #0]
 8016cf4:	9303      	str	r3, [sp, #12]
 8016cf6:	f7ff fef3 	bl	8016ae0 <__hexdig_fun>
 8016cfa:	9b03      	ldr	r3, [sp, #12]
 8016cfc:	f000 000f 	and.w	r0, r0, #15
 8016d00:	4098      	lsls	r0, r3
 8016d02:	ea4b 0b00 	orr.w	fp, fp, r0
 8016d06:	3304      	adds	r3, #4
 8016d08:	e7ae      	b.n	8016c68 <__gethex+0x15c>
 8016d0a:	45b1      	cmp	r9, r6
 8016d0c:	d8ea      	bhi.n	8016ce4 <__gethex+0x1d8>
 8016d0e:	492b      	ldr	r1, [pc, #172]	@ (8016dbc <__gethex+0x2b0>)
 8016d10:	9303      	str	r3, [sp, #12]
 8016d12:	2201      	movs	r2, #1
 8016d14:	4630      	mov	r0, r6
 8016d16:	f7ff fdab 	bl	8016870 <strncmp>
 8016d1a:	9b03      	ldr	r3, [sp, #12]
 8016d1c:	2800      	cmp	r0, #0
 8016d1e:	d1e1      	bne.n	8016ce4 <__gethex+0x1d8>
 8016d20:	e7a2      	b.n	8016c68 <__gethex+0x15c>
 8016d22:	1ea9      	subs	r1, r5, #2
 8016d24:	4620      	mov	r0, r4
 8016d26:	f000 ff11 	bl	8017b4c <__any_on>
 8016d2a:	2800      	cmp	r0, #0
 8016d2c:	d0c2      	beq.n	8016cb4 <__gethex+0x1a8>
 8016d2e:	f04f 0903 	mov.w	r9, #3
 8016d32:	e7c1      	b.n	8016cb8 <__gethex+0x1ac>
 8016d34:	da09      	bge.n	8016d4a <__gethex+0x23e>
 8016d36:	1b75      	subs	r5, r6, r5
 8016d38:	4621      	mov	r1, r4
 8016d3a:	9801      	ldr	r0, [sp, #4]
 8016d3c:	462a      	mov	r2, r5
 8016d3e:	f000 fccf 	bl	80176e0 <__lshift>
 8016d42:	1b7f      	subs	r7, r7, r5
 8016d44:	4604      	mov	r4, r0
 8016d46:	f100 0a14 	add.w	sl, r0, #20
 8016d4a:	f04f 0900 	mov.w	r9, #0
 8016d4e:	e7b8      	b.n	8016cc2 <__gethex+0x1b6>
 8016d50:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8016d54:	42bd      	cmp	r5, r7
 8016d56:	dd6f      	ble.n	8016e38 <__gethex+0x32c>
 8016d58:	1bed      	subs	r5, r5, r7
 8016d5a:	42ae      	cmp	r6, r5
 8016d5c:	dc34      	bgt.n	8016dc8 <__gethex+0x2bc>
 8016d5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016d62:	2b02      	cmp	r3, #2
 8016d64:	d022      	beq.n	8016dac <__gethex+0x2a0>
 8016d66:	2b03      	cmp	r3, #3
 8016d68:	d024      	beq.n	8016db4 <__gethex+0x2a8>
 8016d6a:	2b01      	cmp	r3, #1
 8016d6c:	d115      	bne.n	8016d9a <__gethex+0x28e>
 8016d6e:	42ae      	cmp	r6, r5
 8016d70:	d113      	bne.n	8016d9a <__gethex+0x28e>
 8016d72:	2e01      	cmp	r6, #1
 8016d74:	d10b      	bne.n	8016d8e <__gethex+0x282>
 8016d76:	9a02      	ldr	r2, [sp, #8]
 8016d78:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016d7c:	6013      	str	r3, [r2, #0]
 8016d7e:	2301      	movs	r3, #1
 8016d80:	6123      	str	r3, [r4, #16]
 8016d82:	f8ca 3000 	str.w	r3, [sl]
 8016d86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016d88:	2562      	movs	r5, #98	@ 0x62
 8016d8a:	601c      	str	r4, [r3, #0]
 8016d8c:	e73a      	b.n	8016c04 <__gethex+0xf8>
 8016d8e:	1e71      	subs	r1, r6, #1
 8016d90:	4620      	mov	r0, r4
 8016d92:	f000 fedb 	bl	8017b4c <__any_on>
 8016d96:	2800      	cmp	r0, #0
 8016d98:	d1ed      	bne.n	8016d76 <__gethex+0x26a>
 8016d9a:	9801      	ldr	r0, [sp, #4]
 8016d9c:	4621      	mov	r1, r4
 8016d9e:	f000 fa87 	bl	80172b0 <_Bfree>
 8016da2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016da4:	2300      	movs	r3, #0
 8016da6:	6013      	str	r3, [r2, #0]
 8016da8:	2550      	movs	r5, #80	@ 0x50
 8016daa:	e72b      	b.n	8016c04 <__gethex+0xf8>
 8016dac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016dae:	2b00      	cmp	r3, #0
 8016db0:	d1f3      	bne.n	8016d9a <__gethex+0x28e>
 8016db2:	e7e0      	b.n	8016d76 <__gethex+0x26a>
 8016db4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016db6:	2b00      	cmp	r3, #0
 8016db8:	d1dd      	bne.n	8016d76 <__gethex+0x26a>
 8016dba:	e7ee      	b.n	8016d9a <__gethex+0x28e>
 8016dbc:	080189d4 	.word	0x080189d4
 8016dc0:	08018b41 	.word	0x08018b41
 8016dc4:	08018b52 	.word	0x08018b52
 8016dc8:	1e6f      	subs	r7, r5, #1
 8016dca:	f1b9 0f00 	cmp.w	r9, #0
 8016dce:	d130      	bne.n	8016e32 <__gethex+0x326>
 8016dd0:	b127      	cbz	r7, 8016ddc <__gethex+0x2d0>
 8016dd2:	4639      	mov	r1, r7
 8016dd4:	4620      	mov	r0, r4
 8016dd6:	f000 feb9 	bl	8017b4c <__any_on>
 8016dda:	4681      	mov	r9, r0
 8016ddc:	117a      	asrs	r2, r7, #5
 8016dde:	2301      	movs	r3, #1
 8016de0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8016de4:	f007 071f 	and.w	r7, r7, #31
 8016de8:	40bb      	lsls	r3, r7
 8016dea:	4213      	tst	r3, r2
 8016dec:	4629      	mov	r1, r5
 8016dee:	4620      	mov	r0, r4
 8016df0:	bf18      	it	ne
 8016df2:	f049 0902 	orrne.w	r9, r9, #2
 8016df6:	f7ff fe21 	bl	8016a3c <rshift>
 8016dfa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8016dfe:	1b76      	subs	r6, r6, r5
 8016e00:	2502      	movs	r5, #2
 8016e02:	f1b9 0f00 	cmp.w	r9, #0
 8016e06:	d047      	beq.n	8016e98 <__gethex+0x38c>
 8016e08:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016e0c:	2b02      	cmp	r3, #2
 8016e0e:	d015      	beq.n	8016e3c <__gethex+0x330>
 8016e10:	2b03      	cmp	r3, #3
 8016e12:	d017      	beq.n	8016e44 <__gethex+0x338>
 8016e14:	2b01      	cmp	r3, #1
 8016e16:	d109      	bne.n	8016e2c <__gethex+0x320>
 8016e18:	f019 0f02 	tst.w	r9, #2
 8016e1c:	d006      	beq.n	8016e2c <__gethex+0x320>
 8016e1e:	f8da 3000 	ldr.w	r3, [sl]
 8016e22:	ea49 0903 	orr.w	r9, r9, r3
 8016e26:	f019 0f01 	tst.w	r9, #1
 8016e2a:	d10e      	bne.n	8016e4a <__gethex+0x33e>
 8016e2c:	f045 0510 	orr.w	r5, r5, #16
 8016e30:	e032      	b.n	8016e98 <__gethex+0x38c>
 8016e32:	f04f 0901 	mov.w	r9, #1
 8016e36:	e7d1      	b.n	8016ddc <__gethex+0x2d0>
 8016e38:	2501      	movs	r5, #1
 8016e3a:	e7e2      	b.n	8016e02 <__gethex+0x2f6>
 8016e3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016e3e:	f1c3 0301 	rsb	r3, r3, #1
 8016e42:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016e44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d0f0      	beq.n	8016e2c <__gethex+0x320>
 8016e4a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8016e4e:	f104 0314 	add.w	r3, r4, #20
 8016e52:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8016e56:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8016e5a:	f04f 0c00 	mov.w	ip, #0
 8016e5e:	4618      	mov	r0, r3
 8016e60:	f853 2b04 	ldr.w	r2, [r3], #4
 8016e64:	f1b2 3fff 	cmp.w	r2, #4294967295
 8016e68:	d01b      	beq.n	8016ea2 <__gethex+0x396>
 8016e6a:	3201      	adds	r2, #1
 8016e6c:	6002      	str	r2, [r0, #0]
 8016e6e:	2d02      	cmp	r5, #2
 8016e70:	f104 0314 	add.w	r3, r4, #20
 8016e74:	d13c      	bne.n	8016ef0 <__gethex+0x3e4>
 8016e76:	f8d8 2000 	ldr.w	r2, [r8]
 8016e7a:	3a01      	subs	r2, #1
 8016e7c:	42b2      	cmp	r2, r6
 8016e7e:	d109      	bne.n	8016e94 <__gethex+0x388>
 8016e80:	1171      	asrs	r1, r6, #5
 8016e82:	2201      	movs	r2, #1
 8016e84:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016e88:	f006 061f 	and.w	r6, r6, #31
 8016e8c:	fa02 f606 	lsl.w	r6, r2, r6
 8016e90:	421e      	tst	r6, r3
 8016e92:	d13a      	bne.n	8016f0a <__gethex+0x3fe>
 8016e94:	f045 0520 	orr.w	r5, r5, #32
 8016e98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016e9a:	601c      	str	r4, [r3, #0]
 8016e9c:	9b02      	ldr	r3, [sp, #8]
 8016e9e:	601f      	str	r7, [r3, #0]
 8016ea0:	e6b0      	b.n	8016c04 <__gethex+0xf8>
 8016ea2:	4299      	cmp	r1, r3
 8016ea4:	f843 cc04 	str.w	ip, [r3, #-4]
 8016ea8:	d8d9      	bhi.n	8016e5e <__gethex+0x352>
 8016eaa:	68a3      	ldr	r3, [r4, #8]
 8016eac:	459b      	cmp	fp, r3
 8016eae:	db17      	blt.n	8016ee0 <__gethex+0x3d4>
 8016eb0:	6861      	ldr	r1, [r4, #4]
 8016eb2:	9801      	ldr	r0, [sp, #4]
 8016eb4:	3101      	adds	r1, #1
 8016eb6:	f000 f9bb 	bl	8017230 <_Balloc>
 8016eba:	4681      	mov	r9, r0
 8016ebc:	b918      	cbnz	r0, 8016ec6 <__gethex+0x3ba>
 8016ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8016f28 <__gethex+0x41c>)
 8016ec0:	4602      	mov	r2, r0
 8016ec2:	2184      	movs	r1, #132	@ 0x84
 8016ec4:	e6c5      	b.n	8016c52 <__gethex+0x146>
 8016ec6:	6922      	ldr	r2, [r4, #16]
 8016ec8:	3202      	adds	r2, #2
 8016eca:	f104 010c 	add.w	r1, r4, #12
 8016ece:	0092      	lsls	r2, r2, #2
 8016ed0:	300c      	adds	r0, #12
 8016ed2:	f7ff fd52 	bl	801697a <memcpy>
 8016ed6:	4621      	mov	r1, r4
 8016ed8:	9801      	ldr	r0, [sp, #4]
 8016eda:	f000 f9e9 	bl	80172b0 <_Bfree>
 8016ede:	464c      	mov	r4, r9
 8016ee0:	6923      	ldr	r3, [r4, #16]
 8016ee2:	1c5a      	adds	r2, r3, #1
 8016ee4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016ee8:	6122      	str	r2, [r4, #16]
 8016eea:	2201      	movs	r2, #1
 8016eec:	615a      	str	r2, [r3, #20]
 8016eee:	e7be      	b.n	8016e6e <__gethex+0x362>
 8016ef0:	6922      	ldr	r2, [r4, #16]
 8016ef2:	455a      	cmp	r2, fp
 8016ef4:	dd0b      	ble.n	8016f0e <__gethex+0x402>
 8016ef6:	2101      	movs	r1, #1
 8016ef8:	4620      	mov	r0, r4
 8016efa:	f7ff fd9f 	bl	8016a3c <rshift>
 8016efe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016f02:	3701      	adds	r7, #1
 8016f04:	42bb      	cmp	r3, r7
 8016f06:	f6ff aee0 	blt.w	8016cca <__gethex+0x1be>
 8016f0a:	2501      	movs	r5, #1
 8016f0c:	e7c2      	b.n	8016e94 <__gethex+0x388>
 8016f0e:	f016 061f 	ands.w	r6, r6, #31
 8016f12:	d0fa      	beq.n	8016f0a <__gethex+0x3fe>
 8016f14:	4453      	add	r3, sl
 8016f16:	f1c6 0620 	rsb	r6, r6, #32
 8016f1a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8016f1e:	f000 fa79 	bl	8017414 <__hi0bits>
 8016f22:	42b0      	cmp	r0, r6
 8016f24:	dbe7      	blt.n	8016ef6 <__gethex+0x3ea>
 8016f26:	e7f0      	b.n	8016f0a <__gethex+0x3fe>
 8016f28:	08018b41 	.word	0x08018b41

08016f2c <L_shift>:
 8016f2c:	f1c2 0208 	rsb	r2, r2, #8
 8016f30:	0092      	lsls	r2, r2, #2
 8016f32:	b570      	push	{r4, r5, r6, lr}
 8016f34:	f1c2 0620 	rsb	r6, r2, #32
 8016f38:	6843      	ldr	r3, [r0, #4]
 8016f3a:	6804      	ldr	r4, [r0, #0]
 8016f3c:	fa03 f506 	lsl.w	r5, r3, r6
 8016f40:	432c      	orrs	r4, r5
 8016f42:	40d3      	lsrs	r3, r2
 8016f44:	6004      	str	r4, [r0, #0]
 8016f46:	f840 3f04 	str.w	r3, [r0, #4]!
 8016f4a:	4288      	cmp	r0, r1
 8016f4c:	d3f4      	bcc.n	8016f38 <L_shift+0xc>
 8016f4e:	bd70      	pop	{r4, r5, r6, pc}

08016f50 <__match>:
 8016f50:	b530      	push	{r4, r5, lr}
 8016f52:	6803      	ldr	r3, [r0, #0]
 8016f54:	3301      	adds	r3, #1
 8016f56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016f5a:	b914      	cbnz	r4, 8016f62 <__match+0x12>
 8016f5c:	6003      	str	r3, [r0, #0]
 8016f5e:	2001      	movs	r0, #1
 8016f60:	bd30      	pop	{r4, r5, pc}
 8016f62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016f66:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8016f6a:	2d19      	cmp	r5, #25
 8016f6c:	bf98      	it	ls
 8016f6e:	3220      	addls	r2, #32
 8016f70:	42a2      	cmp	r2, r4
 8016f72:	d0f0      	beq.n	8016f56 <__match+0x6>
 8016f74:	2000      	movs	r0, #0
 8016f76:	e7f3      	b.n	8016f60 <__match+0x10>

08016f78 <__hexnan>:
 8016f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f7c:	680b      	ldr	r3, [r1, #0]
 8016f7e:	6801      	ldr	r1, [r0, #0]
 8016f80:	115e      	asrs	r6, r3, #5
 8016f82:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8016f86:	f013 031f 	ands.w	r3, r3, #31
 8016f8a:	b087      	sub	sp, #28
 8016f8c:	bf18      	it	ne
 8016f8e:	3604      	addne	r6, #4
 8016f90:	2500      	movs	r5, #0
 8016f92:	1f37      	subs	r7, r6, #4
 8016f94:	4682      	mov	sl, r0
 8016f96:	4690      	mov	r8, r2
 8016f98:	9301      	str	r3, [sp, #4]
 8016f9a:	f846 5c04 	str.w	r5, [r6, #-4]
 8016f9e:	46b9      	mov	r9, r7
 8016fa0:	463c      	mov	r4, r7
 8016fa2:	9502      	str	r5, [sp, #8]
 8016fa4:	46ab      	mov	fp, r5
 8016fa6:	784a      	ldrb	r2, [r1, #1]
 8016fa8:	1c4b      	adds	r3, r1, #1
 8016faa:	9303      	str	r3, [sp, #12]
 8016fac:	b342      	cbz	r2, 8017000 <__hexnan+0x88>
 8016fae:	4610      	mov	r0, r2
 8016fb0:	9105      	str	r1, [sp, #20]
 8016fb2:	9204      	str	r2, [sp, #16]
 8016fb4:	f7ff fd94 	bl	8016ae0 <__hexdig_fun>
 8016fb8:	2800      	cmp	r0, #0
 8016fba:	d151      	bne.n	8017060 <__hexnan+0xe8>
 8016fbc:	9a04      	ldr	r2, [sp, #16]
 8016fbe:	9905      	ldr	r1, [sp, #20]
 8016fc0:	2a20      	cmp	r2, #32
 8016fc2:	d818      	bhi.n	8016ff6 <__hexnan+0x7e>
 8016fc4:	9b02      	ldr	r3, [sp, #8]
 8016fc6:	459b      	cmp	fp, r3
 8016fc8:	dd13      	ble.n	8016ff2 <__hexnan+0x7a>
 8016fca:	454c      	cmp	r4, r9
 8016fcc:	d206      	bcs.n	8016fdc <__hexnan+0x64>
 8016fce:	2d07      	cmp	r5, #7
 8016fd0:	dc04      	bgt.n	8016fdc <__hexnan+0x64>
 8016fd2:	462a      	mov	r2, r5
 8016fd4:	4649      	mov	r1, r9
 8016fd6:	4620      	mov	r0, r4
 8016fd8:	f7ff ffa8 	bl	8016f2c <L_shift>
 8016fdc:	4544      	cmp	r4, r8
 8016fde:	d952      	bls.n	8017086 <__hexnan+0x10e>
 8016fe0:	2300      	movs	r3, #0
 8016fe2:	f1a4 0904 	sub.w	r9, r4, #4
 8016fe6:	f844 3c04 	str.w	r3, [r4, #-4]
 8016fea:	f8cd b008 	str.w	fp, [sp, #8]
 8016fee:	464c      	mov	r4, r9
 8016ff0:	461d      	mov	r5, r3
 8016ff2:	9903      	ldr	r1, [sp, #12]
 8016ff4:	e7d7      	b.n	8016fa6 <__hexnan+0x2e>
 8016ff6:	2a29      	cmp	r2, #41	@ 0x29
 8016ff8:	d157      	bne.n	80170aa <__hexnan+0x132>
 8016ffa:	3102      	adds	r1, #2
 8016ffc:	f8ca 1000 	str.w	r1, [sl]
 8017000:	f1bb 0f00 	cmp.w	fp, #0
 8017004:	d051      	beq.n	80170aa <__hexnan+0x132>
 8017006:	454c      	cmp	r4, r9
 8017008:	d206      	bcs.n	8017018 <__hexnan+0xa0>
 801700a:	2d07      	cmp	r5, #7
 801700c:	dc04      	bgt.n	8017018 <__hexnan+0xa0>
 801700e:	462a      	mov	r2, r5
 8017010:	4649      	mov	r1, r9
 8017012:	4620      	mov	r0, r4
 8017014:	f7ff ff8a 	bl	8016f2c <L_shift>
 8017018:	4544      	cmp	r4, r8
 801701a:	d936      	bls.n	801708a <__hexnan+0x112>
 801701c:	f1a8 0204 	sub.w	r2, r8, #4
 8017020:	4623      	mov	r3, r4
 8017022:	f853 1b04 	ldr.w	r1, [r3], #4
 8017026:	f842 1f04 	str.w	r1, [r2, #4]!
 801702a:	429f      	cmp	r7, r3
 801702c:	d2f9      	bcs.n	8017022 <__hexnan+0xaa>
 801702e:	1b3b      	subs	r3, r7, r4
 8017030:	f023 0303 	bic.w	r3, r3, #3
 8017034:	3304      	adds	r3, #4
 8017036:	3401      	adds	r4, #1
 8017038:	3e03      	subs	r6, #3
 801703a:	42b4      	cmp	r4, r6
 801703c:	bf88      	it	hi
 801703e:	2304      	movhi	r3, #4
 8017040:	4443      	add	r3, r8
 8017042:	2200      	movs	r2, #0
 8017044:	f843 2b04 	str.w	r2, [r3], #4
 8017048:	429f      	cmp	r7, r3
 801704a:	d2fb      	bcs.n	8017044 <__hexnan+0xcc>
 801704c:	683b      	ldr	r3, [r7, #0]
 801704e:	b91b      	cbnz	r3, 8017058 <__hexnan+0xe0>
 8017050:	4547      	cmp	r7, r8
 8017052:	d128      	bne.n	80170a6 <__hexnan+0x12e>
 8017054:	2301      	movs	r3, #1
 8017056:	603b      	str	r3, [r7, #0]
 8017058:	2005      	movs	r0, #5
 801705a:	b007      	add	sp, #28
 801705c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017060:	3501      	adds	r5, #1
 8017062:	2d08      	cmp	r5, #8
 8017064:	f10b 0b01 	add.w	fp, fp, #1
 8017068:	dd06      	ble.n	8017078 <__hexnan+0x100>
 801706a:	4544      	cmp	r4, r8
 801706c:	d9c1      	bls.n	8016ff2 <__hexnan+0x7a>
 801706e:	2300      	movs	r3, #0
 8017070:	f844 3c04 	str.w	r3, [r4, #-4]
 8017074:	2501      	movs	r5, #1
 8017076:	3c04      	subs	r4, #4
 8017078:	6822      	ldr	r2, [r4, #0]
 801707a:	f000 000f 	and.w	r0, r0, #15
 801707e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017082:	6020      	str	r0, [r4, #0]
 8017084:	e7b5      	b.n	8016ff2 <__hexnan+0x7a>
 8017086:	2508      	movs	r5, #8
 8017088:	e7b3      	b.n	8016ff2 <__hexnan+0x7a>
 801708a:	9b01      	ldr	r3, [sp, #4]
 801708c:	2b00      	cmp	r3, #0
 801708e:	d0dd      	beq.n	801704c <__hexnan+0xd4>
 8017090:	f1c3 0320 	rsb	r3, r3, #32
 8017094:	f04f 32ff 	mov.w	r2, #4294967295
 8017098:	40da      	lsrs	r2, r3
 801709a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801709e:	4013      	ands	r3, r2
 80170a0:	f846 3c04 	str.w	r3, [r6, #-4]
 80170a4:	e7d2      	b.n	801704c <__hexnan+0xd4>
 80170a6:	3f04      	subs	r7, #4
 80170a8:	e7d0      	b.n	801704c <__hexnan+0xd4>
 80170aa:	2004      	movs	r0, #4
 80170ac:	e7d5      	b.n	801705a <__hexnan+0xe2>
	...

080170b0 <sbrk_aligned>:
 80170b0:	b570      	push	{r4, r5, r6, lr}
 80170b2:	4e0f      	ldr	r6, [pc, #60]	@ (80170f0 <sbrk_aligned+0x40>)
 80170b4:	460c      	mov	r4, r1
 80170b6:	6831      	ldr	r1, [r6, #0]
 80170b8:	4605      	mov	r5, r0
 80170ba:	b911      	cbnz	r1, 80170c2 <sbrk_aligned+0x12>
 80170bc:	f000 fe20 	bl	8017d00 <_sbrk_r>
 80170c0:	6030      	str	r0, [r6, #0]
 80170c2:	4621      	mov	r1, r4
 80170c4:	4628      	mov	r0, r5
 80170c6:	f000 fe1b 	bl	8017d00 <_sbrk_r>
 80170ca:	1c43      	adds	r3, r0, #1
 80170cc:	d103      	bne.n	80170d6 <sbrk_aligned+0x26>
 80170ce:	f04f 34ff 	mov.w	r4, #4294967295
 80170d2:	4620      	mov	r0, r4
 80170d4:	bd70      	pop	{r4, r5, r6, pc}
 80170d6:	1cc4      	adds	r4, r0, #3
 80170d8:	f024 0403 	bic.w	r4, r4, #3
 80170dc:	42a0      	cmp	r0, r4
 80170de:	d0f8      	beq.n	80170d2 <sbrk_aligned+0x22>
 80170e0:	1a21      	subs	r1, r4, r0
 80170e2:	4628      	mov	r0, r5
 80170e4:	f000 fe0c 	bl	8017d00 <_sbrk_r>
 80170e8:	3001      	adds	r0, #1
 80170ea:	d1f2      	bne.n	80170d2 <sbrk_aligned+0x22>
 80170ec:	e7ef      	b.n	80170ce <sbrk_aligned+0x1e>
 80170ee:	bf00      	nop
 80170f0:	2400675c 	.word	0x2400675c

080170f4 <_malloc_r>:
 80170f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80170f8:	1ccd      	adds	r5, r1, #3
 80170fa:	f025 0503 	bic.w	r5, r5, #3
 80170fe:	3508      	adds	r5, #8
 8017100:	2d0c      	cmp	r5, #12
 8017102:	bf38      	it	cc
 8017104:	250c      	movcc	r5, #12
 8017106:	2d00      	cmp	r5, #0
 8017108:	4606      	mov	r6, r0
 801710a:	db01      	blt.n	8017110 <_malloc_r+0x1c>
 801710c:	42a9      	cmp	r1, r5
 801710e:	d904      	bls.n	801711a <_malloc_r+0x26>
 8017110:	230c      	movs	r3, #12
 8017112:	6033      	str	r3, [r6, #0]
 8017114:	2000      	movs	r0, #0
 8017116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801711a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80171f0 <_malloc_r+0xfc>
 801711e:	f000 f87b 	bl	8017218 <__malloc_lock>
 8017122:	f8d8 3000 	ldr.w	r3, [r8]
 8017126:	461c      	mov	r4, r3
 8017128:	bb44      	cbnz	r4, 801717c <_malloc_r+0x88>
 801712a:	4629      	mov	r1, r5
 801712c:	4630      	mov	r0, r6
 801712e:	f7ff ffbf 	bl	80170b0 <sbrk_aligned>
 8017132:	1c43      	adds	r3, r0, #1
 8017134:	4604      	mov	r4, r0
 8017136:	d158      	bne.n	80171ea <_malloc_r+0xf6>
 8017138:	f8d8 4000 	ldr.w	r4, [r8]
 801713c:	4627      	mov	r7, r4
 801713e:	2f00      	cmp	r7, #0
 8017140:	d143      	bne.n	80171ca <_malloc_r+0xd6>
 8017142:	2c00      	cmp	r4, #0
 8017144:	d04b      	beq.n	80171de <_malloc_r+0xea>
 8017146:	6823      	ldr	r3, [r4, #0]
 8017148:	4639      	mov	r1, r7
 801714a:	4630      	mov	r0, r6
 801714c:	eb04 0903 	add.w	r9, r4, r3
 8017150:	f000 fdd6 	bl	8017d00 <_sbrk_r>
 8017154:	4581      	cmp	r9, r0
 8017156:	d142      	bne.n	80171de <_malloc_r+0xea>
 8017158:	6821      	ldr	r1, [r4, #0]
 801715a:	1a6d      	subs	r5, r5, r1
 801715c:	4629      	mov	r1, r5
 801715e:	4630      	mov	r0, r6
 8017160:	f7ff ffa6 	bl	80170b0 <sbrk_aligned>
 8017164:	3001      	adds	r0, #1
 8017166:	d03a      	beq.n	80171de <_malloc_r+0xea>
 8017168:	6823      	ldr	r3, [r4, #0]
 801716a:	442b      	add	r3, r5
 801716c:	6023      	str	r3, [r4, #0]
 801716e:	f8d8 3000 	ldr.w	r3, [r8]
 8017172:	685a      	ldr	r2, [r3, #4]
 8017174:	bb62      	cbnz	r2, 80171d0 <_malloc_r+0xdc>
 8017176:	f8c8 7000 	str.w	r7, [r8]
 801717a:	e00f      	b.n	801719c <_malloc_r+0xa8>
 801717c:	6822      	ldr	r2, [r4, #0]
 801717e:	1b52      	subs	r2, r2, r5
 8017180:	d420      	bmi.n	80171c4 <_malloc_r+0xd0>
 8017182:	2a0b      	cmp	r2, #11
 8017184:	d917      	bls.n	80171b6 <_malloc_r+0xc2>
 8017186:	1961      	adds	r1, r4, r5
 8017188:	42a3      	cmp	r3, r4
 801718a:	6025      	str	r5, [r4, #0]
 801718c:	bf18      	it	ne
 801718e:	6059      	strne	r1, [r3, #4]
 8017190:	6863      	ldr	r3, [r4, #4]
 8017192:	bf08      	it	eq
 8017194:	f8c8 1000 	streq.w	r1, [r8]
 8017198:	5162      	str	r2, [r4, r5]
 801719a:	604b      	str	r3, [r1, #4]
 801719c:	4630      	mov	r0, r6
 801719e:	f000 f841 	bl	8017224 <__malloc_unlock>
 80171a2:	f104 000b 	add.w	r0, r4, #11
 80171a6:	1d23      	adds	r3, r4, #4
 80171a8:	f020 0007 	bic.w	r0, r0, #7
 80171ac:	1ac2      	subs	r2, r0, r3
 80171ae:	bf1c      	itt	ne
 80171b0:	1a1b      	subne	r3, r3, r0
 80171b2:	50a3      	strne	r3, [r4, r2]
 80171b4:	e7af      	b.n	8017116 <_malloc_r+0x22>
 80171b6:	6862      	ldr	r2, [r4, #4]
 80171b8:	42a3      	cmp	r3, r4
 80171ba:	bf0c      	ite	eq
 80171bc:	f8c8 2000 	streq.w	r2, [r8]
 80171c0:	605a      	strne	r2, [r3, #4]
 80171c2:	e7eb      	b.n	801719c <_malloc_r+0xa8>
 80171c4:	4623      	mov	r3, r4
 80171c6:	6864      	ldr	r4, [r4, #4]
 80171c8:	e7ae      	b.n	8017128 <_malloc_r+0x34>
 80171ca:	463c      	mov	r4, r7
 80171cc:	687f      	ldr	r7, [r7, #4]
 80171ce:	e7b6      	b.n	801713e <_malloc_r+0x4a>
 80171d0:	461a      	mov	r2, r3
 80171d2:	685b      	ldr	r3, [r3, #4]
 80171d4:	42a3      	cmp	r3, r4
 80171d6:	d1fb      	bne.n	80171d0 <_malloc_r+0xdc>
 80171d8:	2300      	movs	r3, #0
 80171da:	6053      	str	r3, [r2, #4]
 80171dc:	e7de      	b.n	801719c <_malloc_r+0xa8>
 80171de:	230c      	movs	r3, #12
 80171e0:	6033      	str	r3, [r6, #0]
 80171e2:	4630      	mov	r0, r6
 80171e4:	f000 f81e 	bl	8017224 <__malloc_unlock>
 80171e8:	e794      	b.n	8017114 <_malloc_r+0x20>
 80171ea:	6005      	str	r5, [r0, #0]
 80171ec:	e7d6      	b.n	801719c <_malloc_r+0xa8>
 80171ee:	bf00      	nop
 80171f0:	24006760 	.word	0x24006760

080171f4 <__ascii_mbtowc>:
 80171f4:	b082      	sub	sp, #8
 80171f6:	b901      	cbnz	r1, 80171fa <__ascii_mbtowc+0x6>
 80171f8:	a901      	add	r1, sp, #4
 80171fa:	b142      	cbz	r2, 801720e <__ascii_mbtowc+0x1a>
 80171fc:	b14b      	cbz	r3, 8017212 <__ascii_mbtowc+0x1e>
 80171fe:	7813      	ldrb	r3, [r2, #0]
 8017200:	600b      	str	r3, [r1, #0]
 8017202:	7812      	ldrb	r2, [r2, #0]
 8017204:	1e10      	subs	r0, r2, #0
 8017206:	bf18      	it	ne
 8017208:	2001      	movne	r0, #1
 801720a:	b002      	add	sp, #8
 801720c:	4770      	bx	lr
 801720e:	4610      	mov	r0, r2
 8017210:	e7fb      	b.n	801720a <__ascii_mbtowc+0x16>
 8017212:	f06f 0001 	mvn.w	r0, #1
 8017216:	e7f8      	b.n	801720a <__ascii_mbtowc+0x16>

08017218 <__malloc_lock>:
 8017218:	4801      	ldr	r0, [pc, #4]	@ (8017220 <__malloc_lock+0x8>)
 801721a:	f7ff bbac 	b.w	8016976 <__retarget_lock_acquire_recursive>
 801721e:	bf00      	nop
 8017220:	24006758 	.word	0x24006758

08017224 <__malloc_unlock>:
 8017224:	4801      	ldr	r0, [pc, #4]	@ (801722c <__malloc_unlock+0x8>)
 8017226:	f7ff bba7 	b.w	8016978 <__retarget_lock_release_recursive>
 801722a:	bf00      	nop
 801722c:	24006758 	.word	0x24006758

08017230 <_Balloc>:
 8017230:	b570      	push	{r4, r5, r6, lr}
 8017232:	69c6      	ldr	r6, [r0, #28]
 8017234:	4604      	mov	r4, r0
 8017236:	460d      	mov	r5, r1
 8017238:	b976      	cbnz	r6, 8017258 <_Balloc+0x28>
 801723a:	2010      	movs	r0, #16
 801723c:	f000 fda2 	bl	8017d84 <malloc>
 8017240:	4602      	mov	r2, r0
 8017242:	61e0      	str	r0, [r4, #28]
 8017244:	b920      	cbnz	r0, 8017250 <_Balloc+0x20>
 8017246:	4b18      	ldr	r3, [pc, #96]	@ (80172a8 <_Balloc+0x78>)
 8017248:	4818      	ldr	r0, [pc, #96]	@ (80172ac <_Balloc+0x7c>)
 801724a:	216b      	movs	r1, #107	@ 0x6b
 801724c:	f000 fd68 	bl	8017d20 <__assert_func>
 8017250:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017254:	6006      	str	r6, [r0, #0]
 8017256:	60c6      	str	r6, [r0, #12]
 8017258:	69e6      	ldr	r6, [r4, #28]
 801725a:	68f3      	ldr	r3, [r6, #12]
 801725c:	b183      	cbz	r3, 8017280 <_Balloc+0x50>
 801725e:	69e3      	ldr	r3, [r4, #28]
 8017260:	68db      	ldr	r3, [r3, #12]
 8017262:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017266:	b9b8      	cbnz	r0, 8017298 <_Balloc+0x68>
 8017268:	2101      	movs	r1, #1
 801726a:	fa01 f605 	lsl.w	r6, r1, r5
 801726e:	1d72      	adds	r2, r6, #5
 8017270:	0092      	lsls	r2, r2, #2
 8017272:	4620      	mov	r0, r4
 8017274:	f000 fd72 	bl	8017d5c <_calloc_r>
 8017278:	b160      	cbz	r0, 8017294 <_Balloc+0x64>
 801727a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801727e:	e00e      	b.n	801729e <_Balloc+0x6e>
 8017280:	2221      	movs	r2, #33	@ 0x21
 8017282:	2104      	movs	r1, #4
 8017284:	4620      	mov	r0, r4
 8017286:	f000 fd69 	bl	8017d5c <_calloc_r>
 801728a:	69e3      	ldr	r3, [r4, #28]
 801728c:	60f0      	str	r0, [r6, #12]
 801728e:	68db      	ldr	r3, [r3, #12]
 8017290:	2b00      	cmp	r3, #0
 8017292:	d1e4      	bne.n	801725e <_Balloc+0x2e>
 8017294:	2000      	movs	r0, #0
 8017296:	bd70      	pop	{r4, r5, r6, pc}
 8017298:	6802      	ldr	r2, [r0, #0]
 801729a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801729e:	2300      	movs	r3, #0
 80172a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80172a4:	e7f7      	b.n	8017296 <_Balloc+0x66>
 80172a6:	bf00      	nop
 80172a8:	08018bb2 	.word	0x08018bb2
 80172ac:	08018bc9 	.word	0x08018bc9

080172b0 <_Bfree>:
 80172b0:	b570      	push	{r4, r5, r6, lr}
 80172b2:	69c6      	ldr	r6, [r0, #28]
 80172b4:	4605      	mov	r5, r0
 80172b6:	460c      	mov	r4, r1
 80172b8:	b976      	cbnz	r6, 80172d8 <_Bfree+0x28>
 80172ba:	2010      	movs	r0, #16
 80172bc:	f000 fd62 	bl	8017d84 <malloc>
 80172c0:	4602      	mov	r2, r0
 80172c2:	61e8      	str	r0, [r5, #28]
 80172c4:	b920      	cbnz	r0, 80172d0 <_Bfree+0x20>
 80172c6:	4b09      	ldr	r3, [pc, #36]	@ (80172ec <_Bfree+0x3c>)
 80172c8:	4809      	ldr	r0, [pc, #36]	@ (80172f0 <_Bfree+0x40>)
 80172ca:	218f      	movs	r1, #143	@ 0x8f
 80172cc:	f000 fd28 	bl	8017d20 <__assert_func>
 80172d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80172d4:	6006      	str	r6, [r0, #0]
 80172d6:	60c6      	str	r6, [r0, #12]
 80172d8:	b13c      	cbz	r4, 80172ea <_Bfree+0x3a>
 80172da:	69eb      	ldr	r3, [r5, #28]
 80172dc:	6862      	ldr	r2, [r4, #4]
 80172de:	68db      	ldr	r3, [r3, #12]
 80172e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80172e4:	6021      	str	r1, [r4, #0]
 80172e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80172ea:	bd70      	pop	{r4, r5, r6, pc}
 80172ec:	08018bb2 	.word	0x08018bb2
 80172f0:	08018bc9 	.word	0x08018bc9

080172f4 <__multadd>:
 80172f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172f8:	690d      	ldr	r5, [r1, #16]
 80172fa:	4607      	mov	r7, r0
 80172fc:	460c      	mov	r4, r1
 80172fe:	461e      	mov	r6, r3
 8017300:	f101 0c14 	add.w	ip, r1, #20
 8017304:	2000      	movs	r0, #0
 8017306:	f8dc 3000 	ldr.w	r3, [ip]
 801730a:	b299      	uxth	r1, r3
 801730c:	fb02 6101 	mla	r1, r2, r1, r6
 8017310:	0c1e      	lsrs	r6, r3, #16
 8017312:	0c0b      	lsrs	r3, r1, #16
 8017314:	fb02 3306 	mla	r3, r2, r6, r3
 8017318:	b289      	uxth	r1, r1
 801731a:	3001      	adds	r0, #1
 801731c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8017320:	4285      	cmp	r5, r0
 8017322:	f84c 1b04 	str.w	r1, [ip], #4
 8017326:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801732a:	dcec      	bgt.n	8017306 <__multadd+0x12>
 801732c:	b30e      	cbz	r6, 8017372 <__multadd+0x7e>
 801732e:	68a3      	ldr	r3, [r4, #8]
 8017330:	42ab      	cmp	r3, r5
 8017332:	dc19      	bgt.n	8017368 <__multadd+0x74>
 8017334:	6861      	ldr	r1, [r4, #4]
 8017336:	4638      	mov	r0, r7
 8017338:	3101      	adds	r1, #1
 801733a:	f7ff ff79 	bl	8017230 <_Balloc>
 801733e:	4680      	mov	r8, r0
 8017340:	b928      	cbnz	r0, 801734e <__multadd+0x5a>
 8017342:	4602      	mov	r2, r0
 8017344:	4b0c      	ldr	r3, [pc, #48]	@ (8017378 <__multadd+0x84>)
 8017346:	480d      	ldr	r0, [pc, #52]	@ (801737c <__multadd+0x88>)
 8017348:	21ba      	movs	r1, #186	@ 0xba
 801734a:	f000 fce9 	bl	8017d20 <__assert_func>
 801734e:	6922      	ldr	r2, [r4, #16]
 8017350:	3202      	adds	r2, #2
 8017352:	f104 010c 	add.w	r1, r4, #12
 8017356:	0092      	lsls	r2, r2, #2
 8017358:	300c      	adds	r0, #12
 801735a:	f7ff fb0e 	bl	801697a <memcpy>
 801735e:	4621      	mov	r1, r4
 8017360:	4638      	mov	r0, r7
 8017362:	f7ff ffa5 	bl	80172b0 <_Bfree>
 8017366:	4644      	mov	r4, r8
 8017368:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801736c:	3501      	adds	r5, #1
 801736e:	615e      	str	r6, [r3, #20]
 8017370:	6125      	str	r5, [r4, #16]
 8017372:	4620      	mov	r0, r4
 8017374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017378:	08018b41 	.word	0x08018b41
 801737c:	08018bc9 	.word	0x08018bc9

08017380 <__s2b>:
 8017380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017384:	460c      	mov	r4, r1
 8017386:	4615      	mov	r5, r2
 8017388:	461f      	mov	r7, r3
 801738a:	2209      	movs	r2, #9
 801738c:	3308      	adds	r3, #8
 801738e:	4606      	mov	r6, r0
 8017390:	fb93 f3f2 	sdiv	r3, r3, r2
 8017394:	2100      	movs	r1, #0
 8017396:	2201      	movs	r2, #1
 8017398:	429a      	cmp	r2, r3
 801739a:	db09      	blt.n	80173b0 <__s2b+0x30>
 801739c:	4630      	mov	r0, r6
 801739e:	f7ff ff47 	bl	8017230 <_Balloc>
 80173a2:	b940      	cbnz	r0, 80173b6 <__s2b+0x36>
 80173a4:	4602      	mov	r2, r0
 80173a6:	4b19      	ldr	r3, [pc, #100]	@ (801740c <__s2b+0x8c>)
 80173a8:	4819      	ldr	r0, [pc, #100]	@ (8017410 <__s2b+0x90>)
 80173aa:	21d3      	movs	r1, #211	@ 0xd3
 80173ac:	f000 fcb8 	bl	8017d20 <__assert_func>
 80173b0:	0052      	lsls	r2, r2, #1
 80173b2:	3101      	adds	r1, #1
 80173b4:	e7f0      	b.n	8017398 <__s2b+0x18>
 80173b6:	9b08      	ldr	r3, [sp, #32]
 80173b8:	6143      	str	r3, [r0, #20]
 80173ba:	2d09      	cmp	r5, #9
 80173bc:	f04f 0301 	mov.w	r3, #1
 80173c0:	6103      	str	r3, [r0, #16]
 80173c2:	dd16      	ble.n	80173f2 <__s2b+0x72>
 80173c4:	f104 0909 	add.w	r9, r4, #9
 80173c8:	46c8      	mov	r8, r9
 80173ca:	442c      	add	r4, r5
 80173cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80173d0:	4601      	mov	r1, r0
 80173d2:	3b30      	subs	r3, #48	@ 0x30
 80173d4:	220a      	movs	r2, #10
 80173d6:	4630      	mov	r0, r6
 80173d8:	f7ff ff8c 	bl	80172f4 <__multadd>
 80173dc:	45a0      	cmp	r8, r4
 80173de:	d1f5      	bne.n	80173cc <__s2b+0x4c>
 80173e0:	f1a5 0408 	sub.w	r4, r5, #8
 80173e4:	444c      	add	r4, r9
 80173e6:	1b2d      	subs	r5, r5, r4
 80173e8:	1963      	adds	r3, r4, r5
 80173ea:	42bb      	cmp	r3, r7
 80173ec:	db04      	blt.n	80173f8 <__s2b+0x78>
 80173ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80173f2:	340a      	adds	r4, #10
 80173f4:	2509      	movs	r5, #9
 80173f6:	e7f6      	b.n	80173e6 <__s2b+0x66>
 80173f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80173fc:	4601      	mov	r1, r0
 80173fe:	3b30      	subs	r3, #48	@ 0x30
 8017400:	220a      	movs	r2, #10
 8017402:	4630      	mov	r0, r6
 8017404:	f7ff ff76 	bl	80172f4 <__multadd>
 8017408:	e7ee      	b.n	80173e8 <__s2b+0x68>
 801740a:	bf00      	nop
 801740c:	08018b41 	.word	0x08018b41
 8017410:	08018bc9 	.word	0x08018bc9

08017414 <__hi0bits>:
 8017414:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8017418:	4603      	mov	r3, r0
 801741a:	bf36      	itet	cc
 801741c:	0403      	lslcc	r3, r0, #16
 801741e:	2000      	movcs	r0, #0
 8017420:	2010      	movcc	r0, #16
 8017422:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8017426:	bf3c      	itt	cc
 8017428:	021b      	lslcc	r3, r3, #8
 801742a:	3008      	addcc	r0, #8
 801742c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8017430:	bf3c      	itt	cc
 8017432:	011b      	lslcc	r3, r3, #4
 8017434:	3004      	addcc	r0, #4
 8017436:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801743a:	bf3c      	itt	cc
 801743c:	009b      	lslcc	r3, r3, #2
 801743e:	3002      	addcc	r0, #2
 8017440:	2b00      	cmp	r3, #0
 8017442:	db05      	blt.n	8017450 <__hi0bits+0x3c>
 8017444:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8017448:	f100 0001 	add.w	r0, r0, #1
 801744c:	bf08      	it	eq
 801744e:	2020      	moveq	r0, #32
 8017450:	4770      	bx	lr

08017452 <__lo0bits>:
 8017452:	6803      	ldr	r3, [r0, #0]
 8017454:	4602      	mov	r2, r0
 8017456:	f013 0007 	ands.w	r0, r3, #7
 801745a:	d00b      	beq.n	8017474 <__lo0bits+0x22>
 801745c:	07d9      	lsls	r1, r3, #31
 801745e:	d421      	bmi.n	80174a4 <__lo0bits+0x52>
 8017460:	0798      	lsls	r0, r3, #30
 8017462:	bf49      	itett	mi
 8017464:	085b      	lsrmi	r3, r3, #1
 8017466:	089b      	lsrpl	r3, r3, #2
 8017468:	2001      	movmi	r0, #1
 801746a:	6013      	strmi	r3, [r2, #0]
 801746c:	bf5c      	itt	pl
 801746e:	6013      	strpl	r3, [r2, #0]
 8017470:	2002      	movpl	r0, #2
 8017472:	4770      	bx	lr
 8017474:	b299      	uxth	r1, r3
 8017476:	b909      	cbnz	r1, 801747c <__lo0bits+0x2a>
 8017478:	0c1b      	lsrs	r3, r3, #16
 801747a:	2010      	movs	r0, #16
 801747c:	b2d9      	uxtb	r1, r3
 801747e:	b909      	cbnz	r1, 8017484 <__lo0bits+0x32>
 8017480:	3008      	adds	r0, #8
 8017482:	0a1b      	lsrs	r3, r3, #8
 8017484:	0719      	lsls	r1, r3, #28
 8017486:	bf04      	itt	eq
 8017488:	091b      	lsreq	r3, r3, #4
 801748a:	3004      	addeq	r0, #4
 801748c:	0799      	lsls	r1, r3, #30
 801748e:	bf04      	itt	eq
 8017490:	089b      	lsreq	r3, r3, #2
 8017492:	3002      	addeq	r0, #2
 8017494:	07d9      	lsls	r1, r3, #31
 8017496:	d403      	bmi.n	80174a0 <__lo0bits+0x4e>
 8017498:	085b      	lsrs	r3, r3, #1
 801749a:	f100 0001 	add.w	r0, r0, #1
 801749e:	d003      	beq.n	80174a8 <__lo0bits+0x56>
 80174a0:	6013      	str	r3, [r2, #0]
 80174a2:	4770      	bx	lr
 80174a4:	2000      	movs	r0, #0
 80174a6:	4770      	bx	lr
 80174a8:	2020      	movs	r0, #32
 80174aa:	4770      	bx	lr

080174ac <__i2b>:
 80174ac:	b510      	push	{r4, lr}
 80174ae:	460c      	mov	r4, r1
 80174b0:	2101      	movs	r1, #1
 80174b2:	f7ff febd 	bl	8017230 <_Balloc>
 80174b6:	4602      	mov	r2, r0
 80174b8:	b928      	cbnz	r0, 80174c6 <__i2b+0x1a>
 80174ba:	4b05      	ldr	r3, [pc, #20]	@ (80174d0 <__i2b+0x24>)
 80174bc:	4805      	ldr	r0, [pc, #20]	@ (80174d4 <__i2b+0x28>)
 80174be:	f240 1145 	movw	r1, #325	@ 0x145
 80174c2:	f000 fc2d 	bl	8017d20 <__assert_func>
 80174c6:	2301      	movs	r3, #1
 80174c8:	6144      	str	r4, [r0, #20]
 80174ca:	6103      	str	r3, [r0, #16]
 80174cc:	bd10      	pop	{r4, pc}
 80174ce:	bf00      	nop
 80174d0:	08018b41 	.word	0x08018b41
 80174d4:	08018bc9 	.word	0x08018bc9

080174d8 <__multiply>:
 80174d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174dc:	4614      	mov	r4, r2
 80174de:	690a      	ldr	r2, [r1, #16]
 80174e0:	6923      	ldr	r3, [r4, #16]
 80174e2:	429a      	cmp	r2, r3
 80174e4:	bfa8      	it	ge
 80174e6:	4623      	movge	r3, r4
 80174e8:	460f      	mov	r7, r1
 80174ea:	bfa4      	itt	ge
 80174ec:	460c      	movge	r4, r1
 80174ee:	461f      	movge	r7, r3
 80174f0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80174f4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80174f8:	68a3      	ldr	r3, [r4, #8]
 80174fa:	6861      	ldr	r1, [r4, #4]
 80174fc:	eb0a 0609 	add.w	r6, sl, r9
 8017500:	42b3      	cmp	r3, r6
 8017502:	b085      	sub	sp, #20
 8017504:	bfb8      	it	lt
 8017506:	3101      	addlt	r1, #1
 8017508:	f7ff fe92 	bl	8017230 <_Balloc>
 801750c:	b930      	cbnz	r0, 801751c <__multiply+0x44>
 801750e:	4602      	mov	r2, r0
 8017510:	4b44      	ldr	r3, [pc, #272]	@ (8017624 <__multiply+0x14c>)
 8017512:	4845      	ldr	r0, [pc, #276]	@ (8017628 <__multiply+0x150>)
 8017514:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8017518:	f000 fc02 	bl	8017d20 <__assert_func>
 801751c:	f100 0514 	add.w	r5, r0, #20
 8017520:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8017524:	462b      	mov	r3, r5
 8017526:	2200      	movs	r2, #0
 8017528:	4543      	cmp	r3, r8
 801752a:	d321      	bcc.n	8017570 <__multiply+0x98>
 801752c:	f107 0114 	add.w	r1, r7, #20
 8017530:	f104 0214 	add.w	r2, r4, #20
 8017534:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8017538:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801753c:	9302      	str	r3, [sp, #8]
 801753e:	1b13      	subs	r3, r2, r4
 8017540:	3b15      	subs	r3, #21
 8017542:	f023 0303 	bic.w	r3, r3, #3
 8017546:	3304      	adds	r3, #4
 8017548:	f104 0715 	add.w	r7, r4, #21
 801754c:	42ba      	cmp	r2, r7
 801754e:	bf38      	it	cc
 8017550:	2304      	movcc	r3, #4
 8017552:	9301      	str	r3, [sp, #4]
 8017554:	9b02      	ldr	r3, [sp, #8]
 8017556:	9103      	str	r1, [sp, #12]
 8017558:	428b      	cmp	r3, r1
 801755a:	d80c      	bhi.n	8017576 <__multiply+0x9e>
 801755c:	2e00      	cmp	r6, #0
 801755e:	dd03      	ble.n	8017568 <__multiply+0x90>
 8017560:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8017564:	2b00      	cmp	r3, #0
 8017566:	d05b      	beq.n	8017620 <__multiply+0x148>
 8017568:	6106      	str	r6, [r0, #16]
 801756a:	b005      	add	sp, #20
 801756c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017570:	f843 2b04 	str.w	r2, [r3], #4
 8017574:	e7d8      	b.n	8017528 <__multiply+0x50>
 8017576:	f8b1 a000 	ldrh.w	sl, [r1]
 801757a:	f1ba 0f00 	cmp.w	sl, #0
 801757e:	d024      	beq.n	80175ca <__multiply+0xf2>
 8017580:	f104 0e14 	add.w	lr, r4, #20
 8017584:	46a9      	mov	r9, r5
 8017586:	f04f 0c00 	mov.w	ip, #0
 801758a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801758e:	f8d9 3000 	ldr.w	r3, [r9]
 8017592:	fa1f fb87 	uxth.w	fp, r7
 8017596:	b29b      	uxth	r3, r3
 8017598:	fb0a 330b 	mla	r3, sl, fp, r3
 801759c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80175a0:	f8d9 7000 	ldr.w	r7, [r9]
 80175a4:	4463      	add	r3, ip
 80175a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80175aa:	fb0a c70b 	mla	r7, sl, fp, ip
 80175ae:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80175b2:	b29b      	uxth	r3, r3
 80175b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80175b8:	4572      	cmp	r2, lr
 80175ba:	f849 3b04 	str.w	r3, [r9], #4
 80175be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80175c2:	d8e2      	bhi.n	801758a <__multiply+0xb2>
 80175c4:	9b01      	ldr	r3, [sp, #4]
 80175c6:	f845 c003 	str.w	ip, [r5, r3]
 80175ca:	9b03      	ldr	r3, [sp, #12]
 80175cc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80175d0:	3104      	adds	r1, #4
 80175d2:	f1b9 0f00 	cmp.w	r9, #0
 80175d6:	d021      	beq.n	801761c <__multiply+0x144>
 80175d8:	682b      	ldr	r3, [r5, #0]
 80175da:	f104 0c14 	add.w	ip, r4, #20
 80175de:	46ae      	mov	lr, r5
 80175e0:	f04f 0a00 	mov.w	sl, #0
 80175e4:	f8bc b000 	ldrh.w	fp, [ip]
 80175e8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80175ec:	fb09 770b 	mla	r7, r9, fp, r7
 80175f0:	4457      	add	r7, sl
 80175f2:	b29b      	uxth	r3, r3
 80175f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80175f8:	f84e 3b04 	str.w	r3, [lr], #4
 80175fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8017600:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017604:	f8be 3000 	ldrh.w	r3, [lr]
 8017608:	fb09 330a 	mla	r3, r9, sl, r3
 801760c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8017610:	4562      	cmp	r2, ip
 8017612:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017616:	d8e5      	bhi.n	80175e4 <__multiply+0x10c>
 8017618:	9f01      	ldr	r7, [sp, #4]
 801761a:	51eb      	str	r3, [r5, r7]
 801761c:	3504      	adds	r5, #4
 801761e:	e799      	b.n	8017554 <__multiply+0x7c>
 8017620:	3e01      	subs	r6, #1
 8017622:	e79b      	b.n	801755c <__multiply+0x84>
 8017624:	08018b41 	.word	0x08018b41
 8017628:	08018bc9 	.word	0x08018bc9

0801762c <__pow5mult>:
 801762c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017630:	4615      	mov	r5, r2
 8017632:	f012 0203 	ands.w	r2, r2, #3
 8017636:	4607      	mov	r7, r0
 8017638:	460e      	mov	r6, r1
 801763a:	d007      	beq.n	801764c <__pow5mult+0x20>
 801763c:	4c25      	ldr	r4, [pc, #148]	@ (80176d4 <__pow5mult+0xa8>)
 801763e:	3a01      	subs	r2, #1
 8017640:	2300      	movs	r3, #0
 8017642:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017646:	f7ff fe55 	bl	80172f4 <__multadd>
 801764a:	4606      	mov	r6, r0
 801764c:	10ad      	asrs	r5, r5, #2
 801764e:	d03d      	beq.n	80176cc <__pow5mult+0xa0>
 8017650:	69fc      	ldr	r4, [r7, #28]
 8017652:	b97c      	cbnz	r4, 8017674 <__pow5mult+0x48>
 8017654:	2010      	movs	r0, #16
 8017656:	f000 fb95 	bl	8017d84 <malloc>
 801765a:	4602      	mov	r2, r0
 801765c:	61f8      	str	r0, [r7, #28]
 801765e:	b928      	cbnz	r0, 801766c <__pow5mult+0x40>
 8017660:	4b1d      	ldr	r3, [pc, #116]	@ (80176d8 <__pow5mult+0xac>)
 8017662:	481e      	ldr	r0, [pc, #120]	@ (80176dc <__pow5mult+0xb0>)
 8017664:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8017668:	f000 fb5a 	bl	8017d20 <__assert_func>
 801766c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017670:	6004      	str	r4, [r0, #0]
 8017672:	60c4      	str	r4, [r0, #12]
 8017674:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8017678:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801767c:	b94c      	cbnz	r4, 8017692 <__pow5mult+0x66>
 801767e:	f240 2171 	movw	r1, #625	@ 0x271
 8017682:	4638      	mov	r0, r7
 8017684:	f7ff ff12 	bl	80174ac <__i2b>
 8017688:	2300      	movs	r3, #0
 801768a:	f8c8 0008 	str.w	r0, [r8, #8]
 801768e:	4604      	mov	r4, r0
 8017690:	6003      	str	r3, [r0, #0]
 8017692:	f04f 0900 	mov.w	r9, #0
 8017696:	07eb      	lsls	r3, r5, #31
 8017698:	d50a      	bpl.n	80176b0 <__pow5mult+0x84>
 801769a:	4631      	mov	r1, r6
 801769c:	4622      	mov	r2, r4
 801769e:	4638      	mov	r0, r7
 80176a0:	f7ff ff1a 	bl	80174d8 <__multiply>
 80176a4:	4631      	mov	r1, r6
 80176a6:	4680      	mov	r8, r0
 80176a8:	4638      	mov	r0, r7
 80176aa:	f7ff fe01 	bl	80172b0 <_Bfree>
 80176ae:	4646      	mov	r6, r8
 80176b0:	106d      	asrs	r5, r5, #1
 80176b2:	d00b      	beq.n	80176cc <__pow5mult+0xa0>
 80176b4:	6820      	ldr	r0, [r4, #0]
 80176b6:	b938      	cbnz	r0, 80176c8 <__pow5mult+0x9c>
 80176b8:	4622      	mov	r2, r4
 80176ba:	4621      	mov	r1, r4
 80176bc:	4638      	mov	r0, r7
 80176be:	f7ff ff0b 	bl	80174d8 <__multiply>
 80176c2:	6020      	str	r0, [r4, #0]
 80176c4:	f8c0 9000 	str.w	r9, [r0]
 80176c8:	4604      	mov	r4, r0
 80176ca:	e7e4      	b.n	8017696 <__pow5mult+0x6a>
 80176cc:	4630      	mov	r0, r6
 80176ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80176d2:	bf00      	nop
 80176d4:	08018c24 	.word	0x08018c24
 80176d8:	08018bb2 	.word	0x08018bb2
 80176dc:	08018bc9 	.word	0x08018bc9

080176e0 <__lshift>:
 80176e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80176e4:	460c      	mov	r4, r1
 80176e6:	6849      	ldr	r1, [r1, #4]
 80176e8:	6923      	ldr	r3, [r4, #16]
 80176ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80176ee:	68a3      	ldr	r3, [r4, #8]
 80176f0:	4607      	mov	r7, r0
 80176f2:	4691      	mov	r9, r2
 80176f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80176f8:	f108 0601 	add.w	r6, r8, #1
 80176fc:	42b3      	cmp	r3, r6
 80176fe:	db0b      	blt.n	8017718 <__lshift+0x38>
 8017700:	4638      	mov	r0, r7
 8017702:	f7ff fd95 	bl	8017230 <_Balloc>
 8017706:	4605      	mov	r5, r0
 8017708:	b948      	cbnz	r0, 801771e <__lshift+0x3e>
 801770a:	4602      	mov	r2, r0
 801770c:	4b28      	ldr	r3, [pc, #160]	@ (80177b0 <__lshift+0xd0>)
 801770e:	4829      	ldr	r0, [pc, #164]	@ (80177b4 <__lshift+0xd4>)
 8017710:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8017714:	f000 fb04 	bl	8017d20 <__assert_func>
 8017718:	3101      	adds	r1, #1
 801771a:	005b      	lsls	r3, r3, #1
 801771c:	e7ee      	b.n	80176fc <__lshift+0x1c>
 801771e:	2300      	movs	r3, #0
 8017720:	f100 0114 	add.w	r1, r0, #20
 8017724:	f100 0210 	add.w	r2, r0, #16
 8017728:	4618      	mov	r0, r3
 801772a:	4553      	cmp	r3, sl
 801772c:	db33      	blt.n	8017796 <__lshift+0xb6>
 801772e:	6920      	ldr	r0, [r4, #16]
 8017730:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017734:	f104 0314 	add.w	r3, r4, #20
 8017738:	f019 091f 	ands.w	r9, r9, #31
 801773c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017740:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017744:	d02b      	beq.n	801779e <__lshift+0xbe>
 8017746:	f1c9 0e20 	rsb	lr, r9, #32
 801774a:	468a      	mov	sl, r1
 801774c:	2200      	movs	r2, #0
 801774e:	6818      	ldr	r0, [r3, #0]
 8017750:	fa00 f009 	lsl.w	r0, r0, r9
 8017754:	4310      	orrs	r0, r2
 8017756:	f84a 0b04 	str.w	r0, [sl], #4
 801775a:	f853 2b04 	ldr.w	r2, [r3], #4
 801775e:	459c      	cmp	ip, r3
 8017760:	fa22 f20e 	lsr.w	r2, r2, lr
 8017764:	d8f3      	bhi.n	801774e <__lshift+0x6e>
 8017766:	ebac 0304 	sub.w	r3, ip, r4
 801776a:	3b15      	subs	r3, #21
 801776c:	f023 0303 	bic.w	r3, r3, #3
 8017770:	3304      	adds	r3, #4
 8017772:	f104 0015 	add.w	r0, r4, #21
 8017776:	4584      	cmp	ip, r0
 8017778:	bf38      	it	cc
 801777a:	2304      	movcc	r3, #4
 801777c:	50ca      	str	r2, [r1, r3]
 801777e:	b10a      	cbz	r2, 8017784 <__lshift+0xa4>
 8017780:	f108 0602 	add.w	r6, r8, #2
 8017784:	3e01      	subs	r6, #1
 8017786:	4638      	mov	r0, r7
 8017788:	612e      	str	r6, [r5, #16]
 801778a:	4621      	mov	r1, r4
 801778c:	f7ff fd90 	bl	80172b0 <_Bfree>
 8017790:	4628      	mov	r0, r5
 8017792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017796:	f842 0f04 	str.w	r0, [r2, #4]!
 801779a:	3301      	adds	r3, #1
 801779c:	e7c5      	b.n	801772a <__lshift+0x4a>
 801779e:	3904      	subs	r1, #4
 80177a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80177a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80177a8:	459c      	cmp	ip, r3
 80177aa:	d8f9      	bhi.n	80177a0 <__lshift+0xc0>
 80177ac:	e7ea      	b.n	8017784 <__lshift+0xa4>
 80177ae:	bf00      	nop
 80177b0:	08018b41 	.word	0x08018b41
 80177b4:	08018bc9 	.word	0x08018bc9

080177b8 <__mcmp>:
 80177b8:	690a      	ldr	r2, [r1, #16]
 80177ba:	4603      	mov	r3, r0
 80177bc:	6900      	ldr	r0, [r0, #16]
 80177be:	1a80      	subs	r0, r0, r2
 80177c0:	b530      	push	{r4, r5, lr}
 80177c2:	d10e      	bne.n	80177e2 <__mcmp+0x2a>
 80177c4:	3314      	adds	r3, #20
 80177c6:	3114      	adds	r1, #20
 80177c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80177cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80177d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80177d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80177d8:	4295      	cmp	r5, r2
 80177da:	d003      	beq.n	80177e4 <__mcmp+0x2c>
 80177dc:	d205      	bcs.n	80177ea <__mcmp+0x32>
 80177de:	f04f 30ff 	mov.w	r0, #4294967295
 80177e2:	bd30      	pop	{r4, r5, pc}
 80177e4:	42a3      	cmp	r3, r4
 80177e6:	d3f3      	bcc.n	80177d0 <__mcmp+0x18>
 80177e8:	e7fb      	b.n	80177e2 <__mcmp+0x2a>
 80177ea:	2001      	movs	r0, #1
 80177ec:	e7f9      	b.n	80177e2 <__mcmp+0x2a>
	...

080177f0 <__mdiff>:
 80177f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177f4:	4689      	mov	r9, r1
 80177f6:	4606      	mov	r6, r0
 80177f8:	4611      	mov	r1, r2
 80177fa:	4648      	mov	r0, r9
 80177fc:	4614      	mov	r4, r2
 80177fe:	f7ff ffdb 	bl	80177b8 <__mcmp>
 8017802:	1e05      	subs	r5, r0, #0
 8017804:	d112      	bne.n	801782c <__mdiff+0x3c>
 8017806:	4629      	mov	r1, r5
 8017808:	4630      	mov	r0, r6
 801780a:	f7ff fd11 	bl	8017230 <_Balloc>
 801780e:	4602      	mov	r2, r0
 8017810:	b928      	cbnz	r0, 801781e <__mdiff+0x2e>
 8017812:	4b3f      	ldr	r3, [pc, #252]	@ (8017910 <__mdiff+0x120>)
 8017814:	f240 2137 	movw	r1, #567	@ 0x237
 8017818:	483e      	ldr	r0, [pc, #248]	@ (8017914 <__mdiff+0x124>)
 801781a:	f000 fa81 	bl	8017d20 <__assert_func>
 801781e:	2301      	movs	r3, #1
 8017820:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017824:	4610      	mov	r0, r2
 8017826:	b003      	add	sp, #12
 8017828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801782c:	bfbc      	itt	lt
 801782e:	464b      	movlt	r3, r9
 8017830:	46a1      	movlt	r9, r4
 8017832:	4630      	mov	r0, r6
 8017834:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8017838:	bfba      	itte	lt
 801783a:	461c      	movlt	r4, r3
 801783c:	2501      	movlt	r5, #1
 801783e:	2500      	movge	r5, #0
 8017840:	f7ff fcf6 	bl	8017230 <_Balloc>
 8017844:	4602      	mov	r2, r0
 8017846:	b918      	cbnz	r0, 8017850 <__mdiff+0x60>
 8017848:	4b31      	ldr	r3, [pc, #196]	@ (8017910 <__mdiff+0x120>)
 801784a:	f240 2145 	movw	r1, #581	@ 0x245
 801784e:	e7e3      	b.n	8017818 <__mdiff+0x28>
 8017850:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8017854:	6926      	ldr	r6, [r4, #16]
 8017856:	60c5      	str	r5, [r0, #12]
 8017858:	f109 0310 	add.w	r3, r9, #16
 801785c:	f109 0514 	add.w	r5, r9, #20
 8017860:	f104 0e14 	add.w	lr, r4, #20
 8017864:	f100 0b14 	add.w	fp, r0, #20
 8017868:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801786c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8017870:	9301      	str	r3, [sp, #4]
 8017872:	46d9      	mov	r9, fp
 8017874:	f04f 0c00 	mov.w	ip, #0
 8017878:	9b01      	ldr	r3, [sp, #4]
 801787a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801787e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8017882:	9301      	str	r3, [sp, #4]
 8017884:	fa1f f38a 	uxth.w	r3, sl
 8017888:	4619      	mov	r1, r3
 801788a:	b283      	uxth	r3, r0
 801788c:	1acb      	subs	r3, r1, r3
 801788e:	0c00      	lsrs	r0, r0, #16
 8017890:	4463      	add	r3, ip
 8017892:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8017896:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801789a:	b29b      	uxth	r3, r3
 801789c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80178a0:	4576      	cmp	r6, lr
 80178a2:	f849 3b04 	str.w	r3, [r9], #4
 80178a6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80178aa:	d8e5      	bhi.n	8017878 <__mdiff+0x88>
 80178ac:	1b33      	subs	r3, r6, r4
 80178ae:	3b15      	subs	r3, #21
 80178b0:	f023 0303 	bic.w	r3, r3, #3
 80178b4:	3415      	adds	r4, #21
 80178b6:	3304      	adds	r3, #4
 80178b8:	42a6      	cmp	r6, r4
 80178ba:	bf38      	it	cc
 80178bc:	2304      	movcc	r3, #4
 80178be:	441d      	add	r5, r3
 80178c0:	445b      	add	r3, fp
 80178c2:	461e      	mov	r6, r3
 80178c4:	462c      	mov	r4, r5
 80178c6:	4544      	cmp	r4, r8
 80178c8:	d30e      	bcc.n	80178e8 <__mdiff+0xf8>
 80178ca:	f108 0103 	add.w	r1, r8, #3
 80178ce:	1b49      	subs	r1, r1, r5
 80178d0:	f021 0103 	bic.w	r1, r1, #3
 80178d4:	3d03      	subs	r5, #3
 80178d6:	45a8      	cmp	r8, r5
 80178d8:	bf38      	it	cc
 80178da:	2100      	movcc	r1, #0
 80178dc:	440b      	add	r3, r1
 80178de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80178e2:	b191      	cbz	r1, 801790a <__mdiff+0x11a>
 80178e4:	6117      	str	r7, [r2, #16]
 80178e6:	e79d      	b.n	8017824 <__mdiff+0x34>
 80178e8:	f854 1b04 	ldr.w	r1, [r4], #4
 80178ec:	46e6      	mov	lr, ip
 80178ee:	0c08      	lsrs	r0, r1, #16
 80178f0:	fa1c fc81 	uxtah	ip, ip, r1
 80178f4:	4471      	add	r1, lr
 80178f6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80178fa:	b289      	uxth	r1, r1
 80178fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8017900:	f846 1b04 	str.w	r1, [r6], #4
 8017904:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8017908:	e7dd      	b.n	80178c6 <__mdiff+0xd6>
 801790a:	3f01      	subs	r7, #1
 801790c:	e7e7      	b.n	80178de <__mdiff+0xee>
 801790e:	bf00      	nop
 8017910:	08018b41 	.word	0x08018b41
 8017914:	08018bc9 	.word	0x08018bc9

08017918 <__ulp>:
 8017918:	b082      	sub	sp, #8
 801791a:	ed8d 0b00 	vstr	d0, [sp]
 801791e:	9a01      	ldr	r2, [sp, #4]
 8017920:	4b0f      	ldr	r3, [pc, #60]	@ (8017960 <__ulp+0x48>)
 8017922:	4013      	ands	r3, r2
 8017924:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8017928:	2b00      	cmp	r3, #0
 801792a:	dc08      	bgt.n	801793e <__ulp+0x26>
 801792c:	425b      	negs	r3, r3
 801792e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8017932:	ea4f 5223 	mov.w	r2, r3, asr #20
 8017936:	da04      	bge.n	8017942 <__ulp+0x2a>
 8017938:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801793c:	4113      	asrs	r3, r2
 801793e:	2200      	movs	r2, #0
 8017940:	e008      	b.n	8017954 <__ulp+0x3c>
 8017942:	f1a2 0314 	sub.w	r3, r2, #20
 8017946:	2b1e      	cmp	r3, #30
 8017948:	bfda      	itte	le
 801794a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801794e:	40da      	lsrle	r2, r3
 8017950:	2201      	movgt	r2, #1
 8017952:	2300      	movs	r3, #0
 8017954:	4619      	mov	r1, r3
 8017956:	4610      	mov	r0, r2
 8017958:	ec41 0b10 	vmov	d0, r0, r1
 801795c:	b002      	add	sp, #8
 801795e:	4770      	bx	lr
 8017960:	7ff00000 	.word	0x7ff00000

08017964 <__b2d>:
 8017964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017968:	6906      	ldr	r6, [r0, #16]
 801796a:	f100 0814 	add.w	r8, r0, #20
 801796e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8017972:	1f37      	subs	r7, r6, #4
 8017974:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8017978:	4610      	mov	r0, r2
 801797a:	f7ff fd4b 	bl	8017414 <__hi0bits>
 801797e:	f1c0 0320 	rsb	r3, r0, #32
 8017982:	280a      	cmp	r0, #10
 8017984:	600b      	str	r3, [r1, #0]
 8017986:	491b      	ldr	r1, [pc, #108]	@ (80179f4 <__b2d+0x90>)
 8017988:	dc15      	bgt.n	80179b6 <__b2d+0x52>
 801798a:	f1c0 0c0b 	rsb	ip, r0, #11
 801798e:	fa22 f30c 	lsr.w	r3, r2, ip
 8017992:	45b8      	cmp	r8, r7
 8017994:	ea43 0501 	orr.w	r5, r3, r1
 8017998:	bf34      	ite	cc
 801799a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801799e:	2300      	movcs	r3, #0
 80179a0:	3015      	adds	r0, #21
 80179a2:	fa02 f000 	lsl.w	r0, r2, r0
 80179a6:	fa23 f30c 	lsr.w	r3, r3, ip
 80179aa:	4303      	orrs	r3, r0
 80179ac:	461c      	mov	r4, r3
 80179ae:	ec45 4b10 	vmov	d0, r4, r5
 80179b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179b6:	45b8      	cmp	r8, r7
 80179b8:	bf3a      	itte	cc
 80179ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80179be:	f1a6 0708 	subcc.w	r7, r6, #8
 80179c2:	2300      	movcs	r3, #0
 80179c4:	380b      	subs	r0, #11
 80179c6:	d012      	beq.n	80179ee <__b2d+0x8a>
 80179c8:	f1c0 0120 	rsb	r1, r0, #32
 80179cc:	fa23 f401 	lsr.w	r4, r3, r1
 80179d0:	4082      	lsls	r2, r0
 80179d2:	4322      	orrs	r2, r4
 80179d4:	4547      	cmp	r7, r8
 80179d6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80179da:	bf8c      	ite	hi
 80179dc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80179e0:	2200      	movls	r2, #0
 80179e2:	4083      	lsls	r3, r0
 80179e4:	40ca      	lsrs	r2, r1
 80179e6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80179ea:	4313      	orrs	r3, r2
 80179ec:	e7de      	b.n	80179ac <__b2d+0x48>
 80179ee:	ea42 0501 	orr.w	r5, r2, r1
 80179f2:	e7db      	b.n	80179ac <__b2d+0x48>
 80179f4:	3ff00000 	.word	0x3ff00000

080179f8 <__d2b>:
 80179f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80179fc:	460f      	mov	r7, r1
 80179fe:	2101      	movs	r1, #1
 8017a00:	ec59 8b10 	vmov	r8, r9, d0
 8017a04:	4616      	mov	r6, r2
 8017a06:	f7ff fc13 	bl	8017230 <_Balloc>
 8017a0a:	4604      	mov	r4, r0
 8017a0c:	b930      	cbnz	r0, 8017a1c <__d2b+0x24>
 8017a0e:	4602      	mov	r2, r0
 8017a10:	4b23      	ldr	r3, [pc, #140]	@ (8017aa0 <__d2b+0xa8>)
 8017a12:	4824      	ldr	r0, [pc, #144]	@ (8017aa4 <__d2b+0xac>)
 8017a14:	f240 310f 	movw	r1, #783	@ 0x30f
 8017a18:	f000 f982 	bl	8017d20 <__assert_func>
 8017a1c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017a20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017a24:	b10d      	cbz	r5, 8017a2a <__d2b+0x32>
 8017a26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8017a2a:	9301      	str	r3, [sp, #4]
 8017a2c:	f1b8 0300 	subs.w	r3, r8, #0
 8017a30:	d023      	beq.n	8017a7a <__d2b+0x82>
 8017a32:	4668      	mov	r0, sp
 8017a34:	9300      	str	r3, [sp, #0]
 8017a36:	f7ff fd0c 	bl	8017452 <__lo0bits>
 8017a3a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8017a3e:	b1d0      	cbz	r0, 8017a76 <__d2b+0x7e>
 8017a40:	f1c0 0320 	rsb	r3, r0, #32
 8017a44:	fa02 f303 	lsl.w	r3, r2, r3
 8017a48:	430b      	orrs	r3, r1
 8017a4a:	40c2      	lsrs	r2, r0
 8017a4c:	6163      	str	r3, [r4, #20]
 8017a4e:	9201      	str	r2, [sp, #4]
 8017a50:	9b01      	ldr	r3, [sp, #4]
 8017a52:	61a3      	str	r3, [r4, #24]
 8017a54:	2b00      	cmp	r3, #0
 8017a56:	bf0c      	ite	eq
 8017a58:	2201      	moveq	r2, #1
 8017a5a:	2202      	movne	r2, #2
 8017a5c:	6122      	str	r2, [r4, #16]
 8017a5e:	b1a5      	cbz	r5, 8017a8a <__d2b+0x92>
 8017a60:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8017a64:	4405      	add	r5, r0
 8017a66:	603d      	str	r5, [r7, #0]
 8017a68:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8017a6c:	6030      	str	r0, [r6, #0]
 8017a6e:	4620      	mov	r0, r4
 8017a70:	b003      	add	sp, #12
 8017a72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017a76:	6161      	str	r1, [r4, #20]
 8017a78:	e7ea      	b.n	8017a50 <__d2b+0x58>
 8017a7a:	a801      	add	r0, sp, #4
 8017a7c:	f7ff fce9 	bl	8017452 <__lo0bits>
 8017a80:	9b01      	ldr	r3, [sp, #4]
 8017a82:	6163      	str	r3, [r4, #20]
 8017a84:	3020      	adds	r0, #32
 8017a86:	2201      	movs	r2, #1
 8017a88:	e7e8      	b.n	8017a5c <__d2b+0x64>
 8017a8a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017a8e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8017a92:	6038      	str	r0, [r7, #0]
 8017a94:	6918      	ldr	r0, [r3, #16]
 8017a96:	f7ff fcbd 	bl	8017414 <__hi0bits>
 8017a9a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8017a9e:	e7e5      	b.n	8017a6c <__d2b+0x74>
 8017aa0:	08018b41 	.word	0x08018b41
 8017aa4:	08018bc9 	.word	0x08018bc9

08017aa8 <__ratio>:
 8017aa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017aac:	4688      	mov	r8, r1
 8017aae:	4669      	mov	r1, sp
 8017ab0:	4681      	mov	r9, r0
 8017ab2:	f7ff ff57 	bl	8017964 <__b2d>
 8017ab6:	a901      	add	r1, sp, #4
 8017ab8:	4640      	mov	r0, r8
 8017aba:	ec55 4b10 	vmov	r4, r5, d0
 8017abe:	f7ff ff51 	bl	8017964 <__b2d>
 8017ac2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8017ac6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8017aca:	1ad2      	subs	r2, r2, r3
 8017acc:	e9dd 3100 	ldrd	r3, r1, [sp]
 8017ad0:	1a5b      	subs	r3, r3, r1
 8017ad2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8017ad6:	ec57 6b10 	vmov	r6, r7, d0
 8017ada:	2b00      	cmp	r3, #0
 8017adc:	bfd6      	itet	le
 8017ade:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017ae2:	462a      	movgt	r2, r5
 8017ae4:	463a      	movle	r2, r7
 8017ae6:	46ab      	mov	fp, r5
 8017ae8:	46a2      	mov	sl, r4
 8017aea:	bfce      	itee	gt
 8017aec:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8017af0:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8017af4:	ee00 3a90 	vmovle	s1, r3
 8017af8:	ec4b ab17 	vmov	d7, sl, fp
 8017afc:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8017b00:	b003      	add	sp, #12
 8017b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017b06 <__copybits>:
 8017b06:	3901      	subs	r1, #1
 8017b08:	b570      	push	{r4, r5, r6, lr}
 8017b0a:	1149      	asrs	r1, r1, #5
 8017b0c:	6914      	ldr	r4, [r2, #16]
 8017b0e:	3101      	adds	r1, #1
 8017b10:	f102 0314 	add.w	r3, r2, #20
 8017b14:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017b18:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017b1c:	1f05      	subs	r5, r0, #4
 8017b1e:	42a3      	cmp	r3, r4
 8017b20:	d30c      	bcc.n	8017b3c <__copybits+0x36>
 8017b22:	1aa3      	subs	r3, r4, r2
 8017b24:	3b11      	subs	r3, #17
 8017b26:	f023 0303 	bic.w	r3, r3, #3
 8017b2a:	3211      	adds	r2, #17
 8017b2c:	42a2      	cmp	r2, r4
 8017b2e:	bf88      	it	hi
 8017b30:	2300      	movhi	r3, #0
 8017b32:	4418      	add	r0, r3
 8017b34:	2300      	movs	r3, #0
 8017b36:	4288      	cmp	r0, r1
 8017b38:	d305      	bcc.n	8017b46 <__copybits+0x40>
 8017b3a:	bd70      	pop	{r4, r5, r6, pc}
 8017b3c:	f853 6b04 	ldr.w	r6, [r3], #4
 8017b40:	f845 6f04 	str.w	r6, [r5, #4]!
 8017b44:	e7eb      	b.n	8017b1e <__copybits+0x18>
 8017b46:	f840 3b04 	str.w	r3, [r0], #4
 8017b4a:	e7f4      	b.n	8017b36 <__copybits+0x30>

08017b4c <__any_on>:
 8017b4c:	f100 0214 	add.w	r2, r0, #20
 8017b50:	6900      	ldr	r0, [r0, #16]
 8017b52:	114b      	asrs	r3, r1, #5
 8017b54:	4298      	cmp	r0, r3
 8017b56:	b510      	push	{r4, lr}
 8017b58:	db11      	blt.n	8017b7e <__any_on+0x32>
 8017b5a:	dd0a      	ble.n	8017b72 <__any_on+0x26>
 8017b5c:	f011 011f 	ands.w	r1, r1, #31
 8017b60:	d007      	beq.n	8017b72 <__any_on+0x26>
 8017b62:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017b66:	fa24 f001 	lsr.w	r0, r4, r1
 8017b6a:	fa00 f101 	lsl.w	r1, r0, r1
 8017b6e:	428c      	cmp	r4, r1
 8017b70:	d10b      	bne.n	8017b8a <__any_on+0x3e>
 8017b72:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017b76:	4293      	cmp	r3, r2
 8017b78:	d803      	bhi.n	8017b82 <__any_on+0x36>
 8017b7a:	2000      	movs	r0, #0
 8017b7c:	bd10      	pop	{r4, pc}
 8017b7e:	4603      	mov	r3, r0
 8017b80:	e7f7      	b.n	8017b72 <__any_on+0x26>
 8017b82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017b86:	2900      	cmp	r1, #0
 8017b88:	d0f5      	beq.n	8017b76 <__any_on+0x2a>
 8017b8a:	2001      	movs	r0, #1
 8017b8c:	e7f6      	b.n	8017b7c <__any_on+0x30>

08017b8e <__ascii_wctomb>:
 8017b8e:	4603      	mov	r3, r0
 8017b90:	4608      	mov	r0, r1
 8017b92:	b141      	cbz	r1, 8017ba6 <__ascii_wctomb+0x18>
 8017b94:	2aff      	cmp	r2, #255	@ 0xff
 8017b96:	d904      	bls.n	8017ba2 <__ascii_wctomb+0x14>
 8017b98:	228a      	movs	r2, #138	@ 0x8a
 8017b9a:	601a      	str	r2, [r3, #0]
 8017b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8017ba0:	4770      	bx	lr
 8017ba2:	700a      	strb	r2, [r1, #0]
 8017ba4:	2001      	movs	r0, #1
 8017ba6:	4770      	bx	lr

08017ba8 <__sflush_r>:
 8017ba8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017bb0:	0716      	lsls	r6, r2, #28
 8017bb2:	4605      	mov	r5, r0
 8017bb4:	460c      	mov	r4, r1
 8017bb6:	d454      	bmi.n	8017c62 <__sflush_r+0xba>
 8017bb8:	684b      	ldr	r3, [r1, #4]
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	dc02      	bgt.n	8017bc4 <__sflush_r+0x1c>
 8017bbe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017bc0:	2b00      	cmp	r3, #0
 8017bc2:	dd48      	ble.n	8017c56 <__sflush_r+0xae>
 8017bc4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017bc6:	2e00      	cmp	r6, #0
 8017bc8:	d045      	beq.n	8017c56 <__sflush_r+0xae>
 8017bca:	2300      	movs	r3, #0
 8017bcc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017bd0:	682f      	ldr	r7, [r5, #0]
 8017bd2:	6a21      	ldr	r1, [r4, #32]
 8017bd4:	602b      	str	r3, [r5, #0]
 8017bd6:	d030      	beq.n	8017c3a <__sflush_r+0x92>
 8017bd8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017bda:	89a3      	ldrh	r3, [r4, #12]
 8017bdc:	0759      	lsls	r1, r3, #29
 8017bde:	d505      	bpl.n	8017bec <__sflush_r+0x44>
 8017be0:	6863      	ldr	r3, [r4, #4]
 8017be2:	1ad2      	subs	r2, r2, r3
 8017be4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017be6:	b10b      	cbz	r3, 8017bec <__sflush_r+0x44>
 8017be8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017bea:	1ad2      	subs	r2, r2, r3
 8017bec:	2300      	movs	r3, #0
 8017bee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017bf0:	6a21      	ldr	r1, [r4, #32]
 8017bf2:	4628      	mov	r0, r5
 8017bf4:	47b0      	blx	r6
 8017bf6:	1c43      	adds	r3, r0, #1
 8017bf8:	89a3      	ldrh	r3, [r4, #12]
 8017bfa:	d106      	bne.n	8017c0a <__sflush_r+0x62>
 8017bfc:	6829      	ldr	r1, [r5, #0]
 8017bfe:	291d      	cmp	r1, #29
 8017c00:	d82b      	bhi.n	8017c5a <__sflush_r+0xb2>
 8017c02:	4a2a      	ldr	r2, [pc, #168]	@ (8017cac <__sflush_r+0x104>)
 8017c04:	410a      	asrs	r2, r1
 8017c06:	07d6      	lsls	r6, r2, #31
 8017c08:	d427      	bmi.n	8017c5a <__sflush_r+0xb2>
 8017c0a:	2200      	movs	r2, #0
 8017c0c:	6062      	str	r2, [r4, #4]
 8017c0e:	04d9      	lsls	r1, r3, #19
 8017c10:	6922      	ldr	r2, [r4, #16]
 8017c12:	6022      	str	r2, [r4, #0]
 8017c14:	d504      	bpl.n	8017c20 <__sflush_r+0x78>
 8017c16:	1c42      	adds	r2, r0, #1
 8017c18:	d101      	bne.n	8017c1e <__sflush_r+0x76>
 8017c1a:	682b      	ldr	r3, [r5, #0]
 8017c1c:	b903      	cbnz	r3, 8017c20 <__sflush_r+0x78>
 8017c1e:	6560      	str	r0, [r4, #84]	@ 0x54
 8017c20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017c22:	602f      	str	r7, [r5, #0]
 8017c24:	b1b9      	cbz	r1, 8017c56 <__sflush_r+0xae>
 8017c26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017c2a:	4299      	cmp	r1, r3
 8017c2c:	d002      	beq.n	8017c34 <__sflush_r+0x8c>
 8017c2e:	4628      	mov	r0, r5
 8017c30:	f7fe feba 	bl	80169a8 <_free_r>
 8017c34:	2300      	movs	r3, #0
 8017c36:	6363      	str	r3, [r4, #52]	@ 0x34
 8017c38:	e00d      	b.n	8017c56 <__sflush_r+0xae>
 8017c3a:	2301      	movs	r3, #1
 8017c3c:	4628      	mov	r0, r5
 8017c3e:	47b0      	blx	r6
 8017c40:	4602      	mov	r2, r0
 8017c42:	1c50      	adds	r0, r2, #1
 8017c44:	d1c9      	bne.n	8017bda <__sflush_r+0x32>
 8017c46:	682b      	ldr	r3, [r5, #0]
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	d0c6      	beq.n	8017bda <__sflush_r+0x32>
 8017c4c:	2b1d      	cmp	r3, #29
 8017c4e:	d001      	beq.n	8017c54 <__sflush_r+0xac>
 8017c50:	2b16      	cmp	r3, #22
 8017c52:	d11e      	bne.n	8017c92 <__sflush_r+0xea>
 8017c54:	602f      	str	r7, [r5, #0]
 8017c56:	2000      	movs	r0, #0
 8017c58:	e022      	b.n	8017ca0 <__sflush_r+0xf8>
 8017c5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017c5e:	b21b      	sxth	r3, r3
 8017c60:	e01b      	b.n	8017c9a <__sflush_r+0xf2>
 8017c62:	690f      	ldr	r7, [r1, #16]
 8017c64:	2f00      	cmp	r7, #0
 8017c66:	d0f6      	beq.n	8017c56 <__sflush_r+0xae>
 8017c68:	0793      	lsls	r3, r2, #30
 8017c6a:	680e      	ldr	r6, [r1, #0]
 8017c6c:	bf08      	it	eq
 8017c6e:	694b      	ldreq	r3, [r1, #20]
 8017c70:	600f      	str	r7, [r1, #0]
 8017c72:	bf18      	it	ne
 8017c74:	2300      	movne	r3, #0
 8017c76:	eba6 0807 	sub.w	r8, r6, r7
 8017c7a:	608b      	str	r3, [r1, #8]
 8017c7c:	f1b8 0f00 	cmp.w	r8, #0
 8017c80:	dde9      	ble.n	8017c56 <__sflush_r+0xae>
 8017c82:	6a21      	ldr	r1, [r4, #32]
 8017c84:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017c86:	4643      	mov	r3, r8
 8017c88:	463a      	mov	r2, r7
 8017c8a:	4628      	mov	r0, r5
 8017c8c:	47b0      	blx	r6
 8017c8e:	2800      	cmp	r0, #0
 8017c90:	dc08      	bgt.n	8017ca4 <__sflush_r+0xfc>
 8017c92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017c9a:	81a3      	strh	r3, [r4, #12]
 8017c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8017ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ca4:	4407      	add	r7, r0
 8017ca6:	eba8 0800 	sub.w	r8, r8, r0
 8017caa:	e7e7      	b.n	8017c7c <__sflush_r+0xd4>
 8017cac:	dfbffffe 	.word	0xdfbffffe

08017cb0 <_fflush_r>:
 8017cb0:	b538      	push	{r3, r4, r5, lr}
 8017cb2:	690b      	ldr	r3, [r1, #16]
 8017cb4:	4605      	mov	r5, r0
 8017cb6:	460c      	mov	r4, r1
 8017cb8:	b913      	cbnz	r3, 8017cc0 <_fflush_r+0x10>
 8017cba:	2500      	movs	r5, #0
 8017cbc:	4628      	mov	r0, r5
 8017cbe:	bd38      	pop	{r3, r4, r5, pc}
 8017cc0:	b118      	cbz	r0, 8017cca <_fflush_r+0x1a>
 8017cc2:	6a03      	ldr	r3, [r0, #32]
 8017cc4:	b90b      	cbnz	r3, 8017cca <_fflush_r+0x1a>
 8017cc6:	f7fe fd45 	bl	8016754 <__sinit>
 8017cca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017cce:	2b00      	cmp	r3, #0
 8017cd0:	d0f3      	beq.n	8017cba <_fflush_r+0xa>
 8017cd2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017cd4:	07d0      	lsls	r0, r2, #31
 8017cd6:	d404      	bmi.n	8017ce2 <_fflush_r+0x32>
 8017cd8:	0599      	lsls	r1, r3, #22
 8017cda:	d402      	bmi.n	8017ce2 <_fflush_r+0x32>
 8017cdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017cde:	f7fe fe4a 	bl	8016976 <__retarget_lock_acquire_recursive>
 8017ce2:	4628      	mov	r0, r5
 8017ce4:	4621      	mov	r1, r4
 8017ce6:	f7ff ff5f 	bl	8017ba8 <__sflush_r>
 8017cea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017cec:	07da      	lsls	r2, r3, #31
 8017cee:	4605      	mov	r5, r0
 8017cf0:	d4e4      	bmi.n	8017cbc <_fflush_r+0xc>
 8017cf2:	89a3      	ldrh	r3, [r4, #12]
 8017cf4:	059b      	lsls	r3, r3, #22
 8017cf6:	d4e1      	bmi.n	8017cbc <_fflush_r+0xc>
 8017cf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017cfa:	f7fe fe3d 	bl	8016978 <__retarget_lock_release_recursive>
 8017cfe:	e7dd      	b.n	8017cbc <_fflush_r+0xc>

08017d00 <_sbrk_r>:
 8017d00:	b538      	push	{r3, r4, r5, lr}
 8017d02:	4d06      	ldr	r5, [pc, #24]	@ (8017d1c <_sbrk_r+0x1c>)
 8017d04:	2300      	movs	r3, #0
 8017d06:	4604      	mov	r4, r0
 8017d08:	4608      	mov	r0, r1
 8017d0a:	602b      	str	r3, [r5, #0]
 8017d0c:	f7ea fab0 	bl	8002270 <_sbrk>
 8017d10:	1c43      	adds	r3, r0, #1
 8017d12:	d102      	bne.n	8017d1a <_sbrk_r+0x1a>
 8017d14:	682b      	ldr	r3, [r5, #0]
 8017d16:	b103      	cbz	r3, 8017d1a <_sbrk_r+0x1a>
 8017d18:	6023      	str	r3, [r4, #0]
 8017d1a:	bd38      	pop	{r3, r4, r5, pc}
 8017d1c:	24006754 	.word	0x24006754

08017d20 <__assert_func>:
 8017d20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017d22:	4614      	mov	r4, r2
 8017d24:	461a      	mov	r2, r3
 8017d26:	4b09      	ldr	r3, [pc, #36]	@ (8017d4c <__assert_func+0x2c>)
 8017d28:	681b      	ldr	r3, [r3, #0]
 8017d2a:	4605      	mov	r5, r0
 8017d2c:	68d8      	ldr	r0, [r3, #12]
 8017d2e:	b954      	cbnz	r4, 8017d46 <__assert_func+0x26>
 8017d30:	4b07      	ldr	r3, [pc, #28]	@ (8017d50 <__assert_func+0x30>)
 8017d32:	461c      	mov	r4, r3
 8017d34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017d38:	9100      	str	r1, [sp, #0]
 8017d3a:	462b      	mov	r3, r5
 8017d3c:	4905      	ldr	r1, [pc, #20]	@ (8017d54 <__assert_func+0x34>)
 8017d3e:	f000 f829 	bl	8017d94 <fiprintf>
 8017d42:	f000 f839 	bl	8017db8 <abort>
 8017d46:	4b04      	ldr	r3, [pc, #16]	@ (8017d58 <__assert_func+0x38>)
 8017d48:	e7f4      	b.n	8017d34 <__assert_func+0x14>
 8017d4a:	bf00      	nop
 8017d4c:	24000240 	.word	0x24000240
 8017d50:	08018d5b 	.word	0x08018d5b
 8017d54:	08018d2d 	.word	0x08018d2d
 8017d58:	08018d20 	.word	0x08018d20

08017d5c <_calloc_r>:
 8017d5c:	b570      	push	{r4, r5, r6, lr}
 8017d5e:	fba1 5402 	umull	r5, r4, r1, r2
 8017d62:	b93c      	cbnz	r4, 8017d74 <_calloc_r+0x18>
 8017d64:	4629      	mov	r1, r5
 8017d66:	f7ff f9c5 	bl	80170f4 <_malloc_r>
 8017d6a:	4606      	mov	r6, r0
 8017d6c:	b928      	cbnz	r0, 8017d7a <_calloc_r+0x1e>
 8017d6e:	2600      	movs	r6, #0
 8017d70:	4630      	mov	r0, r6
 8017d72:	bd70      	pop	{r4, r5, r6, pc}
 8017d74:	220c      	movs	r2, #12
 8017d76:	6002      	str	r2, [r0, #0]
 8017d78:	e7f9      	b.n	8017d6e <_calloc_r+0x12>
 8017d7a:	462a      	mov	r2, r5
 8017d7c:	4621      	mov	r1, r4
 8017d7e:	f7fe fd62 	bl	8016846 <memset>
 8017d82:	e7f5      	b.n	8017d70 <_calloc_r+0x14>

08017d84 <malloc>:
 8017d84:	4b02      	ldr	r3, [pc, #8]	@ (8017d90 <malloc+0xc>)
 8017d86:	4601      	mov	r1, r0
 8017d88:	6818      	ldr	r0, [r3, #0]
 8017d8a:	f7ff b9b3 	b.w	80170f4 <_malloc_r>
 8017d8e:	bf00      	nop
 8017d90:	24000240 	.word	0x24000240

08017d94 <fiprintf>:
 8017d94:	b40e      	push	{r1, r2, r3}
 8017d96:	b503      	push	{r0, r1, lr}
 8017d98:	4601      	mov	r1, r0
 8017d9a:	ab03      	add	r3, sp, #12
 8017d9c:	4805      	ldr	r0, [pc, #20]	@ (8017db4 <fiprintf+0x20>)
 8017d9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017da2:	6800      	ldr	r0, [r0, #0]
 8017da4:	9301      	str	r3, [sp, #4]
 8017da6:	f000 f837 	bl	8017e18 <_vfiprintf_r>
 8017daa:	b002      	add	sp, #8
 8017dac:	f85d eb04 	ldr.w	lr, [sp], #4
 8017db0:	b003      	add	sp, #12
 8017db2:	4770      	bx	lr
 8017db4:	24000240 	.word	0x24000240

08017db8 <abort>:
 8017db8:	b508      	push	{r3, lr}
 8017dba:	2006      	movs	r0, #6
 8017dbc:	f000 fb8e 	bl	80184dc <raise>
 8017dc0:	2001      	movs	r0, #1
 8017dc2:	f7ea f9dd 	bl	8002180 <_exit>

08017dc6 <__sfputc_r>:
 8017dc6:	6893      	ldr	r3, [r2, #8]
 8017dc8:	3b01      	subs	r3, #1
 8017dca:	2b00      	cmp	r3, #0
 8017dcc:	b410      	push	{r4}
 8017dce:	6093      	str	r3, [r2, #8]
 8017dd0:	da08      	bge.n	8017de4 <__sfputc_r+0x1e>
 8017dd2:	6994      	ldr	r4, [r2, #24]
 8017dd4:	42a3      	cmp	r3, r4
 8017dd6:	db01      	blt.n	8017ddc <__sfputc_r+0x16>
 8017dd8:	290a      	cmp	r1, #10
 8017dda:	d103      	bne.n	8017de4 <__sfputc_r+0x1e>
 8017ddc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017de0:	f000 bac0 	b.w	8018364 <__swbuf_r>
 8017de4:	6813      	ldr	r3, [r2, #0]
 8017de6:	1c58      	adds	r0, r3, #1
 8017de8:	6010      	str	r0, [r2, #0]
 8017dea:	7019      	strb	r1, [r3, #0]
 8017dec:	4608      	mov	r0, r1
 8017dee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017df2:	4770      	bx	lr

08017df4 <__sfputs_r>:
 8017df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017df6:	4606      	mov	r6, r0
 8017df8:	460f      	mov	r7, r1
 8017dfa:	4614      	mov	r4, r2
 8017dfc:	18d5      	adds	r5, r2, r3
 8017dfe:	42ac      	cmp	r4, r5
 8017e00:	d101      	bne.n	8017e06 <__sfputs_r+0x12>
 8017e02:	2000      	movs	r0, #0
 8017e04:	e007      	b.n	8017e16 <__sfputs_r+0x22>
 8017e06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e0a:	463a      	mov	r2, r7
 8017e0c:	4630      	mov	r0, r6
 8017e0e:	f7ff ffda 	bl	8017dc6 <__sfputc_r>
 8017e12:	1c43      	adds	r3, r0, #1
 8017e14:	d1f3      	bne.n	8017dfe <__sfputs_r+0xa>
 8017e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017e18 <_vfiprintf_r>:
 8017e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e1c:	460d      	mov	r5, r1
 8017e1e:	b09d      	sub	sp, #116	@ 0x74
 8017e20:	4614      	mov	r4, r2
 8017e22:	4698      	mov	r8, r3
 8017e24:	4606      	mov	r6, r0
 8017e26:	b118      	cbz	r0, 8017e30 <_vfiprintf_r+0x18>
 8017e28:	6a03      	ldr	r3, [r0, #32]
 8017e2a:	b90b      	cbnz	r3, 8017e30 <_vfiprintf_r+0x18>
 8017e2c:	f7fe fc92 	bl	8016754 <__sinit>
 8017e30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017e32:	07d9      	lsls	r1, r3, #31
 8017e34:	d405      	bmi.n	8017e42 <_vfiprintf_r+0x2a>
 8017e36:	89ab      	ldrh	r3, [r5, #12]
 8017e38:	059a      	lsls	r2, r3, #22
 8017e3a:	d402      	bmi.n	8017e42 <_vfiprintf_r+0x2a>
 8017e3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017e3e:	f7fe fd9a 	bl	8016976 <__retarget_lock_acquire_recursive>
 8017e42:	89ab      	ldrh	r3, [r5, #12]
 8017e44:	071b      	lsls	r3, r3, #28
 8017e46:	d501      	bpl.n	8017e4c <_vfiprintf_r+0x34>
 8017e48:	692b      	ldr	r3, [r5, #16]
 8017e4a:	b99b      	cbnz	r3, 8017e74 <_vfiprintf_r+0x5c>
 8017e4c:	4629      	mov	r1, r5
 8017e4e:	4630      	mov	r0, r6
 8017e50:	f000 fac6 	bl	80183e0 <__swsetup_r>
 8017e54:	b170      	cbz	r0, 8017e74 <_vfiprintf_r+0x5c>
 8017e56:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017e58:	07dc      	lsls	r4, r3, #31
 8017e5a:	d504      	bpl.n	8017e66 <_vfiprintf_r+0x4e>
 8017e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8017e60:	b01d      	add	sp, #116	@ 0x74
 8017e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e66:	89ab      	ldrh	r3, [r5, #12]
 8017e68:	0598      	lsls	r0, r3, #22
 8017e6a:	d4f7      	bmi.n	8017e5c <_vfiprintf_r+0x44>
 8017e6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017e6e:	f7fe fd83 	bl	8016978 <__retarget_lock_release_recursive>
 8017e72:	e7f3      	b.n	8017e5c <_vfiprintf_r+0x44>
 8017e74:	2300      	movs	r3, #0
 8017e76:	9309      	str	r3, [sp, #36]	@ 0x24
 8017e78:	2320      	movs	r3, #32
 8017e7a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017e7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017e82:	2330      	movs	r3, #48	@ 0x30
 8017e84:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018034 <_vfiprintf_r+0x21c>
 8017e88:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017e8c:	f04f 0901 	mov.w	r9, #1
 8017e90:	4623      	mov	r3, r4
 8017e92:	469a      	mov	sl, r3
 8017e94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017e98:	b10a      	cbz	r2, 8017e9e <_vfiprintf_r+0x86>
 8017e9a:	2a25      	cmp	r2, #37	@ 0x25
 8017e9c:	d1f9      	bne.n	8017e92 <_vfiprintf_r+0x7a>
 8017e9e:	ebba 0b04 	subs.w	fp, sl, r4
 8017ea2:	d00b      	beq.n	8017ebc <_vfiprintf_r+0xa4>
 8017ea4:	465b      	mov	r3, fp
 8017ea6:	4622      	mov	r2, r4
 8017ea8:	4629      	mov	r1, r5
 8017eaa:	4630      	mov	r0, r6
 8017eac:	f7ff ffa2 	bl	8017df4 <__sfputs_r>
 8017eb0:	3001      	adds	r0, #1
 8017eb2:	f000 80a7 	beq.w	8018004 <_vfiprintf_r+0x1ec>
 8017eb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017eb8:	445a      	add	r2, fp
 8017eba:	9209      	str	r2, [sp, #36]	@ 0x24
 8017ebc:	f89a 3000 	ldrb.w	r3, [sl]
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	f000 809f 	beq.w	8018004 <_vfiprintf_r+0x1ec>
 8017ec6:	2300      	movs	r3, #0
 8017ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8017ecc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017ed0:	f10a 0a01 	add.w	sl, sl, #1
 8017ed4:	9304      	str	r3, [sp, #16]
 8017ed6:	9307      	str	r3, [sp, #28]
 8017ed8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017edc:	931a      	str	r3, [sp, #104]	@ 0x68
 8017ede:	4654      	mov	r4, sl
 8017ee0:	2205      	movs	r2, #5
 8017ee2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ee6:	4853      	ldr	r0, [pc, #332]	@ (8018034 <_vfiprintf_r+0x21c>)
 8017ee8:	f7e8 fa12 	bl	8000310 <memchr>
 8017eec:	9a04      	ldr	r2, [sp, #16]
 8017eee:	b9d8      	cbnz	r0, 8017f28 <_vfiprintf_r+0x110>
 8017ef0:	06d1      	lsls	r1, r2, #27
 8017ef2:	bf44      	itt	mi
 8017ef4:	2320      	movmi	r3, #32
 8017ef6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017efa:	0713      	lsls	r3, r2, #28
 8017efc:	bf44      	itt	mi
 8017efe:	232b      	movmi	r3, #43	@ 0x2b
 8017f00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017f04:	f89a 3000 	ldrb.w	r3, [sl]
 8017f08:	2b2a      	cmp	r3, #42	@ 0x2a
 8017f0a:	d015      	beq.n	8017f38 <_vfiprintf_r+0x120>
 8017f0c:	9a07      	ldr	r2, [sp, #28]
 8017f0e:	4654      	mov	r4, sl
 8017f10:	2000      	movs	r0, #0
 8017f12:	f04f 0c0a 	mov.w	ip, #10
 8017f16:	4621      	mov	r1, r4
 8017f18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017f1c:	3b30      	subs	r3, #48	@ 0x30
 8017f1e:	2b09      	cmp	r3, #9
 8017f20:	d94b      	bls.n	8017fba <_vfiprintf_r+0x1a2>
 8017f22:	b1b0      	cbz	r0, 8017f52 <_vfiprintf_r+0x13a>
 8017f24:	9207      	str	r2, [sp, #28]
 8017f26:	e014      	b.n	8017f52 <_vfiprintf_r+0x13a>
 8017f28:	eba0 0308 	sub.w	r3, r0, r8
 8017f2c:	fa09 f303 	lsl.w	r3, r9, r3
 8017f30:	4313      	orrs	r3, r2
 8017f32:	9304      	str	r3, [sp, #16]
 8017f34:	46a2      	mov	sl, r4
 8017f36:	e7d2      	b.n	8017ede <_vfiprintf_r+0xc6>
 8017f38:	9b03      	ldr	r3, [sp, #12]
 8017f3a:	1d19      	adds	r1, r3, #4
 8017f3c:	681b      	ldr	r3, [r3, #0]
 8017f3e:	9103      	str	r1, [sp, #12]
 8017f40:	2b00      	cmp	r3, #0
 8017f42:	bfbb      	ittet	lt
 8017f44:	425b      	neglt	r3, r3
 8017f46:	f042 0202 	orrlt.w	r2, r2, #2
 8017f4a:	9307      	strge	r3, [sp, #28]
 8017f4c:	9307      	strlt	r3, [sp, #28]
 8017f4e:	bfb8      	it	lt
 8017f50:	9204      	strlt	r2, [sp, #16]
 8017f52:	7823      	ldrb	r3, [r4, #0]
 8017f54:	2b2e      	cmp	r3, #46	@ 0x2e
 8017f56:	d10a      	bne.n	8017f6e <_vfiprintf_r+0x156>
 8017f58:	7863      	ldrb	r3, [r4, #1]
 8017f5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8017f5c:	d132      	bne.n	8017fc4 <_vfiprintf_r+0x1ac>
 8017f5e:	9b03      	ldr	r3, [sp, #12]
 8017f60:	1d1a      	adds	r2, r3, #4
 8017f62:	681b      	ldr	r3, [r3, #0]
 8017f64:	9203      	str	r2, [sp, #12]
 8017f66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017f6a:	3402      	adds	r4, #2
 8017f6c:	9305      	str	r3, [sp, #20]
 8017f6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018044 <_vfiprintf_r+0x22c>
 8017f72:	7821      	ldrb	r1, [r4, #0]
 8017f74:	2203      	movs	r2, #3
 8017f76:	4650      	mov	r0, sl
 8017f78:	f7e8 f9ca 	bl	8000310 <memchr>
 8017f7c:	b138      	cbz	r0, 8017f8e <_vfiprintf_r+0x176>
 8017f7e:	9b04      	ldr	r3, [sp, #16]
 8017f80:	eba0 000a 	sub.w	r0, r0, sl
 8017f84:	2240      	movs	r2, #64	@ 0x40
 8017f86:	4082      	lsls	r2, r0
 8017f88:	4313      	orrs	r3, r2
 8017f8a:	3401      	adds	r4, #1
 8017f8c:	9304      	str	r3, [sp, #16]
 8017f8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017f92:	4829      	ldr	r0, [pc, #164]	@ (8018038 <_vfiprintf_r+0x220>)
 8017f94:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017f98:	2206      	movs	r2, #6
 8017f9a:	f7e8 f9b9 	bl	8000310 <memchr>
 8017f9e:	2800      	cmp	r0, #0
 8017fa0:	d03f      	beq.n	8018022 <_vfiprintf_r+0x20a>
 8017fa2:	4b26      	ldr	r3, [pc, #152]	@ (801803c <_vfiprintf_r+0x224>)
 8017fa4:	bb1b      	cbnz	r3, 8017fee <_vfiprintf_r+0x1d6>
 8017fa6:	9b03      	ldr	r3, [sp, #12]
 8017fa8:	3307      	adds	r3, #7
 8017faa:	f023 0307 	bic.w	r3, r3, #7
 8017fae:	3308      	adds	r3, #8
 8017fb0:	9303      	str	r3, [sp, #12]
 8017fb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017fb4:	443b      	add	r3, r7
 8017fb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8017fb8:	e76a      	b.n	8017e90 <_vfiprintf_r+0x78>
 8017fba:	fb0c 3202 	mla	r2, ip, r2, r3
 8017fbe:	460c      	mov	r4, r1
 8017fc0:	2001      	movs	r0, #1
 8017fc2:	e7a8      	b.n	8017f16 <_vfiprintf_r+0xfe>
 8017fc4:	2300      	movs	r3, #0
 8017fc6:	3401      	adds	r4, #1
 8017fc8:	9305      	str	r3, [sp, #20]
 8017fca:	4619      	mov	r1, r3
 8017fcc:	f04f 0c0a 	mov.w	ip, #10
 8017fd0:	4620      	mov	r0, r4
 8017fd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017fd6:	3a30      	subs	r2, #48	@ 0x30
 8017fd8:	2a09      	cmp	r2, #9
 8017fda:	d903      	bls.n	8017fe4 <_vfiprintf_r+0x1cc>
 8017fdc:	2b00      	cmp	r3, #0
 8017fde:	d0c6      	beq.n	8017f6e <_vfiprintf_r+0x156>
 8017fe0:	9105      	str	r1, [sp, #20]
 8017fe2:	e7c4      	b.n	8017f6e <_vfiprintf_r+0x156>
 8017fe4:	fb0c 2101 	mla	r1, ip, r1, r2
 8017fe8:	4604      	mov	r4, r0
 8017fea:	2301      	movs	r3, #1
 8017fec:	e7f0      	b.n	8017fd0 <_vfiprintf_r+0x1b8>
 8017fee:	ab03      	add	r3, sp, #12
 8017ff0:	9300      	str	r3, [sp, #0]
 8017ff2:	462a      	mov	r2, r5
 8017ff4:	4b12      	ldr	r3, [pc, #72]	@ (8018040 <_vfiprintf_r+0x228>)
 8017ff6:	a904      	add	r1, sp, #16
 8017ff8:	4630      	mov	r0, r6
 8017ffa:	f3af 8000 	nop.w
 8017ffe:	4607      	mov	r7, r0
 8018000:	1c78      	adds	r0, r7, #1
 8018002:	d1d6      	bne.n	8017fb2 <_vfiprintf_r+0x19a>
 8018004:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018006:	07d9      	lsls	r1, r3, #31
 8018008:	d405      	bmi.n	8018016 <_vfiprintf_r+0x1fe>
 801800a:	89ab      	ldrh	r3, [r5, #12]
 801800c:	059a      	lsls	r2, r3, #22
 801800e:	d402      	bmi.n	8018016 <_vfiprintf_r+0x1fe>
 8018010:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018012:	f7fe fcb1 	bl	8016978 <__retarget_lock_release_recursive>
 8018016:	89ab      	ldrh	r3, [r5, #12]
 8018018:	065b      	lsls	r3, r3, #25
 801801a:	f53f af1f 	bmi.w	8017e5c <_vfiprintf_r+0x44>
 801801e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018020:	e71e      	b.n	8017e60 <_vfiprintf_r+0x48>
 8018022:	ab03      	add	r3, sp, #12
 8018024:	9300      	str	r3, [sp, #0]
 8018026:	462a      	mov	r2, r5
 8018028:	4b05      	ldr	r3, [pc, #20]	@ (8018040 <_vfiprintf_r+0x228>)
 801802a:	a904      	add	r1, sp, #16
 801802c:	4630      	mov	r0, r6
 801802e:	f000 f879 	bl	8018124 <_printf_i>
 8018032:	e7e4      	b.n	8017ffe <_vfiprintf_r+0x1e6>
 8018034:	08018d5c 	.word	0x08018d5c
 8018038:	08018d66 	.word	0x08018d66
 801803c:	00000000 	.word	0x00000000
 8018040:	08017df5 	.word	0x08017df5
 8018044:	08018d62 	.word	0x08018d62

08018048 <_printf_common>:
 8018048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801804c:	4616      	mov	r6, r2
 801804e:	4698      	mov	r8, r3
 8018050:	688a      	ldr	r2, [r1, #8]
 8018052:	690b      	ldr	r3, [r1, #16]
 8018054:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8018058:	4293      	cmp	r3, r2
 801805a:	bfb8      	it	lt
 801805c:	4613      	movlt	r3, r2
 801805e:	6033      	str	r3, [r6, #0]
 8018060:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8018064:	4607      	mov	r7, r0
 8018066:	460c      	mov	r4, r1
 8018068:	b10a      	cbz	r2, 801806e <_printf_common+0x26>
 801806a:	3301      	adds	r3, #1
 801806c:	6033      	str	r3, [r6, #0]
 801806e:	6823      	ldr	r3, [r4, #0]
 8018070:	0699      	lsls	r1, r3, #26
 8018072:	bf42      	ittt	mi
 8018074:	6833      	ldrmi	r3, [r6, #0]
 8018076:	3302      	addmi	r3, #2
 8018078:	6033      	strmi	r3, [r6, #0]
 801807a:	6825      	ldr	r5, [r4, #0]
 801807c:	f015 0506 	ands.w	r5, r5, #6
 8018080:	d106      	bne.n	8018090 <_printf_common+0x48>
 8018082:	f104 0a19 	add.w	sl, r4, #25
 8018086:	68e3      	ldr	r3, [r4, #12]
 8018088:	6832      	ldr	r2, [r6, #0]
 801808a:	1a9b      	subs	r3, r3, r2
 801808c:	42ab      	cmp	r3, r5
 801808e:	dc26      	bgt.n	80180de <_printf_common+0x96>
 8018090:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8018094:	6822      	ldr	r2, [r4, #0]
 8018096:	3b00      	subs	r3, #0
 8018098:	bf18      	it	ne
 801809a:	2301      	movne	r3, #1
 801809c:	0692      	lsls	r2, r2, #26
 801809e:	d42b      	bmi.n	80180f8 <_printf_common+0xb0>
 80180a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80180a4:	4641      	mov	r1, r8
 80180a6:	4638      	mov	r0, r7
 80180a8:	47c8      	blx	r9
 80180aa:	3001      	adds	r0, #1
 80180ac:	d01e      	beq.n	80180ec <_printf_common+0xa4>
 80180ae:	6823      	ldr	r3, [r4, #0]
 80180b0:	6922      	ldr	r2, [r4, #16]
 80180b2:	f003 0306 	and.w	r3, r3, #6
 80180b6:	2b04      	cmp	r3, #4
 80180b8:	bf02      	ittt	eq
 80180ba:	68e5      	ldreq	r5, [r4, #12]
 80180bc:	6833      	ldreq	r3, [r6, #0]
 80180be:	1aed      	subeq	r5, r5, r3
 80180c0:	68a3      	ldr	r3, [r4, #8]
 80180c2:	bf0c      	ite	eq
 80180c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80180c8:	2500      	movne	r5, #0
 80180ca:	4293      	cmp	r3, r2
 80180cc:	bfc4      	itt	gt
 80180ce:	1a9b      	subgt	r3, r3, r2
 80180d0:	18ed      	addgt	r5, r5, r3
 80180d2:	2600      	movs	r6, #0
 80180d4:	341a      	adds	r4, #26
 80180d6:	42b5      	cmp	r5, r6
 80180d8:	d11a      	bne.n	8018110 <_printf_common+0xc8>
 80180da:	2000      	movs	r0, #0
 80180dc:	e008      	b.n	80180f0 <_printf_common+0xa8>
 80180de:	2301      	movs	r3, #1
 80180e0:	4652      	mov	r2, sl
 80180e2:	4641      	mov	r1, r8
 80180e4:	4638      	mov	r0, r7
 80180e6:	47c8      	blx	r9
 80180e8:	3001      	adds	r0, #1
 80180ea:	d103      	bne.n	80180f4 <_printf_common+0xac>
 80180ec:	f04f 30ff 	mov.w	r0, #4294967295
 80180f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80180f4:	3501      	adds	r5, #1
 80180f6:	e7c6      	b.n	8018086 <_printf_common+0x3e>
 80180f8:	18e1      	adds	r1, r4, r3
 80180fa:	1c5a      	adds	r2, r3, #1
 80180fc:	2030      	movs	r0, #48	@ 0x30
 80180fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8018102:	4422      	add	r2, r4
 8018104:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8018108:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801810c:	3302      	adds	r3, #2
 801810e:	e7c7      	b.n	80180a0 <_printf_common+0x58>
 8018110:	2301      	movs	r3, #1
 8018112:	4622      	mov	r2, r4
 8018114:	4641      	mov	r1, r8
 8018116:	4638      	mov	r0, r7
 8018118:	47c8      	blx	r9
 801811a:	3001      	adds	r0, #1
 801811c:	d0e6      	beq.n	80180ec <_printf_common+0xa4>
 801811e:	3601      	adds	r6, #1
 8018120:	e7d9      	b.n	80180d6 <_printf_common+0x8e>
	...

08018124 <_printf_i>:
 8018124:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018128:	7e0f      	ldrb	r7, [r1, #24]
 801812a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801812c:	2f78      	cmp	r7, #120	@ 0x78
 801812e:	4691      	mov	r9, r2
 8018130:	4680      	mov	r8, r0
 8018132:	460c      	mov	r4, r1
 8018134:	469a      	mov	sl, r3
 8018136:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801813a:	d807      	bhi.n	801814c <_printf_i+0x28>
 801813c:	2f62      	cmp	r7, #98	@ 0x62
 801813e:	d80a      	bhi.n	8018156 <_printf_i+0x32>
 8018140:	2f00      	cmp	r7, #0
 8018142:	f000 80d2 	beq.w	80182ea <_printf_i+0x1c6>
 8018146:	2f58      	cmp	r7, #88	@ 0x58
 8018148:	f000 80b9 	beq.w	80182be <_printf_i+0x19a>
 801814c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018150:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8018154:	e03a      	b.n	80181cc <_printf_i+0xa8>
 8018156:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801815a:	2b15      	cmp	r3, #21
 801815c:	d8f6      	bhi.n	801814c <_printf_i+0x28>
 801815e:	a101      	add	r1, pc, #4	@ (adr r1, 8018164 <_printf_i+0x40>)
 8018160:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018164:	080181bd 	.word	0x080181bd
 8018168:	080181d1 	.word	0x080181d1
 801816c:	0801814d 	.word	0x0801814d
 8018170:	0801814d 	.word	0x0801814d
 8018174:	0801814d 	.word	0x0801814d
 8018178:	0801814d 	.word	0x0801814d
 801817c:	080181d1 	.word	0x080181d1
 8018180:	0801814d 	.word	0x0801814d
 8018184:	0801814d 	.word	0x0801814d
 8018188:	0801814d 	.word	0x0801814d
 801818c:	0801814d 	.word	0x0801814d
 8018190:	080182d1 	.word	0x080182d1
 8018194:	080181fb 	.word	0x080181fb
 8018198:	0801828b 	.word	0x0801828b
 801819c:	0801814d 	.word	0x0801814d
 80181a0:	0801814d 	.word	0x0801814d
 80181a4:	080182f3 	.word	0x080182f3
 80181a8:	0801814d 	.word	0x0801814d
 80181ac:	080181fb 	.word	0x080181fb
 80181b0:	0801814d 	.word	0x0801814d
 80181b4:	0801814d 	.word	0x0801814d
 80181b8:	08018293 	.word	0x08018293
 80181bc:	6833      	ldr	r3, [r6, #0]
 80181be:	1d1a      	adds	r2, r3, #4
 80181c0:	681b      	ldr	r3, [r3, #0]
 80181c2:	6032      	str	r2, [r6, #0]
 80181c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80181c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80181cc:	2301      	movs	r3, #1
 80181ce:	e09d      	b.n	801830c <_printf_i+0x1e8>
 80181d0:	6833      	ldr	r3, [r6, #0]
 80181d2:	6820      	ldr	r0, [r4, #0]
 80181d4:	1d19      	adds	r1, r3, #4
 80181d6:	6031      	str	r1, [r6, #0]
 80181d8:	0606      	lsls	r6, r0, #24
 80181da:	d501      	bpl.n	80181e0 <_printf_i+0xbc>
 80181dc:	681d      	ldr	r5, [r3, #0]
 80181de:	e003      	b.n	80181e8 <_printf_i+0xc4>
 80181e0:	0645      	lsls	r5, r0, #25
 80181e2:	d5fb      	bpl.n	80181dc <_printf_i+0xb8>
 80181e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80181e8:	2d00      	cmp	r5, #0
 80181ea:	da03      	bge.n	80181f4 <_printf_i+0xd0>
 80181ec:	232d      	movs	r3, #45	@ 0x2d
 80181ee:	426d      	negs	r5, r5
 80181f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80181f4:	4859      	ldr	r0, [pc, #356]	@ (801835c <_printf_i+0x238>)
 80181f6:	230a      	movs	r3, #10
 80181f8:	e011      	b.n	801821e <_printf_i+0xfa>
 80181fa:	6821      	ldr	r1, [r4, #0]
 80181fc:	6833      	ldr	r3, [r6, #0]
 80181fe:	0608      	lsls	r0, r1, #24
 8018200:	f853 5b04 	ldr.w	r5, [r3], #4
 8018204:	d402      	bmi.n	801820c <_printf_i+0xe8>
 8018206:	0649      	lsls	r1, r1, #25
 8018208:	bf48      	it	mi
 801820a:	b2ad      	uxthmi	r5, r5
 801820c:	2f6f      	cmp	r7, #111	@ 0x6f
 801820e:	4853      	ldr	r0, [pc, #332]	@ (801835c <_printf_i+0x238>)
 8018210:	6033      	str	r3, [r6, #0]
 8018212:	bf14      	ite	ne
 8018214:	230a      	movne	r3, #10
 8018216:	2308      	moveq	r3, #8
 8018218:	2100      	movs	r1, #0
 801821a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801821e:	6866      	ldr	r6, [r4, #4]
 8018220:	60a6      	str	r6, [r4, #8]
 8018222:	2e00      	cmp	r6, #0
 8018224:	bfa2      	ittt	ge
 8018226:	6821      	ldrge	r1, [r4, #0]
 8018228:	f021 0104 	bicge.w	r1, r1, #4
 801822c:	6021      	strge	r1, [r4, #0]
 801822e:	b90d      	cbnz	r5, 8018234 <_printf_i+0x110>
 8018230:	2e00      	cmp	r6, #0
 8018232:	d04b      	beq.n	80182cc <_printf_i+0x1a8>
 8018234:	4616      	mov	r6, r2
 8018236:	fbb5 f1f3 	udiv	r1, r5, r3
 801823a:	fb03 5711 	mls	r7, r3, r1, r5
 801823e:	5dc7      	ldrb	r7, [r0, r7]
 8018240:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018244:	462f      	mov	r7, r5
 8018246:	42bb      	cmp	r3, r7
 8018248:	460d      	mov	r5, r1
 801824a:	d9f4      	bls.n	8018236 <_printf_i+0x112>
 801824c:	2b08      	cmp	r3, #8
 801824e:	d10b      	bne.n	8018268 <_printf_i+0x144>
 8018250:	6823      	ldr	r3, [r4, #0]
 8018252:	07df      	lsls	r7, r3, #31
 8018254:	d508      	bpl.n	8018268 <_printf_i+0x144>
 8018256:	6923      	ldr	r3, [r4, #16]
 8018258:	6861      	ldr	r1, [r4, #4]
 801825a:	4299      	cmp	r1, r3
 801825c:	bfde      	ittt	le
 801825e:	2330      	movle	r3, #48	@ 0x30
 8018260:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018264:	f106 36ff 	addle.w	r6, r6, #4294967295
 8018268:	1b92      	subs	r2, r2, r6
 801826a:	6122      	str	r2, [r4, #16]
 801826c:	f8cd a000 	str.w	sl, [sp]
 8018270:	464b      	mov	r3, r9
 8018272:	aa03      	add	r2, sp, #12
 8018274:	4621      	mov	r1, r4
 8018276:	4640      	mov	r0, r8
 8018278:	f7ff fee6 	bl	8018048 <_printf_common>
 801827c:	3001      	adds	r0, #1
 801827e:	d14a      	bne.n	8018316 <_printf_i+0x1f2>
 8018280:	f04f 30ff 	mov.w	r0, #4294967295
 8018284:	b004      	add	sp, #16
 8018286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801828a:	6823      	ldr	r3, [r4, #0]
 801828c:	f043 0320 	orr.w	r3, r3, #32
 8018290:	6023      	str	r3, [r4, #0]
 8018292:	4833      	ldr	r0, [pc, #204]	@ (8018360 <_printf_i+0x23c>)
 8018294:	2778      	movs	r7, #120	@ 0x78
 8018296:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801829a:	6823      	ldr	r3, [r4, #0]
 801829c:	6831      	ldr	r1, [r6, #0]
 801829e:	061f      	lsls	r7, r3, #24
 80182a0:	f851 5b04 	ldr.w	r5, [r1], #4
 80182a4:	d402      	bmi.n	80182ac <_printf_i+0x188>
 80182a6:	065f      	lsls	r7, r3, #25
 80182a8:	bf48      	it	mi
 80182aa:	b2ad      	uxthmi	r5, r5
 80182ac:	6031      	str	r1, [r6, #0]
 80182ae:	07d9      	lsls	r1, r3, #31
 80182b0:	bf44      	itt	mi
 80182b2:	f043 0320 	orrmi.w	r3, r3, #32
 80182b6:	6023      	strmi	r3, [r4, #0]
 80182b8:	b11d      	cbz	r5, 80182c2 <_printf_i+0x19e>
 80182ba:	2310      	movs	r3, #16
 80182bc:	e7ac      	b.n	8018218 <_printf_i+0xf4>
 80182be:	4827      	ldr	r0, [pc, #156]	@ (801835c <_printf_i+0x238>)
 80182c0:	e7e9      	b.n	8018296 <_printf_i+0x172>
 80182c2:	6823      	ldr	r3, [r4, #0]
 80182c4:	f023 0320 	bic.w	r3, r3, #32
 80182c8:	6023      	str	r3, [r4, #0]
 80182ca:	e7f6      	b.n	80182ba <_printf_i+0x196>
 80182cc:	4616      	mov	r6, r2
 80182ce:	e7bd      	b.n	801824c <_printf_i+0x128>
 80182d0:	6833      	ldr	r3, [r6, #0]
 80182d2:	6825      	ldr	r5, [r4, #0]
 80182d4:	6961      	ldr	r1, [r4, #20]
 80182d6:	1d18      	adds	r0, r3, #4
 80182d8:	6030      	str	r0, [r6, #0]
 80182da:	062e      	lsls	r6, r5, #24
 80182dc:	681b      	ldr	r3, [r3, #0]
 80182de:	d501      	bpl.n	80182e4 <_printf_i+0x1c0>
 80182e0:	6019      	str	r1, [r3, #0]
 80182e2:	e002      	b.n	80182ea <_printf_i+0x1c6>
 80182e4:	0668      	lsls	r0, r5, #25
 80182e6:	d5fb      	bpl.n	80182e0 <_printf_i+0x1bc>
 80182e8:	8019      	strh	r1, [r3, #0]
 80182ea:	2300      	movs	r3, #0
 80182ec:	6123      	str	r3, [r4, #16]
 80182ee:	4616      	mov	r6, r2
 80182f0:	e7bc      	b.n	801826c <_printf_i+0x148>
 80182f2:	6833      	ldr	r3, [r6, #0]
 80182f4:	1d1a      	adds	r2, r3, #4
 80182f6:	6032      	str	r2, [r6, #0]
 80182f8:	681e      	ldr	r6, [r3, #0]
 80182fa:	6862      	ldr	r2, [r4, #4]
 80182fc:	2100      	movs	r1, #0
 80182fe:	4630      	mov	r0, r6
 8018300:	f7e8 f806 	bl	8000310 <memchr>
 8018304:	b108      	cbz	r0, 801830a <_printf_i+0x1e6>
 8018306:	1b80      	subs	r0, r0, r6
 8018308:	6060      	str	r0, [r4, #4]
 801830a:	6863      	ldr	r3, [r4, #4]
 801830c:	6123      	str	r3, [r4, #16]
 801830e:	2300      	movs	r3, #0
 8018310:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018314:	e7aa      	b.n	801826c <_printf_i+0x148>
 8018316:	6923      	ldr	r3, [r4, #16]
 8018318:	4632      	mov	r2, r6
 801831a:	4649      	mov	r1, r9
 801831c:	4640      	mov	r0, r8
 801831e:	47d0      	blx	sl
 8018320:	3001      	adds	r0, #1
 8018322:	d0ad      	beq.n	8018280 <_printf_i+0x15c>
 8018324:	6823      	ldr	r3, [r4, #0]
 8018326:	079b      	lsls	r3, r3, #30
 8018328:	d413      	bmi.n	8018352 <_printf_i+0x22e>
 801832a:	68e0      	ldr	r0, [r4, #12]
 801832c:	9b03      	ldr	r3, [sp, #12]
 801832e:	4298      	cmp	r0, r3
 8018330:	bfb8      	it	lt
 8018332:	4618      	movlt	r0, r3
 8018334:	e7a6      	b.n	8018284 <_printf_i+0x160>
 8018336:	2301      	movs	r3, #1
 8018338:	4632      	mov	r2, r6
 801833a:	4649      	mov	r1, r9
 801833c:	4640      	mov	r0, r8
 801833e:	47d0      	blx	sl
 8018340:	3001      	adds	r0, #1
 8018342:	d09d      	beq.n	8018280 <_printf_i+0x15c>
 8018344:	3501      	adds	r5, #1
 8018346:	68e3      	ldr	r3, [r4, #12]
 8018348:	9903      	ldr	r1, [sp, #12]
 801834a:	1a5b      	subs	r3, r3, r1
 801834c:	42ab      	cmp	r3, r5
 801834e:	dcf2      	bgt.n	8018336 <_printf_i+0x212>
 8018350:	e7eb      	b.n	801832a <_printf_i+0x206>
 8018352:	2500      	movs	r5, #0
 8018354:	f104 0619 	add.w	r6, r4, #25
 8018358:	e7f5      	b.n	8018346 <_printf_i+0x222>
 801835a:	bf00      	nop
 801835c:	08018d6d 	.word	0x08018d6d
 8018360:	08018d7e 	.word	0x08018d7e

08018364 <__swbuf_r>:
 8018364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018366:	460e      	mov	r6, r1
 8018368:	4614      	mov	r4, r2
 801836a:	4605      	mov	r5, r0
 801836c:	b118      	cbz	r0, 8018376 <__swbuf_r+0x12>
 801836e:	6a03      	ldr	r3, [r0, #32]
 8018370:	b90b      	cbnz	r3, 8018376 <__swbuf_r+0x12>
 8018372:	f7fe f9ef 	bl	8016754 <__sinit>
 8018376:	69a3      	ldr	r3, [r4, #24]
 8018378:	60a3      	str	r3, [r4, #8]
 801837a:	89a3      	ldrh	r3, [r4, #12]
 801837c:	071a      	lsls	r2, r3, #28
 801837e:	d501      	bpl.n	8018384 <__swbuf_r+0x20>
 8018380:	6923      	ldr	r3, [r4, #16]
 8018382:	b943      	cbnz	r3, 8018396 <__swbuf_r+0x32>
 8018384:	4621      	mov	r1, r4
 8018386:	4628      	mov	r0, r5
 8018388:	f000 f82a 	bl	80183e0 <__swsetup_r>
 801838c:	b118      	cbz	r0, 8018396 <__swbuf_r+0x32>
 801838e:	f04f 37ff 	mov.w	r7, #4294967295
 8018392:	4638      	mov	r0, r7
 8018394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018396:	6823      	ldr	r3, [r4, #0]
 8018398:	6922      	ldr	r2, [r4, #16]
 801839a:	1a98      	subs	r0, r3, r2
 801839c:	6963      	ldr	r3, [r4, #20]
 801839e:	b2f6      	uxtb	r6, r6
 80183a0:	4283      	cmp	r3, r0
 80183a2:	4637      	mov	r7, r6
 80183a4:	dc05      	bgt.n	80183b2 <__swbuf_r+0x4e>
 80183a6:	4621      	mov	r1, r4
 80183a8:	4628      	mov	r0, r5
 80183aa:	f7ff fc81 	bl	8017cb0 <_fflush_r>
 80183ae:	2800      	cmp	r0, #0
 80183b0:	d1ed      	bne.n	801838e <__swbuf_r+0x2a>
 80183b2:	68a3      	ldr	r3, [r4, #8]
 80183b4:	3b01      	subs	r3, #1
 80183b6:	60a3      	str	r3, [r4, #8]
 80183b8:	6823      	ldr	r3, [r4, #0]
 80183ba:	1c5a      	adds	r2, r3, #1
 80183bc:	6022      	str	r2, [r4, #0]
 80183be:	701e      	strb	r6, [r3, #0]
 80183c0:	6962      	ldr	r2, [r4, #20]
 80183c2:	1c43      	adds	r3, r0, #1
 80183c4:	429a      	cmp	r2, r3
 80183c6:	d004      	beq.n	80183d2 <__swbuf_r+0x6e>
 80183c8:	89a3      	ldrh	r3, [r4, #12]
 80183ca:	07db      	lsls	r3, r3, #31
 80183cc:	d5e1      	bpl.n	8018392 <__swbuf_r+0x2e>
 80183ce:	2e0a      	cmp	r6, #10
 80183d0:	d1df      	bne.n	8018392 <__swbuf_r+0x2e>
 80183d2:	4621      	mov	r1, r4
 80183d4:	4628      	mov	r0, r5
 80183d6:	f7ff fc6b 	bl	8017cb0 <_fflush_r>
 80183da:	2800      	cmp	r0, #0
 80183dc:	d0d9      	beq.n	8018392 <__swbuf_r+0x2e>
 80183de:	e7d6      	b.n	801838e <__swbuf_r+0x2a>

080183e0 <__swsetup_r>:
 80183e0:	b538      	push	{r3, r4, r5, lr}
 80183e2:	4b29      	ldr	r3, [pc, #164]	@ (8018488 <__swsetup_r+0xa8>)
 80183e4:	4605      	mov	r5, r0
 80183e6:	6818      	ldr	r0, [r3, #0]
 80183e8:	460c      	mov	r4, r1
 80183ea:	b118      	cbz	r0, 80183f4 <__swsetup_r+0x14>
 80183ec:	6a03      	ldr	r3, [r0, #32]
 80183ee:	b90b      	cbnz	r3, 80183f4 <__swsetup_r+0x14>
 80183f0:	f7fe f9b0 	bl	8016754 <__sinit>
 80183f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80183f8:	0719      	lsls	r1, r3, #28
 80183fa:	d422      	bmi.n	8018442 <__swsetup_r+0x62>
 80183fc:	06da      	lsls	r2, r3, #27
 80183fe:	d407      	bmi.n	8018410 <__swsetup_r+0x30>
 8018400:	2209      	movs	r2, #9
 8018402:	602a      	str	r2, [r5, #0]
 8018404:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018408:	81a3      	strh	r3, [r4, #12]
 801840a:	f04f 30ff 	mov.w	r0, #4294967295
 801840e:	e033      	b.n	8018478 <__swsetup_r+0x98>
 8018410:	0758      	lsls	r0, r3, #29
 8018412:	d512      	bpl.n	801843a <__swsetup_r+0x5a>
 8018414:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018416:	b141      	cbz	r1, 801842a <__swsetup_r+0x4a>
 8018418:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801841c:	4299      	cmp	r1, r3
 801841e:	d002      	beq.n	8018426 <__swsetup_r+0x46>
 8018420:	4628      	mov	r0, r5
 8018422:	f7fe fac1 	bl	80169a8 <_free_r>
 8018426:	2300      	movs	r3, #0
 8018428:	6363      	str	r3, [r4, #52]	@ 0x34
 801842a:	89a3      	ldrh	r3, [r4, #12]
 801842c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018430:	81a3      	strh	r3, [r4, #12]
 8018432:	2300      	movs	r3, #0
 8018434:	6063      	str	r3, [r4, #4]
 8018436:	6923      	ldr	r3, [r4, #16]
 8018438:	6023      	str	r3, [r4, #0]
 801843a:	89a3      	ldrh	r3, [r4, #12]
 801843c:	f043 0308 	orr.w	r3, r3, #8
 8018440:	81a3      	strh	r3, [r4, #12]
 8018442:	6923      	ldr	r3, [r4, #16]
 8018444:	b94b      	cbnz	r3, 801845a <__swsetup_r+0x7a>
 8018446:	89a3      	ldrh	r3, [r4, #12]
 8018448:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801844c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018450:	d003      	beq.n	801845a <__swsetup_r+0x7a>
 8018452:	4621      	mov	r1, r4
 8018454:	4628      	mov	r0, r5
 8018456:	f000 f883 	bl	8018560 <__smakebuf_r>
 801845a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801845e:	f013 0201 	ands.w	r2, r3, #1
 8018462:	d00a      	beq.n	801847a <__swsetup_r+0x9a>
 8018464:	2200      	movs	r2, #0
 8018466:	60a2      	str	r2, [r4, #8]
 8018468:	6962      	ldr	r2, [r4, #20]
 801846a:	4252      	negs	r2, r2
 801846c:	61a2      	str	r2, [r4, #24]
 801846e:	6922      	ldr	r2, [r4, #16]
 8018470:	b942      	cbnz	r2, 8018484 <__swsetup_r+0xa4>
 8018472:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8018476:	d1c5      	bne.n	8018404 <__swsetup_r+0x24>
 8018478:	bd38      	pop	{r3, r4, r5, pc}
 801847a:	0799      	lsls	r1, r3, #30
 801847c:	bf58      	it	pl
 801847e:	6962      	ldrpl	r2, [r4, #20]
 8018480:	60a2      	str	r2, [r4, #8]
 8018482:	e7f4      	b.n	801846e <__swsetup_r+0x8e>
 8018484:	2000      	movs	r0, #0
 8018486:	e7f7      	b.n	8018478 <__swsetup_r+0x98>
 8018488:	24000240 	.word	0x24000240

0801848c <_raise_r>:
 801848c:	291f      	cmp	r1, #31
 801848e:	b538      	push	{r3, r4, r5, lr}
 8018490:	4605      	mov	r5, r0
 8018492:	460c      	mov	r4, r1
 8018494:	d904      	bls.n	80184a0 <_raise_r+0x14>
 8018496:	2316      	movs	r3, #22
 8018498:	6003      	str	r3, [r0, #0]
 801849a:	f04f 30ff 	mov.w	r0, #4294967295
 801849e:	bd38      	pop	{r3, r4, r5, pc}
 80184a0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80184a2:	b112      	cbz	r2, 80184aa <_raise_r+0x1e>
 80184a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80184a8:	b94b      	cbnz	r3, 80184be <_raise_r+0x32>
 80184aa:	4628      	mov	r0, r5
 80184ac:	f000 f830 	bl	8018510 <_getpid_r>
 80184b0:	4622      	mov	r2, r4
 80184b2:	4601      	mov	r1, r0
 80184b4:	4628      	mov	r0, r5
 80184b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80184ba:	f000 b817 	b.w	80184ec <_kill_r>
 80184be:	2b01      	cmp	r3, #1
 80184c0:	d00a      	beq.n	80184d8 <_raise_r+0x4c>
 80184c2:	1c59      	adds	r1, r3, #1
 80184c4:	d103      	bne.n	80184ce <_raise_r+0x42>
 80184c6:	2316      	movs	r3, #22
 80184c8:	6003      	str	r3, [r0, #0]
 80184ca:	2001      	movs	r0, #1
 80184cc:	e7e7      	b.n	801849e <_raise_r+0x12>
 80184ce:	2100      	movs	r1, #0
 80184d0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80184d4:	4620      	mov	r0, r4
 80184d6:	4798      	blx	r3
 80184d8:	2000      	movs	r0, #0
 80184da:	e7e0      	b.n	801849e <_raise_r+0x12>

080184dc <raise>:
 80184dc:	4b02      	ldr	r3, [pc, #8]	@ (80184e8 <raise+0xc>)
 80184de:	4601      	mov	r1, r0
 80184e0:	6818      	ldr	r0, [r3, #0]
 80184e2:	f7ff bfd3 	b.w	801848c <_raise_r>
 80184e6:	bf00      	nop
 80184e8:	24000240 	.word	0x24000240

080184ec <_kill_r>:
 80184ec:	b538      	push	{r3, r4, r5, lr}
 80184ee:	4d07      	ldr	r5, [pc, #28]	@ (801850c <_kill_r+0x20>)
 80184f0:	2300      	movs	r3, #0
 80184f2:	4604      	mov	r4, r0
 80184f4:	4608      	mov	r0, r1
 80184f6:	4611      	mov	r1, r2
 80184f8:	602b      	str	r3, [r5, #0]
 80184fa:	f7e9 fe31 	bl	8002160 <_kill>
 80184fe:	1c43      	adds	r3, r0, #1
 8018500:	d102      	bne.n	8018508 <_kill_r+0x1c>
 8018502:	682b      	ldr	r3, [r5, #0]
 8018504:	b103      	cbz	r3, 8018508 <_kill_r+0x1c>
 8018506:	6023      	str	r3, [r4, #0]
 8018508:	bd38      	pop	{r3, r4, r5, pc}
 801850a:	bf00      	nop
 801850c:	24006754 	.word	0x24006754

08018510 <_getpid_r>:
 8018510:	f7e9 be1e 	b.w	8002150 <_getpid>

08018514 <__swhatbuf_r>:
 8018514:	b570      	push	{r4, r5, r6, lr}
 8018516:	460c      	mov	r4, r1
 8018518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801851c:	2900      	cmp	r1, #0
 801851e:	b096      	sub	sp, #88	@ 0x58
 8018520:	4615      	mov	r5, r2
 8018522:	461e      	mov	r6, r3
 8018524:	da0d      	bge.n	8018542 <__swhatbuf_r+0x2e>
 8018526:	89a3      	ldrh	r3, [r4, #12]
 8018528:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801852c:	f04f 0100 	mov.w	r1, #0
 8018530:	bf14      	ite	ne
 8018532:	2340      	movne	r3, #64	@ 0x40
 8018534:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018538:	2000      	movs	r0, #0
 801853a:	6031      	str	r1, [r6, #0]
 801853c:	602b      	str	r3, [r5, #0]
 801853e:	b016      	add	sp, #88	@ 0x58
 8018540:	bd70      	pop	{r4, r5, r6, pc}
 8018542:	466a      	mov	r2, sp
 8018544:	f000 f848 	bl	80185d8 <_fstat_r>
 8018548:	2800      	cmp	r0, #0
 801854a:	dbec      	blt.n	8018526 <__swhatbuf_r+0x12>
 801854c:	9901      	ldr	r1, [sp, #4]
 801854e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018552:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018556:	4259      	negs	r1, r3
 8018558:	4159      	adcs	r1, r3
 801855a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801855e:	e7eb      	b.n	8018538 <__swhatbuf_r+0x24>

08018560 <__smakebuf_r>:
 8018560:	898b      	ldrh	r3, [r1, #12]
 8018562:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018564:	079d      	lsls	r5, r3, #30
 8018566:	4606      	mov	r6, r0
 8018568:	460c      	mov	r4, r1
 801856a:	d507      	bpl.n	801857c <__smakebuf_r+0x1c>
 801856c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018570:	6023      	str	r3, [r4, #0]
 8018572:	6123      	str	r3, [r4, #16]
 8018574:	2301      	movs	r3, #1
 8018576:	6163      	str	r3, [r4, #20]
 8018578:	b003      	add	sp, #12
 801857a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801857c:	ab01      	add	r3, sp, #4
 801857e:	466a      	mov	r2, sp
 8018580:	f7ff ffc8 	bl	8018514 <__swhatbuf_r>
 8018584:	9f00      	ldr	r7, [sp, #0]
 8018586:	4605      	mov	r5, r0
 8018588:	4639      	mov	r1, r7
 801858a:	4630      	mov	r0, r6
 801858c:	f7fe fdb2 	bl	80170f4 <_malloc_r>
 8018590:	b948      	cbnz	r0, 80185a6 <__smakebuf_r+0x46>
 8018592:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018596:	059a      	lsls	r2, r3, #22
 8018598:	d4ee      	bmi.n	8018578 <__smakebuf_r+0x18>
 801859a:	f023 0303 	bic.w	r3, r3, #3
 801859e:	f043 0302 	orr.w	r3, r3, #2
 80185a2:	81a3      	strh	r3, [r4, #12]
 80185a4:	e7e2      	b.n	801856c <__smakebuf_r+0xc>
 80185a6:	89a3      	ldrh	r3, [r4, #12]
 80185a8:	6020      	str	r0, [r4, #0]
 80185aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80185ae:	81a3      	strh	r3, [r4, #12]
 80185b0:	9b01      	ldr	r3, [sp, #4]
 80185b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80185b6:	b15b      	cbz	r3, 80185d0 <__smakebuf_r+0x70>
 80185b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80185bc:	4630      	mov	r0, r6
 80185be:	f000 f81d 	bl	80185fc <_isatty_r>
 80185c2:	b128      	cbz	r0, 80185d0 <__smakebuf_r+0x70>
 80185c4:	89a3      	ldrh	r3, [r4, #12]
 80185c6:	f023 0303 	bic.w	r3, r3, #3
 80185ca:	f043 0301 	orr.w	r3, r3, #1
 80185ce:	81a3      	strh	r3, [r4, #12]
 80185d0:	89a3      	ldrh	r3, [r4, #12]
 80185d2:	431d      	orrs	r5, r3
 80185d4:	81a5      	strh	r5, [r4, #12]
 80185d6:	e7cf      	b.n	8018578 <__smakebuf_r+0x18>

080185d8 <_fstat_r>:
 80185d8:	b538      	push	{r3, r4, r5, lr}
 80185da:	4d07      	ldr	r5, [pc, #28]	@ (80185f8 <_fstat_r+0x20>)
 80185dc:	2300      	movs	r3, #0
 80185de:	4604      	mov	r4, r0
 80185e0:	4608      	mov	r0, r1
 80185e2:	4611      	mov	r1, r2
 80185e4:	602b      	str	r3, [r5, #0]
 80185e6:	f7e9 fe1b 	bl	8002220 <_fstat>
 80185ea:	1c43      	adds	r3, r0, #1
 80185ec:	d102      	bne.n	80185f4 <_fstat_r+0x1c>
 80185ee:	682b      	ldr	r3, [r5, #0]
 80185f0:	b103      	cbz	r3, 80185f4 <_fstat_r+0x1c>
 80185f2:	6023      	str	r3, [r4, #0]
 80185f4:	bd38      	pop	{r3, r4, r5, pc}
 80185f6:	bf00      	nop
 80185f8:	24006754 	.word	0x24006754

080185fc <_isatty_r>:
 80185fc:	b538      	push	{r3, r4, r5, lr}
 80185fe:	4d06      	ldr	r5, [pc, #24]	@ (8018618 <_isatty_r+0x1c>)
 8018600:	2300      	movs	r3, #0
 8018602:	4604      	mov	r4, r0
 8018604:	4608      	mov	r0, r1
 8018606:	602b      	str	r3, [r5, #0]
 8018608:	f7e9 fe1a 	bl	8002240 <_isatty>
 801860c:	1c43      	adds	r3, r0, #1
 801860e:	d102      	bne.n	8018616 <_isatty_r+0x1a>
 8018610:	682b      	ldr	r3, [r5, #0]
 8018612:	b103      	cbz	r3, 8018616 <_isatty_r+0x1a>
 8018614:	6023      	str	r3, [r4, #0]
 8018616:	bd38      	pop	{r3, r4, r5, pc}
 8018618:	24006754 	.word	0x24006754
 801861c:	00000000 	.word	0x00000000

08018620 <log>:
 8018620:	b4f0      	push	{r4, r5, r6, r7}
 8018622:	ee10 0a90 	vmov	r0, s1
 8018626:	ee10 3a10 	vmov	r3, s0
 801862a:	f04f 34ff 	mov.w	r4, #4294967295
 801862e:	429c      	cmp	r4, r3
 8018630:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 8018634:	4c70      	ldr	r4, [pc, #448]	@ (80187f8 <log+0x1d8>)
 8018636:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 801863a:	418c      	sbcs	r4, r1
 801863c:	ed2d 8b02 	vpush	{d8}
 8018640:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8018644:	d35a      	bcc.n	80186fc <log+0xdc>
 8018646:	4a6d      	ldr	r2, [pc, #436]	@ (80187fc <log+0x1dc>)
 8018648:	4290      	cmp	r0, r2
 801864a:	bf08      	it	eq
 801864c:	2b00      	cmpeq	r3, #0
 801864e:	f000 80c4 	beq.w	80187da <log+0x1ba>
 8018652:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8018656:	ee30 0b47 	vsub.f64	d0, d0, d7
 801865a:	4b69      	ldr	r3, [pc, #420]	@ (8018800 <log+0x1e0>)
 801865c:	ee20 2b00 	vmul.f64	d2, d0, d0
 8018660:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8018664:	ee20 4b02 	vmul.f64	d4, d0, d2
 8018668:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 801866c:	eea6 7b00 	vfma.f64	d7, d6, d0
 8018670:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 8018674:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 8018678:	eea6 7b02 	vfma.f64	d7, d6, d2
 801867c:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 8018680:	eea5 6b00 	vfma.f64	d6, d5, d0
 8018684:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 8018688:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 801868c:	eea5 6b02 	vfma.f64	d6, d5, d2
 8018690:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 8018694:	eea3 5b00 	vfma.f64	d5, d3, d0
 8018698:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 801869c:	eea3 5b02 	vfma.f64	d5, d3, d2
 80186a0:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 80186a4:	eea3 5b04 	vfma.f64	d5, d3, d4
 80186a8:	eea5 6b04 	vfma.f64	d6, d5, d4
 80186ac:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 80186b0:	eea6 7b04 	vfma.f64	d7, d6, d4
 80186b4:	eeb0 2b47 	vmov.f64	d2, d7
 80186b8:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 80187e0 <log+0x1c0>
 80186bc:	eeb0 6b40 	vmov.f64	d6, d0
 80186c0:	eeb0 3b40 	vmov.f64	d3, d0
 80186c4:	eea0 6b07 	vfma.f64	d6, d0, d7
 80186c8:	eea0 6b47 	vfms.f64	d6, d0, d7
 80186cc:	ee30 8b46 	vsub.f64	d8, d0, d6
 80186d0:	ee26 1b06 	vmul.f64	d1, d6, d6
 80186d4:	eea1 3b05 	vfma.f64	d3, d1, d5
 80186d8:	ee30 7b43 	vsub.f64	d7, d0, d3
 80186dc:	ee30 0b06 	vadd.f64	d0, d0, d6
 80186e0:	eea1 7b05 	vfma.f64	d7, d1, d5
 80186e4:	ee25 5b08 	vmul.f64	d5, d5, d8
 80186e8:	eea5 7b00 	vfma.f64	d7, d5, d0
 80186ec:	eea2 7b04 	vfma.f64	d7, d2, d4
 80186f0:	ee33 0b07 	vadd.f64	d0, d3, d7
 80186f4:	ecbd 8b02 	vpop	{d8}
 80186f8:	bcf0      	pop	{r4, r5, r6, r7}
 80186fa:	4770      	bx	lr
 80186fc:	f1a2 0410 	sub.w	r4, r2, #16
 8018700:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 8018704:	428c      	cmp	r4, r1
 8018706:	d923      	bls.n	8018750 <log+0x130>
 8018708:	18d9      	adds	r1, r3, r3
 801870a:	eb40 0400 	adc.w	r4, r0, r0
 801870e:	4321      	orrs	r1, r4
 8018710:	d105      	bne.n	801871e <log+0xfe>
 8018712:	ecbd 8b02 	vpop	{d8}
 8018716:	2001      	movs	r0, #1
 8018718:	bcf0      	pop	{r4, r5, r6, r7}
 801871a:	f000 b885 	b.w	8018828 <__math_divzero>
 801871e:	4939      	ldr	r1, [pc, #228]	@ (8018804 <log+0x1e4>)
 8018720:	4288      	cmp	r0, r1
 8018722:	bf08      	it	eq
 8018724:	2b00      	cmpeq	r3, #0
 8018726:	d0e5      	beq.n	80186f4 <log+0xd4>
 8018728:	0413      	lsls	r3, r2, #16
 801872a:	d403      	bmi.n	8018734 <log+0x114>
 801872c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8018730:	4393      	bics	r3, r2
 8018732:	d104      	bne.n	801873e <log+0x11e>
 8018734:	ecbd 8b02 	vpop	{d8}
 8018738:	bcf0      	pop	{r4, r5, r6, r7}
 801873a:	f000 b88d 	b.w	8018858 <__math_invalid>
 801873e:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80187e8 <log+0x1c8>
 8018742:	ee20 7b07 	vmul.f64	d7, d0, d7
 8018746:	ec53 2b17 	vmov	r2, r3, d7
 801874a:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 801874e:	4613      	mov	r3, r2
 8018750:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 8018754:	492a      	ldr	r1, [pc, #168]	@ (8018800 <log+0x1e0>)
 8018756:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 801875a:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 801875e:	f3c2 3446 	ubfx	r4, r2, #13, #7
 8018762:	0d15      	lsrs	r5, r2, #20
 8018764:	eb01 1c04 	add.w	ip, r1, r4, lsl #4
 8018768:	052d      	lsls	r5, r5, #20
 801876a:	ed9c 7b24 	vldr	d7, [ip, #144]	@ 0x90
 801876e:	1e1e      	subs	r6, r3, #0
 8018770:	1b47      	subs	r7, r0, r5
 8018772:	ec47 6b16 	vmov	d6, r6, r7
 8018776:	1512      	asrs	r2, r2, #20
 8018778:	eea7 5b06 	vfma.f64	d5, d7, d6
 801877c:	ee07 2a90 	vmov	s15, r2
 8018780:	ee25 2b05 	vmul.f64	d2, d5, d5
 8018784:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8018788:	ed91 4b00 	vldr	d4, [r1]
 801878c:	ee25 1b02 	vmul.f64	d1, d5, d2
 8018790:	ed9c 7b26 	vldr	d7, [ip, #152]	@ 0x98
 8018794:	eea4 7b06 	vfma.f64	d7, d4, d6
 8018798:	ee35 4b07 	vadd.f64	d4, d5, d7
 801879c:	ee37 0b44 	vsub.f64	d0, d7, d4
 80187a0:	ed91 7b02 	vldr	d7, [r1, #8]
 80187a4:	ee30 0b05 	vadd.f64	d0, d0, d5
 80187a8:	eea7 0b06 	vfma.f64	d0, d7, d6
 80187ac:	ed91 7b04 	vldr	d7, [r1, #16]
 80187b0:	ed91 6b08 	vldr	d6, [r1, #32]
 80187b4:	eea7 0b02 	vfma.f64	d0, d7, d2
 80187b8:	ed91 7b06 	vldr	d7, [r1, #24]
 80187bc:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 80187c0:	eea6 7b05 	vfma.f64	d7, d6, d5
 80187c4:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 80187c8:	eea3 6b05 	vfma.f64	d6, d3, d5
 80187cc:	eea6 7b02 	vfma.f64	d7, d6, d2
 80187d0:	eea1 0b07 	vfma.f64	d0, d1, d7
 80187d4:	ee30 0b04 	vadd.f64	d0, d0, d4
 80187d8:	e78c      	b.n	80186f4 <log+0xd4>
 80187da:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 80187f0 <log+0x1d0>
 80187de:	e789      	b.n	80186f4 <log+0xd4>
 80187e0:	00000000 	.word	0x00000000
 80187e4:	41a00000 	.word	0x41a00000
 80187e8:	00000000 	.word	0x00000000
 80187ec:	43300000 	.word	0x43300000
	...
 80187f8:	000308ff 	.word	0x000308ff
 80187fc:	3ff00000 	.word	0x3ff00000
 8018800:	08018d90 	.word	0x08018d90
 8018804:	7ff00000 	.word	0x7ff00000

08018808 <with_errno>:
 8018808:	b510      	push	{r4, lr}
 801880a:	ed2d 8b02 	vpush	{d8}
 801880e:	eeb0 8b40 	vmov.f64	d8, d0
 8018812:	4604      	mov	r4, r0
 8018814:	f7fe f884 	bl	8016920 <__errno>
 8018818:	eeb0 0b48 	vmov.f64	d0, d8
 801881c:	ecbd 8b02 	vpop	{d8}
 8018820:	6004      	str	r4, [r0, #0]
 8018822:	bd10      	pop	{r4, pc}
 8018824:	0000      	movs	r0, r0
	...

08018828 <__math_divzero>:
 8018828:	b082      	sub	sp, #8
 801882a:	2800      	cmp	r0, #0
 801882c:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8018830:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8018834:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8018838:	ed8d 7b00 	vstr	d7, [sp]
 801883c:	ed9d 0b00 	vldr	d0, [sp]
 8018840:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 8018850 <__math_divzero+0x28>
 8018844:	2022      	movs	r0, #34	@ 0x22
 8018846:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801884a:	b002      	add	sp, #8
 801884c:	f7ff bfdc 	b.w	8018808 <with_errno>
	...

08018858 <__math_invalid>:
 8018858:	eeb0 7b40 	vmov.f64	d7, d0
 801885c:	eeb4 7b47 	vcmp.f64	d7, d7
 8018860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018864:	ee30 6b40 	vsub.f64	d6, d0, d0
 8018868:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801886c:	d602      	bvs.n	8018874 <__math_invalid+0x1c>
 801886e:	2021      	movs	r0, #33	@ 0x21
 8018870:	f7ff bfca 	b.w	8018808 <with_errno>
 8018874:	4770      	bx	lr
	...

08018878 <_init>:
 8018878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801887a:	bf00      	nop
 801887c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801887e:	bc08      	pop	{r3}
 8018880:	469e      	mov	lr, r3
 8018882:	4770      	bx	lr

08018884 <_fini>:
 8018884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018886:	bf00      	nop
 8018888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801888a:	bc08      	pop	{r3}
 801888c:	469e      	mov	lr, r3
 801888e:	4770      	bx	lr
